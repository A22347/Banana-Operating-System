
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 3f f6 00 00       	call   c000f65f <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 93 83 02 00       	call   c00283b8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 0c 90 02 c0       	mov    ebx,0xc002900c
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 18 90 02 c0    	cmp    ebx,0xc0029018
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 58 cf 02 c0       	mov    eax,0xc002cf58
c0000049:	3d 58 cf 02 c0       	cmp    eax,0xc002cf58
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 58 cf 02 c0       	push   0xc002cf58
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 58 cf 02 c0       	mov    eax,0xc002cf58
c0000075:	2d 58 cf 02 c0       	sub    eax,0xc002cf58
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 58 cf 02 c0       	push   0xc002cf58
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 88 d5 02 c0 00 	cmp    BYTE PTR ds:0xc002d588,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 20 90 02 c0       	mov    ebx,0xc0029020
c00000bb:	81 eb 1c 90 02 c0    	sub    ebx,0xc002901c
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 1c 90 02 c0       	mov    esi,0xc002901c
c00000ca:	a1 8c d5 02 c0       	mov    eax,ds:0xc002d58c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 8c d5 02 c0       	mov    ds:0xc002d58c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 8c d5 02 c0       	mov    eax,ds:0xc002d58c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 58 cf 02 c0       	push   0xc002cf58
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 88 d5 02 c0 01 	mov    BYTE PTR ds:0xc002d588,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 90 d5 02 c0       	push   0xc002d590
c000012c:	68 58 cf 02 c0       	push   0xc002cf58
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 f3 ce 01 00       	call   c001d296 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 8a 20 01 00       	call   c0012445 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 d1 ce 01 00       	call   c001d296 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 79 d3 01 00       	call   c001d75d <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 8f d9 01 00       	call   c001dd7c <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 d0 d9 02 c0 	lgdtd  ds:0xc002d9d0
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 f3 3d 01 00       	call   c00143d5 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 a8 d5 02 c0       	mov    ds:0xc002d5a8,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 a8 d5 02 c0    	mov    DWORD PTR ds:0xc002d5a8,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d a8 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5a8
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 40 90 02 c0 02 	test   BYTE PTR [edx-0x3ffd6fc0],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 40 90 02 c0 01 	test   BYTE PTR [edx-0x3ffd6fc0],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 40 90 02 c0 08 	test   BYTE PTR [edx-0x3ffd6fc0],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 40 90 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6fc0],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 40 90 02 c0 01 	test   BYTE PTR [edx-0x3ffd6fc0],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d c0 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d5c0
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d c0 d5 02 c0    	mov    DWORD PTR ds:0xc002d5c0,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 c4 d5 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2a3c]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 c4 d5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2a3c],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d c0 d5 02 c0    	mov    DWORD PTR ds:0xc002d5c0,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 ec d5 02 c0    	cmp    DWORD PTR ds:0xc002d5ec,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d fc d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d5fc
c0000e38:	c7 42 0c f4 d5 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d5f4
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 fc d5 02 c0    	mov    DWORD PTR ds:0xc002d5fc,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 ec d5 02 c0    	mov    DWORD PTR ds:0xc002d5ec,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 c0 d5 02 c0 02 	test   BYTE PTR ds:0xc002d5c0,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 df e4 00 00       	call   c000f3f8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 21 e4 00 00       	call   c000f3f8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 0b e4 00 00       	call   c000f3f8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 e7 e3 00 00       	call   c000f3f8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d c0 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d5c0
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 c4 d5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2a3c]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 c4 d5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2a3c],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 f4 d5 02 c0 	lea    edx,[eax*8-0x3ffd2a0c]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 00 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d600
c00011ba:	81 fb f4 d5 02 c0    	cmp    ebx,0xc002d5f4
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d f4 d5 02 c0       	cmp    eax,0xc002d5f4
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d f0 d5 02 c0    	cmp    DWORD PTR ds:0xc002d5f0,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 fc d5 02 c0       	mov    ds:0xc002d5fc,eax
c00011f6:	a3 00 d6 02 c0       	mov    ds:0xc002d600,eax
c00011fb:	a3 f0 d5 02 c0       	mov    ds:0xc002d5f0,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 f4 d5 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d5f4
c0001209:	c7 40 0c f4 d5 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d5f4
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 00 d6 02 c0       	mov    ds:0xc002d600,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 f4 d5 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d5f4
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 b8 d5 02 c0 	lea    ebp,[edx*4-0x3ffd2a48]
c000125a:	8b 14 95 c0 d5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2a40]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 c0 d5 02 c0 	lea    ecx,[edx*4-0x3ffd2a40]
c0001275:	8b 14 95 c0 d5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2a40]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd f4 d8 02 c0 	or     DWORD PTR [edi*4-0x3ffd270c],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 f4 d5 02 c0 	lea    eax,[eax*8-0x3ffd2a0c]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d fc d5 02 c0    	mov    DWORD PTR ds:0xc002d5fc,ecx
c000132f:	89 0d 00 d6 02 c0    	mov    DWORD PTR ds:0xc002d600,ecx
c0001335:	c7 41 08 f4 d5 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d5f4
c000133c:	c7 41 0c f4 d5 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d5f4
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd ec d5 02 c0 	lea    edx,[ecx*8-0x3ffd2a14]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d f4 d8 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd270c]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d f4 d8 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd270c]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 ec d5 02 c0 	lea    edx,[eax*4-0x3ffd2a14]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d f4 d8 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd270c],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d fc d5 02 c0    	mov    DWORD PTR ds:0xc002d5fc,edi
c0001402:	89 3d 00 d6 02 c0    	mov    DWORD PTR ds:0xc002d600,edi
c0001408:	c7 47 08 f4 d5 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d5f4
c000140f:	c7 47 0c f4 d5 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d5f4
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d f0 d5 02 c0    	mov    DWORD PTR ds:0xc002d5f0,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 ec d5 02 c0       	mov    eax,ds:0xc002d5ec
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d ec d5 02 c0    	mov    DWORD PTR ds:0xc002d5ec,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba c0 d5 02 c0       	mov    edx,0xc002d5c0
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d c0 d5 02 c0 00 	cmp    DWORD PTR ds:0xc002d5c0,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 14 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d914
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 14 d9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d914,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 14 d9 02 c0    	mov    DWORD PTR ds:0xc002d914,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 ec d5 02 c0    	cmp    DWORD PTR ds:0xc002d5ec,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d ec d5 02 c0    	mov    DWORD PTR ds:0xc002d5ec,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d c0 d5 02 c0 00 	cmp    DWORD PTR ds:0xc002d5c0,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 1c d9 02 c0    	push   DWORD PTR ds:0xc002d91c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d c0 d5 02 c0 00 	cmp    DWORD PTR ds:0xc002d5c0,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 1c d9 02 c0       	mov    eax,ds:0xc002d91c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d ec d5 02 c0 00 	cmp    DWORD PTR ds:0xc002d5ec,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 ec d5 02 c0       	mov    eax,ds:0xc002d5ec
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 c4 d5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2a3c]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 f4 d5 02 c0       	mov    eax,0xc002d5f4
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d ec d8 02 c0       	cmp    eax,0xc002d8ec
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 10 d9 02 c0    	mov    esi,DWORD PTR ds:0xc002d910
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 24 d9 02 c0    	mov    esi,DWORD PTR ds:0xc002d924
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 34 d9 02 c0    	mov    esi,DWORD PTR ds:0xc002d934
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 44 91 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6ebc]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 c0 d5 02 c0       	mov    eax,ds:0xc002d5c0
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 c0 d5 02 c0       	mov    ds:0xc002d5c0,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 04 d9 02 c0    	mov    DWORD PTR ds:0xc002d904,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 08 d9 02 c0    	mov    DWORD PTR ds:0xc002d908,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 0c d9 02 c0    	mov    DWORD PTR ds:0xc002d90c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 14 d9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d914,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 80 10 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcef80]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 ba eb 01 00       	jmp    c00207ac <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 80 10 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcef80]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 eb eb 01 00       	jmp    c00207f3 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 80 10 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcef80]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 13 ec 01 00       	jmp    c002083a <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 0a 48 02 00       	call   c0026714 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 60 92 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6da0]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 60 92 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6da0]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 60 91 02 c0       	mov    edx,0xc0029160
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba 80 92 02 c0       	mov    edx,0xc0029280
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba 94 be 02 c0       	mov    edx,0xc002be94
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba 8c 92 02 c0       	mov    edx,0xc002928c
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 70 92 02 c0       	mov    edx,0xc0029270
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 60 d9 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd26a0]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 40 d9 02 c0    	mov    ax,ds:0xc002d940
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 40 d9 02 c0    	mov    ds:0xc002d940,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 07 36 02 00       	call   c0026714 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 92 92 02 c0       	mov    eax,0xc0029292
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad e0 91 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6e20]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 9b 92 02 c0       	mov    eax,0xc002929b
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 60 92 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6da0]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 d2 1f 02 00       	call   c0026714 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 70 92 02 c0       	mov    edx,0xc0029270
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 60 91 02 c0       	mov    edx,0xc0029160
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 70 91 02 c0       	mov    edx,0xc0029170
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 60 d9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd26a0]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 60 d9 02 c0 	mov    DWORD PTR [edx*4-0x3ffd26a0],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 99 09 02 00       	call   c0026714 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 7f 09 02 00       	call   c0026714 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 b7 91 02 c0       	mov    eax,0xc00291b7
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 b0 91 02 c0       	mov    eax,0xc00291b0
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 60 d9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd26a0]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be a0 91 02 c0       	mov    esi,0xc00291a0
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 c2 f0 01 00       	call   c0026714 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba 80 92 02 c0       	mov    edx,0xc0029280
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba 80 91 02 c0       	mov    edx,0xc0029180
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba 90 91 02 c0       	mov    edx,0xc0029190
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba a2 92 02 c0       	mov    edx,0xc00292a2
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba ae 92 02 c0       	mov    edx,0xc00292ae
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba c2 92 02 c0       	mov    edx,0xc00292c2
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 30 71 00 00       	call   c000f599 <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 2a 71 00 00       	call   c000f5a9 <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c e0 95 02 c0 	mov    DWORD PTR [esp+0xc],0xc00295e0
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 e0 95 02 c0 	mov    DWORD PTR [esp+0x10],0xc00295e0
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 e0 93 02 c0       	mov    eax,0xc00293e0
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 20 93 02 c0       	mov    eax,0xc0029320
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 e0 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6d20]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 6f 6e 00 00       	call   c000f5a9 <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 59 6e 00 00       	call   c000f5a9 <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 16 fa 01 00       	call   c00281e7 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 d9 f9 01 00       	call   c00281c9 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 ad f9 01 00       	call   c00281e7 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 60 f0 01 00       	call   c00278ec <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 e2 fa 01 00       	call   c0028380 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 27 f9 01 00       	call   c00281e7 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 69 f8 01 00       	call   c00281e7 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 36 f8 01 00       	call   c00281c9 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 23 f7 01 00       	call   c00281e7 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 eb f6 01 00       	call   c00281c9 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 38 6a 00 00       	call   c000f5c9 <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 d3 69 00 00       	call   c000f5a9 <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 e0 96 02 c0       	mov    eax,0xc00296e0
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 f7 f4 01 00       	call   c00281e7 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 bc f4 01 00       	call   c00281c9 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 40 9b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd64c0]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 cc f1 01 00       	call   c0027f7b <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 4a eb 01 00       	call   c0027918 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 06 f4 01 00       	call   c00281eb <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 f4 f4 01 00       	call   c002830f <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 de ea 01 00       	call   c0027918 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 89 f3 01 00       	call   c00281e5 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 6a f3 01 00       	call   c00281e9 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 00 f5 01 00       	call   c00283a0 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 aa f0 01 00       	call   c0027f7b <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 28 ea 01 00       	call   c0027918 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 e4 f2 01 00       	call   c00281eb <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 d2 f3 01 00       	call   c002830f <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 bc e9 01 00       	call   c0027918 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 67 f2 01 00       	call   c00281e5 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 47 f2 01 00       	call   c00281e9 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 dc f3 01 00       	call   c00283a0 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 82 f1 01 00       	call   c00281e7 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 40 f1 01 00       	call   c00281c9 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 28 f1 01 00       	call   c00281e7 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 9a ee 01 00       	call   c0027f7b <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 9c e1 01 00       	call   c002729b <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 ff e7 01 00       	call   c0027918 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 51 ee 01 00       	call   c0027f7b <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 57 e1 01 00       	call   c002729b <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 26 ee 01 00       	call   c0027f7b <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 76 f0 01 00       	call   c00281e5 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 53 e7 01 00       	call   c00278ec <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 d5 f1 01 00       	call   c0028380 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 fc ef 01 00       	call   c00281c9 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 f7 e6 01 00       	call   c00278ec <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 75 ed 01 00       	call   c0027f7b <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 f8 e6 01 00       	call   c0027918 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 4a ed 01 00       	call   c0027f7b <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 b1 e9 01 00       	call   c0027bfc <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 30 e0 01 00       	call   c002729b <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 90 d9 01 00       	call   c0026c30 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 67 f0 01 00       	call   c002830f <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 50 e6 01 00       	call   c0027918 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 37 f0 01 00       	call   c002830f <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 a9 df 01 00       	call   c002729b <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 e2 ee 01 00       	call   c00281eb <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 ca e8 01 00       	call   c0027bfc <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 50 df 01 00       	call   c002729b <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 3e f0 01 00       	call   c00283a0 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 10 ec 01 00       	call   c0027f7b <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 67 e5 01 00       	call   c00278ec <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 46 ee 01 00       	call   c00281e7 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 df de 01 00       	call   c002729b <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 0b e5 01 00       	call   c00278ec <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 ad ef 01 00       	call   c00283a0 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 5e eb 01 00       	call   c0027f7b <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 db e4 01 00       	call   c0027918 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 2e eb 01 00       	call   c0027f7b <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 34 de 01 00       	call   c002729b <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 04 eb 01 00       	call   c0027f7b <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 56 ed 01 00       	call   c00281e7 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 2d e4 01 00       	call   c00278ec <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 af ee 01 00       	call   c0028380 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 d6 ec 01 00       	call   c00281c9 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 d0 e3 01 00       	call   c00278ec <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 4e ea 01 00       	call   c0027f7b <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 d1 e3 01 00       	call   c0027918 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 23 ea 01 00       	call   c0027f7b <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 8a e6 01 00       	call   c0027bfc <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 09 dd 01 00       	call   c002729b <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 59 d6 01 00       	call   c0026c30 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 30 ed 01 00       	call   c002830f <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 19 e3 01 00       	call   c0027918 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 00 ed 01 00       	call   c002830f <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 72 dc 01 00       	call   c002729b <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 ab eb 01 00       	call   c00281eb <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 92 e5 01 00       	call   c0027bfc <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 11 dc 01 00       	call   c002729b <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 ff ec 01 00       	call   c00283a0 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 d1 e8 01 00       	call   c0027f7b <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 28 e2 01 00       	call   c00278ec <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 07 eb 01 00       	call   c00281e7 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 a0 db 01 00       	call   c002729b <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 cc e1 01 00       	call   c00278ec <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 41 e8 01 00       	call   c0027f7b <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 47 db 01 00       	call   c002729b <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 a0 9b 02 c0       	mov    eax,0xc0029ba0
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 b4 9b 02 c0       	mov    eax,0xc0029bb4
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 6c 5d 00 00       	call   c000f5a9 <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 6e 5d 00 00       	call   c000f5c9 <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 bc e6 01 00       	call   c0027f7b <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 3a e0 01 00       	call   c0027918 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 cc d2 01 00       	call   c0026c30 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 a3 e9 01 00       	call   c002830f <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 8c df 01 00       	call   c0027918 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 6f e9 01 00       	call   c002830f <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 e1 d8 01 00       	call   c002729b <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 41 e9 01 00       	call   c002830f <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 30 df 01 00       	call   c0027918 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 99 d8 01 00       	call   c002729b <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 ba d1 01 00       	call   c0026c30 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 91 e8 01 00       	call   c002830f <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 7a de 01 00       	call   c0027918 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 5d e8 01 00       	call   c002830f <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 cf d7 01 00       	call   c002729b <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 2f e8 01 00       	call   c002830f <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 1e de 01 00       	call   c0027918 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 87 d7 01 00       	call   c002729b <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 65 d7 01 00       	call   c002729b <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 41 d0 01 00       	call   c0026c30 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 18 e7 01 00       	call   c002830f <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 01 dd 01 00       	call   c0027918 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 e4 e6 01 00       	call   c002830f <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 56 d6 01 00       	call   c002729b <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 b6 e6 01 00       	call   c002830f <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 9f dc 01 00       	call   c0027918 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 08 d6 01 00       	call   c002729b <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 68 e6 01 00       	call   c002830f <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 51 dc 01 00       	call   c0027918 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 ba d5 01 00       	call   c002729b <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 cf ce 01 00       	call   c0026c30 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 a6 e5 01 00       	call   c002830f <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 8f db 01 00       	call   c0027918 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 76 e5 01 00       	call   c002830f <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 e8 d4 01 00       	call   c002729b <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 48 e5 01 00       	call   c002830f <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 31 db 01 00       	call   c0027918 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 9a d4 01 00       	call   c002729b <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 fa e4 01 00       	call   c002830f <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 e3 da 01 00       	call   c0027918 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 4c d4 01 00       	call   c002729b <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 20 d4 01 00       	call   c002729b <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 7d da 01 00       	call   c0027918 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 39 e3 01 00       	call   c00281eb <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 c8 d3 01 00       	call   c002729b <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 25 da 01 00       	call   c0027918 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 e1 e2 01 00       	call   c00281eb <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 5b cc 01 00       	call   c0026c30 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 32 e3 01 00       	call   c002830f <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 1b d9 01 00       	call   c0027918 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 fe e2 01 00       	call   c002830f <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 70 d2 01 00       	call   c002729b <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 d0 e2 01 00       	call   c002830f <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 b9 d8 01 00       	call   c0027918 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 22 d2 01 00       	call   c002729b <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 82 e2 01 00       	call   c002830f <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 6b d8 01 00       	call   c0027918 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 d4 d1 01 00       	call   c002729b <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 34 e2 01 00       	call   c002830f <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 1d d8 01 00       	call   c0027918 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 86 d1 01 00       	call   c002729b <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 e6 e1 01 00       	call   c002830f <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 cf d7 01 00       	call   c0027918 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 38 d1 01 00       	call   c002729b <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 3a ca 01 00       	call   c0026c30 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 11 e1 01 00       	call   c002830f <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 fa d6 01 00       	call   c0027918 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 e1 e0 01 00       	call   c002830f <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 53 d0 01 00       	call   c002729b <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 b3 e0 01 00       	call   c002830f <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 9c d6 01 00       	call   c0027918 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 05 d0 01 00       	call   c002729b <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 65 e0 01 00       	call   c002830f <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 4e d6 01 00       	call   c0027918 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 b7 cf 01 00       	call   c002729b <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 17 e0 01 00       	call   c002830f <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 00 d6 01 00       	call   c0027918 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 69 cf 01 00       	call   c002729b <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 c9 df 01 00       	call   c002830f <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 b2 d5 01 00       	call   c0027918 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 1b cf 01 00       	call   c002729b <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 ef ce 01 00       	call   c002729b <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 4c d5 01 00       	call   c0027918 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 08 de 01 00       	call   c00281eb <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 97 ce 01 00       	call   c002729b <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 f4 d4 01 00       	call   c0027918 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 b0 dd 01 00       	call   c00281eb <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 3e ce 01 00       	call   c002729b <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 9b d4 01 00       	call   c0027918 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 57 dd 01 00       	call   c00281eb <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 e5 cd 01 00       	call   c002729b <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 42 d4 01 00       	call   c0027918 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 fe dc 01 00       	call   c00281eb <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 5c c6 01 00       	call   c0026c30 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 33 dd 01 00       	call   c002830f <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 1c d3 01 00       	call   c0027918 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 ff dc 01 00       	call   c002830f <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 71 cc 01 00       	call   c002729b <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 d1 dc 01 00       	call   c002830f <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 ba d2 01 00       	call   c0027918 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 23 cc 01 00       	call   c002729b <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 83 dc 01 00       	call   c002830f <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 6c d2 01 00       	call   c0027918 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 d5 cb 01 00       	call   c002729b <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 35 dc 01 00       	call   c002830f <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 1e d2 01 00       	call   c0027918 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 87 cb 01 00       	call   c002729b <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 e7 db 01 00       	call   c002830f <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 d0 d1 01 00       	call   c0027918 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 39 cb 01 00       	call   c002729b <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 99 db 01 00       	call   c002830f <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 82 d1 01 00       	call   c0027918 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 e8 ca 01 00       	call   c002729b <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 48 db 01 00       	call   c002830f <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 31 d1 01 00       	call   c0027918 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 9a ca 01 00       	call   c002729b <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 94 c3 01 00       	call   c0026c30 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 6b da 01 00       	call   c002830f <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 54 d0 01 00       	call   c0027918 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 34 da 01 00       	call   c002830f <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 a6 c9 01 00       	call   c002729b <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 06 da 01 00       	call   c002830f <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 ef cf 01 00       	call   c0027918 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 58 c9 01 00       	call   c002729b <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 b8 d9 01 00       	call   c002830f <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 a1 cf 01 00       	call   c0027918 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 0a c9 01 00       	call   c002729b <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 6a d9 01 00       	call   c002830f <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 53 cf 01 00       	call   c0027918 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 bc c8 01 00       	call   c002729b <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 1c d9 01 00       	call   c002830f <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 05 cf 01 00       	call   c0027918 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 6e c8 01 00       	call   c002729b <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 ce d8 01 00       	call   c002830f <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 b7 ce 01 00       	call   c0027918 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 1d c8 01 00       	call   c002729b <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 7d d8 01 00       	call   c002830f <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 66 ce 01 00       	call   c0027918 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 d5 c7 01 00       	call   c002729b <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 ae c7 01 00       	call   c002729b <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 0c ce 01 00       	call   c0027918 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 c8 d6 01 00       	call   c00281eb <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 57 c7 01 00       	call   c002729b <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 b5 cd 01 00       	call   c0027918 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 71 d6 01 00       	call   c00281eb <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 ff c6 01 00       	call   c002729b <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 5d cd 01 00       	call   c0027918 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 19 d6 01 00       	call   c00281eb <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 a7 c6 01 00       	call   c002729b <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 05 cd 01 00       	call   c0027918 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 c1 d5 01 00       	call   c00281eb <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 4f c6 01 00       	call   c002729b <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 ad cc 01 00       	call   c0027918 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 69 d5 01 00       	call   c00281eb <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 fd c5 01 00       	call   c002729b <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 5b cc 01 00       	call   c0027918 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 17 d5 01 00       	call   c00281eb <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 2b be 01 00       	call   c0026c30 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 02 d5 01 00       	call   c002830f <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 eb ca 01 00       	call   c0027918 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 d2 d4 01 00       	call   c002830f <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 44 c4 01 00       	call   c002729b <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 e4 9b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd641c]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 78 d4 01 00       	call   c002830f <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 61 ca 01 00       	call   c0027918 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 cc c3 01 00       	call   c002729b <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 19 d4 01 00       	call   c002830f <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 02 ca 01 00       	call   c0027918 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 6d c3 01 00       	call   c002729b <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 ba d3 01 00       	call   c002830f <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 a3 c9 01 00       	call   c0027918 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 0e c3 01 00       	call   c002729b <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 5b d3 01 00       	call   c002830f <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 44 c9 01 00       	call   c0027918 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 af c2 01 00       	call   c002729b <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 fc d2 01 00       	call   c002830f <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 e5 c8 01 00       	call   c0027918 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 50 c2 01 00       	call   c002729b <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 9d d2 01 00       	call   c002830f <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 86 c8 01 00       	call   c0027918 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 f1 c1 01 00       	call   c002729b <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 3e d2 01 00       	call   c002830f <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 27 c8 01 00       	call   c0027918 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 92 c1 01 00       	call   c002729b <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 df d1 01 00       	call   c002830f <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 c8 c7 01 00       	call   c0027918 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 33 c1 01 00       	call   c002729b <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 3d ba 01 00       	call   c0026c30 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 14 d1 01 00       	call   c002830f <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 fd c6 01 00       	call   c0027918 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 e4 d0 01 00       	call   c002830f <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 56 c0 01 00       	call   c002729b <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 00 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6400]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 89 d0 01 00       	call   c002830f <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 72 c6 01 00       	call   c0027918 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 dd bf 01 00       	call   c002729b <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 29 d0 01 00       	call   c002830f <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 12 c6 01 00       	call   c0027918 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 7d bf 01 00       	call   c002729b <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 c9 cf 01 00       	call   c002830f <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 b2 c5 01 00       	call   c0027918 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 1d bf 01 00       	call   c002729b <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 69 cf 01 00       	call   c002830f <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 52 c5 01 00       	call   c0027918 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 bd be 01 00       	call   c002729b <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 09 cf 01 00       	call   c002830f <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 f2 c4 01 00       	call   c0027918 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 5d be 01 00       	call   c002729b <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 a9 ce 01 00       	call   c002830f <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 92 c4 01 00       	call   c0027918 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 fd bd 01 00       	call   c002729b <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 49 ce 01 00       	call   c002830f <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 32 c4 01 00       	call   c0027918 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 9d bd 01 00       	call   c002729b <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 e9 cd 01 00       	call   c002830f <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 d2 c3 01 00       	call   c0027918 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 3d bd 01 00       	call   c002729b <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 1c 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd63e4]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 e2 bc 01 00       	call   c002729b <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 3f c3 01 00       	call   c0027918 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 fb cb 01 00       	call   c00281eb <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 85 bc 01 00       	call   c002729b <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 e2 c2 01 00       	call   c0027918 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 9e cb 01 00       	call   c00281eb <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 28 bc 01 00       	call   c002729b <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 85 c2 01 00       	call   c0027918 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 41 cb 01 00       	call   c00281eb <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 cb bb 01 00       	call   c002729b <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 28 c2 01 00       	call   c0027918 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 e4 ca 01 00       	call   c00281eb <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 6e bb 01 00       	call   c002729b <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 cb c1 01 00       	call   c0027918 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 87 ca 01 00       	call   c00281eb <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 11 bb 01 00       	call   c002729b <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 6e c1 01 00       	call   c0027918 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 2a ca 01 00       	call   c00281eb <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 b4 ba 01 00       	call   c002729b <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 11 c1 01 00       	call   c0027918 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 cd c9 01 00       	call   c00281eb <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 57 ba 01 00       	call   c002729b <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 b4 c0 01 00       	call   c0027918 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 70 c9 01 00       	call   c00281eb <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 6c c0 01 00       	call   c0027918 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 e4 ca 01 00       	jmp    c00283a0 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 4e c7 01 00       	call   c00281e7 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 0c c7 01 00       	call   c00281c9 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 a3 c4 01 00       	call   c0027f7b <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 a4 b7 01 00       	call   c002729b <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 73 c4 01 00       	call   c0027f7b <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 da c0 01 00       	call   c0027bfc <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 79 c6 01 00       	call   c00281c9 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 7c c6 01 00       	call   c00281e7 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 4f c6 01 00       	call   c00281e7 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 48 c0 01 00       	call   c0027bfc <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 d2 c7 01 00       	call   c00283a0 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 ad c7 01 00       	call   c00283a0 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 7f c3 01 00       	call   c0027f7b <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 d6 bc 01 00       	call   c00278ec <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 b5 c5 01 00       	call   c00281e7 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 4e b6 01 00       	call   c002729b <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 72 bc 01 00       	call   c00278ec <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 14 c7 01 00       	call   c00283a0 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 4c bf 01 00       	call   c0027bfc <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 c9 b5 01 00       	call   c002729b <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 f5 c1 01 00       	call   c0027f7b <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 f5 b4 01 00       	call   c002729b <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 d5 b4 01 00       	call   c002729b <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 a5 c1 01 00       	call   c0027f7b <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 f5 c3 01 00       	call   c00281e5 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 d4 ba 01 00       	call   c00278ec <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 56 c5 01 00       	call   c0028380 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 7d c3 01 00       	call   c00281c9 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 7b ba 01 00       	call   c00278ec <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 f9 c0 01 00       	call   c0027f7b <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 7c ba 01 00       	call   c0027918 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 ce c0 01 00       	call   c0027f7b <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 35 bd 01 00       	call   c0027bfc <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 b4 b3 01 00       	call   c002729b <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 7e c0 01 00       	call   c0027f7b <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 ca c2 01 00       	call   c00281e7 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 bf b9 01 00       	call   c0027918 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 91 b9 01 00       	call   c0027918 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 ca bf 01 00       	call   c0027f7b <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 2e bc 01 00       	call   c0027bfc <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 f6 bb 01 00       	call   c0027bfc <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 75 b2 01 00       	call   c002729b <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 62 c3 01 00       	call   c00283a0 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 34 bf 01 00       	call   c0027f7b <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 8b b8 01 00       	call   c00278ec <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 6a c1 01 00       	call   c00281e7 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 02 b2 01 00       	call   c002729b <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 26 b8 01 00       	call   c00278ec <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 c8 c2 01 00       	call   c00283a0 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 89 c0 01 00       	call   c00281e7 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 47 c0 01 00       	call   c00281c9 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 de bd 01 00       	call   c0027f7b <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 df b0 01 00       	call   c002729b <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 ae bd 01 00       	call   c0027f7b <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 15 ba 01 00       	call   c0027bfc <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 b4 bf 01 00       	call   c00281c9 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 b7 bf 01 00       	call   c00281e7 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 8a bf 01 00       	call   c00281e7 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 83 b9 01 00       	call   c0027bfc <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 0d c1 01 00       	call   c00283a0 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 e8 c0 01 00       	call   c00283a0 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 ba bc 01 00       	call   c0027f7b <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 11 b6 01 00       	call   c00278ec <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 f0 be 01 00       	call   c00281e7 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 89 af 01 00       	call   c002729b <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 ad b5 01 00       	call   c00278ec <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 4f c0 01 00       	call   c00283a0 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 87 b8 01 00       	call   c0027bfc <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 04 af 01 00       	call   c002729b <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 2f bb 01 00       	call   c0027f7b <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 2f ae 01 00       	call   c002729b <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 0f ae 01 00       	call   c002729b <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 df ba 01 00       	call   c0027f7b <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 2f bd 01 00       	call   c00281e5 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 0d b4 01 00       	call   c00278ec <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 8f be 01 00       	call   c0028380 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 b6 bc 01 00       	call   c00281c9 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 b3 b3 01 00       	call   c00278ec <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 31 ba 01 00       	call   c0027f7b <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 b4 b3 01 00       	call   c0027918 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 06 ba 01 00       	call   c0027f7b <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 6d b6 01 00       	call   c0027bfc <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 ec ac 01 00       	call   c002729b <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 b6 b9 01 00       	call   c0027f7b <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 02 bc 01 00       	call   c00281e7 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 f7 b2 01 00       	call   c0027918 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 c9 b2 01 00       	call   c0027918 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 00 b9 01 00       	call   c0027f7b <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 64 b5 01 00       	call   c0027bfc <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 31 b5 01 00       	call   c0027bfc <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 b0 ab 01 00       	call   c002729b <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 9d bc 01 00       	call   c00283a0 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 6f b8 01 00       	call   c0027f7b <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 c6 b1 01 00       	call   c00278ec <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 a5 ba 01 00       	call   c00281e7 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 3d ab 01 00       	call   c002729b <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 61 b1 01 00       	call   c00278ec <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 03 bc 01 00       	call   c00283a0 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 c4 b9 01 00       	call   c00281e7 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 82 b9 01 00       	call   c00281c9 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 19 b7 01 00       	call   c0027f7b <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 1a aa 01 00       	call   c002729b <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 e9 b6 01 00       	call   c0027f7b <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 50 b3 01 00       	call   c0027bfc <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 ef b8 01 00       	call   c00281c9 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 f2 b8 01 00       	call   c00281e7 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 c5 b8 01 00       	call   c00281e7 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 be b2 01 00       	call   c0027bfc <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 48 ba 01 00       	call   c00283a0 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 23 ba 01 00       	call   c00283a0 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 f5 b5 01 00       	call   c0027f7b <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 4c af 01 00       	call   c00278ec <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 2b b8 01 00       	call   c00281e7 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 c4 a8 01 00       	call   c002729b <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 e8 ae 01 00       	call   c00278ec <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 8a b9 01 00       	call   c00283a0 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 c2 b1 01 00       	call   c0027bfc <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 3f a8 01 00       	call   c002729b <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 6a b4 01 00       	call   c0027f7b <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 6a a7 01 00       	call   c002729b <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 4a a7 01 00       	call   c002729b <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 1a b4 01 00       	call   c0027f7b <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 6a b6 01 00       	call   c00281e5 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 48 ad 01 00       	call   c00278ec <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 ca b7 01 00       	call   c0028380 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 f1 b5 01 00       	call   c00281c9 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 ee ac 01 00       	call   c00278ec <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 6c b3 01 00       	call   c0027f7b <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 ef ac 01 00       	call   c0027918 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 41 b3 01 00       	call   c0027f7b <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 a8 af 01 00       	call   c0027bfc <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 27 a6 01 00       	call   c002729b <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 f1 b2 01 00       	call   c0027f7b <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 3d b5 01 00       	call   c00281e7 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 32 ac 01 00       	call   c0027918 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 04 ac 01 00       	call   c0027918 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 3b b2 01 00       	call   c0027f7b <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 9f ae 01 00       	call   c0027bfc <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 6c ae 01 00       	call   c0027bfc <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 eb a4 01 00       	call   c002729b <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 d8 b5 01 00       	call   c00283a0 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 aa b1 01 00       	call   c0027f7b <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 01 ab 01 00       	call   c00278ec <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 e0 b3 01 00       	call   c00281e7 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 78 a4 01 00       	call   c002729b <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 9c aa 01 00       	call   c00278ec <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 3e b5 01 00       	call   c00283a0 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 ff b2 01 00       	call   c00281e7 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 bd b2 01 00       	call   c00281c9 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 54 b0 01 00       	call   c0027f7b <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 55 a3 01 00       	call   c002729b <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 24 b0 01 00       	call   c0027f7b <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 8b ac 01 00       	call   c0027bfc <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 2a b2 01 00       	call   c00281c9 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 2d b2 01 00       	call   c00281e7 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 00 b2 01 00       	call   c00281e7 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 f9 ab 01 00       	call   c0027bfc <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 83 b3 01 00       	call   c00283a0 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 5e b3 01 00       	call   c00283a0 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 30 af 01 00       	call   c0027f7b <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 87 a8 01 00       	call   c00278ec <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 66 b1 01 00       	call   c00281e7 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 ff a1 01 00       	call   c002729b <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 23 a8 01 00       	call   c00278ec <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 c5 b2 01 00       	call   c00283a0 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 fd aa 01 00       	call   c0027bfc <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 7a a1 01 00       	call   c002729b <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 a5 ad 01 00       	call   c0027f7b <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 a5 a0 01 00       	call   c002729b <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 85 a0 01 00       	call   c002729b <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 55 ad 01 00       	call   c0027f7b <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 a5 af 01 00       	call   c00281e5 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 83 a6 01 00       	call   c00278ec <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 05 b1 01 00       	call   c0028380 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 2c af 01 00       	call   c00281c9 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 29 a6 01 00       	call   c00278ec <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 a7 ac 01 00       	call   c0027f7b <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 2a a6 01 00       	call   c0027918 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 7c ac 01 00       	call   c0027f7b <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 e3 a8 01 00       	call   c0027bfc <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 62 9f 01 00       	call   c002729b <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 2c ac 01 00       	call   c0027f7b <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 78 ae 01 00       	call   c00281e7 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 6d a5 01 00       	call   c0027918 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 3f a5 01 00       	call   c0027918 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 76 ab 01 00       	call   c0027f7b <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 da a7 01 00       	call   c0027bfc <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 a7 a7 01 00       	call   c0027bfc <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 26 9e 01 00       	call   c002729b <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 13 af 01 00       	call   c00283a0 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 e5 aa 01 00       	call   c0027f7b <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 3c a4 01 00       	call   c00278ec <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 1b ad 01 00       	call   c00281e7 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 b3 9d 01 00       	call   c002729b <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 d7 a3 01 00       	call   c00278ec <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 79 ae 01 00       	call   c00283a0 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 37 ac 01 00       	call   c00281e7 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 f5 ab 01 00       	call   c00281c9 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 8c a9 01 00       	call   c0027f7b <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 8d 9c 01 00       	call   c002729b <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 5c a9 01 00       	call   c0027f7b <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 c3 a5 01 00       	call   c0027bfc <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 62 ab 01 00       	call   c00281c9 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 65 ab 01 00       	call   c00281e7 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 38 ab 01 00       	call   c00281e7 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 31 a5 01 00       	call   c0027bfc <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 bb ac 01 00       	call   c00283a0 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 92 ac 01 00       	call   c00283a0 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 64 a8 01 00       	call   c0027f7b <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 bb a1 01 00       	call   c00278ec <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 9a aa 01 00       	call   c00281e7 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 33 9b 01 00       	call   c002729b <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 5b a1 01 00       	call   c00278ec <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 fd ab 01 00       	call   c00283a0 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 36 a4 01 00       	call   c0027bfc <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 b3 9a 01 00       	call   c002729b <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 df a6 01 00       	call   c0027f7b <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 df 99 01 00       	call   c002729b <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 bf 99 01 00       	call   c002729b <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 8f a6 01 00       	call   c0027f7b <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 c3 a8 01 00       	call   c00281c9 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 ba 9f 01 00       	call   c00278ec <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 3c aa 01 00       	call   c0028380 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 63 a8 01 00       	call   c00281c9 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 5d 9f 01 00       	call   c00278ec <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 db a5 01 00       	call   c0027f7b <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 5e 9f 01 00       	call   c0027918 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 b0 a5 01 00       	call   c0027f7b <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 17 a2 01 00       	call   c0027bfc <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 96 98 01 00       	call   c002729b <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 60 a5 01 00       	call   c0027f7b <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 ac a7 01 00       	call   c00281e7 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 a1 9e 01 00       	call   c0027918 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 73 9e 01 00       	call   c0027918 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 b7 a4 01 00       	call   c0027f7b <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 1e a1 01 00       	call   c0027bfc <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 07 9e 01 00       	call   c0027918 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 c3 a6 01 00       	call   c00281eb <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 b6 a0 01 00       	call   c0027bfc <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 35 97 01 00       	call   c002729b <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 22 a8 01 00       	call   c00283a0 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 f4 a3 01 00       	call   c0027f7b <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 4b 9d 01 00       	call   c00278ec <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 2a a6 01 00       	call   c00281e7 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 c2 96 01 00       	call   c002729b <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 ea 9c 01 00       	call   c00278ec <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 8c a7 01 00       	call   c00283a0 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 44 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd63bc]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 38 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd63c8]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 32 19 00 00       	call   c000f5a9 <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 3f a4 01 00       	call   c00281e7 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 fd a3 01 00       	call   c00281c9 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 e9 a3 01 00       	call   c00281e7 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 5b a1 01 00       	call   c0027f7b <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 d9 9a 01 00       	call   c0027918 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 2b a1 01 00       	call   c0027f7b <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 31 94 01 00       	call   c002729b <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 00 a1 01 00       	call   c0027f7b <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 50 a3 01 00       	call   c00281e5 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 31 9a 01 00       	call   c00278ec <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 b3 a4 01 00       	call   c0028380 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 da a2 01 00       	call   c00281c9 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 d9 99 01 00       	call   c00278ec <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 57 a0 01 00       	call   c0027f7b <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 da 99 01 00       	call   c0027918 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 2c a0 01 00       	call   c0027f7b <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 93 9c 01 00       	call   c0027bfc <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 12 93 01 00       	call   c002729b <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 3a 9c 01 00       	call   c0027bfc <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 c0 92 01 00       	call   c002729b <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 ae a3 01 00       	call   c00283a0 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 80 9f 01 00       	call   c0027f7b <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 d7 98 01 00       	call   c00278ec <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 b6 a1 01 00       	call   c00281e7 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 4f 92 01 00       	call   c002729b <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 7b 98 01 00       	call   c00278ec <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 1d a3 01 00       	call   c00283a0 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 ca 9e 01 00       	call   c0027f7b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 47 98 01 00       	call   c0027918 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 98 9e 01 00       	call   c0027f7b <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 9e 91 01 00       	call   c002729b <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 6e 9e 01 00       	call   c0027f7b <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 c2 a0 01 00       	call   c00281e9 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 9b 97 01 00       	call   c00278ec <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 1d a2 01 00       	call   c0028380 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 44 a0 01 00       	call   c00281c9 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 42 97 01 00       	call   c00278ec <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 c0 9d 01 00       	call   c0027f7b <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 43 97 01 00       	call   c0027918 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 95 9d 01 00       	call   c0027f7b <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 fc 99 01 00       	call   c0027bfc <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 7b 90 01 00       	call   c002729b <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 97 99 01 00       	call   c0027bfc <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 16 90 01 00       	call   c002729b <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 04 a1 01 00       	call   c00283a0 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 d6 9c 01 00       	call   c0027f7b <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 2d 96 01 00       	call   c00278ec <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 0c 9f 01 00       	call   c00281e7 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 a5 8f 01 00       	call   c002729b <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 d1 95 01 00       	call   c00278ec <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 42 9c 01 00       	call   c0027f7b <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 48 8f 01 00       	call   c002729b <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 5e 9d 02 c0       	mov    eax,0xc0029d5e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 6f 9d 02 c0       	mov    eax,0xc0029d6f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 74 11 00 00       	call   c000f5a9 <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 76 11 00 00       	call   c000f5c9 <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 f0 10 00 00       	jmp    c000f599 <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 0b 11 00 00       	jmp    c000f5b9 <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c000e4e3:	ff 05 e4 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee4
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 e4 0e 03 c0       	mov    ds:0xc0030ee4,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d e0 0e 03 c0 00 	cmp    DWORD PTR ds:0xc0030ee0,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 e0 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ee0,0x0
c000e50d:	e8 b9 f4 00 00       	call   c001d9cb <schedule()>
c000e512:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c000e517:	48                   	dec    eax
c000e518:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 30 db 02 c0       	mov    eax,ds:0xc002db30
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 a6 9d 02 c0       	push   0xc0029da6
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 c8 d9 02 c0       	mov    eax,0xc002d9c8
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 af 9d 02 c0       	push   0xc0029daf
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 14 67 02 c0       	mov    eax,0xc0026714
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 b9 9d 02 c0       	push   0xc0029db9
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 48 64 02 c0       	mov    eax,0xc0026448
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 c2 9d 02 c0       	push   0xc0029dc2
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 14 68 02 c0       	mov    eax,0xc0026814
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 cc 9d 02 c0       	push   0xc0029dcc
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 94 65 02 c0       	mov    eax,0xc0026594
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 d5 9d 02 c0       	push   0xc0029dd5
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 cc d9 02 c0       	mov    eax,0xc002d9cc
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 e2 9d 02 c0       	push   0xc0029de2
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 cd d9 02 c0       	mov    eax,0xc002d9cd
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 25 56 00 00       	call   c0013c92 <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 ef 9d 02 c0       	push   0xc0029def
c000e69e:	e8 50 0f 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e6a3:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e6aa:	e8 ea 0e 00 00       	call   c000f599 <malloc>
c000e6af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6b6:	89 c3                	mov    ebx,eax
c000e6b8:	ff 35 10 0f 03 c0    	push   DWORD PTR ds:0xc0030f10
c000e6be:	68 08 9e 02 c0       	push   0xc0029e08
c000e6c3:	6a 01                	push   0x1
c000e6c5:	50                   	push   eax
c000e6c6:	e8 e3 ee 00 00       	call   c001d5ae <Process::Process(bool, char const*, Process*, char**)>
c000e6cb:	83 c4 20             	add    esp,0x20
c000e6ce:	68 ff 00 00 00       	push   0xff
c000e6d3:	6a 00                	push   0x0
c000e6d5:	68 2f ef 00 c0       	push   0xc000ef2f
c000e6da:	53                   	push   ebx
c000e6db:	e8 c6 f0 00 00       	call   c001d7a6 <Process::createThread(void (*)(void*), void*, int)>
c000e6e0:	6a 7a                	push   0x7a
c000e6e2:	6a 00                	push   0x0
c000e6e4:	68 8a e1 01 c0       	push   0xc001e18a
c000e6e9:	ff 35 10 0f 03 c0    	push   DWORD PTR ds:0xc0030f10
c000e6ef:	e8 b2 f0 00 00       	call   c001d7a6 <Process::createThread(void (*)(void*), void*, int)>
c000e6f4:	83 c4 14             	add    esp,0x14
c000e6f7:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c000e6fc:	68 ec 9e 02 c0       	push   0xc0029eec
c000e701:	c6 05 cd d9 02 c0 01 	mov    BYTE PTR ds:0xc002d9cd,0x1
c000e708:	e8 e6 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e70d:	e8 23 fe 00 00       	call   c001e535 <Vm::initialise8086()>
c000e712:	e8 43 43 00 00       	call   c0012a5a <Fs::initVFS()>
c000e717:	c7 04 24 15 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e15
c000e71e:	e8 d0 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e723:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c000e728:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e72e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e730:	6a 00                	push   0x0
c000e732:	6a 00                	push   0x0
c000e734:	6a 00                	push   0x0
c000e736:	50                   	push   eax
c000e737:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e73a:	83 c4 14             	add    esp,0x14
c000e73d:	68 ec 9e 02 c0       	push   0xc0029eec
c000e742:	e8 ac 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e747:	e8 e9 d6 00 00       	call   c001be35 <Sys::loadSyscalls()>
c000e74c:	e8 e1 b5 00 00       	call   c0019d32 <Krnl::loadSystemEnv()>
c000e751:	83 c4 0c             	add    esp,0xc
c000e754:	6a 3a                	push   0x3a
c000e756:	68 2f 9e 02 c0       	push   0xc0029e2f
c000e75b:	68 38 9e 02 c0       	push   0xc0029e38
c000e760:	e8 92 c4 00 00       	call   c001abf7 <Reg::readIntWithDefault(char*, char*, int)>
c000e765:	89 04 24             	mov    DWORD PTR [esp],eax
c000e768:	e8 dd 4d 00 00       	call   c001354a <User::loadClockSettings(int)>
c000e76d:	c7 04 24 10 9f 02 c0 	mov    DWORD PTR [esp],0xc0029f10
c000e774:	e8 7a 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e779:	58                   	pop    eax
c000e77a:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c000e77f:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e785:	e8 c8 54 00 00       	call   c0013c52 <Device::loadDriversForAll()>
c000e78a:	c7 04 24 40 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e40
c000e791:	e8 5d 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e796:	e8 ff b0 00 00       	call   c001989a <Krnl::startCPUs()>
c000e79b:	c7 04 24 5a 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e5a
c000e7a2:	e8 4c 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e7a7:	5a                   	pop    edx
c000e7a8:	8b 1d c8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9c8
c000e7ae:	59                   	pop    ecx
c000e7af:	6a 01                	push   0x1
c000e7b1:	68 6b 9e 02 c0       	push   0xc0029e6b
c000e7b6:	e8 4a e8 00 00       	call   c001d005 <Thr::loadDLL(char const*, bool)>
c000e7bb:	5a                   	pop    edx
c000e7bc:	59                   	pop    ecx
c000e7bd:	53                   	push   ebx
c000e7be:	50                   	push   eax
c000e7bf:	e8 72 ea 00 00       	call   c001d236 <Thr::executeDLL(unsigned long, void*)>
c000e7c4:	83 c4 10             	add    esp,0x10
c000e7c7:	83 ec 0c             	sub    esp,0xc
c000e7ca:	6a 02                	push   0x2
c000e7cc:	e8 d0 f3 00 00       	call   c001dba1 <blockTask(TaskState)>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	eb f1                	jmp    c000e7c7 <Krnl::firstTask()+0x133>

c000e7d6 <Computer::Computer()>:
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7dd:	83 ec 08             	sub    esp,0x8
c000e7e0:	68 87 9e 02 c0       	push   0xc0029e87
c000e7e5:	50                   	push   eax
c000e7e6:	e8 21 55 00 00       	call   c0013d0c <Device::Device(char const*)>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	ba 5c 9f 02 c0       	mov    edx,0xc0029f5c
c000e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f7:	89 10                	mov    DWORD PTR [eax],edx
c000e7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e819:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e81f:	83 ca 04             	or     edx,0x4
c000e822:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e832:	0f b6 d0             	movzx  edx,al
c000e835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e839:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84a:	0f b6 d0             	movzx  edx,al
c000e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e851:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e860:	8d 50 01             	lea    edx,[eax+0x1]
c000e863:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e867:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e86d:	0f b6 d0             	movzx  edx,al
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e878:	83 e1 3f             	and    ecx,0x3f
c000e87b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e883:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e889:	0f b6 d0             	movzx  edx,al
c000e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e890:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a1:	0f b6 d0             	movzx  edx,al
c000e8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e8ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8be:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c4:	0f b6 d0             	movzx  edx,al
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8cf:	83 e1 3f             	and    ecx,0x3f
c000e8d2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8e0:	0f b6 d0             	movzx  edx,al
c000e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8f8:	0f b6 d0             	movzx  edx,al
c000e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ff:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e908:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e90e:	8d 50 01             	lea    edx,[eax+0x1]
c000e911:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e915:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e91b:	0f b6 d0             	movzx  edx,al
c000e91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e922:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e926:	83 e1 3f             	and    ecx,0x3f
c000e929:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e92d:	90                   	nop
c000e92e:	83 c4 0c             	add    esp,0xc
c000e931:	c3                   	ret    

c000e932 <Computer::setBootMessage(char const*)>:
c000e932:	c3                   	ret    
c000e933:	90                   	nop

c000e934 <Computer::detectFeatures()>:
c000e934:	55                   	push   ebp
c000e935:	57                   	push   edi
c000e936:	56                   	push   esi
c000e937:	53                   	push   ebx
c000e938:	83 ec 1c             	sub    esp,0x1c
c000e93b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e93f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e949:	e8 96 19 ff ff       	call   c00002e4 <detectCPUID>
c000e94e:	85 c0                	test   eax,eax
c000e950:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e956:	0f 95 c2             	setne  dl
c000e959:	83 e0 fd             	and    eax,0xfffffffd
c000e95c:	d1 e2                	shl    edx,1
c000e95e:	09 d0                	or     eax,edx
c000e960:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e966:	a8 02                	test   al,0x2
c000e968:	75 46                	jne    c000e9b0 <Computer::detectFeatures()+0x7c>
c000e96a:	f6 05 e1 d9 02 c0 04 	test   BYTE PTR ds:0xc002d9e1,0x4
c000e971:	74 07                	je     c000e97a <Computer::detectFeatures()+0x46>
c000e973:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e97a:	e8 57 7a 01 00       	call   c00263d6 <x87Detect>
c000e97f:	83 e0 01             	and    eax,0x1
c000e982:	c1 e0 04             	shl    eax,0x4
c000e985:	88 c2                	mov    dl,al
c000e987:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e98d:	83 e0 ef             	and    eax,0xffffffef
c000e990:	09 d0                	or     eax,edx
c000e992:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e998:	a8 10                	test   al,0x10
c000e99a:	0f 85 2a 01 00 00    	jne    c000eaca <Computer::detectFeatures()+0x196>
c000e9a0:	84 c0                	test   al,al
c000e9a2:	0f 88 45 01 00 00    	js     c000eaed <Computer::detectFeatures()+0x1b9>
c000e9a8:	83 c4 1c             	add    esp,0x1c
c000e9ab:	5b                   	pop    ebx
c000e9ac:	5e                   	pop    esi
c000e9ad:	5f                   	pop    edi
c000e9ae:	5d                   	pop    ebp
c000e9af:	c3                   	ret    
c000e9b0:	83 ec 0c             	sub    esp,0xc
c000e9b3:	6a 20                	push   0x20
c000e9b5:	e8 72 9e 00 00       	call   c001882c <CPU::cpuidCheckEDX(unsigned int)>
c000e9ba:	83 e0 01             	and    eax,0x1
c000e9bd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ca:	83 e0 f7             	and    eax,0xfffffff7
c000e9cd:	09 d0                	or     eax,edx
c000e9cf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d5:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9dc:	e8 4b 9e 00 00       	call   c001882c <CPU::cpuidCheckEDX(unsigned int)>
c000e9e1:	83 e0 01             	and    eax,0x1
c000e9e4:	88 c2                	mov    dl,al
c000e9e6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9ec:	83 e0 fe             	and    eax,0xfffffffe
c000e9ef:	09 d0                	or     eax,edx
c000e9f1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9f7:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9fe:	e8 29 9e 00 00       	call   c001882c <CPU::cpuidCheckEDX(unsigned int)>
c000ea03:	c1 e0 07             	shl    eax,0x7
c000ea06:	88 c2                	mov    dl,al
c000ea08:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea0e:	83 e0 7f             	and    eax,0x7f
c000ea11:	09 d0                	or     eax,edx
c000ea13:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea19:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea20:	e8 07 9e 00 00       	call   c001882c <CPU::cpuidCheckEDX(unsigned int)>
c000ea25:	83 c4 10             	add    esp,0x10
c000ea28:	83 e0 01             	and    eax,0x1
c000ea2b:	c1 e0 05             	shl    eax,0x5
c000ea2e:	88 c2                	mov    dl,al
c000ea30:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea36:	83 e0 df             	and    eax,0xffffffdf
c000ea39:	09 d0                	or     eax,edx
c000ea3b:	f7 05 e0 d9 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002d9e0,0x401
c000ea45:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea4b:	0f 84 c2 00 00 00    	je     c000eb13 <Computer::detectFeatures()+0x1df>
c000ea51:	83 e0 fe             	and    eax,0xfffffffe
c000ea54:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea5a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea60:	88 c2                	mov    dl,al
c000ea62:	83 e2 09             	and    edx,0x9
c000ea65:	fe ca                	dec    dl
c000ea67:	75 09                	jne    c000ea72 <Computer::detectFeatures()+0x13e>
c000ea69:	83 e0 fe             	and    eax,0xfffffffe
c000ea6c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea72:	83 ec 0c             	sub    esp,0xc
c000ea75:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea79:	50                   	push   eax
c000ea7a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea7e:	55                   	push   ebp
c000ea7f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea83:	57                   	push   edi
c000ea84:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea88:	56                   	push   esi
c000ea89:	68 00 00 00 80       	push   0x80000000
c000ea8e:	e8 15 9d 00 00       	call   c00187a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea93:	83 c4 20             	add    esp,0x20
c000ea96:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaa1:	0f 86 c3 fe ff ff    	jbe    c000e96a <Computer::detectFeatures()+0x36>
c000eaa7:	83 ec 0c             	sub    esp,0xc
c000eaaa:	50                   	push   eax
c000eaab:	55                   	push   ebp
c000eaac:	57                   	push   edi
c000eaad:	56                   	push   esi
c000eaae:	68 01 00 00 80       	push   0x80000001
c000eab3:	e8 f0 9c 00 00       	call   c00187a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eab8:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eac2:	83 c4 20             	add    esp,0x20
c000eac5:	e9 a0 fe ff ff       	jmp    c000e96a <Computer::detectFeatures()+0x36>
c000eaca:	e8 c1 78 01 00       	call   c0026390 <absolutelyNoChanceInHell>
c000eacf:	88 c2                	mov    dl,al
c000ead1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ead7:	c1 e2 07             	shl    edx,0x7
c000eada:	83 e0 7f             	and    eax,0x7f
c000eadd:	09 d0                	or     eax,edx
c000eadf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae5:	84 c0                	test   al,al
c000eae7:	0f 89 bb fe ff ff    	jns    c000e9a8 <Computer::detectFeatures()+0x74>
c000eaed:	e8 7e 78 01 00       	call   c0026370 <avxDetect>
c000eaf2:	83 e0 01             	and    eax,0x1
c000eaf5:	c1 e0 05             	shl    eax,0x5
c000eaf8:	88 c2                	mov    dl,al
c000eafa:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb00:	83 e0 df             	and    eax,0xffffffdf
c000eb03:	09 d0                	or     eax,edx
c000eb05:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb0b:	83 c4 1c             	add    esp,0x1c
c000eb0e:	5b                   	pop    ebx
c000eb0f:	5e                   	pop    esi
c000eb10:	5f                   	pop    edi
c000eb11:	5d                   	pop    ebp
c000eb12:	c3                   	ret    
c000eb13:	83 ec 0c             	sub    esp,0xc
c000eb16:	68 00 02 00 00       	push   0x200
c000eb1b:	e8 0c 9d 00 00       	call   c001882c <CPU::cpuidCheckEDX(unsigned int)>
c000eb20:	83 c4 10             	add    esp,0x10
c000eb23:	83 e0 01             	and    eax,0x1
c000eb26:	88 c2                	mov    dl,al
c000eb28:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb2e:	83 e0 fe             	and    eax,0xfffffffe
c000eb31:	09 d0                	or     eax,edx
c000eb33:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb39:	e9 1c ff ff ff       	jmp    c000ea5a <Computer::detectFeatures()+0x126>

c000eb3e <Computer::displayFeatures()>:
c000eb3e:	c3                   	ret    
c000eb3f:	90                   	nop

c000eb40 <Computer::rdmsr(unsigned int)>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb47:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb4e:	74 0a                	je     c000eb5a <Computer::rdmsr(unsigned int)+0x1a>
c000eb50:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb54:	0f 32                	rdmsr  
c000eb56:	83 c4 0c             	add    esp,0xc
c000eb59:	c3                   	ret    
c000eb5a:	83 ec 0c             	sub    esp,0xc
c000eb5d:	68 90 9e 02 c0       	push   0xc0029e90
c000eb62:	e8 d4 b2 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	eb e4                	jmp    c000eb50 <Computer::rdmsr(unsigned int)+0x10>

c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eb6c:	57                   	push   edi
c000eb6d:	56                   	push   esi
c000eb6e:	52                   	push   edx
c000eb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb73:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eb77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eb7b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb82:	74 0e                	je     c000eb92 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eb84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb88:	89 f0                	mov    eax,esi
c000eb8a:	89 fa                	mov    edx,edi
c000eb8c:	0f 30                	wrmsr  
c000eb8e:	58                   	pop    eax
c000eb8f:	5e                   	pop    esi
c000eb90:	5f                   	pop    edi
c000eb91:	c3                   	ret    
c000eb92:	83 ec 0c             	sub    esp,0xc
c000eb95:	68 96 9e 02 c0       	push   0xc0029e96
c000eb9a:	e8 9c b2 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c000eb9f:	83 c4 10             	add    esp,0x10
c000eba2:	eb e0                	jmp    c000eb84 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eba4 <Computer::nmiEnabled()>:
c000eba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eba8:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ebae:	c3                   	ret    
c000ebaf:	90                   	nop

c000ebb0 <Computer::readCMOS(unsigned char)>:
c000ebb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebb4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ebbb:	19 c0                	sbb    eax,eax
c000ebbd:	83 e0 80             	and    eax,0xffffff80
c000ebc0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ebc4:	e6 70                	out    0x70,al
c000ebc6:	e4 71                	in     al,0x71
c000ebc8:	c3                   	ret    
c000ebc9:	90                   	nop

c000ebca <Computer::enableNMI(bool)>:
c000ebca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebd2:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ebd8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ebe0:	eb ce                	jmp    c000ebb0 <Computer::readCMOS(unsigned char)>

c000ebe2 <Computer::open(int, int, void*)>:
c000ebe2:	56                   	push   esi
c000ebe3:	53                   	push   ebx
c000ebe4:	83 ec 10             	sub    esp,0x10
c000ebe7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ebeb:	68 30 9f 02 c0       	push   0xc0029f30
c000ebf0:	e8 fe 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ebf5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ebfc:	f6 05 e0 d9 02 c0 04 	test   BYTE PTR ds:0xc002d9e0,0x4
c000ec03:	0f 94 05 00 c9 02 c0 	sete   BYTE PTR ds:0xc002c900
c000ec0a:	e8 8a 09 00 00       	call   c000f599 <malloc>
c000ec0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec12:	89 c6                	mov    esi,eax
c000ec14:	e8 87 8e 00 00       	call   c0017aa0 <ACPI::ACPI()>
c000ec19:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec1f:	58                   	pop    eax
c000ec20:	5a                   	pop    edx
c000ec21:	56                   	push   esi
c000ec22:	53                   	push   ebx
c000ec23:	e8 e0 4e 00 00       	call   c0013b08 <Device::addChild(Device*)>
c000ec28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec2b:	e8 04 fd ff ff       	call   c000e934 <Computer::detectFeatures()>
c000ec30:	59                   	pop    ecx
c000ec31:	5e                   	pop    esi
c000ec32:	6a 01                	push   0x1
c000ec34:	53                   	push   ebx
c000ec35:	e8 90 ff ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ec3a:	c7 04 24 40 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e40
c000ec41:	e8 ad 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ec46:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ec4d:	e8 47 09 00 00       	call   c000f599 <malloc>
c000ec52:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec55:	89 c6                	mov    esi,eax
c000ec57:	e8 88 9c 00 00       	call   c00188e4 <CPU::CPU()>
c000ec5c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ec62:	58                   	pop    eax
c000ec63:	5a                   	pop    edx
c000ec64:	56                   	push   esi
c000ec65:	53                   	push   ebx
c000ec66:	e8 9d 4e 00 00       	call   c0013b08 <Device::addChild(Device*)>
c000ec6b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ec71:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec77:	6a 00                	push   0x0
c000ec79:	6a 00                	push   0x0
c000ec7b:	50                   	push   eax
c000ec7c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ec7f:	83 c4 20             	add    esp,0x20
c000ec82:	e8 19 54 00 00       	call   c00140a0 <setupFPU()>
c000ec87:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ec8d:	85 c0                	test   eax,eax
c000ec8f:	74 1f                	je     c000ecb0 <Computer::open(int, int, void*)+0xce>
c000ec91:	83 ec 08             	sub    esp,0x8
c000ec94:	50                   	push   eax
c000ec95:	53                   	push   ebx
c000ec96:	e8 6d 4e 00 00       	call   c0013b08 <Device::addChild(Device*)>
c000ec9b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000eca1:	8b 10                	mov    edx,DWORD PTR [eax]
c000eca3:	6a 00                	push   0x0
c000eca5:	6a 00                	push   0x0
c000eca7:	6a 00                	push   0x0
c000eca9:	50                   	push   eax
c000ecaa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecad:	83 c4 20             	add    esp,0x20
c000ecb0:	83 ec 0c             	sub    esp,0xc
c000ecb3:	68 9c 9e 02 c0       	push   0xc0029e9c
c000ecb8:	e8 36 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ecbd:	c7 04 24 94 e6 00 c0 	mov    DWORD PTR [esp],0xc000e694
c000ecc4:	e8 ff eb 00 00       	call   c001d8c8 <setupMultitasking(void (*)())>
c000ecc9:	83 c4 14             	add    esp,0x14
c000eccc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecd1:	5b                   	pop    ebx
c000ecd2:	5e                   	pop    esi
c000ecd3:	c3                   	ret    

c000ecd4 <Computer::disableNMI()>:
c000ecd4:	6a 00                	push   0x0
c000ecd6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ecda:	e8 eb fe ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ecdf:	58                   	pop    eax
c000ece0:	5a                   	pop    edx
c000ece1:	c3                   	ret    

c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ece2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ece6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eced:	19 c0                	sbb    eax,eax
c000ecef:	83 e0 80             	and    eax,0xffffff80
c000ecf2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ecf6:	e6 70                	out    0x70,al
c000ecf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecfc:	e6 71                	out    0x71,al
c000ecfe:	c3                   	ret    
c000ecff:	90                   	nop

c000ed00 <Computer::handleNMI()>:
c000ed00:	56                   	push   esi
c000ed01:	53                   	push   ebx
c000ed02:	83 ec 10             	sub    esp,0x10
c000ed05:	e4 92                	in     al,0x92
c000ed07:	89 c6                	mov    esi,eax
c000ed09:	e4 61                	in     al,0x61
c000ed0b:	68 b7 9e 02 c0       	push   0xc0029eb7
c000ed10:	88 c3                	mov    bl,al
c000ed12:	e8 b8 39 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c000ed17:	83 c4 10             	add    esp,0x10
c000ed1a:	83 e6 10             	and    esi,0x10
c000ed1d:	75 0d                	jne    c000ed2c <Computer::handleNMI()+0x2c>
c000ed1f:	f6 c3 40             	test   bl,0x40
c000ed22:	75 1d                	jne    c000ed41 <Computer::handleNMI()+0x41>
c000ed24:	84 db                	test   bl,bl
c000ed26:	78 2d                	js     c000ed55 <Computer::handleNMI()+0x55>
c000ed28:	58                   	pop    eax
c000ed29:	5b                   	pop    ebx
c000ed2a:	5e                   	pop    esi
c000ed2b:	c3                   	ret    
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 c8 9e 02 c0       	push   0xc0029ec8
c000ed34:	e8 02 b1 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c000ed39:	83 c4 10             	add    esp,0x10
c000ed3c:	f6 c3 40             	test   bl,0x40
c000ed3f:	74 e3                	je     c000ed24 <Computer::handleNMI()+0x24>
c000ed41:	83 ec 0c             	sub    esp,0xc
c000ed44:	68 d5 9e 02 c0       	push   0xc0029ed5
c000ed49:	e8 ed b0 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c000ed4e:	83 c4 10             	add    esp,0x10
c000ed51:	84 db                	test   bl,bl
c000ed53:	79 d3                	jns    c000ed28 <Computer::handleNMI()+0x28>
c000ed55:	c7 44 24 10 df 9e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029edf
c000ed5d:	5a                   	pop    edx
c000ed5e:	5b                   	pop    ebx
c000ed5f:	5e                   	pop    esi
c000ed60:	e9 d6 b0 00 00       	jmp    c0019e3b <Krnl::panic(char const*)>
c000ed65:	90                   	nop

c000ed66 <Computer::setDiskActivityLight(int, bool)>:
c000ed66:	56                   	push   esi
c000ed67:	53                   	push   ebx
c000ed68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed6c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ed71:	77 1b                	ja     c000ed8e <Computer::setDiskActivityLight(int, bool)+0x28>
c000ed73:	e4 92                	in     al,0x92
c000ed75:	bb 40 00 00 00       	mov    ebx,0x40
c000ed7a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ed7e:	89 da                	mov    edx,ebx
c000ed80:	d3 e2                	shl    edx,cl
c000ed82:	89 f1                	mov    ecx,esi
c000ed84:	f7 d2                	not    edx
c000ed86:	d3 e3                	shl    ebx,cl
c000ed88:	21 d0                	and    eax,edx
c000ed8a:	09 d8                	or     eax,ebx
c000ed8c:	e6 92                	out    0x92,al
c000ed8e:	5b                   	pop    ebx
c000ed8f:	5e                   	pop    esi
c000ed90:	c3                   	ret    
c000ed91:	90                   	nop

c000ed92 <GDTEntry::setBase(unsigned int)>:
c000ed92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed9a:	89 c1                	mov    ecx,eax
c000ed9c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000eda0:	c1 e9 10             	shr    ecx,0x10
c000eda3:	c1 e8 18             	shr    eax,0x18
c000eda6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000eda9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000edac:	c3                   	ret    
c000edad:	90                   	nop

c000edae <GDTEntry::setLimit(unsigned int)>:
c000edae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000edb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edb6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000edb9:	66 89 01             	mov    WORD PTR [ecx],ax
c000edbc:	83 e2 f0             	and    edx,0xfffffff0
c000edbf:	c1 e8 10             	shr    eax,0x10
c000edc2:	83 e0 0f             	and    eax,0xf
c000edc5:	09 d0                	or     eax,edx
c000edc7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000edca:	c3                   	ret    
c000edcb:	90                   	nop

c000edcc <GDT::GDT()>:
c000edcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000edd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ede0:	90                   	nop
c000ede1:	c3                   	ret    

c000ede2 <GDT::addEntry(GDTEntry)>:
c000ede2:	53                   	push   ebx
c000ede3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ede7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edeb:	8b 02                	mov    eax,DWORD PTR [edx]
c000eded:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000edf1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000edf5:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000edf9:	8d 48 01             	lea    ecx,[eax+0x1]
c000edfc:	c1 e0 03             	shl    eax,0x3
c000edff:	89 0a                	mov    DWORD PTR [edx],ecx
c000ee01:	5b                   	pop    ebx
c000ee02:	c3                   	ret    
c000ee03:	90                   	nop

c000ee04 <GDT::getNumberOfEntries()>:
c000ee04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee08:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <GDT::flush()>:
c000ee0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee10:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee12:	83 c0 04             	add    eax,0x4
c000ee15:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ee1c:	a3 d2 d9 02 c0       	mov    ds:0xc002d9d2,eax
c000ee21:	66 89 15 d0 d9 02 c0 	mov    WORD PTR ds:0xc002d9d0,dx
c000ee28:	e9 23 16 ff ff       	jmp    c0000450 <loadGDT>
c000ee2d:	90                   	nop

c000ee2e <GDT::setup()>:
c000ee2e:	55                   	push   ebp
c000ee2f:	57                   	push   edi
c000ee30:	56                   	push   esi
c000ee31:	53                   	push   ebx
c000ee32:	83 ec 3c             	sub    esp,0x3c
c000ee35:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ee39:	6a 00                	push   0x0
c000ee3b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ee3f:	53                   	push   ebx
c000ee40:	e8 4d ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee45:	6a 00                	push   0x0
c000ee47:	53                   	push   ebx
c000ee48:	e8 61 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee4d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ee55:	6a 00                	push   0x0
c000ee57:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ee5b:	53                   	push   ebx
c000ee5c:	e8 31 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee61:	68 ff ff ff 00       	push   0xffffff
c000ee66:	53                   	push   ebx
c000ee67:	e8 42 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee6c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee70:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ee75:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ee7a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ee7e:	83 c4 20             	add    esp,0x20
c000ee81:	6a 00                	push   0x0
c000ee83:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ee87:	53                   	push   ebx
c000ee88:	e8 05 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee8d:	68 ff ff ff 00       	push   0xffffff
c000ee92:	53                   	push   ebx
c000ee93:	e8 16 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee98:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee9c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eea0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000eea4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000eea8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eeac:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eeb1:	0d 00 92 c0 00       	or     eax,0xc09200
c000eeb6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eeba:	89 d8                	mov    eax,ebx
c000eebc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eec0:	80 cc 60             	or     ah,0x60
c000eec3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eec7:	83 c4 0c             	add    esp,0xc
c000eeca:	89 f8                	mov    eax,edi
c000eecc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed0:	80 cc 60             	or     ah,0x60
c000eed3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed7:	89 c7                	mov    edi,eax
c000eed9:	55                   	push   ebp
c000eeda:	e8 03 ff ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eedf:	83 c4 0c             	add    esp,0xc
c000eee2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eee6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eeea:	55                   	push   ebp
c000eeeb:	e8 f2 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eef0:	83 c4 0c             	add    esp,0xc
c000eef3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eef7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eefb:	55                   	push   ebp
c000eefc:	e8 e1 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef01:	83 c4 0c             	add    esp,0xc
c000ef04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef0c:	53                   	push   ebx
c000ef0d:	51                   	push   ecx
c000ef0e:	55                   	push   ebp
c000ef0f:	e8 ce fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef14:	83 c4 0c             	add    esp,0xc
c000ef17:	57                   	push   edi
c000ef18:	56                   	push   esi
c000ef19:	55                   	push   ebp
c000ef1a:	e8 c3 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ef22:	e8 e5 fe ff ff       	call   c000ee0c <GDT::flush()>
c000ef27:	83 c4 4c             	add    esp,0x4c
c000ef2a:	5b                   	pop    ebx
c000ef2b:	5e                   	pop    esi
c000ef2c:	5f                   	pop    edi
c000ef2d:	5d                   	pop    ebp
c000ef2e:	c3                   	ret    

c000ef2f <idleFunction(void*)>:
c000ef2f:	53                   	push   ebx
c000ef30:	83 ec 08             	sub    esp,0x8
c000ef33:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c000ef38:	48                   	dec    eax
c000ef39:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c000ef3e:	75 01                	jne    c000ef41 <idleFunction(void*)+0x12>
c000ef40:	fb                   	sti    
c000ef41:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c000ef46:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ef4c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ef53:	74 3c                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ef5c:	74 33                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef5e:	31 db                	xor    ebx,ebx
c000ef60:	52                   	push   edx
c000ef61:	52                   	push   edx
c000ef62:	68 e1 00 00 00       	push   0xe1
c000ef67:	50                   	push   eax
c000ef68:	e8 d3 fb ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c000ef6d:	53                   	push   ebx
c000ef6e:	83 e0 02             	and    eax,0x2
c000ef71:	50                   	push   eax
c000ef72:	68 e1 00 00 00       	push   0xe1
c000ef77:	ff 35 c8 d9 02 c0    	push   DWORD PTR ds:0xc002d9c8
c000ef7d:	e8 ea fb ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c000ef82:	83 c4 20             	add    esp,0x20
c000ef85:	e8 f5 12 ff ff       	call   c000027f <doTPAUSE>
c000ef8a:	e8 91 94 01 00       	call   c0028420 <idleCommon()>
c000ef8f:	eb f4                	jmp    c000ef85 <idleFunction(void*)+0x56>
c000ef91:	fb                   	sti    
c000ef92:	f4                   	hlt    
c000ef93:	e8 88 94 01 00       	call   c0028420 <idleCommon()>
c000ef98:	eb f7                	jmp    c000ef91 <idleFunction(void*)+0x62>

c000ef9a <IDTEntry::IDTEntry(bool)>:
c000ef9a:	83 ec 04             	sub    esp,0x4
c000ef9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efa1:	88 04 24             	mov    BYTE PTR [esp],al
c000efa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efa8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000efae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efb2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000efb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efbd:	83 e2 f0             	and    edx,0xfffffff0
c000efc0:	83 ca 0e             	or     edx,0xe
c000efc3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efca:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efcd:	83 e2 ef             	and    edx,0xffffffef
c000efd0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efd3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000efd7:	74 04                	je     c000efdd <IDTEntry::IDTEntry(bool)+0x43>
c000efd9:	b2 03                	mov    dl,0x3
c000efdb:	eb 02                	jmp    c000efdf <IDTEntry::IDTEntry(bool)+0x45>
c000efdd:	b2 00                	mov    dl,0x0
c000efdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efe3:	83 e2 03             	and    edx,0x3
c000efe6:	88 d1                	mov    cl,dl
c000efe8:	c1 e1 05             	shl    ecx,0x5
c000efeb:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efee:	83 e2 9f             	and    edx,0xffffff9f
c000eff1:	09 ca                	or     edx,ecx
c000eff3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000effa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000effd:	83 ca 80             	or     edx,0xffffff80
c000f000:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f003:	90                   	nop
c000f004:	83 c4 04             	add    esp,0x4
c000f007:	c3                   	ret    

c000f008 <IDTEntry::setOffset(unsigned int)>:
c000f008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f00c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f010:	66 89 02             	mov    WORD PTR [edx],ax
c000f013:	c1 e8 10             	shr    eax,0x10
c000f016:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f01a:	c3                   	ret    
c000f01b:	90                   	nop

c000f01c <IDT::IDT()>:
c000f01c:	90                   	nop
c000f01d:	c3                   	ret    

c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f01e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f022:	83 c0 30             	add    eax,0x30
c000f025:	c3                   	ret    

c000f026 <IDT::addEntry(IDTEntry, int)>:
c000f026:	53                   	push   ebx
c000f027:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f02f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f033:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f037:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f03a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f03e:	5b                   	pop    ebx
c000f03f:	c3                   	ret    

c000f040 <IDT::addEntry(int, void (*)(), bool)>:
c000f040:	53                   	push   ebx
c000f041:	83 ec 10             	sub    esp,0x10
c000f044:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f049:	50                   	push   eax
c000f04a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f04e:	53                   	push   ebx
c000f04f:	e8 46 ff ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f054:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f058:	53                   	push   ebx
c000f059:	e8 aa ff ff ff       	call   c000f008 <IDTEntry::setOffset(unsigned int)>
c000f05e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f062:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f066:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f06a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f06e:	e8 b3 ff ff ff       	call   c000f026 <IDT::addEntry(IDTEntry, int)>
c000f073:	83 c4 30             	add    esp,0x30
c000f076:	5b                   	pop    ebx
c000f077:	c3                   	ret    

c000f078 <IDT::flush()>:
c000f078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f07c:	66 c7 05 d8 d9 02 c0 ff 07 	mov    WORD PTR ds:0xc002d9d8,0x7ff
c000f085:	a3 da d9 02 c0       	mov    ds:0xc002d9da,eax
c000f08a:	0f 01 1d d8 d9 02 c0 	lidtd  ds:0xc002d9d8
c000f091:	c3                   	ret    

c000f092 <IDT::setup()>:
c000f092:	57                   	push   edi
c000f093:	56                   	push   esi
c000f094:	53                   	push   ebx
c000f095:	83 ec 10             	sub    esp,0x10
c000f098:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f09c:	6a 00                	push   0x0
c000f09e:	68 70 04 00 c0       	push   0xc0000470
c000f0a3:	6a 00                	push   0x0
c000f0a5:	53                   	push   ebx
c000f0a6:	e8 95 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ab:	6a 00                	push   0x0
c000f0ad:	68 80 04 00 c0       	push   0xc0000480
c000f0b2:	6a 01                	push   0x1
c000f0b4:	53                   	push   ebx
c000f0b5:	e8 86 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ba:	83 c4 20             	add    esp,0x20
c000f0bd:	6a 00                	push   0x0
c000f0bf:	68 8a 04 00 c0       	push   0xc000048a
c000f0c4:	6a 02                	push   0x2
c000f0c6:	53                   	push   ebx
c000f0c7:	e8 74 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0cc:	6a 00                	push   0x0
c000f0ce:	68 94 04 00 c0       	push   0xc0000494
c000f0d3:	6a 03                	push   0x3
c000f0d5:	53                   	push   ebx
c000f0d6:	e8 65 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0db:	83 c4 20             	add    esp,0x20
c000f0de:	6a 00                	push   0x0
c000f0e0:	68 9e 04 00 c0       	push   0xc000049e
c000f0e5:	6a 04                	push   0x4
c000f0e7:	53                   	push   ebx
c000f0e8:	e8 53 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ed:	6a 00                	push   0x0
c000f0ef:	68 a8 04 00 c0       	push   0xc00004a8
c000f0f4:	6a 05                	push   0x5
c000f0f6:	53                   	push   ebx
c000f0f7:	e8 44 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0fc:	83 c4 20             	add    esp,0x20
c000f0ff:	6a 00                	push   0x0
c000f101:	68 b2 04 00 c0       	push   0xc00004b2
c000f106:	6a 06                	push   0x6
c000f108:	53                   	push   ebx
c000f109:	e8 32 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f10e:	6a 00                	push   0x0
c000f110:	68 bc 04 00 c0       	push   0xc00004bc
c000f115:	6a 07                	push   0x7
c000f117:	53                   	push   ebx
c000f118:	e8 23 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f11d:	83 c4 20             	add    esp,0x20
c000f120:	6a 00                	push   0x0
c000f122:	68 c6 04 00 c0       	push   0xc00004c6
c000f127:	6a 08                	push   0x8
c000f129:	53                   	push   ebx
c000f12a:	e8 11 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f12f:	6a 00                	push   0x0
c000f131:	68 ce 04 00 c0       	push   0xc00004ce
c000f136:	6a 09                	push   0x9
c000f138:	53                   	push   ebx
c000f139:	e8 02 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f13e:	83 c4 20             	add    esp,0x20
c000f141:	6a 00                	push   0x0
c000f143:	68 d8 04 00 c0       	push   0xc00004d8
c000f148:	6a 0a                	push   0xa
c000f14a:	53                   	push   ebx
c000f14b:	e8 f0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f150:	6a 00                	push   0x0
c000f152:	68 e0 04 00 c0       	push   0xc00004e0
c000f157:	6a 0b                	push   0xb
c000f159:	53                   	push   ebx
c000f15a:	e8 e1 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f15f:	83 c4 20             	add    esp,0x20
c000f162:	6a 00                	push   0x0
c000f164:	68 e8 04 00 c0       	push   0xc00004e8
c000f169:	6a 0c                	push   0xc
c000f16b:	53                   	push   ebx
c000f16c:	e8 cf fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f171:	6a 00                	push   0x0
c000f173:	68 f0 04 00 c0       	push   0xc00004f0
c000f178:	6a 0d                	push   0xd
c000f17a:	53                   	push   ebx
c000f17b:	e8 c0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f180:	83 c4 20             	add    esp,0x20
c000f183:	6a 00                	push   0x0
c000f185:	68 f8 04 00 c0       	push   0xc00004f8
c000f18a:	6a 0e                	push   0xe
c000f18c:	53                   	push   ebx
c000f18d:	e8 ae fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f192:	6a 00                	push   0x0
c000f194:	68 00 05 00 c0       	push   0xc0000500
c000f199:	6a 0f                	push   0xf
c000f19b:	53                   	push   ebx
c000f19c:	e8 9f fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1a1:	83 c4 20             	add    esp,0x20
c000f1a4:	6a 00                	push   0x0
c000f1a6:	68 0a 05 00 c0       	push   0xc000050a
c000f1ab:	6a 10                	push   0x10
c000f1ad:	53                   	push   ebx
c000f1ae:	e8 8d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1b3:	6a 00                	push   0x0
c000f1b5:	68 14 05 00 c0       	push   0xc0000514
c000f1ba:	6a 11                	push   0x11
c000f1bc:	53                   	push   ebx
c000f1bd:	e8 7e fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1c2:	83 c4 20             	add    esp,0x20
c000f1c5:	6a 00                	push   0x0
c000f1c7:	68 1e 05 00 c0       	push   0xc000051e
c000f1cc:	6a 12                	push   0x12
c000f1ce:	53                   	push   ebx
c000f1cf:	e8 6c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1d4:	6a 01                	push   0x1
c000f1d6:	68 b8 05 00 c0       	push   0xc00005b8
c000f1db:	6a 60                	push   0x60
c000f1dd:	53                   	push   ebx
c000f1de:	e8 5d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1e3:	83 c4 20             	add    esp,0x20
c000f1e6:	6a 00                	push   0x0
c000f1e8:	68 bf 05 00 c0       	push   0xc00005bf
c000f1ed:	6a 20                	push   0x20
c000f1ef:	53                   	push   ebx
c000f1f0:	e8 4b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1f5:	6a 00                	push   0x0
c000f1f7:	68 aa 05 00 c0       	push   0xc00005aa
c000f1fc:	6a 21                	push   0x21
c000f1fe:	53                   	push   ebx
c000f1ff:	e8 3c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f204:	83 c4 20             	add    esp,0x20
c000f207:	6a 00                	push   0x0
c000f209:	68 b1 05 00 c0       	push   0xc00005b1
c000f20e:	6a 22                	push   0x22
c000f210:	53                   	push   ebx
c000f211:	e8 2a fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f216:	6a 00                	push   0x0
c000f218:	68 28 05 00 c0       	push   0xc0000528
c000f21d:	6a 23                	push   0x23
c000f21f:	53                   	push   ebx
c000f220:	e8 1b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f225:	83 c4 20             	add    esp,0x20
c000f228:	6a 00                	push   0x0
c000f22a:	68 32 05 00 c0       	push   0xc0000532
c000f22f:	6a 24                	push   0x24
c000f231:	53                   	push   ebx
c000f232:	e8 09 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f237:	6a 00                	push   0x0
c000f239:	68 3c 05 00 c0       	push   0xc000053c
c000f23e:	6a 25                	push   0x25
c000f240:	53                   	push   ebx
c000f241:	e8 fa fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f246:	83 c4 20             	add    esp,0x20
c000f249:	6a 00                	push   0x0
c000f24b:	68 46 05 00 c0       	push   0xc0000546
c000f250:	6a 26                	push   0x26
c000f252:	53                   	push   ebx
c000f253:	e8 e8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f258:	6a 00                	push   0x0
c000f25a:	68 50 05 00 c0       	push   0xc0000550
c000f25f:	6a 27                	push   0x27
c000f261:	53                   	push   ebx
c000f262:	e8 d9 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f267:	83 c4 20             	add    esp,0x20
c000f26a:	6a 00                	push   0x0
c000f26c:	68 5a 05 00 c0       	push   0xc000055a
c000f271:	6a 28                	push   0x28
c000f273:	53                   	push   ebx
c000f274:	e8 c7 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f279:	6a 00                	push   0x0
c000f27b:	68 64 05 00 c0       	push   0xc0000564
c000f280:	6a 29                	push   0x29
c000f282:	53                   	push   ebx
c000f283:	e8 b8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f288:	83 c4 20             	add    esp,0x20
c000f28b:	6a 00                	push   0x0
c000f28d:	68 6e 05 00 c0       	push   0xc000056e
c000f292:	6a 2a                	push   0x2a
c000f294:	53                   	push   ebx
c000f295:	e8 a6 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f29a:	6a 00                	push   0x0
c000f29c:	68 78 05 00 c0       	push   0xc0000578
c000f2a1:	6a 2b                	push   0x2b
c000f2a3:	53                   	push   ebx
c000f2a4:	e8 97 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2a9:	83 c4 20             	add    esp,0x20
c000f2ac:	6a 00                	push   0x0
c000f2ae:	68 82 05 00 c0       	push   0xc0000582
c000f2b3:	6a 2c                	push   0x2c
c000f2b5:	53                   	push   ebx
c000f2b6:	e8 85 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2bb:	6a 00                	push   0x0
c000f2bd:	68 8c 05 00 c0       	push   0xc000058c
c000f2c2:	6a 2d                	push   0x2d
c000f2c4:	53                   	push   ebx
c000f2c5:	e8 76 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2ca:	83 c4 20             	add    esp,0x20
c000f2cd:	6a 00                	push   0x0
c000f2cf:	68 96 05 00 c0       	push   0xc0000596
c000f2d4:	6a 2e                	push   0x2e
c000f2d6:	53                   	push   ebx
c000f2d7:	e8 64 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2dc:	6a 00                	push   0x0
c000f2de:	68 a0 05 00 c0       	push   0xc00005a0
c000f2e3:	6a 2f                	push   0x2f
c000f2e5:	53                   	push   ebx
c000f2e6:	e8 55 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2eb:	83 c4 20             	add    esp,0x20
c000f2ee:	6a 00                	push   0x0
c000f2f0:	68 f6 05 00 c0       	push   0xc00005f6
c000f2f5:	6a 30                	push   0x30
c000f2f7:	53                   	push   ebx
c000f2f8:	e8 43 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2fd:	6a 00                	push   0x0
c000f2ff:	68 00 06 00 c0       	push   0xc0000600
c000f304:	6a 31                	push   0x31
c000f306:	53                   	push   ebx
c000f307:	e8 34 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f30c:	83 c4 20             	add    esp,0x20
c000f30f:	6a 00                	push   0x0
c000f311:	68 0a 06 00 c0       	push   0xc000060a
c000f316:	6a 32                	push   0x32
c000f318:	53                   	push   ebx
c000f319:	e8 22 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f31e:	6a 00                	push   0x0
c000f320:	68 14 06 00 c0       	push   0xc0000614
c000f325:	6a 33                	push   0x33
c000f327:	53                   	push   ebx
c000f328:	e8 13 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f32d:	83 c4 20             	add    esp,0x20
c000f330:	6a 00                	push   0x0
c000f332:	68 1e 06 00 c0       	push   0xc000061e
c000f337:	6a 34                	push   0x34
c000f339:	53                   	push   ebx
c000f33a:	e8 01 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f33f:	6a 00                	push   0x0
c000f341:	68 28 06 00 c0       	push   0xc0000628
c000f346:	6a 35                	push   0x35
c000f348:	53                   	push   ebx
c000f349:	e8 f2 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f34e:	83 c4 20             	add    esp,0x20
c000f351:	6a 00                	push   0x0
c000f353:	68 32 06 00 c0       	push   0xc0000632
c000f358:	6a 36                	push   0x36
c000f35a:	53                   	push   ebx
c000f35b:	e8 e0 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	6a 00                	push   0x0
c000f362:	68 3c 06 00 c0       	push   0xc000063c
c000f367:	6a 37                	push   0x37
c000f369:	53                   	push   ebx
c000f36a:	e8 d1 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f36f:	83 c4 1c             	add    esp,0x1c
c000f372:	6a 03                	push   0x3
c000f374:	6a 02                	push   0x2
c000f376:	ff 35 30 db 02 c0    	push   DWORD PTR ds:0xc002db30
c000f37c:	e8 5d 27 00 00       	call   c0011ade <VAS::allocatePages(int, int)>
c000f381:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f388:	89 c6                	mov    esi,eax
c000f38a:	e8 0a 02 00 00       	call   c000f599 <malloc>
c000f38f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f395:	89 04 24             	mov    DWORD PTR [esp],eax
c000f398:	89 c7                	mov    edi,eax
c000f39a:	e8 c7 17 00 00       	call   c0010b66 <TSS::TSS()>
c000f39f:	83 c4 0c             	add    esp,0xc
c000f3a2:	68 c6 04 00 c0       	push   0xc00004c6
c000f3a7:	56                   	push   esi
c000f3a8:	57                   	push   edi
c000f3a9:	e8 f8 17 00 00       	call   c0010ba6 <TSS::setup(unsigned long, unsigned long)>
c000f3ae:	89 c6                	mov    esi,eax
c000f3b0:	58                   	pop    eax
c000f3b1:	5a                   	pop    edx
c000f3b2:	6a 00                	push   0x0
c000f3b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f3b8:	50                   	push   eax
c000f3b9:	e8 dc fb ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f3be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3c2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f3c7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f3ce:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f3d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3d8:	80 ce 05             	or     dh,0x5
c000f3db:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f3de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f3e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3e6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f3e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3ec:	e8 87 fc ff ff       	call   c000f078 <IDT::flush()>
c000f3f1:	83 c4 20             	add    esp,0x20
c000f3f4:	5b                   	pop    ebx
c000f3f5:	5e                   	pop    esi
c000f3f6:	5f                   	pop    edi
c000f3f7:	c3                   	ret    

c000f3f8 <sbrk>:
c000f3f8:	55                   	push   ebp
c000f3f9:	57                   	push   edi
c000f3fa:	56                   	push   esi
c000f3fb:	53                   	push   ebx
c000f3fc:	83 ec 1c             	sub    esp,0x1c
c000f3ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f403:	85 c0                	test   eax,eax
c000f405:	74 3e                	je     c000f445 <sbrk+0x4d>
c000f407:	78 43                	js     c000f44c <sbrk+0x54>
c000f409:	8b 15 c8 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d9c8
c000f40f:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f415:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f41b:	83 e2 01             	and    edx,0x1
c000f41e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f422:	8b 0d 9c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c79c
c000f428:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f42c:	05 ff 0f 00 00       	add    eax,0xfff
c000f431:	89 c2                	mov    edx,eax
c000f433:	78 2f                	js     c000f464 <sbrk+0x6c>
c000f435:	c1 fa 0c             	sar    edx,0xc
c000f438:	89 d7                	mov    edi,edx
c000f43a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f43e:	be 00 00 00 00       	mov    esi,0x0
c000f443:	eb 36                	jmp    c000f47b <sbrk+0x83>
c000f445:	a1 9c c7 02 c0       	mov    eax,ds:0xc002c79c
c000f44a:	eb 73                	jmp    c000f4bf <sbrk+0xc7>
c000f44c:	83 ec 08             	sub    esp,0x8
c000f44f:	50                   	push   eax
c000f450:	68 80 9f 02 c0       	push   0xc0029f80
c000f455:	e8 75 32 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c000f45a:	83 c4 10             	add    esp,0x10
c000f45d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f462:	eb 5b                	jmp    c000f4bf <sbrk+0xc7>
c000f464:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f46a:	eb c9                	jmp    c000f435 <sbrk+0x3d>
c000f46c:	81 05 9c c7 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002c79c,0x1000
c000f476:	46                   	inc    esi
c000f477:	39 f7                	cmp    edi,esi
c000f479:	74 33                	je     c000f4ae <sbrk+0xb6>
c000f47b:	8b 1d 30 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db30
c000f481:	8b 2d 9c c7 02 c0    	mov    ebp,DWORD PTR ds:0xc002c79c
c000f487:	e8 09 05 00 00       	call   c000f995 <Phys::allocatePage()>
c000f48c:	68 01 04 00 00       	push   0x401
c000f491:	55                   	push   ebp
c000f492:	50                   	push   eax
c000f493:	53                   	push   ebx
c000f494:	e8 43 25 00 00       	call   c00119dc <VAS::mapPage(unsigned long, unsigned long, int)>
c000f499:	83 c4 10             	add    esp,0x10
c000f49c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4a1:	74 c9                	je     c000f46c <sbrk+0x74>
c000f4a3:	8b 1d 9c c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c79c
c000f4a9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4ac:	eb be                	jmp    c000f46c <sbrk+0x74>
c000f4ae:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4b3:	75 12                	jne    c000f4c7 <sbrk+0xcf>
c000f4b5:	0f 20 d8             	mov    eax,cr3
c000f4b8:	0f 22 d8             	mov    cr3,eax
c000f4bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4bf:	83 c4 1c             	add    esp,0x1c
c000f4c2:	5b                   	pop    ebx
c000f4c3:	5e                   	pop    esi
c000f4c4:	5f                   	pop    edi
c000f4c5:	5d                   	pop    ebp
c000f4c6:	c3                   	ret    
c000f4c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f4cb:	89 cb                	mov    ebx,ecx
c000f4cd:	c1 eb 0a             	shr    ebx,0xa
c000f4d0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f4d6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f4dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4e0:	c1 e0 0c             	shl    eax,0xc
c000f4e3:	01 c8                	add    eax,ecx
c000f4e5:	c1 e8 0a             	shr    eax,0xa
c000f4e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f4ed:	2d 00 00 40 00       	sub    eax,0x400000
c000f4f2:	39 c3                	cmp    ebx,eax
c000f4f4:	77 c5                	ja     c000f4bb <sbrk+0xc3>
c000f4f6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f4ff:	39 d8                	cmp    eax,ebx
c000f501:	73 f3                	jae    c000f4f6 <sbrk+0xfe>
c000f503:	eb b6                	jmp    c000f4bb <sbrk+0xc3>

c000f505 <mmap>:
c000f505:	83 ec 18             	sub    esp,0x18
c000f508:	68 b0 9f 02 c0       	push   0xc0029fb0
c000f50d:	e8 29 a9 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c000f512:	b8 00 00 00 00       	mov    eax,0x0
c000f517:	83 c4 1c             	add    esp,0x1c
c000f51a:	c3                   	ret    

c000f51b <munmap>:
c000f51b:	83 ec 18             	sub    esp,0x18
c000f51e:	68 b5 9f 02 c0       	push   0xc0029fb5
c000f523:	e8 13 a9 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c000f528:	b8 00 00 00 00       	mov    eax,0x0
c000f52d:	83 c4 1c             	add    esp,0x1c
c000f530:	c3                   	ret    

c000f531 <liballoc_lock()>:
c000f531:	fa                   	cli    
c000f532:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c000f538:	b8 00 00 00 00       	mov    eax,0x0
c000f53d:	c3                   	ret    

c000f53e <liballoc_unlock()>:
c000f53e:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c000f543:	48                   	dec    eax
c000f544:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c000f549:	75 01                	jne    c000f54c <liballoc_unlock()+0xe>
c000f54b:	fb                   	sti    
c000f54c:	b8 00 00 00 00       	mov    eax,0x0
c000f551:	c3                   	ret    

c000f552 <liballoc_alloc(int)>:
c000f552:	83 ec 10             	sub    esp,0x10
c000f555:	6a 01                	push   0x1
c000f557:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f55b:	ff 35 30 db 02 c0    	push   DWORD PTR ds:0xc002db30
c000f561:	e8 78 25 00 00       	call   c0011ade <VAS::allocatePages(int, int)>
c000f566:	83 c4 1c             	add    esp,0x1c
c000f569:	c3                   	ret    

c000f56a <liballoc_free(void*, int)>:
c000f56a:	83 ec 14             	sub    esp,0x14
c000f56d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f571:	ff 35 30 db 02 c0    	push   DWORD PTR ds:0xc002db30
c000f577:	e8 0c 22 00 00       	call   c0011788 <VAS::freeAllocatedPages(unsigned long)>
c000f57c:	b8 00 00 00 00       	mov    eax,0x0
c000f581:	83 c4 1c             	add    esp,0x1c
c000f584:	c3                   	ret    

c000f585 <realloc>:
c000f585:	83 ec 14             	sub    esp,0x14
c000f588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f58c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f590:	e8 97 20 ff ff       	call   c000162c <dlrealloc>
c000f595:	83 c4 1c             	add    esp,0x1c
c000f598:	c3                   	ret    

c000f599 <malloc>:
c000f599:	83 ec 18             	sub    esp,0x18
c000f59c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5a0:	e8 4a 1b ff ff       	call   c00010ef <dlmalloc>
c000f5a5:	83 c4 1c             	add    esp,0x1c
c000f5a8:	c3                   	ret    

c000f5a9 <free>:
c000f5a9:	83 ec 18             	sub    esp,0x18
c000f5ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5b0:	e8 df 17 ff ff       	call   c0000d94 <dlfree>
c000f5b5:	83 c4 1c             	add    esp,0x1c
c000f5b8:	c3                   	ret    

c000f5b9 <rfree>:
c000f5b9:	83 ec 18             	sub    esp,0x18
c000f5bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5c0:	e8 cf 17 ff ff       	call   c0000d94 <dlfree>
c000f5c5:	83 c4 1c             	add    esp,0x1c
c000f5c8:	c3                   	ret    

c000f5c9 <calloc>:
c000f5c9:	56                   	push   esi
c000f5ca:	53                   	push   ebx
c000f5cb:	83 ec 10             	sub    esp,0x10
c000f5ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f5d2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 bc ff ff ff       	call   c000f599 <malloc>
c000f5dd:	89 c6                	mov    esi,eax
c000f5df:	83 c4 0c             	add    esp,0xc
c000f5e2:	53                   	push   ebx
c000f5e3:	6a 00                	push   0x0
c000f5e5:	50                   	push   eax
c000f5e6:	e8 65 11 ff ff       	call   c0000750 <memset>
c000f5eb:	89 f0                	mov    eax,esi
c000f5ed:	83 c4 14             	add    esp,0x14
c000f5f0:	5b                   	pop    ebx
c000f5f1:	5e                   	pop    esi
c000f5f2:	c3                   	ret    

c000f5f3 <Krnl::setBootMessage(char const*)>:
c000f5f3:	57                   	push   edi
c000f5f4:	56                   	push   esi
c000f5f5:	53                   	push   ebx
c000f5f6:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f5fc:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f603:	68 9e 00 00 00       	push   0x9e
c000f608:	6a 00                	push   0x0
c000f60a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f60e:	56                   	push   esi
c000f60f:	e8 3c 11 ff ff       	call   c0000750 <memset>
c000f614:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f617:	e8 50 11 ff ff       	call   c000076c <strlen>
c000f61c:	ba 50 00 00 00       	mov    edx,0x50
c000f621:	83 c4 10             	add    esp,0x10
c000f624:	29 c2                	sub    edx,eax
c000f626:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f62a:	d1 ea                	shr    edx,1
c000f62c:	84 c0                	test   al,al
c000f62e:	74 19                	je     c000f649 <Krnl::setBootMessage(char const*)+0x56>
c000f630:	01 d2                	add    edx,edx
c000f632:	43                   	inc    ebx
c000f633:	01 f2                	add    edx,esi
c000f635:	80 cc 0f             	or     ah,0xf
c000f638:	83 c2 02             	add    edx,0x2
c000f63b:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f63f:	43                   	inc    ebx
c000f640:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f645:	84 c0                	test   al,al
c000f647:	75 ec                	jne    c000f635 <Krnl::setBootMessage(char const*)+0x42>
c000f649:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f64e:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f653:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f655:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f65b:	5b                   	pop    ebx
c000f65c:	5e                   	pop    esi
c000f65d:	5f                   	pop    edi
c000f65e:	c3                   	ret    

c000f65f <kernel_main>:
c000f65f:	57                   	push   edi
c000f660:	bf f9 03 00 00       	mov    edi,0x3f9
c000f665:	56                   	push   esi
c000f666:	89 fa                	mov    edx,edi
c000f668:	53                   	push   ebx
c000f669:	31 f6                	xor    esi,esi
c000f66b:	83 ec 2c             	sub    esp,0x2c
c000f66e:	89 f0                	mov    eax,esi
c000f670:	ee                   	out    dx,al
c000f671:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f676:	b0 80                	mov    al,0x80
c000f678:	89 da                	mov    edx,ebx
c000f67a:	ee                   	out    dx,al
c000f67b:	b1 03                	mov    cl,0x3
c000f67d:	ba f8 03 00 00       	mov    edx,0x3f8
c000f682:	88 c8                	mov    al,cl
c000f684:	ee                   	out    dx,al
c000f685:	89 f0                	mov    eax,esi
c000f687:	89 fa                	mov    edx,edi
c000f689:	ee                   	out    dx,al
c000f68a:	88 c8                	mov    al,cl
c000f68c:	89 da                	mov    edx,ebx
c000f68e:	ee                   	out    dx,al
c000f68f:	b0 c7                	mov    al,0xc7
c000f691:	ba fa 03 00 00       	mov    edx,0x3fa
c000f696:	ee                   	out    dx,al
c000f697:	b0 0b                	mov    al,0xb
c000f699:	ba fc 03 00 00       	mov    edx,0x3fc
c000f69e:	ee                   	out    dx,al
c000f69f:	68 bc 9f 02 c0       	push   0xc0029fbc
c000f6a4:	e8 26 30 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c000f6a9:	e8 b8 09 00 00       	call   c0010066 <installVgaTextImplementation()>
c000f6ae:	0f b6 05 a0 c7 02 c0 	movzx  eax,BYTE PTR ds:0xc002c7a0
c000f6b5:	83 c4 10             	add    esp,0x10
c000f6b8:	84 c0                	test   al,al
c000f6ba:	74 6c                	je     c000f728 <kernel_main+0xc9>
c000f6bc:	31 db                	xor    ebx,ebx
c000f6be:	bf 0a 00 00 00       	mov    edi,0xa
c000f6c3:	be 05 00 00 00       	mov    esi,0x5
c000f6c8:	31 c9                	xor    ecx,ecx
c000f6ca:	eb 2a                	jmp    c000f6f6 <kernel_main+0x97>
c000f6cc:	3c 0d                	cmp    al,0xd
c000f6ce:	74 1a                	je     c000f6ea <kernel_main+0x8b>
c000f6d0:	3c 0a                	cmp    al,0xa
c000f6d2:	74 40                	je     c000f714 <kernel_main+0xb5>
c000f6d4:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f6d7:	80 cc 0e             	or     ah,0xe
c000f6da:	c1 e2 04             	shl    edx,0x4
c000f6dd:	01 ca                	add    edx,ecx
c000f6df:	41                   	inc    ecx
c000f6e0:	01 fa                	add    edx,edi
c000f6e2:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f6ea:	43                   	inc    ebx
c000f6eb:	0f b6 83 a0 c7 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3860]
c000f6f2:	84 c0                	test   al,al
c000f6f4:	74 32                	je     c000f728 <kernel_main+0xc9>
c000f6f6:	80 b9 d6 c7 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd382a],0xdb
c000f6fd:	75 cd                	jne    c000f6cc <kernel_main+0x6d>
c000f6ff:	0f b6 91 d5 c7 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd382b]
c000f706:	83 e2 fe             	and    edx,0xfffffffe
c000f709:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f70f:	75 bb                	jne    c000f6cc <kernel_main+0x6d>
c000f711:	47                   	inc    edi
c000f712:	eb b8                	jmp    c000f6cc <kernel_main+0x6d>
c000f714:	43                   	inc    ebx
c000f715:	46                   	inc    esi
c000f716:	31 c9                	xor    ecx,ecx
c000f718:	0f b6 83 a0 c7 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3860]
c000f71f:	bf 0a 00 00 00       	mov    edi,0xa
c000f724:	84 c0                	test   al,al
c000f726:	75 ce                	jne    c000f6f6 <kernel_main+0x97>
c000f728:	83 ec 0c             	sub    esp,0xc
c000f72b:	68 d4 9f 02 c0       	push   0xc0029fd4
c000f730:	e8 be fe ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000f735:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f73a:	a3 e0 d9 02 c0       	mov    ds:0xc002d9e0,eax
c000f73f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f744:	05 ff 0f 00 00       	add    eax,0xfff
c000f749:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f74e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f751:	e8 cb 03 00 00       	call   c000fb21 <Phys::physicalMemorySetup(unsigned int)>
c000f756:	e8 83 1c 00 00       	call   c00113de <Virt::virtualMemorySetup()>
c000f75b:	58                   	pop    eax
c000f75c:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f760:	53                   	push   ebx
c000f761:	e8 4a 1e 00 00       	call   c00115b0 <VAS::VAS()>
c000f766:	89 1d 30 db 02 c0    	mov    DWORD PTR ds:0xc002db30,ebx
c000f76c:	e8 af 08 ff ff       	call   c0000020 <callGlobalConstructors>
c000f771:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f778:	e8 1c fe ff ff       	call   c000f599 <malloc>
c000f77d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f780:	89 c6                	mov    esi,eax
c000f782:	e8 4f f0 ff ff       	call   c000e7d6 <Computer::Computer()>
c000f787:	6a 00                	push   0x0
c000f789:	89 35 c8 d9 02 c0    	mov    DWORD PTR ds:0xc002d9c8,esi
c000f78f:	6a 00                	push   0x0
c000f791:	6a 00                	push   0x0
c000f793:	56                   	push   esi
c000f794:	e8 49 f4 ff ff       	call   c000ebe2 <Computer::open(int, int, void*)>
c000f799:	83 c4 14             	add    esp,0x14
c000f79c:	53                   	push   ebx
c000f79d:	e8 be 20 00 00       	call   c0011860 <VAS::~VAS()>
c000f7a2:	83 c4 30             	add    esp,0x30
c000f7a5:	5b                   	pop    ebx
c000f7a6:	5e                   	pop    esi
c000f7a7:	5f                   	pop    edi
c000f7a8:	c3                   	ret    

c000f7a9 <Phys::allocateDMA(unsigned long)>:
c000f7a9:	55                   	push   ebp
c000f7aa:	31 ed                	xor    ebp,ebp
c000f7ac:	57                   	push   edi
c000f7ad:	56                   	push   esi
c000f7ae:	53                   	push   ebx
c000f7af:	31 db                	xor    ebx,ebx
c000f7b1:	83 ec 18             	sub    esp,0x18
c000f7b4:	68 f3 9f 02 c0       	push   0xc0029ff3
c000f7b9:	e8 11 2f 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c000f7be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f7c2:	31 d2                	xor    edx,edx
c000f7c4:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f7ca:	83 c4 10             	add    esp,0x10
c000f7cd:	c1 ee 0c             	shr    esi,0xc
c000f7d0:	31 c9                	xor    ecx,ecx
c000f7d2:	eb 17                	jmp    c000f7eb <Phys::allocateDMA(unsigned long)+0x42>
c000f7d4:	85 c9                	test   ecx,ecx
c000f7d6:	75 04                	jne    c000f7dc <Phys::allocateDMA(unsigned long)+0x33>
c000f7d8:	89 d5                	mov    ebp,edx
c000f7da:	89 d3                	mov    ebx,edx
c000f7dc:	8d 41 01             	lea    eax,[ecx+0x1]
c000f7df:	39 c6                	cmp    esi,eax
c000f7e1:	74 23                	je     c000f806 <Phys::allocateDMA(unsigned long)+0x5d>
c000f7e3:	42                   	inc    edx
c000f7e4:	89 c1                	mov    ecx,eax
c000f7e6:	83 fa 2f             	cmp    edx,0x2f
c000f7e9:	7f 11                	jg     c000f7fc <Phys::allocateDMA(unsigned long)+0x53>
c000f7eb:	80 ba 20 da 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd25e0],0x0
c000f7f2:	74 e0                	je     c000f7d4 <Phys::allocateDMA(unsigned long)+0x2b>
c000f7f4:	31 c9                	xor    ecx,ecx
c000f7f6:	42                   	inc    edx
c000f7f7:	83 fa 2f             	cmp    edx,0x2f
c000f7fa:	7e ef                	jle    c000f7eb <Phys::allocateDMA(unsigned long)+0x42>
c000f7fc:	83 c4 0c             	add    esp,0xc
c000f7ff:	31 c0                	xor    eax,eax
c000f801:	5b                   	pop    ebx
c000f802:	5e                   	pop    esi
c000f803:	5f                   	pop    edi
c000f804:	5d                   	pop    ebp
c000f805:	c3                   	ret    
c000f806:	8d 14 33             	lea    edx,[ebx+esi*1]
c000f809:	89 d7                	mov    edi,edx
c000f80b:	4f                   	dec    edi
c000f80c:	79 03                	jns    c000f811 <Phys::allocateDMA(unsigned long)+0x68>
c000f80e:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f811:	c1 ff 04             	sar    edi,0x4
c000f814:	89 da                	mov    edx,ebx
c000f816:	c1 fa 04             	sar    edx,0x4
c000f819:	39 fa                	cmp    edx,edi
c000f81b:	75 43                	jne    c000f860 <Phys::allocateDMA(unsigned long)+0xb7>
c000f81d:	85 c0                	test   eax,eax
c000f81f:	74 1a                	je     c000f83b <Phys::allocateDMA(unsigned long)+0x92>
c000f821:	be 20 da 02 c0       	mov    esi,0xc002da20
c000f826:	8d 93 20 da 02 c0    	lea    edx,[ebx-0x3ffd25e0]
c000f82c:	f7 d6                	not    esi
c000f82e:	29 de                	sub    esi,ebx
c000f830:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f833:	42                   	inc    edx
c000f834:	8d 04 16             	lea    eax,[esi+edx*1]
c000f837:	39 c1                	cmp    ecx,eax
c000f839:	7f f5                	jg     c000f830 <Phys::allocateDMA(unsigned long)+0x87>
c000f83b:	83 ec 0c             	sub    esp,0xc
c000f83e:	68 0c a0 02 c0       	push   0xc002a00c
c000f843:	e8 87 2e 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c000f848:	83 c4 10             	add    esp,0x10
c000f84b:	85 ff                	test   edi,edi
c000f84d:	74 17                	je     c000f866 <Phys::allocateDMA(unsigned long)+0xbd>
c000f84f:	83 c4 0c             	add    esp,0xc
c000f852:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c000f858:	5b                   	pop    ebx
c000f859:	c1 e0 0c             	shl    eax,0xc
c000f85c:	5e                   	pop    esi
c000f85d:	5f                   	pop    edi
c000f85e:	5d                   	pop    ebp
c000f85f:	c3                   	ret    
c000f860:	89 ea                	mov    edx,ebp
c000f862:	31 c9                	xor    ecx,ecx
c000f864:	eb 90                	jmp    c000f7f6 <Phys::allocateDMA(unsigned long)+0x4d>
c000f866:	83 c4 0c             	add    esp,0xc
c000f869:	c1 e3 0c             	shl    ebx,0xc
c000f86c:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c000f872:	5b                   	pop    ebx
c000f873:	5e                   	pop    esi
c000f874:	5f                   	pop    edi
c000f875:	5d                   	pop    ebp
c000f876:	c3                   	ret    

c000f877 <Phys::freeDMA(unsigned long, unsigned long)>:
c000f877:	83 ec 18             	sub    esp,0x18
c000f87a:	68 23 a0 02 c0       	push   0xc002a023
c000f87f:	e8 4b 2e 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c000f884:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f888:	83 c4 10             	add    esp,0x10
c000f88b:	8d 88 ff 0f 00 00    	lea    ecx,[eax+0xfff]
c000f891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f895:	c1 e9 0c             	shr    ecx,0xc
c000f898:	81 7c 24 10 ff ff 05 c2 	cmp    DWORD PTR [esp+0x10],0xc205ffff
c000f8a0:	76 29                	jbe    c000f8cb <Phys::freeDMA(unsigned long, unsigned long)+0x54>
c000f8a2:	8d 90 00 00 fa 3d    	lea    edx,[eax+0x3dfa0000]
c000f8a8:	c1 ea 0c             	shr    edx,0xc
c000f8ab:	83 c2 10             	add    edx,0x10
c000f8ae:	85 c9                	test   ecx,ecx
c000f8b0:	74 15                	je     c000f8c7 <Phys::freeDMA(unsigned long, unsigned long)+0x50>
c000f8b2:	8d 82 20 da 02 c0    	lea    eax,[edx-0x3ffd25e0]
c000f8b8:	8d 94 11 20 da 02 c0 	lea    edx,[ecx+edx*1-0x3ffd25e0]
c000f8bf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f8c2:	40                   	inc    eax
c000f8c3:	39 d0                	cmp    eax,edx
c000f8c5:	75 f8                	jne    c000f8bf <Phys::freeDMA(unsigned long, unsigned long)+0x48>
c000f8c7:	83 c4 0c             	add    esp,0xc
c000f8ca:	c3                   	ret    
c000f8cb:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f8d1:	c1 ea 0c             	shr    edx,0xc
c000f8d4:	eb d8                	jmp    c000f8ae <Phys::freeDMA(unsigned long, unsigned long)+0x37>

c000f8d6 <Phys::setPageState(unsigned long, bool)>:
c000f8d6:	56                   	push   esi
c000f8d7:	ba 01 00 00 00       	mov    edx,0x1
c000f8dc:	53                   	push   ebx
c000f8dd:	8b 35 e4 c8 02 c0    	mov    esi,DWORD PTR ds:0xc002c8e4
c000f8e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f8eb:	89 c8                	mov    eax,ecx
c000f8ed:	83 e1 07             	and    ecx,0x7
c000f8f0:	c1 e8 03             	shr    eax,0x3
c000f8f3:	d3 e3                	shl    ebx,cl
c000f8f5:	01 c6                	add    esi,eax
c000f8f7:	d3 e2                	shl    edx,cl
c000f8f9:	f7 d2                	not    edx
c000f8fb:	20 16                	and    BYTE PTR [esi],dl
c000f8fd:	03 05 e4 c8 02 c0    	add    eax,DWORD PTR ds:0xc002c8e4
c000f903:	08 18                	or     BYTE PTR [eax],bl
c000f905:	5b                   	pop    ebx
c000f906:	5e                   	pop    esi
c000f907:	c3                   	ret    

c000f908 <Phys::getPageState(unsigned long)>:
c000f908:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f90c:	8b 15 e4 c8 02 c0    	mov    edx,DWORD PTR ds:0xc002c8e4
c000f912:	89 c8                	mov    eax,ecx
c000f914:	83 e1 07             	and    ecx,0x7
c000f917:	c1 e8 03             	shr    eax,0x3
c000f91a:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f91e:	d3 f8                	sar    eax,cl
c000f920:	83 e0 01             	and    eax,0x1
c000f923:	c3                   	ret    

c000f924 <Phys::freePage(unsigned long)>:
c000f924:	53                   	push   ebx
c000f925:	83 ec 10             	sub    esp,0x10
c000f928:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f92c:	53                   	push   ebx
c000f92d:	68 39 a0 02 c0       	push   0xc002a039
c000f932:	e8 98 2d 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c000f937:	83 c4 10             	add    esp,0x10
c000f93a:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f940:	76 3d                	jbe    c000f97f <Phys::freePage(unsigned long)+0x5b>
c000f942:	83 ec 0c             	sub    esp,0xc
c000f945:	c1 eb 0c             	shr    ebx,0xc
c000f948:	53                   	push   ebx
c000f949:	e8 ba ff ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000f94e:	83 c4 10             	add    esp,0x10
c000f951:	84 c0                	test   al,al
c000f953:	74 19                	je     c000f96e <Phys::freePage(unsigned long)+0x4a>
c000f955:	83 ec 08             	sub    esp,0x8
c000f958:	ff 0d 10 da 02 c0    	dec    DWORD PTR ds:0xc002da10
c000f95e:	6a 00                	push   0x0
c000f960:	53                   	push   ebx
c000f961:	e8 70 ff ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000f966:	83 c4 10             	add    esp,0x10
c000f969:	83 c4 08             	add    esp,0x8
c000f96c:	5b                   	pop    ebx
c000f96d:	c3                   	ret    
c000f96e:	c7 44 24 10 4c a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a04c
c000f976:	83 c4 08             	add    esp,0x8
c000f979:	5b                   	pop    ebx
c000f97a:	e9 bc a4 00 00       	jmp    c0019e3b <Krnl::panic(char const*)>
c000f97f:	83 ec 08             	sub    esp,0x8
c000f982:	68 00 10 00 00       	push   0x1000
c000f987:	53                   	push   ebx
c000f988:	e8 ea fe ff ff       	call   c000f877 <Phys::freeDMA(unsigned long, unsigned long)>
c000f98d:	83 c4 10             	add    esp,0x10
c000f990:	83 c4 08             	add    esp,0x8
c000f993:	5b                   	pop    ebx
c000f994:	c3                   	ret    

c000f995 <Phys::allocatePage()>:
c000f995:	56                   	push   esi
c000f996:	53                   	push   ebx
c000f997:	83 ec 14             	sub    esp,0x14
c000f99a:	8b 35 04 da 02 c0    	mov    esi,DWORD PTR ds:0xc002da04
c000f9a0:	89 f3                	mov    ebx,esi
c000f9a2:	eb 0a                	jmp    c000f9ae <Phys::allocatePage()+0x19>
c000f9a4:	89 1d 04 da 02 c0    	mov    DWORD PTR ds:0xc002da04,ebx
c000f9aa:	39 de                	cmp    esi,ebx
c000f9ac:	74 24                	je     c000f9d2 <Phys::allocatePage()+0x3d>
c000f9ae:	53                   	push   ebx
c000f9af:	e8 54 ff ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000f9b4:	5a                   	pop    edx
c000f9b5:	84 c0                	test   al,al
c000f9b7:	74 76                	je     c000fa2f <Phys::allocatePage()+0x9a>
c000f9b9:	43                   	inc    ebx
c000f9ba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f9c0:	75 e2                	jne    c000f9a4 <Phys::allocatePage()+0xf>
c000f9c2:	31 db                	xor    ebx,ebx
c000f9c4:	c7 05 04 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da04,0x0
c000f9ce:	39 de                	cmp    esi,ebx
c000f9d0:	75 dc                	jne    c000f9ae <Phys::allocatePage()+0x19>
c000f9d2:	83 ec 0c             	sub    esp,0xc
c000f9d5:	68 80 a0 02 c0       	push   0xc002a080
c000f9da:	e8 f0 2c 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c000f9df:	58                   	pop    eax
c000f9e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f9e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f9e8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000f9ee:	e8 89 29 00 00       	call   c001237c <VAS::scanForEviction()>
c000f9f3:	83 c4 10             	add    esp,0x10
c000f9f6:	85 c0                	test   eax,eax
c000f9f8:	75 76                	jne    c000fa70 <Phys::allocatePage()+0xdb>
c000f9fa:	83 ec 0c             	sub    esp,0xc
c000f9fd:	68 00 10 00 00       	push   0x1000
c000fa02:	e8 a2 fd ff ff       	call   c000f7a9 <Phys::allocateDMA(unsigned long)>
c000fa07:	83 c4 10             	add    esp,0x10
c000fa0a:	85 c0                	test   eax,eax
c000fa0c:	75 5c                	jne    c000fa6a <Phys::allocatePage()+0xd5>
c000fa0e:	83 ec 0c             	sub    esp,0xc
c000fa11:	68 98 a0 02 c0       	push   0xc002a098
c000fa16:	e8 20 a4 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c000fa1b:	83 c4 10             	add    esp,0x10
c000fa1e:	8b 1d 04 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da04
c000fa24:	53                   	push   ebx
c000fa25:	e8 de fe ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000fa2a:	5a                   	pop    edx
c000fa2b:	84 c0                	test   al,al
c000fa2d:	75 8a                	jne    c000f9b9 <Phys::allocatePage()+0x24>
c000fa2f:	6a 01                	push   0x1
c000fa31:	53                   	push   ebx
c000fa32:	e8 9f fe ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fa37:	5a                   	pop    edx
c000fa38:	a1 10 da 02 c0       	mov    eax,ds:0xc002da10
c000fa3d:	59                   	pop    ecx
c000fa3e:	40                   	inc    eax
c000fa3f:	8b 15 04 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da04
c000fa45:	a3 10 da 02 c0       	mov    ds:0xc002da10,eax
c000fa4a:	c1 e2 0c             	shl    edx,0xc
c000fa4d:	52                   	push   edx
c000fa4e:	ff 35 14 da 02 c0    	push   DWORD PTR ds:0xc002da14
c000fa54:	50                   	push   eax
c000fa55:	68 62 a0 02 c0       	push   0xc002a062
c000fa5a:	e8 70 2c 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c000fa5f:	a1 04 da 02 c0       	mov    eax,ds:0xc002da04
c000fa64:	83 c4 10             	add    esp,0x10
c000fa67:	c1 e0 0c             	shl    eax,0xc
c000fa6a:	83 c4 14             	add    esp,0x14
c000fa6d:	5b                   	pop    ebx
c000fa6e:	5e                   	pop    esi
c000fa6f:	c3                   	ret    
c000fa70:	83 ec 08             	sub    esp,0x8
c000fa73:	89 c2                	mov    edx,eax
c000fa75:	6a 01                	push   0x1
c000fa77:	c1 ea 0c             	shr    edx,0xc
c000fa7a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fa7e:	52                   	push   edx
c000fa7f:	e8 52 fe ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fa84:	83 c4 10             	add    esp,0x10
c000fa87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa8b:	eb dd                	jmp    c000fa6a <Phys::allocatePage()+0xd5>

c000fa8d <Phys::allocateContiguousPages(int)>:
c000fa8d:	57                   	push   edi
c000fa8e:	56                   	push   esi
c000fa8f:	53                   	push   ebx
c000fa90:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fa94:	fa                   	cli    
c000fa95:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c000fa9b:	31 db                	xor    ebx,ebx
c000fa9d:	85 db                	test   ebx,ebx
c000fa9f:	75 11                	jne    c000fab2 <Phys::allocateContiguousPages(int)+0x25>
c000faa1:	e8 ef fe ff ff       	call   c000f995 <Phys::allocatePage()>
c000faa6:	83 fe 01             	cmp    esi,0x1
c000faa9:	89 c7                	mov    edi,eax
c000faab:	74 21                	je     c000face <Phys::allocateContiguousPages(int)+0x41>
c000faad:	bb 01 00 00 00       	mov    ebx,0x1
c000fab2:	e8 de fe ff ff       	call   c000f995 <Phys::allocatePage()>
c000fab7:	89 da                	mov    edx,ebx
c000fab9:	c1 e2 0c             	shl    edx,0xc
c000fabc:	01 fa                	add    edx,edi
c000fabe:	39 c2                	cmp    edx,eax
c000fac0:	74 20                	je     c000fae2 <Phys::allocateContiguousPages(int)+0x55>
c000fac2:	bb 01 00 00 00       	mov    ebx,0x1
c000fac7:	89 c7                	mov    edi,eax
c000fac9:	83 fe 01             	cmp    esi,0x1
c000facc:	75 e4                	jne    c000fab2 <Phys::allocateContiguousPages(int)+0x25>
c000face:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c000fad3:	48                   	dec    eax
c000fad4:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c000fad9:	75 01                	jne    c000fadc <Phys::allocateContiguousPages(int)+0x4f>
c000fadb:	fb                   	sti    
c000fadc:	89 f8                	mov    eax,edi
c000fade:	5b                   	pop    ebx
c000fadf:	5e                   	pop    esi
c000fae0:	5f                   	pop    edi
c000fae1:	c3                   	ret    
c000fae2:	43                   	inc    ebx
c000fae3:	39 f3                	cmp    ebx,esi
c000fae5:	75 b6                	jne    c000fa9d <Phys::allocateContiguousPages(int)+0x10>
c000fae7:	eb e5                	jmp    c000face <Phys::allocateContiguousPages(int)+0x41>

c000fae9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fae9:	56                   	push   esi
c000faea:	53                   	push   ebx
c000faeb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000faef:	39 1d 08 da 02 c0    	cmp    DWORD PTR ds:0xc002da08,ebx
c000faf5:	73 06                	jae    c000fafd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000faf7:	89 1d 08 da 02 c0    	mov    DWORD PTR ds:0xc002da08,ebx
c000fafd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb01:	c1 eb 0c             	shr    ebx,0xc
c000fb04:	c1 e8 0c             	shr    eax,0xc
c000fb07:	39 d8                	cmp    eax,ebx
c000fb09:	73 13                	jae    c000fb1e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fb0b:	6a 00                	push   0x0
c000fb0d:	8d 70 01             	lea    esi,[eax+0x1]
c000fb10:	50                   	push   eax
c000fb11:	e8 c0 fd ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fb16:	5a                   	pop    edx
c000fb17:	89 f0                	mov    eax,esi
c000fb19:	59                   	pop    ecx
c000fb1a:	39 f3                	cmp    ebx,esi
c000fb1c:	75 ed                	jne    c000fb0b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fb1e:	5b                   	pop    ebx
c000fb1f:	5e                   	pop    esi
c000fb20:	c3                   	ret    

c000fb21 <Phys::physicalMemorySetup(unsigned int)>:
c000fb21:	55                   	push   ebp
c000fb22:	57                   	push   edi
c000fb23:	56                   	push   esi
c000fb24:	53                   	push   ebx
c000fb25:	83 ec 40             	sub    esp,0x40
c000fb28:	6a 30                	push   0x30
c000fb2a:	6a 00                	push   0x0
c000fb2c:	68 20 da 02 c0       	push   0xc002da20
c000fb31:	e8 1a 0c ff ff       	call   c0000750 <memset>
c000fb36:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fb3a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fb3f:	05 00 10 00 00       	add    eax,0x1000
c000fb44:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fb48:	5b                   	pop    ebx
c000fb49:	31 db                	xor    ebx,ebx
c000fb4b:	5e                   	pop    esi
c000fb4c:	50                   	push   eax
c000fb4d:	68 a6 a0 02 c0       	push   0xc002a0a6
c000fb52:	e8 78 2b 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c000fb57:	83 c4 10             	add    esp,0x10
c000fb5a:	83 ec 08             	sub    esp,0x8
c000fb5d:	6a 01                	push   0x1
c000fb5f:	53                   	push   ebx
c000fb60:	43                   	inc    ebx
c000fb61:	e8 70 fd ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fb66:	83 c4 10             	add    esp,0x10
c000fb69:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fb6f:	75 e9                	jne    c000fb5a <Phys::physicalMemorySetup(unsigned int)+0x39>
c000fb71:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fb78:	66 85 c0             	test   ax,ax
c000fb7b:	0f 84 8e 01 00 00    	je     c000fd0f <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000fb81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fb85:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fb8d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fb91:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fb96:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fb9a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fba2:	eb 15                	jmp    c000fbb9 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000fba4:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fba8:	83 c3 18             	add    ebx,0x18
c000fbab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbaf:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fbb3:	0f 84 66 01 00 00    	je     c000fd1f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fbb9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fbbc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fbbf:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fbc2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fbc6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fbca:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fbcc:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fbcf:	01 f0                	add    eax,esi
c000fbd1:	55                   	push   ebp
c000fbd2:	11 fa                	adc    edx,edi
c000fbd4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fbd8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fbdc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fbe0:	56                   	push   esi
c000fbe1:	68 e8 a0 02 c0       	push   0xc002a0e8
c000fbe6:	e8 e4 2a 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c000fbeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fbef:	83 c4 10             	add    esp,0x10
c000fbf2:	09 f8                	or     eax,edi
c000fbf4:	0f 85 25 01 00 00    	jne    c000fd1f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fbfa:	4d                   	dec    ebp
c000fbfb:	75 a7                	jne    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fbfd:	ba 00 00 08 00       	mov    edx,0x80000
c000fc02:	89 c1                	mov    ecx,eax
c000fc04:	39 f2                	cmp    edx,esi
c000fc06:	19 f9                	sbb    ecx,edi
c000fc08:	0f 82 a7 00 00 00    	jb     c000fcb5 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fc0e:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fc12:	89 c1                	mov    ecx,eax
c000fc14:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fc18:	0f 83 97 00 00 00    	jae    c000fcb5 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fc1e:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fc23:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc27:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc2b:	39 fa                	cmp    edx,edi
c000fc2d:	19 e8                	sbb    eax,ebp
c000fc2f:	0f 82 14 01 00 00    	jb     c000fd49 <Phys::physicalMemorySetup(unsigned int)+0x228>
c000fc35:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc39:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc3d:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fc43:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fc48:	83 d5 ff             	adc    ebp,0xffffffff
c000fc4b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fc4f:	31 c0                	xor    eax,eax
c000fc51:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fc55:	39 fa                	cmp    edx,edi
c000fc57:	89 c1                	mov    ecx,eax
c000fc59:	19 e9                	sbb    ecx,ebp
c000fc5b:	0f 83 43 ff ff ff    	jae    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fc61:	be 00 00 08 00       	mov    esi,0x80000
c000fc66:	50                   	push   eax
c000fc67:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fc6b:	57                   	push   edi
c000fc6c:	56                   	push   esi
c000fc6d:	68 0c a1 02 c0       	push   0xc002a10c
c000fc72:	e8 58 2a 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c000fc77:	5a                   	pop    edx
c000fc78:	59                   	pop    ecx
c000fc79:	57                   	push   edi
c000fc7a:	56                   	push   esi
c000fc7b:	e8 69 fe ff ff       	call   c000fae9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fc80:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fc84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc88:	83 c4 0c             	add    esp,0xc
c000fc8b:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fc8f:	03 05 14 da 02 c0    	add    eax,DWORD PTR ds:0xc002da14
c000fc95:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc9c:	a3 14 da 02 c0       	mov    ds:0xc002da14,eax
c000fca1:	52                   	push   edx
c000fca2:	50                   	push   eax
c000fca3:	68 cc a0 02 c0       	push   0xc002a0cc
c000fca8:	e8 22 2a 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c000fcad:	83 c4 10             	add    esp,0x10
c000fcb0:	e9 ef fe ff ff       	jmp    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fcb5:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fcb9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fcbd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fcc1:	39 ea                	cmp    edx,ebp
c000fcc3:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fcc7:	0f 82 d7 fe ff ff    	jb     c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fccd:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fcd2:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fcd6:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fcda:	0f 83 c4 fe ff ff    	jae    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fce0:	39 ee                	cmp    esi,ebp
c000fce2:	89 f8                	mov    eax,edi
c000fce4:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fce8:	0f 83 78 ff ff ff    	jae    c000fc66 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000fcee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcf2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fcf6:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fcfa:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fcfe:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fd02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd06:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd0a:	e9 57 ff ff ff       	jmp    c000fc66 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000fd0f:	83 ec 0c             	sub    esp,0xc
c000fd12:	68 be a0 02 c0       	push   0xc002a0be
c000fd17:	e8 1f a1 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c000fd1c:	83 c4 10             	add    esp,0x10
c000fd1f:	bb 40 01 00 00       	mov    ebx,0x140
c000fd24:	83 ec 08             	sub    esp,0x8
c000fd27:	6a 00                	push   0x0
c000fd29:	53                   	push   ebx
c000fd2a:	43                   	inc    ebx
c000fd2b:	e8 a6 fb ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fd30:	ff 05 14 da 02 c0    	inc    DWORD PTR ds:0xc002da14
c000fd36:	83 c4 10             	add    esp,0x10
c000fd39:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fd3f:	75 e3                	jne    c000fd24 <Phys::physicalMemorySetup(unsigned int)+0x203>
c000fd41:	83 c4 3c             	add    esp,0x3c
c000fd44:	5b                   	pop    ebx
c000fd45:	5e                   	pop    esi
c000fd46:	5f                   	pop    edi
c000fd47:	5d                   	pop    ebp
c000fd48:	c3                   	ret    
c000fd49:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fd51:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fd59:	e9 d7 fe ff ff       	jmp    c000fc35 <Phys::physicalMemorySetup(unsigned int)+0x114>

c000fd5e <Pipe::isAtty()>:
c000fd5e:	31 c0                	xor    eax,eax
c000fd60:	c3                   	ret    
c000fd61:	90                   	nop

c000fd62 <Pipe::~Pipe()>:
c000fd62:	83 ec 0c             	sub    esp,0xc
c000fd65:	ba 78 a1 02 c0       	mov    edx,0xc002a178
c000fd6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd6e:	89 10                	mov    DWORD PTR [eax],edx
c000fd70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd74:	83 ec 0c             	sub    esp,0xc
c000fd77:	50                   	push   eax
c000fd78:	e8 41 12 00 00       	call   c0010fbe <UnixFile::~UnixFile()>
c000fd7d:	83 c4 10             	add    esp,0x10
c000fd80:	90                   	nop
c000fd81:	83 c4 0c             	add    esp,0xc
c000fd84:	c3                   	ret    
c000fd85:	90                   	nop

c000fd86 <Pipe::~Pipe()>:
c000fd86:	83 ec 0c             	sub    esp,0xc
c000fd89:	83 ec 0c             	sub    esp,0xc
c000fd8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd90:	e8 cd ff ff ff       	call   c000fd62 <Pipe::~Pipe()>
c000fd95:	83 c4 10             	add    esp,0x10
c000fd98:	83 ec 08             	sub    esp,0x8
c000fd9b:	6a 20                	push   0x20
c000fd9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fda1:	e8 51 28 00 00       	call   c00125f7 <operator delete(void*, unsigned long)>
c000fda6:	83 c4 10             	add    esp,0x10
c000fda9:	83 c4 0c             	add    esp,0xc
c000fdac:	c3                   	ret    
c000fdad:	90                   	nop

c000fdae <Pipe::read(unsigned long long, void*, int*)>:
c000fdae:	55                   	push   ebp
c000fdaf:	57                   	push   edi
c000fdb0:	56                   	push   esi
c000fdb1:	53                   	push   ebx
c000fdb2:	83 ec 1c             	sub    esp,0x1c
c000fdb5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fdb9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fdbd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fdc1:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fdc4:	89 c8                	mov    eax,ecx
c000fdc6:	99                   	cdq    
c000fdc7:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fdcb:	74 24                	je     c000fdf1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fdcd:	39 f9                	cmp    ecx,edi
c000fdcf:	89 d1                	mov    ecx,edx
c000fdd1:	19 f1                	sbb    ecx,esi
c000fdd3:	73 1c                	jae    c000fdf1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fdd5:	fa                   	cli    
c000fdd6:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c000fddc:	e8 ea db 00 00       	call   c001d9cb <schedule()>
c000fde1:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c000fde6:	48                   	dec    eax
c000fde7:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c000fdec:	75 d3                	jne    c000fdc1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdee:	fb                   	sti    
c000fdef:	eb d0                	jmp    c000fdc1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdf1:	39 f8                	cmp    eax,edi
c000fdf3:	89 d1                	mov    ecx,edx
c000fdf5:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fdf8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000fdfc:	19 f1                	sbb    ecx,esi
c000fdfe:	73 07                	jae    c000fe07 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000fe00:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe03:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fe07:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fe0a:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000fe0d:	29 f7                	sub    edi,esi
c000fe0f:	89 f8                	mov    eax,edi
c000fe11:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000fe15:	99                   	cdq    
c000fe16:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000fe19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe1d:	19 d0                	sbb    eax,edx
c000fe1f:	73 07                	jae    c000fe28 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000fe21:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fe24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe28:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000fe2b:	89 ea                	mov    edx,ebp
c000fe2d:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000fe31:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000fe36:	74 0d                	je     c000fe45 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000fe38:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000fe3b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000fe3f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe43:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe45:	85 d2                	test   edx,edx
c000fe47:	74 11                	je     c000fe5a <Pipe::read(unsigned long long, void*, int*)+0xac>
c000fe49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe4d:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000fe50:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fe54:	89 d1                	mov    ecx,edx
c000fe56:	89 c7                	mov    edi,eax
c000fe58:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe5a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fe5d:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000fe60:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fe63:	99                   	cdq    
c000fe64:	89 f7                	mov    edi,esi
c000fe66:	03 04 24             	add    eax,DWORD PTR [esp]
c000fe69:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000fe6d:	c1 ff 1f             	sar    edi,0x1f
c000fe70:	57                   	push   edi
c000fe71:	56                   	push   esi
c000fe72:	52                   	push   edx
c000fe73:	50                   	push   eax
c000fe74:	e8 9b 69 01 00       	call   c0026814 <__umoddi3>
c000fe79:	83 c4 10             	add    esp,0x10
c000fe7c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fe7f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fe84:	75 10                	jne    c000fe96 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000fe86:	83 ec 0c             	sub    esp,0xc
c000fe89:	68 35 a1 02 c0       	push   0xc002a135
c000fe8e:	e8 a8 9f 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c000fe93:	83 c4 10             	add    esp,0x10
c000fe96:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fe9a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fe9d:	89 10                	mov    DWORD PTR [eax],edx
c000fe9f:	83 c4 1c             	add    esp,0x1c
c000fea2:	31 c0                	xor    eax,eax
c000fea4:	5b                   	pop    ebx
c000fea5:	5e                   	pop    esi
c000fea6:	5f                   	pop    edi
c000fea7:	5d                   	pop    ebp
c000fea8:	c3                   	ret    
c000fea9:	90                   	nop

c000feaa <Pipe::write(unsigned long long, void*, int*)>:
c000feaa:	55                   	push   ebp
c000feab:	57                   	push   edi
c000feac:	56                   	push   esi
c000fead:	53                   	push   ebx
c000feae:	83 ec 1c             	sub    esp,0x1c
c000feb1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000feb5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000feb9:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000febc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fec0:	89 04 24             	mov    DWORD PTR [esp],eax
c000fec3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fec7:	89 d8                	mov    eax,ebx
c000fec9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000fecc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fed0:	89 d6                	mov    esi,edx
c000fed2:	89 d7                	mov    edi,edx
c000fed4:	c1 ff 1f             	sar    edi,0x1f
c000fed7:	03 34 24             	add    esi,DWORD PTR [esp]
c000feda:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000fede:	c1 f8 1f             	sar    eax,0x1f
c000fee1:	39 f3                	cmp    ebx,esi
c000fee3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fee7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000feeb:	19 f8                	sbb    eax,edi
c000feed:	b8 01 00 00 00       	mov    eax,0x1
c000fef2:	72 6e                	jb     c000ff62 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000fef4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fef7:	01 d0                	add    eax,edx
c000fef9:	99                   	cdq    
c000fefa:	f7 fb                	idiv   ebx
c000fefc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff00:	29 d3                	sub    ebx,edx
c000ff02:	89 d7                	mov    edi,edx
c000ff04:	89 de                	mov    esi,ebx
c000ff06:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000ff09:	c1 fb 1f             	sar    ebx,0x1f
c000ff0c:	39 f2                	cmp    edx,esi
c000ff0e:	19 d8                	sbb    eax,ebx
c000ff10:	b8 00 00 00 00       	mov    eax,0x0
c000ff15:	72 04                	jb     c000ff1b <Pipe::write(unsigned long long, void*, int*)+0x71>
c000ff17:	89 d0                	mov    eax,edx
c000ff19:	29 f0                	sub    eax,esi
c000ff1b:	89 d3                	mov    ebx,edx
c000ff1d:	29 c3                	sub    ebx,eax
c000ff1f:	74 0b                	je     c000ff2c <Pipe::write(unsigned long long, void*, int*)+0x82>
c000ff21:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ff24:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ff28:	89 d9                	mov    ecx,ebx
c000ff2a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff2c:	85 c0                	test   eax,eax
c000ff2e:	74 0d                	je     c000ff3d <Pipe::write(unsigned long long, void*, int*)+0x93>
c000ff30:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ff34:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000ff37:	89 de                	mov    esi,ebx
c000ff39:	89 c1                	mov    ecx,eax
c000ff3b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff3d:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000ff40:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff45:	75 10                	jne    c000ff57 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000ff47:	83 ec 0c             	sub    esp,0xc
c000ff4a:	68 51 a1 02 c0       	push   0xc002a151
c000ff4f:	e8 e7 9e 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c000ff54:	83 c4 10             	add    esp,0x10
c000ff57:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff5b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000ff5e:	89 08                	mov    DWORD PTR [eax],ecx
c000ff60:	31 c0                	xor    eax,eax
c000ff62:	83 c4 1c             	add    esp,0x1c
c000ff65:	5b                   	pop    ebx
c000ff66:	5e                   	pop    esi
c000ff67:	5f                   	pop    edi
c000ff68:	5d                   	pop    ebp
c000ff69:	c3                   	ret    

c000ff6a <Pipe::Pipe(int)>:
c000ff6a:	83 ec 0c             	sub    esp,0xc
c000ff6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff71:	83 ec 08             	sub    esp,0x8
c000ff74:	6a 00                	push   0x0
c000ff76:	50                   	push   eax
c000ff77:	e8 60 0e 00 00       	call   c0010ddc <UnixFile::UnixFile(int)>
c000ff7c:	83 c4 10             	add    esp,0x10
c000ff7f:	ba 78 a1 02 c0       	mov    edx,0xc002a178
c000ff84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff88:	89 10                	mov    DWORD PTR [eax],edx
c000ff8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ff92:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ff95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff99:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ffa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffa4:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ffab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffaf:	83 ec 0c             	sub    esp,0xc
c000ffb2:	50                   	push   eax
c000ffb3:	e8 e1 f5 ff ff       	call   c000f599 <malloc>
c000ffb8:	83 c4 10             	add    esp,0x10
c000ffbb:	89 c2                	mov    edx,eax
c000ffbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ffc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc8:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ffcc:	90                   	nop
c000ffcd:	83 c4 0c             	add    esp,0xc
c000ffd0:	c3                   	ret    
c000ffd1:	90                   	nop

c000ffd2 <VgaText::isAtty()>:
c000ffd2:	b0 01                	mov    al,0x1
c000ffd4:	c3                   	ret    
c000ffd5:	90                   	nop

c000ffd6 <VgaText::~VgaText()>:
c000ffd6:	83 ec 0c             	sub    esp,0xc
c000ffd9:	ba 00 a2 02 c0       	mov    edx,0xc002a200
c000ffde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe2:	89 10                	mov    DWORD PTR [eax],edx
c000ffe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe8:	83 ec 0c             	sub    esp,0xc
c000ffeb:	50                   	push   eax
c000ffec:	e8 cd 0f 00 00       	call   c0010fbe <UnixFile::~UnixFile()>
c000fff1:	83 c4 10             	add    esp,0x10
c000fff4:	90                   	nop
c000fff5:	83 c4 0c             	add    esp,0xc
c000fff8:	c3                   	ret    
c000fff9:	90                   	nop

c000fffa <VgaText::~VgaText()>:
c000fffa:	83 ec 0c             	sub    esp,0xc
c000fffd:	83 ec 0c             	sub    esp,0xc
c0010000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010004:	e8 cd ff ff ff       	call   c000ffd6 <VgaText::~VgaText()>
c0010009:	83 c4 10             	add    esp,0x10
c001000c:	83 ec 08             	sub    esp,0x8
c001000f:	68 c4 02 00 00       	push   0x2c4
c0010014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010018:	e8 da 25 00 00       	call   c00125f7 <operator delete(void*, unsigned long)>
c001001d:	83 c4 10             	add    esp,0x10
c0010020:	83 c4 0c             	add    esp,0xc
c0010023:	c3                   	ret    

c0010024 <VgaText::read(unsigned long long, void*, int*)>:
c0010024:	83 ec 10             	sub    esp,0x10
c0010027:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001002b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001002f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010033:	e8 5e 5b 00 00       	call   c0015b96 <readKeyboard(VgaText*, char*, unsigned long)>
c0010038:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001003c:	89 02                	mov    DWORD PTR [edx],eax
c001003e:	31 c0                	xor    eax,eax
c0010040:	83 c4 1c             	add    esp,0x1c
c0010043:	c3                   	ret    

c0010044 <setTerminalScrollLock(bool)>:
c0010044:	c3                   	ret    

c0010045 <addToTerminalCycle(VgaText*)>:
c0010045:	8b 15 80 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da80
c001004b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001004f:	85 d2                	test   edx,edx
c0010051:	75 09                	jne    c001005c <addToTerminalCycle(VgaText*)+0x17>
c0010053:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c0010056:	a3 80 da 02 c0       	mov    ds:0xc002da80,eax
c001005b:	c3                   	ret    
c001005c:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c001005f:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010062:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010065:	c3                   	ret    

c0010066 <installVgaTextImplementation()>:
c0010066:	83 ec 10             	sub    esp,0x10
c0010069:	6a 20                	push   0x20
c001006b:	6a 00                	push   0x0
c001006d:	68 60 da 02 c0       	push   0xc002da60
c0010072:	e8 d9 06 ff ff       	call   c0000750 <memset>
c0010077:	83 c4 1c             	add    esp,0x1c
c001007a:	c3                   	ret    

c001007b <scrollTerminalScrollLock(int)>:
c001007b:	c3                   	ret    

c001007c <VgaText::updateTitle()>:
c001007c:	53                   	push   ebx
c001007d:	31 c0                	xor    eax,eax
c001007f:	83 ec 58             	sub    esp,0x58
c0010082:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010086:	89 e1                	mov    ecx,esp
c0010088:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001008c:	40                   	inc    eax
c001008d:	83 f8 50             	cmp    eax,0x50
c0010090:	75 f6                	jne    c0010088 <VgaText::updateTitle()+0xc>
c0010092:	31 c0                	xor    eax,eax
c0010094:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c001009b:	84 db                	test   bl,bl
c001009d:	74 06                	je     c00100a5 <VgaText::updateTitle()+0x29>
c001009f:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00100a2:	40                   	inc    eax
c00100a3:	eb ef                	jmp    c0010094 <VgaText::updateTitle()+0x18>
c00100a5:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c00100a8:	85 c0                	test   eax,eax
c00100aa:	74 09                	je     c00100b5 <VgaText::updateTitle()+0x39>
c00100ac:	53                   	push   ebx
c00100ad:	53                   	push   ebx
c00100ae:	51                   	push   ecx
c00100af:	52                   	push   edx
c00100b0:	ff d0                	call   eax
c00100b2:	83 c4 10             	add    esp,0x10
c00100b5:	83 c4 58             	add    esp,0x58
c00100b8:	5b                   	pop    ebx
c00100b9:	c3                   	ret    

c00100ba <VgaText::load()>:
c00100ba:	53                   	push   ebx
c00100bb:	31 c0                	xor    eax,eax
c00100bd:	83 ec 58             	sub    esp,0x58
c00100c0:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00100c4:	89 e2                	mov    edx,esp
c00100c6:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00100ca:	40                   	inc    eax
c00100cb:	83 f8 50             	cmp    eax,0x50
c00100ce:	75 f6                	jne    c00100c6 <VgaText::load()+0xc>
c00100d0:	31 c0                	xor    eax,eax
c00100d2:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c00100d9:	84 c9                	test   cl,cl
c00100db:	74 06                	je     c00100e3 <VgaText::load()+0x29>
c00100dd:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00100e0:	40                   	inc    eax
c00100e1:	eb ef                	jmp    c00100d2 <VgaText::load()+0x18>
c00100e3:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00100e6:	85 c0                	test   eax,eax
c00100e8:	74 09                	je     c00100f3 <VgaText::load()+0x39>
c00100ea:	51                   	push   ecx
c00100eb:	51                   	push   ecx
c00100ec:	52                   	push   edx
c00100ed:	53                   	push   ebx
c00100ee:	ff d0                	call   eax
c00100f0:	83 c4 10             	add    esp,0x10
c00100f3:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00100f6:	85 c0                	test   eax,eax
c00100f8:	74 09                	je     c0010103 <VgaText::load()+0x49>
c00100fa:	83 ec 0c             	sub    esp,0xc
c00100fd:	53                   	push   ebx
c00100fe:	ff d0                	call   eax
c0010100:	83 c4 10             	add    esp,0x10
c0010103:	83 c4 58             	add    esp,0x58
c0010106:	5b                   	pop    ebx
c0010107:	c3                   	ret    

c0010108 <VgaText::updateCursor()>:
c0010108:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001010c:	39 05 84 da 02 c0    	cmp    DWORD PTR ds:0xc002da84,eax
c0010112:	75 09                	jne    c001011d <VgaText::updateCursor()+0x15>
c0010114:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c0010117:	85 c0                	test   eax,eax
c0010119:	74 02                	je     c001011d <VgaText::updateCursor()+0x15>
c001011b:	ff e0                	jmp    eax
c001011d:	c3                   	ret    

c001011e <VgaText::doANSI_SGR(int)>:
c001011e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010122:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010126:	85 d2                	test   edx,edx
c0010128:	75 0b                	jne    c0010135 <VgaText::doANSI_SGR(int)+0x17>
c001012a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001012d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010130:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010133:	eb 59                	jmp    c001018e <VgaText::doANSI_SGR(int)+0x70>
c0010135:	83 fa 07             	cmp    edx,0x7
c0010138:	75 0b                	jne    c0010145 <VgaText::doANSI_SGR(int)+0x27>
c001013a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001013d:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010140:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010143:	eb 49                	jmp    c001018e <VgaText::doANSI_SGR(int)+0x70>
c0010145:	83 fa 1b             	cmp    edx,0x1b
c0010148:	74 e0                	je     c001012a <VgaText::doANSI_SGR(int)+0xc>
c001014a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001014d:	83 f9 07             	cmp    ecx,0x7
c0010150:	77 09                	ja     c001015b <VgaText::doANSI_SGR(int)+0x3d>
c0010152:	8b 14 8d 20 c9 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd36e0]
c0010159:	eb 20                	jmp    c001017b <VgaText::doANSI_SGR(int)+0x5d>
c001015b:	8d 4a d8             	lea    ecx,[edx-0x28]
c001015e:	83 f9 07             	cmp    ecx,0x7
c0010161:	77 09                	ja     c001016c <VgaText::doANSI_SGR(int)+0x4e>
c0010163:	8b 14 8d 20 c9 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd36e0]
c001016a:	eb 22                	jmp    c001018e <VgaText::doANSI_SGR(int)+0x70>
c001016c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001016f:	83 f9 07             	cmp    ecx,0x7
c0010172:	77 0b                	ja     c001017f <VgaText::doANSI_SGR(int)+0x61>
c0010174:	8b 14 95 d8 c7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3828]
c001017b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001017e:	c3                   	ret    
c001017f:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010182:	83 f9 07             	cmp    ecx,0x7
c0010185:	77 0a                	ja     c0010191 <VgaText::doANSI_SGR(int)+0x73>
c0010187:	8b 14 95 b0 c7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3850]
c001018e:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010191:	c3                   	ret    

c0010192 <VgaText::setDefaultBgColour(VgaColour)>:
c0010192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001019a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001019d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00101a0:	c3                   	ret    
c00101a1:	90                   	nop

c00101a2 <VgaText::setDefaultFgColour(VgaColour)>:
c00101a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101aa:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00101ad:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00101b0:	c3                   	ret    
c00101b1:	90                   	nop

c00101b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00101b2:	53                   	push   ebx
c00101b3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00101b7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00101bb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00101bf:	51                   	push   ecx
c00101c0:	e8 cd ff ff ff       	call   c0010192 <VgaText::setDefaultBgColour(VgaColour)>
c00101c5:	58                   	pop    eax
c00101c6:	5a                   	pop    edx
c00101c7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00101cb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00101cf:	5b                   	pop    ebx
c00101d0:	eb d0                	jmp    c00101a2 <VgaText::setDefaultFgColour(VgaColour)>

c00101d2 <VgaText::setTitleTextColour(VgaColour)>:
c00101d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101da:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00101dd:	e9 9a fe ff ff       	jmp    c001007c <VgaText::updateTitle()>

c00101e2 <VgaText::setTitleColour(VgaColour)>:
c00101e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101ea:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00101ed:	e9 8a fe ff ff       	jmp    c001007c <VgaText::updateTitle()>

c00101f2 <VgaText::setTitle(char*)>:
c00101f2:	53                   	push   ebx
c00101f3:	83 ec 10             	sub    esp,0x10
c00101f6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00101fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101fe:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010204:	50                   	push   eax
c0010205:	e8 02 06 ff ff       	call   c000080c <strcpy>
c001020a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001020e:	83 c4 18             	add    esp,0x18
c0010211:	5b                   	pop    ebx
c0010212:	e9 65 fe ff ff       	jmp    c001007c <VgaText::updateTitle()>
c0010217:	90                   	nop

c0010218 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010218:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001021c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010221:	83 e0 0f             	and    eax,0xf
c0010224:	c1 e2 04             	shl    edx,0x4
c0010227:	09 d0                	or     eax,edx
c0010229:	c3                   	ret    

c001022a <VgaText::scrollScreen()>:
c001022a:	55                   	push   ebp
c001022b:	b9 01 00 00 00       	mov    ecx,0x1
c0010230:	57                   	push   edi
c0010231:	56                   	push   esi
c0010232:	53                   	push   ebx
c0010233:	83 ec 0c             	sub    esp,0xc
c0010236:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001023a:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010240:	31 ff                	xor    edi,edi
c0010242:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010245:	83 f9 17             	cmp    ecx,0x17
c0010248:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c001024b:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010252:	75 27                	jne    c001027b <VgaText::scrollScreen()+0x51>
c0010254:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010257:	01 f5                	add    ebp,esi
c0010259:	f7 c7 01 00 00 00    	test   edi,0x1
c001025f:	74 16                	je     c0010277 <VgaText::scrollScreen()+0x4d>
c0010261:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010265:	50                   	push   eax
c0010266:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001026a:	50                   	push   eax
c001026b:	e8 a8 ff ff ff       	call   c0010218 <VgaText::combineColours(unsigned char, unsigned char)>
c0010270:	5a                   	pop    edx
c0010271:	5a                   	pop    edx
c0010272:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010275:	eb 04                	jmp    c001027b <VgaText::scrollScreen()+0x51>
c0010277:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c001027b:	47                   	inc    edi
c001027c:	46                   	inc    esi
c001027d:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010283:	75 bd                	jne    c0010242 <VgaText::scrollScreen()+0x18>
c0010285:	41                   	inc    ecx
c0010286:	83 f9 18             	cmp    ecx,0x18
c0010289:	75 af                	jne    c001023a <VgaText::scrollScreen()+0x10>
c001028b:	39 1d 84 da 02 c0    	cmp    DWORD PTR ds:0xc002da84,ebx
c0010291:	75 1b                	jne    c00102ae <VgaText::scrollScreen()+0x84>
c0010293:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010297:	74 05                	je     c001029e <VgaText::scrollScreen()+0x74>
c0010299:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001029c:	eb 10                	jmp    c00102ae <VgaText::scrollScreen()+0x84>
c001029e:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c00102a1:	85 c0                	test   eax,eax
c00102a3:	74 09                	je     c00102ae <VgaText::scrollScreen()+0x84>
c00102a5:	83 ec 0c             	sub    esp,0xc
c00102a8:	53                   	push   ebx
c00102a9:	ff d0                	call   eax
c00102ab:	83 c4 10             	add    esp,0x10
c00102ae:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00102b2:	83 c4 0c             	add    esp,0xc
c00102b5:	5b                   	pop    ebx
c00102b6:	5e                   	pop    esi
c00102b7:	5f                   	pop    edi
c00102b8:	5d                   	pop    ebp
c00102b9:	e9 4a fe ff ff       	jmp    c0010108 <VgaText::updateCursor()>

c00102be <VgaText::combineCharAndColour(char, unsigned char)>:
c00102be:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00102c3:	c1 e0 08             	shl    eax,0x8
c00102c6:	89 c2                	mov    edx,eax
c00102c8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00102cd:	09 d0                	or     eax,edx
c00102cf:	c3                   	ret    

c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00102d0:	56                   	push   esi
c00102d1:	53                   	push   ebx
c00102d2:	51                   	push   ecx
c00102d3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00102d7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102dc:	50                   	push   eax
c00102dd:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102e2:	50                   	push   eax
c00102e3:	e8 30 ff ff ff       	call   c0010218 <VgaText::combineColours(unsigned char, unsigned char)>
c00102e8:	5b                   	pop    ebx
c00102e9:	0f b6 c0             	movzx  eax,al
c00102ec:	5e                   	pop    esi
c00102ed:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00102f2:	50                   	push   eax
c00102f3:	53                   	push   ebx
c00102f4:	e8 c5 ff ff ff       	call   c00102be <VgaText::combineCharAndColour(char, unsigned char)>
c00102f9:	5a                   	pop    edx
c00102fa:	5e                   	pop    esi
c00102fb:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00102fe:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010304:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010308:	0f b7 d2             	movzx  edx,dx
c001030b:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c001030f:	39 0d 84 da 02 c0    	cmp    DWORD PTR ds:0xc002da84,ecx
c0010315:	75 10                	jne    c0010327 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010317:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c001031a:	85 c0                	test   eax,eax
c001031c:	74 09                	je     c0010327 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001031e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010322:	5a                   	pop    edx
c0010323:	5b                   	pop    ebx
c0010324:	5e                   	pop    esi
c0010325:	ff e0                	jmp    eax
c0010327:	58                   	pop    eax
c0010328:	5b                   	pop    ebx
c0010329:	5e                   	pop    esi
c001032a:	c3                   	ret    
c001032b:	90                   	nop

c001032c <VgaText::getCursorX()>:
c001032c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010330:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010333:	c3                   	ret    

c0010334 <VgaText::getCursorY()>:
c0010334:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010338:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001033b:	c3                   	ret    

c001033c <VgaText::setCursor(int, int)>:
c001033c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010340:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010344:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010347:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001034b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001034e:	e9 b5 fd ff ff       	jmp    c0010108 <VgaText::updateCursor()>

c0010353 <setActiveTerminal(VgaText*)>:
c0010353:	53                   	push   ebx
c0010354:	83 ec 08             	sub    esp,0x8
c0010357:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001035b:	85 db                	test   ebx,ebx
c001035d:	75 11                	jne    c0010370 <setActiveTerminal(VgaText*)+0x1d>
c001035f:	c7 44 24 10 8c a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a18c
c0010367:	83 c4 08             	add    esp,0x8
c001036a:	5b                   	pop    ebx
c001036b:	e9 cb 9a 00 00       	jmp    c0019e3b <Krnl::panic(char const*)>
c0010370:	a1 84 da 02 c0       	mov    eax,ds:0xc002da84
c0010375:	85 c0                	test   eax,eax
c0010377:	74 0c                	je     c0010385 <setActiveTerminal(VgaText*)+0x32>
c0010379:	83 ec 0c             	sub    esp,0xc
c001037c:	50                   	push   eax
c001037d:	e8 86 fd ff ff       	call   c0010108 <VgaText::updateCursor()>
c0010382:	83 c4 10             	add    esp,0x10
c0010385:	89 1d 84 da 02 c0    	mov    DWORD PTR ds:0xc002da84,ebx
c001038b:	51                   	push   ecx
c001038c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001038f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010392:	53                   	push   ebx
c0010393:	e8 a4 ff ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c0010398:	83 c4 10             	add    esp,0x10
c001039b:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001039f:	75 07                	jne    c00103a8 <setActiveTerminal(VgaText*)+0x55>
c00103a1:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c00103a8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103ac:	83 c4 08             	add    esp,0x8
c00103af:	5b                   	pop    ebx
c00103b0:	e9 05 fd ff ff       	jmp    c00100ba <VgaText::load()>

c00103b5 <doTerminalCycle()>:
c00103b5:	83 ec 18             	sub    esp,0x18
c00103b8:	a1 80 da 02 c0       	mov    eax,ds:0xc002da80
c00103bd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00103c0:	50                   	push   eax
c00103c1:	a3 80 da 02 c0       	mov    ds:0xc002da80,eax
c00103c6:	e8 88 ff ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c00103cb:	83 c4 1c             	add    esp,0x1c
c00103ce:	c3                   	ret    
c00103cf:	90                   	nop

c00103d0 <VgaText::setCursorX(int)>:
c00103d0:	83 ec 10             	sub    esp,0x10
c00103d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103d7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00103da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103de:	50                   	push   eax
c00103df:	e8 58 ff ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00103e4:	83 c4 1c             	add    esp,0x1c
c00103e7:	c3                   	ret    

c00103e8 <VgaText::setCursorY(int)>:
c00103e8:	83 ec 10             	sub    esp,0x10
c00103eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103f3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00103f6:	50                   	push   eax
c00103f7:	e8 40 ff ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00103fc:	83 c4 1c             	add    esp,0x1c
c00103ff:	c3                   	ret    

c0010400 <VgaText::incrementCursor(bool)>:
c0010400:	56                   	push   esi
c0010401:	53                   	push   ebx
c0010402:	51                   	push   ecx
c0010403:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010407:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001040b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001040e:	40                   	inc    eax
c001040f:	83 f8 50             	cmp    eax,0x50
c0010412:	74 05                	je     c0010419 <VgaText::incrementCursor(bool)+0x19>
c0010414:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0010417:	eb 24                	jmp    c001043d <VgaText::incrementCursor(bool)+0x3d>
c0010419:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001041c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010423:	8d 50 01             	lea    edx,[eax+0x1]
c0010426:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010429:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001042c:	75 0f                	jne    c001043d <VgaText::incrementCursor(bool)+0x3d>
c001042e:	83 ec 0c             	sub    esp,0xc
c0010431:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010434:	53                   	push   ebx
c0010435:	e8 f0 fd ff ff       	call   c001022a <VgaText::scrollScreen()>
c001043a:	83 c4 10             	add    esp,0x10
c001043d:	89 f0                	mov    eax,esi
c001043f:	84 c0                	test   al,al
c0010441:	74 0c                	je     c001044f <VgaText::incrementCursor(bool)+0x4f>
c0010443:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010447:	5a                   	pop    edx
c0010448:	5b                   	pop    ebx
c0010449:	5e                   	pop    esi
c001044a:	e9 b9 fc ff ff       	jmp    c0010108 <VgaText::updateCursor()>
c001044f:	58                   	pop    eax
c0010450:	5b                   	pop    ebx
c0010451:	5e                   	pop    esi
c0010452:	c3                   	ret    
c0010453:	90                   	nop

c0010454 <VgaText::decrementCursor(bool)>:
c0010454:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010458:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001045c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001045f:	85 c0                	test   eax,eax
c0010461:	74 04                	je     c0010467 <VgaText::decrementCursor(bool)+0x13>
c0010463:	48                   	dec    eax
c0010464:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010467:	84 c9                	test   cl,cl
c0010469:	74 09                	je     c0010474 <VgaText::decrementCursor(bool)+0x20>
c001046b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001046f:	e9 94 fc ff ff       	jmp    c0010108 <VgaText::updateCursor()>
c0010474:	c3                   	ret    
c0010475:	90                   	nop

c0010476 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010476:	53                   	push   ebx
c0010477:	83 ec 08             	sub    esp,0x8
c001047a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001047e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010482:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010486:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001048a:	3c 07                	cmp    al,0x7
c001048c:	75 2a                	jne    c00104b8 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001048e:	a1 38 db 02 c0       	mov    eax,ds:0xc002db38
c0010493:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001049b:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00104a3:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00104ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00104af:	83 c4 08             	add    esp,0x8
c00104b2:	5b                   	pop    ebx
c00104b3:	e9 24 30 00 00       	jmp    c00134dc <Buzzer::beep(int, int, bool)>
c00104b8:	3c 0d                	cmp    al,0xd
c00104ba:	75 09                	jne    c00104c5 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c00104bc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00104c3:	eb 2c                	jmp    c00104f1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c00104c5:	3c 0a                	cmp    al,0xa
c00104c7:	75 31                	jne    c00104fa <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c00104c9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00104cc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00104d3:	8d 50 01             	lea    edx,[eax+0x1]
c00104d6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00104d9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00104dc:	75 0f                	jne    c00104ed <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c00104de:	83 ec 0c             	sub    esp,0xc
c00104e1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00104e4:	53                   	push   ebx
c00104e5:	e8 40 fd ff ff       	call   c001022a <VgaText::scrollScreen()>
c00104ea:	83 c4 10             	add    esp,0x10
c00104ed:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00104f1:	83 c4 08             	add    esp,0x8
c00104f4:	5b                   	pop    ebx
c00104f5:	e9 0e fc ff ff       	jmp    c0010108 <VgaText::updateCursor()>
c00104fa:	3c 08                	cmp    al,0x8
c00104fc:	75 25                	jne    c0010523 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c00104fe:	50                   	push   eax
c00104ff:	50                   	push   eax
c0010500:	6a 01                	push   0x1
c0010502:	53                   	push   ebx
c0010503:	e8 4c ff ff ff       	call   c0010454 <VgaText::decrementCursor(bool)>
c0010508:	5a                   	pop    edx
c0010509:	59                   	pop    ecx
c001050a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001050d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010510:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010513:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010516:	6a 20                	push   0x20
c0010518:	53                   	push   ebx
c0010519:	e8 b2 fd ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001051e:	83 c4 28             	add    esp,0x28
c0010521:	5b                   	pop    ebx
c0010522:	c3                   	ret    
c0010523:	83 ec 08             	sub    esp,0x8
c0010526:	0f be c0             	movsx  eax,al
c0010529:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001052c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001052f:	51                   	push   ecx
c0010530:	52                   	push   edx
c0010531:	50                   	push   eax
c0010532:	53                   	push   ebx
c0010533:	e8 98 fd ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010538:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001053c:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010544:	83 c4 28             	add    esp,0x28
c0010547:	5b                   	pop    ebx
c0010548:	e9 b3 fe ff ff       	jmp    c0010400 <VgaText::incrementCursor(bool)>
c001054d:	90                   	nop

c001054e <VgaText::doUpdate()>:
c001054e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010552:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010555:	85 c0                	test   eax,eax
c0010557:	74 02                	je     c001055b <VgaText::doUpdate()+0xd>
c0010559:	ff e0                	jmp    eax
c001055b:	c3                   	ret    

c001055c <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001055c:	55                   	push   ebp
c001055d:	31 ed                	xor    ebp,ebp
c001055f:	57                   	push   edi
c0010560:	56                   	push   esi
c0010561:	53                   	push   ebx
c0010562:	83 ec 1c             	sub    esp,0x1c
c0010565:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010569:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001056e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010575:	50                   	push   eax
c0010576:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001057b:	50                   	push   eax
c001057c:	e8 97 fc ff ff       	call   c0010218 <VgaText::combineColours(unsigned char, unsigned char)>
c0010581:	59                   	pop    ecx
c0010582:	0f b6 c0             	movzx  eax,al
c0010585:	5e                   	pop    esi
c0010586:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001058b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001058f:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010592:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010596:	0f b7 f6             	movzx  esi,si
c0010599:	01 f6                	add    esi,esi
c001059b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001059e:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00105a1:	84 c0                	test   al,al
c00105a3:	0f 84 fd 00 00 00    	je     c00106a6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c00105a9:	3c 0d                	cmp    al,0xd
c00105ab:	75 0c                	jne    c00105b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c00105ad:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00105b4:	e9 e7 00 00 00       	jmp    c00106a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00105b9:	3c 0a                	cmp    al,0xa
c00105bb:	75 47                	jne    c0010604 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c00105bd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00105c0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00105c7:	8d 48 01             	lea    ecx,[eax+0x1]
c00105ca:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00105cd:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00105d0:	75 0f                	jne    c00105e1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c00105d2:	83 ec 0c             	sub    esp,0xc
c00105d5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00105d8:	53                   	push   ebx
c00105d9:	e8 4c fc ff ff       	call   c001022a <VgaText::scrollScreen()>
c00105de:	83 c4 10             	add    esp,0x10
c00105e1:	83 ec 0c             	sub    esp,0xc
c00105e4:	31 ed                	xor    ebp,ebp
c00105e6:	53                   	push   ebx
c00105e7:	e8 1c fb ff ff       	call   c0010108 <VgaText::updateCursor()>
c00105ec:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00105f1:	83 c4 10             	add    esp,0x10
c00105f4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00105f7:	0f b7 f6             	movzx  esi,si
c00105fa:	01 f6                	add    esi,esi
c00105fc:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00105ff:	e9 9c 00 00 00       	jmp    c00106a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010604:	3c 08                	cmp    al,0x8
c0010606:	75 35                	jne    c001063d <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010608:	56                   	push   esi
c0010609:	56                   	push   esi
c001060a:	6a 01                	push   0x1
c001060c:	53                   	push   ebx
c001060d:	e8 42 fe ff ff       	call   c0010454 <VgaText::decrementCursor(bool)>
c0010612:	58                   	pop    eax
c0010613:	5a                   	pop    edx
c0010614:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010617:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001061a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001061d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010620:	6a 20                	push   0x20
c0010622:	53                   	push   ebx
c0010623:	e8 a8 fc ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010628:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001062d:	83 c4 20             	add    esp,0x20
c0010630:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010633:	0f b7 f6             	movzx  esi,si
c0010636:	01 f6                	add    esi,esi
c0010638:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001063b:	eb 63                	jmp    c00106a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c001063d:	51                   	push   ecx
c001063e:	51                   	push   ecx
c001063f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010643:	50                   	push   eax
c0010644:	e8 75 fc ff ff       	call   c00102be <VgaText::combineCharAndColour(char, unsigned char)>
c0010649:	83 c4 10             	add    esp,0x10
c001064c:	66 89 06             	mov    WORD PTR [esi],ax
c001064f:	39 1d 84 da 02 c0    	cmp    DWORD PTR ds:0xc002da84,ebx
c0010655:	75 21                	jne    c0010678 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010657:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c001065a:	85 c0                	test   eax,eax
c001065c:	74 1a                	je     c0010678 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c001065e:	52                   	push   edx
c001065f:	52                   	push   edx
c0010660:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010663:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010666:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001066a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001066e:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010671:	51                   	push   ecx
c0010672:	53                   	push   ebx
c0010673:	ff d0                	call   eax
c0010675:	83 c4 20             	add    esp,0x20
c0010678:	83 c6 02             	add    esi,0x2
c001067b:	50                   	push   eax
c001067c:	50                   	push   eax
c001067d:	6a 00                	push   0x0
c001067f:	53                   	push   ebx
c0010680:	e8 7b fd ff ff       	call   c0010400 <VgaText::incrementCursor(bool)>
c0010685:	83 c4 10             	add    esp,0x10
c0010688:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c001068c:	75 0d                	jne    c001069b <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c001068e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010693:	0f b7 f6             	movzx  esi,si
c0010696:	01 f6                	add    esi,esi
c0010698:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001069b:	bd 01 00 00 00       	mov    ebp,0x1
c00106a0:	47                   	inc    edi
c00106a1:	e9 f8 fe ff ff       	jmp    c001059e <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c00106a6:	83 ec 0c             	sub    esp,0xc
c00106a9:	53                   	push   ebx
c00106aa:	e8 59 fa ff ff       	call   c0010108 <VgaText::updateCursor()>
c00106af:	83 c4 10             	add    esp,0x10
c00106b2:	89 e8                	mov    eax,ebp
c00106b4:	84 c0                	test   al,al
c00106b6:	74 0c                	je     c00106c4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c00106b8:	83 ec 0c             	sub    esp,0xc
c00106bb:	53                   	push   ebx
c00106bc:	e8 8d fe ff ff       	call   c001054e <VgaText::doUpdate()>
c00106c1:	83 c4 10             	add    esp,0x10
c00106c4:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00106cb:	83 c4 1c             	add    esp,0x1c
c00106ce:	5b                   	pop    ebx
c00106cf:	5e                   	pop    esi
c00106d0:	5f                   	pop    edi
c00106d1:	5d                   	pop    ebp
c00106d2:	c3                   	ret    
c00106d3:	90                   	nop

c00106d4 <VgaText::clearScreen()>:
c00106d4:	57                   	push   edi
c00106d5:	56                   	push   esi
c00106d6:	31 f6                	xor    esi,esi
c00106d8:	53                   	push   ebx
c00106d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106dd:	52                   	push   edx
c00106de:	6a 00                	push   0x0
c00106e0:	6a 00                	push   0x0
c00106e2:	53                   	push   ebx
c00106e3:	e8 54 fc ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00106e8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00106ef:	83 c4 10             	add    esp,0x10
c00106f2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00106f5:	7e 20                	jle    c0010717 <VgaText::clearScreen()+0x43>
c00106f7:	31 ff                	xor    edi,edi
c00106f9:	50                   	push   eax
c00106fa:	50                   	push   eax
c00106fb:	56                   	push   esi
c00106fc:	57                   	push   edi
c00106fd:	47                   	inc    edi
c00106fe:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010701:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010704:	6a 20                	push   0x20
c0010706:	53                   	push   ebx
c0010707:	e8 c4 fb ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001070c:	83 c4 20             	add    esp,0x20
c001070f:	83 ff 50             	cmp    edi,0x50
c0010712:	75 e5                	jne    c00106f9 <VgaText::clearScreen()+0x25>
c0010714:	46                   	inc    esi
c0010715:	eb db                	jmp    c00106f2 <VgaText::clearScreen()+0x1e>
c0010717:	83 ec 0c             	sub    esp,0xc
c001071a:	53                   	push   ebx
c001071b:	e8 2e fe ff ff       	call   c001054e <VgaText::doUpdate()>
c0010720:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010727:	83 c4 10             	add    esp,0x10
c001072a:	5b                   	pop    ebx
c001072b:	5e                   	pop    esi
c001072c:	5f                   	pop    edi
c001072d:	c3                   	ret    

c001072e <VgaText::putchar(char)>:
c001072e:	56                   	push   esi
c001072f:	53                   	push   ebx
c0010730:	83 ec 14             	sub    esp,0x14
c0010733:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010737:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001073b:	3c 5b                	cmp    al,0x5b
c001073d:	75 18                	jne    c0010757 <VgaText::putchar(char)+0x29>
c001073f:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010743:	74 1f                	je     c0010764 <VgaText::putchar(char)+0x36>
c0010745:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c001074b:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010752:	e9 bd 00 00 00       	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c0010757:	3c 1b                	cmp    al,0x1b
c0010759:	75 09                	jne    c0010764 <VgaText::putchar(char)+0x36>
c001075b:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c001075f:	e9 b0 00 00 00       	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c0010764:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010767:	84 c9                	test   cl,cl
c0010769:	0f 84 92 00 00 00    	je     c0010801 <VgaText::putchar(char)+0xd3>
c001076f:	8d 50 c0             	lea    edx,[eax-0x40]
c0010772:	80 fa 3e             	cmp    dl,0x3e
c0010775:	77 76                	ja     c00107ed <VgaText::putchar(char)+0xbf>
c0010777:	3c 6d                	cmp    al,0x6d
c0010779:	75 47                	jne    c00107c2 <VgaText::putchar(char)+0x94>
c001077b:	31 f6                	xor    esi,esi
c001077d:	31 d2                	xor    edx,edx
c001077f:	31 c0                	xor    eax,eax
c0010781:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010784:	7e 2d                	jle    c00107b3 <VgaText::putchar(char)+0x85>
c0010786:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c001078b:	80 fa 3b             	cmp    dl,0x3b
c001078e:	75 17                	jne    c00107a7 <VgaText::putchar(char)+0x79>
c0010790:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010794:	50                   	push   eax
c0010795:	53                   	push   ebx
c0010796:	e8 83 f9 ff ff       	call   c001011e <VgaText::doANSI_SGR(int)>
c001079b:	59                   	pop    ecx
c001079c:	31 d2                	xor    edx,edx
c001079e:	58                   	pop    eax
c001079f:	31 c0                	xor    eax,eax
c00107a1:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00107a5:	eb 09                	jmp    c00107b0 <VgaText::putchar(char)+0x82>
c00107a7:	6b c0 0a             	imul   eax,eax,0xa
c00107aa:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00107ae:	88 ca                	mov    dl,cl
c00107b0:	46                   	inc    esi
c00107b1:	eb ce                	jmp    c0010781 <VgaText::putchar(char)+0x53>
c00107b3:	84 d2                	test   dl,dl
c00107b5:	74 2e                	je     c00107e5 <VgaText::putchar(char)+0xb7>
c00107b7:	50                   	push   eax
c00107b8:	53                   	push   ebx
c00107b9:	e8 60 f9 ff ff       	call   c001011e <VgaText::doANSI_SGR(int)>
c00107be:	58                   	pop    eax
c00107bf:	5a                   	pop    edx
c00107c0:	eb 23                	jmp    c00107e5 <VgaText::putchar(char)+0xb7>
c00107c2:	3c 4a                	cmp    al,0x4a
c00107c4:	75 1f                	jne    c00107e5 <VgaText::putchar(char)+0xb7>
c00107c6:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00107ca:	75 19                	jne    c00107e5 <VgaText::putchar(char)+0xb7>
c00107cc:	83 ec 0c             	sub    esp,0xc
c00107cf:	53                   	push   ebx
c00107d0:	e8 ff fe ff ff       	call   c00106d4 <VgaText::clearScreen()>
c00107d5:	83 c4 0c             	add    esp,0xc
c00107d8:	6a 00                	push   0x0
c00107da:	6a 00                	push   0x0
c00107dc:	53                   	push   ebx
c00107dd:	e8 5a fb ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00107e2:	83 c4 10             	add    esp,0x10
c00107e5:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00107eb:	eb 27                	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c00107ed:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00107f0:	83 fa 0e             	cmp    edx,0xe
c00107f3:	7f 1f                	jg     c0010814 <VgaText::putchar(char)+0xe6>
c00107f5:	8d 4a 01             	lea    ecx,[edx+0x1]
c00107f8:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00107fb:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00107ff:	eb 13                	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c0010801:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010804:	0f be c0             	movsx  eax,al
c0010807:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001080a:	50                   	push   eax
c001080b:	53                   	push   ebx
c001080c:	e8 65 fc ff ff       	call   c0010476 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010811:	83 c4 10             	add    esp,0x10
c0010814:	83 c4 14             	add    esp,0x14
c0010817:	5b                   	pop    ebx
c0010818:	5e                   	pop    esi
c0010819:	c3                   	ret    

c001081a <VgaText::putx(unsigned int)>:
c001081a:	57                   	push   edi
c001081b:	b9 11 00 00 00       	mov    ecx,0x11
c0010820:	56                   	push   esi
c0010821:	be 9a a1 02 c0       	mov    esi,0xc002a19a
c0010826:	53                   	push   ebx
c0010827:	83 ec 20             	sub    esp,0x20
c001082a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001082e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010832:	fc                   	cld    
c0010833:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010835:	be 08 00 00 00       	mov    esi,0x8
c001083a:	50                   	push   eax
c001083b:	50                   	push   eax
c001083c:	89 d8                	mov    eax,ebx
c001083e:	c1 e3 04             	shl    ebx,0x4
c0010841:	c1 e8 1c             	shr    eax,0x1c
c0010844:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010849:	50                   	push   eax
c001084a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001084e:	e8 db fe ff ff       	call   c001072e <VgaText::putchar(char)>
c0010853:	83 c4 10             	add    esp,0x10
c0010856:	4e                   	dec    esi
c0010857:	75 e1                	jne    c001083a <VgaText::putx(unsigned int)+0x20>
c0010859:	83 c4 20             	add    esp,0x20
c001085c:	5b                   	pop    ebx
c001085d:	5e                   	pop    esi
c001085e:	5f                   	pop    edi
c001085f:	c3                   	ret    

c0010860 <VgaText::puts(char const*)>:
c0010860:	53                   	push   ebx
c0010861:	83 ec 08             	sub    esp,0x8
c0010864:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010868:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001086b:	84 c0                	test   al,al
c001086d:	74 12                	je     c0010881 <VgaText::puts(char const*)+0x21>
c001086f:	43                   	inc    ebx
c0010870:	51                   	push   ecx
c0010871:	51                   	push   ecx
c0010872:	50                   	push   eax
c0010873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010877:	e8 b2 fe ff ff       	call   c001072e <VgaText::putchar(char)>
c001087c:	83 c4 10             	add    esp,0x10
c001087f:	eb e7                	jmp    c0010868 <VgaText::puts(char const*)+0x8>
c0010881:	83 c4 08             	add    esp,0x8
c0010884:	5b                   	pop    ebx
c0010885:	c3                   	ret    

c0010886 <VgaText::VgaText(char const*)>:
c0010886:	57                   	push   edi
c0010887:	56                   	push   esi
c0010888:	53                   	push   ebx
c0010889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088d:	83 ec 08             	sub    esp,0x8
c0010890:	6a 00                	push   0x0
c0010892:	50                   	push   eax
c0010893:	e8 44 05 00 00       	call   c0010ddc <UnixFile::UnixFile(int)>
c0010898:	83 c4 10             	add    esp,0x10
c001089b:	ba 00 a2 02 c0       	mov    edx,0xc002a200
c00108a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a4:	89 10                	mov    DWORD PTR [eax],edx
c00108a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108aa:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00108b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b5:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00108bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c0:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00108c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c8:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00108cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d0:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00108d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108db:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00108e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e6:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00108ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f1:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00108f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108fc:	8d 50 60             	lea    edx,[eax+0x60]
c00108ff:	bb 60 da 02 c0       	mov    ebx,0xc002da60
c0010904:	b8 08 00 00 00       	mov    eax,0x8
c0010909:	fc                   	cld    
c001090a:	89 d7                	mov    edi,edx
c001090c:	89 de                	mov    esi,ebx
c001090e:	89 c1                	mov    ecx,eax
c0010910:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010916:	05 82 00 00 00       	add    eax,0x82
c001091b:	83 ec 08             	sub    esp,0x8
c001091e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010922:	50                   	push   eax
c0010923:	e8 e4 fe fe ff       	call   c000080c <strcpy>
c0010928:	83 c4 10             	add    esp,0x10
c001092b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001092f:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010936:	83 ec 0c             	sub    esp,0xc
c0010939:	6a 01                	push   0x1
c001093b:	e8 df 08 00 00       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0010940:	83 c4 10             	add    esp,0x10
c0010943:	89 c2                	mov    edx,eax
c0010945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010949:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001094c:	8b 1d 30 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db30
c0010952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010956:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010959:	89 c6                	mov    esi,eax
c001095b:	e8 35 f0 ff ff       	call   c000f995 <Phys::allocatePage()>
c0010960:	68 05 0c 00 00       	push   0xc05
c0010965:	56                   	push   esi
c0010966:	50                   	push   eax
c0010967:	53                   	push   ebx
c0010968:	e8 6f 10 00 00       	call   c00119dc <VAS::mapPage(unsigned long, unsigned long, int)>
c001096d:	83 c4 10             	add    esp,0x10
c0010970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010974:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010977:	83 ec 04             	sub    esp,0x4
c001097a:	68 00 0f 00 00       	push   0xf00
c001097f:	6a 00                	push   0x0
c0010981:	50                   	push   eax
c0010982:	e8 c9 fd fe ff       	call   c0000750 <memset>
c0010987:	83 c4 10             	add    esp,0x10
c001098a:	83 ec 04             	sub    esp,0x4
c001098d:	6a 00                	push   0x0
c001098f:	6a 07                	push   0x7
c0010991:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010995:	e8 18 f8 ff ff       	call   c00101b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001099a:	83 c4 10             	add    esp,0x10
c001099d:	83 ec 04             	sub    esp,0x4
c00109a0:	6a 00                	push   0x0
c00109a2:	6a 00                	push   0x0
c00109a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109a8:	e8 8f f9 ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00109ad:	83 c4 10             	add    esp,0x10
c00109b0:	83 ec 0c             	sub    esp,0xc
c00109b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109b7:	e8 18 fd ff ff       	call   c00106d4 <VgaText::clearScreen()>
c00109bc:	83 c4 10             	add    esp,0x10
c00109bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c3:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00109c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109cb:	05 02 01 00 00       	add    eax,0x102
c00109d0:	83 ec 04             	sub    esp,0x4
c00109d3:	68 96 00 00 00       	push   0x96
c00109d8:	6a 00                	push   0x0
c00109da:	50                   	push   eax
c00109db:	e8 70 fd fe ff       	call   c0000750 <memset>
c00109e0:	83 c4 10             	add    esp,0x10
c00109e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109e7:	05 98 01 00 00       	add    eax,0x198
c00109ec:	83 ec 04             	sub    esp,0x4
c00109ef:	68 2c 01 00 00       	push   0x12c
c00109f4:	6a 00                	push   0x0
c00109f6:	50                   	push   eax
c00109f7:	e8 54 fd fe ff       	call   c0000750 <memset>
c00109fc:	83 c4 10             	add    esp,0x10
c00109ff:	90                   	nop
c0010a00:	5b                   	pop    ebx
c0010a01:	5e                   	pop    esi
c0010a02:	5f                   	pop    edi
c0010a03:	c3                   	ret    

c0010a04 <VgaText::receiveKey(unsigned char)>:
c0010a04:	55                   	push   ebp
c0010a05:	57                   	push   edi
c0010a06:	56                   	push   esi
c0010a07:	53                   	push   ebx
c0010a08:	83 ec 1c             	sub    esp,0x1c
c0010a0b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010a0f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010a13:	84 db                	test   bl,bl
c0010a15:	0f 84 c9 00 00 00    	je     c0010ae4 <VgaText::receiveKey(unsigned char)+0xe0>
c0010a1b:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010a21:	80 fb 08             	cmp    bl,0x8
c0010a24:	75 2c                	jne    c0010a52 <VgaText::receiveKey(unsigned char)+0x4e>
c0010a26:	83 ec 0c             	sub    esp,0xc
c0010a29:	57                   	push   edi
c0010a2a:	e8 3d fd fe ff       	call   c000076c <strlen>
c0010a2f:	83 c4 10             	add    esp,0x10
c0010a32:	85 c0                	test   eax,eax
c0010a34:	74 41                	je     c0010a77 <VgaText::receiveKey(unsigned char)+0x73>
c0010a36:	50                   	push   eax
c0010a37:	50                   	push   eax
c0010a38:	6a 08                	push   0x8
c0010a3a:	56                   	push   esi
c0010a3b:	e8 ee fc ff ff       	call   c001072e <VgaText::putchar(char)>
c0010a40:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a43:	e8 24 fd fe ff       	call   c000076c <strlen>
c0010a48:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010a50:	eb 22                	jmp    c0010a74 <VgaText::receiveKey(unsigned char)+0x70>
c0010a52:	0f be c3             	movsx  eax,bl
c0010a55:	52                   	push   edx
c0010a56:	52                   	push   edx
c0010a57:	50                   	push   eax
c0010a58:	56                   	push   esi
c0010a59:	e8 d0 fc ff ff       	call   c001072e <VgaText::putchar(char)>
c0010a5e:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010a62:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010a67:	59                   	pop    ecx
c0010a68:	5d                   	pop    ebp
c0010a69:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010a6d:	50                   	push   eax
c0010a6e:	57                   	push   edi
c0010a6f:	e8 d8 fe fe ff       	call   c000094c <strcat>
c0010a74:	83 c4 10             	add    esp,0x10
c0010a77:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010a7e:	75 05                	jne    c0010a85 <VgaText::receiveKey(unsigned char)+0x81>
c0010a80:	80 fb 0a             	cmp    bl,0xa
c0010a83:	75 53                	jne    c0010ad8 <VgaText::receiveKey(unsigned char)+0xd4>
c0010a85:	83 ec 0c             	sub    esp,0xc
c0010a88:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010a8e:	53                   	push   ebx
c0010a8f:	e8 d8 fc fe ff       	call   c000076c <strlen>
c0010a94:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a97:	89 c5                	mov    ebp,eax
c0010a99:	e8 ce fc fe ff       	call   c000076c <strlen>
c0010a9e:	83 c4 10             	add    esp,0x10
c0010aa1:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010aa5:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010aaa:	76 10                	jbe    c0010abc <VgaText::receiveKey(unsigned char)+0xb8>
c0010aac:	83 ec 0c             	sub    esp,0xc
c0010aaf:	68 ab a1 02 c0       	push   0xc002a1ab
c0010ab4:	e8 82 93 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c0010ab9:	83 c4 10             	add    esp,0x10
c0010abc:	50                   	push   eax
c0010abd:	50                   	push   eax
c0010abe:	57                   	push   edi
c0010abf:	53                   	push   ebx
c0010ac0:	e8 87 fe fe ff       	call   c000094c <strcat>
c0010ac5:	83 c4 0c             	add    esp,0xc
c0010ac8:	68 96 00 00 00       	push   0x96
c0010acd:	6a 00                	push   0x0
c0010acf:	57                   	push   edi
c0010ad0:	e8 7b fc fe ff       	call   c0000750 <memset>
c0010ad5:	83 c4 10             	add    esp,0x10
c0010ad8:	83 ec 0c             	sub    esp,0xc
c0010adb:	56                   	push   esi
c0010adc:	e8 6d fa ff ff       	call   c001054e <VgaText::doUpdate()>
c0010ae1:	83 c4 10             	add    esp,0x10
c0010ae4:	83 c4 1c             	add    esp,0x1c
c0010ae7:	5b                   	pop    ebx
c0010ae8:	5e                   	pop    esi
c0010ae9:	5f                   	pop    edi
c0010aea:	5d                   	pop    ebp
c0010aeb:	c3                   	ret    

c0010aec <VgaText::write(unsigned long long, void*, int*)>:
c0010aec:	55                   	push   ebp
c0010aed:	57                   	push   edi
c0010aee:	56                   	push   esi
c0010aef:	53                   	push   ebx
c0010af0:	83 ec 0c             	sub    esp,0xc
c0010af3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010af7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010afb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010aff:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010b06:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010b09:	39 eb                	cmp    ebx,ebp
c0010b0b:	74 13                	je     c0010b20 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010b0d:	43                   	inc    ebx
c0010b0e:	50                   	push   eax
c0010b0f:	50                   	push   eax
c0010b10:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010b14:	50                   	push   eax
c0010b15:	56                   	push   esi
c0010b16:	e8 13 fc ff ff       	call   c001072e <VgaText::putchar(char)>
c0010b1b:	83 c4 10             	add    esp,0x10
c0010b1e:	eb e9                	jmp    c0010b09 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010b20:	83 ec 0c             	sub    esp,0xc
c0010b23:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010b2a:	56                   	push   esi
c0010b2b:	e8 1e fa ff ff       	call   c001054e <VgaText::doUpdate()>
c0010b30:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010b34:	89 38                	mov    DWORD PTR [eax],edi
c0010b36:	83 c4 1c             	add    esp,0x1c
c0010b39:	31 c0                	xor    eax,eax
c0010b3b:	5b                   	pop    ebx
c0010b3c:	5e                   	pop    esi
c0010b3d:	5f                   	pop    edi
c0010b3e:	5d                   	pop    ebp
c0010b3f:	c3                   	ret    

c0010b40 <newTerminal(char*)>:
c0010b40:	83 ec 28             	sub    esp,0x28
c0010b43:	68 c4 02 00 00       	push   0x2c4
c0010b48:	e8 4c ea ff ff       	call   c000f599 <malloc>
c0010b4d:	5a                   	pop    edx
c0010b4e:	59                   	pop    ecx
c0010b4f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010b53:	50                   	push   eax
c0010b54:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010b58:	e8 29 fd ff ff       	call   c0010886 <VgaText::VgaText(char const*)>
c0010b5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010b61:	83 c4 2c             	add    esp,0x2c
c0010b64:	c3                   	ret    
c0010b65:	90                   	nop

c0010b66 <TSS::TSS()>:
c0010b66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b6a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b71:	90                   	nop
c0010b72:	c3                   	ret    
c0010b73:	90                   	nop

c0010b74 <TSS::setESP(unsigned long)>:
c0010b74:	55                   	push   ebp
c0010b75:	89 e5                	mov    ebp,esp
c0010b77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b7d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b80:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b83:	90                   	nop
c0010b84:	5d                   	pop    ebp
c0010b85:	c3                   	ret    

c0010b86 <TSS::flush()>:
c0010b86:	55                   	push   ebp
c0010b87:	89 e5                	mov    ebp,esp
c0010b89:	83 ec 10             	sub    esp,0x10
c0010b8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b91:	83 c8 03             	or     eax,0x3
c0010b94:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010b98:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010b9c:	66 89 d0             	mov    ax,dx
c0010b9f:	0f 00 d8             	ltr    ax
c0010ba2:	90                   	nop
c0010ba3:	c9                   	leave  
c0010ba4:	c3                   	ret    
c0010ba5:	90                   	nop

c0010ba6 <TSS::setup(unsigned long, unsigned long)>:
c0010ba6:	55                   	push   ebp
c0010ba7:	89 e5                	mov    ebp,esp
c0010ba9:	83 ec 18             	sub    esp,0x18
c0010bac:	83 ec 0c             	sub    esp,0xc
c0010baf:	6a 68                	push   0x68
c0010bb1:	e8 e3 e9 ff ff       	call   c000f599 <malloc>
c0010bb6:	83 c4 10             	add    esp,0x10
c0010bb9:	89 c2                	mov    edx,eax
c0010bbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bbe:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bc7:	83 ec 04             	sub    esp,0x4
c0010bca:	6a 68                	push   0x68
c0010bcc:	6a 00                	push   0x0
c0010bce:	50                   	push   eax
c0010bcf:	e8 7c fb fe ff       	call   c0000750 <memset>
c0010bd4:	83 c4 10             	add    esp,0x10
c0010bd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bdd:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010be3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010be6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010be9:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010bef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bf2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bf5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010bf8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c01:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010c07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c0d:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010c13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c19:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010c1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c25:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010c2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c31:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010c37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c3d:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010c43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c49:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010c4c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010c4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c55:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c58:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010c5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c61:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010c68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c6b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c6e:	0f 20 da             	mov    edx,cr3
c0010c71:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010c74:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010c77:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c7d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c80:	83 ec 08             	sub    esp,0x8
c0010c83:	50                   	push   eax
c0010c84:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c87:	50                   	push   eax
c0010c88:	e8 05 e1 ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c0010c8d:	83 c4 10             	add    esp,0x10
c0010c90:	83 ec 08             	sub    esp,0x8
c0010c93:	6a 68                	push   0x68
c0010c95:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c98:	50                   	push   eax
c0010c99:	e8 10 e1 ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c0010c9e:	83 c4 10             	add    esp,0x10
c0010ca1:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010ca5:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010ca8:	83 e0 0f             	and    eax,0xf
c0010cab:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010cae:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010cb1:	83 c8 40             	or     eax,0x40
c0010cb4:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010cb7:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0010cbc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010cc2:	05 78 01 00 00       	add    eax,0x178
c0010cc7:	83 ec 04             	sub    esp,0x4
c0010cca:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010ccd:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010cd0:	50                   	push   eax
c0010cd1:	e8 0c e1 ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c0010cd6:	83 c4 10             	add    esp,0x10
c0010cd9:	89 c2                	mov    edx,eax
c0010cdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cde:	89 10                	mov    DWORD PTR [eax],edx
c0010ce0:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0010ce5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010ceb:	05 78 01 00 00       	add    eax,0x178
c0010cf0:	83 ec 0c             	sub    esp,0xc
c0010cf3:	50                   	push   eax
c0010cf4:	e8 13 e1 ff ff       	call   c000ee0c <GDT::flush()>
c0010cf9:	83 c4 10             	add    esp,0x10
c0010cfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cff:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d01:	c9                   	leave  
c0010d02:	c3                   	ret    
c0010d03:	90                   	nop

c0010d04 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010d04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d08:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d0f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d14:	75 08                	jne    c0010d1e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010d16:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d1c:	eb 38                	jmp    c0010d56 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010d1e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d23:	75 17                	jne    c0010d3c <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010d25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d2a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d2d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d33:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d35:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d39:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010d3c:	89 c1                	mov    ecx,eax
c0010d3e:	83 e1 fd             	and    ecx,0xfffffffd
c0010d41:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010d47:	74 cd                	je     c0010d16 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d49:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010d4e:	83 e0 ef             	and    eax,0xffffffef
c0010d51:	83 f8 08             	cmp    eax,0x8
c0010d54:	76 c0                	jbe    c0010d16 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d56:	31 c0                	xor    eax,eax
c0010d58:	c3                   	ret    
c0010d59:	90                   	nop

c0010d5a <ReservedFilename::isAtty()>:
c0010d5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d5e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010d61:	31 c0                	xor    eax,eax
c0010d63:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010d69:	74 09                	je     c0010d74 <ReservedFilename::isAtty()+0x1a>
c0010d6b:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010d71:	0f 94 c0             	sete   al
c0010d74:	c3                   	ret    
c0010d75:	90                   	nop

c0010d76 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010d76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d7a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010d7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d81:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d85:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d8a:	75 08                	jne    c0010d94 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010d8c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d92:	eb 3d                	jmp    c0010dd1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d94:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d99:	75 17                	jne    c0010db2 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010d9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010da0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010da3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010da9:	8b 10                	mov    edx,DWORD PTR [eax]
c0010dab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010daf:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010db2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010db7:	75 04                	jne    c0010dbd <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010db9:	89 0a                	mov    DWORD PTR [edx],ecx
c0010dbb:	eb 14                	jmp    c0010dd1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010dbd:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010dc2:	74 c8                	je     c0010d8c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010dc4:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010dc9:	83 e0 ef             	and    eax,0xffffffef
c0010dcc:	83 f8 08             	cmp    eax,0x8
c0010dcf:	76 bb                	jbe    c0010d8c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010dd1:	31 c0                	xor    eax,eax
c0010dd3:	c3                   	ret    

c0010dd4 <UnixFile::getFileDescriptor()>:
c0010dd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ddb:	c3                   	ret    

c0010ddc <UnixFile::UnixFile(int)>:
c0010ddc:	53                   	push   ebx
c0010ddd:	83 ec 28             	sub    esp,0x28
c0010de0:	ba c8 a2 02 c0       	mov    edx,0xc002a2c8
c0010de5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010de9:	89 10                	mov    DWORD PTR [eax],edx
c0010deb:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0010df3:	0f 8f 8c 01 00 00    	jg     c0010f85 <UnixFile::UnixFile(int)+0x1a9>
c0010df9:	a1 60 c9 02 c0       	mov    eax,ds:0xc002c960
c0010dfe:	8d 50 01             	lea    edx,[eax+0x1]
c0010e01:	89 15 60 c9 02 c0    	mov    DWORD PTR ds:0xc002c960,edx
c0010e07:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010e0b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010e0e:	83 ec 08             	sub    esp,0x8
c0010e11:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010e15:	68 18 db 02 c0       	push   0xc002db18
c0010e1a:	e8 67 76 01 00       	call   c0028486 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010e1f:	83 c4 10             	add    esp,0x10
c0010e22:	a0 14 db 02 c0       	mov    al,ds:0xc002db14
c0010e27:	83 f0 01             	xor    eax,0x1
c0010e2a:	84 c0                	test   al,al
c0010e2c:	0f 84 54 01 00 00    	je     c0010f86 <UnixFile::UnixFile(int)+0x1aa>
c0010e32:	c6 05 14 db 02 c0 01 	mov    BYTE PTR ds:0xc002db14,0x1
c0010e39:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0010e41:	83 ec 0c             	sub    esp,0xc
c0010e44:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e48:	e8 4c e7 ff ff       	call   c000f599 <malloc>
c0010e4d:	83 c4 10             	add    esp,0x10
c0010e50:	89 c3                	mov    ebx,eax
c0010e52:	83 ec 08             	sub    esp,0x8
c0010e55:	68 03 ff ff 0f       	push   0xfffff03
c0010e5a:	53                   	push   ebx
c0010e5b:	e8 2c 01 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010e60:	83 c4 10             	add    esp,0x10
c0010e63:	89 1d 0c db 02 c0    	mov    DWORD PTR ds:0xc002db0c,ebx
c0010e69:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0010e71:	83 ec 0c             	sub    esp,0xc
c0010e74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e78:	e8 1c e7 ff ff       	call   c000f599 <malloc>
c0010e7d:	83 c4 10             	add    esp,0x10
c0010e80:	89 c3                	mov    ebx,eax
c0010e82:	83 ec 08             	sub    esp,0x8
c0010e85:	68 01 ff ff 0f       	push   0xfffff01
c0010e8a:	53                   	push   ebx
c0010e8b:	e8 fc 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010e90:	83 c4 10             	add    esp,0x10
c0010e93:	89 1d 10 db 02 c0    	mov    DWORD PTR ds:0xc002db10,ebx
c0010e99:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0010ea1:	83 ec 0c             	sub    esp,0xc
c0010ea4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010ea8:	e8 ec e6 ff ff       	call   c000f599 <malloc>
c0010ead:	83 c4 10             	add    esp,0x10
c0010eb0:	89 c3                	mov    ebx,eax
c0010eb2:	83 ec 08             	sub    esp,0x8
c0010eb5:	68 00 ff ff 0f       	push   0xfffff00
c0010eba:	53                   	push   ebx
c0010ebb:	e8 cc 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010ec0:	83 c4 10             	add    esp,0x10
c0010ec3:	89 1d 04 db 02 c0    	mov    DWORD PTR ds:0xc002db04,ebx
c0010ec9:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0010ed1:	83 ec 0c             	sub    esp,0xc
c0010ed4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010ed8:	e8 bc e6 ff ff       	call   c000f599 <malloc>
c0010edd:	83 c4 10             	add    esp,0x10
c0010ee0:	89 c3                	mov    ebx,eax
c0010ee2:	83 ec 08             	sub    esp,0x8
c0010ee5:	68 02 ff ff 0f       	push   0xfffff02
c0010eea:	53                   	push   ebx
c0010eeb:	e8 9c 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010ef0:	83 c4 10             	add    esp,0x10
c0010ef3:	89 1d 08 db 02 c0    	mov    DWORD PTR ds:0xc002db08,ebx
c0010ef9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010f01:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0010f06:	7f 7e                	jg     c0010f86 <UnixFile::UnixFile(int)+0x1aa>
c0010f08:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0010f10:	83 ec 0c             	sub    esp,0xc
c0010f13:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f17:	e8 7d e6 ff ff       	call   c000f599 <malloc>
c0010f1c:	83 c4 10             	add    esp,0x10
c0010f1f:	89 c3                	mov    ebx,eax
c0010f21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f25:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010f2a:	83 ec 08             	sub    esp,0x8
c0010f2d:	50                   	push   eax
c0010f2e:	53                   	push   ebx
c0010f2f:	e8 58 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010f34:	83 c4 10             	add    esp,0x10
c0010f37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f3b:	89 1c 85 e0 da 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2520],ebx
c0010f42:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0010f4a:	83 ec 0c             	sub    esp,0xc
c0010f4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010f51:	e8 43 e6 ff ff       	call   c000f599 <malloc>
c0010f56:	83 c4 10             	add    esp,0x10
c0010f59:	89 c3                	mov    ebx,eax
c0010f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f5f:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010f64:	83 ec 08             	sub    esp,0x8
c0010f67:	50                   	push   eax
c0010f68:	53                   	push   ebx
c0010f69:	e8 1e 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010f6e:	83 c4 10             	add    esp,0x10
c0010f71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f75:	89 1c 85 a0 da 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2560],ebx
c0010f7c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0010f80:	e9 7c ff ff ff       	jmp    c0010f01 <UnixFile::UnixFile(int)+0x125>
c0010f85:	90                   	nop
c0010f86:	83 c4 28             	add    esp,0x28
c0010f89:	5b                   	pop    ebx
c0010f8a:	c3                   	ret    
c0010f8b:	90                   	nop

c0010f8c <ReservedFilename::ReservedFilename(int)>:
c0010f8c:	83 ec 0c             	sub    esp,0xc
c0010f8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f93:	83 ec 08             	sub    esp,0x8
c0010f96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f9a:	50                   	push   eax
c0010f9b:	e8 3c fe ff ff       	call   c0010ddc <UnixFile::UnixFile(int)>
c0010fa0:	83 c4 10             	add    esp,0x10
c0010fa3:	ba e4 a2 02 c0       	mov    edx,0xc002a2e4
c0010fa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fac:	89 10                	mov    DWORD PTR [eax],edx
c0010fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fb2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010fb6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fb9:	90                   	nop
c0010fba:	83 c4 0c             	add    esp,0xc
c0010fbd:	c3                   	ret    

c0010fbe <UnixFile::~UnixFile()>:
c0010fbe:	83 ec 1c             	sub    esp,0x1c
c0010fc1:	ba c8 a2 02 c0       	mov    edx,0xc002a2c8
c0010fc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fca:	89 10                	mov    DWORD PTR [eax],edx
c0010fcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fd0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fd3:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0010fd8:	7f 73                	jg     c001104d <UnixFile::~UnixFile()+0x8f>
c0010fda:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010fe2:	83 ec 0c             	sub    esp,0xc
c0010fe5:	68 18 db 02 c0       	push   0xc002db18
c0010fea:	e8 6b 75 01 00       	call   c002855a <LinkedList<UnixFile>::getFirstElement()>
c0010fef:	83 c4 10             	add    esp,0x10
c0010ff2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ff6:	83 ec 0c             	sub    esp,0xc
c0010ff9:	68 18 db 02 c0       	push   0xc002db18
c0010ffe:	e8 5f 75 01 00       	call   c0028562 <LinkedList<UnixFile>::removeFirst()>
c0011003:	83 c4 10             	add    esp,0x10
c0011006:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001100a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001100e:	74 40                	je     c0011050 <UnixFile::~UnixFile()+0x92>
c0011010:	83 ec 08             	sub    esp,0x8
c0011013:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011017:	68 18 db 02 c0       	push   0xc002db18
c001101c:	e8 65 74 01 00       	call   c0028486 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011021:	83 c4 10             	add    esp,0x10
c0011024:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011028:	8d 50 01             	lea    edx,[eax+0x1]
c001102b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001102f:	3d 88 13 00 00       	cmp    eax,0x1388
c0011034:	0f 94 c0             	sete   al
c0011037:	84 c0                	test   al,al
c0011039:	74 a7                	je     c0010fe2 <UnixFile::~UnixFile()+0x24>
c001103b:	83 ec 0c             	sub    esp,0xc
c001103e:	68 a0 a2 02 c0       	push   0xc002a2a0
c0011043:	e8 f3 8d 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c0011048:	83 c4 10             	add    esp,0x10
c001104b:	eb 95                	jmp    c0010fe2 <UnixFile::~UnixFile()+0x24>
c001104d:	90                   	nop
c001104e:	eb 01                	jmp    c0011051 <UnixFile::~UnixFile()+0x93>
c0011050:	90                   	nop
c0011051:	90                   	nop
c0011052:	83 c4 1c             	add    esp,0x1c
c0011055:	c3                   	ret    

c0011056 <UnixFile::~UnixFile()>:
c0011056:	83 ec 0c             	sub    esp,0xc
c0011059:	83 ec 0c             	sub    esp,0xc
c001105c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011060:	e8 59 ff ff ff       	call   c0010fbe <UnixFile::~UnixFile()>
c0011065:	83 c4 10             	add    esp,0x10
c0011068:	83 ec 08             	sub    esp,0x8
c001106b:	6a 0c                	push   0xc
c001106d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011071:	e8 81 15 00 00       	call   c00125f7 <operator delete(void*, unsigned long)>
c0011076:	83 c4 10             	add    esp,0x10
c0011079:	83 c4 0c             	add    esp,0xc
c001107c:	c3                   	ret    
c001107d:	90                   	nop

c001107e <ReservedFilename::~ReservedFilename()>:
c001107e:	83 ec 0c             	sub    esp,0xc
c0011081:	ba e4 a2 02 c0       	mov    edx,0xc002a2e4
c0011086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001108a:	89 10                	mov    DWORD PTR [eax],edx
c001108c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011090:	83 ec 0c             	sub    esp,0xc
c0011093:	50                   	push   eax
c0011094:	e8 25 ff ff ff       	call   c0010fbe <UnixFile::~UnixFile()>
c0011099:	83 c4 10             	add    esp,0x10
c001109c:	90                   	nop
c001109d:	83 c4 0c             	add    esp,0xc
c00110a0:	c3                   	ret    
c00110a1:	90                   	nop

c00110a2 <ReservedFilename::~ReservedFilename()>:
c00110a2:	83 ec 0c             	sub    esp,0xc
c00110a5:	83 ec 0c             	sub    esp,0xc
c00110a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110ac:	e8 cd ff ff ff       	call   c001107e <ReservedFilename::~ReservedFilename()>
c00110b1:	83 c4 10             	add    esp,0x10
c00110b4:	83 ec 08             	sub    esp,0x8
c00110b7:	6a 0c                	push   0xc
c00110b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110bd:	e8 35 15 00 00       	call   c00125f7 <operator delete(void*, unsigned long)>
c00110c2:	83 c4 10             	add    esp,0x10
c00110c5:	83 c4 0c             	add    esp,0xc
c00110c8:	c3                   	ret    

c00110c9 <getFromFileDescriptor(int)>:
c00110c9:	53                   	push   ebx
c00110ca:	83 ec 08             	sub    esp,0x8
c00110cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110d1:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00110d7:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00110dd:	7f 2c                	jg     c001110b <getFromFileDescriptor(int)+0x42>
c00110df:	83 ec 0c             	sub    esp,0xc
c00110e2:	68 18 db 02 c0       	push   0xc002db18
c00110e7:	e8 6e 74 01 00       	call   c002855a <LinkedList<UnixFile>::getFirstElement()>
c00110ec:	83 c4 10             	add    esp,0x10
c00110ef:	85 c0                	test   eax,eax
c00110f1:	75 04                	jne    c00110f7 <getFromFileDescriptor(int)+0x2e>
c00110f3:	31 c0                	xor    eax,eax
c00110f5:	eb 6e                	jmp    c0011165 <getFromFileDescriptor(int)+0x9c>
c00110f7:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00110fa:	74 69                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c00110fc:	52                   	push   edx
c00110fd:	52                   	push   edx
c00110fe:	50                   	push   eax
c00110ff:	68 18 db 02 c0       	push   0xc002db18
c0011104:	e8 fb 74 01 00       	call   c0028604 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011109:	eb e1                	jmp    c00110ec <getFromFileDescriptor(int)+0x23>
c001110b:	a1 0c db 02 c0       	mov    eax,ds:0xc002db0c
c0011110:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011116:	74 4d                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c0011118:	a1 10 db 02 c0       	mov    eax,ds:0xc002db10
c001111d:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011123:	74 40                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c0011125:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c001112a:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011130:	74 33                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c0011132:	a1 04 db 02 c0       	mov    eax,ds:0xc002db04
c0011137:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001113d:	74 26                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c001113f:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011145:	83 f8 08             	cmp    eax,0x8
c0011148:	77 09                	ja     c0011153 <getFromFileDescriptor(int)+0x8a>
c001114a:	8b 04 85 e0 da 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2520]
c0011151:	eb 12                	jmp    c0011165 <getFromFileDescriptor(int)+0x9c>
c0011153:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011159:	83 fb 08             	cmp    ebx,0x8
c001115c:	77 95                	ja     c00110f3 <getFromFileDescriptor(int)+0x2a>
c001115e:	8b 04 9d a0 da 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2560]
c0011165:	83 c4 08             	add    esp,0x8
c0011168:	5b                   	pop    ebx
c0011169:	c3                   	ret    

c001116a <__static_initialization_and_destruction_0(int, int)>:
c001116a:	83 ec 0c             	sub    esp,0xc
c001116d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011172:	75 34                	jne    c00111a8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011174:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001117c:	75 2a                	jne    c00111a8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001117e:	83 ec 0c             	sub    esp,0xc
c0011181:	68 18 db 02 c0       	push   0xc002db18
c0011186:	e8 b9 72 01 00       	call   c0028444 <LinkedList<UnixFile>::LinkedList()>
c001118b:	83 c4 10             	add    esp,0x10
c001118e:	83 ec 04             	sub    esp,0x4
c0011191:	68 98 c7 02 c0       	push   0xc002c798
c0011196:	68 18 db 02 c0       	push   0xc002db18
c001119b:	68 42 84 02 c0       	push   0xc0028442
c00111a0:	e8 cc 13 00 00       	call   c0012571 <__cxa_atexit>
c00111a5:	83 c4 10             	add    esp,0x10
c00111a8:	90                   	nop
c00111a9:	83 c4 0c             	add    esp,0xc
c00111ac:	c3                   	ret    

c00111ad <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00111ad:	83 ec 0c             	sub    esp,0xc
c00111b0:	83 ec 08             	sub    esp,0x8
c00111b3:	68 ff ff 00 00       	push   0xffff
c00111b8:	6a 01                	push   0x1
c00111ba:	e8 ab ff ff ff       	call   c001116a <__static_initialization_and_destruction_0(int, int)>
c00111bf:	83 c4 10             	add    esp,0x10
c00111c2:	83 c4 0c             	add    esp,0xc
c00111c5:	c3                   	ret    

c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00111c6:	53                   	push   ebx
c00111c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00111cb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00111cf:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00111d5:	89 c8                	mov    eax,ecx
c00111d7:	d1 e8                	shr    eax,1
c00111d9:	03 05 68 c9 02 c0    	add    eax,DWORD PTR ds:0xc002c968
c00111df:	83 e1 01             	and    ecx,0x1
c00111e2:	8a 10                	mov    dl,BYTE PTR [eax]
c00111e4:	75 09                	jne    c00111ef <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00111e6:	83 e2 f0             	and    edx,0xfffffff0
c00111e9:	09 da                	or     edx,ebx
c00111eb:	88 10                	mov    BYTE PTR [eax],dl
c00111ed:	5b                   	pop    ebx
c00111ee:	c3                   	ret    
c00111ef:	c1 e3 04             	shl    ebx,0x4
c00111f2:	83 e2 0f             	and    edx,0xf
c00111f5:	09 da                	or     edx,ebx
c00111f7:	88 10                	mov    BYTE PTR [eax],dl
c00111f9:	5b                   	pop    ebx
c00111fa:	c3                   	ret    

c00111fb <Virt::getPageState(unsigned long)>:
c00111fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111ff:	8b 0d 68 c9 02 c0    	mov    ecx,DWORD PTR ds:0xc002c968
c0011205:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001120b:	89 d0                	mov    eax,edx
c001120d:	d1 e8                	shr    eax,1
c001120f:	83 e2 01             	and    edx,0x1
c0011212:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011215:	75 04                	jne    c001121b <Virt::getPageState(unsigned long)+0x20>
c0011217:	83 e0 0f             	and    eax,0xf
c001121a:	c3                   	ret    
c001121b:	c0 e8 04             	shr    al,0x4
c001121e:	c3                   	ret    

c001121f <Virt::allocateKernelVirtualPages(int)>:
c001121f:	55                   	push   ebp
c0011220:	31 ed                	xor    ebp,ebp
c0011222:	57                   	push   edi
c0011223:	56                   	push   esi
c0011224:	53                   	push   ebx
c0011225:	31 db                	xor    ebx,ebx
c0011227:	83 ec 1c             	sub    esp,0x1c
c001122a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001122e:	8b 3d 64 c9 02 c0    	mov    edi,DWORD PTR ds:0xc002c964
c0011234:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011239:	57                   	push   edi
c001123a:	e8 bc ff ff ff       	call   c00111fb <Virt::getPageState(unsigned long)>
c001123f:	5a                   	pop    edx
c0011240:	84 c0                	test   al,al
c0011242:	75 3a                	jne    c001127e <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011244:	85 db                	test   ebx,ebx
c0011246:	75 02                	jne    c001124a <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011248:	89 fd                	mov    ebp,edi
c001124a:	43                   	inc    ebx
c001124b:	39 f3                	cmp    ebx,esi
c001124d:	74 5a                	je     c00112a9 <Virt::allocateKernelVirtualPages(int)+0x8a>
c001124f:	47                   	inc    edi
c0011250:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011256:	76 31                	jbe    c0011289 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011258:	c7 05 64 c9 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002c964,0xc8000
c0011262:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011267:	75 28                	jne    c0011291 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011269:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001126e:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011273:	57                   	push   edi
c0011274:	e8 82 ff ff ff       	call   c00111fb <Virt::getPageState(unsigned long)>
c0011279:	5a                   	pop    edx
c001127a:	84 c0                	test   al,al
c001127c:	74 c6                	je     c0011244 <Virt::allocateKernelVirtualPages(int)+0x25>
c001127e:	31 db                	xor    ebx,ebx
c0011280:	47                   	inc    edi
c0011281:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011287:	77 cf                	ja     c0011258 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011289:	89 3d 64 c9 02 c0    	mov    DWORD PTR ds:0xc002c964,edi
c001128f:	eb a8                	jmp    c0011239 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011291:	83 ec 0c             	sub    esp,0xc
c0011294:	68 f8 a2 02 c0       	push   0xc002a2f8
c0011299:	e8 9d 8b 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c001129e:	8b 3d 64 c9 02 c0    	mov    edi,DWORD PTR ds:0xc002c964
c00112a4:	83 c4 10             	add    esp,0x10
c00112a7:	eb 90                	jmp    c0011239 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00112a9:	89 2d 64 c9 02 c0    	mov    DWORD PTR ds:0xc002c964,ebp
c00112af:	4b                   	dec    ebx
c00112b0:	74 5f                	je     c0011311 <Virt::allocateKernelVirtualPages(int)+0xf2>
c00112b2:	85 f6                	test   esi,esi
c00112b4:	74 3d                	je     c00112f3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112b6:	89 e8                	mov    eax,ebp
c00112b8:	31 db                	xor    ebx,ebx
c00112ba:	8d 7e ff             	lea    edi,[esi-0x1]
c00112bd:	eb 14                	jmp    c00112d3 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00112bf:	6a 01                	push   0x1
c00112c1:	43                   	inc    ebx
c00112c2:	50                   	push   eax
c00112c3:	e8 fe fe ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112c8:	58                   	pop    eax
c00112c9:	39 f3                	cmp    ebx,esi
c00112cb:	5a                   	pop    edx
c00112cc:	74 25                	je     c00112f3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112ce:	a1 64 c9 02 c0       	mov    eax,ds:0xc002c964
c00112d3:	8d 50 01             	lea    edx,[eax+0x1]
c00112d6:	85 db                	test   ebx,ebx
c00112d8:	89 15 64 c9 02 c0    	mov    DWORD PTR ds:0xc002c964,edx
c00112de:	74 20                	je     c0011300 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00112e0:	39 df                	cmp    edi,ebx
c00112e2:	75 db                	jne    c00112bf <Virt::allocateKernelVirtualPages(int)+0xa0>
c00112e4:	6a 03                	push   0x3
c00112e6:	43                   	inc    ebx
c00112e7:	50                   	push   eax
c00112e8:	e8 d9 fe ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112ed:	59                   	pop    ecx
c00112ee:	39 f3                	cmp    ebx,esi
c00112f0:	58                   	pop    eax
c00112f1:	75 db                	jne    c00112ce <Virt::allocateKernelVirtualPages(int)+0xaf>
c00112f3:	83 c4 1c             	add    esp,0x1c
c00112f6:	89 e8                	mov    eax,ebp
c00112f8:	5b                   	pop    ebx
c00112f9:	c1 e0 0c             	shl    eax,0xc
c00112fc:	5e                   	pop    esi
c00112fd:	5f                   	pop    edi
c00112fe:	5d                   	pop    ebp
c00112ff:	c3                   	ret    
c0011300:	6a 02                	push   0x2
c0011302:	bb 01 00 00 00       	mov    ebx,0x1
c0011307:	50                   	push   eax
c0011308:	e8 b9 fe ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001130d:	58                   	pop    eax
c001130e:	5a                   	pop    edx
c001130f:	eb bd                	jmp    c00112ce <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011311:	6a 04                	push   0x4
c0011313:	8d 45 01             	lea    eax,[ebp+0x1]
c0011316:	55                   	push   ebp
c0011317:	a3 64 c9 02 c0       	mov    ds:0xc002c964,eax
c001131c:	e8 a5 fe ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011321:	59                   	pop    ecx
c0011322:	89 e8                	mov    eax,ebp
c0011324:	5b                   	pop    ebx
c0011325:	c1 e0 0c             	shl    eax,0xc
c0011328:	83 c4 1c             	add    esp,0x1c
c001132b:	5b                   	pop    ebx
c001132c:	5e                   	pop    esi
c001132d:	5f                   	pop    edi
c001132e:	5d                   	pop    ebp
c001132f:	c3                   	ret    

c0011330 <Virt::freeSwapfilePage(unsigned long)>:
c0011330:	53                   	push   ebx
c0011331:	8b 15 2c db 02 c0    	mov    edx,DWORD PTR ds:0xc002db2c
c0011337:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001133b:	b8 01 00 00 00       	mov    eax,0x1
c0011340:	89 cb                	mov    ebx,ecx
c0011342:	d3 e0                	shl    eax,cl
c0011344:	c1 eb 05             	shr    ebx,0x5
c0011347:	f7 d0                	not    eax
c0011349:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c001134c:	5b                   	pop    ebx
c001134d:	c3                   	ret    

c001134e <Virt::swapIDToSector(unsigned long)>:
c001134e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011352:	0f af 05 6c c9 02 c0 	imul   eax,DWORD PTR ds:0xc002c96c
c0011359:	03 05 74 c9 02 c0    	add    eax,DWORD PTR ds:0xc002c974
c001135f:	c3                   	ret    

c0011360 <Virt::allocateSwapfilePage()>:
c0011360:	55                   	push   ebp
c0011361:	31 d2                	xor    edx,edx
c0011363:	57                   	push   edi
c0011364:	56                   	push   esi
c0011365:	53                   	push   ebx
c0011366:	83 ec 0c             	sub    esp,0xc
c0011369:	8b 0d 6c c9 02 c0    	mov    ecx,DWORD PTR ds:0xc002c96c
c001136f:	a1 70 c9 02 c0       	mov    eax,ds:0xc002c970
c0011374:	f7 f1                	div    ecx
c0011376:	39 0d 70 c9 02 c0    	cmp    DWORD PTR ds:0xc002c970,ecx
c001137c:	72 2d                	jb     c00113ab <Virt::allocateSwapfilePage()+0x4b>
c001137e:	8b 35 2c db 02 c0    	mov    esi,DWORD PTR ds:0xc002db2c
c0011384:	8b 16                	mov    edx,DWORD PTR [esi]
c0011386:	f6 c2 01             	test   dl,0x1
c0011389:	74 3c                	je     c00113c7 <Virt::allocateSwapfilePage()+0x67>
c001138b:	31 c9                	xor    ecx,ecx
c001138d:	bf 01 00 00 00       	mov    edi,0x1
c0011392:	eb 12                	jmp    c00113a6 <Virt::allocateSwapfilePage()+0x46>
c0011394:	89 fd                	mov    ebp,edi
c0011396:	89 ca                	mov    edx,ecx
c0011398:	d3 e5                	shl    ebp,cl
c001139a:	c1 ea 05             	shr    edx,0x5
c001139d:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00113a0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00113a2:	85 ea                	test   edx,ebp
c00113a4:	74 2a                	je     c00113d0 <Virt::allocateSwapfilePage()+0x70>
c00113a6:	41                   	inc    ecx
c00113a7:	39 c8                	cmp    eax,ecx
c00113a9:	77 e9                	ja     c0011394 <Virt::allocateSwapfilePage()+0x34>
c00113ab:	83 ec 0c             	sub    esp,0xc
c00113ae:	68 d8 a4 02 c0       	push   0xc002a4d8
c00113b3:	e8 83 8a 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c00113b8:	83 c4 10             	add    esp,0x10
c00113bb:	31 c9                	xor    ecx,ecx
c00113bd:	83 c4 0c             	add    esp,0xc
c00113c0:	89 c8                	mov    eax,ecx
c00113c2:	5b                   	pop    ebx
c00113c3:	5e                   	pop    esi
c00113c4:	5f                   	pop    edi
c00113c5:	5d                   	pop    ebp
c00113c6:	c3                   	ret    
c00113c7:	89 f3                	mov    ebx,esi
c00113c9:	bd 01 00 00 00       	mov    ebp,0x1
c00113ce:	31 c9                	xor    ecx,ecx
c00113d0:	09 ea                	or     edx,ebp
c00113d2:	89 c8                	mov    eax,ecx
c00113d4:	89 13                	mov    DWORD PTR [ebx],edx
c00113d6:	83 c4 0c             	add    esp,0xc
c00113d9:	5b                   	pop    ebx
c00113da:	5e                   	pop    esi
c00113db:	5f                   	pop    edi
c00113dc:	5d                   	pop    ebp
c00113dd:	c3                   	ret    

c00113de <Virt::virtualMemorySetup()>:
c00113de:	53                   	push   ebx
c00113df:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113e4:	6a 0f                	push   0xf
c00113e6:	53                   	push   ebx
c00113e7:	43                   	inc    ebx
c00113e8:	e8 d9 fd ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113ed:	58                   	pop    eax
c00113ee:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113f4:	5a                   	pop    edx
c00113f5:	75 ed                	jne    c00113e4 <Virt::virtualMemorySetup()+0x6>
c00113f7:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113fc:	6a 00                	push   0x0
c00113fe:	53                   	push   ebx
c00113ff:	43                   	inc    ebx
c0011400:	e8 c1 fd ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011405:	59                   	pop    ecx
c0011406:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001140c:	58                   	pop    eax
c001140d:	75 ed                	jne    c00113fc <Virt::virtualMemorySetup()+0x1e>
c001140f:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011414:	6a 0f                	push   0xf
c0011416:	53                   	push   ebx
c0011417:	43                   	inc    ebx
c0011418:	e8 a9 fd ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001141d:	58                   	pop    eax
c001141e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011424:	5a                   	pop    edx
c0011425:	75 ed                	jne    c0011414 <Virt::virtualMemorySetup()+0x36>
c0011427:	5b                   	pop    ebx
c0011428:	c3                   	ret    

c0011429 <Virt::setupPageSwapping(int)>:
c0011429:	57                   	push   edi
c001142a:	56                   	push   esi
c001142b:	53                   	push   ebx
c001142c:	83 ec 1c             	sub    esp,0x1c
c001142f:	68 14 01 00 00       	push   0x114
c0011434:	e8 60 e1 ff ff       	call   c000f599 <malloc>
c0011439:	83 c4 0c             	add    esp,0xc
c001143c:	89 c6                	mov    esi,eax
c001143e:	ff 35 10 0f 03 c0    	push   DWORD PTR ds:0xc0030f10
c0011444:	68 ef a4 02 c0       	push   0xc002a4ef
c0011449:	50                   	push   eax
c001144a:	e8 df 17 00 00       	call   c0012c2e <File::File(char const*, Process*)>
c001144f:	89 34 24             	mov    DWORD PTR [esp],esi
c0011452:	e8 b3 19 00 00       	call   c0012e0a <File::unlink()>
c0011457:	58                   	pop    eax
c0011458:	5a                   	pop    edx
c0011459:	6a 12                	push   0x12
c001145b:	56                   	push   esi
c001145c:	e8 31 18 00 00       	call   c0012c92 <File::open(FileOpenMode)>
c0011461:	83 c4 10             	add    esp,0x10
c0011464:	85 c0                	test   eax,eax
c0011466:	0f 85 2f 01 00 00    	jne    c001159b <Virt::setupPageSwapping(int)+0x172>
c001146c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011470:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011478:	c1 e3 08             	shl    ebx,0x8
c001147b:	83 ec 0c             	sub    esp,0xc
c001147e:	68 00 00 01 00       	push   0x10000
c0011483:	e8 11 e1 ff ff       	call   c000f599 <malloc>
c0011488:	83 c4 0c             	add    esp,0xc
c001148b:	89 c7                	mov    edi,eax
c001148d:	68 00 00 01 00       	push   0x10000
c0011492:	68 ee 00 00 00       	push   0xee
c0011497:	50                   	push   eax
c0011498:	e8 b3 f2 fe ff       	call   c0000750 <memset>
c001149d:	83 c4 10             	add    esp,0x10
c00114a0:	85 db                	test   ebx,ebx
c00114a2:	79 03                	jns    c00114a7 <Virt::setupPageSwapping(int)+0x7e>
c00114a4:	83 c3 0f             	add    ebx,0xf
c00114a7:	c1 fb 04             	sar    ebx,0x4
c00114aa:	4b                   	dec    ebx
c00114ab:	83 fb ff             	cmp    ebx,0xffffffff
c00114ae:	74 41                	je     c00114f1 <Virt::setupPageSwapping(int)+0xc8>
c00114b0:	83 ec 0c             	sub    esp,0xc
c00114b3:	8b 06                	mov    eax,DWORD PTR [esi]
c00114b5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00114b9:	52                   	push   edx
c00114ba:	57                   	push   edi
c00114bb:	6a 00                	push   0x0
c00114bd:	68 00 00 01 00       	push   0x10000
c00114c2:	56                   	push   esi
c00114c3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00114c6:	83 c4 20             	add    esp,0x20
c00114c9:	85 c0                	test   eax,eax
c00114cb:	0f 85 b5 00 00 00    	jne    c0011586 <Virt::setupPageSwapping(int)+0x15d>
c00114d1:	81 7c 24 0c 00 00 01 00 	cmp    DWORD PTR [esp+0xc],0x10000
c00114d9:	74 cf                	je     c00114aa <Virt::setupPageSwapping(int)+0x81>
c00114db:	83 ec 0c             	sub    esp,0xc
c00114de:	4b                   	dec    ebx
c00114df:	68 21 a5 02 c0       	push   0xc002a521
c00114e4:	e8 52 89 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c00114e9:	83 c4 10             	add    esp,0x10
c00114ec:	83 fb ff             	cmp    ebx,0xffffffff
c00114ef:	75 bf                	jne    c00114b0 <Virt::setupPageSwapping(int)+0x87>
c00114f1:	83 ec 0c             	sub    esp,0xc
c00114f4:	56                   	push   esi
c00114f5:	e8 f6 17 00 00       	call   c0012cf0 <File::close()>
c00114fa:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114fd:	e8 b7 e0 ff ff       	call   c000f5b9 <rfree>
c0011502:	83 c4 10             	add    esp,0x10
c0011505:	85 f6                	test   esi,esi
c0011507:	74 0c                	je     c0011515 <Virt::setupPageSwapping(int)+0xec>
c0011509:	83 ec 0c             	sub    esp,0xc
c001150c:	8b 06                	mov    eax,DWORD PTR [esi]
c001150e:	56                   	push   esi
c001150f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011512:	83 c4 10             	add    esp,0x10
c0011515:	83 ec 08             	sub    esp,0x8
c0011518:	a1 c8 df 02 c0       	mov    eax,ds:0xc002dfc8
c001151d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011523:	8b 10                	mov    edx,DWORD PTR [eax]
c0011525:	68 ef a4 02 c0       	push   0xc002a4ef
c001152a:	50                   	push   eax
c001152b:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c001152e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011532:	c6 05 78 c9 02 c0 43 	mov    BYTE PTR ds:0xc002c978,0x43
c0011539:	c1 e2 0b             	shl    edx,0xb
c001153c:	a3 74 c9 02 c0       	mov    ds:0xc002c974,eax
c0011541:	89 15 70 c9 02 c0    	mov    DWORD PTR ds:0xc002c970,edx
c0011547:	c7 05 6c c9 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002c96c,0x8
c0011551:	c1 ea 08             	shr    edx,0x8
c0011554:	89 14 24             	mov    DWORD PTR [esp],edx
c0011557:	e8 3d e0 ff ff       	call   c000f599 <malloc>
c001155c:	83 c4 0c             	add    esp,0xc
c001155f:	89 c1                	mov    ecx,eax
c0011561:	a3 2c db 02 c0       	mov    ds:0xc002db2c,eax
c0011566:	31 d2                	xor    edx,edx
c0011568:	a1 70 c9 02 c0       	mov    eax,ds:0xc002c970
c001156d:	f7 35 6c c9 02 c0    	div    DWORD PTR ds:0xc002c96c
c0011573:	c1 e8 05             	shr    eax,0x5
c0011576:	50                   	push   eax
c0011577:	6a 00                	push   0x0
c0011579:	51                   	push   ecx
c001157a:	e8 d1 f1 fe ff       	call   c0000750 <memset>
c001157f:	83 c4 20             	add    esp,0x20
c0011582:	5b                   	pop    ebx
c0011583:	5e                   	pop    esi
c0011584:	5f                   	pop    edi
c0011585:	c3                   	ret    
c0011586:	83 ec 0c             	sub    esp,0xc
c0011589:	68 21 a5 02 c0       	push   0xc002a521
c001158e:	e8 a8 88 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c0011593:	83 c4 10             	add    esp,0x10
c0011596:	e9 36 ff ff ff       	jmp    c00114d1 <Virt::setupPageSwapping(int)+0xa8>
c001159b:	83 ec 0c             	sub    esp,0xc
c001159e:	68 06 a5 02 c0       	push   0xc002a506
c00115a3:	e8 93 88 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c00115a8:	83 c4 10             	add    esp,0x10
c00115ab:	e9 bc fe ff ff       	jmp    c001146c <Virt::setupPageSwapping(int)+0x43>

c00115b0 <VAS::VAS()>:
c00115b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115bf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00115c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115ca:	a3 30 db 02 c0       	mov    ds:0xc002db30,eax
c00115cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115d3:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00115d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115db:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00115de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115e2:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00115e9:	90                   	nop
c00115ea:	c3                   	ret    
c00115eb:	90                   	nop

c00115ec <VAS::VAS(VAS*)>:
c00115ec:	83 ec 0c             	sub    esp,0xc
c00115ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115f3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115fe:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011605:	83 ec 0c             	sub    esp,0xc
c0011608:	68 18 a3 02 c0       	push   0xc002a318
c001160d:	e8 29 88 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c0011612:	83 c4 10             	add    esp,0x10
c0011615:	90                   	nop
c0011616:	83 c4 0c             	add    esp,0xc
c0011619:	c3                   	ret    

c001161a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001161a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001161e:	89 c2                	mov    edx,eax
c0011620:	c1 e8 0a             	shr    eax,0xa
c0011623:	c1 ea 16             	shr    edx,0x16
c0011626:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001162b:	19 c9                	sbb    ecx,ecx
c001162d:	c1 e2 0c             	shl    edx,0xc
c0011630:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011636:	25 fc 0f 00 00       	and    eax,0xffc
c001163b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011642:	01 d0                	add    eax,edx
c0011644:	c3                   	ret    
c0011645:	90                   	nop

c0011646 <VAS::getPageTableEntry(unsigned long)>:
c0011646:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001164a:	89 ca                	mov    edx,ecx
c001164c:	c1 e9 0a             	shr    ecx,0xa
c001164f:	c1 ea 16             	shr    edx,0x16
c0011652:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011658:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001165e:	c1 e0 0c             	shl    eax,0xc
c0011661:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011664:	c3                   	ret    

c0011665 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011665:	57                   	push   edi
c0011666:	56                   	push   esi
c0011667:	be 01 00 00 00       	mov    esi,0x1
c001166c:	53                   	push   ebx
c001166d:	83 ec 10             	sub    esp,0x10
c0011670:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011674:	c1 eb 0c             	shr    ebx,0xc
c0011677:	eb 3f                	jmp    c00116b8 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011679:	83 ec 08             	sub    esp,0x8
c001167c:	57                   	push   edi
c001167d:	ff 35 30 db 02 c0    	push   DWORD PTR ds:0xc002db30
c0011683:	e8 be ff ff ff       	call   c0011646 <VAS::getPageTableEntry(unsigned long)>
c0011688:	83 c4 10             	add    esp,0x10
c001168b:	8b 00                	mov    eax,DWORD PTR [eax]
c001168d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011691:	f6 c4 04             	test   ah,0x4
c0011694:	75 5f                	jne    c00116f5 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011696:	80 fa 04             	cmp    dl,0x4
c0011699:	74 78                	je     c0011713 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c001169b:	80 fa 02             	cmp    dl,0x2
c001169e:	0f 84 88 00 00 00    	je     c001172c <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00116a4:	80 fa 03             	cmp    dl,0x3
c00116a7:	0f 84 ad 00 00 00    	je     c001175a <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c00116ad:	fe ca                	dec    dl
c00116af:	0f 84 92 00 00 00    	je     c0011747 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00116b5:	43                   	inc    ebx
c00116b6:	31 f6                	xor    esi,esi
c00116b8:	53                   	push   ebx
c00116b9:	89 df                	mov    edi,ebx
c00116bb:	e8 3b fb ff ff       	call   c00111fb <Virt::getPageState(unsigned long)>
c00116c0:	c1 e7 0c             	shl    edi,0xc
c00116c3:	59                   	pop    ecx
c00116c4:	84 c0                	test   al,al
c00116c6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00116ca:	75 ad                	jne    c0011679 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00116cc:	83 ec 0c             	sub    esp,0xc
c00116cf:	68 27 a5 02 c0       	push   0xc002a527
c00116d4:	e8 62 87 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c00116d9:	58                   	pop    eax
c00116da:	5a                   	pop    edx
c00116db:	57                   	push   edi
c00116dc:	ff 35 30 db 02 c0    	push   DWORD PTR ds:0xc002db30
c00116e2:	e8 5f ff ff ff       	call   c0011646 <VAS::getPageTableEntry(unsigned long)>
c00116e7:	83 c4 10             	add    esp,0x10
c00116ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00116ec:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00116f0:	f6 c4 04             	test   ah,0x4
c00116f3:	74 c0                	je     c00116b5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116f5:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00116f9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00116fe:	83 ec 0c             	sub    esp,0xc
c0011701:	50                   	push   eax
c0011702:	e8 1d e2 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c0011707:	83 c4 10             	add    esp,0x10
c001170a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001170e:	80 fa 04             	cmp    dl,0x4
c0011711:	75 88                	jne    c001169b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011713:	89 f0                	mov    eax,esi
c0011715:	84 c0                	test   al,al
c0011717:	75 47                	jne    c0011760 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011719:	c7 44 24 20 3c a3 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a33c
c0011721:	83 c4 10             	add    esp,0x10
c0011724:	5b                   	pop    ebx
c0011725:	5e                   	pop    esi
c0011726:	5f                   	pop    edi
c0011727:	e9 0f 87 00 00       	jmp    c0019e3b <Krnl::panic(char const*)>
c001172c:	89 f0                	mov    eax,esi
c001172e:	84 c0                	test   al,al
c0011730:	75 15                	jne    c0011747 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011732:	83 ec 0c             	sub    esp,0xc
c0011735:	68 43 a5 02 c0       	push   0xc002a543
c001173a:	e8 fc 86 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c001173f:	83 c4 10             	add    esp,0x10
c0011742:	e9 6e ff ff ff       	jmp    c00116b5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011747:	83 ec 08             	sub    esp,0x8
c001174a:	6a 00                	push   0x0
c001174c:	53                   	push   ebx
c001174d:	e8 74 fa ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011752:	83 c4 10             	add    esp,0x10
c0011755:	e9 5b ff ff ff       	jmp    c00116b5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001175a:	89 f0                	mov    eax,esi
c001175c:	84 c0                	test   al,al
c001175e:	75 15                	jne    c0011775 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011760:	83 ec 08             	sub    esp,0x8
c0011763:	6a 00                	push   0x0
c0011765:	53                   	push   ebx
c0011766:	e8 5b fa ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001176b:	83 c4 10             	add    esp,0x10
c001176e:	83 c4 10             	add    esp,0x10
c0011771:	5b                   	pop    ebx
c0011772:	5e                   	pop    esi
c0011773:	5f                   	pop    edi
c0011774:	c3                   	ret    
c0011775:	c7 44 24 20 5f a5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a55f
c001177d:	83 c4 10             	add    esp,0x10
c0011780:	5b                   	pop    ebx
c0011781:	5e                   	pop    esi
c0011782:	5f                   	pop    edi
c0011783:	e9 b3 86 00 00       	jmp    c0019e3b <Krnl::panic(char const*)>

c0011788 <VAS::freeAllocatedPages(unsigned long)>:
c0011788:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001178c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011790:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011794:	74 09                	je     c001179f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011796:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001179a:	e9 c6 fe ff ff       	jmp    c0011665 <Virt::freeKernelVirtualPages(unsigned long)>
c001179f:	c7 44 24 04 60 a3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a360
c00117a7:	e9 23 0f 00 00       	jmp    c00126cf <Dbg::kprintf(char const*, ...)>

c00117ac <VAS::virtualToPhysical(unsigned long)>:
c00117ac:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00117b0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00117b4:	e8 8d fe ff ff       	call   c0011646 <VAS::getPageTableEntry(unsigned long)>
c00117b9:	5a                   	pop    edx
c00117ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00117bc:	59                   	pop    ecx
c00117bd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00117c2:	c3                   	ret    
c00117c3:	90                   	nop

c00117c4 <VAS::reflagRange(unsigned long, int, int, int)>:
c00117c4:	55                   	push   ebp
c00117c5:	57                   	push   edi
c00117c6:	56                   	push   esi
c00117c7:	53                   	push   ebx
c00117c8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00117cc:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00117d0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00117d4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00117d8:	85 db                	test   ebx,ebx
c00117da:	7e 22                	jle    c00117fe <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00117dc:	c1 e3 0c             	shl    ebx,0xc
c00117df:	01 f3                	add    ebx,esi
c00117e1:	56                   	push   esi
c00117e2:	81 c6 00 10 00 00    	add    esi,0x1000
c00117e8:	55                   	push   ebp
c00117e9:	e8 58 fe ff ff       	call   c0011646 <VAS::getPageTableEntry(unsigned long)>
c00117ee:	5a                   	pop    edx
c00117ef:	59                   	pop    ecx
c00117f0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00117f2:	21 f9                	and    ecx,edi
c00117f4:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00117f8:	39 f3                	cmp    ebx,esi
c00117fa:	89 08                	mov    DWORD PTR [eax],ecx
c00117fc:	75 e3                	jne    c00117e1 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00117fe:	5b                   	pop    ebx
c00117ff:	5e                   	pop    esi
c0011800:	5f                   	pop    edi
c0011801:	5d                   	pop    ebp
c0011802:	c3                   	ret    
c0011803:	90                   	nop

c0011804 <VAS::setToWriteCombining(unsigned long, int)>:
c0011804:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0011809:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001180f:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011816:	75 01                	jne    c0011819 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011818:	c3                   	ret    
c0011819:	68 80 00 00 00       	push   0x80
c001181e:	6a ff                	push   0xffffffff
c0011820:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011824:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011828:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001182c:	e8 93 ff ff ff       	call   c00117c4 <VAS::reflagRange(unsigned long, int, int, int)>
c0011831:	83 c4 14             	add    esp,0x14
c0011834:	c3                   	ret    
c0011835:	90                   	nop

c0011836 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011836:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001183b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001183f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011846:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0011849:	19 c0                	sbb    eax,eax
c001184b:	83 ca 03             	or     edx,0x3
c001184e:	83 e0 fc             	and    eax,0xfffffffc
c0011851:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011858:	0f 20 d8             	mov    eax,cr3
c001185b:	0f 22 d8             	mov    cr3,eax
c001185e:	c3                   	ret    
c001185f:	90                   	nop

c0011860 <VAS::~VAS()>:
c0011860:	83 ec 2c             	sub    esp,0x2c
c0011863:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001186b:	fa                   	cli    
c001186c:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c0011871:	40                   	inc    eax
c0011872:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c0011877:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001187c:	8b 00                	mov    eax,DWORD PTR [eax]
c001187e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011881:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011887:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001188b:	6a 01                	push   0x1
c001188d:	50                   	push   eax
c001188e:	e8 a3 ff ff ff       	call   c0011836 <VAS::mapOtherVASIn(bool, VAS*)>
c0011893:	83 c4 0c             	add    esp,0xc
c0011896:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001189e:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00118a6:	0f 8f d4 00 00 00    	jg     c0011980 <VAS::~VAS()+0x120>
c00118ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118b0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00118b3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00118b7:	c1 e2 02             	shl    edx,0x2
c00118ba:	01 d0                	add    eax,edx
c00118bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00118be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00118c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118c6:	83 e0 01             	and    eax,0x1
c00118c9:	0f 84 a8 00 00 00    	je     c0011977 <VAS::~VAS()+0x117>
c00118cf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00118d7:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00118df:	7f 72                	jg     c0011953 <VAS::~VAS()+0xf3>
c00118e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00118e5:	c1 e0 0a             	shl    eax,0xa
c00118e8:	89 c2                	mov    edx,eax
c00118ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00118ee:	01 d0                	add    eax,edx
c00118f0:	c1 e0 0c             	shl    eax,0xc
c00118f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00118f7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00118fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00118fe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011901:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011907:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001190b:	6a 01                	push   0x1
c001190d:	50                   	push   eax
c001190e:	e8 07 fd ff ff       	call   c001161a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011913:	83 c4 0c             	add    esp,0xc
c0011916:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001191a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001191e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011920:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011924:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011928:	25 01 04 00 00       	and    eax,0x401
c001192d:	3d 01 04 00 00       	cmp    eax,0x401
c0011932:	75 19                	jne    c001194d <VAS::~VAS()+0xed>
c0011934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011938:	25 00 f0 ff ff       	and    eax,0xfffff000
c001193d:	83 ec 0c             	sub    esp,0xc
c0011940:	50                   	push   eax
c0011941:	e8 de df ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c0011946:	83 c4 10             	add    esp,0x10
c0011949:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001194d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011951:	eb 84                	jmp    c00118d7 <VAS::~VAS()+0x77>
c0011953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011957:	25 00 04 00 00       	and    eax,0x400
c001195c:	74 19                	je     c0011977 <VAS::~VAS()+0x117>
c001195e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011962:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011967:	83 ec 0c             	sub    esp,0xc
c001196a:	50                   	push   eax
c001196b:	e8 b4 df ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c0011970:	83 c4 10             	add    esp,0x10
c0011973:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011977:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001197b:	e9 1e ff ff ff       	jmp    c001189e <VAS::~VAS()+0x3e>
c0011980:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011984:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011987:	83 ec 0c             	sub    esp,0xc
c001198a:	50                   	push   eax
c001198b:	e8 d5 fc ff ff       	call   c0011665 <Virt::freeKernelVirtualPages(unsigned long)>
c0011990:	83 c4 10             	add    esp,0x10
c0011993:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011997:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001199a:	83 ec 0c             	sub    esp,0xc
c001199d:	50                   	push   eax
c001199e:	e8 81 df ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c00119a3:	83 c4 10             	add    esp,0x10
c00119a6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00119aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00119ae:	c1 e0 02             	shl    eax,0x2
c00119b1:	83 ec 08             	sub    esp,0x8
c00119b4:	50                   	push   eax
c00119b5:	68 84 a3 02 c0       	push   0xc002a384
c00119ba:	e8 10 0d 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c00119bf:	83 c4 10             	add    esp,0x10
c00119c2:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c00119c7:	48                   	dec    eax
c00119c8:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c00119cd:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c00119d2:	85 c0                	test   eax,eax
c00119d4:	75 01                	jne    c00119d7 <VAS::~VAS()+0x177>
c00119d6:	fb                   	sti    
c00119d7:	90                   	nop
c00119d8:	83 c4 2c             	add    esp,0x2c
c00119db:	c3                   	ret    

c00119dc <VAS::mapPage(unsigned long, unsigned long, int)>:
c00119dc:	55                   	push   ebp
c00119dd:	57                   	push   edi
c00119de:	56                   	push   esi
c00119df:	53                   	push   ebx
c00119e0:	83 ec 1c             	sub    esp,0x1c
c00119e3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00119e7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00119eb:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00119f1:	77 08                	ja     c00119fb <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c00119f3:	0f 20 d8             	mov    eax,cr3
c00119f6:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c00119f9:	75 47                	jne    c0011a42 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00119fb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119ff:	09 d8                	or     eax,ebx
c0011a01:	a9 ff 0f 00 00       	test   eax,0xfff
c0011a06:	75 57                	jne    c0011a5f <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011a08:	89 de                	mov    esi,ebx
c0011a0a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011a0d:	c1 ee 16             	shr    esi,0x16
c0011a10:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011a17:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011a1b:	74 54                	je     c0011a71 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011a1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011a21:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011a27:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011a2b:	c1 e6 0c             	shl    esi,0xc
c0011a2e:	c1 eb 0a             	shr    ebx,0xa
c0011a31:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011a37:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011a3a:	83 c4 1c             	add    esp,0x1c
c0011a3d:	5b                   	pop    ebx
c0011a3e:	5e                   	pop    esi
c0011a3f:	5f                   	pop    edi
c0011a40:	5d                   	pop    ebp
c0011a41:	c3                   	ret    
c0011a42:	83 ec 0c             	sub    esp,0xc
c0011a45:	68 a4 a3 02 c0       	push   0xc002a3a4
c0011a4a:	e8 80 0c 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0011a4f:	83 c4 10             	add    esp,0x10
c0011a52:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a56:	09 d8                	or     eax,ebx
c0011a58:	a9 ff 0f 00 00       	test   eax,0xfff
c0011a5d:	74 a9                	je     c0011a08 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011a5f:	83 ec 0c             	sub    esp,0xc
c0011a62:	68 0c a4 02 c0       	push   0xc002a40c
c0011a67:	e8 cf 83 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c0011a6c:	83 c4 10             	add    esp,0x10
c0011a6f:	eb 97                	jmp    c0011a08 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011a71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011a75:	e8 1b df ff ff       	call   c000f995 <Phys::allocatePage()>
c0011a7a:	83 ec 0c             	sub    esp,0xc
c0011a7d:	89 c5                	mov    ebp,eax
c0011a7f:	8b 0d 30 db 02 c0    	mov    ecx,DWORD PTR ds:0xc002db30
c0011a85:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011a89:	6a 01                	push   0x1
c0011a8b:	e8 8f f7 ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0011a90:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011a97:	6a 01                	push   0x1
c0011a99:	50                   	push   eax
c0011a9a:	55                   	push   ebp
c0011a9b:	81 cd 07 04 00 00    	or     ebp,0x407
c0011aa1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011aa5:	51                   	push   ecx
c0011aa6:	e8 27 02 00 00       	call   c0011cd2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011aab:	83 c4 1c             	add    esp,0x1c
c0011aae:	68 00 10 00 00       	push   0x1000
c0011ab3:	6a 00                	push   0x0
c0011ab5:	50                   	push   eax
c0011ab6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011aba:	e8 91 ec fe ff       	call   c0000750 <memset>
c0011abf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011ac3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011ac6:	e8 9a fb ff ff       	call   c0011665 <Virt::freeKernelVirtualPages(unsigned long)>
c0011acb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011acf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011ad2:	83 c4 10             	add    esp,0x10
c0011ad5:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011ad8:	e9 40 ff ff ff       	jmp    c0011a1d <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011add:	90                   	nop

c0011ade <VAS::allocatePages(int, int)>:
c0011ade:	55                   	push   ebp
c0011adf:	57                   	push   edi
c0011ae0:	56                   	push   esi
c0011ae1:	53                   	push   ebx
c0011ae2:	83 ec 1c             	sub    esp,0x1c
c0011ae5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011ae9:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0011aee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011af4:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011afa:	83 e0 01             	and    eax,0x1
c0011afd:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011b01:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011b05:	0f 85 cc 00 00 00    	jne    c0011bd7 <VAS::allocatePages(int, int)+0xf9>
c0011b0b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011b0e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011b12:	85 c0                	test   eax,eax
c0011b14:	0f 84 a1 00 00 00    	je     c0011bbb <VAS::allocatePages(int, int)+0xdd>
c0011b1a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011b1e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b22:	c1 e6 0c             	shl    esi,0xc
c0011b25:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011b29:	85 c0                	test   eax,eax
c0011b2b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011b2e:	7e 33                	jle    c0011b63 <VAS::allocatePages(int, int)+0x85>
c0011b30:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011b34:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b38:	81 cd 00 04 00 00    	or     ebp,0x400
c0011b3e:	e8 52 de ff ff       	call   c000f995 <Phys::allocatePage()>
c0011b43:	55                   	push   ebp
c0011b44:	53                   	push   ebx
c0011b45:	50                   	push   eax
c0011b46:	57                   	push   edi
c0011b47:	e8 90 fe ff ff       	call   c00119dc <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b4c:	83 c4 10             	add    esp,0x10
c0011b4f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b54:	74 03                	je     c0011b59 <VAS::allocatePages(int, int)+0x7b>
c0011b56:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b59:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b5f:	39 de                	cmp    esi,ebx
c0011b61:	75 db                	jne    c0011b3e <VAS::allocatePages(int, int)+0x60>
c0011b63:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b68:	75 12                	jne    c0011b7c <VAS::allocatePages(int, int)+0x9e>
c0011b6a:	0f 20 d8             	mov    eax,cr3
c0011b6d:	0f 22 d8             	mov    cr3,eax
c0011b70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b74:	83 c4 1c             	add    esp,0x1c
c0011b77:	5b                   	pop    ebx
c0011b78:	5e                   	pop    esi
c0011b79:	5f                   	pop    edi
c0011b7a:	5d                   	pop    ebp
c0011b7b:	c3                   	ret    
c0011b7c:	c1 ee 0a             	shr    esi,0xa
c0011b7f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b83:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011b89:	c1 eb 0a             	shr    ebx,0xa
c0011b8c:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011b92:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011b98:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011b9e:	39 c3                	cmp    ebx,eax
c0011ba0:	77 ce                	ja     c0011b70 <VAS::allocatePages(int, int)+0x92>
c0011ba2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ba5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bab:	39 d8                	cmp    eax,ebx
c0011bad:	73 f3                	jae    c0011ba2 <VAS::allocatePages(int, int)+0xc4>
c0011baf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011bb3:	83 c4 1c             	add    esp,0x1c
c0011bb6:	5b                   	pop    ebx
c0011bb7:	5e                   	pop    esi
c0011bb8:	5f                   	pop    edi
c0011bb9:	5d                   	pop    ebp
c0011bba:	c3                   	ret    
c0011bbb:	83 ec 0c             	sub    esp,0xc
c0011bbe:	68 30 a4 02 c0       	push   0xc002a430
c0011bc3:	e8 73 82 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c0011bc8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011bcb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011bcf:	83 c4 10             	add    esp,0x10
c0011bd2:	e9 43 ff ff ff       	jmp    c0011b1a <VAS::allocatePages(int, int)+0x3c>
c0011bd7:	83 ec 0c             	sub    esp,0xc
c0011bda:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011bde:	e8 3c f6 ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0011be3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011be7:	83 c4 10             	add    esp,0x10
c0011bea:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011bef:	0f 87 9b 00 00 00    	ja     c0011c90 <VAS::allocatePages(int, int)+0x1b2>
c0011bf5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011bf9:	85 d2                	test   edx,edx
c0011bfb:	7e 3c                	jle    c0011c39 <VAS::allocatePages(int, int)+0x15b>
c0011bfd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c01:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011c05:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011c09:	c1 e5 0c             	shl    ebp,0xc
c0011c0c:	81 ce 00 04 00 00    	or     esi,0x400
c0011c12:	01 dd                	add    ebp,ebx
c0011c14:	e8 7c dd ff ff       	call   c000f995 <Phys::allocatePage()>
c0011c19:	56                   	push   esi
c0011c1a:	53                   	push   ebx
c0011c1b:	50                   	push   eax
c0011c1c:	57                   	push   edi
c0011c1d:	e8 ba fd ff ff       	call   c00119dc <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c22:	83 c4 10             	add    esp,0x10
c0011c25:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c2a:	74 03                	je     c0011c2f <VAS::allocatePages(int, int)+0x151>
c0011c2c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c2f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c35:	39 dd                	cmp    ebp,ebx
c0011c37:	75 db                	jne    c0011c14 <VAS::allocatePages(int, int)+0x136>
c0011c39:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c3e:	0f 84 26 ff ff ff    	je     c0011b6a <VAS::allocatePages(int, int)+0x8c>
c0011c44:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011c48:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c4c:	89 d3                	mov    ebx,edx
c0011c4e:	c1 e0 0c             	shl    eax,0xc
c0011c51:	c1 eb 0a             	shr    ebx,0xa
c0011c54:	01 d0                	add    eax,edx
c0011c56:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011c5c:	c1 e8 0a             	shr    eax,0xa
c0011c5f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011c65:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c6a:	2d 00 00 40 00       	sub    eax,0x400000
c0011c6f:	39 c3                	cmp    ebx,eax
c0011c71:	0f 87 f9 fe ff ff    	ja     c0011b70 <VAS::allocatePages(int, int)+0x92>
c0011c77:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c7a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c80:	39 d8                	cmp    eax,ebx
c0011c82:	73 f3                	jae    c0011c77 <VAS::allocatePages(int, int)+0x199>
c0011c84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c88:	83 c4 1c             	add    esp,0x1c
c0011c8b:	5b                   	pop    ebx
c0011c8c:	5e                   	pop    esi
c0011c8d:	5f                   	pop    edi
c0011c8e:	5d                   	pop    ebp
c0011c8f:	c3                   	ret    
c0011c90:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0011c95:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c9b:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011ca2:	0f 84 4d ff ff ff    	je     c0011bf5 <VAS::allocatePages(int, int)+0x117>
c0011ca8:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011cb0:	e9 40 ff ff ff       	jmp    c0011bf5 <VAS::allocatePages(int, int)+0x117>
c0011cb5:	90                   	nop

c0011cb6 <VAS::setCPUSpecific(unsigned long)>:
c0011cb6:	83 ec 0c             	sub    esp,0xc
c0011cb9:	6a 05                	push   0x5
c0011cbb:	68 00 00 40 c2       	push   0xc2400000
c0011cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011cc8:	e8 0f fd ff ff       	call   c00119dc <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ccd:	83 c4 1c             	add    esp,0x1c
c0011cd0:	c3                   	ret    
c0011cd1:	90                   	nop

c0011cd2 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011cd2:	55                   	push   ebp
c0011cd3:	57                   	push   edi
c0011cd4:	56                   	push   esi
c0011cd5:	53                   	push   ebx
c0011cd6:	83 ec 1c             	sub    esp,0x1c
c0011cd9:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0011cde:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011ce2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ce8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011cec:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011cf2:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011cf6:	83 e0 01             	and    eax,0x1
c0011cf9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011cfd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d01:	85 c0                	test   eax,eax
c0011d03:	7e 39                	jle    c0011d3e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011d05:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d09:	89 f3                	mov    ebx,esi
c0011d0b:	c1 e0 0c             	shl    eax,0xc
c0011d0e:	01 f0                	add    eax,esi
c0011d10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d14:	55                   	push   ebp
c0011d15:	53                   	push   ebx
c0011d16:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d1a:	29 f0                	sub    eax,esi
c0011d1c:	01 d8                	add    eax,ebx
c0011d1e:	50                   	push   eax
c0011d1f:	57                   	push   edi
c0011d20:	e8 b7 fc ff ff       	call   c00119dc <VAS::mapPage(unsigned long, unsigned long, int)>
c0011d25:	83 c4 10             	add    esp,0x10
c0011d28:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d2d:	74 03                	je     c0011d32 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011d2f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d32:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d38:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011d3c:	75 d6                	jne    c0011d14 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011d3e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d43:	75 10                	jne    c0011d55 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011d45:	0f 20 d8             	mov    eax,cr3
c0011d48:	0f 22 d8             	mov    cr3,eax
c0011d4b:	83 c4 1c             	add    esp,0x1c
c0011d4e:	89 f0                	mov    eax,esi
c0011d50:	5b                   	pop    ebx
c0011d51:	5e                   	pop    esi
c0011d52:	5f                   	pop    edi
c0011d53:	5d                   	pop    ebp
c0011d54:	c3                   	ret    
c0011d55:	89 f3                	mov    ebx,esi
c0011d57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d5b:	c1 eb 0a             	shr    ebx,0xa
c0011d5e:	c1 e0 0c             	shl    eax,0xc
c0011d61:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011d67:	01 f0                	add    eax,esi
c0011d69:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011d6f:	c1 e8 0a             	shr    eax,0xa
c0011d72:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d77:	2d 00 00 40 00       	sub    eax,0x400000
c0011d7c:	39 c3                	cmp    ebx,eax
c0011d7e:	77 cb                	ja     c0011d4b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011d80:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d83:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d89:	39 d8                	cmp    eax,ebx
c0011d8b:	73 f3                	jae    c0011d80 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011d8d:	83 c4 1c             	add    esp,0x1c
c0011d90:	89 f0                	mov    eax,esi
c0011d92:	5b                   	pop    ebx
c0011d93:	5e                   	pop    esi
c0011d94:	5f                   	pop    edi
c0011d95:	5d                   	pop    ebp
c0011d96:	c3                   	ret    
c0011d97:	90                   	nop

c0011d98 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011d98:	55                   	push   ebp
c0011d99:	57                   	push   edi
c0011d9a:	56                   	push   esi
c0011d9b:	53                   	push   ebx
c0011d9c:	83 ec 1c             	sub    esp,0x1c
c0011d9f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011da3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011da7:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011dab:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011daf:	a9 ff 0f 00 00       	test   eax,0xfff
c0011db4:	75 4a                	jne    c0011e00 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011db6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011dba:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011dbd:	c1 eb 16             	shr    ebx,0x16
c0011dc0:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011dc7:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011dcb:	74 4d                	je     c0011e1a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011dcd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011dd1:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011dd5:	c1 e8 0a             	shr    eax,0xa
c0011dd8:	80 fa 01             	cmp    dl,0x1
c0011ddb:	19 d2                	sbb    edx,edx
c0011ddd:	c1 e3 0c             	shl    ebx,0xc
c0011de0:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011de4:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011dea:	25 fc 0f 00 00       	and    eax,0xffc
c0011def:	01 d8                	add    eax,ebx
c0011df1:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011df8:	83 c4 1c             	add    esp,0x1c
c0011dfb:	5b                   	pop    ebx
c0011dfc:	5e                   	pop    esi
c0011dfd:	5f                   	pop    edi
c0011dfe:	5d                   	pop    ebp
c0011dff:	c3                   	ret    
c0011e00:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011e04:	83 ec 0c             	sub    esp,0xc
c0011e07:	68 5c a4 02 c0       	push   0xc002a45c
c0011e0c:	e8 2a 80 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c0011e11:	83 c4 10             	add    esp,0x10
c0011e14:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011e18:	eb 9c                	jmp    c0011db6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011e1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011e1e:	e8 72 db ff ff       	call   c000f995 <Phys::allocatePage()>
c0011e23:	83 ec 0c             	sub    esp,0xc
c0011e26:	89 c5                	mov    ebp,eax
c0011e28:	8b 0d 30 db 02 c0    	mov    ecx,DWORD PTR ds:0xc002db30
c0011e2e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011e32:	6a 01                	push   0x1
c0011e34:	e8 e6 f3 ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0011e39:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011e40:	6a 01                	push   0x1
c0011e42:	50                   	push   eax
c0011e43:	55                   	push   ebp
c0011e44:	81 cd 07 04 00 00    	or     ebp,0x407
c0011e4a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011e4e:	51                   	push   ecx
c0011e4f:	e8 7e fe ff ff       	call   c0011cd2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e54:	83 c4 1c             	add    esp,0x1c
c0011e57:	68 00 10 00 00       	push   0x1000
c0011e5c:	6a 00                	push   0x0
c0011e5e:	50                   	push   eax
c0011e5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e63:	e8 e8 e8 fe ff       	call   c0000750 <memset>
c0011e68:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e6c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011e6f:	e8 f1 f7 ff ff       	call   c0011665 <Virt::freeKernelVirtualPages(unsigned long)>
c0011e74:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011e77:	83 c4 10             	add    esp,0x10
c0011e7a:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011e7d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e81:	e9 47 ff ff ff       	jmp    c0011dcd <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0011e86 <VAS::VAS(bool)>:
c0011e86:	53                   	push   ebx
c0011e87:	83 ec 28             	sub    esp,0x28
c0011e8a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e8e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011e92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e96:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ea1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011ea8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011eac:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011eb0:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011eb3:	e8 dd da ff ff       	call   c000f995 <Phys::allocatePage()>
c0011eb8:	89 c2                	mov    edx,eax
c0011eba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ebe:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0011ec1:	8b 1d 30 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db30
c0011ec7:	83 ec 0c             	sub    esp,0xc
c0011eca:	6a 01                	push   0x1
c0011ecc:	e8 4e f3 ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0011ed1:	83 c4 10             	add    esp,0x10
c0011ed4:	89 c2                	mov    edx,eax
c0011ed6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011eda:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011edd:	83 ec 0c             	sub    esp,0xc
c0011ee0:	6a 03                	push   0x3
c0011ee2:	6a 01                	push   0x1
c0011ee4:	52                   	push   edx
c0011ee5:	50                   	push   eax
c0011ee6:	53                   	push   ebx
c0011ee7:	e8 e6 fd ff ff       	call   c0011cd2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011eec:	83 c4 20             	add    esp,0x20
c0011eef:	89 c2                	mov    edx,eax
c0011ef1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ef5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011ef8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011f00:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011f08:	7f 1c                	jg     c0011f26 <VAS::VAS(bool)+0xa0>
c0011f0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f0e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011f15:	c1 e2 02             	shl    edx,0x2
c0011f18:	01 d0                	add    eax,edx
c0011f1a:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f20:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f24:	eb da                	jmp    c0011f00 <VAS::VAS(bool)+0x7a>
c0011f26:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011f2e:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011f36:	7f 7a                	jg     c0011fb2 <VAS::VAS(bool)+0x12c>
c0011f38:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f3c:	2d 00 02 00 00       	sub    eax,0x200
c0011f41:	c1 e0 0c             	shl    eax,0xc
c0011f44:	83 c8 03             	or     eax,0x3
c0011f47:	89 c2                	mov    edx,eax
c0011f49:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0011f4e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f54:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f5a:	83 e0 10             	and    eax,0x10
c0011f5d:	84 c0                	test   al,al
c0011f5f:	74 07                	je     c0011f68 <VAS::VAS(bool)+0xe2>
c0011f61:	b8 00 01 00 00       	mov    eax,0x100
c0011f66:	eb 05                	jmp    c0011f6d <VAS::VAS(bool)+0xe7>
c0011f68:	b8 00 00 00 00       	mov    eax,0x0
c0011f6d:	09 d0                	or     eax,edx
c0011f6f:	89 c1                	mov    ecx,eax
c0011f71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f75:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f78:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f7c:	c1 e2 02             	shl    edx,0x2
c0011f7f:	01 d0                	add    eax,edx
c0011f81:	89 ca                	mov    edx,ecx
c0011f83:	89 10                	mov    DWORD PTR [eax],edx
c0011f85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f89:	2d 40 03 00 00       	sub    eax,0x340
c0011f8e:	83 f8 7f             	cmp    eax,0x7f
c0011f91:	77 16                	ja     c0011fa9 <VAS::VAS(bool)+0x123>
c0011f93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f97:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f9a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f9e:	c1 e2 02             	shl    edx,0x2
c0011fa1:	01 d0                	add    eax,edx
c0011fa3:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011fa9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011fad:	e9 7c ff ff ff       	jmp    c0011f2e <VAS::VAS(bool)+0xa8>
c0011fb2:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0011fb7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fbd:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011fc3:	83 e0 10             	and    eax,0x10
c0011fc6:	84 c0                	test   al,al
c0011fc8:	74 07                	je     c0011fd1 <VAS::VAS(bool)+0x14b>
c0011fca:	b8 03 41 00 00       	mov    eax,0x4103
c0011fcf:	eb 05                	jmp    c0011fd6 <VAS::VAS(bool)+0x150>
c0011fd1:	b8 03 40 00 00       	mov    eax,0x4003
c0011fd6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011fda:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0011fdd:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011fe3:	89 02                	mov    DWORD PTR [edx],eax
c0011fe5:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0011fea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ff0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011ff6:	83 ec 08             	sub    esp,0x8
c0011ff9:	50                   	push   eax
c0011ffa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011ffe:	e8 b3 fc ff ff       	call   c0011cb6 <VAS::setCPUSpecific(unsigned long)>
c0012003:	83 c4 10             	add    esp,0x10
c0012006:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001200a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001200d:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0012012:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012018:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001201e:	83 e0 10             	and    eax,0x10
c0012021:	84 c0                	test   al,al
c0012023:	74 07                	je     c001202c <VAS::VAS(bool)+0x1a6>
c0012025:	b8 00 01 00 00       	mov    eax,0x100
c001202a:	eb 05                	jmp    c0012031 <VAS::VAS(bool)+0x1ab>
c001202c:	b8 00 00 00 00       	mov    eax,0x0
c0012031:	09 c2                	or     edx,eax
c0012033:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012037:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001203a:	05 fc 0f 00 00       	add    eax,0xffc
c001203f:	83 ca 03             	or     edx,0x3
c0012042:	89 10                	mov    DWORD PTR [eax],edx
c0012044:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0012049:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001204f:	83 ec 0c             	sub    esp,0xc
c0012052:	50                   	push   eax
c0012053:	e8 b0 1d 00 00       	call   c0013e08 <Device::getName()>
c0012058:	83 c4 10             	add    esp,0x10
c001205b:	83 ec 08             	sub    esp,0x8
c001205e:	68 79 a5 02 c0       	push   0xc002a579
c0012063:	50                   	push   eax
c0012064:	e8 2f e8 fe ff       	call   c0000898 <strcmp>
c0012069:	83 c4 10             	add    esp,0x10
c001206c:	85 c0                	test   eax,eax
c001206e:	0f 94 c0             	sete   al
c0012071:	84 c0                	test   al,al
c0012073:	0f 84 87 00 00 00    	je     c0012100 <VAS::VAS(bool)+0x27a>
c0012079:	fa                   	cli    
c001207a:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001207f:	40                   	inc    eax
c0012080:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c0012085:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c001208a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012090:	05 7c 09 00 00       	add    eax,0x97c
c0012095:	83 ec 0c             	sub    esp,0xc
c0012098:	50                   	push   eax
c0012099:	e8 80 cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001209e:	83 c4 10             	add    esp,0x10
c00120a1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120a6:	89 c3                	mov    ebx,eax
c00120a8:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00120ad:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120b3:	05 7c 09 00 00       	add    eax,0x97c
c00120b8:	83 ec 0c             	sub    esp,0xc
c00120bb:	50                   	push   eax
c00120bc:	e8 5d cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00120c1:	83 c4 10             	add    esp,0x10
c00120c4:	83 ec 08             	sub    esp,0x8
c00120c7:	50                   	push   eax
c00120c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120cc:	e8 75 f5 ff ff       	call   c0011646 <VAS::getPageTableEntry(unsigned long)>
c00120d1:	83 c4 10             	add    esp,0x10
c00120d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00120d6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120db:	6a 11                	push   0x11
c00120dd:	53                   	push   ebx
c00120de:	50                   	push   eax
c00120df:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120e3:	e8 f4 f8 ff ff       	call   c00119dc <VAS::mapPage(unsigned long, unsigned long, int)>
c00120e8:	83 c4 10             	add    esp,0x10
c00120eb:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c00120f0:	48                   	dec    eax
c00120f1:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c00120f6:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c00120fb:	85 c0                	test   eax,eax
c00120fd:	75 01                	jne    c0012100 <VAS::VAS(bool)+0x27a>
c00120ff:	fb                   	sti    
c0012100:	90                   	nop
c0012101:	83 c4 28             	add    esp,0x28
c0012104:	5b                   	pop    ebx
c0012105:	c3                   	ret    

c0012106 <VAS::evict(unsigned long)>:
c0012106:	55                   	push   ebp
c0012107:	57                   	push   edi
c0012108:	56                   	push   esi
c0012109:	53                   	push   ebx
c001210a:	83 ec 1c             	sub    esp,0x1c
c001210d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012111:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012115:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012119:	e8 42 f2 ff ff       	call   c0011360 <Virt::allocateSwapfilePage()>
c001211e:	89 c7                	mov    edi,eax
c0012120:	a1 6c c9 02 c0       	mov    eax,ds:0xc002c96c
c0012125:	85 c0                	test   eax,eax
c0012127:	7e 3d                	jle    c0012166 <VAS::evict(unsigned long)+0x60>
c0012129:	89 ee                	mov    esi,ebp
c001212b:	31 db                	xor    ebx,ebx
c001212d:	83 ec 0c             	sub    esp,0xc
c0012130:	57                   	push   edi
c0012131:	e8 18 f2 ff ff       	call   c001134e <Virt::swapIDToSector(unsigned long)>
c0012136:	89 34 24             	mov    DWORD PTR [esp],esi
c0012139:	01 d8                	add    eax,ebx
c001213b:	6a 01                	push   0x1
c001213d:	31 d2                	xor    edx,edx
c001213f:	43                   	inc    ebx
c0012140:	52                   	push   edx
c0012141:	81 c6 00 02 00 00    	add    esi,0x200
c0012147:	50                   	push   eax
c0012148:	0f be 05 78 c9 02 c0 	movsx  eax,BYTE PTR ds:0xc002c978
c001214f:	ff 34 85 bc de 02 c0 	push   DWORD PTR [eax*4-0x3ffd2144]
c0012156:	e8 35 3f 00 00       	call   c0016090 <LogicalDisk::write(unsigned long long, int, void*)>
c001215b:	83 c4 20             	add    esp,0x20
c001215e:	39 1d 6c c9 02 c0    	cmp    DWORD PTR ds:0xc002c96c,ebx
c0012164:	7f c7                	jg     c001212d <VAS::evict(unsigned long)+0x27>
c0012166:	83 ec 08             	sub    esp,0x8
c0012169:	c1 e7 0b             	shl    edi,0xb
c001216c:	55                   	push   ebp
c001216d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012171:	e8 d0 f4 ff ff       	call   c0011646 <VAS::getPageTableEntry(unsigned long)>
c0012176:	5a                   	pop    edx
c0012177:	89 c6                	mov    esi,eax
c0012179:	59                   	pop    ecx
c001217a:	ff 30                	push   DWORD PTR [eax]
c001217c:	68 87 a5 02 c0       	push   0xc002a587
c0012181:	e8 49 05 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0012186:	8b 16                	mov    edx,DWORD PTR [esi]
c0012188:	89 d3                	mov    ebx,edx
c001218a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012190:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012196:	09 d7                	or     edi,edx
c0012198:	89 3e                	mov    DWORD PTR [esi],edi
c001219a:	5e                   	pop    esi
c001219b:	58                   	pop    eax
c001219c:	57                   	push   edi
c001219d:	68 a0 a5 02 c0       	push   0xc002a5a0
c00121a2:	e8 28 05 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c00121a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00121aa:	ff 05 28 db 02 c0    	inc    DWORD PTR ds:0xc002db28
c00121b0:	e8 6f d7 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c00121b5:	0f 20 d8             	mov    eax,cr3
c00121b8:	0f 22 d8             	mov    cr3,eax
c00121bb:	ff 35 28 db 02 c0    	push   DWORD PTR ds:0xc002db28
c00121c1:	55                   	push   ebp
c00121c2:	53                   	push   ebx
c00121c3:	68 80 a4 02 c0       	push   0xc002a480
c00121c8:	e8 02 05 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c00121cd:	a1 24 db 02 c0       	mov    eax,ds:0xc002db24
c00121d2:	c7 44 24 50 b9 a5 02 c0 	mov    DWORD PTR [esp+0x50],0xc002a5b9
c00121da:	8d 50 01             	lea    edx,[eax+0x1]
c00121dd:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00121e1:	89 15 24 db 02 c0    	mov    DWORD PTR ds:0xc002db24,edx
c00121e7:	83 c4 3c             	add    esp,0x3c
c00121ea:	5b                   	pop    ebx
c00121eb:	5e                   	pop    esi
c00121ec:	5f                   	pop    edi
c00121ed:	5d                   	pop    ebp
c00121ee:	e9 dc 04 00 00       	jmp    c00126cf <Dbg::kprintf(char const*, ...)>
c00121f3:	90                   	nop

c00121f4 <VAS::tryLoadBackOffDisk(unsigned long)>:
c00121f4:	55                   	push   ebp
c00121f5:	57                   	push   edi
c00121f6:	56                   	push   esi
c00121f7:	53                   	push   ebx
c00121f8:	83 ec 24             	sub    esp,0x24
c00121fb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00121ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012203:	68 ca a5 02 c0       	push   0xc002a5ca
c0012208:	e8 c2 04 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c001220d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0012211:	58                   	pop    eax
c0012212:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c0012218:	5a                   	pop    edx
c0012219:	57                   	push   edi
c001221a:	53                   	push   ebx
c001221b:	e8 26 f4 ff ff       	call   c0011646 <VAS::getPageTableEntry(unsigned long)>
c0012220:	59                   	pop    ecx
c0012221:	5e                   	pop    esi
c0012222:	89 c6                	mov    esi,eax
c0012224:	ff 30                	push   DWORD PTR [eax]
c0012226:	68 dd a5 02 c0       	push   0xc002a5dd
c001222b:	e8 9f 04 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0012230:	83 c4 10             	add    esp,0x10
c0012233:	85 ff                	test   edi,edi
c0012235:	74 0a                	je     c0012241 <VAS::tryLoadBackOffDisk(unsigned long)+0x4d>
c0012237:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0012239:	f7 c5 01 00 00 00    	test   ebp,0x1
c001223f:	74 0a                	je     c001224b <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c0012241:	83 c4 1c             	add    esp,0x1c
c0012244:	31 c0                	xor    eax,eax
c0012246:	5b                   	pop    ebx
c0012247:	5e                   	pop    esi
c0012248:	5f                   	pop    edi
c0012249:	5d                   	pop    ebp
c001224a:	c3                   	ret    
c001224b:	83 ec 08             	sub    esp,0x8
c001224e:	c1 ed 0b             	shr    ebp,0xb
c0012251:	55                   	push   ebp
c0012252:	68 eb a5 02 c0       	push   0xc002a5eb
c0012257:	e8 73 04 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c001225c:	e8 34 d7 ff ff       	call   c000f995 <Phys::allocatePage()>
c0012261:	59                   	pop    ecx
c0012262:	5a                   	pop    edx
c0012263:	50                   	push   eax
c0012264:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012268:	68 f6 a5 02 c0       	push   0xc002a5f6
c001226d:	e8 5d 04 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0012272:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012276:	8b 16                	mov    edx,DWORD PTR [esi]
c0012278:	81 e2 ff 0f 00 00    	and    edx,0xfff
c001227e:	09 d0                	or     eax,edx
c0012280:	0d 01 08 00 00       	or     eax,0x801
c0012285:	89 06                	mov    DWORD PTR [esi],eax
c0012287:	59                   	pop    ecx
c0012288:	5e                   	pop    esi
c0012289:	50                   	push   eax
c001228a:	68 0b a6 02 c0       	push   0xc002a60b
c001228f:	e8 3b 04 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0012294:	0f 20 d8             	mov    eax,cr3
c0012297:	83 c4 0c             	add    esp,0xc
c001229a:	53                   	push   ebx
c001229b:	50                   	push   eax
c001229c:	68 23 a6 02 c0       	push   0xc002a623
c00122a1:	e8 29 04 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c00122a6:	c7 04 24 3b a6 02 c0 	mov    DWORD PTR [esp],0xc002a63b
c00122ad:	e8 1d 04 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c00122b2:	83 c4 10             	add    esp,0x10
c00122b5:	a1 6c c9 02 c0       	mov    eax,ds:0xc002c96c
c00122ba:	85 c0                	test   eax,eax
c00122bc:	7e 3d                	jle    c00122fb <VAS::tryLoadBackOffDisk(unsigned long)+0x107>
c00122be:	89 fe                	mov    esi,edi
c00122c0:	31 db                	xor    ebx,ebx
c00122c2:	83 ec 0c             	sub    esp,0xc
c00122c5:	55                   	push   ebp
c00122c6:	e8 83 f0 ff ff       	call   c001134e <Virt::swapIDToSector(unsigned long)>
c00122cb:	89 34 24             	mov    DWORD PTR [esp],esi
c00122ce:	01 d8                	add    eax,ebx
c00122d0:	6a 01                	push   0x1
c00122d2:	31 d2                	xor    edx,edx
c00122d4:	43                   	inc    ebx
c00122d5:	52                   	push   edx
c00122d6:	81 c6 00 02 00 00    	add    esi,0x200
c00122dc:	50                   	push   eax
c00122dd:	0f be 05 78 c9 02 c0 	movsx  eax,BYTE PTR ds:0xc002c978
c00122e4:	ff 34 85 bc de 02 c0 	push   DWORD PTR [eax*4-0x3ffd2144]
c00122eb:	e8 34 3d 00 00       	call   c0016024 <LogicalDisk::read(unsigned long long, int, void*)>
c00122f0:	83 c4 20             	add    esp,0x20
c00122f3:	39 1d 6c c9 02 c0    	cmp    DWORD PTR ds:0xc002c96c,ebx
c00122f9:	7f c7                	jg     c00122c2 <VAS::tryLoadBackOffDisk(unsigned long)+0xce>
c00122fb:	a1 28 db 02 c0       	mov    eax,ds:0xc002db28
c0012300:	48                   	dec    eax
c0012301:	52                   	push   edx
c0012302:	a3 28 db 02 c0       	mov    ds:0xc002db28,eax
c0012307:	50                   	push   eax
c0012308:	57                   	push   edi
c0012309:	68 4b a6 02 c0       	push   0xc002a64b
c001230e:	e8 bc 03 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0012313:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012316:	e8 15 f0 ff ff       	call   c0011330 <Virt::freeSwapfilePage(unsigned long)>
c001231b:	c7 04 24 60 a6 02 c0 	mov    DWORD PTR [esp],0xc002a660
c0012322:	e8 a8 03 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0012327:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001232c:	83 c4 10             	add    esp,0x10
c001232f:	48                   	dec    eax
c0012330:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c0012335:	85 c0                	test   eax,eax
c0012337:	75 01                	jne    c001233a <VAS::tryLoadBackOffDisk(unsigned long)+0x146>
c0012339:	fb                   	sti    
c001233a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001233e:	25 ff 0f 00 00       	and    eax,0xfff
c0012343:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012348:	77 20                	ja     c001236a <VAS::tryLoadBackOffDisk(unsigned long)+0x176>
c001234a:	0f 20 d8             	mov    eax,cr3
c001234d:	0f 22 d8             	mov    cr3,eax
c0012350:	83 ec 0c             	sub    esp,0xc
c0012353:	68 86 a6 02 c0       	push   0xc002a686
c0012358:	e8 72 03 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c001235d:	83 c4 10             	add    esp,0x10
c0012360:	b0 01                	mov    al,0x1
c0012362:	83 c4 1c             	add    esp,0x1c
c0012365:	5b                   	pop    ebx
c0012366:	5e                   	pop    esi
c0012367:	5f                   	pop    edi
c0012368:	5d                   	pop    ebp
c0012369:	c3                   	ret    
c001236a:	83 ec 0c             	sub    esp,0xc
c001236d:	68 76 a6 02 c0       	push   0xc002a676
c0012372:	e8 58 03 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0012377:	83 c4 10             	add    esp,0x10
c001237a:	eb ce                	jmp    c001234a <VAS::tryLoadBackOffDisk(unsigned long)+0x156>

c001237c <VAS::scanForEviction()>:
c001237c:	55                   	push   ebp
c001237d:	31 ed                	xor    ebp,ebp
c001237f:	57                   	push   edi
c0012380:	56                   	push   esi
c0012381:	53                   	push   ebx
c0012382:	83 ec 0c             	sub    esp,0xc
c0012385:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012389:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c001238c:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012392:	75 0e                	jne    c00123a2 <VAS::scanForEviction()+0x26>
c0012394:	89 da                	mov    edx,ebx
c0012396:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012399:	c1 ea 16             	shr    edx,0x16
c001239c:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00123a0:	74 4e                	je     c00123f0 <VAS::scanForEviction()+0x74>
c00123a2:	53                   	push   ebx
c00123a3:	56                   	push   esi
c00123a4:	e8 9d f2 ff ff       	call   c0011646 <VAS::getPageTableEntry(unsigned long)>
c00123a9:	5a                   	pop    edx
c00123aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00123ac:	59                   	pop    ecx
c00123ad:	89 fa                	mov    edx,edi
c00123af:	81 e2 01 08 00 00    	and    edx,0x801
c00123b5:	81 fa 01 08 00 00    	cmp    edx,0x801
c00123bb:	74 3e                	je     c00123fb <VAS::scanForEviction()+0x7f>
c00123bd:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123c3:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c00123c9:	76 2b                	jbe    c00123f6 <VAS::scanForEviction()+0x7a>
c00123cb:	45                   	inc    ebp
c00123cc:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c00123d3:	83 fd 04             	cmp    ebp,0x4
c00123d6:	74 35                	je     c001240d <VAS::scanForEviction()+0x91>
c00123d8:	31 db                	xor    ebx,ebx
c00123da:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00123e0:	75 c0                	jne    c00123a2 <VAS::scanForEviction()+0x26>
c00123e2:	89 da                	mov    edx,ebx
c00123e4:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00123e7:	c1 ea 16             	shr    edx,0x16
c00123ea:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00123ee:	75 b2                	jne    c00123a2 <VAS::scanForEviction()+0x26>
c00123f0:	81 c3 00 00 40 00    	add    ebx,0x400000
c00123f6:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c00123f9:	eb 91                	jmp    c001238c <VAS::scanForEviction()+0x10>
c00123fb:	f7 c7 20 00 00 00    	test   edi,0x20
c0012401:	74 22                	je     c0012425 <VAS::scanForEviction()+0xa9>
c0012403:	83 e7 df             	and    edi,0xffffffdf
c0012406:	89 38                	mov    DWORD PTR [eax],edi
c0012408:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c001240b:	eb b0                	jmp    c00123bd <VAS::scanForEviction()+0x41>
c001240d:	83 ec 0c             	sub    esp,0xc
c0012410:	68 b0 a4 02 c0       	push   0xc002a4b0
c0012415:	e8 21 7a 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c001241a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c001241d:	83 c4 10             	add    esp,0x10
c0012420:	e9 67 ff ff ff       	jmp    c001238c <VAS::scanForEviction()+0x10>
c0012425:	83 ec 08             	sub    esp,0x8
c0012428:	53                   	push   ebx
c0012429:	56                   	push   esi
c001242a:	e8 d7 fc ff ff       	call   c0012106 <VAS::evict(unsigned long)>
c001242f:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012436:	89 f8                	mov    eax,edi
c0012438:	83 c4 1c             	add    esp,0x1c
c001243b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012440:	5b                   	pop    ebx
c0012441:	5e                   	pop    esi
c0012442:	5f                   	pop    edi
c0012443:	5d                   	pop    ebp
c0012444:	c3                   	ret    

c0012445 <mapVASFirstTime>:
c0012445:	55                   	push   ebp
c0012446:	57                   	push   edi
c0012447:	56                   	push   esi
c0012448:	53                   	push   ebx
c0012449:	83 ec 0c             	sub    esp,0xc
c001244c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012451:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012454:	4a                   	dec    edx
c0012455:	0f 84 fe 00 00 00    	je     c0012559 <mapVASFirstTime+0x114>
c001245b:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001245e:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012461:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012466:	c1 e5 15             	shl    ebp,0x15
c0012469:	bf 00 90 e7 01       	mov    edi,0x1e79000
c001246e:	8b b2 32 05 00 00    	mov    esi,DWORD PTR [edx+0x532]
c0012474:	29 eb                	sub    ebx,ebp
c0012476:	29 ef                	sub    edi,ebp
c0012478:	83 ec 08             	sub    esp,0x8
c001247b:	53                   	push   ebx
c001247c:	68 ad a6 02 c0       	push   0xc002a6ad
c0012481:	e8 49 02 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0012486:	e8 0a d5 ff ff       	call   c000f995 <Phys::allocatePage()>
c001248b:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c0012492:	6a 01                	push   0x1
c0012494:	53                   	push   ebx
c0012495:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001249b:	50                   	push   eax
c001249c:	56                   	push   esi
c001249d:	e8 30 f8 ff ff       	call   c0011cd2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124a2:	83 c4 20             	add    esp,0x20
c00124a5:	39 fb                	cmp    ebx,edi
c00124a7:	75 cf                	jne    c0012478 <mapVASFirstTime+0x33>
c00124a9:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c00124ae:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c00124b3:	29 eb                	sub    ebx,ebp
c00124b5:	29 ef                	sub    edi,ebp
c00124b7:	83 ec 08             	sub    esp,0x8
c00124ba:	53                   	push   ebx
c00124bb:	68 c9 a6 02 c0       	push   0xc002a6c9
c00124c0:	e8 0a 02 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c00124c5:	58                   	pop    eax
c00124c6:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c00124ca:	5a                   	pop    edx
c00124cb:	19 c0                	sbb    eax,eax
c00124cd:	83 e0 04             	and    eax,0x4
c00124d0:	05 03 04 00 00       	add    eax,0x403
c00124d5:	50                   	push   eax
c00124d6:	68 15 a6 02 c0       	push   0xc002a615
c00124db:	e8 ef 01 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c00124e0:	e8 b0 d4 ff ff       	call   c000f995 <Phys::allocatePage()>
c00124e5:	59                   	pop    ecx
c00124e6:	89 c5                	mov    ebp,eax
c00124e8:	58                   	pop    eax
c00124e9:	55                   	push   ebp
c00124ea:	68 dd a6 02 c0       	push   0xc002a6dd
c00124ef:	e8 db 01 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c00124f4:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c00124f8:	19 d2                	sbb    edx,edx
c00124fa:	83 e2 04             	and    edx,0x4
c00124fd:	81 c2 03 0c 00 00    	add    edx,0xc03
c0012503:	89 14 24             	mov    DWORD PTR [esp],edx
c0012506:	6a 01                	push   0x1
c0012508:	53                   	push   ebx
c0012509:	55                   	push   ebp
c001250a:	56                   	push   esi
c001250b:	e8 c2 f7 ff ff       	call   c0011cd2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012510:	83 c4 18             	add    esp,0x18
c0012513:	53                   	push   ebx
c0012514:	56                   	push   esi
c0012515:	e8 2c f1 ff ff       	call   c0011646 <VAS::getPageTableEntry(unsigned long)>
c001251a:	5a                   	pop    edx
c001251b:	59                   	pop    ecx
c001251c:	ff 30                	push   DWORD PTR [eax]
c001251e:	68 f9 a6 02 c0       	push   0xc002a6f9
c0012523:	e8 a7 01 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0012528:	0f 20 d8             	mov    eax,cr3
c001252b:	83 c4 0c             	add    esp,0xc
c001252e:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012534:	56                   	push   esi
c0012535:	50                   	push   eax
c0012536:	68 23 a6 02 c0       	push   0xc002a623
c001253b:	e8 8f 01 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0012540:	83 c4 10             	add    esp,0x10
c0012543:	39 df                	cmp    edi,ebx
c0012545:	0f 85 6c ff ff ff    	jne    c00124b7 <mapVASFirstTime+0x72>
c001254b:	0f 20 d8             	mov    eax,cr3
c001254e:	0f 22 d8             	mov    cr3,eax
c0012551:	83 c4 0c             	add    esp,0xc
c0012554:	5b                   	pop    ebx
c0012555:	5e                   	pop    esi
c0012556:	5f                   	pop    edi
c0012557:	5d                   	pop    ebp
c0012558:	c3                   	ret    
c0012559:	83 ec 0c             	sub    esp,0xc
c001255c:	68 94 a6 02 c0       	push   0xc002a694
c0012561:	e8 69 01 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0012566:	83 c4 10             	add    esp,0x10
c0012569:	83 c4 0c             	add    esp,0xc
c001256c:	5b                   	pop    ebx
c001256d:	5e                   	pop    esi
c001256e:	5f                   	pop    edi
c001256f:	5d                   	pop    ebp
c0012570:	c3                   	ret    

c0012571 <__cxa_atexit>:
c0012571:	31 c0                	xor    eax,eax
c0012573:	c3                   	ret    

c0012574 <__cxa_finalize>:
c0012574:	c3                   	ret    

c0012575 <__stack_chk_fail>:
c0012575:	55                   	push   ebp
c0012576:	89 e5                	mov    ebp,esp
c0012578:	83 ec 14             	sub    esp,0x14
c001257b:	68 04 a7 02 c0       	push   0xc002a704
c0012580:	e8 4a 01 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0012585:	58                   	pop    eax
c0012586:	5a                   	pop    edx
c0012587:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001258a:	68 54 a7 02 c0       	push   0xc002a754
c001258f:	e8 3b 01 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0012594:	59                   	pop    ecx
c0012595:	58                   	pop    eax
c0012596:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012599:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001259c:	68 54 a7 02 c0       	push   0xc002a754
c00125a1:	e8 29 01 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c00125a6:	5a                   	pop    edx
c00125a7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00125aa:	59                   	pop    ecx
c00125ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00125ad:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00125b0:	68 54 a7 02 c0       	push   0xc002a754
c00125b5:	e8 15 01 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c00125ba:	5a                   	pop    edx
c00125bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00125be:	59                   	pop    ecx
c00125bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00125c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00125c3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00125c6:	68 54 a7 02 c0       	push   0xc002a754
c00125cb:	e8 ff 00 00 00       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c00125d0:	c7 04 24 5c a7 02 c0 	mov    DWORD PTR [esp],0xc002a75c
c00125d7:	e8 5f 78 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c00125dc:	83 c4 10             	add    esp,0x10
c00125df:	c9                   	leave  
c00125e0:	c3                   	ret    

c00125e1 <__cxa_pure_virtual>:
c00125e1:	83 ec 18             	sub    esp,0x18
c00125e4:	68 74 a7 02 c0       	push   0xc002a774
c00125e9:	e8 4d 78 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c00125ee:	83 c4 1c             	add    esp,0x1c
c00125f1:	c3                   	ret    

c00125f2 <operator new[](unsigned long)>:
c00125f2:	e9 a2 cf ff ff       	jmp    c000f599 <malloc>

c00125f7 <operator delete(void*, unsigned long)>:
c00125f7:	e9 bd cf ff ff       	jmp    c000f5b9 <rfree>

c00125fc <operator delete[](void*)>:
c00125fc:	e9 b8 cf ff ff       	jmp    c000f5b9 <rfree>

c0012601 <operator delete[](void*, unsigned long)>:
c0012601:	e9 b3 cf ff ff       	jmp    c000f5b9 <rfree>

c0012606 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012606:	55                   	push   ebp
c0012607:	b9 11 00 00 00       	mov    ecx,0x11
c001260c:	57                   	push   edi
c001260d:	56                   	push   esi
c001260e:	be 9a a1 02 c0       	mov    esi,0xc002a19a
c0012613:	53                   	push   ebx
c0012614:	83 ec 20             	sub    esp,0x20
c0012617:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001261b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001261f:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0012623:	fc                   	cld    
c0012624:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012626:	89 ee                	mov    esi,ebp
c0012628:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001262c:	eb 02                	jmp    c0012630 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c001262e:	89 c6                	mov    esi,eax
c0012630:	31 d2                	xor    edx,edx
c0012632:	41                   	inc    ecx
c0012633:	89 f0                	mov    eax,esi
c0012635:	f7 f3                	div    ebx
c0012637:	39 de                	cmp    esi,ebx
c0012639:	73 f3                	jae    c001262e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c001263b:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001263e:	eb 02                	jmp    c0012642 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c0012640:	89 c5                	mov    ebp,eax
c0012642:	31 d2                	xor    edx,edx
c0012644:	49                   	dec    ecx
c0012645:	89 e8                	mov    eax,ebp
c0012647:	f7 f3                	div    ebx
c0012649:	39 dd                	cmp    ebp,ebx
c001264b:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c001264f:	88 11                	mov    BYTE PTR [ecx],dl
c0012651:	73 ed                	jae    c0012640 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c0012653:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012657:	83 c4 20             	add    esp,0x20
c001265a:	5b                   	pop    ebx
c001265b:	5e                   	pop    esi
c001265c:	5f                   	pop    edi
c001265d:	5d                   	pop    ebp
c001265e:	c3                   	ret    

c001265f <Dbg::logc(char)>:
c001265f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012663:	ba fd 03 00 00       	mov    edx,0x3fd
c0012668:	ec                   	in     al,dx
c0012669:	a8 20                	test   al,0x20
c001266b:	74 fb                	je     c0012668 <Dbg::logc(char)+0x9>
c001266d:	ba f8 03 00 00       	mov    edx,0x3f8
c0012672:	88 c8                	mov    al,cl
c0012674:	ee                   	out    dx,al
c0012675:	c3                   	ret    

c0012676 <Dbg::logs(char*)>:
c0012676:	53                   	push   ebx
c0012677:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001267b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001267e:	84 c0                	test   al,al
c0012680:	74 0f                	je     c0012691 <Dbg::logs(char*)+0x1b>
c0012682:	50                   	push   eax
c0012683:	43                   	inc    ebx
c0012684:	e8 d6 ff ff ff       	call   c001265f <Dbg::logc(char)>
c0012689:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001268c:	5a                   	pop    edx
c001268d:	84 c0                	test   al,al
c001268f:	75 f1                	jne    c0012682 <Dbg::logs(char*)+0xc>
c0012691:	5b                   	pop    ebx
c0012692:	c3                   	ret    

c0012693 <Dbg::logWriteInt(unsigned int)>:
c0012693:	83 ec 10             	sub    esp,0x10
c0012696:	6a 0a                	push   0xa
c0012698:	8d 44 24 08          	lea    eax,[esp+0x8]
c001269c:	50                   	push   eax
c001269d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126a1:	e8 60 ff ff ff       	call   c0012606 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00126a6:	50                   	push   eax
c00126a7:	e8 ca ff ff ff       	call   c0012676 <Dbg::logs(char*)>
c00126ac:	83 c4 20             	add    esp,0x20
c00126af:	c3                   	ret    

c00126b0 <Dbg::logWriteIntBase(unsigned int, int)>:
c00126b0:	83 ec 10             	sub    esp,0x10
c00126b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00126b7:	8d 44 24 08          	lea    eax,[esp+0x8]
c00126bb:	50                   	push   eax
c00126bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126c0:	e8 41 ff ff ff       	call   c0012606 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00126c5:	50                   	push   eax
c00126c6:	e8 ab ff ff ff       	call   c0012676 <Dbg::logs(char*)>
c00126cb:	83 c4 20             	add    esp,0x20
c00126ce:	c3                   	ret    

c00126cf <Dbg::kprintf(char const*, ...)>:
c00126cf:	55                   	push   ebp
c00126d0:	57                   	push   edi
c00126d1:	56                   	push   esi
c00126d2:	53                   	push   ebx
c00126d3:	83 ec 0c             	sub    esp,0xc
c00126d6:	8d 44 24 24          	lea    eax,[esp+0x24]
c00126da:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00126de:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00126e2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00126e5:	84 c0                	test   al,al
c00126e7:	74 4a                	je     c0012733 <Dbg::kprintf(char const*, ...)+0x64>
c00126e9:	31 db                	xor    ebx,ebx
c00126eb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00126ee:	3c 25                	cmp    al,0x25
c00126f0:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00126f3:	0f 85 e4 00 00 00    	jne    c00127dd <Dbg::kprintf(char const*, ...)+0x10e>
c00126f9:	83 c3 02             	add    ebx,0x2
c00126fc:	8a 07                	mov    al,BYTE PTR [edi]
c00126fe:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012701:	83 e8 25             	sub    eax,0x25
c0012704:	3c 53                	cmp    al,0x53
c0012706:	0f 87 ba 00 00 00    	ja     c00127c6 <Dbg::kprintf(char const*, ...)+0xf7>
c001270c:	0f b6 c0             	movzx  eax,al
c001270f:	ff 24 85 88 a7 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5878]
c0012716:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001271a:	89 c8                	mov    eax,ecx
c001271c:	83 c1 04             	add    ecx,0x4
c001271f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012723:	ff 30                	push   DWORD PTR [eax]
c0012725:	e8 69 ff ff ff       	call   c0012693 <Dbg::logWriteInt(unsigned int)>
c001272a:	5f                   	pop    edi
c001272b:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001272f:	84 c0                	test   al,al
c0012731:	75 b8                	jne    c00126eb <Dbg::kprintf(char const*, ...)+0x1c>
c0012733:	83 c4 0c             	add    esp,0xc
c0012736:	5b                   	pop    ebx
c0012737:	5e                   	pop    esi
c0012738:	5f                   	pop    edi
c0012739:	5d                   	pop    ebp
c001273a:	c3                   	ret    
c001273b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001273f:	89 c8                	mov    eax,ecx
c0012741:	83 c1 04             	add    ecx,0x4
c0012744:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012748:	ff 30                	push   DWORD PTR [eax]
c001274a:	e8 27 ff ff ff       	call   c0012676 <Dbg::logs(char*)>
c001274f:	58                   	pop    eax
c0012750:	eb d9                	jmp    c001272b <Dbg::kprintf(char const*, ...)+0x5c>
c0012752:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012756:	89 d0                	mov    eax,edx
c0012758:	83 c2 04             	add    edx,0x4
c001275b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001275f:	ff 30                	push   DWORD PTR [eax]
c0012761:	e8 2d ff ff ff       	call   c0012693 <Dbg::logWriteInt(unsigned int)>
c0012766:	58                   	pop    eax
c0012767:	eb c2                	jmp    c001272b <Dbg::kprintf(char const*, ...)+0x5c>
c0012769:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001276d:	89 d0                	mov    eax,edx
c001276f:	83 c2 04             	add    edx,0x4
c0012772:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012775:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012779:	50                   	push   eax
c001277a:	e8 e0 fe ff ff       	call   c001265f <Dbg::logc(char)>
c001277f:	58                   	pop    eax
c0012780:	eb a9                	jmp    c001272b <Dbg::kprintf(char const*, ...)+0x5c>
c0012782:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012786:	89 c8                	mov    eax,ecx
c0012788:	83 c1 04             	add    ecx,0x4
c001278b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001278f:	6a 10                	push   0x10
c0012791:	ff 30                	push   DWORD PTR [eax]
c0012793:	e8 18 ff ff ff       	call   c00126b0 <Dbg::logWriteIntBase(unsigned int, int)>
c0012798:	59                   	pop    ecx
c0012799:	5f                   	pop    edi
c001279a:	eb 8f                	jmp    c001272b <Dbg::kprintf(char const*, ...)+0x5c>
c001279c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00127a0:	89 d0                	mov    eax,edx
c00127a2:	83 c2 08             	add    edx,0x8
c00127a5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00127a9:	6a 10                	push   0x10
c00127ab:	ff 30                	push   DWORD PTR [eax]
c00127ad:	e8 fe fe ff ff       	call   c00126b0 <Dbg::logWriteIntBase(unsigned int, int)>
c00127b2:	58                   	pop    eax
c00127b3:	5a                   	pop    edx
c00127b4:	e9 72 ff ff ff       	jmp    c001272b <Dbg::kprintf(char const*, ...)+0x5c>
c00127b9:	6a 25                	push   0x25
c00127bb:	e8 9f fe ff ff       	call   c001265f <Dbg::logc(char)>
c00127c0:	58                   	pop    eax
c00127c1:	e9 65 ff ff ff       	jmp    c001272b <Dbg::kprintf(char const*, ...)+0x5c>
c00127c6:	6a 25                	push   0x25
c00127c8:	e8 92 fe ff ff       	call   c001265f <Dbg::logc(char)>
c00127cd:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00127d0:	50                   	push   eax
c00127d1:	e8 89 fe ff ff       	call   c001265f <Dbg::logc(char)>
c00127d6:	5a                   	pop    edx
c00127d7:	59                   	pop    ecx
c00127d8:	e9 4e ff ff ff       	jmp    c001272b <Dbg::kprintf(char const*, ...)+0x5c>
c00127dd:	50                   	push   eax
c00127de:	89 eb                	mov    ebx,ebp
c00127e0:	e8 7a fe ff ff       	call   c001265f <Dbg::logc(char)>
c00127e5:	89 fd                	mov    ebp,edi
c00127e7:	58                   	pop    eax
c00127e8:	e9 3e ff ff ff       	jmp    c001272b <Dbg::kprintf(char const*, ...)+0x5c>
c00127ed:	90                   	nop

c00127ee <File::read(unsigned long long, void*, int*)>:
c00127ee:	53                   	push   ebx
c00127ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127f3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00127f7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00127fe:	3c 19                	cmp    al,0x19
c0012800:	77 35                	ja     c0012837 <File::read(unsigned long long, void*, int*)+0x49>
c0012802:	8b 04 85 c0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2040]
c0012809:	85 c0                	test   eax,eax
c001280b:	74 2a                	je     c0012837 <File::read(unsigned long long, void*, int*)+0x49>
c001280d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012813:	85 c0                	test   eax,eax
c0012815:	74 20                	je     c0012837 <File::read(unsigned long long, void*, int*)+0x49>
c0012817:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001281b:	74 21                	je     c001283e <File::read(unsigned long long, void*, int*)+0x50>
c001281d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001281f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012823:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012829:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001282d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012831:	5b                   	pop    ebx
c0012832:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012835:	ff e0                	jmp    eax
c0012837:	b8 0b 00 00 00       	mov    eax,0xb
c001283c:	eb 05                	jmp    c0012843 <File::read(unsigned long long, void*, int*)+0x55>
c001283e:	b8 05 00 00 00       	mov    eax,0x5
c0012843:	5b                   	pop    ebx
c0012844:	c3                   	ret    
c0012845:	90                   	nop

c0012846 <File::write(unsigned long long, void*, int*)>:
c0012846:	53                   	push   ebx
c0012847:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001284b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001284f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012856:	3c 19                	cmp    al,0x19
c0012858:	77 35                	ja     c001288f <File::write(unsigned long long, void*, int*)+0x49>
c001285a:	8b 04 85 c0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2040]
c0012861:	85 c0                	test   eax,eax
c0012863:	74 2a                	je     c001288f <File::write(unsigned long long, void*, int*)+0x49>
c0012865:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001286b:	85 c0                	test   eax,eax
c001286d:	74 20                	je     c001288f <File::write(unsigned long long, void*, int*)+0x49>
c001286f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012873:	74 21                	je     c0012896 <File::write(unsigned long long, void*, int*)+0x50>
c0012875:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012877:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001287b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012889:	5b                   	pop    ebx
c001288a:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001288d:	ff e0                	jmp    eax
c001288f:	b8 0b 00 00 00       	mov    eax,0xb
c0012894:	eb 05                	jmp    c001289b <File::write(unsigned long long, void*, int*)+0x55>
c0012896:	b8 05 00 00 00       	mov    eax,0x5
c001289b:	5b                   	pop    ebx
c001289c:	c3                   	ret    
c001289d:	90                   	nop

c001289e <Directory::read(unsigned long long, void*, int*)>:
c001289e:	53                   	push   ebx
c001289f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00128a3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00128a7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00128ae:	3c 19                	cmp    al,0x19
c00128b0:	77 35                	ja     c00128e7 <Directory::read(unsigned long long, void*, int*)+0x49>
c00128b2:	8b 04 85 c0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2040]
c00128b9:	85 c0                	test   eax,eax
c00128bb:	74 2a                	je     c00128e7 <Directory::read(unsigned long long, void*, int*)+0x49>
c00128bd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00128c3:	85 c0                	test   eax,eax
c00128c5:	74 20                	je     c00128e7 <Directory::read(unsigned long long, void*, int*)+0x49>
c00128c7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00128cb:	74 21                	je     c00128ee <Directory::read(unsigned long long, void*, int*)+0x50>
c00128cd:	8b 08                	mov    ecx,DWORD PTR [eax]
c00128cf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00128d3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00128d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00128dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00128e1:	5b                   	pop    ebx
c00128e2:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00128e5:	ff e0                	jmp    eax
c00128e7:	b8 0b 00 00 00       	mov    eax,0xb
c00128ec:	eb 05                	jmp    c00128f3 <Directory::read(unsigned long long, void*, int*)+0x55>
c00128ee:	b8 05 00 00 00       	mov    eax,0x5
c00128f3:	5b                   	pop    ebx
c00128f4:	c3                   	ret    
c00128f5:	90                   	nop

c00128f6 <Directory::write(unsigned long long, void*, int*)>:
c00128f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128fa:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012901:	b8 0b 00 00 00       	mov    eax,0xb
c0012906:	80 fa 19             	cmp    dl,0x19
c0012909:	77 18                	ja     c0012923 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001290b:	8b 14 95 c0 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2040]
c0012912:	85 d2                	test   edx,edx
c0012914:	74 0d                	je     c0012923 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012916:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c001291d:	19 c0                	sbb    eax,eax
c001291f:	83 e0 0a             	and    eax,0xa
c0012922:	40                   	inc    eax
c0012923:	c3                   	ret    

c0012924 <File::isAtty()>:
c0012924:	31 c0                	xor    eax,eax
c0012926:	c3                   	ret    
c0012927:	90                   	nop

c0012928 <Directory::isAtty()>:
c0012928:	31 c0                	xor    eax,eax
c001292a:	c3                   	ret    
c001292b:	90                   	nop

c001292c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001292c:	b8 0a 00 00 00       	mov    eax,0xa
c0012931:	c3                   	ret    

c0012932 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012932:	b8 0a 00 00 00       	mov    eax,0xa
c0012937:	c3                   	ret    

c0012938 <Filesystem::getFileFirstSector(char const*)>:
c0012938:	31 c0                	xor    eax,eax
c001293a:	31 d2                	xor    edx,edx
c001293c:	c3                   	ret    
c001293d:	90                   	nop

c001293e <File::~File()>:
c001293e:	83 ec 0c             	sub    esp,0xc
c0012941:	ba 48 a9 02 c0       	mov    edx,0xc002a948
c0012946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001294a:	89 10                	mov    DWORD PTR [eax],edx
c001294c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012950:	83 ec 0c             	sub    esp,0xc
c0012953:	50                   	push   eax
c0012954:	e8 65 e6 ff ff       	call   c0010fbe <UnixFile::~UnixFile()>
c0012959:	83 c4 10             	add    esp,0x10
c001295c:	90                   	nop
c001295d:	83 c4 0c             	add    esp,0xc
c0012960:	c3                   	ret    
c0012961:	90                   	nop

c0012962 <File::~File()>:
c0012962:	83 ec 0c             	sub    esp,0xc
c0012965:	83 ec 0c             	sub    esp,0xc
c0012968:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001296c:	e8 cd ff ff ff       	call   c001293e <File::~File()>
c0012971:	83 c4 10             	add    esp,0x10
c0012974:	83 ec 08             	sub    esp,0x8
c0012977:	68 14 01 00 00       	push   0x114
c001297c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012980:	e8 72 fc ff ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0012985:	83 c4 10             	add    esp,0x10
c0012988:	83 c4 0c             	add    esp,0xc
c001298b:	c3                   	ret    

c001298c <Directory::~Directory()>:
c001298c:	83 ec 0c             	sub    esp,0xc
c001298f:	ba 64 a9 02 c0       	mov    edx,0xc002a964
c0012994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012998:	89 10                	mov    DWORD PTR [eax],edx
c001299a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001299e:	83 ec 0c             	sub    esp,0xc
c00129a1:	50                   	push   eax
c00129a2:	e8 17 e6 ff ff       	call   c0010fbe <UnixFile::~UnixFile()>
c00129a7:	83 c4 10             	add    esp,0x10
c00129aa:	90                   	nop
c00129ab:	83 c4 0c             	add    esp,0xc
c00129ae:	c3                   	ret    
c00129af:	90                   	nop

c00129b0 <Directory::~Directory()>:
c00129b0:	83 ec 0c             	sub    esp,0xc
c00129b3:	83 ec 0c             	sub    esp,0xc
c00129b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129ba:	e8 cd ff ff ff       	call   c001298c <Directory::~Directory()>
c00129bf:	83 c4 10             	add    esp,0x10
c00129c2:	83 ec 08             	sub    esp,0x8
c00129c5:	68 14 01 00 00       	push   0x114
c00129ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129ce:	e8 24 fc ff ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c00129d3:	83 c4 10             	add    esp,0x10
c00129d6:	83 c4 0c             	add    esp,0xc
c00129d9:	c3                   	ret    

c00129da <Filesystem::Filesystem()>:
c00129da:	ba e0 a8 02 c0       	mov    edx,0xc002a8e0
c00129df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129e3:	89 10                	mov    DWORD PTR [eax],edx
c00129e5:	8b 15 34 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db34
c00129eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129ef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00129f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129f6:	a3 34 db 02 c0       	mov    ds:0xc002db34,eax
c00129fb:	90                   	nop
c00129fc:	c3                   	ret    
c00129fd:	90                   	nop

c00129fe <Filesystem::~Filesystem()>:
c00129fe:	ba e0 a8 02 c0       	mov    edx,0xc002a8e0
c0012a03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a07:	89 10                	mov    DWORD PTR [eax],edx
c0012a09:	90                   	nop
c0012a0a:	c3                   	ret    
c0012a0b:	90                   	nop

c0012a0c <Filesystem::~Filesystem()>:
c0012a0c:	83 ec 0c             	sub    esp,0xc
c0012a0f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012a13:	e8 e6 ff ff ff       	call   c00129fe <Filesystem::~Filesystem()>
c0012a18:	83 c4 04             	add    esp,0x4
c0012a1b:	83 ec 08             	sub    esp,0x8
c0012a1e:	6a 08                	push   0x8
c0012a20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a24:	e8 ce fb ff ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0012a29:	83 c4 10             	add    esp,0x10
c0012a2c:	83 c4 0c             	add    esp,0xc
c0012a2f:	c3                   	ret    

c0012a30 <Fs::getcwd(Process*, char*, int)>:
c0012a30:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a34:	31 c0                	xor    eax,eax
c0012a36:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012a39:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012a3d:	7d 15                	jge    c0012a54 <Fs::getcwd(Process*, char*, int)+0x24>
c0012a3f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012a43:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012a4a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012a4d:	84 c9                	test   cl,cl
c0012a4f:	74 06                	je     c0012a57 <Fs::getcwd(Process*, char*, int)+0x27>
c0012a51:	40                   	inc    eax
c0012a52:	eb e2                	jmp    c0012a36 <Fs::getcwd(Process*, char*, int)+0x6>
c0012a54:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012a57:	31 c0                	xor    eax,eax
c0012a59:	c3                   	ret    

c0012a5a <Fs::initVFS()>:
c0012a5a:	83 ec 18             	sub    esp,0x18
c0012a5d:	6a 08                	push   0x8
c0012a5f:	e8 35 cb ff ff       	call   c000f599 <malloc>
c0012a64:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a67:	e8 d2 de 00 00       	call   c002093e <FAT::FAT()>
c0012a6c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012a73:	e8 21 cb ff ff       	call   c000f599 <malloc>
c0012a78:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a7b:	e8 ca f0 00 00       	call   c0021b4a <ISO9660::ISO9660()>
c0012a80:	83 c4 1c             	add    esp,0x1c
c0012a83:	c3                   	ret    

c0012a84 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012a84:	55                   	push   ebp
c0012a85:	57                   	push   edi
c0012a86:	56                   	push   esi
c0012a87:	53                   	push   ebx
c0012a88:	81 ec 10 04 00 00    	sub    esp,0x410
c0012a8e:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012a95:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012a9c:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012aa3:	68 00 04 00 00       	push   0x400
c0012aa8:	6a 00                	push   0x0
c0012aaa:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012aae:	56                   	push   esi
c0012aaf:	e8 9c dc fe ff       	call   c0000750 <memset>
c0012ab4:	83 c4 10             	add    esp,0x10
c0012ab7:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012abb:	75 0b                	jne    c0012ac8 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012abd:	50                   	push   eax
c0012abe:	50                   	push   eax
c0012abf:	57                   	push   edi
c0012ac0:	56                   	push   esi
c0012ac1:	e8 46 dd fe ff       	call   c000080c <strcpy>
c0012ac6:	eb 41                	jmp    c0012b09 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012ac8:	8a 07                	mov    al,BYTE PTR [edi]
c0012aca:	3c 5c                	cmp    al,0x5c
c0012acc:	74 04                	je     c0012ad2 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012ace:	3c 2f                	cmp    al,0x2f
c0012ad0:	75 18                	jne    c0012aea <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012ad2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012ad5:	3c 60                	cmp    al,0x60
c0012ad7:	7e 03                	jle    c0012adc <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012ad9:	83 e8 20             	sub    eax,0x20
c0012adc:	88 04 24             	mov    BYTE PTR [esp],al
c0012adf:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012ae6:	50                   	push   eax
c0012ae7:	50                   	push   eax
c0012ae8:	eb 18                	jmp    c0012b02 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012aea:	50                   	push   eax
c0012aeb:	50                   	push   eax
c0012aec:	55                   	push   ebp
c0012aed:	56                   	push   esi
c0012aee:	e8 19 dd fe ff       	call   c000080c <strcpy>
c0012af3:	5a                   	pop    edx
c0012af4:	59                   	pop    ecx
c0012af5:	68 ca bb 02 c0       	push   0xc002bbca
c0012afa:	56                   	push   esi
c0012afb:	e8 4c de fe ff       	call   c000094c <strcat>
c0012b00:	5d                   	pop    ebp
c0012b01:	58                   	pop    eax
c0012b02:	57                   	push   edi
c0012b03:	56                   	push   esi
c0012b04:	e8 43 de fe ff       	call   c000094c <strcat>
c0012b09:	83 c4 10             	add    esp,0x10
c0012b0c:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012b0f:	3c 60                	cmp    al,0x60
c0012b11:	7e 03                	jle    c0012b16 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012b13:	83 e8 20             	sub    eax,0x20
c0012b16:	88 04 24             	mov    BYTE PTR [esp],al
c0012b19:	88 03                	mov    BYTE PTR [ebx],al
c0012b1b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012b22:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012b28:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012b2c:	bf 03 00 00 00       	mov    edi,0x3
c0012b31:	b8 03 00 00 00       	mov    eax,0x3
c0012b36:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012b39:	84 d2                	test   dl,dl
c0012b3b:	0f 84 91 00 00 00    	je     c0012bd2 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012b41:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012b44:	80 fa 5c             	cmp    dl,0x5c
c0012b47:	74 05                	je     c0012b4e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012b49:	80 fa 2f             	cmp    dl,0x2f
c0012b4c:	75 12                	jne    c0012b60 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012b4e:	89 c5                	mov    ebp,eax
c0012b50:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012b55:	74 09                	je     c0012b60 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012b57:	40                   	inc    eax
c0012b58:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012b5c:	89 cf                	mov    edi,ecx
c0012b5e:	eb d6                	jmp    c0012b36 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012b60:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012b65:	75 5b                	jne    c0012bc2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012b67:	80 fa 2e             	cmp    dl,0x2e
c0012b6a:	75 56                	jne    c0012bc2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012b6c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012b70:	74 19                	je     c0012b8b <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012b72:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012b77:	74 53                	je     c0012bcc <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012b79:	89 f9                	mov    ecx,edi
c0012b7b:	41                   	inc    ecx
c0012b7c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012b7f:	80 fa 2f             	cmp    dl,0x2f
c0012b82:	74 f7                	je     c0012b7b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012b84:	80 fa 5c             	cmp    dl,0x5c
c0012b87:	74 f2                	je     c0012b7b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012b89:	eb d1                	jmp    c0012b5c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b8b:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012b90:	74 3a                	je     c0012bcc <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012b92:	83 f8 03             	cmp    eax,0x3
c0012b95:	74 c5                	je     c0012b5c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b97:	41                   	inc    ecx
c0012b98:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012b9b:	80 fa 2f             	cmp    dl,0x2f
c0012b9e:	74 f7                	je     c0012b97 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012ba0:	80 fa 5c             	cmp    dl,0x5c
c0012ba3:	74 f2                	je     c0012b97 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012ba5:	48                   	dec    eax
c0012ba6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012baa:	75 06                	jne    c0012bb2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012bac:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012bb0:	eb f3                	jmp    c0012ba5 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012bb2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012bb6:	74 07                	je     c0012bbf <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012bb8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012bbc:	48                   	dec    eax
c0012bbd:	eb f3                	jmp    c0012bb2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012bbf:	40                   	inc    eax
c0012bc0:	eb 9a                	jmp    c0012b5c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bc2:	80 fa 2f             	cmp    dl,0x2f
c0012bc5:	74 95                	je     c0012b5c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bc7:	80 fa 5c             	cmp    dl,0x5c
c0012bca:	74 90                	je     c0012b5c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bcc:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012bcf:	40                   	inc    eax
c0012bd0:	eb 8a                	jmp    c0012b5c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bd2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012bd6:	83 ec 0c             	sub    esp,0xc
c0012bd9:	53                   	push   ebx
c0012bda:	e8 8d db fe ff       	call   c000076c <strlen>
c0012bdf:	83 c4 10             	add    esp,0x10
c0012be2:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012be7:	75 26                	jne    c0012c0f <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012be9:	83 ec 0c             	sub    esp,0xc
c0012bec:	53                   	push   ebx
c0012bed:	e8 7a db fe ff       	call   c000076c <strlen>
c0012bf2:	83 c4 10             	add    esp,0x10
c0012bf5:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012bfa:	74 26                	je     c0012c22 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012bfc:	83 ec 0c             	sub    esp,0xc
c0012bff:	53                   	push   ebx
c0012c00:	e8 67 db fe ff       	call   c000076c <strlen>
c0012c05:	83 c4 10             	add    esp,0x10
c0012c08:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012c0d:	eb c7                	jmp    c0012bd6 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012c0f:	83 ec 0c             	sub    esp,0xc
c0012c12:	53                   	push   ebx
c0012c13:	e8 54 db fe ff       	call   c000076c <strlen>
c0012c18:	83 c4 10             	add    esp,0x10
c0012c1b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012c20:	74 c7                	je     c0012be9 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012c22:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012c28:	5b                   	pop    ebx
c0012c29:	5e                   	pop    esi
c0012c2a:	5f                   	pop    edi
c0012c2b:	5d                   	pop    ebp
c0012c2c:	c3                   	ret    
c0012c2d:	90                   	nop

c0012c2e <File::File(char const*, Process*)>:
c0012c2e:	83 ec 0c             	sub    esp,0xc
c0012c31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c35:	83 ec 08             	sub    esp,0x8
c0012c38:	6a 00                	push   0x0
c0012c3a:	50                   	push   eax
c0012c3b:	e8 9c e1 ff ff       	call   c0010ddc <UnixFile::UnixFile(int)>
c0012c40:	83 c4 10             	add    esp,0x10
c0012c43:	ba 48 a9 02 c0       	mov    edx,0xc002a948
c0012c48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c4c:	89 10                	mov    DWORD PTR [eax],edx
c0012c4e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c52:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012c58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c5c:	83 c0 0d             	add    eax,0xd
c0012c5f:	83 ec 04             	sub    esp,0x4
c0012c62:	52                   	push   edx
c0012c63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c67:	50                   	push   eax
c0012c68:	e8 17 fe ff ff       	call   c0012a84 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012c6d:	83 c4 10             	add    esp,0x10
c0012c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c74:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012c77:	8d 50 bf             	lea    edx,[eax-0x41]
c0012c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c7e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c88:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012c8c:	90                   	nop
c0012c8d:	83 c4 0c             	add    esp,0xc
c0012c90:	c3                   	ret    
c0012c91:	90                   	nop

c0012c92 <File::open(FileOpenMode)>:
c0012c92:	53                   	push   ebx
c0012c93:	b8 0b 00 00 00       	mov    eax,0xb
c0012c98:	83 ec 08             	sub    esp,0x8
c0012c9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012c9f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012ca6:	80 fa 19             	cmp    dl,0x19
c0012ca9:	77 40                	ja     c0012ceb <File::open(FileOpenMode)+0x59>
c0012cab:	8b 14 95 c0 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2040]
c0012cb2:	85 d2                	test   edx,edx
c0012cb4:	74 35                	je     c0012ceb <File::open(FileOpenMode)+0x59>
c0012cb6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012cbc:	85 d2                	test   edx,edx
c0012cbe:	74 2b                	je     c0012ceb <File::open(FileOpenMode)+0x59>
c0012cc0:	b8 06 00 00 00       	mov    eax,0x6
c0012cc5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012cc9:	75 20                	jne    c0012ceb <File::open(FileOpenMode)+0x59>
c0012ccb:	8b 02                	mov    eax,DWORD PTR [edx]
c0012ccd:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012cd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012cd7:	51                   	push   ecx
c0012cd8:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012cdb:	51                   	push   ecx
c0012cdc:	52                   	push   edx
c0012cdd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012ce0:	83 c4 10             	add    esp,0x10
c0012ce3:	85 c0                	test   eax,eax
c0012ce5:	75 04                	jne    c0012ceb <File::open(FileOpenMode)+0x59>
c0012ce7:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012ceb:	83 c4 08             	add    esp,0x8
c0012cee:	5b                   	pop    ebx
c0012cef:	c3                   	ret    

c0012cf0 <File::close()>:
c0012cf0:	53                   	push   ebx
c0012cf1:	b8 0b 00 00 00       	mov    eax,0xb
c0012cf6:	83 ec 08             	sub    esp,0x8
c0012cf9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012cfd:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d04:	80 fa 19             	cmp    dl,0x19
c0012d07:	77 41                	ja     c0012d4a <File::close()+0x5a>
c0012d09:	8b 1c 95 c0 df 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2040]
c0012d10:	85 db                	test   ebx,ebx
c0012d12:	74 36                	je     c0012d4a <File::close()+0x5a>
c0012d14:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012d1b:	74 2d                	je     c0012d4a <File::close()+0x5a>
c0012d1d:	b8 05 00 00 00       	mov    eax,0x5
c0012d22:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d26:	74 22                	je     c0012d4a <File::close()+0x5a>
c0012d28:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012d2c:	8b 04 95 c0 df 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2040]
c0012d33:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d39:	53                   	push   ebx
c0012d3a:	53                   	push   ebx
c0012d3b:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d3d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d43:	50                   	push   eax
c0012d44:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012d47:	83 c4 10             	add    esp,0x10
c0012d4a:	83 c4 08             	add    esp,0x8
c0012d4d:	5b                   	pop    ebx
c0012d4e:	c3                   	ret    
c0012d4f:	90                   	nop

c0012d50 <File::seek(unsigned long long)>:
c0012d50:	56                   	push   esi
c0012d51:	53                   	push   ebx
c0012d52:	b8 0b 00 00 00       	mov    eax,0xb
c0012d57:	51                   	push   ecx
c0012d58:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012d5c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012d60:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012d67:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012d6b:	80 fa 19             	cmp    dl,0x19
c0012d6e:	77 31                	ja     c0012da1 <File::seek(unsigned long long)+0x51>
c0012d70:	8b 14 95 c0 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2040]
c0012d77:	85 d2                	test   edx,edx
c0012d79:	74 26                	je     c0012da1 <File::seek(unsigned long long)+0x51>
c0012d7b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d81:	85 d2                	test   edx,edx
c0012d83:	74 1c                	je     c0012da1 <File::seek(unsigned long long)+0x51>
c0012d85:	b8 05 00 00 00       	mov    eax,0x5
c0012d8a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012d8e:	74 11                	je     c0012da1 <File::seek(unsigned long long)+0x51>
c0012d90:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d92:	53                   	push   ebx
c0012d93:	51                   	push   ecx
c0012d94:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012d9a:	52                   	push   edx
c0012d9b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012d9e:	83 c4 10             	add    esp,0x10
c0012da1:	5a                   	pop    edx
c0012da2:	5b                   	pop    ebx
c0012da3:	5e                   	pop    esi
c0012da4:	c3                   	ret    
c0012da5:	90                   	nop

c0012da6 <File::tell(unsigned long long*)>:
c0012da6:	83 ec 0c             	sub    esp,0xc
c0012da9:	b8 0b 00 00 00       	mov    eax,0xb
c0012dae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012db2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012db9:	80 fa 19             	cmp    dl,0x19
c0012dbc:	77 34                	ja     c0012df2 <File::tell(unsigned long long*)+0x4c>
c0012dbe:	8b 14 95 c0 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2040]
c0012dc5:	85 d2                	test   edx,edx
c0012dc7:	74 29                	je     c0012df2 <File::tell(unsigned long long*)+0x4c>
c0012dc9:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012dcf:	85 d2                	test   edx,edx
c0012dd1:	74 1f                	je     c0012df2 <File::tell(unsigned long long*)+0x4c>
c0012dd3:	b8 05 00 00 00       	mov    eax,0x5
c0012dd8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012ddc:	74 14                	je     c0012df2 <File::tell(unsigned long long*)+0x4c>
c0012dde:	50                   	push   eax
c0012ddf:	8b 02                	mov    eax,DWORD PTR [edx]
c0012de1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012de5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012deb:	52                   	push   edx
c0012dec:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012def:	83 c4 10             	add    esp,0x10
c0012df2:	83 c4 0c             	add    esp,0xc
c0012df5:	c3                   	ret    

c0012df6 <File::rewind()>:
c0012df6:	83 ec 10             	sub    esp,0x10
c0012df9:	6a 00                	push   0x0
c0012dfb:	6a 00                	push   0x0
c0012dfd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e01:	e8 4a ff ff ff       	call   c0012d50 <File::seek(unsigned long long)>
c0012e06:	83 c4 1c             	add    esp,0x1c
c0012e09:	c3                   	ret    

c0012e0a <File::unlink()>:
c0012e0a:	83 ec 0c             	sub    esp,0xc
c0012e0d:	b8 0b 00 00 00       	mov    eax,0xb
c0012e12:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e16:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e1d:	80 f9 19             	cmp    cl,0x19
c0012e20:	77 2f                	ja     c0012e51 <File::unlink()+0x47>
c0012e22:	8b 0c 8d c0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2040]
c0012e29:	85 c9                	test   ecx,ecx
c0012e2b:	74 24                	je     c0012e51 <File::unlink()+0x47>
c0012e2d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e33:	85 c9                	test   ecx,ecx
c0012e35:	74 1a                	je     c0012e51 <File::unlink()+0x47>
c0012e37:	b8 06 00 00 00       	mov    eax,0x6
c0012e3c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e40:	75 0f                	jne    c0012e51 <File::unlink()+0x47>
c0012e42:	83 c2 0d             	add    edx,0xd
c0012e45:	50                   	push   eax
c0012e46:	50                   	push   eax
c0012e47:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e49:	52                   	push   edx
c0012e4a:	51                   	push   ecx
c0012e4b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012e4e:	83 c4 10             	add    esp,0x10
c0012e51:	83 c4 0c             	add    esp,0xc
c0012e54:	c3                   	ret    
c0012e55:	90                   	nop

c0012e56 <File::rename(char const*)>:
c0012e56:	83 ec 0c             	sub    esp,0xc
c0012e59:	b8 0b 00 00 00       	mov    eax,0xb
c0012e5e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e62:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e69:	80 f9 19             	cmp    cl,0x19
c0012e6c:	77 32                	ja     c0012ea0 <File::rename(char const*)+0x4a>
c0012e6e:	8b 0c 8d c0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2040]
c0012e75:	85 c9                	test   ecx,ecx
c0012e77:	74 27                	je     c0012ea0 <File::rename(char const*)+0x4a>
c0012e79:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e7f:	85 c9                	test   ecx,ecx
c0012e81:	74 1d                	je     c0012ea0 <File::rename(char const*)+0x4a>
c0012e83:	b8 06 00 00 00       	mov    eax,0x6
c0012e88:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e8c:	75 12                	jne    c0012ea0 <File::rename(char const*)+0x4a>
c0012e8e:	83 c2 0d             	add    edx,0xd
c0012e91:	50                   	push   eax
c0012e92:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e94:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e98:	52                   	push   edx
c0012e99:	51                   	push   ecx
c0012e9a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012e9d:	83 c4 10             	add    esp,0x10
c0012ea0:	83 c4 0c             	add    esp,0xc
c0012ea3:	c3                   	ret    

c0012ea4 <File::chfatattr(unsigned char, unsigned char)>:
c0012ea4:	57                   	push   edi
c0012ea5:	b8 0b 00 00 00       	mov    eax,0xb
c0012eaa:	56                   	push   esi
c0012eab:	53                   	push   ebx
c0012eac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012eb0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012eb4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ebb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012ebf:	80 f9 19             	cmp    cl,0x19
c0012ec2:	77 37                	ja     c0012efb <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012ec4:	8b 0c 8d c0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2040]
c0012ecb:	85 c9                	test   ecx,ecx
c0012ecd:	74 2c                	je     c0012efb <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012ecf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ed5:	85 c9                	test   ecx,ecx
c0012ed7:	74 22                	je     c0012efb <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012ed9:	b8 06 00 00 00       	mov    eax,0x6
c0012ede:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ee2:	75 17                	jne    c0012efb <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012ee4:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012ee6:	89 f0                	mov    eax,esi
c0012ee8:	83 c2 0d             	add    edx,0xd
c0012eeb:	0f b6 f0             	movzx  esi,al
c0012eee:	0f b6 db             	movzx  ebx,bl
c0012ef1:	56                   	push   esi
c0012ef2:	53                   	push   ebx
c0012ef3:	52                   	push   edx
c0012ef4:	51                   	push   ecx
c0012ef5:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012ef8:	83 c4 10             	add    esp,0x10
c0012efb:	5b                   	pop    ebx
c0012efc:	5e                   	pop    esi
c0012efd:	5f                   	pop    edi
c0012efe:	c3                   	ret    
c0012eff:	90                   	nop

c0012f00 <File::exists()>:
c0012f00:	83 ec 0c             	sub    esp,0xc
c0012f03:	31 c0                	xor    eax,eax
c0012f05:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f09:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f10:	80 f9 19             	cmp    cl,0x19
c0012f13:	77 24                	ja     c0012f39 <File::exists()+0x39>
c0012f15:	8b 0c 8d c0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2040]
c0012f1c:	85 c9                	test   ecx,ecx
c0012f1e:	74 19                	je     c0012f39 <File::exists()+0x39>
c0012f20:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f26:	85 c9                	test   ecx,ecx
c0012f28:	74 0f                	je     c0012f39 <File::exists()+0x39>
c0012f2a:	83 c2 0d             	add    edx,0xd
c0012f2d:	50                   	push   eax
c0012f2e:	50                   	push   eax
c0012f2f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f31:	52                   	push   edx
c0012f32:	51                   	push   ecx
c0012f33:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012f36:	83 c4 10             	add    esp,0x10
c0012f39:	83 c4 0c             	add    esp,0xc
c0012f3c:	c3                   	ret    
c0012f3d:	90                   	nop

c0012f3e <File::stat(unsigned long long*, bool*)>:
c0012f3e:	56                   	push   esi
c0012f3f:	53                   	push   ebx
c0012f40:	50                   	push   eax
c0012f41:	b8 0b 00 00 00       	mov    eax,0xb
c0012f46:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f4a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012f4e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f55:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f59:	80 f9 19             	cmp    cl,0x19
c0012f5c:	77 3d                	ja     c0012f9b <File::stat(unsigned long long*, bool*)+0x5d>
c0012f5e:	8b 0c 8d c0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2040]
c0012f65:	85 c9                	test   ecx,ecx
c0012f67:	74 32                	je     c0012f9b <File::stat(unsigned long long*, bool*)+0x5d>
c0012f69:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f6f:	85 c9                	test   ecx,ecx
c0012f71:	74 28                	je     c0012f9b <File::stat(unsigned long long*, bool*)+0x5d>
c0012f73:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f75:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f79:	74 13                	je     c0012f8e <File::stat(unsigned long long*, bool*)+0x50>
c0012f7b:	83 ec 04             	sub    esp,0x4
c0012f7e:	56                   	push   esi
c0012f7f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012f85:	51                   	push   ecx
c0012f86:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012f89:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012f8c:	eb 0a                	jmp    c0012f98 <File::stat(unsigned long long*, bool*)+0x5a>
c0012f8e:	53                   	push   ebx
c0012f8f:	83 c2 0d             	add    edx,0xd
c0012f92:	56                   	push   esi
c0012f93:	52                   	push   edx
c0012f94:	51                   	push   ecx
c0012f95:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012f98:	83 c4 10             	add    esp,0x10
c0012f9b:	5a                   	pop    edx
c0012f9c:	5b                   	pop    ebx
c0012f9d:	5e                   	pop    esi
c0012f9e:	c3                   	ret    

c0012f9f <Fs::setcwd(Process*, char*)>:
c0012f9f:	55                   	push   ebp
c0012fa0:	57                   	push   edi
c0012fa1:	56                   	push   esi
c0012fa2:	53                   	push   ebx
c0012fa3:	81 ec 20 02 00 00    	sub    esp,0x220
c0012fa9:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012fb0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012fb6:	57                   	push   edi
c0012fb7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012fbe:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012fc2:	56                   	push   esi
c0012fc3:	e8 bc fa ff ff       	call   c0012a84 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012fc8:	89 34 24             	mov    DWORD PTR [esp],esi
c0012fcb:	e8 9c d7 fe ff       	call   c000076c <strlen>
c0012fd0:	83 c4 10             	add    esp,0x10
c0012fd3:	83 f8 02             	cmp    eax,0x2
c0012fd6:	77 17                	ja     c0012fef <Fs::setcwd(Process*, char*)+0x50>
c0012fd8:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012fdd:	83 e8 41             	sub    eax,0x41
c0012fe0:	83 f8 19             	cmp    eax,0x19
c0012fe3:	76 24                	jbe    c0013009 <Fs::setcwd(Process*, char*)+0x6a>
c0012fe5:	b8 03 00 00 00       	mov    eax,0x3
c0012fea:	e9 e0 00 00 00       	jmp    c00130cf <Fs::setcwd(Process*, char*)+0x130>
c0012fef:	83 ec 0c             	sub    esp,0xc
c0012ff2:	56                   	push   esi
c0012ff3:	e8 74 d7 fe ff       	call   c000076c <strlen>
c0012ff8:	83 c4 10             	add    esp,0x10
c0012ffb:	83 f8 03             	cmp    eax,0x3
c0012ffe:	75 34                	jne    c0013034 <Fs::setcwd(Process*, char*)+0x95>
c0013000:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013005:	75 2d                	jne    c0013034 <Fs::setcwd(Process*, char*)+0x95>
c0013007:	eb cf                	jmp    c0012fd8 <Fs::setcwd(Process*, char*)+0x39>
c0013009:	8b 14 85 c0 df 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2040]
c0013010:	b8 05 00 00 00       	mov    eax,0x5
c0013015:	85 d2                	test   edx,edx
c0013017:	0f 84 b2 00 00 00    	je     c00130cf <Fs::setcwd(Process*, char*)+0x130>
c001301d:	b8 06 00 00 00       	mov    eax,0x6
c0013022:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013029:	0f 85 92 00 00 00    	jne    c00130c1 <Fs::setcwd(Process*, char*)+0x122>
c001302f:	e9 9b 00 00 00       	jmp    c00130cf <Fs::setcwd(Process*, char*)+0x130>
c0013034:	83 ec 0c             	sub    esp,0xc
c0013037:	68 14 01 00 00       	push   0x114
c001303c:	e8 58 c5 ff ff       	call   c000f599 <malloc>
c0013041:	83 c4 0c             	add    esp,0xc
c0013044:	89 c3                	mov    ebx,eax
c0013046:	55                   	push   ebp
c0013047:	56                   	push   esi
c0013048:	50                   	push   eax
c0013049:	e8 e0 fb ff ff       	call   c0012c2e <File::File(char const*, Process*)>
c001304e:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013053:	83 c4 0c             	add    esp,0xc
c0013056:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001305a:	50                   	push   eax
c001305b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001305f:	50                   	push   eax
c0013060:	53                   	push   ebx
c0013061:	e8 d8 fe ff ff       	call   c0012f3e <File::stat(unsigned long long*, bool*)>
c0013066:	83 c4 10             	add    esp,0x10
c0013069:	83 f8 02             	cmp    eax,0x2
c001306c:	74 04                	je     c0013072 <Fs::setcwd(Process*, char*)+0xd3>
c001306e:	85 c0                	test   eax,eax
c0013070:	74 1c                	je     c001308e <Fs::setcwd(Process*, char*)+0xef>
c0013072:	b8 01 00 00 00       	mov    eax,0x1
c0013077:	85 db                	test   ebx,ebx
c0013079:	74 54                	je     c00130cf <Fs::setcwd(Process*, char*)+0x130>
c001307b:	83 ec 0c             	sub    esp,0xc
c001307e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013080:	53                   	push   ebx
c0013081:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013084:	83 c4 10             	add    esp,0x10
c0013087:	b8 01 00 00 00       	mov    eax,0x1
c001308c:	eb 41                	jmp    c00130cf <Fs::setcwd(Process*, char*)+0x130>
c001308e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013093:	75 1c                	jne    c00130b1 <Fs::setcwd(Process*, char*)+0x112>
c0013095:	b8 02 00 00 00       	mov    eax,0x2
c001309a:	85 db                	test   ebx,ebx
c001309c:	74 31                	je     c00130cf <Fs::setcwd(Process*, char*)+0x130>
c001309e:	83 ec 0c             	sub    esp,0xc
c00130a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00130a3:	53                   	push   ebx
c00130a4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00130a7:	83 c4 10             	add    esp,0x10
c00130aa:	b8 02 00 00 00       	mov    eax,0x2
c00130af:	eb 1e                	jmp    c00130cf <Fs::setcwd(Process*, char*)+0x130>
c00130b1:	85 db                	test   ebx,ebx
c00130b3:	74 0c                	je     c00130c1 <Fs::setcwd(Process*, char*)+0x122>
c00130b5:	83 ec 0c             	sub    esp,0xc
c00130b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00130ba:	53                   	push   ebx
c00130bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00130be:	83 c4 10             	add    esp,0x10
c00130c1:	50                   	push   eax
c00130c2:	50                   	push   eax
c00130c3:	56                   	push   esi
c00130c4:	57                   	push   edi
c00130c5:	e8 42 d7 fe ff       	call   c000080c <strcpy>
c00130ca:	83 c4 10             	add    esp,0x10
c00130cd:	31 c0                	xor    eax,eax
c00130cf:	81 c4 1c 02 00 00    	add    esp,0x21c
c00130d5:	5b                   	pop    ebx
c00130d6:	5e                   	pop    esi
c00130d7:	5f                   	pop    edi
c00130d8:	5d                   	pop    ebp
c00130d9:	c3                   	ret    

c00130da <Directory::Directory(char const*, Process*)>:
c00130da:	83 ec 0c             	sub    esp,0xc
c00130dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130e1:	83 ec 08             	sub    esp,0x8
c00130e4:	6a 00                	push   0x0
c00130e6:	50                   	push   eax
c00130e7:	e8 f0 dc ff ff       	call   c0010ddc <UnixFile::UnixFile(int)>
c00130ec:	83 c4 10             	add    esp,0x10
c00130ef:	ba 64 a9 02 c0       	mov    edx,0xc002a964
c00130f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130f8:	89 10                	mov    DWORD PTR [eax],edx
c00130fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130fe:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013108:	83 c0 0d             	add    eax,0xd
c001310b:	83 ec 04             	sub    esp,0x4
c001310e:	52                   	push   edx
c001310f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013113:	50                   	push   eax
c0013114:	e8 6b f9 ff ff       	call   c0012a84 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013119:	83 c4 10             	add    esp,0x10
c001311c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013120:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013123:	8d 50 bf             	lea    edx,[eax-0x41]
c0013126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001312a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013134:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013138:	90                   	nop
c0013139:	83 c4 0c             	add    esp,0xc
c001313c:	c3                   	ret    
c001313d:	90                   	nop

c001313e <Directory::open()>:
c001313e:	53                   	push   ebx
c001313f:	b8 0b 00 00 00       	mov    eax,0xb
c0013144:	83 ec 08             	sub    esp,0x8
c0013147:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001314b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013152:	80 fa 19             	cmp    dl,0x19
c0013155:	77 3d                	ja     c0013194 <Directory::open()+0x56>
c0013157:	8b 14 95 c0 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2040]
c001315e:	85 d2                	test   edx,edx
c0013160:	74 32                	je     c0013194 <Directory::open()+0x56>
c0013162:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013168:	85 d2                	test   edx,edx
c001316a:	74 28                	je     c0013194 <Directory::open()+0x56>
c001316c:	b8 06 00 00 00       	mov    eax,0x6
c0013171:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013175:	75 1d                	jne    c0013194 <Directory::open()+0x56>
c0013177:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001317d:	50                   	push   eax
c001317e:	8b 02                	mov    eax,DWORD PTR [edx]
c0013180:	51                   	push   ecx
c0013181:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013184:	51                   	push   ecx
c0013185:	52                   	push   edx
c0013186:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013189:	83 c4 10             	add    esp,0x10
c001318c:	85 c0                	test   eax,eax
c001318e:	75 04                	jne    c0013194 <Directory::open()+0x56>
c0013190:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013194:	83 c4 08             	add    esp,0x8
c0013197:	5b                   	pop    ebx
c0013198:	c3                   	ret    
c0013199:	90                   	nop

c001319a <Directory::close()>:
c001319a:	53                   	push   ebx
c001319b:	b8 0b 00 00 00       	mov    eax,0xb
c00131a0:	83 ec 08             	sub    esp,0x8
c00131a3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00131a7:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00131ae:	80 fa 19             	cmp    dl,0x19
c00131b1:	77 41                	ja     c00131f4 <Directory::close()+0x5a>
c00131b3:	8b 1c 95 c0 df 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2040]
c00131ba:	85 db                	test   ebx,ebx
c00131bc:	74 36                	je     c00131f4 <Directory::close()+0x5a>
c00131be:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00131c5:	74 2d                	je     c00131f4 <Directory::close()+0x5a>
c00131c7:	b8 05 00 00 00       	mov    eax,0x5
c00131cc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00131d0:	74 22                	je     c00131f4 <Directory::close()+0x5a>
c00131d2:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00131d6:	8b 04 95 c0 df 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2040]
c00131dd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00131e3:	53                   	push   ebx
c00131e4:	53                   	push   ebx
c00131e5:	8b 10                	mov    edx,DWORD PTR [eax]
c00131e7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00131ed:	50                   	push   eax
c00131ee:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00131f1:	83 c4 10             	add    esp,0x10
c00131f4:	83 c4 08             	add    esp,0x8
c00131f7:	5b                   	pop    ebx
c00131f8:	c3                   	ret    
c00131f9:	90                   	nop

c00131fa <Directory::unlink()>:
c00131fa:	83 ec 0c             	sub    esp,0xc
c00131fd:	b8 0b 00 00 00       	mov    eax,0xb
c0013202:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013206:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001320d:	80 f9 19             	cmp    cl,0x19
c0013210:	77 2f                	ja     c0013241 <Directory::unlink()+0x47>
c0013212:	8b 0c 8d c0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2040]
c0013219:	85 c9                	test   ecx,ecx
c001321b:	74 24                	je     c0013241 <Directory::unlink()+0x47>
c001321d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013223:	85 c9                	test   ecx,ecx
c0013225:	74 1a                	je     c0013241 <Directory::unlink()+0x47>
c0013227:	b8 06 00 00 00       	mov    eax,0x6
c001322c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013230:	75 0f                	jne    c0013241 <Directory::unlink()+0x47>
c0013232:	83 c2 0d             	add    edx,0xd
c0013235:	50                   	push   eax
c0013236:	50                   	push   eax
c0013237:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013239:	52                   	push   edx
c001323a:	51                   	push   ecx
c001323b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001323e:	83 c4 10             	add    esp,0x10
c0013241:	83 c4 0c             	add    esp,0xc
c0013244:	c3                   	ret    
c0013245:	90                   	nop

c0013246 <Directory::rename(char const*)>:
c0013246:	83 ec 0c             	sub    esp,0xc
c0013249:	b8 0b 00 00 00       	mov    eax,0xb
c001324e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013252:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013259:	80 f9 19             	cmp    cl,0x19
c001325c:	77 32                	ja     c0013290 <Directory::rename(char const*)+0x4a>
c001325e:	8b 0c 8d c0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2040]
c0013265:	85 c9                	test   ecx,ecx
c0013267:	74 27                	je     c0013290 <Directory::rename(char const*)+0x4a>
c0013269:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001326f:	85 c9                	test   ecx,ecx
c0013271:	74 1d                	je     c0013290 <Directory::rename(char const*)+0x4a>
c0013273:	b8 06 00 00 00       	mov    eax,0x6
c0013278:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001327c:	75 12                	jne    c0013290 <Directory::rename(char const*)+0x4a>
c001327e:	83 c2 0d             	add    edx,0xd
c0013281:	50                   	push   eax
c0013282:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013284:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013288:	52                   	push   edx
c0013289:	51                   	push   ecx
c001328a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001328d:	83 c4 10             	add    esp,0x10
c0013290:	83 c4 0c             	add    esp,0xc
c0013293:	c3                   	ret    

c0013294 <Directory::exists()>:
c0013294:	83 ec 0c             	sub    esp,0xc
c0013297:	31 c0                	xor    eax,eax
c0013299:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001329d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132a4:	80 f9 19             	cmp    cl,0x19
c00132a7:	77 24                	ja     c00132cd <Directory::exists()+0x39>
c00132a9:	8b 0c 8d c0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2040]
c00132b0:	85 c9                	test   ecx,ecx
c00132b2:	74 19                	je     c00132cd <Directory::exists()+0x39>
c00132b4:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132ba:	85 c9                	test   ecx,ecx
c00132bc:	74 0f                	je     c00132cd <Directory::exists()+0x39>
c00132be:	83 c2 0d             	add    edx,0xd
c00132c1:	50                   	push   eax
c00132c2:	50                   	push   eax
c00132c3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132c5:	52                   	push   edx
c00132c6:	51                   	push   ecx
c00132c7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00132ca:	83 c4 10             	add    esp,0x10
c00132cd:	83 c4 0c             	add    esp,0xc
c00132d0:	c3                   	ret    
c00132d1:	90                   	nop

c00132d2 <Directory::read(dirent*)>:
c00132d2:	83 ec 1c             	sub    esp,0x1c
c00132d5:	b8 0b 00 00 00       	mov    eax,0xb
c00132da:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00132de:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00132e5:	80 fa 19             	cmp    dl,0x19
c00132e8:	77 30                	ja     c001331a <Directory::read(dirent*)+0x48>
c00132ea:	8b 14 95 c0 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2040]
c00132f1:	85 d2                	test   edx,edx
c00132f3:	74 25                	je     c001331a <Directory::read(dirent*)+0x48>
c00132f5:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00132fc:	74 1c                	je     c001331a <Directory::read(dirent*)+0x48>
c00132fe:	83 ec 0c             	sub    esp,0xc
c0013301:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013303:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013307:	52                   	push   edx
c0013308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001330c:	6a 00                	push   0x0
c001330e:	68 10 01 00 00       	push   0x110
c0013313:	51                   	push   ecx
c0013314:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013317:	83 c4 20             	add    esp,0x20
c001331a:	83 c4 1c             	add    esp,0x1c
c001331d:	c3                   	ret    

c001331e <Directory::create()>:
c001331e:	83 ec 0c             	sub    esp,0xc
c0013321:	b8 0b 00 00 00       	mov    eax,0xb
c0013326:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001332a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013331:	80 f9 19             	cmp    cl,0x19
c0013334:	77 2f                	ja     c0013365 <Directory::create()+0x47>
c0013336:	8b 0c 8d c0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2040]
c001333d:	85 c9                	test   ecx,ecx
c001333f:	74 24                	je     c0013365 <Directory::create()+0x47>
c0013341:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013347:	85 c9                	test   ecx,ecx
c0013349:	74 1a                	je     c0013365 <Directory::create()+0x47>
c001334b:	b8 06 00 00 00       	mov    eax,0x6
c0013350:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013354:	75 0f                	jne    c0013365 <Directory::create()+0x47>
c0013356:	83 c2 0d             	add    edx,0xd
c0013359:	50                   	push   eax
c001335a:	50                   	push   eax
c001335b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001335d:	52                   	push   edx
c001335e:	51                   	push   ecx
c001335f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013362:	83 c4 10             	add    esp,0x10
c0013365:	83 c4 0c             	add    esp,0xc
c0013368:	c3                   	ret    
c0013369:	90                   	nop

c001336a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001336a:	b8 0a 00 00 00       	mov    eax,0xa
c001336f:	c3                   	ret    

c0013370 <Bus::Bus(char const*)>:
c0013370:	83 ec 0c             	sub    esp,0xc
c0013373:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013377:	83 ec 08             	sub    esp,0x8
c001337a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001337e:	50                   	push   eax
c001337f:	e8 88 09 00 00       	call   c0013d0c <Device::Device(char const*)>
c0013384:	83 c4 10             	add    esp,0x10
c0013387:	ba 80 a9 02 c0       	mov    edx,0xc002a980
c001338c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013390:	89 10                	mov    DWORD PTR [eax],edx
c0013392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013396:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00133a0:	90                   	nop
c00133a1:	83 c4 0c             	add    esp,0xc
c00133a4:	c3                   	ret    
c00133a5:	90                   	nop

c00133a6 <Bus::~Bus()>:
c00133a6:	83 ec 0c             	sub    esp,0xc
c00133a9:	ba 80 a9 02 c0       	mov    edx,0xc002a980
c00133ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133b2:	89 10                	mov    DWORD PTR [eax],edx
c00133b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133b8:	83 ec 0c             	sub    esp,0xc
c00133bb:	50                   	push   eax
c00133bc:	e8 15 06 00 00       	call   c00139d6 <Device::~Device()>
c00133c1:	83 c4 10             	add    esp,0x10
c00133c4:	90                   	nop
c00133c5:	83 c4 0c             	add    esp,0xc
c00133c8:	c3                   	ret    
c00133c9:	90                   	nop

c00133ca <Bus::~Bus()>:
c00133ca:	83 ec 0c             	sub    esp,0xc
c00133cd:	83 ec 0c             	sub    esp,0xc
c00133d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133d4:	e8 cd ff ff ff       	call   c00133a6 <Bus::~Bus()>
c00133d9:	83 c4 10             	add    esp,0x10
c00133dc:	83 ec 08             	sub    esp,0x8
c00133df:	68 58 01 00 00       	push   0x158
c00133e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133e8:	e8 0a f2 ff ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c00133ed:	83 c4 10             	add    esp,0x10
c00133f0:	83 c4 0c             	add    esp,0xc
c00133f3:	c3                   	ret    

c00133f4 <Buzzer::Buzzer(char const*)>:
c00133f4:	83 ec 0c             	sub    esp,0xc
c00133f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133fb:	83 ec 08             	sub    esp,0x8
c00133fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013402:	50                   	push   eax
c0013403:	e8 04 09 00 00       	call   c0013d0c <Device::Device(char const*)>
c0013408:	83 c4 10             	add    esp,0x10
c001340b:	ba ac a9 02 c0       	mov    edx,0xc002a9ac
c0013410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013414:	89 10                	mov    DWORD PTR [eax],edx
c0013416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001341a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013428:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013432:	90                   	nop
c0013433:	83 c4 0c             	add    esp,0xc
c0013436:	c3                   	ret    
c0013437:	90                   	nop

c0013438 <Buzzer::~Buzzer()>:
c0013438:	83 ec 0c             	sub    esp,0xc
c001343b:	ba ac a9 02 c0       	mov    edx,0xc002a9ac
c0013440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013444:	89 10                	mov    DWORD PTR [eax],edx
c0013446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001344a:	83 ec 0c             	sub    esp,0xc
c001344d:	50                   	push   eax
c001344e:	e8 83 05 00 00       	call   c00139d6 <Device::~Device()>
c0013453:	83 c4 10             	add    esp,0x10
c0013456:	90                   	nop
c0013457:	83 c4 0c             	add    esp,0xc
c001345a:	c3                   	ret    
c001345b:	90                   	nop

c001345c <Buzzer::~Buzzer()>:
c001345c:	83 ec 0c             	sub    esp,0xc
c001345f:	83 ec 0c             	sub    esp,0xc
c0013462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013466:	e8 cd ff ff ff       	call   c0013438 <Buzzer::~Buzzer()>
c001346b:	83 c4 10             	add    esp,0x10
c001346e:	83 ec 08             	sub    esp,0x8
c0013471:	68 5c 01 00 00       	push   0x15c
c0013476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001347a:	e8 78 f1 ff ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c001347f:	83 c4 10             	add    esp,0x10
c0013482:	83 c4 0c             	add    esp,0xc
c0013485:	c3                   	ret    

c0013486 <Buzzer::stop()>:
c0013486:	83 ec 14             	sub    esp,0x14
c0013489:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001348d:	8b 10                	mov    edx,DWORD PTR [eax]
c001348f:	6a 00                	push   0x0
c0013491:	50                   	push   eax
c0013492:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013495:	83 c4 1c             	add    esp,0x1c
c0013498:	c3                   	ret    

c0013499 <beepThread(void*)>:
c0013499:	53                   	push   ebx
c001349a:	83 ec 08             	sub    esp,0x8
c001349d:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c00134a2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00134a6:	48                   	dec    eax
c00134a7:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c00134ac:	75 01                	jne    c00134af <beepThread(void*)+0x16>
c00134ae:	fb                   	sti    
c00134af:	50                   	push   eax
c00134b0:	50                   	push   eax
c00134b1:	b8 40 42 0f 00       	mov    eax,0xf4240
c00134b6:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00134bc:	52                   	push   edx
c00134bd:	50                   	push   eax
c00134be:	e8 e2 a7 00 00       	call   c001dca5 <nanoSleep(unsigned long long)>
c00134c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00134c6:	e8 bb ff ff ff       	call   c0013486 <Buzzer::stop()>
c00134cb:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00134d3:	83 c4 18             	add    esp,0x18
c00134d6:	5b                   	pop    ebx
c00134d7:	e9 c5 a6 00 00       	jmp    c001dba1 <blockTask(TaskState)>

c00134dc <Buzzer::beep(int, int, bool)>:
c00134dc:	57                   	push   edi
c00134dd:	56                   	push   esi
c00134de:	53                   	push   ebx
c00134df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00134e3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00134e7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00134eb:	52                   	push   edx
c00134ec:	52                   	push   edx
c00134ed:	8b 06                	mov    eax,DWORD PTR [esi]
c00134ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134f3:	56                   	push   esi
c00134f4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00134f7:	83 c4 10             	add    esp,0x10
c00134fa:	89 f8                	mov    eax,edi
c00134fc:	84 c0                	test   al,al
c00134fe:	74 1f                	je     c001351f <Buzzer::beep(int, int, bool)+0x43>
c0013500:	50                   	push   eax
c0013501:	50                   	push   eax
c0013502:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013508:	99                   	cdq    
c0013509:	52                   	push   edx
c001350a:	50                   	push   eax
c001350b:	e8 95 a7 00 00       	call   c001dca5 <nanoSleep(unsigned long long)>
c0013510:	83 c4 10             	add    esp,0x10
c0013513:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013517:	5b                   	pop    ebx
c0013518:	5e                   	pop    esi
c0013519:	5f                   	pop    edi
c001351a:	e9 67 ff ff ff       	jmp    c0013486 <Buzzer::stop()>
c001351f:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013525:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001352a:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013532:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013536:	c7 44 24 14 99 34 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013499
c001353e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013542:	5b                   	pop    ebx
c0013543:	5e                   	pop    esi
c0013544:	5f                   	pop    edi
c0013545:	e9 5c a2 00 00       	jmp    c001d7a6 <Process::createThread(void (*)(void*), void*, int)>

c001354a <User::loadClockSettings(int)>:
c001354a:	53                   	push   ebx
c001354b:	83 ec 14             	sub    esp,0x14
c001354e:	68 14 01 00 00       	push   0x114
c0013553:	e8 41 c0 ff ff       	call   c000f599 <malloc>
c0013558:	83 c4 0c             	add    esp,0xc
c001355b:	89 c3                	mov    ebx,eax
c001355d:	ff 35 10 0f 03 c0    	push   DWORD PTR ds:0xc0030f10
c0013563:	68 d4 a9 02 c0       	push   0xc002a9d4
c0013568:	50                   	push   eax
c0013569:	e8 c0 f6 ff ff       	call   c0012c2e <File::File(char const*, Process*)>
c001356e:	58                   	pop    eax
c001356f:	5a                   	pop    edx
c0013570:	6a 01                	push   0x1
c0013572:	53                   	push   ebx
c0013573:	e8 1a f7 ff ff       	call   c0012c92 <File::open(FileOpenMode)>
c0013578:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001357b:	e8 70 f7 ff ff       	call   c0012cf0 <File::close()>
c0013580:	83 c4 10             	add    esp,0x10
c0013583:	85 db                	test   ebx,ebx
c0013585:	74 0f                	je     c0013596 <User::loadClockSettings(int)+0x4c>
c0013587:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013589:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001358d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013590:	83 c4 08             	add    esp,0x8
c0013593:	5b                   	pop    ebx
c0013594:	ff e0                	jmp    eax
c0013596:	83 c4 08             	add    esp,0x8
c0013599:	5b                   	pop    ebx
c001359a:	c3                   	ret    
c001359b:	90                   	nop

c001359c <Clock::Clock(char const*)>:
c001359c:	83 ec 0c             	sub    esp,0xc
c001359f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135a3:	83 ec 08             	sub    esp,0x8
c00135a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135aa:	50                   	push   eax
c00135ab:	e8 5c 07 00 00       	call   c0013d0c <Device::Device(char const*)>
c00135b0:	83 c4 10             	add    esp,0x10
c00135b3:	ba fc a9 02 c0       	mov    edx,0xc002a9fc
c00135b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135bc:	89 10                	mov    DWORD PTR [eax],edx
c00135be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135c2:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00135cc:	90                   	nop
c00135cd:	83 c4 0c             	add    esp,0xc
c00135d0:	c3                   	ret    
c00135d1:	90                   	nop

c00135d2 <Clock::~Clock()>:
c00135d2:	83 ec 0c             	sub    esp,0xc
c00135d5:	ba fc a9 02 c0       	mov    edx,0xc002a9fc
c00135da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135de:	89 10                	mov    DWORD PTR [eax],edx
c00135e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135e4:	83 ec 0c             	sub    esp,0xc
c00135e7:	50                   	push   eax
c00135e8:	e8 e9 03 00 00       	call   c00139d6 <Device::~Device()>
c00135ed:	83 c4 10             	add    esp,0x10
c00135f0:	90                   	nop
c00135f1:	83 c4 0c             	add    esp,0xc
c00135f4:	c3                   	ret    
c00135f5:	90                   	nop

c00135f6 <Clock::~Clock()>:
c00135f6:	83 ec 0c             	sub    esp,0xc
c00135f9:	83 ec 0c             	sub    esp,0xc
c00135fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013600:	e8 cd ff ff ff       	call   c00135d2 <Clock::~Clock()>
c0013605:	83 c4 10             	add    esp,0x10
c0013608:	83 ec 08             	sub    esp,0x8
c001360b:	68 58 01 00 00       	push   0x158
c0013610:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013614:	e8 de ef ff ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0013619:	83 c4 10             	add    esp,0x10
c001361c:	83 c4 0c             	add    esp,0xc
c001361f:	c3                   	ret    

c0013620 <Clock::timeInSecondsLocal()>:
c0013620:	53                   	push   ebx
c0013621:	83 ec 14             	sub    esp,0x14
c0013624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013628:	8b 10                	mov    edx,DWORD PTR [eax]
c001362a:	50                   	push   eax
c001362b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001362e:	0f b6 0d 3c db 02 c0 	movzx  ecx,BYTE PTR ds:0xc002db3c
c0013635:	03 0d 40 db 02 c0    	add    ecx,DWORD PTR ds:0xc002db40
c001363b:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013641:	89 cb                	mov    ebx,ecx
c0013643:	c1 fb 1f             	sar    ebx,0x1f
c0013646:	01 c8                	add    eax,ecx
c0013648:	11 da                	adc    edx,ebx
c001364a:	83 c4 10             	add    esp,0x10
c001364d:	31 c9                	xor    ecx,ecx
c001364f:	80 3d 3d db 02 c0 00 	cmp    BYTE PTR ds:0xc002db3d,0x0
c0013656:	74 05                	je     c001365d <Clock::timeInSecondsLocal()+0x3d>
c0013658:	b9 08 07 00 00       	mov    ecx,0x708
c001365d:	31 db                	xor    ebx,ebx
c001365f:	01 c8                	add    eax,ecx
c0013661:	11 da                	adc    edx,ebx
c0013663:	83 c4 08             	add    esp,0x8
c0013666:	5b                   	pop    ebx
c0013667:	c3                   	ret    

c0013668 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013668:	57                   	push   edi
c0013669:	56                   	push   esi
c001366a:	53                   	push   ebx
c001366b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001366f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013673:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013675:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013679:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001367c:	0f b6 05 3c db 02 c0 	movzx  eax,BYTE PTR ds:0xc002db3c
c0013683:	03 05 40 db 02 c0    	add    eax,DWORD PTR ds:0xc002db40
c0013689:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001368f:	99                   	cdq    
c0013690:	29 c6                	sub    esi,eax
c0013692:	19 d7                	sbb    edi,edx
c0013694:	89 f0                	mov    eax,esi
c0013696:	89 fa                	mov    edx,edi
c0013698:	31 f6                	xor    esi,esi
c001369a:	80 3d 3d db 02 c0 00 	cmp    BYTE PTR ds:0xc002db3d,0x0
c00136a1:	74 05                	je     c00136a8 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00136a3:	be 08 07 00 00       	mov    esi,0x708
c00136a8:	31 ff                	xor    edi,edi
c00136aa:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00136ae:	29 f0                	sub    eax,esi
c00136b0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00136b4:	19 fa                	sbb    edx,edi
c00136b6:	89 d8                	mov    eax,ebx
c00136b8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00136bc:	5b                   	pop    ebx
c00136bd:	5e                   	pop    esi
c00136be:	5f                   	pop    edi
c00136bf:	ff e0                	jmp    eax

c00136c1 <datetimeToSeconds(datetime_t)>:
c00136c1:	55                   	push   ebp
c00136c2:	57                   	push   edi
c00136c3:	56                   	push   esi
c00136c4:	53                   	push   ebx
c00136c5:	83 ec 14             	sub    esp,0x14
c00136c8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00136cc:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00136d0:	89 d3                	mov    ebx,edx
c00136d2:	0f b6 c6             	movzx  eax,dh
c00136d5:	c1 eb 10             	shr    ebx,0x10
c00136d8:	48                   	dec    eax
c00136d9:	66 81 eb 6c 07       	sub    bx,0x76c
c00136de:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00136e2:	0f b6 f5             	movzx  esi,ch
c00136e5:	89 cf                	mov    edi,ecx
c00136e7:	6b f6 3c             	imul   esi,esi,0x3c
c00136ea:	c1 ef 10             	shr    edi,0x10
c00136ed:	0f b6 c9             	movzx  ecx,cl
c00136f0:	89 f8                	mov    eax,edi
c00136f2:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00136f8:	0f b6 f8             	movzx  edi,al
c00136fb:	0f b6 d2             	movzx  edx,dl
c00136fe:	01 fe                	add    esi,edi
c0013700:	01 f1                	add    ecx,esi
c0013702:	0f b7 f3             	movzx  esi,bx
c0013705:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013709:	c1 f9 1f             	sar    ecx,0x1f
c001370c:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013711:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013715:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c001371a:	8b 0c 8d 40 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd55c0]
c0013721:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013725:	76 29                	jbe    c0013750 <datetimeToSeconds(datetime_t)+0x8f>
c0013727:	f6 c3 03             	test   bl,0x3
c001372a:	75 24                	jne    c0013750 <datetimeToSeconds(datetime_t)+0x8f>
c001372c:	31 d2                	xor    edx,edx
c001372e:	bf 64 00 00 00       	mov    edi,0x64
c0013733:	89 d8                	mov    eax,ebx
c0013735:	66 f7 f7             	div    di
c0013738:	66 85 d2             	test   dx,dx
c001373b:	75 12                	jne    c001374f <datetimeToSeconds(datetime_t)+0x8e>
c001373d:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013743:	bf 90 01 00 00       	mov    edi,0x190
c0013748:	99                   	cdq    
c0013749:	f7 ff                	idiv   edi
c001374b:	85 d2                	test   edx,edx
c001374d:	75 01                	jne    c0013750 <datetimeToSeconds(datetime_t)+0x8f>
c001374f:	41                   	inc    ecx
c0013750:	66 83 fb 46          	cmp    bx,0x46
c0013754:	76 45                	jbe    c001379b <datetimeToSeconds(datetime_t)+0xda>
c0013756:	bb 46 00 00 00       	mov    ebx,0x46
c001375b:	bf 64 00 00 00       	mov    edi,0x64
c0013760:	bd 90 01 00 00       	mov    ebp,0x190
c0013765:	b8 6d 01 00 00       	mov    eax,0x16d
c001376a:	f6 c3 03             	test   bl,0x3
c001376d:	75 23                	jne    c0013792 <datetimeToSeconds(datetime_t)+0xd1>
c001376f:	89 d8                	mov    eax,ebx
c0013771:	99                   	cdq    
c0013772:	f7 ff                	idiv   edi
c0013774:	b8 6e 01 00 00       	mov    eax,0x16e
c0013779:	85 d2                	test   edx,edx
c001377b:	75 15                	jne    c0013792 <datetimeToSeconds(datetime_t)+0xd1>
c001377d:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013783:	99                   	cdq    
c0013784:	f7 fd                	idiv   ebp
c0013786:	83 fa 01             	cmp    edx,0x1
c0013789:	19 c0                	sbb    eax,eax
c001378b:	f7 d0                	not    eax
c001378d:	05 6e 01 00 00       	add    eax,0x16e
c0013792:	01 c1                	add    ecx,eax
c0013794:	43                   	inc    ebx
c0013795:	39 f3                	cmp    ebx,esi
c0013797:	7c cc                	jl     c0013765 <datetimeToSeconds(datetime_t)+0xa4>
c0013799:	eb 35                	jmp    c00137d0 <datetimeToSeconds(datetime_t)+0x10f>
c001379b:	74 33                	je     c00137d0 <datetimeToSeconds(datetime_t)+0x10f>
c001379d:	b8 45 00 00 00       	mov    eax,0x45
c00137a2:	89 c2                	mov    edx,eax
c00137a4:	83 e2 03             	and    edx,0x3
c00137a7:	39 f0                	cmp    eax,esi
c00137a9:	7e 0f                	jle    c00137ba <datetimeToSeconds(datetime_t)+0xf9>
c00137ab:	83 fa 01             	cmp    edx,0x1
c00137ae:	19 d2                	sbb    edx,edx
c00137b0:	48                   	dec    eax
c00137b1:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00137b8:	eb e8                	jmp    c00137a2 <datetimeToSeconds(datetime_t)+0xe1>
c00137ba:	b8 6d 01 00 00       	mov    eax,0x16d
c00137bf:	85 d2                	test   edx,edx
c00137c1:	75 0b                	jne    c00137ce <datetimeToSeconds(datetime_t)+0x10d>
c00137c3:	66 83 fb 01          	cmp    bx,0x1
c00137c7:	19 c0                	sbb    eax,eax
c00137c9:	05 6e 01 00 00       	add    eax,0x16e
c00137ce:	29 c1                	sub    ecx,eax
c00137d0:	b8 80 51 01 00       	mov    eax,0x15180
c00137d5:	f7 e9                	imul   ecx
c00137d7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00137db:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00137df:	83 c4 14             	add    esp,0x14
c00137e2:	5b                   	pop    ebx
c00137e3:	5e                   	pop    esi
c00137e4:	5f                   	pop    edi
c00137e5:	5d                   	pop    ebp
c00137e6:	c3                   	ret    
c00137e7:	90                   	nop

c00137e8 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00137e8:	57                   	push   edi
c00137e9:	56                   	push   esi
c00137ea:	53                   	push   ebx
c00137eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00137ef:	8b 06                	mov    eax,DWORD PTR [esi]
c00137f1:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00137f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137fc:	e8 c0 fe ff ff       	call   c00136c1 <datetimeToSeconds(datetime_t)>
c0013801:	59                   	pop    ecx
c0013802:	0f b6 0d 3c db 02 c0 	movzx  ecx,BYTE PTR ds:0xc002db3c
c0013809:	5b                   	pop    ebx
c001380a:	03 0d 40 db 02 c0    	add    ecx,DWORD PTR ds:0xc002db40
c0013810:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013816:	89 cb                	mov    ebx,ecx
c0013818:	c1 fb 1f             	sar    ebx,0x1f
c001381b:	29 c8                	sub    eax,ecx
c001381d:	19 da                	sbb    edx,ebx
c001381f:	31 c9                	xor    ecx,ecx
c0013821:	80 3d 3d db 02 c0 00 	cmp    BYTE PTR ds:0xc002db3d,0x0
c0013828:	74 05                	je     c001382f <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001382a:	b9 08 07 00 00       	mov    ecx,0x708
c001382f:	31 db                	xor    ebx,ebx
c0013831:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013835:	29 c8                	sub    eax,ecx
c0013837:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001383b:	19 da                	sbb    edx,ebx
c001383d:	89 f8                	mov    eax,edi
c001383f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013843:	5b                   	pop    ebx
c0013844:	5e                   	pop    esi
c0013845:	5f                   	pop    edi
c0013846:	ff e0                	jmp    eax

c0013848 <secondsToDatetime(unsigned long long)>:
c0013848:	55                   	push   ebp
c0013849:	57                   	push   edi
c001384a:	56                   	push   esi
c001384b:	53                   	push   ebx
c001384c:	83 ec 1c             	sub    esp,0x1c
c001384f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013853:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013857:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001385b:	6a 00                	push   0x0
c001385d:	68 80 51 01 00       	push   0x15180
c0013862:	55                   	push   ebp
c0013863:	57                   	push   edi
c0013864:	e8 ab 2e 01 00       	call   c0026714 <__udivdi3>
c0013869:	83 c4 10             	add    esp,0x10
c001386c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013872:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013876:	6a 00                	push   0x0
c0013878:	68 80 51 01 00       	push   0x15180
c001387d:	55                   	push   ebp
c001387e:	57                   	push   edi
c001387f:	bf 10 0e 00 00       	mov    edi,0xe10
c0013884:	e8 8b 2f 01 00       	call   c0026814 <__umoddi3>
c0013889:	83 c4 10             	add    esp,0x10
c001388c:	99                   	cdq    
c001388d:	f7 ff                	idiv   edi
c001388f:	bf 3c 00 00 00       	mov    edi,0x3c
c0013894:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013897:	89 d0                	mov    eax,edx
c0013899:	99                   	cdq    
c001389a:	f7 ff                	idiv   edi
c001389c:	85 db                	test   ebx,ebx
c001389e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00138a1:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00138a4:	79 11                	jns    c00138b7 <secondsToDatetime(unsigned long long)+0x6f>
c00138a6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00138aa:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00138b0:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00138b5:	eb 07                	jmp    c00138be <secondsToDatetime(unsigned long long)+0x76>
c00138b7:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00138bc:	89 d8                	mov    eax,ebx
c00138be:	bf b4 05 00 00       	mov    edi,0x5b4
c00138c3:	99                   	cdq    
c00138c4:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00138c9:	f7 f9                	idiv   ecx
c00138cb:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00138d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138d4:	31 d2                	xor    edx,edx
c00138d6:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00138de:	01 c3                	add    ebx,eax
c00138e0:	89 d8                	mov    eax,ebx
c00138e2:	f7 f1                	div    ecx
c00138e4:	31 d2                	xor    edx,edx
c00138e6:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00138e9:	89 d8                	mov    eax,ebx
c00138eb:	f7 f7                	div    edi
c00138ed:	31 d2                	xor    edx,edx
c00138ef:	29 c1                	sub    ecx,eax
c00138f1:	89 d8                	mov    eax,ebx
c00138f3:	f7 f5                	div    ebp
c00138f5:	bd 6d 01 00 00       	mov    ebp,0x16d
c00138fa:	29 c1                	sub    ecx,eax
c00138fc:	31 d2                	xor    edx,edx
c00138fe:	89 c8                	mov    eax,ecx
c0013900:	f7 f5                	div    ebp
c0013902:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013907:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001390b:	31 d2                	xor    edx,edx
c001390d:	89 c8                	mov    eax,ecx
c001390f:	f7 f5                	div    ebp
c0013911:	31 d2                	xor    edx,edx
c0013913:	01 c3                	add    ebx,eax
c0013915:	89 c8                	mov    eax,ecx
c0013917:	f7 f7                	div    edi
c0013919:	bf 99 00 00 00       	mov    edi,0x99
c001391e:	29 c3                	sub    ebx,eax
c0013920:	31 d2                	xor    edx,edx
c0013922:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001392a:	29 c3                	sub    ebx,eax
c001392c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001392f:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013932:	bb 05 00 00 00       	mov    ebx,0x5
c0013937:	83 c1 02             	add    ecx,0x2
c001393a:	89 c8                	mov    eax,ecx
c001393c:	f7 f7                	div    edi
c001393e:	31 d2                	xor    edx,edx
c0013940:	89 c7                	mov    edi,eax
c0013942:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013948:	83 c0 02             	add    eax,0x2
c001394b:	f7 f3                	div    ebx
c001394d:	89 eb                	mov    ebx,ebp
c001394f:	29 c3                	sub    ebx,eax
c0013951:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013957:	88 1e                	mov    BYTE PTR [esi],bl
c0013959:	19 c0                	sbb    eax,eax
c001395b:	31 d2                	xor    edx,edx
c001395d:	83 e0 0c             	and    eax,0xc
c0013960:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013964:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001396c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013970:	83 f9 01             	cmp    ecx,0x1
c0013973:	0f 96 c2             	setbe  dl
c0013976:	41                   	inc    ecx
c0013977:	01 d0                	add    eax,edx
c0013979:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001397c:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013980:	83 c4 1c             	add    esp,0x1c
c0013983:	89 f0                	mov    eax,esi
c0013985:	5b                   	pop    ebx
c0013986:	5e                   	pop    esi
c0013987:	5f                   	pop    edi
c0013988:	5d                   	pop    ebp
c0013989:	c2 04 00             	ret    0x4

c001398c <Clock::timeInDatetimeLocal()>:
c001398c:	53                   	push   ebx
c001398d:	83 ec 14             	sub    esp,0x14
c0013990:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013994:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013998:	e8 83 fc ff ff       	call   c0013620 <Clock::timeInSecondsLocal()>
c001399d:	83 c4 0c             	add    esp,0xc
c00139a0:	52                   	push   edx
c00139a1:	50                   	push   eax
c00139a2:	53                   	push   ebx
c00139a3:	e8 a0 fe ff ff       	call   c0013848 <secondsToDatetime(unsigned long long)>
c00139a8:	89 d8                	mov    eax,ebx
c00139aa:	83 c4 14             	add    esp,0x14
c00139ad:	5b                   	pop    ebx
c00139ae:	c2 04 00             	ret    0x4
c00139b1:	90                   	nop

c00139b2 <Device::hibernate()>:
c00139b2:	c3                   	ret    
c00139b3:	90                   	nop

c00139b4 <Device::wake()>:
c00139b4:	c3                   	ret    
c00139b5:	90                   	nop

c00139b6 <Device::detect()>:
c00139b6:	c3                   	ret    
c00139b7:	90                   	nop

c00139b8 <Device::disableLegacy()>:
c00139b8:	c3                   	ret    
c00139b9:	90                   	nop

c00139ba <Device::powerSaving(PowerSavingLevel)>:
c00139ba:	c3                   	ret    
c00139bb:	90                   	nop

c00139bc <DriverlessDevice::close(int, int, void*)>:
c00139bc:	31 c0                	xor    eax,eax
c00139be:	c3                   	ret    
c00139bf:	90                   	nop

c00139c0 <DriverlessDevice::detect()>:
c00139c0:	c3                   	ret    
c00139c1:	90                   	nop

c00139c2 <DriverlessDevice::open(int, int, void*)>:
c00139c2:	83 ec 18             	sub    esp,0x18
c00139c5:	68 70 aa 02 c0       	push   0xc002aa70
c00139ca:	e8 6c 64 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c00139cf:	83 c8 ff             	or     eax,0xffffffff
c00139d2:	83 c4 1c             	add    esp,0x1c
c00139d5:	c3                   	ret    

c00139d6 <Device::~Device()>:
c00139d6:	ba d0 aa 02 c0       	mov    edx,0xc002aad0
c00139db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139df:	89 10                	mov    DWORD PTR [eax],edx
c00139e1:	90                   	nop
c00139e2:	c3                   	ret    
c00139e3:	90                   	nop

c00139e4 <Device::~Device()>:
c00139e4:	83 ec 0c             	sub    esp,0xc
c00139e7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00139eb:	e8 e6 ff ff ff       	call   c00139d6 <Device::~Device()>
c00139f0:	83 c4 04             	add    esp,0x4
c00139f3:	83 ec 08             	sub    esp,0x8
c00139f6:	68 58 01 00 00       	push   0x158
c00139fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139ff:	e8 f3 eb ff ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0013a04:	83 c4 10             	add    esp,0x10
c0013a07:	83 c4 0c             	add    esp,0xc
c0013a0a:	c3                   	ret    
c0013a0b:	90                   	nop

c0013a0c <Device::findAndLoadDriver()>:
c0013a0c:	c7 44 24 04 8e aa 02 c0 	mov    DWORD PTR [esp+0x4],0xc002aa8e
c0013a14:	e9 b6 ec ff ff       	jmp    c00126cf <Dbg::kprintf(char const*, ...)>
c0013a19:	90                   	nop

c0013a1a <Device::preOpenPCI(PCIDeviceInfo)>:
c0013a1a:	57                   	push   edi
c0013a1b:	b9 09 00 00 00       	mov    ecx,0x9
c0013a20:	56                   	push   esi
c0013a21:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013a25:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013a29:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013a33:	81 c7 18 01 00 00    	add    edi,0x118
c0013a39:	fc                   	cld    
c0013a3a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013a3c:	5e                   	pop    esi
c0013a3d:	5f                   	pop    edi
c0013a3e:	c3                   	ret    
c0013a3f:	90                   	nop

c0013a40 <Device::preOpenACPI(void*, char*, char*)>:
c0013a40:	57                   	push   edi
c0013a41:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013a46:	56                   	push   esi
c0013a47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a4b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a4f:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013a59:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013a5f:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013a65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013a69:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013a6b:	b9 0e 00 00 00       	mov    ecx,0xe
c0013a70:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013a76:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013a7a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013a7c:	5e                   	pop    esi
c0013a7d:	5f                   	pop    edi
c0013a7e:	c3                   	ret    
c0013a7f:	90                   	nop

c0013a80 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013a80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a84:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013a89:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013a90:	75 0b                	jne    c0013a9d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013a92:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a94:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a98:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013a9b:	eb 1e                	jmp    c0013abb <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013a9d:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0013aa2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013aa8:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013aae:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013ab0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013ab4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013ab8:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013abb:	ff e0                	jmp    eax
c0013abd:	90                   	nop

c0013abe <Device::getParent()>:
c0013abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ac2:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013ac8:	c3                   	ret    
c0013ac9:	90                   	nop

c0013aca <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013aca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ace:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013ad3:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013ada:	75 0b                	jne    c0013ae7 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013adc:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ade:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013ae2:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013ae5:	eb 1e                	jmp    c0013b05 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013ae7:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0013aec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013af2:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013af8:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013afa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013afe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b02:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013b05:	ff e0                	jmp    eax
c0013b07:	90                   	nop

c0013b08 <Device::addChild(Device*)>:
c0013b08:	53                   	push   ebx
c0013b09:	83 ec 08             	sub    esp,0x8
c0013b0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b14:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013b1a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013b20:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013b22:	85 d2                	test   edx,edx
c0013b24:	74 04                	je     c0013b2a <Device::addChild(Device*)+0x22>
c0013b26:	89 d3                	mov    ebx,edx
c0013b28:	eb f6                	jmp    c0013b20 <Device::addChild(Device*)+0x18>
c0013b2a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013b2d:	83 ec 0c             	sub    esp,0xc
c0013b30:	6a 08                	push   0x8
c0013b32:	e8 62 ba ff ff       	call   c000f599 <malloc>
c0013b37:	89 03                	mov    DWORD PTR [ebx],eax
c0013b39:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013b3f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013b46:	83 c4 18             	add    esp,0x18
c0013b49:	5b                   	pop    ebx
c0013b4a:	c3                   	ret    
c0013b4b:	90                   	nop

c0013b4c <Device::removeAllChildren()>:
c0013b4c:	56                   	push   esi
c0013b4d:	53                   	push   ebx
c0013b4e:	52                   	push   edx
c0013b4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013b53:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013b59:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b5c:	74 17                	je     c0013b75 <Device::removeAllChildren()+0x29>
c0013b5e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013b61:	85 c0                	test   eax,eax
c0013b63:	74 0c                	je     c0013b71 <Device::removeAllChildren()+0x25>
c0013b65:	83 ec 0c             	sub    esp,0xc
c0013b68:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b6a:	50                   	push   eax
c0013b6b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013b6e:	83 c4 10             	add    esp,0x10
c0013b71:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b73:	eb e4                	jmp    c0013b59 <Device::removeAllChildren()+0xd>
c0013b75:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013b7b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013b81:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013b87:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013b8e:	58                   	pop    eax
c0013b8f:	5b                   	pop    ebx
c0013b90:	5e                   	pop    esi
c0013b91:	c3                   	ret    

c0013b92 <Device::hibernateAll()>:
c0013b92:	53                   	push   ebx
c0013b93:	83 ec 14             	sub    esp,0x14
c0013b96:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b9c:	53                   	push   ebx
c0013b9d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013ba0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ba6:	83 c4 10             	add    esp,0x10
c0013ba9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bac:	74 0f                	je     c0013bbd <Device::hibernateAll()+0x2b>
c0013bae:	83 ec 0c             	sub    esp,0xc
c0013bb1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bb4:	e8 d9 ff ff ff       	call   c0013b92 <Device::hibernateAll()>
c0013bb9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bbb:	eb e9                	jmp    c0013ba6 <Device::hibernateAll()+0x14>
c0013bbd:	83 c4 08             	add    esp,0x8
c0013bc0:	5b                   	pop    ebx
c0013bc1:	c3                   	ret    

c0013bc2 <Device::wakeAll()>:
c0013bc2:	53                   	push   ebx
c0013bc3:	83 ec 14             	sub    esp,0x14
c0013bc6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013bca:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bcc:	53                   	push   ebx
c0013bcd:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013bd0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bd6:	83 c4 10             	add    esp,0x10
c0013bd9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bdc:	74 0f                	je     c0013bed <Device::wakeAll()+0x2b>
c0013bde:	83 ec 0c             	sub    esp,0xc
c0013be1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013be4:	e8 d9 ff ff ff       	call   c0013bc2 <Device::wakeAll()>
c0013be9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013beb:	eb e9                	jmp    c0013bd6 <Device::wakeAll()+0x14>
c0013bed:	83 c4 08             	add    esp,0x8
c0013bf0:	5b                   	pop    ebx
c0013bf1:	c3                   	ret    

c0013bf2 <Device::detectAll()>:
c0013bf2:	53                   	push   ebx
c0013bf3:	83 ec 14             	sub    esp,0x14
c0013bf6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013bfa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bfc:	53                   	push   ebx
c0013bfd:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013c00:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c06:	83 c4 10             	add    esp,0x10
c0013c09:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c0c:	74 0f                	je     c0013c1d <Device::detectAll()+0x2b>
c0013c0e:	83 ec 0c             	sub    esp,0xc
c0013c11:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c14:	e8 d9 ff ff ff       	call   c0013bf2 <Device::detectAll()>
c0013c19:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c1b:	eb e9                	jmp    c0013c06 <Device::detectAll()+0x14>
c0013c1d:	83 c4 08             	add    esp,0x8
c0013c20:	5b                   	pop    ebx
c0013c21:	c3                   	ret    

c0013c22 <Device::disableLegacyAll()>:
c0013c22:	53                   	push   ebx
c0013c23:	83 ec 14             	sub    esp,0x14
c0013c26:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c2c:	53                   	push   ebx
c0013c2d:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013c30:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c36:	83 c4 10             	add    esp,0x10
c0013c39:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c3c:	74 0f                	je     c0013c4d <Device::disableLegacyAll()+0x2b>
c0013c3e:	83 ec 0c             	sub    esp,0xc
c0013c41:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c44:	e8 d9 ff ff ff       	call   c0013c22 <Device::disableLegacyAll()>
c0013c49:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c4b:	eb e9                	jmp    c0013c36 <Device::disableLegacyAll()+0x14>
c0013c4d:	83 c4 08             	add    esp,0x8
c0013c50:	5b                   	pop    ebx
c0013c51:	c3                   	ret    

c0013c52 <Device::loadDriversForAll()>:
c0013c52:	53                   	push   ebx
c0013c53:	83 ec 08             	sub    esp,0x8
c0013c56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c5a:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013c61:	75 0c                	jne    c0013c6f <Device::loadDriversForAll()+0x1d>
c0013c63:	83 ec 0c             	sub    esp,0xc
c0013c66:	53                   	push   ebx
c0013c67:	e8 a0 fd ff ff       	call   c0013a0c <Device::findAndLoadDriver()>
c0013c6c:	83 c4 10             	add    esp,0x10
c0013c6f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c75:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c78:	74 12                	je     c0013c8c <Device::loadDriversForAll()+0x3a>
c0013c7a:	83 ec 0c             	sub    esp,0xc
c0013c7d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c80:	e8 cd ff ff ff       	call   c0013c52 <Device::loadDriversForAll()>
c0013c85:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c87:	83 c4 10             	add    esp,0x10
c0013c8a:	eb e9                	jmp    c0013c75 <Device::loadDriversForAll()+0x23>
c0013c8c:	83 c4 08             	add    esp,0x8
c0013c8f:	5b                   	pop    ebx
c0013c90:	c3                   	ret    
c0013c91:	90                   	nop

c0013c92 <Device::closeAll()>:
c0013c92:	53                   	push   ebx
c0013c93:	83 ec 08             	sub    esp,0x8
c0013c96:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c9c:	6a 00                	push   0x0
c0013c9e:	6a 00                	push   0x0
c0013ca0:	6a 00                	push   0x0
c0013ca2:	53                   	push   ebx
c0013ca3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ca6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013cac:	83 c4 10             	add    esp,0x10
c0013caf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013cb2:	74 0f                	je     c0013cc3 <Device::closeAll()+0x31>
c0013cb4:	83 ec 0c             	sub    esp,0xc
c0013cb7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013cba:	e8 d3 ff ff ff       	call   c0013c92 <Device::closeAll()>
c0013cbf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cc1:	eb e9                	jmp    c0013cac <Device::closeAll()+0x1a>
c0013cc3:	83 c4 08             	add    esp,0x8
c0013cc6:	5b                   	pop    ebx
c0013cc7:	c3                   	ret    

c0013cc8 <Device::powerSavingAll(PowerSavingLevel)>:
c0013cc8:	56                   	push   esi
c0013cc9:	53                   	push   ebx
c0013cca:	83 ec 0c             	sub    esp,0xc
c0013ccd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013cd1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013cd5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cd7:	56                   	push   esi
c0013cd8:	53                   	push   ebx
c0013cd9:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013cdc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ce2:	83 c4 10             	add    esp,0x10
c0013ce5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ce8:	74 0f                	je     c0013cf9 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013cea:	52                   	push   edx
c0013ceb:	52                   	push   edx
c0013cec:	56                   	push   esi
c0013ced:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013cf0:	e8 d3 ff ff ff       	call   c0013cc8 <Device::powerSavingAll(PowerSavingLevel)>
c0013cf5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cf7:	eb e9                	jmp    c0013ce2 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013cf9:	58                   	pop    eax
c0013cfa:	5b                   	pop    ebx
c0013cfb:	5e                   	pop    esi
c0013cfc:	c3                   	ret    
c0013cfd:	90                   	nop

c0013cfe <Device::setName(char const*)>:
c0013cfe:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013d06:	e9 01 cb fe ff       	jmp    c000080c <strcpy>
c0013d0b:	90                   	nop

c0013d0c <Device::Device(char const*)>:
c0013d0c:	83 ec 1c             	sub    esp,0x1c
c0013d0f:	ba d0 aa 02 c0       	mov    edx,0xc002aad0
c0013d14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d18:	89 10                	mov    DWORD PTR [eax],edx
c0013d1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d1e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013d28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d2c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013d36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d3a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013d44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d48:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013d52:	83 ec 08             	sub    esp,0x8
c0013d55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d5d:	e8 9c ff ff ff       	call   c0013cfe <Device::setName(char const*)>
c0013d62:	83 c4 10             	add    esp,0x10
c0013d65:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013d6d:	83 ec 0c             	sub    esp,0xc
c0013d70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013d74:	e8 20 b8 ff ff       	call   c000f599 <malloc>
c0013d79:	83 c4 10             	add    esp,0x10
c0013d7c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d82:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d89:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013d8d:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013d93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d97:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013d9d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013da3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013da7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013dad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013db4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013db8:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013dbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dc3:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013dca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dce:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013dd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ddc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013de6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dea:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013df4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013df8:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013e02:	90                   	nop
c0013e03:	83 c4 1c             	add    esp,0x1c
c0013e06:	c3                   	ret    
c0013e07:	90                   	nop

c0013e08 <Device::getName()>:
c0013e08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e0c:	05 d0 00 00 00       	add    eax,0xd0
c0013e11:	c3                   	ret    

c0013e12 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013e12:	83 ec 0c             	sub    esp,0xc
c0013e15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e19:	83 ec 08             	sub    esp,0x8
c0013e1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e20:	50                   	push   eax
c0013e21:	e8 e6 fe ff ff       	call   c0013d0c <Device::Device(char const*)>
c0013e26:	83 c4 10             	add    esp,0x10
c0013e29:	ba fc aa 02 c0       	mov    edx,0xc002aafc
c0013e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e32:	89 10                	mov    DWORD PTR [eax],edx
c0013e34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e38:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013e42:	90                   	nop
c0013e43:	83 c4 0c             	add    esp,0xc
c0013e46:	c3                   	ret    
c0013e47:	90                   	nop

c0013e48 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013e48:	57                   	push   edi
c0013e49:	56                   	push   esi
c0013e4a:	53                   	push   ebx
c0013e4b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e4f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e53:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e57:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013e5d:	75 0c                	jne    c0013e6b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013e5f:	52                   	push   edx
c0013e60:	52                   	push   edx
c0013e61:	53                   	push   ebx
c0013e62:	56                   	push   esi
c0013e63:	e8 e8 47 01 00       	call   c0028650 <LinkedList<Device>::addElement(Device*)>
c0013e68:	83 c4 10             	add    esp,0x10
c0013e6b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e71:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e74:	74 12                	je     c0013e88 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013e76:	50                   	push   eax
c0013e77:	57                   	push   edi
c0013e78:	56                   	push   esi
c0013e79:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e7c:	e8 c7 ff ff ff       	call   c0013e48 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013e81:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e83:	83 c4 10             	add    esp,0x10
c0013e86:	eb e9                	jmp    c0013e71 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013e88:	5b                   	pop    ebx
c0013e89:	5e                   	pop    esi
c0013e8a:	5f                   	pop    edi
c0013e8b:	c3                   	ret    

c0013e8c <getDevicesOfType(DeviceType)>:
c0013e8c:	53                   	push   ebx
c0013e8d:	83 ec 14             	sub    esp,0x14
c0013e90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e94:	53                   	push   ebx
c0013e95:	e8 92 48 01 00       	call   c002872c <LinkedList<Device>::LinkedList()>
c0013e9a:	83 c4 0c             	add    esp,0xc
c0013e9d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ea1:	53                   	push   ebx
c0013ea2:	ff 35 c8 d9 02 c0    	push   DWORD PTR ds:0xc002d9c8
c0013ea8:	e8 9b ff ff ff       	call   c0013e48 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013ead:	89 d8                	mov    eax,ebx
c0013eaf:	83 c4 18             	add    esp,0x18
c0013eb2:	5b                   	pop    ebx
c0013eb3:	c2 04 00             	ret    0x4

c0013eb6 <HardDiskController::HardDiskController(char const*)>:
c0013eb6:	83 ec 0c             	sub    esp,0xc
c0013eb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ebd:	83 ec 08             	sub    esp,0x8
c0013ec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ec4:	50                   	push   eax
c0013ec5:	e8 42 fe ff ff       	call   c0013d0c <Device::Device(char const*)>
c0013eca:	83 c4 10             	add    esp,0x10
c0013ecd:	ba 28 ab 02 c0       	mov    edx,0xc002ab28
c0013ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ed6:	89 10                	mov    DWORD PTR [eax],edx
c0013ed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013edc:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013ee6:	90                   	nop
c0013ee7:	83 c4 0c             	add    esp,0xc
c0013eea:	c3                   	ret    
c0013eeb:	90                   	nop

c0013eec <HardDiskController::~HardDiskController()>:
c0013eec:	83 ec 0c             	sub    esp,0xc
c0013eef:	ba 28 ab 02 c0       	mov    edx,0xc002ab28
c0013ef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ef8:	89 10                	mov    DWORD PTR [eax],edx
c0013efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013efe:	83 ec 0c             	sub    esp,0xc
c0013f01:	50                   	push   eax
c0013f02:	e8 cf fa ff ff       	call   c00139d6 <Device::~Device()>
c0013f07:	83 c4 10             	add    esp,0x10
c0013f0a:	90                   	nop
c0013f0b:	83 c4 0c             	add    esp,0xc
c0013f0e:	c3                   	ret    
c0013f0f:	90                   	nop

c0013f10 <HardDiskController::~HardDiskController()>:
c0013f10:	83 ec 0c             	sub    esp,0xc
c0013f13:	83 ec 0c             	sub    esp,0xc
c0013f16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f1a:	e8 cd ff ff ff       	call   c0013eec <HardDiskController::~HardDiskController()>
c0013f1f:	83 c4 10             	add    esp,0x10
c0013f22:	83 ec 08             	sub    esp,0x8
c0013f25:	68 58 01 00 00       	push   0x158
c0013f2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f2e:	e8 c4 e6 ff ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0013f33:	83 c4 10             	add    esp,0x10
c0013f36:	83 c4 0c             	add    esp,0xc
c0013f39:	c3                   	ret    

c0013f3a <PhysicalDisk::eject()>:
c0013f3a:	83 c8 ff             	or     eax,0xffffffff
c0013f3d:	c3                   	ret    

c0013f3e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013f3e:	83 ec 0c             	sub    esp,0xc
c0013f41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f45:	83 ec 08             	sub    esp,0x8
c0013f48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f4c:	50                   	push   eax
c0013f4d:	e8 ba fd ff ff       	call   c0013d0c <Device::Device(char const*)>
c0013f52:	83 c4 10             	add    esp,0x10
c0013f55:	ba 54 ab 02 c0       	mov    edx,0xc002ab54
c0013f5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f5e:	89 10                	mov    DWORD PTR [eax],edx
c0013f60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f64:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013f6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f6f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013f76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f7a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013f84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f88:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013f8c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013f92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f96:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013fa0:	90                   	nop
c0013fa1:	83 c4 0c             	add    esp,0xc
c0013fa4:	c3                   	ret    
c0013fa5:	90                   	nop

c0013fa6 <PhysicalDisk::startCache()>:
c0013fa6:	56                   	push   esi
c0013fa7:	53                   	push   ebx
c0013fa8:	83 ec 10             	sub    esp,0x10
c0013fab:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013faf:	6a 44                	push   0x44
c0013fb1:	e8 e3 b5 ff ff       	call   c000f599 <malloc>
c0013fb6:	89 c6                	mov    esi,eax
c0013fb8:	58                   	pop    eax
c0013fb9:	5a                   	pop    edx
c0013fba:	53                   	push   ebx
c0013fbb:	56                   	push   esi
c0013fbc:	e8 71 28 00 00       	call   c0016832 <VCache::VCache(PhysicalDisk*)>
c0013fc1:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013fc7:	83 c4 14             	add    esp,0x14
c0013fca:	5b                   	pop    ebx
c0013fcb:	5e                   	pop    esi
c0013fcc:	c3                   	ret    
c0013fcd:	90                   	nop

c0013fce <PhysicalDisk::~PhysicalDisk()>:
c0013fce:	83 ec 0c             	sub    esp,0xc
c0013fd1:	ba 54 ab 02 c0       	mov    edx,0xc002ab54
c0013fd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fda:	89 10                	mov    DWORD PTR [eax],edx
c0013fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fe0:	83 ec 0c             	sub    esp,0xc
c0013fe3:	50                   	push   eax
c0013fe4:	e8 ed f9 ff ff       	call   c00139d6 <Device::~Device()>
c0013fe9:	83 c4 10             	add    esp,0x10
c0013fec:	90                   	nop
c0013fed:	83 c4 0c             	add    esp,0xc
c0013ff0:	c3                   	ret    
c0013ff1:	90                   	nop

c0013ff2 <PhysicalDisk::~PhysicalDisk()>:
c0013ff2:	83 ec 0c             	sub    esp,0xc
c0013ff5:	83 ec 0c             	sub    esp,0xc
c0013ff8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ffc:	e8 cd ff ff ff       	call   c0013fce <PhysicalDisk::~PhysicalDisk()>
c0014001:	83 c4 10             	add    esp,0x10
c0014004:	83 ec 08             	sub    esp,0x8
c0014007:	68 6c 01 00 00       	push   0x16c
c001400c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014010:	e8 e2 e5 ff ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0014015:	83 c4 10             	add    esp,0x10
c0014018:	83 c4 0c             	add    esp,0xc
c001401b:	c3                   	ret    

c001401c <FPU::FPU(char const*)>:
c001401c:	83 ec 0c             	sub    esp,0xc
c001401f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014023:	83 ec 08             	sub    esp,0x8
c0014026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001402a:	50                   	push   eax
c001402b:	e8 dc fc ff ff       	call   c0013d0c <Device::Device(char const*)>
c0014030:	83 c4 10             	add    esp,0x10
c0014033:	ba 98 ab 02 c0       	mov    edx,0xc002ab98
c0014038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001403c:	89 10                	mov    DWORD PTR [eax],edx
c001403e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014042:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001404c:	90                   	nop
c001404d:	83 c4 0c             	add    esp,0xc
c0014050:	c3                   	ret    
c0014051:	90                   	nop

c0014052 <FPU::~FPU()>:
c0014052:	83 ec 0c             	sub    esp,0xc
c0014055:	ba 98 ab 02 c0       	mov    edx,0xc002ab98
c001405a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001405e:	89 10                	mov    DWORD PTR [eax],edx
c0014060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014064:	83 ec 0c             	sub    esp,0xc
c0014067:	50                   	push   eax
c0014068:	e8 69 f9 ff ff       	call   c00139d6 <Device::~Device()>
c001406d:	83 c4 10             	add    esp,0x10
c0014070:	90                   	nop
c0014071:	83 c4 0c             	add    esp,0xc
c0014074:	c3                   	ret    
c0014075:	90                   	nop

c0014076 <FPU::~FPU()>:
c0014076:	83 ec 0c             	sub    esp,0xc
c0014079:	83 ec 0c             	sub    esp,0xc
c001407c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014080:	e8 cd ff ff ff       	call   c0014052 <FPU::~FPU()>
c0014085:	83 c4 10             	add    esp,0x10
c0014088:	83 ec 08             	sub    esp,0x8
c001408b:	68 58 01 00 00       	push   0x158
c0014090:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014094:	e8 5e e5 ff ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0014099:	83 c4 10             	add    esp,0x10
c001409c:	83 c4 0c             	add    esp,0xc
c001409f:	c3                   	ret    

c00140a0 <setupFPU()>:
c00140a0:	53                   	push   ebx
c00140a1:	83 ec 08             	sub    esp,0x8
c00140a4:	8b 15 c8 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d9c8
c00140aa:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00140b1:	74 19                	je     c00140cc <setupFPU()+0x2c>
c00140b3:	83 ec 0c             	sub    esp,0xc
c00140b6:	68 58 01 00 00       	push   0x158
c00140bb:	e8 d9 b4 ff ff       	call   c000f599 <malloc>
c00140c0:	89 c3                	mov    ebx,eax
c00140c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00140c5:	e8 cc 11 01 00       	call   c0025296 <AVX::AVX()>
c00140ca:	eb 5b                	jmp    c0014127 <setupFPU()+0x87>
c00140cc:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00140d2:	84 c0                	test   al,al
c00140d4:	79 19                	jns    c00140ef <setupFPU()+0x4f>
c00140d6:	83 ec 0c             	sub    esp,0xc
c00140d9:	68 58 01 00 00       	push   0x158
c00140de:	e8 b6 b4 ff ff       	call   c000f599 <malloc>
c00140e3:	89 c3                	mov    ebx,eax
c00140e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00140e8:	e8 cf 12 01 00       	call   c00253bc <SSE::SSE()>
c00140ed:	eb 38                	jmp    c0014127 <setupFPU()+0x87>
c00140ef:	a8 20                	test   al,0x20
c00140f1:	74 19                	je     c001410c <setupFPU()+0x6c>
c00140f3:	83 ec 0c             	sub    esp,0xc
c00140f6:	68 58 01 00 00       	push   0x158
c00140fb:	e8 99 b4 ff ff       	call   c000f599 <malloc>
c0014100:	89 c3                	mov    ebx,eax
c0014102:	89 04 24             	mov    DWORD PTR [esp],eax
c0014105:	e8 1c 12 01 00       	call   c0025326 <MMX::MMX()>
c001410a:	eb 1b                	jmp    c0014127 <setupFPU()+0x87>
c001410c:	a8 10                	test   al,0x10
c001410e:	74 1c                	je     c001412c <setupFPU()+0x8c>
c0014110:	83 ec 0c             	sub    esp,0xc
c0014113:	68 58 01 00 00       	push   0x158
c0014118:	e8 7c b4 ff ff       	call   c000f599 <malloc>
c001411d:	89 c3                	mov    ebx,eax
c001411f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014122:	e8 23 13 01 00       	call   c002544a <x87::x87()>
c0014127:	83 c4 10             	add    esp,0x10
c001412a:	eb 24                	jmp    c0014150 <setupFPU()+0xb0>
c001412c:	83 e0 ef             	and    eax,0xffffffef
c001412f:	83 ec 0c             	sub    esp,0xc
c0014132:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014138:	68 84 ab 02 c0       	push   0xc002ab84
c001413d:	e8 8d e5 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0014142:	0f 20 c0             	mov    eax,cr0
c0014145:	83 c8 04             	or     eax,0x4
c0014148:	0f 22 c0             	mov    cr0,eax
c001414b:	31 db                	xor    ebx,ebx
c001414d:	83 c4 10             	add    esp,0x10
c0014150:	89 d8                	mov    eax,ebx
c0014152:	83 c4 08             	add    esp,0x8
c0014155:	5b                   	pop    ebx
c0014156:	c3                   	ret    
c0014157:	90                   	nop

c0014158 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014158:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001415c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014160:	c1 e0 04             	shl    eax,0x4
c0014163:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014167:	8d 50 10             	lea    edx,[eax+0x10]
c001416a:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014170:	74 08                	je     c001417a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014172:	83 c0 04             	add    eax,0x4
c0014175:	39 d0                	cmp    eax,edx
c0014177:	75 f1                	jne    c001416a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014179:	c3                   	ret    
c001417a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014184:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001418e:	eb e2                	jmp    c0014172 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014190 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014190:	57                   	push   edi
c0014191:	31 c0                	xor    eax,eax
c0014193:	56                   	push   esi
c0014194:	53                   	push   ebx
c0014195:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014199:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001419d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00141a1:	89 da                	mov    edx,ebx
c00141a3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00141a7:	c1 e2 04             	shl    edx,0x4
c00141aa:	01 ca                	add    edx,ecx
c00141ac:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00141b4:	74 16                	je     c00141cc <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00141b6:	40                   	inc    eax
c00141b7:	83 f8 04             	cmp    eax,0x4
c00141ba:	75 f0                	jne    c00141ac <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00141bc:	c7 44 24 10 c8 ab 02 c0 	mov    DWORD PTR [esp+0x10],0xc002abc8
c00141c4:	5b                   	pop    ebx
c00141c5:	5e                   	pop    esi
c00141c6:	5f                   	pop    edi
c00141c7:	e9 6f 5c 00 00       	jmp    c0019e3b <Krnl::panic(char const*)>
c00141cc:	8d 04 98             	lea    eax,[eax+ebx*4]
c00141cf:	8d 04 81             	lea    eax,[ecx+eax*4]
c00141d2:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00141d8:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00141de:	5b                   	pop    ebx
c00141df:	5e                   	pop    esi
c00141e0:	5f                   	pop    edi
c00141e1:	c3                   	ret    

c00141e2 <doubleFault(regs*, void*)>:
c00141e2:	55                   	push   ebp
c00141e3:	89 e5                	mov    ebp,esp
c00141e5:	83 ec 08             	sub    esp,0x8
c00141e8:	83 ec 0c             	sub    esp,0xc
c00141eb:	68 d5 ab 02 c0       	push   0xc002abd5
c00141f0:	e8 46 5c 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c00141f5:	83 c4 10             	add    esp,0x10
c00141f8:	90                   	nop
c00141f9:	c9                   	leave  
c00141fa:	c3                   	ret    
c00141fb:	90                   	nop

c00141fc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00141fc:	56                   	push   esi
c00141fd:	53                   	push   ebx
c00141fe:	50                   	push   eax
c00141ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014203:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014207:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001420c:	75 35                	jne    c0014243 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c001420e:	8d 43 20             	lea    eax,[ebx+0x20]
c0014211:	31 d2                	xor    edx,edx
c0014213:	89 c1                	mov    ecx,eax
c0014215:	c1 e1 04             	shl    ecx,0x4
c0014218:	01 f1                	add    ecx,esi
c001421a:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014222:	74 3e                	je     c0014262 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014224:	42                   	inc    edx
c0014225:	83 fa 04             	cmp    edx,0x4
c0014228:	75 f0                	jne    c001421a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c001422a:	83 ec 0c             	sub    esp,0xc
c001422d:	68 ef ab 02 c0       	push   0xc002abef
c0014232:	e8 04 5c 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c0014237:	83 c4 10             	add    esp,0x10
c001423a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001423f:	5a                   	pop    edx
c0014240:	5b                   	pop    ebx
c0014241:	5e                   	pop    esi
c0014242:	c3                   	ret    
c0014243:	83 ec 0c             	sub    esp,0xc
c0014246:	56                   	push   esi
c0014247:	e8 bc fb ff ff       	call   c0013e08 <Device::getName()>
c001424c:	83 c4 10             	add    esp,0x10
c001424f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014252:	75 ba                	jne    c001420e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014254:	83 fb 0f             	cmp    ebx,0xf
c0014257:	7f 29                	jg     c0014282 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014259:	0f b6 9b 20 cc 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd33e0]
c0014260:	eb ac                	jmp    c001420e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014262:	8d 04 82             	lea    eax,[edx+eax*4]
c0014265:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014269:	8d 04 86             	lea    eax,[esi+eax*4]
c001426c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014272:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014276:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c001427c:	89 d8                	mov    eax,ebx
c001427e:	5a                   	pop    edx
c001427f:	5b                   	pop    ebx
c0014280:	5e                   	pop    esi
c0014281:	c3                   	ret    
c0014282:	83 ec 0c             	sub    esp,0xc
c0014285:	68 e2 ab 02 c0       	push   0xc002abe2
c001428a:	e8 ac 5b 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c001428f:	83 c4 10             	add    esp,0x10
c0014292:	e9 77 ff ff ff       	jmp    c001420e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014297:	90                   	nop

c0014298 <InterruptController::clearAllHandlers(int, bool)>:
c0014298:	56                   	push   esi
c0014299:	53                   	push   ebx
c001429a:	52                   	push   edx
c001429b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001429f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00142a3:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00142a8:	75 61                	jne    c001430b <InterruptController::clearAllHandlers(int, bool)+0x73>
c00142aa:	8d 46 20             	lea    eax,[esi+0x20]
c00142ad:	c1 e6 04             	shl    esi,0x4
c00142b0:	c1 e0 04             	shl    eax,0x4
c00142b3:	01 de                	add    esi,ebx
c00142b5:	01 d8                	add    eax,ebx
c00142b7:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00142c1:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00142cb:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00142d5:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00142df:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00142e9:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00142f3:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00142fd:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014307:	58                   	pop    eax
c0014308:	5b                   	pop    ebx
c0014309:	5e                   	pop    esi
c001430a:	c3                   	ret    
c001430b:	83 ec 0c             	sub    esp,0xc
c001430e:	53                   	push   ebx
c001430f:	e8 f4 fa ff ff       	call   c0013e08 <Device::getName()>
c0014314:	83 c4 10             	add    esp,0x10
c0014317:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001431a:	75 8e                	jne    c00142aa <InterruptController::clearAllHandlers(int, bool)+0x12>
c001431c:	83 fe 0f             	cmp    esi,0xf
c001431f:	7f 09                	jg     c001432a <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014321:	0f b6 b6 20 cc 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd33e0]
c0014328:	eb 80                	jmp    c00142aa <InterruptController::clearAllHandlers(int, bool)+0x12>
c001432a:	83 ec 0c             	sub    esp,0xc
c001432d:	68 fc ab 02 c0       	push   0xc002abfc
c0014332:	e8 04 5b 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c0014337:	83 c4 10             	add    esp,0x10
c001433a:	e9 6b ff ff ff       	jmp    c00142aa <InterruptController::clearAllHandlers(int, bool)+0x12>
c001433f:	90                   	nop

c0014340 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014340:	56                   	push   esi
c0014341:	53                   	push   ebx
c0014342:	52                   	push   edx
c0014343:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014347:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001434b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014350:	75 3a                	jne    c001438c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014352:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014356:	8d 50 20             	lea    edx,[eax+0x20]
c0014359:	c1 e2 04             	shl    edx,0x4
c001435c:	8d 04 16             	lea    eax,[esi+edx*1]
c001435f:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014363:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014369:	74 0b                	je     c0014376 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c001436b:	83 c0 04             	add    eax,0x4
c001436e:	39 d0                	cmp    eax,edx
c0014370:	75 f1                	jne    c0014363 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014372:	58                   	pop    eax
c0014373:	5b                   	pop    ebx
c0014374:	5e                   	pop    esi
c0014375:	c3                   	ret    
c0014376:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014380:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001438a:	eb df                	jmp    c001436b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001438c:	83 ec 0c             	sub    esp,0xc
c001438f:	56                   	push   esi
c0014390:	e8 73 fa ff ff       	call   c0013e08 <Device::getName()>
c0014395:	83 c4 10             	add    esp,0x10
c0014398:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001439b:	75 b5                	jne    c0014352 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001439d:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00143a2:	7f 11                	jg     c00143b5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00143a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143a8:	0f b6 80 20 cc 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd33e0]
c00143af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00143b3:	eb 9d                	jmp    c0014352 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00143b5:	83 ec 0c             	sub    esp,0xc
c00143b8:	68 09 ac 02 c0       	push   0xc002ac09
c00143bd:	e8 79 5a 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c00143c2:	83 c4 10             	add    esp,0x10
c00143c5:	eb 8b                	jmp    c0014352 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00143c7 <nmiHandler(regs*, void*)>:
c00143c7:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00143cc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00143d0:	e9 2b a9 ff ff       	jmp    c000ed00 <Computer::handleNMI()>

c00143d5 <int_handler>:
c00143d5:	55                   	push   ebp
c00143d6:	57                   	push   edi
c00143d7:	56                   	push   esi
c00143d8:	53                   	push   ebx
c00143d9:	83 ec 0c             	sub    esp,0xc
c00143dc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00143e0:	80 3d 04 05 03 c0 00 	cmp    BYTE PTR ds:0xc0030504,0x0
c00143e7:	74 0b                	je     c00143f4 <int_handler+0x1f>
c00143e9:	fa                   	cli    
c00143ea:	f4                   	hlt    
c00143eb:	80 3d 04 05 03 c0 00 	cmp    BYTE PTR ds:0xc0030504,0x0
c00143f2:	75 f5                	jne    c00143e9 <int_handler+0x14>
c00143f4:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00143f9:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00143fc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014402:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014408:	8d 43 e0             	lea    eax,[ebx-0x20]
c001440b:	83 f8 17             	cmp    eax,0x17
c001440e:	77 13                	ja     c0014423 <int_handler+0x4e>
c0014410:	83 ec 08             	sub    esp,0x8
c0014413:	8b 17                	mov    edx,DWORD PTR [edi]
c0014415:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014418:	0f b6 c0             	movzx  eax,al
c001441b:	50                   	push   eax
c001441c:	57                   	push   edi
c001441d:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014420:	83 c4 10             	add    esp,0x10
c0014423:	83 c3 15             	add    ebx,0x15
c0014426:	c1 e3 04             	shl    ebx,0x4
c0014429:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c001442d:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014434:	31 db                	xor    ebx,ebx
c0014436:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001443a:	85 c0                	test   eax,eax
c001443c:	74 13                	je     c0014451 <int_handler+0x7c>
c001443e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014441:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014445:	74 1c                	je     c0014463 <int_handler+0x8e>
c0014447:	83 ec 08             	sub    esp,0x8
c001444a:	52                   	push   edx
c001444b:	56                   	push   esi
c001444c:	ff d0                	call   eax
c001444e:	83 c4 10             	add    esp,0x10
c0014451:	43                   	inc    ebx
c0014452:	83 fb 04             	cmp    ebx,0x4
c0014455:	75 df                	jne    c0014436 <int_handler+0x61>
c0014457:	83 c4 0c             	add    esp,0xc
c001445a:	31 c0                	xor    eax,eax
c001445c:	5b                   	pop    ebx
c001445d:	31 d2                	xor    edx,edx
c001445f:	5e                   	pop    esi
c0014460:	5f                   	pop    edi
c0014461:	5d                   	pop    ebp
c0014462:	c3                   	ret    
c0014463:	83 ec 08             	sub    esp,0x8
c0014466:	52                   	push   edx
c0014467:	56                   	push   esi
c0014468:	ff d0                	call   eax
c001446a:	83 c4 10             	add    esp,0x10
c001446d:	83 c4 0c             	add    esp,0xc
c0014470:	5b                   	pop    ebx
c0014471:	5e                   	pop    esi
c0014472:	5f                   	pop    edi
c0014473:	5d                   	pop    ebp
c0014474:	c3                   	ret    
c0014475:	90                   	nop

c0014476 <InterruptController::InterruptController(char const*)>:
c0014476:	83 ec 1c             	sub    esp,0x1c
c0014479:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001447d:	83 ec 08             	sub    esp,0x8
c0014480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014484:	50                   	push   eax
c0014485:	e8 82 f8 ff ff       	call   c0013d0c <Device::Device(char const*)>
c001448a:	83 c4 10             	add    esp,0x10
c001448d:	ba c4 ae 02 c0       	mov    edx,0xc002aec4
c0014492:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014496:	89 10                	mov    DWORD PTR [eax],edx
c0014498:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001449c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00144a6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00144ae:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00144b6:	7f 5e                	jg     c0014516 <InterruptController::InterruptController(char const*)+0xa0>
c00144b8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00144c0:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00144c5:	7f 49                	jg     c0014510 <InterruptController::InterruptController(char const*)+0x9a>
c00144c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00144cf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00144d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00144da:	01 ca                	add    edx,ecx
c00144dc:	83 c2 54             	add    edx,0x54
c00144df:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00144e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00144ef:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00144f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00144fa:	01 ca                	add    edx,ecx
c00144fc:	81 c2 54 04 00 00    	add    edx,0x454
c0014502:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001450a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001450e:	eb b0                	jmp    c00144c0 <InterruptController::InterruptController(char const*)+0x4a>
c0014510:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014514:	eb 98                	jmp    c00144ae <InterruptController::InterruptController(char const*)+0x38>
c0014516:	90                   	nop
c0014517:	83 c4 1c             	add    esp,0x1c
c001451a:	c3                   	ret    
c001451b:	90                   	nop

c001451c <InterruptController::~InterruptController()>:
c001451c:	83 ec 0c             	sub    esp,0xc
c001451f:	ba c4 ae 02 c0       	mov    edx,0xc002aec4
c0014524:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014528:	89 10                	mov    DWORD PTR [eax],edx
c001452a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001452e:	83 ec 0c             	sub    esp,0xc
c0014531:	50                   	push   eax
c0014532:	e8 9f f4 ff ff       	call   c00139d6 <Device::~Device()>
c0014537:	83 c4 10             	add    esp,0x10
c001453a:	90                   	nop
c001453b:	83 c4 0c             	add    esp,0xc
c001453e:	c3                   	ret    
c001453f:	90                   	nop

c0014540 <InterruptController::~InterruptController()>:
c0014540:	83 ec 0c             	sub    esp,0xc
c0014543:	83 ec 0c             	sub    esp,0xc
c0014546:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001454a:	e8 cd ff ff ff       	call   c001451c <InterruptController::~InterruptController()>
c001454f:	83 c4 10             	add    esp,0x10
c0014552:	83 ec 08             	sub    esp,0x8
c0014555:	68 58 21 00 00       	push   0x2158
c001455a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001455e:	e8 94 e0 ff ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0014563:	83 c4 10             	add    esp,0x10
c0014566:	83 c4 0c             	add    esp,0xc
c0014569:	c3                   	ret    

c001456a <displayDebugInfo(regs*)>:
c001456a:	55                   	push   ebp
c001456b:	57                   	push   edi
c001456c:	56                   	push   esi
c001456d:	53                   	push   ebx
c001456e:	83 ec 24             	sub    esp,0x24
c0014571:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014575:	0f 20 c2             	mov    edx,cr0
c0014578:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001457c:	0f 20 d7             	mov    edi,cr2
c001457f:	0f 20 de             	mov    esi,cr3
c0014582:	0f 20 e5             	mov    ebp,cr4
c0014585:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014588:	68 16 ac 02 c0       	push   0xc002ac16
c001458d:	e8 3d e1 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0014592:	59                   	pop    ecx
c0014593:	58                   	pop    eax
c0014594:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014597:	68 21 ac 02 c0       	push   0xc002ac21
c001459c:	e8 2e e1 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c00145a1:	58                   	pop    eax
c00145a2:	5a                   	pop    edx
c00145a3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00145a6:	68 2c ac 02 c0       	push   0xc002ac2c
c00145ab:	e8 1f e1 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c00145b0:	59                   	pop    ecx
c00145b1:	58                   	pop    eax
c00145b2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00145b5:	68 37 ac 02 c0       	push   0xc002ac37
c00145ba:	e8 10 e1 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c00145bf:	58                   	pop    eax
c00145c0:	5a                   	pop    edx
c00145c1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00145c4:	68 42 ac 02 c0       	push   0xc002ac42
c00145c9:	e8 01 e1 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c00145ce:	59                   	pop    ecx
c00145cf:	58                   	pop    eax
c00145d0:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00145d3:	68 4d ac 02 c0       	push   0xc002ac4d
c00145d8:	e8 f2 e0 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c00145dd:	58                   	pop    eax
c00145de:	5a                   	pop    edx
c00145df:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00145e2:	68 58 ac 02 c0       	push   0xc002ac58
c00145e7:	e8 e3 e0 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c00145ec:	59                   	pop    ecx
c00145ed:	58                   	pop    eax
c00145ee:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00145f1:	68 63 ac 02 c0       	push   0xc002ac63
c00145f6:	e8 d4 e0 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c00145fb:	58                   	pop    eax
c00145fc:	5a                   	pop    edx
c00145fd:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014600:	68 6e ac 02 c0       	push   0xc002ac6e
c0014605:	e8 c5 e0 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c001460a:	59                   	pop    ecx
c001460b:	58                   	pop    eax
c001460c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001460f:	68 7d ac 02 c0       	push   0xc002ac7d
c0014614:	e8 b6 e0 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0014619:	58                   	pop    eax
c001461a:	5a                   	pop    edx
c001461b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001461e:	68 88 ac 02 c0       	push   0xc002ac88
c0014623:	e8 a7 e0 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0014628:	59                   	pop    ecx
c0014629:	58                   	pop    eax
c001462a:	57                   	push   edi
c001462b:	68 93 ac 02 c0       	push   0xc002ac93
c0014630:	e8 9a e0 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0014635:	58                   	pop    eax
c0014636:	5a                   	pop    edx
c0014637:	56                   	push   esi
c0014638:	68 9e ac 02 c0       	push   0xc002ac9e
c001463d:	e8 8d e0 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0014642:	59                   	pop    ecx
c0014643:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0014648:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001464e:	e8 00 bd ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c0014653:	58                   	pop    eax
c0014654:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014657:	5a                   	pop    edx
c0014658:	c1 e0 05             	shl    eax,0x5
c001465b:	05 80 c9 02 c0       	add    eax,0xc002c980
c0014660:	50                   	push   eax
c0014661:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0014666:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001466c:	e8 ef c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014671:	59                   	pop    ecx
c0014672:	58                   	pop    eax
c0014673:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0014678:	68 a9 ac 02 c0       	push   0xc002aca9
c001467d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014683:	e8 d8 c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014688:	58                   	pop    eax
c0014689:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001468e:	5a                   	pop    edx
c001468f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014692:	83 c0 0c             	add    eax,0xc
c0014695:	50                   	push   eax
c0014696:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001469b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146a1:	e8 ba c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00146a6:	59                   	pop    ecx
c00146a7:	58                   	pop    eax
c00146a8:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00146ad:	68 b2 ac 02 c0       	push   0xc002acb2
c00146b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146b8:	e8 a3 c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00146bd:	58                   	pop    eax
c00146be:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00146c3:	5a                   	pop    edx
c00146c4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00146c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146cd:	e8 48 c1 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00146d2:	59                   	pop    ecx
c00146d3:	58                   	pop    eax
c00146d4:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00146d9:	68 ba ac 02 c0       	push   0xc002acba
c00146de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146e4:	e8 77 c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00146e9:	58                   	pop    eax
c00146ea:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00146ef:	5a                   	pop    edx
c00146f0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00146f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146f9:	e8 1c c1 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00146fe:	59                   	pop    ecx
c00146ff:	58                   	pop    eax
c0014700:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0014705:	68 c2 ac 02 c0       	push   0xc002acc2
c001470a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014710:	e8 4b c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014715:	58                   	pop    eax
c0014716:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001471b:	5a                   	pop    edx
c001471c:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001471f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014725:	e8 f0 c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001472a:	59                   	pop    ecx
c001472b:	58                   	pop    eax
c001472c:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0014731:	68 ca ac 02 c0       	push   0xc002acca
c0014736:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001473c:	e8 1f c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014741:	58                   	pop    eax
c0014742:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0014747:	5a                   	pop    edx
c0014748:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001474b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014751:	e8 c4 c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014756:	59                   	pop    ecx
c0014757:	58                   	pop    eax
c0014758:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001475d:	68 d2 ac 02 c0       	push   0xc002acd2
c0014762:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014768:	e8 f3 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001476d:	58                   	pop    eax
c001476e:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0014773:	5a                   	pop    edx
c0014774:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014777:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001477d:	e8 98 c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014782:	59                   	pop    ecx
c0014783:	58                   	pop    eax
c0014784:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0014789:	68 da ac 02 c0       	push   0xc002acda
c001478e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014794:	e8 c7 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014799:	58                   	pop    eax
c001479a:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001479f:	5a                   	pop    edx
c00147a0:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00147a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147a9:	e8 6c c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00147ae:	59                   	pop    ecx
c00147af:	58                   	pop    eax
c00147b0:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00147b5:	68 e2 ac 02 c0       	push   0xc002ace2
c00147ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147c0:	e8 9b c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00147c5:	58                   	pop    eax
c00147c6:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00147cb:	5a                   	pop    edx
c00147cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00147d0:	52                   	push   edx
c00147d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147d7:	e8 3e c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00147dc:	59                   	pop    ecx
c00147dd:	58                   	pop    eax
c00147de:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00147e3:	68 eb ac 02 c0       	push   0xc002aceb
c00147e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147ee:	e8 6d c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00147f3:	58                   	pop    eax
c00147f4:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00147f9:	5a                   	pop    edx
c00147fa:	57                   	push   edi
c00147fb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014801:	e8 14 c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014806:	59                   	pop    ecx
c0014807:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001480c:	5f                   	pop    edi
c001480d:	68 f3 ac 02 c0       	push   0xc002acf3
c0014812:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014818:	e8 43 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001481d:	58                   	pop    eax
c001481e:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0014823:	5a                   	pop    edx
c0014824:	56                   	push   esi
c0014825:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001482b:	e8 ea bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014830:	59                   	pop    ecx
c0014831:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0014836:	5e                   	pop    esi
c0014837:	68 fb ac 02 c0       	push   0xc002acfb
c001483c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014842:	e8 19 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014847:	5f                   	pop    edi
c0014848:	58                   	pop    eax
c0014849:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001484e:	55                   	push   ebp
c001484f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014855:	e8 c0 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001485a:	58                   	pop    eax
c001485b:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0014860:	5a                   	pop    edx
c0014861:	68 03 ad 02 c0       	push   0xc002ad03
c0014866:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001486c:	e8 ef bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014871:	0f 21 c0             	mov    eax,db0
c0014874:	59                   	pop    ecx
c0014875:	5e                   	pop    esi
c0014876:	50                   	push   eax
c0014877:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001487c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014882:	e8 93 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014887:	5f                   	pop    edi
c0014888:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001488d:	5d                   	pop    ebp
c001488e:	68 0c ad 02 c0       	push   0xc002ad0c
c0014893:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014899:	e8 c2 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001489e:	0f 21 c8             	mov    eax,db1
c00148a1:	5a                   	pop    edx
c00148a2:	59                   	pop    ecx
c00148a3:	50                   	push   eax
c00148a4:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00148a9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148af:	e8 66 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00148b4:	5e                   	pop    esi
c00148b5:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00148ba:	5f                   	pop    edi
c00148bb:	68 14 ad 02 c0       	push   0xc002ad14
c00148c0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148c6:	e8 95 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00148cb:	0f 21 d0             	mov    eax,db2
c00148ce:	5d                   	pop    ebp
c00148cf:	5a                   	pop    edx
c00148d0:	50                   	push   eax
c00148d1:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00148d6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148dc:	e8 39 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00148e1:	59                   	pop    ecx
c00148e2:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00148e7:	5e                   	pop    esi
c00148e8:	68 1c ad 02 c0       	push   0xc002ad1c
c00148ed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148f3:	e8 68 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00148f8:	0f 21 d8             	mov    eax,db3
c00148fb:	5f                   	pop    edi
c00148fc:	5d                   	pop    ebp
c00148fd:	50                   	push   eax
c00148fe:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0014903:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014909:	e8 0c bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001490e:	58                   	pop    eax
c001490f:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0014914:	5a                   	pop    edx
c0014915:	68 24 ad 02 c0       	push   0xc002ad24
c001491a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014920:	e8 3b bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014925:	0f 21 f0             	mov    eax,db6
c0014928:	59                   	pop    ecx
c0014929:	5e                   	pop    esi
c001492a:	50                   	push   eax
c001492b:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0014930:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014936:	e8 df be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001493b:	5f                   	pop    edi
c001493c:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0014941:	5d                   	pop    ebp
c0014942:	68 2c ad 02 c0       	push   0xc002ad2c
c0014947:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001494d:	e8 0e bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014952:	0f 21 f8             	mov    eax,db7
c0014955:	5a                   	pop    edx
c0014956:	59                   	pop    ecx
c0014957:	50                   	push   eax
c0014958:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001495d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014963:	e8 b2 be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014968:	5e                   	pop    esi
c0014969:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001496c:	e8 43 86 00 00       	call   c001cfb4 <Thr::getDriverNameFromAddress(unsigned long)>
c0014971:	83 c4 10             	add    esp,0x10
c0014974:	85 c0                	test   eax,eax
c0014976:	74 7d                	je     c00149f5 <displayDebugInfo(regs*)+0x48b>
c0014978:	89 c6                	mov    esi,eax
c001497a:	50                   	push   eax
c001497b:	50                   	push   eax
c001497c:	56                   	push   esi
c001497d:	68 34 ad 02 c0       	push   0xc002ad34
c0014982:	e8 48 dd ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0014987:	5a                   	pop    edx
c0014988:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001498d:	59                   	pop    ecx
c001498e:	68 42 ad 02 c0       	push   0xc002ad42
c0014993:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014999:	e8 c2 be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001499e:	5f                   	pop    edi
c001499f:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00149a4:	5d                   	pop    ebp
c00149a5:	56                   	push   esi
c00149a6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149ac:	e8 af be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00149b1:	58                   	pop    eax
c00149b2:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00149b7:	5a                   	pop    edx
c00149b8:	68 4e ad 02 c0       	push   0xc002ad4e
c00149bd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149c3:	e8 98 be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00149c8:	59                   	pop    ecx
c00149c9:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00149ce:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00149d4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00149d7:	e8 0f 86 00 00       	call   c001cfeb <Thr::getDriverOffsetFromAddress(unsigned long)>
c00149dc:	5b                   	pop    ebx
c00149dd:	5d                   	pop    ebp
c00149de:	50                   	push   eax
c00149df:	57                   	push   edi
c00149e0:	e8 35 be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00149e5:	58                   	pop    eax
c00149e6:	5a                   	pop    edx
c00149e7:	56                   	push   esi
c00149e8:	68 5a ad 02 c0       	push   0xc002ad5a
c00149ed:	e8 dd dc ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c00149f2:	83 c4 10             	add    esp,0x10
c00149f5:	fa                   	cli    
c00149f6:	f4                   	hlt    
c00149f7:	eb fe                	jmp    c00149f7 <displayDebugInfo(regs*)+0x48d>

c00149f9 <x87EmulHandler(regs*, void*)>:
c00149f9:	83 ec 0c             	sub    esp,0xc
c00149fc:	0f 20 c2             	mov    edx,cr0
c00149ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a04:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014a08:	75 4b                	jne    c0014a55 <x87EmulHandler(regs*, void*)+0x5c>
c0014a0a:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0014a0f:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014a15:	85 c0                	test   eax,eax
c0014a17:	74 05                	je     c0014a1e <x87EmulHandler(regs*, void*)+0x25>
c0014a19:	83 e2 08             	and    edx,0x8
c0014a1c:	75 17                	jne    c0014a35 <x87EmulHandler(regs*, void*)+0x3c>
c0014a1e:	83 ec 0c             	sub    esp,0xc
c0014a21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a25:	e8 61 a9 00 00       	call   c001f38b <Vm::x87Handler(regs*)>
c0014a2a:	83 c4 10             	add    esp,0x10
c0014a2d:	84 c0                	test   al,al
c0014a2f:	74 24                	je     c0014a55 <x87EmulHandler(regs*, void*)+0x5c>
c0014a31:	83 c4 0c             	add    esp,0xc
c0014a34:	c3                   	ret    
c0014a35:	83 ec 0c             	sub    esp,0xc
c0014a38:	68 80 ad 02 c0       	push   0xc002ad80
c0014a3d:	e8 8d dc ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0014a42:	0f 06                	clts   
c0014a44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a49:	83 c4 10             	add    esp,0x10
c0014a4c:	a3 48 db 02 c0       	mov    ds:0xc002db48,eax
c0014a51:	83 c4 0c             	add    esp,0xc
c0014a54:	c3                   	ret    
c0014a55:	83 ec 0c             	sub    esp,0xc
c0014a58:	68 6a ad 02 c0       	push   0xc002ad6a
c0014a5d:	e8 6d dc ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0014a62:	5a                   	pop    edx
c0014a63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a67:	e8 fe fa ff ff       	call   c001456a <displayDebugInfo(regs*)>

c0014a6c <gpFault(regs*, void*)>:
c0014a6c:	53                   	push   ebx
c0014a6d:	83 ec 14             	sub    esp,0x14
c0014a70:	c7 05 44 db 02 c0 64 e8 01 c0 	mov    DWORD PTR ds:0xc002db44,0xc001e864
c0014a7a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014a7e:	53                   	push   ebx
c0014a7f:	e8 e0 9d 00 00       	call   c001e864 <Vm::faultHandler(regs*)>
c0014a84:	83 c4 10             	add    esp,0x10
c0014a87:	84 c0                	test   al,al
c0014a89:	74 05                	je     c0014a90 <gpFault(regs*, void*)+0x24>
c0014a8b:	83 c4 08             	add    esp,0x8
c0014a8e:	5b                   	pop    ebx
c0014a8f:	c3                   	ret    
c0014a90:	83 ec 0c             	sub    esp,0xc
c0014a93:	68 8d ad 02 c0       	push   0xc002ad8d
c0014a98:	e8 32 dc ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0014a9d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014aa0:	e8 c5 fa ff ff       	call   c001456a <displayDebugInfo(regs*)>

c0014aa5 <pgFault(regs*, void*)>:
c0014aa5:	83 ec 18             	sub    esp,0x18
c0014aa8:	68 a8 ad 02 c0       	push   0xc002ada8
c0014aad:	e8 1d dc ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0014ab2:	0f 20 d0             	mov    eax,cr2
c0014ab5:	5a                   	pop    edx
c0014ab6:	59                   	pop    ecx
c0014ab7:	50                   	push   eax
c0014ab8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014abd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ac0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0014ac6:	e8 29 d7 ff ff       	call   c00121f4 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014acb:	83 c4 10             	add    esp,0x10
c0014ace:	84 c0                	test   al,al
c0014ad0:	74 04                	je     c0014ad6 <pgFault(regs*, void*)+0x31>
c0014ad2:	83 c4 0c             	add    esp,0xc
c0014ad5:	c3                   	ret    
c0014ad6:	83 ec 0c             	sub    esp,0xc
c0014ad9:	68 b2 ad 02 c0       	push   0xc002adb2
c0014ade:	e8 ec db ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0014ae3:	58                   	pop    eax
c0014ae4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ae8:	e8 7d fa ff ff       	call   c001456a <displayDebugInfo(regs*)>

c0014aed <otherISRHandler(regs*, void*)>:
c0014aed:	53                   	push   ebx
c0014aee:	83 ec 0c             	sub    esp,0xc
c0014af1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014af5:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014af8:	50                   	push   eax
c0014af9:	50                   	push   eax
c0014afa:	68 bf ad 02 c0       	push   0xc002adbf
c0014aff:	e8 cb db ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0014b04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b07:	e8 5e fa ff ff       	call   c001456a <displayDebugInfo(regs*)>

c0014b0c <opcodeFault(regs*, void*)>:
c0014b0c:	55                   	push   ebp
c0014b0d:	89 e5                	mov    ebp,esp
c0014b0f:	56                   	push   esi
c0014b10:	53                   	push   ebx
c0014b11:	83 ec 40             	sub    esp,0x40
c0014b14:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0014b19:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014b1f:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014b25:	84 c0                	test   al,al
c0014b27:	74 24                	je     c0014b4d <opcodeFault(regs*, void*)+0x41>
c0014b29:	83 ec 0c             	sub    esp,0xc
c0014b2c:	68 dc ad 02 c0       	push   0xc002addc
c0014b31:	e8 99 db ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0014b36:	83 c4 10             	add    esp,0x10
c0014b39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b3c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b3f:	8d 50 19             	lea    edx,[eax+0x19]
c0014b42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b45:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b48:	e9 d5 05 00 00       	jmp    c0015122 <opcodeFault(regs*, void*)+0x616>
c0014b4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b50:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b53:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014b56:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014b5a:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014b5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b61:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b64:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014b67:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b6a:	8a 00                	mov    al,BYTE PTR [eax]
c0014b6c:	3c f0                	cmp    al,0xf0
c0014b6e:	75 17                	jne    c0014b87 <opcodeFault(regs*, void*)+0x7b>
c0014b70:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b76:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b79:	8d 50 01             	lea    edx,[eax+0x1]
c0014b7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b7f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b82:	e9 da 00 00 00       	jmp    c0014c61 <opcodeFault(regs*, void*)+0x155>
c0014b87:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b8a:	8a 00                	mov    al,BYTE PTR [eax]
c0014b8c:	3c f2                	cmp    al,0xf2
c0014b8e:	74 09                	je     c0014b99 <opcodeFault(regs*, void*)+0x8d>
c0014b90:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b93:	8a 00                	mov    al,BYTE PTR [eax]
c0014b95:	3c f3                	cmp    al,0xf3
c0014b97:	75 1b                	jne    c0014bb4 <opcodeFault(regs*, void*)+0xa8>
c0014b99:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b9d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ba0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ba3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ba6:	8d 50 01             	lea    edx,[eax+0x1]
c0014ba9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bac:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014baf:	e9 ad 00 00 00       	jmp    c0014c61 <opcodeFault(regs*, void*)+0x155>
c0014bb4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bb7:	8a 00                	mov    al,BYTE PTR [eax]
c0014bb9:	3c 66                	cmp    al,0x66
c0014bbb:	75 1f                	jne    c0014bdc <opcodeFault(regs*, void*)+0xd0>
c0014bbd:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014bc1:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014bc5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014bc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bcb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bce:	8d 50 01             	lea    edx,[eax+0x1]
c0014bd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bd4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bd7:	e9 85 00 00 00       	jmp    c0014c61 <opcodeFault(regs*, void*)+0x155>
c0014bdc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bdf:	8a 00                	mov    al,BYTE PTR [eax]
c0014be1:	3c 67                	cmp    al,0x67
c0014be3:	75 18                	jne    c0014bfd <opcodeFault(regs*, void*)+0xf1>
c0014be5:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014be9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014bec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bef:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bf2:	8d 50 01             	lea    edx,[eax+0x1]
c0014bf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bf8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bfb:	eb 64                	jmp    c0014c61 <opcodeFault(regs*, void*)+0x155>
c0014bfd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c00:	8a 00                	mov    al,BYTE PTR [eax]
c0014c02:	3c 2e                	cmp    al,0x2e
c0014c04:	74 09                	je     c0014c0f <opcodeFault(regs*, void*)+0x103>
c0014c06:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c09:	8a 00                	mov    al,BYTE PTR [eax]
c0014c0b:	3c 3e                	cmp    al,0x3e
c0014c0d:	75 18                	jne    c0014c27 <opcodeFault(regs*, void*)+0x11b>
c0014c0f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c13:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c19:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c1c:	8d 50 01             	lea    edx,[eax+0x1]
c0014c1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c22:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c25:	eb 3a                	jmp    c0014c61 <opcodeFault(regs*, void*)+0x155>
c0014c27:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c2a:	8a 00                	mov    al,BYTE PTR [eax]
c0014c2c:	3c 36                	cmp    al,0x36
c0014c2e:	74 1b                	je     c0014c4b <opcodeFault(regs*, void*)+0x13f>
c0014c30:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c33:	8a 00                	mov    al,BYTE PTR [eax]
c0014c35:	3c 26                	cmp    al,0x26
c0014c37:	74 12                	je     c0014c4b <opcodeFault(regs*, void*)+0x13f>
c0014c39:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c3c:	8a 00                	mov    al,BYTE PTR [eax]
c0014c3e:	3c 64                	cmp    al,0x64
c0014c40:	74 09                	je     c0014c4b <opcodeFault(regs*, void*)+0x13f>
c0014c42:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c45:	8a 00                	mov    al,BYTE PTR [eax]
c0014c47:	3c 65                	cmp    al,0x65
c0014c49:	75 16                	jne    c0014c61 <opcodeFault(regs*, void*)+0x155>
c0014c4b:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c4f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c55:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c58:	8d 50 01             	lea    edx,[eax+0x1]
c0014c5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c5e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c61:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c64:	8a 00                	mov    al,BYTE PTR [eax]
c0014c66:	3c 0f                	cmp    al,0xf
c0014c68:	0f 85 ad 00 00 00    	jne    c0014d1b <opcodeFault(regs*, void*)+0x20f>
c0014c6e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c71:	40                   	inc    eax
c0014c72:	8a 00                	mov    al,BYTE PTR [eax]
c0014c74:	3c c2                	cmp    al,0xc2
c0014c76:	74 0e                	je     c0014c86 <opcodeFault(regs*, void*)+0x17a>
c0014c78:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c7b:	40                   	inc    eax
c0014c7c:	8a 00                	mov    al,BYTE PTR [eax]
c0014c7e:	3c c3                	cmp    al,0xc3
c0014c80:	0f 85 95 00 00 00    	jne    c0014d1b <opcodeFault(regs*, void*)+0x20f>
c0014c86:	83 ec 0c             	sub    esp,0xc
c0014c89:	68 ff ad 02 c0       	push   0xc002adff
c0014c8e:	e8 3c da ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0014c93:	83 c4 10             	add    esp,0x10
c0014c96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c99:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c9c:	8d 50 01             	lea    edx,[eax+0x1]
c0014c9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ca5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ca8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cab:	8a 00                	mov    al,BYTE PTR [eax]
c0014cad:	8d 50 fe             	lea    edx,[eax-0x2]
c0014cb0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cb3:	88 10                	mov    BYTE PTR [eax],dl
c0014cb5:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014cb8:	50                   	push   eax
c0014cb9:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014cbc:	50                   	push   eax
c0014cbd:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014cc0:	50                   	push   eax
c0014cc1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014cc4:	e8 8b 48 00 00       	call   c0019554 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014cc9:	83 c4 10             	add    esp,0x10
c0014ccc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ccf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cd2:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014cd5:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014cd8:	01 d0                	add    eax,edx
c0014cda:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014cdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ce3:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014ce6:	48                   	dec    eax
c0014ce7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014cea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ced:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014cf0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf6:	83 ec 04             	sub    esp,0x4
c0014cf9:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014cfc:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014cff:	50                   	push   eax
c0014d00:	e8 af b4 fe ff       	call   c00001b4 <voodooXADD>
c0014d05:	83 c4 10             	add    esp,0x10
c0014d08:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014d0b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014d0e:	01 c2                	add    edx,eax
c0014d10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d13:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d16:	e9 07 04 00 00       	jmp    c0015122 <opcodeFault(regs*, void*)+0x616>
c0014d1b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d1e:	8a 00                	mov    al,BYTE PTR [eax]
c0014d20:	3c 0f                	cmp    al,0xf
c0014d22:	0f 85 8b 01 00 00    	jne    c0014eb3 <opcodeFault(regs*, void*)+0x3a7>
c0014d28:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d2b:	40                   	inc    eax
c0014d2c:	8a 00                	mov    al,BYTE PTR [eax]
c0014d2e:	3c c7                	cmp    al,0xc7
c0014d30:	0f 86 7d 01 00 00    	jbe    c0014eb3 <opcodeFault(regs*, void*)+0x3a7>
c0014d36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d39:	40                   	inc    eax
c0014d3a:	8a 00                	mov    al,BYTE PTR [eax]
c0014d3c:	3c cf                	cmp    al,0xcf
c0014d3e:	0f 87 6f 01 00 00    	ja     c0014eb3 <opcodeFault(regs*, void*)+0x3a7>
c0014d44:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d47:	40                   	inc    eax
c0014d48:	8a 00                	mov    al,BYTE PTR [eax]
c0014d4a:	83 c0 38             	add    eax,0x38
c0014d4d:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014d50:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014d54:	75 0b                	jne    c0014d61 <opcodeFault(regs*, void*)+0x255>
c0014d56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d59:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014d5c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d5f:	eb 75                	jmp    c0014dd6 <opcodeFault(regs*, void*)+0x2ca>
c0014d61:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014d65:	75 0b                	jne    c0014d72 <opcodeFault(regs*, void*)+0x266>
c0014d67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d6a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014d6d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d70:	eb 64                	jmp    c0014dd6 <opcodeFault(regs*, void*)+0x2ca>
c0014d72:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014d76:	75 0b                	jne    c0014d83 <opcodeFault(regs*, void*)+0x277>
c0014d78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d7b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014d7e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d81:	eb 53                	jmp    c0014dd6 <opcodeFault(regs*, void*)+0x2ca>
c0014d83:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014d87:	75 0b                	jne    c0014d94 <opcodeFault(regs*, void*)+0x288>
c0014d89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d8c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014d8f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d92:	eb 42                	jmp    c0014dd6 <opcodeFault(regs*, void*)+0x2ca>
c0014d94:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014d98:	75 0b                	jne    c0014da5 <opcodeFault(regs*, void*)+0x299>
c0014d9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d9d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014da0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014da3:	eb 31                	jmp    c0014dd6 <opcodeFault(regs*, void*)+0x2ca>
c0014da5:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014da9:	75 0b                	jne    c0014db6 <opcodeFault(regs*, void*)+0x2aa>
c0014dab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dae:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014db1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014db4:	eb 20                	jmp    c0014dd6 <opcodeFault(regs*, void*)+0x2ca>
c0014db6:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014dba:	75 0b                	jne    c0014dc7 <opcodeFault(regs*, void*)+0x2bb>
c0014dbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dbf:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014dc2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014dc5:	eb 0f                	jmp    c0014dd6 <opcodeFault(regs*, void*)+0x2ca>
c0014dc7:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014dcb:	75 09                	jne    c0014dd6 <opcodeFault(regs*, void*)+0x2ca>
c0014dcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dd0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014dd3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014dd6:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014dda:	74 10                	je     c0014dec <opcodeFault(regs*, void*)+0x2e0>
c0014ddc:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014de3:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014dea:	eb 2d                	jmp    c0014e19 <opcodeFault(regs*, void*)+0x30d>
c0014dec:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014def:	c1 e0 18             	shl    eax,0x18
c0014df2:	89 c2                	mov    edx,eax
c0014df4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014df7:	c1 e0 08             	shl    eax,0x8
c0014dfa:	25 00 00 ff 00       	and    eax,0xff0000
c0014dff:	09 c2                	or     edx,eax
c0014e01:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014e04:	c1 e8 08             	shr    eax,0x8
c0014e07:	25 00 ff 00 00       	and    eax,0xff00
c0014e0c:	09 c2                	or     edx,eax
c0014e0e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014e11:	c1 e8 18             	shr    eax,0x18
c0014e14:	09 d0                	or     eax,edx
c0014e16:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e19:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014e1d:	75 0b                	jne    c0014e2a <opcodeFault(regs*, void*)+0x31e>
c0014e1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e22:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e25:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014e28:	eb 75                	jmp    c0014e9f <opcodeFault(regs*, void*)+0x393>
c0014e2a:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014e2e:	75 0b                	jne    c0014e3b <opcodeFault(regs*, void*)+0x32f>
c0014e30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e33:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e36:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014e39:	eb 64                	jmp    c0014e9f <opcodeFault(regs*, void*)+0x393>
c0014e3b:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014e3f:	75 0b                	jne    c0014e4c <opcodeFault(regs*, void*)+0x340>
c0014e41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e44:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e47:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014e4a:	eb 53                	jmp    c0014e9f <opcodeFault(regs*, void*)+0x393>
c0014e4c:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014e50:	75 0b                	jne    c0014e5d <opcodeFault(regs*, void*)+0x351>
c0014e52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e55:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e58:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014e5b:	eb 42                	jmp    c0014e9f <opcodeFault(regs*, void*)+0x393>
c0014e5d:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014e61:	75 0b                	jne    c0014e6e <opcodeFault(regs*, void*)+0x362>
c0014e63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e66:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e69:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014e6c:	eb 31                	jmp    c0014e9f <opcodeFault(regs*, void*)+0x393>
c0014e6e:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014e72:	75 0b                	jne    c0014e7f <opcodeFault(regs*, void*)+0x373>
c0014e74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e77:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e7a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014e7d:	eb 20                	jmp    c0014e9f <opcodeFault(regs*, void*)+0x393>
c0014e7f:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014e83:	75 0b                	jne    c0014e90 <opcodeFault(regs*, void*)+0x384>
c0014e85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e88:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e8b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014e8e:	eb 0f                	jmp    c0014e9f <opcodeFault(regs*, void*)+0x393>
c0014e90:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014e94:	75 09                	jne    c0014e9f <opcodeFault(regs*, void*)+0x393>
c0014e96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e99:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e9c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014e9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ea2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ea5:	8d 50 02             	lea    edx,[eax+0x2]
c0014ea8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eab:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014eae:	e9 6f 02 00 00       	jmp    c0015122 <opcodeFault(regs*, void*)+0x616>
c0014eb3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eb6:	8a 00                	mov    al,BYTE PTR [eax]
c0014eb8:	3c 0f                	cmp    al,0xf
c0014eba:	0f 85 8d 01 00 00    	jne    c001504d <opcodeFault(regs*, void*)+0x541>
c0014ec0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ec3:	40                   	inc    eax
c0014ec4:	8a 00                	mov    al,BYTE PTR [eax]
c0014ec6:	3c c7                	cmp    al,0xc7
c0014ec8:	0f 85 7f 01 00 00    	jne    c001504d <opcodeFault(regs*, void*)+0x541>
c0014ece:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ed1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ed4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ed7:	8d 50 01             	lea    edx,[eax+0x1]
c0014eda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014edd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ee0:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014ee3:	50                   	push   eax
c0014ee4:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014ee7:	50                   	push   eax
c0014ee8:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014eeb:	50                   	push   eax
c0014eec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014eef:	e8 60 46 00 00       	call   c0019554 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014ef4:	83 c4 10             	add    esp,0x10
c0014ef7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014efa:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014efd:	83 f0 01             	xor    eax,0x1
c0014f00:	84 c0                	test   al,al
c0014f02:	0f 84 45 01 00 00    	je     c001504d <opcodeFault(regs*, void*)+0x541>
c0014f08:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014f0b:	3c 01                	cmp    al,0x1
c0014f0d:	0f 85 3a 01 00 00    	jne    c001504d <opcodeFault(regs*, void*)+0x541>
c0014f13:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014f16:	83 f0 01             	xor    eax,0x1
c0014f19:	84 c0                	test   al,al
c0014f1b:	0f 84 2c 01 00 00    	je     c001504d <opcodeFault(regs*, void*)+0x541>
c0014f21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f24:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014f27:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014f2a:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014f31:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014f34:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014f37:	89 c2                	mov    edx,eax
c0014f39:	b8 00 00 00 00       	mov    eax,0x0
c0014f3e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014f41:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014f44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f47:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014f4a:	ba 00 00 00 00       	mov    edx,0x0
c0014f4f:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014f52:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014f55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f58:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014f5b:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014f5e:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014f65:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014f68:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014f6b:	89 c2                	mov    edx,eax
c0014f6d:	b8 00 00 00 00       	mov    eax,0x0
c0014f72:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014f75:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014f78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f7b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014f7e:	ba 00 00 00 00       	mov    edx,0x0
c0014f83:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014f86:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014f89:	fa                   	cli    
c0014f8a:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c0014f8f:	40                   	inc    eax
c0014f90:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c0014f95:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014f98:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014f9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f9d:	89 c1                	mov    ecx,eax
c0014f9f:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014fa2:	89 cb                	mov    ebx,ecx
c0014fa4:	89 d0                	mov    eax,edx
c0014fa6:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014fa9:	89 c6                	mov    esi,eax
c0014fab:	89 f0                	mov    eax,esi
c0014fad:	09 d8                	or     eax,ebx
c0014faf:	85 c0                	test   eax,eax
c0014fb1:	75 21                	jne    c0014fd4 <opcodeFault(regs*, void*)+0x4c8>
c0014fb3:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014fb6:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014fb9:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014fbc:	89 01                	mov    DWORD PTR [ecx],eax
c0014fbe:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014fc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014fc7:	83 c8 40             	or     eax,0x40
c0014fca:	89 c2                	mov    edx,eax
c0014fcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fcf:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014fd2:	eb 3e                	jmp    c0015012 <opcodeFault(regs*, void*)+0x506>
c0014fd4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014fd7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014fda:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fdc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014fdf:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014fe2:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014fe5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe8:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014feb:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014fee:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014ff1:	89 d0                	mov    eax,edx
c0014ff3:	31 d2                	xor    edx,edx
c0014ff5:	89 c3                	mov    ebx,eax
c0014ff7:	89 d6                	mov    esi,edx
c0014ff9:	89 da                	mov    edx,ebx
c0014ffb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ffe:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015004:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015007:	83 e0 bf             	and    eax,0xffffffbf
c001500a:	89 c2                	mov    edx,eax
c001500c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001500f:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015012:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c0015017:	48                   	dec    eax
c0015018:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001501d:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c0015022:	85 c0                	test   eax,eax
c0015024:	75 01                	jne    c0015027 <opcodeFault(regs*, void*)+0x51b>
c0015026:	fb                   	sti    
c0015027:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001502a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001502d:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015030:	01 c2                	add    edx,eax
c0015032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015035:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015038:	83 ec 0c             	sub    esp,0xc
c001503b:	68 0e ae 02 c0       	push   0xc002ae0e
c0015040:	e8 8a d6 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0015045:	83 c4 10             	add    esp,0x10
c0015048:	e9 d5 00 00 00       	jmp    c0015122 <opcodeFault(regs*, void*)+0x616>
c001504d:	83 ec 0c             	sub    esp,0xc
c0015050:	68 21 ae 02 c0       	push   0xc002ae21
c0015055:	e8 75 d6 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c001505a:	83 c4 10             	add    esp,0x10
c001505d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015060:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015063:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015066:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015069:	c1 e0 04             	shl    eax,0x4
c001506c:	01 d0                	add    eax,edx
c001506e:	83 c0 03             	add    eax,0x3
c0015071:	8a 00                	mov    al,BYTE PTR [eax]
c0015073:	0f b6 d8             	movzx  ebx,al
c0015076:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015079:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001507c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001507f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015082:	c1 e0 04             	shl    eax,0x4
c0015085:	01 d0                	add    eax,edx
c0015087:	83 c0 02             	add    eax,0x2
c001508a:	8a 00                	mov    al,BYTE PTR [eax]
c001508c:	0f b6 c8             	movzx  ecx,al
c001508f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015092:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015095:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015098:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001509b:	c1 e0 04             	shl    eax,0x4
c001509e:	01 d0                	add    eax,edx
c00150a0:	40                   	inc    eax
c00150a1:	8a 00                	mov    al,BYTE PTR [eax]
c00150a3:	0f b6 d0             	movzx  edx,al
c00150a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a9:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00150ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150af:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00150b2:	c1 e0 04             	shl    eax,0x4
c00150b5:	01 f0                	add    eax,esi
c00150b7:	8a 00                	mov    al,BYTE PTR [eax]
c00150b9:	0f b6 c0             	movzx  eax,al
c00150bc:	83 ec 0c             	sub    esp,0xc
c00150bf:	53                   	push   ebx
c00150c0:	51                   	push   ecx
c00150c1:	52                   	push   edx
c00150c2:	50                   	push   eax
c00150c3:	68 34 ae 02 c0       	push   0xc002ae34
c00150c8:	e8 02 d6 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c00150cd:	83 c4 20             	add    esp,0x20
c00150d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150d3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150d6:	83 c0 03             	add    eax,0x3
c00150d9:	8a 00                	mov    al,BYTE PTR [eax]
c00150db:	0f b6 d8             	movzx  ebx,al
c00150de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150e1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150e4:	83 c0 02             	add    eax,0x2
c00150e7:	8a 00                	mov    al,BYTE PTR [eax]
c00150e9:	0f b6 c8             	movzx  ecx,al
c00150ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ef:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150f2:	40                   	inc    eax
c00150f3:	8a 00                	mov    al,BYTE PTR [eax]
c00150f5:	0f b6 d0             	movzx  edx,al
c00150f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150fb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150fe:	8a 00                	mov    al,BYTE PTR [eax]
c0015100:	0f b6 c0             	movzx  eax,al
c0015103:	83 ec 0c             	sub    esp,0xc
c0015106:	53                   	push   ebx
c0015107:	51                   	push   ecx
c0015108:	52                   	push   edx
c0015109:	50                   	push   eax
c001510a:	68 5c ae 02 c0       	push   0xc002ae5c
c001510f:	e8 bb d5 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0015114:	83 c4 20             	add    esp,0x20
c0015117:	83 ec 0c             	sub    esp,0xc
c001511a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001511d:	e8 48 f4 ff ff       	call   c001456a <displayDebugInfo(regs*)>
c0015122:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015125:	5b                   	pop    ebx
c0015126:	5e                   	pop    esi
c0015127:	5d                   	pop    ebp
c0015128:	c3                   	ret    

c0015129 <displayProgramFault(char const*)>:
c0015129:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001512e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015131:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015137:	85 c0                	test   eax,eax
c0015139:	74 15                	je     c0015150 <displayProgramFault(char const*)+0x27>
c001513b:	83 ec 0c             	sub    esp,0xc
c001513e:	6a 04                	push   0x4
c0015140:	6a 0f                	push   0xf
c0015142:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015146:	50                   	push   eax
c0015147:	e8 10 b4 ff ff       	call   c001055c <VgaText::puts(char const*, VgaColour, VgaColour)>
c001514c:	83 c4 1c             	add    esp,0x1c
c001514f:	c3                   	ret    
c0015150:	c3                   	ret    

c0015151 <setupInterruptController()>:
c0015151:	55                   	push   ebp
c0015152:	89 e5                	mov    ebp,esp
c0015154:	53                   	push   ebx
c0015155:	83 ec 24             	sub    esp,0x24
c0015158:	b8 00 00 00 00       	mov    eax,0x0
c001515d:	85 c0                	test   eax,eax
c001515f:	0f 95 c0             	setne  al
c0015162:	84 c0                	test   al,al
c0015164:	74 5b                	je     c00151c1 <setupInterruptController()+0x70>
c0015166:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c001516d:	83 ec 0c             	sub    esp,0xc
c0015170:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015173:	e8 21 a4 ff ff       	call   c000f599 <malloc>
c0015178:	83 c4 10             	add    esp,0x10
c001517b:	89 c3                	mov    ebx,eax
c001517d:	83 ec 0c             	sub    esp,0xc
c0015180:	53                   	push   ebx
c0015181:	e8 02 05 01 00       	call   c0025688 <APIC::APIC()>
c0015186:	83 c4 10             	add    esp,0x10
c0015189:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001518c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001518f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015192:	8b 00                	mov    eax,DWORD PTR [eax]
c0015194:	83 c0 08             	add    eax,0x8
c0015197:	8b 00                	mov    eax,DWORD PTR [eax]
c0015199:	6a 00                	push   0x0
c001519b:	6a 00                	push   0x0
c001519d:	6a 00                	push   0x0
c001519f:	52                   	push   edx
c00151a0:	ff d0                	call   eax
c00151a2:	83 c4 10             	add    esp,0x10
c00151a5:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00151aa:	83 ec 08             	sub    esp,0x8
c00151ad:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00151b0:	50                   	push   eax
c00151b1:	e8 52 e9 ff ff       	call   c0013b08 <Device::addChild(Device*)>
c00151b6:	83 c4 10             	add    esp,0x10
c00151b9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00151bc:	e9 79 03 00 00       	jmp    c001553a <setupInterruptController()+0x3e9>
c00151c1:	a0 40 03 03 c0       	mov    al,ds:0xc0030340
c00151c6:	84 c0                	test   al,al
c00151c8:	75 14                	jne    c00151de <setupInterruptController()+0x8d>
c00151ca:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00151cf:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00151d5:	83 e2 fe             	and    edx,0xfffffffe
c00151d8:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00151de:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00151e3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00151e9:	83 e0 01             	and    eax,0x1
c00151ec:	84 c0                	test   al,al
c00151ee:	0f 95 c0             	setne  al
c00151f1:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00151f4:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00151fb:	83 ec 0c             	sub    esp,0xc
c00151fe:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015201:	e8 93 a3 ff ff       	call   c000f599 <malloc>
c0015206:	83 c4 10             	add    esp,0x10
c0015209:	89 c3                	mov    ebx,eax
c001520b:	83 ec 0c             	sub    esp,0xc
c001520e:	53                   	push   ebx
c001520f:	e8 cc 09 01 00       	call   c0025be0 <PIC::PIC()>
c0015214:	83 c4 10             	add    esp,0x10
c0015217:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001521a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001521d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015220:	8b 00                	mov    eax,DWORD PTR [eax]
c0015222:	83 c0 08             	add    eax,0x8
c0015225:	8b 00                	mov    eax,DWORD PTR [eax]
c0015227:	6a 00                	push   0x0
c0015229:	6a 00                	push   0x0
c001522b:	6a 00                	push   0x0
c001522d:	52                   	push   edx
c001522e:	ff d0                	call   eax
c0015230:	83 c4 10             	add    esp,0x10
c0015233:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015237:	74 73                	je     c00152ac <setupInterruptController()+0x15b>
c0015239:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001523c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001523f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015241:	83 c0 0c             	add    eax,0xc
c0015244:	8b 00                	mov    eax,DWORD PTR [eax]
c0015246:	6a 00                	push   0x0
c0015248:	6a 00                	push   0x0
c001524a:	6a 00                	push   0x0
c001524c:	52                   	push   edx
c001524d:	ff d0                	call   eax
c001524f:	83 c4 10             	add    esp,0x10
c0015252:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015256:	74 15                	je     c001526d <setupInterruptController()+0x11c>
c0015258:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001525b:	8b 00                	mov    eax,DWORD PTR [eax]
c001525d:	83 c0 04             	add    eax,0x4
c0015260:	8b 00                	mov    eax,DWORD PTR [eax]
c0015262:	83 ec 0c             	sub    esp,0xc
c0015265:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015268:	ff d0                	call   eax
c001526a:	83 c4 10             	add    esp,0x10
c001526d:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015274:	83 ec 0c             	sub    esp,0xc
c0015277:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001527a:	e8 1a a3 ff ff       	call   c000f599 <malloc>
c001527f:	83 c4 10             	add    esp,0x10
c0015282:	89 c3                	mov    ebx,eax
c0015284:	83 ec 0c             	sub    esp,0xc
c0015287:	53                   	push   ebx
c0015288:	e8 fb 03 01 00       	call   c0025688 <APIC::APIC()>
c001528d:	83 c4 10             	add    esp,0x10
c0015290:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015293:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015296:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015299:	8b 00                	mov    eax,DWORD PTR [eax]
c001529b:	83 c0 08             	add    eax,0x8
c001529e:	8b 00                	mov    eax,DWORD PTR [eax]
c00152a0:	6a 00                	push   0x0
c00152a2:	6a 00                	push   0x0
c00152a4:	6a 00                	push   0x0
c00152a6:	52                   	push   edx
c00152a7:	ff d0                	call   eax
c00152a9:	83 c4 10             	add    esp,0x10
c00152ac:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00152b1:	83 ec 08             	sub    esp,0x8
c00152b4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152b7:	50                   	push   eax
c00152b8:	e8 4b e8 ff ff       	call   c0013b08 <Device::addChild(Device*)>
c00152bd:	83 c4 10             	add    esp,0x10
c00152c0:	c7 05 48 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002db48,0x0
c00152ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00152cf:	83 c0 24             	add    eax,0x24
c00152d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d4:	6a 00                	push   0x0
c00152d6:	68 ed 4a 01 c0       	push   0xc0014aed
c00152db:	6a 00                	push   0x0
c00152dd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152e0:	ff d0                	call   eax
c00152e2:	83 c4 10             	add    esp,0x10
c00152e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ea:	83 c0 24             	add    eax,0x24
c00152ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ef:	6a 00                	push   0x0
c00152f1:	68 ed 4a 01 c0       	push   0xc0014aed
c00152f6:	6a 01                	push   0x1
c00152f8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152fb:	ff d0                	call   eax
c00152fd:	83 c4 10             	add    esp,0x10
c0015300:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015303:	8b 00                	mov    eax,DWORD PTR [eax]
c0015305:	83 c0 24             	add    eax,0x24
c0015308:	8b 00                	mov    eax,DWORD PTR [eax]
c001530a:	6a 00                	push   0x0
c001530c:	68 c7 43 01 c0       	push   0xc00143c7
c0015311:	6a 02                	push   0x2
c0015313:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015316:	ff d0                	call   eax
c0015318:	83 c4 10             	add    esp,0x10
c001531b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001531e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015320:	83 c0 24             	add    eax,0x24
c0015323:	8b 00                	mov    eax,DWORD PTR [eax]
c0015325:	6a 00                	push   0x0
c0015327:	68 ed 4a 01 c0       	push   0xc0014aed
c001532c:	6a 03                	push   0x3
c001532e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015331:	ff d0                	call   eax
c0015333:	83 c4 10             	add    esp,0x10
c0015336:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015339:	8b 00                	mov    eax,DWORD PTR [eax]
c001533b:	83 c0 24             	add    eax,0x24
c001533e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015340:	6a 00                	push   0x0
c0015342:	68 ed 4a 01 c0       	push   0xc0014aed
c0015347:	6a 04                	push   0x4
c0015349:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001534c:	ff d0                	call   eax
c001534e:	83 c4 10             	add    esp,0x10
c0015351:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015354:	8b 00                	mov    eax,DWORD PTR [eax]
c0015356:	83 c0 24             	add    eax,0x24
c0015359:	8b 00                	mov    eax,DWORD PTR [eax]
c001535b:	6a 00                	push   0x0
c001535d:	68 ed 4a 01 c0       	push   0xc0014aed
c0015362:	6a 05                	push   0x5
c0015364:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015367:	ff d0                	call   eax
c0015369:	83 c4 10             	add    esp,0x10
c001536c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001536f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015371:	83 c0 24             	add    eax,0x24
c0015374:	8b 00                	mov    eax,DWORD PTR [eax]
c0015376:	6a 00                	push   0x0
c0015378:	68 0c 4b 01 c0       	push   0xc0014b0c
c001537d:	6a 06                	push   0x6
c001537f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015382:	ff d0                	call   eax
c0015384:	83 c4 10             	add    esp,0x10
c0015387:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001538a:	8b 00                	mov    eax,DWORD PTR [eax]
c001538c:	83 c0 24             	add    eax,0x24
c001538f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015391:	6a 00                	push   0x0
c0015393:	68 f9 49 01 c0       	push   0xc00149f9
c0015398:	6a 07                	push   0x7
c001539a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001539d:	ff d0                	call   eax
c001539f:	83 c4 10             	add    esp,0x10
c00153a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a7:	83 c0 24             	add    eax,0x24
c00153aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ac:	6a 00                	push   0x0
c00153ae:	68 e2 41 01 c0       	push   0xc00141e2
c00153b3:	6a 08                	push   0x8
c00153b5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153b8:	ff d0                	call   eax
c00153ba:	83 c4 10             	add    esp,0x10
c00153bd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c2:	83 c0 24             	add    eax,0x24
c00153c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c7:	6a 00                	push   0x0
c00153c9:	68 ed 4a 01 c0       	push   0xc0014aed
c00153ce:	6a 09                	push   0x9
c00153d0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153d3:	ff d0                	call   eax
c00153d5:	83 c4 10             	add    esp,0x10
c00153d8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153db:	8b 00                	mov    eax,DWORD PTR [eax]
c00153dd:	83 c0 24             	add    eax,0x24
c00153e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e2:	6a 00                	push   0x0
c00153e4:	68 ed 4a 01 c0       	push   0xc0014aed
c00153e9:	6a 0a                	push   0xa
c00153eb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153ee:	ff d0                	call   eax
c00153f0:	83 c4 10             	add    esp,0x10
c00153f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f8:	83 c0 24             	add    eax,0x24
c00153fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00153fd:	6a 00                	push   0x0
c00153ff:	68 ed 4a 01 c0       	push   0xc0014aed
c0015404:	6a 0b                	push   0xb
c0015406:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015409:	ff d0                	call   eax
c001540b:	83 c4 10             	add    esp,0x10
c001540e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015411:	8b 00                	mov    eax,DWORD PTR [eax]
c0015413:	83 c0 24             	add    eax,0x24
c0015416:	8b 00                	mov    eax,DWORD PTR [eax]
c0015418:	6a 00                	push   0x0
c001541a:	68 ed 4a 01 c0       	push   0xc0014aed
c001541f:	6a 0c                	push   0xc
c0015421:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015424:	ff d0                	call   eax
c0015426:	83 c4 10             	add    esp,0x10
c0015429:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001542c:	8b 00                	mov    eax,DWORD PTR [eax]
c001542e:	83 c0 24             	add    eax,0x24
c0015431:	8b 00                	mov    eax,DWORD PTR [eax]
c0015433:	6a 00                	push   0x0
c0015435:	68 6c 4a 01 c0       	push   0xc0014a6c
c001543a:	6a 0d                	push   0xd
c001543c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001543f:	ff d0                	call   eax
c0015441:	83 c4 10             	add    esp,0x10
c0015444:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015447:	8b 00                	mov    eax,DWORD PTR [eax]
c0015449:	83 c0 24             	add    eax,0x24
c001544c:	8b 00                	mov    eax,DWORD PTR [eax]
c001544e:	6a 00                	push   0x0
c0015450:	68 a5 4a 01 c0       	push   0xc0014aa5
c0015455:	6a 0e                	push   0xe
c0015457:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001545a:	ff d0                	call   eax
c001545c:	83 c4 10             	add    esp,0x10
c001545f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015462:	8b 00                	mov    eax,DWORD PTR [eax]
c0015464:	83 c0 24             	add    eax,0x24
c0015467:	8b 00                	mov    eax,DWORD PTR [eax]
c0015469:	6a 00                	push   0x0
c001546b:	68 ed 4a 01 c0       	push   0xc0014aed
c0015470:	6a 0f                	push   0xf
c0015472:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015475:	ff d0                	call   eax
c0015477:	83 c4 10             	add    esp,0x10
c001547a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001547d:	8b 00                	mov    eax,DWORD PTR [eax]
c001547f:	83 c0 24             	add    eax,0x24
c0015482:	8b 00                	mov    eax,DWORD PTR [eax]
c0015484:	6a 00                	push   0x0
c0015486:	68 ed 4a 01 c0       	push   0xc0014aed
c001548b:	6a 10                	push   0x10
c001548d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015490:	ff d0                	call   eax
c0015492:	83 c4 10             	add    esp,0x10
c0015495:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015498:	8b 00                	mov    eax,DWORD PTR [eax]
c001549a:	83 c0 24             	add    eax,0x24
c001549d:	8b 00                	mov    eax,DWORD PTR [eax]
c001549f:	6a 00                	push   0x0
c00154a1:	68 ed 4a 01 c0       	push   0xc0014aed
c00154a6:	6a 11                	push   0x11
c00154a8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154ab:	ff d0                	call   eax
c00154ad:	83 c4 10             	add    esp,0x10
c00154b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b5:	83 c0 24             	add    eax,0x24
c00154b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ba:	6a 00                	push   0x0
c00154bc:	68 ed 4a 01 c0       	push   0xc0014aed
c00154c1:	6a 12                	push   0x12
c00154c3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154c6:	ff d0                	call   eax
c00154c8:	83 c4 10             	add    esp,0x10
c00154cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d0:	83 c0 24             	add    eax,0x24
c00154d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d5:	6a 00                	push   0x0
c00154d7:	68 ed 4a 01 c0       	push   0xc0014aed
c00154dc:	6a 13                	push   0x13
c00154de:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154e1:	ff d0                	call   eax
c00154e3:	83 c4 10             	add    esp,0x10
c00154e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00154eb:	83 c0 24             	add    eax,0x24
c00154ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00154f0:	6a 00                	push   0x0
c00154f2:	68 ed 4a 01 c0       	push   0xc0014aed
c00154f7:	6a 14                	push   0x14
c00154f9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154fc:	ff d0                	call   eax
c00154fe:	83 c4 10             	add    esp,0x10
c0015501:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015504:	8b 00                	mov    eax,DWORD PTR [eax]
c0015506:	83 c0 24             	add    eax,0x24
c0015509:	8b 00                	mov    eax,DWORD PTR [eax]
c001550b:	6a 00                	push   0x0
c001550d:	68 ed 4a 01 c0       	push   0xc0014aed
c0015512:	6a 1e                	push   0x1e
c0015514:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015517:	ff d0                	call   eax
c0015519:	83 c4 10             	add    esp,0x10
c001551c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001551f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015521:	83 c0 24             	add    eax,0x24
c0015524:	8b 00                	mov    eax,DWORD PTR [eax]
c0015526:	6a 00                	push   0x0
c0015528:	68 2a c0 01 c0       	push   0xc001c02a
c001552d:	6a 60                	push   0x60
c001552f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015532:	ff d0                	call   eax
c0015534:	83 c4 10             	add    esp,0x10
c0015537:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001553a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001553d:	c9                   	leave  
c001553e:	c3                   	ret    
c001553f:	90                   	nop

c0015540 <InterruptController::convertLegacyIRQNumber(int)>:
c0015540:	55                   	push   ebp
c0015541:	89 e5                	mov    ebp,esp
c0015543:	83 ec 08             	sub    esp,0x8
c0015546:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015549:	83 ec 0c             	sub    esp,0xc
c001554c:	50                   	push   eax
c001554d:	e8 b6 e8 ff ff       	call   c0013e08 <Device::getName()>
c0015552:	83 c4 10             	add    esp,0x10
c0015555:	8a 00                	mov    al,BYTE PTR [eax]
c0015557:	3c 41                	cmp    al,0x41
c0015559:	0f 94 c0             	sete   al
c001555c:	84 c0                	test   al,al
c001555e:	74 28                	je     c0015588 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015560:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015564:	7f 12                	jg     c0015578 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015566:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015569:	05 20 cc 02 c0       	add    eax,0xc002cc20
c001556e:	8a 00                	mov    al,BYTE PTR [eax]
c0015570:	0f b6 c0             	movzx  eax,al
c0015573:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015576:	eb 10                	jmp    c0015588 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015578:	83 ec 0c             	sub    esp,0xc
c001557b:	68 84 ae 02 c0       	push   0xc002ae84
c0015580:	e8 b6 48 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c0015585:	83 c4 10             	add    esp,0x10
c0015588:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001558b:	c9                   	leave  
c001558c:	c3                   	ret    
c001558d:	90                   	nop

c001558e <startGUI(void*)>:
c001558e:	55                   	push   ebp
c001558f:	89 e5                	mov    ebp,esp
c0015591:	53                   	push   ebx
c0015592:	83 ec 04             	sub    esp,0x4
c0015595:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001559a:	48                   	dec    eax
c001559b:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c00155a0:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c00155a5:	85 c0                	test   eax,eax
c00155a7:	75 01                	jne    c00155aa <startGUI(void*)+0x1c>
c00155a9:	fb                   	sti    
c00155aa:	8b 1d c8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9c8
c00155b0:	83 ec 08             	sub    esp,0x8
c00155b3:	6a 01                	push   0x1
c00155b5:	68 04 af 02 c0       	push   0xc002af04
c00155ba:	e8 46 7a 00 00       	call   c001d005 <Thr::loadDLL(char const*, bool)>
c00155bf:	83 c4 10             	add    esp,0x10
c00155c2:	83 ec 08             	sub    esp,0x8
c00155c5:	53                   	push   ebx
c00155c6:	50                   	push   eax
c00155c7:	e8 6a 7c 00 00       	call   c001d236 <Thr::executeDLL(unsigned long, void*)>
c00155cc:	83 c4 10             	add    esp,0x10
c00155cf:	8b 1d c8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9c8
c00155d5:	83 ec 08             	sub    esp,0x8
c00155d8:	6a 01                	push   0x1
c00155da:	68 1e af 02 c0       	push   0xc002af1e
c00155df:	e8 21 7a 00 00       	call   c001d005 <Thr::loadDLL(char const*, bool)>
c00155e4:	83 c4 10             	add    esp,0x10
c00155e7:	83 ec 08             	sub    esp,0x8
c00155ea:	53                   	push   ebx
c00155eb:	50                   	push   eax
c00155ec:	e8 45 7c 00 00       	call   c001d236 <Thr::executeDLL(unsigned long, void*)>
c00155f1:	83 c4 10             	add    esp,0x10
c00155f4:	90                   	nop
c00155f5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00155f8:	c9                   	leave  
c00155f9:	c3                   	ret    

c00155fa <startGUIVESA(void*)>:
c00155fa:	55                   	push   ebp
c00155fb:	89 e5                	mov    ebp,esp
c00155fd:	53                   	push   ebx
c00155fe:	83 ec 04             	sub    esp,0x4
c0015601:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c0015606:	48                   	dec    eax
c0015607:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001560c:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c0015611:	85 c0                	test   eax,eax
c0015613:	75 01                	jne    c0015616 <startGUIVESA(void*)+0x1c>
c0015615:	fb                   	sti    
c0015616:	8b 1d c8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9c8
c001561c:	83 ec 08             	sub    esp,0x8
c001561f:	6a 01                	push   0x1
c0015621:	68 38 af 02 c0       	push   0xc002af38
c0015626:	e8 da 79 00 00       	call   c001d005 <Thr::loadDLL(char const*, bool)>
c001562b:	83 c4 10             	add    esp,0x10
c001562e:	83 ec 08             	sub    esp,0x8
c0015631:	53                   	push   ebx
c0015632:	50                   	push   eax
c0015633:	e8 fe 7b 00 00       	call   c001d236 <Thr::executeDLL(unsigned long, void*)>
c0015638:	83 c4 10             	add    esp,0x10
c001563b:	8b 1d c8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9c8
c0015641:	83 ec 08             	sub    esp,0x8
c0015644:	6a 01                	push   0x1
c0015646:	68 1e af 02 c0       	push   0xc002af1e
c001564b:	e8 b5 79 00 00       	call   c001d005 <Thr::loadDLL(char const*, bool)>
c0015650:	83 c4 10             	add    esp,0x10
c0015653:	83 ec 08             	sub    esp,0x8
c0015656:	53                   	push   ebx
c0015657:	50                   	push   eax
c0015658:	e8 d9 7b 00 00       	call   c001d236 <Thr::executeDLL(unsigned long, void*)>
c001565d:	83 c4 10             	add    esp,0x10
c0015660:	90                   	nop
c0015661:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015664:	c9                   	leave  
c0015665:	c3                   	ret    

c0015666 <sendKeyToTerminal(unsigned char)>:
c0015666:	55                   	push   ebp
c0015667:	89 e5                	mov    ebp,esp
c0015669:	83 ec 28             	sub    esp,0x28
c001566c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001566f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015672:	a1 84 da 02 c0       	mov    eax,ds:0xc002da84
c0015677:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001567b:	83 ec 08             	sub    esp,0x8
c001567e:	52                   	push   edx
c001567f:	50                   	push   eax
c0015680:	e8 7f b3 ff ff       	call   c0010a04 <VgaText::receiveKey(unsigned char)>
c0015685:	83 c4 10             	add    esp,0x10
c0015688:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c001568c:	0f 85 8f 00 00 00    	jne    c0015721 <sendKeyToTerminal(unsigned char)+0xbb>
c0015692:	fa                   	cli    
c0015693:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c0015698:	40                   	inc    eax
c0015699:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001569e:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c00156a3:	40                   	inc    eax
c00156a4:	a3 e4 0e 03 c0       	mov    ds:0xc0030ee4,eax
c00156a9:	a1 60 db 02 c0       	mov    eax,ds:0xc002db60
c00156ae:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00156b1:	c7 05 60 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002db60,0x0
c00156bb:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00156bf:	74 1f                	je     c00156e0 <sendKeyToTerminal(unsigned char)+0x7a>
c00156c1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156c4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00156c7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00156ca:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00156cd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00156d0:	83 ec 0c             	sub    esp,0xc
c00156d3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00156d6:	e8 73 87 00 00       	call   c001de4e <unblockTask(ThreadControlBlock*)>
c00156db:	83 c4 10             	add    esp,0x10
c00156de:	eb db                	jmp    c00156bb <sendKeyToTerminal(unsigned char)+0x55>
c00156e0:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c00156e5:	48                   	dec    eax
c00156e6:	a3 e4 0e 03 c0       	mov    ds:0xc0030ee4,eax
c00156eb:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c00156f0:	85 c0                	test   eax,eax
c00156f2:	75 18                	jne    c001570c <sendKeyToTerminal(unsigned char)+0xa6>
c00156f4:	a1 e0 0e 03 c0       	mov    eax,ds:0xc0030ee0
c00156f9:	85 c0                	test   eax,eax
c00156fb:	74 0f                	je     c001570c <sendKeyToTerminal(unsigned char)+0xa6>
c00156fd:	c7 05 e0 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ee0,0x0
c0015707:	e8 bf 82 00 00       	call   c001d9cb <schedule()>
c001570c:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c0015711:	48                   	dec    eax
c0015712:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c0015717:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001571c:	85 c0                	test   eax,eax
c001571e:	75 01                	jne    c0015721 <sendKeyToTerminal(unsigned char)+0xbb>
c0015720:	fb                   	sti    
c0015721:	90                   	nop
c0015722:	c9                   	leave  
c0015723:	c3                   	ret    

c0015724 <sendKeyboardToken(KeyboardToken)>:
c0015724:	55                   	push   ebp
c0015725:	89 e5                	mov    ebp,esp
c0015727:	83 ec 18             	sub    esp,0x18
c001572a:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001572d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015730:	0f b7 c0             	movzx  eax,ax
c0015733:	83 f2 01             	xor    edx,0x1
c0015736:	88 90 80 db 02 c0    	mov    BYTE PTR [eax-0x3ffd2480],dl
c001573c:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c0015741:	85 c0                	test   eax,eax
c0015743:	74 24                	je     c0015769 <sendKeyboardToken(KeyboardToken)+0x45>
c0015745:	8b 0d 68 db 02 c0    	mov    ecx,DWORD PTR ds:0xc002db68
c001574b:	83 ec 04             	sub    esp,0x4
c001574e:	68 80 db 02 c0       	push   0xc002db80
c0015753:	83 ec 08             	sub    esp,0x8
c0015756:	89 e2                	mov    edx,esp
c0015758:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001575b:	89 02                	mov    DWORD PTR [edx],eax
c001575d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015760:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015764:	ff d1                	call   ecx
c0015766:	83 c4 10             	add    esp,0x10
c0015769:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001576c:	66 3d 03 02          	cmp    ax,0x203
c0015770:	75 07                	jne    c0015779 <sendKeyboardToken(KeyboardToken)+0x55>
c0015772:	a0 80 dc 02 c0       	mov    al,ds:0xc002dc80
c0015777:	84 c0                	test   al,al
c0015779:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001577d:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015780:	a0 88 df 02 c0       	mov    al,ds:0xc002df88
c0015785:	38 c2                	cmp    dl,al
c0015787:	74 1c                	je     c00157a5 <sendKeyboardToken(KeyboardToken)+0x81>
c0015789:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001578c:	a2 88 df 02 c0       	mov    ds:0xc002df88,al
c0015791:	a0 88 df 02 c0       	mov    al,ds:0xc002df88
c0015796:	0f b6 c0             	movzx  eax,al
c0015799:	83 ec 0c             	sub    esp,0xc
c001579c:	50                   	push   eax
c001579d:	e8 a2 a8 ff ff       	call   c0010044 <setTerminalScrollLock(bool)>
c00157a2:	83 c4 10             	add    esp,0x10
c00157a5:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00157a8:	84 c0                	test   al,al
c00157aa:	0f 84 ae 00 00 00    	je     c001585e <sendKeyboardToken(KeyboardToken)+0x13a>
c00157b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b3:	66 3d 10 03          	cmp    ax,0x310
c00157b7:	75 06                	jne    c00157bf <sendKeyboardToken(KeyboardToken)+0x9b>
c00157b9:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00157bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c2:	66 3d 11 03          	cmp    ax,0x311
c00157c6:	75 06                	jne    c00157ce <sendKeyboardToken(KeyboardToken)+0xaa>
c00157c8:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00157ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d1:	66 3d 12 03          	cmp    ax,0x312
c00157d5:	75 06                	jne    c00157dd <sendKeyboardToken(KeyboardToken)+0xb9>
c00157d7:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00157dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e0:	66 3d 13 03          	cmp    ax,0x313
c00157e4:	75 06                	jne    c00157ec <sendKeyboardToken(KeyboardToken)+0xc8>
c00157e6:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00157ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ef:	66 3d 14 03          	cmp    ax,0x314
c00157f3:	75 06                	jne    c00157fb <sendKeyboardToken(KeyboardToken)+0xd7>
c00157f5:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00157fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157fe:	66 3d 15 03          	cmp    ax,0x315
c0015802:	75 06                	jne    c001580a <sendKeyboardToken(KeyboardToken)+0xe6>
c0015804:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001580a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580d:	66 3d 16 03          	cmp    ax,0x316
c0015811:	75 06                	jne    c0015819 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015813:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015819:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581c:	66 3d 17 03          	cmp    ax,0x317
c0015820:	75 06                	jne    c0015828 <sendKeyboardToken(KeyboardToken)+0x104>
c0015822:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015828:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001582b:	66 3d 18 03          	cmp    ax,0x318
c001582f:	75 06                	jne    c0015837 <sendKeyboardToken(KeyboardToken)+0x113>
c0015831:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015837:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001583a:	66 3d 19 03          	cmp    ax,0x319
c001583e:	75 06                	jne    c0015846 <sendKeyboardToken(KeyboardToken)+0x122>
c0015840:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015846:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015849:	66 3d 1a 03          	cmp    ax,0x31a
c001584d:	0f 85 c9 00 00 00    	jne    c001591c <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015853:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015859:	e9 be 00 00 00       	jmp    c001591c <sendKeyboardToken(KeyboardToken)+0x1f8>
c001585e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015861:	66 3d 10 03          	cmp    ax,0x310
c0015865:	75 0a                	jne    c0015871 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015867:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001586d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015871:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015874:	66 3d 11 03          	cmp    ax,0x311
c0015878:	75 0a                	jne    c0015884 <sendKeyboardToken(KeyboardToken)+0x160>
c001587a:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015880:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015884:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015887:	66 3d 12 03          	cmp    ax,0x312
c001588b:	75 0a                	jne    c0015897 <sendKeyboardToken(KeyboardToken)+0x173>
c001588d:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015893:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015897:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001589a:	66 3d 13 03          	cmp    ax,0x313
c001589e:	75 0a                	jne    c00158aa <sendKeyboardToken(KeyboardToken)+0x186>
c00158a0:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00158a6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ad:	66 3d 14 03          	cmp    ax,0x314
c00158b1:	75 0a                	jne    c00158bd <sendKeyboardToken(KeyboardToken)+0x199>
c00158b3:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00158b9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c0:	66 3d 15 03          	cmp    ax,0x315
c00158c4:	75 0a                	jne    c00158d0 <sendKeyboardToken(KeyboardToken)+0x1ac>
c00158c6:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00158cc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d3:	66 3d 16 03          	cmp    ax,0x316
c00158d7:	75 0a                	jne    c00158e3 <sendKeyboardToken(KeyboardToken)+0x1bf>
c00158d9:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00158df:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e6:	66 3d 17 03          	cmp    ax,0x317
c00158ea:	75 0a                	jne    c00158f6 <sendKeyboardToken(KeyboardToken)+0x1d2>
c00158ec:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00158f2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f9:	66 3d 18 03          	cmp    ax,0x318
c00158fd:	75 0a                	jne    c0015909 <sendKeyboardToken(KeyboardToken)+0x1e5>
c00158ff:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015905:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015909:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001590c:	66 3d 19 03          	cmp    ax,0x319
c0015910:	75 0a                	jne    c001591c <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015912:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015918:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001591c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001591f:	66 3d 00 02          	cmp    ax,0x200
c0015923:	75 2c                	jne    c0015951 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015925:	a0 80 df 02 c0       	mov    al,ds:0xc002df80
c001592a:	83 f0 01             	xor    eax,0x1
c001592d:	84 c0                	test   al,al
c001592f:	74 20                	je     c0015951 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015931:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0015936:	6a 01                	push   0x1
c0015938:	6a 00                	push   0x0
c001593a:	68 8e 55 01 c0       	push   0xc001558e
c001593f:	50                   	push   eax
c0015940:	e8 61 7e 00 00       	call   c001d7a6 <Process::createThread(void (*)(void*), void*, int)>
c0015945:	83 c4 10             	add    esp,0x10
c0015948:	c6 05 80 df 02 c0 01 	mov    BYTE PTR ds:0xc002df80,0x1
c001594f:	eb 33                	jmp    c0015984 <sendKeyboardToken(KeyboardToken)+0x260>
c0015951:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015954:	66 3d 01 02          	cmp    ax,0x201
c0015958:	75 2a                	jne    c0015984 <sendKeyboardToken(KeyboardToken)+0x260>
c001595a:	a0 80 df 02 c0       	mov    al,ds:0xc002df80
c001595f:	83 f0 01             	xor    eax,0x1
c0015962:	84 c0                	test   al,al
c0015964:	74 1e                	je     c0015984 <sendKeyboardToken(KeyboardToken)+0x260>
c0015966:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001596b:	6a 01                	push   0x1
c001596d:	6a 00                	push   0x0
c001596f:	68 fa 55 01 c0       	push   0xc00155fa
c0015974:	50                   	push   eax
c0015975:	e8 2c 7e 00 00       	call   c001d7a6 <Process::createThread(void (*)(void*), void*, int)>
c001597a:	83 c4 10             	add    esp,0x10
c001597d:	c6 05 80 df 02 c0 01 	mov    BYTE PTR ds:0xc002df80,0x1
c0015984:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015987:	66 3d 1d 03          	cmp    ax,0x31d
c001598b:	75 06                	jne    c0015993 <sendKeyboardToken(KeyboardToken)+0x26f>
c001598d:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015993:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015996:	66 3d 1c 03          	cmp    ax,0x31c
c001599a:	75 06                	jne    c00159a2 <sendKeyboardToken(KeyboardToken)+0x27e>
c001599c:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00159a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159a5:	66 3d 1b 03          	cmp    ax,0x31b
c00159a9:	75 06                	jne    c00159b1 <sendKeyboardToken(KeyboardToken)+0x28d>
c00159ab:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00159b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159b4:	66 3d 1e 03          	cmp    ax,0x31e
c00159b8:	75 06                	jne    c00159c0 <sendKeyboardToken(KeyboardToken)+0x29c>
c00159ba:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00159c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159c3:	66 3d 1f 03          	cmp    ax,0x31f
c00159c7:	75 06                	jne    c00159cf <sendKeyboardToken(KeyboardToken)+0x2ab>
c00159c9:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00159cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159d2:	66 3d 1a 03          	cmp    ax,0x31a
c00159d6:	75 06                	jne    c00159de <sendKeyboardToken(KeyboardToken)+0x2ba>
c00159d8:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00159de:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00159e2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00159e5:	83 f0 01             	xor    eax,0x1
c00159e8:	84 c0                	test   al,al
c00159ea:	74 77                	je     c0015a63 <sendKeyboardToken(KeyboardToken)+0x33f>
c00159ec:	a0 81 dc 02 c0       	mov    al,ds:0xc002dc81
c00159f1:	84 c0                	test   al,al
c00159f3:	74 41                	je     c0015a36 <sendKeyboardToken(KeyboardToken)+0x312>
c00159f5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00159f9:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00159fd:	74 2b                	je     c0015a2a <sendKeyboardToken(KeyboardToken)+0x306>
c00159ff:	8b 15 84 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df84
c0015a05:	89 d0                	mov    eax,edx
c0015a07:	c1 e0 02             	shl    eax,0x2
c0015a0a:	01 d0                	add    eax,edx
c0015a0c:	01 c0                	add    eax,eax
c0015a0e:	a3 84 df 02 c0       	mov    ds:0xc002df84,eax
c0015a13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a16:	0f b7 c0             	movzx  eax,ax
c0015a19:	8d 50 d0             	lea    edx,[eax-0x30]
c0015a1c:	a1 84 df 02 c0       	mov    eax,ds:0xc002df84
c0015a21:	01 d0                	add    eax,edx
c0015a23:	a3 84 df 02 c0       	mov    ds:0xc002df84,eax
c0015a28:	eb 6d                	jmp    c0015a97 <sendKeyboardToken(KeyboardToken)+0x373>
c0015a2a:	c7 05 84 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002df84,0x0
c0015a34:	eb 61                	jmp    c0015a97 <sendKeyboardToken(KeyboardToken)+0x373>
c0015a36:	a1 84 df 02 c0       	mov    eax,ds:0xc002df84
c0015a3b:	85 c0                	test   eax,eax
c0015a3d:	74 18                	je     c0015a57 <sendKeyboardToken(KeyboardToken)+0x333>
c0015a3f:	a1 84 df 02 c0       	mov    eax,ds:0xc002df84
c0015a44:	0f b6 c0             	movzx  eax,al
c0015a47:	83 ec 0c             	sub    esp,0xc
c0015a4a:	50                   	push   eax
c0015a4b:	e8 16 fc ff ff       	call   c0015666 <sendKeyToTerminal(unsigned char)>
c0015a50:	83 c4 10             	add    esp,0x10
c0015a53:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a57:	c7 05 84 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002df84,0x0
c0015a61:	eb 34                	jmp    c0015a97 <sendKeyboardToken(KeyboardToken)+0x373>
c0015a63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a66:	66 3d 01 01          	cmp    ax,0x101
c0015a6a:	75 2b                	jne    c0015a97 <sendKeyboardToken(KeyboardToken)+0x373>
c0015a6c:	a1 84 df 02 c0       	mov    eax,ds:0xc002df84
c0015a71:	85 c0                	test   eax,eax
c0015a73:	74 18                	je     c0015a8d <sendKeyboardToken(KeyboardToken)+0x369>
c0015a75:	a1 84 df 02 c0       	mov    eax,ds:0xc002df84
c0015a7a:	0f b6 c0             	movzx  eax,al
c0015a7d:	83 ec 0c             	sub    esp,0xc
c0015a80:	50                   	push   eax
c0015a81:	e8 e0 fb ff ff       	call   c0015666 <sendKeyToTerminal(unsigned char)>
c0015a86:	83 c4 10             	add    esp,0x10
c0015a89:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a8d:	c7 05 84 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002df84,0x0
c0015a97:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015a9a:	83 f0 01             	xor    eax,0x1
c0015a9d:	84 c0                	test   al,al
c0015a9f:	74 4c                	je     c0015aed <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015aa1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015aa4:	83 f0 01             	xor    eax,0x1
c0015aa7:	84 c0                	test   al,al
c0015aa9:	74 42                	je     c0015aed <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015aab:	a0 80 dc 02 c0       	mov    al,ds:0xc002dc80
c0015ab0:	83 f0 01             	xor    eax,0x1
c0015ab3:	84 c0                	test   al,al
c0015ab5:	74 36                	je     c0015aed <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015ab7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aba:	66 83 f8 1f          	cmp    ax,0x1f
c0015abe:	76 09                	jbe    c0015ac9 <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015ac0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ac3:	66 83 f8 7e          	cmp    ax,0x7e
c0015ac7:	76 12                	jbe    c0015adb <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015ac9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015acc:	66 83 f8 0a          	cmp    ax,0xa
c0015ad0:	74 09                	je     c0015adb <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015ad2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ad5:	66 83 f8 08          	cmp    ax,0x8
c0015ad9:	75 12                	jne    c0015aed <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015adb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ade:	0f b6 c0             	movzx  eax,al
c0015ae1:	83 ec 0c             	sub    esp,0xc
c0015ae4:	50                   	push   eax
c0015ae5:	e8 7c fb ff ff       	call   c0015666 <sendKeyToTerminal(unsigned char)>
c0015aea:	83 c4 10             	add    esp,0x10
c0015aed:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015af0:	83 f0 01             	xor    eax,0x1
c0015af3:	84 c0                	test   al,al
c0015af5:	74 4f                	je     c0015b46 <sendKeyboardToken(KeyboardToken)+0x422>
c0015af7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015afa:	83 f0 01             	xor    eax,0x1
c0015afd:	84 c0                	test   al,al
c0015aff:	74 45                	je     c0015b46 <sendKeyboardToken(KeyboardToken)+0x422>
c0015b01:	a0 80 dc 02 c0       	mov    al,ds:0xc002dc80
c0015b06:	84 c0                	test   al,al
c0015b08:	74 3c                	je     c0015b46 <sendKeyboardToken(KeyboardToken)+0x422>
c0015b0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b0d:	66 83 f8 3f          	cmp    ax,0x3f
c0015b11:	76 33                	jbe    c0015b46 <sendKeyboardToken(KeyboardToken)+0x422>
c0015b13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b16:	66 83 f8 7f          	cmp    ax,0x7f
c0015b1a:	77 2a                	ja     c0015b46 <sendKeyboardToken(KeyboardToken)+0x422>
c0015b1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b1f:	88 c2                	mov    dl,al
c0015b21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b24:	66 83 f8 5f          	cmp    ax,0x5f
c0015b28:	76 04                	jbe    c0015b2e <sendKeyboardToken(KeyboardToken)+0x40a>
c0015b2a:	b0 20                	mov    al,0x20
c0015b2c:	eb 02                	jmp    c0015b30 <sendKeyboardToken(KeyboardToken)+0x40c>
c0015b2e:	b0 00                	mov    al,0x0
c0015b30:	29 c2                	sub    edx,eax
c0015b32:	88 d0                	mov    al,dl
c0015b34:	83 e8 40             	sub    eax,0x40
c0015b37:	0f b6 c0             	movzx  eax,al
c0015b3a:	83 ec 0c             	sub    esp,0xc
c0015b3d:	50                   	push   eax
c0015b3e:	e8 23 fb ff ff       	call   c0015666 <sendKeyToTerminal(unsigned char)>
c0015b43:	83 c4 10             	add    esp,0x10
c0015b46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b49:	66 3d 00 03          	cmp    ax,0x300
c0015b4d:	75 0f                	jne    c0015b5e <sendKeyboardToken(KeyboardToken)+0x43a>
c0015b4f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b52:	83 f0 01             	xor    eax,0x1
c0015b55:	84 c0                	test   al,al
c0015b57:	74 05                	je     c0015b5e <sendKeyboardToken(KeyboardToken)+0x43a>
c0015b59:	e8 57 a8 ff ff       	call   c00103b5 <doTerminalCycle()>
c0015b5e:	90                   	nop
c0015b5f:	c9                   	leave  
c0015b60:	c3                   	ret    

c0015b61 <clearInternalKeybuffer(VgaText*)>:
c0015b61:	55                   	push   ebp
c0015b62:	89 e5                	mov    ebp,esp
c0015b64:	83 ec 08             	sub    esp,0x8
c0015b67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b6a:	05 98 01 00 00       	add    eax,0x198
c0015b6f:	83 ec 0c             	sub    esp,0xc
c0015b72:	50                   	push   eax
c0015b73:	e8 f4 ab fe ff       	call   c000076c <strlen>
c0015b78:	83 c4 10             	add    esp,0x10
c0015b7b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015b7e:	81 c2 98 01 00 00    	add    edx,0x198
c0015b84:	83 ec 04             	sub    esp,0x4
c0015b87:	50                   	push   eax
c0015b88:	6a 00                	push   0x0
c0015b8a:	52                   	push   edx
c0015b8b:	e8 c0 ab fe ff       	call   c0000750 <memset>
c0015b90:	83 c4 10             	add    esp,0x10
c0015b93:	90                   	nop
c0015b94:	c9                   	leave  
c0015b95:	c3                   	ret    

c0015b96 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015b96:	55                   	push   ebp
c0015b97:	89 e5                	mov    ebp,esp
c0015b99:	83 ec 18             	sub    esp,0x18
c0015b9c:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c0015ba1:	85 c0                	test   eax,eax
c0015ba3:	74 2a                	je     c0015bcf <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015ba5:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015bab:	8b 0d 68 db 02 c0    	mov    ecx,DWORD PTR ds:0xc002db68
c0015bb1:	83 ec 04             	sub    esp,0x4
c0015bb4:	68 80 db 02 c0       	push   0xc002db80
c0015bb9:	83 ec 08             	sub    esp,0x8
c0015bbc:	89 e2                	mov    edx,esp
c0015bbe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015bc1:	89 02                	mov    DWORD PTR [edx],eax
c0015bc3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015bc6:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015bca:	ff d1                	call   ecx
c0015bcc:	83 c4 10             	add    esp,0x10
c0015bcf:	fb                   	sti    
c0015bd0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015bd7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015bdb:	0f 84 a1 00 00 00    	je     c0015c82 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015be1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015be4:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015bea:	84 c0                	test   al,al
c0015bec:	75 28                	jne    c0015c16 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015bee:	fa                   	cli    
c0015bef:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c0015bf4:	40                   	inc    eax
c0015bf5:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c0015bfa:	e8 cc 7d 00 00       	call   c001d9cb <schedule()>
c0015bff:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c0015c04:	48                   	dec    eax
c0015c05:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c0015c0a:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c0015c0f:	85 c0                	test   eax,eax
c0015c11:	75 ce                	jne    c0015be1 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015c13:	fb                   	sti    
c0015c14:	eb cb                	jmp    c0015be1 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015c16:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015c19:	8d 50 01             	lea    edx,[eax+0x1]
c0015c1c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015c1f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c22:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015c28:	88 10                	mov    BYTE PTR [eax],dl
c0015c2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c2d:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015c33:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015c36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c39:	05 98 01 00 00       	add    eax,0x198
c0015c3e:	83 ec 0c             	sub    esp,0xc
c0015c41:	50                   	push   eax
c0015c42:	e8 25 ab fe ff       	call   c000076c <strlen>
c0015c47:	83 c4 10             	add    esp,0x10
c0015c4a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c4d:	81 c2 98 01 00 00    	add    edx,0x198
c0015c53:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015c56:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c59:	81 c2 98 01 00 00    	add    edx,0x198
c0015c5f:	83 ec 04             	sub    esp,0x4
c0015c62:	50                   	push   eax
c0015c63:	51                   	push   ecx
c0015c64:	52                   	push   edx
c0015c65:	e8 1e aa fe ff       	call   c0000688 <memmove>
c0015c6a:	83 c4 10             	add    esp,0x10
c0015c6d:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015c70:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015c73:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015c77:	0f 85 5a ff ff ff    	jne    c0015bd7 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015c7d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c80:	eb 03                	jmp    c0015c85 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015c82:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c85:	c9                   	leave  
c0015c86:	c3                   	ret    
c0015c87:	90                   	nop

c0015c88 <Keyboard::Keyboard(char const*)>:
c0015c88:	83 ec 0c             	sub    esp,0xc
c0015c8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c8f:	83 ec 08             	sub    esp,0x8
c0015c92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c96:	50                   	push   eax
c0015c97:	e8 70 e0 ff ff       	call   c0013d0c <Device::Device(char const*)>
c0015c9c:	83 c4 10             	add    esp,0x10
c0015c9f:	ba 5c af 02 c0       	mov    edx,0xc002af5c
c0015ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ca8:	89 10                	mov    DWORD PTR [eax],edx
c0015caa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cae:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015cb8:	c6 05 64 db 02 c0 01 	mov    BYTE PTR ds:0xc002db64,0x1
c0015cbf:	90                   	nop
c0015cc0:	83 c4 0c             	add    esp,0xc
c0015cc3:	c3                   	ret    

c0015cc4 <Keyboard::~Keyboard()>:
c0015cc4:	83 ec 0c             	sub    esp,0xc
c0015cc7:	ba 5c af 02 c0       	mov    edx,0xc002af5c
c0015ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cd0:	89 10                	mov    DWORD PTR [eax],edx
c0015cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cd6:	83 ec 0c             	sub    esp,0xc
c0015cd9:	50                   	push   eax
c0015cda:	e8 f7 dc ff ff       	call   c00139d6 <Device::~Device()>
c0015cdf:	83 c4 10             	add    esp,0x10
c0015ce2:	90                   	nop
c0015ce3:	83 c4 0c             	add    esp,0xc
c0015ce6:	c3                   	ret    
c0015ce7:	90                   	nop

c0015ce8 <Keyboard::~Keyboard()>:
c0015ce8:	83 ec 0c             	sub    esp,0xc
c0015ceb:	83 ec 0c             	sub    esp,0xc
c0015cee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cf2:	e8 cd ff ff ff       	call   c0015cc4 <Keyboard::~Keyboard()>
c0015cf7:	83 c4 10             	add    esp,0x10
c0015cfa:	83 ec 08             	sub    esp,0x8
c0015cfd:	68 5c 01 00 00       	push   0x15c
c0015d02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d06:	e8 ec c8 ff ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0015d0b:	83 c4 10             	add    esp,0x10
c0015d0e:	83 c4 0c             	add    esp,0xc
c0015d11:	c3                   	ret    

c0015d12 <LogicalDisk::close(int, int, void*)>:
c0015d12:	83 c8 ff             	or     eax,0xffffffff
c0015d15:	c3                   	ret    

c0015d16 <LogicalDisk::~LogicalDisk()>:
c0015d16:	83 ec 0c             	sub    esp,0xc
c0015d19:	ba d4 af 02 c0       	mov    edx,0xc002afd4
c0015d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d22:	89 10                	mov    DWORD PTR [eax],edx
c0015d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d28:	83 ec 0c             	sub    esp,0xc
c0015d2b:	50                   	push   eax
c0015d2c:	e8 a5 dc ff ff       	call   c00139d6 <Device::~Device()>
c0015d31:	83 c4 10             	add    esp,0x10
c0015d34:	90                   	nop
c0015d35:	83 c4 0c             	add    esp,0xc
c0015d38:	c3                   	ret    
c0015d39:	90                   	nop

c0015d3a <LogicalDisk::~LogicalDisk()>:
c0015d3a:	83 ec 0c             	sub    esp,0xc
c0015d3d:	83 ec 0c             	sub    esp,0xc
c0015d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d44:	e8 cd ff ff ff       	call   c0015d16 <LogicalDisk::~LogicalDisk()>
c0015d49:	83 c4 10             	add    esp,0x10
c0015d4c:	83 ec 08             	sub    esp,0x8
c0015d4f:	68 74 01 00 00       	push   0x174
c0015d54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d58:	e8 9a c8 ff ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0015d5d:	83 c4 10             	add    esp,0x10
c0015d60:	83 c4 0c             	add    esp,0xc
c0015d63:	c3                   	ret    

c0015d64 <LogicalDisk::open(int, int, void*)>:
c0015d64:	83 ec 18             	sub    esp,0x18
c0015d67:	68 88 af 02 c0       	push   0xc002af88
c0015d6c:	e8 ca 40 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c0015d71:	83 c8 ff             	or     eax,0xffffffff
c0015d74:	83 c4 1c             	add    esp,0x1c
c0015d77:	c3                   	ret    

c0015d78 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015d78:	53                   	push   ebx
c0015d79:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015d7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d81:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d85:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015d8b:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015d91:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015d97:	77 10                	ja     c0015da9 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015d99:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015d9f:	89 d3                	mov    ebx,edx
c0015da1:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015da7:	72 05                	jb     c0015dae <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015da9:	83 c8 ff             	or     eax,0xffffffff
c0015dac:	89 c2                	mov    edx,eax
c0015dae:	5b                   	pop    ebx
c0015daf:	c3                   	ret    

c0015db0 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015db0:	56                   	push   esi
c0015db1:	83 c8 ff             	or     eax,0xffffffff
c0015db4:	53                   	push   ebx
c0015db5:	89 c2                	mov    edx,eax
c0015db7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015dbb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015dbf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015dc3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015dc9:	77 27                	ja     c0015df2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015dcb:	89 d8                	mov    eax,ebx
c0015dcd:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015dd3:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015dd9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015dde:	89 c2                	mov    edx,eax
c0015de0:	73 10                	jae    c0015df2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015de2:	89 c8                	mov    eax,ecx
c0015de4:	89 da                	mov    edx,ebx
c0015de6:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015dec:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015df2:	5b                   	pop    ebx
c0015df3:	5e                   	pop    esi
c0015df4:	c3                   	ret    
c0015df5:	90                   	nop

c0015df6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015df6:	83 ec 1c             	sub    esp,0x1c
c0015df9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015dfd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015e01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e09:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015e0d:	89 04 24             	mov    DWORD PTR [esp],eax
c0015e10:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015e14:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015e18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e1c:	83 ec 08             	sub    esp,0x8
c0015e1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e23:	50                   	push   eax
c0015e24:	e8 e3 de ff ff       	call   c0013d0c <Device::Device(char const*)>
c0015e29:	83 c4 10             	add    esp,0x10
c0015e2c:	ba d4 af 02 c0       	mov    edx,0xc002afd4
c0015e31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e35:	89 10                	mov    DWORD PTR [eax],edx
c0015e37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e3b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015e42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e46:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015e4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e51:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015e5b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015e5f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e63:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e67:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015e6d:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015e73:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015e77:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015e7a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015e7e:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015e84:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015e8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e8e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015e92:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015e98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e9c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015ea6:	90                   	nop
c0015ea7:	83 c4 1c             	add    esp,0x1c
c0015eaa:	c3                   	ret    
c0015eab:	90                   	nop

c0015eac <LogicalDisk::assignDriveLetter()>:
c0015eac:	55                   	push   ebp
c0015ead:	57                   	push   edi
c0015eae:	56                   	push   esi
c0015eaf:	53                   	push   ebx
c0015eb0:	83 ec 14             	sub    esp,0x14
c0015eb3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015eb7:	8b 3d a0 df 02 c0    	mov    edi,DWORD PTR ds:0xc002dfa0
c0015ebd:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015ec3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015ec7:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015ecd:	8b 3d a4 df 02 c0    	mov    edi,DWORD PTR ds:0xc002dfa4
c0015ed3:	3c 01                	cmp    al,0x1
c0015ed5:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015ed9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015edd:	19 c0                	sbb    eax,eax
c0015edf:	83 e0 02             	and    eax,0x2
c0015ee2:	83 c0 41             	add    eax,0x41
c0015ee5:	0f be e8             	movsx  ebp,al
c0015ee8:	3c 43                	cmp    al,0x43
c0015eea:	75 10                	jne    c0015efc <LogicalDisk::assignDriveLetter()+0x50>
c0015eec:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015ef3:	75 5d                	jne    c0015f52 <LogicalDisk::assignDriveLetter()+0xa6>
c0015ef5:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015efa:	75 56                	jne    c0015f52 <LogicalDisk::assignDriveLetter()+0xa6>
c0015efc:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015eff:	ba 01 00 00 00       	mov    edx,0x1
c0015f04:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015f08:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015f0c:	d3 e2                	shl    edx,cl
c0015f0e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015f12:	89 d7                	mov    edi,edx
c0015f14:	89 d6                	mov    esi,edx
c0015f16:	c1 ff 1f             	sar    edi,0x1f
c0015f19:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015f1d:	21 f9                	and    ecx,edi
c0015f1f:	09 d1                	or     ecx,edx
c0015f21:	75 2f                	jne    c0015f52 <LogicalDisk::assignDriveLetter()+0xa6>
c0015f23:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015f27:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015f2b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015f31:	09 f2                	or     edx,esi
c0015f33:	89 15 a0 df 02 c0    	mov    DWORD PTR ds:0xc002dfa0,edx
c0015f39:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f3d:	09 fa                	or     edx,edi
c0015f3f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015f43:	89 15 a4 df 02 c0    	mov    DWORD PTR ds:0xc002dfa4,edx
c0015f49:	89 1c bd c0 df 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2040],ebx
c0015f50:	eb 08                	jmp    c0015f5a <LogicalDisk::assignDriveLetter()+0xae>
c0015f52:	45                   	inc    ebp
c0015f53:	40                   	inc    eax
c0015f54:	3c 5b                	cmp    al,0x5b
c0015f56:	75 90                	jne    c0015ee8 <LogicalDisk::assignDriveLetter()+0x3c>
c0015f58:	31 c0                	xor    eax,eax
c0015f5a:	83 c4 14             	add    esp,0x14
c0015f5d:	5b                   	pop    ebx
c0015f5e:	5e                   	pop    esi
c0015f5f:	5f                   	pop    edi
c0015f60:	5d                   	pop    ebp
c0015f61:	c3                   	ret    

c0015f62 <LogicalDisk::mount()>:
c0015f62:	56                   	push   esi
c0015f63:	53                   	push   ebx
c0015f64:	53                   	push   ebx
c0015f65:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f69:	8b 1d 34 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db34
c0015f6f:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015f79:	85 db                	test   ebx,ebx
c0015f7b:	74 27                	je     c0015fa4 <LogicalDisk::mount()+0x42>
c0015f7d:	51                   	push   ecx
c0015f7e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015f85:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015f87:	83 e8 41             	sub    eax,0x41
c0015f8a:	50                   	push   eax
c0015f8b:	56                   	push   esi
c0015f8c:	53                   	push   ebx
c0015f8d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015f90:	83 c4 10             	add    esp,0x10
c0015f93:	84 c0                	test   al,al
c0015f95:	74 08                	je     c0015f9f <LogicalDisk::mount()+0x3d>
c0015f97:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015f9d:	eb 07                	jmp    c0015fa6 <LogicalDisk::mount()+0x44>
c0015f9f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015fa2:	eb d5                	jmp    c0015f79 <LogicalDisk::mount()+0x17>
c0015fa4:	31 c0                	xor    eax,eax
c0015fa6:	5a                   	pop    edx
c0015fa7:	5b                   	pop    ebx
c0015fa8:	5e                   	pop    esi
c0015fa9:	c3                   	ret    

c0015faa <LogicalDisk::unmount()>:
c0015faa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015fae:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015fb8:	c3                   	ret    
c0015fb9:	90                   	nop

c0015fba <LogicalDisk::eject()>:
c0015fba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015fbe:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0015fc4:	8b 10                	mov    edx,DWORD PTR [eax]
c0015fc6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015fca:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0015fcd:	90                   	nop

c0015fce <LogicalDisk::unassignDriveLetter()>:
c0015fce:	57                   	push   edi
c0015fcf:	56                   	push   esi
c0015fd0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015fd4:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015fdb:	84 c9                	test   cl,cl
c0015fdd:	75 0f                	jne    c0015fee <LogicalDisk::unassignDriveLetter()+0x20>
c0015fdf:	c7 44 24 0c ac af 02 c0 	mov    DWORD PTR [esp+0xc],0xc002afac
c0015fe7:	5e                   	pop    esi
c0015fe8:	5f                   	pop    edi
c0015fe9:	e9 4d 3e 00 00       	jmp    c0019e3b <Krnl::panic(char const*)>
c0015fee:	83 e9 41             	sub    ecx,0x41
c0015ff1:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015ff8:	b8 01 00 00 00       	mov    eax,0x1
c0015ffd:	c7 04 8d c0 df 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd2040],0x0
c0016008:	d3 e0                	shl    eax,cl
c001600a:	89 c7                	mov    edi,eax
c001600c:	f7 d0                	not    eax
c001600e:	c1 ff 1f             	sar    edi,0x1f
c0016011:	21 05 a0 df 02 c0    	and    DWORD PTR ds:0xc002dfa0,eax
c0016017:	89 fe                	mov    esi,edi
c0016019:	f7 d6                	not    esi
c001601b:	21 35 a4 df 02 c0    	and    DWORD PTR ds:0xc002dfa4,esi
c0016021:	5e                   	pop    esi
c0016022:	5f                   	pop    edi
c0016023:	c3                   	ret    

c0016024 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016024:	57                   	push   edi
c0016025:	56                   	push   esi
c0016026:	53                   	push   ebx
c0016027:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001602b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001602f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016033:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016037:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001603d:	77 41                	ja     c0016080 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001603f:	99                   	cdq    
c0016040:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016046:	01 c8                	add    eax,ecx
c0016048:	11 da                	adc    edx,ebx
c001604a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016050:	19 d7                	sbb    edi,edx
c0016052:	72 33                	jb     c0016087 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016054:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001605a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016060:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016064:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016068:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001606e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016074:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016078:	5b                   	pop    ebx
c0016079:	5e                   	pop    esi
c001607a:	5f                   	pop    edi
c001607b:	e9 cc 0a 00 00       	jmp    c0016b4c <VCache::read(unsigned long long, int, void*)>
c0016080:	b8 05 00 00 00       	mov    eax,0x5
c0016085:	eb 05                	jmp    c001608c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016087:	b8 07 00 00 00       	mov    eax,0x7
c001608c:	5b                   	pop    ebx
c001608d:	5e                   	pop    esi
c001608e:	5f                   	pop    edi
c001608f:	c3                   	ret    

c0016090 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016090:	57                   	push   edi
c0016091:	56                   	push   esi
c0016092:	53                   	push   ebx
c0016093:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016097:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001609b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001609f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00160a3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00160a9:	77 41                	ja     c00160ec <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00160ab:	99                   	cdq    
c00160ac:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00160b2:	01 c8                	add    eax,ecx
c00160b4:	11 da                	adc    edx,ebx
c00160b6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00160bc:	19 d7                	sbb    edi,edx
c00160be:	72 33                	jb     c00160f3 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00160c0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00160c6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00160cc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00160d0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00160d4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00160da:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00160e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00160e4:	5b                   	pop    ebx
c00160e5:	5e                   	pop    esi
c00160e6:	5f                   	pop    edi
c00160e7:	e9 76 09 00 00       	jmp    c0016a62 <VCache::write(unsigned long long, int, void*)>
c00160ec:	b8 05 00 00 00       	mov    eax,0x5
c00160f1:	eb 05                	jmp    c00160f8 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00160f3:	b8 07 00 00 00       	mov    eax,0x7
c00160f8:	5b                   	pop    ebx
c00160f9:	5e                   	pop    esi
c00160fa:	5f                   	pop    edi
c00160fb:	c3                   	ret    

c00160fc <Mouse::Mouse(char const*)>:
c00160fc:	83 ec 0c             	sub    esp,0xc
c00160ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016103:	83 ec 08             	sub    esp,0x8
c0016106:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001610a:	50                   	push   eax
c001610b:	e8 fc db ff ff       	call   c0013d0c <Device::Device(char const*)>
c0016110:	83 c4 10             	add    esp,0x10
c0016113:	ba 00 b0 02 c0       	mov    edx,0xc002b000
c0016118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001611c:	89 10                	mov    DWORD PTR [eax],edx
c001611e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016122:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001612c:	90                   	nop
c001612d:	83 c4 0c             	add    esp,0xc
c0016130:	c3                   	ret    
c0016131:	90                   	nop

c0016132 <Mouse::~Mouse()>:
c0016132:	83 ec 0c             	sub    esp,0xc
c0016135:	ba 00 b0 02 c0       	mov    edx,0xc002b000
c001613a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001613e:	89 10                	mov    DWORD PTR [eax],edx
c0016140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016144:	83 ec 0c             	sub    esp,0xc
c0016147:	50                   	push   eax
c0016148:	e8 89 d8 ff ff       	call   c00139d6 <Device::~Device()>
c001614d:	83 c4 10             	add    esp,0x10
c0016150:	90                   	nop
c0016151:	83 c4 0c             	add    esp,0xc
c0016154:	c3                   	ret    
c0016155:	90                   	nop

c0016156 <Mouse::~Mouse()>:
c0016156:	83 ec 0c             	sub    esp,0xc
c0016159:	83 ec 0c             	sub    esp,0xc
c001615c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016160:	e8 cd ff ff ff       	call   c0016132 <Mouse::~Mouse()>
c0016165:	83 c4 10             	add    esp,0x10
c0016168:	83 ec 08             	sub    esp,0x8
c001616b:	68 58 01 00 00       	push   0x158
c0016170:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016174:	e8 7e c4 ff ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0016179:	83 c4 10             	add    esp,0x10
c001617c:	83 c4 0c             	add    esp,0xc
c001617f:	c3                   	ret    

c0016180 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016180:	55                   	push   ebp
c0016181:	57                   	push   edi
c0016182:	56                   	push   esi
c0016183:	53                   	push   ebx
c0016184:	81 ec 28 01 00 00    	sub    esp,0x128
c001618a:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016191:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016198:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001619f:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00161a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00161aa:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00161ae:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00161b5:	e8 4e dc ff ff       	call   c0013e08 <Device::getName()>
c00161ba:	5a                   	pop    edx
c00161bb:	59                   	pop    ecx
c00161bc:	50                   	push   eax
c00161bd:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00161c1:	55                   	push   ebp
c00161c2:	e8 45 a6 fe ff       	call   c000080c <strcpy>
c00161c7:	5b                   	pop    ebx
c00161c8:	58                   	pop    eax
c00161c9:	68 24 b0 02 c0       	push   0xc002b024
c00161ce:	55                   	push   ebp
c00161cf:	e8 78 a7 fe ff       	call   c000094c <strcat>
c00161d4:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00161db:	e8 b9 93 ff ff       	call   c000f599 <malloc>
c00161e0:	83 c4 0c             	add    esp,0xc
c00161e3:	89 c3                	mov    ebx,eax
c00161e5:	57                   	push   edi
c00161e6:	56                   	push   esi
c00161e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00161eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00161ef:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00161f6:	55                   	push   ebp
c00161f7:	50                   	push   eax
c00161f8:	e8 f9 fb ff ff       	call   c0015df6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00161fd:	83 c4 14             	add    esp,0x14
c0016200:	53                   	push   ebx
c0016201:	e8 a6 fc ff ff       	call   c0015eac <LogicalDisk::assignDriveLetter()>
c0016206:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016209:	e8 54 fd ff ff       	call   c0015f62 <LogicalDisk::mount()>
c001620e:	58                   	pop    eax
c001620f:	5a                   	pop    edx
c0016210:	53                   	push   ebx
c0016211:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016218:	e8 eb d8 ff ff       	call   c0013b08 <Device::addChild(Device*)>
c001621d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016223:	5b                   	pop    ebx
c0016224:	5e                   	pop    esi
c0016225:	5f                   	pop    edi
c0016226:	5d                   	pop    ebp
c0016227:	c3                   	ret    

c0016228 <createPartitionsForDisk(PhysicalDisk*)>:
c0016228:	55                   	push   ebp
c0016229:	57                   	push   edi
c001622a:	56                   	push   esi
c001622b:	53                   	push   ebx
c001622c:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016232:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016239:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001623f:	3d 00 02 00 00       	cmp    eax,0x200
c0016244:	74 27                	je     c001626d <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016246:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001624c:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016252:	83 ec 10             	sub    esp,0x10
c0016255:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016259:	99                   	cdq    
c001625a:	c1 e6 0a             	shl    esi,0xa
c001625d:	52                   	push   edx
c001625e:	89 fd                	mov    ebp,edi
c0016260:	50                   	push   eax
c0016261:	55                   	push   ebp
c0016262:	56                   	push   esi
c0016263:	e8 ac 04 01 00       	call   c0026714 <__udivdi3>
c0016268:	e9 b1 00 00 00       	jmp    c001631e <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001626d:	83 ec 0c             	sub    esp,0xc
c0016270:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016272:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016276:	56                   	push   esi
c0016277:	6a 01                	push   0x1
c0016279:	6a 00                	push   0x0
c001627b:	6a 00                	push   0x0
c001627d:	53                   	push   ebx
c001627e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016281:	83 c4 20             	add    esp,0x20
c0016284:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001628c:	75 0a                	jne    c0016298 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001628e:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016296:	74 2c                	je     c00162c4 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016298:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001629e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00162a4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00162aa:	83 ec 10             	sub    esp,0x10
c00162ad:	0f a4 c2 0a          	shld   edx,eax,0xa
c00162b1:	89 f7                	mov    edi,esi
c00162b3:	c1 e0 0a             	shl    eax,0xa
c00162b6:	c1 ff 1f             	sar    edi,0x1f
c00162b9:	57                   	push   edi
c00162ba:	56                   	push   esi
c00162bb:	52                   	push   edx
c00162bc:	50                   	push   eax
c00162bd:	e8 52 04 01 00       	call   c0026714 <__udivdi3>
c00162c2:	eb 5a                	jmp    c001631e <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00162c4:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00162cb:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00162d2:	83 e1 7f             	and    ecx,0x7f
c00162d5:	83 e0 7f             	and    eax,0x7f
c00162d8:	01 c1                	add    ecx,eax
c00162da:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00162e1:	83 e0 7f             	and    eax,0x7f
c00162e4:	01 c1                	add    ecx,eax
c00162e6:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00162ed:	83 e0 7f             	and    eax,0x7f
c00162f0:	00 c1                	add    cl,al
c00162f2:	74 41                	je     c0016335 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00162f4:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00162fa:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016300:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016306:	83 ec 10             	sub    esp,0x10
c0016309:	0f a4 c2 0a          	shld   edx,eax,0xa
c001630d:	89 f7                	mov    edi,esi
c001630f:	c1 e0 0a             	shl    eax,0xa
c0016312:	c1 ff 1f             	sar    edi,0x1f
c0016315:	57                   	push   edi
c0016316:	56                   	push   esi
c0016317:	52                   	push   edx
c0016318:	50                   	push   eax
c0016319:	e8 f6 03 01 00       	call   c0026714 <__udivdi3>
c001631e:	83 c4 14             	add    esp,0x14
c0016321:	52                   	push   edx
c0016322:	50                   	push   eax
c0016323:	6a 00                	push   0x0
c0016325:	6a 00                	push   0x0
c0016327:	53                   	push   ebx
c0016328:	e8 53 fe ff ff       	call   c0016180 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001632d:	83 c4 20             	add    esp,0x20
c0016330:	e9 79 01 00 00       	jmp    c00164ae <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016335:	89 f0                	mov    eax,esi
c0016337:	31 f6                	xor    esi,esi
c0016339:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016340:	75 02                	jne    c0016344 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016342:	89 f1                	mov    ecx,esi
c0016344:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001634b:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016352:	c1 e2 08             	shl    edx,0x8
c0016355:	c1 e7 10             	shl    edi,0x10
c0016358:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016360:	09 fa                	or     edx,edi
c0016362:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001636a:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016371:	83 c0 10             	add    eax,0x10
c0016374:	09 fa                	or     edx,edi
c0016376:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c001637d:	c1 e7 18             	shl    edi,0x18
c0016380:	09 fa                	or     edx,edi
c0016382:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016389:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c001638d:	c1 e7 10             	shl    edi,0x10
c0016390:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016397:	c1 e2 08             	shl    edx,0x8
c001639a:	09 fa                	or     edx,edi
c001639c:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00163a3:	09 fa                	or     edx,edi
c00163a5:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00163ac:	c1 e7 18             	shl    edi,0x18
c00163af:	09 fa                	or     edx,edi
c00163b1:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00163b5:	46                   	inc    esi
c00163b6:	83 fe 04             	cmp    esi,0x4
c00163b9:	0f 85 7a ff ff ff    	jne    c0016339 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00163bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163c3:	83 f0 01             	xor    eax,0x1
c00163c6:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00163ca:	75 57                	jne    c0016423 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00163cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00163d0:	83 f0 01             	xor    eax,0x1
c00163d3:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00163d7:	75 4a                	jne    c0016423 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00163d9:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00163dd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00163e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00163ed:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00163f3:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00163f9:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00163ff:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016403:	89 f7                	mov    edi,esi
c0016405:	c1 e0 0a             	shl    eax,0xa
c0016408:	c1 ff 1f             	sar    edi,0x1f
c001640b:	57                   	push   edi
c001640c:	56                   	push   esi
c001640d:	52                   	push   edx
c001640e:	50                   	push   eax
c001640f:	e8 00 03 01 00       	call   c0026714 <__udivdi3>
c0016414:	83 c4 10             	add    esp,0x10
c0016417:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001641b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001641f:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016423:	84 c9                	test   cl,cl
c0016425:	74 53                	je     c001647a <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016427:	0f b6 c9             	movzx  ecx,cl
c001642a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001642e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016432:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016436:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001643a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001643e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016442:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016446:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001644a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001644e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016452:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016456:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001645a:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c001645e:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016462:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016466:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001646a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001646e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016472:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016476:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c001647a:	31 ed                	xor    ebp,ebp
c001647c:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016480:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016484:	89 f8                	mov    eax,edi
c0016486:	09 f0                	or     eax,esi
c0016488:	74 1e                	je     c00164a8 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001648a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001648e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016492:	89 d1                	mov    ecx,edx
c0016494:	09 c1                	or     ecx,eax
c0016496:	74 10                	je     c00164a8 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016498:	83 ec 0c             	sub    esp,0xc
c001649b:	57                   	push   edi
c001649c:	56                   	push   esi
c001649d:	52                   	push   edx
c001649e:	50                   	push   eax
c001649f:	53                   	push   ebx
c00164a0:	e8 db fc ff ff       	call   c0016180 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00164a5:	83 c4 20             	add    esp,0x20
c00164a8:	45                   	inc    ebp
c00164a9:	83 fd 04             	cmp    ebp,0x4
c00164ac:	75 ce                	jne    c001647c <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00164ae:	81 c4 5c 02 00 00    	add    esp,0x25c
c00164b4:	5b                   	pop    ebx
c00164b5:	5e                   	pop    esi
c00164b6:	5f                   	pop    edi
c00164b7:	5d                   	pop    ebp
c00164b8:	c3                   	ret    
c00164b9:	90                   	nop

c00164ba <Serial::Serial(char const*)>:
c00164ba:	83 ec 0c             	sub    esp,0xc
c00164bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164c1:	83 ec 08             	sub    esp,0x8
c00164c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164c8:	50                   	push   eax
c00164c9:	e8 3e d8 ff ff       	call   c0013d0c <Device::Device(char const*)>
c00164ce:	83 c4 10             	add    esp,0x10
c00164d1:	ba 38 b0 02 c0       	mov    edx,0xc002b038
c00164d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164da:	89 10                	mov    DWORD PTR [eax],edx
c00164dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164e0:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00164ea:	90                   	nop
c00164eb:	83 c4 0c             	add    esp,0xc
c00164ee:	c3                   	ret    
c00164ef:	90                   	nop

c00164f0 <Serial::~Serial()>:
c00164f0:	83 ec 0c             	sub    esp,0xc
c00164f3:	ba 38 b0 02 c0       	mov    edx,0xc002b038
c00164f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164fc:	89 10                	mov    DWORD PTR [eax],edx
c00164fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016502:	83 ec 0c             	sub    esp,0xc
c0016505:	50                   	push   eax
c0016506:	e8 cb d4 ff ff       	call   c00139d6 <Device::~Device()>
c001650b:	83 c4 10             	add    esp,0x10
c001650e:	90                   	nop
c001650f:	83 c4 0c             	add    esp,0xc
c0016512:	c3                   	ret    
c0016513:	90                   	nop

c0016514 <Serial::~Serial()>:
c0016514:	83 ec 0c             	sub    esp,0xc
c0016517:	83 ec 0c             	sub    esp,0xc
c001651a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001651e:	e8 cd ff ff ff       	call   c00164f0 <Serial::~Serial()>
c0016523:	83 c4 10             	add    esp,0x10
c0016526:	83 ec 08             	sub    esp,0x8
c0016529:	68 58 01 00 00       	push   0x158
c001652e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016532:	e8 c0 c0 ff ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0016537:	83 c4 10             	add    esp,0x10
c001653a:	83 c4 0c             	add    esp,0xc
c001653d:	c3                   	ret    

c001653e <Timer::Timer(char const*)>:
c001653e:	83 ec 0c             	sub    esp,0xc
c0016541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016545:	83 ec 08             	sub    esp,0x8
c0016548:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001654c:	50                   	push   eax
c001654d:	e8 ba d7 ff ff       	call   c0013d0c <Device::Device(char const*)>
c0016552:	83 c4 10             	add    esp,0x10
c0016555:	ba 7c b0 02 c0       	mov    edx,0xc002b07c
c001655a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001655e:	89 10                	mov    DWORD PTR [eax],edx
c0016560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016564:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c001656e:	90                   	nop
c001656f:	83 c4 0c             	add    esp,0xc
c0016572:	c3                   	ret    
c0016573:	90                   	nop

c0016574 <Timer::~Timer()>:
c0016574:	83 ec 0c             	sub    esp,0xc
c0016577:	ba 7c b0 02 c0       	mov    edx,0xc002b07c
c001657c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016580:	89 10                	mov    DWORD PTR [eax],edx
c0016582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016586:	83 ec 0c             	sub    esp,0xc
c0016589:	50                   	push   eax
c001658a:	e8 47 d4 ff ff       	call   c00139d6 <Device::~Device()>
c001658f:	83 c4 10             	add    esp,0x10
c0016592:	90                   	nop
c0016593:	83 c4 0c             	add    esp,0xc
c0016596:	c3                   	ret    
c0016597:	90                   	nop

c0016598 <Timer::~Timer()>:
c0016598:	83 ec 0c             	sub    esp,0xc
c001659b:	83 ec 0c             	sub    esp,0xc
c001659e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165a2:	e8 cd ff ff ff       	call   c0016574 <Timer::~Timer()>
c00165a7:	83 c4 10             	add    esp,0x10
c00165aa:	83 ec 08             	sub    esp,0x8
c00165ad:	68 5c 01 00 00       	push   0x15c
c00165b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165b6:	e8 3c c0 ff ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c00165bb:	83 c4 10             	add    esp,0x10
c00165be:	83 c4 0c             	add    esp,0xc
c00165c1:	c3                   	ret    

c00165c2 <Timer::read()>:
c00165c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00165c6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00165cc:	c3                   	ret    

c00165cd <timerHandler(unsigned long long)>:
c00165cd:	55                   	push   ebp
c00165ce:	57                   	push   edi
c00165cf:	56                   	push   esi
c00165d0:	53                   	push   ebx
c00165d1:	83 ec 0c             	sub    esp,0xc
c00165d4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00165d8:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00165dc:	01 35 30 e0 02 c0    	add    DWORD PTR ds:0xc002e030,esi
c00165e2:	11 3d 34 e0 02 c0    	adc    DWORD PTR ds:0xc002e034,edi
c00165e8:	80 3d cd d9 02 c0 00 	cmp    BYTE PTR ds:0xc002d9cd,0x0
c00165ef:	0f 84 42 01 00 00    	je     c0016737 <timerHandler(unsigned long long)+0x16a>
c00165f5:	fa                   	cli    
c00165f6:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c00165fc:	83 ec 0c             	sub    esp,0xc
c00165ff:	ff 05 e4 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee4
c0016605:	68 f8 0e 03 c0       	push   0xc0030ef8
c001660a:	e8 5f 21 01 00       	call   c002876e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001660f:	83 c4 10             	add    esp,0x10
c0016612:	84 c0                	test   al,al
c0016614:	0f 85 a2 00 00 00    	jne    c00166bc <timerHandler(unsigned long long)+0xef>
c001661a:	83 ec 0c             	sub    esp,0xc
c001661d:	68 f8 0e 03 c0       	push   0xc0030ef8
c0016622:	e8 63 21 01 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016627:	83 c4 10             	add    esp,0x10
c001662a:	89 c3                	mov    ebx,eax
c001662c:	83 ec 0c             	sub    esp,0xc
c001662f:	68 f8 0e 03 c0       	push   0xc0030ef8
c0016634:	e8 51 21 01 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016639:	c7 04 24 f8 0e 03 c0 	mov    DWORD PTR [esp],0xc0030ef8
c0016640:	89 c5                	mov    ebp,eax
c0016642:	e8 4b 21 01 00       	call   c0028792 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016647:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001664a:	83 c4 10             	add    esp,0x10
c001664d:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016650:	39 15 30 e0 02 c0    	cmp    DWORD PTR ds:0xc002e030,edx
c0016656:	a1 34 e0 02 c0       	mov    eax,ds:0xc002e034
c001665b:	19 c8                	sbb    eax,ecx
c001665d:	72 21                	jb     c0016680 <timerHandler(unsigned long long)+0xb3>
c001665f:	83 ec 0c             	sub    esp,0xc
c0016662:	55                   	push   ebp
c0016663:	e8 e6 77 00 00       	call   c001de4e <unblockTask(ThreadControlBlock*)>
c0016668:	83 c4 10             	add    esp,0x10
c001666b:	39 eb                	cmp    ebx,ebp
c001666d:	75 21                	jne    c0016690 <timerHandler(unsigned long long)+0xc3>
c001666f:	83 ec 0c             	sub    esp,0xc
c0016672:	68 f8 0e 03 c0       	push   0xc0030ef8
c0016677:	e8 0e 21 01 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001667c:	89 c3                	mov    ebx,eax
c001667e:	eb 0d                	jmp    c001668d <timerHandler(unsigned long long)+0xc0>
c0016680:	50                   	push   eax
c0016681:	50                   	push   eax
c0016682:	55                   	push   ebp
c0016683:	68 f8 0e 03 c0       	push   0xc0030ef8
c0016688:	e8 b3 21 01 00       	call   c0028840 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001668d:	83 c4 10             	add    esp,0x10
c0016690:	83 ec 0c             	sub    esp,0xc
c0016693:	68 f8 0e 03 c0       	push   0xc0030ef8
c0016698:	e8 d1 20 01 00       	call   c002876e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001669d:	83 c4 10             	add    esp,0x10
c00166a0:	84 c0                	test   al,al
c00166a2:	75 18                	jne    c00166bc <timerHandler(unsigned long long)+0xef>
c00166a4:	83 ec 0c             	sub    esp,0xc
c00166a7:	68 f8 0e 03 c0       	push   0xc0030ef8
c00166ac:	e8 d9 20 01 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166b1:	83 c4 10             	add    esp,0x10
c00166b4:	39 d8                	cmp    eax,ebx
c00166b6:	0f 85 70 ff ff ff    	jne    c001662c <timerHandler(unsigned long long)+0x5f>
c00166bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166c1:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c00166c5:	74 3d                	je     c0016704 <timerHandler(unsigned long long)+0x137>
c00166c7:	80 3d cc d9 02 c0 00 	cmp    BYTE PTR ds:0xc002d9cc,0x0
c00166ce:	74 34                	je     c0016704 <timerHandler(unsigned long long)+0x137>
c00166d0:	fa                   	cli    
c00166d1:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c00166d7:	31 d2                	xor    edx,edx
c00166d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166de:	89 f9                	mov    ecx,edi
c00166e0:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00166e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166e8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00166eb:	39 c6                	cmp    esi,eax
c00166ed:	19 d1                	sbb    ecx,edx
c00166ef:	72 05                	jb     c00166f6 <timerHandler(unsigned long long)+0x129>
c00166f1:	e8 d5 72 00 00       	call   c001d9cb <schedule()>
c00166f6:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c00166fb:	48                   	dec    eax
c00166fc:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c0016701:	75 01                	jne    c0016704 <timerHandler(unsigned long long)+0x137>
c0016703:	fb                   	sti    
c0016704:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c0016709:	48                   	dec    eax
c001670a:	a3 e4 0e 03 c0       	mov    ds:0xc0030ee4,eax
c001670f:	75 18                	jne    c0016729 <timerHandler(unsigned long long)+0x15c>
c0016711:	83 3d e0 0e 03 c0 00 	cmp    DWORD PTR ds:0xc0030ee0,0x0
c0016718:	74 0f                	je     c0016729 <timerHandler(unsigned long long)+0x15c>
c001671a:	c7 05 e0 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ee0,0x0
c0016724:	e8 a2 72 00 00       	call   c001d9cb <schedule()>
c0016729:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001672e:	48                   	dec    eax
c001672f:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c0016734:	75 01                	jne    c0016737 <timerHandler(unsigned long long)+0x16a>
c0016736:	fb                   	sti    
c0016737:	83 c4 0c             	add    esp,0xc
c001673a:	5b                   	pop    ebx
c001673b:	5e                   	pop    esi
c001673c:	5f                   	pop    edi
c001673d:	5d                   	pop    ebp
c001673e:	c3                   	ret    

c001673f <setupTimer(int)>:
c001673f:	57                   	push   edi
c0016740:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0016745:	56                   	push   esi
c0016746:	53                   	push   ebx
c0016747:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001674b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016751:	83 ec 0c             	sub    esp,0xc
c0016754:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001675a:	e8 a9 d6 ff ff       	call   c0013e08 <Device::getName()>
c001675f:	83 c4 10             	add    esp,0x10
c0016762:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016765:	0f 85 8d 00 00 00    	jne    c00167f8 <setupTimer(int)+0xb9>
c001676b:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0016770:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016777:	74 7f                	je     c00167f8 <setupTimer(int)+0xb9>
c0016779:	83 ec 0c             	sub    esp,0xc
c001677c:	68 5c 01 00 00       	push   0x15c
c0016781:	e8 13 8e ff ff       	call   c000f599 <malloc>
c0016786:	89 04 24             	mov    DWORD PTR [esp],eax
c0016789:	89 c3                	mov    ebx,eax
c001678b:	e8 5a fb 00 00       	call   c00262ea <PIT::PIT()>
c0016790:	59                   	pop    ecx
c0016791:	5f                   	pop    edi
c0016792:	53                   	push   ebx
c0016793:	ff 35 c8 d9 02 c0    	push   DWORD PTR ds:0xc002d9c8
c0016799:	e8 6a d3 ff ff       	call   c0013b08 <Device::addChild(Device*)>
c001679e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00167a0:	6a 00                	push   0x0
c00167a2:	6a 00                	push   0x0
c00167a4:	56                   	push   esi
c00167a5:	53                   	push   ebx
c00167a6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00167a9:	83 c4 14             	add    esp,0x14
c00167ac:	68 60 01 00 00       	push   0x160
c00167b1:	e8 e3 8d ff ff       	call   c000f599 <malloc>
c00167b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00167b9:	89 c7                	mov    edi,eax
c00167bb:	e8 da f9 00 00       	call   c002619a <APICTimer::APICTimer()>
c00167c0:	6a 00                	push   0x0
c00167c2:	6a 00                	push   0x0
c00167c4:	56                   	push   esi
c00167c5:	57                   	push   edi
c00167c6:	e8 d1 f8 00 00       	call   c002609c <APICTimer::open(int, int, void*)>
c00167cb:	83 c4 20             	add    esp,0x20
c00167ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00167d0:	6a 00                	push   0x0
c00167d2:	6a 00                	push   0x0
c00167d4:	6a 00                	push   0x0
c00167d6:	53                   	push   ebx
c00167d7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00167da:	58                   	pop    eax
c00167db:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00167e0:	5a                   	pop    edx
c00167e1:	57                   	push   edi
c00167e2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00167e8:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00167ee:	e8 15 d3 ff ff       	call   c0013b08 <Device::addChild(Device*)>
c00167f3:	83 c4 10             	add    esp,0x10
c00167f6:	eb 33                	jmp    c001682b <setupTimer(int)+0xec>
c00167f8:	83 ec 0c             	sub    esp,0xc
c00167fb:	68 5c 01 00 00       	push   0x15c
c0016800:	e8 94 8d ff ff       	call   c000f599 <malloc>
c0016805:	89 04 24             	mov    DWORD PTR [esp],eax
c0016808:	89 c3                	mov    ebx,eax
c001680a:	e8 db fa 00 00       	call   c00262ea <PIT::PIT()>
c001680f:	58                   	pop    eax
c0016810:	5a                   	pop    edx
c0016811:	53                   	push   ebx
c0016812:	ff 35 c8 d9 02 c0    	push   DWORD PTR ds:0xc002d9c8
c0016818:	e8 eb d2 ff ff       	call   c0013b08 <Device::addChild(Device*)>
c001681d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001681f:	6a 00                	push   0x0
c0016821:	6a 00                	push   0x0
c0016823:	56                   	push   esi
c0016824:	53                   	push   ebx
c0016825:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016828:	83 c4 20             	add    esp,0x20
c001682b:	89 d8                	mov    eax,ebx
c001682d:	5b                   	pop    ebx
c001682e:	5e                   	pop    esi
c001682f:	5f                   	pop    edi
c0016830:	c3                   	ret    
c0016831:	90                   	nop

c0016832 <VCache::VCache(PhysicalDisk*)>:
c0016832:	53                   	push   ebx
c0016833:	83 ec 18             	sub    esp,0x18
c0016836:	ba ac b0 02 c0       	mov    edx,0xc002b0ac
c001683b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001683f:	89 10                	mov    DWORD PTR [eax],edx
c0016841:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016845:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001684c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016850:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016857:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001685b:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016862:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016869:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001686d:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016874:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001687b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001687f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016886:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001688a:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001688e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016892:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016899:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c00168a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168a4:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00168a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168ac:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c00168b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168b4:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00168b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168bc:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00168c3:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00168cb:	83 ec 0c             	sub    esp,0xc
c00168ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00168d2:	e8 c2 8c ff ff       	call   c000f599 <malloc>
c00168d7:	83 c4 10             	add    esp,0x10
c00168da:	89 c3                	mov    ebx,eax
c00168dc:	83 ec 0c             	sub    esp,0xc
c00168df:	53                   	push   ebx
c00168e0:	e8 af 6e 00 00       	call   c001d794 <Mutex::Mutex()>
c00168e5:	83 c4 10             	add    esp,0x10
c00168e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168ec:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00168ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168f3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00168f7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00168fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168fe:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016905:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016909:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001690f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016913:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016916:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001691a:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016920:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016926:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001692a:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001692d:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016934:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016938:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001693c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016942:	05 00 01 00 00       	add    eax,0x100
c0016947:	c1 e0 04             	shl    eax,0x4
c001694a:	83 ec 0c             	sub    esp,0xc
c001694d:	50                   	push   eax
c001694e:	e8 46 8c ff ff       	call   c000f599 <malloc>
c0016953:	83 c4 10             	add    esp,0x10
c0016956:	89 c2                	mov    edx,eax
c0016958:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001695c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001695f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016963:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001696a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001696e:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016972:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016976:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001697c:	c1 e0 07             	shl    eax,0x7
c001697f:	83 ec 0c             	sub    esp,0xc
c0016982:	50                   	push   eax
c0016983:	e8 11 8c ff ff       	call   c000f599 <malloc>
c0016988:	83 c4 10             	add    esp,0x10
c001698b:	89 c2                	mov    edx,eax
c001698d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016991:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016994:	90                   	nop
c0016995:	83 c4 18             	add    esp,0x18
c0016998:	5b                   	pop    ebx
c0016999:	c3                   	ret    

c001699a <VCache::invalidateReadBuffer()>:
c001699a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001699e:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00169a4:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00169a8:	c3                   	ret    
c00169a9:	90                   	nop

c00169aa <VCache::writeWriteBuffer()>:
c00169aa:	53                   	push   ebx
c00169ab:	83 ec 14             	sub    esp,0x14
c00169ae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00169b2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00169b5:	8b 10                	mov    edx,DWORD PTR [eax]
c00169b7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00169ba:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00169bd:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00169c0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00169c3:	50                   	push   eax
c00169c4:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00169c7:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00169ce:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00169d5:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00169d9:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00169e0:	83 c4 28             	add    esp,0x28
c00169e3:	5b                   	pop    ebx
c00169e4:	c3                   	ret    
c00169e5:	90                   	nop

c00169e6 <VCache::~VCache()>:
c00169e6:	83 ec 0c             	sub    esp,0xc
c00169e9:	ba ac b0 02 c0       	mov    edx,0xc002b0ac
c00169ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169f2:	89 10                	mov    DWORD PTR [eax],edx
c00169f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169f8:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00169fb:	84 c0                	test   al,al
c00169fd:	74 0f                	je     c0016a0e <VCache::~VCache()+0x28>
c00169ff:	83 ec 0c             	sub    esp,0xc
c0016a02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a06:	e8 9f ff ff ff       	call   c00169aa <VCache::writeWriteBuffer()>
c0016a0b:	83 c4 10             	add    esp,0x10
c0016a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a12:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016a15:	83 ec 0c             	sub    esp,0xc
c0016a18:	50                   	push   eax
c0016a19:	e8 8b 8b ff ff       	call   c000f5a9 <free>
c0016a1e:	83 c4 10             	add    esp,0x10
c0016a21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a25:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016a28:	83 ec 0c             	sub    esp,0xc
c0016a2b:	50                   	push   eax
c0016a2c:	e8 78 8b ff ff       	call   c000f5a9 <free>
c0016a31:	83 c4 10             	add    esp,0x10
c0016a34:	90                   	nop
c0016a35:	83 c4 0c             	add    esp,0xc
c0016a38:	c3                   	ret    
c0016a39:	90                   	nop

c0016a3a <VCache::~VCache()>:
c0016a3a:	83 ec 0c             	sub    esp,0xc
c0016a3d:	83 ec 0c             	sub    esp,0xc
c0016a40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a44:	e8 9d ff ff ff       	call   c00169e6 <VCache::~VCache()>
c0016a49:	83 c4 10             	add    esp,0x10
c0016a4c:	83 ec 08             	sub    esp,0x8
c0016a4f:	6a 44                	push   0x44
c0016a51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a55:	e8 9d bb ff ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0016a5a:	83 c4 10             	add    esp,0x10
c0016a5d:	83 c4 0c             	add    esp,0xc
c0016a60:	c3                   	ret    
c0016a61:	90                   	nop

c0016a62 <VCache::write(unsigned long long, int, void*)>:
c0016a62:	55                   	push   ebp
c0016a63:	57                   	push   edi
c0016a64:	56                   	push   esi
c0016a65:	53                   	push   ebx
c0016a66:	83 ec 18             	sub    esp,0x18
c0016a69:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016a6d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a71:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016a75:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016a78:	e8 5d 72 00 00       	call   c001dcda <Semaphore::acquire()>
c0016a7d:	83 c4 10             	add    esp,0x10
c0016a80:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016a84:	74 0c                	je     c0016a92 <VCache::write(unsigned long long, int, void*)+0x30>
c0016a86:	83 ec 0c             	sub    esp,0xc
c0016a89:	53                   	push   ebx
c0016a8a:	e8 0b ff ff ff       	call   c001699a <VCache::invalidateReadBuffer()>
c0016a8f:	83 c4 10             	add    esp,0x10
c0016a92:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016a96:	74 5c                	je     c0016af4 <VCache::write(unsigned long long, int, void*)+0x92>
c0016a98:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0016a9b:	89 e8                	mov    eax,ebp
c0016a9d:	99                   	cdq    
c0016a9e:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016aa1:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016aa4:	89 c1                	mov    ecx,eax
c0016aa6:	89 d0                	mov    eax,edx
c0016aa8:	31 f1                	xor    ecx,esi
c0016aaa:	31 f8                	xor    eax,edi
c0016aac:	09 c1                	or     ecx,eax
c0016aae:	75 38                	jne    c0016ae8 <VCache::write(unsigned long long, int, void*)+0x86>
c0016ab0:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0016ab5:	75 31                	jne    c0016ae8 <VCache::write(unsigned long long, int, void*)+0x86>
c0016ab7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016aba:	89 ef                	mov    edi,ebp
c0016abc:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016ac2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016ac6:	0f af f9             	imul   edi,ecx
c0016ac9:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016acc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ace:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016ad1:	40                   	inc    eax
c0016ad2:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016ad5:	83 c0 80             	add    eax,0xffffff80
c0016ad8:	75 5c                	jne    c0016b36 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016ada:	83 ec 0c             	sub    esp,0xc
c0016add:	53                   	push   ebx
c0016ade:	e8 c7 fe ff ff       	call   c00169aa <VCache::writeWriteBuffer()>
c0016ae3:	83 c4 10             	add    esp,0x10
c0016ae6:	eb 4e                	jmp    c0016b36 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016ae8:	83 ec 0c             	sub    esp,0xc
c0016aeb:	53                   	push   ebx
c0016aec:	e8 b9 fe ff ff       	call   c00169aa <VCache::writeWriteBuffer()>
c0016af1:	83 c4 10             	add    esp,0x10
c0016af4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016af7:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016afc:	7f 22                	jg     c0016b20 <VCache::write(unsigned long long, int, void*)+0xbe>
c0016afe:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016b01:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016b04:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016b08:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016b0c:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016b0f:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016b12:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016b18:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b1c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016b1e:	eb 16                	jmp    c0016b36 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016b20:	83 ec 0c             	sub    esp,0xc
c0016b23:	8b 10                	mov    edx,DWORD PTR [eax]
c0016b25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016b29:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016b2d:	57                   	push   edi
c0016b2e:	56                   	push   esi
c0016b2f:	50                   	push   eax
c0016b30:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016b33:	83 c4 20             	add    esp,0x20
c0016b36:	83 ec 0c             	sub    esp,0xc
c0016b39:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016b3c:	e8 f5 77 00 00       	call   c001e336 <Semaphore::release()>
c0016b41:	83 c4 1c             	add    esp,0x1c
c0016b44:	31 c0                	xor    eax,eax
c0016b46:	5b                   	pop    ebx
c0016b47:	5e                   	pop    esi
c0016b48:	5f                   	pop    edi
c0016b49:	5d                   	pop    ebp
c0016b4a:	c3                   	ret    
c0016b4b:	90                   	nop

c0016b4c <VCache::read(unsigned long long, int, void*)>:
c0016b4c:	55                   	push   ebp
c0016b4d:	57                   	push   edi
c0016b4e:	56                   	push   esi
c0016b4f:	53                   	push   ebx
c0016b50:	83 ec 28             	sub    esp,0x28
c0016b53:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016b57:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016b5b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016b5f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016b63:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016b66:	e8 6f 71 00 00       	call   c001dcda <Semaphore::acquire()>
c0016b6b:	83 c4 10             	add    esp,0x10
c0016b6e:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016b72:	74 0c                	je     c0016b80 <VCache::read(unsigned long long, int, void*)+0x34>
c0016b74:	83 ec 0c             	sub    esp,0xc
c0016b77:	53                   	push   ebx
c0016b78:	e8 2d fe ff ff       	call   c00169aa <VCache::writeWriteBuffer()>
c0016b7d:	83 c4 10             	add    esp,0x10
c0016b80:	83 fd 01             	cmp    ebp,0x1
c0016b83:	0f 85 80 00 00 00    	jne    c0016c09 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016b89:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b8c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016b90:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016b97:	75 70                	jne    c0016c09 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016b99:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0016b9c:	89 e9                	mov    ecx,ebp
c0016b9e:	f7 d9                	neg    ecx
c0016ba0:	89 c8                	mov    eax,ecx
c0016ba2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016ba6:	c1 f8 1f             	sar    eax,0x1f
c0016ba9:	21 f1                	and    ecx,esi
c0016bab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016baf:	89 c8                	mov    eax,ecx
c0016bb1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016bb5:	21 f9                	and    ecx,edi
c0016bb7:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016bbb:	89 ca                	mov    edx,ecx
c0016bbd:	74 0a                	je     c0016bc9 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016bbf:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016bc2:	75 05                	jne    c0016bc9 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016bc4:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0016bc7:	74 23                	je     c0016bec <VCache::read(unsigned long long, int, void*)+0xa0>
c0016bc9:	83 ec 0c             	sub    esp,0xc
c0016bcc:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016bd0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016bd4:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0016bd7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0016bda:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016bdc:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016bdf:	55                   	push   ebp
c0016be0:	52                   	push   edx
c0016be1:	50                   	push   eax
c0016be2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016be6:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016be9:	83 c4 20             	add    esp,0x20
c0016bec:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016bef:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016bf3:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016bf9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016bfc:	48                   	dec    eax
c0016bfd:	21 c6                	and    esi,eax
c0016bff:	0f af f1             	imul   esi,ecx
c0016c02:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016c05:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016c07:	eb 1d                	jmp    c0016c26 <VCache::read(unsigned long long, int, void*)+0xda>
c0016c09:	83 ec 0c             	sub    esp,0xc
c0016c0c:	53                   	push   ebx
c0016c0d:	e8 88 fd ff ff       	call   c001699a <VCache::invalidateReadBuffer()>
c0016c12:	5a                   	pop    edx
c0016c13:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c16:	8b 10                	mov    edx,DWORD PTR [eax]
c0016c18:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016c1c:	55                   	push   ebp
c0016c1d:	57                   	push   edi
c0016c1e:	56                   	push   esi
c0016c1f:	50                   	push   eax
c0016c20:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016c23:	83 c4 20             	add    esp,0x20
c0016c26:	83 ec 0c             	sub    esp,0xc
c0016c29:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016c2c:	e8 05 77 00 00       	call   c001e336 <Semaphore::release()>
c0016c31:	83 c4 2c             	add    esp,0x2c
c0016c34:	31 c0                	xor    eax,eax
c0016c36:	5b                   	pop    ebx
c0016c37:	5e                   	pop    esi
c0016c38:	5f                   	pop    edi
c0016c39:	5d                   	pop    ebp
c0016c3a:	c3                   	ret    
c0016c3b:	90                   	nop

c0016c3c <Video::putrect(int, int, int, int, unsigned int)>:
c0016c3c:	55                   	push   ebp
c0016c3d:	57                   	push   edi
c0016c3e:	56                   	push   esi
c0016c3f:	53                   	push   ebx
c0016c40:	83 ec 1c             	sub    esp,0x1c
c0016c43:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016c47:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016c4b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016c4f:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016c53:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c5b:	01 df                	add    edi,ebx
c0016c5d:	39 fb                	cmp    ebx,edi
c0016c5f:	7d 1f                	jge    c0016c80 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016c61:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016c65:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016c69:	7d 12                	jge    c0016c7d <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016c6b:	8b 16                	mov    edx,DWORD PTR [esi]
c0016c6d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016c71:	53                   	push   ebx
c0016c72:	55                   	push   ebp
c0016c73:	45                   	inc    ebp
c0016c74:	56                   	push   esi
c0016c75:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016c78:	83 c4 10             	add    esp,0x10
c0016c7b:	eb e8                	jmp    c0016c65 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016c7d:	43                   	inc    ebx
c0016c7e:	eb dd                	jmp    c0016c5d <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016c80:	83 c4 1c             	add    esp,0x1c
c0016c83:	5b                   	pop    ebx
c0016c84:	5e                   	pop    esi
c0016c85:	5f                   	pop    edi
c0016c86:	5d                   	pop    ebp
c0016c87:	c3                   	ret    

c0016c88 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016c88:	55                   	push   ebp
c0016c89:	57                   	push   edi
c0016c8a:	31 ff                	xor    edi,edi
c0016c8c:	56                   	push   esi
c0016c8d:	53                   	push   ebx
c0016c8e:	83 ec 1c             	sub    esp,0x1c
c0016c91:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016c95:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016c99:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016ca0:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016ca5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ca9:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016cad:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016cb1:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016cb4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016cb8:	01 f9                	add    ecx,edi
c0016cba:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016cbe:	7d 2f                	jge    c0016cef <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016cc0:	31 f6                	xor    esi,esi
c0016cc2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016cc6:	01 f2                	add    edx,esi
c0016cc8:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016ccc:	7d 1a                	jge    c0016ce8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016cce:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016cd1:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016cd4:	46                   	inc    esi
c0016cd5:	51                   	push   ecx
c0016cd6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016cda:	52                   	push   edx
c0016cdb:	55                   	push   ebp
c0016cdc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016cdf:	83 c4 10             	add    esp,0x10
c0016ce2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016ce6:	eb da                	jmp    c0016cc2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016ce8:	47                   	inc    edi
c0016ce9:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016ced:	eb c5                	jmp    c0016cb4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016cef:	83 c4 1c             	add    esp,0x1c
c0016cf2:	5b                   	pop    ebx
c0016cf3:	5e                   	pop    esi
c0016cf4:	5f                   	pop    edi
c0016cf5:	5d                   	pop    ebp
c0016cf6:	c3                   	ret    
c0016cf7:	90                   	nop

c0016cf8 <Video::blit(unsigned int*, int, int, int, int)>:
c0016cf8:	55                   	push   ebp
c0016cf9:	57                   	push   edi
c0016cfa:	56                   	push   esi
c0016cfb:	53                   	push   ebx
c0016cfc:	83 ec 1c             	sub    esp,0x1c
c0016cff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016d03:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016d07:	85 c0                	test   eax,eax
c0016d09:	79 02                	jns    c0016d0d <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016d0b:	31 c0                	xor    eax,eax
c0016d0d:	c1 e0 02             	shl    eax,0x2
c0016d10:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016d14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d18:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016d1c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016d20:	39 d8                	cmp    eax,ebx
c0016d22:	7e 49                	jle    c0016d6d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016d24:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016d2a:	7c 41                	jl     c0016d6d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016d2c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016d30:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016d34:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016d38:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016d3c:	39 f9                	cmp    ecx,edi
c0016d3e:	7e 22                	jle    c0016d62 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016d40:	83 c5 04             	add    ebp,0x4
c0016d43:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016d49:	7c 14                	jl     c0016d5f <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016d4b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016d4d:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016d50:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016d54:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016d58:	56                   	push   esi
c0016d59:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016d5c:	83 c4 10             	add    esp,0x10
c0016d5f:	47                   	inc    edi
c0016d60:	eb d2                	jmp    c0016d34 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016d62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d66:	43                   	inc    ebx
c0016d67:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016d6b:	eb ab                	jmp    c0016d18 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016d6d:	83 c4 1c             	add    esp,0x1c
c0016d70:	5b                   	pop    ebx
c0016d71:	5e                   	pop    esi
c0016d72:	5f                   	pop    edi
c0016d73:	5d                   	pop    ebp
c0016d74:	c3                   	ret    
c0016d75:	90                   	nop

c0016d76 <Video::clearScreen(unsigned int)>:
c0016d76:	57                   	push   edi
c0016d77:	56                   	push   esi
c0016d78:	53                   	push   ebx
c0016d79:	31 db                	xor    ebx,ebx
c0016d7b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016d7f:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016d85:	7e 1f                	jle    c0016da6 <Video::clearScreen(unsigned int)+0x30>
c0016d87:	31 ff                	xor    edi,edi
c0016d89:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016d8f:	7e 12                	jle    c0016da3 <Video::clearScreen(unsigned int)+0x2d>
c0016d91:	8b 06                	mov    eax,DWORD PTR [esi]
c0016d93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016d97:	53                   	push   ebx
c0016d98:	57                   	push   edi
c0016d99:	47                   	inc    edi
c0016d9a:	56                   	push   esi
c0016d9b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016d9e:	83 c4 10             	add    esp,0x10
c0016da1:	eb e6                	jmp    c0016d89 <Video::clearScreen(unsigned int)+0x13>
c0016da3:	43                   	inc    ebx
c0016da4:	eb d9                	jmp    c0016d7f <Video::clearScreen(unsigned int)+0x9>
c0016da6:	5b                   	pop    ebx
c0016da7:	5e                   	pop    esi
c0016da8:	5f                   	pop    edi
c0016da9:	c3                   	ret    

c0016daa <Video::putpixel(int, int, unsigned int)>:
c0016daa:	c7 44 24 04 b4 b0 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b0b4
c0016db2:	e9 84 30 00 00       	jmp    c0019e3b <Krnl::panic(char const*)>
c0016db7:	90                   	nop

c0016db8 <Video::Video(char const*)>:
c0016db8:	83 ec 0c             	sub    esp,0xc
c0016dbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dbf:	83 ec 08             	sub    esp,0x8
c0016dc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dc6:	50                   	push   eax
c0016dc7:	e8 40 cf ff ff       	call   c0013d0c <Device::Device(char const*)>
c0016dcc:	83 c4 10             	add    esp,0x10
c0016dcf:	ba 24 b1 02 c0       	mov    edx,0xc002b124
c0016dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dd8:	89 10                	mov    DWORD PTR [eax],edx
c0016dda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dde:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016de8:	90                   	nop
c0016de9:	83 c4 0c             	add    esp,0xc
c0016dec:	c3                   	ret    
c0016ded:	90                   	nop

c0016dee <Video::~Video()>:
c0016dee:	83 ec 0c             	sub    esp,0xc
c0016df1:	ba 24 b1 02 c0       	mov    edx,0xc002b124
c0016df6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dfa:	89 10                	mov    DWORD PTR [eax],edx
c0016dfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e00:	83 ec 0c             	sub    esp,0xc
c0016e03:	50                   	push   eax
c0016e04:	e8 cd cb ff ff       	call   c00139d6 <Device::~Device()>
c0016e09:	83 c4 10             	add    esp,0x10
c0016e0c:	90                   	nop
c0016e0d:	83 c4 0c             	add    esp,0xc
c0016e10:	c3                   	ret    
c0016e11:	90                   	nop

c0016e12 <Video::~Video()>:
c0016e12:	83 ec 0c             	sub    esp,0xc
c0016e15:	83 ec 0c             	sub    esp,0xc
c0016e18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e1c:	e8 cd ff ff ff       	call   c0016dee <Video::~Video()>
c0016e21:	83 c4 10             	add    esp,0x10
c0016e24:	83 ec 08             	sub    esp,0x8
c0016e27:	68 64 01 00 00       	push   0x164
c0016e2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e30:	e8 c2 b7 ff ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0016e35:	83 c4 10             	add    esp,0x10
c0016e38:	83 c4 0c             	add    esp,0xc
c0016e3b:	c3                   	ret    

c0016e3c <Video::isMonochrome()>:
c0016e3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e40:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016e46:	c3                   	ret    
c0016e47:	90                   	nop

c0016e48 <Video::getWidth()>:
c0016e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e4c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016e52:	c3                   	ret    
c0016e53:	90                   	nop

c0016e54 <Video::getHeight()>:
c0016e54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e58:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016e5e:	c3                   	ret    
c0016e5f:	90                   	nop

c0016e60 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016e60:	55                   	push   ebp
c0016e61:	57                   	push   edi
c0016e62:	56                   	push   esi
c0016e63:	53                   	push   ebx
c0016e64:	83 ec 2c             	sub    esp,0x2c
c0016e67:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016e6b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016e6f:	83 f8 01             	cmp    eax,0x1
c0016e72:	19 c9                	sbb    ecx,ecx
c0016e74:	31 db                	xor    ebx,ebx
c0016e76:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016e7a:	89 cd                	mov    ebp,ecx
c0016e7c:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016e84:	f7 d5                	not    ebp
c0016e86:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016e8c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016e90:	01 d8                	add    eax,ebx
c0016e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e96:	56                   	push   esi
c0016e97:	e8 b8 ff ff ff       	call   c0016e54 <Video::getHeight()>
c0016e9c:	59                   	pop    ecx
c0016e9d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016ea1:	7e 70                	jle    c0016f13 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016ea3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016ea7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016eab:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016eae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016eb2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016eb6:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016ebd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ec1:	89 f8                	mov    eax,edi
c0016ec3:	83 c0 20             	add    eax,0x20
c0016ec6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016eca:	56                   	push   esi
c0016ecb:	e8 78 ff ff ff       	call   c0016e48 <Video::getWidth()>
c0016ed0:	5a                   	pop    edx
c0016ed1:	39 c7                	cmp    edi,eax
c0016ed3:	7d 34                	jge    c0016f09 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016ed5:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016eda:	74 05                	je     c0016ee1 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016edc:	8b 06                	mov    eax,DWORD PTR [esi]
c0016ede:	55                   	push   ebp
c0016edf:	eb 0d                	jmp    c0016eee <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016ee1:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016ee6:	74 12                	je     c0016efa <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016ee8:	8b 06                	mov    eax,DWORD PTR [esi]
c0016eea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016eee:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016ef2:	57                   	push   edi
c0016ef3:	56                   	push   esi
c0016ef4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016ef7:	83 c4 10             	add    esp,0x10
c0016efa:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016efe:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016f02:	47                   	inc    edi
c0016f03:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016f07:	75 c1                	jne    c0016eca <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016f09:	43                   	inc    ebx
c0016f0a:	83 fb 20             	cmp    ebx,0x20
c0016f0d:	0f 85 79 ff ff ff    	jne    c0016e8c <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016f13:	83 c4 2c             	add    esp,0x2c
c0016f16:	5b                   	pop    ebx
c0016f17:	5e                   	pop    esi
c0016f18:	5f                   	pop    edi
c0016f19:	5d                   	pop    ebp
c0016f1a:	c3                   	ret    
c0016f1b:	90                   	nop

c0016f1c <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016f1c:	55                   	push   ebp
c0016f1d:	57                   	push   edi
c0016f1e:	56                   	push   esi
c0016f1f:	53                   	push   ebx
c0016f20:	83 ec 28             	sub    esp,0x28
c0016f23:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016f27:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016f2b:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0016f2f:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016f33:	c1 e6 08             	shl    esi,0x8
c0016f36:	01 c6                	add    esi,eax
c0016f38:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016f3c:	c1 e0 08             	shl    eax,0x8
c0016f3f:	01 d0                	add    eax,edx
c0016f41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f49:	0f af c6             	imul   eax,esi
c0016f4c:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016f53:	50                   	push   eax
c0016f54:	e8 40 86 ff ff       	call   c000f599 <malloc>
c0016f59:	83 c4 10             	add    esp,0x10
c0016f5c:	89 c7                	mov    edi,eax
c0016f5e:	85 c0                	test   eax,eax
c0016f60:	75 10                	jne    c0016f72 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0016f62:	83 ec 0c             	sub    esp,0xc
c0016f65:	68 d5 b0 02 c0       	push   0xc002b0d5
c0016f6a:	e8 cc 2e 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c0016f6f:	83 c4 10             	add    esp,0x10
c0016f72:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0016f75:	ba 12 00 00 00       	mov    edx,0x12
c0016f7a:	84 c0                	test   al,al
c0016f7c:	74 11                	je     c0016f8f <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0016f7e:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0016f82:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0016f86:	c1 fa 03             	sar    edx,0x3
c0016f89:	0f af d1             	imul   edx,ecx
c0016f8c:	83 c2 12             	add    edx,0x12
c0016f8f:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016f93:	74 04                	je     c0016f99 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0016f95:	85 f6                	test   esi,esi
c0016f97:	75 12                	jne    c0016fab <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0016f99:	83 ec 0c             	sub    esp,0xc
c0016f9c:	68 e5 b0 02 c0       	push   0xc002b0e5
c0016fa1:	e8 29 b7 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0016fa6:	e9 b8 00 00 00       	jmp    c0017063 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0016fab:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0016faf:	80 f9 02             	cmp    cl,0x2
c0016fb2:	0f 85 96 00 00 00    	jne    c001704e <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0016fb8:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016fbd:	75 0e                	jne    c0016fcd <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016fbf:	84 c0                	test   al,al
c0016fc1:	75 0a                	jne    c0016fcd <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016fc3:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016fc6:	83 e8 18             	sub    eax,0x18
c0016fc9:	a8 f7                	test   al,0xf7
c0016fcb:	74 0a                	je     c0016fd7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0016fcd:	83 ec 0c             	sub    esp,0xc
c0016fd0:	68 fa b0 02 c0       	push   0xc002b0fa
c0016fd5:	eb 7f                	jmp    c0017056 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0016fd7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016fdf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016fe7:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0016feb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016ff3:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016ff7:	75 0c                	jne    c0017005 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016ff9:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0016ffe:	c1 e0 18             	shl    eax,0x18
c0017001:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017005:	45                   	inc    ebp
c0017006:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c001700b:	c1 e1 10             	shl    ecx,0x10
c001700e:	89 c8                	mov    eax,ecx
c0017010:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0017015:	c1 e1 08             	shl    ecx,0x8
c0017018:	09 c1                	or     ecx,eax
c001701a:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c001701e:	09 c1                	or     ecx,eax
c0017020:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0017024:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0017028:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001702c:	c1 f8 03             	sar    eax,0x3
c001702f:	01 c2                	add    edx,eax
c0017031:	89 e8                	mov    eax,ebp
c0017033:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017037:	39 c6                	cmp    esi,eax
c0017039:	7f b0                	jg     c0016feb <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c001703b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001703f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017043:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0017046:	7e 22                	jle    c001706a <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0017048:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c001704c:	eb 99                	jmp    c0016fe7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001704e:	50                   	push   eax
c001704f:	50                   	push   eax
c0017050:	51                   	push   ecx
c0017051:	68 08 b1 02 c0       	push   0xc002b108
c0017056:	e8 74 b6 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c001705b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001705e:	e8 46 85 ff ff       	call   c000f5a9 <free>
c0017063:	83 c4 10             	add    esp,0x10
c0017066:	31 ff                	xor    edi,edi
c0017068:	eb 0f                	jmp    c0017079 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c001706a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001706e:	89 30                	mov    DWORD PTR [eax],esi
c0017070:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017074:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0017077:	89 30                	mov    DWORD PTR [eax],esi
c0017079:	83 c4 1c             	add    esp,0x1c
c001707c:	89 f8                	mov    eax,edi
c001707e:	5b                   	pop    ebx
c001707f:	5e                   	pop    esi
c0017080:	5f                   	pop    edi
c0017081:	5d                   	pop    ebp
c0017082:	c3                   	ret    
c0017083:	90                   	nop

c0017084 <Video::putTGA(int, int, unsigned char*, int)>:
c0017084:	55                   	push   ebp
c0017085:	57                   	push   edi
c0017086:	56                   	push   esi
c0017087:	53                   	push   ebx
c0017088:	83 ec 28             	sub    esp,0x28
c001708b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001708f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017093:	50                   	push   eax
c0017094:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017098:	50                   	push   eax
c0017099:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001709d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00170a1:	56                   	push   esi
c00170a2:	e8 75 fe ff ff       	call   c0016f1c <Video::tgaParse(unsigned char*, int, int*, int*)>
c00170a7:	83 c4 20             	add    esp,0x20
c00170aa:	85 c0                	test   eax,eax
c00170ac:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00170b0:	74 35                	je     c00170e7 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00170b2:	89 c7                	mov    edi,eax
c00170b4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00170b8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00170bc:	39 d8                	cmp    eax,ebx
c00170be:	7e 27                	jle    c00170e7 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00170c0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00170c4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00170c8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00170cc:	39 e8                	cmp    eax,ebp
c00170ce:	7e 14                	jle    c00170e4 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00170d0:	8b 06                	mov    eax,DWORD PTR [esi]
c00170d2:	83 c7 04             	add    edi,0x4
c00170d5:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00170d8:	53                   	push   ebx
c00170d9:	55                   	push   ebp
c00170da:	45                   	inc    ebp
c00170db:	56                   	push   esi
c00170dc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00170df:	83 c4 10             	add    esp,0x10
c00170e2:	eb e0                	jmp    c00170c4 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00170e4:	43                   	inc    ebx
c00170e5:	eb cd                	jmp    c00170b4 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00170e7:	83 c4 1c             	add    esp,0x1c
c00170ea:	5b                   	pop    ebx
c00170eb:	5e                   	pop    esi
c00170ec:	5f                   	pop    edi
c00170ed:	5d                   	pop    ebp
c00170ee:	c3                   	ret    
c00170ef:	90                   	nop

c00170f0 <ACPI::close(int, int, void*)>:
c00170f0:	83 ec 1c             	sub    esp,0x1c
c00170f3:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00170fb:	74 0a                	je     c0017107 <ACPI::close(int, int, void*)+0x17>
c00170fd:	b8 00 00 00 00       	mov    eax,0x0
c0017102:	e9 8a 00 00 00       	jmp    c0017191 <ACPI::close(int, int, void*)+0xa1>
c0017107:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001710c:	75 27                	jne    c0017135 <ACPI::close(int, int, void*)+0x45>
c001710e:	a1 68 00 03 c0       	mov    eax,ds:0xc0030068
c0017113:	85 c0                	test   eax,eax
c0017115:	74 07                	je     c001711e <ACPI::close(int, int, void*)+0x2e>
c0017117:	a1 68 00 03 c0       	mov    eax,ds:0xc0030068
c001711c:	ff d0                	call   eax
c001711e:	83 ec 0c             	sub    esp,0xc
c0017121:	68 64 b1 02 c0       	push   0xc002b164
c0017126:	e8 10 2d 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c001712b:	83 c4 10             	add    esp,0x10
c001712e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017133:	eb 5c                	jmp    c0017191 <ACPI::close(int, int, void*)+0xa1>
c0017135:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001713a:	75 50                	jne    c001718c <ACPI::close(int, int, void*)+0x9c>
c001713c:	a1 64 00 03 c0       	mov    eax,ds:0xc0030064
c0017141:	85 c0                	test   eax,eax
c0017143:	74 07                	je     c001714c <ACPI::close(int, int, void*)+0x5c>
c0017145:	a1 64 00 03 c0       	mov    eax,ds:0xc0030064
c001714a:	ff d0                	call   eax
c001714c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017151:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017156:	83 e0 02             	and    eax,0x2
c0017159:	74 1c                	je     c0017177 <ACPI::close(int, int, void*)+0x87>
c001715b:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017162:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017166:	89 c2                	mov    edx,eax
c0017168:	ec                   	in     al,dx
c0017169:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001716d:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017171:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017175:	eb da                	jmp    c0017151 <ACPI::close(int, int, void*)+0x61>
c0017177:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001717e:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017183:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017187:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001718b:	ee                   	out    dx,al
c001718c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017191:	83 c4 1c             	add    esp,0x1c
c0017194:	c3                   	ret    

c0017195 <findRSDP()>:
c0017195:	83 ec 1c             	sub    esp,0x1c
c0017198:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c001719d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00171a3:	83 e0 04             	and    eax,0x4
c00171a6:	84 c0                	test   al,al
c00171a8:	75 07                	jne    c00171b1 <findRSDP()+0x1c>
c00171aa:	b8 00 00 00 00       	mov    eax,0x0
c00171af:	eb 6a                	jmp    c001721b <findRSDP()+0x86>
c00171b1:	a1 14 da 02 c0       	mov    eax,ds:0xc002da14
c00171b6:	3d ff 07 00 00       	cmp    eax,0x7ff
c00171bb:	7f 1b                	jg     c00171d8 <findRSDP()+0x43>
c00171bd:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00171c2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00171c8:	83 e2 fb             	and    edx,0xfffffffb
c00171cb:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00171d1:	b8 00 00 00 00       	mov    eax,0x0
c00171d6:	eb 43                	jmp    c001721b <findRSDP()+0x86>
c00171d8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00171e0:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00171e8:	77 2c                	ja     c0017216 <findRSDP()+0x81>
c00171ea:	83 ec 04             	sub    esp,0x4
c00171ed:	6a 08                	push   0x8
c00171ef:	68 ff b1 02 c0       	push   0xc002b1ff
c00171f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171f8:	e8 4f 94 fe ff       	call   c000064c <memcmp>
c00171fd:	83 c4 10             	add    esp,0x10
c0017200:	85 c0                	test   eax,eax
c0017202:	0f 94 c0             	sete   al
c0017205:	84 c0                	test   al,al
c0017207:	74 06                	je     c001720f <findRSDP()+0x7a>
c0017209:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001720d:	eb 0c                	jmp    c001721b <findRSDP()+0x86>
c001720f:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017214:	eb ca                	jmp    c00171e0 <findRSDP()+0x4b>
c0017216:	b8 00 00 00 00       	mov    eax,0x0
c001721b:	83 c4 1c             	add    esp,0x1c
c001721e:	c3                   	ret    

c001721f <loadACPITables(unsigned char*)>:
c001721f:	57                   	push   edi
c0017220:	56                   	push   esi
c0017221:	53                   	push   ebx
c0017222:	83 ec 60             	sub    esp,0x60
c0017225:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c001722a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017230:	83 e0 04             	and    eax,0x4
c0017233:	84 c0                	test   al,al
c0017235:	0f 84 33 02 00 00    	je     c001746e <loadACPITables(unsigned char*)+0x24f>
c001723b:	a0 80 02 03 c0       	mov    al,ds:0xc0030280
c0017240:	84 c0                	test   al,al
c0017242:	74 75                	je     c00172b9 <loadACPITables(unsigned char*)+0x9a>
c0017244:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017248:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001724c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017250:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017253:	83 e8 24             	sub    eax,0x24
c0017256:	c1 e8 03             	shr    eax,0x3
c0017259:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001725d:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0017265:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017269:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001726d:	0f 8d b2 00 00 00    	jge    c0017325 <loadACPITables(unsigned char*)+0x106>
c0017273:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017277:	83 c0 24             	add    eax,0x24
c001727a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001727e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017282:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017286:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001728a:	c1 e0 03             	shl    eax,0x3
c001728d:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0017291:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017295:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017298:	8b 00                	mov    eax,DWORD PTR [eax]
c001729a:	89 c1                	mov    ecx,eax
c001729c:	a1 6c 00 03 c0       	mov    eax,ds:0xc003006c
c00172a1:	8d 50 01             	lea    edx,[eax+0x1]
c00172a4:	89 15 6c 00 03 c0    	mov    DWORD PTR ds:0xc003006c,edx
c00172aa:	89 ca                	mov    edx,ecx
c00172ac:	89 14 c5 84 00 03 c0 	mov    DWORD PTR [eax*8-0x3ffcff7c],edx
c00172b3:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00172b7:	eb ac                	jmp    c0017265 <loadACPITables(unsigned char*)+0x46>
c00172b9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00172bd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00172c1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00172c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00172c8:	83 e8 24             	sub    eax,0x24
c00172cb:	c1 e8 02             	shr    eax,0x2
c00172ce:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00172d2:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00172da:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00172de:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c00172e2:	7d 41                	jge    c0017325 <loadACPITables(unsigned char*)+0x106>
c00172e4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00172e8:	83 c0 24             	add    eax,0x24
c00172eb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00172ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00172f3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00172f7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00172fb:	c1 e0 02             	shl    eax,0x2
c00172fe:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017302:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017306:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017308:	a1 6c 00 03 c0       	mov    eax,ds:0xc003006c
c001730d:	8d 50 01             	lea    edx,[eax+0x1]
c0017310:	89 15 6c 00 03 c0    	mov    DWORD PTR ds:0xc003006c,edx
c0017316:	89 ca                	mov    edx,ecx
c0017318:	89 14 c5 84 00 03 c0 	mov    DWORD PTR [eax*8-0x3ffcff7c],edx
c001731f:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0017323:	eb b5                	jmp    c00172da <loadACPITables(unsigned char*)+0xbb>
c0017325:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001732d:	a1 6c 00 03 c0       	mov    eax,ds:0xc003006c
c0017332:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0017336:	0f 8d 33 01 00 00    	jge    c001746f <loadACPITables(unsigned char*)+0x250>
c001733c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017340:	8b 04 c5 84 00 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcff7c]
c0017347:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001734b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001734f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017353:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017357:	25 ff 0f 00 00       	and    eax,0xfff
c001735c:	89 c6                	mov    esi,eax
c001735e:	8b 1d 30 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db30
c0017364:	83 ec 0c             	sub    esp,0xc
c0017367:	6a 01                	push   0x1
c0017369:	e8 b1 9e ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c001736e:	83 c4 10             	add    esp,0x10
c0017371:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017375:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001737b:	83 ec 0c             	sub    esp,0xc
c001737e:	6a 01                	push   0x1
c0017380:	6a 01                	push   0x1
c0017382:	50                   	push   eax
c0017383:	52                   	push   edx
c0017384:	53                   	push   ebx
c0017385:	e8 48 a9 ff ff       	call   c0011cd2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001738a:	83 c4 20             	add    esp,0x20
c001738d:	09 f0                	or     eax,esi
c001738f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017393:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017397:	c1 e0 03             	shl    eax,0x3
c001739a:	05 80 00 03 c0       	add    eax,0xc0030080
c001739f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00173a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00173ab:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c00173b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00173b7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00173bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00173bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00173c3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00173c7:	89 c6                	mov    esi,eax
c00173c9:	89 d7                	mov    edi,edx
c00173cb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00173cd:	89 c8                	mov    eax,ecx
c00173cf:	89 fa                	mov    edx,edi
c00173d1:	89 f3                	mov    ebx,esi
c00173d3:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00173d7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00173db:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00173df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173e3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00173e6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00173ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173ee:	05 00 10 00 00       	add    eax,0x1000
c00173f3:	c1 e8 0c             	shr    eax,0xc
c00173f6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00173fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017402:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017406:	25 ff 0f 00 00       	and    eax,0xfff
c001740b:	89 c6                	mov    esi,eax
c001740d:	8b 1d 30 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db30
c0017413:	83 ec 0c             	sub    esp,0xc
c0017416:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001741a:	e8 00 9e ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c001741f:	83 c4 10             	add    esp,0x10
c0017422:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017426:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001742c:	83 ec 0c             	sub    esp,0xc
c001742f:	6a 01                	push   0x1
c0017431:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017435:	50                   	push   eax
c0017436:	52                   	push   edx
c0017437:	53                   	push   ebx
c0017438:	e8 95 a8 ff ff       	call   c0011cd2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001743d:	83 c4 20             	add    esp,0x20
c0017440:	09 f0                	or     eax,esi
c0017442:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017446:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001744a:	83 ec 0c             	sub    esp,0xc
c001744d:	50                   	push   eax
c001744e:	e8 12 a2 ff ff       	call   c0011665 <Virt::freeKernelVirtualPages(unsigned long)>
c0017453:	83 c4 10             	add    esp,0x10
c0017456:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001745a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001745e:	89 14 c5 84 00 03 c0 	mov    DWORD PTR [eax*8-0x3ffcff7c],edx
c0017465:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017469:	e9 bf fe ff ff       	jmp    c001732d <loadACPITables(unsigned char*)+0x10e>
c001746e:	90                   	nop
c001746f:	83 c4 60             	add    esp,0x60
c0017472:	5b                   	pop    ebx
c0017473:	5e                   	pop    esi
c0017474:	5f                   	pop    edi
c0017475:	c3                   	ret    

c0017476 <findRSDT(unsigned char*)>:
c0017476:	57                   	push   edi
c0017477:	56                   	push   esi
c0017478:	53                   	push   ebx
c0017479:	83 ec 50             	sub    esp,0x50
c001747c:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0017481:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017487:	83 e0 04             	and    eax,0x4
c001748a:	84 c0                	test   al,al
c001748c:	75 0a                	jne    c0017498 <findRSDT(unsigned char*)+0x22>
c001748e:	b8 00 00 00 00       	mov    eax,0x0
c0017493:	e9 21 01 00 00       	jmp    c00175b9 <findRSDT(unsigned char*)+0x143>
c0017498:	89 e0                	mov    eax,esp
c001749a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001749e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00174a2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00174a6:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c00174ae:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00174b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00174b6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00174ba:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00174be:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00174c2:	89 c6                	mov    esi,eax
c00174c4:	89 d7                	mov    edi,edx
c00174c6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00174c8:	89 c8                	mov    eax,ecx
c00174ca:	89 fa                	mov    edx,edi
c00174cc:	89 f3                	mov    ebx,esi
c00174ce:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00174d2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00174d6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00174da:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00174de:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c00174e2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c00174ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00174ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00174f2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00174f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174fa:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00174fe:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017502:	25 ff 0f 00 00       	and    eax,0xfff
c0017507:	89 c6                	mov    esi,eax
c0017509:	8b 1d 30 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db30
c001750f:	83 ec 0c             	sub    esp,0xc
c0017512:	6a 02                	push   0x2
c0017514:	e8 06 9d ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0017519:	83 c4 10             	add    esp,0x10
c001751c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017520:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017526:	83 ec 0c             	sub    esp,0xc
c0017529:	6a 01                	push   0x1
c001752b:	6a 02                	push   0x2
c001752d:	50                   	push   eax
c001752e:	52                   	push   edx
c001752f:	53                   	push   ebx
c0017530:	e8 9d a7 ff ff       	call   c0011cd2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017535:	83 c4 20             	add    esp,0x20
c0017538:	09 f0                	or     eax,esi
c001753a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001753e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017542:	25 ff 0f 00 00       	and    eax,0xfff
c0017547:	89 c6                	mov    esi,eax
c0017549:	8b 1d 30 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db30
c001754f:	83 ec 0c             	sub    esp,0xc
c0017552:	6a 02                	push   0x2
c0017554:	e8 c6 9c ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0017559:	83 c4 10             	add    esp,0x10
c001755c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017560:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017566:	83 ec 0c             	sub    esp,0xc
c0017569:	6a 01                	push   0x1
c001756b:	6a 02                	push   0x2
c001756d:	50                   	push   eax
c001756e:	52                   	push   edx
c001756f:	53                   	push   ebx
c0017570:	e8 5d a7 ff ff       	call   c0011cd2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017575:	83 c4 20             	add    esp,0x20
c0017578:	09 f0                	or     eax,esi
c001757a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001757e:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0017583:	75 11                	jne    c0017596 <findRSDT(unsigned char*)+0x120>
c0017585:	c6 05 80 02 03 c0 00 	mov    BYTE PTR ds:0xc0030280,0x0
c001758c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017590:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017594:	eb 1f                	jmp    c00175b5 <findRSDT(unsigned char*)+0x13f>
c0017596:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c001759b:	75 11                	jne    c00175ae <findRSDT(unsigned char*)+0x138>
c001759d:	c6 05 80 02 03 c0 01 	mov    BYTE PTR ds:0xc0030280,0x1
c00175a4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00175a8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00175ac:	eb 07                	jmp    c00175b5 <findRSDT(unsigned char*)+0x13f>
c00175ae:	b8 00 00 00 00       	mov    eax,0x0
c00175b3:	eb 04                	jmp    c00175b9 <findRSDT(unsigned char*)+0x143>
c00175b5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00175b9:	83 c4 50             	add    esp,0x50
c00175bc:	5b                   	pop    ebx
c00175bd:	5e                   	pop    esi
c00175be:	5f                   	pop    edi
c00175bf:	c3                   	ret    

c00175c0 <findDataTable(unsigned char*, char*)>:
c00175c0:	83 ec 1c             	sub    esp,0x1c
c00175c3:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00175c8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00175ce:	83 e0 04             	and    eax,0x4
c00175d1:	84 c0                	test   al,al
c00175d3:	75 07                	jne    c00175dc <findDataTable(unsigned char*, char*)+0x1c>
c00175d5:	b8 00 00 00 00       	mov    eax,0x0
c00175da:	eb 52                	jmp    c001762e <findDataTable(unsigned char*, char*)+0x6e>
c00175dc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00175e4:	a1 6c 00 03 c0       	mov    eax,ds:0xc003006c
c00175e9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00175ed:	7d 3a                	jge    c0017629 <findDataTable(unsigned char*, char*)+0x69>
c00175ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175f3:	c1 e0 03             	shl    eax,0x3
c00175f6:	05 80 00 03 c0       	add    eax,0xc0030080
c00175fb:	83 ec 04             	sub    esp,0x4
c00175fe:	6a 04                	push   0x4
c0017600:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017604:	50                   	push   eax
c0017605:	e8 42 90 fe ff       	call   c000064c <memcmp>
c001760a:	83 c4 10             	add    esp,0x10
c001760d:	85 c0                	test   eax,eax
c001760f:	0f 94 c0             	sete   al
c0017612:	84 c0                	test   al,al
c0017614:	74 0d                	je     c0017623 <findDataTable(unsigned char*, char*)+0x63>
c0017616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001761a:	8b 04 c5 84 00 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcff7c]
c0017621:	eb 0b                	jmp    c001762e <findDataTable(unsigned char*, char*)+0x6e>
c0017623:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017627:	eb bb                	jmp    c00175e4 <findDataTable(unsigned char*, char*)+0x24>
c0017629:	b8 00 00 00 00       	mov    eax,0x0
c001762e:	83 c4 1c             	add    esp,0x1c
c0017631:	c3                   	ret    

c0017632 <scanMADT()>:
c0017632:	53                   	push   ebx
c0017633:	83 ec 38             	sub    esp,0x38
c0017636:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c001763b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017641:	83 e0 04             	and    eax,0x4
c0017644:	84 c0                	test   al,al
c0017646:	0f 84 4a 04 00 00    	je     c0017a96 <scanMADT()+0x464>
c001764c:	e8 44 fb ff ff       	call   c0017195 <findRSDP()>
c0017651:	a3 8c 02 03 c0       	mov    ds:0xc003028c,eax
c0017656:	a1 8c 02 03 c0       	mov    eax,ds:0xc003028c
c001765b:	85 c0                	test   eax,eax
c001765d:	75 19                	jne    c0017678 <scanMADT()+0x46>
c001765f:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0017664:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001766a:	83 e2 fb             	and    edx,0xfffffffb
c001766d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017673:	e9 22 04 00 00       	jmp    c0017a9a <scanMADT()+0x468>
c0017678:	a1 8c 02 03 c0       	mov    eax,ds:0xc003028c
c001767d:	83 ec 0c             	sub    esp,0xc
c0017680:	50                   	push   eax
c0017681:	e8 f0 fd ff ff       	call   c0017476 <findRSDT(unsigned char*)>
c0017686:	83 c4 10             	add    esp,0x10
c0017689:	a3 88 02 03 c0       	mov    ds:0xc0030288,eax
c001768e:	a1 88 02 03 c0       	mov    eax,ds:0xc0030288
c0017693:	85 c0                	test   eax,eax
c0017695:	75 19                	jne    c00176b0 <scanMADT()+0x7e>
c0017697:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c001769c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00176a2:	83 e2 fb             	and    edx,0xfffffffb
c00176a5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00176ab:	e9 ea 03 00 00       	jmp    c0017a9a <scanMADT()+0x468>
c00176b0:	a1 88 02 03 c0       	mov    eax,ds:0xc0030288
c00176b5:	83 ec 0c             	sub    esp,0xc
c00176b8:	50                   	push   eax
c00176b9:	e8 61 fb ff ff       	call   c001721f <loadACPITables(unsigned char*)>
c00176be:	83 c4 10             	add    esp,0x10
c00176c1:	a1 88 02 03 c0       	mov    eax,ds:0xc0030288
c00176c6:	83 ec 08             	sub    esp,0x8
c00176c9:	68 08 b2 02 c0       	push   0xc002b208
c00176ce:	50                   	push   eax
c00176cf:	e8 ec fe ff ff       	call   c00175c0 <findDataTable(unsigned char*, char*)>
c00176d4:	83 c4 10             	add    esp,0x10
c00176d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00176db:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00176e0:	75 19                	jne    c00176fb <scanMADT()+0xc9>
c00176e2:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00176e7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00176ed:	83 e2 fe             	and    edx,0xfffffffe
c00176f0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00176f6:	e9 9f 03 00 00       	jmp    c0017a9a <scanMADT()+0x468>
c00176fb:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017703:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017707:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001770a:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001770e:	0f 87 86 03 00 00    	ja     c0017a9a <scanMADT()+0x468>
c0017714:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c001771c:	0f 87 78 03 00 00    	ja     c0017a9a <scanMADT()+0x468>
c0017722:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017726:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001772a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001772e:	8d 50 01             	lea    edx,[eax+0x1]
c0017731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017735:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017739:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001773d:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017741:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017745:	8d 50 01             	lea    edx,[eax+0x1]
c0017748:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001774c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017750:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017754:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017758:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c001775d:	0f 86 36 03 00 00    	jbe    c0017a99 <scanMADT()+0x467>
c0017763:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017768:	75 57                	jne    c00177c1 <scanMADT()+0x18f>
c001776a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001776e:	8d 50 01             	lea    edx,[eax+0x1]
c0017771:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017775:	8a 15 80 04 03 c0    	mov    dl,BYTE PTR ds:0xc0030480
c001777b:	0f b6 d2             	movzx  edx,dl
c001777e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017782:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017786:	88 82 c0 04 03 c0    	mov    BYTE PTR [edx-0x3ffcfb40],al
c001778c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017790:	8d 50 01             	lea    edx,[eax+0x1]
c0017793:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017797:	8a 15 80 04 03 c0    	mov    dl,BYTE PTR ds:0xc0030480
c001779d:	8d 4a 01             	lea    ecx,[edx+0x1]
c00177a0:	88 0d 80 04 03 c0    	mov    BYTE PTR ds:0xc0030480,cl
c00177a6:	0f b6 d2             	movzx  edx,dl
c00177a9:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00177ad:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00177b1:	88 82 a0 04 03 c0    	mov    BYTE PTR [edx-0x3ffcfb60],al
c00177b7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00177bc:	e9 c1 02 00 00       	jmp    c0017a82 <scanMADT()+0x450>
c00177c1:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00177c6:	0f 85 14 01 00 00    	jne    c00178e0 <scanMADT()+0x2ae>
c00177cc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177d0:	8d 50 01             	lea    edx,[eax+0x1]
c00177d3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00177d7:	8a 15 40 03 03 c0    	mov    dl,BYTE PTR ds:0xc0030340
c00177dd:	0f b6 d2             	movzx  edx,dl
c00177e0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00177e4:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00177e8:	88 82 60 03 03 c0    	mov    BYTE PTR [edx-0x3ffcfca0],al
c00177ee:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00177f2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177f6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177fa:	01 d0                	add    eax,edx
c00177fc:	83 c0 2c             	add    eax,0x2c
c00177ff:	8a 00                	mov    al,BYTE PTR [eax]
c0017801:	0f b6 d0             	movzx  edx,al
c0017804:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017808:	8d 48 01             	lea    ecx,[eax+0x1]
c001780b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001780f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017813:	0f b6 c0             	movzx  eax,al
c0017816:	c1 e0 08             	shl    eax,0x8
c0017819:	89 d1                	mov    ecx,edx
c001781b:	09 c1                	or     ecx,eax
c001781d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017821:	8d 50 02             	lea    edx,[eax+0x2]
c0017824:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017828:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001782c:	0f b6 c0             	movzx  eax,al
c001782f:	c1 e0 10             	shl    eax,0x10
c0017832:	09 c1                	or     ecx,eax
c0017834:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017838:	8d 50 03             	lea    edx,[eax+0x3]
c001783b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001783f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017843:	0f b6 c0             	movzx  eax,al
c0017846:	c1 e0 18             	shl    eax,0x18
c0017849:	09 c1                	or     ecx,eax
c001784b:	89 ca                	mov    edx,ecx
c001784d:	a0 40 03 03 c0       	mov    al,ds:0xc0030340
c0017852:	0f b6 c0             	movzx  eax,al
c0017855:	89 14 85 80 03 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfc80],edx
c001785c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017861:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017865:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017869:	01 d0                	add    eax,edx
c001786b:	83 c0 2c             	add    eax,0x2c
c001786e:	8a 00                	mov    al,BYTE PTR [eax]
c0017870:	0f b6 d0             	movzx  edx,al
c0017873:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017877:	8d 48 01             	lea    ecx,[eax+0x1]
c001787a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001787e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017882:	0f b6 c0             	movzx  eax,al
c0017885:	c1 e0 08             	shl    eax,0x8
c0017888:	89 d1                	mov    ecx,edx
c001788a:	09 c1                	or     ecx,eax
c001788c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017890:	8d 50 02             	lea    edx,[eax+0x2]
c0017893:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017897:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001789b:	0f b6 c0             	movzx  eax,al
c001789e:	c1 e0 10             	shl    eax,0x10
c00178a1:	09 c1                	or     ecx,eax
c00178a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178a7:	8d 50 03             	lea    edx,[eax+0x3]
c00178aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178ae:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00178b2:	0f b6 c0             	movzx  eax,al
c00178b5:	c1 e0 18             	shl    eax,0x18
c00178b8:	09 c1                	or     ecx,eax
c00178ba:	89 ca                	mov    edx,ecx
c00178bc:	a0 40 03 03 c0       	mov    al,ds:0xc0030340
c00178c1:	0f b6 c0             	movzx  eax,al
c00178c4:	89 14 85 00 04 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfc00],edx
c00178cb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00178d0:	a0 40 03 03 c0       	mov    al,ds:0xc0030340
c00178d5:	40                   	inc    eax
c00178d6:	a2 40 03 03 c0       	mov    ds:0xc0030340,al
c00178db:	e9 a2 01 00 00       	jmp    c0017a82 <scanMADT()+0x450>
c00178e0:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00178e5:	0f 85 e9 00 00 00    	jne    c00179d4 <scanMADT()+0x3a2>
c00178eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178ef:	8d 50 01             	lea    edx,[eax+0x1]
c00178f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00178f6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178fa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00178fe:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017902:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017906:	8d 50 01             	lea    edx,[eax+0x1]
c0017909:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001790d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017911:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017915:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017919:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001791d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017921:	01 d0                	add    eax,edx
c0017923:	83 c0 2c             	add    eax,0x2c
c0017926:	8a 00                	mov    al,BYTE PTR [eax]
c0017928:	0f b6 d0             	movzx  edx,al
c001792b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001792f:	8d 48 01             	lea    ecx,[eax+0x1]
c0017932:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017936:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001793a:	0f b6 c0             	movzx  eax,al
c001793d:	c1 e0 08             	shl    eax,0x8
c0017940:	89 d1                	mov    ecx,edx
c0017942:	09 c1                	or     ecx,eax
c0017944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017948:	8d 50 02             	lea    edx,[eax+0x2]
c001794b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001794f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017953:	0f b6 c0             	movzx  eax,al
c0017956:	c1 e0 10             	shl    eax,0x10
c0017959:	09 c1                	or     ecx,eax
c001795b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001795f:	8d 50 03             	lea    edx,[eax+0x3]
c0017962:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017966:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001796a:	0f b6 c0             	movzx  eax,al
c001796d:	c1 e0 18             	shl    eax,0x18
c0017970:	09 c8                	or     eax,ecx
c0017972:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017976:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001797b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001797f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017983:	01 d0                	add    eax,edx
c0017985:	83 c0 2c             	add    eax,0x2c
c0017988:	8a 00                	mov    al,BYTE PTR [eax]
c001798a:	0f b6 c0             	movzx  eax,al
c001798d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017991:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017994:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017998:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001799c:	0f b6 d2             	movzx  edx,dl
c001799f:	c1 e2 08             	shl    edx,0x8
c00179a2:	09 d0                	or     eax,edx
c00179a4:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00179a9:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00179ae:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00179b3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00179b7:	88 90 20 cc 02 c0    	mov    BYTE PTR [eax-0x3ffd33e0],dl
c00179bd:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00179c2:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00179c7:	66 89 84 12 20 03 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcfce0],ax
c00179cf:	e9 ae 00 00 00       	jmp    c0017a82 <scanMADT()+0x450>
c00179d4:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00179d9:	0f 85 97 00 00 00    	jne    c0017a76 <scanMADT()+0x444>
c00179df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179e3:	8d 50 01             	lea    edx,[eax+0x1]
c00179e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179ea:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179ee:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00179f2:	0f b6 c0             	movzx  eax,al
c00179f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00179f9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a01:	01 d0                	add    eax,edx
c0017a03:	83 c0 2c             	add    eax,0x2c
c0017a06:	8a 00                	mov    al,BYTE PTR [eax]
c0017a08:	0f b6 d0             	movzx  edx,al
c0017a0b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a0f:	8d 48 01             	lea    ecx,[eax+0x1]
c0017a12:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a16:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017a1a:	0f b6 c0             	movzx  eax,al
c0017a1d:	c1 e0 08             	shl    eax,0x8
c0017a20:	09 d0                	or     eax,edx
c0017a22:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a26:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017a2b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a2f:	8d 50 01             	lea    edx,[eax+0x1]
c0017a32:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a36:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a3a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a3e:	0f b6 c0             	movzx  eax,al
c0017a41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a49:	c1 e0 08             	shl    eax,0x8
c0017a4c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017a50:	89 c1                	mov    ecx,eax
c0017a52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a56:	c1 e0 18             	shl    eax,0x18
c0017a59:	89 c3                	mov    ebx,eax
c0017a5b:	a1 90 02 03 c0       	mov    eax,ds:0xc0030290
c0017a60:	8d 50 01             	lea    edx,[eax+0x1]
c0017a63:	89 15 90 02 03 c0    	mov    DWORD PTR ds:0xc0030290,edx
c0017a69:	09 d9                	or     ecx,ebx
c0017a6b:	89 ca                	mov    edx,ecx
c0017a6d:	89 14 85 a0 02 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfd60],edx
c0017a74:	eb 0c                	jmp    c0017a82 <scanMADT()+0x450>
c0017a76:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017a7b:	75 05                	jne    c0017a82 <scanMADT()+0x450>
c0017a7d:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017a82:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017a87:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a8b:	01 d0                	add    eax,edx
c0017a8d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017a91:	e9 6d fc ff ff       	jmp    c0017703 <scanMADT()+0xd1>
c0017a96:	90                   	nop
c0017a97:	eb 01                	jmp    c0017a9a <scanMADT()+0x468>
c0017a99:	90                   	nop
c0017a9a:	83 c4 38             	add    esp,0x38
c0017a9d:	5b                   	pop    ebx
c0017a9e:	c3                   	ret    
c0017a9f:	90                   	nop

c0017aa0 <ACPI::ACPI()>:
c0017aa0:	83 ec 0c             	sub    esp,0xc
c0017aa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017aa7:	83 ec 08             	sub    esp,0x8
c0017aaa:	68 0d b2 02 c0       	push   0xc002b20d
c0017aaf:	50                   	push   eax
c0017ab0:	e8 57 c2 ff ff       	call   c0013d0c <Device::Device(char const*)>
c0017ab5:	83 c4 10             	add    esp,0x10
c0017ab8:	ba 68 b3 02 c0       	mov    edx,0xc002b368
c0017abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ac1:	89 10                	mov    DWORD PTR [eax],edx
c0017ac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ac7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ad2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ae0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017aea:	e8 43 fb ff ff       	call   c0017632 <scanMADT()>
c0017aef:	90                   	nop
c0017af0:	83 c4 0c             	add    esp,0xc
c0017af3:	c3                   	ret    

c0017af4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017af4:	83 ec 2c             	sub    esp,0x2c
c0017af7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017afb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017aff:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017b03:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017b07:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017b0c:	88 d0                	mov    al,dl
c0017b0e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017b12:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017b17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017b1f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b23:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b29:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017b2d:	0f 8d 97 00 00 00    	jge    c0017bca <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017b33:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b37:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b3b:	83 c2 2a             	add    edx,0x2a
c0017b3e:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017b42:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017b47:	75 78                	jne    c0017bc1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017b49:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b4d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b51:	83 c2 2a             	add    edx,0x2a
c0017b54:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017b58:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017b5c:	75 63                	jne    c0017bc1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017b5e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017b63:	74 3a                	je     c0017b9f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017b65:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b69:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b6d:	83 c2 2a             	add    edx,0x2a
c0017b70:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017b74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b7b:	39 c2                	cmp    edx,eax
c0017b7d:	74 10                	je     c0017b8f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017b7f:	83 ec 0c             	sub    esp,0xc
c0017b82:	68 88 b1 02 c0       	push   0xc002b188
c0017b87:	e8 af 22 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c0017b8c:	83 c4 10             	add    esp,0x10
c0017b8f:	83 ec 0c             	sub    esp,0xc
c0017b92:	68 12 b2 02 c0       	push   0xc002b212
c0017b97:	e8 9f 22 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c0017b9c:	83 c4 10             	add    esp,0x10
c0017b9f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017ba3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ba7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017bab:	83 c2 2a             	add    edx,0x2a
c0017bae:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017bb2:	8b 02                	mov    eax,DWORD PTR [edx]
c0017bb4:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017bb7:	89 01                	mov    DWORD PTR [ecx],eax
c0017bb9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017bbc:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017bc1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017bc5:	e9 55 ff ff ff       	jmp    c0017b1f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017bca:	90                   	nop
c0017bcb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bcf:	83 c4 2c             	add    esp,0x2c
c0017bd2:	c2 04 00             	ret    0x4
c0017bd5:	90                   	nop

c0017bd6 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017bd6:	83 ec 1c             	sub    esp,0x1c
c0017bd9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bdd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017be1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017be5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017bea:	88 c8                	mov    al,cl
c0017bec:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017bf0:	88 d0                	mov    al,dl
c0017bf2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017bf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bfa:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017c00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c04:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017c07:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017c0b:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017c0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c13:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017c19:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c1d:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017c20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c24:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017c29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c2d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017c33:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017c37:	8d 48 01             	lea    ecx,[eax+0x1]
c0017c3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c3e:	83 c2 2a             	add    edx,0x2a
c0017c41:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017c45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c49:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017c4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c53:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017c56:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017c5a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017c5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c62:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017c68:	8d 50 01             	lea    edx,[eax+0x1]
c0017c6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c6f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017c75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c79:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017c7f:	3d 00 02 00 00       	cmp    eax,0x200
c0017c84:	75 10                	jne    c0017c96 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017c86:	83 ec 0c             	sub    esp,0xc
c0017c89:	68 21 b2 02 c0       	push   0xc002b221
c0017c8e:	e8 a8 21 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c0017c93:	83 c4 10             	add    esp,0x10
c0017c96:	90                   	nop
c0017c97:	83 c4 1c             	add    esp,0x1c
c0017c9a:	c3                   	ret    
c0017c9b:	90                   	nop

c0017c9c <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017c9c:	b8 00 00 00 00       	mov    eax,0x0
c0017ca1:	c3                   	ret    

c0017ca2 <ACPI::detectPCI()>:
c0017ca2:	53                   	push   ebx
c0017ca3:	83 ec 28             	sub    esp,0x28
c0017ca6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017cab:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017cb0:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0017cb5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017cbb:	83 e0 04             	and    eax,0x4
c0017cbe:	84 c0                	test   al,al
c0017cc0:	74 2b                	je     c0017ced <ACPI::detectPCI()+0x4b>
c0017cc2:	a1 88 02 03 c0       	mov    eax,ds:0xc0030288
c0017cc7:	83 ec 08             	sub    esp,0x8
c0017cca:	68 3e b2 02 c0       	push   0xc002b23e
c0017ccf:	50                   	push   eax
c0017cd0:	e8 eb f8 ff ff       	call   c00175c0 <findDataTable(unsigned char*, char*)>
c0017cd5:	83 c4 10             	add    esp,0x10
c0017cd8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017cdc:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017ce1:	74 0a                	je     c0017ced <ACPI::detectPCI()+0x4b>
c0017ce3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017ce8:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017ced:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017cf5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017cf9:	8a 00                	mov    al,BYTE PTR [eax]
c0017cfb:	3c 01                	cmp    al,0x1
c0017cfd:	75 0c                	jne    c0017d0b <ACPI::detectPCI()+0x69>
c0017cff:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d04:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017d09:	eb 26                	jmp    c0017d31 <ACPI::detectPCI()+0x8f>
c0017d0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d0f:	8a 00                	mov    al,BYTE PTR [eax]
c0017d11:	3c 02                	cmp    al,0x2
c0017d13:	75 1c                	jne    c0017d31 <ACPI::detectPCI()+0x8f>
c0017d15:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d1a:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017d1f:	74 10                	je     c0017d31 <ACPI::detectPCI()+0x8f>
c0017d21:	83 ec 0c             	sub    esp,0xc
c0017d24:	68 b8 b1 02 c0       	push   0xc002b1b8
c0017d29:	e8 0d 21 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c0017d2e:	83 c4 10             	add    esp,0x10
c0017d31:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017d35:	83 f0 01             	xor    eax,0x1
c0017d38:	84 c0                	test   al,al
c0017d3a:	74 3f                	je     c0017d7b <ACPI::detectPCI()+0xd9>
c0017d3c:	e8 0f 84 fe ff       	call   c0000150 <manualPCIProbe>
c0017d41:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017d45:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017d4a:	75 0c                	jne    c0017d58 <ACPI::detectPCI()+0xb6>
c0017d4c:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d51:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017d56:	eb 23                	jmp    c0017d7b <ACPI::detectPCI()+0xd9>
c0017d58:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0017d5d:	75 1c                	jne    c0017d7b <ACPI::detectPCI()+0xd9>
c0017d5f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d64:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017d69:	74 10                	je     c0017d7b <ACPI::detectPCI()+0xd9>
c0017d6b:	83 ec 0c             	sub    esp,0xc
c0017d6e:	68 b8 b1 02 c0       	push   0xc002b1b8
c0017d73:	e8 c3 20 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c0017d78:	83 c4 10             	add    esp,0x10
c0017d7b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017d80:	74 7e                	je     c0017e00 <ACPI::detectPCI()+0x15e>
c0017d82:	83 ec 0c             	sub    esp,0xc
c0017d85:	68 43 b2 02 c0       	push   0xc002b243
c0017d8a:	e8 64 78 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017d8f:	83 c4 10             	add    esp,0x10
c0017d92:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0017d9a:	83 ec 0c             	sub    esp,0xc
c0017d9d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017da1:	e8 f3 77 ff ff       	call   c000f599 <malloc>
c0017da6:	83 c4 10             	add    esp,0x10
c0017da9:	89 c3                	mov    ebx,eax
c0017dab:	83 ec 0c             	sub    esp,0xc
c0017dae:	53                   	push   ebx
c0017daf:	e8 b0 a5 00 00       	call   c0022364 <PCI::PCI()>
c0017db4:	83 c4 10             	add    esp,0x10
c0017db7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017dbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017dbf:	83 ec 08             	sub    esp,0x8
c0017dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017dc6:	50                   	push   eax
c0017dc7:	e8 3c bd ff ff       	call   c0013b08 <Device::addChild(Device*)>
c0017dcc:	83 c4 10             	add    esp,0x10
c0017dcf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017dd3:	8b 00                	mov    eax,DWORD PTR [eax]
c0017dd5:	83 c0 08             	add    eax,0x8
c0017dd8:	8b 00                	mov    eax,DWORD PTR [eax]
c0017dda:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017ddf:	74 07                	je     c0017de8 <ACPI::detectPCI()+0x146>
c0017de1:	ba 01 00 00 00       	mov    edx,0x1
c0017de6:	eb 05                	jmp    c0017ded <ACPI::detectPCI()+0x14b>
c0017de8:	ba 02 00 00 00       	mov    edx,0x2
c0017ded:	6a 00                	push   0x0
c0017def:	6a 00                	push   0x0
c0017df1:	52                   	push   edx
c0017df2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017df6:	ff d0                	call   eax
c0017df8:	83 c4 10             	add    esp,0x10
c0017dfb:	e9 9e 00 00 00       	jmp    c0017e9e <ACPI::detectPCI()+0x1fc>
c0017e00:	83 ec 0c             	sub    esp,0xc
c0017e03:	68 5b b2 02 c0       	push   0xc002b25b
c0017e08:	e8 c2 a8 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0017e0d:	83 c4 10             	add    esp,0x10
c0017e10:	83 ec 0c             	sub    esp,0xc
c0017e13:	68 66 b2 02 c0       	push   0xc002b266
c0017e18:	e8 d6 77 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017e1d:	83 c4 10             	add    esp,0x10
c0017e20:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0017e27:	83 ec 0c             	sub    esp,0xc
c0017e2a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017e2e:	e8 66 77 ff ff       	call   c000f599 <malloc>
c0017e33:	83 c4 10             	add    esp,0x10
c0017e36:	89 c3                	mov    ebx,eax
c0017e38:	83 ec 0c             	sub    esp,0xc
c0017e3b:	53                   	push   ebx
c0017e3c:	e8 8d b0 00 00       	call   c0022ece <IDE::IDE()>
c0017e41:	83 c4 10             	add    esp,0x10
c0017e44:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0017e48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e4c:	83 ec 08             	sub    esp,0x8
c0017e4f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017e53:	50                   	push   eax
c0017e54:	e8 af bc ff ff       	call   c0013b08 <Device::addChild(Device*)>
c0017e59:	83 c4 10             	add    esp,0x10
c0017e5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e60:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0017e6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e6e:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0017e77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e7b:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0017e84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e88:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e8a:	83 c0 08             	add    eax,0x8
c0017e8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e8f:	6a 00                	push   0x0
c0017e91:	6a 00                	push   0x0
c0017e93:	6a 00                	push   0x0
c0017e95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017e99:	ff d0                	call   eax
c0017e9b:	83 c4 10             	add    esp,0x10
c0017e9e:	90                   	nop
c0017e9f:	83 c4 28             	add    esp,0x28
c0017ea2:	5b                   	pop    ebx
c0017ea3:	c3                   	ret    

c0017ea4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017ea4:	83 ec 1c             	sub    esp,0x1c
c0017ea7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017eab:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017eae:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017eb2:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0017eb7:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017ebc:	83 ec 08             	sub    esp,0x8
c0017ebf:	52                   	push   edx
c0017ec0:	50                   	push   eax
c0017ec1:	e8 ea 6c ff ff       	call   c000ebb0 <Computer::readCMOS(unsigned char)>
c0017ec6:	83 c4 10             	add    esp,0x10
c0017ec9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017ecd:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0017ed2:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017ed7:	83 ec 04             	sub    esp,0x4
c0017eda:	6a 01                	push   0x1
c0017edc:	52                   	push   edx
c0017edd:	50                   	push   eax
c0017ede:	e8 ff 6d ff ff       	call   c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017ee3:	83 c4 10             	add    esp,0x10
c0017ee6:	90                   	nop
c0017ee7:	83 c4 1c             	add    esp,0x1c
c0017eea:	c3                   	ret    
c0017eeb:	90                   	nop

c0017eec <ACPI::sleep()>:
c0017eec:	83 ec 0c             	sub    esp,0xc
c0017eef:	a1 60 00 03 c0       	mov    eax,ds:0xc0030060
c0017ef4:	85 c0                	test   eax,eax
c0017ef6:	74 07                	je     c0017eff <ACPI::sleep()+0x13>
c0017ef8:	a1 60 00 03 c0       	mov    eax,ds:0xc0030060
c0017efd:	ff d0                	call   eax
c0017eff:	90                   	nop
c0017f00:	83 c4 0c             	add    esp,0xc
c0017f03:	c3                   	ret    

c0017f04 <ACPI::open(int, int, void*)>:
c0017f04:	57                   	push   edi
c0017f05:	56                   	push   esi
c0017f06:	53                   	push   ebx
c0017f07:	81 ec 60 01 00 00    	sub    esp,0x160
c0017f0d:	83 ec 0c             	sub    esp,0xc
c0017f10:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0017f17:	e8 86 fd ff ff       	call   c0017ca2 <ACPI::detectPCI()>
c0017f1c:	83 c4 10             	add    esp,0x10
c0017f1f:	83 ec 0c             	sub    esp,0xc
c0017f22:	68 e0 b1 02 c0       	push   0xc002b1e0
c0017f27:	e8 c7 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017f2c:	83 c4 10             	add    esp,0x10
c0017f2f:	83 ec 0c             	sub    esp,0xc
c0017f32:	68 7b b2 02 c0       	push   0xc002b27b
c0017f37:	e8 52 46 00 00       	call   c001c58e <Thr::loadKernelSymbolTable(char const*)>
c0017f3c:	83 c4 10             	add    esp,0x10
c0017f3f:	83 ec 0c             	sub    esp,0xc
c0017f42:	68 99 b2 02 c0       	push   0xc002b299
c0017f47:	e8 a7 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017f4c:	83 c4 10             	add    esp,0x10
c0017f4f:	83 ec 04             	sub    esp,0x4
c0017f52:	6a 0c                	push   0xc
c0017f54:	68 b4 b2 02 c0       	push   0xc002b2b4
c0017f59:	68 c5 b2 02 c0       	push   0xc002b2c5
c0017f5e:	e8 94 2c 00 00       	call   c001abf7 <Reg::readIntWithDefault(char*, char*, int)>
c0017f63:	83 c4 10             	add    esp,0x10
c0017f66:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0017f6d:	83 ec 0c             	sub    esp,0xc
c0017f70:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0017f77:	e8 ad 94 ff ff       	call   c0011429 <Virt::setupPageSwapping(int)>
c0017f7c:	83 c4 10             	add    esp,0x10
c0017f7f:	83 ec 0c             	sub    esp,0xc
c0017f82:	68 15 9e 02 c0       	push   0xc0029e15
c0017f87:	e8 67 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017f8c:	83 c4 10             	add    esp,0x10
c0017f8f:	8b 1d c8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9c8
c0017f95:	83 ec 08             	sub    esp,0x8
c0017f98:	6a 01                	push   0x1
c0017f9a:	68 cc b2 02 c0       	push   0xc002b2cc
c0017f9f:	e8 61 50 00 00       	call   c001d005 <Thr::loadDLL(char const*, bool)>
c0017fa4:	83 c4 10             	add    esp,0x10
c0017fa7:	83 ec 08             	sub    esp,0x8
c0017faa:	53                   	push   ebx
c0017fab:	50                   	push   eax
c0017fac:	e8 85 52 00 00       	call   c001d236 <Thr::executeDLL(unsigned long, void*)>
c0017fb1:	83 c4 10             	add    esp,0x10
c0017fb4:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0017fbb:	83 ec 08             	sub    esp,0x8
c0017fbe:	6a 12                	push   0x12
c0017fc0:	50                   	push   eax
c0017fc1:	e8 c6 be ff ff       	call   c0013e8c <getDevicesOfType(DeviceType)>
c0017fc6:	83 c4 0c             	add    esp,0xc
c0017fc9:	83 ec 0c             	sub    esp,0xc
c0017fcc:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017fd3:	50                   	push   eax
c0017fd4:	e8 8b 09 01 00       	call   c0028964 <LinkedList<Device>::isEmpty()>
c0017fd9:	83 c4 10             	add    esp,0x10
c0017fdc:	83 f0 01             	xor    eax,0x1
c0017fdf:	84 c0                	test   al,al
c0017fe1:	0f 84 43 01 00 00    	je     c001812a <ACPI::open(int, int, void*)+0x226>
c0017fe7:	83 ec 0c             	sub    esp,0xc
c0017fea:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017ff1:	50                   	push   eax
c0017ff2:	e8 89 09 01 00       	call   c0028980 <LinkedList<Device>::getFirstElement()>
c0017ff7:	83 c4 10             	add    esp,0x10
c0017ffa:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0018001:	83 ec 0c             	sub    esp,0xc
c0018004:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001800b:	50                   	push   eax
c001800c:	e8 77 09 01 00       	call   c0028988 <LinkedList<Device>::removeFirst()>
c0018011:	83 c4 10             	add    esp,0x10
c0018014:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c001801b:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0018022:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c0018029:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001802d:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0018033:	ba 09 00 00 00       	mov    edx,0x9
c0018038:	fc                   	cld    
c0018039:	89 c7                	mov    edi,eax
c001803b:	89 de                	mov    esi,ebx
c001803d:	89 d1                	mov    ecx,edx
c001803f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018041:	83 ec 08             	sub    esp,0x8
c0018044:	8d 44 24 38          	lea    eax,[esp+0x38]
c0018048:	50                   	push   eax
c0018049:	83 ec 24             	sub    esp,0x24
c001804c:	89 e0                	mov    eax,esp
c001804e:	89 c3                	mov    ebx,eax
c0018050:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018054:	ba 09 00 00 00       	mov    edx,0x9
c0018059:	89 df                	mov    edi,ebx
c001805b:	89 c6                	mov    esi,eax
c001805d:	89 d1                	mov    ecx,edx
c001805f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018061:	e8 dc a7 00 00       	call   c0022842 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0018066:	83 c4 30             	add    esp,0x30
c0018069:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c0018070:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0018078:	0f 84 4b ff ff ff    	je     c0017fc9 <ACPI::open(int, int, void*)+0xc5>
c001807e:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0018089:	83 ec 0c             	sub    esp,0xc
c001808c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018093:	e8 01 75 ff ff       	call   c000f599 <malloc>
c0018098:	83 c4 10             	add    esp,0x10
c001809b:	89 c3                	mov    ebx,eax
c001809d:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00180a2:	83 ec 04             	sub    esp,0x4
c00180a5:	50                   	push   eax
c00180a6:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00180ad:	53                   	push   ebx
c00180ae:	e8 7b ab ff ff       	call   c0012c2e <File::File(char const*, Process*)>
c00180b3:	83 c4 10             	add    esp,0x10
c00180b6:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c00180bd:	83 ec 0c             	sub    esp,0xc
c00180c0:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00180c7:	e8 34 ae ff ff       	call   c0012f00 <File::exists()>
c00180cc:	83 c4 10             	add    esp,0x10
c00180cf:	84 c0                	test   al,al
c00180d1:	74 27                	je     c00180fa <ACPI::open(int, int, void*)+0x1f6>
c00180d3:	83 ec 08             	sub    esp,0x8
c00180d6:	6a 01                	push   0x1
c00180d8:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00180df:	e8 21 4f 00 00       	call   c001d005 <Thr::loadDLL(char const*, bool)>
c00180e4:	83 c4 10             	add    esp,0x10
c00180e7:	83 ec 08             	sub    esp,0x8
c00180ea:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00180f1:	50                   	push   eax
c00180f2:	e8 3f 51 00 00       	call   c001d236 <Thr::executeDLL(unsigned long, void*)>
c00180f7:	83 c4 10             	add    esp,0x10
c00180fa:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0018102:	0f 84 c1 fe ff ff    	je     c0017fc9 <ACPI::open(int, int, void*)+0xc5>
c0018108:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001810f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018111:	83 c0 08             	add    eax,0x8
c0018114:	8b 00                	mov    eax,DWORD PTR [eax]
c0018116:	83 ec 0c             	sub    esp,0xc
c0018119:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018120:	ff d0                	call   eax
c0018122:	83 c4 10             	add    esp,0x10
c0018125:	e9 9f fe ff ff       	jmp    c0017fc9 <ACPI::open(int, int, void*)+0xc5>
c001812a:	83 ec 0c             	sub    esp,0xc
c001812d:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018134:	50                   	push   eax
c0018135:	e8 28 08 01 00       	call   c0028962 <LinkedList<Device>::~LinkedList()>
c001813a:	83 c4 10             	add    esp,0x10
c001813d:	8b 1d c8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9c8
c0018143:	83 ec 08             	sub    esp,0x8
c0018146:	6a 01                	push   0x1
c0018148:	68 e7 b2 02 c0       	push   0xc002b2e7
c001814d:	e8 b3 4e 00 00       	call   c001d005 <Thr::loadDLL(char const*, bool)>
c0018152:	83 c4 10             	add    esp,0x10
c0018155:	83 ec 08             	sub    esp,0x8
c0018158:	53                   	push   ebx
c0018159:	50                   	push   eax
c001815a:	e8 d7 50 00 00       	call   c001d236 <Thr::executeDLL(unsigned long, void*)>
c001815f:	83 c4 10             	add    esp,0x10
c0018162:	8b 1d c8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9c8
c0018168:	83 ec 08             	sub    esp,0x8
c001816b:	6a 01                	push   0x1
c001816d:	68 04 b3 02 c0       	push   0xc002b304
c0018172:	e8 8e 4e 00 00       	call   c001d005 <Thr::loadDLL(char const*, bool)>
c0018177:	83 c4 10             	add    esp,0x10
c001817a:	83 ec 08             	sub    esp,0x8
c001817d:	53                   	push   ebx
c001817e:	50                   	push   eax
c001817f:	e8 b2 50 00 00       	call   c001d236 <Thr::executeDLL(unsigned long, void*)>
c0018184:	83 c4 10             	add    esp,0x10
c0018187:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c001818c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018192:	83 e0 04             	and    eax,0x4
c0018195:	84 c0                	test   al,al
c0018197:	0f 84 0d 01 00 00    	je     c00182aa <ACPI::open(int, int, void*)+0x3a6>
c001819d:	83 ec 0c             	sub    esp,0xc
c00181a0:	68 21 b3 02 c0       	push   0xc002b321
c00181a5:	e8 49 74 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c00181aa:	83 c4 10             	add    esp,0x10
c00181ad:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00181b8:	83 ec 0c             	sub    esp,0xc
c00181bb:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00181c2:	e8 d2 73 ff ff       	call   c000f599 <malloc>
c00181c7:	83 c4 10             	add    esp,0x10
c00181ca:	89 c3                	mov    ebx,eax
c00181cc:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c00181d1:	83 ec 04             	sub    esp,0x4
c00181d4:	50                   	push   eax
c00181d5:	68 3e b3 02 c0       	push   0xc002b33e
c00181da:	53                   	push   ebx
c00181db:	e8 4e aa ff ff       	call   c0012c2e <File::File(char const*, Process*)>
c00181e0:	83 c4 10             	add    esp,0x10
c00181e3:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c00181ea:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00181f2:	74 1a                	je     c001820e <ACPI::open(int, int, void*)+0x30a>
c00181f4:	83 ec 0c             	sub    esp,0xc
c00181f7:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00181fe:	e8 fd ac ff ff       	call   c0012f00 <File::exists()>
c0018203:	83 c4 10             	add    esp,0x10
c0018206:	84 c0                	test   al,al
c0018208:	74 04                	je     c001820e <ACPI::open(int, int, void*)+0x30a>
c001820a:	b0 01                	mov    al,0x1
c001820c:	eb 02                	jmp    c0018210 <ACPI::open(int, int, void*)+0x30c>
c001820e:	b0 00                	mov    al,0x0
c0018210:	84 c0                	test   al,al
c0018212:	74 25                	je     c0018239 <ACPI::open(int, int, void*)+0x335>
c0018214:	83 ec 08             	sub    esp,0x8
c0018217:	6a 01                	push   0x1
c0018219:	68 3e b3 02 c0       	push   0xc002b33e
c001821e:	e8 e2 4d 00 00       	call   c001d005 <Thr::loadDLL(char const*, bool)>
c0018223:	83 c4 10             	add    esp,0x10
c0018226:	83 ec 08             	sub    esp,0x8
c0018229:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c0018230:	50                   	push   eax
c0018231:	e8 00 50 00 00       	call   c001d236 <Thr::executeDLL(unsigned long, void*)>
c0018236:	83 c4 10             	add    esp,0x10
c0018239:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018241:	74 27                	je     c001826a <ACPI::open(int, int, void*)+0x366>
c0018243:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001824b:	74 1d                	je     c001826a <ACPI::open(int, int, void*)+0x366>
c001824d:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0018254:	8b 00                	mov    eax,DWORD PTR [eax]
c0018256:	83 c0 08             	add    eax,0x8
c0018259:	8b 00                	mov    eax,DWORD PTR [eax]
c001825b:	83 ec 0c             	sub    esp,0xc
c001825e:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018265:	ff d0                	call   eax
c0018267:	83 c4 10             	add    esp,0x10
c001826a:	a1 88 02 03 c0       	mov    eax,ds:0xc0030288
c001826f:	83 ec 08             	sub    esp,0x8
c0018272:	68 5b b3 02 c0       	push   0xc002b35b
c0018277:	50                   	push   eax
c0018278:	e8 43 f3 ff ff       	call   c00175c0 <findDataTable(unsigned char*, char*)>
c001827d:	83 c4 10             	add    esp,0x10
c0018280:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c0018287:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c001828f:	74 19                	je     c00182aa <ACPI::open(int, int, void*)+0x3a6>
c0018291:	83 ec 08             	sub    esp,0x8
c0018294:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001829b:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c00182a2:	e8 fd fb ff ff       	call   c0017ea4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00182a7:	83 c4 10             	add    esp,0x10
c00182aa:	b8 00 00 00 00       	mov    eax,0x0
c00182af:	81 c4 60 01 00 00    	add    esp,0x160
c00182b5:	5b                   	pop    ebx
c00182b6:	5e                   	pop    esi
c00182b7:	5f                   	pop    edi
c00182b8:	c3                   	ret    
c00182b9:	90                   	nop

c00182ba <CPU::close(int, int, void*)>:
c00182ba:	31 c0                	xor    eax,eax
c00182bc:	c3                   	ret    
c00182bd:	90                   	nop

c00182be <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00182be:	55                   	push   ebp
c00182bf:	57                   	push   edi
c00182c0:	56                   	push   esi
c00182c1:	53                   	push   ebx
c00182c2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00182c6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182ca:	89 ce                	mov    esi,ecx
c00182cc:	89 d5                	mov    ebp,edx
c00182ce:	80 f9 04             	cmp    cl,0x4
c00182d1:	75 28                	jne    c00182fb <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00182d3:	8d 42 f9             	lea    eax,[edx-0x7]
c00182d6:	3c 03                	cmp    al,0x3
c00182d8:	0f 86 63 01 00 00    	jbe    c0018441 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00182de:	80 fa 03             	cmp    dl,0x3
c00182e1:	0f 84 5a 01 00 00    	je     c0018441 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00182e7:	8d 7a f2             	lea    edi,[edx-0xe]
c00182ea:	b8 f0 cd 02 c0       	mov    eax,0xc002cdf0
c00182ef:	89 fb                	mov    ebx,edi
c00182f1:	80 fb 01             	cmp    bl,0x1
c00182f4:	77 4e                	ja     c0018344 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00182f6:	e9 52 01 00 00       	jmp    c001844d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182fb:	80 f9 05             	cmp    cl,0x5
c00182fe:	75 4d                	jne    c001834d <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018300:	b8 00 ce 02 c0       	mov    eax,0xc002ce00
c0018305:	80 fa 03             	cmp    dl,0x3
c0018308:	0f 86 3f 01 00 00    	jbe    c001844d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001830e:	8d 7a fa             	lea    edi,[edx-0x6]
c0018311:	b8 10 ce 02 c0       	mov    eax,0xc002ce10
c0018316:	89 fb                	mov    ebx,edi
c0018318:	80 fb 01             	cmp    bl,0x1
c001831b:	0f 86 2c 01 00 00    	jbe    c001844d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018321:	b8 20 ce 02 c0       	mov    eax,0xc002ce20
c0018326:	80 fa 08             	cmp    dl,0x8
c0018329:	0f 84 1e 01 00 00    	je     c001844d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001832f:	89 d7                	mov    edi,edx
c0018331:	b8 30 ce 02 c0       	mov    eax,0xc002ce30
c0018336:	83 e7 fb             	and    edi,0xfffffffb
c0018339:	89 fb                	mov    ebx,edi
c001833b:	80 fb 09             	cmp    bl,0x9
c001833e:	0f 84 09 01 00 00    	je     c001844d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018344:	31 c0                	xor    eax,eax
c0018346:	89 eb                	mov    ebx,ebp
c0018348:	0f b6 fb             	movzx  edi,bl
c001834b:	eb 30                	jmp    c001837d <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001834d:	31 c0                	xor    eax,eax
c001834f:	80 f9 06             	cmp    cl,0x6
c0018352:	75 f2                	jne    c0018346 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018354:	80 fa 0a             	cmp    dl,0xa
c0018357:	77 ed                	ja     c0018346 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018359:	bf de 05 00 00       	mov    edi,0x5de
c001835e:	0f a3 d7             	bt     edi,edx
c0018361:	73 e3                	jae    c0018346 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018363:	b8 40 ce 02 c0       	mov    eax,0xc002ce40
c0018368:	e9 e0 00 00 00       	jmp    c001844d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001836d:	39 c7                	cmp    edi,eax
c001836f:	0f 84 d3 00 00 00    	je     c0018448 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018375:	40                   	inc    eax
c0018376:	3d d0 00 00 00       	cmp    eax,0xd0
c001837b:	74 09                	je     c0018386 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001837d:	89 f3                	mov    ebx,esi
c001837f:	80 fb 0f             	cmp    bl,0xf
c0018382:	75 f1                	jne    c0018375 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018384:	eb e7                	jmp    c001836d <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018386:	80 f9 10             	cmp    cl,0x10
c0018389:	75 14                	jne    c001839f <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001838b:	8d 42 fc             	lea    eax,[edx-0x4]
c001838e:	83 e0 fb             	and    eax,0xfffffffb
c0018391:	3c 02                	cmp    al,0x2
c0018393:	76 34                	jbe    c00183c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018395:	b8 e1 b4 02 c0       	mov    eax,0xc002b4e1
c001839a:	80 fa 02             	cmp    dl,0x2
c001839d:	eb 24                	jmp    c00183c3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c001839f:	80 f9 11             	cmp    cl,0x11
c00183a2:	75 13                	jne    c00183b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00183a4:	b8 e1 b4 02 c0       	mov    eax,0xc002b4e1
c00183a9:	80 fa 03             	cmp    dl,0x3
c00183ac:	0f 85 9b 00 00 00    	jne    c001844d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183b2:	e9 91 00 00 00       	jmp    c0018448 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00183b7:	80 f9 12             	cmp    cl,0x12
c00183ba:	75 14                	jne    c00183d0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00183bc:	b8 e1 b4 02 c0       	mov    eax,0xc002b4e1
c00183c1:	fe ca                	dec    dl
c00183c3:	0f 85 84 00 00 00    	jne    c001844d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183c9:	b8 60 ce 02 c0       	mov    eax,0xc002ce60
c00183ce:	eb 7d                	jmp    c001844d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183d0:	80 f9 14             	cmp    cl,0x14
c00183d3:	75 12                	jne    c00183e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00183d5:	4a                   	dec    edx
c00183d6:	b8 e1 b4 02 c0       	mov    eax,0xc002b4e1
c00183db:	80 fa 01             	cmp    dl,0x1
c00183de:	77 6d                	ja     c001844d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183e0:	b8 70 ce 02 c0       	mov    eax,0xc002ce70
c00183e5:	eb 66                	jmp    c001844d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183e7:	80 f9 15             	cmp    cl,0x15
c00183ea:	75 31                	jne    c001841d <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00183ec:	b8 80 ce 02 c0       	mov    eax,0xc002ce80
c00183f1:	80 fa 01             	cmp    dl,0x1
c00183f4:	74 57                	je     c001844d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183f6:	b8 e1 b4 02 c0       	mov    eax,0xc002b4e1
c00183fb:	80 fa 13             	cmp    dl,0x13
c00183fe:	76 0c                	jbe    c001840c <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018400:	80 fa 30             	cmp    dl,0x30
c0018403:	75 48                	jne    c001844d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018405:	b8 a0 ce 02 c0       	mov    eax,0xc002cea0
c001840a:	eb 41                	jmp    c001844d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001840c:	b9 04 00 09 00       	mov    ecx,0x90004
c0018411:	0f a3 d1             	bt     ecx,edx
c0018414:	73 37                	jae    c001844d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018416:	b8 90 ce 02 c0       	mov    eax,0xc002ce90
c001841b:	eb 30                	jmp    c001844d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001841d:	b8 e1 b4 02 c0       	mov    eax,0xc002b4e1
c0018422:	80 f9 16             	cmp    cl,0x16
c0018425:	75 26                	jne    c001844d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018427:	b8 b0 ce 02 c0       	mov    eax,0xc002ceb0
c001842c:	84 d2                	test   dl,dl
c001842e:	74 1d                	je     c001844d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018430:	b8 e1 b4 02 c0       	mov    eax,0xc002b4e1
c0018435:	80 fa 30             	cmp    dl,0x30
c0018438:	75 13                	jne    c001844d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001843a:	b8 c0 ce 02 c0       	mov    eax,0xc002cec0
c001843f:	eb 0c                	jmp    c001844d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018441:	b8 e0 cd 02 c0       	mov    eax,0xc002cde0
c0018446:	eb 05                	jmp    c001844d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018448:	b8 50 ce 02 c0       	mov    eax,0xc002ce50
c001844d:	5b                   	pop    ebx
c001844e:	5e                   	pop    esi
c001844f:	5f                   	pop    edi
c0018450:	5d                   	pop    ebp
c0018451:	c3                   	ret    

c0018452 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018452:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018456:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001845a:	80 f9 04             	cmp    cl,0x4
c001845d:	75 6b                	jne    c00184ca <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c001845f:	b8 40 cc 02 c0       	mov    eax,0xc002cc40
c0018464:	80 fa 01             	cmp    dl,0x1
c0018467:	0f 86 92 02 00 00    	jbe    c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001846d:	b8 50 cc 02 c0       	mov    eax,0xc002cc50
c0018472:	80 fa 02             	cmp    dl,0x2
c0018475:	0f 84 84 02 00 00    	je     c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001847b:	b8 60 cc 02 c0       	mov    eax,0xc002cc60
c0018480:	80 fa 03             	cmp    dl,0x3
c0018483:	0f 84 76 02 00 00    	je     c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018489:	b8 70 cc 02 c0       	mov    eax,0xc002cc70
c001848e:	80 fa 04             	cmp    dl,0x4
c0018491:	0f 84 68 02 00 00    	je     c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018497:	b8 80 cc 02 c0       	mov    eax,0xc002cc80
c001849c:	80 fa 05             	cmp    dl,0x5
c001849f:	0f 84 5a 02 00 00    	je     c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184a5:	b8 60 cc 02 c0       	mov    eax,0xc002cc60
c00184aa:	80 fa 07             	cmp    dl,0x7
c00184ad:	0f 84 4c 02 00 00    	je     c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184b3:	83 ea 08             	sub    edx,0x8
c00184b6:	b8 e1 b4 02 c0       	mov    eax,0xc002b4e1
c00184bb:	80 fa 01             	cmp    dl,0x1
c00184be:	0f 87 3b 02 00 00    	ja     c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184c4:	b8 90 cc 02 c0       	mov    eax,0xc002cc90
c00184c9:	c3                   	ret    
c00184ca:	80 f9 05             	cmp    cl,0x5
c00184cd:	75 45                	jne    c0018514 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00184cf:	8d 4a ff             	lea    ecx,[edx-0x1]
c00184d2:	b8 a0 cc 02 c0       	mov    eax,0xc002cca0
c00184d7:	80 f9 02             	cmp    cl,0x2
c00184da:	0f 86 1f 02 00 00    	jbe    c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184e0:	80 fa 04             	cmp    dl,0x4
c00184e3:	0f 84 f3 01 00 00    	je     c00186dc <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00184e9:	80 fa 07             	cmp    dl,0x7
c00184ec:	0f 84 0d 02 00 00    	je     c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184f2:	b8 b0 cc 02 c0       	mov    eax,0xc002ccb0
c00184f7:	80 fa 08             	cmp    dl,0x8
c00184fa:	0f 84 ff 01 00 00    	je     c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018500:	b8 e1 b4 02 c0       	mov    eax,0xc002b4e1
c0018505:	80 fa 09             	cmp    dl,0x9
c0018508:	0f 85 f1 01 00 00    	jne    c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001850e:	b8 c0 cc 02 c0       	mov    eax,0xc002ccc0
c0018513:	c3                   	ret    
c0018514:	80 f9 06             	cmp    cl,0x6
c0018517:	0f 85 85 01 00 00    	jne    c00186a2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c001851d:	b8 d0 cc 02 c0       	mov    eax,0xc002ccd0
c0018522:	80 fa 01             	cmp    dl,0x1
c0018525:	0f 84 d4 01 00 00    	je     c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001852b:	8d 42 fb             	lea    eax,[edx-0x5]
c001852e:	3c 01                	cmp    al,0x1
c0018530:	0f 86 ac 01 00 00    	jbe    c00186e2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018536:	80 fa 03             	cmp    dl,0x3
c0018539:	0f 84 a3 01 00 00    	je     c00186e2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001853f:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018542:	b8 f0 cc 02 c0       	mov    eax,0xc002ccf0
c0018547:	80 f9 01             	cmp    cl,0x1
c001854a:	0f 86 af 01 00 00    	jbe    c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018550:	80 fa 09             	cmp    dl,0x9
c0018553:	0f 84 8f 01 00 00    	je     c00186e8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018559:	8d 4a f6             	lea    ecx,[edx-0xa]
c001855c:	80 f9 01             	cmp    cl,0x1
c001855f:	0f 86 9a 01 00 00    	jbe    c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018565:	b8 00 cd 02 c0       	mov    eax,0xc002cd00
c001856a:	80 fa 0d             	cmp    dl,0xd
c001856d:	0f 84 8c 01 00 00    	je     c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018573:	b8 10 cd 02 c0       	mov    eax,0xc002cd10
c0018578:	80 fa 0e             	cmp    dl,0xe
c001857b:	0f 84 7e 01 00 00    	je     c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018581:	b8 20 cd 02 c0       	mov    eax,0xc002cd20
c0018586:	80 fa 0f             	cmp    dl,0xf
c0018589:	0f 84 70 01 00 00    	je     c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001858f:	b8 00 cd 02 c0       	mov    eax,0xc002cd00
c0018594:	80 fa 15             	cmp    dl,0x15
c0018597:	0f 84 62 01 00 00    	je     c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001859d:	8d 4a ea             	lea    ecx,[edx-0x16]
c00185a0:	b8 20 cd 02 c0       	mov    eax,0xc002cd20
c00185a5:	80 f9 01             	cmp    cl,0x1
c00185a8:	0f 86 51 01 00 00    	jbe    c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185ae:	80 fa 1a             	cmp    dl,0x1a
c00185b1:	0f 84 37 01 00 00    	je     c00186ee <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00185b7:	80 fa 1c             	cmp    dl,0x1c
c00185ba:	0f 84 34 01 00 00    	je     c00186f4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00185c0:	80 fa 1d             	cmp    dl,0x1d
c00185c3:	0f 84 36 01 00 00    	je     c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185c9:	b8 50 cd 02 c0       	mov    eax,0xc002cd50
c00185ce:	80 fa 25             	cmp    dl,0x25
c00185d1:	0f 84 28 01 00 00    	je     c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185d7:	8d 4a da             	lea    ecx,[edx-0x26]
c00185da:	b8 40 cd 02 c0       	mov    eax,0xc002cd40
c00185df:	80 f9 01             	cmp    cl,0x1
c00185e2:	0f 86 17 01 00 00    	jbe    c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185e8:	b8 60 cd 02 c0       	mov    eax,0xc002cd60
c00185ed:	80 fa 2a             	cmp    dl,0x2a
c00185f0:	0f 84 09 01 00 00    	je     c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185f6:	b8 50 cd 02 c0       	mov    eax,0xc002cd50
c00185fb:	80 fa 2c             	cmp    dl,0x2c
c00185fe:	0f 84 fb 00 00 00    	je     c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018604:	b8 60 cd 02 c0       	mov    eax,0xc002cd60
c0018609:	80 fa 2d             	cmp    dl,0x2d
c001860c:	0f 84 ed 00 00 00    	je     c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018612:	b8 30 cd 02 c0       	mov    eax,0xc002cd30
c0018617:	80 fa 2e             	cmp    dl,0x2e
c001861a:	0f 84 df 00 00 00    	je     c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018620:	b8 50 cd 02 c0       	mov    eax,0xc002cd50
c0018625:	80 fa 2f             	cmp    dl,0x2f
c0018628:	0f 84 d1 00 00 00    	je     c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001862e:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018631:	b8 40 cd 02 c0       	mov    eax,0xc002cd40
c0018636:	80 f9 01             	cmp    cl,0x1
c0018639:	0f 86 c0 00 00 00    	jbe    c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001863f:	b8 70 cd 02 c0       	mov    eax,0xc002cd70
c0018644:	80 fa 37             	cmp    dl,0x37
c0018647:	0f 84 b2 00 00 00    	je     c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001864d:	b8 80 cd 02 c0       	mov    eax,0xc002cd80
c0018652:	80 fa 3a             	cmp    dl,0x3a
c0018655:	0f 84 a4 00 00 00    	je     c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001865b:	b8 90 cd 02 c0       	mov    eax,0xc002cd90
c0018660:	80 fa 3c             	cmp    dl,0x3c
c0018663:	0f 84 96 00 00 00    	je     c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018669:	b8 a0 cd 02 c0       	mov    eax,0xc002cda0
c001866e:	80 fa 3d             	cmp    dl,0x3d
c0018671:	0f 84 88 00 00 00    	je     c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018677:	b8 80 cd 02 c0       	mov    eax,0xc002cd80
c001867c:	80 fa 3e             	cmp    dl,0x3e
c001867f:	74 7e                	je     c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018681:	8d 42 bb             	lea    eax,[edx-0x45]
c0018684:	3c 01                	cmp    al,0x1
c0018686:	76 72                	jbe    c00186fa <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018688:	80 fa 3f             	cmp    dl,0x3f
c001868b:	74 6d                	je     c00186fa <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001868d:	80 fa 4a             	cmp    dl,0x4a
c0018690:	74 0a                	je     c001869c <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018692:	b8 e1 b4 02 c0       	mov    eax,0xc002b4e1
c0018697:	80 fa 4d             	cmp    dl,0x4d
c001869a:	75 63                	jne    c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001869c:	b8 70 cd 02 c0       	mov    eax,0xc002cd70
c00186a1:	c3                   	ret    
c00186a2:	b8 e1 b4 02 c0       	mov    eax,0xc002b4e1
c00186a7:	80 f9 0b             	cmp    cl,0xb
c00186aa:	75 0a                	jne    c00186b6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00186ac:	fe ca                	dec    dl
c00186ae:	75 4f                	jne    c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186b0:	b8 b0 cd 02 c0       	mov    eax,0xc002cdb0
c00186b5:	c3                   	ret    
c00186b6:	80 f9 0f             	cmp    cl,0xf
c00186b9:	75 44                	jne    c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186bb:	b8 c0 cd 02 c0       	mov    eax,0xc002cdc0
c00186c0:	80 fa 02             	cmp    dl,0x2
c00186c3:	76 3a                	jbe    c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186c5:	8d 42 fd             	lea    eax,[edx-0x3]
c00186c8:	3c 01                	cmp    al,0x1
c00186ca:	76 0a                	jbe    c00186d6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00186cc:	b8 e1 b4 02 c0       	mov    eax,0xc002b4e1
c00186d1:	80 fa 06             	cmp    dl,0x6
c00186d4:	75 29                	jne    c00186ff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186d6:	b8 d0 cd 02 c0       	mov    eax,0xc002cdd0
c00186db:	c3                   	ret    
c00186dc:	b8 b0 cc 02 c0       	mov    eax,0xc002ccb0
c00186e1:	c3                   	ret    
c00186e2:	b8 e0 cc 02 c0       	mov    eax,0xc002cce0
c00186e7:	c3                   	ret    
c00186e8:	b8 00 cd 02 c0       	mov    eax,0xc002cd00
c00186ed:	c3                   	ret    
c00186ee:	b8 30 cd 02 c0       	mov    eax,0xc002cd30
c00186f3:	c3                   	ret    
c00186f4:	b8 40 cd 02 c0       	mov    eax,0xc002cd40
c00186f9:	c3                   	ret    
c00186fa:	b8 90 cd 02 c0       	mov    eax,0xc002cd90
c00186ff:	c3                   	ret    

c0018700 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018700:	60                   	pusha  
c0018701:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018705:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018709:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001870d:	9c                   	pushf  
c001870e:	fa                   	cli    
c001870f:	0f 09                	wbinvd 
c0018711:	0f 30                	wrmsr  
c0018713:	9d                   	popf   
c0018714:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018718:	89 02                	mov    DWORD PTR [edx],eax
c001871a:	61                   	popa   
c001871b:	c3                   	ret    

c001871c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001871c:	60                   	pusha  
c001871d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018721:	9c                   	pushf  
c0018722:	fa                   	cli    
c0018723:	0f 09                	wbinvd 
c0018725:	31 c0                	xor    eax,eax
c0018727:	31 d2                	xor    edx,edx
c0018729:	0f 32                	rdmsr  
c001872b:	9d                   	popf   
c001872c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018730:	89 02                	mov    DWORD PTR [edx],eax
c0018732:	61                   	popa   
c0018733:	c3                   	ret    

c0018734 <CPU::AMD_K6_writeback(int, int, int)>:
c0018734:	56                   	push   esi
c0018735:	53                   	push   ebx
c0018736:	83 ec 10             	sub    esp,0x10
c0018739:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001873d:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018742:	75 5d                	jne    c00187a1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018744:	83 f8 08             	cmp    eax,0x8
c0018747:	75 09                	jne    c0018752 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018749:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001874e:	7e 13                	jle    c0018763 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018750:	eb 30                	jmp    c0018782 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018752:	83 f8 06             	cmp    eax,0x6
c0018755:	7c 4a                	jl     c00187a1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018757:	83 f8 07             	cmp    eax,0x7
c001875a:	7e 07                	jle    c0018763 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001875c:	83 f8 09             	cmp    eax,0x9
c001875f:	74 21                	je     c0018782 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018761:	eb 3e                	jmp    c00187a1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018763:	89 e6                	mov    esi,esp
c0018765:	8b 1d 08 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da08
c001876b:	56                   	push   esi
c001876c:	c1 eb 15             	shr    ebx,0x15
c001876f:	68 82 00 00 c0       	push   0xc0000082
c0018774:	83 e3 7e             	and    ebx,0x7e
c0018777:	e8 a0 ff ff ff       	call   c001871c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001877c:	56                   	push   esi
c001877d:	6a 00                	push   0x0
c001877f:	53                   	push   ebx
c0018780:	eb 12                	jmp    c0018794 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018782:	89 e3                	mov    ebx,esp
c0018784:	53                   	push   ebx
c0018785:	68 82 00 00 c0       	push   0xc0000082
c001878a:	e8 8d ff ff ff       	call   c001871c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001878f:	53                   	push   ebx
c0018790:	6a 00                	push   0x0
c0018792:	6a 00                	push   0x0
c0018794:	68 82 00 00 c0       	push   0xc0000082
c0018799:	e8 62 ff ff ff       	call   c0018700 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001879e:	83 c4 18             	add    esp,0x18
c00187a1:	83 c4 10             	add    esp,0x10
c00187a4:	5b                   	pop    ebx
c00187a5:	5e                   	pop    esi
c00187a6:	c3                   	ret    
c00187a7:	90                   	nop

c00187a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00187a8:	55                   	push   ebp
c00187a9:	57                   	push   edi
c00187aa:	56                   	push   esi
c00187ab:	53                   	push   ebx
c00187ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187b0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00187b4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00187b8:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00187bc:	39 05 e0 ce 02 c0    	cmp    DWORD PTR ds:0xc002cee0,eax
c00187c2:	75 23                	jne    c00187e7 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00187c4:	a1 ec 04 03 c0       	mov    eax,ds:0xc00304ec
c00187c9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00187cd:	89 06                	mov    DWORD PTR [esi],eax
c00187cf:	a1 e8 04 03 c0       	mov    eax,ds:0xc00304e8
c00187d4:	89 07                	mov    DWORD PTR [edi],eax
c00187d6:	a1 e4 04 03 c0       	mov    eax,ds:0xc00304e4
c00187db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00187de:	a1 e0 04 03 c0       	mov    eax,ds:0xc00304e0
c00187e3:	89 02                	mov    DWORD PTR [edx],eax
c00187e5:	eb 3f                	jmp    c0018826 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00187e7:	31 c9                	xor    ecx,ecx
c00187e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187ed:	0f a2                	cpuid  
c00187ef:	89 06                	mov    DWORD PTR [esi],eax
c00187f1:	89 1f                	mov    DWORD PTR [edi],ebx
c00187f3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00187f7:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00187fa:	89 10                	mov    DWORD PTR [eax],edx
c00187fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018800:	a3 e0 ce 02 c0       	mov    ds:0xc002cee0,eax
c0018805:	8b 06                	mov    eax,DWORD PTR [esi]
c0018807:	a3 ec 04 03 c0       	mov    ds:0xc00304ec,eax
c001880c:	8b 07                	mov    eax,DWORD PTR [edi]
c001880e:	a3 e8 04 03 c0       	mov    ds:0xc00304e8,eax
c0018813:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018816:	a3 e4 04 03 c0       	mov    ds:0xc00304e4,eax
c001881b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001881f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018821:	a3 e0 04 03 c0       	mov    ds:0xc00304e0,eax
c0018826:	5b                   	pop    ebx
c0018827:	5e                   	pop    esi
c0018828:	5f                   	pop    edi
c0018829:	5d                   	pop    ebp
c001882a:	c3                   	ret    
c001882b:	90                   	nop

c001882c <CPU::cpuidCheckEDX(unsigned int)>:
c001882c:	83 ec 10             	sub    esp,0x10
c001882f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018833:	50                   	push   eax
c0018834:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018838:	50                   	push   eax
c0018839:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001883d:	50                   	push   eax
c001883e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018842:	50                   	push   eax
c0018843:	6a 01                	push   0x1
c0018845:	e8 5e ff ff ff       	call   c00187a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001884a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001884e:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018852:	0f 95 c0             	setne  al
c0018855:	83 c4 24             	add    esp,0x24
c0018858:	c3                   	ret    
c0018859:	90                   	nop

c001885a <CPU::cpuidCheckECX(unsigned int)>:
c001885a:	83 ec 10             	sub    esp,0x10
c001885d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018861:	50                   	push   eax
c0018862:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018866:	50                   	push   eax
c0018867:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001886b:	50                   	push   eax
c001886c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018870:	50                   	push   eax
c0018871:	6a 01                	push   0x1
c0018873:	e8 30 ff ff ff       	call   c00187a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018878:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001887c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018880:	0f 95 c0             	setne  al
c0018883:	83 c4 24             	add    esp,0x24
c0018886:	c3                   	ret    
c0018887:	90                   	nop

c0018888 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018888:	83 ec 10             	sub    esp,0x10
c001888b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001888f:	50                   	push   eax
c0018890:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018894:	50                   	push   eax
c0018895:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018899:	50                   	push   eax
c001889a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001889e:	50                   	push   eax
c001889f:	6a 07                	push   0x7
c00188a1:	e8 02 ff ff ff       	call   c00187a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188aa:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00188ae:	0f 95 c0             	setne  al
c00188b1:	83 c4 24             	add    esp,0x24
c00188b4:	c3                   	ret    
c00188b5:	90                   	nop

c00188b6 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00188b6:	83 ec 10             	sub    esp,0x10
c00188b9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188bd:	50                   	push   eax
c00188be:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188c2:	50                   	push   eax
c00188c3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188c7:	50                   	push   eax
c00188c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188cc:	50                   	push   eax
c00188cd:	6a 07                	push   0x7
c00188cf:	e8 d4 fe ff ff       	call   c00187a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188d8:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00188dc:	0f 95 c0             	setne  al
c00188df:	83 c4 24             	add    esp,0x24
c00188e2:	c3                   	ret    
c00188e3:	90                   	nop

c00188e4 <CPU::CPU()>:
c00188e4:	83 ec 0c             	sub    esp,0xc
c00188e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188eb:	83 ec 08             	sub    esp,0x8
c00188ee:	68 e1 b4 02 c0       	push   0xc002b4e1
c00188f3:	50                   	push   eax
c00188f4:	e8 13 b4 ff ff       	call   c0013d0c <Device::Device(char const*)>
c00188f9:	83 c4 10             	add    esp,0x10
c00188fc:	ba b8 b5 02 c0       	mov    edx,0xc002b5b8
c0018901:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018905:	89 10                	mov    DWORD PTR [eax],edx
c0018907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001890b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018919:	05 78 01 00 00       	add    eax,0x178
c001891e:	83 ec 0c             	sub    esp,0xc
c0018921:	50                   	push   eax
c0018922:	e8 a5 64 ff ff       	call   c000edcc <GDT::GDT()>
c0018927:	83 c4 10             	add    esp,0x10
c001892a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001892e:	05 7c 09 00 00       	add    eax,0x97c
c0018933:	83 ec 0c             	sub    esp,0xc
c0018936:	50                   	push   eax
c0018937:	e8 e0 66 ff ff       	call   c000f01c <IDT::IDT()>
c001893c:	83 c4 10             	add    esp,0x10
c001893f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018943:	05 7c 11 00 00       	add    eax,0x117c
c0018948:	83 ec 0c             	sub    esp,0xc
c001894b:	50                   	push   eax
c001894c:	e8 15 82 ff ff       	call   c0010b66 <TSS::TSS()>
c0018951:	83 c4 10             	add    esp,0x10
c0018954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018958:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c001895f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018963:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001896d:	90                   	nop
c001896e:	83 c4 0c             	add    esp,0xc
c0018971:	c3                   	ret    

c0018972 <CPU::displayFeatures()>:
c0018972:	c3                   	ret    
c0018973:	90                   	nop

c0018974 <CPU::detectFeatures()>:
c0018974:	55                   	push   ebp
c0018975:	57                   	push   edi
c0018976:	56                   	push   esi
c0018977:	53                   	push   ebx
c0018978:	83 ec 50             	sub    esp,0x50
c001897b:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c001897f:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018989:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018990:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0018996:	6a 0d                	push   0xd
c0018998:	6a 00                	push   0x0
c001899a:	55                   	push   ebp
c001899b:	e8 b0 7d fe ff       	call   c0000750 <memset>
c00189a0:	83 c4 10             	add    esp,0x10
c00189a3:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00189a8:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00189af:	0f 84 22 09 00 00    	je     c00192d7 <CPU::detectFeatures()+0x963>
c00189b5:	83 ec 0c             	sub    esp,0xc
c00189b8:	89 ef                	mov    edi,ebp
c00189ba:	6a 10                	push   0x10
c00189bc:	e8 6b fe ff ff       	call   c001882c <CPU::cpuidCheckEDX(unsigned int)>
c00189c1:	83 e0 01             	and    eax,0x1
c00189c4:	8d 14 00             	lea    edx,[eax+eax*1]
c00189c7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00189cd:	83 e0 fd             	and    eax,0xfffffffd
c00189d0:	09 d0                	or     eax,edx
c00189d2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00189d8:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00189df:	e8 48 fe ff ff       	call   c001882c <CPU::cpuidCheckEDX(unsigned int)>
c00189e4:	83 e0 01             	and    eax,0x1
c00189e7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00189ee:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00189f4:	83 e0 fb             	and    eax,0xfffffffb
c00189f7:	09 d0                	or     eax,edx
c00189f9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00189ff:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018a06:	e8 21 fe ff ff       	call   c001882c <CPU::cpuidCheckEDX(unsigned int)>
c0018a0b:	83 e0 01             	and    eax,0x1
c0018a0e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018a15:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a1b:	83 e0 f7             	and    eax,0xfffffff7
c0018a1e:	09 d0                	or     eax,edx
c0018a20:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a26:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018a2d:	e8 fa fd ff ff       	call   c001882c <CPU::cpuidCheckEDX(unsigned int)>
c0018a32:	83 e0 01             	and    eax,0x1
c0018a35:	c1 e0 04             	shl    eax,0x4
c0018a38:	88 c2                	mov    dl,al
c0018a3a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a40:	83 e0 ef             	and    eax,0xffffffef
c0018a43:	09 d0                	or     eax,edx
c0018a45:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a4b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018a52:	e8 d5 fd ff ff       	call   c001882c <CPU::cpuidCheckEDX(unsigned int)>
c0018a57:	83 e0 01             	and    eax,0x1
c0018a5a:	c1 e0 05             	shl    eax,0x5
c0018a5d:	88 c2                	mov    dl,al
c0018a5f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a65:	83 e0 df             	and    eax,0xffffffdf
c0018a68:	09 d0                	or     eax,edx
c0018a6a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a70:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018a77:	e8 b0 fd ff ff       	call   c001882c <CPU::cpuidCheckEDX(unsigned int)>
c0018a7c:	83 e0 01             	and    eax,0x1
c0018a7f:	8d 14 00             	lea    edx,[eax+eax*1]
c0018a82:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018a88:	83 e0 fd             	and    eax,0xfffffffd
c0018a8b:	09 d0                	or     eax,edx
c0018a8d:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018a93:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018a9a:	e8 8d fd ff ff       	call   c001882c <CPU::cpuidCheckEDX(unsigned int)>
c0018a9f:	83 e0 01             	and    eax,0x1
c0018aa2:	c1 e0 06             	shl    eax,0x6
c0018aa5:	88 c2                	mov    dl,al
c0018aa7:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018aad:	83 e0 bf             	and    eax,0xffffffbf
c0018ab0:	09 d0                	or     eax,edx
c0018ab2:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018ab8:	58                   	pop    eax
c0018ab9:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018abd:	50                   	push   eax
c0018abe:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ac2:	50                   	push   eax
c0018ac3:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018ac7:	56                   	push   esi
c0018ac8:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018acc:	50                   	push   eax
c0018acd:	6a 00                	push   0x0
c0018acf:	e8 d4 fc ff ff       	call   c00187a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ad4:	b8 04 00 00 00       	mov    eax,0x4
c0018ad9:	89 c1                	mov    ecx,eax
c0018adb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018add:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018ae3:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018ae7:	89 c1                	mov    ecx,eax
c0018ae9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018aeb:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018af1:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018af5:	89 c1                	mov    ecx,eax
c0018af7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018af9:	83 c4 18             	add    esp,0x18
c0018afc:	68 8c b3 02 c0       	push   0xc002b38c
c0018b01:	55                   	push   ebp
c0018b02:	e8 91 7d fe ff       	call   c0000898 <strcmp>
c0018b07:	83 c4 10             	add    esp,0x10
c0018b0a:	85 c0                	test   eax,eax
c0018b0c:	75 0f                	jne    c0018b1d <CPU::detectFeatures()+0x1a9>
c0018b0e:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018b18:	e9 22 02 00 00       	jmp    c0018d3f <CPU::detectFeatures()+0x3cb>
c0018b1d:	50                   	push   eax
c0018b1e:	50                   	push   eax
c0018b1f:	68 99 b3 02 c0       	push   0xc002b399
c0018b24:	55                   	push   ebp
c0018b25:	e8 6e 7d fe ff       	call   c0000898 <strcmp>
c0018b2a:	83 c4 10             	add    esp,0x10
c0018b2d:	85 c0                	test   eax,eax
c0018b2f:	74 dd                	je     c0018b0e <CPU::detectFeatures()+0x19a>
c0018b31:	50                   	push   eax
c0018b32:	50                   	push   eax
c0018b33:	68 a6 b3 02 c0       	push   0xc002b3a6
c0018b38:	55                   	push   ebp
c0018b39:	e8 5a 7d fe ff       	call   c0000898 <strcmp>
c0018b3e:	83 c4 10             	add    esp,0x10
c0018b41:	85 c0                	test   eax,eax
c0018b43:	74 2a                	je     c0018b6f <CPU::detectFeatures()+0x1fb>
c0018b45:	50                   	push   eax
c0018b46:	50                   	push   eax
c0018b47:	68 b3 b3 02 c0       	push   0xc002b3b3
c0018b4c:	55                   	push   ebp
c0018b4d:	e8 46 7d fe ff       	call   c0000898 <strcmp>
c0018b52:	83 c4 10             	add    esp,0x10
c0018b55:	85 c0                	test   eax,eax
c0018b57:	74 16                	je     c0018b6f <CPU::detectFeatures()+0x1fb>
c0018b59:	50                   	push   eax
c0018b5a:	50                   	push   eax
c0018b5b:	68 c0 b3 02 c0       	push   0xc002b3c0
c0018b60:	55                   	push   ebp
c0018b61:	e8 32 7d fe ff       	call   c0000898 <strcmp>
c0018b66:	83 c4 10             	add    esp,0x10
c0018b69:	85 c0                	test   eax,eax
c0018b6b:	74 48                	je     c0018bb5 <CPU::detectFeatures()+0x241>
c0018b6d:	eb 0f                	jmp    c0018b7e <CPU::detectFeatures()+0x20a>
c0018b6f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018b79:	e9 c1 01 00 00       	jmp    c0018d3f <CPU::detectFeatures()+0x3cb>
c0018b7e:	50                   	push   eax
c0018b7f:	50                   	push   eax
c0018b80:	68 cd b3 02 c0       	push   0xc002b3cd
c0018b85:	55                   	push   ebp
c0018b86:	e8 0d 7d fe ff       	call   c0000898 <strcmp>
c0018b8b:	83 c4 10             	add    esp,0x10
c0018b8e:	85 c0                	test   eax,eax
c0018b90:	74 23                	je     c0018bb5 <CPU::detectFeatures()+0x241>
c0018b92:	57                   	push   edi
c0018b93:	57                   	push   edi
c0018b94:	68 da b3 02 c0       	push   0xc002b3da
c0018b99:	55                   	push   ebp
c0018b9a:	e8 f9 7c fe ff       	call   c0000898 <strcmp>
c0018b9f:	83 c4 10             	add    esp,0x10
c0018ba2:	85 c0                	test   eax,eax
c0018ba4:	75 1e                	jne    c0018bc4 <CPU::detectFeatures()+0x250>
c0018ba6:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018bb0:	e9 8a 01 00 00       	jmp    c0018d3f <CPU::detectFeatures()+0x3cb>
c0018bb5:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018bbf:	e9 7b 01 00 00       	jmp    c0018d3f <CPU::detectFeatures()+0x3cb>
c0018bc4:	56                   	push   esi
c0018bc5:	56                   	push   esi
c0018bc6:	68 e7 b3 02 c0       	push   0xc002b3e7
c0018bcb:	55                   	push   ebp
c0018bcc:	e8 c7 7c fe ff       	call   c0000898 <strcmp>
c0018bd1:	83 c4 10             	add    esp,0x10
c0018bd4:	85 c0                	test   eax,eax
c0018bd6:	75 0f                	jne    c0018be7 <CPU::detectFeatures()+0x273>
c0018bd8:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018be2:	e9 58 01 00 00       	jmp    c0018d3f <CPU::detectFeatures()+0x3cb>
c0018be7:	51                   	push   ecx
c0018be8:	51                   	push   ecx
c0018be9:	68 a6 b3 02 c0       	push   0xc002b3a6
c0018bee:	55                   	push   ebp
c0018bef:	e8 a4 7c fe ff       	call   c0000898 <strcmp>
c0018bf4:	83 c4 10             	add    esp,0x10
c0018bf7:	85 c0                	test   eax,eax
c0018bf9:	75 0f                	jne    c0018c0a <CPU::detectFeatures()+0x296>
c0018bfb:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018c05:	e9 35 01 00 00       	jmp    c0018d3f <CPU::detectFeatures()+0x3cb>
c0018c0a:	52                   	push   edx
c0018c0b:	52                   	push   edx
c0018c0c:	68 f4 b3 02 c0       	push   0xc002b3f4
c0018c11:	55                   	push   ebp
c0018c12:	e8 81 7c fe ff       	call   c0000898 <strcmp>
c0018c17:	83 c4 10             	add    esp,0x10
c0018c1a:	85 c0                	test   eax,eax
c0018c1c:	75 0f                	jne    c0018c2d <CPU::detectFeatures()+0x2b9>
c0018c1e:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018c28:	e9 12 01 00 00       	jmp    c0018d3f <CPU::detectFeatures()+0x3cb>
c0018c2d:	50                   	push   eax
c0018c2e:	50                   	push   eax
c0018c2f:	68 01 b4 02 c0       	push   0xc002b401
c0018c34:	55                   	push   ebp
c0018c35:	e8 5e 7c fe ff       	call   c0000898 <strcmp>
c0018c3a:	83 c4 10             	add    esp,0x10
c0018c3d:	85 c0                	test   eax,eax
c0018c3f:	75 0f                	jne    c0018c50 <CPU::detectFeatures()+0x2dc>
c0018c41:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018c4b:	e9 ef 00 00 00       	jmp    c0018d3f <CPU::detectFeatures()+0x3cb>
c0018c50:	50                   	push   eax
c0018c51:	50                   	push   eax
c0018c52:	68 0e b4 02 c0       	push   0xc002b40e
c0018c57:	55                   	push   ebp
c0018c58:	e8 3b 7c fe ff       	call   c0000898 <strcmp>
c0018c5d:	83 c4 10             	add    esp,0x10
c0018c60:	85 c0                	test   eax,eax
c0018c62:	75 0f                	jne    c0018c73 <CPU::detectFeatures()+0x2ff>
c0018c64:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018c6e:	e9 cc 00 00 00       	jmp    c0018d3f <CPU::detectFeatures()+0x3cb>
c0018c73:	50                   	push   eax
c0018c74:	50                   	push   eax
c0018c75:	68 1b b4 02 c0       	push   0xc002b41b
c0018c7a:	55                   	push   ebp
c0018c7b:	e8 18 7c fe ff       	call   c0000898 <strcmp>
c0018c80:	83 c4 10             	add    esp,0x10
c0018c83:	85 c0                	test   eax,eax
c0018c85:	75 0f                	jne    c0018c96 <CPU::detectFeatures()+0x322>
c0018c87:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018c91:	e9 a9 00 00 00       	jmp    c0018d3f <CPU::detectFeatures()+0x3cb>
c0018c96:	50                   	push   eax
c0018c97:	50                   	push   eax
c0018c98:	68 28 b4 02 c0       	push   0xc002b428
c0018c9d:	55                   	push   ebp
c0018c9e:	e8 f5 7b fe ff       	call   c0000898 <strcmp>
c0018ca3:	83 c4 10             	add    esp,0x10
c0018ca6:	85 c0                	test   eax,eax
c0018ca8:	75 0f                	jne    c0018cb9 <CPU::detectFeatures()+0x345>
c0018caa:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018cb4:	e9 86 00 00 00       	jmp    c0018d3f <CPU::detectFeatures()+0x3cb>
c0018cb9:	50                   	push   eax
c0018cba:	50                   	push   eax
c0018cbb:	68 35 b4 02 c0       	push   0xc002b435
c0018cc0:	55                   	push   ebp
c0018cc1:	e8 d2 7b fe ff       	call   c0000898 <strcmp>
c0018cc6:	83 c4 10             	add    esp,0x10
c0018cc9:	85 c0                	test   eax,eax
c0018ccb:	75 0c                	jne    c0018cd9 <CPU::detectFeatures()+0x365>
c0018ccd:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018cd7:	eb 66                	jmp    c0018d3f <CPU::detectFeatures()+0x3cb>
c0018cd9:	50                   	push   eax
c0018cda:	50                   	push   eax
c0018cdb:	68 42 b4 02 c0       	push   0xc002b442
c0018ce0:	55                   	push   ebp
c0018ce1:	e8 b2 7b fe ff       	call   c0000898 <strcmp>
c0018ce6:	83 c4 10             	add    esp,0x10
c0018ce9:	85 c0                	test   eax,eax
c0018ceb:	75 0c                	jne    c0018cf9 <CPU::detectFeatures()+0x385>
c0018ced:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018cf7:	eb 46                	jmp    c0018d3f <CPU::detectFeatures()+0x3cb>
c0018cf9:	57                   	push   edi
c0018cfa:	57                   	push   edi
c0018cfb:	68 4f b4 02 c0       	push   0xc002b44f
c0018d00:	55                   	push   ebp
c0018d01:	e8 92 7b fe ff       	call   c0000898 <strcmp>
c0018d06:	83 c4 10             	add    esp,0x10
c0018d09:	85 c0                	test   eax,eax
c0018d0b:	74 e0                	je     c0018ced <CPU::detectFeatures()+0x379>
c0018d0d:	56                   	push   esi
c0018d0e:	56                   	push   esi
c0018d0f:	68 5c b4 02 c0       	push   0xc002b45c
c0018d14:	55                   	push   ebp
c0018d15:	e8 7e 7b fe ff       	call   c0000898 <strcmp>
c0018d1a:	83 c4 10             	add    esp,0x10
c0018d1d:	85 c0                	test   eax,eax
c0018d1f:	74 cc                	je     c0018ced <CPU::detectFeatures()+0x379>
c0018d21:	51                   	push   ecx
c0018d22:	51                   	push   ecx
c0018d23:	68 69 b4 02 c0       	push   0xc002b469
c0018d28:	55                   	push   ebp
c0018d29:	e8 6a 7b fe ff       	call   c0000898 <strcmp>
c0018d2e:	83 c4 10             	add    esp,0x10
c0018d31:	85 c0                	test   eax,eax
c0018d33:	74 b8                	je     c0018ced <CPU::detectFeatures()+0x379>
c0018d35:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018d3f:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018d44:	0f 86 be 00 00 00    	jbe    c0018e08 <CPU::detectFeatures()+0x494>
c0018d4a:	83 ec 0c             	sub    esp,0xc
c0018d4d:	68 80 00 00 00       	push   0x80
c0018d52:	e8 31 fb ff ff       	call   c0018888 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018d57:	83 e0 01             	and    eax,0x1
c0018d5a:	c1 e0 06             	shl    eax,0x6
c0018d5d:	88 c2                	mov    dl,al
c0018d5f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d65:	83 e0 bf             	and    eax,0xffffffbf
c0018d68:	09 d0                	or     eax,edx
c0018d6a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d70:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018d77:	e8 0c fb ff ff       	call   c0018888 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018d7c:	83 e0 01             	and    eax,0x1
c0018d7f:	c1 e0 04             	shl    eax,0x4
c0018d82:	88 c2                	mov    dl,al
c0018d84:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018d8a:	83 e0 ef             	and    eax,0xffffffef
c0018d8d:	09 d0                	or     eax,edx
c0018d8f:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018d95:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018d9c:	e8 e7 fa ff ff       	call   c0018888 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018da1:	c1 e0 07             	shl    eax,0x7
c0018da4:	88 c2                	mov    dl,al
c0018da6:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018dac:	83 e0 7f             	and    eax,0x7f
c0018daf:	09 d0                	or     eax,edx
c0018db1:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018db7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018dbe:	e8 f3 fa ff ff       	call   c00188b6 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018dc3:	83 e0 01             	and    eax,0x1
c0018dc6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018dcd:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018dd3:	83 e0 f7             	and    eax,0xfffffff7
c0018dd6:	09 d0                	or     eax,edx
c0018dd8:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018dde:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018de5:	e8 cc fa ff ff       	call   c00188b6 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018dea:	83 c4 10             	add    esp,0x10
c0018ded:	83 e0 01             	and    eax,0x1
c0018df0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018df7:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018dfd:	83 e0 fb             	and    eax,0xfffffffb
c0018e00:	09 d0                	or     eax,edx
c0018e02:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018e08:	83 ec 0c             	sub    esp,0xc
c0018e0b:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e0f:	50                   	push   eax
c0018e10:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e14:	50                   	push   eax
c0018e15:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018e19:	56                   	push   esi
c0018e1a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e1e:	50                   	push   eax
c0018e1f:	6a 01                	push   0x1
c0018e21:	e8 82 f9 ff ff       	call   c00187a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e26:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018e2a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018e30:	88 ca                	mov    dl,cl
c0018e32:	83 e0 f0             	and    eax,0xfffffff0
c0018e35:	83 e2 0f             	and    edx,0xf
c0018e38:	09 d0                	or     eax,edx
c0018e3a:	88 ca                	mov    dl,cl
c0018e3c:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018e42:	c0 ea 04             	shr    dl,0x4
c0018e45:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018e49:	0f b6 c2             	movzx  eax,dl
c0018e4c:	83 c4 20             	add    esp,0x20
c0018e4f:	c1 e0 06             	shl    eax,0x6
c0018e52:	89 c7                	mov    edi,eax
c0018e54:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e5a:	66 25 3f c0          	and    ax,0xc03f
c0018e5e:	09 f8                	or     eax,edi
c0018e60:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018e67:	89 c8                	mov    eax,ecx
c0018e69:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0018e70:	c1 e8 08             	shr    eax,0x8
c0018e73:	83 e5 3f             	and    ebp,0x3f
c0018e76:	83 e0 0f             	and    eax,0xf
c0018e79:	89 c7                	mov    edi,eax
c0018e7b:	c1 e7 06             	shl    edi,0x6
c0018e7e:	09 ef                	or     edi,ebp
c0018e80:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0018e87:	89 fa                	mov    edx,edi
c0018e89:	83 e5 c0             	and    ebp,0xffffffc0
c0018e8c:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018e92:	88 c2                	mov    dl,al
c0018e94:	c0 ea 02             	shr    dl,0x2
c0018e97:	89 d7                	mov    edi,edx
c0018e99:	09 ef                	or     edi,ebp
c0018e9b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018ea1:	89 fa                	mov    edx,edi
c0018ea3:	83 e5 cf             	and    ebp,0xffffffcf
c0018ea6:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018eac:	89 cf                	mov    edi,ecx
c0018eae:	c1 ef 0c             	shr    edi,0xc
c0018eb1:	83 e7 03             	and    edi,0x3
c0018eb4:	c1 e7 04             	shl    edi,0x4
c0018eb7:	09 ef                	or     edi,ebp
c0018eb9:	3c 06                	cmp    al,0x6
c0018ebb:	89 fa                	mov    edx,edi
c0018ebd:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018ec3:	74 04                	je     c0018ec9 <CPU::detectFeatures()+0x555>
c0018ec5:	3c 0f                	cmp    al,0xf
c0018ec7:	75 5c                	jne    c0018f25 <CPU::detectFeatures()+0x5b1>
c0018ec9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018ecd:	89 cf                	mov    edi,ecx
c0018ecf:	c1 ef 10             	shr    edi,0x10
c0018ed2:	c1 e7 04             	shl    edi,0x4
c0018ed5:	09 fa                	or     edx,edi
c0018ed7:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0018edd:	0f b6 d2             	movzx  edx,dl
c0018ee0:	66 81 e7 3f c0       	and    di,0xc03f
c0018ee5:	c1 e2 06             	shl    edx,0x6
c0018ee8:	09 fa                	or     edx,edi
c0018eea:	3c 0f                	cmp    al,0xf
c0018eec:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018ef3:	75 30                	jne    c0018f25 <CPU::detectFeatures()+0x5b1>
c0018ef5:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018efb:	c1 e9 14             	shr    ecx,0x14
c0018efe:	83 e0 3f             	and    eax,0x3f
c0018f01:	83 c1 0f             	add    ecx,0xf
c0018f04:	88 ca                	mov    dl,cl
c0018f06:	c0 e9 02             	shr    cl,0x2
c0018f09:	c1 e2 06             	shl    edx,0x6
c0018f0c:	09 d0                	or     eax,edx
c0018f0e:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018f14:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018f1a:	83 e0 c0             	and    eax,0xffffffc0
c0018f1d:	09 c1                	or     ecx,eax
c0018f1f:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018f25:	83 ec 0c             	sub    esp,0xc
c0018f28:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018f2f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f33:	50                   	push   eax
c0018f34:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018f38:	55                   	push   ebp
c0018f39:	56                   	push   esi
c0018f3a:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018f3e:	57                   	push   edi
c0018f3f:	68 00 00 00 80       	push   0x80000000
c0018f44:	e8 5f f8 ff ff       	call   c00187a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f49:	83 c4 20             	add    esp,0x20
c0018f4c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018f54:	76 22                	jbe    c0018f78 <CPU::detectFeatures()+0x604>
c0018f56:	83 ec 0c             	sub    esp,0xc
c0018f59:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f5d:	50                   	push   eax
c0018f5e:	55                   	push   ebp
c0018f5f:	56                   	push   esi
c0018f60:	57                   	push   edi
c0018f61:	68 01 00 00 80       	push   0x80000001
c0018f66:	e8 3d f8 ff ff       	call   c00187a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f6b:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018f75:	83 c4 20             	add    esp,0x20
c0018f78:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018f7e:	83 f8 01             	cmp    eax,0x1
c0018f81:	75 6f                	jne    c0018ff2 <CPU::detectFeatures()+0x67e>
c0018f83:	51                   	push   ecx
c0018f84:	51                   	push   ecx
c0018f85:	68 75 b4 02 c0       	push   0xc002b475
c0018f8a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018f8e:	56                   	push   esi
c0018f8f:	e8 78 78 fe ff       	call   c000080c <strcpy>
c0018f94:	5f                   	pop    edi
c0018f95:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f9b:	5d                   	pop    ebp
c0018f9c:	66 c1 e8 06          	shr    ax,0x6
c0018fa0:	0f b6 c0             	movzx  eax,al
c0018fa3:	50                   	push   eax
c0018fa4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018faa:	c1 e8 0e             	shr    eax,0xe
c0018fad:	0f b6 c0             	movzx  eax,al
c0018fb0:	50                   	push   eax
c0018fb1:	e8 9c f4 ff ff       	call   c0018452 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018fb6:	5a                   	pop    edx
c0018fb7:	59                   	pop    ecx
c0018fb8:	50                   	push   eax
c0018fb9:	56                   	push   esi
c0018fba:	e8 8d 79 fe ff       	call   c000094c <strcat>
c0018fbf:	5f                   	pop    edi
c0018fc0:	5d                   	pop    ebp
c0018fc1:	56                   	push   esi
c0018fc2:	53                   	push   ebx
c0018fc3:	e8 36 ad ff ff       	call   c0013cfe <Device::setName(char const*)>
c0018fc8:	58                   	pop    eax
c0018fc9:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018fcf:	5a                   	pop    edx
c0018fd0:	68 7c b4 02 c0       	push   0xc002b47c
c0018fd5:	50                   	push   eax
c0018fd6:	e8 bd 78 fe ff       	call   c0000898 <strcmp>
c0018fdb:	83 c4 10             	add    esp,0x10
c0018fde:	85 c0                	test   eax,eax
c0018fe0:	0f 85 71 03 00 00    	jne    c0019357 <CPU::detectFeatures()+0x9e3>
c0018fe6:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018fed:	e9 65 03 00 00       	jmp    c0019357 <CPU::detectFeatures()+0x9e3>
c0018ff2:	83 f8 02             	cmp    eax,0x2
c0018ff5:	0f 85 b5 00 00 00    	jne    c00190b0 <CPU::detectFeatures()+0x73c>
c0018ffb:	57                   	push   edi
c0018ffc:	57                   	push   edi
c0018ffd:	68 8e b4 02 c0       	push   0xc002b48e
c0019002:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019006:	56                   	push   esi
c0019007:	e8 00 78 fe ff       	call   c000080c <strcpy>
c001900c:	5d                   	pop    ebp
c001900d:	58                   	pop    eax
c001900e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019014:	66 c1 e8 06          	shr    ax,0x6
c0019018:	0f b6 c0             	movzx  eax,al
c001901b:	50                   	push   eax
c001901c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019022:	c1 e8 0e             	shr    eax,0xe
c0019025:	0f b6 c0             	movzx  eax,al
c0019028:	50                   	push   eax
c0019029:	e8 90 f2 ff ff       	call   c00182be <CPU::lookupAMDName(unsigned char, unsigned char)>
c001902e:	5a                   	pop    edx
c001902f:	59                   	pop    ecx
c0019030:	50                   	push   eax
c0019031:	56                   	push   esi
c0019032:	e8 15 79 fe ff       	call   c000094c <strcat>
c0019037:	5f                   	pop    edi
c0019038:	5d                   	pop    ebp
c0019039:	56                   	push   esi
c001903a:	53                   	push   ebx
c001903b:	e8 be ac ff ff       	call   c0013cfe <Device::setName(char const*)>
c0019040:	58                   	pop    eax
c0019041:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019047:	5a                   	pop    edx
c0019048:	68 93 b4 02 c0       	push   0xc002b493
c001904d:	50                   	push   eax
c001904e:	e8 45 78 fe ff       	call   c0000898 <strcmp>
c0019053:	83 c4 10             	add    esp,0x10
c0019056:	85 c0                	test   eax,eax
c0019058:	75 20                	jne    c001907a <CPU::detectFeatures()+0x706>
c001905a:	8b 15 c8 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d9c8
c0019060:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019066:	a8 01                	test   al,0x1
c0019068:	74 10                	je     c001907a <CPU::detectFeatures()+0x706>
c001906a:	83 e0 fe             	and    eax,0xfffffffe
c001906d:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019073:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001907a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019080:	c1 e8 0e             	shr    eax,0xe
c0019083:	3c 05                	cmp    al,0x5
c0019085:	0f 85 cc 02 00 00    	jne    c0019357 <CPU::detectFeatures()+0x9e3>
c001908b:	56                   	push   esi
c001908c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019092:	83 e0 0f             	and    eax,0xf
c0019095:	50                   	push   eax
c0019096:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001909c:	66 c1 e8 06          	shr    ax,0x6
c00190a0:	0f b6 c0             	movzx  eax,al
c00190a3:	50                   	push   eax
c00190a4:	6a 05                	push   0x5
c00190a6:	e8 89 f6 ff ff       	call   c0018734 <CPU::AMD_K6_writeback(int, int, int)>
c00190ab:	e9 1f 02 00 00       	jmp    c00192cf <CPU::detectFeatures()+0x95b>
c00190b0:	8d 50 fd             	lea    edx,[eax-0x3]
c00190b3:	83 fa 01             	cmp    edx,0x1
c00190b6:	76 09                	jbe    c00190c1 <CPU::detectFeatures()+0x74d>
c00190b8:	83 f8 06             	cmp    eax,0x6
c00190bb:	0f 85 91 01 00 00    	jne    c0019252 <CPU::detectFeatures()+0x8de>
c00190c1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00190c7:	c1 ea 0e             	shr    edx,0xe
c00190ca:	80 fa 05             	cmp    dl,0x5
c00190cd:	75 7b                	jne    c001914a <CPU::detectFeatures()+0x7d6>
c00190cf:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00190d5:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00190da:	66 81 fa 00 01       	cmp    dx,0x100
c00190df:	75 0c                	jne    c00190ed <CPU::detectFeatures()+0x779>
c00190e1:	51                   	push   ecx
c00190e2:	51                   	push   ecx
c00190e3:	68 9a b4 02 c0       	push   0xc002b49a
c00190e8:	e9 dc 01 00 00       	jmp    c00192c9 <CPU::detectFeatures()+0x955>
c00190ed:	66 81 fa 00 02       	cmp    dx,0x200
c00190f2:	75 0c                	jne    c0019100 <CPU::detectFeatures()+0x78c>
c00190f4:	52                   	push   edx
c00190f5:	52                   	push   edx
c00190f6:	68 ad b4 02 c0       	push   0xc002b4ad
c00190fb:	e9 c9 01 00 00       	jmp    c00192c9 <CPU::detectFeatures()+0x955>
c0019100:	66 81 fa 40 02       	cmp    dx,0x240
c0019105:	75 0c                	jne    c0019113 <CPU::detectFeatures()+0x79f>
c0019107:	50                   	push   eax
c0019108:	50                   	push   eax
c0019109:	68 bf b4 02 c0       	push   0xc002b4bf
c001910e:	e9 b6 01 00 00       	jmp    c00192c9 <CPU::detectFeatures()+0x955>
c0019113:	83 f8 06             	cmp    eax,0x6
c0019116:	75 0c                	jne    c0019124 <CPU::detectFeatures()+0x7b0>
c0019118:	50                   	push   eax
c0019119:	50                   	push   eax
c001911a:	68 d1 b4 02 c0       	push   0xc002b4d1
c001911f:	e9 a5 01 00 00       	jmp    c00192c9 <CPU::detectFeatures()+0x955>
c0019124:	83 f8 04             	cmp    eax,0x4
c0019127:	75 0c                	jne    c0019135 <CPU::detectFeatures()+0x7c1>
c0019129:	50                   	push   eax
c001912a:	50                   	push   eax
c001912b:	68 dd b4 02 c0       	push   0xc002b4dd
c0019130:	e9 94 01 00 00       	jmp    c00192c9 <CPU::detectFeatures()+0x955>
c0019135:	83 f8 03             	cmp    eax,0x3
c0019138:	0f 85 19 02 00 00    	jne    c0019357 <CPU::detectFeatures()+0x9e3>
c001913e:	50                   	push   eax
c001913f:	50                   	push   eax
c0019140:	68 e5 b4 02 c0       	push   0xc002b4e5
c0019145:	e9 7f 01 00 00       	jmp    c00192c9 <CPU::detectFeatures()+0x955>
c001914a:	80 fa 06             	cmp    dl,0x6
c001914d:	0f 85 db 00 00 00    	jne    c001922e <CPU::detectFeatures()+0x8ba>
c0019153:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019159:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001915e:	66 81 fa 80 01       	cmp    dx,0x180
c0019163:	75 0c                	jne    c0019171 <CPU::detectFeatures()+0x7fd>
c0019165:	50                   	push   eax
c0019166:	50                   	push   eax
c0019167:	68 f0 b4 02 c0       	push   0xc002b4f0
c001916c:	e9 58 01 00 00       	jmp    c00192c9 <CPU::detectFeatures()+0x955>
c0019171:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019177:	66 f7 c1 80 ff       	test   cx,0xff80
c001917c:	75 0c                	jne    c001918a <CPU::detectFeatures()+0x816>
c001917e:	50                   	push   eax
c001917f:	50                   	push   eax
c0019180:	68 00 b5 02 c0       	push   0xc002b500
c0019185:	e9 3f 01 00 00       	jmp    c00192c9 <CPU::detectFeatures()+0x955>
c001918a:	66 81 fa 40 02       	cmp    dx,0x240
c001918f:	75 0c                	jne    c001919d <CPU::detectFeatures()+0x829>
c0019191:	55                   	push   ebp
c0019192:	55                   	push   ebp
c0019193:	68 07 b5 02 c0       	push   0xc002b507
c0019198:	e9 2c 01 00 00       	jmp    c00192c9 <CPU::detectFeatures()+0x955>
c001919d:	66 81 fa 80 02       	cmp    dx,0x280
c00191a2:	75 0c                	jne    c00191b0 <CPU::detectFeatures()+0x83c>
c00191a4:	57                   	push   edi
c00191a5:	57                   	push   edi
c00191a6:	68 10 b5 02 c0       	push   0xc002b510
c00191ab:	e9 19 01 00 00       	jmp    c00192c9 <CPU::detectFeatures()+0x955>
c00191b0:	66 81 fa 40 03       	cmp    dx,0x340
c00191b5:	74 ed                	je     c00191a4 <CPU::detectFeatures()+0x830>
c00191b7:	66 81 fa c0 03       	cmp    dx,0x3c0
c00191bc:	75 0c                	jne    c00191ca <CPU::detectFeatures()+0x856>
c00191be:	56                   	push   esi
c00191bf:	56                   	push   esi
c00191c0:	68 17 b5 02 c0       	push   0xc002b517
c00191c5:	e9 ff 00 00 00       	jmp    c00192c9 <CPU::detectFeatures()+0x955>
c00191ca:	83 f8 06             	cmp    eax,0x6
c00191cd:	0f 84 45 ff ff ff    	je     c0019118 <CPU::detectFeatures()+0x7a4>
c00191d3:	83 f8 04             	cmp    eax,0x4
c00191d6:	0f 84 4d ff ff ff    	je     c0019129 <CPU::detectFeatures()+0x7b5>
c00191dc:	83 f8 03             	cmp    eax,0x3
c00191df:	0f 85 72 01 00 00    	jne    c0019357 <CPU::detectFeatures()+0x9e3>
c00191e5:	51                   	push   ecx
c00191e6:	51                   	push   ecx
c00191e7:	68 20 b5 02 c0       	push   0xc002b520
c00191ec:	53                   	push   ebx
c00191ed:	e8 0c ab ff ff       	call   c0013cfe <Device::setName(char const*)>
c00191f2:	b1 c1                	mov    cl,0xc1
c00191f4:	88 c8                	mov    al,cl
c00191f6:	e6 22                	out    0x22,al
c00191f8:	e4 23                	in     al,0x23
c00191fa:	88 c2                	mov    dl,al
c00191fc:	88 c8                	mov    al,cl
c00191fe:	e6 22                	out    0x22,al
c0019200:	88 d0                	mov    al,dl
c0019202:	83 c8 10             	or     eax,0x10
c0019205:	e6 23                	out    0x23,al
c0019207:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001920e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019211:	89 d0                	mov    eax,edx
c0019213:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019219:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001921d:	40                   	inc    eax
c001921e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019224:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019229:	e9 a1 00 00 00       	jmp    c00192cf <CPU::detectFeatures()+0x95b>
c001922e:	83 f8 06             	cmp    eax,0x6
c0019231:	0f 84 e1 fe ff ff    	je     c0019118 <CPU::detectFeatures()+0x7a4>
c0019237:	83 f8 04             	cmp    eax,0x4
c001923a:	0f 84 e9 fe ff ff    	je     c0019129 <CPU::detectFeatures()+0x7b5>
c0019240:	83 f8 03             	cmp    eax,0x3
c0019243:	0f 85 0e 01 00 00    	jne    c0019357 <CPU::detectFeatures()+0x9e3>
c0019249:	52                   	push   edx
c001924a:	52                   	push   edx
c001924b:	68 2b b5 02 c0       	push   0xc002b52b
c0019250:	eb 77                	jmp    c00192c9 <CPU::detectFeatures()+0x955>
c0019252:	83 f8 07             	cmp    eax,0x7
c0019255:	75 09                	jne    c0019260 <CPU::detectFeatures()+0x8ec>
c0019257:	50                   	push   eax
c0019258:	50                   	push   eax
c0019259:	68 35 b5 02 c0       	push   0xc002b535
c001925e:	eb 69                	jmp    c00192c9 <CPU::detectFeatures()+0x955>
c0019260:	83 f8 0a             	cmp    eax,0xa
c0019263:	75 09                	jne    c001926e <CPU::detectFeatures()+0x8fa>
c0019265:	50                   	push   eax
c0019266:	50                   	push   eax
c0019267:	68 40 b5 02 c0       	push   0xc002b540
c001926c:	eb 5b                	jmp    c00192c9 <CPU::detectFeatures()+0x955>
c001926e:	83 f8 0b             	cmp    eax,0xb
c0019271:	75 09                	jne    c001927c <CPU::detectFeatures()+0x908>
c0019273:	50                   	push   eax
c0019274:	50                   	push   eax
c0019275:	68 48 b5 02 c0       	push   0xc002b548
c001927a:	eb 4d                	jmp    c00192c9 <CPU::detectFeatures()+0x955>
c001927c:	83 f8 08             	cmp    eax,0x8
c001927f:	75 09                	jne    c001928a <CPU::detectFeatures()+0x916>
c0019281:	50                   	push   eax
c0019282:	50                   	push   eax
c0019283:	68 51 b5 02 c0       	push   0xc002b551
c0019288:	eb 3f                	jmp    c00192c9 <CPU::detectFeatures()+0x955>
c001928a:	83 f8 09             	cmp    eax,0x9
c001928d:	75 09                	jne    c0019298 <CPU::detectFeatures()+0x924>
c001928f:	50                   	push   eax
c0019290:	50                   	push   eax
c0019291:	68 59 b5 02 c0       	push   0xc002b559
c0019296:	eb 31                	jmp    c00192c9 <CPU::detectFeatures()+0x955>
c0019298:	83 f8 05             	cmp    eax,0x5
c001929b:	75 09                	jne    c00192a6 <CPU::detectFeatures()+0x932>
c001929d:	50                   	push   eax
c001929e:	50                   	push   eax
c001929f:	68 61 b5 02 c0       	push   0xc002b561
c00192a4:	eb 23                	jmp    c00192c9 <CPU::detectFeatures()+0x955>
c00192a6:	83 f8 0c             	cmp    eax,0xc
c00192a9:	75 09                	jne    c00192b4 <CPU::detectFeatures()+0x940>
c00192ab:	55                   	push   ebp
c00192ac:	55                   	push   ebp
c00192ad:	68 6f b5 02 c0       	push   0xc002b56f
c00192b2:	eb 15                	jmp    c00192c9 <CPU::detectFeatures()+0x955>
c00192b4:	83 f8 0d             	cmp    eax,0xd
c00192b7:	75 09                	jne    c00192c2 <CPU::detectFeatures()+0x94e>
c00192b9:	57                   	push   edi
c00192ba:	57                   	push   edi
c00192bb:	68 7a b5 02 c0       	push   0xc002b57a
c00192c0:	eb 07                	jmp    c00192c9 <CPU::detectFeatures()+0x955>
c00192c2:	56                   	push   esi
c00192c3:	56                   	push   esi
c00192c4:	68 8e b5 02 c0       	push   0xc002b58e
c00192c9:	53                   	push   ebx
c00192ca:	e8 2f aa ff ff       	call   c0013cfe <Device::setName(char const*)>
c00192cf:	83 c4 10             	add    esp,0x10
c00192d2:	e9 80 00 00 00       	jmp    c0019357 <CPU::detectFeatures()+0x9e3>
c00192d7:	51                   	push   ecx
c00192d8:	51                   	push   ecx
c00192d9:	68 da b3 02 c0       	push   0xc002b3da
c00192de:	55                   	push   ebp
c00192df:	e8 28 75 fe ff       	call   c000080c <strcpy>
c00192e4:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00192ee:	e8 bb 6f fe ff       	call   c00002ae <is486>
c00192f3:	83 c4 10             	add    esp,0x10
c00192f6:	85 c0                	test   eax,eax
c00192f8:	74 2b                	je     c0019325 <CPU::detectFeatures()+0x9b1>
c00192fa:	52                   	push   edx
c00192fb:	52                   	push   edx
c00192fc:	68 9a b5 02 c0       	push   0xc002b59a
c0019301:	53                   	push   ebx
c0019302:	e8 f7 a9 ff ff       	call   c0013cfe <Device::setName(char const*)>
c0019307:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001930e:	0f 20 c0             	mov    eax,cr0
c0019311:	83 e0 14             	and    eax,0x14
c0019314:	83 c4 10             	add    esp,0x10
c0019317:	83 f8 04             	cmp    eax,0x4
c001931a:	75 1f                	jne    c001933b <CPU::detectFeatures()+0x9c7>
c001931c:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019323:	eb 32                	jmp    c0019357 <CPU::detectFeatures()+0x9e3>
c0019325:	50                   	push   eax
c0019326:	50                   	push   eax
c0019327:	68 a5 b5 02 c0       	push   0xc002b5a5
c001932c:	53                   	push   ebx
c001932d:	e8 cc a9 ff ff       	call   c0013cfe <Device::setName(char const*)>
c0019332:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019339:	eb d3                	jmp    c001930e <CPU::detectFeatures()+0x99a>
c001933b:	e8 49 6f fe ff       	call   c0000289 <hasLegacyFPU>
c0019340:	83 e0 01             	and    eax,0x1
c0019343:	8d 14 00             	lea    edx,[eax+eax*1]
c0019346:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001934c:	83 e0 fd             	and    eax,0xfffffffd
c001934f:	09 d0                	or     eax,edx
c0019351:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019357:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c001935e:	83 c4 4c             	add    esp,0x4c
c0019361:	5b                   	pop    ebx
c0019362:	5e                   	pop    esi
c0019363:	5f                   	pop    edi
c0019364:	5d                   	pop    ebp
c0019365:	c3                   	ret    

c0019366 <CPU::setupSMEP()>:
c0019366:	0f 20 e0             	mov    eax,cr4
c0019369:	0d 00 00 10 00       	or     eax,0x100000
c001936e:	0f 22 e0             	mov    cr4,eax
c0019371:	c3                   	ret    

c0019372 <CPU::setupUMIP()>:
c0019372:	0f 20 e0             	mov    eax,cr4
c0019375:	80 cc 08             	or     ah,0x8
c0019378:	0f 22 e0             	mov    cr4,eax
c001937b:	c3                   	ret    

c001937c <CPU::setupTSC()>:
c001937c:	0f 20 e0             	mov    eax,cr4
c001937f:	83 c8 04             	or     eax,0x4
c0019382:	0f 22 e0             	mov    cr4,eax
c0019385:	c3                   	ret    

c0019386 <CPU::setupLargePages()>:
c0019386:	0f 20 e0             	mov    eax,cr4
c0019389:	83 c8 10             	or     eax,0x10
c001938c:	0f 22 e0             	mov    cr4,eax
c001938f:	c3                   	ret    

c0019390 <CPU::setupPAT()>:
c0019390:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0019395:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001939c:	74 2c                	je     c00193ca <CPU::setupPAT()+0x3a>
c001939e:	53                   	push   ebx
c001939f:	83 ec 10             	sub    esp,0x10
c00193a2:	68 77 02 00 00       	push   0x277
c00193a7:	50                   	push   eax
c00193a8:	e8 93 57 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00193ad:	83 e2 f8             	and    edx,0xfffffff8
c00193b0:	83 ca 01             	or     edx,0x1
c00193b3:	52                   	push   edx
c00193b4:	50                   	push   eax
c00193b5:	68 77 02 00 00       	push   0x277
c00193ba:	ff 35 c8 d9 02 c0    	push   DWORD PTR ds:0xc002d9c8
c00193c0:	e8 a7 57 ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c00193c5:	83 c4 28             	add    esp,0x28
c00193c8:	5b                   	pop    ebx
c00193c9:	c3                   	ret    
c00193ca:	c3                   	ret    
c00193cb:	90                   	nop

c00193cc <CPU::setupMTRR()>:
c00193cc:	c3                   	ret    
c00193cd:	90                   	nop

c00193ce <CPU::setupGlobalPages()>:
c00193ce:	0f 20 e0             	mov    eax,cr4
c00193d1:	0c 80                	or     al,0x80
c00193d3:	0f 22 e0             	mov    cr4,eax
c00193d6:	c3                   	ret    
c00193d7:	90                   	nop

c00193d8 <CPU::allowUsermodeDataAccess()>:
c00193d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00193dc:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00193e3:	74 03                	je     c00193e8 <CPU::allowUsermodeDataAccess()+0x10>
c00193e5:	0f 01 cb             	stac   
c00193e8:	c3                   	ret    
c00193e9:	90                   	nop

c00193ea <CPU::prohibitUsermodeDataAccess()>:
c00193ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00193ee:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00193f5:	74 03                	je     c00193fa <CPU::prohibitUsermodeDataAccess()+0x10>
c00193f7:	0f 01 ca             	clac   
c00193fa:	c3                   	ret    
c00193fb:	90                   	nop

c00193fc <CPU::setupSMAP()>:
c00193fc:	0f 20 e0             	mov    eax,cr4
c00193ff:	0d 00 00 20 00       	or     eax,0x200000
c0019404:	0f 22 e0             	mov    cr4,eax
c0019407:	eb e1                	jmp    c00193ea <CPU::prohibitUsermodeDataAccess()>
c0019409:	90                   	nop

c001940a <CPU::setupFeatures()>:
c001940a:	83 ec 0c             	sub    esp,0xc
c001940d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019411:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019418:	74 07                	je     c0019421 <CPU::setupFeatures()+0x17>
c001941a:	52                   	push   edx
c001941b:	e8 46 ff ff ff       	call   c0019366 <CPU::setupSMEP()>
c0019420:	58                   	pop    eax
c0019421:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019428:	74 07                	je     c0019431 <CPU::setupFeatures()+0x27>
c001942a:	52                   	push   edx
c001942b:	e8 cc ff ff ff       	call   c00193fc <CPU::setupSMAP()>
c0019430:	58                   	pop    eax
c0019431:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019438:	74 07                	je     c0019441 <CPU::setupFeatures()+0x37>
c001943a:	52                   	push   edx
c001943b:	e8 32 ff ff ff       	call   c0019372 <CPU::setupUMIP()>
c0019440:	58                   	pop    eax
c0019441:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019448:	74 07                	je     c0019451 <CPU::setupFeatures()+0x47>
c001944a:	52                   	push   edx
c001944b:	e8 2c ff ff ff       	call   c001937c <CPU::setupTSC()>
c0019450:	58                   	pop    eax
c0019451:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019458:	74 07                	je     c0019461 <CPU::setupFeatures()+0x57>
c001945a:	52                   	push   edx
c001945b:	e8 26 ff ff ff       	call   c0019386 <CPU::setupLargePages()>
c0019460:	59                   	pop    ecx
c0019461:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019468:	74 07                	je     c0019471 <CPU::setupFeatures()+0x67>
c001946a:	52                   	push   edx
c001946b:	e8 5e ff ff ff       	call   c00193ce <CPU::setupGlobalPages()>
c0019470:	58                   	pop    eax
c0019471:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019478:	74 0c                	je     c0019486 <CPU::setupFeatures()+0x7c>
c001947a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001947e:	83 c4 0c             	add    esp,0xc
c0019481:	e9 0a ff ff ff       	jmp    c0019390 <CPU::setupPAT()>
c0019486:	83 c4 0c             	add    esp,0xc
c0019489:	c3                   	ret    

c001948a <CPU::open(int, int, void*)>:
c001948a:	57                   	push   edi
c001948b:	56                   	push   esi
c001948c:	53                   	push   ebx
c001948d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019491:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019495:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001949b:	83 ec 0c             	sub    esp,0xc
c001949e:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00194a4:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00194aa:	50                   	push   eax
c00194ab:	e8 7e 59 ff ff       	call   c000ee2e <GDT::setup()>
c00194b0:	83 c4 0c             	add    esp,0xc
c00194b3:	6a 00                	push   0x0
c00194b5:	68 ef be ad de       	push   0xdeadbeef
c00194ba:	57                   	push   edi
c00194bb:	e8 e6 76 ff ff       	call   c0010ba6 <TSS::setup(unsigned long, unsigned long)>
c00194c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00194c3:	e8 be 76 ff ff       	call   c0010b86 <TSS::flush()>
c00194c8:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00194ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00194d1:	e8 bc 5b ff ff       	call   c000f092 <IDT::setup()>
c00194d6:	b8 00 04 00 00       	mov    eax,0x400
c00194db:	0f 23 f8             	mov    db7,eax
c00194de:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00194e8:	e8 a8 64 ff ff       	call   c000f995 <Phys::allocatePage()>
c00194ed:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00194f3:	89 30                	mov    DWORD PTR [eax],esi
c00194f5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00194fb:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00194fe:	58                   	pop    eax
c00194ff:	5a                   	pop    edx
c0019500:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019506:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001950a:	e8 a7 87 ff ff       	call   c0011cb6 <VAS::setCPUSpecific(unsigned long)>
c001950f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019512:	e8 5d f4 ff ff       	call   c0018974 <CPU::detectFeatures()>
c0019517:	e8 35 bc ff ff       	call   c0015151 <setupInterruptController()>
c001951c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019522:	a1 e0 d9 02 c0       	mov    eax,ds:0xc002d9e0
c0019527:	83 e0 10             	and    eax,0x10
c001952a:	83 f8 01             	cmp    eax,0x1
c001952d:	19 c0                	sbb    eax,eax
c001952f:	83 e0 46             	and    eax,0x46
c0019532:	83 c0 1e             	add    eax,0x1e
c0019535:	89 04 24             	mov    DWORD PTR [esp],eax
c0019538:	e8 02 d2 ff ff       	call   c001673f <setupTimer(int)>
c001953d:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019543:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019546:	e8 bf fe ff ff       	call   c001940a <CPU::setupFeatures()>
c001954b:	83 c4 10             	add    esp,0x10
c001954e:	31 c0                	xor    eax,eax
c0019550:	5b                   	pop    ebx
c0019551:	5e                   	pop    esi
c0019552:	5f                   	pop    edi
c0019553:	c3                   	ret    

c0019554 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019554:	57                   	push   edi
c0019555:	56                   	push   esi
c0019556:	53                   	push   ebx
c0019557:	51                   	push   ecx
c0019558:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001955c:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c001955f:	0f 02 c0             	lar    eax,ax
c0019562:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019565:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019569:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c001956c:	88 ca                	mov    dl,cl
c001956e:	c0 ea 06             	shr    dl,0x6
c0019571:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019575:	89 ca                	mov    edx,ecx
c0019577:	66 c1 ea 03          	shr    dx,0x3
c001957b:	83 e2 07             	and    edx,0x7
c001957e:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019583:	88 17                	mov    BYTE PTR [edi],dl
c0019585:	0f 84 a6 01 00 00    	je     c0019731 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c001958b:	83 e1 07             	and    ecx,0x7
c001958e:	80 f9 04             	cmp    cl,0x4
c0019591:	0f 84 98 00 00 00    	je     c001962f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019597:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001959c:	0f 95 c0             	setne  al
c001959f:	80 f9 05             	cmp    cl,0x5
c00195a2:	0f 95 c2             	setne  dl
c00195a5:	08 c2                	or     dl,al
c00195a7:	74 79                	je     c0019622 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00195a9:	84 c9                	test   cl,cl
c00195ab:	75 05                	jne    c00195b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c00195ad:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00195b0:	eb 3c                	jmp    c00195ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195b2:	80 f9 01             	cmp    cl,0x1
c00195b5:	75 05                	jne    c00195bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c00195b7:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00195ba:	eb 32                	jmp    c00195ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195bc:	80 f9 02             	cmp    cl,0x2
c00195bf:	75 05                	jne    c00195c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00195c1:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00195c4:	eb 28                	jmp    c00195ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195c6:	31 c0                	xor    eax,eax
c00195c8:	80 f9 03             	cmp    cl,0x3
c00195cb:	75 05                	jne    c00195d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00195cd:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00195d0:	eb 1c                	jmp    c00195ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195d2:	80 f9 05             	cmp    cl,0x5
c00195d5:	75 05                	jne    c00195dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00195d7:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00195da:	eb 12                	jmp    c00195ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195dc:	80 f9 06             	cmp    cl,0x6
c00195df:	75 05                	jne    c00195e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00195e1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00195e4:	eb 08                	jmp    c00195ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195e6:	80 f9 07             	cmp    cl,0x7
c00195e9:	75 03                	jne    c00195ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195eb:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00195ee:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00195f3:	75 10                	jne    c0019605 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00195f5:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00195f9:	b9 03 00 00 00       	mov    ecx,0x3
c00195fe:	01 d0                	add    eax,edx
c0019600:	e9 37 01 00 00       	jmp    c001973c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019605:	b9 02 00 00 00       	mov    ecx,0x2
c001960a:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001960f:	0f 85 27 01 00 00    	jne    c001973c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019615:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019618:	b9 06 00 00 00       	mov    ecx,0x6
c001961d:	e9 1a 01 00 00       	jmp    c001973c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019622:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019625:	b9 06 00 00 00       	mov    ecx,0x6
c001962a:	e9 0f 01 00 00       	jmp    c001973e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001962f:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019632:	88 ca                	mov    dl,cl
c0019634:	c0 ea 06             	shr    dl,0x6
c0019637:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001963b:	89 ca                	mov    edx,ecx
c001963d:	66 c1 ea 03          	shr    dx,0x3
c0019641:	83 e2 07             	and    edx,0x7
c0019644:	80 e1 07             	and    cl,0x7
c0019647:	75 05                	jne    c001964e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019649:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001964c:	eb 4c                	jmp    c001969a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001964e:	80 f9 01             	cmp    cl,0x1
c0019651:	75 05                	jne    c0019658 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019653:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019656:	eb 42                	jmp    c001969a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019658:	80 f9 02             	cmp    cl,0x2
c001965b:	75 05                	jne    c0019662 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c001965d:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019660:	eb 38                	jmp    c001969a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019662:	80 f9 03             	cmp    cl,0x3
c0019665:	75 05                	jne    c001966c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019667:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001966a:	eb 2e                	jmp    c001969a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001966c:	80 f9 04             	cmp    cl,0x4
c001966f:	75 12                	jne    c0019683 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019671:	f6 c4 60             	test   ah,0x60
c0019674:	75 08                	jne    c001967e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019676:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019679:	8d 78 14             	lea    edi,[eax+0x14]
c001967c:	eb 1c                	jmp    c001969a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001967e:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019681:	eb 17                	jmp    c001969a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019683:	80 f9 05             	cmp    cl,0x5
c0019686:	75 05                	jne    c001968d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019688:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001968b:	eb 0d                	jmp    c001969a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001968d:	80 f9 06             	cmp    cl,0x6
c0019690:	75 05                	jne    c0019697 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019692:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019695:	eb 03                	jmp    c001969a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019697:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001969a:	84 d2                	test   dl,dl
c001969c:	75 05                	jne    c00196a3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001969e:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00196a1:	eb 3c                	jmp    c00196df <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196a3:	80 fa 01             	cmp    dl,0x1
c00196a6:	75 05                	jne    c00196ad <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00196a8:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00196ab:	eb 32                	jmp    c00196df <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196ad:	80 fa 02             	cmp    dl,0x2
c00196b0:	75 05                	jne    c00196b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00196b2:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00196b5:	eb 28                	jmp    c00196df <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196b7:	80 fa 03             	cmp    dl,0x3
c00196ba:	75 05                	jne    c00196c1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00196bc:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00196bf:	eb 1e                	jmp    c00196df <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196c1:	31 c0                	xor    eax,eax
c00196c3:	80 fa 04             	cmp    dl,0x4
c00196c6:	74 17                	je     c00196df <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196c8:	80 fa 05             	cmp    dl,0x5
c00196cb:	75 05                	jne    c00196d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c00196cd:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00196d0:	eb 0d                	jmp    c00196df <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196d2:	80 fa 06             	cmp    dl,0x6
c00196d5:	75 05                	jne    c00196dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00196d7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00196da:	eb 03                	jmp    c00196df <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196dc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00196df:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00196e4:	0f 94 c2             	sete   dl
c00196e7:	80 f9 05             	cmp    cl,0x5
c00196ea:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00196ee:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00196f3:	d3 e0                	shl    eax,cl
c00196f5:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00196f9:	74 0a                	je     c0019705 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00196fb:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00196fe:	b9 07 00 00 00       	mov    ecx,0x7
c0019703:	eb 37                	jmp    c001973c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019705:	01 f8                	add    eax,edi
c0019707:	b9 03 00 00 00       	mov    ecx,0x3
c001970c:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019711:	74 2b                	je     c001973e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019713:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019718:	75 0d                	jne    c0019727 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001971a:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001971e:	01 c8                	add    eax,ecx
c0019720:	b9 04 00 00 00       	mov    ecx,0x4
c0019725:	eb 17                	jmp    c001973e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019727:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001972a:	b9 07 00 00 00       	mov    ecx,0x7
c001972f:	eb 0d                	jmp    c001973e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019731:	b9 02 00 00 00       	mov    ecx,0x2
c0019736:	b2 01                	mov    dl,0x1
c0019738:	31 c0                	xor    eax,eax
c001973a:	eb 02                	jmp    c001973e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001973c:	31 d2                	xor    edx,edx
c001973e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019742:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019744:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019748:	88 11                	mov    BYTE PTR [ecx],dl
c001974a:	5a                   	pop    edx
c001974b:	5b                   	pop    ebx
c001974c:	5e                   	pop    esi
c001974d:	5f                   	pop    edi
c001974e:	c3                   	ret    

c001974f <Krnl::smpEntry()>:
c001974f:	eb fe                	jmp    c001974f <Krnl::smpEntry()>

c0019751 <Krnl::startCPU(int)>:
c0019751:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0019756:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001975d:	0f 84 36 01 00 00    	je     c0019899 <Krnl::startCPU(int)+0x148>
c0019763:	53                   	push   ebx
c0019764:	83 ec 10             	sub    esp,0x10
c0019767:	fa                   	cli    
c0019768:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001976e:	6a 1b                	push   0x1b
c0019770:	ff 35 c8 d9 02 c0    	push   DWORD PTR ds:0xc002d9c8
c0019776:	e8 c5 53 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c001977b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019780:	89 c3                	mov    ebx,eax
c0019782:	58                   	pop    eax
c0019783:	5a                   	pop    edx
c0019784:	53                   	push   ebx
c0019785:	68 dc b5 02 c0       	push   0xc002b5dc
c001978a:	e8 40 8f ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c001978f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019799:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001979d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00197a7:	c1 e0 18             	shl    eax,0x18
c00197aa:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c00197b0:	83 c4 10             	add    esp,0x10
c00197b3:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00197b9:	09 c2                	or     edx,eax
c00197bb:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c00197c1:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c00197c7:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00197cd:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00197d3:	80 cd c5             	or     ch,0xc5
c00197d6:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00197dc:	f3 90                	pause  
c00197de:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00197e0:	0f ba e1 0c          	bt     ecx,0xc
c00197e4:	72 f6                	jb     c00197dc <Krnl::startCPU(int)+0x8b>
c00197e6:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00197ec:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00197f2:	09 c1                	or     ecx,eax
c00197f4:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00197fa:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019800:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019806:	80 cd 85             	or     ch,0x85
c0019809:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001980f:	f3 90                	pause  
c0019811:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019813:	0f ba e1 0c          	bt     ecx,0xc
c0019817:	72 f6                	jb     c001980f <Krnl::startCPU(int)+0xbe>
c0019819:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019823:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019829:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001982f:	09 c1                	or     ecx,eax
c0019831:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019837:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001983d:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019843:	81 c9 02 06 00 00    	or     ecx,0x602
c0019849:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001984f:	f3 90                	pause  
c0019851:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019853:	0f ba e1 0c          	bt     ecx,0xc
c0019857:	72 f6                	jb     c001984f <Krnl::startCPU(int)+0xfe>
c0019859:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019863:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019869:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001986f:	09 c8                	or     eax,ecx
c0019871:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019877:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001987d:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019882:	0d 02 06 00 00       	or     eax,0x602
c0019887:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001988d:	f3 90                	pause  
c001988f:	8b 02                	mov    eax,DWORD PTR [edx]
c0019891:	0f ba e0 0c          	bt     eax,0xc
c0019895:	72 f6                	jb     c001988d <Krnl::startCPU(int)+0x13c>
c0019897:	eb fe                	jmp    c0019897 <Krnl::startCPU(int)+0x146>
c0019899:	c3                   	ret    

c001989a <Krnl::startCPUs()>:
c001989a:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c001989f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00198a5:	88 c2                	mov    dl,al
c00198a7:	83 e2 0a             	and    edx,0xa
c00198aa:	80 fa 0a             	cmp    dl,0xa
c00198ad:	75 09                	jne    c00198b8 <Krnl::startCPUs()+0x1e>
c00198af:	a8 01                	test   al,0x1
c00198b1:	74 05                	je     c00198b8 <Krnl::startCPUs()+0x1e>
c00198b3:	e9 e3 68 fe ff       	jmp    c000019b <prepareTramp>
c00198b8:	c3                   	ret    
c00198b9:	90                   	nop

c00198ba <EnvVarContainer::getEnv(char const*)>:
c00198ba:	57                   	push   edi
c00198bb:	56                   	push   esi
c00198bc:	53                   	push   ebx
c00198bd:	31 db                	xor    ebx,ebx
c00198bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00198c3:	39 1e                	cmp    DWORD PTR [esi],ebx
c00198c5:	7e 2b                	jle    c00198f2 <EnvVarContainer::getEnv(char const*)+0x38>
c00198c7:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00198ce:	50                   	push   eax
c00198cf:	50                   	push   eax
c00198d0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00198d3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00198d6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00198da:	e8 b9 6f fe ff       	call   c0000898 <strcmp>
c00198df:	83 c4 10             	add    esp,0x10
c00198e2:	85 c0                	test   eax,eax
c00198e4:	75 09                	jne    c00198ef <EnvVarContainer::getEnv(char const*)+0x35>
c00198e6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00198e9:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00198ed:	eb 05                	jmp    c00198f4 <EnvVarContainer::getEnv(char const*)+0x3a>
c00198ef:	43                   	inc    ebx
c00198f0:	eb d1                	jmp    c00198c3 <EnvVarContainer::getEnv(char const*)+0x9>
c00198f2:	31 c0                	xor    eax,eax
c00198f4:	5b                   	pop    ebx
c00198f5:	5e                   	pop    esi
c00198f6:	5f                   	pop    edi
c00198f7:	c3                   	ret    

c00198f8 <EnvVarContainer::setEnv(char const*, char const*)>:
c00198f8:	55                   	push   ebp
c00198f9:	57                   	push   edi
c00198fa:	56                   	push   esi
c00198fb:	53                   	push   ebx
c00198fc:	83 ec 28             	sub    esp,0x28
c00198ff:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019903:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0019907:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001990b:	56                   	push   esi
c001990c:	e8 5b 6e fe ff       	call   c000076c <strlen>
c0019911:	40                   	inc    eax
c0019912:	89 04 24             	mov    DWORD PTR [esp],eax
c0019915:	e8 7f 5c ff ff       	call   c000f599 <malloc>
c001991a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001991d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019921:	e8 46 6e fe ff       	call   c000076c <strlen>
c0019926:	40                   	inc    eax
c0019927:	89 04 24             	mov    DWORD PTR [esp],eax
c001992a:	e8 6a 5c ff ff       	call   c000f599 <malloc>
c001992f:	89 34 24             	mov    DWORD PTR [esp],esi
c0019932:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019936:	e8 31 6e fe ff       	call   c000076c <strlen>
c001993b:	83 c4 0c             	add    esp,0xc
c001993e:	40                   	inc    eax
c001993f:	50                   	push   eax
c0019940:	6a 00                	push   0x0
c0019942:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019946:	e8 05 6e fe ff       	call   c0000750 <memset>
c001994b:	89 34 24             	mov    DWORD PTR [esp],esi
c001994e:	e8 19 6e fe ff       	call   c000076c <strlen>
c0019953:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019957:	8d 48 01             	lea    ecx,[eax+0x1]
c001995a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001995c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001995f:	89 de                	mov    esi,ebx
c0019961:	e8 06 6e fe ff       	call   c000076c <strlen>
c0019966:	83 c4 0c             	add    esp,0xc
c0019969:	40                   	inc    eax
c001996a:	50                   	push   eax
c001996b:	6a 00                	push   0x0
c001996d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019971:	e8 da 6d fe ff       	call   c0000750 <memset>
c0019976:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019979:	e8 ee 6d fe ff       	call   c000076c <strlen>
c001997e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019982:	8d 48 01             	lea    ecx,[eax+0x1]
c0019985:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019987:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001998a:	40                   	inc    eax
c001998b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001998e:	c1 e0 03             	shl    eax,0x3
c0019991:	5a                   	pop    edx
c0019992:	59                   	pop    ecx
c0019993:	50                   	push   eax
c0019994:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019997:	e8 e9 5b ff ff       	call   c000f585 <realloc>
c001999c:	8d 74 24 18          	lea    esi,[esp+0x18]
c00199a0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00199a3:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00199a6:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00199aa:	b9 08 00 00 00       	mov    ecx,0x8
c00199af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00199b1:	83 c4 2c             	add    esp,0x2c
c00199b4:	5b                   	pop    ebx
c00199b5:	5e                   	pop    esi
c00199b6:	5f                   	pop    edi
c00199b7:	5d                   	pop    ebp
c00199b8:	c3                   	ret    
c00199b9:	90                   	nop

c00199ba <EnvVarContainer::deleteEnv(char const*)>:
c00199ba:	c3                   	ret    
c00199bb:	90                   	nop

c00199bc <EnvVarContainer::loadFrom(char const*, char const*)>:
c00199bc:	55                   	push   ebp
c00199bd:	57                   	push   edi
c00199be:	56                   	push   esi
c00199bf:	53                   	push   ebx
c00199c0:	81 ec 38 01 00 00    	sub    esp,0x138
c00199c6:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00199cd:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00199d4:	68 14 01 00 00       	push   0x114
c00199d9:	e8 bb 5b ff ff       	call   c000f599 <malloc>
c00199de:	83 c4 0c             	add    esp,0xc
c00199e1:	89 c3                	mov    ebx,eax
c00199e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00199e6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00199ed:	50                   	push   eax
c00199ee:	e8 3b 92 ff ff       	call   c0012c2e <File::File(char const*, Process*)>
c00199f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00199f6:	e8 05 95 ff ff       	call   c0012f00 <File::exists()>
c00199fb:	83 c4 10             	add    esp,0x10
c00199fe:	84 c0                	test   al,al
c0019a00:	75 31                	jne    c0019a33 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019a02:	50                   	push   eax
c0019a03:	50                   	push   eax
c0019a04:	6a 12                	push   0x12
c0019a06:	53                   	push   ebx
c0019a07:	e8 86 92 ff ff       	call   c0012c92 <File::open(FileOpenMode)>
c0019a0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a0e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019a11:	89 34 24             	mov    DWORD PTR [esp],esi
c0019a14:	e8 53 6d fe ff       	call   c000076c <strlen>
c0019a19:	5a                   	pop    edx
c0019a1a:	31 d2                	xor    edx,edx
c0019a1c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019a20:	51                   	push   ecx
c0019a21:	56                   	push   esi
c0019a22:	52                   	push   edx
c0019a23:	50                   	push   eax
c0019a24:	53                   	push   ebx
c0019a25:	ff d7                	call   edi
c0019a27:	83 c4 14             	add    esp,0x14
c0019a2a:	53                   	push   ebx
c0019a2b:	e8 c0 92 ff ff       	call   c0012cf0 <File::close()>
c0019a30:	83 c4 10             	add    esp,0x10
c0019a33:	56                   	push   esi
c0019a34:	31 f6                	xor    esi,esi
c0019a36:	68 00 01 00 00       	push   0x100
c0019a3b:	6a 00                	push   0x0
c0019a3d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019a41:	50                   	push   eax
c0019a42:	e8 09 6d fe ff       	call   c0000750 <memset>
c0019a47:	5f                   	pop    edi
c0019a48:	58                   	pop    eax
c0019a49:	6a 01                	push   0x1
c0019a4b:	53                   	push   ebx
c0019a4c:	e8 41 92 ff ff       	call   c0012c92 <File::open(FileOpenMode)>
c0019a51:	83 c4 10             	add    esp,0x10
c0019a54:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019a5c:	83 ec 0c             	sub    esp,0xc
c0019a5f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a61:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019a65:	51                   	push   ecx
c0019a66:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019a6a:	52                   	push   edx
c0019a6b:	6a 00                	push   0x0
c0019a6d:	6a 01                	push   0x1
c0019a6f:	53                   	push   ebx
c0019a70:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019a73:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019a77:	83 c4 20             	add    esp,0x20
c0019a7a:	3c 0d                	cmp    al,0xd
c0019a7c:	0f 84 09 01 00 00    	je     c0019b8b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019a82:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019a87:	0f 84 ef 00 00 00    	je     c0019b7c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019a8d:	3c 0a                	cmp    al,0xa
c0019a8f:	74 13                	je     c0019aa4 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019a91:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019a96:	74 0c                	je     c0019aa4 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019a98:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019a9e:	0f 8e d8 00 00 00    	jle    c0019b7c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019aa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019aa8:	83 ec 0c             	sub    esp,0xc
c0019aab:	8d 78 01             	lea    edi,[eax+0x1]
c0019aae:	57                   	push   edi
c0019aaf:	e8 e5 5a ff ff       	call   c000f599 <malloc>
c0019ab4:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019ab8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019abc:	8d 56 04             	lea    edx,[esi+0x4]
c0019abf:	89 14 24             	mov    DWORD PTR [esp],edx
c0019ac2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019ac6:	e8 ce 5a ff ff       	call   c000f599 <malloc>
c0019acb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019acf:	83 c4 0c             	add    esp,0xc
c0019ad2:	57                   	push   edi
c0019ad3:	6a 00                	push   0x0
c0019ad5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019ad9:	e8 72 6c fe ff       	call   c0000750 <memset>
c0019ade:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019ae2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019ae6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019aea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019aec:	83 c4 0c             	add    esp,0xc
c0019aef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019af3:	52                   	push   edx
c0019af4:	6a 00                	push   0x0
c0019af6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019afa:	e8 51 6c fe ff       	call   c0000750 <memset>
c0019aff:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019b03:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019b07:	89 34 24             	mov    DWORD PTR [esp],esi
c0019b0a:	e8 5d 6c fe ff       	call   c000076c <strlen>
c0019b0f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019b13:	89 c1                	mov    ecx,eax
c0019b15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b17:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019b1a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0019b1d:	40                   	inc    eax
c0019b1e:	83 c4 10             	add    esp,0x10
c0019b21:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019b24:	85 d2                	test   edx,edx
c0019b26:	75 0c                	jne    c0019b34 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0019b28:	83 ec 0c             	sub    esp,0xc
c0019b2b:	6a 08                	push   0x8
c0019b2d:	e8 67 5a ff ff       	call   c000f599 <malloc>
c0019b32:	eb 0c                	jmp    c0019b40 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0019b34:	c1 e0 03             	shl    eax,0x3
c0019b37:	51                   	push   ecx
c0019b38:	51                   	push   ecx
c0019b39:	50                   	push   eax
c0019b3a:	52                   	push   edx
c0019b3b:	e8 45 5a ff ff       	call   c000f585 <realloc>
c0019b40:	83 c4 10             	add    esp,0x10
c0019b43:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019b46:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019b49:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0019b4c:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019b50:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019b54:	b9 08 00 00 00       	mov    ecx,0x8
c0019b59:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b5b:	31 f6                	xor    esi,esi
c0019b5d:	50                   	push   eax
c0019b5e:	68 00 01 00 00       	push   0x100
c0019b63:	6a 00                	push   0x0
c0019b65:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019b69:	50                   	push   eax
c0019b6a:	e8 e1 6b fe ff       	call   c0000750 <memset>
c0019b6f:	83 c4 10             	add    esp,0x10
c0019b72:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019b7a:	eb 0f                	jmp    c0019b8b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019b7c:	3c 3d                	cmp    al,0x3d
c0019b7e:	74 07                	je     c0019b87 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0019b80:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0019b84:	46                   	inc    esi
c0019b85:	eb 04                	jmp    c0019b8b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019b87:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019b8b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019b90:	0f 85 c6 fe ff ff    	jne    c0019a5c <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0019b96:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019b9c:	5b                   	pop    ebx
c0019b9d:	5e                   	pop    esi
c0019b9e:	5f                   	pop    edi
c0019b9f:	5d                   	pop    ebp
c0019ba0:	c3                   	ret    
c0019ba1:	90                   	nop

c0019ba2 <EnvVarContainer::__loadSystem()>:
c0019ba2:	83 ec 10             	sub    esp,0x10
c0019ba5:	68 00 cf 02 c0       	push   0xc002cf00
c0019baa:	68 ed b5 02 c0       	push   0xc002b5ed
c0019baf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019bb3:	e8 04 fe ff ff       	call   c00199bc <EnvVarContainer::loadFrom(char const*, char const*)>
c0019bb8:	83 c4 1c             	add    esp,0x1c
c0019bbb:	c3                   	ret    

c0019bbc <EnvVarContainer::__loadUser()>:
c0019bbc:	c3                   	ret    
c0019bbd:	90                   	nop

c0019bbe <EnvVarContainer::EnvVarContainer(Process*)>:
c0019bbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bc2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019bc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bcc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019bd0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019bd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bd7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019bde:	90                   	nop
c0019bdf:	c3                   	ret    

c0019be0 <EnvVarContainer::~EnvVarContainer()>:
c0019be0:	83 ec 0c             	sub    esp,0xc
c0019be3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019be7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019bea:	85 c0                	test   eax,eax
c0019bec:	74 1d                	je     c0019c0b <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019bee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bf2:	8b 00                	mov    eax,DWORD PTR [eax]
c0019bf4:	85 c0                	test   eax,eax
c0019bf6:	74 13                	je     c0019c0b <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019bf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bfc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019bff:	83 ec 0c             	sub    esp,0xc
c0019c02:	50                   	push   eax
c0019c03:	e8 a1 59 ff ff       	call   c000f5a9 <free>
c0019c08:	83 c4 10             	add    esp,0x10
c0019c0b:	90                   	nop
c0019c0c:	83 c4 0c             	add    esp,0xc
c0019c0f:	c3                   	ret    

c0019c10 <Krnl::getEnv(Process*, char const*)>:
c0019c10:	53                   	push   ebx
c0019c11:	83 ec 08             	sub    esp,0x8
c0019c14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c18:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019c1c:	39 05 10 0f 03 c0    	cmp    DWORD PTR ds:0xc0030f10,eax
c0019c22:	74 04                	je     c0019c28 <Krnl::getEnv(Process*, char const*)+0x18>
c0019c24:	85 c0                	test   eax,eax
c0019c26:	75 0b                	jne    c0019c33 <Krnl::getEnv(Process*, char const*)+0x23>
c0019c28:	a1 f4 04 03 c0       	mov    eax,ds:0xc00304f4
c0019c2d:	85 c0                	test   eax,eax
c0019c2f:	75 19                	jne    c0019c4a <Krnl::getEnv(Process*, char const*)+0x3a>
c0019c31:	eb 27                	jmp    c0019c5a <Krnl::getEnv(Process*, char const*)+0x4a>
c0019c33:	52                   	push   edx
c0019c34:	52                   	push   edx
c0019c35:	53                   	push   ebx
c0019c36:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019c3c:	e8 79 fc ff ff       	call   c00198ba <EnvVarContainer::getEnv(char const*)>
c0019c41:	83 c4 10             	add    esp,0x10
c0019c44:	85 c0                	test   eax,eax
c0019c46:	75 28                	jne    c0019c70 <Krnl::getEnv(Process*, char const*)+0x60>
c0019c48:	eb de                	jmp    c0019c28 <Krnl::getEnv(Process*, char const*)+0x18>
c0019c4a:	52                   	push   edx
c0019c4b:	52                   	push   edx
c0019c4c:	53                   	push   ebx
c0019c4d:	50                   	push   eax
c0019c4e:	e8 67 fc ff ff       	call   c00198ba <EnvVarContainer::getEnv(char const*)>
c0019c53:	83 c4 10             	add    esp,0x10
c0019c56:	85 c0                	test   eax,eax
c0019c58:	75 16                	jne    c0019c70 <Krnl::getEnv(Process*, char const*)+0x60>
c0019c5a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019c5e:	a1 f8 04 03 c0       	mov    eax,ds:0xc00304f8
c0019c63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019c67:	83 c4 08             	add    esp,0x8
c0019c6a:	5b                   	pop    ebx
c0019c6b:	e9 4a fc ff ff       	jmp    c00198ba <EnvVarContainer::getEnv(char const*)>
c0019c70:	83 c4 08             	add    esp,0x8
c0019c73:	5b                   	pop    ebx
c0019c74:	c3                   	ret    

c0019c75 <Krnl::setEnvSystem(char const*, char const*)>:
c0019c75:	83 ec 10             	sub    esp,0x10
c0019c78:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c7c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c80:	ff 35 f8 04 03 c0    	push   DWORD PTR ds:0xc00304f8
c0019c86:	e8 6d fc ff ff       	call   c00198f8 <EnvVarContainer::setEnv(char const*, char const*)>
c0019c8b:	83 c4 1c             	add    esp,0x1c
c0019c8e:	c3                   	ret    

c0019c8f <Krnl::setEnvUser(char const*, char const*)>:
c0019c8f:	a1 f4 04 03 c0       	mov    eax,ds:0xc00304f4
c0019c94:	85 c0                	test   eax,eax
c0019c96:	74 15                	je     c0019cad <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019c98:	83 ec 10             	sub    esp,0x10
c0019c9b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c9f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019ca3:	50                   	push   eax
c0019ca4:	e8 4f fc ff ff       	call   c00198f8 <EnvVarContainer::setEnv(char const*, char const*)>
c0019ca9:	83 c4 1c             	add    esp,0x1c
c0019cac:	c3                   	ret    
c0019cad:	c3                   	ret    

c0019cae <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019cae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cb2:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019cb8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019cbc:	e9 37 fc ff ff       	jmp    c00198f8 <EnvVarContainer::setEnv(char const*, char const*)>

c0019cc1 <Krnl::deleteEnvSystem(char const*)>:
c0019cc1:	c3                   	ret    

c0019cc2 <Krnl::deleteEnvUser(char const*)>:
c0019cc2:	c3                   	ret    

c0019cc3 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019cc3:	c3                   	ret    

c0019cc4 <Krnl::newProcessEnv(Process*)>:
c0019cc4:	83 ec 28             	sub    esp,0x28
c0019cc7:	6a 0c                	push   0xc
c0019cc9:	e8 cb 58 ff ff       	call   c000f599 <malloc>
c0019cce:	5a                   	pop    edx
c0019ccf:	59                   	pop    ecx
c0019cd0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019cd4:	50                   	push   eax
c0019cd5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019cd9:	e8 e0 fe ff ff       	call   c0019bbe <EnvVarContainer::EnvVarContainer(Process*)>
c0019cde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ce2:	83 c4 2c             	add    esp,0x2c
c0019ce5:	c3                   	ret    

c0019ce6 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019ce6:	57                   	push   edi
c0019ce7:	56                   	push   esi
c0019ce8:	53                   	push   ebx
c0019ce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ced:	83 ec 0c             	sub    esp,0xc
c0019cf0:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c0019cf6:	6a 0c                	push   0xc
c0019cf8:	e8 9c 58 ff ff       	call   c000f599 <malloc>
c0019cfd:	89 c3                	mov    ebx,eax
c0019cff:	58                   	pop    eax
c0019d00:	5a                   	pop    edx
c0019d01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d05:	53                   	push   ebx
c0019d06:	e8 b3 fe ff ff       	call   c0019bbe <EnvVarContainer::EnvVarContainer(Process*)>
c0019d0b:	8b 07                	mov    eax,DWORD PTR [edi]
c0019d0d:	89 03                	mov    DWORD PTR [ebx],eax
c0019d0f:	c1 e0 03             	shl    eax,0x3
c0019d12:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d15:	e8 7f 58 ff ff       	call   c000f599 <malloc>
c0019d1a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019d1d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0019d1f:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0019d22:	c1 e1 03             	shl    ecx,0x3
c0019d25:	89 c7                	mov    edi,eax
c0019d27:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019d29:	83 c4 10             	add    esp,0x10
c0019d2c:	89 d8                	mov    eax,ebx
c0019d2e:	5b                   	pop    ebx
c0019d2f:	5e                   	pop    esi
c0019d30:	5f                   	pop    edi
c0019d31:	c3                   	ret    

c0019d32 <Krnl::loadSystemEnv()>:
c0019d32:	53                   	push   ebx
c0019d33:	83 ec 14             	sub    esp,0x14
c0019d36:	6a 0c                	push   0xc
c0019d38:	e8 5c 58 ff ff       	call   c000f599 <malloc>
c0019d3d:	89 c3                	mov    ebx,eax
c0019d3f:	58                   	pop    eax
c0019d40:	5a                   	pop    edx
c0019d41:	ff 35 10 0f 03 c0    	push   DWORD PTR ds:0xc0030f10
c0019d47:	53                   	push   ebx
c0019d48:	e8 71 fe ff ff       	call   c0019bbe <EnvVarContainer::EnvVarContainer(Process*)>
c0019d4d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d50:	89 1d f8 04 03 c0    	mov    DWORD PTR ds:0xc00304f8,ebx
c0019d56:	e8 47 fe ff ff       	call   c0019ba2 <EnvVarContainer::__loadSystem()>
c0019d5b:	83 c4 18             	add    esp,0x18
c0019d5e:	5b                   	pop    ebx
c0019d5f:	c3                   	ret    

c0019d60 <Krnl::loadUserEnv()>:
c0019d60:	53                   	push   ebx
c0019d61:	83 ec 14             	sub    esp,0x14
c0019d64:	6a 0c                	push   0xc
c0019d66:	e8 2e 58 ff ff       	call   c000f599 <malloc>
c0019d6b:	89 c3                	mov    ebx,eax
c0019d6d:	58                   	pop    eax
c0019d6e:	5a                   	pop    edx
c0019d6f:	ff 35 10 0f 03 c0    	push   DWORD PTR ds:0xc0030f10
c0019d75:	53                   	push   ebx
c0019d76:	e8 43 fe ff ff       	call   c0019bbe <EnvVarContainer::EnvVarContainer(Process*)>
c0019d7b:	89 1d f4 04 03 c0    	mov    DWORD PTR ds:0xc00304f4,ebx
c0019d81:	83 c4 18             	add    esp,0x18
c0019d84:	5b                   	pop    ebx
c0019d85:	c3                   	ret    

c0019d86 <Krnl::flushEnv()>:
c0019d86:	c3                   	ret    

c0019d87 <Krnl::getProcessTotalEnvCount(Process*)>:
c0019d87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d8b:	8b 15 f4 04 03 c0    	mov    edx,DWORD PTR ds:0xc00304f4
c0019d91:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019d97:	a1 f8 04 03 c0       	mov    eax,ds:0xc00304f8
c0019d9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d9e:	03 01                	add    eax,DWORD PTR [ecx]
c0019da0:	85 d2                	test   edx,edx
c0019da2:	74 02                	je     c0019da6 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019da4:	03 02                	add    eax,DWORD PTR [edx]
c0019da6:	c3                   	ret    

c0019da7 <Krnl::getProcessEnvPair(Process*, int)>:
c0019da7:	57                   	push   edi
c0019da8:	56                   	push   esi
c0019da9:	8b 35 f4 04 03 c0    	mov    esi,DWORD PTR ds:0xc00304f4
c0019daf:	53                   	push   ebx
c0019db0:	85 f6                	test   esi,esi
c0019db2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019db6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019dba:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019dc0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019dc4:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019dc6:	75 16                	jne    c0019dde <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0019dc8:	39 c2                	cmp    edx,eax
c0019dca:	7c 16                	jl     c0019de2 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019dcc:	8b 0d f8 04 03 c0    	mov    ecx,DWORD PTR ds:0xc00304f8
c0019dd2:	8b 31                	mov    esi,DWORD PTR [ecx]
c0019dd4:	01 c6                	add    esi,eax
c0019dd6:	39 d6                	cmp    esi,edx
c0019dd8:	7e 3c                	jle    c0019e16 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019dda:	29 c2                	sub    edx,eax
c0019ddc:	eb 04                	jmp    c0019de2 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019dde:	39 c2                	cmp    edx,eax
c0019de0:	7d 05                	jge    c0019de7 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0019de2:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019de5:	eb 20                	jmp    c0019e07 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0019de7:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019de9:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0019dec:	39 d1                	cmp    ecx,edx
c0019dee:	7e 04                	jle    c0019df4 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0019df0:	29 c2                	sub    edx,eax
c0019df2:	eb 10                	jmp    c0019e04 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0019df4:	8b 35 f8 04 03 c0    	mov    esi,DWORD PTR ds:0xc00304f8
c0019dfa:	03 0e                	add    ecx,DWORD PTR [esi]
c0019dfc:	39 d1                	cmp    ecx,edx
c0019dfe:	7e 16                	jle    c0019e16 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019e00:	29 c2                	sub    edx,eax
c0019e02:	29 fa                	sub    edx,edi
c0019e04:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019e07:	8d 14 d0             	lea    edx,[eax+edx*8]
c0019e0a:	8b 02                	mov    eax,DWORD PTR [edx]
c0019e0c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0019e0f:	89 03                	mov    DWORD PTR [ebx],eax
c0019e11:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019e14:	eb 1d                	jmp    c0019e33 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0019e16:	83 ec 0c             	sub    esp,0xc
c0019e19:	68 0f b6 02 c0       	push   0xc002b60f
c0019e1e:	e8 18 00 00 00       	call   c0019e3b <Krnl::panic(char const*)>
c0019e23:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019e29:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019e30:	83 c4 10             	add    esp,0x10
c0019e33:	89 d8                	mov    eax,ebx
c0019e35:	5b                   	pop    ebx
c0019e36:	5e                   	pop    esi
c0019e37:	5f                   	pop    edi
c0019e38:	c2 04 00             	ret    0x4

c0019e3b <Krnl::panic(char const*)>:
c0019e3b:	55                   	push   ebp
c0019e3c:	89 e5                	mov    ebp,esp
c0019e3e:	53                   	push   ebx
c0019e3f:	83 ec 10             	sub    esp,0x10
c0019e42:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019e45:	fa                   	cli    
c0019e46:	c6 05 04 05 03 c0 01 	mov    BYTE PTR ds:0xc0030504,0x1
c0019e4d:	53                   	push   ebx
c0019e4e:	e8 a0 57 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0019e53:	58                   	pop    eax
c0019e54:	c6 05 00 c9 02 c0 00 	mov    BYTE PTR ds:0xc002c900,0x0
c0019e5b:	5a                   	pop    edx
c0019e5c:	53                   	push   ebx
c0019e5d:	68 29 b6 02 c0       	push   0xc002b629
c0019e62:	e8 68 88 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0019e67:	59                   	pop    ecx
c0019e68:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0019e6d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e73:	e8 db 64 ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c0019e78:	83 c4 0c             	add    esp,0xc
c0019e7b:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0019e80:	6a 01                	push   0x1
c0019e82:	6a 0f                	push   0xf
c0019e84:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e8a:	e8 23 63 ff ff       	call   c00101b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019e8f:	58                   	pop    eax
c0019e90:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0019e95:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e9b:	e8 34 68 ff ff       	call   c00106d4 <VgaText::clearScreen()>
c0019ea0:	58                   	pop    eax
c0019ea1:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0019ea6:	5a                   	pop    edx
c0019ea7:	68 42 b6 02 c0       	push   0xc002b642
c0019eac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019eb2:	e8 a9 69 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019eb7:	59                   	pop    ecx
c0019eb8:	58                   	pop    eax
c0019eb9:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0019ebe:	68 e8 b6 02 c0       	push   0xc002b6e8
c0019ec3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ec9:	e8 92 69 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019ece:	58                   	pop    eax
c0019ecf:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0019ed4:	5a                   	pop    edx
c0019ed5:	68 5e b6 02 c0       	push   0xc002b65e
c0019eda:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ee0:	e8 7b 69 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019ee5:	59                   	pop    ecx
c0019ee6:	58                   	pop    eax
c0019ee7:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0019eec:	53                   	push   ebx
c0019eed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ef3:	e8 68 69 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019ef8:	58                   	pop    eax
c0019ef9:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0019efe:	5a                   	pop    edx
c0019eff:	68 7e b6 02 c0       	push   0xc002b67e
c0019f04:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f0a:	e8 51 69 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f0f:	a1 00 05 03 c0       	mov    eax,ds:0xc0030500
c0019f14:	83 c4 10             	add    esp,0x10
c0019f17:	85 c0                	test   eax,eax
c0019f19:	74 02                	je     c0019f1d <Krnl::panic(char const*)+0xe2>
c0019f1b:	ff d0                	call   eax
c0019f1d:	83 ec 0c             	sub    esp,0xc
c0019f20:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019f23:	e8 8c 30 00 00       	call   c001cfb4 <Thr::getDriverNameFromAddress(unsigned long)>
c0019f28:	83 c4 10             	add    esp,0x10
c0019f2b:	89 c3                	mov    ebx,eax
c0019f2d:	85 c0                	test   eax,eax
c0019f2f:	0f 84 4e 02 00 00    	je     c001a183 <Krnl::panic(char const*)+0x348>
c0019f35:	83 ec 08             	sub    esp,0x8
c0019f38:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0019f3d:	68 24 b7 02 c0       	push   0xc002b724
c0019f42:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f48:	e8 13 69 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f4d:	58                   	pop    eax
c0019f4e:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0019f53:	5a                   	pop    edx
c0019f54:	68 5e b6 02 c0       	push   0xc002b65e
c0019f59:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f5f:	e8 fc 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f64:	59                   	pop    ecx
c0019f65:	58                   	pop    eax
c0019f66:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0019f6b:	53                   	push   ebx
c0019f6c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f72:	e8 e9 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f77:	83 c4 10             	add    esp,0x10
c0019f7a:	83 ec 08             	sub    esp,0x8
c0019f7d:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0019f82:	68 7d b6 02 c0       	push   0xc002b67d
c0019f87:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f8d:	e8 ce 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f92:	58                   	pop    eax
c0019f93:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0019f98:	5a                   	pop    edx
c0019f99:	68 7c b7 02 c0       	push   0xc002b77c
c0019f9e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fa4:	e8 b7 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019fa9:	59                   	pop    ecx
c0019faa:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0019faf:	5b                   	pop    ebx
c0019fb0:	68 bc b7 02 c0       	push   0xc002b7bc
c0019fb5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fbb:	e8 a0 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019fc0:	58                   	pop    eax
c0019fc1:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c0019fc6:	5a                   	pop    edx
c0019fc7:	68 69 b6 02 c0       	push   0xc002b669
c0019fcc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fd2:	e8 89 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019fd7:	59                   	pop    ecx
c0019fd8:	5b                   	pop    ebx
c0019fd9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019fdc:	68 81 b6 02 c0       	push   0xc002b681
c0019fe1:	e8 e9 86 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0019fe6:	58                   	pop    eax
c0019fe7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019fea:	5a                   	pop    edx
c0019feb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019fee:	68 8a b6 02 c0       	push   0xc002b68a
c0019ff3:	e8 d7 86 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0019ff8:	59                   	pop    ecx
c0019ff9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019ffc:	5b                   	pop    ebx
c0019ffd:	8b 00                	mov    eax,DWORD PTR [eax]
c0019fff:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a002:	68 93 b6 02 c0       	push   0xc002b693
c001a007:	e8 c3 86 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c001a00c:	58                   	pop    eax
c001a00d:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a012:	5a                   	pop    edx
c001a013:	68 00 b8 02 c0       	push   0xc002b800
c001a018:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a01e:	e8 3d 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a023:	59                   	pop    ecx
c001a024:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a029:	5b                   	pop    ebx
c001a02a:	68 9c b6 02 c0       	push   0xc002b69c
c001a02f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a035:	e8 26 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a03a:	0f 20 c0             	mov    eax,cr0
c001a03d:	5a                   	pop    edx
c001a03e:	59                   	pop    ecx
c001a03f:	50                   	push   eax
c001a040:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a045:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a04b:	e8 ca 67 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a050:	5b                   	pop    ebx
c001a051:	58                   	pop    eax
c001a052:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a057:	68 a6 b6 02 c0       	push   0xc002b6a6
c001a05c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a062:	e8 f9 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a067:	0f 20 d0             	mov    eax,cr2
c001a06a:	5a                   	pop    edx
c001a06b:	59                   	pop    ecx
c001a06c:	50                   	push   eax
c001a06d:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a072:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a078:	e8 9d 67 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a07d:	5b                   	pop    ebx
c001a07e:	58                   	pop    eax
c001a07f:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a084:	68 b0 b6 02 c0       	push   0xc002b6b0
c001a089:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a08f:	e8 cc 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a094:	0f 20 d8             	mov    eax,cr3
c001a097:	5a                   	pop    edx
c001a098:	59                   	pop    ecx
c001a099:	50                   	push   eax
c001a09a:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a09f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0a5:	e8 70 67 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a0aa:	5b                   	pop    ebx
c001a0ab:	58                   	pop    eax
c001a0ac:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a0b1:	68 c3 b6 02 c0       	push   0xc002b6c3
c001a0b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0bc:	e8 9f 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a0c1:	0f 20 e0             	mov    eax,cr4
c001a0c4:	5a                   	pop    edx
c001a0c5:	59                   	pop    ecx
c001a0c6:	50                   	push   eax
c001a0c7:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a0cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0d2:	e8 43 67 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a0d7:	5b                   	pop    ebx
c001a0d8:	58                   	pop    eax
c001a0d9:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a0de:	68 cd b6 02 c0       	push   0xc002b6cd
c001a0e3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0e9:	e8 72 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a0ee:	5a                   	pop    edx
c001a0ef:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a0f4:	59                   	pop    ecx
c001a0f5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a0fb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a0fe:	50                   	push   eax
c001a0ff:	e8 16 67 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a104:	5b                   	pop    ebx
c001a105:	58                   	pop    eax
c001a106:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a10b:	68 e4 b6 02 c0       	push   0xc002b6e4
c001a110:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a116:	e8 45 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a11b:	5a                   	pop    edx
c001a11c:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a121:	59                   	pop    ecx
c001a122:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a128:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a12b:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a12e:	50                   	push   eax
c001a12f:	e8 e6 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a134:	5b                   	pop    ebx
c001a135:	58                   	pop    eax
c001a136:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a13b:	68 e4 b6 02 c0       	push   0xc002b6e4
c001a140:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a146:	e8 15 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a14b:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a150:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a153:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a159:	8b 12                	mov    edx,DWORD PTR [edx]
c001a15b:	59                   	pop    ecx
c001a15c:	5b                   	pop    ebx
c001a15d:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a160:	50                   	push   eax
c001a161:	e8 b4 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a166:	83 c4 10             	add    esp,0x10
c001a169:	b2 fe                	mov    dl,0xfe
c001a16b:	e4 60                	in     al,0x60
c001a16d:	3c 1c                	cmp    al,0x1c
c001a16f:	74 04                	je     c001a175 <Krnl::panic(char const*)+0x33a>
c001a171:	3c 5a                	cmp    al,0x5a
c001a173:	75 f6                	jne    c001a16b <Krnl::panic(char const*)+0x330>
c001a175:	e4 64                	in     al,0x64
c001a177:	a8 02                	test   al,0x2
c001a179:	75 fa                	jne    c001a175 <Krnl::panic(char const*)+0x33a>
c001a17b:	88 d0                	mov    al,dl
c001a17d:	e6 64                	out    0x64,al
c001a17f:	fa                   	cli    
c001a180:	f4                   	hlt    
c001a181:	eb e8                	jmp    c001a16b <Krnl::panic(char const*)+0x330>
c001a183:	50                   	push   eax
c001a184:	50                   	push   eax
c001a185:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a18a:	68 50 b7 02 c0       	push   0xc002b750
c001a18f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a195:	e8 c6 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a19a:	58                   	pop    eax
c001a19b:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a1a0:	5a                   	pop    edx
c001a1a1:	68 5e b6 02 c0       	push   0xc002b65e
c001a1a6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1ac:	e8 af 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a1b1:	59                   	pop    ecx
c001a1b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a1b7:	5b                   	pop    ebx
c001a1b8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a1bb:	83 c0 0c             	add    eax,0xc
c001a1be:	50                   	push   eax
c001a1bf:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001a1c4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1ca:	e8 91 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a1cf:	83 c4 10             	add    esp,0x10
c001a1d2:	e9 a3 fd ff ff       	jmp    c0019f7a <Krnl::panic(char const*)+0x13f>

c001a1d7 <Net::switchEndian16(unsigned short)>:
c001a1d7:	83 ec 04             	sub    esp,0x4
c001a1da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a1de:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a1e2:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a1e6:	c1 f8 08             	sar    eax,0x8
c001a1e9:	89 c2                	mov    edx,eax
c001a1eb:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a1ef:	c1 e0 08             	shl    eax,0x8
c001a1f2:	09 d0                	or     eax,edx
c001a1f4:	83 c4 04             	add    esp,0x4
c001a1f7:	c3                   	ret    

c001a1f8 <Net::switchEndian32(unsigned int)>:
c001a1f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1fc:	c1 e8 18             	shr    eax,0x18
c001a1ff:	89 c2                	mov    edx,eax
c001a201:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a205:	c1 e0 08             	shl    eax,0x8
c001a208:	25 00 00 ff 00       	and    eax,0xff0000
c001a20d:	09 c2                	or     edx,eax
c001a20f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a213:	c1 e8 08             	shr    eax,0x8
c001a216:	25 00 ff 00 00       	and    eax,0xff00
c001a21b:	09 c2                	or     edx,eax
c001a21d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a221:	c1 e0 18             	shl    eax,0x18
c001a224:	09 d0                	or     eax,edx
c001a226:	c3                   	ret    

c001a227 <Net::crc32Calc(unsigned char*, int)>:
c001a227:	83 ec 10             	sub    esp,0x10
c001a22a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a22f:	75 07                	jne    c001a238 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a231:	b8 00 00 00 00       	mov    eax,0x0
c001a236:	eb 7c                	jmp    c001a2b4 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a238:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a23d:	7f 07                	jg     c001a246 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a23f:	b8 00 00 00 00       	mov    eax,0x0
c001a244:	eb 6e                	jmp    c001a2b4 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a246:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a24e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a256:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a25a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a25e:	7d 4e                	jge    c001a2ae <Net::crc32Calc(unsigned char*, int)+0x87>
c001a260:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a264:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a268:	01 d0                	add    eax,edx
c001a26a:	8a 00                	mov    al,BYTE PTR [eax]
c001a26c:	0f b6 c0             	movzx  eax,al
c001a26f:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a273:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a27b:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a280:	7f 26                	jg     c001a2a8 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a282:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a286:	83 e0 01             	and    eax,0x1
c001a289:	74 0d                	je     c001a298 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a28b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a28f:	d1 e8                	shr    eax,1
c001a291:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a296:	eb 06                	jmp    c001a29e <Net::crc32Calc(unsigned char*, int)+0x77>
c001a298:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a29c:	d1 e8                	shr    eax,1
c001a29e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a2a2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a2a6:	eb d3                	jmp    c001a27b <Net::crc32Calc(unsigned char*, int)+0x54>
c001a2a8:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a2ac:	eb a8                	jmp    c001a256 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a2ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2b2:	f7 d0                	not    eax
c001a2b4:	83 c4 10             	add    esp,0x10
c001a2b7:	c3                   	ret    

c001a2b8 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a2b8:	57                   	push   edi
c001a2b9:	56                   	push   esi
c001a2ba:	53                   	push   ebx
c001a2bb:	83 ec 60             	sub    esp,0x60
c001a2be:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a2c9:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a2d1:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a2d6:	7f 1a                	jg     c001a2f2 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a2d8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2df:	8d 50 01             	lea    edx,[eax+0x1]
c001a2e2:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a2e9:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a2ec:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a2f0:	eb df                	jmp    c001a2d1 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a2f2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2f9:	8d 50 01             	lea    edx,[eax+0x1]
c001a2fc:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a303:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a306:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a30d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a311:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a315:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a319:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a321:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a325:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a329:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a32d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a331:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a335:	89 c6                	mov    esi,eax
c001a337:	89 d7                	mov    edi,edx
c001a339:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a33b:	89 c8                	mov    eax,ecx
c001a33d:	89 fa                	mov    edx,edi
c001a33f:	89 f3                	mov    ebx,esi
c001a341:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a345:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a349:	89 04 24             	mov    DWORD PTR [esp],eax
c001a34c:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a354:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a35b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a35f:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a363:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a367:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a36f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a373:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a377:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a37b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a37f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a383:	89 c6                	mov    esi,eax
c001a385:	89 d7                	mov    edi,edx
c001a387:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a389:	89 c8                	mov    eax,ecx
c001a38b:	89 fa                	mov    edx,edi
c001a38d:	89 f3                	mov    ebx,esi
c001a38f:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a393:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a397:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a39b:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a3a3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a3aa:	0f b7 c0             	movzx  eax,ax
c001a3ad:	c1 f8 08             	sar    eax,0x8
c001a3b0:	89 c1                	mov    ecx,eax
c001a3b2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a3b9:	8d 50 01             	lea    edx,[eax+0x1]
c001a3bc:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a3c3:	88 ca                	mov    dl,cl
c001a3c5:	88 10                	mov    BYTE PTR [eax],dl
c001a3c7:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a3ce:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a3d5:	8d 48 01             	lea    ecx,[eax+0x1]
c001a3d8:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a3df:	88 10                	mov    BYTE PTR [eax],dl
c001a3e1:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a3e5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a3e9:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a3f0:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a3f4:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a3f8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a3fc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a400:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a404:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a408:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a40c:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a410:	89 c6                	mov    esi,eax
c001a412:	89 d7                	mov    edi,edx
c001a414:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a416:	89 c8                	mov    eax,ecx
c001a418:	89 fa                	mov    edx,edi
c001a41a:	89 f3                	mov    ebx,esi
c001a41c:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a420:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a424:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a428:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a42c:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a433:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a43a:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a43e:	50                   	push   eax
c001a43f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a443:	e8 df fd ff ff       	call   c001a227 <Net::crc32Calc(unsigned char*, int)>
c001a448:	83 c4 08             	add    esp,0x8
c001a44b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a44f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a453:	c1 e8 18             	shr    eax,0x18
c001a456:	89 c1                	mov    ecx,eax
c001a458:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a45f:	8d 50 01             	lea    edx,[eax+0x1]
c001a462:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a469:	88 ca                	mov    dl,cl
c001a46b:	88 10                	mov    BYTE PTR [eax],dl
c001a46d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a471:	c1 e8 10             	shr    eax,0x10
c001a474:	89 c1                	mov    ecx,eax
c001a476:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a47d:	8d 50 01             	lea    edx,[eax+0x1]
c001a480:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a487:	88 ca                	mov    dl,cl
c001a489:	88 10                	mov    BYTE PTR [eax],dl
c001a48b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a48f:	c1 e8 08             	shr    eax,0x8
c001a492:	89 c1                	mov    ecx,eax
c001a494:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a49b:	8d 50 01             	lea    edx,[eax+0x1]
c001a49e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a4a5:	88 ca                	mov    dl,cl
c001a4a7:	88 10                	mov    BYTE PTR [eax],dl
c001a4a9:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a4b0:	8d 50 01             	lea    edx,[eax+0x1]
c001a4b3:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a4ba:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a4be:	88 10                	mov    BYTE PTR [eax],dl
c001a4c0:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a4c4:	83 c4 60             	add    esp,0x60
c001a4c7:	5b                   	pop    ebx
c001a4c8:	5e                   	pop    esi
c001a4c9:	5f                   	pop    edi
c001a4ca:	c3                   	ret    

c001a4cb <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a4cb:	57                   	push   edi
c001a4cc:	56                   	push   esi
c001a4cd:	53                   	push   ebx
c001a4ce:	83 ec 70             	sub    esp,0x70
c001a4d1:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4d8:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a4dc:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a4e4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a4eb:	83 c0 0e             	add    eax,0xe
c001a4ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a4f2:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4f9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a4fd:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a505:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a50d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a511:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a515:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a519:	89 c6                	mov    esi,eax
c001a51b:	89 d7                	mov    edi,edx
c001a51d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a51f:	89 c8                	mov    eax,ecx
c001a521:	89 fa                	mov    edx,edi
c001a523:	89 f3                	mov    ebx,esi
c001a525:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a529:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a52d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a531:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a539:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a540:	83 c0 08             	add    eax,0x8
c001a543:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001a547:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a54e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a552:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001a55a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a55e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a562:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a566:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a56a:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a56e:	89 c6                	mov    esi,eax
c001a570:	89 d7                	mov    edi,edx
c001a572:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a574:	89 c8                	mov    eax,ecx
c001a576:	89 fa                	mov    edx,edi
c001a578:	89 f3                	mov    ebx,esi
c001a57a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a57e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a582:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a586:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a58e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a595:	8d 50 01             	lea    edx,[eax+0x1]
c001a598:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a59f:	8a 00                	mov    al,BYTE PTR [eax]
c001a5a1:	0f b6 c0             	movzx  eax,al
c001a5a4:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001a5a9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a5b0:	8d 50 01             	lea    edx,[eax+0x1]
c001a5b3:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a5ba:	8a 00                	mov    al,BYTE PTR [eax]
c001a5bc:	0f b6 c0             	movzx  eax,al
c001a5bf:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001a5c4:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001a5c9:	c1 e0 08             	shl    eax,0x8
c001a5cc:	89 c2                	mov    edx,eax
c001a5ce:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a5d2:	09 d0                	or     eax,edx
c001a5d4:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a5db:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a5df:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001a5e7:	75 46                	jne    c001a62f <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a5e9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a5f0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a5f3:	66 3d dc 05          	cmp    ax,0x5dc
c001a5f7:	77 16                	ja     c001a60f <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001a5f9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a600:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a603:	0f b7 c0             	movzx  eax,ax
c001a606:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a60d:	eb 20                	jmp    c001a62f <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a60f:	83 ec 0c             	sub    esp,0xc
c001a612:	68 28 b8 02 c0       	push   0xc002b828
c001a617:	e8 b3 80 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c001a61c:	83 c4 10             	add    esp,0x10
c001a61f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a626:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a62a:	e9 17 01 00 00       	jmp    c001a746 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001a62f:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a636:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a63d:	8b 12                	mov    edx,DWORD PTR [edx]
c001a63f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a643:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a64a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001a64e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a652:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a656:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a65a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a65e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a662:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a666:	89 c6                	mov    esi,eax
c001a668:	89 d7                	mov    edi,edx
c001a66a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a66c:	89 c8                	mov    eax,ecx
c001a66e:	89 fa                	mov    edx,edi
c001a670:	89 f3                	mov    ebx,esi
c001a672:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a676:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a67a:	89 04 24             	mov    DWORD PTR [esp],eax
c001a67d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a684:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001a68b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a692:	8d 50 01             	lea    edx,[eax+0x1]
c001a695:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a69c:	8a 00                	mov    al,BYTE PTR [eax]
c001a69e:	0f b6 c0             	movzx  eax,al
c001a6a1:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001a6a5:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6ac:	8d 50 01             	lea    edx,[eax+0x1]
c001a6af:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a6b6:	8a 00                	mov    al,BYTE PTR [eax]
c001a6b8:	0f b6 c0             	movzx  eax,al
c001a6bb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001a6bf:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6c6:	8d 50 01             	lea    edx,[eax+0x1]
c001a6c9:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a6d0:	8a 00                	mov    al,BYTE PTR [eax]
c001a6d2:	0f b6 c0             	movzx  eax,al
c001a6d5:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001a6d9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6e0:	8d 50 01             	lea    edx,[eax+0x1]
c001a6e3:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a6ea:	8a 00                	mov    al,BYTE PTR [eax]
c001a6ec:	0f b6 c0             	movzx  eax,al
c001a6ef:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a6f3:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001a6f7:	c1 e0 18             	shl    eax,0x18
c001a6fa:	89 c2                	mov    edx,eax
c001a6fc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a700:	c1 e0 10             	shl    eax,0x10
c001a703:	09 c2                	or     edx,eax
c001a705:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a709:	c1 e0 08             	shl    eax,0x8
c001a70c:	09 d0                	or     eax,edx
c001a70e:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001a712:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a716:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a71d:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001a721:	83 e8 04             	sub    eax,0x4
c001a724:	83 ec 08             	sub    esp,0x8
c001a727:	50                   	push   eax
c001a728:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a72c:	e8 f6 fa ff ff       	call   c001a227 <Net::crc32Calc(unsigned char*, int)>
c001a731:	83 c4 10             	add    esp,0x10
c001a734:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001a738:	0f 94 c2             	sete   dl
c001a73b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a742:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a745:	90                   	nop
c001a746:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a74d:	83 c4 70             	add    esp,0x70
c001a750:	5b                   	pop    ebx
c001a751:	5e                   	pop    esi
c001a752:	5f                   	pop    edi
c001a753:	c2 04 00             	ret    0x4

c001a756 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a756:	55                   	push   ebp
c001a757:	57                   	push   edi
c001a758:	56                   	push   esi
c001a759:	53                   	push   ebx
c001a75a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a760:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a767:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a769:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a76c:	80 fb 40             	cmp    bl,0x40
c001a76f:	75 1b                	jne    c001a78c <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a771:	8a 16                	mov    dl,BYTE PTR [esi]
c001a773:	84 d2                	test   dl,dl
c001a775:	0f 84 f1 00 00 00    	je     c001a86c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a77b:	8d 46 01             	lea    eax,[esi+0x1]
c001a77e:	80 fa 3a             	cmp    dl,0x3a
c001a781:	74 04                	je     c001a787 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a783:	89 c6                	mov    esi,eax
c001a785:	eb ea                	jmp    c001a771 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a787:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a78a:	89 c6                	mov    esi,eax
c001a78c:	50                   	push   eax
c001a78d:	6a 40                	push   0x40
c001a78f:	6a 00                	push   0x0
c001a791:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a795:	50                   	push   eax
c001a796:	e8 b5 5f fe ff       	call   c0000750 <memset>
c001a79b:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a7a2:	31 c0                	xor    eax,eax
c001a7a4:	83 c4 10             	add    esp,0x10
c001a7a7:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a7a9:	84 c9                	test   cl,cl
c001a7ab:	0f 84 bb 00 00 00    	je     c001a86c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a7b1:	3d c7 00 00 00       	cmp    eax,0xc7
c001a7b6:	0f 8f b0 00 00 00    	jg     c001a86c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a7bc:	80 f9 0a             	cmp    cl,0xa
c001a7bf:	0f 85 98 00 00 00    	jne    c001a85d <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a7c5:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a7ca:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a7ce:	a8 df                	test   al,0xdf
c001a7d0:	0f 94 c1             	sete   cl
c001a7d3:	3c 23                	cmp    al,0x23
c001a7d5:	0f 94 c2             	sete   dl
c001a7d8:	08 d1                	or     cl,dl
c001a7da:	75 4a                	jne    c001a826 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a7dc:	8d 50 f7             	lea    edx,[eax-0x9]
c001a7df:	80 fa 01             	cmp    dl,0x1
c001a7e2:	76 42                	jbe    c001a826 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a7e4:	3c 5b                	cmp    al,0x5b
c001a7e6:	75 42                	jne    c001a82a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a7e8:	80 fb 40             	cmp    bl,0x40
c001a7eb:	75 39                	jne    c001a826 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a7ed:	83 ec 0c             	sub    esp,0xc
c001a7f0:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a7f4:	52                   	push   edx
c001a7f5:	e8 72 5f fe ff       	call   c000076c <strlen>
c001a7fa:	83 c4 10             	add    esp,0x10
c001a7fd:	83 f8 3f             	cmp    eax,0x3f
c001a800:	77 6a                	ja     c001a86c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a802:	50                   	push   eax
c001a803:	50                   	push   eax
c001a804:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a808:	52                   	push   edx
c001a809:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a80d:	52                   	push   edx
c001a80e:	e8 f9 5f fe ff       	call   c000080c <strcpy>
c001a813:	58                   	pop    eax
c001a814:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a818:	52                   	push   edx
c001a819:	e8 4e 5f fe ff       	call   c000076c <strlen>
c001a81e:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a823:	83 c4 10             	add    esp,0x10
c001a826:	31 d2                	xor    edx,edx
c001a828:	eb 3a                	jmp    c001a864 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a82a:	80 fb 40             	cmp    bl,0x40
c001a82d:	74 06                	je     c001a835 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a82f:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a833:	eb 20                	jmp    c001a855 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a835:	50                   	push   eax
c001a836:	50                   	push   eax
c001a837:	55                   	push   ebp
c001a838:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a83c:	50                   	push   eax
c001a83d:	e8 56 60 fe ff       	call   c0000898 <strcmp>
c001a842:	83 c4 10             	add    esp,0x10
c001a845:	85 c0                	test   eax,eax
c001a847:	75 dd                	jne    c001a826 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a849:	eb e4                	jmp    c001a82f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a84b:	8d 50 01             	lea    edx,[eax+0x1]
c001a84e:	80 f9 3d             	cmp    cl,0x3d
c001a851:	74 1d                	je     c001a870 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a853:	89 d0                	mov    eax,edx
c001a855:	8a 08                	mov    cl,BYTE PTR [eax]
c001a857:	84 c9                	test   cl,cl
c001a859:	75 f0                	jne    c001a84b <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a85b:	eb 0f                	jmp    c001a86c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a85d:	8d 50 01             	lea    edx,[eax+0x1]
c001a860:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a864:	47                   	inc    edi
c001a865:	89 d0                	mov    eax,edx
c001a867:	e9 3b ff ff ff       	jmp    c001a7a7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a86c:	31 c0                	xor    eax,eax
c001a86e:	eb 33                	jmp    c001a8a3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a870:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a874:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a877:	50                   	push   eax
c001a878:	50                   	push   eax
c001a879:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a87d:	50                   	push   eax
c001a87e:	56                   	push   esi
c001a87f:	e8 14 60 fe ff       	call   c0000898 <strcmp>
c001a884:	83 c4 10             	add    esp,0x10
c001a887:	85 c0                	test   eax,eax
c001a889:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a88d:	75 97                	jne    c001a826 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a88f:	51                   	push   ecx
c001a890:	51                   	push   ecx
c001a891:	52                   	push   edx
c001a892:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a899:	e8 6e 5f fe ff       	call   c000080c <strcpy>
c001a89e:	83 c4 10             	add    esp,0x10
c001a8a1:	b0 01                	mov    al,0x1
c001a8a3:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a8a9:	5b                   	pop    ebx
c001a8aa:	5e                   	pop    esi
c001a8ab:	5f                   	pop    edi
c001a8ac:	5d                   	pop    ebp
c001a8ad:	c3                   	ret    

c001a8ae <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a8ae:	57                   	push   edi
c001a8af:	56                   	push   esi
c001a8b0:	53                   	push   ebx
c001a8b1:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a8b7:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a8be:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a8c5:	53                   	push   ebx
c001a8c6:	e8 a1 5e fe ff       	call   c000076c <strlen>
c001a8cb:	89 34 24             	mov    DWORD PTR [esp],esi
c001a8ce:	89 c7                	mov    edi,eax
c001a8d0:	e8 97 5e fe ff       	call   c000076c <strlen>
c001a8d5:	83 c4 10             	add    esp,0x10
c001a8d8:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a8dc:	3d ff 00 00 00       	cmp    eax,0xff
c001a8e1:	0f 87 d3 00 00 00    	ja     c001a9ba <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a8e7:	57                   	push   edi
c001a8e8:	57                   	push   edi
c001a8e9:	56                   	push   esi
c001a8ea:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a8ee:	56                   	push   esi
c001a8ef:	e8 18 5f fe ff       	call   c000080c <strcpy>
c001a8f4:	58                   	pop    eax
c001a8f5:	5a                   	pop    edx
c001a8f6:	68 ca bb 02 c0       	push   0xc002bbca
c001a8fb:	56                   	push   esi
c001a8fc:	e8 4b 60 fe ff       	call   c000094c <strcat>
c001a901:	59                   	pop    ecx
c001a902:	5f                   	pop    edi
c001a903:	53                   	push   ebx
c001a904:	56                   	push   esi
c001a905:	e8 42 60 fe ff       	call   c000094c <strcat>
c001a90a:	58                   	pop    eax
c001a90b:	5a                   	pop    edx
c001a90c:	68 74 b8 02 c0       	push   0xc002b874
c001a911:	56                   	push   esi
c001a912:	e8 35 60 fe ff       	call   c000094c <strcat>
c001a917:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a91e:	e8 76 4c ff ff       	call   c000f599 <malloc>
c001a923:	83 c4 0c             	add    esp,0xc
c001a926:	89 c3                	mov    ebx,eax
c001a928:	ff 35 10 0f 03 c0    	push   DWORD PTR ds:0xc0030f10
c001a92e:	56                   	push   esi
c001a92f:	50                   	push   eax
c001a930:	e8 f9 82 ff ff       	call   c0012c2e <File::File(char const*, Process*)>
c001a935:	83 c4 10             	add    esp,0x10
c001a938:	85 db                	test   ebx,ebx
c001a93a:	74 7e                	je     c001a9ba <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a93c:	51                   	push   ecx
c001a93d:	51                   	push   ecx
c001a93e:	6a 01                	push   0x1
c001a940:	53                   	push   ebx
c001a941:	e8 4c 83 ff ff       	call   c0012c92 <File::open(FileOpenMode)>
c001a946:	83 c4 10             	add    esp,0x10
c001a949:	85 c0                	test   eax,eax
c001a94b:	74 08                	je     c001a955 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a94d:	83 ec 0c             	sub    esp,0xc
c001a950:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a952:	53                   	push   ebx
c001a953:	eb 5f                	jmp    c001a9b4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a955:	52                   	push   edx
c001a956:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a95a:	50                   	push   eax
c001a95b:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a95f:	50                   	push   eax
c001a960:	53                   	push   ebx
c001a961:	e8 d8 85 ff ff       	call   c0012f3e <File::stat(unsigned long long*, bool*)>
c001a966:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a96a:	83 c4 10             	add    esp,0x10
c001a96d:	89 c1                	mov    ecx,eax
c001a96f:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a973:	74 31                	je     c001a9a6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a975:	83 ec 0c             	sub    esp,0xc
c001a978:	50                   	push   eax
c001a979:	e8 1b 4c ff ff       	call   c000f599 <malloc>
c001a97e:	89 c6                	mov    esi,eax
c001a980:	58                   	pop    eax
c001a981:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a983:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a987:	52                   	push   edx
c001a988:	56                   	push   esi
c001a989:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a98d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a991:	53                   	push   ebx
c001a992:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a995:	83 c4 20             	add    esp,0x20
c001a998:	85 c0                	test   eax,eax
c001a99a:	75 0a                	jne    c001a9a6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a99c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a9a0:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a9a4:	74 18                	je     c001a9be <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a9a6:	83 ec 0c             	sub    esp,0xc
c001a9a9:	53                   	push   ebx
c001a9aa:	e8 41 83 ff ff       	call   c0012cf0 <File::close()>
c001a9af:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9b4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a9b7:	83 c4 10             	add    esp,0x10
c001a9ba:	31 c0                	xor    eax,eax
c001a9bc:	eb 3b                	jmp    c001a9f9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a9be:	83 ec 0c             	sub    esp,0xc
c001a9c1:	53                   	push   ebx
c001a9c2:	e8 29 83 ff ff       	call   c0012cf0 <File::close()>
c001a9c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9cc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a9cf:	83 c4 0c             	add    esp,0xc
c001a9d2:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a9d9:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a9e0:	56                   	push   esi
c001a9e1:	e8 70 fd ff ff       	call   c001a756 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a9e6:	89 34 24             	mov    DWORD PTR [esp],esi
c001a9e9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a9ed:	e8 b7 4b ff ff       	call   c000f5a9 <free>
c001a9f2:	83 c4 10             	add    esp,0x10
c001a9f5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a9f9:	81 c4 20 01 00 00    	add    esp,0x120
c001a9ff:	5b                   	pop    ebx
c001aa00:	5e                   	pop    esi
c001aa01:	5f                   	pop    edi
c001aa02:	c3                   	ret    

c001aa03 <Reg::getLine(char*, char*, char*)>:
c001aa03:	57                   	push   edi
c001aa04:	56                   	push   esi
c001aa05:	53                   	push   ebx
c001aa06:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa0a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aa0e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001aa12:	57                   	push   edi
c001aa13:	56                   	push   esi
c001aa14:	53                   	push   ebx
c001aa15:	68 79 b8 02 c0       	push   0xc002b879
c001aa1a:	e8 8f fe ff ff       	call   c001a8ae <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aa1f:	83 c4 10             	add    esp,0x10
c001aa22:	84 c0                	test   al,al
c001aa24:	75 10                	jne    c001aa36 <Reg::getLine(char*, char*, char*)+0x33>
c001aa26:	57                   	push   edi
c001aa27:	56                   	push   esi
c001aa28:	53                   	push   ebx
c001aa29:	68 9e b8 02 c0       	push   0xc002b89e
c001aa2e:	e8 7b fe ff ff       	call   c001a8ae <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aa33:	83 c4 10             	add    esp,0x10
c001aa36:	5b                   	pop    ebx
c001aa37:	5e                   	pop    esi
c001aa38:	5f                   	pop    edi
c001aa39:	c3                   	ret    

c001aa3a <Reg::readInt(char*, char*, int*)>:
c001aa3a:	55                   	push   ebp
c001aa3b:	57                   	push   edi
c001aa3c:	56                   	push   esi
c001aa3d:	53                   	push   ebx
c001aa3e:	81 ec f0 00 00 00    	sub    esp,0xf0
c001aa44:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001aa48:	57                   	push   edi
c001aa49:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aa50:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aa57:	e8 a7 ff ff ff       	call   c001aa03 <Reg::getLine(char*, char*, char*)>
c001aa5c:	83 c4 10             	add    esp,0x10
c001aa5f:	84 c0                	test   al,al
c001aa61:	0f 84 b3 00 00 00    	je     c001ab1a <Reg::readInt(char*, char*, int*)+0xe0>
c001aa67:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001aa6b:	80 fa 2b             	cmp    dl,0x2b
c001aa6e:	74 0c                	je     c001aa7c <Reg::readInt(char*, char*, int*)+0x42>
c001aa70:	80 fa 2d             	cmp    dl,0x2d
c001aa73:	75 0e                	jne    c001aa83 <Reg::readInt(char*, char*, int*)+0x49>
c001aa75:	ba 01 00 00 00       	mov    edx,0x1
c001aa7a:	eb 0b                	jmp    c001aa87 <Reg::readInt(char*, char*, int*)+0x4d>
c001aa7c:	ba 01 00 00 00       	mov    edx,0x1
c001aa81:	eb 02                	jmp    c001aa85 <Reg::readInt(char*, char*, int*)+0x4b>
c001aa83:	31 d2                	xor    edx,edx
c001aa85:	31 c0                	xor    eax,eax
c001aa87:	be 0a 00 00 00       	mov    esi,0xa
c001aa8c:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001aa91:	75 20                	jne    c001aab3 <Reg::readInt(char*, char*, int*)+0x79>
c001aa93:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001aa97:	80 f9 78             	cmp    cl,0x78
c001aa9a:	75 0a                	jne    c001aaa6 <Reg::readInt(char*, char*, int*)+0x6c>
c001aa9c:	83 c2 02             	add    edx,0x2
c001aa9f:	be 10 00 00 00       	mov    esi,0x10
c001aaa4:	eb 0d                	jmp    c001aab3 <Reg::readInt(char*, char*, int*)+0x79>
c001aaa6:	80 f9 62             	cmp    cl,0x62
c001aaa9:	75 08                	jne    c001aab3 <Reg::readInt(char*, char*, int*)+0x79>
c001aaab:	83 c2 02             	add    edx,0x2
c001aaae:	be 02 00 00 00       	mov    esi,0x2
c001aab3:	01 d7                	add    edi,edx
c001aab5:	31 d2                	xor    edx,edx
c001aab7:	8a 1f                	mov    bl,BYTE PTR [edi]
c001aab9:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001aabd:	80 fb 0d             	cmp    bl,0xd
c001aac0:	0f 94 c3             	sete   bl
c001aac3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001aac8:	0f 94 c1             	sete   cl
c001aacb:	08 cb                	or     bl,cl
c001aacd:	75 3a                	jne    c001ab09 <Reg::readInt(char*, char*, int*)+0xcf>
c001aacf:	0f af d6             	imul   edx,esi
c001aad2:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001aad7:	83 fe 10             	cmp    esi,0x10
c001aada:	75 26                	jne    c001ab02 <Reg::readInt(char*, char*, int*)+0xc8>
c001aadc:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001aae0:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001aae3:	89 e9                	mov    ecx,ebp
c001aae5:	80 f9 05             	cmp    cl,0x5
c001aae8:	77 06                	ja     c001aaf0 <Reg::readInt(char*, char*, int*)+0xb6>
c001aaea:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001aaee:	eb 16                	jmp    c001ab06 <Reg::readInt(char*, char*, int*)+0xcc>
c001aaf0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001aaf4:	83 e9 61             	sub    ecx,0x61
c001aaf7:	80 f9 05             	cmp    cl,0x5
c001aafa:	77 06                	ja     c001ab02 <Reg::readInt(char*, char*, int*)+0xc8>
c001aafc:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001ab00:	eb 04                	jmp    c001ab06 <Reg::readInt(char*, char*, int*)+0xcc>
c001ab02:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001ab06:	47                   	inc    edi
c001ab07:	eb ae                	jmp    c001aab7 <Reg::readInt(char*, char*, int*)+0x7d>
c001ab09:	84 c0                	test   al,al
c001ab0b:	74 02                	je     c001ab0f <Reg::readInt(char*, char*, int*)+0xd5>
c001ab0d:	f7 da                	neg    edx
c001ab0f:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001ab16:	89 10                	mov    DWORD PTR [eax],edx
c001ab18:	88 d8                	mov    al,bl
c001ab1a:	81 c4 ec 00 00 00    	add    esp,0xec
c001ab20:	5b                   	pop    ebx
c001ab21:	5e                   	pop    esi
c001ab22:	5f                   	pop    edi
c001ab23:	5d                   	pop    ebp
c001ab24:	c3                   	ret    

c001ab25 <Reg::readString(char*, char*, char*, int)>:
c001ab25:	57                   	push   edi
c001ab26:	56                   	push   esi
c001ab27:	53                   	push   ebx
c001ab28:	81 ec d4 00 00 00    	sub    esp,0xd4
c001ab2e:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001ab35:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001ab39:	57                   	push   edi
c001ab3a:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ab41:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ab48:	e8 b6 fe ff ff       	call   c001aa03 <Reg::getLine(char*, char*, char*)>
c001ab4d:	83 c4 10             	add    esp,0x10
c001ab50:	89 c6                	mov    esi,eax
c001ab52:	84 c0                	test   al,al
c001ab54:	74 44                	je     c001ab9a <Reg::readString(char*, char*, char*, int)+0x75>
c001ab56:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001ab5d:	31 c0                	xor    eax,eax
c001ab5f:	4a                   	dec    edx
c001ab60:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001ab63:	84 c9                	test   cl,cl
c001ab65:	74 0f                	je     c001ab76 <Reg::readString(char*, char*, char*, int)+0x51>
c001ab67:	39 c2                	cmp    edx,eax
c001ab69:	7e 0b                	jle    c001ab76 <Reg::readString(char*, char*, char*, int)+0x51>
c001ab6b:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001ab6e:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001ab73:	40                   	inc    eax
c001ab74:	eb ea                	jmp    c001ab60 <Reg::readString(char*, char*, char*, int)+0x3b>
c001ab76:	83 ec 0c             	sub    esp,0xc
c001ab79:	53                   	push   ebx
c001ab7a:	e8 ed 5b fe ff       	call   c000076c <strlen>
c001ab7f:	83 c4 10             	add    esp,0x10
c001ab82:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001ab87:	75 11                	jne    c001ab9a <Reg::readString(char*, char*, char*, int)+0x75>
c001ab89:	83 ec 0c             	sub    esp,0xc
c001ab8c:	53                   	push   ebx
c001ab8d:	e8 da 5b fe ff       	call   c000076c <strlen>
c001ab92:	83 c4 10             	add    esp,0x10
c001ab95:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001ab9a:	81 c4 d0 00 00 00    	add    esp,0xd0
c001aba0:	89 f0                	mov    eax,esi
c001aba2:	5b                   	pop    ebx
c001aba3:	5e                   	pop    esi
c001aba4:	5f                   	pop    edi
c001aba5:	c3                   	ret    

c001aba6 <Reg::readBool(char*, char*, bool*)>:
c001aba6:	83 ec 20             	sub    esp,0x20
c001aba9:	8d 44 24 10          	lea    eax,[esp+0x10]
c001abad:	50                   	push   eax
c001abae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abb2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abb6:	e8 7f fe ff ff       	call   c001aa3a <Reg::readInt(char*, char*, int*)>
c001abbb:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001abc0:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001abc4:	0f 95 02             	setne  BYTE PTR [edx]
c001abc7:	83 c4 2c             	add    esp,0x2c
c001abca:	c3                   	ret    

c001abcb <Reg::readBoolWithDefault(char*, char*, bool)>:
c001abcb:	53                   	push   ebx
c001abcc:	83 ec 1c             	sub    esp,0x1c
c001abcf:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001abd3:	8d 44 24 13          	lea    eax,[esp+0x13]
c001abd7:	50                   	push   eax
c001abd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abdc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abe0:	e8 c1 ff ff ff       	call   c001aba6 <Reg::readBool(char*, char*, bool*)>
c001abe5:	83 c4 10             	add    esp,0x10
c001abe8:	84 c0                	test   al,al
c001abea:	74 04                	je     c001abf0 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001abec:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001abf0:	88 d8                	mov    al,bl
c001abf2:	83 c4 18             	add    esp,0x18
c001abf5:	5b                   	pop    ebx
c001abf6:	c3                   	ret    

c001abf7 <Reg::readIntWithDefault(char*, char*, int)>:
c001abf7:	53                   	push   ebx
c001abf8:	83 ec 1c             	sub    esp,0x1c
c001abfb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001abff:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ac03:	50                   	push   eax
c001ac04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac0c:	e8 29 fe ff ff       	call   c001aa3a <Reg::readInt(char*, char*, int*)>
c001ac11:	83 c4 10             	add    esp,0x10
c001ac14:	84 c0                	test   al,al
c001ac16:	74 04                	je     c001ac1c <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001ac18:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ac1c:	89 d8                	mov    eax,ebx
c001ac1e:	83 c4 18             	add    esp,0x18
c001ac21:	5b                   	pop    ebx
c001ac22:	c3                   	ret    

c001ac23 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001ac23:	57                   	push   edi
c001ac24:	56                   	push   esi
c001ac25:	56                   	push   esi
c001ac26:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ac2a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ac2e:	56                   	push   esi
c001ac2f:	57                   	push   edi
c001ac30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac38:	e8 e8 fe ff ff       	call   c001ab25 <Reg::readString(char*, char*, char*, int)>
c001ac3d:	83 c4 10             	add    esp,0x10
c001ac40:	84 c0                	test   al,al
c001ac42:	75 1a                	jne    c001ac5e <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001ac44:	51                   	push   ecx
c001ac45:	56                   	push   esi
c001ac46:	6a 00                	push   0x0
c001ac48:	57                   	push   edi
c001ac49:	e8 02 5b fe ff       	call   c0000750 <memset>
c001ac4e:	8d 4e ff             	lea    ecx,[esi-0x1]
c001ac51:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ac55:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ac57:	83 c4 10             	add    esp,0x10
c001ac5a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ac5e:	89 f8                	mov    eax,edi
c001ac60:	5a                   	pop    edx
c001ac61:	5e                   	pop    esi
c001ac62:	5f                   	pop    edi
c001ac63:	c3                   	ret    

c001ac64 <Sys::eject(regs*)>:
c001ac64:	83 ec 0c             	sub    esp,0xc
c001ac67:	83 ca ff             	or     edx,0xffffffff
c001ac6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac6e:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001ac71:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ac76:	83 e9 41             	sub    ecx,0x41
c001ac79:	83 f9 19             	cmp    ecx,0x19
c001ac7c:	77 18                	ja     c001ac96 <Sys::eject(regs*)+0x32>
c001ac7e:	8b 0c 8d c0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2040]
c001ac85:	85 c9                	test   ecx,ecx
c001ac87:	74 0d                	je     c001ac96 <Sys::eject(regs*)+0x32>
c001ac89:	83 ec 0c             	sub    esp,0xc
c001ac8c:	51                   	push   ecx
c001ac8d:	e8 28 b3 ff ff       	call   c0015fba <LogicalDisk::eject()>
c001ac92:	83 c4 10             	add    esp,0x10
c001ac95:	99                   	cdq    
c001ac96:	83 c4 0c             	add    esp,0xc
c001ac99:	c3                   	ret    

c001ac9a <Sys::exit(regs*)>:
c001ac9a:	83 ec 18             	sub    esp,0x18
c001ac9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aca1:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001aca4:	e8 c2 35 00 00       	call   c001e26b <terminateTask(int)>
c001aca9:	83 c8 ff             	or     eax,0xffffffff
c001acac:	83 c4 1c             	add    esp,0x1c
c001acaf:	89 c2                	mov    edx,eax
c001acb1:	c3                   	ret    

c001acb2 <Sys::getCwd(regs*)>:
c001acb2:	83 ec 10             	sub    esp,0x10
c001acb5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acb9:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001acbc:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001acbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001acc4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001acc7:	e8 64 7d ff ff       	call   c0012a30 <Fs::getcwd(Process*, char*, int)>
c001accc:	83 c4 1c             	add    esp,0x1c
c001accf:	99                   	cdq    
c001acd0:	c3                   	ret    

c001acd1 <Sys::getPID(regs*)>:
c001acd1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001acd6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001acd9:	8b 00                	mov    eax,DWORD PTR [eax]
c001acdb:	99                   	cdq    
c001acdc:	c3                   	ret    

c001acdd <Sys::getRAMData(regs*)>:
c001acdd:	8b 0d 14 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da14
c001ace3:	6b 05 10 da 02 c0 64 	imul   eax,DWORD PTR ds:0xc002da10,0x64
c001acea:	99                   	cdq    
c001aceb:	f7 f9                	idiv   ecx
c001aced:	c1 e0 18             	shl    eax,0x18
c001acf0:	09 c8                	or     eax,ecx
c001acf2:	99                   	cdq    
c001acf3:	c3                   	ret    

c001acf4 <Sys::getVGAPtr(regs*)>:
c001acf4:	55                   	push   ebp
c001acf5:	57                   	push   edi
c001acf6:	56                   	push   esi
c001acf7:	53                   	push   ebx
c001acf8:	83 ec 18             	sub    esp,0x18
c001acfb:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001acff:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ad02:	e8 b0 30 00 00       	call   c001ddb7 <Thr::processFromPID(int)>
c001ad07:	83 c4 10             	add    esp,0x10
c001ad0a:	89 c1                	mov    ecx,eax
c001ad0c:	b8 01 00 00 00       	mov    eax,0x1
c001ad11:	85 c9                	test   ecx,ecx
c001ad13:	74 59                	je     c001ad6e <Sys::getVGAPtr(regs*)+0x7a>
c001ad15:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001ad1b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001ad1f:	74 0c                	je     c001ad2d <Sys::getVGAPtr(regs*)+0x39>
c001ad21:	83 ec 0c             	sub    esp,0xc
c001ad24:	53                   	push   ebx
c001ad25:	e8 29 56 ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c001ad2a:	83 c4 10             	add    esp,0x10
c001ad2d:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001ad30:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ad33:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001ad38:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad3a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001ad3d:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ad40:	81 c3 82 00 00 00    	add    ebx,0x82
c001ad46:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001ad4c:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ad4f:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001ad52:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001ad58:	50                   	push   eax
c001ad59:	50                   	push   eax
c001ad5a:	53                   	push   ebx
c001ad5b:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ad5e:	05 a8 0f 00 00       	add    eax,0xfa8
c001ad63:	50                   	push   eax
c001ad64:	e8 a3 5a fe ff       	call   c000080c <strcpy>
c001ad69:	83 c4 10             	add    esp,0x10
c001ad6c:	31 c0                	xor    eax,eax
c001ad6e:	83 c4 0c             	add    esp,0xc
c001ad71:	31 d2                	xor    edx,edx
c001ad73:	5b                   	pop    ebx
c001ad74:	5e                   	pop    esi
c001ad75:	5f                   	pop    edi
c001ad76:	5d                   	pop    ebp
c001ad77:	c3                   	ret    

c001ad78 <Sys::loadDLL(regs*)>:
c001ad78:	56                   	push   esi
c001ad79:	53                   	push   ebx
c001ad7a:	31 d2                	xor    edx,edx
c001ad7c:	51                   	push   ecx
c001ad7d:	b8 01 00 00 00       	mov    eax,0x1
c001ad82:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ad86:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001ad8a:	0f 84 8c 00 00 00    	je     c001ae1c <Sys::loadDLL(regs*)+0xa4>
c001ad90:	83 ec 0c             	sub    esp,0xc
c001ad93:	68 14 01 00 00       	push   0x114
c001ad98:	e8 fc 47 ff ff       	call   c000f599 <malloc>
c001ad9d:	83 c4 0c             	add    esp,0xc
c001ada0:	89 c3                	mov    ebx,eax
c001ada2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ada7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001adaa:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001adad:	53                   	push   ebx
c001adae:	e8 7b 7e ff ff       	call   c0012c2e <File::File(char const*, Process*)>
c001adb3:	83 c4 10             	add    esp,0x10
c001adb6:	31 d2                	xor    edx,edx
c001adb8:	b8 02 00 00 00       	mov    eax,0x2
c001adbd:	85 db                	test   ebx,ebx
c001adbf:	74 5b                	je     c001ae1c <Sys::loadDLL(regs*)+0xa4>
c001adc1:	83 ec 0c             	sub    esp,0xc
c001adc4:	53                   	push   ebx
c001adc5:	e8 36 81 ff ff       	call   c0012f00 <File::exists()>
c001adca:	83 c4 10             	add    esp,0x10
c001adcd:	84 c0                	test   al,al
c001adcf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001add1:	75 11                	jne    c001ade4 <Sys::loadDLL(regs*)+0x6c>
c001add3:	83 ec 0c             	sub    esp,0xc
c001add6:	53                   	push   ebx
c001add7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001adda:	83 c4 10             	add    esp,0x10
c001addd:	b8 03 00 00 00       	mov    eax,0x3
c001ade2:	eb 36                	jmp    c001ae1a <Sys::loadDLL(regs*)+0xa2>
c001ade4:	83 ec 0c             	sub    esp,0xc
c001ade7:	53                   	push   ebx
c001ade8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001adeb:	58                   	pop    eax
c001adec:	5a                   	pop    edx
c001aded:	6a 00                	push   0x0
c001adef:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001adf2:	e8 0e 22 00 00       	call   c001d005 <Thr::loadDLL(char const*, bool)>
c001adf7:	83 c4 10             	add    esp,0x10
c001adfa:	89 c1                	mov    ecx,eax
c001adfc:	31 d2                	xor    edx,edx
c001adfe:	b8 04 00 00 00       	mov    eax,0x4
c001ae03:	85 c9                	test   ecx,ecx
c001ae05:	74 15                	je     c001ae1c <Sys::loadDLL(regs*)+0xa4>
c001ae07:	53                   	push   ebx
c001ae08:	53                   	push   ebx
c001ae09:	ff 35 c8 d9 02 c0    	push   DWORD PTR ds:0xc002d9c8
c001ae0f:	51                   	push   ecx
c001ae10:	e8 21 24 00 00       	call   c001d236 <Thr::executeDLL(unsigned long, void*)>
c001ae15:	83 c4 10             	add    esp,0x10
c001ae18:	31 c0                	xor    eax,eax
c001ae1a:	31 d2                	xor    edx,edx
c001ae1c:	59                   	pop    ecx
c001ae1d:	5b                   	pop    ebx
c001ae1e:	5e                   	pop    esi
c001ae1f:	c3                   	ret    

c001ae20 <Sys::read(regs*)>:
c001ae20:	57                   	push   edi
c001ae21:	56                   	push   esi
c001ae22:	53                   	push   ebx
c001ae23:	83 ec 10             	sub    esp,0x10
c001ae26:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ae2a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ae2d:	83 f8 02             	cmp    eax,0x2
c001ae30:	77 10                	ja     c001ae42 <Sys::read(regs*)+0x22>
c001ae32:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae37:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae3a:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001ae40:	eb 0e                	jmp    c001ae50 <Sys::read(regs*)+0x30>
c001ae42:	83 ec 0c             	sub    esp,0xc
c001ae45:	50                   	push   eax
c001ae46:	e8 7e 62 ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001ae4b:	83 c4 10             	add    esp,0x10
c001ae4e:	89 c1                	mov    ecx,eax
c001ae50:	83 c8 ff             	or     eax,0xffffffff
c001ae53:	85 c9                	test   ecx,ecx
c001ae55:	89 c2                	mov    edx,eax
c001ae57:	74 28                	je     c001ae81 <Sys::read(regs*)+0x61>
c001ae59:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ae61:	31 ff                	xor    edi,edi
c001ae63:	83 ec 0c             	sub    esp,0xc
c001ae66:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae68:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ae6c:	52                   	push   edx
c001ae6d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ae70:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ae73:	57                   	push   edi
c001ae74:	56                   	push   esi
c001ae75:	51                   	push   ecx
c001ae76:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae79:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae7d:	83 c4 20             	add    esp,0x20
c001ae80:	99                   	cdq    
c001ae81:	83 c4 10             	add    esp,0x10
c001ae84:	5b                   	pop    ebx
c001ae85:	5e                   	pop    esi
c001ae86:	5f                   	pop    edi
c001ae87:	c3                   	ret    

c001ae88 <Sys::sbrk(regs*)>:
c001ae88:	56                   	push   esi
c001ae89:	53                   	push   ebx
c001ae8a:	50                   	push   eax
c001ae8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae94:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae97:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001ae9a:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001aea0:	85 db                	test   ebx,ebx
c001aea2:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001aea5:	74 02                	je     c001aea9 <Sys::sbrk(regs*)+0x21>
c001aea7:	79 06                	jns    c001aeaf <Sys::sbrk(regs*)+0x27>
c001aea9:	89 f0                	mov    eax,esi
c001aeab:	31 d2                	xor    edx,edx
c001aead:	eb 2a                	jmp    c001aed9 <Sys::sbrk(regs*)+0x51>
c001aeaf:	83 c8 ff             	or     eax,0xffffffff
c001aeb2:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001aeb8:	89 c2                	mov    edx,eax
c001aeba:	77 1d                	ja     c001aed9 <Sys::sbrk(regs*)+0x51>
c001aebc:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001aec2:	50                   	push   eax
c001aec3:	c1 ea 0c             	shr    edx,0xc
c001aec6:	68 07 0c 00 00       	push   0xc07
c001aecb:	52                   	push   edx
c001aecc:	51                   	push   ecx
c001aecd:	e8 0c 6c ff ff       	call   c0011ade <VAS::allocatePages(int, int)>
c001aed2:	89 f0                	mov    eax,esi
c001aed4:	31 d2                	xor    edx,edx
c001aed6:	83 c4 10             	add    esp,0x10
c001aed9:	59                   	pop    ecx
c001aeda:	5b                   	pop    ebx
c001aedb:	5e                   	pop    esi
c001aedc:	c3                   	ret    

c001aedd <Sys::setCwd(regs*)>:
c001aedd:	83 ec 14             	sub    esp,0x14
c001aee0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aee4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001aee7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aeec:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aeef:	e8 ab 80 ff ff       	call   c0012f9f <Fs::setcwd(Process*, char*)>
c001aef4:	83 c4 1c             	add    esp,0x1c
c001aef7:	99                   	cdq    
c001aef8:	c3                   	ret    

c001aef9 <Sys::setTime(regs*)>:
c001aef9:	55                   	push   ebp
c001aefa:	31 c9                	xor    ecx,ecx
c001aefc:	57                   	push   edi
c001aefd:	bd 0c 00 00 00       	mov    ebp,0xc
c001af02:	56                   	push   esi
c001af03:	53                   	push   ebx
c001af04:	31 db                	xor    ebx,ebx
c001af06:	83 ec 10             	sub    esp,0x10
c001af09:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001af0d:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001af10:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001af13:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001af16:	89 c2                	mov    edx,eax
c001af18:	66 81 ef 6c 07       	sub    di,0x76c
c001af1d:	83 e2 1f             	and    edx,0x1f
c001af20:	c1 e7 10             	shl    edi,0x10
c001af23:	42                   	inc    edx
c001af24:	c1 e8 05             	shr    eax,0x5
c001af27:	88 d1                	mov    cl,dl
c001af29:	31 d2                	xor    edx,edx
c001af2b:	f7 f5                	div    ebp
c001af2d:	89 dd                	mov    ebp,ebx
c001af2f:	88 d5                	mov    ch,dl
c001af31:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001af37:	0f b7 c1             	movzx  eax,cx
c001af3a:	31 d2                	xor    edx,edx
c001af3c:	09 f8                	or     eax,edi
c001af3e:	bf 3c 00 00 00       	mov    edi,0x3c
c001af43:	89 c1                	mov    ecx,eax
c001af45:	89 f0                	mov    eax,esi
c001af47:	f7 f7                	div    edi
c001af49:	c1 e2 10             	shl    edx,0x10
c001af4c:	09 d5                	or     ebp,edx
c001af4e:	31 d2                	xor    edx,edx
c001af50:	89 eb                	mov    ebx,ebp
c001af52:	f7 f7                	div    edi
c001af54:	bf 10 0e 00 00       	mov    edi,0xe10
c001af59:	88 d7                	mov    bh,dl
c001af5b:	89 f0                	mov    eax,esi
c001af5d:	31 d2                	xor    edx,edx
c001af5f:	f7 f7                	div    edi
c001af61:	bf 18 00 00 00       	mov    edi,0x18
c001af66:	31 d2                	xor    edx,edx
c001af68:	f7 f7                	div    edi
c001af6a:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c001af6f:	88 d3                	mov    bl,dl
c001af71:	53                   	push   ebx
c001af72:	51                   	push   ecx
c001af73:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001af79:	e8 6a 88 ff ff       	call   c00137e8 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001af7e:	83 c4 1c             	add    esp,0x1c
c001af81:	83 f0 01             	xor    eax,0x1
c001af84:	5b                   	pop    ebx
c001af85:	0f b6 c0             	movzx  eax,al
c001af88:	5e                   	pop    esi
c001af89:	31 d2                	xor    edx,edx
c001af8b:	5f                   	pop    edi
c001af8c:	5d                   	pop    ebp
c001af8d:	c3                   	ret    

c001af8e <Sys::timezone(regs*)>:
c001af8e:	53                   	push   ebx
c001af8f:	83 ec 08             	sub    esp,0x8
c001af92:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af96:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001af9a:	75 17                	jne    c001afb3 <Sys::timezone(regs*)+0x25>
c001af9c:	83 ec 0c             	sub    esp,0xc
c001af9f:	68 b9 b8 02 c0       	push   0xc002b8b9
c001afa4:	e8 26 77 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c001afa9:	83 c8 ff             	or     eax,0xffffffff
c001afac:	83 c4 10             	add    esp,0x10
c001afaf:	89 c2                	mov    edx,eax
c001afb1:	eb 20                	jmp    c001afd3 <Sys::timezone(regs*)+0x45>
c001afb3:	83 ec 0c             	sub    esp,0xc
c001afb6:	68 ce b8 02 c0       	push   0xc002b8ce
c001afbb:	e8 0f 77 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c001afc0:	58                   	pop    eax
c001afc1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001afc4:	e8 81 85 ff ff       	call   c001354a <User::loadClockSettings(int)>
c001afc9:	83 c4 10             	add    esp,0x10
c001afcc:	b8 01 00 00 00       	mov    eax,0x1
c001afd1:	31 d2                	xor    edx,edx
c001afd3:	83 c4 08             	add    esp,0x8
c001afd6:	5b                   	pop    ebx
c001afd7:	c3                   	ret    

c001afd8 <Sys::write(regs*)>:
c001afd8:	57                   	push   edi
c001afd9:	56                   	push   esi
c001afda:	53                   	push   ebx
c001afdb:	83 ec 10             	sub    esp,0x10
c001afde:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001afe2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001afe5:	83 f8 02             	cmp    eax,0x2
c001afe8:	77 10                	ja     c001affa <Sys::write(regs*)+0x22>
c001afea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001afef:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aff2:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001aff8:	eb 0e                	jmp    c001b008 <Sys::write(regs*)+0x30>
c001affa:	83 ec 0c             	sub    esp,0xc
c001affd:	50                   	push   eax
c001affe:	e8 c6 60 ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b003:	83 c4 10             	add    esp,0x10
c001b006:	89 c1                	mov    ecx,eax
c001b008:	83 c8 ff             	or     eax,0xffffffff
c001b00b:	85 c9                	test   ecx,ecx
c001b00d:	89 c2                	mov    edx,eax
c001b00f:	74 28                	je     c001b039 <Sys::write(regs*)+0x61>
c001b011:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b019:	31 ff                	xor    edi,edi
c001b01b:	83 ec 0c             	sub    esp,0xc
c001b01e:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b020:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b024:	52                   	push   edx
c001b025:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b028:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b02b:	57                   	push   edi
c001b02c:	56                   	push   esi
c001b02d:	51                   	push   ecx
c001b02e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b031:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b035:	83 c4 20             	add    esp,0x20
c001b038:	99                   	cdq    
c001b039:	83 c4 10             	add    esp,0x10
c001b03c:	5b                   	pop    ebx
c001b03d:	5e                   	pop    esi
c001b03e:	5f                   	pop    edi
c001b03f:	c3                   	ret    

c001b040 <Sys::wsbe(regs*)>:
c001b040:	57                   	push   edi
c001b041:	b9 0b 00 00 00       	mov    ecx,0xb
c001b046:	56                   	push   esi
c001b047:	be 0d b9 02 c0       	mov    esi,0xc002b90d
c001b04c:	53                   	push   ebx
c001b04d:	83 ec 30             	sub    esp,0x30
c001b050:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b054:	fc                   	cld    
c001b055:	83 ec 0c             	sub    esp,0xc
c001b058:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b05a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b05e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b063:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b066:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b06c:	8b 06                	mov    eax,DWORD PTR [esi]
c001b06e:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b071:	57                   	push   edi
c001b072:	e8 f5 56 fe ff       	call   c000076c <strlen>
c001b077:	5a                   	pop    edx
c001b078:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b07c:	52                   	push   edx
c001b07d:	31 d2                	xor    edx,edx
c001b07f:	57                   	push   edi
c001b080:	52                   	push   edx
c001b081:	50                   	push   eax
c001b082:	56                   	push   esi
c001b083:	ff d3                	call   ebx
c001b085:	83 c4 14             	add    esp,0x14
c001b088:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b08c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b08f:	e8 d7 31 00 00       	call   c001e26b <terminateTask(int)>
c001b094:	83 c4 40             	add    esp,0x40
c001b097:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b09c:	5b                   	pop    ebx
c001b09d:	31 d2                	xor    edx,edx
c001b09f:	5e                   	pop    esi
c001b0a0:	5f                   	pop    edi
c001b0a1:	c3                   	ret    

c001b0a2 <Sys::yield(regs*)>:
c001b0a2:	57                   	push   edi
c001b0a3:	56                   	push   esi
c001b0a4:	53                   	push   ebx
c001b0a5:	fa                   	cli    
c001b0a6:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001b0ac:	e8 1a 29 00 00       	call   c001d9cb <schedule()>
c001b0b1:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001b0b6:	48                   	dec    eax
c001b0b7:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001b0bc:	75 01                	jne    c001b0bf <Sys::yield(regs*)+0x1d>
c001b0be:	fb                   	sti    
c001b0bf:	8b 35 30 e0 02 c0    	mov    esi,DWORD PTR ds:0xc002e030
c001b0c5:	8b 3d 34 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e034
c001b0cb:	89 f0                	mov    eax,esi
c001b0cd:	89 fb                	mov    ebx,edi
c001b0cf:	89 f1                	mov    ecx,esi
c001b0d1:	c1 e0 07             	shl    eax,0x7
c001b0d4:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b0d8:	25 80 30 0f 00       	and    eax,0xf3080
c001b0dd:	c1 eb 17             	shr    ebx,0x17
c001b0e0:	31 c8                	xor    eax,ecx
c001b0e2:	89 da                	mov    edx,ebx
c001b0e4:	5b                   	pop    ebx
c001b0e5:	5e                   	pop    esi
c001b0e6:	5f                   	pop    edi
c001b0e7:	c3                   	ret    

c001b0e8 <sysCallSeekDir(regs*)>:
c001b0e8:	31 c0                	xor    eax,eax
c001b0ea:	31 d2                	xor    edx,edx
c001b0ec:	c3                   	ret    

c001b0ed <sysCallTellDir(regs*)>:
c001b0ed:	31 c0                	xor    eax,eax
c001b0ef:	31 d2                	xor    edx,edx
c001b0f1:	c3                   	ret    

c001b0f2 <sysCallVerify(regs*)>:
c001b0f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0f6:	31 d2                	xor    edx,edx
c001b0f8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b0fb:	c3                   	ret    

c001b0fc <sysCallGetArgc(regs*)>:
c001b0fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b101:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b104:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b10a:	99                   	cdq    
c001b10b:	c3                   	ret    

c001b10c <sysFormatDisk(regs*)>:
c001b10c:	56                   	push   esi
c001b10d:	53                   	push   ebx
c001b10e:	53                   	push   ebx
c001b10f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b113:	8b 1d 34 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db34
c001b119:	eb 25                	jmp    c001b140 <sysFormatDisk(regs*)+0x34>
c001b11b:	83 ec 0c             	sub    esp,0xc
c001b11e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b121:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b123:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b126:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b129:	50                   	push   eax
c001b12a:	ff 34 85 c0 df 02 c0 	push   DWORD PTR [eax*4-0x3ffd2040]
c001b131:	53                   	push   ebx
c001b132:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b135:	83 c4 20             	add    esp,0x20
c001b138:	83 f8 08             	cmp    eax,0x8
c001b13b:	75 12                	jne    c001b14f <sysFormatDisk(regs*)+0x43>
c001b13d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b140:	85 db                	test   ebx,ebx
c001b142:	75 d7                	jne    c001b11b <sysFormatDisk(regs*)+0xf>
c001b144:	59                   	pop    ecx
c001b145:	b8 03 00 00 00       	mov    eax,0x3
c001b14a:	31 d2                	xor    edx,edx
c001b14c:	5b                   	pop    ebx
c001b14d:	5e                   	pop    esi
c001b14e:	c3                   	ret    
c001b14f:	85 c0                	test   eax,eax
c001b151:	74 1b                	je     c001b16e <sysFormatDisk(regs*)+0x62>
c001b153:	83 f8 09             	cmp    eax,0x9
c001b156:	74 0b                	je     c001b163 <sysFormatDisk(regs*)+0x57>
c001b158:	59                   	pop    ecx
c001b159:	b8 02 00 00 00       	mov    eax,0x2
c001b15e:	31 d2                	xor    edx,edx
c001b160:	5b                   	pop    ebx
c001b161:	5e                   	pop    esi
c001b162:	c3                   	ret    
c001b163:	59                   	pop    ecx
c001b164:	b8 01 00 00 00       	mov    eax,0x1
c001b169:	31 d2                	xor    edx,edx
c001b16b:	5b                   	pop    ebx
c001b16c:	5e                   	pop    esi
c001b16d:	c3                   	ret    
c001b16e:	59                   	pop    ecx
c001b16f:	31 c0                	xor    eax,eax
c001b171:	31 d2                	xor    edx,edx
c001b173:	5b                   	pop    ebx
c001b174:	5e                   	pop    esi
c001b175:	c3                   	ret    

c001b176 <sysSetDiskVolumeLabel(regs*)>:
c001b176:	56                   	push   esi
c001b177:	53                   	push   ebx
c001b178:	53                   	push   ebx
c001b179:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b17d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b180:	83 f8 19             	cmp    eax,0x19
c001b183:	77 29                	ja     c001b1ae <sysSetDiskVolumeLabel(regs*)+0x38>
c001b185:	8b 0c 85 c0 df 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2040]
c001b18c:	85 c9                	test   ecx,ecx
c001b18e:	74 1e                	je     c001b1ae <sysSetDiskVolumeLabel(regs*)+0x38>
c001b190:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b193:	85 d2                	test   edx,edx
c001b195:	74 17                	je     c001b1ae <sysSetDiskVolumeLabel(regs*)+0x38>
c001b197:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b19d:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b19f:	52                   	push   edx
c001b1a0:	50                   	push   eax
c001b1a1:	51                   	push   ecx
c001b1a2:	53                   	push   ebx
c001b1a3:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b1a6:	83 c4 10             	add    esp,0x10
c001b1a9:	99                   	cdq    
c001b1aa:	59                   	pop    ecx
c001b1ab:	5b                   	pop    ebx
c001b1ac:	5e                   	pop    esi
c001b1ad:	c3                   	ret    
c001b1ae:	59                   	pop    ecx
c001b1af:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b1b4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b1b9:	5b                   	pop    ebx
c001b1ba:	5e                   	pop    esi
c001b1bb:	c3                   	ret    

c001b1bc <sysGetDiskVolumeLabel(regs*)>:
c001b1bc:	57                   	push   edi
c001b1bd:	56                   	push   esi
c001b1be:	53                   	push   ebx
c001b1bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1c3:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b1c6:	83 fa 19             	cmp    edx,0x19
c001b1c9:	77 34                	ja     c001b1ff <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1cb:	8b 0c 95 c0 df 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd2040]
c001b1d2:	85 c9                	test   ecx,ecx
c001b1d4:	74 29                	je     c001b1ff <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1d6:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b1d9:	85 db                	test   ebx,ebx
c001b1db:	74 22                	je     c001b1ff <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1dd:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b1e0:	85 c0                	test   eax,eax
c001b1e2:	74 1b                	je     c001b1ff <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1e4:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b1ea:	83 ec 0c             	sub    esp,0xc
c001b1ed:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b1ef:	50                   	push   eax
c001b1f0:	53                   	push   ebx
c001b1f1:	52                   	push   edx
c001b1f2:	51                   	push   ecx
c001b1f3:	56                   	push   esi
c001b1f4:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b1f7:	83 c4 20             	add    esp,0x20
c001b1fa:	99                   	cdq    
c001b1fb:	5b                   	pop    ebx
c001b1fc:	5e                   	pop    esi
c001b1fd:	5f                   	pop    edi
c001b1fe:	c3                   	ret    
c001b1ff:	5b                   	pop    ebx
c001b200:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b205:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b20a:	5e                   	pop    esi
c001b20b:	5f                   	pop    edi
c001b20c:	c3                   	ret    

c001b20d <sysShutdown(regs*)>:
c001b20d:	83 ec 0c             	sub    esp,0xc
c001b210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b214:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b217:	85 c0                	test   eax,eax
c001b219:	74 18                	je     c001b233 <sysShutdown(regs*)+0x26>
c001b21b:	83 f8 01             	cmp    eax,0x1
c001b21e:	74 38                	je     c001b258 <sysShutdown(regs*)+0x4b>
c001b220:	83 f8 02             	cmp    eax,0x2
c001b223:	74 24                	je     c001b249 <sysShutdown(regs*)+0x3c>
c001b225:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b22a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b22f:	83 c4 0c             	add    esp,0xc
c001b232:	c3                   	ret    
c001b233:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c001b238:	8b 10                	mov    edx,DWORD PTR [eax]
c001b23a:	6a 00                	push   0x0
c001b23c:	6a 00                	push   0x0
c001b23e:	6a 00                	push   0x0
c001b240:	50                   	push   eax
c001b241:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b244:	83 c4 10             	add    esp,0x10
c001b247:	eb dc                	jmp    c001b225 <sysShutdown(regs*)+0x18>
c001b249:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c001b24e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b250:	6a 00                	push   0x0
c001b252:	6a 00                	push   0x0
c001b254:	6a 01                	push   0x1
c001b256:	eb e8                	jmp    c001b240 <sysShutdown(regs*)+0x33>
c001b258:	a1 60 00 03 c0       	mov    eax,ds:0xc0030060
c001b25d:	85 c0                	test   eax,eax
c001b25f:	74 02                	je     c001b263 <sysShutdown(regs*)+0x56>
c001b261:	ff d0                	call   eax
c001b263:	31 c0                	xor    eax,eax
c001b265:	31 d2                	xor    edx,edx
c001b267:	83 c4 0c             	add    esp,0xc
c001b26a:	c3                   	ret    

c001b26b <sysCallRealpath(regs*)>:
c001b26b:	83 ec 0c             	sub    esp,0xc
c001b26e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b272:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b275:	85 d2                	test   edx,edx
c001b277:	74 07                	je     c001b280 <sysCallRealpath(regs*)+0x15>
c001b279:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b27c:	85 c0                	test   eax,eax
c001b27e:	75 0b                	jne    c001b28b <sysCallRealpath(regs*)+0x20>
c001b280:	b8 01 00 00 00       	mov    eax,0x1
c001b285:	31 d2                	xor    edx,edx
c001b287:	83 c4 0c             	add    esp,0xc
c001b28a:	c3                   	ret    
c001b28b:	51                   	push   ecx
c001b28c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b292:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b295:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b29b:	51                   	push   ecx
c001b29c:	52                   	push   edx
c001b29d:	50                   	push   eax
c001b29e:	e8 e1 77 ff ff       	call   c0012a84 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b2a3:	83 c4 10             	add    esp,0x10
c001b2a6:	31 c0                	xor    eax,eax
c001b2a8:	31 d2                	xor    edx,edx
c001b2aa:	83 c4 0c             	add    esp,0xc
c001b2ad:	c3                   	ret    

c001b2ae <sysCallReadDir(regs*)>:
c001b2ae:	53                   	push   ebx
c001b2af:	83 ec 18             	sub    esp,0x18
c001b2b2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b2b6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b2b9:	83 f8 02             	cmp    eax,0x2
c001b2bc:	76 60                	jbe    c001b31e <sysCallReadDir(regs*)+0x70>
c001b2be:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b2c5:	77 48                	ja     c001b30f <sysCallReadDir(regs*)+0x61>
c001b2c7:	83 ec 0c             	sub    esp,0xc
c001b2ca:	50                   	push   eax
c001b2cb:	e8 f9 5d ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b2d0:	83 c4 10             	add    esp,0x10
c001b2d3:	85 c0                	test   eax,eax
c001b2d5:	74 38                	je     c001b30f <sysCallReadDir(regs*)+0x61>
c001b2d7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b2df:	83 ec 0c             	sub    esp,0xc
c001b2e2:	8b 10                	mov    edx,DWORD PTR [eax]
c001b2e4:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b2e8:	51                   	push   ecx
c001b2e9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b2ec:	6a 00                	push   0x0
c001b2ee:	68 10 01 00 00       	push   0x110
c001b2f3:	50                   	push   eax
c001b2f4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b2f7:	83 c4 20             	add    esp,0x20
c001b2fa:	85 c0                	test   eax,eax
c001b2fc:	74 29                	je     c001b327 <sysCallReadDir(regs*)+0x79>
c001b2fe:	83 f8 07             	cmp    eax,0x7
c001b301:	74 1b                	je     c001b31e <sysCallReadDir(regs*)+0x70>
c001b303:	b8 02 00 00 00       	mov    eax,0x2
c001b308:	31 d2                	xor    edx,edx
c001b30a:	83 c4 18             	add    esp,0x18
c001b30d:	5b                   	pop    ebx
c001b30e:	c3                   	ret    
c001b30f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b314:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b319:	83 c4 18             	add    esp,0x18
c001b31c:	5b                   	pop    ebx
c001b31d:	c3                   	ret    
c001b31e:	b8 01 00 00 00       	mov    eax,0x1
c001b323:	31 d2                	xor    edx,edx
c001b325:	eb e3                	jmp    c001b30a <sysCallReadDir(regs*)+0x5c>
c001b327:	31 c0                	xor    eax,eax
c001b329:	31 d2                	xor    edx,edx
c001b32b:	eb dd                	jmp    c001b30a <sysCallReadDir(regs*)+0x5c>

c001b32d <sysCallIsATTY(regs*)>:
c001b32d:	83 ec 0c             	sub    esp,0xc
c001b330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b334:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b337:	83 f8 02             	cmp    eax,0x2
c001b33a:	76 07                	jbe    c001b343 <sysCallIsATTY(regs*)+0x16>
c001b33c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b341:	75 26                	jne    c001b369 <sysCallIsATTY(regs*)+0x3c>
c001b343:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b348:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b34b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b351:	85 c0                	test   eax,eax
c001b353:	74 24                	je     c001b379 <sysCallIsATTY(regs*)+0x4c>
c001b355:	83 ec 0c             	sub    esp,0xc
c001b358:	8b 10                	mov    edx,DWORD PTR [eax]
c001b35a:	50                   	push   eax
c001b35b:	ff 12                	call   DWORD PTR [edx]
c001b35d:	31 d2                	xor    edx,edx
c001b35f:	0f b6 c0             	movzx  eax,al
c001b362:	83 c4 10             	add    esp,0x10
c001b365:	83 c4 0c             	add    esp,0xc
c001b368:	c3                   	ret    
c001b369:	83 ec 0c             	sub    esp,0xc
c001b36c:	50                   	push   eax
c001b36d:	e8 57 5d ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b372:	83 c4 10             	add    esp,0x10
c001b375:	85 c0                	test   eax,eax
c001b377:	75 dc                	jne    c001b355 <sysCallIsATTY(regs*)+0x28>
c001b379:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b37e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b383:	83 c4 0c             	add    esp,0xc
c001b386:	c3                   	ret    

c001b387 <sysCallSeek(regs*)>:
c001b387:	53                   	push   ebx
c001b388:	83 ec 08             	sub    esp,0x8
c001b38b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b38f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b392:	8d 50 fd             	lea    edx,[eax-0x3]
c001b395:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b39b:	77 32                	ja     c001b3cf <sysCallSeek(regs*)+0x48>
c001b39d:	83 ec 0c             	sub    esp,0xc
c001b3a0:	50                   	push   eax
c001b3a1:	e8 23 5d ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b3a6:	83 c4 0c             	add    esp,0xc
c001b3a9:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b3ac:	31 db                	xor    ebx,ebx
c001b3ae:	53                   	push   ebx
c001b3af:	51                   	push   ecx
c001b3b0:	50                   	push   eax
c001b3b1:	e8 9a 79 ff ff       	call   c0012d50 <File::seek(unsigned long long)>
c001b3b6:	83 c4 10             	add    esp,0x10
c001b3b9:	85 c0                	test   eax,eax
c001b3bb:	0f 95 c0             	setne  al
c001b3be:	31 d2                	xor    edx,edx
c001b3c0:	0f b6 c0             	movzx  eax,al
c001b3c3:	f7 d8                	neg    eax
c001b3c5:	83 d2 00             	adc    edx,0x0
c001b3c8:	83 c4 08             	add    esp,0x8
c001b3cb:	f7 da                	neg    edx
c001b3cd:	5b                   	pop    ebx
c001b3ce:	c3                   	ret    
c001b3cf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3d4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3d9:	83 c4 08             	add    esp,0x8
c001b3dc:	5b                   	pop    ebx
c001b3dd:	c3                   	ret    

c001b3de <sysCallTell(regs*)>:
c001b3de:	53                   	push   ebx
c001b3df:	83 ec 08             	sub    esp,0x8
c001b3e2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b3e6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3e9:	83 f8 02             	cmp    eax,0x2
c001b3ec:	76 4d                	jbe    c001b43b <sysCallTell(regs*)+0x5d>
c001b3ee:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b3f3:	76 19                	jbe    c001b40e <sysCallTell(regs*)+0x30>
c001b3f5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b3f8:	31 d2                	xor    edx,edx
c001b3fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b400:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b407:	31 c0                	xor    eax,eax
c001b409:	83 c4 08             	add    esp,0x8
c001b40c:	5b                   	pop    ebx
c001b40d:	c3                   	ret    
c001b40e:	83 ec 0c             	sub    esp,0xc
c001b411:	50                   	push   eax
c001b412:	e8 b2 5c ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b417:	5a                   	pop    edx
c001b418:	59                   	pop    ecx
c001b419:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b41c:	50                   	push   eax
c001b41d:	e8 84 79 ff ff       	call   c0012da6 <File::tell(unsigned long long*)>
c001b422:	83 c4 10             	add    esp,0x10
c001b425:	85 c0                	test   eax,eax
c001b427:	0f 95 c0             	setne  al
c001b42a:	31 d2                	xor    edx,edx
c001b42c:	0f b6 c0             	movzx  eax,al
c001b42f:	f7 d8                	neg    eax
c001b431:	83 d2 00             	adc    edx,0x0
c001b434:	83 c4 08             	add    esp,0x8
c001b437:	f7 da                	neg    edx
c001b439:	5b                   	pop    ebx
c001b43a:	c3                   	ret    
c001b43b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b440:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b445:	83 c4 08             	add    esp,0x8
c001b448:	5b                   	pop    ebx
c001b449:	c3                   	ret    

c001b44a <sysCallSize(regs*)>:
c001b44a:	53                   	push   ebx
c001b44b:	83 ec 18             	sub    esp,0x18
c001b44e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b452:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b455:	83 f8 02             	cmp    eax,0x2
c001b458:	76 53                	jbe    c001b4ad <sysCallSize(regs*)+0x63>
c001b45a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b45f:	76 19                	jbe    c001b47a <sysCallSize(regs*)+0x30>
c001b461:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b464:	31 d2                	xor    edx,edx
c001b466:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b46c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b473:	31 c0                	xor    eax,eax
c001b475:	83 c4 18             	add    esp,0x18
c001b478:	5b                   	pop    ebx
c001b479:	c3                   	ret    
c001b47a:	83 ec 0c             	sub    esp,0xc
c001b47d:	50                   	push   eax
c001b47e:	e8 46 5c ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b483:	83 c4 0c             	add    esp,0xc
c001b486:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b48a:	52                   	push   edx
c001b48b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b48e:	50                   	push   eax
c001b48f:	e8 aa 7a ff ff       	call   c0012f3e <File::stat(unsigned long long*, bool*)>
c001b494:	83 c4 10             	add    esp,0x10
c001b497:	85 c0                	test   eax,eax
c001b499:	0f 95 c0             	setne  al
c001b49c:	31 d2                	xor    edx,edx
c001b49e:	0f b6 c0             	movzx  eax,al
c001b4a1:	f7 d8                	neg    eax
c001b4a3:	83 d2 00             	adc    edx,0x0
c001b4a6:	83 c4 18             	add    esp,0x18
c001b4a9:	f7 da                	neg    edx
c001b4ab:	5b                   	pop    ebx
c001b4ac:	c3                   	ret    
c001b4ad:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b4b2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b4b7:	83 c4 18             	add    esp,0x18
c001b4ba:	5b                   	pop    ebx
c001b4bb:	c3                   	ret    

c001b4bc <sysCallSizeFromFilename(regs*)>:
c001b4bc:	57                   	push   edi
c001b4bd:	56                   	push   esi
c001b4be:	53                   	push   ebx
c001b4bf:	83 ec 20             	sub    esp,0x20
c001b4c2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b4c6:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001b4c9:	83 fb 02             	cmp    ebx,0x2
c001b4cc:	0f 86 88 00 00 00    	jbe    c001b55a <sysCallSizeFromFilename(regs*)+0x9e>
c001b4d2:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b4d8:	76 1b                	jbe    c001b4f5 <sysCallSizeFromFilename(regs*)+0x39>
c001b4da:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b4dd:	31 d2                	xor    edx,edx
c001b4df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b4e5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b4ec:	83 c4 20             	add    esp,0x20
c001b4ef:	31 c0                	xor    eax,eax
c001b4f1:	5b                   	pop    ebx
c001b4f2:	5e                   	pop    esi
c001b4f3:	5f                   	pop    edi
c001b4f4:	c3                   	ret    
c001b4f5:	83 ec 0c             	sub    esp,0xc
c001b4f8:	68 14 01 00 00       	push   0x114
c001b4fd:	e8 97 40 ff ff       	call   c000f599 <malloc>
c001b502:	83 c4 0c             	add    esp,0xc
c001b505:	89 c7                	mov    edi,eax
c001b507:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b50c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b50f:	53                   	push   ebx
c001b510:	57                   	push   edi
c001b511:	e8 18 77 ff ff       	call   c0012c2e <File::File(char const*, Process*)>
c001b516:	83 c4 0c             	add    esp,0xc
c001b519:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b51d:	50                   	push   eax
c001b51e:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b521:	57                   	push   edi
c001b522:	e8 17 7a ff ff       	call   c0012f3e <File::stat(unsigned long long*, bool*)>
c001b527:	83 c4 10             	add    esp,0x10
c001b52a:	85 ff                	test   edi,edi
c001b52c:	74 14                	je     c001b542 <sysCallSizeFromFilename(regs*)+0x86>
c001b52e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b532:	8b 17                	mov    edx,DWORD PTR [edi]
c001b534:	83 ec 0c             	sub    esp,0xc
c001b537:	57                   	push   edi
c001b538:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b53b:	83 c4 10             	add    esp,0x10
c001b53e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b542:	85 c0                	test   eax,eax
c001b544:	0f 95 c0             	setne  al
c001b547:	31 d2                	xor    edx,edx
c001b549:	0f b6 c0             	movzx  eax,al
c001b54c:	f7 d8                	neg    eax
c001b54e:	83 d2 00             	adc    edx,0x0
c001b551:	83 c4 20             	add    esp,0x20
c001b554:	f7 da                	neg    edx
c001b556:	5b                   	pop    ebx
c001b557:	5e                   	pop    esi
c001b558:	5f                   	pop    edi
c001b559:	c3                   	ret    
c001b55a:	83 c4 20             	add    esp,0x20
c001b55d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b562:	5b                   	pop    ebx
c001b563:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b568:	5e                   	pop    esi
c001b569:	5f                   	pop    edi
c001b56a:	c3                   	ret    

c001b56b <sysCallClose(regs*)>:
c001b56b:	53                   	push   ebx
c001b56c:	83 ec 08             	sub    esp,0x8
c001b56f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b573:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b576:	83 f8 02             	cmp    eax,0x2
c001b579:	76 41                	jbe    c001b5bc <sysCallClose(regs*)+0x51>
c001b57b:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001b581:	83 fa 01             	cmp    edx,0x1
c001b584:	76 2d                	jbe    c001b5b3 <sysCallClose(regs*)+0x48>
c001b586:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b58b:	77 2f                	ja     c001b5bc <sysCallClose(regs*)+0x51>
c001b58d:	83 ec 0c             	sub    esp,0xc
c001b590:	50                   	push   eax
c001b591:	e8 33 5b ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b596:	89 c3                	mov    ebx,eax
c001b598:	89 04 24             	mov    DWORD PTR [esp],eax
c001b59b:	e8 50 77 ff ff       	call   c0012cf0 <File::close()>
c001b5a0:	83 c4 10             	add    esp,0x10
c001b5a3:	85 db                	test   ebx,ebx
c001b5a5:	74 0c                	je     c001b5b3 <sysCallClose(regs*)+0x48>
c001b5a7:	83 ec 0c             	sub    esp,0xc
c001b5aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b5ac:	53                   	push   ebx
c001b5ad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b5b0:	83 c4 10             	add    esp,0x10
c001b5b3:	31 c0                	xor    eax,eax
c001b5b5:	31 d2                	xor    edx,edx
c001b5b7:	83 c4 08             	add    esp,0x8
c001b5ba:	5b                   	pop    ebx
c001b5bb:	c3                   	ret    
c001b5bc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b5c1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5c6:	83 c4 08             	add    esp,0x8
c001b5c9:	5b                   	pop    ebx
c001b5ca:	c3                   	ret    

c001b5cb <sysCallOpenDir(regs*)>:
c001b5cb:	56                   	push   esi
c001b5cc:	53                   	push   ebx
c001b5cd:	53                   	push   ebx
c001b5ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5d2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b5d5:	85 f6                	test   esi,esi
c001b5d7:	74 59                	je     c001b632 <sysCallOpenDir(regs*)+0x67>
c001b5d9:	83 ec 0c             	sub    esp,0xc
c001b5dc:	68 14 01 00 00       	push   0x114
c001b5e1:	e8 b3 3f ff ff       	call   c000f599 <malloc>
c001b5e6:	83 c4 0c             	add    esp,0xc
c001b5e9:	89 c6                	mov    esi,eax
c001b5eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5f0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b5f3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b5f6:	56                   	push   esi
c001b5f7:	e8 de 7a ff ff       	call   c00130da <Directory::Directory(char const*, Process*)>
c001b5fc:	83 c4 10             	add    esp,0x10
c001b5ff:	85 f6                	test   esi,esi
c001b601:	74 2f                	je     c001b632 <sysCallOpenDir(regs*)+0x67>
c001b603:	83 ec 0c             	sub    esp,0xc
c001b606:	56                   	push   esi
c001b607:	e8 32 7b ff ff       	call   c001313e <Directory::open()>
c001b60c:	83 c4 10             	add    esp,0x10
c001b60f:	85 c0                	test   eax,eax
c001b611:	75 1f                	jne    c001b632 <sysCallOpenDir(regs*)+0x67>
c001b613:	83 ec 0c             	sub    esp,0xc
c001b616:	56                   	push   esi
c001b617:	e8 b8 57 ff ff       	call   c0010dd4 <UnixFile::getFileDescriptor()>
c001b61c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b61f:	83 c4 10             	add    esp,0x10
c001b622:	89 02                	mov    DWORD PTR [edx],eax
c001b624:	c1 f8 1f             	sar    eax,0x1f
c001b627:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b62a:	31 c0                	xor    eax,eax
c001b62c:	59                   	pop    ecx
c001b62d:	31 d2                	xor    edx,edx
c001b62f:	5b                   	pop    ebx
c001b630:	5e                   	pop    esi
c001b631:	c3                   	ret    
c001b632:	59                   	pop    ecx
c001b633:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b638:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b63d:	5b                   	pop    ebx
c001b63e:	5e                   	pop    esi
c001b63f:	c3                   	ret    

c001b640 <sysCallCloseDir(regs*)>:
c001b640:	53                   	push   ebx
c001b641:	83 ec 08             	sub    esp,0x8
c001b644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b648:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b64b:	8d 50 fd             	lea    edx,[eax-0x3]
c001b64e:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b654:	77 2f                	ja     c001b685 <sysCallCloseDir(regs*)+0x45>
c001b656:	83 ec 0c             	sub    esp,0xc
c001b659:	50                   	push   eax
c001b65a:	e8 6a 5a ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b65f:	89 c3                	mov    ebx,eax
c001b661:	89 04 24             	mov    DWORD PTR [esp],eax
c001b664:	e8 31 7b ff ff       	call   c001319a <Directory::close()>
c001b669:	83 c4 10             	add    esp,0x10
c001b66c:	85 db                	test   ebx,ebx
c001b66e:	74 0c                	je     c001b67c <sysCallCloseDir(regs*)+0x3c>
c001b670:	83 ec 0c             	sub    esp,0xc
c001b673:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b675:	53                   	push   ebx
c001b676:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b679:	83 c4 10             	add    esp,0x10
c001b67c:	31 c0                	xor    eax,eax
c001b67e:	31 d2                	xor    edx,edx
c001b680:	83 c4 08             	add    esp,0x8
c001b683:	5b                   	pop    ebx
c001b684:	c3                   	ret    
c001b685:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b68a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b68f:	83 c4 08             	add    esp,0x8
c001b692:	5b                   	pop    ebx
c001b693:	c3                   	ret    

c001b694 <sysCallMakeDir(regs*)>:
c001b694:	56                   	push   esi
c001b695:	53                   	push   ebx
c001b696:	83 ec 10             	sub    esp,0x10
c001b699:	68 14 01 00 00       	push   0x114
c001b69e:	e8 f6 3e ff ff       	call   c000f599 <malloc>
c001b6a3:	83 c4 0c             	add    esp,0xc
c001b6a6:	89 c3                	mov    ebx,eax
c001b6a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6ad:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b6b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b6b4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b6b7:	53                   	push   ebx
c001b6b8:	e8 1d 7a ff ff       	call   c00130da <Directory::Directory(char const*, Process*)>
c001b6bd:	83 c4 10             	add    esp,0x10
c001b6c0:	85 db                	test   ebx,ebx
c001b6c2:	74 32                	je     c001b6f6 <sysCallMakeDir(regs*)+0x62>
c001b6c4:	83 ec 0c             	sub    esp,0xc
c001b6c7:	53                   	push   ebx
c001b6c8:	e8 51 7c ff ff       	call   c001331e <Directory::create()>
c001b6cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b6d0:	89 c6                	mov    esi,eax
c001b6d2:	e8 c3 7a ff ff       	call   c001319a <Directory::close()>
c001b6d7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b6dc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b6df:	83 c4 10             	add    esp,0x10
c001b6e2:	31 c0                	xor    eax,eax
c001b6e4:	59                   	pop    ecx
c001b6e5:	85 f6                	test   esi,esi
c001b6e7:	5b                   	pop    ebx
c001b6e8:	0f 95 c0             	setne  al
c001b6eb:	5e                   	pop    esi
c001b6ec:	31 d2                	xor    edx,edx
c001b6ee:	f7 d8                	neg    eax
c001b6f0:	83 d2 00             	adc    edx,0x0
c001b6f3:	f7 da                	neg    edx
c001b6f5:	c3                   	ret    
c001b6f6:	59                   	pop    ecx
c001b6f7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b6fc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b701:	5b                   	pop    ebx
c001b702:	5e                   	pop    esi
c001b703:	c3                   	ret    

c001b704 <sysCallWait(regs*)>:
c001b704:	83 ec 10             	sub    esp,0x10
c001b707:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b70b:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b70e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b711:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b714:	e8 b5 24 00 00       	call   c001dbce <waitTask(int, int*, int)>
c001b719:	83 c4 1c             	add    esp,0x1c
c001b71c:	99                   	cdq    
c001b71d:	c3                   	ret    

c001b71e <sysCallNotImpl(regs*)>:
c001b71e:	83 ec 18             	sub    esp,0x18
c001b721:	68 39 b9 02 c0       	push   0xc002b939
c001b726:	e8 10 e7 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c001b72b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b730:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b735:	83 c4 1c             	add    esp,0x1c
c001b738:	c3                   	ret    

c001b739 <sysPanic(regs*)>:
c001b739:	83 ec 18             	sub    esp,0x18
c001b73c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b740:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b743:	e8 f3 e6 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c001b748:	b8 01 00 00 00       	mov    eax,0x1
c001b74d:	31 d2                	xor    edx,edx
c001b74f:	83 c4 1c             	add    esp,0x1c
c001b752:	c3                   	ret    

c001b753 <sysCallRmdir(regs*)>:
c001b753:	56                   	push   esi
c001b754:	53                   	push   ebx
c001b755:	83 ec 20             	sub    esp,0x20
c001b758:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b75c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b75f:	68 14 01 00 00       	push   0x114
c001b764:	e8 30 3e ff ff       	call   c000f599 <malloc>
c001b769:	83 c4 0c             	add    esp,0xc
c001b76c:	89 c3                	mov    ebx,eax
c001b76e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b773:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b776:	56                   	push   esi
c001b777:	53                   	push   ebx
c001b778:	e8 b1 74 ff ff       	call   c0012c2e <File::File(char const*, Process*)>
c001b77d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b780:	e8 85 76 ff ff       	call   c0012e0a <File::unlink()>
c001b785:	83 c4 10             	add    esp,0x10
c001b788:	85 db                	test   ebx,ebx
c001b78a:	74 14                	je     c001b7a0 <sysCallRmdir(regs*)+0x4d>
c001b78c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b790:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b792:	83 ec 0c             	sub    esp,0xc
c001b795:	53                   	push   ebx
c001b796:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b799:	83 c4 10             	add    esp,0x10
c001b79c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b7a0:	85 c0                	test   eax,eax
c001b7a2:	0f 95 c0             	setne  al
c001b7a5:	31 d2                	xor    edx,edx
c001b7a7:	0f b6 c0             	movzx  eax,al
c001b7aa:	f7 d8                	neg    eax
c001b7ac:	83 d2 00             	adc    edx,0x0
c001b7af:	83 c4 14             	add    esp,0x14
c001b7b2:	f7 da                	neg    edx
c001b7b4:	5b                   	pop    ebx
c001b7b5:	5e                   	pop    esi
c001b7b6:	c3                   	ret    

c001b7b7 <sysCallUnlink(regs*)>:
c001b7b7:	56                   	push   esi
c001b7b8:	53                   	push   ebx
c001b7b9:	83 ec 20             	sub    esp,0x20
c001b7bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b7c0:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b7c3:	68 14 01 00 00       	push   0x114
c001b7c8:	e8 cc 3d ff ff       	call   c000f599 <malloc>
c001b7cd:	83 c4 0c             	add    esp,0xc
c001b7d0:	89 c3                	mov    ebx,eax
c001b7d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7d7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b7da:	56                   	push   esi
c001b7db:	53                   	push   ebx
c001b7dc:	e8 4d 74 ff ff       	call   c0012c2e <File::File(char const*, Process*)>
c001b7e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b7e4:	e8 21 76 ff ff       	call   c0012e0a <File::unlink()>
c001b7e9:	83 c4 10             	add    esp,0x10
c001b7ec:	85 db                	test   ebx,ebx
c001b7ee:	74 14                	je     c001b804 <sysCallUnlink(regs*)+0x4d>
c001b7f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7f4:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b7f6:	83 ec 0c             	sub    esp,0xc
c001b7f9:	53                   	push   ebx
c001b7fa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b7fd:	83 c4 10             	add    esp,0x10
c001b800:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b804:	85 c0                	test   eax,eax
c001b806:	0f 95 c0             	setne  al
c001b809:	31 d2                	xor    edx,edx
c001b80b:	0f b6 c0             	movzx  eax,al
c001b80e:	f7 d8                	neg    eax
c001b810:	83 d2 00             	adc    edx,0x0
c001b813:	83 c4 14             	add    esp,0x14
c001b816:	f7 da                	neg    edx
c001b818:	5b                   	pop    ebx
c001b819:	5e                   	pop    esi
c001b81a:	c3                   	ret    

c001b81b <sysCallGetArgv(regs*)>:
c001b81b:	83 ec 0c             	sub    esp,0xc
c001b81e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b822:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b825:	85 c0                	test   eax,eax
c001b827:	78 2b                	js     c001b854 <sysCallGetArgv(regs*)+0x39>
c001b829:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b82f:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b832:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b838:	7d 1a                	jge    c001b854 <sysCallGetArgv(regs*)+0x39>
c001b83a:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b841:	85 c0                	test   eax,eax
c001b843:	74 17                	je     c001b85c <sysCallGetArgv(regs*)+0x41>
c001b845:	83 ec 08             	sub    esp,0x8
c001b848:	50                   	push   eax
c001b849:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b84c:	e8 bb 4f fe ff       	call   c000080c <strcpy>
c001b851:	83 c4 10             	add    esp,0x10
c001b854:	31 c0                	xor    eax,eax
c001b856:	31 d2                	xor    edx,edx
c001b858:	83 c4 0c             	add    esp,0xc
c001b85b:	c3                   	ret    
c001b85c:	b8 01 00 00 00       	mov    eax,0x1
c001b861:	31 d2                	xor    edx,edx
c001b863:	83 c4 0c             	add    esp,0xc
c001b866:	c3                   	ret    

c001b867 <sysCallTTYName(regs*)>:
c001b867:	56                   	push   esi
c001b868:	53                   	push   ebx
c001b869:	53                   	push   ebx
c001b86a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b86e:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b871:	85 c0                	test   eax,eax
c001b873:	74 5f                	je     c001b8d4 <sysCallTTYName(regs*)+0x6d>
c001b875:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b878:	83 f8 02             	cmp    eax,0x2
c001b87b:	77 3e                	ja     c001b8bb <sysCallTTYName(regs*)+0x54>
c001b87d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b882:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b885:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b88b:	85 db                	test   ebx,ebx
c001b88d:	74 45                	je     c001b8d4 <sysCallTTYName(regs*)+0x6d>
c001b88f:	83 ec 0c             	sub    esp,0xc
c001b892:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b894:	53                   	push   ebx
c001b895:	ff 10                	call   DWORD PTR [eax]
c001b897:	83 c4 10             	add    esp,0x10
c001b89a:	84 c0                	test   al,al
c001b89c:	74 41                	je     c001b8df <sysCallTTYName(regs*)+0x78>
c001b89e:	83 ec 08             	sub    esp,0x8
c001b8a1:	81 c3 82 00 00 00    	add    ebx,0x82
c001b8a7:	53                   	push   ebx
c001b8a8:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b8ab:	e8 5c 4f fe ff       	call   c000080c <strcpy>
c001b8b0:	83 c4 10             	add    esp,0x10
c001b8b3:	31 c0                	xor    eax,eax
c001b8b5:	59                   	pop    ecx
c001b8b6:	31 d2                	xor    edx,edx
c001b8b8:	5b                   	pop    ebx
c001b8b9:	5e                   	pop    esi
c001b8ba:	c3                   	ret    
c001b8bb:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b8c0:	74 bb                	je     c001b87d <sysCallTTYName(regs*)+0x16>
c001b8c2:	83 ec 0c             	sub    esp,0xc
c001b8c5:	50                   	push   eax
c001b8c6:	e8 fe 57 ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b8cb:	83 c4 10             	add    esp,0x10
c001b8ce:	89 c3                	mov    ebx,eax
c001b8d0:	85 db                	test   ebx,ebx
c001b8d2:	75 bb                	jne    c001b88f <sysCallTTYName(regs*)+0x28>
c001b8d4:	59                   	pop    ecx
c001b8d5:	b8 01 00 00 00       	mov    eax,0x1
c001b8da:	31 d2                	xor    edx,edx
c001b8dc:	5b                   	pop    ebx
c001b8dd:	5e                   	pop    esi
c001b8de:	c3                   	ret    
c001b8df:	59                   	pop    ecx
c001b8e0:	b8 02 00 00 00       	mov    eax,0x2
c001b8e5:	31 d2                	xor    edx,edx
c001b8e7:	5b                   	pop    ebx
c001b8e8:	5e                   	pop    esi
c001b8e9:	c3                   	ret    

c001b8ea <sysCallUSleep(regs*)>:
c001b8ea:	83 ec 14             	sub    esp,0x14
c001b8ed:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b8f2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b8f6:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b8fd:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b900:	01 ca                	add    edx,ecx
c001b902:	52                   	push   edx
c001b903:	50                   	push   eax
c001b904:	e8 9c 23 00 00       	call   c001dca5 <nanoSleep(unsigned long long)>
c001b909:	31 c0                	xor    eax,eax
c001b90b:	31 d2                	xor    edx,edx
c001b90d:	83 c4 1c             	add    esp,0x1c
c001b910:	c3                   	ret    

c001b911 <sysCallSpawn(regs*)>:
c001b911:	56                   	push   esi
c001b912:	53                   	push   ebx
c001b913:	50                   	push   eax
c001b914:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b918:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b91b:	85 c0                	test   eax,eax
c001b91d:	75 08                	jne    c001b927 <sysCallSpawn(regs*)+0x16>
c001b91f:	59                   	pop    ecx
c001b920:	31 c0                	xor    eax,eax
c001b922:	31 d2                	xor    edx,edx
c001b924:	5b                   	pop    ebx
c001b925:	5e                   	pop    esi
c001b926:	c3                   	ret    
c001b927:	83 ec 0c             	sub    esp,0xc
c001b92a:	68 3f 07 00 00       	push   0x73f
c001b92f:	e8 65 3c ff ff       	call   c000f599 <malloc>
c001b934:	83 c4 10             	add    esp,0x10
c001b937:	89 c6                	mov    esi,eax
c001b939:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b93c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b93f:	85 c0                	test   eax,eax
c001b941:	75 32                	jne    c001b975 <sysCallSpawn(regs*)+0x64>
c001b943:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b948:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b94b:	52                   	push   edx
c001b94c:	50                   	push   eax
c001b94d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b950:	56                   	push   esi
c001b951:	e8 74 1a 00 00       	call   c001d3ca <Process::Process(char const*, Process*, char**)>
c001b956:	83 c4 10             	add    esp,0x10
c001b959:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b960:	75 bd                	jne    c001b91f <sysCallSpawn(regs*)+0xe>
c001b962:	83 ec 0c             	sub    esp,0xc
c001b965:	56                   	push   esi
c001b966:	e8 41 1f 00 00       	call   c001d8ac <Process::createUserThread()>
c001b96b:	8b 06                	mov    eax,DWORD PTR [esi]
c001b96d:	83 c4 10             	add    esp,0x10
c001b970:	99                   	cdq    
c001b971:	59                   	pop    ecx
c001b972:	5b                   	pop    ebx
c001b973:	5e                   	pop    esi
c001b974:	c3                   	ret    
c001b975:	31 c0                	xor    eax,eax
c001b977:	eb d2                	jmp    c001b94b <sysCallSpawn(regs*)+0x3a>

c001b979 <sysCallGetEnv(regs*)>:
c001b979:	57                   	push   edi
c001b97a:	56                   	push   esi
c001b97b:	53                   	push   ebx
c001b97c:	83 ec 1c             	sub    esp,0x1c
c001b97f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b983:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b988:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b98b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b98e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b991:	e8 f1 e3 ff ff       	call   c0019d87 <Krnl::getProcessTotalEnvCount(Process*)>
c001b996:	83 c4 10             	add    esp,0x10
c001b999:	39 c7                	cmp    edi,eax
c001b99b:	7c 14                	jl     c001b9b1 <sysCallGetEnv(regs*)+0x38>
c001b99d:	85 f6                	test   esi,esi
c001b99f:	75 0b                	jne    c001b9ac <sysCallGetEnv(regs*)+0x33>
c001b9a1:	83 c4 10             	add    esp,0x10
c001b9a4:	31 c0                	xor    eax,eax
c001b9a6:	5b                   	pop    ebx
c001b9a7:	31 d2                	xor    edx,edx
c001b9a9:	5e                   	pop    esi
c001b9aa:	5f                   	pop    edi
c001b9ab:	c3                   	ret    
c001b9ac:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b9af:	eb f0                	jmp    c001b9a1 <sysCallGetEnv(regs*)+0x28>
c001b9b1:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b9b5:	52                   	push   edx
c001b9b6:	57                   	push   edi
c001b9b7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b9bd:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b9c0:	50                   	push   eax
c001b9c1:	e8 e1 e3 ff ff       	call   c0019da7 <Krnl::getProcessEnvPair(Process*, int)>
c001b9c6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b9c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b9cd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b9d1:	83 c4 0c             	add    esp,0xc
c001b9d4:	85 c9                	test   ecx,ecx
c001b9d6:	75 23                	jne    c001b9fb <sysCallGetEnv(regs*)+0x82>
c001b9d8:	83 ec 0c             	sub    esp,0xc
c001b9db:	50                   	push   eax
c001b9dc:	e8 8b 4d fe ff       	call   c000076c <strlen>
c001b9e1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b9e4:	89 c3                	mov    ebx,eax
c001b9e6:	e8 81 4d fe ff       	call   c000076c <strlen>
c001b9eb:	83 c4 10             	add    esp,0x10
c001b9ee:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b9f2:	83 c4 10             	add    esp,0x10
c001b9f5:	31 d2                	xor    edx,edx
c001b9f7:	5b                   	pop    ebx
c001b9f8:	5e                   	pop    esi
c001b9f9:	5f                   	pop    edi
c001b9fa:	c3                   	ret    
c001b9fb:	83 ec 08             	sub    esp,0x8
c001b9fe:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ba01:	50                   	push   eax
c001ba02:	56                   	push   esi
c001ba03:	e8 04 4e fe ff       	call   c000080c <strcpy>
c001ba08:	58                   	pop    eax
c001ba09:	5a                   	pop    edx
c001ba0a:	68 53 b9 02 c0       	push   0xc002b953
c001ba0f:	56                   	push   esi
c001ba10:	e8 37 4f fe ff       	call   c000094c <strcat>
c001ba15:	59                   	pop    ecx
c001ba16:	5b                   	pop    ebx
c001ba17:	57                   	push   edi
c001ba18:	56                   	push   esi
c001ba19:	e8 2e 4f fe ff       	call   c000094c <strcat>
c001ba1e:	83 c4 10             	add    esp,0x10
c001ba21:	e9 7b ff ff ff       	jmp    c001b9a1 <sysCallGetEnv(regs*)+0x28>

c001ba26 <sysAppSettings(regs*)>:
c001ba26:	57                   	push   edi
c001ba27:	56                   	push   esi
c001ba28:	56                   	push   esi
c001ba29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba2d:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001ba30:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001ba36:	25 e0 1f 00 00       	and    eax,0x1fe0
c001ba3b:	66 3d c0 09          	cmp    ax,0x9c0
c001ba3f:	75 2e                	jne    c001ba6f <sysAppSettings(regs*)+0x49>
c001ba41:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001ba47:	83 e0 1f             	and    eax,0x1f
c001ba4a:	3c 01                	cmp    al,0x1
c001ba4c:	74 2c                	je     c001ba7a <sysAppSettings(regs*)+0x54>
c001ba4e:	3c 07                	cmp    al,0x7
c001ba50:	0f 84 b3 00 00 00    	je     c001bb09 <sysAppSettings(regs*)+0xe3>
c001ba56:	84 c0                	test   al,al
c001ba58:	0f 84 d2 00 00 00    	je     c001bb30 <sysAppSettings(regs*)+0x10a>
c001ba5e:	3c 08                	cmp    al,0x8
c001ba60:	74 63                	je     c001bac5 <sysAppSettings(regs*)+0x9f>
c001ba62:	59                   	pop    ecx
c001ba63:	0f b6 c0             	movzx  eax,al
c001ba66:	5e                   	pop    esi
c001ba67:	05 e8 03 00 00       	add    eax,0x3e8
c001ba6c:	5f                   	pop    edi
c001ba6d:	99                   	cdq    
c001ba6e:	c3                   	ret    
c001ba6f:	b8 01 00 00 00       	mov    eax,0x1
c001ba74:	59                   	pop    ecx
c001ba75:	31 d2                	xor    edx,edx
c001ba77:	5e                   	pop    esi
c001ba78:	5f                   	pop    edi
c001ba79:	c3                   	ret    
c001ba7a:	50                   	push   eax
c001ba7b:	68 00 01 00 00       	push   0x100
c001ba80:	6a 00                	push   0x0
c001ba82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba87:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba8a:	83 c0 0c             	add    eax,0xc
c001ba8d:	50                   	push   eax
c001ba8e:	e8 bd 4c fe ff       	call   c0000750 <memset>
c001ba93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba98:	b9 ff 00 00 00       	mov    ecx,0xff
c001ba9d:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001baa0:	83 c7 0c             	add    edi,0xc
c001baa3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001baa5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001baaa:	5a                   	pop    edx
c001baab:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001baae:	59                   	pop    ecx
c001baaf:	8d 50 0c             	lea    edx,[eax+0xc]
c001bab2:	52                   	push   edx
c001bab3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bab9:	e8 34 47 ff ff       	call   c00101f2 <VgaText::setTitle(char*)>
c001babe:	83 c4 10             	add    esp,0x10
c001bac1:	31 c0                	xor    eax,eax
c001bac3:	eb af                	jmp    c001ba74 <sysAppSettings(regs*)+0x4e>
c001bac5:	83 ec 08             	sub    esp,0x8
c001bac8:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bace:	83 e0 0f             	and    eax,0xf
c001bad1:	50                   	push   eax
c001bad2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bad7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bada:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bae0:	e8 fd 46 ff ff       	call   c00101e2 <VgaText::setTitleColour(VgaColour)>
c001bae5:	5f                   	pop    edi
c001bae6:	58                   	pop    eax
c001bae7:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001baed:	c1 e8 04             	shr    eax,0x4
c001baf0:	83 e0 0f             	and    eax,0xf
c001baf3:	50                   	push   eax
c001baf4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001baf9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bafc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bb02:	e8 cb 46 ff ff       	call   c00101d2 <VgaText::setTitleTextColour(VgaColour)>
c001bb07:	eb b5                	jmp    c001babe <sysAppSettings(regs*)+0x98>
c001bb09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb0e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb11:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bb17:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001bb1d:	c0 e8 06             	shr    al,0x6
c001bb20:	83 e0 01             	and    eax,0x1
c001bb23:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001bb29:	31 c0                	xor    eax,eax
c001bb2b:	e9 44 ff ff ff       	jmp    c001ba74 <sysAppSettings(regs*)+0x4e>
c001bb30:	b8 02 00 00 00       	mov    eax,0x2
c001bb35:	e9 3a ff ff ff       	jmp    c001ba74 <sysAppSettings(regs*)+0x4e>

c001bb3a <sysSetFatAttrib(regs*)>:
c001bb3a:	57                   	push   edi
c001bb3b:	56                   	push   esi
c001bb3c:	53                   	push   ebx
c001bb3d:	83 ec 1c             	sub    esp,0x1c
c001bb40:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bb44:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001bb47:	68 14 01 00 00       	push   0x114
c001bb4c:	e8 48 3a ff ff       	call   c000f599 <malloc>
c001bb51:	83 c4 0c             	add    esp,0xc
c001bb54:	89 c3                	mov    ebx,eax
c001bb56:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb5b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb5e:	57                   	push   edi
c001bb5f:	53                   	push   ebx
c001bb60:	e8 c9 70 ff ff       	call   c0012c2e <File::File(char const*, Process*)>
c001bb65:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001bb68:	83 c4 0c             	add    esp,0xc
c001bb6b:	0f b6 d4             	movzx  edx,ah
c001bb6e:	0f b6 c0             	movzx  eax,al
c001bb71:	52                   	push   edx
c001bb72:	50                   	push   eax
c001bb73:	53                   	push   ebx
c001bb74:	e8 2b 73 ff ff       	call   c0012ea4 <File::chfatattr(unsigned char, unsigned char)>
c001bb79:	83 c4 10             	add    esp,0x10
c001bb7c:	85 db                	test   ebx,ebx
c001bb7e:	74 14                	je     c001bb94 <sysSetFatAttrib(regs*)+0x5a>
c001bb80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb84:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bb86:	83 ec 0c             	sub    esp,0xc
c001bb89:	53                   	push   ebx
c001bb8a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bb8d:	83 c4 10             	add    esp,0x10
c001bb90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb94:	85 c0                	test   eax,eax
c001bb96:	0f 95 c0             	setne  al
c001bb99:	31 d2                	xor    edx,edx
c001bb9b:	0f b6 c0             	movzx  eax,al
c001bb9e:	f7 d8                	neg    eax
c001bba0:	83 d2 00             	adc    edx,0x0
c001bba3:	83 c4 10             	add    esp,0x10
c001bba6:	f7 da                	neg    edx
c001bba8:	5b                   	pop    ebx
c001bba9:	5e                   	pop    esi
c001bbaa:	5f                   	pop    edi
c001bbab:	c3                   	ret    

c001bbac <sysPipe(regs*)>:
c001bbac:	57                   	push   edi
c001bbad:	56                   	push   esi
c001bbae:	53                   	push   ebx
c001bbaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbb3:	83 ec 0c             	sub    esp,0xc
c001bbb6:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bbb9:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bbbc:	6a 20                	push   0x20
c001bbbe:	e8 d6 39 ff ff       	call   c000f599 <malloc>
c001bbc3:	89 c3                	mov    ebx,eax
c001bbc5:	58                   	pop    eax
c001bbc6:	5a                   	pop    edx
c001bbc7:	68 00 50 00 00       	push   0x5000
c001bbcc:	53                   	push   ebx
c001bbcd:	e8 98 43 ff ff       	call   c000ff6a <Pipe::Pipe(int)>
c001bbd2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bbd5:	e8 fa 51 ff ff       	call   c0010dd4 <UnixFile::getFileDescriptor()>
c001bbda:	89 07                	mov    DWORD PTR [edi],eax
c001bbdc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bbdf:	e8 f0 51 ff ff       	call   c0010dd4 <UnixFile::getFileDescriptor()>
c001bbe4:	83 c4 10             	add    esp,0x10
c001bbe7:	89 06                	mov    DWORD PTR [esi],eax
c001bbe9:	31 d2                	xor    edx,edx
c001bbeb:	5b                   	pop    ebx
c001bbec:	31 c0                	xor    eax,eax
c001bbee:	5e                   	pop    esi
c001bbef:	5f                   	pop    edi
c001bbf0:	c3                   	ret    

c001bbf1 <sysGetUnixTime(regs*)>:
c001bbf1:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c001bbf6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bbfc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bc00:	e9 1b 7a ff ff       	jmp    c0013620 <Clock::timeInSecondsLocal()>

c001bc05 <string_ends_with(char const*, char const*)>:
c001bc05:	57                   	push   edi
c001bc06:	56                   	push   esi
c001bc07:	53                   	push   ebx
c001bc08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc0c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bc10:	83 ec 0c             	sub    esp,0xc
c001bc13:	53                   	push   ebx
c001bc14:	e8 53 4b fe ff       	call   c000076c <strlen>
c001bc19:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bc1c:	89 c6                	mov    esi,eax
c001bc1e:	e8 49 4b fe ff       	call   c000076c <strlen>
c001bc23:	83 c4 10             	add    esp,0x10
c001bc26:	39 c6                	cmp    esi,eax
c001bc28:	7d 06                	jge    c001bc30 <string_ends_with(char const*, char const*)+0x2b>
c001bc2a:	5b                   	pop    ebx
c001bc2b:	31 c0                	xor    eax,eax
c001bc2d:	5e                   	pop    esi
c001bc2e:	5f                   	pop    edi
c001bc2f:	c3                   	ret    
c001bc30:	83 ec 08             	sub    esp,0x8
c001bc33:	29 c6                	sub    esi,eax
c001bc35:	57                   	push   edi
c001bc36:	01 f3                	add    ebx,esi
c001bc38:	53                   	push   ebx
c001bc39:	e8 5a 4c fe ff       	call   c0000898 <strcmp>
c001bc3e:	83 c4 10             	add    esp,0x10
c001bc41:	85 c0                	test   eax,eax
c001bc43:	5b                   	pop    ebx
c001bc44:	0f 94 c0             	sete   al
c001bc47:	5e                   	pop    esi
c001bc48:	0f b6 c0             	movzx  eax,al
c001bc4b:	5f                   	pop    edi
c001bc4c:	c3                   	ret    

c001bc4d <sysCallOpen(regs*)>:
c001bc4d:	56                   	push   esi
c001bc4e:	53                   	push   ebx
c001bc4f:	81 ec 04 01 00 00    	sub    esp,0x104
c001bc55:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001bc5c:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001bc5f:	85 c9                	test   ecx,ecx
c001bc61:	0f 84 ad 01 00 00    	je     c001be14 <sysCallOpen(regs*)+0x1c7>
c001bc67:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bc6a:	85 c0                	test   eax,eax
c001bc6c:	0f 84 a2 01 00 00    	je     c001be14 <sysCallOpen(regs*)+0x1c7>
c001bc72:	52                   	push   edx
c001bc73:	68 55 b9 02 c0       	push   0xc002b955
c001bc78:	50                   	push   eax
c001bc79:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001bc7d:	56                   	push   esi
c001bc7e:	e8 01 6e ff ff       	call   c0012a84 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bc83:	89 34 24             	mov    DWORD PTR [esp],esi
c001bc86:	e8 e1 4a fe ff       	call   c000076c <strlen>
c001bc8b:	83 c4 10             	add    esp,0x10
c001bc8e:	48                   	dec    eax
c001bc8f:	74 1d                	je     c001bcae <sysCallOpen(regs*)+0x61>
c001bc91:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001bc94:	eb 0f                	jmp    c001bca5 <sysCallOpen(regs*)+0x58>
c001bc96:	80 fa 3a             	cmp    dl,0x3a
c001bc99:	74 0f                	je     c001bcaa <sysCallOpen(regs*)+0x5d>
c001bc9b:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001bc9f:	48                   	dec    eax
c001bca0:	74 0c                	je     c001bcae <sysCallOpen(regs*)+0x61>
c001bca2:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001bca5:	80 fa 2e             	cmp    dl,0x2e
c001bca8:	75 ec                	jne    c001bc96 <sysCallOpen(regs*)+0x49>
c001bcaa:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001bcae:	83 ec 08             	sub    esp,0x8
c001bcb1:	68 59 b9 02 c0       	push   0xc002b959
c001bcb6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bcb9:	e8 47 ff ff ff       	call   c001bc05 <string_ends_with(char const*, char const*)>
c001bcbe:	83 c4 10             	add    esp,0x10
c001bcc1:	85 c0                	test   eax,eax
c001bcc3:	74 1d                	je     c001bce2 <sysCallOpen(regs*)+0x95>
c001bcc5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bcc8:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001bcce:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bcd5:	81 c4 04 01 00 00    	add    esp,0x104
c001bcdb:	31 c0                	xor    eax,eax
c001bcdd:	31 d2                	xor    edx,edx
c001bcdf:	5b                   	pop    ebx
c001bce0:	5e                   	pop    esi
c001bce1:	c3                   	ret    
c001bce2:	83 ec 08             	sub    esp,0x8
c001bce5:	68 5e b9 02 c0       	push   0xc002b95e
c001bcea:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bced:	e8 13 ff ff ff       	call   c001bc05 <string_ends_with(char const*, char const*)>
c001bcf2:	83 c4 10             	add    esp,0x10
c001bcf5:	85 c0                	test   eax,eax
c001bcf7:	75 cc                	jne    c001bcc5 <sysCallOpen(regs*)+0x78>
c001bcf9:	83 ec 08             	sub    esp,0x8
c001bcfc:	68 5a b9 02 c0       	push   0xc002b95a
c001bd01:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd04:	e8 8f 4b fe ff       	call   c0000898 <strcmp>
c001bd09:	83 c4 10             	add    esp,0x10
c001bd0c:	85 c0                	test   eax,eax
c001bd0e:	74 b5                	je     c001bcc5 <sysCallOpen(regs*)+0x78>
c001bd10:	83 ec 08             	sub    esp,0x8
c001bd13:	68 59 b9 02 c0       	push   0xc002b959
c001bd18:	56                   	push   esi
c001bd19:	e8 e7 fe ff ff       	call   c001bc05 <string_ends_with(char const*, char const*)>
c001bd1e:	83 c4 10             	add    esp,0x10
c001bd21:	85 c0                	test   eax,eax
c001bd23:	75 a0                	jne    c001bcc5 <sysCallOpen(regs*)+0x78>
c001bd25:	83 ec 08             	sub    esp,0x8
c001bd28:	68 63 b9 02 c0       	push   0xc002b963
c001bd2d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd30:	e8 d0 fe ff ff       	call   c001bc05 <string_ends_with(char const*, char const*)>
c001bd35:	83 c4 10             	add    esp,0x10
c001bd38:	85 c0                	test   eax,eax
c001bd3a:	0f 85 e7 00 00 00    	jne    c001be27 <sysCallOpen(regs*)+0x1da>
c001bd40:	83 ec 08             	sub    esp,0x8
c001bd43:	68 68 b9 02 c0       	push   0xc002b968
c001bd48:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd4b:	e8 b5 fe ff ff       	call   c001bc05 <string_ends_with(char const*, char const*)>
c001bd50:	83 c4 10             	add    esp,0x10
c001bd53:	85 c0                	test   eax,eax
c001bd55:	0f 85 cc 00 00 00    	jne    c001be27 <sysCallOpen(regs*)+0x1da>
c001bd5b:	83 ec 08             	sub    esp,0x8
c001bd5e:	68 64 b9 02 c0       	push   0xc002b964
c001bd63:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd66:	e8 2d 4b fe ff       	call   c0000898 <strcmp>
c001bd6b:	83 c4 10             	add    esp,0x10
c001bd6e:	85 c0                	test   eax,eax
c001bd70:	0f 84 b1 00 00 00    	je     c001be27 <sysCallOpen(regs*)+0x1da>
c001bd76:	83 ec 08             	sub    esp,0x8
c001bd79:	68 63 b9 02 c0       	push   0xc002b963
c001bd7e:	56                   	push   esi
c001bd7f:	e8 81 fe ff ff       	call   c001bc05 <string_ends_with(char const*, char const*)>
c001bd84:	83 c4 10             	add    esp,0x10
c001bd87:	85 c0                	test   eax,eax
c001bd89:	0f 85 98 00 00 00    	jne    c001be27 <sysCallOpen(regs*)+0x1da>
c001bd8f:	83 ec 0c             	sub    esp,0xc
c001bd92:	68 14 01 00 00       	push   0x114
c001bd97:	e8 fd 37 ff ff       	call   c000f599 <malloc>
c001bd9c:	83 c4 0c             	add    esp,0xc
c001bd9f:	89 c6                	mov    esi,eax
c001bda1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bda6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bda9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bdac:	56                   	push   esi
c001bdad:	e8 7c 6e ff ff       	call   c0012c2e <File::File(char const*, Process*)>
c001bdb2:	83 c4 10             	add    esp,0x10
c001bdb5:	85 f6                	test   esi,esi
c001bdb7:	74 5b                	je     c001be14 <sysCallOpen(regs*)+0x1c7>
c001bdb9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bdbc:	0f b6 c2             	movzx  eax,dl
c001bdbf:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001bdc2:	89 d0                	mov    eax,edx
c001bdc4:	83 e0 01             	and    eax,0x1
c001bdc7:	f6 c2 02             	test   dl,0x2
c001bdca:	74 03                	je     c001bdcf <sysCallOpen(regs*)+0x182>
c001bdcc:	83 c8 02             	or     eax,0x2
c001bdcf:	f6 c2 04             	test   dl,0x4
c001bdd2:	74 03                	je     c001bdd7 <sysCallOpen(regs*)+0x18a>
c001bdd4:	83 c8 04             	or     eax,0x4
c001bdd7:	f6 c2 08             	test   dl,0x8
c001bdda:	74 03                	je     c001bddf <sysCallOpen(regs*)+0x192>
c001bddc:	83 c8 0a             	or     eax,0xa
c001bddf:	83 e2 10             	and    edx,0x10
c001bde2:	74 03                	je     c001bde7 <sysCallOpen(regs*)+0x19a>
c001bde4:	83 c8 12             	or     eax,0x12
c001bde7:	83 ec 08             	sub    esp,0x8
c001bdea:	50                   	push   eax
c001bdeb:	56                   	push   esi
c001bdec:	e8 a1 6e ff ff       	call   c0012c92 <File::open(FileOpenMode)>
c001bdf1:	83 c4 10             	add    esp,0x10
c001bdf4:	85 c0                	test   eax,eax
c001bdf6:	75 1c                	jne    c001be14 <sysCallOpen(regs*)+0x1c7>
c001bdf8:	83 ec 0c             	sub    esp,0xc
c001bdfb:	56                   	push   esi
c001bdfc:	e8 d3 4f ff ff       	call   c0010dd4 <UnixFile::getFileDescriptor()>
c001be01:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001be04:	83 c4 10             	add    esp,0x10
c001be07:	89 02                	mov    DWORD PTR [edx],eax
c001be09:	c1 f8 1f             	sar    eax,0x1f
c001be0c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001be0f:	e9 c1 fe ff ff       	jmp    c001bcd5 <sysCallOpen(regs*)+0x88>
c001be14:	81 c4 04 01 00 00    	add    esp,0x104
c001be1a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be1f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be24:	5b                   	pop    ebx
c001be25:	5e                   	pop    esi
c001be26:	c3                   	ret    
c001be27:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001be2a:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001be30:	e9 99 fe ff ff       	jmp    c001bcce <sysCallOpen(regs*)+0x81>

c001be35 <Sys::loadSyscalls()>:
c001be35:	c7 05 20 05 03 c0 a2 b0 01 c0 	mov    DWORD PTR ds:0xc0030520,0xc001b0a2
c001be3f:	c7 05 24 05 03 c0 9a ac 01 c0 	mov    DWORD PTR ds:0xc0030524,0xc001ac9a
c001be49:	c7 05 28 05 03 c0 88 ae 01 c0 	mov    DWORD PTR ds:0xc0030528,0xc001ae88
c001be53:	c7 05 2c 05 03 c0 d8 af 01 c0 	mov    DWORD PTR ds:0xc003052c,0xc001afd8
c001be5d:	c7 05 30 05 03 c0 20 ae 01 c0 	mov    DWORD PTR ds:0xc0030530,0xc001ae20
c001be67:	c7 05 34 05 03 c0 d1 ac 01 c0 	mov    DWORD PTR ds:0xc0030534,0xc001acd1
c001be71:	c7 05 38 05 03 c0 b2 ac 01 c0 	mov    DWORD PTR ds:0xc0030538,0xc001acb2
c001be7b:	c7 05 3c 05 03 c0 dd ae 01 c0 	mov    DWORD PTR ds:0xc003053c,0xc001aedd
c001be85:	c7 05 44 05 03 c0 6b b5 01 c0 	mov    DWORD PTR ds:0xc0030544,0xc001b56b
c001be8f:	c7 05 40 05 03 c0 4d bc 01 c0 	mov    DWORD PTR ds:0xc0030540,0xc001bc4d
c001be99:	c7 05 48 05 03 c0 cb b5 01 c0 	mov    DWORD PTR ds:0xc0030548,0xc001b5cb
c001bea3:	c7 05 4c 05 03 c0 ae b2 01 c0 	mov    DWORD PTR ds:0xc003054c,0xc001b2ae
c001bead:	c7 05 50 05 03 c0 e8 b0 01 c0 	mov    DWORD PTR ds:0xc0030550,0xc001b0e8
c001beb7:	c7 05 54 05 03 c0 ed b0 01 c0 	mov    DWORD PTR ds:0xc0030554,0xc001b0ed
c001bec1:	c7 05 58 05 03 c0 94 b6 01 c0 	mov    DWORD PTR ds:0xc0030558,0xc001b694
c001becb:	c7 05 5c 05 03 c0 40 b6 01 c0 	mov    DWORD PTR ds:0xc003055c,0xc001b640
c001bed5:	c7 05 60 05 03 c0 87 b3 01 c0 	mov    DWORD PTR ds:0xc0030560,0xc001b387
c001bedf:	c7 05 64 05 03 c0 de b3 01 c0 	mov    DWORD PTR ds:0xc0030564,0xc001b3de
c001bee9:	c7 05 68 05 03 c0 4a b4 01 c0 	mov    DWORD PTR ds:0xc0030568,0xc001b44a
c001bef3:	c7 05 6c 05 03 c0 f2 b0 01 c0 	mov    DWORD PTR ds:0xc003056c,0xc001b0f2
c001befd:	c7 05 70 05 03 c0 04 b7 01 c0 	mov    DWORD PTR ds:0xc0030570,0xc001b704
c001bf07:	c7 05 74 05 03 c0 1e b7 01 c0 	mov    DWORD PTR ds:0xc0030574,0xc001b71e
c001bf11:	c7 05 78 05 03 c0 1e b7 01 c0 	mov    DWORD PTR ds:0xc0030578,0xc001b71e
c001bf1b:	c7 05 7c 05 03 c0 53 b7 01 c0 	mov    DWORD PTR ds:0xc003057c,0xc001b753
c001bf25:	c7 05 80 05 03 c0 b7 b7 01 c0 	mov    DWORD PTR ds:0xc0030580,0xc001b7b7
c001bf2f:	c7 05 84 05 03 c0 fc b0 01 c0 	mov    DWORD PTR ds:0xc0030584,0xc001b0fc
c001bf39:	c7 05 88 05 03 c0 1b b8 01 c0 	mov    DWORD PTR ds:0xc0030588,0xc001b81b
c001bf43:	c7 05 8c 05 03 c0 6b b2 01 c0 	mov    DWORD PTR ds:0xc003058c,0xc001b26b
c001bf4d:	c7 05 90 05 03 c0 67 b8 01 c0 	mov    DWORD PTR ds:0xc0030590,0xc001b867
c001bf57:	c7 05 94 05 03 c0 2d b3 01 c0 	mov    DWORD PTR ds:0xc0030594,0xc001b32d
c001bf61:	c7 05 98 05 03 c0 ea b8 01 c0 	mov    DWORD PTR ds:0xc0030598,0xc001b8ea
c001bf6b:	c7 05 9c 05 03 c0 bc b4 01 c0 	mov    DWORD PTR ds:0xc003059c,0xc001b4bc
c001bf75:	c7 05 a0 05 03 c0 11 b9 01 c0 	mov    DWORD PTR ds:0xc00305a0,0xc001b911
c001bf7f:	c7 05 a4 05 03 c0 79 b9 01 c0 	mov    DWORD PTR ds:0xc00305a4,0xc001b979
c001bf89:	c7 05 a8 05 03 c0 26 ba 01 c0 	mov    DWORD PTR ds:0xc00305a8,0xc001ba26
c001bf93:	c7 05 ac 05 03 c0 0c b1 01 c0 	mov    DWORD PTR ds:0xc00305ac,0xc001b10c
c001bf9d:	c7 05 b0 05 03 c0 76 b1 01 c0 	mov    DWORD PTR ds:0xc00305b0,0xc001b176
c001bfa7:	c7 05 b4 05 03 c0 bc b1 01 c0 	mov    DWORD PTR ds:0xc00305b4,0xc001b1bc
c001bfb1:	c7 05 b8 05 03 c0 3a bb 01 c0 	mov    DWORD PTR ds:0xc00305b8,0xc001bb3a
c001bfbb:	c7 05 bc 05 03 c0 39 b7 01 c0 	mov    DWORD PTR ds:0xc00305bc,0xc001b739
c001bfc5:	c7 05 c0 05 03 c0 0d b2 01 c0 	mov    DWORD PTR ds:0xc00305c0,0xc001b20d
c001bfcf:	c7 05 c4 05 03 c0 ac bb 01 c0 	mov    DWORD PTR ds:0xc00305c4,0xc001bbac
c001bfd9:	c7 05 c8 05 03 c0 f1 bb 01 c0 	mov    DWORD PTR ds:0xc00305c8,0xc001bbf1
c001bfe3:	c7 05 cc 05 03 c0 78 ad 01 c0 	mov    DWORD PTR ds:0xc00305cc,0xc001ad78
c001bfed:	c7 05 d0 05 03 c0 f9 ae 01 c0 	mov    DWORD PTR ds:0xc00305d0,0xc001aef9
c001bff7:	c7 05 d4 05 03 c0 8e af 01 c0 	mov    DWORD PTR ds:0xc00305d4,0xc001af8e
c001c001:	c7 05 d8 05 03 c0 64 ac 01 c0 	mov    DWORD PTR ds:0xc00305d8,0xc001ac64
c001c00b:	c7 05 dc 05 03 c0 40 b0 01 c0 	mov    DWORD PTR ds:0xc00305dc,0xc001b040
c001c015:	c7 05 e0 05 03 c0 dd ac 01 c0 	mov    DWORD PTR ds:0xc00305e0,0xc001acdd
c001c01f:	c7 05 e4 05 03 c0 f4 ac 01 c0 	mov    DWORD PTR ds:0xc00305e4,0xc001acf4
c001c029:	c3                   	ret    

c001c02a <Sys::systemCall(regs*, void*)>:
c001c02a:	53                   	push   ebx
c001c02b:	83 ec 08             	sub    esp,0x8
c001c02e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c032:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c035:	83 f8 7f             	cmp    eax,0x7f
c001c038:	77 16                	ja     c001c050 <Sys::systemCall(regs*, void*)+0x26>
c001c03a:	8b 14 85 20 05 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfae0]
c001c041:	85 d2                	test   edx,edx
c001c043:	74 0b                	je     c001c050 <Sys::systemCall(regs*, void*)+0x26>
c001c045:	83 ec 0c             	sub    esp,0xc
c001c048:	53                   	push   ebx
c001c049:	ff d2                	call   edx
c001c04b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c04e:	eb 0d                	jmp    c001c05d <Sys::systemCall(regs*, void*)+0x33>
c001c050:	52                   	push   edx
c001c051:	52                   	push   edx
c001c052:	50                   	push   eax
c001c053:	68 6d b9 02 c0       	push   0xc002b96d
c001c058:	e8 72 66 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c001c05d:	83 c4 10             	add    esp,0x10
c001c060:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c065:	31 d2                	xor    edx,edx
c001c067:	83 c4 08             	add    esp,0x8
c001c06a:	5b                   	pop    ebx
c001c06b:	c3                   	ret    

c001c06c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c06c:	55                   	push   ebp
c001c06d:	57                   	push   edi
c001c06e:	56                   	push   esi
c001c06f:	53                   	push   ebx
c001c070:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c076:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c07d:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c084:	85 c0                	test   eax,eax
c001c086:	0f 95 c1             	setne  cl
c001c089:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c091:	0f 94 c2             	sete   dl
c001c094:	84 d1                	test   cl,dl
c001c096:	74 23                	je     c001c0bb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c098:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c09e:	74 1b                	je     c001c0bb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c0a0:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c0a6:	89 da                	mov    edx,ebx
c001c0a8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c0ae:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c0b4:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c0bb:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c0c2:	05 ff 0f 00 00       	add    eax,0xfff
c001c0c7:	83 ec 0c             	sub    esp,0xc
c001c0ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c0ce:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c0d4:	c1 e8 0c             	shr    eax,0xc
c001c0d7:	89 fe                	mov    esi,edi
c001c0d9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c0dd:	c1 ee 0c             	shr    esi,0xc
c001c0e0:	6a 01                	push   0x1
c001c0e2:	e8 38 51 ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c001c0e7:	89 c5                	mov    ebp,eax
c001c0e9:	58                   	pop    eax
c001c0ea:	5a                   	pop    edx
c001c0eb:	56                   	push   esi
c001c0ec:	68 81 b9 02 c0       	push   0xc002b981
c001c0f1:	e8 d9 65 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c001c0f6:	59                   	pop    ecx
c001c0f7:	58                   	pop    eax
c001c0f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c0fc:	68 93 b9 02 c0       	push   0xc002b993
c001c101:	e8 c9 65 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c001c106:	83 c4 10             	add    esp,0x10
c001c109:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c10f:	0f 86 31 01 00 00    	jbe    c001c246 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c115:	c1 e6 0c             	shl    esi,0xc
c001c118:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c11b:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c11e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c122:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c129:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c12c:	01 df                	add    edi,ebx
c001c12e:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c131:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c135:	0f 84 08 01 00 00    	je     c001c243 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c13b:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c141:	76 05                	jbe    c001c148 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c143:	bf 00 10 00 00       	mov    edi,0x1000
c001c148:	83 ec 0c             	sub    esp,0xc
c001c14b:	31 d2                	xor    edx,edx
c001c14d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c154:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c156:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c15a:	50                   	push   eax
c001c15b:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c15f:	56                   	push   esi
c001c160:	52                   	push   edx
c001c161:	57                   	push   edi
c001c162:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c169:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c16c:	83 c4 20             	add    esp,0x20
c001c16f:	85 c0                	test   eax,eax
c001c171:	74 0a                	je     c001c17d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c173:	53                   	push   ebx
c001c174:	53                   	push   ebx
c001c175:	50                   	push   eax
c001c176:	68 a5 b9 02 c0       	push   0xc002b9a5
c001c17b:	eb 0f                	jmp    c001c18c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c17d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c181:	74 20                	je     c001c1a3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c183:	51                   	push   ecx
c001c184:	51                   	push   ecx
c001c185:	6a 00                	push   0x0
c001c187:	68 d0 b9 02 c0       	push   0xc002b9d0
c001c18c:	e8 3e 65 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c001c191:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c194:	e8 cc 54 ff ff       	call   c0011665 <Virt::freeKernelVirtualPages(unsigned long)>
c001c199:	83 c4 10             	add    esp,0x10
c001c19c:	31 c0                	xor    eax,eax
c001c19e:	e9 68 01 00 00       	jmp    c001c30b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c1a3:	fa                   	cli    
c001c1a4:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001c1aa:	e8 e6 37 ff ff       	call   c000f995 <Phys::allocatePage()>
c001c1af:	6a 07                	push   0x7
c001c1b1:	89 c7                	mov    edi,eax
c001c1b3:	55                   	push   ebp
c001c1b4:	50                   	push   eax
c001c1b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1ba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1bd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1c3:	e8 14 58 ff ff       	call   c00119dc <VAS::mapPage(unsigned long, unsigned long, int)>
c001c1c8:	83 c4 0c             	add    esp,0xc
c001c1cb:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c1d2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1d8:	6a 00                	push   0x0
c001c1da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1df:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1e2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1e8:	e8 49 56 ff ff       	call   c0011836 <VAS::mapOtherVASIn(bool, VAS*)>
c001c1ed:	58                   	pop    eax
c001c1ee:	5a                   	pop    edx
c001c1ef:	68 07 0c 00 00       	push   0xc07
c001c1f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c1f8:	57                   	push   edi
c001c1f9:	89 ef                	mov    edi,ebp
c001c1fb:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c202:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c208:	6a 00                	push   0x0
c001c20a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c20f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c212:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c218:	e8 7b 5b ff ff       	call   c0011d98 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c21d:	b9 00 10 00 00       	mov    ecx,0x1000
c001c222:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c224:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001c229:	83 c4 20             	add    esp,0x20
c001c22c:	48                   	dec    eax
c001c22d:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001c232:	85 c0                	test   eax,eax
c001c234:	75 01                	jne    c001c237 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c236:	fb                   	sti    
c001c237:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c23e:	e9 df fe ff ff       	jmp    c001c122 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c243:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c246:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c24e:	0f 86 a9 00 00 00    	jbe    c001c2fd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c254:	fa                   	cli    
c001c255:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001c25b:	51                   	push   ecx
c001c25c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c263:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c269:	6a 00                	push   0x0
c001c26b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c270:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c273:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c279:	e8 b8 55 ff ff       	call   c0011836 <VAS::mapOtherVASIn(bool, VAS*)>
c001c27e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c282:	c1 e6 0c             	shl    esi,0xc
c001c285:	01 de                	add    esi,ebx
c001c287:	83 c4 10             	add    esp,0x10
c001c28a:	39 de                	cmp    esi,ebx
c001c28c:	74 61                	je     c001c2ef <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c28e:	e8 02 37 ff ff       	call   c000f995 <Phys::allocatePage()>
c001c293:	6a 07                	push   0x7
c001c295:	89 c7                	mov    edi,eax
c001c297:	55                   	push   ebp
c001c298:	50                   	push   eax
c001c299:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c29e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2a1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2a7:	e8 30 57 ff ff       	call   c00119dc <VAS::mapPage(unsigned long, unsigned long, int)>
c001c2ac:	58                   	pop    eax
c001c2ad:	5a                   	pop    edx
c001c2ae:	68 07 0c 00 00       	push   0xc07
c001c2b3:	53                   	push   ebx
c001c2b4:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c2ba:	57                   	push   edi
c001c2bb:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c2c2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2c8:	6a 00                	push   0x0
c001c2ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2cf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2d2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2d8:	e8 bb 5a ff ff       	call   c0011d98 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c2dd:	83 c4 1c             	add    esp,0x1c
c001c2e0:	68 00 10 00 00       	push   0x1000
c001c2e5:	6a 00                	push   0x0
c001c2e7:	55                   	push   ebp
c001c2e8:	e8 63 44 fe ff       	call   c0000750 <memset>
c001c2ed:	eb 98                	jmp    c001c287 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c2ef:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001c2f4:	48                   	dec    eax
c001c2f5:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001c2fa:	75 01                	jne    c001c2fd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c2fc:	fb                   	sti    
c001c2fd:	83 ec 0c             	sub    esp,0xc
c001c300:	55                   	push   ebp
c001c301:	e8 5f 53 ff ff       	call   c0011665 <Virt::freeKernelVirtualPages(unsigned long)>
c001c306:	83 c4 10             	add    esp,0x10
c001c309:	b0 01                	mov    al,0x1
c001c30b:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c311:	5b                   	pop    ebx
c001c312:	5e                   	pop    esi
c001c313:	5f                   	pop    edi
c001c314:	5d                   	pop    ebp
c001c315:	c3                   	ret    

c001c316 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c316:	55                   	push   ebp
c001c317:	57                   	push   edi
c001c318:	56                   	push   esi
c001c319:	53                   	push   ebx
c001c31a:	83 ec 48             	sub    esp,0x48
c001c31d:	68 14 01 00 00       	push   0x114
c001c322:	e8 72 32 ff ff       	call   c000f599 <malloc>
c001c327:	83 c4 0c             	add    esp,0xc
c001c32a:	89 c6                	mov    esi,eax
c001c32c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c330:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c334:	50                   	push   eax
c001c335:	e8 f4 68 ff ff       	call   c0012c2e <File::File(char const*, Process*)>
c001c33a:	58                   	pop    eax
c001c33b:	5a                   	pop    edx
c001c33c:	6a 01                	push   0x1
c001c33e:	56                   	push   esi
c001c33f:	e8 4e 69 ff ff       	call   c0012c92 <File::open(FileOpenMode)>
c001c344:	83 c4 10             	add    esp,0x10
c001c347:	85 c0                	test   eax,eax
c001c349:	0f 85 47 01 00 00    	jne    c001c496 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c34f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c357:	83 ec 0c             	sub    esp,0xc
c001c35a:	6a 34                	push   0x34
c001c35c:	e8 38 32 ff ff       	call   c000f599 <malloc>
c001c361:	89 c3                	mov    ebx,eax
c001c363:	58                   	pop    eax
c001c364:	8b 06                	mov    eax,DWORD PTR [esi]
c001c366:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c36a:	57                   	push   edi
c001c36b:	53                   	push   ebx
c001c36c:	6a 00                	push   0x0
c001c36e:	6a 34                	push   0x34
c001c370:	56                   	push   esi
c001c371:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c374:	83 c4 20             	add    esp,0x20
c001c377:	85 c0                	test   eax,eax
c001c379:	0f 85 17 01 00 00    	jne    c001c496 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c37f:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c385:	0f 85 0b 01 00 00    	jne    c001c496 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c38b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c38e:	85 c0                	test   eax,eax
c001c390:	0f 84 00 01 00 00    	je     c001c496 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c396:	31 d2                	xor    edx,edx
c001c398:	55                   	push   ebp
c001c399:	52                   	push   edx
c001c39a:	50                   	push   eax
c001c39b:	56                   	push   esi
c001c39c:	e8 af 69 ff ff       	call   c0012d50 <File::seek(unsigned long long)>
c001c3a1:	83 c4 10             	add    esp,0x10
c001c3a4:	85 c0                	test   eax,eax
c001c3a6:	0f 85 ea 00 00 00    	jne    c001c496 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3ac:	83 ec 0c             	sub    esp,0xc
c001c3af:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c3b2:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c3b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c3ba:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c3be:	0f af c2             	imul   eax,edx
c001c3c1:	50                   	push   eax
c001c3c2:	e8 d2 31 ff ff       	call   c000f599 <malloc>
c001c3c7:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c3c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c3cd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c3d0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c3d4:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c3d8:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c3dc:	0f af c2             	imul   eax,edx
c001c3df:	99                   	cdq    
c001c3e0:	52                   	push   edx
c001c3e1:	50                   	push   eax
c001c3e2:	56                   	push   esi
c001c3e3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c3e6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c3e9:	83 c4 20             	add    esp,0x20
c001c3ec:	85 c0                	test   eax,eax
c001c3ee:	0f 84 a2 00 00 00    	je     c001c496 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3f4:	31 d2                	xor    edx,edx
c001c3f6:	51                   	push   ecx
c001c3f7:	52                   	push   edx
c001c3f8:	50                   	push   eax
c001c3f9:	56                   	push   esi
c001c3fa:	e8 51 69 ff ff       	call   c0012d50 <File::seek(unsigned long long)>
c001c3ff:	83 c4 10             	add    esp,0x10
c001c402:	85 c0                	test   eax,eax
c001c404:	0f 85 8c 00 00 00    	jne    c001c496 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c40a:	83 ec 0c             	sub    esp,0xc
c001c40d:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c411:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c415:	31 ed                	xor    ebp,ebp
c001c417:	0f af c2             	imul   eax,edx
c001c41a:	50                   	push   eax
c001c41b:	e8 79 31 ff ff       	call   c000f599 <malloc>
c001c420:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c422:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c426:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c429:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c42d:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c431:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c435:	0f af c2             	imul   eax,edx
c001c438:	99                   	cdq    
c001c439:	52                   	push   edx
c001c43a:	50                   	push   eax
c001c43b:	56                   	push   esi
c001c43c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c43f:	83 c4 20             	add    esp,0x20
c001c442:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c44a:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c44e:	0f 86 80 00 00 00    	jbe    c001c4d4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c454:	0f b7 fd             	movzx  edi,bp
c001c457:	c1 e7 05             	shl    edi,0x5
c001c45a:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c45e:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c461:	75 6b                	jne    c001c4ce <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c463:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c466:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c46a:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c46d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c471:	52                   	push   edx
c001c472:	31 d2                	xor    edx,edx
c001c474:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c477:	52                   	push   edx
c001c478:	50                   	push   eax
c001c479:	56                   	push   esi
c001c47a:	e8 d1 68 ff ff       	call   c0012d50 <File::seek(unsigned long long)>
c001c47f:	83 c4 10             	add    esp,0x10
c001c482:	85 c0                	test   eax,eax
c001c484:	74 17                	je     c001c49d <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c486:	83 ec 0c             	sub    esp,0xc
c001c489:	68 fc b9 02 c0       	push   0xc002b9fc
c001c48e:	e8 3c 62 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c001c493:	83 c4 10             	add    esp,0x10
c001c496:	31 c0                	xor    eax,eax
c001c498:	e9 87 00 00 00       	jmp    c001c524 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c49d:	83 ec 0c             	sub    esp,0xc
c001c4a0:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c4a3:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c4a6:	50                   	push   eax
c001c4a7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c4ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c4af:	56                   	push   esi
c001c4b0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c4b4:	e8 b3 fb ff ff       	call   c001c06c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c4b9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c4bd:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c4c1:	83 c4 20             	add    esp,0x20
c001c4c4:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c4c8:	73 04                	jae    c001c4ce <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c4ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c4ce:	45                   	inc    ebp
c001c4cf:	e9 76 ff ff ff       	jmp    c001c44a <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c4d4:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c4d8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c4dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4e0:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c4e6:	83 ec 0c             	sub    esp,0xc
c001c4e9:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c4ef:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c4f4:	05 00 10 00 00       	add    eax,0x1000
c001c4f9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c4fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c500:	e8 a4 30 ff ff       	call   c000f5a9 <free>
c001c505:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c508:	e8 9c 30 ff ff       	call   c000f5a9 <free>
c001c50d:	58                   	pop    eax
c001c50e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c512:	e8 92 30 ff ff       	call   c000f5a9 <free>
c001c517:	89 34 24             	mov    DWORD PTR [esp],esi
c001c51a:	e8 d1 67 ff ff       	call   c0012cf0 <File::close()>
c001c51f:	83 c4 10             	add    esp,0x10
c001c522:	b0 01                	mov    al,0x1
c001c524:	83 c4 3c             	add    esp,0x3c
c001c527:	5b                   	pop    ebx
c001c528:	5e                   	pop    esi
c001c529:	5f                   	pop    edi
c001c52a:	5d                   	pop    ebp
c001c52b:	c3                   	ret    

c001c52c <Thr::runtimeReferenceHelper()>:
c001c52c:	83 ec 18             	sub    esp,0x18
c001c52f:	68 04 ba 02 c0       	push   0xc002ba04
c001c534:	e8 96 61 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c001c539:	fa                   	cli    
c001c53a:	83 c4 10             	add    esp,0x10
c001c53d:	eb fe                	jmp    c001c53d <Thr::runtimeReferenceHelper()+0x11>

c001c53f <Thr::getAddressOfKernelSymbol(char const*)>:
c001c53f:	57                   	push   edi
c001c540:	56                   	push   esi
c001c541:	53                   	push   ebx
c001c542:	31 db                	xor    ebx,ebx
c001c544:	39 1d c0 0e 03 c0    	cmp    DWORD PTR ds:0xc0030ec0,ebx
c001c54a:	7e 3c                	jle    c001c588 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c54c:	8b 34 9d 40 0e 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcf1c0]
c001c553:	31 ff                	xor    edi,edi
c001c555:	39 3c 9d 40 0d 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcf2c0],edi
c001c55c:	7e 27                	jle    c001c585 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c55e:	50                   	push   eax
c001c55f:	50                   	push   eax
c001c560:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c564:	8b 06                	mov    eax,DWORD PTR [esi]
c001c566:	03 04 9d c0 0d 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcf240]
c001c56d:	50                   	push   eax
c001c56e:	e8 25 43 fe ff       	call   c0000898 <strcmp>
c001c573:	83 c4 10             	add    esp,0x10
c001c576:	85 c0                	test   eax,eax
c001c578:	75 05                	jne    c001c57f <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c57a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c57d:	eb 0b                	jmp    c001c58a <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c57f:	83 c6 10             	add    esi,0x10
c001c582:	47                   	inc    edi
c001c583:	eb d0                	jmp    c001c555 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c585:	43                   	inc    ebx
c001c586:	eb bc                	jmp    c001c544 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c588:	31 c0                	xor    eax,eax
c001c58a:	5b                   	pop    ebx
c001c58b:	5e                   	pop    esi
c001c58c:	5f                   	pop    edi
c001c58d:	c3                   	ret    

c001c58e <Thr::loadKernelSymbolTable(char const*)>:
c001c58e:	55                   	push   ebp
c001c58f:	57                   	push   edi
c001c590:	56                   	push   esi
c001c591:	53                   	push   ebx
c001c592:	83 ec 68             	sub    esp,0x68
c001c595:	8b 35 10 0f 03 c0    	mov    esi,DWORD PTR ds:0xc0030f10
c001c59b:	68 14 01 00 00       	push   0x114
c001c5a0:	e8 f4 2f ff ff       	call   c000f599 <malloc>
c001c5a5:	83 c4 0c             	add    esp,0xc
c001c5a8:	89 c3                	mov    ebx,eax
c001c5aa:	56                   	push   esi
c001c5ab:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c5af:	50                   	push   eax
c001c5b0:	e8 79 66 ff ff       	call   c0012c2e <File::File(char const*, Process*)>
c001c5b5:	5e                   	pop    esi
c001c5b6:	5f                   	pop    edi
c001c5b7:	6a 01                	push   0x1
c001c5b9:	53                   	push   ebx
c001c5ba:	e8 d3 66 ff ff       	call   c0012c92 <File::open(FileOpenMode)>
c001c5bf:	83 c4 10             	add    esp,0x10
c001c5c2:	85 c0                	test   eax,eax
c001c5c4:	74 0a                	je     c001c5d0 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c5c6:	83 ec 0c             	sub    esp,0xc
c001c5c9:	68 26 ba 02 c0       	push   0xc002ba26
c001c5ce:	eb 34                	jmp    c001c604 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c5d0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c5d8:	83 ec 0c             	sub    esp,0xc
c001c5db:	6a 34                	push   0x34
c001c5dd:	e8 b7 2f ff ff       	call   c000f599 <malloc>
c001c5e2:	59                   	pop    ecx
c001c5e3:	89 c7                	mov    edi,eax
c001c5e5:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c5e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c5eb:	56                   	push   esi
c001c5ec:	57                   	push   edi
c001c5ed:	6a 00                	push   0x0
c001c5ef:	6a 34                	push   0x34
c001c5f1:	53                   	push   ebx
c001c5f2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c5f5:	83 c4 20             	add    esp,0x20
c001c5f8:	85 c0                	test   eax,eax
c001c5fa:	74 17                	je     c001c613 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c5fc:	83 ec 0c             	sub    esp,0xc
c001c5ff:	68 3d ba 02 c0       	push   0xc002ba3d
c001c604:	e8 32 d8 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c001c609:	83 c4 10             	add    esp,0x10
c001c60c:	31 c0                	xor    eax,eax
c001c60e:	e9 31 02 00 00       	jmp    c001c844 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c613:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c619:	75 e1                	jne    c001c5fc <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c61b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c61e:	85 c0                	test   eax,eax
c001c620:	74 da                	je     c001c5fc <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c622:	52                   	push   edx
c001c623:	31 d2                	xor    edx,edx
c001c625:	52                   	push   edx
c001c626:	50                   	push   eax
c001c627:	53                   	push   ebx
c001c628:	e8 23 67 ff ff       	call   c0012d50 <File::seek(unsigned long long)>
c001c62d:	83 c4 10             	add    esp,0x10
c001c630:	85 c0                	test   eax,eax
c001c632:	75 c8                	jne    c001c5fc <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c634:	83 ec 0c             	sub    esp,0xc
c001c637:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c63b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c63f:	31 ed                	xor    ebp,ebp
c001c641:	0f af c2             	imul   eax,edx
c001c644:	50                   	push   eax
c001c645:	e8 4f 2f ff ff       	call   c000f599 <malloc>
c001c64a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c64c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c650:	89 34 24             	mov    DWORD PTR [esp],esi
c001c653:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c657:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c65b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c65f:	0f af c2             	imul   eax,edx
c001c662:	99                   	cdq    
c001c663:	52                   	push   edx
c001c664:	50                   	push   eax
c001c665:	53                   	push   ebx
c001c666:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c669:	83 c4 20             	add    esp,0x20
c001c66c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c674:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c67c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c684:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c68c:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c690:	0f 86 aa 00 00 00    	jbe    c001c740 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c696:	0f b7 f5             	movzx  esi,bp
c001c699:	6b f6 28             	imul   esi,esi,0x28
c001c69c:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c6a0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c6a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c6a7:	50                   	push   eax
c001c6a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c6ac:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c6b0:	8b 16                	mov    edx,DWORD PTR [esi]
c001c6b2:	6b c0 28             	imul   eax,eax,0x28
c001c6b5:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c6b9:	89 d0                	mov    eax,edx
c001c6bb:	31 d2                	xor    edx,edx
c001c6bd:	52                   	push   edx
c001c6be:	50                   	push   eax
c001c6bf:	53                   	push   ebx
c001c6c0:	e8 8b 66 ff ff       	call   c0012d50 <File::seek(unsigned long long)>
c001c6c5:	83 c4 0c             	add    esp,0xc
c001c6c8:	6a 20                	push   0x20
c001c6ca:	6a 00                	push   0x0
c001c6cc:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c6d0:	52                   	push   edx
c001c6d1:	e8 7a 40 fe ff       	call   c0000750 <memset>
c001c6d6:	58                   	pop    eax
c001c6d7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c6d9:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c6dd:	51                   	push   ecx
c001c6de:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c6e2:	52                   	push   edx
c001c6e3:	6a 00                	push   0x0
c001c6e5:	6a 1f                	push   0x1f
c001c6e7:	53                   	push   ebx
c001c6e8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c6eb:	83 c4 18             	add    esp,0x18
c001c6ee:	68 54 ba 02 c0       	push   0xc002ba54
c001c6f3:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c6f7:	52                   	push   edx
c001c6f8:	e8 9b 41 fe ff       	call   c0000898 <strcmp>
c001c6fd:	83 c4 10             	add    esp,0x10
c001c700:	85 c0                	test   eax,eax
c001c702:	75 0f                	jne    c001c713 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c704:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c707:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c70b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c70f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c713:	50                   	push   eax
c001c714:	50                   	push   eax
c001c715:	68 5c ba 02 c0       	push   0xc002ba5c
c001c71a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c71e:	50                   	push   eax
c001c71f:	e8 74 41 fe ff       	call   c0000898 <strcmp>
c001c724:	83 c4 10             	add    esp,0x10
c001c727:	85 c0                	test   eax,eax
c001c729:	75 0f                	jne    c001c73a <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c72b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c72e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c732:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c736:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c73a:	45                   	inc    ebp
c001c73b:	e9 4c ff ff ff       	jmp    c001c68c <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c740:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c745:	75 10                	jne    c001c757 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c747:	83 ec 0c             	sub    esp,0xc
c001c74a:	68 64 ba 02 c0       	push   0xc002ba64
c001c74f:	e8 e7 d6 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c001c754:	83 c4 10             	add    esp,0x10
c001c757:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c75c:	75 10                	jne    c001c76e <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c75e:	83 ec 0c             	sub    esp,0xc
c001c761:	68 64 ba 02 c0       	push   0xc002ba64
c001c766:	e8 d0 d6 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c001c76b:	83 c4 10             	add    esp,0x10
c001c76e:	31 d2                	xor    edx,edx
c001c770:	50                   	push   eax
c001c771:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c775:	52                   	push   edx
c001c776:	50                   	push   eax
c001c777:	53                   	push   ebx
c001c778:	e8 d3 65 ff ff       	call   c0012d50 <File::seek(unsigned long long)>
c001c77d:	5a                   	pop    edx
c001c77e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c782:	e8 12 2e ff ff       	call   c000f599 <malloc>
c001c787:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c78b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c78f:	31 c9                	xor    ecx,ecx
c001c791:	5e                   	pop    esi
c001c792:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c794:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c798:	55                   	push   ebp
c001c799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c79d:	51                   	push   ecx
c001c79e:	52                   	push   edx
c001c79f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c7a3:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c7a7:	53                   	push   ebx
c001c7a8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c7ab:	83 c4 14             	add    esp,0x14
c001c7ae:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c7b2:	e8 e2 2d ff ff       	call   c000f599 <malloc>
c001c7b7:	89 c6                	mov    esi,eax
c001c7b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c7bb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c7be:	56                   	push   esi
c001c7bf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c7c3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c7c7:	51                   	push   ecx
c001c7c8:	52                   	push   edx
c001c7c9:	53                   	push   ebx
c001c7ca:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c7cd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c7d1:	8b 15 c0 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030ec0
c001c7d7:	83 c4 1c             	add    esp,0x1c
c001c7da:	c1 e8 04             	shr    eax,0x4
c001c7dd:	89 04 95 40 0d 03 c0 	mov    DWORD PTR [edx*4-0x3ffcf2c0],eax
c001c7e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c7e8:	31 d2                	xor    edx,edx
c001c7ea:	52                   	push   edx
c001c7eb:	50                   	push   eax
c001c7ec:	53                   	push   ebx
c001c7ed:	e8 5e 65 ff ff       	call   c0012d50 <File::seek(unsigned long long)>
c001c7f2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c7f4:	31 d2                	xor    edx,edx
c001c7f6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c7f9:	56                   	push   esi
c001c7fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c7fe:	52                   	push   edx
c001c7ff:	50                   	push   eax
c001c800:	53                   	push   ebx
c001c801:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c804:	83 c4 14             	add    esp,0x14
c001c807:	53                   	push   ebx
c001c808:	e8 e3 64 ff ff       	call   c0012cf0 <File::close()>
c001c80d:	5d                   	pop    ebp
c001c80e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c812:	e8 92 2d ff ff       	call   c000f5a9 <free>
c001c817:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c81a:	e8 8a 2d ff ff       	call   c000f5a9 <free>
c001c81f:	a1 c0 0e 03 c0       	mov    eax,ds:0xc0030ec0
c001c824:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c828:	8d 50 01             	lea    edx,[eax+0x1]
c001c82b:	89 0c 85 40 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf1c0],ecx
c001c832:	89 34 85 c0 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf240],esi
c001c839:	89 15 c0 0e 03 c0    	mov    DWORD PTR ds:0xc0030ec0,edx
c001c83f:	83 c4 10             	add    esp,0x10
c001c842:	b0 01                	mov    al,0x1
c001c844:	83 c4 5c             	add    esp,0x5c
c001c847:	5b                   	pop    ebx
c001c848:	5e                   	pop    esi
c001c849:	5f                   	pop    edi
c001c84a:	5d                   	pop    ebp
c001c84b:	c3                   	ret    

c001c84c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c84c:	55                   	push   ebp
c001c84d:	57                   	push   edi
c001c84e:	56                   	push   esi
c001c84f:	53                   	push   ebx
c001c850:	81 ec 68 03 00 00    	sub    esp,0x368
c001c856:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c85d:	8b 1d 10 0f 03 c0    	mov    ebx,DWORD PTR ds:0xc0030f10
c001c863:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c867:	68 14 01 00 00       	push   0x114
c001c86c:	e8 28 2d ff ff       	call   c000f599 <malloc>
c001c871:	83 c4 0c             	add    esp,0xc
c001c874:	89 c5                	mov    ebp,eax
c001c876:	53                   	push   ebx
c001c877:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c87e:	50                   	push   eax
c001c87f:	e8 aa 63 ff ff       	call   c0012c2e <File::File(char const*, Process*)>
c001c884:	5e                   	pop    esi
c001c885:	5f                   	pop    edi
c001c886:	6a 01                	push   0x1
c001c888:	55                   	push   ebp
c001c889:	e8 04 64 ff ff       	call   c0012c92 <File::open(FileOpenMode)>
c001c88e:	83 c4 10             	add    esp,0x10
c001c891:	85 c0                	test   eax,eax
c001c893:	0f 85 a7 06 00 00    	jne    c001cf40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c899:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c8a1:	83 ec 0c             	sub    esp,0xc
c001c8a4:	6a 34                	push   0x34
c001c8a6:	e8 ee 2c ff ff       	call   c000f599 <malloc>
c001c8ab:	5b                   	pop    ebx
c001c8ac:	89 c7                	mov    edi,eax
c001c8ae:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c8b2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c8b5:	53                   	push   ebx
c001c8b6:	57                   	push   edi
c001c8b7:	6a 00                	push   0x0
c001c8b9:	6a 34                	push   0x34
c001c8bb:	55                   	push   ebp
c001c8bc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c8bf:	83 c4 20             	add    esp,0x20
c001c8c2:	85 c0                	test   eax,eax
c001c8c4:	0f 85 76 06 00 00    	jne    c001cf40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8ca:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c8d0:	0f 85 6a 06 00 00    	jne    c001cf40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8d6:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c8d9:	85 c0                	test   eax,eax
c001c8db:	0f 84 5f 06 00 00    	je     c001cf40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8e1:	31 d2                	xor    edx,edx
c001c8e3:	51                   	push   ecx
c001c8e4:	52                   	push   edx
c001c8e5:	50                   	push   eax
c001c8e6:	55                   	push   ebp
c001c8e7:	e8 64 64 ff ff       	call   c0012d50 <File::seek(unsigned long long)>
c001c8ec:	83 c4 10             	add    esp,0x10
c001c8ef:	85 c0                	test   eax,eax
c001c8f1:	0f 85 49 06 00 00    	jne    c001cf40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8f7:	83 ec 0c             	sub    esp,0xc
c001c8fa:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c8fd:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c901:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c905:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c909:	0f af c2             	imul   eax,edx
c001c90c:	50                   	push   eax
c001c90d:	e8 87 2c ff ff       	call   c000f599 <malloc>
c001c912:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c915:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c919:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c91c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c920:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c924:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c928:	0f af c2             	imul   eax,edx
c001c92b:	99                   	cdq    
c001c92c:	52                   	push   edx
c001c92d:	50                   	push   eax
c001c92e:	55                   	push   ebp
c001c92f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c932:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c935:	83 c4 20             	add    esp,0x20
c001c938:	85 c0                	test   eax,eax
c001c93a:	0f 84 00 06 00 00    	je     c001cf40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c940:	52                   	push   edx
c001c941:	31 d2                	xor    edx,edx
c001c943:	52                   	push   edx
c001c944:	50                   	push   eax
c001c945:	55                   	push   ebp
c001c946:	e8 05 64 ff ff       	call   c0012d50 <File::seek(unsigned long long)>
c001c94b:	83 c4 10             	add    esp,0x10
c001c94e:	85 c0                	test   eax,eax
c001c950:	0f 85 ea 05 00 00    	jne    c001cf40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c956:	83 ec 0c             	sub    esp,0xc
c001c959:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c95d:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c961:	31 f6                	xor    esi,esi
c001c963:	0f af c2             	imul   eax,edx
c001c966:	50                   	push   eax
c001c967:	e8 2d 2c ff ff       	call   c000f599 <malloc>
c001c96c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c96f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c973:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c976:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c97a:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c97e:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c982:	0f af c2             	imul   eax,edx
c001c985:	99                   	cdq    
c001c986:	52                   	push   edx
c001c987:	50                   	push   eax
c001c988:	55                   	push   ebp
c001c989:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c98c:	83 c4 20             	add    esp,0x20
c001c98f:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c993:	0f 86 8a 00 00 00    	jbe    c001ca23 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c999:	0f b7 de             	movzx  ebx,si
c001c99c:	c1 e3 05             	shl    ebx,0x5
c001c99f:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c9a3:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c9a6:	75 75                	jne    c001ca1d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c9a8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c9ab:	31 d2                	xor    edx,edx
c001c9ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c9b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c9b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c9b8:	50                   	push   eax
c001c9b9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c9bc:	52                   	push   edx
c001c9bd:	50                   	push   eax
c001c9be:	55                   	push   ebp
c001c9bf:	e8 8c 63 ff ff       	call   c0012d50 <File::seek(unsigned long long)>
c001c9c4:	83 c4 10             	add    esp,0x10
c001c9c7:	85 c0                	test   eax,eax
c001c9c9:	0f 85 71 05 00 00    	jne    c001cf40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c9cf:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c9d6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c9d9:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001c9dd:	31 d2                	xor    edx,edx
c001c9df:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c9e3:	83 ec 0c             	sub    esp,0xc
c001c9e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c9ea:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c9f1:	50                   	push   eax
c001c9f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c9f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9fa:	52                   	push   edx
c001c9fb:	50                   	push   eax
c001c9fc:	55                   	push   ebp
c001c9fd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca00:	83 c4 1c             	add    esp,0x1c
c001ca03:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ca06:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001ca09:	50                   	push   eax
c001ca0a:	6a 00                	push   0x0
c001ca0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca10:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001ca14:	50                   	push   eax
c001ca15:	e8 36 3d fe ff       	call   c0000750 <memset>
c001ca1a:	83 c4 10             	add    esp,0x10
c001ca1d:	46                   	inc    esi
c001ca1e:	e9 6c ff ff ff       	jmp    c001c98f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001ca23:	53                   	push   ebx
c001ca24:	31 db                	xor    ebx,ebx
c001ca26:	68 00 01 00 00       	push   0x100
c001ca2b:	6a 00                	push   0x0
c001ca2d:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001ca31:	50                   	push   eax
c001ca32:	e8 19 3d fe ff       	call   c0000750 <memset>
c001ca37:	83 c4 0c             	add    esp,0xc
c001ca3a:	68 00 01 00 00       	push   0x100
c001ca3f:	6a 00                	push   0x0
c001ca41:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001ca48:	50                   	push   eax
c001ca49:	e8 02 3d fe ff       	call   c0000750 <memset>
c001ca4e:	83 c4 10             	add    esp,0x10
c001ca51:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ca59:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ca61:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001ca69:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ca71:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001ca79:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001ca7d:	0f 86 30 01 00 00    	jbe    c001cbb3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001ca83:	0f b7 f3             	movzx  esi,bx
c001ca86:	6b f6 28             	imul   esi,esi,0x28
c001ca89:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ca8d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ca90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ca94:	52                   	push   edx
c001ca95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ca99:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001ca9d:	8b 06                	mov    eax,DWORD PTR [esi]
c001ca9f:	6b d2 28             	imul   edx,edx,0x28
c001caa2:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001caa6:	31 d2                	xor    edx,edx
c001caa8:	52                   	push   edx
c001caa9:	50                   	push   eax
c001caaa:	55                   	push   ebp
c001caab:	e8 a0 62 ff ff       	call   c0012d50 <File::seek(unsigned long long)>
c001cab0:	83 c4 0c             	add    esp,0xc
c001cab3:	6a 20                	push   0x20
c001cab5:	6a 00                	push   0x0
c001cab7:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cabe:	51                   	push   ecx
c001cabf:	e8 8c 3c fe ff       	call   c0000750 <memset>
c001cac4:	59                   	pop    ecx
c001cac5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cac8:	8d 54 24 58          	lea    edx,[esp+0x58]
c001cacc:	52                   	push   edx
c001cacd:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001cad4:	51                   	push   ecx
c001cad5:	6a 00                	push   0x0
c001cad7:	6a 1f                	push   0x1f
c001cad9:	55                   	push   ebp
c001cada:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cadd:	83 c4 1c             	add    esp,0x1c
c001cae0:	6a 09                	push   0x9
c001cae2:	68 7e ba 02 c0       	push   0xc002ba7e
c001cae7:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001caee:	51                   	push   ecx
c001caef:	e8 58 3b fe ff       	call   c000064c <memcmp>
c001caf4:	83 c4 10             	add    esp,0x10
c001caf7:	85 c0                	test   eax,eax
c001caf9:	75 21                	jne    c001cb1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001cafb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001caff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cb03:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cb07:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cb0b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb0e:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cb15:	89 d0                	mov    eax,edx
c001cb17:	40                   	inc    eax
c001cb18:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb1c:	50                   	push   eax
c001cb1d:	6a 09                	push   0x9
c001cb1f:	68 88 ba 02 c0       	push   0xc002ba88
c001cb24:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb2b:	50                   	push   eax
c001cb2c:	e8 1b 3b fe ff       	call   c000064c <memcmp>
c001cb31:	83 c4 10             	add    esp,0x10
c001cb34:	85 c0                	test   eax,eax
c001cb36:	75 21                	jne    c001cb59 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001cb38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cb40:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cb44:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cb48:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb4b:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cb52:	89 d0                	mov    eax,edx
c001cb54:	40                   	inc    eax
c001cb55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb59:	50                   	push   eax
c001cb5a:	50                   	push   eax
c001cb5b:	68 54 ba 02 c0       	push   0xc002ba54
c001cb60:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb67:	50                   	push   eax
c001cb68:	e8 2b 3d fe ff       	call   c0000898 <strcmp>
c001cb6d:	83 c4 10             	add    esp,0x10
c001cb70:	85 c0                	test   eax,eax
c001cb72:	75 0f                	jne    c001cb83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001cb74:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb77:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cb83:	50                   	push   eax
c001cb84:	50                   	push   eax
c001cb85:	68 5c ba 02 c0       	push   0xc002ba5c
c001cb8a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb91:	50                   	push   eax
c001cb92:	e8 01 3d fe ff       	call   c0000898 <strcmp>
c001cb97:	83 c4 10             	add    esp,0x10
c001cb9a:	85 c0                	test   eax,eax
c001cb9c:	75 0f                	jne    c001cbad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001cb9e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cba1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cba5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cba9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001cbad:	43                   	inc    ebx
c001cbae:	e9 c6 fe ff ff       	jmp    c001ca79 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001cbb3:	31 d2                	xor    edx,edx
c001cbb5:	50                   	push   eax
c001cbb6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cbba:	52                   	push   edx
c001cbbb:	50                   	push   eax
c001cbbc:	55                   	push   ebp
c001cbbd:	e8 8e 61 ff ff       	call   c0012d50 <File::seek(unsigned long long)>
c001cbc2:	58                   	pop    eax
c001cbc3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cbc7:	e8 cd 29 ff ff       	call   c000f599 <malloc>
c001cbcc:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cbcf:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cbd3:	31 d2                	xor    edx,edx
c001cbd5:	58                   	pop    eax
c001cbd6:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cbda:	53                   	push   ebx
c001cbdb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cbdf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cbe3:	52                   	push   edx
c001cbe4:	50                   	push   eax
c001cbe5:	55                   	push   ebp
c001cbe6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbe9:	83 c4 14             	add    esp,0x14
c001cbec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cbf0:	e8 a4 29 ff ff       	call   c000f599 <malloc>
c001cbf5:	31 d2                	xor    edx,edx
c001cbf7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cbfb:	83 c4 0c             	add    esp,0xc
c001cbfe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cc02:	52                   	push   edx
c001cc03:	50                   	push   eax
c001cc04:	55                   	push   ebp
c001cc05:	e8 46 61 ff ff       	call   c0012d50 <File::seek(unsigned long long)>
c001cc0a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cc0d:	31 d2                	xor    edx,edx
c001cc0f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc12:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cc16:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc1a:	52                   	push   edx
c001cc1b:	50                   	push   eax
c001cc1c:	55                   	push   ebp
c001cc1d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc20:	83 c4 20             	add    esp,0x20
c001cc23:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cc2b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cc2f:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001cc33:	0f 84 0b 03 00 00    	je     c001cf44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001cc39:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001cc40:	31 d2                	xor    edx,edx
c001cc42:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc46:	c1 e8 03             	shr    eax,0x3
c001cc49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001cc4d:	51                   	push   ecx
c001cc4e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc52:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001cc56:	52                   	push   edx
c001cc57:	50                   	push   eax
c001cc58:	55                   	push   ebp
c001cc59:	e8 f2 60 ff ff       	call   c0012d50 <File::seek(unsigned long long)>
c001cc5e:	5b                   	pop    ebx
c001cc5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc63:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001cc6a:	e8 2a 29 ff ff       	call   c000f599 <malloc>
c001cc6f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cc72:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cc76:	31 d2                	xor    edx,edx
c001cc78:	5e                   	pop    esi
c001cc79:	8d 44 24 58          	lea    eax,[esp+0x58]
c001cc7d:	50                   	push   eax
c001cc7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc82:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cc86:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001cc8d:	52                   	push   edx
c001cc8e:	50                   	push   eax
c001cc8f:	55                   	push   ebp
c001cc90:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc93:	83 c4 20             	add    esp,0x20
c001cc96:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cc9e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001cca2:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001cca6:	0f 8d 7c 02 00 00    	jge    c001cf28 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001ccac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ccb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccb4:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001ccb9:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001ccbc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ccc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccc4:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001ccc8:	89 d8                	mov    eax,ebx
c001ccca:	c1 e8 08             	shr    eax,0x8
c001cccd:	89 c6                	mov    esi,eax
c001cccf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ccd3:	c1 e6 04             	shl    esi,0x4
c001ccd6:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001ccda:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001ccdd:	85 d2                	test   edx,edx
c001ccdf:	0f 85 bf 00 00 00    	jne    c001cda4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cce5:	83 ec 0c             	sub    esp,0xc
c001cce8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ccec:	03 06                	add    eax,DWORD PTR [esi]
c001ccee:	50                   	push   eax
c001ccef:	e8 4b f8 ff ff       	call   c001c53f <Thr::getAddressOfKernelSymbol(char const*)>
c001ccf4:	83 c4 10             	add    esp,0x10
c001ccf7:	89 c2                	mov    edx,eax
c001ccf9:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001ccfe:	85 c0                	test   eax,eax
c001cd00:	0f 85 9e 00 00 00    	jne    c001cda4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cd06:	83 ec 0c             	sub    esp,0xc
c001cd09:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd0d:	03 06                	add    eax,DWORD PTR [esi]
c001cd0f:	50                   	push   eax
c001cd10:	e8 2a 18 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001cd15:	83 c4 10             	add    esp,0x10
c001cd18:	89 c2                	mov    edx,eax
c001cd1a:	85 c0                	test   eax,eax
c001cd1c:	0f 85 82 00 00 00    	jne    c001cda4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cd22:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001cd26:	50                   	push   eax
c001cd27:	50                   	push   eax
c001cd28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd2c:	03 06                	add    eax,DWORD PTR [esi]
c001cd2e:	50                   	push   eax
c001cd2f:	68 92 ba 02 c0       	push   0xc002ba92
c001cd34:	e8 96 59 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c001cd39:	58                   	pop    eax
c001cd3a:	5a                   	pop    edx
c001cd3b:	68 ac ba 02 c0       	push   0xc002baac
c001cd40:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd47:	50                   	push   eax
c001cd48:	e8 bf 3a fe ff       	call   c000080c <strcpy>
c001cd4d:	59                   	pop    ecx
c001cd4e:	58                   	pop    eax
c001cd4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd53:	03 06                	add    eax,DWORD PTR [esi]
c001cd55:	50                   	push   eax
c001cd56:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd5d:	50                   	push   eax
c001cd5e:	e8 e9 3b fe ff       	call   c000094c <strcat>
c001cd63:	58                   	pop    eax
c001cd64:	5a                   	pop    edx
c001cd65:	68 42 bb 02 c0       	push   0xc002bb42
c001cd6a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd71:	50                   	push   eax
c001cd72:	e8 d5 3b fe ff       	call   c000094c <strcat>
c001cd77:	83 c4 10             	add    esp,0x10
c001cd7a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cd7f:	0f 84 5d 01 00 00    	je     c001cee2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cd85:	83 ec 0c             	sub    esp,0xc
c001cd88:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd8f:	50                   	push   eax
c001cd90:	e8 a6 d0 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c001cd95:	83 c4 10             	add    esp,0x10
c001cd98:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001cd9c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cda0:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001cda4:	80 fb 01             	cmp    bl,0x1
c001cda7:	0f 85 88 00 00 00    	jne    c001ce35 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001cdad:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001cdb4:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cdb8:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001cdbc:	01 ce                	add    esi,ecx
c001cdbe:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cdc4:	0f 94 c0             	sete   al
c001cdc7:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cdcd:	0f 94 c3             	sete   bl
c001cdd0:	09 c3                	or     ebx,eax
c001cdd2:	8b 06                	mov    eax,DWORD PTR [esi]
c001cdd4:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cdd9:	74 41                	je     c001ce1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001cddb:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001cdde:	84 db                	test   bl,bl
c001cde0:	75 15                	jne    c001cdf7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001cde2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cde6:	66 83 f8 0c          	cmp    ax,0xc
c001cdea:	76 05                	jbe    c001cdf1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001cdec:	b8 0c 00 00 00       	mov    eax,0xc
c001cdf1:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cdf5:	76 37                	jbe    c001ce2e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cdf7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001cdfb:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ce00:	0f 84 dc 00 00 00    	je     c001cee2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001ce06:	83 ec 0c             	sub    esp,0xc
c001ce09:	68 c3 ba 02 c0       	push   0xc002bac3
c001ce0e:	e8 28 d0 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c001ce13:	83 c4 10             	add    esp,0x10
c001ce16:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ce1a:	eb 12                	jmp    c001ce2e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ce1c:	01 c1                	add    ecx,eax
c001ce1e:	84 db                	test   bl,bl
c001ce20:	75 0c                	jne    c001ce2e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ce22:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce26:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ce2a:	77 02                	ja     c001ce2e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ce2c:	01 d1                	add    ecx,edx
c001ce2e:	89 0e                	mov    DWORD PTR [esi],ecx
c001ce30:	e9 ea 00 00 00       	jmp    c001cf1f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001ce35:	80 fb 02             	cmp    bl,0x2
c001ce38:	75 7c                	jne    c001ceb6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001ce3a:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001ce41:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001ce45:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001ce49:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001ce4f:	74 20                	je     c001ce71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001ce51:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001ce57:	74 18                	je     c001ce71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001ce59:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce5d:	b9 0a 00 00 00       	mov    ecx,0xa
c001ce62:	66 83 f8 0e          	cmp    ax,0xe
c001ce66:	77 03                	ja     c001ce6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001ce68:	8d 48 fc             	lea    ecx,[eax-0x4]
c001ce6b:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001ce6f:	76 1f                	jbe    c001ce90 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001ce71:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001ce75:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ce7a:	74 66                	je     c001cee2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001ce7c:	83 ec 0c             	sub    esp,0xc
c001ce7f:	68 df ba 02 c0       	push   0xc002badf
c001ce84:	e8 b2 cf ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c001ce89:	83 c4 10             	add    esp,0x10
c001ce8c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ce90:	8b 06                	mov    eax,DWORD PTR [esi]
c001ce92:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001ce97:	74 13                	je     c001ceac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001ce99:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ce9d:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001cea4:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001cea8:	01 c8                	add    eax,ecx
c001ceaa:	eb 04                	jmp    c001ceb0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001ceac:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001ceb0:	01 c2                	add    edx,eax
c001ceb2:	89 16                	mov    DWORD PTR [esi],edx
c001ceb4:	eb 69                	jmp    c001cf1f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001ceb6:	0f b6 db             	movzx  ebx,bl
c001ceb9:	50                   	push   eax
c001ceba:	50                   	push   eax
c001cebb:	53                   	push   ebx
c001cebc:	68 fb ba 02 c0       	push   0xc002bafb
c001cec1:	e8 09 58 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c001cec6:	83 c4 10             	add    esp,0x10
c001cec9:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cece:	74 12                	je     c001cee2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001ced0:	83 ec 0c             	sub    esp,0xc
c001ced3:	68 06 bb 02 c0       	push   0xc002bb06
c001ced8:	e8 5e cf ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c001cedd:	83 c4 10             	add    esp,0x10
c001cee0:	eb 3d                	jmp    c001cf1f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cee2:	83 ec 0c             	sub    esp,0xc
c001cee5:	55                   	push   ebp
c001cee6:	e8 05 5e ff ff       	call   c0012cf0 <File::close()>
c001ceeb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ceee:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cef1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cef4:	59                   	pop    ecx
c001cef5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cef9:	e8 ab 26 ff ff       	call   c000f5a9 <free>
c001cefe:	5b                   	pop    ebx
c001ceff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf03:	e8 a1 26 ff ff       	call   c000f5a9 <free>
c001cf08:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf0b:	e8 99 26 ff ff       	call   c000f5a9 <free>
c001cf10:	5e                   	pop    esi
c001cf11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf15:	e8 8f 26 ff ff       	call   c000f5a9 <free>
c001cf1a:	83 c4 10             	add    esp,0x10
c001cf1d:	eb 21                	jmp    c001cf40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cf1f:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001cf23:	e9 76 fd ff ff       	jmp    c001cc9e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001cf28:	83 ec 0c             	sub    esp,0xc
c001cf2b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf2f:	e8 75 26 ff ff       	call   c000f5a9 <free>
c001cf34:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001cf38:	83 c4 10             	add    esp,0x10
c001cf3b:	e9 eb fc ff ff       	jmp    c001cc2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001cf40:	31 c0                	xor    eax,eax
c001cf42:	eb 33                	jmp    c001cf77 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001cf44:	83 ec 0c             	sub    esp,0xc
c001cf47:	55                   	push   ebp
c001cf48:	e8 a3 5d ff ff       	call   c0012cf0 <File::close()>
c001cf4d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cf50:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf53:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cf56:	58                   	pop    eax
c001cf57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf5b:	e8 49 26 ff ff       	call   c000f5a9 <free>
c001cf60:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf63:	e8 41 26 ff ff       	call   c000f5a9 <free>
c001cf68:	5a                   	pop    edx
c001cf69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf6d:	e8 37 26 ff ff       	call   c000f5a9 <free>
c001cf72:	83 c4 10             	add    esp,0x10
c001cf75:	b0 01                	mov    al,0x1
c001cf77:	81 c4 5c 03 00 00    	add    esp,0x35c
c001cf7d:	5b                   	pop    ebx
c001cf7e:	5e                   	pop    esi
c001cf7f:	5f                   	pop    edi
c001cf80:	5d                   	pop    ebp
c001cf81:	c3                   	ret    

c001cf82 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001cf82:	56                   	push   esi
c001cf83:	31 d2                	xor    edx,edx
c001cf85:	53                   	push   ebx
c001cf86:	8b 1d 20 07 03 c0    	mov    ebx,DWORD PTR ds:0xc0030720
c001cf8c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cf90:	39 d3                	cmp    ebx,edx
c001cf92:	7e 1b                	jle    c001cfaf <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001cf94:	8b 04 95 40 09 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcf6c0]
c001cf9b:	39 c8                	cmp    eax,ecx
c001cf9d:	77 0d                	ja     c001cfac <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001cf9f:	8b 34 95 40 07 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcf8c0]
c001cfa6:	01 c6                	add    esi,eax
c001cfa8:	39 ce                	cmp    esi,ecx
c001cfaa:	77 05                	ja     c001cfb1 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001cfac:	42                   	inc    edx
c001cfad:	eb e1                	jmp    c001cf90 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001cfaf:	31 c0                	xor    eax,eax
c001cfb1:	5b                   	pop    ebx
c001cfb2:	5e                   	pop    esi
c001cfb3:	c3                   	ret    

c001cfb4 <Thr::getDriverNameFromAddress(unsigned long)>:
c001cfb4:	53                   	push   ebx
c001cfb5:	31 c0                	xor    eax,eax
c001cfb7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cfbb:	8b 1d 20 07 03 c0    	mov    ebx,DWORD PTR ds:0xc0030720
c001cfc1:	39 c3                	cmp    ebx,eax
c001cfc3:	7e 22                	jle    c001cfe7 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001cfc5:	8b 14 85 40 09 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf6c0]
c001cfcc:	39 ca                	cmp    edx,ecx
c001cfce:	77 14                	ja     c001cfe4 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cfd0:	03 14 85 40 07 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcf8c0]
c001cfd7:	39 ca                	cmp    edx,ecx
c001cfd9:	76 09                	jbe    c001cfe4 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cfdb:	8b 04 85 40 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf4c0]
c001cfe2:	eb 05                	jmp    c001cfe9 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001cfe4:	40                   	inc    eax
c001cfe5:	eb da                	jmp    c001cfc1 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001cfe7:	31 c0                	xor    eax,eax
c001cfe9:	5b                   	pop    ebx
c001cfea:	c3                   	ret    

c001cfeb <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001cfeb:	53                   	push   ebx
c001cfec:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001cff0:	53                   	push   ebx
c001cff1:	e8 8c ff ff ff       	call   c001cf82 <Thr::getDriverBaseFromAddress(unsigned long)>
c001cff6:	5a                   	pop    edx
c001cff7:	31 d2                	xor    edx,edx
c001cff9:	85 c0                	test   eax,eax
c001cffb:	74 04                	je     c001d001 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001cffd:	89 da                	mov    edx,ebx
c001cfff:	29 c2                	sub    edx,eax
c001d001:	89 d0                	mov    eax,edx
c001d003:	5b                   	pop    ebx
c001d004:	c3                   	ret    

c001d005 <Thr::loadDLL(char const*, bool)>:
c001d005:	55                   	push   ebp
c001d006:	57                   	push   edi
c001d007:	56                   	push   esi
c001d008:	53                   	push   ebx
c001d009:	81 ec 34 01 00 00    	sub    esp,0x134
c001d00f:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d016:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d01d:	56                   	push   esi
c001d01e:	68 1e bb 02 c0       	push   0xc002bb1e
c001d023:	e8 a7 56 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c001d028:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d02f:	e8 65 25 ff ff       	call   c000f599 <malloc>
c001d034:	83 c4 0c             	add    esp,0xc
c001d037:	89 c3                	mov    ebx,eax
c001d039:	ff 35 10 0f 03 c0    	push   DWORD PTR ds:0xc0030f10
c001d03f:	56                   	push   esi
c001d040:	50                   	push   eax
c001d041:	e8 e8 5b ff ff       	call   c0012c2e <File::File(char const*, Process*)>
c001d046:	83 c4 10             	add    esp,0x10
c001d049:	85 db                	test   ebx,ebx
c001d04b:	75 3c                	jne    c001d089 <Thr::loadDLL(char const*, bool)+0x84>
c001d04d:	89 f8                	mov    eax,edi
c001d04f:	84 c0                	test   al,al
c001d051:	0f 84 d2 01 00 00    	je     c001d229 <Thr::loadDLL(char const*, bool)+0x224>
c001d057:	55                   	push   ebp
c001d058:	55                   	push   ebp
c001d059:	68 2f bb 02 c0       	push   0xc002bb2f
c001d05e:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d062:	55                   	push   ebp
c001d063:	e8 a4 37 fe ff       	call   c000080c <strcpy>
c001d068:	58                   	pop    eax
c001d069:	5a                   	pop    edx
c001d06a:	56                   	push   esi
c001d06b:	55                   	push   ebp
c001d06c:	e8 db 38 fe ff       	call   c000094c <strcat>
c001d071:	59                   	pop    ecx
c001d072:	58                   	pop    eax
c001d073:	68 42 bb 02 c0       	push   0xc002bb42
c001d078:	55                   	push   ebp
c001d079:	e8 ce 38 fe ff       	call   c000094c <strcat>
c001d07e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d081:	e8 b5 cd ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c001d086:	83 c4 10             	add    esp,0x10
c001d089:	51                   	push   ecx
c001d08a:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d08e:	50                   	push   eax
c001d08f:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d093:	50                   	push   eax
c001d094:	53                   	push   ebx
c001d095:	e8 a4 5e ff ff       	call   c0012f3e <File::stat(unsigned long long*, bool*)>
c001d09a:	83 c4 10             	add    esp,0x10
c001d09d:	85 db                	test   ebx,ebx
c001d09f:	74 0c                	je     c001d0ad <Thr::loadDLL(char const*, bool)+0xa8>
c001d0a1:	83 ec 0c             	sub    esp,0xc
c001d0a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d0a6:	53                   	push   ebx
c001d0a7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d0aa:	83 c4 10             	add    esp,0x10
c001d0ad:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d0b2:	75 0a                	jne    c001d0be <Thr::loadDLL(char const*, bool)+0xb9>
c001d0b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d0b8:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d0bc:	75 3c                	jne    c001d0fa <Thr::loadDLL(char const*, bool)+0xf5>
c001d0be:	89 f8                	mov    eax,edi
c001d0c0:	84 c0                	test   al,al
c001d0c2:	0f 84 49 01 00 00    	je     c001d211 <Thr::loadDLL(char const*, bool)+0x20c>
c001d0c8:	51                   	push   ecx
c001d0c9:	51                   	push   ecx
c001d0ca:	68 2f bb 02 c0       	push   0xc002bb2f
c001d0cf:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d0d3:	53                   	push   ebx
c001d0d4:	e8 33 37 fe ff       	call   c000080c <strcpy>
c001d0d9:	5d                   	pop    ebp
c001d0da:	58                   	pop    eax
c001d0db:	56                   	push   esi
c001d0dc:	53                   	push   ebx
c001d0dd:	e8 6a 38 fe ff       	call   c000094c <strcat>
c001d0e2:	58                   	pop    eax
c001d0e3:	5a                   	pop    edx
c001d0e4:	68 42 bb 02 c0       	push   0xc002bb42
c001d0e9:	53                   	push   ebx
c001d0ea:	e8 5d 38 fe ff       	call   c000094c <strcat>
c001d0ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0f2:	e8 44 cd ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c001d0f7:	83 c4 10             	add    esp,0x10
c001d0fa:	52                   	push   edx
c001d0fb:	6a 03                	push   0x3
c001d0fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d101:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d105:	05 ff 0f 00 00       	add    eax,0xfff
c001d10a:	83 d2 00             	adc    edx,0x0
c001d10d:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d111:	50                   	push   eax
c001d112:	ff 35 30 db 02 c0    	push   DWORD PTR ds:0xc002db30
c001d118:	e8 c1 49 ff ff       	call   c0011ade <VAS::allocatePages(int, int)>
c001d11d:	59                   	pop    ecx
c001d11e:	89 c3                	mov    ebx,eax
c001d120:	5d                   	pop    ebp
c001d121:	50                   	push   eax
c001d122:	68 b1 a0 02 c0       	push   0xc002a0b1
c001d127:	e8 a3 55 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c001d12c:	89 34 24             	mov    DWORD PTR [esp],esi
c001d12f:	e8 38 36 fe ff       	call   c000076c <strlen>
c001d134:	8b 2d 20 07 03 c0    	mov    ebp,DWORD PTR ds:0xc0030720
c001d13a:	40                   	inc    eax
c001d13b:	89 04 24             	mov    DWORD PTR [esp],eax
c001d13e:	e8 56 24 ff ff       	call   c000f599 <malloc>
c001d143:	89 04 ad 40 0b 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcf4c0],eax
c001d14a:	58                   	pop    eax
c001d14b:	a1 20 07 03 c0       	mov    eax,ds:0xc0030720
c001d150:	5a                   	pop    edx
c001d151:	56                   	push   esi
c001d152:	ff 34 85 40 0b 03 c0 	push   DWORD PTR [eax*4-0x3ffcf4c0]
c001d159:	e8 ae 36 fe ff       	call   c000080c <strcpy>
c001d15e:	a1 20 07 03 c0       	mov    eax,ds:0xc0030720
c001d163:	8d 50 01             	lea    edx,[eax+0x1]
c001d166:	89 1c 85 40 09 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf6c0],ebx
c001d16d:	89 15 20 07 03 c0    	mov    DWORD PTR ds:0xc0030720,edx
c001d173:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d177:	83 c4 0c             	add    esp,0xc
c001d17a:	89 14 85 40 07 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf8c0],edx
c001d181:	6a 01                	push   0x1
c001d183:	53                   	push   ebx
c001d184:	56                   	push   esi
c001d185:	e8 c2 f6 ff ff       	call   c001c84c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d18a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d18e:	83 c4 10             	add    esp,0x10
c001d191:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d196:	0f 85 89 00 00 00    	jne    c001d225 <Thr::loadDLL(char const*, bool)+0x220>
c001d19c:	89 f8                	mov    eax,edi
c001d19e:	84 c0                	test   al,al
c001d1a0:	74 73                	je     c001d215 <Thr::loadDLL(char const*, bool)+0x210>
c001d1a2:	83 ec 0c             	sub    esp,0xc
c001d1a5:	68 44 bb 02 c0       	push   0xc002bb44
c001d1aa:	e8 8c cc ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c001d1af:	83 c4 10             	add    esp,0x10
c001d1b2:	eb 61                	jmp    c001d215 <Thr::loadDLL(char const*, bool)+0x210>
c001d1b4:	50                   	push   eax
c001d1b5:	50                   	push   eax
c001d1b6:	89 e8                	mov    eax,ebp
c001d1b8:	c1 e0 0c             	shl    eax,0xc
c001d1bb:	01 d8                	add    eax,ebx
c001d1bd:	50                   	push   eax
c001d1be:	ff 35 30 db 02 c0    	push   DWORD PTR ds:0xc002db30
c001d1c4:	e8 7d 44 ff ff       	call   c0011646 <VAS::getPageTableEntry(unsigned long)>
c001d1c9:	83 c4 10             	add    esp,0x10
c001d1cc:	8b 00                	mov    eax,DWORD PTR [eax]
c001d1ce:	a8 60                	test   al,0x60
c001d1d0:	75 11                	jne    c001d1e3 <Thr::loadDLL(char const*, bool)+0x1de>
c001d1d2:	83 ec 0c             	sub    esp,0xc
c001d1d5:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d1da:	50                   	push   eax
c001d1db:	e8 44 27 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c001d1e0:	83 c4 10             	add    esp,0x10
c001d1e3:	45                   	inc    ebp
c001d1e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1e8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d1ec:	05 ff 0f 00 00       	add    eax,0xfff
c001d1f1:	bf 00 00 00 00       	mov    edi,0x0
c001d1f6:	83 d2 00             	adc    edx,0x0
c001d1f9:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d1fd:	c1 ea 0c             	shr    edx,0xc
c001d200:	39 c5                	cmp    ebp,eax
c001d202:	89 d1                	mov    ecx,edx
c001d204:	89 f8                	mov    eax,edi
c001d206:	19 c8                	sbb    eax,ecx
c001d208:	72 aa                	jb     c001d1b4 <Thr::loadDLL(char const*, bool)+0x1af>
c001d20a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d20f:	75 18                	jne    c001d229 <Thr::loadDLL(char const*, bool)+0x224>
c001d211:	31 db                	xor    ebx,ebx
c001d213:	eb 14                	jmp    c001d229 <Thr::loadDLL(char const*, bool)+0x224>
c001d215:	83 ec 0c             	sub    esp,0xc
c001d218:	68 63 bb 02 c0       	push   0xc002bb63
c001d21d:	e8 19 cc ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c001d222:	83 c4 10             	add    esp,0x10
c001d225:	31 ed                	xor    ebp,ebp
c001d227:	eb bb                	jmp    c001d1e4 <Thr::loadDLL(char const*, bool)+0x1df>
c001d229:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d22f:	89 d8                	mov    eax,ebx
c001d231:	5b                   	pop    ebx
c001d232:	5e                   	pop    esi
c001d233:	5f                   	pop    edi
c001d234:	5d                   	pop    ebp
c001d235:	c3                   	ret    

c001d236 <Thr::executeDLL(unsigned long, void*)>:
c001d236:	56                   	push   esi
c001d237:	53                   	push   ebx
c001d238:	52                   	push   edx
c001d239:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d23d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d241:	85 db                	test   ebx,ebx
c001d243:	75 10                	jne    c001d255 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d245:	83 ec 0c             	sub    esp,0xc
c001d248:	68 7f bb 02 c0       	push   0xc002bb7f
c001d24d:	e8 e9 cb ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c001d252:	83 c4 10             	add    esp,0x10
c001d255:	50                   	push   eax
c001d256:	50                   	push   eax
c001d257:	53                   	push   ebx
c001d258:	68 a9 bb 02 c0       	push   0xc002bba9
c001d25d:	e8 6d 54 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c001d262:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d266:	89 d8                	mov    eax,ebx
c001d268:	83 c4 14             	add    esp,0x14
c001d26b:	5b                   	pop    ebx
c001d26c:	5e                   	pop    esi
c001d26d:	ff e0                	jmp    eax
c001d26f:	90                   	nop

c001d270 <userModeEntryPoint(void*)>:
c001d270:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001d275:	48                   	dec    eax
c001d276:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001d27b:	75 01                	jne    c001d27e <userModeEntryPoint(void*)+0xe>
c001d27d:	fb                   	sti    
c001d27e:	fb                   	sti    
c001d27f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d284:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d287:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d28d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d291:	e9 94 30 fe ff       	jmp    c000032a <goToUsermode>

c001d296 <changeTSS>:
c001d296:	83 ec 14             	sub    esp,0x14
c001d299:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d29e:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d2a1:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d2a6:	c1 e2 15             	shl    edx,0x15
c001d2a9:	29 d0                	sub    eax,edx
c001d2ab:	50                   	push   eax
c001d2ac:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c001d2b1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d2b7:	05 7c 11 00 00       	add    eax,0x117c
c001d2bc:	50                   	push   eax
c001d2bd:	e8 b2 38 ff ff       	call   c0010b74 <TSS::setESP(unsigned long)>
c001d2c2:	83 c4 1c             	add    esp,0x1c
c001d2c5:	c3                   	ret    

c001d2c6 <switchToThread(ThreadControlBlock*)>:
c001d2c6:	57                   	push   edi
c001d2c7:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c001d2cc:	56                   	push   esi
c001d2cd:	85 c0                	test   eax,eax
c001d2cf:	53                   	push   ebx
c001d2d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d2d4:	0f 85 88 00 00 00    	jne    c001d362 <switchToThread(ThreadControlBlock*)+0x9c>
c001d2da:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d2dd:	3c ff                	cmp    al,0xff
c001d2df:	74 7d                	je     c001d35e <switchToThread(ThreadControlBlock*)+0x98>
c001d2e1:	0f b6 d0             	movzx  edx,al
c001d2e4:	b8 84 03 00 00       	mov    eax,0x384
c001d2e9:	29 d0                	sub    eax,edx
c001d2eb:	c1 e0 10             	shl    eax,0x10
c001d2ee:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d2f1:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d2f4:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c001d2f9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d2ff:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d306:	74 4a                	je     c001d352 <switchToThread(ThreadControlBlock*)+0x8c>
c001d308:	0f 31                	rdtsc  
c001d30a:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c001d30f:	89 c6                	mov    esi,eax
c001d311:	89 d7                	mov    edi,edx
c001d313:	2b 35 18 0f 03 c0    	sub    esi,DWORD PTR ds:0xc0030f18
c001d319:	89 15 2c 0f 03 c0    	mov    DWORD PTR ds:0xc0030f2c,edx
c001d31f:	1b 3d 1c 0f 03 c0    	sbb    edi,DWORD PTR ds:0xc0030f1c
c001d325:	89 35 20 0f 03 c0    	mov    DWORD PTR ds:0xc0030f20,esi
c001d32b:	a3 18 0f 03 c0       	mov    ds:0xc0030f18,eax
c001d330:	89 3d 24 0f 03 c0    	mov    DWORD PTR ds:0xc0030f24,edi
c001d336:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d33c:	89 15 1c 0f 03 c0    	mov    DWORD PTR ds:0xc0030f1c,edx
c001d342:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d345:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d348:	01 c6                	add    esi,eax
c001d34a:	11 d7                	adc    edi,edx
c001d34c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d34f:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d352:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d356:	5b                   	pop    ebx
c001d357:	5e                   	pop    esi
c001d358:	5f                   	pop    edi
c001d359:	e9 04 30 fe ff       	jmp    c0000362 <switchToThreadASM>
c001d35e:	31 c0                	xor    eax,eax
c001d360:	eb 8f                	jmp    c001d2f1 <switchToThread(ThreadControlBlock*)+0x2b>
c001d362:	5b                   	pop    ebx
c001d363:	c7 05 e0 0e 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030ee0,0x1
c001d36d:	5e                   	pop    esi
c001d36e:	5f                   	pop    edi
c001d36f:	c3                   	ret    

c001d370 <Process::addArgs(char**)>:
c001d370:	57                   	push   edi
c001d371:	56                   	push   esi
c001d372:	53                   	push   ebx
c001d373:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d377:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d37b:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d385:	85 ff                	test   edi,edi
c001d387:	74 3d                	je     c001d3c6 <Process::addArgs(char**)+0x56>
c001d389:	8b 07                	mov    eax,DWORD PTR [edi]
c001d38b:	85 c0                	test   eax,eax
c001d38d:	74 37                	je     c001d3c6 <Process::addArgs(char**)+0x56>
c001d38f:	31 db                	xor    ebx,ebx
c001d391:	83 ec 0c             	sub    esp,0xc
c001d394:	50                   	push   eax
c001d395:	e8 d2 33 fe ff       	call   c000076c <strlen>
c001d39a:	40                   	inc    eax
c001d39b:	89 04 24             	mov    DWORD PTR [esp],eax
c001d39e:	e8 f6 21 ff ff       	call   c000f599 <malloc>
c001d3a3:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d3aa:	5a                   	pop    edx
c001d3ab:	59                   	pop    ecx
c001d3ac:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d3af:	43                   	inc    ebx
c001d3b0:	50                   	push   eax
c001d3b1:	e8 56 34 fe ff       	call   c000080c <strcpy>
c001d3b6:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d3bc:	83 c4 10             	add    esp,0x10
c001d3bf:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d3c2:	85 c0                	test   eax,eax
c001d3c4:	75 cb                	jne    c001d391 <Process::addArgs(char**)+0x21>
c001d3c6:	5b                   	pop    ebx
c001d3c7:	5e                   	pop    esi
c001d3c8:	5f                   	pop    edi
c001d3c9:	c3                   	ret    

c001d3ca <Process::Process(char const*, Process*, char**)>:
c001d3ca:	56                   	push   esi
c001d3cb:	53                   	push   ebx
c001d3cc:	83 ec 14             	sub    esp,0x14
c001d3cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3d3:	05 0c 02 00 00       	add    eax,0x20c
c001d3d8:	bb 07 00 00 00       	mov    ebx,0x7
c001d3dd:	89 c6                	mov    esi,eax
c001d3df:	85 db                	test   ebx,ebx
c001d3e1:	78 12                	js     c001d3f5 <Process::Process(char const*, Process*, char**)+0x2b>
c001d3e3:	83 ec 0c             	sub    esp,0xc
c001d3e6:	56                   	push   esi
c001d3e7:	e8 9a b6 00 00       	call   c0028a86 <ThreadControlBlock::ThreadControlBlock()>
c001d3ec:	83 c4 10             	add    esp,0x10
c001d3ef:	83 c6 63             	add    esi,0x63
c001d3f2:	4b                   	dec    ebx
c001d3f3:	eb ea                	jmp    c001d3df <Process::Process(char const*, Process*, char**)+0x15>
c001d3f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3f9:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d400:	83 ec 0c             	sub    esp,0xc
c001d403:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d407:	e8 b8 c8 ff ff       	call   c0019cc4 <Krnl::newProcessEnv(Process*)>
c001d40c:	83 c4 10             	add    esp,0x10
c001d40f:	89 c2                	mov    edx,eax
c001d411:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d415:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d41b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d41f:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d428:	a1 50 cf 02 c0       	mov    eax,ds:0xc002cf50
c001d42d:	8d 50 01             	lea    edx,[eax+0x1]
c001d430:	89 15 50 cf 02 c0    	mov    DWORD PTR ds:0xc002cf50,edx
c001d436:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d43a:	89 02                	mov    DWORD PTR [edx],eax
c001d43c:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d444:	83 ec 0c             	sub    esp,0xc
c001d447:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d44b:	e8 49 21 ff ff       	call   c000f599 <malloc>
c001d450:	83 c4 10             	add    esp,0x10
c001d453:	89 c3                	mov    ebx,eax
c001d455:	83 ec 08             	sub    esp,0x8
c001d458:	6a 00                	push   0x0
c001d45a:	53                   	push   ebx
c001d45b:	e8 26 4a ff ff       	call   c0011e86 <VAS::VAS(bool)>
c001d460:	83 c4 10             	add    esp,0x10
c001d463:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d467:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d46d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d471:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d47b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d47f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d483:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d489:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d48d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d493:	85 c0                	test   eax,eax
c001d495:	74 42                	je     c001d4d9 <Process::Process(char const*, Process*, char**)+0x10f>
c001d497:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d49b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d4a1:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d4a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4ab:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d4b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4b5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d4bb:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d4c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4c5:	05 0c 01 00 00       	add    eax,0x10c
c001d4ca:	83 ec 08             	sub    esp,0x8
c001d4cd:	52                   	push   edx
c001d4ce:	50                   	push   eax
c001d4cf:	e8 38 33 fe ff       	call   c000080c <strcpy>
c001d4d4:	83 c4 10             	add    esp,0x10
c001d4d7:	eb 63                	jmp    c001d53c <Process::Process(char const*, Process*, char**)+0x172>
c001d4d9:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001d4e1:	83 ec 0c             	sub    esp,0xc
c001d4e4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d4e8:	e8 ac 20 ff ff       	call   c000f599 <malloc>
c001d4ed:	83 c4 10             	add    esp,0x10
c001d4f0:	89 c3                	mov    ebx,eax
c001d4f2:	83 ec 08             	sub    esp,0x8
c001d4f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d4f9:	53                   	push   ebx
c001d4fa:	e8 87 33 ff ff       	call   c0010886 <VgaText::VgaText(char const*)>
c001d4ff:	83 c4 10             	add    esp,0x10
c001d502:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d506:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d50c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d510:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d516:	83 ec 0c             	sub    esp,0xc
c001d519:	50                   	push   eax
c001d51a:	e8 26 2b ff ff       	call   c0010045 <addToTerminalCycle(VgaText*)>
c001d51f:	83 c4 10             	add    esp,0x10
c001d522:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d526:	05 0c 01 00 00       	add    eax,0x10c
c001d52b:	83 ec 08             	sub    esp,0x8
c001d52e:	68 c8 bb 02 c0       	push   0xc002bbc8
c001d533:	50                   	push   eax
c001d534:	e8 d3 32 fe ff       	call   c000080c <strcpy>
c001d539:	83 c4 10             	add    esp,0x10
c001d53c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d540:	83 c0 0c             	add    eax,0xc
c001d543:	83 ec 08             	sub    esp,0x8
c001d546:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d54a:	50                   	push   eax
c001d54b:	e8 bc 32 fe ff       	call   c000080c <strcpy>
c001d550:	83 c4 10             	add    esp,0x10
c001d553:	83 ec 08             	sub    esp,0x8
c001d556:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d55a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d55e:	e8 0d fe ff ff       	call   c001d370 <Process::addArgs(char**)>
c001d563:	83 c4 10             	add    esp,0x10
c001d566:	83 ec 08             	sub    esp,0x8
c001d569:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d56d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d571:	e8 a0 ed ff ff       	call   c001c316 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d576:	83 c4 10             	add    esp,0x10
c001d579:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d57d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d581:	83 f0 01             	xor    eax,0x1
c001d584:	88 c2                	mov    dl,al
c001d586:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d58a:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d590:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d595:	83 ec 08             	sub    esp,0x8
c001d598:	50                   	push   eax
c001d599:	68 20 bc 02 c0       	push   0xc002bc20
c001d59e:	e8 2c 51 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c001d5a3:	83 c4 10             	add    esp,0x10
c001d5a6:	90                   	nop
c001d5a7:	83 c4 14             	add    esp,0x14
c001d5aa:	5b                   	pop    ebx
c001d5ab:	5e                   	pop    esi
c001d5ac:	c3                   	ret    
c001d5ad:	90                   	nop

c001d5ae <Process::Process(bool, char const*, Process*, char**)>:
c001d5ae:	56                   	push   esi
c001d5af:	53                   	push   ebx
c001d5b0:	83 ec 24             	sub    esp,0x24
c001d5b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d5b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d5bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5bf:	05 0c 02 00 00       	add    eax,0x20c
c001d5c4:	bb 07 00 00 00       	mov    ebx,0x7
c001d5c9:	89 c6                	mov    esi,eax
c001d5cb:	85 db                	test   ebx,ebx
c001d5cd:	78 12                	js     c001d5e1 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d5cf:	83 ec 0c             	sub    esp,0xc
c001d5d2:	56                   	push   esi
c001d5d3:	e8 ae b4 00 00       	call   c0028a86 <ThreadControlBlock::ThreadControlBlock()>
c001d5d8:	83 c4 10             	add    esp,0x10
c001d5db:	83 c6 63             	add    esi,0x63
c001d5de:	4b                   	dec    ebx
c001d5df:	eb ea                	jmp    c001d5cb <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d5e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5e5:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d5ec:	83 ec 0c             	sub    esp,0xc
c001d5ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d5f3:	e8 cc c6 ff ff       	call   c0019cc4 <Krnl::newProcessEnv(Process*)>
c001d5f8:	83 c4 10             	add    esp,0x10
c001d5fb:	89 c2                	mov    edx,eax
c001d5fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d601:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d607:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d60b:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d614:	a1 50 cf 02 c0       	mov    eax,ds:0xc002cf50
c001d619:	8d 50 01             	lea    edx,[eax+0x1]
c001d61c:	89 15 50 cf 02 c0    	mov    DWORD PTR ds:0xc002cf50,edx
c001d622:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d626:	89 02                	mov    DWORD PTR [edx],eax
c001d628:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001d630:	83 ec 0c             	sub    esp,0xc
c001d633:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d637:	e8 5d 1f ff ff       	call   c000f599 <malloc>
c001d63c:	83 c4 10             	add    esp,0x10
c001d63f:	89 c3                	mov    ebx,eax
c001d641:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d646:	83 ec 08             	sub    esp,0x8
c001d649:	50                   	push   eax
c001d64a:	53                   	push   ebx
c001d64b:	e8 36 48 ff ff       	call   c0011e86 <VAS::VAS(bool)>
c001d650:	83 c4 10             	add    esp,0x10
c001d653:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d657:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d65d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d661:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d66b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d66f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d673:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d679:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d67d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d683:	85 c0                	test   eax,eax
c001d685:	74 42                	je     c001d6c9 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d687:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d68b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d691:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d697:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d69b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d6a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6a5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d6ab:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d6b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6b5:	05 0c 01 00 00       	add    eax,0x10c
c001d6ba:	83 ec 08             	sub    esp,0x8
c001d6bd:	52                   	push   edx
c001d6be:	50                   	push   eax
c001d6bf:	e8 48 31 fe ff       	call   c000080c <strcpy>
c001d6c4:	83 c4 10             	add    esp,0x10
c001d6c7:	eb 63                	jmp    c001d72c <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d6c9:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001d6d1:	83 ec 0c             	sub    esp,0xc
c001d6d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d6d8:	e8 bc 1e ff ff       	call   c000f599 <malloc>
c001d6dd:	83 c4 10             	add    esp,0x10
c001d6e0:	89 c3                	mov    ebx,eax
c001d6e2:	83 ec 08             	sub    esp,0x8
c001d6e5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d6e9:	53                   	push   ebx
c001d6ea:	e8 97 31 ff ff       	call   c0010886 <VgaText::VgaText(char const*)>
c001d6ef:	83 c4 10             	add    esp,0x10
c001d6f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6f6:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d6fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d700:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d706:	83 ec 0c             	sub    esp,0xc
c001d709:	50                   	push   eax
c001d70a:	e8 36 29 ff ff       	call   c0010045 <addToTerminalCycle(VgaText*)>
c001d70f:	83 c4 10             	add    esp,0x10
c001d712:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d716:	05 0c 01 00 00       	add    eax,0x10c
c001d71b:	83 ec 08             	sub    esp,0x8
c001d71e:	68 c8 bb 02 c0       	push   0xc002bbc8
c001d723:	50                   	push   eax
c001d724:	e8 e3 30 fe ff       	call   c000080c <strcpy>
c001d729:	83 c4 10             	add    esp,0x10
c001d72c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d730:	83 c0 0c             	add    eax,0xc
c001d733:	83 ec 08             	sub    esp,0x8
c001d736:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d73a:	50                   	push   eax
c001d73b:	e8 cc 30 fe ff       	call   c000080c <strcpy>
c001d740:	83 c4 10             	add    esp,0x10
c001d743:	83 ec 08             	sub    esp,0x8
c001d746:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d74a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d74e:	e8 1d fc ff ff       	call   c001d370 <Process::addArgs(char**)>
c001d753:	83 c4 10             	add    esp,0x10
c001d756:	90                   	nop
c001d757:	83 c4 24             	add    esp,0x24
c001d75a:	5b                   	pop    ebx
c001d75b:	5e                   	pop    esi
c001d75c:	c3                   	ret    

c001d75d <taskStartupFunction>:
c001d75d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d762:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d765:	c3                   	ret    

c001d766 <Semaphore::Semaphore(int)>:
c001d766:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d76a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d76e:	89 10                	mov    DWORD PTR [eax],edx
c001d770:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d774:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d77b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d77f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d786:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d78a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d791:	90                   	nop
c001d792:	c3                   	ret    
c001d793:	90                   	nop

c001d794 <Mutex::Mutex()>:
c001d794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d798:	6a 01                	push   0x1
c001d79a:	50                   	push   eax
c001d79b:	e8 c6 ff ff ff       	call   c001d766 <Semaphore::Semaphore(int)>
c001d7a0:	83 c4 08             	add    esp,0x8
c001d7a3:	90                   	nop
c001d7a4:	c3                   	ret    
c001d7a5:	90                   	nop

c001d7a6 <Process::createThread(void (*)(void*), void*, int)>:
c001d7a6:	55                   	push   ebp
c001d7a7:	31 c9                	xor    ecx,ecx
c001d7a9:	57                   	push   edi
c001d7aa:	56                   	push   esi
c001d7ab:	53                   	push   ebx
c001d7ac:	83 ec 1c             	sub    esp,0x1c
c001d7af:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d7b3:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d7ba:	89 f2                	mov    edx,esi
c001d7bc:	0f b7 c2             	movzx  eax,dx
c001d7bf:	83 e2 01             	and    edx,0x1
c001d7c2:	74 16                	je     c001d7da <Process::createThread(void (*)(void*), void*, int)+0x34>
c001d7c4:	d1 f8                	sar    eax,1
c001d7c6:	41                   	inc    ecx
c001d7c7:	89 c2                	mov    edx,eax
c001d7c9:	83 f9 10             	cmp    ecx,0x10
c001d7cc:	75 ee                	jne    c001d7bc <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d7ce:	83 c4 1c             	add    esp,0x1c
c001d7d1:	31 db                	xor    ebx,ebx
c001d7d3:	89 d8                	mov    eax,ebx
c001d7d5:	5b                   	pop    ebx
c001d7d6:	5e                   	pop    esi
c001d7d7:	5f                   	pop    edi
c001d7d8:	5d                   	pop    ebp
c001d7d9:	c3                   	ret    
c001d7da:	b8 01 00 00 00       	mov    eax,0x1
c001d7df:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d7e2:	d3 e0                	shl    eax,cl
c001d7e4:	09 c6                	or     esi,eax
c001d7e6:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001d7e9:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d7f0:	89 c6                	mov    esi,eax
c001d7f2:	c1 e6 05             	shl    esi,0x5
c001d7f5:	01 f0                	add    eax,esi
c001d7f7:	01 d8                	add    eax,ebx
c001d7f9:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001d800:	75 0a                	jne    c001d80c <Process::createThread(void (*)(void*), void*, int)+0x66>
c001d802:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001d80c:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d812:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d816:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001d819:	01 ca                	add    edx,ecx
c001d81b:	83 ec 08             	sub    esp,0x8
c001d81e:	89 d0                	mov    eax,edx
c001d820:	c1 e0 05             	shl    eax,0x5
c001d823:	01 d0                	add    eax,edx
c001d825:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001d829:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d82d:	01 d8                	add    eax,ebx
c001d82f:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001d835:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001d83b:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d841:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d847:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d84d:	89 cd                	mov    ebp,ecx
c001d84f:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001d853:	f7 dd                	neg    ebp
c001d855:	c1 e5 15             	shl    ebp,0x15
c001d858:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001d85e:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001d864:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d86e:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001d874:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d87e:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d888:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d88c:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001d893:	53                   	push   ebx
c001d894:	68 04 0f 03 c0       	push   0xc0030f04
c001d899:	e8 a2 af 00 00       	call   c0028840 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d89e:	89 d8                	mov    eax,ebx
c001d8a0:	83 c4 10             	add    esp,0x10
c001d8a3:	83 c4 1c             	add    esp,0x1c
c001d8a6:	5b                   	pop    ebx
c001d8a7:	5e                   	pop    esi
c001d8a8:	5f                   	pop    edi
c001d8a9:	5d                   	pop    ebp
c001d8aa:	c3                   	ret    
c001d8ab:	90                   	nop

c001d8ac <Process::createUserThread()>:
c001d8ac:	83 ec 0c             	sub    esp,0xc
c001d8af:	68 80 00 00 00       	push   0x80
c001d8b4:	6a 00                	push   0x0
c001d8b6:	68 70 d2 01 c0       	push   0xc001d270
c001d8bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d8bf:	e8 e2 fe ff ff       	call   c001d7a6 <Process::createThread(void (*)(void*), void*, int)>
c001d8c4:	83 c4 1c             	add    esp,0x1c
c001d8c7:	c3                   	ret    

c001d8c8 <setupMultitasking(void (*)())>:
c001d8c8:	56                   	push   esi
c001d8c9:	53                   	push   ebx
c001d8ca:	51                   	push   ecx
c001d8cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d8cf:	eb 10                	jmp    c001d8e1 <setupMultitasking(void (*)())+0x19>
c001d8d1:	83 ec 0c             	sub    esp,0xc
c001d8d4:	68 04 0f 03 c0       	push   0xc0030f04
c001d8d9:	e8 b4 ae 00 00       	call   c0028792 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d8de:	83 c4 10             	add    esp,0x10
c001d8e1:	83 ec 0c             	sub    esp,0xc
c001d8e4:	68 04 0f 03 c0       	push   0xc0030f04
c001d8e9:	e8 80 ae 00 00       	call   c002876e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d8ee:	83 c4 10             	add    esp,0x10
c001d8f1:	84 c0                	test   al,al
c001d8f3:	74 dc                	je     c001d8d1 <setupMultitasking(void (*)())+0x9>
c001d8f5:	83 ec 0c             	sub    esp,0xc
c001d8f8:	68 3f 07 00 00       	push   0x73f
c001d8fd:	e8 97 1c ff ff       	call   c000f599 <malloc>
c001d902:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d909:	89 c3                	mov    ebx,eax
c001d90b:	6a 00                	push   0x0
c001d90d:	68 cc bb 02 c0       	push   0xc002bbcc
c001d912:	6a 01                	push   0x1
c001d914:	50                   	push   eax
c001d915:	e8 94 fc ff ff       	call   c001d5ae <Process::Process(bool, char const*, Process*, char**)>
c001d91a:	83 c4 14             	add    esp,0x14
c001d91d:	89 1d 10 0f 03 c0    	mov    DWORD PTR ds:0xc0030f10,ebx
c001d923:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d929:	e8 25 2a ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c001d92e:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d936:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001d940:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d946:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d949:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d953:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d959:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d95f:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d969:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d973:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d97d:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d983:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d98d:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d993:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d99d:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d9a3:	58                   	pop    eax
c001d9a4:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d9aa:	5a                   	pop    edx
c001d9ab:	68 c8 bb 02 c0       	push   0xc002bbc8
c001d9b0:	50                   	push   eax
c001d9b1:	e8 56 2e fe ff       	call   c000080c <strcpy>
c001d9b6:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d9bd:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d9c1:	83 c4 14             	add    esp,0x14
c001d9c4:	5b                   	pop    ebx
c001d9c5:	5e                   	pop    esi
c001d9c6:	e9 89 29 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001d9cb <schedule()>:
c001d9cb:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c001d9d0:	85 c0                	test   eax,eax
c001d9d2:	74 0b                	je     c001d9df <schedule()+0x14>
c001d9d4:	c7 05 e0 0e 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030ee0,0x1
c001d9de:	c3                   	ret    
c001d9df:	53                   	push   ebx
c001d9e0:	83 ec 14             	sub    esp,0x14
c001d9e3:	68 04 0f 03 c0       	push   0xc0030f04
c001d9e8:	e8 81 ad 00 00       	call   c002876e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d9ed:	83 c4 10             	add    esp,0x10
c001d9f0:	84 c0                	test   al,al
c001d9f2:	75 38                	jne    c001da2c <schedule()+0x61>
c001d9f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9f9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d9fc:	4a                   	dec    edx
c001d9fd:	74 32                	je     c001da31 <schedule()+0x66>
c001d9ff:	83 ec 0c             	sub    esp,0xc
c001da02:	68 04 0f 03 c0       	push   0xc0030f04
c001da07:	e8 7e ad 00 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001da0c:	c7 04 24 04 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f04
c001da13:	89 c3                	mov    ebx,eax
c001da15:	e8 78 ad 00 00       	call   c0028792 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001da1a:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001da21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da24:	e8 9d f8 ff ff       	call   c001d2c6 <switchToThread(ThreadControlBlock*)>
c001da29:	83 c4 10             	add    esp,0x10
c001da2c:	83 c4 08             	add    esp,0x8
c001da2f:	5b                   	pop    ebx
c001da30:	c3                   	ret    
c001da31:	83 ec 08             	sub    esp,0x8
c001da34:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001da3b:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001da41:	68 04 0f 03 c0       	push   0xc0030f04
c001da46:	e8 f5 ad 00 00       	call   c0028840 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001da4b:	83 c4 10             	add    esp,0x10
c001da4e:	eb af                	jmp    c001d9ff <schedule()+0x34>

c001da50 <Semaphore::tryAcquire()>:
c001da50:	53                   	push   ebx
c001da51:	83 ec 08             	sub    esp,0x8
c001da54:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001da58:	fa                   	cli    
c001da59:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001da5e:	8d 50 01             	lea    edx,[eax+0x1]
c001da61:	89 15 e8 0e 03 c0    	mov    DWORD PTR ds:0xc0030ee8,edx
c001da67:	8b 15 e4 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030ee4
c001da6d:	8d 5a 01             	lea    ebx,[edx+0x1]
c001da70:	89 1d e4 0e 03 c0    	mov    DWORD PTR ds:0xc0030ee4,ebx
c001da76:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001da79:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001da7b:	7c 2a                	jl     c001daa7 <Semaphore::tryAcquire()+0x57>
c001da7d:	89 15 e4 0e 03 c0    	mov    DWORD PTR ds:0xc0030ee4,edx
c001da83:	85 d2                	test   edx,edx
c001da85:	75 0a                	jne    c001da91 <Semaphore::tryAcquire()+0x41>
c001da87:	8b 15 e0 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030ee0
c001da8d:	85 d2                	test   edx,edx
c001da8f:	75 5b                	jne    c001daec <Semaphore::tryAcquire()+0x9c>
c001da91:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001da96:	85 c0                	test   eax,eax
c001da98:	74 07                	je     c001daa1 <Semaphore::tryAcquire()+0x51>
c001da9a:	31 c0                	xor    eax,eax
c001da9c:	83 c4 08             	add    esp,0x8
c001da9f:	5b                   	pop    ebx
c001daa0:	c3                   	ret    
c001daa1:	fb                   	sti    
c001daa2:	83 c4 08             	add    esp,0x8
c001daa5:	5b                   	pop    ebx
c001daa6:	c3                   	ret    
c001daa7:	43                   	inc    ebx
c001daa8:	89 15 e4 0e 03 c0    	mov    DWORD PTR ds:0xc0030ee4,edx
c001daae:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001dab1:	85 d2                	test   edx,edx
c001dab3:	75 1f                	jne    c001dad4 <Semaphore::tryAcquire()+0x84>
c001dab5:	8b 0d e0 0e 03 c0    	mov    ecx,DWORD PTR ds:0xc0030ee0
c001dabb:	85 c9                	test   ecx,ecx
c001dabd:	74 15                	je     c001dad4 <Semaphore::tryAcquire()+0x84>
c001dabf:	c7 05 e0 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ee0,0x0
c001dac9:	e8 fd fe ff ff       	call   c001d9cb <schedule()>
c001dace:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001dad3:	48                   	dec    eax
c001dad4:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001dad9:	85 c0                	test   eax,eax
c001dadb:	75 08                	jne    c001dae5 <Semaphore::tryAcquire()+0x95>
c001dadd:	fb                   	sti    
c001dade:	b0 01                	mov    al,0x1
c001dae0:	83 c4 08             	add    esp,0x8
c001dae3:	5b                   	pop    ebx
c001dae4:	c3                   	ret    
c001dae5:	b0 01                	mov    al,0x1
c001dae7:	83 c4 08             	add    esp,0x8
c001daea:	5b                   	pop    ebx
c001daeb:	c3                   	ret    
c001daec:	c7 05 e0 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ee0,0x0
c001daf6:	e8 d0 fe ff ff       	call   c001d9cb <schedule()>
c001dafb:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001db00:	48                   	dec    eax
c001db01:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001db06:	85 c0                	test   eax,eax
c001db08:	75 90                	jne    c001da9a <Semaphore::tryAcquire()+0x4a>
c001db0a:	eb 95                	jmp    c001daa1 <Semaphore::tryAcquire()+0x51>

c001db0c <Semaphore::assertLocked(char const*)>:
c001db0c:	83 ec 0c             	sub    esp,0xc
c001db0f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db13:	fa                   	cli    
c001db14:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001db1a:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c001db1f:	8d 48 01             	lea    ecx,[eax+0x1]
c001db22:	89 0d e4 0e 03 c0    	mov    DWORD PTR ds:0xc0030ee4,ecx
c001db28:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001db2a:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001db2d:	7c 24                	jl     c001db53 <Semaphore::assertLocked(char const*)+0x47>
c001db2f:	a3 e4 0e 03 c0       	mov    ds:0xc0030ee4,eax
c001db34:	85 c0                	test   eax,eax
c001db36:	75 09                	jne    c001db41 <Semaphore::assertLocked(char const*)+0x35>
c001db38:	a1 e0 0e 03 c0       	mov    eax,ds:0xc0030ee0
c001db3d:	85 c0                	test   eax,eax
c001db3f:	75 29                	jne    c001db6a <Semaphore::assertLocked(char const*)+0x5e>
c001db41:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001db46:	48                   	dec    eax
c001db47:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001db4c:	75 01                	jne    c001db4f <Semaphore::assertLocked(char const*)+0x43>
c001db4e:	fb                   	sti    
c001db4f:	83 c4 0c             	add    esp,0xc
c001db52:	c3                   	ret    
c001db53:	83 ec 0c             	sub    esp,0xc
c001db56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001db5a:	e8 dc c2 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c001db5f:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c001db64:	83 c4 10             	add    esp,0x10
c001db67:	48                   	dec    eax
c001db68:	eb c5                	jmp    c001db2f <Semaphore::assertLocked(char const*)+0x23>
c001db6a:	c7 05 e0 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ee0,0x0
c001db74:	e8 52 fe ff ff       	call   c001d9cb <schedule()>
c001db79:	eb c6                	jmp    c001db41 <Semaphore::assertLocked(char const*)+0x35>

c001db7b <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001db7b:	83 ec 0c             	sub    esp,0xc
c001db7e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db83:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db87:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001db8a:	e8 3c fe ff ff       	call   c001d9cb <schedule()>
c001db8f:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001db94:	48                   	dec    eax
c001db95:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001db9a:	75 01                	jne    c001db9d <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001db9c:	fb                   	sti    
c001db9d:	83 c4 0c             	add    esp,0xc
c001dba0:	c3                   	ret    

c001dba1 <blockTask(TaskState)>:
c001dba1:	83 ec 0c             	sub    esp,0xc
c001dba4:	fa                   	cli    
c001dba5:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001dbab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dbaf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbb4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dbb7:	e8 0f fe ff ff       	call   c001d9cb <schedule()>
c001dbbc:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001dbc1:	48                   	dec    eax
c001dbc2:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001dbc7:	75 01                	jne    c001dbca <blockTask(TaskState)+0x29>
c001dbc9:	fb                   	sti    
c001dbca:	83 c4 0c             	add    esp,0xc
c001dbcd:	c3                   	ret    

c001dbce <waitTask(int, int*, int)>:
c001dbce:	83 ec 18             	sub    esp,0x18
c001dbd1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbd6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dbda:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001dbdd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dbe1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbe6:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001dbe9:	6a 07                	push   0x7
c001dbeb:	e8 b1 ff ff ff       	call   c001dba1 <blockTask(TaskState)>
c001dbf0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbf5:	83 c4 10             	add    esp,0x10
c001dbf8:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001dbfb:	85 d2                	test   edx,edx
c001dbfd:	74 0a                	je     c001dc09 <waitTask(int, int*, int)+0x3b>
c001dbff:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001dc02:	89 02                	mov    DWORD PTR [edx],eax
c001dc04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc09:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001dc0c:	83 c4 0c             	add    esp,0xc
c001dc0f:	c3                   	ret    

c001dc10 <nanoSleepUntil(unsigned long long)>:
c001dc10:	83 ec 0c             	sub    esp,0xc
c001dc13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc17:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dc1b:	3b 05 30 e0 02 c0    	cmp    eax,DWORD PTR ds:0xc002e030
c001dc21:	89 d1                	mov    ecx,edx
c001dc23:	1b 0d 34 e0 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e034
c001dc29:	73 04                	jae    c001dc2f <nanoSleepUntil(unsigned long long)+0x1f>
c001dc2b:	83 c4 0c             	add    esp,0xc
c001dc2e:	c3                   	ret    
c001dc2f:	fa                   	cli    
c001dc30:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001dc36:	83 ec 08             	sub    esp,0x8
c001dc39:	ff 05 e4 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee4
c001dc3f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dc45:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001dc48:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001dc4b:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001dc51:	68 f8 0e 03 c0       	push   0xc0030ef8
c001dc56:	e8 e5 ab 00 00       	call   c0028840 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dc5b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001dc62:	e8 3a ff ff ff       	call   c001dba1 <blockTask(TaskState)>
c001dc67:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c001dc6c:	83 c4 10             	add    esp,0x10
c001dc6f:	48                   	dec    eax
c001dc70:	a3 e4 0e 03 c0       	mov    ds:0xc0030ee4,eax
c001dc75:	85 c0                	test   eax,eax
c001dc77:	75 09                	jne    c001dc82 <nanoSleepUntil(unsigned long long)+0x72>
c001dc79:	a1 e0 0e 03 c0       	mov    eax,ds:0xc0030ee0
c001dc7e:	85 c0                	test   eax,eax
c001dc80:	75 12                	jne    c001dc94 <nanoSleepUntil(unsigned long long)+0x84>
c001dc82:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001dc87:	48                   	dec    eax
c001dc88:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001dc8d:	75 9c                	jne    c001dc2b <nanoSleepUntil(unsigned long long)+0x1b>
c001dc8f:	fb                   	sti    
c001dc90:	83 c4 0c             	add    esp,0xc
c001dc93:	c3                   	ret    
c001dc94:	c7 05 e0 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ee0,0x0
c001dc9e:	e8 28 fd ff ff       	call   c001d9cb <schedule()>
c001dca3:	eb dd                	jmp    c001dc82 <nanoSleepUntil(unsigned long long)+0x72>

c001dca5 <nanoSleep(unsigned long long)>:
c001dca5:	a1 30 e0 02 c0       	mov    eax,ds:0xc002e030
c001dcaa:	8b 15 34 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e034
c001dcb0:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001dcb4:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001dcb8:	e9 53 ff ff ff       	jmp    c001dc10 <nanoSleepUntil(unsigned long long)>

c001dcbd <sleep(unsigned long long)>:
c001dcbd:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001dcc5:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001dcca:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001dcce:	01 ca                	add    edx,ecx
c001dcd0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dcd4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dcd8:	eb cb                	jmp    c001dca5 <nanoSleep(unsigned long long)>

c001dcda <Semaphore::acquire()>:
c001dcda:	83 ec 0c             	sub    esp,0xc
c001dcdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dce1:	fa                   	cli    
c001dce2:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c001dce7:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001dced:	8d 48 01             	lea    ecx,[eax+0x1]
c001dcf0:	89 0d e4 0e 03 c0    	mov    DWORD PTR ds:0xc0030ee4,ecx
c001dcf6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001dcf9:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001dcfb:	7d 28                	jge    c001dd25 <Semaphore::acquire()+0x4b>
c001dcfd:	41                   	inc    ecx
c001dcfe:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001dd01:	a3 e4 0e 03 c0       	mov    ds:0xc0030ee4,eax
c001dd06:	85 c0                	test   eax,eax
c001dd08:	75 09                	jne    c001dd13 <Semaphore::acquire()+0x39>
c001dd0a:	a1 e0 0e 03 c0       	mov    eax,ds:0xc0030ee0
c001dd0f:	85 c0                	test   eax,eax
c001dd11:	75 4e                	jne    c001dd61 <Semaphore::acquire()+0x87>
c001dd13:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001dd18:	48                   	dec    eax
c001dd19:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001dd1e:	75 01                	jne    c001dd21 <Semaphore::acquire()+0x47>
c001dd20:	fb                   	sti    
c001dd21:	83 c4 0c             	add    esp,0xc
c001dd24:	c3                   	ret    
c001dd25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd2a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001dd31:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001dd34:	85 c9                	test   ecx,ecx
c001dd36:	74 3a                	je     c001dd72 <Semaphore::acquire()+0x98>
c001dd38:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001dd3b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dd41:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001dd44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd49:	83 ec 0c             	sub    esp,0xc
c001dd4c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001dd4f:	6a 05                	push   0x5
c001dd51:	e8 4b fe ff ff       	call   c001dba1 <blockTask(TaskState)>
c001dd56:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c001dd5b:	83 c4 10             	add    esp,0x10
c001dd5e:	48                   	dec    eax
c001dd5f:	eb a0                	jmp    c001dd01 <Semaphore::acquire()+0x27>
c001dd61:	c7 05 e0 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ee0,0x0
c001dd6b:	e8 5b fc ff ff       	call   c001d9cb <schedule()>
c001dd70:	eb a1                	jmp    c001dd13 <Semaphore::acquire()+0x39>
c001dd72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd77:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001dd7a:	eb c8                	jmp    c001dd44 <Semaphore::acquire()+0x6a>

c001dd7c <taskReturned>:
c001dd7c:	83 ec 18             	sub    esp,0x18
c001dd7f:	68 48 bc 02 c0       	push   0xc002bc48
c001dd84:	e8 b2 c0 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c001dd89:	83 c4 10             	add    esp,0x10
c001dd8c:	83 ec 0c             	sub    esp,0xc
c001dd8f:	6a 02                	push   0x2
c001dd91:	e8 0b fe ff ff       	call   c001dba1 <blockTask(TaskState)>
c001dd96:	fa                   	cli    
c001dd97:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001dd9d:	e8 29 fc ff ff       	call   c001d9cb <schedule()>
c001dda2:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001dda7:	83 c4 10             	add    esp,0x10
c001ddaa:	48                   	dec    eax
c001ddab:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001ddb0:	85 c0                	test   eax,eax
c001ddb2:	75 d8                	jne    c001dd8c <taskReturned+0x10>
c001ddb4:	fb                   	sti    
c001ddb5:	eb d5                	jmp    c001dd8c <taskReturned+0x10>

c001ddb7 <Thr::processFromPID(int)>:
c001ddb7:	57                   	push   edi
c001ddb8:	56                   	push   esi
c001ddb9:	53                   	push   ebx
c001ddba:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ddbe:	fa                   	cli    
c001ddbf:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001ddc5:	83 ec 0c             	sub    esp,0xc
c001ddc8:	68 04 0f 03 c0       	push   0xc0030f04
c001ddcd:	e8 b8 a9 00 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ddd2:	83 c4 10             	add    esp,0x10
c001ddd5:	89 c7                	mov    edi,eax
c001ddd7:	eb 14                	jmp    c001dded <Thr::processFromPID(int)+0x36>
c001ddd9:	83 ec 0c             	sub    esp,0xc
c001dddc:	68 04 0f 03 c0       	push   0xc0030f04
c001dde1:	e8 a4 a9 00 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dde6:	83 c4 10             	add    esp,0x10
c001dde9:	39 f8                	cmp    eax,edi
c001ddeb:	74 49                	je     c001de36 <Thr::processFromPID(int)+0x7f>
c001dded:	83 ec 0c             	sub    esp,0xc
c001ddf0:	68 04 0f 03 c0       	push   0xc0030f04
c001ddf5:	e8 90 a9 00 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ddfa:	c7 04 24 04 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f04
c001de01:	89 c3                	mov    ebx,eax
c001de03:	e8 8a a9 00 00       	call   c0028792 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001de08:	58                   	pop    eax
c001de09:	5a                   	pop    edx
c001de0a:	53                   	push   ebx
c001de0b:	68 04 0f 03 c0       	push   0xc0030f04
c001de10:	e8 2b aa 00 00       	call   c0028840 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001de15:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de18:	83 c4 10             	add    esp,0x10
c001de1b:	39 30                	cmp    DWORD PTR [eax],esi
c001de1d:	75 ba                	jne    c001ddd9 <Thr::processFromPID(int)+0x22>
c001de1f:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001de24:	48                   	dec    eax
c001de25:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001de2a:	74 07                	je     c001de33 <Thr::processFromPID(int)+0x7c>
c001de2c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de2f:	5b                   	pop    ebx
c001de30:	5e                   	pop    esi
c001de31:	5f                   	pop    edi
c001de32:	c3                   	ret    
c001de33:	fb                   	sti    
c001de34:	eb f6                	jmp    c001de2c <Thr::processFromPID(int)+0x75>
c001de36:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001de3b:	48                   	dec    eax
c001de3c:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001de41:	75 05                	jne    c001de48 <Thr::processFromPID(int)+0x91>
c001de43:	fb                   	sti    
c001de44:	5b                   	pop    ebx
c001de45:	5e                   	pop    esi
c001de46:	5f                   	pop    edi
c001de47:	c3                   	ret    
c001de48:	5b                   	pop    ebx
c001de49:	31 c0                	xor    eax,eax
c001de4b:	5e                   	pop    esi
c001de4c:	5f                   	pop    edi
c001de4d:	c3                   	ret    

c001de4e <unblockTask(ThreadControlBlock*)>:
c001de4e:	53                   	push   ebx
c001de4f:	83 ec 08             	sub    esp,0x8
c001de52:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001de56:	fa                   	cli    
c001de57:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001de5d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001de60:	85 c0                	test   eax,eax
c001de62:	74 5a                	je     c001debe <unblockTask(ThreadControlBlock*)+0x70>
c001de64:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001de67:	48                   	dec    eax
c001de68:	74 31                	je     c001de9b <unblockTask(ThreadControlBlock*)+0x4d>
c001de6a:	83 ec 0c             	sub    esp,0xc
c001de6d:	68 04 0f 03 c0       	push   0xc0030f04
c001de72:	e8 13 a9 00 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001de77:	83 c4 10             	add    esp,0x10
c001de7a:	85 c0                	test   eax,eax
c001de7c:	75 17                	jne    c001de95 <unblockTask(ThreadControlBlock*)+0x47>
c001de7e:	eb 50                	jmp    c001ded0 <unblockTask(ThreadControlBlock*)+0x82>
c001de80:	83 ec 08             	sub    esp,0x8
c001de83:	50                   	push   eax
c001de84:	68 04 0f 03 c0       	push   0xc0030f04
c001de89:	e8 84 ac 00 00       	call   c0028b12 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001de8e:	83 c4 10             	add    esp,0x10
c001de91:	85 c0                	test   eax,eax
c001de93:	74 3b                	je     c001ded0 <unblockTask(ThreadControlBlock*)+0x82>
c001de95:	39 c3                	cmp    ebx,eax
c001de97:	75 e7                	jne    c001de80 <unblockTask(ThreadControlBlock*)+0x32>
c001de99:	eb 10                	jmp    c001deab <unblockTask(ThreadControlBlock*)+0x5d>
c001de9b:	83 ec 0c             	sub    esp,0xc
c001de9e:	68 ea bb 02 c0       	push   0xc002bbea
c001dea3:	e8 27 48 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c001dea8:	83 c4 10             	add    esp,0x10
c001deab:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001deb0:	48                   	dec    eax
c001deb1:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001deb6:	75 01                	jne    c001deb9 <unblockTask(ThreadControlBlock*)+0x6b>
c001deb8:	fb                   	sti    
c001deb9:	83 c4 08             	add    esp,0x8
c001debc:	5b                   	pop    ebx
c001debd:	c3                   	ret    
c001debe:	83 ec 0c             	sub    esp,0xc
c001dec1:	68 d3 bb 02 c0       	push   0xc002bbd3
c001dec6:	e8 04 48 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c001decb:	83 c4 10             	add    esp,0x10
c001dece:	eb db                	jmp    c001deab <unblockTask(ThreadControlBlock*)+0x5d>
c001ded0:	83 ec 08             	sub    esp,0x8
c001ded3:	53                   	push   ebx
c001ded4:	68 04 0f 03 c0       	push   0xc0030f04
c001ded9:	e8 62 a9 00 00       	call   c0028840 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dede:	83 c4 10             	add    esp,0x10
c001dee1:	eb c8                	jmp    c001deab <unblockTask(ThreadControlBlock*)+0x5d>

c001dee3 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001dee3:	55                   	push   ebp
c001dee4:	57                   	push   edi
c001dee5:	56                   	push   esi
c001dee6:	53                   	push   ebx
c001dee7:	83 ec 1c             	sub    esp,0x1c
c001deea:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001deee:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001def1:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001def7:	85 ff                	test   edi,edi
c001def9:	7e 20                	jle    c001df1b <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001defb:	31 f6                	xor    esi,esi
c001defd:	83 ec 0c             	sub    esp,0xc
c001df00:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001df07:	46                   	inc    esi
c001df08:	e8 9c 16 ff ff       	call   c000f5a9 <free>
c001df0d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df10:	83 c4 10             	add    esp,0x10
c001df13:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001df19:	7f e2                	jg     c001defd <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001df1b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001df25:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001df2a:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001df2d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001df30:	d3 c0                	rol    eax,cl
c001df32:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001df39:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001df3c:	89 f7                	mov    edi,esi
c001df3e:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001df46:	0f 85 64 01 00 00    	jne    c001e0b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001df4c:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001df52:	85 ed                	test   ebp,ebp
c001df54:	74 1b                	je     c001df71 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001df56:	83 ec 0c             	sub    esp,0xc
c001df59:	55                   	push   ebp
c001df5a:	e8 81 bc ff ff       	call   c0019be0 <EnvVarContainer::~EnvVarContainer()>
c001df5f:	59                   	pop    ecx
c001df60:	5e                   	pop    esi
c001df61:	6a 0c                	push   0xc
c001df63:	55                   	push   ebp
c001df64:	e8 8e 46 ff ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c001df69:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001df6c:	83 c4 10             	add    esp,0x10
c001df6f:	89 f7                	mov    edi,esi
c001df71:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001df77:	85 c0                	test   eax,eax
c001df79:	0f 84 aa 00 00 00    	je     c001e029 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001df7f:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001df82:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001df86:	31 c9                	xor    ecx,ecx
c001df88:	eb 10                	jmp    c001df9a <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001df8a:	41                   	inc    ecx
c001df8b:	83 f9 10             	cmp    ecx,0x10
c001df8e:	0f 84 95 00 00 00    	je     c001e029 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001df94:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001df9a:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001dfa1:	d3 fa                	sar    edx,cl
c001dfa3:	83 e2 01             	and    edx,0x1
c001dfa6:	74 e2                	je     c001df8a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dfa8:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001dfab:	01 ca                	add    edx,ecx
c001dfad:	89 d5                	mov    ebp,edx
c001dfaf:	c1 e5 05             	shl    ebp,0x5
c001dfb2:	01 ea                	add    edx,ebp
c001dfb4:	01 d0                	add    eax,edx
c001dfb6:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001dfbc:	83 fd 07             	cmp    ebp,0x7
c001dfbf:	75 c9                	jne    c001df8a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dfc1:	05 40 02 00 00       	add    eax,0x240
c001dfc6:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001dfc9:	83 fd ff             	cmp    ebp,0xffffffff
c001dfcc:	0f 8c e6 00 00 00    	jl     c001e0b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001dfd2:	0f 84 97 01 00 00    	je     c001e16f <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001dfd8:	85 ed                	test   ebp,ebp
c001dfda:	0f 84 7e 01 00 00    	je     c001e15e <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001dfe0:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001dfe2:	75 a6                	jne    c001df8a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dfe4:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dfea:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dfee:	01 d0                	add    eax,edx
c001dff0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001dff4:	83 ec 0c             	sub    esp,0xc
c001dff7:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001dffd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e000:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e006:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e00d:	50                   	push   eax
c001e00e:	e8 3b fe ff ff       	call   c001de4e <unblockTask(ThreadControlBlock*)>
c001e013:	83 c4 10             	add    esp,0x10
c001e016:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e019:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e01d:	89 f7                	mov    edi,esi
c001e01f:	41                   	inc    ecx
c001e020:	83 f9 10             	cmp    ecx,0x10
c001e023:	0f 85 6b ff ff ff    	jne    c001df94 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e029:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e02f:	85 c0                	test   eax,eax
c001e031:	74 5d                	je     c001e090 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e033:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e039:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e03f:	74 4f                	je     c001e090 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e041:	83 ec 0c             	sub    esp,0xc
c001e044:	68 04 0f 03 c0       	push   0xc0030f04
c001e049:	e8 3c a7 00 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e04e:	c7 04 24 04 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f04
c001e055:	89 c7                	mov    edi,eax
c001e057:	e8 12 a7 00 00       	call   c002876e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e05c:	83 c4 10             	add    esp,0x10
c001e05f:	84 c0                	test   al,al
c001e061:	0f 84 c2 00 00 00    	je     c001e129 <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001e067:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e06a:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e070:	85 d2                	test   edx,edx
c001e072:	74 0f                	je     c001e083 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e074:	83 ec 0c             	sub    esp,0xc
c001e077:	8b 02                	mov    eax,DWORD PTR [edx]
c001e079:	52                   	push   edx
c001e07a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e07d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e080:	83 c4 10             	add    esp,0x10
c001e083:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e08d:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e090:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e096:	85 db                	test   ebx,ebx
c001e098:	74 16                	je     c001e0b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e09a:	83 ec 0c             	sub    esp,0xc
c001e09d:	53                   	push   ebx
c001e09e:	e8 bd 37 ff ff       	call   c0011860 <VAS::~VAS()>
c001e0a3:	58                   	pop    eax
c001e0a4:	5a                   	pop    edx
c001e0a5:	6a 14                	push   0x14
c001e0a7:	53                   	push   ebx
c001e0a8:	e8 4a 45 ff ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c001e0ad:	83 c4 10             	add    esp,0x10
c001e0b0:	83 c4 1c             	add    esp,0x1c
c001e0b3:	5b                   	pop    ebx
c001e0b4:	5e                   	pop    esi
c001e0b5:	5f                   	pop    edi
c001e0b6:	5d                   	pop    ebp
c001e0b7:	c3                   	ret    
c001e0b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e0bc:	83 ec 0c             	sub    esp,0xc
c001e0bf:	68 7c bc 02 c0       	push   0xc002bc7c
c001e0c4:	e8 72 bd ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c001e0c9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e0cc:	83 c4 10             	add    esp,0x10
c001e0cf:	89 f7                	mov    edi,esi
c001e0d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e0d5:	e9 b0 fe ff ff       	jmp    c001df8a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e0da:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e0e0:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e0e6:	75 1c                	jne    c001e104 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e0e8:	83 ec 0c             	sub    esp,0xc
c001e0eb:	68 e4 bc 02 c0       	push   0xc002bce4
c001e0f0:	e8 da 45 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c001e0f5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e0fc:	e8 a0 fa ff ff       	call   c001dba1 <blockTask(TaskState)>
c001e101:	83 c4 10             	add    esp,0x10
c001e104:	83 ec 08             	sub    esp,0x8
c001e107:	56                   	push   esi
c001e108:	68 04 0f 03 c0       	push   0xc0030f04
c001e10d:	e8 2e a7 00 00       	call   c0028840 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e112:	c7 04 24 04 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f04
c001e119:	e8 6c a6 00 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e11e:	83 c4 10             	add    esp,0x10
c001e121:	39 f8                	cmp    eax,edi
c001e123:	0f 84 3e ff ff ff    	je     c001e067 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e129:	83 ec 0c             	sub    esp,0xc
c001e12c:	68 04 0f 03 c0       	push   0xc0030f04
c001e131:	e8 54 a6 00 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e136:	c7 04 24 04 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f04
c001e13d:	89 c6                	mov    esi,eax
c001e13f:	e8 4e a6 00 00       	call   c0028792 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e144:	83 c4 10             	add    esp,0x10
c001e147:	39 f3                	cmp    ebx,esi
c001e149:	74 b9                	je     c001e104 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e14b:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e14e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e151:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e157:	75 ab                	jne    c001e104 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e159:	e9 7c ff ff ff       	jmp    c001e0da <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e15e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e162:	83 ec 0c             	sub    esp,0xc
c001e165:	68 b0 bc 02 c0       	push   0xc002bcb0
c001e16a:	e9 55 ff ff ff       	jmp    c001e0c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001e16f:	8b 36                	mov    esi,DWORD PTR [esi]
c001e171:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e175:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e178:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e17b:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e181:	01 d7                	add    edi,edx
c001e183:	89 f8                	mov    eax,edi
c001e185:	e9 66 fe ff ff       	jmp    c001dff0 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e18a <cleanerTaskFunction(void*)>:
c001e18a:	53                   	push   ebx
c001e18b:	83 ec 08             	sub    esp,0x8
c001e18e:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001e193:	48                   	dec    eax
c001e194:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001e199:	75 01                	jne    c001e19c <cleanerTaskFunction(void*)+0x12>
c001e19b:	fb                   	sti    
c001e19c:	fa                   	cli    
c001e19d:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001e1a2:	80 3d cc 0e 03 c0 00 	cmp    BYTE PTR ds:0xc0030ecc,0x0
c001e1a9:	8d 50 01             	lea    edx,[eax+0x1]
c001e1ac:	89 15 e8 0e 03 c0    	mov    DWORD PTR ds:0xc0030ee8,edx
c001e1b2:	0f 84 a1 00 00 00    	je     c001e259 <cleanerTaskFunction(void*)+0xcf>
c001e1b8:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001e1bd:	85 c0                	test   eax,eax
c001e1bf:	75 01                	jne    c001e1c2 <cleanerTaskFunction(void*)+0x38>
c001e1c1:	fb                   	sti    
c001e1c2:	c6 05 cc 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030ecc,0x0
c001e1c9:	fa                   	cli    
c001e1ca:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001e1d0:	ff 05 e4 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee4
c001e1d6:	fa                   	cli    
c001e1d7:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001e1dd:	eb 26                	jmp    c001e205 <cleanerTaskFunction(void*)+0x7b>
c001e1df:	83 ec 0c             	sub    esp,0xc
c001e1e2:	68 ec 0e 03 c0       	push   0xc0030eec
c001e1e7:	e8 9e a5 00 00       	call   c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1ec:	c7 04 24 ec 0e 03 c0 	mov    DWORD PTR [esp],0xc0030eec
c001e1f3:	89 c3                	mov    ebx,eax
c001e1f5:	e8 98 a5 00 00       	call   c0028792 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e1fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e1fd:	e8 e1 fc ff ff       	call   c001dee3 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e202:	83 c4 10             	add    esp,0x10
c001e205:	83 ec 0c             	sub    esp,0xc
c001e208:	68 ec 0e 03 c0       	push   0xc0030eec
c001e20d:	e8 5c a5 00 00       	call   c002876e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e212:	83 c4 10             	add    esp,0x10
c001e215:	84 c0                	test   al,al
c001e217:	74 c6                	je     c001e1df <cleanerTaskFunction(void*)+0x55>
c001e219:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001e21e:	48                   	dec    eax
c001e21f:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001e224:	75 01                	jne    c001e227 <cleanerTaskFunction(void*)+0x9d>
c001e226:	fb                   	sti    
c001e227:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c001e22c:	48                   	dec    eax
c001e22d:	a3 e4 0e 03 c0       	mov    ds:0xc0030ee4,eax
c001e232:	0f 85 56 ff ff ff    	jne    c001e18e <cleanerTaskFunction(void*)+0x4>
c001e238:	a1 e0 0e 03 c0       	mov    eax,ds:0xc0030ee0
c001e23d:	85 c0                	test   eax,eax
c001e23f:	0f 84 49 ff ff ff    	je     c001e18e <cleanerTaskFunction(void*)+0x4>
c001e245:	c7 05 e0 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ee0,0x0
c001e24f:	e8 77 f7 ff ff       	call   c001d9cb <schedule()>
c001e254:	e9 35 ff ff ff       	jmp    c001e18e <cleanerTaskFunction(void*)+0x4>
c001e259:	83 ec 0c             	sub    esp,0xc
c001e25c:	6a 02                	push   0x2
c001e25e:	e8 18 f9 ff ff       	call   c001db7b <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e263:	83 c4 10             	add    esp,0x10
c001e266:	e9 57 ff ff ff       	jmp    c001e1c2 <cleanerTaskFunction(void*)+0x38>

c001e26b <terminateTask(int)>:
c001e26b:	83 ec 14             	sub    esp,0x14
c001e26e:	fa                   	cli    
c001e26f:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001e275:	ff 05 e4 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee4
c001e27b:	fa                   	cli    
c001e27c:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001e282:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e286:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e28b:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e28e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e293:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e296:	50                   	push   eax
c001e297:	68 ec 0e 03 c0       	push   0xc0030eec
c001e29c:	e8 9f a5 00 00       	call   c0028840 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e2a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2a6:	83 c4 10             	add    esp,0x10
c001e2a9:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e2b0:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c001e2b5:	85 c0                	test   eax,eax
c001e2b7:	74 53                	je     c001e30c <terminateTask(int)+0xa1>
c001e2b9:	83 ec 0c             	sub    esp,0xc
c001e2bc:	c6 05 cc 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030ecc,0x1
c001e2c3:	50                   	push   eax
c001e2c4:	e8 85 fb ff ff       	call   c001de4e <unblockTask(ThreadControlBlock*)>
c001e2c9:	83 c4 10             	add    esp,0x10
c001e2cc:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001e2d1:	48                   	dec    eax
c001e2d2:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001e2d7:	75 01                	jne    c001e2da <terminateTask(int)+0x6f>
c001e2d9:	fb                   	sti    
c001e2da:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c001e2df:	48                   	dec    eax
c001e2e0:	a3 e4 0e 03 c0       	mov    ds:0xc0030ee4,eax
c001e2e5:	75 09                	jne    c001e2f0 <terminateTask(int)+0x85>
c001e2e7:	83 3d e0 0e 03 c0 00 	cmp    DWORD PTR ds:0xc0030ee0,0x0
c001e2ee:	75 2e                	jne    c001e31e <terminateTask(int)+0xb3>
c001e2f0:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001e2f5:	48                   	dec    eax
c001e2f6:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001e2fb:	75 01                	jne    c001e2fe <terminateTask(int)+0x93>
c001e2fd:	fb                   	sti    
c001e2fe:	fa                   	cli    
c001e2ff:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001e305:	e8 c1 f6 ff ff       	call   c001d9cb <schedule()>
c001e30a:	eb e4                	jmp    c001e2f0 <terminateTask(int)+0x85>
c001e30c:	83 ec 0c             	sub    esp,0xc
c001e30f:	68 01 bc 02 c0       	push   0xc002bc01
c001e314:	e8 b6 43 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c001e319:	83 c4 10             	add    esp,0x10
c001e31c:	eb ae                	jmp    c001e2cc <terminateTask(int)+0x61>
c001e31e:	c7 05 e0 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ee0,0x0
c001e328:	eb db                	jmp    c001e305 <terminateTask(int)+0x9a>

c001e32a <Thr::terminateFromIRQ(int)>:
c001e32a:	83 ec 18             	sub    esp,0x18
c001e32d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e331:	e8 35 ff ff ff       	call   c001e26b <terminateTask(int)>

c001e336 <Semaphore::release()>:
c001e336:	83 ec 0c             	sub    esp,0xc
c001e339:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e33d:	fa                   	cli    
c001e33e:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c001e343:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001e349:	8d 48 01             	lea    ecx,[eax+0x1]
c001e34c:	89 0d e4 0e 03 c0    	mov    DWORD PTR ds:0xc0030ee4,ecx
c001e352:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e355:	85 c9                	test   ecx,ecx
c001e357:	74 3c                	je     c001e395 <Semaphore::release()+0x5f>
c001e359:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e35c:	83 ec 0c             	sub    esp,0xc
c001e35f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e362:	51                   	push   ecx
c001e363:	e8 e6 fa ff ff       	call   c001de4e <unblockTask(ThreadControlBlock*)>
c001e368:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c001e36d:	83 c4 10             	add    esp,0x10
c001e370:	48                   	dec    eax
c001e371:	a3 e4 0e 03 c0       	mov    ds:0xc0030ee4,eax
c001e376:	85 c0                	test   eax,eax
c001e378:	75 09                	jne    c001e383 <Semaphore::release()+0x4d>
c001e37a:	a1 e0 0e 03 c0       	mov    eax,ds:0xc0030ee0
c001e37f:	85 c0                	test   eax,eax
c001e381:	75 17                	jne    c001e39a <Semaphore::release()+0x64>
c001e383:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001e388:	48                   	dec    eax
c001e389:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001e38e:	75 01                	jne    c001e391 <Semaphore::release()+0x5b>
c001e390:	fb                   	sti    
c001e391:	83 c4 0c             	add    esp,0xc
c001e394:	c3                   	ret    
c001e395:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e398:	eb d7                	jmp    c001e371 <Semaphore::release()+0x3b>
c001e39a:	c7 05 e0 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ee0,0x0
c001e3a4:	e8 22 f6 ff ff       	call   c001d9cb <schedule()>
c001e3a9:	eb d8                	jmp    c001e383 <Semaphore::release()+0x4d>

c001e3ab <__static_initialization_and_destruction_0(int, int)>:
c001e3ab:	83 ec 0c             	sub    esp,0xc
c001e3ae:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e3b3:	0f 85 88 00 00 00    	jne    c001e441 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e3b9:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e3c1:	75 7e                	jne    c001e441 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e3c3:	83 ec 0c             	sub    esp,0xc
c001e3c6:	68 04 0f 03 c0       	push   0xc0030f04
c001e3cb:	e8 00 a7 00 00       	call   c0028ad0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e3d0:	83 c4 10             	add    esp,0x10
c001e3d3:	83 ec 04             	sub    esp,0x4
c001e3d6:	68 98 c7 02 c0       	push   0xc002c798
c001e3db:	68 04 0f 03 c0       	push   0xc0030f04
c001e3e0:	68 84 8a 02 c0       	push   0xc0028a84
c001e3e5:	e8 87 41 ff ff       	call   c0012571 <__cxa_atexit>
c001e3ea:	83 c4 10             	add    esp,0x10
c001e3ed:	83 ec 0c             	sub    esp,0xc
c001e3f0:	68 f8 0e 03 c0       	push   0xc0030ef8
c001e3f5:	e8 d6 a6 00 00       	call   c0028ad0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e3fa:	83 c4 10             	add    esp,0x10
c001e3fd:	83 ec 04             	sub    esp,0x4
c001e400:	68 98 c7 02 c0       	push   0xc002c798
c001e405:	68 f8 0e 03 c0       	push   0xc0030ef8
c001e40a:	68 84 8a 02 c0       	push   0xc0028a84
c001e40f:	e8 5d 41 ff ff       	call   c0012571 <__cxa_atexit>
c001e414:	83 c4 10             	add    esp,0x10
c001e417:	83 ec 0c             	sub    esp,0xc
c001e41a:	68 ec 0e 03 c0       	push   0xc0030eec
c001e41f:	e8 ac a6 00 00       	call   c0028ad0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e424:	83 c4 10             	add    esp,0x10
c001e427:	83 ec 04             	sub    esp,0x4
c001e42a:	68 98 c7 02 c0       	push   0xc002c798
c001e42f:	68 ec 0e 03 c0       	push   0xc0030eec
c001e434:	68 84 8a 02 c0       	push   0xc0028a84
c001e439:	e8 33 41 ff ff       	call   c0012571 <__cxa_atexit>
c001e43e:	83 c4 10             	add    esp,0x10
c001e441:	90                   	nop
c001e442:	83 c4 0c             	add    esp,0xc
c001e445:	c3                   	ret    

c001e446 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e446:	83 ec 0c             	sub    esp,0xc
c001e449:	83 ec 08             	sub    esp,0x8
c001e44c:	68 ff ff 00 00       	push   0xffff
c001e451:	6a 01                	push   0x1
c001e453:	e8 53 ff ff ff       	call   c001e3ab <__static_initialization_and_destruction_0(int, int)>
c001e458:	83 c4 10             	add    esp,0x10
c001e45b:	83 c4 0c             	add    esp,0xc
c001e45e:	c3                   	ret    

c001e45f <Vm::inbv(unsigned short)>:
c001e45f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e463:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e468:	75 06                	jne    c001e470 <Vm::inbv(unsigned short)+0x11>
c001e46a:	a0 4c 0f 03 c0       	mov    al,ds:0xc0030f4c
c001e46f:	c3                   	ret    
c001e470:	ec                   	in     al,dx
c001e471:	c3                   	ret    

c001e472 <Vm::outbv(unsigned short, unsigned char)>:
c001e472:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e476:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e47a:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e47f:	75 25                	jne    c001e4a6 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e481:	8b 0d 4c 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030f4c
c001e487:	8d 51 01             	lea    edx,[ecx+0x1]
c001e48a:	88 81 60 0f 03 c0    	mov    BYTE PTR [ecx-0x3ffcf0a0],al
c001e490:	89 15 4c 0f 03 c0    	mov    DWORD PTR ds:0xc0030f4c,edx
c001e496:	83 fa 20             	cmp    edx,0x20
c001e499:	75 0c                	jne    c001e4a7 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001e49b:	c7 05 4c 0f 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0030f4c,0x1f
c001e4a5:	c3                   	ret    
c001e4a6:	ee                   	out    dx,al
c001e4a7:	c3                   	ret    

c001e4a8 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e4a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e4ad:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e4b2:	c1 e0 04             	shl    eax,0x4
c001e4b5:	01 d0                	add    eax,edx
c001e4b7:	c3                   	ret    

c001e4b8 <Vm::getSegment(unsigned int)>:
c001e4b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4bc:	c1 e8 10             	shr    eax,0x10
c001e4bf:	c3                   	ret    

c001e4c0 <Vm::getOffset(unsigned int)>:
c001e4c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4c4:	c3                   	ret    

c001e4c5 <Vm::mainloop2()>:
c001e4c5:	83 ec 18             	sub    esp,0x18
c001e4c8:	fa                   	cli    
c001e4c9:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001e4cf:	6a 02                	push   0x2
c001e4d1:	c6 05 45 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030f45,0x1
c001e4d8:	e8 9e f6 ff ff       	call   c001db7b <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e4dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4e2:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e4e6:	52                   	push   edx
c001e4e7:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e4eb:	52                   	push   edx
c001e4ec:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e4f0:	52                   	push   edx
c001e4f1:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e4f5:	50                   	push   eax
c001e4f6:	e8 ff 1d fe ff       	call   c00002fa <goToVM86>
c001e4fb:	83 c4 2c             	add    esp,0x2c
c001e4fe:	c3                   	ret    

c001e4ff <Vm::mainVm8086Loop(void*)>:
c001e4ff:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001e504:	48                   	dec    eax
c001e505:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001e50a:	75 01                	jne    c001e50d <Vm::mainVm8086Loop(void*)+0xe>
c001e50c:	fb                   	sti    
c001e50d:	eb b6                	jmp    c001e4c5 <Vm::mainloop2()>

c001e50f <Vm::mainloop3(unsigned long)>:
c001e50f:	83 ec 18             	sub    esp,0x18
c001e512:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e516:	fa                   	cli    
c001e517:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001e51d:	6a 02                	push   0x2
c001e51f:	c6 05 44 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030f44,0x1
c001e526:	a3 40 0f 03 c0       	mov    ds:0xc0030f40,eax
c001e52b:	e8 4b f6 ff ff       	call   c001db7b <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e530:	83 c4 1c             	add    esp,0x1c
c001e533:	eb 90                	jmp    c001e4c5 <Vm::mainloop2()>

c001e535 <Vm::initialise8086()>:
c001e535:	83 ec 0c             	sub    esp,0xc
c001e538:	68 80 00 00 00       	push   0x80
c001e53d:	6a 00                	push   0x0
c001e53f:	68 ff e4 01 c0       	push   0xc001e4ff
c001e544:	ff 35 10 0f 03 c0    	push   DWORD PTR ds:0xc0030f10
c001e54a:	e8 57 f2 ff ff       	call   c001d7a6 <Process::createThread(void (*)(void*), void*, int)>
c001e54f:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e556:	a3 48 0f 03 c0       	mov    ds:0xc0030f48,eax
c001e55b:	68 00 01 00 00       	push   0x100
c001e560:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c001e565:	6a 00                	push   0x0
c001e567:	6a 00                	push   0x0
c001e569:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e56f:	e8 5e 37 ff ff       	call   c0011cd2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e574:	83 c4 2c             	add    esp,0x2c
c001e577:	c3                   	ret    

c001e578 <Vm::finish8086()>:
c001e578:	53                   	push   ebx
c001e579:	83 ec 08             	sub    esp,0x8
c001e57c:	fa                   	cli    
c001e57d:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001e583:	80 3d 44 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030f44,0x0
c001e58a:	75 15                	jne    c001e5a1 <Vm::finish8086()+0x29>
c001e58c:	e8 3a f4 ff ff       	call   c001d9cb <schedule()>
c001e591:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001e596:	48                   	dec    eax
c001e597:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001e59c:	75 de                	jne    c001e57c <Vm::finish8086()+0x4>
c001e59e:	fb                   	sti    
c001e59f:	eb db                	jmp    c001e57c <Vm::finish8086()+0x4>
c001e5a1:	83 ec 0c             	sub    esp,0xc
c001e5a4:	8b 1d 40 0f 03 c0    	mov    ebx,DWORD PTR ds:0xc0030f40
c001e5aa:	ff 35 48 0f 03 c0    	push   DWORD PTR ds:0xc0030f48
c001e5b0:	c6 05 44 0f 03 c0 00 	mov    BYTE PTR ds:0xc0030f44,0x0
c001e5b7:	e8 92 f8 ff ff       	call   c001de4e <unblockTask(ThreadControlBlock*)>
c001e5bc:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001e5c1:	83 c4 10             	add    esp,0x10
c001e5c4:	8d 50 ff             	lea    edx,[eax-0x1]
c001e5c7:	89 15 e8 0e 03 c0    	mov    DWORD PTR ds:0xc0030ee8,edx
c001e5cd:	85 d2                	test   edx,edx
c001e5cf:	75 01                	jne    c001e5d2 <Vm::finish8086()+0x5a>
c001e5d1:	fb                   	sti    
c001e5d2:	89 d8                	mov    eax,ebx
c001e5d4:	83 c4 08             	add    esp,0x8
c001e5d7:	5b                   	pop    ebx
c001e5d8:	c3                   	ret    

c001e5d9 <Vm::getOutput8086(unsigned char*)>:
c001e5d9:	57                   	push   edi
c001e5da:	8b 0d 4c 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030f4c
c001e5e0:	56                   	push   esi
c001e5e1:	be 60 0f 03 c0       	mov    esi,0xc0030f60
c001e5e6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e5ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e5ec:	a1 4c 0f 03 c0       	mov    eax,ds:0xc0030f4c
c001e5f1:	5e                   	pop    esi
c001e5f2:	c7 05 4c 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f4c,0x0
c001e5fc:	5f                   	pop    edi
c001e5fd:	c3                   	ret    

c001e5fe <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e5fe:	55                   	push   ebp
c001e5ff:	57                   	push   edi
c001e600:	56                   	push   esi
c001e601:	53                   	push   ebx
c001e602:	83 ec 2c             	sub    esp,0x2c
c001e605:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e609:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e60d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e611:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e615:	fa                   	cli    
c001e616:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c001e61c:	0f b6 35 45 0f 03 c0 	movzx  esi,BYTE PTR ds:0xc0030f45
c001e623:	89 f0                	mov    eax,esi
c001e625:	84 c0                	test   al,al
c001e627:	75 1d                	jne    c001e646 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001e629:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e62d:	e8 99 f3 ff ff       	call   c001d9cb <schedule()>
c001e632:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001e637:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e63b:	48                   	dec    eax
c001e63c:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001e641:	75 d2                	jne    c001e615 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e643:	fb                   	sti    
c001e644:	eb cf                	jmp    c001e615 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e646:	a1 48 0f 03 c0       	mov    eax,ds:0xc0030f48
c001e64b:	c7 05 4c 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f4c,0x0
c001e655:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001e659:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001e65d:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001e661:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001e665:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e669:	50                   	push   eax
c001e66a:	6a 20                	push   0x20
c001e66c:	6a 00                	push   0x0
c001e66e:	68 60 0f 03 c0       	push   0xc0030f60
c001e673:	e8 d8 20 fe ff       	call   c0000750 <memset>
c001e678:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e67f:	e8 15 0f ff ff       	call   c000f599 <malloc>
c001e684:	83 c4 0c             	add    esp,0xc
c001e687:	89 c3                	mov    ebx,eax
c001e689:	ff 35 10 0f 03 c0    	push   DWORD PTR ds:0xc0030f10
c001e68f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e693:	50                   	push   eax
c001e694:	e8 95 45 ff ff       	call   c0012c2e <File::File(char const*, Process*)>
c001e699:	83 c4 10             	add    esp,0x10
c001e69c:	85 db                	test   ebx,ebx
c001e69e:	75 0a                	jne    c001e6aa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001e6a0:	83 ec 0c             	sub    esp,0xc
c001e6a3:	68 0c bd 02 c0       	push   0xc002bd0c
c001e6a8:	eb 3e                	jmp    c001e6e8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e6aa:	50                   	push   eax
c001e6ab:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e6af:	50                   	push   eax
c001e6b0:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e6b4:	50                   	push   eax
c001e6b5:	53                   	push   ebx
c001e6b6:	e8 83 48 ff ff       	call   c0012f3e <File::stat(unsigned long long*, bool*)>
c001e6bb:	83 c4 10             	add    esp,0x10
c001e6be:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001e6c3:	74 0a                	je     c001e6cf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e6c5:	83 ec 0c             	sub    esp,0xc
c001e6c8:	68 20 bd 02 c0       	push   0xc002bd20
c001e6cd:	eb 19                	jmp    c001e6e8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e6cf:	51                   	push   ecx
c001e6d0:	51                   	push   ecx
c001e6d1:	6a 01                	push   0x1
c001e6d3:	53                   	push   ebx
c001e6d4:	e8 b9 45 ff ff       	call   c0012c92 <File::open(FileOpenMode)>
c001e6d9:	83 c4 10             	add    esp,0x10
c001e6dc:	85 c0                	test   eax,eax
c001e6de:	74 24                	je     c001e704 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001e6e0:	83 ec 0c             	sub    esp,0xc
c001e6e3:	68 39 bd 02 c0       	push   0xc002bd39
c001e6e8:	e8 4e b7 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c001e6ed:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001e6f2:	83 c4 10             	add    esp,0x10
c001e6f5:	48                   	dec    eax
c001e6f6:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001e6fb:	85 c0                	test   eax,eax
c001e6fd:	75 01                	jne    c001e700 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001e6ff:	fb                   	sti    
c001e700:	31 f6                	xor    esi,esi
c001e702:	eb 58                	jmp    c001e75c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001e704:	0f b7 ed             	movzx  ebp,bp
c001e707:	50                   	push   eax
c001e708:	0f b7 ff             	movzx  edi,di
c001e70b:	50                   	push   eax
c001e70c:	55                   	push   ebp
c001e70d:	57                   	push   edi
c001e70e:	e8 95 fd ff ff       	call   c001e4a8 <Vm::realToLinear(unsigned short, unsigned short)>
c001e713:	5a                   	pop    edx
c001e714:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e716:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e71a:	51                   	push   ecx
c001e71b:	50                   	push   eax
c001e71c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e720:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e724:	53                   	push   ebx
c001e725:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e728:	83 c4 14             	add    esp,0x14
c001e72b:	53                   	push   ebx
c001e72c:	e8 bf 45 ff ff       	call   c0012cf0 <File::close()>
c001e731:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001e736:	83 c4 10             	add    esp,0x10
c001e739:	48                   	dec    eax
c001e73a:	c6 05 45 0f 03 c0 00 	mov    BYTE PTR ds:0xc0030f45,0x0
c001e741:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001e746:	85 c0                	test   eax,eax
c001e748:	75 01                	jne    c001e74b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001e74a:	fb                   	sti    
c001e74b:	83 ec 0c             	sub    esp,0xc
c001e74e:	ff 35 48 0f 03 c0    	push   DWORD PTR ds:0xc0030f48
c001e754:	e8 f5 f6 ff ff       	call   c001de4e <unblockTask(ThreadControlBlock*)>
c001e759:	83 c4 10             	add    esp,0x10
c001e75c:	83 c4 2c             	add    esp,0x2c
c001e75f:	89 f0                	mov    eax,esi
c001e761:	5b                   	pop    ebx
c001e762:	5e                   	pop    esi
c001e763:	5f                   	pop    edi
c001e764:	5d                   	pop    ebp
c001e765:	c3                   	ret    

c001e766 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e766:	57                   	push   edi
c001e767:	56                   	push   esi
c001e768:	53                   	push   ebx
c001e769:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e76d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e771:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e775:	83 e8 06             	sub    eax,0x6
c001e778:	0f b7 c0             	movzx  eax,ax
c001e77b:	50                   	push   eax
c001e77c:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e781:	50                   	push   eax
c001e782:	e8 21 fd ff ff       	call   c001e4a8 <Vm::realToLinear(unsigned short, unsigned short)>
c001e787:	5a                   	pop    edx
c001e788:	5e                   	pop    esi
c001e789:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e78c:	8d 56 fa             	lea    edx,[esi-0x6]
c001e78f:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e795:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e798:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e79b:	83 c2 02             	add    edx,0x2
c001e79e:	66 89 10             	mov    WORD PTR [eax],dx
c001e7a1:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e7a4:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e7a8:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e7ab:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e7af:	89 d6                	mov    esi,edx
c001e7b1:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e7b7:	66 81 e6 ff fd       	and    si,0xfdff
c001e7bc:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e7c0:	74 07                	je     c001e7c9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e7c2:	89 d6                	mov    esi,edx
c001e7c4:	66 81 ce 00 02       	or     si,0x200
c001e7c9:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e7cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7d2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e7d6:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e7de:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e7e1:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e7e9:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e7ec:	5b                   	pop    ebx
c001e7ed:	5e                   	pop    esi
c001e7ee:	5f                   	pop    edi
c001e7ef:	c3                   	ret    

c001e7f0 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e7f0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e7f5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e7fa:	c1 e0 04             	shl    eax,0x4
c001e7fd:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e800:	c3                   	ret    

c001e801 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e801:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e806:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e80b:	c1 e0 04             	shl    eax,0x4
c001e80e:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e812:	c3                   	ret    

c001e813 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e813:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e818:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e81d:	c1 e0 04             	shl    eax,0x4
c001e820:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e823:	c3                   	ret    

c001e824 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e824:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e829:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e82e:	c1 e0 04             	shl    eax,0x4
c001e831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e835:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e838:	c3                   	ret    

c001e839 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e839:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e83e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e843:	c1 e0 04             	shl    eax,0x4
c001e846:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e84a:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e84e:	c3                   	ret    

c001e84f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e84f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e854:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e859:	c1 e0 04             	shl    eax,0x4
c001e85c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e860:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e863:	c3                   	ret    

c001e864 <Vm::faultHandler(regs*)>:
c001e864:	55                   	push   ebp
c001e865:	57                   	push   edi
c001e866:	56                   	push   esi
c001e867:	53                   	push   ebx
c001e868:	83 ec 1c             	sub    esp,0x1c
c001e86b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e86f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001e872:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001e876:	0f b7 f8             	movzx  edi,ax
c001e879:	52                   	push   edx
c001e87a:	0f b7 c0             	movzx  eax,ax
c001e87d:	50                   	push   eax
c001e87e:	e8 25 fc ff ff       	call   c001e4a8 <Vm::realToLinear(unsigned short, unsigned short)>
c001e883:	5a                   	pop    edx
c001e884:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001e887:	59                   	pop    ecx
c001e888:	89 c1                	mov    ecx,eax
c001e88a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e88d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e891:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e896:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e89a:	0f b7 c5             	movzx  eax,bp
c001e89d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e8a1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001e8a5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e8a9:	e8 fa fb ff ff       	call   c001e4a8 <Vm::realToLinear(unsigned short, unsigned short)>
c001e8ae:	5e                   	pop    esi
c001e8af:	be 06 00 00 00       	mov    esi,0x6
c001e8b4:	5a                   	pop    edx
c001e8b5:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001e8ba:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001e8bf:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001e8c2:	80 fa 9d             	cmp    dl,0x9d
c001e8c5:	0f 84 2c 02 00 00    	je     c001eaf7 <Vm::faultHandler(regs*)+0x293>
c001e8cb:	0f 87 91 00 00 00    	ja     c001e962 <Vm::faultHandler(regs*)+0xfe>
c001e8d1:	80 fa 66             	cmp    dl,0x66
c001e8d4:	0f 84 98 01 00 00    	je     c001ea72 <Vm::faultHandler(regs*)+0x20e>
c001e8da:	77 47                	ja     c001e923 <Vm::faultHandler(regs*)+0xbf>
c001e8dc:	80 fa 36             	cmp    dl,0x36
c001e8df:	0f 84 80 01 00 00    	je     c001ea65 <Vm::faultHandler(regs*)+0x201>
c001e8e5:	77 1a                	ja     c001e901 <Vm::faultHandler(regs*)+0x9d>
c001e8e7:	80 fa 26             	cmp    dl,0x26
c001e8ea:	0f 84 4e 01 00 00    	je     c001ea3e <Vm::faultHandler(regs*)+0x1da>
c001e8f0:	80 fa 2e             	cmp    dl,0x2e
c001e8f3:	0f 85 e2 05 00 00    	jne    c001eedb <Vm::faultHandler(regs*)+0x677>
c001e8f9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e8fc:	31 f6                	xor    esi,esi
c001e8fe:	41                   	inc    ecx
c001e8ff:	eb be                	jmp    c001e8bf <Vm::faultHandler(regs*)+0x5b>
c001e901:	80 fa 64             	cmp    dl,0x64
c001e904:	0f 84 41 01 00 00    	je     c001ea4b <Vm::faultHandler(regs*)+0x1e7>
c001e90a:	0f 87 48 01 00 00    	ja     c001ea58 <Vm::faultHandler(regs*)+0x1f4>
c001e910:	80 fa 3e             	cmp    dl,0x3e
c001e913:	0f 85 c2 05 00 00    	jne    c001eedb <Vm::faultHandler(regs*)+0x677>
c001e919:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e91c:	be 01 00 00 00       	mov    esi,0x1
c001e921:	eb db                	jmp    c001e8fe <Vm::faultHandler(regs*)+0x9a>
c001e923:	80 fa 6d             	cmp    dl,0x6d
c001e926:	0f 84 ec 02 00 00    	je     c001ec18 <Vm::faultHandler(regs*)+0x3b4>
c001e92c:	77 17                	ja     c001e945 <Vm::faultHandler(regs*)+0xe1>
c001e92e:	80 fa 67             	cmp    dl,0x67
c001e931:	0f 84 48 01 00 00    	je     c001ea7f <Vm::faultHandler(regs*)+0x21b>
c001e937:	80 fa 6c             	cmp    dl,0x6c
c001e93a:	0f 84 69 02 00 00    	je     c001eba9 <Vm::faultHandler(regs*)+0x345>
c001e940:	e9 96 05 00 00       	jmp    c001eedb <Vm::faultHandler(regs*)+0x677>
c001e945:	80 fa 6f             	cmp    dl,0x6f
c001e948:	0f 84 f4 03 00 00    	je     c001ed42 <Vm::faultHandler(regs*)+0x4de>
c001e94e:	0f 82 59 03 00 00    	jb     c001ecad <Vm::faultHandler(regs*)+0x449>
c001e954:	80 fa 9c             	cmp    dl,0x9c
c001e957:	0f 84 2f 01 00 00    	je     c001ea8c <Vm::faultHandler(regs*)+0x228>
c001e95d:	e9 79 05 00 00       	jmp    c001eedb <Vm::faultHandler(regs*)+0x677>
c001e962:	80 fa ec             	cmp    dl,0xec
c001e965:	0f 84 14 05 00 00    	je     c001ee7f <Vm::faultHandler(regs*)+0x61b>
c001e96b:	77 7b                	ja     c001e9e8 <Vm::faultHandler(regs*)+0x184>
c001e96d:	80 fa e4             	cmp    dl,0xe4
c001e970:	0f 84 93 04 00 00    	je     c001ee09 <Vm::faultHandler(regs*)+0x5a5>
c001e976:	77 53                	ja     c001e9cb <Vm::faultHandler(regs*)+0x167>
c001e978:	80 fa cd             	cmp    dl,0xcd
c001e97b:	0f 84 d9 01 00 00    	je     c001eb5a <Vm::faultHandler(regs*)+0x2f6>
c001e981:	80 fa cf             	cmp    dl,0xcf
c001e984:	0f 85 51 05 00 00    	jne    c001eedb <Vm::faultHandler(regs*)+0x677>
c001e98a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001e98d:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001e990:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001e994:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001e997:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001e99b:	81 ca 00 02 02 00    	or     edx,0x20200
c001e9a1:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001e9a4:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001e9a8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e9ae:	66 c1 e8 09          	shr    ax,0x9
c001e9b2:	83 e0 01             	and    eax,0x1
c001e9b5:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e9b8:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e9bb:	83 c0 06             	add    eax,0x6
c001e9be:	25 ff ff 00 00       	and    eax,0xffff
c001e9c3:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001e9c6:	e9 0c 05 00 00       	jmp    c001eed7 <Vm::faultHandler(regs*)+0x673>
c001e9cb:	80 fa e6             	cmp    dl,0xe6
c001e9ce:	0f 84 7f 04 00 00    	je     c001ee53 <Vm::faultHandler(regs*)+0x5ef>
c001e9d4:	0f 82 4b 04 00 00    	jb     c001ee25 <Vm::faultHandler(regs*)+0x5c1>
c001e9da:	80 fa e7             	cmp    dl,0xe7
c001e9dd:	0f 84 87 04 00 00    	je     c001ee6a <Vm::faultHandler(regs*)+0x606>
c001e9e3:	e9 f3 04 00 00       	jmp    c001eedb <Vm::faultHandler(regs*)+0x677>
c001e9e8:	80 fa ef             	cmp    dl,0xef
c001e9eb:	0f 84 d1 04 00 00    	je     c001eec2 <Vm::faultHandler(regs*)+0x65e>
c001e9f1:	77 28                	ja     c001ea1b <Vm::faultHandler(regs*)+0x1b7>
c001e9f3:	80 fa ed             	cmp    dl,0xed
c001e9f6:	0f 84 9f 04 00 00    	je     c001ee9b <Vm::faultHandler(regs*)+0x637>
c001e9fc:	80 fa ee             	cmp    dl,0xee
c001e9ff:	0f 85 d6 04 00 00    	jne    c001eedb <Vm::faultHandler(regs*)+0x677>
c001ea05:	50                   	push   eax
c001ea06:	50                   	push   eax
c001ea07:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ea0b:	50                   	push   eax
c001ea0c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ea10:	50                   	push   eax
c001ea11:	e8 5c fa ff ff       	call   c001e472 <Vm::outbv(unsigned short, unsigned char)>
c001ea16:	e9 9f 04 00 00       	jmp    c001eeba <Vm::faultHandler(regs*)+0x656>
c001ea1b:	80 fa fa             	cmp    dl,0xfa
c001ea1e:	0f 84 69 01 00 00    	je     c001eb8d <Vm::faultHandler(regs*)+0x329>
c001ea24:	80 fa fb             	cmp    dl,0xfb
c001ea27:	0f 84 6e 01 00 00    	je     c001eb9b <Vm::faultHandler(regs*)+0x337>
c001ea2d:	80 fa f3             	cmp    dl,0xf3
c001ea30:	0f 85 a5 04 00 00    	jne    c001eedb <Vm::faultHandler(regs*)+0x677>
c001ea36:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea39:	e9 c0 fe ff ff       	jmp    c001e8fe <Vm::faultHandler(regs*)+0x9a>
c001ea3e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea41:	be 02 00 00 00       	mov    esi,0x2
c001ea46:	e9 b3 fe ff ff       	jmp    c001e8fe <Vm::faultHandler(regs*)+0x9a>
c001ea4b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea4e:	be 03 00 00 00       	mov    esi,0x3
c001ea53:	e9 a6 fe ff ff       	jmp    c001e8fe <Vm::faultHandler(regs*)+0x9a>
c001ea58:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea5b:	be 04 00 00 00       	mov    esi,0x4
c001ea60:	e9 99 fe ff ff       	jmp    c001e8fe <Vm::faultHandler(regs*)+0x9a>
c001ea65:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea68:	be 05 00 00 00       	mov    esi,0x5
c001ea6d:	e9 8c fe ff ff       	jmp    c001e8fe <Vm::faultHandler(regs*)+0x9a>
c001ea72:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea75:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001ea7a:	e9 7f fe ff ff       	jmp    c001e8fe <Vm::faultHandler(regs*)+0x9a>
c001ea7f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea82:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001ea87:	e9 72 fe ff ff       	jmp    c001e8fe <Vm::faultHandler(regs*)+0x9a>
c001ea8c:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001ea8f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ea93:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ea98:	74 30                	je     c001eaca <Vm::faultHandler(regs*)+0x266>
c001ea9a:	83 e9 04             	sub    ecx,0x4
c001ea9d:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001eaa3:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001eaa9:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001eaac:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001eaaf:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001eab5:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001eab9:	0f 84 15 04 00 00    	je     c001eed4 <Vm::faultHandler(regs*)+0x670>
c001eabf:	80 ce 02             	or     dh,0x2
c001eac2:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001eac5:	e9 0a 04 00 00       	jmp    c001eed4 <Vm::faultHandler(regs*)+0x670>
c001eaca:	83 e9 02             	sub    ecx,0x2
c001eacd:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001ead3:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001ead6:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001eada:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001eae0:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001eae4:	74 05                	je     c001eaeb <Vm::faultHandler(regs*)+0x287>
c001eae6:	80 ce 02             	or     dh,0x2
c001eae9:	eb 03                	jmp    c001eaee <Vm::faultHandler(regs*)+0x28a>
c001eaeb:	80 e6 fd             	and    dh,0xfd
c001eaee:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001eaf2:	e9 dd 03 00 00       	jmp    c001eed4 <Vm::faultHandler(regs*)+0x670>
c001eaf7:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eafc:	74 2a                	je     c001eb28 <Vm::faultHandler(regs*)+0x2c4>
c001eafe:	8b 10                	mov    edx,DWORD PTR [eax]
c001eb00:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001eb06:	81 ca 00 02 02 00    	or     edx,0x20200
c001eb0c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001eb0f:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb11:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eb17:	c1 e8 09             	shr    eax,0x9
c001eb1a:	83 e0 01             	and    eax,0x1
c001eb1d:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eb20:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001eb23:	83 c0 04             	add    eax,0x4
c001eb26:	eb 25                	jmp    c001eb4d <Vm::faultHandler(regs*)+0x2e9>
c001eb28:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001eb2b:	81 ca 00 02 02 00    	or     edx,0x20200
c001eb31:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001eb34:	66 8b 00             	mov    ax,WORD PTR [eax]
c001eb37:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eb3d:	66 c1 e8 09          	shr    ax,0x9
c001eb41:	83 e0 01             	and    eax,0x1
c001eb44:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eb47:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001eb4a:	83 c0 02             	add    eax,0x2
c001eb4d:	25 ff ff 00 00       	and    eax,0xffff
c001eb52:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001eb55:	e9 7a 03 00 00       	jmp    c001eed4 <Vm::faultHandler(regs*)+0x670>
c001eb5a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eb5e:	3c ee                	cmp    al,0xee
c001eb60:	75 10                	jne    c001eb72 <Vm::faultHandler(regs*)+0x30e>
c001eb62:	83 ec 0c             	sub    esp,0xc
c001eb65:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001eb68:	e8 a2 f9 ff ff       	call   c001e50f <Vm::mainloop3(unsigned long)>
c001eb6d:	e9 4b 03 00 00       	jmp    c001eebd <Vm::faultHandler(regs*)+0x659>
c001eb72:	83 ec 0c             	sub    esp,0xc
c001eb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001eb79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb7d:	51                   	push   ecx
c001eb7e:	50                   	push   eax
c001eb7f:	53                   	push   ebx
c001eb80:	e8 e1 fb ff ff       	call   c001e766 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001eb85:	83 c4 20             	add    esp,0x20
c001eb88:	e9 4a 03 00 00       	jmp    c001eed7 <Vm::faultHandler(regs*)+0x673>
c001eb8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb92:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001eb96:	e9 39 03 00 00       	jmp    c001eed4 <Vm::faultHandler(regs*)+0x670>
c001eb9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eba0:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001eba4:	e9 2b 03 00 00       	jmp    c001eed4 <Vm::faultHandler(regs*)+0x670>
c001eba9:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ebac:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ebb1:	74 2b                	je     c001ebde <Vm::faultHandler(regs*)+0x37a>
c001ebb3:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001ebba:	76 22                	jbe    c001ebde <Vm::faultHandler(regs*)+0x37a>
c001ebbc:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ebc0:	50                   	push   eax
c001ebc1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ebc5:	50                   	push   eax
c001ebc6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ebca:	50                   	push   eax
c001ebcb:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ebcf:	50                   	push   eax
c001ebd0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ebd4:	50                   	push   eax
c001ebd5:	6a 6c                	push   0x6c
c001ebd7:	6a 6c                	push   0x6c
c001ebd9:	e9 b9 01 00 00       	jmp    c001ed97 <Vm::faultHandler(regs*)+0x533>
c001ebde:	83 ec 0c             	sub    esp,0xc
c001ebe1:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ebe5:	0f b7 f6             	movzx  esi,si
c001ebe8:	50                   	push   eax
c001ebe9:	e8 71 f8 ff ff       	call   c001e45f <Vm::inbv(unsigned short)>
c001ebee:	83 c4 0c             	add    esp,0xc
c001ebf1:	0f b6 c0             	movzx  eax,al
c001ebf4:	50                   	push   eax
c001ebf5:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001ebf9:	50                   	push   eax
c001ebfa:	56                   	push   esi
c001ebfb:	e8 24 fc ff ff       	call   c001e824 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001ec00:	83 c4 10             	add    esp,0x10
c001ec03:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec06:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ec0a:	74 03                	je     c001ec0f <Vm::faultHandler(regs*)+0x3ab>
c001ec0c:	48                   	dec    eax
c001ec0d:	eb 01                	jmp    c001ec10 <Vm::faultHandler(regs*)+0x3ac>
c001ec0f:	40                   	inc    eax
c001ec10:	0f b7 c0             	movzx  eax,ax
c001ec13:	e9 8d 00 00 00       	jmp    c001eca5 <Vm::faultHandler(regs*)+0x441>
c001ec18:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ec1b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec1e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ec23:	74 29                	je     c001ec4e <Vm::faultHandler(regs*)+0x3ea>
c001ec25:	3d ff ff 00 00       	cmp    eax,0xffff
c001ec2a:	76 22                	jbe    c001ec4e <Vm::faultHandler(regs*)+0x3ea>
c001ec2c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ec30:	50                   	push   eax
c001ec31:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ec35:	50                   	push   eax
c001ec36:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ec3a:	50                   	push   eax
c001ec3b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ec3f:	50                   	push   eax
c001ec40:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ec44:	50                   	push   eax
c001ec45:	6a 6d                	push   0x6d
c001ec47:	6a 6d                	push   0x6d
c001ec49:	e9 49 01 00 00       	jmp    c001ed97 <Vm::faultHandler(regs*)+0x533>
c001ec4e:	0f b7 c8             	movzx  ecx,ax
c001ec51:	0f b7 f6             	movzx  esi,si
c001ec54:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ec57:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ec5c:	74 20                	je     c001ec7e <Vm::faultHandler(regs*)+0x41a>
c001ec5e:	ed                   	in     eax,dx
c001ec5f:	55                   	push   ebp
c001ec60:	50                   	push   eax
c001ec61:	51                   	push   ecx
c001ec62:	56                   	push   esi
c001ec63:	e8 e7 fb ff ff       	call   c001e84f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001ec68:	83 c4 10             	add    esp,0x10
c001ec6b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec6e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ec72:	74 05                	je     c001ec79 <Vm::faultHandler(regs*)+0x415>
c001ec74:	83 e8 04             	sub    eax,0x4
c001ec77:	eb 27                	jmp    c001eca0 <Vm::faultHandler(regs*)+0x43c>
c001ec79:	83 c0 04             	add    eax,0x4
c001ec7c:	eb 22                	jmp    c001eca0 <Vm::faultHandler(regs*)+0x43c>
c001ec7e:	66 ed                	in     ax,dx
c001ec80:	0f b7 c0             	movzx  eax,ax
c001ec83:	57                   	push   edi
c001ec84:	50                   	push   eax
c001ec85:	51                   	push   ecx
c001ec86:	56                   	push   esi
c001ec87:	e8 ad fb ff ff       	call   c001e839 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001ec8c:	83 c4 10             	add    esp,0x10
c001ec8f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec92:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ec96:	74 05                	je     c001ec9d <Vm::faultHandler(regs*)+0x439>
c001ec98:	83 e8 02             	sub    eax,0x2
c001ec9b:	eb 03                	jmp    c001eca0 <Vm::faultHandler(regs*)+0x43c>
c001ec9d:	83 c0 02             	add    eax,0x2
c001eca0:	25 ff ff 00 00       	and    eax,0xffff
c001eca5:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001eca8:	e9 27 02 00 00       	jmp    c001eed4 <Vm::faultHandler(regs*)+0x670>
c001ecad:	8d 46 ff             	lea    eax,[esi-0x1]
c001ecb0:	3c 05                	cmp    al,0x5
c001ecb2:	77 24                	ja     c001ecd8 <Vm::faultHandler(regs*)+0x474>
c001ecb4:	0f b6 c0             	movzx  eax,al
c001ecb7:	ff 24 85 ac bd 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4254]
c001ecbe:	0f b7 fd             	movzx  edi,bp
c001ecc1:	eb 15                	jmp    c001ecd8 <Vm::faultHandler(regs*)+0x474>
c001ecc3:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001ecc7:	eb 0f                	jmp    c001ecd8 <Vm::faultHandler(regs*)+0x474>
c001ecc9:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001eccd:	eb 09                	jmp    c001ecd8 <Vm::faultHandler(regs*)+0x474>
c001eccf:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001ecd3:	eb 03                	jmp    c001ecd8 <Vm::faultHandler(regs*)+0x474>
c001ecd5:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001ecd8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ecdb:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ece0:	74 29                	je     c001ed0b <Vm::faultHandler(regs*)+0x4a7>
c001ece2:	3d ff ff 00 00       	cmp    eax,0xffff
c001ece7:	76 22                	jbe    c001ed0b <Vm::faultHandler(regs*)+0x4a7>
c001ece9:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eced:	50                   	push   eax
c001ecee:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ecf2:	50                   	push   eax
c001ecf3:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ecf7:	50                   	push   eax
c001ecf8:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ecfc:	50                   	push   eax
c001ecfd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ed01:	50                   	push   eax
c001ed02:	6a 6e                	push   0x6e
c001ed04:	6a 6e                	push   0x6e
c001ed06:	e9 8c 00 00 00       	jmp    c001ed97 <Vm::faultHandler(regs*)+0x533>
c001ed0b:	0f b7 c0             	movzx  eax,ax
c001ed0e:	52                   	push   edx
c001ed0f:	52                   	push   edx
c001ed10:	50                   	push   eax
c001ed11:	57                   	push   edi
c001ed12:	e8 d9 fa ff ff       	call   c001e7f0 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001ed17:	59                   	pop    ecx
c001ed18:	0f b6 c0             	movzx  eax,al
c001ed1b:	5e                   	pop    esi
c001ed1c:	50                   	push   eax
c001ed1d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ed21:	50                   	push   eax
c001ed22:	e8 4b f7 ff ff       	call   c001e472 <Vm::outbv(unsigned short, unsigned char)>
c001ed27:	83 c4 10             	add    esp,0x10
c001ed2a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ed2d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ed31:	74 03                	je     c001ed36 <Vm::faultHandler(regs*)+0x4d2>
c001ed33:	48                   	dec    eax
c001ed34:	eb 01                	jmp    c001ed37 <Vm::faultHandler(regs*)+0x4d3>
c001ed36:	40                   	inc    eax
c001ed37:	0f b7 c0             	movzx  eax,ax
c001ed3a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ed3d:	e9 92 01 00 00       	jmp    c001eed4 <Vm::faultHandler(regs*)+0x670>
c001ed42:	8d 46 ff             	lea    eax,[esi-0x1]
c001ed45:	3c 05                	cmp    al,0x5
c001ed47:	77 1f                	ja     c001ed68 <Vm::faultHandler(regs*)+0x504>
c001ed49:	0f b6 c0             	movzx  eax,al
c001ed4c:	ff 24 85 c4 bd 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd423c]
c001ed53:	89 ef                	mov    edi,ebp
c001ed55:	eb 11                	jmp    c001ed68 <Vm::faultHandler(regs*)+0x504>
c001ed57:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001ed5a:	eb 0c                	jmp    c001ed68 <Vm::faultHandler(regs*)+0x504>
c001ed5c:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001ed5f:	eb 07                	jmp    c001ed68 <Vm::faultHandler(regs*)+0x504>
c001ed61:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001ed64:	eb 02                	jmp    c001ed68 <Vm::faultHandler(regs*)+0x504>
c001ed66:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001ed68:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001ed6b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ed70:	74 37                	je     c001eda9 <Vm::faultHandler(regs*)+0x545>
c001ed72:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001ed78:	76 2f                	jbe    c001eda9 <Vm::faultHandler(regs*)+0x545>
c001ed7a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ed7e:	50                   	push   eax
c001ed7f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ed83:	50                   	push   eax
c001ed84:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ed88:	50                   	push   eax
c001ed89:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ed8d:	50                   	push   eax
c001ed8e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ed92:	50                   	push   eax
c001ed93:	6a 6f                	push   0x6f
c001ed95:	6a 6f                	push   0x6f
c001ed97:	68 52 bd 02 c0       	push   0xc002bd52
c001ed9c:	e8 2e 39 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c001eda1:	83 c4 20             	add    esp,0x20
c001eda4:	e9 86 01 00 00       	jmp    c001ef2f <Vm::faultHandler(regs*)+0x6cb>
c001eda9:	0f b7 d7             	movzx  edx,di
c001edac:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001edaf:	0f b7 c6             	movzx  eax,si
c001edb2:	81 e1 00 04 00 00    	and    ecx,0x400
c001edb8:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001edbb:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001edc0:	74 1d                	je     c001eddf <Vm::faultHandler(regs*)+0x57b>
c001edc2:	55                   	push   ebp
c001edc3:	55                   	push   ebp
c001edc4:	50                   	push   eax
c001edc5:	52                   	push   edx
c001edc6:	e8 48 fa ff ff       	call   c001e813 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001edcb:	83 c4 10             	add    esp,0x10
c001edce:	89 fa                	mov    edx,edi
c001edd0:	ef                   	out    dx,eax
c001edd1:	85 c9                	test   ecx,ecx
c001edd3:	74 05                	je     c001edda <Vm::faultHandler(regs*)+0x576>
c001edd5:	83 ee 04             	sub    esi,0x4
c001edd8:	eb 21                	jmp    c001edfb <Vm::faultHandler(regs*)+0x597>
c001edda:	83 c6 04             	add    esi,0x4
c001eddd:	eb 1c                	jmp    c001edfb <Vm::faultHandler(regs*)+0x597>
c001eddf:	55                   	push   ebp
c001ede0:	55                   	push   ebp
c001ede1:	50                   	push   eax
c001ede2:	52                   	push   edx
c001ede3:	e8 19 fa ff ff       	call   c001e801 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001ede8:	83 c4 10             	add    esp,0x10
c001edeb:	89 fa                	mov    edx,edi
c001eded:	66 ef                	out    dx,ax
c001edef:	85 c9                	test   ecx,ecx
c001edf1:	74 05                	je     c001edf8 <Vm::faultHandler(regs*)+0x594>
c001edf3:	83 ee 02             	sub    esi,0x2
c001edf6:	eb 03                	jmp    c001edfb <Vm::faultHandler(regs*)+0x597>
c001edf8:	83 c6 02             	add    esi,0x2
c001edfb:	81 e6 ff ff 00 00    	and    esi,0xffff
c001ee01:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001ee04:	e9 cb 00 00 00       	jmp    c001eed4 <Vm::faultHandler(regs*)+0x670>
c001ee09:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ee10:	83 ec 0c             	sub    esp,0xc
c001ee13:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ee17:	50                   	push   eax
c001ee18:	e8 42 f6 ff ff       	call   c001e45f <Vm::inbv(unsigned short)>
c001ee1d:	0f b6 c0             	movzx  eax,al
c001ee20:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ee23:	eb 3f                	jmp    c001ee64 <Vm::faultHandler(regs*)+0x600>
c001ee25:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee2a:	74 07                	je     c001ee33 <Vm::faultHandler(regs*)+0x5cf>
c001ee2c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ee30:	ed                   	in     eax,dx
c001ee31:	eb 14                	jmp    c001ee47 <Vm::faultHandler(regs*)+0x5e3>
c001ee33:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001ee36:	66 31 f6             	xor    si,si
c001ee39:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001ee3c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ee40:	66 ed                	in     ax,dx
c001ee42:	0f b7 c0             	movzx  eax,ax
c001ee45:	09 f0                	or     eax,esi
c001ee47:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ee4a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ee4e:	e9 84 00 00 00       	jmp    c001eed7 <Vm::faultHandler(regs*)+0x673>
c001ee53:	52                   	push   edx
c001ee54:	52                   	push   edx
c001ee55:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ee59:	50                   	push   eax
c001ee5a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ee5e:	50                   	push   eax
c001ee5f:	e8 0e f6 ff ff       	call   c001e472 <Vm::outbv(unsigned short, unsigned char)>
c001ee64:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ee68:	eb 53                	jmp    c001eebd <Vm::faultHandler(regs*)+0x659>
c001ee6a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ee6d:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ee71:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee76:	74 03                	je     c001ee7b <Vm::faultHandler(regs*)+0x617>
c001ee78:	ef                   	out    dx,eax
c001ee79:	eb cf                	jmp    c001ee4a <Vm::faultHandler(regs*)+0x5e6>
c001ee7b:	66 ef                	out    dx,ax
c001ee7d:	eb cb                	jmp    c001ee4a <Vm::faultHandler(regs*)+0x5e6>
c001ee7f:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ee86:	83 ec 0c             	sub    esp,0xc
c001ee89:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ee8d:	50                   	push   eax
c001ee8e:	e8 cc f5 ff ff       	call   c001e45f <Vm::inbv(unsigned short)>
c001ee93:	0f b6 c0             	movzx  eax,al
c001ee96:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ee99:	eb 1f                	jmp    c001eeba <Vm::faultHandler(regs*)+0x656>
c001ee9b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ee9e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eea3:	74 03                	je     c001eea8 <Vm::faultHandler(regs*)+0x644>
c001eea5:	ed                   	in     eax,dx
c001eea6:	eb 0d                	jmp    c001eeb5 <Vm::faultHandler(regs*)+0x651>
c001eea8:	66 ed                	in     ax,dx
c001eeaa:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001eead:	0f b7 c0             	movzx  eax,ax
c001eeb0:	66 31 d2             	xor    dx,dx
c001eeb3:	09 d0                	or     eax,edx
c001eeb5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001eeb8:	eb 1a                	jmp    c001eed4 <Vm::faultHandler(regs*)+0x670>
c001eeba:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eebd:	83 c4 10             	add    esp,0x10
c001eec0:	eb 15                	jmp    c001eed7 <Vm::faultHandler(regs*)+0x673>
c001eec2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001eec5:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001eec8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eecd:	74 03                	je     c001eed2 <Vm::faultHandler(regs*)+0x66e>
c001eecf:	ef                   	out    dx,eax
c001eed0:	eb 02                	jmp    c001eed4 <Vm::faultHandler(regs*)+0x670>
c001eed2:	66 ef                	out    dx,ax
c001eed4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eed7:	b0 01                	mov    al,0x1
c001eed9:	eb 56                	jmp    c001ef31 <Vm::faultHandler(regs*)+0x6cd>
c001eedb:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eedf:	50                   	push   eax
c001eee0:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001eee4:	50                   	push   eax
c001eee5:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eee9:	50                   	push   eax
c001eeea:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001eeee:	50                   	push   eax
c001eeef:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eef3:	50                   	push   eax
c001eef4:	52                   	push   edx
c001eef5:	52                   	push   edx
c001eef6:	68 7f bd 02 c0       	push   0xc002bd7f
c001eefb:	e8 cf 37 ff ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c001ef00:	83 c4 20             	add    esp,0x20
c001ef03:	83 ec 0c             	sub    esp,0xc
c001ef06:	6a 60                	push   0x60
c001ef08:	e8 52 f5 ff ff       	call   c001e45f <Vm::inbv(unsigned short)>
c001ef0d:	83 c4 10             	add    esp,0x10
c001ef10:	3c 1c                	cmp    al,0x1c
c001ef12:	74 04                	je     c001ef18 <Vm::faultHandler(regs*)+0x6b4>
c001ef14:	3c 5a                	cmp    al,0x5a
c001ef16:	75 eb                	jne    c001ef03 <Vm::faultHandler(regs*)+0x69f>
c001ef18:	3c 5a                	cmp    al,0x5a
c001ef1a:	74 04                	je     c001ef20 <Vm::faultHandler(regs*)+0x6bc>
c001ef1c:	3c 1c                	cmp    al,0x1c
c001ef1e:	75 0f                	jne    c001ef2f <Vm::faultHandler(regs*)+0x6cb>
c001ef20:	83 ec 0c             	sub    esp,0xc
c001ef23:	6a 60                	push   0x60
c001ef25:	e8 35 f5 ff ff       	call   c001e45f <Vm::inbv(unsigned short)>
c001ef2a:	83 c4 10             	add    esp,0x10
c001ef2d:	eb e9                	jmp    c001ef18 <Vm::faultHandler(regs*)+0x6b4>
c001ef2f:	31 c0                	xor    eax,eax
c001ef31:	83 c4 1c             	add    esp,0x1c
c001ef34:	5b                   	pop    ebx
c001ef35:	5e                   	pop    esi
c001ef36:	5f                   	pop    edi
c001ef37:	5d                   	pop    ebp
c001ef38:	c3                   	ret    

c001ef39 <Vm::fpuInternalTo32(unsigned long long)>:
c001ef39:	57                   	push   edi
c001ef3a:	56                   	push   esi
c001ef3b:	53                   	push   ebx
c001ef3c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef44:	89 d6                	mov    esi,edx
c001ef46:	89 d7                	mov    edi,edx
c001ef48:	89 c1                	mov    ecx,eax
c001ef4a:	c1 ef 14             	shr    edi,0x14
c001ef4d:	89 d3                	mov    ebx,edx
c001ef4f:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ef55:	31 d2                	xor    edx,edx
c001ef57:	89 f8                	mov    eax,edi
c001ef59:	81 e6 00 00 00 80    	and    esi,0x80000000
c001ef5f:	bf ff 00 00 00       	mov    edi,0xff
c001ef64:	05 80 fc ff ff       	add    eax,0xfffffc80
c001ef69:	83 d2 ff             	adc    edx,0xffffffff
c001ef6c:	39 c7                	cmp    edi,eax
c001ef6e:	bf 00 00 00 00       	mov    edi,0x0
c001ef73:	19 d7                	sbb    edi,edx
c001ef75:	72 15                	jb     c001ef8c <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001ef77:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001ef7b:	c1 e0 17             	shl    eax,0x17
c001ef7e:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001ef84:	09 f1                	or     ecx,esi
c001ef86:	09 c1                	or     ecx,eax
c001ef88:	89 cf                	mov    edi,ecx
c001ef8a:	eb 02                	jmp    c001ef8e <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001ef8c:	31 ff                	xor    edi,edi
c001ef8e:	89 f8                	mov    eax,edi
c001ef90:	5b                   	pop    ebx
c001ef91:	5e                   	pop    esi
c001ef92:	5f                   	pop    edi
c001ef93:	c3                   	ret    

c001ef94 <Vm::fpuInternalTo64(unsigned long long)>:
c001ef94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef98:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ef9c:	c3                   	ret    

c001ef9d <Vm::fpu32ToInternal(unsigned int)>:
c001ef9d:	57                   	push   edi
c001ef9e:	31 ff                	xor    edi,edi
c001efa0:	56                   	push   esi
c001efa1:	53                   	push   ebx
c001efa2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001efa6:	89 cb                	mov    ebx,ecx
c001efa8:	89 ce                	mov    esi,ecx
c001efaa:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001efb0:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001efb6:	c1 e9 17             	shr    ecx,0x17
c001efb9:	89 f0                	mov    eax,esi
c001efbb:	0f b6 d1             	movzx  edx,cl
c001efbe:	81 c2 80 03 00 00    	add    edx,0x380
c001efc4:	89 d1                	mov    ecx,edx
c001efc6:	89 fa                	mov    edx,edi
c001efc8:	c1 e1 14             	shl    ecx,0x14
c001efcb:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001efcf:	c1 e0 1d             	shl    eax,0x1d
c001efd2:	89 d7                	mov    edi,edx
c001efd4:	89 c6                	mov    esi,eax
c001efd6:	89 ca                	mov    edx,ecx
c001efd8:	89 f0                	mov    eax,esi
c001efda:	09 fa                	or     edx,edi
c001efdc:	09 da                	or     edx,ebx
c001efde:	5b                   	pop    ebx
c001efdf:	5e                   	pop    esi
c001efe0:	5f                   	pop    edi
c001efe1:	c3                   	ret    

c001efe2 <Vm::fpu64ToInternal(unsigned long long)>:
c001efe2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efe6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001efea:	c3                   	ret    

c001efeb <Vm::fpuFloatToLong(unsigned long long)>:
c001efeb:	57                   	push   edi
c001efec:	31 c0                	xor    eax,eax
c001efee:	56                   	push   esi
c001efef:	31 d2                	xor    edx,edx
c001eff1:	53                   	push   ebx
c001eff2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eff6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001effa:	89 d9                	mov    ecx,ebx
c001effc:	c1 e9 14             	shr    ecx,0x14
c001efff:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f005:	89 cf                	mov    edi,ecx
c001f007:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f00d:	78 33                	js     c001f042 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f00f:	89 d9                	mov    ecx,ebx
c001f011:	89 f0                	mov    eax,esi
c001f013:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f019:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f01f:	89 ca                	mov    edx,ecx
c001f021:	b9 34 00 00 00       	mov    ecx,0x34
c001f026:	29 f9                	sub    ecx,edi
c001f028:	0f ad d0             	shrd   eax,edx,cl
c001f02b:	d3 fa                	sar    edx,cl
c001f02d:	f6 c1 20             	test   cl,0x20
c001f030:	74 05                	je     c001f037 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f032:	89 d0                	mov    eax,edx
c001f034:	c1 fa 1f             	sar    edx,0x1f
c001f037:	85 db                	test   ebx,ebx
c001f039:	79 07                	jns    c001f042 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f03b:	f7 d8                	neg    eax
c001f03d:	83 d2 00             	adc    edx,0x0
c001f040:	f7 da                	neg    edx
c001f042:	5b                   	pop    ebx
c001f043:	5e                   	pop    esi
c001f044:	5f                   	pop    edi
c001f045:	c3                   	ret    

c001f046 <Vm::fpuULongToFloat(unsigned long long)>:
c001f046:	57                   	push   edi
c001f047:	31 c9                	xor    ecx,ecx
c001f049:	56                   	push   esi
c001f04a:	53                   	push   ebx
c001f04b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f04f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f053:	0f ba e7 14          	bt     edi,0x14
c001f057:	72 07                	jb     c001f060 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f059:	01 f6                	add    esi,esi
c001f05b:	11 ff                	adc    edi,edi
c001f05d:	41                   	inc    ecx
c001f05e:	eb f3                	jmp    c001f053 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f060:	89 fa                	mov    edx,edi
c001f062:	89 f0                	mov    eax,esi
c001f064:	bb 33 04 00 00       	mov    ebx,0x433
c001f069:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f06f:	29 cb                	sub    ebx,ecx
c001f071:	89 d9                	mov    ecx,ebx
c001f073:	5b                   	pop    ebx
c001f074:	c1 e1 14             	shl    ecx,0x14
c001f077:	5e                   	pop    esi
c001f078:	09 ca                	or     edx,ecx
c001f07a:	5f                   	pop    edi
c001f07b:	c3                   	ret    

c001f07c <Vm::fpuLongToFloat(long long)>:
c001f07c:	56                   	push   esi
c001f07d:	31 c0                	xor    eax,eax
c001f07f:	53                   	push   ebx
c001f080:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f084:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f088:	39 c8                	cmp    eax,ecx
c001f08a:	19 d8                	sbb    eax,ebx
c001f08c:	7d 04                	jge    c001f092 <Vm::fpuLongToFloat(long long)+0x16>
c001f08e:	31 f6                	xor    esi,esi
c001f090:	eb 0c                	jmp    c001f09e <Vm::fpuLongToFloat(long long)+0x22>
c001f092:	f7 d9                	neg    ecx
c001f094:	be 01 00 00 00       	mov    esi,0x1
c001f099:	83 d3 00             	adc    ebx,0x0
c001f09c:	f7 db                	neg    ebx
c001f09e:	31 c0                	xor    eax,eax
c001f0a0:	0f ba e3 14          	bt     ebx,0x14
c001f0a4:	72 07                	jb     c001f0ad <Vm::fpuLongToFloat(long long)+0x31>
c001f0a6:	01 c9                	add    ecx,ecx
c001f0a8:	11 db                	adc    ebx,ebx
c001f0aa:	40                   	inc    eax
c001f0ab:	eb f3                	jmp    c001f0a0 <Vm::fpuLongToFloat(long long)+0x24>
c001f0ad:	ba 33 04 00 00       	mov    edx,0x433
c001f0b2:	29 c2                	sub    edx,eax
c001f0b4:	89 c8                	mov    eax,ecx
c001f0b6:	c1 e2 14             	shl    edx,0x14
c001f0b9:	89 d9                	mov    ecx,ebx
c001f0bb:	89 f3                	mov    ebx,esi
c001f0bd:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f0c3:	09 ca                	or     edx,ecx
c001f0c5:	84 db                	test   bl,bl
c001f0c7:	74 06                	je     c001f0cf <Vm::fpuLongToFloat(long long)+0x53>
c001f0c9:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f0cf:	5b                   	pop    ebx
c001f0d0:	5e                   	pop    esi
c001f0d1:	c3                   	ret    

c001f0d2 <Vm::fpuGet0()>:
c001f0d2:	31 c0                	xor    eax,eax
c001f0d4:	31 d2                	xor    edx,edx
c001f0d6:	c3                   	ret    

c001f0d7 <Vm::fpuGet1()>:
c001f0d7:	b8 01 00 00 00       	mov    eax,0x1
c001f0dc:	31 d2                	xor    edx,edx
c001f0de:	c3                   	ret    

c001f0df <Vm::fpuGetPi()>:
c001f0df:	b8 03 00 00 00       	mov    eax,0x3
c001f0e4:	31 d2                	xor    edx,edx
c001f0e6:	c3                   	ret    

c001f0e7 <Vm::fpuGetLog2E()>:
c001f0e7:	83 ec 18             	sub    esp,0x18
c001f0ea:	68 dc bd 02 c0       	push   0xc002bddc
c001f0ef:	e8 47 ad ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c001f0f4:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f0f9:	31 d2                	xor    edx,edx
c001f0fb:	83 c4 1c             	add    esp,0x1c
c001f0fe:	c3                   	ret    

c001f0ff <Vm::fpuGetLogE2()>:
c001f0ff:	83 ec 18             	sub    esp,0x18
c001f102:	68 e8 bd 02 c0       	push   0xc002bde8
c001f107:	e8 2f ad ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c001f10c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f111:	31 d2                	xor    edx,edx
c001f113:	83 c4 1c             	add    esp,0x1c
c001f116:	c3                   	ret    

c001f117 <Vm::fpuGetLog210()>:
c001f117:	83 ec 18             	sub    esp,0x18
c001f11a:	68 f4 bd 02 c0       	push   0xc002bdf4
c001f11f:	e8 17 ad ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c001f124:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f129:	31 d2                	xor    edx,edx
c001f12b:	83 c4 1c             	add    esp,0x1c
c001f12e:	c3                   	ret    

c001f12f <Vm::fpuGetLog102()>:
c001f12f:	83 ec 18             	sub    esp,0x18
c001f132:	68 01 be 02 c0       	push   0xc002be01
c001f137:	e8 ff ac ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c001f13c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f141:	31 d2                	xor    edx,edx
c001f143:	83 c4 1c             	add    esp,0x1c
c001f146:	c3                   	ret    

c001f147 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f147:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f14b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f14f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f153:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f157:	0f 92 c0             	setb   al
c001f15a:	c3                   	ret    

c001f15b <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f15b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f15f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f163:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f167:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f16b:	09 c2                	or     edx,eax
c001f16d:	0f 94 c0             	sete   al
c001f170:	c3                   	ret    

c001f171 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f171:	57                   	push   edi
c001f172:	56                   	push   esi
c001f173:	53                   	push   ebx
c001f174:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f178:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f17c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f180:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f184:	57                   	push   edi
c001f185:	56                   	push   esi
c001f186:	53                   	push   ebx
c001f187:	51                   	push   ecx
c001f188:	e8 ce ff ff ff       	call   c001f15b <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f18d:	83 c4 10             	add    esp,0x10
c001f190:	88 c2                	mov    dl,al
c001f192:	31 c0                	xor    eax,eax
c001f194:	84 d2                	test   dl,dl
c001f196:	75 0c                	jne    c001f1a4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f198:	57                   	push   edi
c001f199:	56                   	push   esi
c001f19a:	53                   	push   ebx
c001f19b:	51                   	push   ecx
c001f19c:	e8 a6 ff ff ff       	call   c001f147 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f1a1:	83 c4 10             	add    esp,0x10
c001f1a4:	83 e0 01             	and    eax,0x1
c001f1a7:	5b                   	pop    ebx
c001f1a8:	88 c1                	mov    cl,al
c001f1aa:	83 e2 01             	and    edx,0x1
c001f1ad:	a0 81 0f 03 c0       	mov    al,ds:0xc0030f81
c001f1b2:	c1 e2 06             	shl    edx,0x6
c001f1b5:	83 e0 ba             	and    eax,0xffffffba
c001f1b8:	5e                   	pop    esi
c001f1b9:	09 c8                	or     eax,ecx
c001f1bb:	5f                   	pop    edi
c001f1bc:	09 d0                	or     eax,edx
c001f1be:	a2 81 0f 03 c0       	mov    ds:0xc0030f81,al
c001f1c3:	c3                   	ret    

c001f1c4 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f1c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f1c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f1cc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f1d0:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f1d4:	c3                   	ret    

c001f1d5 <Vm::fpuAbs(unsigned long long)>:
c001f1d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f1dd:	c3                   	ret    

c001f1de <Vm::fpuChs(unsigned long long)>:
c001f1de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f1e6:	f7 d8                	neg    eax
c001f1e8:	83 d2 00             	adc    edx,0x0
c001f1eb:	f7 da                	neg    edx
c001f1ed:	c3                   	ret    

c001f1ee <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f1ee:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f1f2:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f1f7:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f1fb:	eb c7                	jmp    c001f1c4 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f1fd <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f1fd:	53                   	push   ebx
c001f1fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f202:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f206:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f20a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f20e:	0f af ca             	imul   ecx,edx
c001f211:	0f af d8             	imul   ebx,eax
c001f214:	f7 e2                	mul    edx
c001f216:	01 d9                	add    ecx,ebx
c001f218:	5b                   	pop    ebx
c001f219:	01 ca                	add    edx,ecx
c001f21b:	c3                   	ret    

c001f21c <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f21c:	83 ec 0c             	sub    esp,0xc
c001f21f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f22b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f22f:	e8 e0 74 00 00       	call   c0026714 <__udivdi3>
c001f234:	83 c4 1c             	add    esp,0x1c
c001f237:	c3                   	ret    

c001f238 <Vm::fpuSquare(unsigned long long)>:
c001f238:	50                   	push   eax
c001f239:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f23d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f241:	52                   	push   edx
c001f242:	50                   	push   eax
c001f243:	52                   	push   edx
c001f244:	50                   	push   eax
c001f245:	e8 b3 ff ff ff       	call   c001f1fd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f24a:	83 c4 14             	add    esp,0x14
c001f24d:	c3                   	ret    

c001f24e <Vm::fpuGetReg(int)>:
c001f24e:	83 ec 0c             	sub    esp,0xc
c001f251:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f256:	76 10                	jbe    c001f268 <Vm::fpuGetReg(int)+0x1a>
c001f258:	83 ec 0c             	sub    esp,0xc
c001f25b:	68 0e be 02 c0       	push   0xc002be0e
c001f260:	e8 d6 ab ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c001f265:	83 c4 10             	add    esp,0x10
c001f268:	a0 81 0f 03 c0       	mov    al,ds:0xc0030f81
c001f26d:	b9 08 00 00 00       	mov    ecx,0x8
c001f272:	c0 e8 03             	shr    al,0x3
c001f275:	83 e0 07             	and    eax,0x7
c001f278:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f27c:	99                   	cdq    
c001f27d:	f7 f9                	idiv   ecx
c001f27f:	8b 04 d5 84 0f 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcf07c]
c001f286:	8b 14 d5 88 0f 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcf078]
c001f28d:	83 c4 0c             	add    esp,0xc
c001f290:	c3                   	ret    

c001f291 <Vm::fpuSetReg(int, unsigned long long)>:
c001f291:	57                   	push   edi
c001f292:	56                   	push   esi
c001f293:	52                   	push   edx
c001f294:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f298:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f29c:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f2a1:	76 10                	jbe    c001f2b3 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f2a3:	83 ec 0c             	sub    esp,0xc
c001f2a6:	68 21 be 02 c0       	push   0xc002be21
c001f2ab:	e8 8b ab ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c001f2b0:	83 c4 10             	add    esp,0x10
c001f2b3:	a0 81 0f 03 c0       	mov    al,ds:0xc0030f81
c001f2b8:	b9 08 00 00 00       	mov    ecx,0x8
c001f2bd:	c0 e8 03             	shr    al,0x3
c001f2c0:	83 e0 07             	and    eax,0x7
c001f2c3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f2c7:	99                   	cdq    
c001f2c8:	f7 f9                	idiv   ecx
c001f2ca:	89 34 d5 84 0f 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf07c],esi
c001f2d1:	89 3c d5 88 0f 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf078],edi
c001f2d8:	58                   	pop    eax
c001f2d9:	5e                   	pop    esi
c001f2da:	5f                   	pop    edi
c001f2db:	c3                   	ret    

c001f2dc <Vm::fpuPush(unsigned long long)>:
c001f2dc:	a0 81 0f 03 c0       	mov    al,ds:0xc0030f81
c001f2e1:	c0 e8 03             	shr    al,0x3
c001f2e4:	83 e0 07             	and    eax,0x7
c001f2e7:	83 c0 07             	add    eax,0x7
c001f2ea:	88 c2                	mov    dl,al
c001f2ec:	83 e0 07             	and    eax,0x7
c001f2ef:	83 e2 07             	and    edx,0x7
c001f2f2:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f2f9:	8a 15 81 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030f81
c001f2ff:	83 e2 c7             	and    edx,0xffffffc7
c001f302:	09 ca                	or     edx,ecx
c001f304:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f308:	88 15 81 0f 03 c0    	mov    BYTE PTR ds:0xc0030f81,dl
c001f30e:	89 0c c5 88 0f 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf078],ecx
c001f315:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f319:	89 14 c5 84 0f 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf07c],edx
c001f320:	a1 c4 0f 03 c0       	mov    eax,ds:0xc0030fc4
c001f325:	83 f8 08             	cmp    eax,0x8
c001f328:	75 08                	jne    c001f332 <Vm::fpuPush(unsigned long long)+0x56>
c001f32a:	80 0d 80 0f 03 c0 40 	or     BYTE PTR ds:0xc0030f80,0x40
c001f331:	c3                   	ret    
c001f332:	40                   	inc    eax
c001f333:	a3 c4 0f 03 c0       	mov    ds:0xc0030fc4,eax
c001f338:	c3                   	ret    

c001f339 <Vm::fpuPop()>:
c001f339:	8a 0d 81 0f 03 c0    	mov    cl,BYTE PTR ds:0xc0030f81
c001f33f:	53                   	push   ebx
c001f340:	c0 e9 03             	shr    cl,0x3
c001f343:	8a 1d 81 0f 03 c0    	mov    bl,BYTE PTR ds:0xc0030f81
c001f349:	83 e1 07             	and    ecx,0x7
c001f34c:	83 e3 c7             	and    ebx,0xffffffc7
c001f34f:	8b 04 cd 84 0f 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcf07c]
c001f356:	8b 14 cd 88 0f 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcf078]
c001f35d:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f364:	83 e1 38             	and    ecx,0x38
c001f367:	09 d9                	or     ecx,ebx
c001f369:	88 0d 81 0f 03 c0    	mov    BYTE PTR ds:0xc0030f81,cl
c001f36f:	8b 0d c4 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030fc4
c001f375:	85 c9                	test   ecx,ecx
c001f377:	74 09                	je     c001f382 <Vm::fpuPop()+0x49>
c001f379:	49                   	dec    ecx
c001f37a:	89 0d c4 0f 03 c0    	mov    DWORD PTR ds:0xc0030fc4,ecx
c001f380:	eb 07                	jmp    c001f389 <Vm::fpuPop()+0x50>
c001f382:	80 0d 80 0f 03 c0 40 	or     BYTE PTR ds:0xc0030f80,0x40
c001f389:	5b                   	pop    ebx
c001f38a:	c3                   	ret    

c001f38b <Vm::x87Handler(regs*)>:
c001f38b:	55                   	push   ebp
c001f38c:	57                   	push   edi
c001f38d:	56                   	push   esi
c001f38e:	53                   	push   ebx
c001f38f:	83 ec 1c             	sub    esp,0x1c
c001f392:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f396:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f39b:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f39e:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f3a6:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f3aa:	50                   	push   eax
c001f3ab:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f3af:	50                   	push   eax
c001f3b0:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f3b4:	50                   	push   eax
c001f3b5:	53                   	push   ebx
c001f3b6:	e8 99 a1 ff ff       	call   c0019554 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f3bb:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f3be:	83 c4 10             	add    esp,0x10
c001f3c1:	89 c6                	mov    esi,eax
c001f3c3:	80 fa d9             	cmp    dl,0xd9
c001f3c6:	0f 85 52 01 00 00    	jne    c001f51e <Vm::x87Handler(regs*)+0x193>
c001f3cc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3d0:	8d 50 20             	lea    edx,[eax+0x20]
c001f3d3:	80 fa 0e             	cmp    dl,0xe
c001f3d6:	0f 87 86 00 00 00    	ja     c001f462 <Vm::x87Handler(regs*)+0xd7>
c001f3dc:	0f b6 d2             	movzx  edx,dl
c001f3df:	ff 24 95 34 be 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd41cc]
c001f3e6:	e8 e7 fc ff ff       	call   c001f0d2 <Vm::fpuGet0()>
c001f3eb:	eb 05                	jmp    c001f3f2 <Vm::x87Handler(regs*)+0x67>
c001f3ed:	e8 e5 fc ff ff       	call   c001f0d7 <Vm::fpuGet1()>
c001f3f2:	57                   	push   edi
c001f3f3:	57                   	push   edi
c001f3f4:	52                   	push   edx
c001f3f5:	50                   	push   eax
c001f3f6:	e8 e1 fe ff ff       	call   c001f2dc <Vm::fpuPush(unsigned long long)>
c001f3fb:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f3ff:	83 c4 10             	add    esp,0x10
c001f402:	b0 01                	mov    al,0x1
c001f404:	e9 e3 09 00 00       	jmp    c001fdec <Vm::x87Handler(regs*)+0xa61>
c001f409:	83 ec 0c             	sub    esp,0xc
c001f40c:	6a 00                	push   0x0
c001f40e:	e8 3b fe ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f413:	59                   	pop    ecx
c001f414:	5e                   	pop    esi
c001f415:	52                   	push   edx
c001f416:	50                   	push   eax
c001f417:	e8 c2 fd ff ff       	call   c001f1de <Vm::fpuChs(unsigned long long)>
c001f41c:	eb 13                	jmp    c001f431 <Vm::x87Handler(regs*)+0xa6>
c001f41e:	83 ec 0c             	sub    esp,0xc
c001f421:	6a 00                	push   0x0
c001f423:	e8 26 fe ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f428:	5f                   	pop    edi
c001f429:	5d                   	pop    ebp
c001f42a:	52                   	push   edx
c001f42b:	50                   	push   eax
c001f42c:	e8 a4 fd ff ff       	call   c001f1d5 <Vm::fpuAbs(unsigned long long)>
c001f431:	83 c4 0c             	add    esp,0xc
c001f434:	52                   	push   edx
c001f435:	50                   	push   eax
c001f436:	6a 00                	push   0x0
c001f438:	e8 54 fe ff ff       	call   c001f291 <Vm::fpuSetReg(int, unsigned long long)>
c001f43d:	eb bc                	jmp    c001f3fb <Vm::x87Handler(regs*)+0x70>
c001f43f:	e8 d3 fc ff ff       	call   c001f117 <Vm::fpuGetLog210()>
c001f444:	eb ac                	jmp    c001f3f2 <Vm::x87Handler(regs*)+0x67>
c001f446:	e8 9c fc ff ff       	call   c001f0e7 <Vm::fpuGetLog2E()>
c001f44b:	eb a5                	jmp    c001f3f2 <Vm::x87Handler(regs*)+0x67>
c001f44d:	e8 8d fc ff ff       	call   c001f0df <Vm::fpuGetPi()>
c001f452:	eb 9e                	jmp    c001f3f2 <Vm::x87Handler(regs*)+0x67>
c001f454:	e8 d6 fc ff ff       	call   c001f12f <Vm::fpuGetLog102()>
c001f459:	eb 97                	jmp    c001f3f2 <Vm::x87Handler(regs*)+0x67>
c001f45b:	e8 9f fc ff ff       	call   c001f0ff <Vm::fpuGetLogE2()>
c001f460:	eb 90                	jmp    c001f3f2 <Vm::x87Handler(regs*)+0x67>
c001f462:	8d 50 40             	lea    edx,[eax+0x40]
c001f465:	80 fa 07             	cmp    dl,0x7
c001f468:	77 15                	ja     c001f47f <Vm::x87Handler(regs*)+0xf4>
c001f46a:	83 ec 0c             	sub    esp,0xc
c001f46d:	2d c0 00 00 00       	sub    eax,0xc0
c001f472:	50                   	push   eax
c001f473:	e8 d6 fd ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f478:	59                   	pop    ecx
c001f479:	5e                   	pop    esi
c001f47a:	e9 75 ff ff ff       	jmp    c001f3f4 <Vm::x87Handler(regs*)+0x69>
c001f47f:	8d 50 38             	lea    edx,[eax+0x38]
c001f482:	80 fa 07             	cmp    dl,0x7
c001f485:	77 3c                	ja     c001f4c3 <Vm::x87Handler(regs*)+0x138>
c001f487:	83 ec 0c             	sub    esp,0xc
c001f48a:	2d c8 00 00 00       	sub    eax,0xc8
c001f48f:	50                   	push   eax
c001f490:	e8 b9 fd ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f495:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f49c:	89 c6                	mov    esi,eax
c001f49e:	89 d7                	mov    edi,edx
c001f4a0:	e8 a9 fd ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f4a5:	83 c4 0c             	add    esp,0xc
c001f4a8:	52                   	push   edx
c001f4a9:	50                   	push   eax
c001f4aa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4ae:	2d c8 00 00 00       	sub    eax,0xc8
c001f4b3:	50                   	push   eax
c001f4b4:	e8 d8 fd ff ff       	call   c001f291 <Vm::fpuSetReg(int, unsigned long long)>
c001f4b9:	83 c4 0c             	add    esp,0xc
c001f4bc:	57                   	push   edi
c001f4bd:	56                   	push   esi
c001f4be:	e9 73 ff ff ff       	jmp    c001f436 <Vm::x87Handler(regs*)+0xab>
c001f4c3:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f4c7:	84 d2                	test   dl,dl
c001f4c9:	75 0f                	jne    c001f4da <Vm::x87Handler(regs*)+0x14f>
c001f4cb:	83 ec 0c             	sub    esp,0xc
c001f4ce:	ff 36                	push   DWORD PTR [esi]
c001f4d0:	e8 c8 fa ff ff       	call   c001ef9d <Vm::fpu32ToInternal(unsigned int)>
c001f4d5:	e9 bf 00 00 00       	jmp    c001f599 <Vm::x87Handler(regs*)+0x20e>
c001f4da:	80 fa 03             	cmp    dl,0x3
c001f4dd:	75 13                	jne    c001f4f2 <Vm::x87Handler(regs*)+0x167>
c001f4df:	e8 55 fe ff ff       	call   c001f339 <Vm::fpuPop()>
c001f4e4:	55                   	push   ebp
c001f4e5:	55                   	push   ebp
c001f4e6:	52                   	push   edx
c001f4e7:	50                   	push   eax
c001f4e8:	e8 4c fa ff ff       	call   c001ef39 <Vm::fpuInternalTo32(unsigned long long)>
c001f4ed:	e9 88 00 00 00       	jmp    c001f57a <Vm::x87Handler(regs*)+0x1ef>
c001f4f2:	80 fa 05             	cmp    dl,0x5
c001f4f5:	75 0e                	jne    c001f505 <Vm::x87Handler(regs*)+0x17a>
c001f4f7:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f4fa:	66 a3 82 0f 03 c0    	mov    ds:0xc0030f82,ax
c001f500:	e9 df 00 00 00       	jmp    c001f5e4 <Vm::x87Handler(regs*)+0x259>
c001f505:	31 c0                	xor    eax,eax
c001f507:	80 fa 07             	cmp    dl,0x7
c001f50a:	0f 85 dc 08 00 00    	jne    c001fdec <Vm::x87Handler(regs*)+0xa61>
c001f510:	66 a1 82 0f 03 c0    	mov    ax,ds:0xc0030f82
c001f516:	66 89 06             	mov    WORD PTR [esi],ax
c001f519:	e9 c6 00 00 00       	jmp    c001f5e4 <Vm::x87Handler(regs*)+0x259>
c001f51e:	80 fa d8             	cmp    dl,0xd8
c001f521:	0f 84 c9 00 00 00    	je     c001f5f0 <Vm::x87Handler(regs*)+0x265>
c001f527:	80 fa dc             	cmp    dl,0xdc
c001f52a:	0f 84 0d 02 00 00    	je     c001f73d <Vm::x87Handler(regs*)+0x3b2>
c001f530:	80 fa de             	cmp    dl,0xde
c001f533:	0f 84 cd 02 00 00    	je     c001f806 <Vm::x87Handler(regs*)+0x47b>
c001f539:	80 fa dd             	cmp    dl,0xdd
c001f53c:	0f 84 5f 04 00 00    	je     c001f9a1 <Vm::x87Handler(regs*)+0x616>
c001f542:	80 fa da             	cmp    dl,0xda
c001f545:	0f 84 24 05 00 00    	je     c001fa6f <Vm::x87Handler(regs*)+0x6e4>
c001f54b:	80 fa df             	cmp    dl,0xdf
c001f54e:	0f 84 68 05 00 00    	je     c001fabc <Vm::x87Handler(regs*)+0x731>
c001f554:	31 c0                	xor    eax,eax
c001f556:	80 fa db             	cmp    dl,0xdb
c001f559:	0f 85 8d 08 00 00    	jne    c001fdec <Vm::x87Handler(regs*)+0xa61>
c001f55f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f563:	80 fa 03             	cmp    dl,0x3
c001f566:	0f 85 70 06 00 00    	jne    c001fbdc <Vm::x87Handler(regs*)+0x851>
c001f56c:	e8 c8 fd ff ff       	call   c001f339 <Vm::fpuPop()>
c001f571:	55                   	push   ebp
c001f572:	55                   	push   ebp
c001f573:	52                   	push   edx
c001f574:	50                   	push   eax
c001f575:	e8 71 fa ff ff       	call   c001efeb <Vm::fpuFloatToLong(unsigned long long)>
c001f57a:	83 c4 10             	add    esp,0x10
c001f57d:	89 06                	mov    DWORD PTR [esi],eax
c001f57f:	eb 63                	jmp    c001f5e4 <Vm::x87Handler(regs*)+0x259>
c001f581:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f585:	84 d2                	test   dl,dl
c001f587:	0f 85 e6 05 00 00    	jne    c001fb73 <Vm::x87Handler(regs*)+0x7e8>
c001f58d:	57                   	push   edi
c001f58e:	57                   	push   edi
c001f58f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f592:	ff 36                	push   DWORD PTR [esi]
c001f594:	e8 49 fa ff ff       	call   c001efe2 <Vm::fpu64ToInternal(unsigned long long)>
c001f599:	5e                   	pop    esi
c001f59a:	5f                   	pop    edi
c001f59b:	52                   	push   edx
c001f59c:	50                   	push   eax
c001f59d:	e8 3a fd ff ff       	call   c001f2dc <Vm::fpuPush(unsigned long long)>
c001f5a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f5a6:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f5a9:	e9 51 fe ff ff       	jmp    c001f3ff <Vm::x87Handler(regs*)+0x74>
c001f5ae:	80 fa 03             	cmp    dl,0x3
c001f5b1:	0f 85 d7 06 00 00    	jne    c001fc8e <Vm::x87Handler(regs*)+0x903>
c001f5b7:	57                   	push   edi
c001f5b8:	57                   	push   edi
c001f5b9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f5bc:	ff 36                	push   DWORD PTR [esi]
c001f5be:	e8 1f fa ff ff       	call   c001efe2 <Vm::fpu64ToInternal(unsigned long long)>
c001f5c3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5ca:	89 c6                	mov    esi,eax
c001f5cc:	89 d7                	mov    edi,edx
c001f5ce:	e8 7b fc ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f5d3:	57                   	push   edi
c001f5d4:	56                   	push   esi
c001f5d5:	52                   	push   edx
c001f5d6:	50                   	push   eax
c001f5d7:	e8 95 fb ff ff       	call   c001f171 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f5dc:	83 c4 20             	add    esp,0x20
c001f5df:	e8 55 fd ff ff       	call   c001f339 <Vm::fpuPop()>
c001f5e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f5e8:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f5eb:	e9 12 fe ff ff       	jmp    c001f402 <Vm::x87Handler(regs*)+0x77>
c001f5f0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5f4:	8d 50 40             	lea    edx,[eax+0x40]
c001f5f7:	80 fa 07             	cmp    dl,0x7
c001f5fa:	77 29                	ja     c001f625 <Vm::x87Handler(regs*)+0x29a>
c001f5fc:	83 ec 0c             	sub    esp,0xc
c001f5ff:	2d c0 00 00 00       	sub    eax,0xc0
c001f604:	50                   	push   eax
c001f605:	e8 44 fc ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f60a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f611:	89 c6                	mov    esi,eax
c001f613:	89 d7                	mov    edi,edx
c001f615:	e8 34 fc ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f61a:	57                   	push   edi
c001f61b:	56                   	push   esi
c001f61c:	52                   	push   edx
c001f61d:	50                   	push   eax
c001f61e:	e8 a1 fb ff ff       	call   c001f1c4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f623:	eb 2f                	jmp    c001f654 <Vm::x87Handler(regs*)+0x2c9>
c001f625:	8d 50 38             	lea    edx,[eax+0x38]
c001f628:	80 fa 07             	cmp    dl,0x7
c001f62b:	77 2f                	ja     c001f65c <Vm::x87Handler(regs*)+0x2d1>
c001f62d:	83 ec 0c             	sub    esp,0xc
c001f630:	2d c8 00 00 00       	sub    eax,0xc8
c001f635:	50                   	push   eax
c001f636:	e8 13 fc ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f63b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f642:	89 c6                	mov    esi,eax
c001f644:	89 d7                	mov    edi,edx
c001f646:	e8 03 fc ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f64b:	57                   	push   edi
c001f64c:	56                   	push   esi
c001f64d:	52                   	push   edx
c001f64e:	50                   	push   eax
c001f64f:	e8 a9 fb ff ff       	call   c001f1fd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f654:	83 c4 1c             	add    esp,0x1c
c001f657:	e9 d8 fd ff ff       	jmp    c001f434 <Vm::x87Handler(regs*)+0xa9>
c001f65c:	8d 50 30             	lea    edx,[eax+0x30]
c001f65f:	80 fa 07             	cmp    dl,0x7
c001f662:	77 0d                	ja     c001f671 <Vm::x87Handler(regs*)+0x2e6>
c001f664:	83 ec 0c             	sub    esp,0xc
c001f667:	2d d0 00 00 00       	sub    eax,0xd0
c001f66c:	e9 99 03 00 00       	jmp    c001fa0a <Vm::x87Handler(regs*)+0x67f>
c001f671:	8d 50 28             	lea    edx,[eax+0x28]
c001f674:	80 fa 07             	cmp    dl,0x7
c001f677:	77 0d                	ja     c001f686 <Vm::x87Handler(regs*)+0x2fb>
c001f679:	83 ec 0c             	sub    esp,0xc
c001f67c:	2d d8 00 00 00       	sub    eax,0xd8
c001f681:	e9 c0 03 00 00       	jmp    c001fa46 <Vm::x87Handler(regs*)+0x6bb>
c001f686:	8d 50 20             	lea    edx,[eax+0x20]
c001f689:	80 fa 07             	cmp    dl,0x7
c001f68c:	77 1b                	ja     c001f6a9 <Vm::x87Handler(regs*)+0x31e>
c001f68e:	83 ec 0c             	sub    esp,0xc
c001f691:	2d e0 00 00 00       	sub    eax,0xe0
c001f696:	50                   	push   eax
c001f697:	e8 b2 fb ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f69c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f6a3:	89 c6                	mov    esi,eax
c001f6a5:	89 d7                	mov    edi,edx
c001f6a7:	eb 22                	jmp    c001f6cb <Vm::x87Handler(regs*)+0x340>
c001f6a9:	8d 50 18             	lea    edx,[eax+0x18]
c001f6ac:	80 fa 07             	cmp    dl,0x7
c001f6af:	77 2d                	ja     c001f6de <Vm::x87Handler(regs*)+0x353>
c001f6b1:	83 ec 0c             	sub    esp,0xc
c001f6b4:	6a 00                	push   0x0
c001f6b6:	e8 93 fb ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f6bb:	89 c6                	mov    esi,eax
c001f6bd:	89 d7                	mov    edi,edx
c001f6bf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6c3:	2d e8 00 00 00       	sub    eax,0xe8
c001f6c8:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6cb:	e8 7e fb ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f6d0:	57                   	push   edi
c001f6d1:	56                   	push   esi
c001f6d2:	52                   	push   edx
c001f6d3:	50                   	push   eax
c001f6d4:	e8 15 fb ff ff       	call   c001f1ee <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f6d9:	e9 76 ff ff ff       	jmp    c001f654 <Vm::x87Handler(regs*)+0x2c9>
c001f6de:	8d 50 10             	lea    edx,[eax+0x10]
c001f6e1:	80 fa 07             	cmp    dl,0x7
c001f6e4:	77 1b                	ja     c001f701 <Vm::x87Handler(regs*)+0x376>
c001f6e6:	83 ec 0c             	sub    esp,0xc
c001f6e9:	2d f0 00 00 00       	sub    eax,0xf0
c001f6ee:	50                   	push   eax
c001f6ef:	e8 5a fb ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f6f4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f6fb:	89 c6                	mov    esi,eax
c001f6fd:	89 d7                	mov    edi,edx
c001f6ff:	eb 22                	jmp    c001f723 <Vm::x87Handler(regs*)+0x398>
c001f701:	3c f7                	cmp    al,0xf7
c001f703:	0f 86 d1 03 00 00    	jbe    c001fada <Vm::x87Handler(regs*)+0x74f>
c001f709:	83 ec 0c             	sub    esp,0xc
c001f70c:	6a 00                	push   0x0
c001f70e:	e8 3b fb ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f713:	89 c6                	mov    esi,eax
c001f715:	89 d7                	mov    edi,edx
c001f717:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f71b:	2d f8 00 00 00       	sub    eax,0xf8
c001f720:	89 04 24             	mov    DWORD PTR [esp],eax
c001f723:	e8 26 fb ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f728:	57                   	push   edi
c001f729:	56                   	push   esi
c001f72a:	52                   	push   edx
c001f72b:	50                   	push   eax
c001f72c:	e8 eb fa ff ff       	call   c001f21c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f731:	83 c4 1c             	add    esp,0x1c
c001f734:	52                   	push   edx
c001f735:	50                   	push   eax
c001f736:	6a 00                	push   0x0
c001f738:	e9 51 02 00 00       	jmp    c001f98e <Vm::x87Handler(regs*)+0x603>
c001f73d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f741:	8d 50 40             	lea    edx,[eax+0x40]
c001f744:	80 fa 07             	cmp    dl,0x7
c001f747:	77 37                	ja     c001f780 <Vm::x87Handler(regs*)+0x3f5>
c001f749:	83 ec 0c             	sub    esp,0xc
c001f74c:	2d c0 00 00 00       	sub    eax,0xc0
c001f751:	50                   	push   eax
c001f752:	e8 f7 fa ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f757:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f75e:	89 c6                	mov    esi,eax
c001f760:	89 d7                	mov    edi,edx
c001f762:	e8 e7 fa ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f767:	57                   	push   edi
c001f768:	56                   	push   esi
c001f769:	52                   	push   edx
c001f76a:	50                   	push   eax
c001f76b:	e8 54 fa ff ff       	call   c001f1c4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f770:	83 c4 1c             	add    esp,0x1c
c001f773:	52                   	push   edx
c001f774:	50                   	push   eax
c001f775:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f779:	2d c0 00 00 00       	sub    eax,0xc0
c001f77e:	eb 3d                	jmp    c001f7bd <Vm::x87Handler(regs*)+0x432>
c001f780:	8d 50 38             	lea    edx,[eax+0x38]
c001f783:	80 fa 07             	cmp    dl,0x7
c001f786:	77 3b                	ja     c001f7c3 <Vm::x87Handler(regs*)+0x438>
c001f788:	83 ec 0c             	sub    esp,0xc
c001f78b:	2d c8 00 00 00       	sub    eax,0xc8
c001f790:	50                   	push   eax
c001f791:	e8 b8 fa ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f796:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f79d:	89 c6                	mov    esi,eax
c001f79f:	89 d7                	mov    edi,edx
c001f7a1:	e8 a8 fa ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f7a6:	57                   	push   edi
c001f7a7:	56                   	push   esi
c001f7a8:	52                   	push   edx
c001f7a9:	50                   	push   eax
c001f7aa:	e8 4e fa ff ff       	call   c001f1fd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f7af:	83 c4 1c             	add    esp,0x1c
c001f7b2:	52                   	push   edx
c001f7b3:	50                   	push   eax
c001f7b4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7b8:	2d c8 00 00 00       	sub    eax,0xc8
c001f7bd:	50                   	push   eax
c001f7be:	e9 75 fc ff ff       	jmp    c001f438 <Vm::x87Handler(regs*)+0xad>
c001f7c3:	83 c0 18             	add    eax,0x18
c001f7c6:	3c 07                	cmp    al,0x7
c001f7c8:	0f 87 3b 04 00 00    	ja     c001fc09 <Vm::x87Handler(regs*)+0x87e>
c001f7ce:	83 ec 0c             	sub    esp,0xc
c001f7d1:	6a 00                	push   0x0
c001f7d3:	e8 76 fa ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f7d8:	89 c6                	mov    esi,eax
c001f7da:	89 d7                	mov    edi,edx
c001f7dc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7e0:	2d e8 00 00 00       	sub    eax,0xe8
c001f7e5:	89 04 24             	mov    DWORD PTR [esp],eax
c001f7e8:	e8 61 fa ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f7ed:	57                   	push   edi
c001f7ee:	56                   	push   esi
c001f7ef:	52                   	push   edx
c001f7f0:	50                   	push   eax
c001f7f1:	e8 f8 f9 ff ff       	call   c001f1ee <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f7f6:	83 c4 1c             	add    esp,0x1c
c001f7f9:	52                   	push   edx
c001f7fa:	50                   	push   eax
c001f7fb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7ff:	2d e8 00 00 00       	sub    eax,0xe8
c001f804:	eb b7                	jmp    c001f7bd <Vm::x87Handler(regs*)+0x432>
c001f806:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f80a:	8d 50 40             	lea    edx,[eax+0x40]
c001f80d:	80 fa 07             	cmp    dl,0x7
c001f810:	77 3a                	ja     c001f84c <Vm::x87Handler(regs*)+0x4c1>
c001f812:	83 ec 0c             	sub    esp,0xc
c001f815:	2d c0 00 00 00       	sub    eax,0xc0
c001f81a:	50                   	push   eax
c001f81b:	e8 2e fa ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f820:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f827:	89 c6                	mov    esi,eax
c001f829:	89 d7                	mov    edi,edx
c001f82b:	e8 1e fa ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f830:	57                   	push   edi
c001f831:	56                   	push   esi
c001f832:	52                   	push   edx
c001f833:	50                   	push   eax
c001f834:	e8 8b f9 ff ff       	call   c001f1c4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f839:	83 c4 1c             	add    esp,0x1c
c001f83c:	52                   	push   edx
c001f83d:	50                   	push   eax
c001f83e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f842:	2d c0 00 00 00       	sub    eax,0xc0
c001f847:	e9 9e 01 00 00       	jmp    c001f9ea <Vm::x87Handler(regs*)+0x65f>
c001f84c:	8d 50 20             	lea    edx,[eax+0x20]
c001f84f:	80 fa 07             	cmp    dl,0x7
c001f852:	77 3a                	ja     c001f88e <Vm::x87Handler(regs*)+0x503>
c001f854:	83 ec 0c             	sub    esp,0xc
c001f857:	2d e0 00 00 00       	sub    eax,0xe0
c001f85c:	50                   	push   eax
c001f85d:	e8 ec f9 ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f862:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f869:	89 c6                	mov    esi,eax
c001f86b:	89 d7                	mov    edi,edx
c001f86d:	e8 dc f9 ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f872:	57                   	push   edi
c001f873:	56                   	push   esi
c001f874:	52                   	push   edx
c001f875:	50                   	push   eax
c001f876:	e8 73 f9 ff ff       	call   c001f1ee <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f87b:	83 c4 1c             	add    esp,0x1c
c001f87e:	52                   	push   edx
c001f87f:	50                   	push   eax
c001f880:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f884:	2d e0 00 00 00       	sub    eax,0xe0
c001f889:	e9 5c 01 00 00       	jmp    c001f9ea <Vm::x87Handler(regs*)+0x65f>
c001f88e:	8d 50 18             	lea    edx,[eax+0x18]
c001f891:	80 fa 07             	cmp    dl,0x7
c001f894:	77 3b                	ja     c001f8d1 <Vm::x87Handler(regs*)+0x546>
c001f896:	83 ec 0c             	sub    esp,0xc
c001f899:	6a 00                	push   0x0
c001f89b:	e8 ae f9 ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f8a0:	89 c6                	mov    esi,eax
c001f8a2:	89 d7                	mov    edi,edx
c001f8a4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8a8:	2d e8 00 00 00       	sub    eax,0xe8
c001f8ad:	89 04 24             	mov    DWORD PTR [esp],eax
c001f8b0:	e8 99 f9 ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f8b5:	57                   	push   edi
c001f8b6:	56                   	push   esi
c001f8b7:	52                   	push   edx
c001f8b8:	50                   	push   eax
c001f8b9:	e8 30 f9 ff ff       	call   c001f1ee <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f8be:	83 c4 1c             	add    esp,0x1c
c001f8c1:	52                   	push   edx
c001f8c2:	50                   	push   eax
c001f8c3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8c7:	2d e8 00 00 00       	sub    eax,0xe8
c001f8cc:	e9 19 01 00 00       	jmp    c001f9ea <Vm::x87Handler(regs*)+0x65f>
c001f8d1:	8d 50 38             	lea    edx,[eax+0x38]
c001f8d4:	80 fa 07             	cmp    dl,0x7
c001f8d7:	77 37                	ja     c001f910 <Vm::x87Handler(regs*)+0x585>
c001f8d9:	83 ec 0c             	sub    esp,0xc
c001f8dc:	2d c8 00 00 00       	sub    eax,0xc8
c001f8e1:	50                   	push   eax
c001f8e2:	e8 67 f9 ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f8e7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f8ee:	89 c6                	mov    esi,eax
c001f8f0:	89 d7                	mov    edi,edx
c001f8f2:	e8 57 f9 ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f8f7:	57                   	push   edi
c001f8f8:	56                   	push   esi
c001f8f9:	52                   	push   edx
c001f8fa:	50                   	push   eax
c001f8fb:	e8 fd f8 ff ff       	call   c001f1fd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f900:	83 c4 1c             	add    esp,0x1c
c001f903:	52                   	push   edx
c001f904:	50                   	push   eax
c001f905:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f909:	2d c8 00 00 00       	sub    eax,0xc8
c001f90e:	eb 7d                	jmp    c001f98d <Vm::x87Handler(regs*)+0x602>
c001f910:	3c f7                	cmp    al,0xf7
c001f912:	76 38                	jbe    c001f94c <Vm::x87Handler(regs*)+0x5c1>
c001f914:	83 ec 0c             	sub    esp,0xc
c001f917:	6a 00                	push   0x0
c001f919:	e8 30 f9 ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f91e:	89 c6                	mov    esi,eax
c001f920:	89 d7                	mov    edi,edx
c001f922:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f926:	2d f8 00 00 00       	sub    eax,0xf8
c001f92b:	89 04 24             	mov    DWORD PTR [esp],eax
c001f92e:	e8 1b f9 ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f933:	57                   	push   edi
c001f934:	56                   	push   esi
c001f935:	52                   	push   edx
c001f936:	50                   	push   eax
c001f937:	e8 e0 f8 ff ff       	call   c001f21c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f93c:	83 c4 1c             	add    esp,0x1c
c001f93f:	52                   	push   edx
c001f940:	50                   	push   eax
c001f941:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f945:	2d f8 00 00 00       	sub    eax,0xf8
c001f94a:	eb 41                	jmp    c001f98d <Vm::x87Handler(regs*)+0x602>
c001f94c:	8d 50 10             	lea    edx,[eax+0x10]
c001f94f:	80 fa 07             	cmp    dl,0x7
c001f952:	0f 87 5a 01 00 00    	ja     c001fab2 <Vm::x87Handler(regs*)+0x727>
c001f958:	83 ec 0c             	sub    esp,0xc
c001f95b:	2d f0 00 00 00       	sub    eax,0xf0
c001f960:	50                   	push   eax
c001f961:	e8 e8 f8 ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f966:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f96d:	89 c6                	mov    esi,eax
c001f96f:	89 d7                	mov    edi,edx
c001f971:	e8 d8 f8 ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f976:	57                   	push   edi
c001f977:	56                   	push   esi
c001f978:	52                   	push   edx
c001f979:	50                   	push   eax
c001f97a:	e8 9d f8 ff ff       	call   c001f21c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f97f:	83 c4 1c             	add    esp,0x1c
c001f982:	52                   	push   edx
c001f983:	50                   	push   eax
c001f984:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f988:	2d f0 00 00 00       	sub    eax,0xf0
c001f98d:	50                   	push   eax
c001f98e:	e8 fe f8 ff ff       	call   c001f291 <Vm::fpuSetReg(int, unsigned long long)>
c001f993:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f997:	e8 9d f9 ff ff       	call   c001f339 <Vm::fpuPop()>
c001f99c:	e9 5e fa ff ff       	jmp    c001f3ff <Vm::x87Handler(regs*)+0x74>
c001f9a1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9a5:	8d 50 30             	lea    edx,[eax+0x30]
c001f9a8:	80 fa 07             	cmp    dl,0x7
c001f9ab:	77 1d                	ja     c001f9ca <Vm::x87Handler(regs*)+0x63f>
c001f9ad:	83 ec 0c             	sub    esp,0xc
c001f9b0:	6a 00                	push   0x0
c001f9b2:	e8 97 f8 ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f9b7:	83 c4 0c             	add    esp,0xc
c001f9ba:	52                   	push   edx
c001f9bb:	50                   	push   eax
c001f9bc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9c0:	2d d0 00 00 00       	sub    eax,0xd0
c001f9c5:	e9 f3 fd ff ff       	jmp    c001f7bd <Vm::x87Handler(regs*)+0x432>
c001f9ca:	8d 50 28             	lea    edx,[eax+0x28]
c001f9cd:	80 fa 07             	cmp    dl,0x7
c001f9d0:	77 28                	ja     c001f9fa <Vm::x87Handler(regs*)+0x66f>
c001f9d2:	83 ec 0c             	sub    esp,0xc
c001f9d5:	6a 00                	push   0x0
c001f9d7:	e8 72 f8 ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001f9dc:	83 c4 0c             	add    esp,0xc
c001f9df:	52                   	push   edx
c001f9e0:	50                   	push   eax
c001f9e1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9e5:	2d d8 00 00 00       	sub    eax,0xd8
c001f9ea:	50                   	push   eax
c001f9eb:	e8 a1 f8 ff ff       	call   c001f291 <Vm::fpuSetReg(int, unsigned long long)>
c001f9f0:	e8 44 f9 ff ff       	call   c001f339 <Vm::fpuPop()>
c001f9f5:	e9 01 fa ff ff       	jmp    c001f3fb <Vm::x87Handler(regs*)+0x70>
c001f9fa:	8d 50 20             	lea    edx,[eax+0x20]
c001f9fd:	80 fa 07             	cmp    dl,0x7
c001fa00:	77 30                	ja     c001fa32 <Vm::x87Handler(regs*)+0x6a7>
c001fa02:	83 ec 0c             	sub    esp,0xc
c001fa05:	2d e0 00 00 00       	sub    eax,0xe0
c001fa0a:	50                   	push   eax
c001fa0b:	e8 3e f8 ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001fa10:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa17:	89 c6                	mov    esi,eax
c001fa19:	89 d7                	mov    edi,edx
c001fa1b:	e8 2e f8 ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001fa20:	57                   	push   edi
c001fa21:	56                   	push   esi
c001fa22:	52                   	push   edx
c001fa23:	50                   	push   eax
c001fa24:	e8 48 f7 ff ff       	call   c001f171 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa29:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fa2d:	e9 54 02 00 00       	jmp    c001fc86 <Vm::x87Handler(regs*)+0x8fb>
c001fa32:	8d 50 18             	lea    edx,[eax+0x18]
c001fa35:	80 fa 07             	cmp    dl,0x7
c001fa38:	0f 87 43 fb ff ff    	ja     c001f581 <Vm::x87Handler(regs*)+0x1f6>
c001fa3e:	83 ec 0c             	sub    esp,0xc
c001fa41:	2d e8 00 00 00       	sub    eax,0xe8
c001fa46:	50                   	push   eax
c001fa47:	e8 02 f8 ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001fa4c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa53:	89 c6                	mov    esi,eax
c001fa55:	89 d7                	mov    edi,edx
c001fa57:	e8 f2 f7 ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001fa5c:	57                   	push   edi
c001fa5d:	56                   	push   esi
c001fa5e:	52                   	push   edx
c001fa5f:	50                   	push   eax
c001fa60:	e8 0c f7 ff ff       	call   c001f171 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa65:	83 c4 20             	add    esp,0x20
c001fa68:	e8 cc f8 ff ff       	call   c001f339 <Vm::fpuPop()>
c001fa6d:	eb 62                	jmp    c001fad1 <Vm::x87Handler(regs*)+0x746>
c001fa6f:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001fa73:	0f 85 0f 01 00 00    	jne    c001fb88 <Vm::x87Handler(regs*)+0x7fd>
c001fa79:	83 ec 0c             	sub    esp,0xc
c001fa7c:	6a 01                	push   0x1
c001fa7e:	e8 cb f7 ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001fa83:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa8a:	89 c6                	mov    esi,eax
c001fa8c:	89 d7                	mov    edi,edx
c001fa8e:	e8 bb f7 ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001fa93:	57                   	push   edi
c001fa94:	56                   	push   esi
c001fa95:	52                   	push   edx
c001fa96:	50                   	push   eax
c001fa97:	e8 d5 f6 ff ff       	call   c001f171 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa9c:	83 c4 20             	add    esp,0x20
c001fa9f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001faa3:	e8 91 f8 ff ff       	call   c001f339 <Vm::fpuPop()>
c001faa8:	e8 8c f8 ff ff       	call   c001f339 <Vm::fpuPop()>
c001faad:	e9 50 f9 ff ff       	jmp    c001f402 <Vm::x87Handler(regs*)+0x77>
c001fab2:	3c d9                	cmp    al,0xd9
c001fab4:	0f 85 b5 02 00 00    	jne    c001fd6f <Vm::x87Handler(regs*)+0x9e4>
c001faba:	eb bd                	jmp    c001fa79 <Vm::x87Handler(regs*)+0x6ee>
c001fabc:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001fac0:	0f 85 ea 02 00 00    	jne    c001fdb0 <Vm::x87Handler(regs*)+0xa25>
c001fac6:	0f b7 05 80 0f 03 c0 	movzx  eax,WORD PTR ds:0xc0030f80
c001facd:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001fad1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fad5:	e9 28 f9 ff ff       	jmp    c001f402 <Vm::x87Handler(regs*)+0x77>
c001fada:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fade:	84 d2                	test   dl,dl
c001fae0:	75 0f                	jne    c001faf1 <Vm::x87Handler(regs*)+0x766>
c001fae2:	83 ec 0c             	sub    esp,0xc
c001fae5:	ff 36                	push   DWORD PTR [esi]
c001fae7:	e8 b1 f4 ff ff       	call   c001ef9d <Vm::fpu32ToInternal(unsigned int)>
c001faec:	e9 2c 01 00 00       	jmp    c001fc1d <Vm::x87Handler(regs*)+0x892>
c001faf1:	80 fa 01             	cmp    dl,0x1
c001faf4:	75 0f                	jne    c001fb05 <Vm::x87Handler(regs*)+0x77a>
c001faf6:	83 ec 0c             	sub    esp,0xc
c001faf9:	ff 36                	push   DWORD PTR [esi]
c001fafb:	e8 9d f4 ff ff       	call   c001ef9d <Vm::fpu32ToInternal(unsigned int)>
c001fb00:	e9 81 02 00 00       	jmp    c001fd86 <Vm::x87Handler(regs*)+0x9fb>
c001fb05:	80 fa 04             	cmp    dl,0x4
c001fb08:	75 0f                	jne    c001fb19 <Vm::x87Handler(regs*)+0x78e>
c001fb0a:	83 ec 0c             	sub    esp,0xc
c001fb0d:	ff 36                	push   DWORD PTR [esi]
c001fb0f:	e8 89 f4 ff ff       	call   c001ef9d <Vm::fpu32ToInternal(unsigned int)>
c001fb14:	e9 86 01 00 00       	jmp    c001fc9f <Vm::x87Handler(regs*)+0x914>
c001fb19:	80 fa 05             	cmp    dl,0x5
c001fb1c:	75 1b                	jne    c001fb39 <Vm::x87Handler(regs*)+0x7ae>
c001fb1e:	83 ec 0c             	sub    esp,0xc
c001fb21:	6a 00                	push   0x0
c001fb23:	e8 26 f7 ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001fb28:	89 c7                	mov    edi,eax
c001fb2a:	89 d5                	mov    ebp,edx
c001fb2c:	58                   	pop    eax
c001fb2d:	ff 36                	push   DWORD PTR [esi]
c001fb2f:	e8 69 f4 ff ff       	call   c001ef9d <Vm::fpu32ToInternal(unsigned int)>
c001fb34:	e9 a3 01 00 00       	jmp    c001fcdc <Vm::x87Handler(regs*)+0x951>
c001fb39:	80 fa 06             	cmp    dl,0x6
c001fb3c:	75 0f                	jne    c001fb4d <Vm::x87Handler(regs*)+0x7c2>
c001fb3e:	83 ec 0c             	sub    esp,0xc
c001fb41:	ff 36                	push   DWORD PTR [esi]
c001fb43:	e8 55 f4 ff ff       	call   c001ef9d <Vm::fpu32ToInternal(unsigned int)>
c001fb48:	e9 ae 01 00 00       	jmp    c001fcfb <Vm::x87Handler(regs*)+0x970>
c001fb4d:	31 c0                	xor    eax,eax
c001fb4f:	80 fa 07             	cmp    dl,0x7
c001fb52:	0f 85 94 02 00 00    	jne    c001fdec <Vm::x87Handler(regs*)+0xa61>
c001fb58:	83 ec 0c             	sub    esp,0xc
c001fb5b:	6a 00                	push   0x0
c001fb5d:	e8 ec f6 ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001fb62:	89 c7                	mov    edi,eax
c001fb64:	89 d5                	mov    ebp,edx
c001fb66:	58                   	pop    eax
c001fb67:	ff 36                	push   DWORD PTR [esi]
c001fb69:	e8 2f f4 ff ff       	call   c001ef9d <Vm::fpu32ToInternal(unsigned int)>
c001fb6e:	e9 cb 01 00 00       	jmp    c001fd3e <Vm::x87Handler(regs*)+0x9b3>
c001fb73:	80 fa 03             	cmp    dl,0x3
c001fb76:	0f 85 d3 01 00 00    	jne    c001fd4f <Vm::x87Handler(regs*)+0x9c4>
c001fb7c:	e8 b8 f7 ff ff       	call   c001f339 <Vm::fpuPop()>
c001fb81:	51                   	push   ecx
c001fb82:	51                   	push   ecx
c001fb83:	e9 de 01 00 00       	jmp    c001fd66 <Vm::x87Handler(regs*)+0x9db>
c001fb88:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb8c:	80 fa 01             	cmp    dl,0x1
c001fb8f:	75 09                	jne    c001fb9a <Vm::x87Handler(regs*)+0x80f>
c001fb91:	57                   	push   edi
c001fb92:	57                   	push   edi
c001fb93:	8b 06                	mov    eax,DWORD PTR [esi]
c001fb95:	e9 e3 01 00 00       	jmp    c001fd7d <Vm::x87Handler(regs*)+0x9f2>
c001fb9a:	80 fa 04             	cmp    dl,0x4
c001fb9d:	75 12                	jne    c001fbb1 <Vm::x87Handler(regs*)+0x826>
c001fb9f:	31 d2                	xor    edx,edx
c001fba1:	51                   	push   ecx
c001fba2:	51                   	push   ecx
c001fba3:	8b 06                	mov    eax,DWORD PTR [esi]
c001fba5:	52                   	push   edx
c001fba6:	50                   	push   eax
c001fba7:	e8 d0 f4 ff ff       	call   c001f07c <Vm::fpuLongToFloat(long long)>
c001fbac:	e9 ee 00 00 00       	jmp    c001fc9f <Vm::x87Handler(regs*)+0x914>
c001fbb1:	31 c0                	xor    eax,eax
c001fbb3:	80 fa 07             	cmp    dl,0x7
c001fbb6:	0f 85 30 02 00 00    	jne    c001fdec <Vm::x87Handler(regs*)+0xa61>
c001fbbc:	83 ec 0c             	sub    esp,0xc
c001fbbf:	6a 00                	push   0x0
c001fbc1:	e8 88 f6 ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001fbc6:	89 c7                	mov    edi,eax
c001fbc8:	89 d5                	mov    ebp,edx
c001fbca:	58                   	pop    eax
c001fbcb:	8b 06                	mov    eax,DWORD PTR [esi]
c001fbcd:	5a                   	pop    edx
c001fbce:	31 d2                	xor    edx,edx
c001fbd0:	52                   	push   edx
c001fbd1:	50                   	push   eax
c001fbd2:	e8 a5 f4 ff ff       	call   c001f07c <Vm::fpuLongToFloat(long long)>
c001fbd7:	e9 62 01 00 00       	jmp    c001fd3e <Vm::x87Handler(regs*)+0x9b3>
c001fbdc:	84 d2                	test   dl,dl
c001fbde:	75 0d                	jne    c001fbed <Vm::x87Handler(regs*)+0x862>
c001fbe0:	31 d2                	xor    edx,edx
c001fbe2:	55                   	push   ebp
c001fbe3:	55                   	push   ebp
c001fbe4:	8b 06                	mov    eax,DWORD PTR [esi]
c001fbe6:	52                   	push   edx
c001fbe7:	50                   	push   eax
c001fbe8:	e9 d3 01 00 00       	jmp    c001fdc0 <Vm::x87Handler(regs*)+0xa35>
c001fbed:	31 c0                	xor    eax,eax
c001fbef:	80 fa 02             	cmp    dl,0x2
c001fbf2:	0f 85 f4 01 00 00    	jne    c001fdec <Vm::x87Handler(regs*)+0xa61>
c001fbf8:	83 ec 0c             	sub    esp,0xc
c001fbfb:	6a 00                	push   0x0
c001fbfd:	e8 4c f6 ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001fc02:	59                   	pop    ecx
c001fc03:	5f                   	pop    edi
c001fc04:	e9 6a f9 ff ff       	jmp    c001f573 <Vm::x87Handler(regs*)+0x1e8>
c001fc09:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc0d:	84 d2                	test   dl,dl
c001fc0f:	75 2a                	jne    c001fc3b <Vm::x87Handler(regs*)+0x8b0>
c001fc11:	50                   	push   eax
c001fc12:	50                   	push   eax
c001fc13:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc16:	ff 36                	push   DWORD PTR [esi]
c001fc18:	e8 c5 f3 ff ff       	call   c001efe2 <Vm::fpu64ToInternal(unsigned long long)>
c001fc1d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc24:	89 c6                	mov    esi,eax
c001fc26:	89 d7                	mov    edi,edx
c001fc28:	e8 21 f6 ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001fc2d:	57                   	push   edi
c001fc2e:	56                   	push   esi
c001fc2f:	52                   	push   edx
c001fc30:	50                   	push   eax
c001fc31:	e8 8e f5 ff ff       	call   c001f1c4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fc36:	e9 64 01 00 00       	jmp    c001fd9f <Vm::x87Handler(regs*)+0xa14>
c001fc3b:	80 fa 01             	cmp    dl,0x1
c001fc3e:	75 11                	jne    c001fc51 <Vm::x87Handler(regs*)+0x8c6>
c001fc40:	50                   	push   eax
c001fc41:	50                   	push   eax
c001fc42:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc45:	ff 36                	push   DWORD PTR [esi]
c001fc47:	e8 96 f3 ff ff       	call   c001efe2 <Vm::fpu64ToInternal(unsigned long long)>
c001fc4c:	e9 35 01 00 00       	jmp    c001fd86 <Vm::x87Handler(regs*)+0x9fb>
c001fc51:	80 fa 02             	cmp    dl,0x2
c001fc54:	0f 85 54 f9 ff ff    	jne    c001f5ae <Vm::x87Handler(regs*)+0x223>
c001fc5a:	55                   	push   ebp
c001fc5b:	55                   	push   ebp
c001fc5c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc5f:	ff 36                	push   DWORD PTR [esi]
c001fc61:	e8 7c f3 ff ff       	call   c001efe2 <Vm::fpu64ToInternal(unsigned long long)>
c001fc66:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc6d:	89 c6                	mov    esi,eax
c001fc6f:	89 d7                	mov    edi,edx
c001fc71:	e8 d8 f5 ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001fc76:	57                   	push   edi
c001fc77:	56                   	push   esi
c001fc78:	52                   	push   edx
c001fc79:	50                   	push   eax
c001fc7a:	e8 f2 f4 ff ff       	call   c001f171 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fc7f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fc83:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fc86:	83 c4 20             	add    esp,0x20
c001fc89:	e9 74 f7 ff ff       	jmp    c001f402 <Vm::x87Handler(regs*)+0x77>
c001fc8e:	80 fa 04             	cmp    dl,0x4
c001fc91:	75 2a                	jne    c001fcbd <Vm::x87Handler(regs*)+0x932>
c001fc93:	51                   	push   ecx
c001fc94:	51                   	push   ecx
c001fc95:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc98:	ff 36                	push   DWORD PTR [esi]
c001fc9a:	e8 43 f3 ff ff       	call   c001efe2 <Vm::fpu64ToInternal(unsigned long long)>
c001fc9f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fca6:	89 c6                	mov    esi,eax
c001fca8:	89 d7                	mov    edi,edx
c001fcaa:	e8 9f f5 ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001fcaf:	57                   	push   edi
c001fcb0:	56                   	push   esi
c001fcb1:	52                   	push   edx
c001fcb2:	50                   	push   eax
c001fcb3:	e8 36 f5 ff ff       	call   c001f1ee <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fcb8:	e9 e2 00 00 00       	jmp    c001fd9f <Vm::x87Handler(regs*)+0xa14>
c001fcbd:	80 fa 05             	cmp    dl,0x5
c001fcc0:	75 28                	jne    c001fcea <Vm::x87Handler(regs*)+0x95f>
c001fcc2:	83 ec 0c             	sub    esp,0xc
c001fcc5:	6a 00                	push   0x0
c001fcc7:	e8 82 f5 ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001fccc:	89 c7                	mov    edi,eax
c001fcce:	89 d5                	mov    ebp,edx
c001fcd0:	58                   	pop    eax
c001fcd1:	5a                   	pop    edx
c001fcd2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcd5:	ff 36                	push   DWORD PTR [esi]
c001fcd7:	e8 06 f3 ff ff       	call   c001efe2 <Vm::fpu64ToInternal(unsigned long long)>
c001fcdc:	83 c4 10             	add    esp,0x10
c001fcdf:	55                   	push   ebp
c001fce0:	57                   	push   edi
c001fce1:	52                   	push   edx
c001fce2:	50                   	push   eax
c001fce3:	e8 06 f5 ff ff       	call   c001f1ee <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fce8:	eb 60                	jmp    c001fd4a <Vm::x87Handler(regs*)+0x9bf>
c001fcea:	80 fa 06             	cmp    dl,0x6
c001fced:	75 2a                	jne    c001fd19 <Vm::x87Handler(regs*)+0x98e>
c001fcef:	51                   	push   ecx
c001fcf0:	51                   	push   ecx
c001fcf1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcf4:	ff 36                	push   DWORD PTR [esi]
c001fcf6:	e8 e7 f2 ff ff       	call   c001efe2 <Vm::fpu64ToInternal(unsigned long long)>
c001fcfb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd02:	89 c6                	mov    esi,eax
c001fd04:	89 d7                	mov    edi,edx
c001fd06:	e8 43 f5 ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001fd0b:	57                   	push   edi
c001fd0c:	56                   	push   esi
c001fd0d:	52                   	push   edx
c001fd0e:	50                   	push   eax
c001fd0f:	e8 08 f5 ff ff       	call   c001f21c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fd14:	e9 86 00 00 00       	jmp    c001fd9f <Vm::x87Handler(regs*)+0xa14>
c001fd19:	31 c0                	xor    eax,eax
c001fd1b:	80 fa 07             	cmp    dl,0x7
c001fd1e:	0f 85 c8 00 00 00    	jne    c001fdec <Vm::x87Handler(regs*)+0xa61>
c001fd24:	83 ec 0c             	sub    esp,0xc
c001fd27:	6a 00                	push   0x0
c001fd29:	e8 20 f5 ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001fd2e:	89 c7                	mov    edi,eax
c001fd30:	89 d5                	mov    ebp,edx
c001fd32:	58                   	pop    eax
c001fd33:	5a                   	pop    edx
c001fd34:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd37:	ff 36                	push   DWORD PTR [esi]
c001fd39:	e8 a4 f2 ff ff       	call   c001efe2 <Vm::fpu64ToInternal(unsigned long long)>
c001fd3e:	83 c4 10             	add    esp,0x10
c001fd41:	55                   	push   ebp
c001fd42:	57                   	push   edi
c001fd43:	52                   	push   edx
c001fd44:	50                   	push   eax
c001fd45:	e8 d2 f4 ff ff       	call   c001f21c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fd4a:	83 c4 0c             	add    esp,0xc
c001fd4d:	eb 53                	jmp    c001fda2 <Vm::x87Handler(regs*)+0xa17>
c001fd4f:	31 c0                	xor    eax,eax
c001fd51:	80 fa 02             	cmp    dl,0x2
c001fd54:	0f 85 92 00 00 00    	jne    c001fdec <Vm::x87Handler(regs*)+0xa61>
c001fd5a:	83 ec 0c             	sub    esp,0xc
c001fd5d:	6a 00                	push   0x0
c001fd5f:	e8 ea f4 ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001fd64:	59                   	pop    ecx
c001fd65:	5f                   	pop    edi
c001fd66:	52                   	push   edx
c001fd67:	50                   	push   eax
c001fd68:	e8 27 f2 ff ff       	call   c001ef94 <Vm::fpuInternalTo64(unsigned long long)>
c001fd6d:	eb 70                	jmp    c001fddf <Vm::x87Handler(regs*)+0xa54>
c001fd6f:	31 c0                	xor    eax,eax
c001fd71:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001fd76:	75 74                	jne    c001fdec <Vm::x87Handler(regs*)+0xa61>
c001fd78:	50                   	push   eax
c001fd79:	50                   	push   eax
c001fd7a:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fd7d:	31 d2                	xor    edx,edx
c001fd7f:	52                   	push   edx
c001fd80:	50                   	push   eax
c001fd81:	e8 f6 f2 ff ff       	call   c001f07c <Vm::fpuLongToFloat(long long)>
c001fd86:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd8d:	89 c6                	mov    esi,eax
c001fd8f:	89 d7                	mov    edi,edx
c001fd91:	e8 b8 f4 ff ff       	call   c001f24e <Vm::fpuGetReg(int)>
c001fd96:	57                   	push   edi
c001fd97:	56                   	push   esi
c001fd98:	52                   	push   edx
c001fd99:	50                   	push   eax
c001fd9a:	e8 5e f4 ff ff       	call   c001f1fd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd9f:	83 c4 1c             	add    esp,0x1c
c001fda2:	52                   	push   edx
c001fda3:	50                   	push   eax
c001fda4:	6a 00                	push   0x0
c001fda6:	e8 e6 f4 ff ff       	call   c001f291 <Vm::fpuSetReg(int, unsigned long long)>
c001fdab:	e9 f2 f7 ff ff       	jmp    c001f5a2 <Vm::x87Handler(regs*)+0x217>
c001fdb0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fdb4:	80 fa 05             	cmp    dl,0x5
c001fdb7:	75 11                	jne    c001fdca <Vm::x87Handler(regs*)+0xa3f>
c001fdb9:	55                   	push   ebp
c001fdba:	55                   	push   ebp
c001fdbb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fdbe:	ff 36                	push   DWORD PTR [esi]
c001fdc0:	e8 81 f2 ff ff       	call   c001f046 <Vm::fpuULongToFloat(unsigned long long)>
c001fdc5:	e9 cf f7 ff ff       	jmp    c001f599 <Vm::x87Handler(regs*)+0x20e>
c001fdca:	31 c0                	xor    eax,eax
c001fdcc:	80 fa 07             	cmp    dl,0x7
c001fdcf:	75 1b                	jne    c001fdec <Vm::x87Handler(regs*)+0xa61>
c001fdd1:	e8 63 f5 ff ff       	call   c001f339 <Vm::fpuPop()>
c001fdd6:	51                   	push   ecx
c001fdd7:	51                   	push   ecx
c001fdd8:	52                   	push   edx
c001fdd9:	50                   	push   eax
c001fdda:	e8 0c f2 ff ff       	call   c001efeb <Vm::fpuFloatToLong(unsigned long long)>
c001fddf:	83 c4 10             	add    esp,0x10
c001fde2:	89 06                	mov    DWORD PTR [esi],eax
c001fde4:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001fde7:	e9 f8 f7 ff ff       	jmp    c001f5e4 <Vm::x87Handler(regs*)+0x259>
c001fdec:	83 c4 1c             	add    esp,0x1c
c001fdef:	5b                   	pop    ebx
c001fdf0:	5e                   	pop    esi
c001fdf1:	5f                   	pop    edi
c001fdf2:	5d                   	pop    ebp
c001fdf3:	c3                   	ret    

c001fdf4 <__static_initialization_and_destruction_0(int, int)>:
c001fdf4:	83 ec 0c             	sub    esp,0xc
c001fdf7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001fdfc:	75 1a                	jne    c001fe18 <__static_initialization_and_destruction_0(int, int)+0x24>
c001fdfe:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001fe06:	75 10                	jne    c001fe18 <__static_initialization_and_destruction_0(int, int)+0x24>
c001fe08:	83 ec 0c             	sub    esp,0xc
c001fe0b:	68 80 0f 03 c0       	push   0xc0030f80
c001fe10:	e8 05 8d 00 00       	call   c0028b1a <Vm::_FPUState::_FPUState()>
c001fe15:	83 c4 10             	add    esp,0x10
c001fe18:	90                   	nop
c001fe19:	83 c4 0c             	add    esp,0xc
c001fe1c:	c3                   	ret    

c001fe1d <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001fe1d:	83 ec 0c             	sub    esp,0xc
c001fe20:	83 ec 08             	sub    esp,0x8
c001fe23:	68 ff ff 00 00       	push   0xffff
c001fe28:	6a 01                	push   0x1
c001fe2a:	e8 c5 ff ff ff       	call   c001fdf4 <__static_initialization_and_destruction_0(int, int)>
c001fe2f:	83 c4 10             	add    esp,0x10
c001fe32:	83 c4 0c             	add    esp,0xc
c001fe35:	c3                   	ret    

c001fe36 <FAT::getName()>:
c001fe36:	b8 70 be 02 c0       	mov    eax,0xc002be70
c001fe3b:	c3                   	ret    

c001fe3c <FAT::tell(void*, unsigned long long*)>:
c001fe3c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fe41:	75 06                	jne    c001fe49 <FAT::tell(void*, unsigned long long*)+0xd>
c001fe43:	b8 04 00 00 00       	mov    eax,0x4
c001fe48:	c3                   	ret    
c001fe49:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fe4e:	75 06                	jne    c001fe56 <FAT::tell(void*, unsigned long long*)+0x1a>
c001fe50:	b8 04 00 00 00       	mov    eax,0x4
c001fe55:	c3                   	ret    
c001fe56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe5a:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001fe5d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001fe60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fe64:	89 01                	mov    DWORD PTR [ecx],eax
c001fe66:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fe69:	b8 00 00 00 00       	mov    eax,0x0
c001fe6e:	c3                   	ret    
c001fe6f:	90                   	nop

c001fe70 <FAT::stat(void*, unsigned long long*)>:
c001fe70:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fe75:	75 06                	jne    c001fe7d <FAT::stat(void*, unsigned long long*)+0xd>
c001fe77:	b8 04 00 00 00       	mov    eax,0x4
c001fe7c:	c3                   	ret    
c001fe7d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fe82:	75 06                	jne    c001fe8a <FAT::stat(void*, unsigned long long*)+0x1a>
c001fe84:	b8 04 00 00 00       	mov    eax,0x4
c001fe89:	c3                   	ret    
c001fe8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe8e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001fe91:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001fe94:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fe98:	89 01                	mov    DWORD PTR [ecx],eax
c001fe9a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fe9d:	b8 00 00 00 00       	mov    eax,0x0
c001fea2:	c3                   	ret    
c001fea3:	90                   	nop

c001fea4 <FAT::~FAT()>:
c001fea4:	83 ec 0c             	sub    esp,0xc
c001fea7:	ba bc be 02 c0       	mov    edx,0xc002bebc
c001feac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb0:	89 10                	mov    DWORD PTR [eax],edx
c001feb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb6:	83 ec 0c             	sub    esp,0xc
c001feb9:	50                   	push   eax
c001feba:	e8 3f 2b ff ff       	call   c00129fe <Filesystem::~Filesystem()>
c001febf:	83 c4 10             	add    esp,0x10
c001fec2:	90                   	nop
c001fec3:	83 c4 0c             	add    esp,0xc
c001fec6:	c3                   	ret    
c001fec7:	90                   	nop

c001fec8 <FAT::~FAT()>:
c001fec8:	83 ec 0c             	sub    esp,0xc
c001fecb:	83 ec 0c             	sub    esp,0xc
c001fece:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fed2:	e8 cd ff ff ff       	call   c001fea4 <FAT::~FAT()>
c001fed7:	83 c4 10             	add    esp,0x10
c001feda:	83 ec 08             	sub    esp,0x8
c001fedd:	6a 08                	push   0x8
c001fedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fee3:	e8 0f 27 ff ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c001fee8:	83 c4 10             	add    esp,0x10
c001feeb:	83 c4 0c             	add    esp,0xc
c001feee:	c3                   	ret    
c001feef:	90                   	nop

c001fef0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001fef0:	83 ec 1c             	sub    esp,0x1c
c001fef3:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001fefa:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001feff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ff03:	8b 04 85 00 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf000]
c001ff0a:	83 f8 ff             	cmp    eax,0xffffffff
c001ff0d:	75 34                	jne    c001ff43 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001ff0f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ff13:	88 c2                	mov    dl,al
c001ff15:	a1 e0 0f 03 c0       	mov    eax,ds:0xc0030fe0
c001ff1a:	01 d0                	add    eax,edx
c001ff1c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ff20:	8b 15 e0 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030fe0
c001ff26:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ff2a:	89 14 85 00 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf000],edx
c001ff31:	a1 e0 0f 03 c0       	mov    eax,ds:0xc0030fe0
c001ff36:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ff3a:	89 14 85 80 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef80],edx
c001ff41:	eb 17                	jmp    c001ff5a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001ff43:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ff47:	88 c2                	mov    dl,al
c001ff49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ff4d:	8b 04 85 00 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf000]
c001ff54:	01 d0                	add    eax,edx
c001ff56:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ff5a:	83 ec 04             	sub    esp,0x4
c001ff5d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ff61:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ff65:	8d 44 24 15          	lea    eax,[esp+0x15]
c001ff69:	50                   	push   eax
c001ff6a:	e8 8f 6d fe ff       	call   c0006cfe <f_getlabel>
c001ff6f:	83 c4 10             	add    esp,0x10
c001ff72:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ff76:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ff7b:	75 07                	jne    c001ff84 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001ff7d:	b8 00 00 00 00       	mov    eax,0x0
c001ff82:	eb 05                	jmp    c001ff89 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001ff84:	b8 01 00 00 00       	mov    eax,0x1
c001ff89:	83 c4 1c             	add    esp,0x1c
c001ff8c:	c3                   	ret    
c001ff8d:	90                   	nop

c001ff8e <FAT::setlabel(LogicalDisk*, int, char*)>:
c001ff8e:	57                   	push   edi
c001ff8f:	83 ec 58             	sub    esp,0x58
c001ff92:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001ff9a:	8d 54 24 10          	lea    edx,[esp+0x10]
c001ff9e:	b9 0f 00 00 00       	mov    ecx,0xf
c001ffa3:	b8 00 00 00 00       	mov    eax,0x0
c001ffa8:	fc                   	cld    
c001ffa9:	89 d7                	mov    edi,edx
c001ffab:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ffad:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ffb1:	8b 04 85 00 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf000]
c001ffb8:	83 f8 ff             	cmp    eax,0xffffffff
c001ffbb:	75 34                	jne    c001fff1 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001ffbd:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ffc1:	88 c2                	mov    dl,al
c001ffc3:	a1 e0 0f 03 c0       	mov    eax,ds:0xc0030fe0
c001ffc8:	01 d0                	add    eax,edx
c001ffca:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ffce:	8b 15 e0 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030fe0
c001ffd4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ffd8:	89 14 85 00 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf000],edx
c001ffdf:	a1 e0 0f 03 c0       	mov    eax,ds:0xc0030fe0
c001ffe4:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001ffe8:	89 14 85 80 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef80],edx
c001ffef:	eb 17                	jmp    c0020008 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001fff1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fff5:	88 c2                	mov    dl,al
c001fff7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fffb:	8b 04 85 00 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf000]
c0020002:	01 d0                	add    eax,edx
c0020004:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020008:	83 ec 08             	sub    esp,0x8
c002000b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c002000f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020013:	50                   	push   eax
c0020014:	e8 33 09 fe ff       	call   c000094c <strcat>
c0020019:	83 c4 10             	add    esp,0x10
c002001c:	83 ec 0c             	sub    esp,0xc
c002001f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020023:	50                   	push   eax
c0020024:	e8 c3 6e fe ff       	call   c0006eec <f_setlabel>
c0020029:	83 c4 10             	add    esp,0x10
c002002c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020030:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020035:	75 07                	jne    c002003e <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020037:	b8 00 00 00 00       	mov    eax,0x0
c002003c:	eb 05                	jmp    c0020043 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c002003e:	b8 01 00 00 00       	mov    eax,0x1
c0020043:	83 c4 58             	add    esp,0x58
c0020046:	5f                   	pop    edi
c0020047:	c3                   	ret    

c0020048 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020048:	83 ec 2c             	sub    esp,0x2c
c002004b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020053:	83 ec 08             	sub    esp,0x8
c0020056:	68 94 be 02 c0       	push   0xc002be94
c002005b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002005f:	e8 34 08 fe ff       	call   c0000898 <strcmp>
c0020064:	83 c4 10             	add    esp,0x10
c0020067:	85 c0                	test   eax,eax
c0020069:	0f 94 c0             	sete   al
c002006c:	84 c0                	test   al,al
c002006e:	74 0d                	je     c002007d <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020070:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020078:	e9 a6 00 00 00       	jmp    c0020123 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002007d:	83 ec 08             	sub    esp,0x8
c0020080:	68 86 be 02 c0       	push   0xc002be86
c0020085:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020089:	e8 0a 08 fe ff       	call   c0000898 <strcmp>
c002008e:	83 c4 10             	add    esp,0x10
c0020091:	85 c0                	test   eax,eax
c0020093:	0f 94 c0             	sete   al
c0020096:	84 c0                	test   al,al
c0020098:	74 0a                	je     c00200a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c002009a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00200a2:	eb 7f                	jmp    c0020123 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00200a4:	83 ec 08             	sub    esp,0x8
c00200a7:	68 8c be 02 c0       	push   0xc002be8c
c00200ac:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00200b0:	e8 e3 07 fe ff       	call   c0000898 <strcmp>
c00200b5:	83 c4 10             	add    esp,0x10
c00200b8:	85 c0                	test   eax,eax
c00200ba:	0f 94 c0             	sete   al
c00200bd:	84 c0                	test   al,al
c00200bf:	74 0a                	je     c00200cb <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00200c1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00200c9:	eb 58                	jmp    c0020123 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00200cb:	83 ec 08             	sub    esp,0x8
c00200ce:	68 8c 92 02 c0       	push   0xc002928c
c00200d3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00200d7:	e8 bc 07 fe ff       	call   c0000898 <strcmp>
c00200dc:	83 c4 10             	add    esp,0x10
c00200df:	85 c0                	test   eax,eax
c00200e1:	0f 94 c0             	sete   al
c00200e4:	84 c0                	test   al,al
c00200e6:	74 0a                	je     c00200f2 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00200e8:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00200f0:	eb 31                	jmp    c0020123 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00200f2:	83 ec 08             	sub    esp,0x8
c00200f5:	68 92 be 02 c0       	push   0xc002be92
c00200fa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00200fe:	e8 95 07 fe ff       	call   c0000898 <strcmp>
c0020103:	83 c4 10             	add    esp,0x10
c0020106:	85 c0                	test   eax,eax
c0020108:	0f 94 c0             	sete   al
c002010b:	84 c0                	test   al,al
c002010d:	74 0a                	je     c0020119 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c002010f:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020117:	eb 0a                	jmp    c0020123 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020119:	b8 08 00 00 00       	mov    eax,0x8
c002011e:	e9 df 00 00 00       	jmp    c0020202 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020123:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002012a:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c002012f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020133:	8b 04 85 00 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf000]
c002013a:	83 f8 ff             	cmp    eax,0xffffffff
c002013d:	75 34                	jne    c0020173 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c002013f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020143:	88 c2                	mov    dl,al
c0020145:	a1 e0 0f 03 c0       	mov    eax,ds:0xc0030fe0
c002014a:	01 d0                	add    eax,edx
c002014c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020150:	8b 15 e0 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030fe0
c0020156:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002015a:	89 14 85 00 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf000],edx
c0020161:	a1 e0 0f 03 c0       	mov    eax,ds:0xc0030fe0
c0020166:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002016a:	89 14 85 80 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef80],edx
c0020171:	eb 17                	jmp    c002018a <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020173:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020177:	88 c2                	mov    dl,al
c0020179:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002017d:	8b 04 85 00 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf000]
c0020184:	01 d0                	add    eax,edx
c0020186:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002018a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002018e:	88 04 24             	mov    BYTE PTR [esp],al
c0020191:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020195:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020199:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00201a1:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00201a6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00201ae:	83 ec 0c             	sub    esp,0xc
c00201b1:	68 00 20 00 00       	push   0x2000
c00201b6:	e8 de f3 fe ff       	call   c000f599 <malloc>
c00201bb:	83 c4 10             	add    esp,0x10
c00201be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00201c2:	68 00 20 00 00       	push   0x2000
c00201c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201cb:	8d 44 24 08          	lea    eax,[esp+0x8]
c00201cf:	50                   	push   eax
c00201d0:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00201d4:	50                   	push   eax
c00201d5:	e8 5d 71 fe ff       	call   c0007337 <f_mkfs>
c00201da:	83 c4 10             	add    esp,0x10
c00201dd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00201e1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00201e6:	75 07                	jne    c00201ef <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00201e8:	b8 00 00 00 00       	mov    eax,0x0
c00201ed:	eb 13                	jmp    c0020202 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00201ef:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00201f4:	75 07                	jne    c00201fd <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c00201f6:	b8 09 00 00 00       	mov    eax,0x9
c00201fb:	eb 05                	jmp    c0020202 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00201fd:	b8 01 00 00 00       	mov    eax,0x1
c0020202:	83 c4 2c             	add    esp,0x2c
c0020205:	c3                   	ret    

c0020206 <FAT::tryMount(LogicalDisk*, int)>:
c0020206:	81 ec 6c 03 00 00    	sub    esp,0x36c
c002020c:	a1 e0 0f 03 c0       	mov    eax,ds:0xc0030fe0
c0020211:	83 f8 14             	cmp    eax,0x14
c0020214:	75 17                	jne    c002022d <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020216:	83 ec 0c             	sub    esp,0xc
c0020219:	68 98 be 02 c0       	push   0xc002be98
c002021e:	e8 18 9c ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c0020223:	83 c4 10             	add    esp,0x10
c0020226:	b0 00                	mov    al,0x0
c0020228:	e9 d7 01 00 00       	jmp    c0020404 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002022d:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020234:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002023a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020240:	3d 00 02 00 00       	cmp    eax,0x200
c0020245:	74 07                	je     c002024e <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020247:	b0 00                	mov    al,0x0
c0020249:	e9 b6 01 00 00       	jmp    c0020404 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002024e:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020256:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002025d:	8b 04 85 00 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf000]
c0020264:	83 f8 ff             	cmp    eax,0xffffffff
c0020267:	74 07                	je     c0020270 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020269:	b0 01                	mov    al,0x1
c002026b:	e9 94 01 00 00       	jmp    c0020404 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020270:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c002027a:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020282:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020289:	88 c2                	mov    dl,al
c002028b:	a1 e0 0f 03 c0       	mov    eax,ds:0xc0030fe0
c0020290:	01 d0                	add    eax,edx
c0020292:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020299:	8b 15 e0 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030fe0
c002029f:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00202a6:	89 14 85 00 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf000],edx
c00202ad:	a1 e0 0f 03 c0       	mov    eax,ds:0xc0030fe0
c00202b2:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00202b9:	89 14 85 80 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef80],edx
c00202c0:	83 ec 0c             	sub    esp,0xc
c00202c3:	68 54 02 00 00       	push   0x254
c00202c8:	e8 cc f2 fe ff       	call   c000f599 <malloc>
c00202cd:	83 c4 10             	add    esp,0x10
c00202d0:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00202d7:	83 ec 04             	sub    esp,0x4
c00202da:	6a 00                	push   0x0
c00202dc:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00202e3:	50                   	push   eax
c00202e4:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00202eb:	e8 05 4c fe ff       	call   c0004ef5 <f_mount>
c00202f0:	83 c4 10             	add    esp,0x10
c00202f3:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00202fa:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020302:	74 19                	je     c002031d <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020304:	83 ec 0c             	sub    esp,0xc
c0020307:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002030e:	e8 a6 f2 fe ff       	call   c000f5b9 <rfree>
c0020313:	83 c4 10             	add    esp,0x10
c0020316:	b0 00                	mov    al,0x0
c0020318:	e9 e7 00 00 00       	jmp    c0020404 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002031d:	83 ec 04             	sub    esp,0x4
c0020320:	68 00 01 00 00       	push   0x100
c0020325:	6a 00                	push   0x0
c0020327:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002032e:	50                   	push   eax
c002032f:	e8 1c 04 fe ff       	call   c0000750 <memset>
c0020334:	83 c4 10             	add    esp,0x10
c0020337:	83 ec 08             	sub    esp,0x8
c002033a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020341:	50                   	push   eax
c0020342:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020349:	50                   	push   eax
c002034a:	e8 fd 05 fe ff       	call   c000094c <strcat>
c002034f:	83 c4 10             	add    esp,0x10
c0020352:	83 ec 08             	sub    esp,0x8
c0020355:	68 a6 be 02 c0       	push   0xc002bea6
c002035a:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020361:	50                   	push   eax
c0020362:	e8 e5 05 fe ff       	call   c000094c <strcat>
c0020367:	83 c4 10             	add    esp,0x10
c002036a:	83 ec 04             	sub    esp,0x4
c002036d:	6a 01                	push   0x1
c002036f:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020376:	50                   	push   eax
c0020377:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002037b:	50                   	push   eax
c002037c:	e8 d6 4b fe ff       	call   c0004f57 <f_open>
c0020381:	83 c4 10             	add    esp,0x10
c0020384:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002038b:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020392:	85 c0                	test   eax,eax
c0020394:	74 0a                	je     c00203a0 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020396:	78 2d                	js     c00203c5 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020398:	83 e8 04             	sub    eax,0x4
c002039b:	83 f8 01             	cmp    eax,0x1
c002039e:	77 25                	ja     c00203c5 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00203a0:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00203a8:	83 ec 0c             	sub    esp,0xc
c00203ab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00203af:	50                   	push   eax
c00203b0:	e8 f4 56 fe ff       	call   c0005aa9 <f_close>
c00203b5:	83 c4 10             	add    esp,0x10
c00203b8:	90                   	nop
c00203b9:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00203c1:	74 3a                	je     c00203fd <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00203c3:	eb 2d                	jmp    c00203f2 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00203c5:	83 ec 0c             	sub    esp,0xc
c00203c8:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00203cf:	e8 e5 f1 fe ff       	call   c000f5b9 <rfree>
c00203d4:	83 c4 10             	add    esp,0x10
c00203d7:	83 ec 04             	sub    esp,0x4
c00203da:	6a 00                	push   0x0
c00203dc:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00203e3:	50                   	push   eax
c00203e4:	6a 00                	push   0x0
c00203e6:	e8 0a 4b fe ff       	call   c0004ef5 <f_mount>
c00203eb:	83 c4 10             	add    esp,0x10
c00203ee:	b0 00                	mov    al,0x0
c00203f0:	eb 12                	jmp    c0020404 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00203f2:	a1 e0 0f 03 c0       	mov    eax,ds:0xc0030fe0
c00203f7:	40                   	inc    eax
c00203f8:	a3 e0 0f 03 c0       	mov    ds:0xc0030fe0,eax
c00203fd:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020404:	81 c4 6c 03 00 00    	add    esp,0x36c
c002040a:	c3                   	ret    
c002040b:	90                   	nop

c002040c <FAT::getFileFirstSector(char const*)>:
c002040c:	53                   	push   ebx
c002040d:	83 ec 28             	sub    esp,0x28
c0020410:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0020418:	83 ec 0c             	sub    esp,0xc
c002041b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002041f:	e8 75 f1 fe ff       	call   c000f599 <malloc>
c0020424:	83 c4 10             	add    esp,0x10
c0020427:	89 c3                	mov    ebx,eax
c0020429:	a1 10 0f 03 c0       	mov    eax,ds:0xc0030f10
c002042e:	83 ec 04             	sub    esp,0x4
c0020431:	50                   	push   eax
c0020432:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020436:	53                   	push   ebx
c0020437:	e8 f2 27 ff ff       	call   c0012c2e <File::File(char const*, Process*)>
c002043c:	83 c4 10             	add    esp,0x10
c002043f:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0020443:	83 ec 08             	sub    esp,0x8
c0020446:	6a 01                	push   0x1
c0020448:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c002044c:	e8 41 28 ff ff       	call   c0012c92 <File::open(FileOpenMode)>
c0020451:	83 c4 10             	add    esp,0x10
c0020454:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020458:	8b 00                	mov    eax,DWORD PTR [eax]
c002045a:	83 c0 0c             	add    eax,0xc
c002045d:	8b 00                	mov    eax,DWORD PTR [eax]
c002045f:	83 ec 0c             	sub    esp,0xc
c0020462:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020466:	52                   	push   edx
c0020467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002046b:	52                   	push   edx
c002046c:	6a 00                	push   0x0
c002046e:	6a 04                	push   0x4
c0020470:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020474:	ff d0                	call   eax
c0020476:	83 c4 20             	add    esp,0x20
c0020479:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002047d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020483:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020487:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002048b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c002048e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020491:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020495:	83 ec 0c             	sub    esp,0xc
c0020498:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c002049c:	e8 4f 28 ff ff       	call   c0012cf0 <File::close()>
c00204a1:	83 c4 10             	add    esp,0x10
c00204a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00204a8:	ba 00 00 00 00       	mov    edx,0x0
c00204ad:	83 c4 28             	add    esp,0x28
c00204b0:	5b                   	pop    ebx
c00204b1:	c3                   	ret    

c00204b2 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00204b2:	57                   	push   edi
c00204b3:	56                   	push   esi
c00204b4:	53                   	push   ebx
c00204b5:	81 ec 50 02 00 00    	sub    esp,0x250
c00204bb:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00204c3:	74 0a                	je     c00204cf <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c00204c5:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00204cd:	75 0a                	jne    c00204d9 <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c00204cf:	b8 04 00 00 00       	mov    eax,0x4
c00204d4:	e9 29 01 00 00       	jmp    c0020602 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00204d9:	83 ec 08             	sub    esp,0x8
c00204dc:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00204e3:	50                   	push   eax
c00204e4:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00204eb:	e8 c3 5b fe ff       	call   c00060b3 <f_readdir>
c00204f0:	83 c4 10             	add    esp,0x10
c00204f3:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00204fa:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0020501:	83 ec 0c             	sub    esp,0xc
c0020504:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c002050b:	83 c0 1a             	add    eax,0x1a
c002050e:	50                   	push   eax
c002050f:	e8 58 02 fe ff       	call   c000076c <strlen>
c0020514:	83 c4 10             	add    esp,0x10
c0020517:	ba 00 00 00 00       	mov    edx,0x0
c002051c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020520:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020524:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c002052b:	0f b6 c0             	movzx  eax,al
c002052e:	83 e0 10             	and    eax,0x10
c0020531:	74 07                	je     c002053a <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0020533:	b8 02 00 00 00       	mov    eax,0x2
c0020538:	eb 05                	jmp    c002053f <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c002053a:	b8 01 00 00 00       	mov    eax,0x1
c002053f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020543:	83 ec 08             	sub    esp,0x8
c0020546:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c002054d:	83 c0 1a             	add    eax,0x1a
c0020550:	50                   	push   eax
c0020551:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020555:	83 c0 10             	add    eax,0x10
c0020558:	50                   	push   eax
c0020559:	e8 ae 02 fe ff       	call   c000080c <strcpy>
c002055e:	83 c4 10             	add    esp,0x10
c0020561:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0020568:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c002056f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020573:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c002057a:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0020581:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0020588:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c002058f:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0020596:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c002059d:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00205a4:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00205ab:	89 c6                	mov    esi,eax
c00205ad:	89 d7                	mov    edi,edx
c00205af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00205b1:	89 c8                	mov    eax,ecx
c00205b3:	89 fa                	mov    edx,edi
c00205b5:	89 f3                	mov    ebx,esi
c00205b7:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00205be:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00205c5:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00205cc:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00205d3:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00205d9:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00205e0:	84 c0                	test   al,al
c00205e2:	75 07                	jne    c00205eb <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c00205e4:	b8 07 00 00 00       	mov    eax,0x7
c00205e9:	eb 17                	jmp    c0020602 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00205eb:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00205f2:	85 c0                	test   eax,eax
c00205f4:	75 07                	jne    c00205fd <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c00205f6:	b8 00 00 00 00       	mov    eax,0x0
c00205fb:	eb 05                	jmp    c0020602 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00205fd:	b8 01 00 00 00       	mov    eax,0x1
c0020602:	81 c4 50 02 00 00    	add    esp,0x250
c0020608:	5b                   	pop    ebx
c0020609:	5e                   	pop    esi
c002060a:	5f                   	pop    edi
c002060b:	c3                   	ret    

c002060c <FAT::read(void*, unsigned long, void*, int*)>:
c002060c:	83 ec 1c             	sub    esp,0x1c
c002060f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020614:	74 07                	je     c002061d <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020616:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002061b:	75 07                	jne    c0020624 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c002061d:	b8 04 00 00 00       	mov    eax,0x4
c0020622:	eb 3d                	jmp    c0020661 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020624:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020628:	50                   	push   eax
c0020629:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002062d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020631:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020635:	e8 59 4d fe ff       	call   c0005393 <f_read>
c002063a:	83 c4 10             	add    esp,0x10
c002063d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020645:	89 c2                	mov    edx,eax
c0020647:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002064b:	89 10                	mov    DWORD PTR [eax],edx
c002064d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020651:	85 c0                	test   eax,eax
c0020653:	75 07                	jne    c002065c <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020655:	b8 00 00 00 00       	mov    eax,0x0
c002065a:	eb 05                	jmp    c0020661 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c002065c:	b8 01 00 00 00       	mov    eax,0x1
c0020661:	83 c4 1c             	add    esp,0x1c
c0020664:	c3                   	ret    
c0020665:	90                   	nop

c0020666 <FAT::write(void*, unsigned long, void*, int*)>:
c0020666:	83 ec 1c             	sub    esp,0x1c
c0020669:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002066e:	74 07                	je     c0020677 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020670:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020675:	75 07                	jne    c002067e <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020677:	b8 04 00 00 00       	mov    eax,0x4
c002067c:	eb 3d                	jmp    c00206bb <FAT::write(void*, unsigned long, void*, int*)+0x55>
c002067e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020682:	50                   	push   eax
c0020683:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020687:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002068b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002068f:	e8 7f 4f fe ff       	call   c0005613 <f_write>
c0020694:	83 c4 10             	add    esp,0x10
c0020697:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002069b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002069f:	89 c2                	mov    edx,eax
c00206a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00206a5:	89 10                	mov    DWORD PTR [eax],edx
c00206a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00206ab:	85 c0                	test   eax,eax
c00206ad:	75 07                	jne    c00206b6 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00206af:	b8 00 00 00 00       	mov    eax,0x0
c00206b4:	eb 05                	jmp    c00206bb <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00206b6:	b8 01 00 00 00       	mov    eax,0x1
c00206bb:	83 c4 1c             	add    esp,0x1c
c00206be:	c3                   	ret    
c00206bf:	90                   	nop

c00206c0 <FAT::close(void*)>:
c00206c0:	83 ec 1c             	sub    esp,0x1c
c00206c3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00206c8:	75 07                	jne    c00206d1 <FAT::close(void*)+0x11>
c00206ca:	b8 04 00 00 00       	mov    eax,0x4
c00206cf:	eb 36                	jmp    c0020707 <FAT::close(void*)+0x47>
c00206d1:	83 ec 0c             	sub    esp,0xc
c00206d4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206d8:	e8 cc 53 fe ff       	call   c0005aa9 <f_close>
c00206dd:	83 c4 10             	add    esp,0x10
c00206e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00206e4:	83 ec 0c             	sub    esp,0xc
c00206e7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206eb:	e8 b9 ee fe ff       	call   c000f5a9 <free>
c00206f0:	83 c4 10             	add    esp,0x10
c00206f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00206f7:	85 c0                	test   eax,eax
c00206f9:	75 07                	jne    c0020702 <FAT::close(void*)+0x42>
c00206fb:	b8 00 00 00 00       	mov    eax,0x0
c0020700:	eb 05                	jmp    c0020707 <FAT::close(void*)+0x47>
c0020702:	b8 01 00 00 00       	mov    eax,0x1
c0020707:	83 c4 1c             	add    esp,0x1c
c002070a:	c3                   	ret    
c002070b:	90                   	nop

c002070c <FAT::closeDir(void*)>:
c002070c:	83 ec 1c             	sub    esp,0x1c
c002070f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020714:	75 07                	jne    c002071d <FAT::closeDir(void*)+0x11>
c0020716:	b8 04 00 00 00       	mov    eax,0x4
c002071b:	eb 36                	jmp    c0020753 <FAT::closeDir(void*)+0x47>
c002071d:	83 ec 0c             	sub    esp,0xc
c0020720:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020724:	e8 68 59 fe ff       	call   c0006091 <f_closedir>
c0020729:	83 c4 10             	add    esp,0x10
c002072c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020730:	83 ec 0c             	sub    esp,0xc
c0020733:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020737:	e8 6d ee fe ff       	call   c000f5a9 <free>
c002073c:	83 c4 10             	add    esp,0x10
c002073f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020743:	85 c0                	test   eax,eax
c0020745:	75 07                	jne    c002074e <FAT::closeDir(void*)+0x42>
c0020747:	b8 00 00 00 00       	mov    eax,0x0
c002074c:	eb 05                	jmp    c0020753 <FAT::closeDir(void*)+0x47>
c002074e:	b8 01 00 00 00       	mov    eax,0x1
c0020753:	83 c4 1c             	add    esp,0x1c
c0020756:	c3                   	ret    
c0020757:	90                   	nop

c0020758 <FAT::seek(void*, unsigned long long)>:
c0020758:	83 ec 2c             	sub    esp,0x2c
c002075b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002075f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020763:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020767:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002076b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020770:	75 07                	jne    c0020779 <FAT::seek(void*, unsigned long long)+0x21>
c0020772:	b8 04 00 00 00       	mov    eax,0x4
c0020777:	eb 2f                	jmp    c00207a8 <FAT::seek(void*, unsigned long long)+0x50>
c0020779:	83 ec 04             	sub    esp,0x4
c002077c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020780:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020784:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020788:	e8 4b 53 fe ff       	call   c0005ad8 <f_lseek>
c002078d:	83 c4 10             	add    esp,0x10
c0020790:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020794:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020798:	85 c0                	test   eax,eax
c002079a:	75 07                	jne    c00207a3 <FAT::seek(void*, unsigned long long)+0x4b>
c002079c:	b8 00 00 00 00       	mov    eax,0x0
c00207a1:	eb 05                	jmp    c00207a8 <FAT::seek(void*, unsigned long long)+0x50>
c00207a3:	b8 01 00 00 00       	mov    eax,0x1
c00207a8:	83 c4 2c             	add    esp,0x2c
c00207ab:	c3                   	ret    

c00207ac <fatWrapperReadDisk>:
c00207ac:	83 ec 1c             	sub    esp,0x1c
c00207af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207b3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00207b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00207bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00207be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00207c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00207c6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00207cb:	8b 04 85 c0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2040]
c00207d2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00207d6:	83 ec 0c             	sub    esp,0xc
c00207d9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00207dd:	52                   	push   edx
c00207de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00207e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00207e6:	50                   	push   eax
c00207e7:	e8 38 58 ff ff       	call   c0016024 <LogicalDisk::read(unsigned long long, int, void*)>
c00207ec:	83 c4 20             	add    esp,0x20
c00207ef:	83 c4 1c             	add    esp,0x1c
c00207f2:	c3                   	ret    

c00207f3 <fatWrapperWriteDisk>:
c00207f3:	83 ec 1c             	sub    esp,0x1c
c00207f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207fa:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00207fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020802:	89 04 24             	mov    DWORD PTR [esp],eax
c0020805:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020809:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002080d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020812:	8b 04 85 c0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2040]
c0020819:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002081d:	83 ec 0c             	sub    esp,0xc
c0020820:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020824:	52                   	push   edx
c0020825:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020829:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002082d:	50                   	push   eax
c002082e:	e8 5d 58 ff ff       	call   c0016090 <LogicalDisk::write(unsigned long long, int, void*)>
c0020833:	83 c4 20             	add    esp,0x20
c0020836:	83 c4 1c             	add    esp,0x1c
c0020839:	c3                   	ret    

c002083a <fatWrapperIoctl>:
c002083a:	53                   	push   ebx
c002083b:	83 ec 28             	sub    esp,0x28
c002083e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020842:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020846:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002084a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002084e:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020853:	75 31                	jne    c0020886 <fatWrapperIoctl+0x4c>
c0020855:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020859:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002085d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020862:	8b 04 85 c0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2040]
c0020869:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002086f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020875:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020879:	66 89 02             	mov    WORD PTR [edx],ax
c002087c:	b8 00 00 00 00       	mov    eax,0x0
c0020881:	e9 b2 00 00 00       	jmp    c0020938 <fatWrapperIoctl+0xfe>
c0020886:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c002088b:	75 6a                	jne    c00208f7 <fatWrapperIoctl+0xbd>
c002088d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020891:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020895:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002089a:	8b 04 85 c0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2040]
c00208a1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00208a7:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00208ad:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00208b3:	89 c8                	mov    eax,ecx
c00208b5:	89 da                	mov    edx,ebx
c00208b7:	0f a4 c2 0a          	shld   edx,eax,0xa
c00208bb:	c1 e0 0a             	shl    eax,0xa
c00208be:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00208c3:	8b 0c 8d c0 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2040]
c00208ca:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00208d0:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00208d6:	89 cb                	mov    ebx,ecx
c00208d8:	c1 fb 1f             	sar    ebx,0x1f
c00208db:	53                   	push   ebx
c00208dc:	51                   	push   ecx
c00208dd:	52                   	push   edx
c00208de:	50                   	push   eax
c00208df:	e8 30 5e 00 00       	call   c0026714 <__udivdi3>
c00208e4:	83 c4 10             	add    esp,0x10
c00208e7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00208eb:	89 01                	mov    DWORD PTR [ecx],eax
c00208ed:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00208f0:	b8 00 00 00 00       	mov    eax,0x0
c00208f5:	eb 41                	jmp    c0020938 <fatWrapperIoctl+0xfe>
c00208f7:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00208fc:	75 07                	jne    c0020905 <fatWrapperIoctl+0xcb>
c00208fe:	b8 00 00 00 00       	mov    eax,0x0
c0020903:	eb 33                	jmp    c0020938 <fatWrapperIoctl+0xfe>
c0020905:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c002090a:	75 19                	jne    c0020925 <fatWrapperIoctl+0xeb>
c002090c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020910:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020914:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020918:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002091e:	b8 00 00 00 00       	mov    eax,0x0
c0020923:	eb 13                	jmp    c0020938 <fatWrapperIoctl+0xfe>
c0020925:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c002092a:	75 07                	jne    c0020933 <fatWrapperIoctl+0xf9>
c002092c:	b8 00 00 00 00       	mov    eax,0x0
c0020931:	eb 05                	jmp    c0020938 <fatWrapperIoctl+0xfe>
c0020933:	b8 04 00 00 00       	mov    eax,0x4
c0020938:	83 c4 28             	add    esp,0x28
c002093b:	5b                   	pop    ebx
c002093c:	c3                   	ret    
c002093d:	90                   	nop

c002093e <FAT::FAT()>:
c002093e:	83 ec 1c             	sub    esp,0x1c
c0020941:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020945:	83 ec 0c             	sub    esp,0xc
c0020948:	50                   	push   eax
c0020949:	e8 8c 20 ff ff       	call   c00129da <Filesystem::Filesystem()>
c002094e:	83 c4 10             	add    esp,0x10
c0020951:	ba bc be 02 c0       	mov    edx,0xc002bebc
c0020956:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002095a:	89 10                	mov    DWORD PTR [eax],edx
c002095c:	c7 05 e0 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030fe0,0x0
c0020966:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002096e:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020973:	7f 15                	jg     c002098a <FAT::FAT()+0x4c>
c0020975:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020979:	c7 04 85 00 10 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcf000],0xffffffff
c0020984:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020988:	eb e4                	jmp    c002096e <FAT::FAT()+0x30>
c002098a:	90                   	nop
c002098b:	83 c4 1c             	add    esp,0x1c
c002098e:	c3                   	ret    
c002098f:	90                   	nop

c0020990 <FAT::fixFilepath(char*)>:
c0020990:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020994:	8a 00                	mov    al,BYTE PTR [eax]
c0020996:	3c 40                	cmp    al,0x40
c0020998:	7e 2c                	jle    c00209c6 <FAT::fixFilepath(char*)+0x36>
c002099a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002099e:	8a 00                	mov    al,BYTE PTR [eax]
c00209a0:	83 e8 41             	sub    eax,0x41
c00209a3:	88 c2                	mov    dl,al
c00209a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209a9:	88 10                	mov    BYTE PTR [eax],dl
c00209ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209af:	8a 00                	mov    al,BYTE PTR [eax]
c00209b1:	0f be c0             	movsx  eax,al
c00209b4:	8b 04 85 00 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf000]
c00209bb:	83 c0 30             	add    eax,0x30
c00209be:	88 c2                	mov    dl,al
c00209c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209c4:	88 10                	mov    BYTE PTR [eax],dl
c00209c6:	90                   	nop
c00209c7:	c3                   	ret    

c00209c8 <FAT::open(char const*, void**, FileOpenMode)>:
c00209c8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00209ce:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00209d6:	74 0a                	je     c00209e2 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00209d8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00209e0:	75 0a                	jne    c00209ec <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00209e2:	b8 04 00 00 00       	mov    eax,0x4
c00209e7:	e9 fd 00 00 00       	jmp    c0020ae9 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00209ec:	83 ec 08             	sub    esp,0x8
c00209ef:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00209f6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00209fa:	50                   	push   eax
c00209fb:	e8 0c fe fd ff       	call   c000080c <strcpy>
c0020a00:	83 c4 10             	add    esp,0x10
c0020a03:	83 ec 08             	sub    esp,0x8
c0020a06:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020a0a:	50                   	push   eax
c0020a0b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020a12:	e8 79 ff ff ff       	call   c0020990 <FAT::fixFilepath(char*)>
c0020a17:	83 c4 10             	add    esp,0x10
c0020a1a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020a22:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a29:	83 e0 01             	and    eax,0x1
c0020a2c:	74 08                	je     c0020a36 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020a2e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020a36:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a3d:	83 e0 04             	and    eax,0x4
c0020a40:	74 10                	je     c0020a52 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020a42:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020a4a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020a52:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a59:	83 e0 02             	and    eax,0x2
c0020a5c:	74 08                	je     c0020a66 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020a5e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020a66:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a6d:	83 e0 08             	and    eax,0x8
c0020a70:	74 08                	je     c0020a7a <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020a72:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020a7a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a81:	83 e0 10             	and    eax,0x10
c0020a84:	74 08                	je     c0020a8e <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020a86:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020a8e:	83 ec 0c             	sub    esp,0xc
c0020a91:	68 50 02 00 00       	push   0x250
c0020a96:	e8 fe ea fe ff       	call   c000f599 <malloc>
c0020a9b:	83 c4 10             	add    esp,0x10
c0020a9e:	89 c2                	mov    edx,eax
c0020aa0:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020aa7:	89 10                	mov    DWORD PTR [eax],edx
c0020aa9:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020ab1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020ab8:	8b 00                	mov    eax,DWORD PTR [eax]
c0020aba:	83 ec 04             	sub    esp,0x4
c0020abd:	52                   	push   edx
c0020abe:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020ac2:	52                   	push   edx
c0020ac3:	50                   	push   eax
c0020ac4:	e8 8e 44 fe ff       	call   c0004f57 <f_open>
c0020ac9:	83 c4 10             	add    esp,0x10
c0020acc:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020ad3:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020adb:	74 07                	je     c0020ae4 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020add:	b8 01 00 00 00       	mov    eax,0x1
c0020ae2:	eb 05                	jmp    c0020ae9 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020ae4:	b8 00 00 00 00       	mov    eax,0x0
c0020ae9:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020aef:	c3                   	ret    

c0020af0 <FAT::openDir(char const*, void**)>:
c0020af0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020af6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020afe:	74 0a                	je     c0020b0a <FAT::openDir(char const*, void**)+0x1a>
c0020b00:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020b08:	75 07                	jne    c0020b11 <FAT::openDir(char const*, void**)+0x21>
c0020b0a:	b8 04 00 00 00       	mov    eax,0x4
c0020b0f:	eb 7d                	jmp    c0020b8e <FAT::openDir(char const*, void**)+0x9e>
c0020b11:	83 ec 08             	sub    esp,0x8
c0020b14:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b1b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020b1f:	50                   	push   eax
c0020b20:	e8 e7 fc fd ff       	call   c000080c <strcpy>
c0020b25:	83 c4 10             	add    esp,0x10
c0020b28:	83 ec 08             	sub    esp,0x8
c0020b2b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020b2f:	50                   	push   eax
c0020b30:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b37:	e8 54 fe ff ff       	call   c0020990 <FAT::fixFilepath(char*)>
c0020b3c:	83 c4 10             	add    esp,0x10
c0020b3f:	83 ec 0c             	sub    esp,0xc
c0020b42:	6a 4c                	push   0x4c
c0020b44:	e8 50 ea fe ff       	call   c000f599 <malloc>
c0020b49:	83 c4 10             	add    esp,0x10
c0020b4c:	89 c2                	mov    edx,eax
c0020b4e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020b55:	89 10                	mov    DWORD PTR [eax],edx
c0020b57:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020b5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b60:	83 ec 08             	sub    esp,0x8
c0020b63:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020b67:	52                   	push   edx
c0020b68:	50                   	push   eax
c0020b69:	e8 21 54 fe ff       	call   c0005f8f <f_opendir>
c0020b6e:	83 c4 10             	add    esp,0x10
c0020b71:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020b78:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020b80:	74 07                	je     c0020b89 <FAT::openDir(char const*, void**)+0x99>
c0020b82:	b8 01 00 00 00       	mov    eax,0x1
c0020b87:	eb 05                	jmp    c0020b8e <FAT::openDir(char const*, void**)+0x9e>
c0020b89:	b8 00 00 00 00       	mov    eax,0x0
c0020b8e:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020b94:	c3                   	ret    
c0020b95:	90                   	nop

c0020b96 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020b96:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020b9c:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020ba4:	75 0a                	jne    c0020bb0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020ba6:	b8 04 00 00 00       	mov    eax,0x4
c0020bab:	e9 c9 00 00 00       	jmp    c0020c79 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020bb0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020bb8:	75 0a                	jne    c0020bc4 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020bba:	b8 04 00 00 00       	mov    eax,0x4
c0020bbf:	e9 b5 00 00 00       	jmp    c0020c79 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020bc4:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020bcc:	75 0a                	jne    c0020bd8 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020bce:	b8 04 00 00 00       	mov    eax,0x4
c0020bd3:	e9 a1 00 00 00       	jmp    c0020c79 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020bd8:	83 ec 08             	sub    esp,0x8
c0020bdb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020be2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020be9:	50                   	push   eax
c0020bea:	e8 1d fc fd ff       	call   c000080c <strcpy>
c0020bef:	83 c4 10             	add    esp,0x10
c0020bf2:	83 ec 08             	sub    esp,0x8
c0020bf5:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020bfc:	50                   	push   eax
c0020bfd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020c04:	e8 87 fd ff ff       	call   c0020990 <FAT::fixFilepath(char*)>
c0020c09:	83 c4 10             	add    esp,0x10
c0020c0c:	83 ec 08             	sub    esp,0x8
c0020c0f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c13:	50                   	push   eax
c0020c14:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020c1b:	50                   	push   eax
c0020c1c:	e8 2d 55 fe ff       	call   c000614e <f_stat>
c0020c21:	83 c4 10             	add    esp,0x10
c0020c24:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020c2b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020c32:	85 c0                	test   eax,eax
c0020c34:	74 07                	je     c0020c3d <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020c36:	83 f8 04             	cmp    eax,0x4
c0020c39:	74 32                	je     c0020c6d <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020c3b:	eb 37                	jmp    c0020c74 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020c3d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020c41:	0f b6 c0             	movzx  eax,al
c0020c44:	83 e0 10             	and    eax,0x10
c0020c47:	0f 95 c2             	setne  dl
c0020c4a:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020c51:	88 10                	mov    BYTE PTR [eax],dl
c0020c53:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020c56:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020c5a:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020c61:	89 01                	mov    DWORD PTR [ecx],eax
c0020c63:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020c66:	b8 00 00 00 00       	mov    eax,0x0
c0020c6b:	eb 0c                	jmp    c0020c79 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c6d:	b8 02 00 00 00       	mov    eax,0x2
c0020c72:	eb 05                	jmp    c0020c79 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c74:	b8 01 00 00 00       	mov    eax,0x1
c0020c79:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020c7f:	c3                   	ret    

c0020c80 <FAT::unlink(char const*)>:
c0020c80:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020c86:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020c8e:	75 07                	jne    c0020c97 <FAT::unlink(char const*)+0x17>
c0020c90:	b8 04 00 00 00       	mov    eax,0x4
c0020c95:	eb 5c                	jmp    c0020cf3 <FAT::unlink(char const*)+0x73>
c0020c97:	83 ec 08             	sub    esp,0x8
c0020c9a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ca1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020ca5:	50                   	push   eax
c0020ca6:	e8 61 fb fd ff       	call   c000080c <strcpy>
c0020cab:	83 c4 10             	add    esp,0x10
c0020cae:	83 ec 08             	sub    esp,0x8
c0020cb1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020cb5:	50                   	push   eax
c0020cb6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020cbd:	e8 ce fc ff ff       	call   c0020990 <FAT::fixFilepath(char*)>
c0020cc2:	83 c4 10             	add    esp,0x10
c0020cc5:	83 ec 0c             	sub    esp,0xc
c0020cc8:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020ccc:	50                   	push   eax
c0020ccd:	e8 ce 57 fe ff       	call   c00064a0 <f_unlink>
c0020cd2:	83 c4 10             	add    esp,0x10
c0020cd5:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020cdc:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020ce3:	85 c0                	test   eax,eax
c0020ce5:	75 07                	jne    c0020cee <FAT::unlink(char const*)+0x6e>
c0020ce7:	b8 00 00 00 00       	mov    eax,0x0
c0020cec:	eb 05                	jmp    c0020cf3 <FAT::unlink(char const*)+0x73>
c0020cee:	b8 01 00 00 00       	mov    eax,0x1
c0020cf3:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020cf9:	c3                   	ret    

c0020cfa <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020cfa:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020d00:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020d07:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020d0e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020d12:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020d16:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020d1e:	75 0a                	jne    c0020d2a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020d20:	b8 04 00 00 00       	mov    eax,0x4
c0020d25:	e9 1c 01 00 00       	jmp    c0020e46 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020d2a:	83 ec 08             	sub    esp,0x8
c0020d2d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020d34:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020d38:	50                   	push   eax
c0020d39:	e8 ce fa fd ff       	call   c000080c <strcpy>
c0020d3e:	83 c4 10             	add    esp,0x10
c0020d41:	83 ec 08             	sub    esp,0x8
c0020d44:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020d48:	50                   	push   eax
c0020d49:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020d50:	e8 3b fc ff ff       	call   c0020990 <FAT::fixFilepath(char*)>
c0020d55:	83 c4 10             	add    esp,0x10
c0020d58:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020d60:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020d68:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d6d:	83 e0 01             	and    eax,0x1
c0020d70:	74 08                	je     c0020d7a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020d72:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020d7a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d7f:	83 e0 02             	and    eax,0x2
c0020d82:	74 08                	je     c0020d8c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020d84:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020d8c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d91:	83 e0 04             	and    eax,0x4
c0020d94:	74 08                	je     c0020d9e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020d96:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020d9e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020da3:	83 e0 08             	and    eax,0x8
c0020da6:	74 08                	je     c0020db0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020da8:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020db0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020db5:	83 e0 01             	and    eax,0x1
c0020db8:	74 08                	je     c0020dc2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020dba:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020dc2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020dc7:	83 e0 02             	and    eax,0x2
c0020dca:	74 08                	je     c0020dd4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020dcc:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020dd4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020dd9:	83 e0 04             	and    eax,0x4
c0020ddc:	74 08                	je     c0020de6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020dde:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020de6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020deb:	83 e0 08             	and    eax,0x8
c0020dee:	74 08                	je     c0020df8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020df0:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020df8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020dff:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020e06:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020e0e:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020e16:	83 ec 04             	sub    esp,0x4
c0020e19:	52                   	push   edx
c0020e1a:	50                   	push   eax
c0020e1b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020e1f:	50                   	push   eax
c0020e20:	e8 1d 5d fe ff       	call   c0006b42 <f_chmod>
c0020e25:	83 c4 10             	add    esp,0x10
c0020e28:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020e2f:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020e36:	85 c0                	test   eax,eax
c0020e38:	75 07                	jne    c0020e41 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020e3a:	b8 00 00 00 00       	mov    eax,0x0
c0020e3f:	eb 05                	jmp    c0020e46 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020e41:	b8 01 00 00 00       	mov    eax,0x1
c0020e46:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020e4c:	c3                   	ret    
c0020e4d:	90                   	nop

c0020e4e <FAT::rename(char const*, char const*)>:
c0020e4e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020e54:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020e5c:	74 0a                	je     c0020e68 <FAT::rename(char const*, char const*)+0x1a>
c0020e5e:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020e66:	75 0a                	jne    c0020e72 <FAT::rename(char const*, char const*)+0x24>
c0020e68:	b8 04 00 00 00       	mov    eax,0x4
c0020e6d:	e9 98 00 00 00       	jmp    c0020f0a <FAT::rename(char const*, char const*)+0xbc>
c0020e72:	83 ec 08             	sub    esp,0x8
c0020e75:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020e7c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020e83:	50                   	push   eax
c0020e84:	e8 83 f9 fd ff       	call   c000080c <strcpy>
c0020e89:	83 c4 10             	add    esp,0x10
c0020e8c:	83 ec 08             	sub    esp,0x8
c0020e8f:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020e96:	50                   	push   eax
c0020e97:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020e9e:	e8 ed fa ff ff       	call   c0020990 <FAT::fixFilepath(char*)>
c0020ea3:	83 c4 10             	add    esp,0x10
c0020ea6:	83 ec 08             	sub    esp,0x8
c0020ea9:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020eb0:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020eb4:	50                   	push   eax
c0020eb5:	e8 52 f9 fd ff       	call   c000080c <strcpy>
c0020eba:	83 c4 10             	add    esp,0x10
c0020ebd:	83 ec 08             	sub    esp,0x8
c0020ec0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ec4:	50                   	push   eax
c0020ec5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020ecc:	e8 bf fa ff ff       	call   c0020990 <FAT::fixFilepath(char*)>
c0020ed1:	83 c4 10             	add    esp,0x10
c0020ed4:	83 ec 08             	sub    esp,0x8
c0020ed7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020edb:	50                   	push   eax
c0020edc:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020ee3:	50                   	push   eax
c0020ee4:	e8 66 59 fe ff       	call   c000684f <f_rename>
c0020ee9:	83 c4 10             	add    esp,0x10
c0020eec:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020ef3:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020efa:	85 c0                	test   eax,eax
c0020efc:	75 07                	jne    c0020f05 <FAT::rename(char const*, char const*)+0xb7>
c0020efe:	b8 00 00 00 00       	mov    eax,0x0
c0020f03:	eb 05                	jmp    c0020f0a <FAT::rename(char const*, char const*)+0xbc>
c0020f05:	b8 01 00 00 00       	mov    eax,0x1
c0020f0a:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020f10:	c3                   	ret    
c0020f11:	90                   	nop

c0020f12 <FAT::mkdir(char const*)>:
c0020f12:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020f18:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020f20:	75 07                	jne    c0020f29 <FAT::mkdir(char const*)+0x17>
c0020f22:	b8 04 00 00 00       	mov    eax,0x4
c0020f27:	eb 5c                	jmp    c0020f85 <FAT::mkdir(char const*)+0x73>
c0020f29:	83 ec 08             	sub    esp,0x8
c0020f2c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f33:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f37:	50                   	push   eax
c0020f38:	e8 cf f8 fd ff       	call   c000080c <strcpy>
c0020f3d:	83 c4 10             	add    esp,0x10
c0020f40:	83 ec 08             	sub    esp,0x8
c0020f43:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020f47:	50                   	push   eax
c0020f48:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f4f:	e8 3c fa ff ff       	call   c0020990 <FAT::fixFilepath(char*)>
c0020f54:	83 c4 10             	add    esp,0x10
c0020f57:	83 ec 0c             	sub    esp,0xc
c0020f5a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f5e:	50                   	push   eax
c0020f5f:	e8 bf 56 fe ff       	call   c0006623 <f_mkdir>
c0020f64:	83 c4 10             	add    esp,0x10
c0020f67:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020f6e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020f75:	85 c0                	test   eax,eax
c0020f77:	75 07                	jne    c0020f80 <FAT::mkdir(char const*)+0x6e>
c0020f79:	b8 00 00 00 00       	mov    eax,0x0
c0020f7e:	eb 05                	jmp    c0020f85 <FAT::mkdir(char const*)+0x73>
c0020f80:	b8 01 00 00 00       	mov    eax,0x1
c0020f85:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020f8b:	c3                   	ret    

c0020f8c <FAT::exists(char const*)>:
c0020f8c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020f92:	83 ec 08             	sub    esp,0x8
c0020f95:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020f9c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020fa0:	50                   	push   eax
c0020fa1:	e8 66 f8 fd ff       	call   c000080c <strcpy>
c0020fa6:	83 c4 10             	add    esp,0x10
c0020fa9:	83 ec 08             	sub    esp,0x8
c0020fac:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020fb0:	50                   	push   eax
c0020fb1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020fb8:	e8 d3 f9 ff ff       	call   c0020990 <FAT::fixFilepath(char*)>
c0020fbd:	83 c4 10             	add    esp,0x10
c0020fc0:	83 ec 08             	sub    esp,0x8
c0020fc3:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020fca:	50                   	push   eax
c0020fcb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020fcf:	50                   	push   eax
c0020fd0:	e8 79 51 fe ff       	call   c000614e <f_stat>
c0020fd5:	83 c4 10             	add    esp,0x10
c0020fd8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020fdf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020fe6:	85 c0                	test   eax,eax
c0020fe8:	75 04                	jne    c0020fee <FAT::exists(char const*)+0x62>
c0020fea:	b0 01                	mov    al,0x1
c0020fec:	eb 02                	jmp    c0020ff0 <FAT::exists(char const*)+0x64>
c0020fee:	b0 00                	mov    al,0x0
c0020ff0:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020ff6:	c3                   	ret    
c0020ff7:	90                   	nop

c0020ff8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020ff8:	b8 08 00 00 00       	mov    eax,0x8
c0020ffd:	c3                   	ret    

c0020ffe <ISO9660::seek(void*, unsigned long long)>:
c0020ffe:	53                   	push   ebx
c0020fff:	b8 04 00 00 00       	mov    eax,0x4
c0021004:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021008:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002100c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021010:	85 d2                	test   edx,edx
c0021012:	74 17                	je     c002102b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021014:	89 c8                	mov    eax,ecx
c0021016:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021019:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c002101c:	b8 01 00 00 00       	mov    eax,0x1
c0021021:	73 08                	jae    c002102b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021023:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021026:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021029:	31 c0                	xor    eax,eax
c002102b:	5b                   	pop    ebx
c002102c:	c3                   	ret    
c002102d:	90                   	nop

c002102e <ISO9660::tell(void*, unsigned long long*)>:
c002102e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021032:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021036:	85 d2                	test   edx,edx
c0021038:	74 12                	je     c002104c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002103a:	85 c0                	test   eax,eax
c002103c:	74 0e                	je     c002104c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002103e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021041:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021044:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021047:	89 10                	mov    DWORD PTR [eax],edx
c0021049:	31 c0                	xor    eax,eax
c002104b:	c3                   	ret    
c002104c:	b8 04 00 00 00       	mov    eax,0x4
c0021051:	c3                   	ret    

c0021052 <ISO9660::getName()>:
c0021052:	b8 1c bf 02 c0       	mov    eax,0xc002bf1c
c0021057:	c3                   	ret    

c0021058 <ISO9660::stat(void*, unsigned long long*)>:
c0021058:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002105c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021060:	85 d2                	test   edx,edx
c0021062:	74 12                	je     c0021076 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021064:	85 c0                	test   eax,eax
c0021066:	74 0e                	je     c0021076 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021068:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c002106b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c002106e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021071:	89 10                	mov    DWORD PTR [eax],edx
c0021073:	31 c0                	xor    eax,eax
c0021075:	c3                   	ret    
c0021076:	b8 04 00 00 00       	mov    eax,0x4
c002107b:	c3                   	ret    

c002107c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c002107c:	b8 01 00 00 00       	mov    eax,0x1
c0021081:	c3                   	ret    

c0021082 <ISO9660::unlink(char const*)>:
c0021082:	b8 01 00 00 00       	mov    eax,0x1
c0021087:	c3                   	ret    

c0021088 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021088:	b8 01 00 00 00       	mov    eax,0x1
c002108d:	c3                   	ret    

c002108e <ISO9660::rename(char const*, char const*)>:
c002108e:	b8 01 00 00 00       	mov    eax,0x1
c0021093:	c3                   	ret    

c0021094 <ISO9660::mkdir(char const*)>:
c0021094:	b8 01 00 00 00       	mov    eax,0x1
c0021099:	c3                   	ret    

c002109a <ISO9660::close(void*)>:
c002109a:	83 ec 0c             	sub    esp,0xc
c002109d:	b8 04 00 00 00       	mov    eax,0x4
c00210a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00210a6:	85 d2                	test   edx,edx
c00210a8:	74 0e                	je     c00210b8 <ISO9660::close(void*)+0x1e>
c00210aa:	83 ec 0c             	sub    esp,0xc
c00210ad:	52                   	push   edx
c00210ae:	e8 f6 e4 fe ff       	call   c000f5a9 <free>
c00210b3:	83 c4 10             	add    esp,0x10
c00210b6:	31 c0                	xor    eax,eax
c00210b8:	83 c4 0c             	add    esp,0xc
c00210bb:	c3                   	ret    

c00210bc <ISO9660::closeDir(void*)>:
c00210bc:	83 ec 0c             	sub    esp,0xc
c00210bf:	b8 04 00 00 00       	mov    eax,0x4
c00210c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00210c8:	85 d2                	test   edx,edx
c00210ca:	74 0e                	je     c00210da <ISO9660::closeDir(void*)+0x1e>
c00210cc:	83 ec 0c             	sub    esp,0xc
c00210cf:	52                   	push   edx
c00210d0:	e8 d4 e4 fe ff       	call   c000f5a9 <free>
c00210d5:	83 c4 10             	add    esp,0x10
c00210d8:	31 c0                	xor    eax,eax
c00210da:	83 c4 0c             	add    esp,0xc
c00210dd:	c3                   	ret    

c00210de <ISO9660::~ISO9660()>:
c00210de:	83 ec 0c             	sub    esp,0xc
c00210e1:	ba 40 bf 02 c0       	mov    edx,0xc002bf40
c00210e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210ea:	89 10                	mov    DWORD PTR [eax],edx
c00210ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210f0:	83 ec 0c             	sub    esp,0xc
c00210f3:	50                   	push   eax
c00210f4:	e8 05 19 ff ff       	call   c00129fe <Filesystem::~Filesystem()>
c00210f9:	83 c4 10             	add    esp,0x10
c00210fc:	90                   	nop
c00210fd:	83 c4 0c             	add    esp,0xc
c0021100:	c3                   	ret    
c0021101:	90                   	nop

c0021102 <ISO9660::~ISO9660()>:
c0021102:	83 ec 0c             	sub    esp,0xc
c0021105:	83 ec 0c             	sub    esp,0xc
c0021108:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002110c:	e8 cd ff ff ff       	call   c00210de <ISO9660::~ISO9660()>
c0021111:	83 c4 10             	add    esp,0x10
c0021114:	83 ec 08             	sub    esp,0x8
c0021117:	6a 08                	push   0x8
c0021119:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002111d:	e8 d5 14 ff ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0021122:	83 c4 10             	add    esp,0x10
c0021125:	83 c4 0c             	add    esp,0xc
c0021128:	c3                   	ret    

c0021129 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021129:	55                   	push   ebp
c002112a:	31 c9                	xor    ecx,ecx
c002112c:	57                   	push   edi
c002112d:	56                   	push   esi
c002112e:	53                   	push   ebx
c002112f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021133:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021137:	89 eb                	mov    ebx,ebp
c0021139:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002113d:	39 ce                	cmp    esi,ecx
c002113f:	7e 17                	jle    c0021158 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021141:	31 d2                	xor    edx,edx
c0021143:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021147:	7d 13                	jge    c002115c <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021149:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002114d:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021150:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021153:	75 0d                	jne    c0021162 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021155:	42                   	inc    edx
c0021156:	eb eb                	jmp    c0021143 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021158:	31 c0                	xor    eax,eax
c002115a:	eb 0a                	jmp    c0021166 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002115c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021160:	eb 04                	jmp    c0021166 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021162:	41                   	inc    ecx
c0021163:	43                   	inc    ebx
c0021164:	eb d7                	jmp    c002113d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021166:	5b                   	pop    ebx
c0021167:	5e                   	pop    esi
c0021168:	5f                   	pop    edi
c0021169:	5d                   	pop    ebp
c002116a:	c3                   	ret    

c002116b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c002116b:	57                   	push   edi
c002116c:	56                   	push   esi
c002116d:	53                   	push   ebx
c002116e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021172:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021176:	39 0d e0 10 03 c0    	cmp    DWORD PTR ds:0xc00310e0,ecx
c002117c:	75 08                	jne    c0021186 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c002117e:	38 05 54 cf 02 c0    	cmp    BYTE PTR ds:0xc002cf54,al
c0021184:	74 2b                	je     c00211b1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c0021186:	83 ec 0c             	sub    esp,0xc
c0021189:	a2 54 cf 02 c0       	mov    ds:0xc002cf54,al
c002118e:	68 00 11 03 c0       	push   0xc0031100
c0021193:	0f be c0             	movsx  eax,al
c0021196:	6a 01                	push   0x1
c0021198:	89 0d e0 10 03 c0    	mov    DWORD PTR ds:0xc00310e0,ecx
c002119e:	31 db                	xor    ebx,ebx
c00211a0:	53                   	push   ebx
c00211a1:	51                   	push   ecx
c00211a2:	ff 34 85 bc de 02 c0 	push   DWORD PTR [eax*4-0x3ffd2144]
c00211a9:	e8 76 4e ff ff       	call   c0016024 <LogicalDisk::read(unsigned long long, int, void*)>
c00211ae:	83 c4 20             	add    esp,0x20
c00211b1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00211b5:	be 00 11 03 c0       	mov    esi,0xc0031100
c00211ba:	b9 00 08 00 00       	mov    ecx,0x800
c00211bf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00211c1:	5b                   	pop    ebx
c00211c2:	5e                   	pop    esi
c00211c3:	5f                   	pop    edi
c00211c4:	c3                   	ret    
c00211c5:	90                   	nop

c00211c6 <ISO9660::tryMount(LogicalDisk*, int)>:
c00211c6:	81 ec 10 08 00 00    	sub    esp,0x810
c00211cc:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00211d3:	83 c0 41             	add    eax,0x41
c00211d6:	0f be c0             	movsx  eax,al
c00211d9:	50                   	push   eax
c00211da:	8d 44 24 08          	lea    eax,[esp+0x8]
c00211de:	50                   	push   eax
c00211df:	6a 10                	push   0x10
c00211e1:	e8 85 ff ff ff       	call   c002116b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00211e6:	83 c4 10             	add    esp,0x10
c00211e9:	31 c0                	xor    eax,eax
c00211eb:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00211f0:	75 1d                	jne    c002120f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00211f2:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00211f7:	75 16                	jne    c002120f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00211f9:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00211fe:	75 0f                	jne    c002120f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021200:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021205:	75 08                	jne    c002120f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021207:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c002120c:	0f 94 c0             	sete   al
c002120f:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021215:	c3                   	ret    

c0021216 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021216:	55                   	push   ebp
c0021217:	57                   	push   edi
c0021218:	56                   	push   esi
c0021219:	53                   	push   ebx
c002121a:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021220:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021227:	85 ed                	test   ebp,ebp
c0021229:	0f 84 da 01 00 00    	je     c0021409 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c002122f:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021237:	0f 84 cc 01 00 00    	je     c0021409 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c002123d:	b8 01 00 00 00       	mov    eax,0x1
c0021242:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021246:	0f 85 c2 01 00 00    	jne    c002140e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c002124c:	31 d2                	xor    edx,edx
c002124e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021255:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021258:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c002125b:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c002125e:	89 04 24             	mov    DWORD PTR [esp],eax
c0021261:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021265:	01 c8                	add    eax,ecx
c0021267:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002126a:	11 da                	adc    edx,ebx
c002126c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0021270:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021274:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021278:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002127c:	19 d7                	sbb    edi,edx
c002127e:	72 11                	jb     c0021291 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0021280:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021283:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021287:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002128b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002128f:	eb 0c                	jmp    c002129d <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021291:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0021295:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021299:	29 ce                	sub    esi,ecx
c002129b:	19 df                	sbb    edi,ebx
c002129d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00212a0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00212a3:	0f a4 c2 0b          	shld   edx,eax,0xb
c00212a7:	c1 e0 0b             	shl    eax,0xb
c00212aa:	01 c8                	add    eax,ecx
c00212ac:	11 da                	adc    edx,ebx
c00212ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00212b1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00212b5:	51                   	push   ecx
c00212b6:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00212ba:	50                   	push   eax
c00212bb:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00212bf:	53                   	push   ebx
c00212c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00212c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00212c8:	0f ac d0 0b          	shrd   eax,edx,0xb
c00212cc:	50                   	push   eax
c00212cd:	e8 99 fe ff ff       	call   c002116b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00212d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00212d5:	b8 00 08 00 00       	mov    eax,0x800
c00212da:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00212e0:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c00212e4:	29 d0                	sub    eax,edx
c00212e6:	83 c4 10             	add    esp,0x10
c00212e9:	89 f9                	mov    ecx,edi
c00212eb:	39 c6                	cmp    esi,eax
c00212ed:	83 d9 00             	sbb    ecx,0x0
c00212f0:	7d 1b                	jge    c002130d <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c00212f2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00212f7:	75 12                	jne    c002130b <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c00212f9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021300:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021306:	e9 fa 00 00 00       	jmp    c0021405 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002130b:	89 f0                	mov    eax,esi
c002130d:	01 d3                	add    ebx,edx
c002130f:	31 d2                	xor    edx,edx
c0021311:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0021315:	39 c2                	cmp    edx,eax
c0021317:	7d 14                	jge    c002132d <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0021319:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021320:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021324:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021327:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c002132a:	42                   	inc    edx
c002132b:	eb e8                	jmp    c0021315 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c002132d:	89 c2                	mov    edx,eax
c002132f:	85 c0                	test   eax,eax
c0021331:	79 02                	jns    c0021335 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0021333:	31 d2                	xor    edx,edx
c0021335:	01 c2                	add    edx,eax
c0021337:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c002133a:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0021341:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0021345:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021349:	99                   	cdq    
c002134a:	01 c1                	add    ecx,eax
c002134c:	11 d3                	adc    ebx,edx
c002134e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021352:	29 c6                	sub    esi,eax
c0021354:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0021358:	19 d7                	sbb    edi,edx
c002135a:	89 34 24             	mov    DWORD PTR [esp],esi
c002135d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021361:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021366:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021369:	b8 00 00 00 00       	mov    eax,0x0
c002136e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021372:	7d 43                	jge    c00213b7 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0021374:	52                   	push   edx
c0021375:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021379:	50                   	push   eax
c002137a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002137e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021382:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021386:	0f ac d0 0b          	shrd   eax,edx,0xb
c002138a:	50                   	push   eax
c002138b:	e8 db fd ff ff       	call   c002116b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021390:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021398:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c002139d:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c00213a5:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00213ad:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00213b2:	83 c4 10             	add    esp,0x10
c00213b5:	eb aa                	jmp    c0021361 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c00213b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213bb:	0b 04 24             	or     eax,DWORD PTR [esp]
c00213be:	74 2a                	je     c00213ea <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c00213c0:	50                   	push   eax
c00213c1:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00213c5:	50                   	push   eax
c00213c6:	8d 74 24 28          	lea    esi,[esp+0x28]
c00213ca:	56                   	push   esi
c00213cb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00213cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00213d3:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c00213d7:	51                   	push   ecx
c00213d8:	e8 8e fd ff ff       	call   c002116b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00213dd:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00213e1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00213e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00213e7:	83 c4 10             	add    esp,0x10
c00213ea:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00213f1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00213f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00213f9:	89 18                	mov    DWORD PTR [eax],ebx
c00213fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00213ff:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021402:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021405:	31 c0                	xor    eax,eax
c0021407:	eb 05                	jmp    c002140e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021409:	b8 04 00 00 00       	mov    eax,0x4
c002140e:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021414:	5b                   	pop    ebx
c0021415:	5e                   	pop    esi
c0021416:	5f                   	pop    edi
c0021417:	5d                   	pop    ebp
c0021418:	c3                   	ret    
c0021419:	90                   	nop

c002141a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c002141a:	55                   	push   ebp
c002141b:	57                   	push   edi
c002141c:	56                   	push   esi
c002141d:	53                   	push   ebx
c002141e:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021424:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c002142b:	85 ed                	test   ebp,ebp
c002142d:	0f 84 51 02 00 00    	je     c0021684 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021433:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c002143b:	0f 84 43 02 00 00    	je     c0021684 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021441:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021444:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0021447:	75 0a                	jne    c0021453 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021449:	b8 07 00 00 00       	mov    eax,0x7
c002144e:	e9 36 02 00 00       	jmp    c0021689 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021453:	50                   	push   eax
c0021454:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021458:	50                   	push   eax
c0021459:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021460:	53                   	push   ebx
c0021461:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021464:	c1 e0 0b             	shl    eax,0xb
c0021467:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c002146a:	c1 e8 0b             	shr    eax,0xb
c002146d:	50                   	push   eax
c002146e:	e8 f8 fc ff ff       	call   c002116b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021473:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021476:	83 c4 10             	add    esp,0x10
c0021479:	89 c1                	mov    ecx,eax
c002147b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002147e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021484:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021487:	84 db                	test   bl,bl
c0021489:	0f 85 8b 00 00 00    	jne    c002151a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c002148f:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0021495:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021498:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002149e:	29 c6                	sub    esi,eax
c00214a0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00214a4:	89 f3                	mov    ebx,esi
c00214a6:	89 f1                	mov    ecx,esi
c00214a8:	c1 fb 1f             	sar    ebx,0x1f
c00214ab:	01 f0                	add    eax,esi
c00214ad:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00214b0:	11 da                	adc    edx,ebx
c00214b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00214b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00214b9:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00214bc:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00214bf:	89 d8                	mov    eax,ebx
c00214c1:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c00214c5:	ba 00 00 00 00       	mov    edx,0x0
c00214ca:	19 f8                	sbb    eax,edi
c00214cc:	b8 00 00 00 00       	mov    eax,0x0
c00214d1:	73 08                	jae    c00214db <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c00214d3:	89 f0                	mov    eax,esi
c00214d5:	89 fa                	mov    edx,edi
c00214d7:	29 c8                	sub    eax,ecx
c00214d9:	19 da                	sbb    edx,ebx
c00214db:	89 d7                	mov    edi,edx
c00214dd:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00214e0:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00214e3:	09 c7                	or     edi,eax
c00214e5:	0f 84 5e ff ff ff    	je     c0021449 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00214eb:	57                   	push   edi
c00214ec:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00214f0:	50                   	push   eax
c00214f1:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00214f8:	53                   	push   ebx
c00214f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00214fc:	c1 e0 0b             	shl    eax,0xb
c00214ff:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0021503:	c1 e8 0b             	shr    eax,0xb
c0021506:	50                   	push   eax
c0021507:	e8 5f fc ff ff       	call   c002116b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002150c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002150f:	83 c4 10             	add    esp,0x10
c0021512:	25 ff 07 00 00       	and    eax,0x7ff
c0021517:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c002151a:	31 ff                	xor    edi,edi
c002151c:	56                   	push   esi
c002151d:	6a 28                	push   0x28
c002151f:	6a 00                	push   0x0
c0021521:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021525:	50                   	push   eax
c0021526:	e8 25 f2 fd ff       	call   c0000750 <memset>
c002152b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002152e:	25 ff 07 00 00       	and    eax,0x7ff
c0021533:	89 c6                	mov    esi,eax
c0021535:	83 c6 21             	add    esi,0x21
c0021538:	83 d7 00             	adc    edi,0x0
c002153b:	83 c4 10             	add    esp,0x10
c002153e:	31 c9                	xor    ecx,ecx
c0021540:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0021547:	83 f9 28             	cmp    ecx,0x28
c002154a:	88 04 24             	mov    BYTE PTR [esp],al
c002154d:	0f 94 c2             	sete   dl
c0021550:	88 d0                	mov    al,dl
c0021552:	ba ff 07 00 00       	mov    edx,0x7ff
c0021557:	39 f2                	cmp    edx,esi
c0021559:	ba 00 00 00 00       	mov    edx,0x0
c002155e:	19 fa                	sbb    edx,edi
c0021560:	0f 92 c2             	setb   dl
c0021563:	09 c2                	or     edx,eax
c0021565:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021569:	0f 94 c0             	sete   al
c002156c:	08 d0                	or     al,dl
c002156e:	75 16                	jne    c0021586 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021570:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021574:	74 10                	je     c0021586 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021576:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021579:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c002157d:	41                   	inc    ecx
c002157e:	83 c6 01             	add    esi,0x1
c0021581:	83 d7 00             	adc    edi,0x0
c0021584:	eb ba                	jmp    c0021540 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0021586:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c002158d:	83 ec 0c             	sub    esp,0xc
c0021590:	8d 74 24 24          	lea    esi,[esp+0x24]
c0021594:	56                   	push   esi
c0021595:	e8 d2 f1 fd ff       	call   c000076c <strlen>
c002159a:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c00215a1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00215a5:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00215ad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00215b0:	5a                   	pop    edx
c00215b1:	25 ff 07 00 00       	and    eax,0x7ff
c00215b6:	59                   	pop    ecx
c00215b7:	01 f8                	add    eax,edi
c00215b9:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c00215bf:	83 e0 02             	and    eax,0x2
c00215c2:	3c 01                	cmp    al,0x1
c00215c4:	19 c0                	sbb    eax,eax
c00215c6:	83 c0 02             	add    eax,0x2
c00215c9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00215cd:	56                   	push   esi
c00215ce:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00215d2:	50                   	push   eax
c00215d3:	e8 34 f2 fd ff       	call   c000080c <strcpy>
c00215d8:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c00215dc:	83 c4 10             	add    esp,0x10
c00215df:	84 c0                	test   al,al
c00215e1:	75 21                	jne    c0021604 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c00215e3:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c00215eb:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00215f3:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00215fb:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021602:	eb 28                	jmp    c002162c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021604:	fe c8                	dec    al
c0021606:	75 24                	jne    c002162c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021608:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021610:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021618:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021620:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021627:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c002162c:	8d 74 24 40          	lea    esi,[esp+0x40]
c0021630:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0021637:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c002163e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021640:	0f b6 f3             	movzx  esi,bl
c0021643:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c002164a:	31 db                	xor    ebx,ebx
c002164c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021652:	89 df                	mov    edi,ebx
c0021654:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0021657:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002165a:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c002165d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021660:	39 c6                	cmp    esi,eax
c0021662:	19 d7                	sbb    edi,edx
c0021664:	72 10                	jb     c0021676 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0021666:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c002166d:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0021674:	eb 0a                	jmp    c0021680 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c0021676:	29 f0                	sub    eax,esi
c0021678:	19 da                	sbb    edx,ebx
c002167a:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c002167d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021680:	31 c0                	xor    eax,eax
c0021682:	eb 05                	jmp    c0021689 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021684:	b8 04 00 00 00       	mov    eax,0x4
c0021689:	81 c4 5c 09 00 00    	add    esp,0x95c
c002168f:	5b                   	pop    ebx
c0021690:	5e                   	pop    esi
c0021691:	5f                   	pop    edi
c0021692:	5d                   	pop    ebp
c0021693:	c3                   	ret    

c0021694 <readRoot(unsigned int*, unsigned int*, char)>:
c0021694:	57                   	push   edi
c0021695:	56                   	push   esi
c0021696:	81 ec 38 08 00 00    	sub    esp,0x838
c002169c:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c00216a4:	50                   	push   eax
c00216a5:	8d 44 24 38          	lea    eax,[esp+0x38]
c00216a9:	50                   	push   eax
c00216aa:	6a 10                	push   0x10
c00216ac:	e8 ba fa ff ff       	call   c002116b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00216b1:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c00216b8:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c00216bc:	b9 22 00 00 00       	mov    ecx,0x22
c00216c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00216c3:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00216ca:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00216ce:	89 10                	mov    DWORD PTR [eax],edx
c00216d0:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c00216d7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00216db:	89 10                	mov    DWORD PTR [eax],edx
c00216dd:	81 c4 44 08 00 00    	add    esp,0x844
c00216e3:	b0 01                	mov    al,0x1
c00216e5:	5e                   	pop    esi
c00216e6:	5f                   	pop    edi
c00216e7:	c3                   	ret    

c00216e8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c00216e8:	55                   	push   ebp
c00216e9:	57                   	push   edi
c00216ea:	56                   	push   esi
c00216eb:	53                   	push   ebx
c00216ec:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00216f2:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00216f9:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021700:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021704:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021708:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002170c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021710:	75 03                	jne    c0021715 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021712:	83 c3 02             	add    ebx,0x2
c0021715:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021718:	75 03                	jne    c002171d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c002171a:	43                   	inc    ebx
c002171b:	eb f8                	jmp    c0021715 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002171d:	51                   	push   ecx
c002171e:	68 00 01 00 00       	push   0x100
c0021723:	6a 00                	push   0x0
c0021725:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021729:	50                   	push   eax
c002172a:	e8 21 f0 fd ff       	call   c0000750 <memset>
c002172f:	83 c4 10             	add    esp,0x10
c0021732:	31 d2                	xor    edx,edx
c0021734:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021737:	84 c0                	test   al,al
c0021739:	74 21                	je     c002175c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c002173b:	3c 2f                	cmp    al,0x2f
c002173d:	75 0b                	jne    c002174a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c002173f:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021743:	bd 01 00 00 00       	mov    ebp,0x1
c0021748:	eb 14                	jmp    c002175e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c002174a:	8d 48 9f             	lea    ecx,[eax-0x61]
c002174d:	80 f9 19             	cmp    cl,0x19
c0021750:	77 03                	ja     c0021755 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021752:	83 e8 20             	sub    eax,0x20
c0021755:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021759:	42                   	inc    edx
c002175a:	eb d8                	jmp    c0021734 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c002175c:	31 ed                	xor    ebp,ebp
c002175e:	83 ec 0c             	sub    esp,0xc
c0021761:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021768:	e8 2c de fe ff       	call   c000f599 <malloc>
c002176d:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021774:	89 c6                	mov    esi,eax
c0021776:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c002177c:	c1 ef 0b             	shr    edi,0xb
c002177f:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021786:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c002178a:	83 c4 10             	add    esp,0x10
c002178d:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021792:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021796:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c002179d:	74 28                	je     c00217c7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c002179f:	52                   	push   edx
c00217a0:	57                   	push   edi
c00217a1:	50                   	push   eax
c00217a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00217a6:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00217ad:	e8 b9 f9 ff ff       	call   c002116b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00217b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00217b6:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c00217bd:	05 00 08 00 00       	add    eax,0x800
c00217c2:	83 c4 10             	add    esp,0x10
c00217c5:	eb cb                	jmp    c0021792 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c00217c7:	83 ec 0c             	sub    esp,0xc
c00217ca:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00217ce:	57                   	push   edi
c00217cf:	e8 98 ef fd ff       	call   c000076c <strlen>
c00217d4:	50                   	push   eax
c00217d5:	57                   	push   edi
c00217d6:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00217dd:	56                   	push   esi
c00217de:	e8 46 f9 ff ff       	call   c0021129 <__memmem(unsigned char*, int, unsigned char*, int)>
c00217e3:	83 c4 20             	add    esp,0x20
c00217e6:	85 c0                	test   eax,eax
c00217e8:	75 13                	jne    c00217fd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c00217ea:	83 ec 0c             	sub    esp,0xc
c00217ed:	56                   	push   esi
c00217ee:	e8 b6 dd fe ff       	call   c000f5a9 <free>
c00217f3:	83 c4 10             	add    esp,0x10
c00217f6:	31 c0                	xor    eax,eax
c00217f8:	e9 b3 00 00 00       	jmp    c00218b0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00217fd:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021801:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021805:	c1 e7 08             	shl    edi,0x8
c0021808:	c1 e2 10             	shl    edx,0x10
c002180b:	09 d7                	or     edi,edx
c002180d:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021811:	09 d7                	or     edi,edx
c0021813:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021817:	c1 e2 18             	shl    edx,0x18
c002181a:	09 d7                	or     edi,edx
c002181c:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021820:	89 d1                	mov    ecx,edx
c0021822:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021826:	c1 e1 08             	shl    ecx,0x8
c0021829:	c1 e2 10             	shl    edx,0x10
c002182c:	09 ca                	or     edx,ecx
c002182e:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021832:	09 ca                	or     edx,ecx
c0021834:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021838:	c1 e1 18             	shl    ecx,0x18
c002183b:	09 ca                	or     edx,ecx
c002183d:	89 e9                	mov    ecx,ebp
c002183f:	84 c9                	test   cl,cl
c0021841:	74 3c                	je     c002187f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021843:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021847:	83 ec 0c             	sub    esp,0xc
c002184a:	56                   	push   esi
c002184b:	e8 59 dd fe ff       	call   c000f5a9 <free>
c0021850:	83 c4 0c             	add    esp,0xc
c0021853:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002185a:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c002185f:	50                   	push   eax
c0021860:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021867:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002186e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021872:	52                   	push   edx
c0021873:	57                   	push   edi
c0021874:	53                   	push   ebx
c0021875:	e8 6e fe ff ff       	call   c00216e8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002187a:	83 c4 20             	add    esp,0x20
c002187d:	eb 31                	jmp    c00218b0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002187f:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021882:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021889:	d0 e8                	shr    al,1
c002188b:	89 3b                	mov    DWORD PTR [ebx],edi
c002188d:	83 e0 01             	and    eax,0x1
c0021890:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021897:	83 ec 0c             	sub    esp,0xc
c002189a:	89 13                	mov    DWORD PTR [ebx],edx
c002189c:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00218a3:	89 03                	mov    DWORD PTR [ebx],eax
c00218a5:	56                   	push   esi
c00218a6:	e8 fe dc fe ff       	call   c000f5a9 <free>
c00218ab:	83 c4 10             	add    esp,0x10
c00218ae:	b0 01                	mov    al,0x1
c00218b0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00218b6:	5b                   	pop    ebx
c00218b7:	5e                   	pop    esi
c00218b8:	5f                   	pop    edi
c00218b9:	5d                   	pop    ebp
c00218ba:	c3                   	ret    

c00218bb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00218bb:	55                   	push   ebp
c00218bc:	57                   	push   edi
c00218bd:	56                   	push   esi
c00218be:	53                   	push   ebx
c00218bf:	83 ec 20             	sub    esp,0x20
c00218c2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00218c6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00218ca:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00218ce:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00218d6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00218de:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00218e3:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00218e9:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c00218ef:	57                   	push   edi
c00218f0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00218f4:	50                   	push   eax
c00218f5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00218f9:	50                   	push   eax
c00218fa:	e8 95 fd ff ff       	call   c0021694 <readRoot(unsigned int*, unsigned int*, char)>
c00218ff:	5a                   	pop    edx
c0021900:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021904:	e8 63 ee fd ff       	call   c000076c <strlen>
c0021909:	83 c4 10             	add    esp,0x10
c002190c:	83 f8 03             	cmp    eax,0x3
c002190f:	77 17                	ja     c0021928 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021911:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021915:	89 03                	mov    DWORD PTR [ebx],eax
c0021917:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002191b:	89 06                	mov    DWORD PTR [esi],eax
c002191d:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021924:	b0 01                	mov    al,0x1
c0021926:	eb 19                	jmp    c0021941 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021928:	50                   	push   eax
c0021929:	55                   	push   ebp
c002192a:	57                   	push   edi
c002192b:	56                   	push   esi
c002192c:	53                   	push   ebx
c002192d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021931:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021935:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021939:	e8 aa fd ff ff       	call   c00216e8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002193e:	83 c4 20             	add    esp,0x20
c0021941:	83 c4 1c             	add    esp,0x1c
c0021944:	5b                   	pop    ebx
c0021945:	5e                   	pop    esi
c0021946:	5f                   	pop    edi
c0021947:	5d                   	pop    ebp
c0021948:	c3                   	ret    
c0021949:	90                   	nop

c002194a <ISO9660::open(char const*, void**, FileOpenMode)>:
c002194a:	57                   	push   edi
c002194b:	56                   	push   esi
c002194c:	53                   	push   ebx
c002194d:	83 ec 10             	sub    esp,0x10
c0021950:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021954:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021958:	85 ff                	test   edi,edi
c002195a:	0f 84 8b 00 00 00    	je     c00219eb <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021960:	85 f6                	test   esi,esi
c0021962:	0f 84 83 00 00 00    	je     c00219eb <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021968:	b8 03 00 00 00       	mov    eax,0x3
c002196d:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021972:	75 7c                	jne    c00219f0 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021974:	83 ec 0c             	sub    esp,0xc
c0021977:	6a 1c                	push   0x1c
c0021979:	e8 1b dc fe ff       	call   c000f599 <malloc>
c002197e:	89 07                	mov    DWORD PTR [edi],eax
c0021980:	89 c3                	mov    ebx,eax
c0021982:	58                   	pop    eax
c0021983:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021987:	50                   	push   eax
c0021988:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002198b:	50                   	push   eax
c002198c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021990:	50                   	push   eax
c0021991:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021995:	50                   	push   eax
c0021996:	56                   	push   esi
c0021997:	e8 1f ff ff ff       	call   c00218bb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002199c:	83 c4 20             	add    esp,0x20
c002199f:	84 c0                	test   al,al
c00219a1:	74 07                	je     c00219aa <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c00219a3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00219a8:	74 0b                	je     c00219b5 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c00219aa:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00219ae:	b8 01 00 00 00       	mov    eax,0x1
c00219b3:	eb 3b                	jmp    c00219f0 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00219b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219b9:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00219bd:	89 03                	mov    DWORD PTR [ebx],eax
c00219bf:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00219c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219ca:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00219d1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00219d8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00219db:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00219e2:	8a 06                	mov    al,BYTE PTR [esi]
c00219e4:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00219e7:	31 c0                	xor    eax,eax
c00219e9:	eb 05                	jmp    c00219f0 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00219eb:	b8 04 00 00 00       	mov    eax,0x4
c00219f0:	83 c4 10             	add    esp,0x10
c00219f3:	5b                   	pop    ebx
c00219f4:	5e                   	pop    esi
c00219f5:	5f                   	pop    edi
c00219f6:	c3                   	ret    
c00219f7:	90                   	nop

c00219f8 <ISO9660::exists(char const*)>:
c00219f8:	83 ec 28             	sub    esp,0x28
c00219fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00219ff:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021a03:	52                   	push   edx
c0021a04:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021a07:	52                   	push   edx
c0021a08:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021a0c:	52                   	push   edx
c0021a0d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021a11:	52                   	push   edx
c0021a12:	50                   	push   eax
c0021a13:	e8 a3 fe ff ff       	call   c00218bb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021a18:	83 c4 3c             	add    esp,0x3c
c0021a1b:	c3                   	ret    

c0021a1c <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021a1c:	56                   	push   esi
c0021a1d:	53                   	push   ebx
c0021a1e:	83 ec 14             	sub    esp,0x14
c0021a21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021a25:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021a29:	85 db                	test   ebx,ebx
c0021a2b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021a2f:	0f 94 c2             	sete   dl
c0021a32:	85 f6                	test   esi,esi
c0021a34:	0f 94 c0             	sete   al
c0021a37:	08 c2                	or     dl,al
c0021a39:	75 68                	jne    c0021aa3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021a3b:	85 c9                	test   ecx,ecx
c0021a3d:	74 64                	je     c0021aa3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021a3f:	83 ec 0c             	sub    esp,0xc
c0021a42:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021a45:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021a49:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021a4f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a56:	50                   	push   eax
c0021a57:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021a5a:	50                   	push   eax
c0021a5b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a5f:	50                   	push   eax
c0021a60:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a64:	50                   	push   eax
c0021a65:	51                   	push   ecx
c0021a66:	e8 50 fe ff ff       	call   c00218bb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021a6b:	83 c4 20             	add    esp,0x20
c0021a6e:	ba 01 00 00 00       	mov    edx,0x1
c0021a73:	84 c0                	test   al,al
c0021a75:	74 31                	je     c0021aa8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a7b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a82:	89 03                	mov    DWORD PTR [ebx],eax
c0021a84:	ba 00 00 00 00       	mov    edx,0x0
c0021a89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021a8d:	85 c0                	test   eax,eax
c0021a8f:	0f 95 06             	setne  BYTE PTR [esi]
c0021a92:	74 14                	je     c0021aa8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021a94:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021a9a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021aa1:	eb 05                	jmp    c0021aa8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021aa3:	ba 04 00 00 00       	mov    edx,0x4
c0021aa8:	83 c4 14             	add    esp,0x14
c0021aab:	89 d0                	mov    eax,edx
c0021aad:	5b                   	pop    ebx
c0021aae:	5e                   	pop    esi
c0021aaf:	c3                   	ret    

c0021ab0 <ISO9660::openDir(char const*, void**)>:
c0021ab0:	57                   	push   edi
c0021ab1:	56                   	push   esi
c0021ab2:	53                   	push   ebx
c0021ab3:	83 ec 10             	sub    esp,0x10
c0021ab6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021aba:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021abe:	85 ff                	test   edi,edi
c0021ac0:	74 7b                	je     c0021b3d <ISO9660::openDir(char const*, void**)+0x8d>
c0021ac2:	85 f6                	test   esi,esi
c0021ac4:	74 77                	je     c0021b3d <ISO9660::openDir(char const*, void**)+0x8d>
c0021ac6:	83 ec 0c             	sub    esp,0xc
c0021ac9:	6a 1c                	push   0x1c
c0021acb:	e8 c9 da fe ff       	call   c000f599 <malloc>
c0021ad0:	89 07                	mov    DWORD PTR [edi],eax
c0021ad2:	89 c3                	mov    ebx,eax
c0021ad4:	58                   	pop    eax
c0021ad5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021ad9:	50                   	push   eax
c0021ada:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021add:	50                   	push   eax
c0021ade:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021ae2:	50                   	push   eax
c0021ae3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021ae7:	50                   	push   eax
c0021ae8:	56                   	push   esi
c0021ae9:	e8 cd fd ff ff       	call   c00218bb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021aee:	83 c4 20             	add    esp,0x20
c0021af1:	84 c0                	test   al,al
c0021af3:	74 07                	je     c0021afc <ISO9660::openDir(char const*, void**)+0x4c>
c0021af5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021afa:	75 0b                	jne    c0021b07 <ISO9660::openDir(char const*, void**)+0x57>
c0021afc:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021b00:	b8 01 00 00 00       	mov    eax,0x1
c0021b05:	eb 3b                	jmp    c0021b42 <ISO9660::openDir(char const*, void**)+0x92>
c0021b07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b0b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021b0f:	89 03                	mov    DWORD PTR [ebx],eax
c0021b11:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021b18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021b1c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021b23:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021b2a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021b2d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021b34:	8a 06                	mov    al,BYTE PTR [esi]
c0021b36:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021b39:	31 c0                	xor    eax,eax
c0021b3b:	eb 05                	jmp    c0021b42 <ISO9660::openDir(char const*, void**)+0x92>
c0021b3d:	b8 04 00 00 00       	mov    eax,0x4
c0021b42:	83 c4 10             	add    esp,0x10
c0021b45:	5b                   	pop    ebx
c0021b46:	5e                   	pop    esi
c0021b47:	5f                   	pop    edi
c0021b48:	c3                   	ret    
c0021b49:	90                   	nop

c0021b4a <ISO9660::ISO9660()>:
c0021b4a:	83 ec 0c             	sub    esp,0xc
c0021b4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b51:	83 ec 0c             	sub    esp,0xc
c0021b54:	50                   	push   eax
c0021b55:	e8 80 0e ff ff       	call   c00129da <Filesystem::Filesystem()>
c0021b5a:	83 c4 10             	add    esp,0x10
c0021b5d:	ba 40 bf 02 c0       	mov    edx,0xc002bf40
c0021b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b66:	89 10                	mov    DWORD PTR [eax],edx
c0021b68:	90                   	nop
c0021b69:	83 c4 0c             	add    esp,0xc
c0021b6c:	c3                   	ret    
c0021b6d:	90                   	nop

c0021b6e <SoundChannel::SoundChannel(int, int, int, int)>:
c0021b6e:	83 ec 1c             	sub    esp,0x1c
c0021b71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b75:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021b79:	89 10                	mov    DWORD PTR [eax],edx
c0021b7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b7f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021b83:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021b86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b8a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021b8e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021b91:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021b96:	75 23                	jne    c0021bbb <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c0021b98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b9c:	8b 10                	mov    edx,DWORD PTR [eax]
c0021b9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ba2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ba5:	0f af c2             	imul   eax,edx
c0021ba8:	85 c0                	test   eax,eax
c0021baa:	79 03                	jns    c0021baf <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c0021bac:	83 c0 03             	add    eax,0x3
c0021baf:	c1 f8 02             	sar    eax,0x2
c0021bb2:	05 a0 0f 00 00       	add    eax,0xfa0
c0021bb7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021bbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bbf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021bc3:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021bc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bca:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021bd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bd5:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021bdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021be0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021be3:	c1 e0 02             	shl    eax,0x2
c0021be6:	83 ec 0c             	sub    esp,0xc
c0021be9:	50                   	push   eax
c0021bea:	e8 aa d9 fe ff       	call   c000f599 <malloc>
c0021bef:	83 c4 10             	add    esp,0x10
c0021bf2:	89 c2                	mov    edx,eax
c0021bf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bf8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021bfb:	83 ec 04             	sub    esp,0x4
c0021bfe:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021c02:	50                   	push   eax
c0021c03:	6a 01                	push   0x1
c0021c05:	6a 04                	push   0x4
c0021c07:	e8 59 6f fe ff       	call   c0008b65 <src_new>
c0021c0c:	83 c4 10             	add    esp,0x10
c0021c0f:	89 c2                	mov    edx,eax
c0021c11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c15:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021c18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c1c:	85 c0                	test   eax,eax
c0021c1e:	74 10                	je     c0021c30 <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c0021c20:	83 ec 0c             	sub    esp,0xc
c0021c23:	68 a0 bf 02 c0       	push   0xc002bfa0
c0021c28:	e8 0e 82 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c0021c2d:	83 c4 10             	add    esp,0x10
c0021c30:	a0 00 1d 03 c0       	mov    al,ds:0xc0031d00
c0021c35:	83 f0 01             	xor    eax,0x1
c0021c38:	84 c0                	test   al,al
c0021c3a:	74 57                	je     c0021c93 <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c0021c3c:	a1 bc bf 02 c0       	mov    eax,ds:0xc002bfbc
c0021c41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021c45:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021c4d:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021c55:	7f 35                	jg     c0021c8c <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c0021c57:	83 ec 0c             	sub    esp,0xc
c0021c5a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021c5e:	e8 dc 53 00 00       	call   c002703f <__floatsisf>
c0021c63:	83 c4 10             	add    esp,0x10
c0021c66:	8b 15 bc bf 02 c0    	mov    edx,DWORD PTR ds:0xc002bfbc
c0021c6c:	83 ec 08             	sub    esp,0x8
c0021c6f:	52                   	push   edx
c0021c70:	50                   	push   eax
c0021c71:	e8 db 4f 00 00       	call   c0026c51 <__mulsf3>
c0021c76:	83 c4 10             	add    esp,0x10
c0021c79:	89 c2                	mov    edx,eax
c0021c7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021c7f:	89 14 85 00 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce700],edx
c0021c86:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021c8a:	eb c1                	jmp    c0021c4d <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c0021c8c:	c6 05 00 1d 03 c0 01 	mov    BYTE PTR ds:0xc0031d00,0x1
c0021c93:	90                   	nop
c0021c94:	83 c4 1c             	add    esp,0x1c
c0021c97:	c3                   	ret    

c0021c98 <SoundChannel::~SoundChannel()>:
c0021c98:	83 ec 0c             	sub    esp,0xc
c0021c9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c9f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021ca2:	83 ec 0c             	sub    esp,0xc
c0021ca5:	50                   	push   eax
c0021ca6:	e8 fe d8 fe ff       	call   c000f5a9 <free>
c0021cab:	83 c4 10             	add    esp,0x10
c0021cae:	90                   	nop
c0021caf:	83 c4 0c             	add    esp,0xc
c0021cb2:	c3                   	ret    
c0021cb3:	90                   	nop

c0021cb4 <SoundChannel::getSampleRate()>:
c0021cb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0021cba:	c3                   	ret    
c0021cbb:	90                   	nop

c0021cbc <SoundChannel::getBits()>:
c0021cbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021cc3:	c3                   	ret    

c0021cc4 <SoundChannel::getBufferUsed()>:
c0021cc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cc8:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021ccb:	c3                   	ret    

c0021ccc <SoundChannel::getBufferSize()>:
c0021ccc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cd0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021cd3:	c3                   	ret    

c0021cd4 <SoundChannel::unbuffer(float*, int, int)>:
c0021cd4:	56                   	push   esi
c0021cd5:	53                   	push   ebx
c0021cd6:	83 ec 40             	sub    esp,0x40
c0021cd9:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021cdd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021ce0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021ce4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021ce7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021ceb:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021cef:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021cf3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021cf7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021cfb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021cff:	e8 3b 53 00 00       	call   c002703f <__floatsisf>
c0021d04:	5a                   	pop    edx
c0021d05:	89 c6                	mov    esi,eax
c0021d07:	ff 33                	push   DWORD PTR [ebx]
c0021d09:	e8 31 53 00 00       	call   c002703f <__floatsisf>
c0021d0e:	59                   	pop    ecx
c0021d0f:	5a                   	pop    edx
c0021d10:	50                   	push   eax
c0021d11:	56                   	push   esi
c0021d12:	e8 fd 50 00 00       	call   c0026e14 <__divsf3>
c0021d17:	89 04 24             	mov    DWORD PTR [esp],eax
c0021d1a:	e8 f0 65 00 00       	call   c002830f <__extendsfdf2>
c0021d1f:	59                   	pop    ecx
c0021d20:	5e                   	pop    esi
c0021d21:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021d25:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021d29:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021d31:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021d35:	50                   	push   eax
c0021d36:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021d39:	e8 1c 6a fe ff       	call   c000875a <src_process>
c0021d3e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021d42:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021d45:	83 c4 0c             	add    esp,0xc
c0021d48:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021d4b:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021d4e:	29 d0                	sub    eax,edx
c0021d50:	c1 e0 02             	shl    eax,0x2
c0021d53:	50                   	push   eax
c0021d54:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021d57:	50                   	push   eax
c0021d58:	51                   	push   ecx
c0021d59:	e8 2a e9 fd ff       	call   c0000688 <memmove>
c0021d5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021d62:	83 c4 44             	add    esp,0x44
c0021d65:	5b                   	pop    ebx
c0021d66:	5e                   	pop    esi
c0021d67:	c3                   	ret    

c0021d68 <SoundChannel::buffer16(short*, int)>:
c0021d68:	55                   	push   ebp
c0021d69:	57                   	push   edi
c0021d6a:	56                   	push   esi
c0021d6b:	53                   	push   ebx
c0021d6c:	83 ec 1c             	sub    esp,0x1c
c0021d6f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0021d73:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021d76:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021d79:	0f 84 d2 00 00 00    	je     c0021e51 <SoundChannel::buffer16(short*, int)+0xe9>
c0021d7f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021d83:	85 ed                	test   ebp,ebp
c0021d85:	0f 8e c6 00 00 00    	jle    c0021e51 <SoundChannel::buffer16(short*, int)+0xe9>
c0021d8b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021d8f:	bd 00 00 00 38       	mov    ebp,0x38000000
c0021d94:	83 ec 0c             	sub    esp,0xc
c0021d97:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0021d9a:	50                   	push   eax
c0021d9b:	e8 9f 52 00 00       	call   c002703f <__floatsisf>
c0021da0:	59                   	pop    ecx
c0021da1:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021da4:	5f                   	pop    edi
c0021da5:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021da8:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021dab:	55                   	push   ebp
c0021dac:	50                   	push   eax
c0021dad:	e8 9f 4e 00 00       	call   c0026c51 <__mulsf3>
c0021db2:	83 c4 10             	add    esp,0x10
c0021db5:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021db8:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021dbb:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021dbe:	0f 84 99 00 00 00    	je     c0021e5d <SoundChannel::buffer16(short*, int)+0xf5>
c0021dc4:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0021dc9:	74 78                	je     c0021e43 <SoundChannel::buffer16(short*, int)+0xdb>
c0021dcb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021dcf:	83 ec 0c             	sub    esp,0xc
c0021dd2:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0021dd6:	50                   	push   eax
c0021dd7:	e8 63 52 00 00       	call   c002703f <__floatsisf>
c0021ddc:	5f                   	pop    edi
c0021ddd:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021de0:	5a                   	pop    edx
c0021de1:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021de4:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021de7:	55                   	push   ebp
c0021de8:	50                   	push   eax
c0021de9:	e8 63 4e 00 00       	call   c0026c51 <__mulsf3>
c0021dee:	83 c4 10             	add    esp,0x10
c0021df1:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021df4:	be 02 00 00 00       	mov    esi,0x2
c0021df9:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021dfc:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021dff:	74 46                	je     c0021e47 <SoundChannel::buffer16(short*, int)+0xdf>
c0021e01:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0021e05:	eb 36                	jmp    c0021e3d <SoundChannel::buffer16(short*, int)+0xd5>
c0021e07:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021e0b:	83 ec 0c             	sub    esp,0xc
c0021e0e:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0021e12:	46                   	inc    esi
c0021e13:	50                   	push   eax
c0021e14:	e8 26 52 00 00       	call   c002703f <__floatsisf>
c0021e19:	5a                   	pop    edx
c0021e1a:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0021e1d:	59                   	pop    ecx
c0021e1e:	8d 4f 01             	lea    ecx,[edi+0x1]
c0021e21:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021e24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e28:	50                   	push   eax
c0021e29:	e8 23 4e 00 00       	call   c0026c51 <__mulsf3>
c0021e2e:	83 c4 10             	add    esp,0x10
c0021e31:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0021e35:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021e38:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021e3b:	74 0a                	je     c0021e47 <SoundChannel::buffer16(short*, int)+0xdf>
c0021e3d:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0021e41:	75 c4                	jne    c0021e07 <SoundChannel::buffer16(short*, int)+0x9f>
c0021e43:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0021e47:	83 c4 1c             	add    esp,0x1c
c0021e4a:	89 f0                	mov    eax,esi
c0021e4c:	5b                   	pop    ebx
c0021e4d:	5e                   	pop    esi
c0021e4e:	5f                   	pop    edi
c0021e4f:	5d                   	pop    ebp
c0021e50:	c3                   	ret    
c0021e51:	83 c4 1c             	add    esp,0x1c
c0021e54:	31 f6                	xor    esi,esi
c0021e56:	5b                   	pop    ebx
c0021e57:	89 f0                	mov    eax,esi
c0021e59:	5e                   	pop    esi
c0021e5a:	5f                   	pop    edi
c0021e5b:	5d                   	pop    ebp
c0021e5c:	c3                   	ret    
c0021e5d:	be 01 00 00 00       	mov    esi,0x1
c0021e62:	eb e3                	jmp    c0021e47 <SoundChannel::buffer16(short*, int)+0xdf>

c0021e64 <SoundChannel::buffer8(unsigned char*, int)>:
c0021e64:	55                   	push   ebp
c0021e65:	57                   	push   edi
c0021e66:	56                   	push   esi
c0021e67:	53                   	push   ebx
c0021e68:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e6c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021e70:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021e73:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021e77:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021e7a:	74 7a                	je     c0021ef6 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021e7c:	85 ff                	test   edi,edi
c0021e7e:	7e 76                	jle    c0021ef6 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021e80:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021e84:	8d 70 01             	lea    esi,[eax+0x1]
c0021e87:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021e8a:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021e8d:	8b 1c 9d 00 19 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce700]
c0021e94:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021e97:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021e9a:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021e9d:	74 5e                	je     c0021efd <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021e9f:	83 ff 01             	cmp    edi,0x1
c0021ea2:	74 4b                	je     c0021eef <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021ea4:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021ea8:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021eab:	8d 70 01             	lea    esi,[eax+0x1]
c0021eae:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021eb1:	8b 1c 9d 00 19 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce700]
c0021eb8:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021ebb:	b8 02 00 00 00       	mov    eax,0x2
c0021ec0:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021ec3:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021ec6:	75 23                	jne    c0021eeb <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021ec8:	eb 27                	jmp    c0021ef1 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021eca:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021ecf:	8d 71 01             	lea    esi,[ecx+0x1]
c0021ed2:	40                   	inc    eax
c0021ed3:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021ed6:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021ed9:	8b 1c 9d 00 19 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce700]
c0021ee0:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021ee3:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021ee6:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021ee9:	74 06                	je     c0021ef1 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021eeb:	39 c7                	cmp    edi,eax
c0021eed:	75 db                	jne    c0021eca <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021eef:	89 f8                	mov    eax,edi
c0021ef1:	5b                   	pop    ebx
c0021ef2:	5e                   	pop    esi
c0021ef3:	5f                   	pop    edi
c0021ef4:	5d                   	pop    ebp
c0021ef5:	c3                   	ret    
c0021ef6:	5b                   	pop    ebx
c0021ef7:	31 c0                	xor    eax,eax
c0021ef9:	5e                   	pop    esi
c0021efa:	5f                   	pop    edi
c0021efb:	5d                   	pop    ebp
c0021efc:	c3                   	ret    
c0021efd:	b8 01 00 00 00       	mov    eax,0x1
c0021f02:	eb ed                	jmp    c0021ef1 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021f04 <SoundDevice::SoundDevice(char const*)>:
c0021f04:	83 ec 1c             	sub    esp,0x1c
c0021f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f0b:	83 ec 08             	sub    esp,0x8
c0021f0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021f12:	50                   	push   eax
c0021f13:	e8 f4 1d ff ff       	call   c0013d0c <Device::Device(char const*)>
c0021f18:	83 c4 10             	add    esp,0x10
c0021f1b:	ba c8 bf 02 c0       	mov    edx,0xc002bfc8
c0021f20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f24:	89 10                	mov    DWORD PTR [eax],edx
c0021f26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f2a:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021f34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f38:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0021f42:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f4a:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021f4f:	7f 19                	jg     c0021f6a <SoundDevice::SoundDevice(char const*)+0x66>
c0021f51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f55:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021f59:	83 c2 54             	add    edx,0x54
c0021f5c:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0021f64:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021f68:	eb e0                	jmp    c0021f4a <SoundDevice::SoundDevice(char const*)+0x46>
c0021f6a:	90                   	nop
c0021f6b:	83 c4 1c             	add    esp,0x1c
c0021f6e:	c3                   	ret    
c0021f6f:	90                   	nop

c0021f70 <SoundDevice::~SoundDevice()>:
c0021f70:	53                   	push   ebx
c0021f71:	83 ec 18             	sub    esp,0x18
c0021f74:	ba c8 bf 02 c0       	mov    edx,0xc002bfc8
c0021f79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f7d:	89 10                	mov    DWORD PTR [eax],edx
c0021f7f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f87:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021f8c:	7f 46                	jg     c0021fd4 <SoundDevice::~SoundDevice()+0x64>
c0021f8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f92:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021f96:	83 c2 54             	add    edx,0x54
c0021f99:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021f9d:	85 c0                	test   eax,eax
c0021f9f:	74 2d                	je     c0021fce <SoundDevice::~SoundDevice()+0x5e>
c0021fa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fa5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021fa9:	83 c2 54             	add    edx,0x54
c0021fac:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0021fb0:	85 db                	test   ebx,ebx
c0021fb2:	74 1a                	je     c0021fce <SoundDevice::~SoundDevice()+0x5e>
c0021fb4:	83 ec 0c             	sub    esp,0xc
c0021fb7:	53                   	push   ebx
c0021fb8:	e8 db fc ff ff       	call   c0021c98 <SoundChannel::~SoundChannel()>
c0021fbd:	83 c4 10             	add    esp,0x10
c0021fc0:	83 ec 08             	sub    esp,0x8
c0021fc3:	6a 2c                	push   0x2c
c0021fc5:	53                   	push   ebx
c0021fc6:	e8 2c 06 ff ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0021fcb:	83 c4 10             	add    esp,0x10
c0021fce:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021fd2:	eb b3                	jmp    c0021f87 <SoundDevice::~SoundDevice()+0x17>
c0021fd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fd8:	83 ec 0c             	sub    esp,0xc
c0021fdb:	50                   	push   eax
c0021fdc:	e8 f5 19 ff ff       	call   c00139d6 <Device::~Device()>
c0021fe1:	83 c4 10             	add    esp,0x10
c0021fe4:	90                   	nop
c0021fe5:	83 c4 18             	add    esp,0x18
c0021fe8:	5b                   	pop    ebx
c0021fe9:	c3                   	ret    

c0021fea <SoundDevice::~SoundDevice()>:
c0021fea:	83 ec 0c             	sub    esp,0xc
c0021fed:	83 ec 0c             	sub    esp,0xc
c0021ff0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ff4:	e8 77 ff ff ff       	call   c0021f70 <SoundDevice::~SoundDevice()>
c0021ff9:	83 c4 10             	add    esp,0x10
c0021ffc:	83 ec 08             	sub    esp,0x8
c0021fff:	68 e4 01 00 00       	push   0x1e4
c0022004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022008:	e8 ea 05 ff ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c002200d:	83 c4 10             	add    esp,0x10
c0022010:	83 c4 0c             	add    esp,0xc
c0022013:	c3                   	ret    

c0022014 <SoundDevice::getFreeChannelNum()>:
c0022014:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022018:	31 c0                	xor    eax,eax
c002201a:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022022:	74 09                	je     c002202d <SoundDevice::getFreeChannelNum()+0x19>
c0022024:	40                   	inc    eax
c0022025:	83 f8 20             	cmp    eax,0x20
c0022028:	75 f0                	jne    c002201a <SoundDevice::getFreeChannelNum()+0x6>
c002202a:	83 c8 ff             	or     eax,0xffffffff
c002202d:	c3                   	ret    

c002202e <SoundDevice::addChannel(SoundChannel*)>:
c002202e:	56                   	push   esi
c002202f:	53                   	push   ebx
c0022030:	51                   	push   ecx
c0022031:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022035:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022039:	53                   	push   ebx
c002203a:	e8 d5 ff ff ff       	call   c0022014 <SoundDevice::getFreeChannelNum()>
c002203f:	5a                   	pop    edx
c0022040:	83 f8 ff             	cmp    eax,0xffffffff
c0022043:	74 51                	je     c0022096 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022045:	85 f6                	test   esi,esi
c0022047:	74 4d                	je     c0022096 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022049:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022050:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022057:	75 30                	jne    c0022089 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022059:	83 ec 0c             	sub    esp,0xc
c002205c:	56                   	push   esi
c002205d:	e8 52 fc ff ff       	call   c0021cb4 <SoundChannel::getSampleRate()>
c0022062:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022068:	89 34 24             	mov    DWORD PTR [esp],esi
c002206b:	e8 4c fc ff ff       	call   c0021cbc <SoundChannel::getBits()>
c0022070:	83 c4 0c             	add    esp,0xc
c0022073:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022079:	8b 13                	mov    edx,DWORD PTR [ebx]
c002207b:	50                   	push   eax
c002207c:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022082:	53                   	push   ebx
c0022083:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0022086:	83 c4 10             	add    esp,0x10
c0022089:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c002208f:	b8 01 00 00 00       	mov    eax,0x1
c0022094:	eb 03                	jmp    c0022099 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022096:	83 c8 ff             	or     eax,0xffffffff
c0022099:	5a                   	pop    edx
c002209a:	5b                   	pop    ebx
c002209b:	5e                   	pop    esi
c002209c:	c3                   	ret    
c002209d:	90                   	nop

c002209e <SoundDevice::removeChannel(int)>:
c002209e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00220a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220a6:	83 fa 1f             	cmp    edx,0x1f
c00220a9:	77 23                	ja     c00220ce <SoundDevice::removeChannel(int)+0x30>
c00220ab:	8d 14 90             	lea    edx,[eax+edx*4]
c00220ae:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00220b5:	74 17                	je     c00220ce <SoundDevice::removeChannel(int)+0x30>
c00220b7:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00220c1:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00220c7:	75 05                	jne    c00220ce <SoundDevice::removeChannel(int)+0x30>
c00220c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00220cb:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c00220ce:	c3                   	ret    
c00220cf:	90                   	nop

c00220d0 <SoundDevice::floatTo16(float*, short*, int)>:
c00220d0:	57                   	push   edi
c00220d1:	56                   	push   esi
c00220d2:	53                   	push   ebx
c00220d3:	31 db                	xor    ebx,ebx
c00220d5:	83 ec 10             	sub    esp,0x10
c00220d8:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00220dc:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00220e0:	0f 8d d0 00 00 00    	jge    c00221b6 <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c00220e6:	83 ec 0c             	sub    esp,0xc
c00220e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00220ed:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00220f0:	e8 1a 62 00 00       	call   c002830f <__extendsfdf2>
c00220f5:	83 c4 10             	add    esp,0x10
c00220f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00220fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022100:	68 00 00 f0 3f       	push   0x3ff00000
c0022105:	6a 00                	push   0x0
c0022107:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002210b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002210f:	e8 87 51 00 00       	call   c002729b <__adddf3>
c0022114:	83 c4 10             	add    esp,0x10
c0022117:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002211b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002211f:	68 00 00 e0 3f       	push   0x3fe00000
c0022124:	6a 00                	push   0x0
c0022126:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002212a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002212e:	e8 e5 57 00 00       	call   c0027918 <__muldf3>
c0022133:	83 c4 10             	add    esp,0x10
c0022136:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002213a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002213e:	68 c0 ff df 40       	push   0x40dfffc0
c0022143:	6a 00                	push   0x0
c0022145:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022149:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002214d:	e8 c6 57 00 00       	call   c0027918 <__muldf3>
c0022152:	59                   	pop    ecx
c0022153:	5f                   	pop    edi
c0022154:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022158:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002215c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022160:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022164:	e8 82 60 00 00       	call   c00281eb <__truncdfsf2>
c0022169:	5a                   	pop    edx
c002216a:	89 c7                	mov    edi,eax
c002216c:	59                   	pop    ecx
c002216d:	68 00 fe ff 46       	push   0x46fffe00
c0022172:	50                   	push   eax
c0022173:	e8 1d 51 00 00       	call   c0027295 <__gesf2>
c0022178:	83 c4 10             	add    esp,0x10
c002217b:	85 c0                	test   eax,eax
c002217d:	78 08                	js     c0022187 <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c002217f:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0022185:	eb 29                	jmp    c00221b0 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022187:	50                   	push   eax
c0022188:	50                   	push   eax
c0022189:	6a 00                	push   0x0
c002218b:	57                   	push   edi
c002218c:	e8 08 51 00 00       	call   c0027299 <__lesf2>
c0022191:	83 c4 10             	add    esp,0x10
c0022194:	85 c0                	test   eax,eax
c0022196:	7f 08                	jg     c00221a0 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c0022198:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c002219e:	eb 10                	jmp    c00221b0 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c00221a0:	83 ec 0c             	sub    esp,0xc
c00221a3:	57                   	push   edi
c00221a4:	e8 03 62 00 00       	call   c00283ac <lrintf>
c00221a9:	83 c4 10             	add    esp,0x10
c00221ac:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c00221b0:	43                   	inc    ebx
c00221b1:	e9 26 ff ff ff       	jmp    c00220dc <SoundDevice::floatTo16(float*, short*, int)+0xc>
c00221b6:	83 c4 10             	add    esp,0x10
c00221b9:	5b                   	pop    ebx
c00221ba:	5e                   	pop    esi
c00221bb:	5f                   	pop    edi
c00221bc:	c3                   	ret    
c00221bd:	90                   	nop

c00221be <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00221be:	57                   	push   edi
c00221bf:	56                   	push   esi
c00221c0:	53                   	push   ebx
c00221c1:	31 db                	xor    ebx,ebx
c00221c3:	83 ec 10             	sub    esp,0x10
c00221c6:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00221ca:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00221ce:	0f 8d cb 00 00 00    	jge    c002229f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00221d4:	83 ec 0c             	sub    esp,0xc
c00221d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00221db:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00221de:	e8 2c 61 00 00       	call   c002830f <__extendsfdf2>
c00221e3:	83 c4 10             	add    esp,0x10
c00221e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00221ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00221ee:	68 00 00 f0 3f       	push   0x3ff00000
c00221f3:	6a 00                	push   0x0
c00221f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221fd:	e8 99 50 00 00       	call   c002729b <__adddf3>
c0022202:	83 c4 10             	add    esp,0x10
c0022205:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022209:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002220d:	68 00 00 e0 3f       	push   0x3fe00000
c0022212:	6a 00                	push   0x0
c0022214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002221c:	e8 f7 56 00 00       	call   c0027918 <__muldf3>
c0022221:	83 c4 10             	add    esp,0x10
c0022224:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022228:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002222c:	68 00 00 60 40       	push   0x40600000
c0022231:	6a 00                	push   0x0
c0022233:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022237:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002223b:	e8 d8 56 00 00       	call   c0027918 <__muldf3>
c0022240:	59                   	pop    ecx
c0022241:	5f                   	pop    edi
c0022242:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022246:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002224a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002224e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022252:	e8 94 5f 00 00       	call   c00281eb <__truncdfsf2>
c0022257:	5a                   	pop    edx
c0022258:	89 c7                	mov    edi,eax
c002225a:	59                   	pop    ecx
c002225b:	68 00 00 fe 42       	push   0x42fe0000
c0022260:	50                   	push   eax
c0022261:	e8 2f 50 00 00       	call   c0027295 <__gesf2>
c0022266:	83 c4 10             	add    esp,0x10
c0022269:	85 c0                	test   eax,eax
c002226b:	78 06                	js     c0022273 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c002226d:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022271:	eb 26                	jmp    c0022299 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022273:	50                   	push   eax
c0022274:	50                   	push   eax
c0022275:	6a 00                	push   0x0
c0022277:	57                   	push   edi
c0022278:	e8 1c 50 00 00       	call   c0027299 <__lesf2>
c002227d:	83 c4 10             	add    esp,0x10
c0022280:	85 c0                	test   eax,eax
c0022282:	7f 06                	jg     c002228a <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022284:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022288:	eb 0f                	jmp    c0022299 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002228a:	83 ec 0c             	sub    esp,0xc
c002228d:	57                   	push   edi
c002228e:	e8 19 61 00 00       	call   c00283ac <lrintf>
c0022293:	83 c4 10             	add    esp,0x10
c0022296:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022299:	43                   	inc    ebx
c002229a:	e9 2b ff ff ff       	jmp    c00221ca <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002229f:	83 c4 10             	add    esp,0x10
c00222a2:	5b                   	pop    ebx
c00222a3:	5e                   	pop    esi
c00222a4:	5f                   	pop    edi
c00222a5:	c3                   	ret    

c00222a6 <SoundDevice::getAudio(int, float*, float*)>:
c00222a6:	55                   	push   ebp
c00222a7:	31 ed                	xor    ebp,ebp
c00222a9:	57                   	push   edi
c00222aa:	56                   	push   esi
c00222ab:	31 f6                	xor    esi,esi
c00222ad:	53                   	push   ebx
c00222ae:	83 ec 20             	sub    esp,0x20
c00222b1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00222b5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00222b9:	c1 e0 02             	shl    eax,0x2
c00222bc:	50                   	push   eax
c00222bd:	6a 00                	push   0x0
c00222bf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00222c3:	e8 88 e4 fd ff       	call   c0000750 <memset>
c00222c8:	83 c4 10             	add    esp,0x10
c00222cb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00222d3:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c00222da:	85 c9                	test   ecx,ecx
c00222dc:	74 52                	je     c0022330 <SoundDevice::getAudio(int, float*, float*)+0x8a>
c00222de:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00222e2:	99                   	cdq    
c00222e3:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c00222e9:	50                   	push   eax
c00222ea:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00222f0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00222f4:	51                   	push   ecx
c00222f5:	e8 da f9 ff ff       	call   c0021cd4 <SoundChannel::unbuffer(float*, int, int)>
c00222fa:	31 d2                	xor    edx,edx
c00222fc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022300:	83 c4 10             	add    esp,0x10
c0022303:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022307:	7d 1e                	jge    c0022327 <SoundDevice::getAudio(int, float*, float*)+0x81>
c0022309:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c002230d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022311:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0022314:	89 cf                	mov    edi,ecx
c0022316:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c002231c:	0f af ca             	imul   ecx,edx
c002231f:	42                   	inc    edx
c0022320:	01 e9                	add    ecx,ebp
c0022322:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c0022325:	eb dc                	jmp    c0022303 <SoundDevice::getAudio(int, float*, float*)+0x5d>
c0022327:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c002232b:	45                   	inc    ebp
c002232c:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c0022330:	46                   	inc    esi
c0022331:	83 fe 20             	cmp    esi,0x20
c0022334:	75 9d                	jne    c00222d3 <SoundDevice::getAudio(int, float*, float*)+0x2d>
c0022336:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002233a:	83 c4 1c             	add    esp,0x1c
c002233d:	5b                   	pop    ebx
c002233e:	5e                   	pop    esi
c002233f:	5f                   	pop    edi
c0022340:	5d                   	pop    ebp
c0022341:	c3                   	ret    

c0022342 <PCI::open(int, int, void*)>:
c0022342:	83 ec 18             	sub    esp,0x18
c0022345:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022349:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002234d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022353:	8b 10                	mov    edx,DWORD PTR [eax]
c0022355:	50                   	push   eax
c0022356:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022359:	31 c0                	xor    eax,eax
c002235b:	83 c4 1c             	add    esp,0x1c
c002235e:	c3                   	ret    
c002235f:	90                   	nop

c0022360 <PCI::close(int, int, void*)>:
c0022360:	31 c0                	xor    eax,eax
c0022362:	c3                   	ret    
c0022363:	90                   	nop

c0022364 <PCI::PCI()>:
c0022364:	83 ec 0c             	sub    esp,0xc
c0022367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002236b:	83 ec 08             	sub    esp,0x8
c002236e:	68 f8 bf 02 c0       	push   0xc002bff8
c0022373:	50                   	push   eax
c0022374:	e8 f7 0f ff ff       	call   c0013370 <Bus::Bus(char const*)>
c0022379:	83 c4 10             	add    esp,0x10
c002237c:	ba e4 c0 02 c0       	mov    edx,0xc002c0e4
c0022381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022385:	89 10                	mov    DWORD PTR [eax],edx
c0022387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002238b:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0022395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022399:	a3 04 1d 03 c0       	mov    ds:0xc0031d04,eax
c002239e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223a2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00223a8:	0f b6 d0             	movzx  edx,al
c00223ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223af:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00223b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223ba:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00223c0:	0f b6 d0             	movzx  edx,al
c00223c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223c7:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00223cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223d0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00223d6:	8d 50 01             	lea    edx,[eax+0x1]
c00223d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00223dd:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00223e3:	0f b6 d0             	movzx  edx,al
c00223e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223ea:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00223ee:	83 c9 c0             	or     ecx,0xffffffc0
c00223f1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00223f5:	90                   	nop
c00223f6:	83 c4 0c             	add    esp,0xc
c00223f9:	c3                   	ret    

c00223fa <PCI::readBAR8(unsigned int, int)>:
c00223fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00223fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022402:	f6 c2 01             	test   dl,0x1
c0022405:	74 07                	je     c002240e <PCI::readBAR8(unsigned int, int)+0x14>
c0022407:	83 e2 fc             	and    edx,0xfffffffc
c002240a:	01 c2                	add    edx,eax
c002240c:	ec                   	in     al,dx
c002240d:	c3                   	ret    
c002240e:	83 e2 f0             	and    edx,0xfffffff0
c0022411:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0022414:	c3                   	ret    
c0022415:	90                   	nop

c0022416 <PCI::readBAR16(unsigned int, int)>:
c0022416:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002241a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002241e:	f6 c2 01             	test   dl,0x1
c0022421:	74 08                	je     c002242b <PCI::readBAR16(unsigned int, int)+0x15>
c0022423:	83 e2 fc             	and    edx,0xfffffffc
c0022426:	01 c2                	add    edx,eax
c0022428:	66 ed                	in     ax,dx
c002242a:	c3                   	ret    
c002242b:	83 e2 f0             	and    edx,0xfffffff0
c002242e:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0022432:	c3                   	ret    
c0022433:	90                   	nop

c0022434 <PCI::readBAR32(unsigned int, int)>:
c0022434:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002243c:	f6 c2 01             	test   dl,0x1
c002243f:	74 07                	je     c0022448 <PCI::readBAR32(unsigned int, int)+0x14>
c0022441:	83 e2 fc             	and    edx,0xfffffffc
c0022444:	01 c2                	add    edx,eax
c0022446:	ed                   	in     eax,dx
c0022447:	c3                   	ret    
c0022448:	83 e2 f0             	and    edx,0xfffffff0
c002244b:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c002244e:	c3                   	ret    
c002244f:	90                   	nop

c0022450 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0022450:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022454:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022458:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002245c:	f6 c2 01             	test   dl,0x1
c002245f:	74 07                	je     c0022468 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0022461:	83 e2 fc             	and    edx,0xfffffffc
c0022464:	01 ca                	add    edx,ecx
c0022466:	ee                   	out    dx,al
c0022467:	c3                   	ret    
c0022468:	83 e2 f0             	and    edx,0xfffffff0
c002246b:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c002246e:	c3                   	ret    
c002246f:	90                   	nop

c0022470 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0022470:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022474:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022478:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002247c:	f6 c2 01             	test   dl,0x1
c002247f:	74 08                	je     c0022489 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0022481:	83 e2 fc             	and    edx,0xfffffffc
c0022484:	01 ca                	add    edx,ecx
c0022486:	66 ef                	out    dx,ax
c0022488:	c3                   	ret    
c0022489:	83 e2 f0             	and    edx,0xfffffff0
c002248c:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0022490:	c3                   	ret    
c0022491:	90                   	nop

c0022492 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0022492:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022496:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002249a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002249e:	f6 c2 01             	test   dl,0x1
c00224a1:	74 07                	je     c00224aa <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00224a3:	83 e2 fc             	and    edx,0xfffffffc
c00224a6:	01 ca                	add    edx,ecx
c00224a8:	ef                   	out    dx,eax
c00224a9:	c3                   	ret    
c00224aa:	83 e2 f0             	and    edx,0xfffffff0
c00224ad:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00224b0:	c3                   	ret    
c00224b1:	90                   	nop

c00224b2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00224b2:	55                   	push   ebp
c00224b3:	57                   	push   edi
c00224b4:	56                   	push   esi
c00224b5:	53                   	push   ebx
c00224b6:	83 ec 0c             	sub    esp,0xc
c00224b9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00224bd:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00224c1:	89 f0                	mov    eax,esi
c00224c3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00224c7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00224cb:	3c 07                	cmp    al,0x7
c00224cd:	76 10                	jbe    c00224df <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00224cf:	83 ec 0c             	sub    esp,0xc
c00224d2:	68 00 c0 02 c0       	push   0xc002c000
c00224d7:	e8 5f 79 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c00224dc:	83 c4 10             	add    esp,0x10
c00224df:	80 fb 0f             	cmp    bl,0xf
c00224e2:	76 10                	jbe    c00224f4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00224e4:	83 ec 0c             	sub    esp,0xc
c00224e7:	68 30 c0 02 c0       	push   0xc002c030
c00224ec:	e8 4a 79 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c00224f1:	83 c4 10             	add    esp,0x10
c00224f4:	8d 04 36             	lea    eax,[esi+esi*1]
c00224f7:	ba f8 0c 00 00       	mov    edx,0xcf8
c00224fc:	83 c8 f0             	or     eax,0xfffffff0
c00224ff:	ee                   	out    dx,al
c0022500:	ba fa 0c 00 00       	mov    edx,0xcfa
c0022505:	89 e8                	mov    eax,ebp
c0022507:	ee                   	out    dx,al
c0022508:	83 c4 0c             	add    esp,0xc
c002250b:	89 d8                	mov    eax,ebx
c002250d:	66 81 e7 fc 00       	and    di,0xfc
c0022512:	5b                   	pop    ebx
c0022513:	c1 e0 08             	shl    eax,0x8
c0022516:	5e                   	pop    esi
c0022517:	09 f8                	or     eax,edi
c0022519:	5f                   	pop    edi
c002251a:	66 0d 00 c0          	or     ax,0xc000
c002251e:	5d                   	pop    ebp
c002251f:	c3                   	ret    

c0022520 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022520:	57                   	push   edi
c0022521:	56                   	push   esi
c0022522:	53                   	push   ebx
c0022523:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022527:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002252b:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0022531:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022535:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022539:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002253d:	83 ff 01             	cmp    edi,0x1
c0022540:	75 3e                	jne    c0022580 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0022542:	89 de                	mov    esi,ebx
c0022544:	0f b6 c0             	movzx  eax,al
c0022547:	81 e6 fc 00 00 00    	and    esi,0xfc
c002254d:	c1 e0 10             	shl    eax,0x10
c0022550:	0f b6 c9             	movzx  ecx,cl
c0022553:	09 f0                	or     eax,esi
c0022555:	c1 e1 08             	shl    ecx,0x8
c0022558:	0f b6 d2             	movzx  edx,dl
c002255b:	09 c8                	or     eax,ecx
c002255d:	c1 e2 0b             	shl    edx,0xb
c0022560:	09 d0                	or     eax,edx
c0022562:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022567:	0d 00 00 00 80       	or     eax,0x80000000
c002256c:	ef                   	out    dx,eax
c002256d:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022572:	ed                   	in     eax,dx
c0022573:	83 e3 02             	and    ebx,0x2
c0022576:	0f b6 cb             	movzx  ecx,bl
c0022579:	c1 e1 03             	shl    ecx,0x3
c002257c:	d3 e8                	shr    eax,cl
c002257e:	eb 43                	jmp    c00225c3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022580:	83 ff 02             	cmp    edi,0x2
c0022583:	75 2c                	jne    c00225b1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0022585:	83 ec 0c             	sub    esp,0xc
c0022588:	0f b6 c9             	movzx  ecx,cl
c002258b:	0f b6 d2             	movzx  edx,dl
c002258e:	0f b6 fb             	movzx  edi,bl
c0022591:	0f b6 c0             	movzx  eax,al
c0022594:	57                   	push   edi
c0022595:	51                   	push   ecx
c0022596:	52                   	push   edx
c0022597:	50                   	push   eax
c0022598:	56                   	push   esi
c0022599:	e8 14 ff ff ff       	call   c00224b2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002259e:	89 c2                	mov    edx,eax
c00225a0:	ed                   	in     eax,dx
c00225a1:	83 e3 02             	and    ebx,0x2
c00225a4:	83 c4 20             	add    esp,0x20
c00225a7:	0f b6 cb             	movzx  ecx,bl
c00225aa:	c1 e1 03             	shl    ecx,0x3
c00225ad:	d3 e8                	shr    eax,cl
c00225af:	eb 12                	jmp    c00225c3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00225b1:	83 ec 0c             	sub    esp,0xc
c00225b4:	68 60 c0 02 c0       	push   0xc002c060
c00225b9:	e8 7d 78 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c00225be:	83 c4 10             	add    esp,0x10
c00225c1:	31 c0                	xor    eax,eax
c00225c3:	5b                   	pop    ebx
c00225c4:	5e                   	pop    esi
c00225c5:	5f                   	pop    edi
c00225c6:	c3                   	ret    
c00225c7:	90                   	nop

c00225c8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00225c8:	83 ec 18             	sub    esp,0x18
c00225cb:	6a 00                	push   0x0
c00225cd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225d2:	50                   	push   eax
c00225d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225d8:	50                   	push   eax
c00225d9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225de:	50                   	push   eax
c00225df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00225e3:	e8 38 ff ff ff       	call   c0022520 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225e8:	83 c4 2c             	add    esp,0x2c
c00225eb:	c3                   	ret    

c00225ec <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00225ec:	83 ec 18             	sub    esp,0x18
c00225ef:	6a 0e                	push   0xe
c00225f1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225f6:	50                   	push   eax
c00225f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225fc:	50                   	push   eax
c00225fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022602:	50                   	push   eax
c0022603:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022607:	e8 14 ff ff ff       	call   c0022520 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002260c:	83 c4 2c             	add    esp,0x2c
c002260f:	0f b6 c0             	movzx  eax,al
c0022612:	c3                   	ret    
c0022613:	90                   	nop

c0022614 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022614:	55                   	push   ebp
c0022615:	57                   	push   edi
c0022616:	56                   	push   esi
c0022617:	53                   	push   ebx
c0022618:	83 ec 18             	sub    esp,0x18
c002261b:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0022620:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0022625:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c002262a:	6a 0a                	push   0xa
c002262c:	56                   	push   esi
c002262d:	55                   	push   ebp
c002262e:	57                   	push   edi
c002262f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022633:	e8 e8 fe ff ff       	call   c0022520 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022638:	83 c4 14             	add    esp,0x14
c002263b:	89 c3                	mov    ebx,eax
c002263d:	6a 0a                	push   0xa
c002263f:	0f b6 db             	movzx  ebx,bl
c0022642:	56                   	push   esi
c0022643:	55                   	push   ebp
c0022644:	57                   	push   edi
c0022645:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022649:	e8 d2 fe ff ff       	call   c0022520 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002264e:	83 c4 2c             	add    esp,0x2c
c0022651:	25 00 ff 00 00       	and    eax,0xff00
c0022656:	09 d8                	or     eax,ebx
c0022658:	5b                   	pop    ebx
c0022659:	5e                   	pop    esi
c002265a:	5f                   	pop    edi
c002265b:	5d                   	pop    ebp
c002265c:	c3                   	ret    
c002265d:	90                   	nop

c002265e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002265e:	83 ec 18             	sub    esp,0x18
c0022661:	6a 08                	push   0x8
c0022663:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022668:	50                   	push   eax
c0022669:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002266e:	50                   	push   eax
c002266f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022674:	50                   	push   eax
c0022675:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022679:	e8 a2 fe ff ff       	call   c0022520 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002267e:	83 c4 2c             	add    esp,0x2c
c0022681:	0f b6 c4             	movzx  eax,ah
c0022684:	c3                   	ret    
c0022685:	90                   	nop

c0022686 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022686:	83 ec 18             	sub    esp,0x18
c0022689:	6a 08                	push   0x8
c002268b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022690:	50                   	push   eax
c0022691:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022696:	50                   	push   eax
c0022697:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002269c:	50                   	push   eax
c002269d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00226a1:	e8 7a fe ff ff       	call   c0022520 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226a6:	83 c4 2c             	add    esp,0x2c
c00226a9:	c3                   	ret    

c00226aa <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00226aa:	83 ec 18             	sub    esp,0x18
c00226ad:	6a 3c                	push   0x3c
c00226af:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226b4:	50                   	push   eax
c00226b5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226ba:	50                   	push   eax
c00226bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226c0:	50                   	push   eax
c00226c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00226c5:	e8 56 fe ff ff       	call   c0022520 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226ca:	83 c4 2c             	add    esp,0x2c
c00226cd:	c3                   	ret    

c00226ce <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00226ce:	83 ec 18             	sub    esp,0x18
c00226d1:	6a 18                	push   0x18
c00226d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226d8:	50                   	push   eax
c00226d9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226de:	50                   	push   eax
c00226df:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226e4:	50                   	push   eax
c00226e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00226e9:	e8 32 fe ff ff       	call   c0022520 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226ee:	83 c4 2c             	add    esp,0x2c
c00226f1:	0f b6 c4             	movzx  eax,ah
c00226f4:	c3                   	ret    
c00226f5:	90                   	nop

c00226f6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00226f6:	55                   	push   ebp
c00226f7:	57                   	push   edi
c00226f8:	56                   	push   esi
c00226f9:	53                   	push   ebx
c00226fa:	83 ec 28             	sub    esp,0x28
c00226fd:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0022701:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0022706:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c002270b:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0022710:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022717:	8d 43 12             	lea    eax,[ebx+0x12]
c002271a:	83 c3 10             	add    ebx,0x10
c002271d:	0f b6 c0             	movzx  eax,al
c0022720:	0f b6 db             	movzx  ebx,bl
c0022723:	50                   	push   eax
c0022724:	51                   	push   ecx
c0022725:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0022729:	57                   	push   edi
c002272a:	55                   	push   ebp
c002272b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002272f:	e8 ec fd ff ff       	call   c0022520 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022734:	83 c4 14             	add    esp,0x14
c0022737:	89 c6                	mov    esi,eax
c0022739:	53                   	push   ebx
c002273a:	c1 e6 10             	shl    esi,0x10
c002273d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022741:	51                   	push   ecx
c0022742:	57                   	push   edi
c0022743:	55                   	push   ebp
c0022744:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022748:	e8 d3 fd ff ff       	call   c0022520 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002274d:	83 c4 3c             	add    esp,0x3c
c0022750:	0f b7 c0             	movzx  eax,ax
c0022753:	5b                   	pop    ebx
c0022754:	09 f0                	or     eax,esi
c0022756:	5e                   	pop    esi
c0022757:	5f                   	pop    edi
c0022758:	5d                   	pop    ebp
c0022759:	c3                   	ret    

c002275a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002275a:	55                   	push   ebp
c002275b:	57                   	push   edi
c002275c:	56                   	push   esi
c002275d:	53                   	push   ebx
c002275e:	83 ec 0c             	sub    esp,0xc
c0022761:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022765:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022769:	89 f5                	mov    ebp,esi
c002276b:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0022771:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022775:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022779:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002277d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022781:	83 f9 01             	cmp    ecx,0x1
c0022784:	75 5d                	jne    c00227e3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0022786:	0f b6 c8             	movzx  ecx,al
c0022789:	0f b6 d2             	movzx  edx,dl
c002278c:	c1 e1 10             	shl    ecx,0x10
c002278f:	c1 e2 0b             	shl    edx,0xb
c0022792:	89 f0                	mov    eax,esi
c0022794:	25 fc 00 00 00       	and    eax,0xfc
c0022799:	09 c1                	or     ecx,eax
c002279b:	89 e8                	mov    eax,ebp
c002279d:	0f b6 c0             	movzx  eax,al
c00227a0:	c1 e0 08             	shl    eax,0x8
c00227a3:	09 c1                	or     ecx,eax
c00227a5:	09 d1                	or     ecx,edx
c00227a7:	ba f8 0c 00 00       	mov    edx,0xcf8
c00227ac:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00227b2:	89 c8                	mov    eax,ecx
c00227b4:	ef                   	out    dx,eax
c00227b5:	ba fc 0c 00 00       	mov    edx,0xcfc
c00227ba:	ed                   	in     eax,dx
c00227bb:	0f b7 db             	movzx  ebx,bx
c00227be:	83 e6 02             	and    esi,0x2
c00227c1:	74 0a                	je     c00227cd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00227c3:	0f b7 d0             	movzx  edx,ax
c00227c6:	c1 e3 10             	shl    ebx,0x10
c00227c9:	09 d3                	or     ebx,edx
c00227cb:	eb 05                	jmp    c00227d2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00227cd:	66 31 c0             	xor    ax,ax
c00227d0:	09 c3                	or     ebx,eax
c00227d2:	ba f8 0c 00 00       	mov    edx,0xcf8
c00227d7:	89 c8                	mov    eax,ecx
c00227d9:	ef                   	out    dx,eax
c00227da:	ba fc 0c 00 00       	mov    edx,0xcfc
c00227df:	89 d8                	mov    eax,ebx
c00227e1:	eb 41                	jmp    c0022824 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00227e3:	83 f9 02             	cmp    ecx,0x2
c00227e6:	75 45                	jne    c002282d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00227e8:	83 ec 0c             	sub    esp,0xc
c00227eb:	0f b6 d2             	movzx  edx,dl
c00227ee:	89 f1                	mov    ecx,esi
c00227f0:	0f b6 c0             	movzx  eax,al
c00227f3:	0f b6 f1             	movzx  esi,cl
c00227f6:	89 e9                	mov    ecx,ebp
c00227f8:	56                   	push   esi
c00227f9:	0f b6 c9             	movzx  ecx,cl
c00227fc:	51                   	push   ecx
c00227fd:	52                   	push   edx
c00227fe:	50                   	push   eax
c00227ff:	57                   	push   edi
c0022800:	e8 ad fc ff ff       	call   c00224b2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022805:	89 c2                	mov    edx,eax
c0022807:	ed                   	in     eax,dx
c0022808:	83 c4 20             	add    esp,0x20
c002280b:	0f b7 db             	movzx  ebx,bx
c002280e:	f6 c2 02             	test   dl,0x2
c0022811:	74 0c                	je     c002281f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0022813:	0f b7 c8             	movzx  ecx,ax
c0022816:	89 d8                	mov    eax,ebx
c0022818:	c1 e0 10             	shl    eax,0x10
c002281b:	09 c8                	or     eax,ecx
c002281d:	eb 05                	jmp    c0022824 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002281f:	66 31 c0             	xor    ax,ax
c0022822:	09 d8                	or     eax,ebx
c0022824:	ef                   	out    dx,eax
c0022825:	83 c4 0c             	add    esp,0xc
c0022828:	5b                   	pop    ebx
c0022829:	5e                   	pop    esi
c002282a:	5f                   	pop    edi
c002282b:	5d                   	pop    ebp
c002282c:	c3                   	ret    
c002282d:	c7 44 24 20 60 c0 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c060
c0022835:	83 c4 0c             	add    esp,0xc
c0022838:	5b                   	pop    ebx
c0022839:	5e                   	pop    esi
c002283a:	5f                   	pop    edi
c002283b:	5d                   	pop    ebp
c002283c:	e9 fa 75 ff ff       	jmp    c0019e3b <Krnl::panic(char const*)>
c0022841:	90                   	nop

c0022842 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0022842:	55                   	push   ebp
c0022843:	57                   	push   edi
c0022844:	56                   	push   esi
c0022845:	53                   	push   ebx
c0022846:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002284c:	80 3d 10 1d 03 c0 00 	cmp    BYTE PTR ds:0xc0031d10,0x0
c0022853:	0f 85 84 00 00 00    	jne    c00228dd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0022859:	83 ec 0c             	sub    esp,0xc
c002285c:	68 14 01 00 00       	push   0x114
c0022861:	e8 33 cd fe ff       	call   c000f599 <malloc>
c0022866:	83 c4 0c             	add    esp,0xc
c0022869:	89 c3                	mov    ebx,eax
c002286b:	ff 35 10 0f 03 c0    	push   DWORD PTR ds:0xc0030f10
c0022871:	68 66 c0 02 c0       	push   0xc002c066
c0022876:	50                   	push   eax
c0022877:	e8 b2 03 ff ff       	call   c0012c2e <File::File(char const*, Process*)>
c002287c:	5a                   	pop    edx
c002287d:	59                   	pop    ecx
c002287e:	6a 01                	push   0x1
c0022880:	53                   	push   ebx
c0022881:	e8 0c 04 ff ff       	call   c0012c92 <File::open(FileOpenMode)>
c0022886:	83 c4 0c             	add    esp,0xc
c0022889:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c002288d:	50                   	push   eax
c002288e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022892:	50                   	push   eax
c0022893:	53                   	push   ebx
c0022894:	e8 a5 06 ff ff       	call   c0012f3e <File::stat(unsigned long long*, bool*)>
c0022899:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002289d:	40                   	inc    eax
c002289e:	89 04 24             	mov    DWORD PTR [esp],eax
c00228a1:	e8 f3 cc fe ff       	call   c000f599 <malloc>
c00228a6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00228aa:	a3 0c 1d 03 c0       	mov    ds:0xc0031d0c,eax
c00228af:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c00228b3:	5e                   	pop    esi
c00228b4:	8b 13                	mov    edx,DWORD PTR [ebx]
c00228b6:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00228ba:	51                   	push   ecx
c00228bb:	50                   	push   eax
c00228bc:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00228c0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00228c4:	53                   	push   ebx
c00228c5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00228c8:	83 c4 14             	add    esp,0x14
c00228cb:	53                   	push   ebx
c00228cc:	e8 1f 04 ff ff       	call   c0012cf0 <File::close()>
c00228d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00228d5:	83 c4 10             	add    esp,0x10
c00228d8:	a3 08 1d 03 c0       	mov    ds:0xc0031d08,eax
c00228dd:	a1 08 1d 03 c0       	mov    eax,ds:0xc0031d08
c00228e2:	8b 15 0c 1d 03 c0    	mov    edx,DWORD PTR ds:0xc0031d0c
c00228e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00228eb:	31 ff                	xor    edi,edi
c00228ed:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c00228f5:	31 f6                	xor    esi,esi
c00228f7:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00228fc:	31 db                	xor    ebx,ebx
c00228fe:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0022906:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c002290b:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0022912:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0022916:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c002291d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0022921:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022924:	0f 8e 6b 01 00 00    	jle    c0022a95 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c002292a:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c002292d:	d4 40                	aam    0x40
c002292f:	d5 39                	aad    0x39
c0022931:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022935:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0022939:	d4 40                	aam    0x40
c002293b:	d5 39                	aad    0x39
c002293d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022941:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0022945:	d4 40                	aam    0x40
c0022947:	d5 39                	aad    0x39
c0022949:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c002294d:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0022951:	d4 40                	aam    0x40
c0022953:	d5 39                	aad    0x39
c0022955:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022959:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c002295d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022961:	3c 56                	cmp    al,0x56
c0022963:	74 45                	je     c00229aa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0022965:	d4 40                	aam    0x40
c0022967:	d5 39                	aad    0x39
c0022969:	8d 48 d0             	lea    ecx,[eax-0x30]
c002296c:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0022970:	0f b6 c9             	movzx  ecx,cl
c0022973:	c1 e1 04             	shl    ecx,0x4
c0022976:	d4 40                	aam    0x40
c0022978:	d5 39                	aad    0x39
c002297a:	8d 58 d0             	lea    ebx,[eax-0x30]
c002297d:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0022981:	0f b6 db             	movzx  ebx,bl
c0022984:	09 cb                	or     ebx,ecx
c0022986:	c1 e3 04             	shl    ebx,0x4
c0022989:	d4 40                	aam    0x40
c002298b:	d5 39                	aad    0x39
c002298d:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022990:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0022994:	0f b6 c9             	movzx  ecx,cl
c0022997:	09 cb                	or     ebx,ecx
c0022999:	c1 e3 04             	shl    ebx,0x4
c002299c:	89 d9                	mov    ecx,ebx
c002299e:	d4 40                	aam    0x40
c00229a0:	d5 39                	aad    0x39
c00229a2:	8d 58 d0             	lea    ebx,[eax-0x30]
c00229a5:	0f b6 db             	movzx  ebx,bl
c00229a8:	09 cb                	or     ebx,ecx
c00229aa:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c00229ae:	80 f9 44             	cmp    cl,0x44
c00229b1:	74 47                	je     c00229fa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c00229b3:	88 c8                	mov    al,cl
c00229b5:	d4 40                	aam    0x40
c00229b7:	d5 39                	aad    0x39
c00229b9:	83 e8 30             	sub    eax,0x30
c00229bc:	0f b6 e8             	movzx  ebp,al
c00229bf:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c00229c3:	c1 e5 04             	shl    ebp,0x4
c00229c6:	d4 40                	aam    0x40
c00229c8:	d5 39                	aad    0x39
c00229ca:	83 e8 30             	sub    eax,0x30
c00229cd:	0f b6 f0             	movzx  esi,al
c00229d0:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c00229d4:	09 ee                	or     esi,ebp
c00229d6:	c1 e6 04             	shl    esi,0x4
c00229d9:	d4 40                	aam    0x40
c00229db:	d5 39                	aad    0x39
c00229dd:	83 e8 30             	sub    eax,0x30
c00229e0:	0f b6 e8             	movzx  ebp,al
c00229e3:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c00229e7:	09 ee                	or     esi,ebp
c00229e9:	c1 e6 04             	shl    esi,0x4
c00229ec:	89 f5                	mov    ebp,esi
c00229ee:	d4 40                	aam    0x40
c00229f0:	d5 39                	aad    0x39
c00229f2:	83 e8 30             	sub    eax,0x30
c00229f5:	0f b6 f0             	movzx  esi,al
c00229f8:	09 ee                	or     esi,ebp
c00229fa:	83 c7 10             	add    edi,0x10
c00229fd:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0022a01:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022a04:	3c 0a                	cmp    al,0xa
c0022a06:	74 09                	je     c0022a11 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0022a08:	45                   	inc    ebp
c0022a09:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022a0c:	75 16                	jne    c0022a24 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0022a0e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022a11:	3c 0a                	cmp    al,0xa
c0022a13:	0f 94 c0             	sete   al
c0022a16:	0f b6 c0             	movzx  eax,al
c0022a19:	01 c7                	add    edi,eax
c0022a1b:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0022a20:	75 0c                	jne    c0022a2e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0022a22:	eb 15                	jmp    c0022a39 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0022a24:	47                   	inc    edi
c0022a25:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0022a28:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0022a2c:	eb d3                	jmp    c0022a01 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0022a2e:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0022a33:	0f 85 e8 fe ff ff    	jne    c0022921 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a39:	80 f9 44             	cmp    cl,0x44
c0022a3c:	74 0b                	je     c0022a49 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0022a3e:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0022a43:	0f 85 d8 fe ff ff    	jne    c0022921 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a49:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0022a4d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0022a51:	c1 e1 04             	shl    ecx,0x4
c0022a54:	83 e8 30             	sub    eax,0x30
c0022a57:	09 c8                	or     eax,ecx
c0022a59:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0022a5d:	0f 85 be fe ff ff    	jne    c0022921 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a63:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0022a67:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022a6b:	c1 e1 04             	shl    ecx,0x4
c0022a6e:	83 e8 30             	sub    eax,0x30
c0022a71:	09 c8                	or     eax,ecx
c0022a73:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0022a77:	0f 85 a4 fe ff ff    	jne    c0022921 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a7d:	50                   	push   eax
c0022a7e:	50                   	push   eax
c0022a7f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022a83:	50                   	push   eax
c0022a84:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0022a8b:	e8 7c dd fd ff       	call   c000080c <strcpy>
c0022a90:	83 c4 10             	add    esp,0x10
c0022a93:	eb 15                	jmp    c0022aaa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0022a95:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022a9c:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0022aa7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022aaa:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022ab1:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022ab7:	5b                   	pop    ebx
c0022ab8:	5e                   	pop    esi
c0022ab9:	5f                   	pop    edi
c0022aba:	5d                   	pop    ebp
c0022abb:	c3                   	ret    

c0022abc <PCI::checkBus(unsigned char)>:
c0022abc:	56                   	push   esi
c0022abd:	53                   	push   ebx
c0022abe:	31 db                	xor    ebx,ebx
c0022ac0:	51                   	push   ecx
c0022ac1:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022ac6:	52                   	push   edx
c0022ac7:	53                   	push   ebx
c0022ac8:	43                   	inc    ebx
c0022ac9:	56                   	push   esi
c0022aca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ace:	e8 37 03 00 00       	call   c0022e0a <PCI::checkDevice(unsigned char, unsigned char)>
c0022ad3:	83 c4 10             	add    esp,0x10
c0022ad6:	83 fb 20             	cmp    ebx,0x20
c0022ad9:	75 eb                	jne    c0022ac6 <PCI::checkBus(unsigned char)+0xa>
c0022adb:	58                   	pop    eax
c0022adc:	5b                   	pop    ebx
c0022add:	5e                   	pop    esi
c0022ade:	c3                   	ret    
c0022adf:	90                   	nop

c0022ae0 <PCI::foundDevice(PCIDeviceInfo)>:
c0022ae0:	55                   	push   ebp
c0022ae1:	57                   	push   edi
c0022ae2:	56                   	push   esi
c0022ae3:	53                   	push   ebx
c0022ae4:	83 ec 1c             	sub    esp,0x1c
c0022ae7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022aeb:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022af1:	0f 84 52 01 00 00    	je     c0022c49 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022af7:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022afb:	66 81 f9 06 04       	cmp    cx,0x406
c0022b00:	75 2c                	jne    c0022b2e <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022b02:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022b07:	50                   	push   eax
c0022b08:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022b0d:	50                   	push   eax
c0022b0e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022b13:	50                   	push   eax
c0022b14:	56                   	push   esi
c0022b15:	e8 b4 fb ff ff       	call   c00226ce <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022b1a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022b1e:	0f b6 c0             	movzx  eax,al
c0022b21:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022b25:	83 c4 2c             	add    esp,0x2c
c0022b28:	5b                   	pop    ebx
c0022b29:	5e                   	pop    esi
c0022b2a:	5f                   	pop    edi
c0022b2b:	5d                   	pop    ebp
c0022b2c:	eb 8e                	jmp    c0022abc <PCI::checkBus(unsigned char)>
c0022b2e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022b32:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022b38:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022b3c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022b40:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022b44:	88 d3                	mov    bl,dl
c0022b46:	85 c0                	test   eax,eax
c0022b48:	74 33                	je     c0022b7d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022b4a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022b4d:	85 d2                	test   edx,edx
c0022b4f:	74 28                	je     c0022b79 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b51:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022b57:	31 ef                	xor    edi,ebp
c0022b59:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022b5f:	75 18                	jne    c0022b79 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b61:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022b65:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022b6b:	75 0c                	jne    c0022b79 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b6d:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022b73:	0f 84 d0 00 00 00    	je     c0022c49 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022b79:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b7b:	eb c9                	jmp    c0022b46 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022b7d:	66 81 f9 01 06       	cmp    cx,0x601
c0022b82:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022b86:	75 19                	jne    c0022ba1 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022b88:	83 ec 0c             	sub    esp,0xc
c0022b8b:	68 64 01 00 00       	push   0x164
c0022b90:	e8 04 ca fe ff       	call   c000f599 <malloc>
c0022b95:	89 c5                	mov    ebp,eax
c0022b97:	89 04 24             	mov    DWORD PTR [esp],eax
c0022b9a:	e8 85 0e 00 00       	call   c0023a24 <SATABus::SATABus()>
c0022b9f:	eb 1e                	jmp    c0022bbf <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022ba1:	66 81 f9 01 01       	cmp    cx,0x101
c0022ba6:	75 60                	jne    c0022c08 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022ba8:	83 ec 0c             	sub    esp,0xc
c0022bab:	68 70 02 00 00       	push   0x270
c0022bb0:	e8 e4 c9 fe ff       	call   c000f599 <malloc>
c0022bb5:	89 c5                	mov    ebp,eax
c0022bb7:	89 04 24             	mov    DWORD PTR [esp],eax
c0022bba:	e8 0f 03 00 00       	call   c0022ece <IDE::IDE()>
c0022bbf:	58                   	pop    eax
c0022bc0:	5a                   	pop    edx
c0022bc1:	55                   	push   ebp
c0022bc2:	56                   	push   esi
c0022bc3:	e8 40 0f ff ff       	call   c0013b08 <Device::addChild(Device*)>
c0022bc8:	83 ec 1c             	sub    esp,0x1c
c0022bcb:	b9 09 00 00 00       	mov    ecx,0x9
c0022bd0:	fc                   	cld    
c0022bd1:	89 e7                	mov    edi,esp
c0022bd3:	89 de                	mov    esi,ebx
c0022bd5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022bd7:	55                   	push   ebp
c0022bd8:	e8 3d 0e ff ff       	call   c0013a1a <Device::preOpenPCI(PCIDeviceInfo)>
c0022bdd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022be0:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022be4:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022bec:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022bf4:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022bfc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022bff:	83 c4 4c             	add    esp,0x4c
c0022c02:	5b                   	pop    ebx
c0022c03:	5e                   	pop    esi
c0022c04:	5f                   	pop    edi
c0022c05:	5d                   	pop    ebp
c0022c06:	ff e0                	jmp    eax
c0022c08:	83 ec 0c             	sub    esp,0xc
c0022c0b:	68 58 01 00 00       	push   0x158
c0022c10:	e8 84 c9 fe ff       	call   c000f599 <malloc>
c0022c15:	89 c5                	mov    ebp,eax
c0022c17:	58                   	pop    eax
c0022c18:	5a                   	pop    edx
c0022c19:	68 7f c0 02 c0       	push   0xc002c07f
c0022c1e:	55                   	push   ebp
c0022c1f:	e8 ee 11 ff ff       	call   c0013e12 <DriverlessDevice::DriverlessDevice(char const*)>
c0022c24:	59                   	pop    ecx
c0022c25:	5f                   	pop    edi
c0022c26:	55                   	push   ebp
c0022c27:	56                   	push   esi
c0022c28:	e8 db 0e ff ff       	call   c0013b08 <Device::addChild(Device*)>
c0022c2d:	b9 09 00 00 00       	mov    ecx,0x9
c0022c32:	fc                   	cld    
c0022c33:	89 df                	mov    edi,ebx
c0022c35:	89 de                	mov    esi,ebx
c0022c37:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022c39:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022c3d:	83 c4 2c             	add    esp,0x2c
c0022c40:	5b                   	pop    ebx
c0022c41:	5e                   	pop    esi
c0022c42:	5f                   	pop    edi
c0022c43:	5d                   	pop    ebp
c0022c44:	e9 d1 0d ff ff       	jmp    c0013a1a <Device::preOpenPCI(PCIDeviceInfo)>
c0022c49:	83 c4 1c             	add    esp,0x1c
c0022c4c:	5b                   	pop    ebx
c0022c4d:	5e                   	pop    esi
c0022c4e:	5f                   	pop    edi
c0022c4f:	5d                   	pop    ebp
c0022c50:	c3                   	ret    
c0022c51:	90                   	nop

c0022c52 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022c52:	55                   	push   ebp
c0022c53:	57                   	push   edi
c0022c54:	56                   	push   esi
c0022c55:	53                   	push   ebx
c0022c56:	83 ec 68             	sub    esp,0x68
c0022c59:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0022c5d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0022c64:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022c68:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0022c6f:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0022c74:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022c78:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0022c7f:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0022c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022c88:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0022c8d:	6a 0c                	push   0xc
c0022c8f:	57                   	push   edi
c0022c90:	53                   	push   ebx
c0022c91:	56                   	push   esi
c0022c92:	55                   	push   ebp
c0022c93:	e8 88 f8 ff ff       	call   c0022520 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c98:	83 c4 20             	add    esp,0x20
c0022c9b:	57                   	push   edi
c0022c9c:	53                   	push   ebx
c0022c9d:	56                   	push   esi
c0022c9e:	55                   	push   ebp
c0022c9f:	e8 70 f9 ff ff       	call   c0022614 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022ca4:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0022ca9:	57                   	push   edi
c0022caa:	53                   	push   ebx
c0022cab:	56                   	push   esi
c0022cac:	55                   	push   ebp
c0022cad:	e8 f8 f9 ff ff       	call   c00226aa <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022cb2:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0022cb6:	83 c4 14             	add    esp,0x14
c0022cb9:	6a 3c                	push   0x3c
c0022cbb:	57                   	push   edi
c0022cbc:	53                   	push   ebx
c0022cbd:	56                   	push   esi
c0022cbe:	55                   	push   ebp
c0022cbf:	e8 5c f8 ff ff       	call   c0022520 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022cc4:	0f b6 c4             	movzx  eax,ah
c0022cc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0022ccb:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0022ccf:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0022cd3:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0022cd8:	83 c4 20             	add    esp,0x20
c0022cdb:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022ce1:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022ce8:	74 7c                	je     c0022d66 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022cea:	31 c0                	xor    eax,eax
c0022cec:	8b 15 c8 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d9c8
c0022cf2:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022cf8:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0022cfe:	7e 66                	jle    c0022d66 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022d00:	8d 14 c2             	lea    edx,[edx+eax*8]
c0022d03:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022d0a:	39 cb                	cmp    ebx,ecx
c0022d0c:	75 55                	jne    c0022d63 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022d0e:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022d15:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022d19:	75 48                	jne    c0022d63 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022d1b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022d1f:	83 ec 0c             	sub    esp,0xc
c0022d22:	68 99 c0 02 c0       	push   0xc002c099
c0022d27:	e8 a3 f9 fe ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0022d2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022d30:	8b 15 c8 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d9c8
c0022d36:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0022d3a:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022d40:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0022d48:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0022d4c:	52                   	push   edx
c0022d4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d51:	53                   	push   ebx
c0022d52:	68 be c0 02 c0       	push   0xc002c0be
c0022d57:	e8 73 f9 fe ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0022d5c:	83 c4 20             	add    esp,0x20
c0022d5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022d63:	40                   	inc    eax
c0022d64:	eb 86                	jmp    c0022cec <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0022d66:	31 d2                	xor    edx,edx
c0022d68:	83 ec 0c             	sub    esp,0xc
c0022d6b:	57                   	push   edi
c0022d6c:	53                   	push   ebx
c0022d6d:	56                   	push   esi
c0022d6e:	52                   	push   edx
c0022d6f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0022d73:	55                   	push   ebp
c0022d74:	e8 7d f9 ff ff       	call   c00226f6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d79:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022d7d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022d81:	42                   	inc    edx
c0022d82:	83 c4 20             	add    esp,0x20
c0022d85:	83 fa 06             	cmp    edx,0x6
c0022d88:	75 de                	jne    c0022d68 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0022d8a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0022d8f:	83 ec 0c             	sub    esp,0xc
c0022d92:	86 e0                	xchg   al,ah
c0022d94:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0022d99:	6a 02                	push   0x2
c0022d9b:	57                   	push   edi
c0022d9c:	53                   	push   ebx
c0022d9d:	56                   	push   esi
c0022d9e:	55                   	push   ebp
c0022d9f:	e8 7c f7 ff ff       	call   c0022520 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022da4:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0022da9:	83 c4 20             	add    esp,0x20
c0022dac:	57                   	push   edi
c0022dad:	53                   	push   ebx
c0022dae:	56                   	push   esi
c0022daf:	55                   	push   ebp
c0022db0:	e8 a9 f8 ff ff       	call   c002265e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022db5:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022db9:	57                   	push   edi
c0022dba:	53                   	push   ebx
c0022dbb:	56                   	push   esi
c0022dbc:	55                   	push   ebp
c0022dbd:	e8 06 f8 ff ff       	call   c00225c8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022dc2:	b9 09 00 00 00       	mov    ecx,0x9
c0022dc7:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0022dcc:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0022dd0:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0022dd4:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0022dd8:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0022ddc:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022de0:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0022de4:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0022de8:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0022dec:	83 ec 0c             	sub    esp,0xc
c0022def:	fc                   	cld    
c0022df0:	89 e7                	mov    edi,esp
c0022df2:	8d 74 24 58          	lea    esi,[esp+0x58]
c0022df6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022df8:	55                   	push   ebp
c0022df9:	e8 e2 fc ff ff       	call   c0022ae0 <PCI::foundDevice(PCIDeviceInfo)>
c0022dfe:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022e04:	5b                   	pop    ebx
c0022e05:	5e                   	pop    esi
c0022e06:	5f                   	pop    edi
c0022e07:	5d                   	pop    ebp
c0022e08:	c3                   	ret    
c0022e09:	90                   	nop

c0022e0a <PCI::checkDevice(unsigned char, unsigned char)>:
c0022e0a:	55                   	push   ebp
c0022e0b:	57                   	push   edi
c0022e0c:	56                   	push   esi
c0022e0d:	53                   	push   ebx
c0022e0e:	83 ec 0c             	sub    esp,0xc
c0022e11:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022e15:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022e1a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022e1f:	6a 00                	push   0x0
c0022e21:	56                   	push   esi
c0022e22:	57                   	push   edi
c0022e23:	55                   	push   ebp
c0022e24:	e8 9f f7 ff ff       	call   c00225c8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e29:	6a 00                	push   0x0
c0022e2b:	56                   	push   esi
c0022e2c:	57                   	push   edi
c0022e2d:	55                   	push   ebp
c0022e2e:	e8 1f fe ff ff       	call   c0022c52 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022e33:	83 c4 20             	add    esp,0x20
c0022e36:	6a 00                	push   0x0
c0022e38:	56                   	push   esi
c0022e39:	57                   	push   edi
c0022e3a:	55                   	push   ebp
c0022e3b:	e8 ac f7 ff ff       	call   c00225ec <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022e40:	83 c4 10             	add    esp,0x10
c0022e43:	84 c0                	test   al,al
c0022e45:	79 27                	jns    c0022e6e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022e47:	bb 01 00 00 00       	mov    ebx,0x1
c0022e4c:	53                   	push   ebx
c0022e4d:	56                   	push   esi
c0022e4e:	57                   	push   edi
c0022e4f:	55                   	push   ebp
c0022e50:	e8 73 f7 ff ff       	call   c00225c8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e55:	83 c4 10             	add    esp,0x10
c0022e58:	66 40                	inc    ax
c0022e5a:	74 0c                	je     c0022e68 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022e5c:	53                   	push   ebx
c0022e5d:	56                   	push   esi
c0022e5e:	57                   	push   edi
c0022e5f:	55                   	push   ebp
c0022e60:	e8 ed fd ff ff       	call   c0022c52 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022e65:	83 c4 10             	add    esp,0x10
c0022e68:	43                   	inc    ebx
c0022e69:	83 fb 08             	cmp    ebx,0x8
c0022e6c:	75 de                	jne    c0022e4c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022e6e:	83 c4 0c             	add    esp,0xc
c0022e71:	5b                   	pop    ebx
c0022e72:	5e                   	pop    esi
c0022e73:	5f                   	pop    edi
c0022e74:	5d                   	pop    ebp
c0022e75:	c3                   	ret    

c0022e76 <PCI::detect()>:
c0022e76:	56                   	push   esi
c0022e77:	53                   	push   ebx
c0022e78:	53                   	push   ebx
c0022e79:	31 db                	xor    ebx,ebx
c0022e7b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022e7f:	6a 00                	push   0x0
c0022e81:	6a 00                	push   0x0
c0022e83:	6a 00                	push   0x0
c0022e85:	56                   	push   esi
c0022e86:	e8 61 f7 ff ff       	call   c00225ec <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022e8b:	83 c4 10             	add    esp,0x10
c0022e8e:	a8 80                	test   al,0x80
c0022e90:	75 21                	jne    c0022eb3 <PCI::detect()+0x3d>
c0022e92:	51                   	push   ecx
c0022e93:	51                   	push   ecx
c0022e94:	6a 00                	push   0x0
c0022e96:	56                   	push   esi
c0022e97:	e8 20 fc ff ff       	call   c0022abc <PCI::checkBus(unsigned char)>
c0022e9c:	83 c4 10             	add    esp,0x10
c0022e9f:	eb 24                	jmp    c0022ec5 <PCI::detect()+0x4f>
c0022ea1:	52                   	push   edx
c0022ea2:	52                   	push   edx
c0022ea3:	53                   	push   ebx
c0022ea4:	43                   	inc    ebx
c0022ea5:	56                   	push   esi
c0022ea6:	e8 11 fc ff ff       	call   c0022abc <PCI::checkBus(unsigned char)>
c0022eab:	83 c4 10             	add    esp,0x10
c0022eae:	83 fb 08             	cmp    ebx,0x8
c0022eb1:	74 12                	je     c0022ec5 <PCI::detect()+0x4f>
c0022eb3:	53                   	push   ebx
c0022eb4:	6a 00                	push   0x0
c0022eb6:	6a 00                	push   0x0
c0022eb8:	56                   	push   esi
c0022eb9:	e8 0a f7 ff ff       	call   c00225c8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ebe:	83 c4 10             	add    esp,0x10
c0022ec1:	66 40                	inc    ax
c0022ec3:	74 dc                	je     c0022ea1 <PCI::detect()+0x2b>
c0022ec5:	58                   	pop    eax
c0022ec6:	5b                   	pop    ebx
c0022ec7:	5e                   	pop    esi
c0022ec8:	c3                   	ret    
c0022ec9:	90                   	nop

c0022eca <IDE::close(int, int, void*)>:
c0022eca:	83 c8 ff             	or     eax,0xffffffff
c0022ecd:	c3                   	ret    

c0022ece <IDE::IDE()>:
c0022ece:	83 ec 0c             	sub    esp,0xc
c0022ed1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ed5:	83 ec 08             	sub    esp,0x8
c0022ed8:	68 08 c1 02 c0       	push   0xc002c108
c0022edd:	50                   	push   eax
c0022ede:	e8 d3 0f ff ff       	call   c0013eb6 <HardDiskController::HardDiskController(char const*)>
c0022ee3:	83 c4 10             	add    esp,0x10
c0022ee6:	ba 98 c1 02 c0       	mov    edx,0xc002c198
c0022eeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eef:	89 10                	mov    DWORD PTR [eax],edx
c0022ef1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ef5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022efc:	90                   	nop
c0022efd:	83 c4 0c             	add    esp,0xc
c0022f00:	c3                   	ret    
c0022f01:	90                   	nop

c0022f02 <IDE::prepareInterrupt(unsigned char)>:
c0022f02:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022f07:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022f0b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022f13:	c3                   	ret    

c0022f14 <selectDrive(unsigned char, unsigned char)>:
c0022f14:	c3                   	ret    
c0022f15:	90                   	nop

c0022f16 <IDE::getBase(unsigned char)>:
c0022f16:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022f1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f1f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022f27:	c3                   	ret    

c0022f28 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022f28:	55                   	push   ebp
c0022f29:	57                   	push   edi
c0022f2a:	56                   	push   esi
c0022f2b:	53                   	push   ebx
c0022f2c:	83 ec 1c             	sub    esp,0x1c
c0022f2f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022f33:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022f37:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022f3a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022f3e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022f42:	80 f9 03             	cmp    cl,0x3
c0022f45:	77 51                	ja     c0022f98 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022f47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022f4b:	0f b6 f2             	movzx  esi,dl
c0022f4e:	0f b6 db             	movzx  ebx,bl
c0022f51:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022f54:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022f58:	83 ca 80             	or     edx,0xffffff80
c0022f5b:	0f b6 d2             	movzx  edx,dl
c0022f5e:	52                   	push   edx
c0022f5f:	6a 0c                	push   0xc
c0022f61:	56                   	push   esi
c0022f62:	57                   	push   edi
c0022f63:	e8 c0 ff ff ff       	call   c0022f28 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f68:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022f6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022f71:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022f75:	ee                   	out    dx,al
c0022f76:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022f7b:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022f7f:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022f83:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022f87:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022f8f:	83 c4 2c             	add    esp,0x2c
c0022f92:	5b                   	pop    ebx
c0022f93:	5e                   	pop    esi
c0022f94:	5f                   	pop    edi
c0022f95:	5d                   	pop    ebp
c0022f96:	eb 90                	jmp    c0022f28 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f98:	80 fb 07             	cmp    bl,0x7
c0022f9b:	77 12                	ja     c0022faf <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022f9d:	0f b6 d2             	movzx  edx,dl
c0022fa0:	0f b6 db             	movzx  ebx,bl
c0022fa3:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022fab:	89 da                	mov    edx,ebx
c0022fad:	eb 2f                	jmp    c0022fde <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022faf:	80 fb 0d             	cmp    bl,0xd
c0022fb2:	77 13                	ja     c0022fc7 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022fb4:	0f b6 d2             	movzx  edx,dl
c0022fb7:	0f b6 db             	movzx  ebx,bl
c0022fba:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022fc1:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022fc5:	eb 17                	jmp    c0022fde <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022fc7:	80 fb 15             	cmp    bl,0x15
c0022fca:	77 13                	ja     c0022fdf <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022fcc:	0f b6 d2             	movzx  edx,dl
c0022fcf:	0f b6 db             	movzx  ebx,bl
c0022fd2:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022fda:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022fde:	ee                   	out    dx,al
c0022fdf:	83 c4 1c             	add    esp,0x1c
c0022fe2:	5b                   	pop    ebx
c0022fe3:	5e                   	pop    esi
c0022fe4:	5f                   	pop    edi
c0022fe5:	5d                   	pop    ebp
c0022fe6:	c3                   	ret    
c0022fe7:	90                   	nop

c0022fe8 <IDE::read(unsigned char, unsigned char)>:
c0022fe8:	55                   	push   ebp
c0022fe9:	57                   	push   edi
c0022fea:	56                   	push   esi
c0022feb:	53                   	push   ebx
c0022fec:	83 ec 1c             	sub    esp,0x1c
c0022fef:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022ff3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022ff7:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022ffa:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022ffe:	3c 03                	cmp    al,0x3
c0023000:	77 43                	ja     c0023045 <IDE::read(unsigned char, unsigned char)+0x5d>
c0023002:	0f b6 f2             	movzx  esi,dl
c0023005:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023008:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c002300c:	83 c8 80             	or     eax,0xffffff80
c002300f:	0f b6 c0             	movzx  eax,al
c0023012:	50                   	push   eax
c0023013:	6a 0c                	push   0xc
c0023015:	56                   	push   esi
c0023016:	57                   	push   edi
c0023017:	e8 0c ff ff ff       	call   c0022f28 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002301c:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023021:	0f b6 c3             	movzx  eax,bl
c0023024:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023028:	ec                   	in     al,dx
c0023029:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002302d:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023032:	52                   	push   edx
c0023033:	6a 0c                	push   0xc
c0023035:	56                   	push   esi
c0023036:	57                   	push   edi
c0023037:	e8 ec fe ff ff       	call   c0022f28 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002303c:	83 c4 20             	add    esp,0x20
c002303f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023043:	eb 49                	jmp    c002308e <IDE::read(unsigned char, unsigned char)+0xa6>
c0023045:	80 fb 07             	cmp    bl,0x7
c0023048:	77 12                	ja     c002305c <IDE::read(unsigned char, unsigned char)+0x74>
c002304a:	0f b6 d2             	movzx  edx,dl
c002304d:	0f b6 c3             	movzx  eax,bl
c0023050:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023058:	89 c2                	mov    edx,eax
c002305a:	eb 31                	jmp    c002308d <IDE::read(unsigned char, unsigned char)+0xa5>
c002305c:	80 fb 0d             	cmp    bl,0xd
c002305f:	77 13                	ja     c0023074 <IDE::read(unsigned char, unsigned char)+0x8c>
c0023061:	0f b6 d2             	movzx  edx,dl
c0023064:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c002306b:	0f b6 d3             	movzx  edx,bl
c002306e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023072:	eb 19                	jmp    c002308d <IDE::read(unsigned char, unsigned char)+0xa5>
c0023074:	31 c0                	xor    eax,eax
c0023076:	80 fb 15             	cmp    bl,0x15
c0023079:	77 13                	ja     c002308e <IDE::read(unsigned char, unsigned char)+0xa6>
c002307b:	0f b6 d2             	movzx  edx,dl
c002307e:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023086:	0f b6 d3             	movzx  edx,bl
c0023089:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002308d:	ec                   	in     al,dx
c002308e:	83 c4 1c             	add    esp,0x1c
c0023091:	5b                   	pop    ebx
c0023092:	5e                   	pop    esi
c0023093:	5f                   	pop    edi
c0023094:	5d                   	pop    ebp
c0023095:	c3                   	ret    

c0023096 <IDE::waitInterrupt(unsigned char)>:
c0023096:	55                   	push   ebp
c0023097:	57                   	push   edi
c0023098:	56                   	push   esi
c0023099:	53                   	push   ebx
c002309a:	31 db                	xor    ebx,ebx
c002309c:	83 ec 0c             	sub    esp,0xc
c002309f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00230a3:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00230a8:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00230b0:	89 e8                	mov    eax,ebp
c00230b2:	84 c0                	test   al,al
c00230b4:	75 34                	jne    c00230ea <IDE::waitInterrupt(unsigned char)+0x54>
c00230b6:	52                   	push   edx
c00230b7:	6a 0c                	push   0xc
c00230b9:	56                   	push   esi
c00230ba:	57                   	push   edi
c00230bb:	e8 28 ff ff ff       	call   c0022fe8 <IDE::read(unsigned char, unsigned char)>
c00230c0:	83 c4 10             	add    esp,0x10
c00230c3:	a8 01                	test   al,0x1
c00230c5:	75 2b                	jne    c00230f2 <IDE::waitInterrupt(unsigned char)+0x5c>
c00230c7:	f6 c3 04             	test   bl,0x4
c00230ca:	75 16                	jne    c00230e2 <IDE::waitInterrupt(unsigned char)+0x4c>
c00230cc:	83 fb 32             	cmp    ebx,0x32
c00230cf:	7e 11                	jle    c00230e2 <IDE::waitInterrupt(unsigned char)+0x4c>
c00230d1:	50                   	push   eax
c00230d2:	50                   	push   eax
c00230d3:	6a 00                	push   0x0
c00230d5:	68 80 96 98 00       	push   0x989680
c00230da:	e8 c6 ab ff ff       	call   c001dca5 <nanoSleep(unsigned long long)>
c00230df:	83 c4 10             	add    esp,0x10
c00230e2:	83 fb 3c             	cmp    ebx,0x3c
c00230e5:	74 0b                	je     c00230f2 <IDE::waitInterrupt(unsigned char)+0x5c>
c00230e7:	43                   	inc    ebx
c00230e8:	eb be                	jmp    c00230a8 <IDE::waitInterrupt(unsigned char)+0x12>
c00230ea:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00230f2:	83 c4 0c             	add    esp,0xc
c00230f5:	89 e8                	mov    eax,ebp
c00230f7:	5b                   	pop    ebx
c00230f8:	5e                   	pop    esi
c00230f9:	5f                   	pop    edi
c00230fa:	5d                   	pop    ebp
c00230fb:	c3                   	ret    

c00230fc <ideChannel0IRQHandler(regs*, void*)>:
c00230fc:	83 ec 10             	sub    esp,0x10
c00230ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023103:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002310a:	6a 07                	push   0x7
c002310c:	6a 00                	push   0x0
c002310e:	50                   	push   eax
c002310f:	e8 d4 fe ff ff       	call   c0022fe8 <IDE::read(unsigned char, unsigned char)>
c0023114:	83 c4 1c             	add    esp,0x1c
c0023117:	c3                   	ret    

c0023118 <ideChannel1IRQHandler(regs*, void*)>:
c0023118:	83 ec 10             	sub    esp,0x10
c002311b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002311f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023126:	6a 07                	push   0x7
c0023128:	6a 01                	push   0x1
c002312a:	50                   	push   eax
c002312b:	e8 b8 fe ff ff       	call   c0022fe8 <IDE::read(unsigned char, unsigned char)>
c0023130:	83 c4 1c             	add    esp,0x1c
c0023133:	c3                   	ret    

c0023134 <IDE::enableIRQs(unsigned char, bool)>:
c0023134:	57                   	push   edi
c0023135:	56                   	push   esi
c0023136:	be 04 00 00 00       	mov    esi,0x4
c002313b:	53                   	push   ebx
c002313c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023141:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023145:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c002314a:	0f 94 c0             	sete   al
c002314d:	d1 e0                	shl    eax,1
c002314f:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023156:	0f b6 c0             	movzx  eax,al
c0023159:	50                   	push   eax
c002315a:	6a 0c                	push   0xc
c002315c:	57                   	push   edi
c002315d:	53                   	push   ebx
c002315e:	e8 c5 fd ff ff       	call   c0022f28 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023163:	83 c4 10             	add    esp,0x10
c0023166:	50                   	push   eax
c0023167:	6a 0c                	push   0xc
c0023169:	57                   	push   edi
c002316a:	53                   	push   ebx
c002316b:	e8 78 fe ff ff       	call   c0022fe8 <IDE::read(unsigned char, unsigned char)>
c0023170:	83 c4 10             	add    esp,0x10
c0023173:	4e                   	dec    esi
c0023174:	75 f0                	jne    c0023166 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023176:	5b                   	pop    ebx
c0023177:	5e                   	pop    esi
c0023178:	5f                   	pop    edi
c0023179:	c3                   	ret    

c002317a <IDE::open(int, int, void*)>:
c002317a:	55                   	push   ebp
c002317b:	57                   	push   edi
c002317c:	56                   	push   esi
c002317d:	53                   	push   ebx
c002317e:	83 ec 1c             	sub    esp,0x1c
c0023181:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023185:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002318e:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023197:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002319e:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00231a5:	0f 85 b0 02 00 00    	jne    c002345b <IDE::open(int, int, void*)+0x2e1>
c00231ab:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00231b1:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00231b5:	83 e0 7f             	and    eax,0x7f
c00231b8:	3c 05                	cmp    al,0x5
c00231ba:	74 04                	je     c00231c0 <IDE::open(int, int, void*)+0x46>
c00231bc:	3c 0f                	cmp    al,0xf
c00231be:	75 32                	jne    c00231f2 <IDE::open(int, int, void*)+0x78>
c00231c0:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00231c6:	83 e0 fc             	and    eax,0xfffffffc
c00231c9:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00231d0:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00231d6:	83 e0 fc             	and    eax,0xfffffffc
c00231d9:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00231e0:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00231e6:	83 e0 fc             	and    eax,0xfffffffc
c00231e9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00231f0:	eb 14                	jmp    c0023206 <IDE::open(int, int, void*)+0x8c>
c00231f2:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00231fc:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023206:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002320d:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023214:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023218:	89 c6                	mov    esi,eax
c002321a:	bf f8 0c 00 00       	mov    edi,0xcf8
c002321f:	c1 e6 10             	shl    esi,0x10
c0023222:	89 e8                	mov    eax,ebp
c0023224:	89 fa                	mov    edx,edi
c0023226:	c1 e0 0b             	shl    eax,0xb
c0023229:	09 f0                	or     eax,esi
c002322b:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023232:	c1 e6 08             	shl    esi,0x8
c0023235:	09 c6                	or     esi,eax
c0023237:	89 f0                	mov    eax,esi
c0023239:	0d 08 00 00 80       	or     eax,0x80000008
c002323e:	ef                   	out    dx,eax
c002323f:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023244:	89 ca                	mov    edx,ecx
c0023246:	ed                   	in     eax,dx
c0023247:	c1 e8 10             	shr    eax,0x10
c002324a:	3d ff ff 00 00       	cmp    eax,0xffff
c002324f:	0f 84 f5 00 00 00    	je     c002334a <IDE::open(int, int, void*)+0x1d0>
c0023255:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c002325b:	89 fa                	mov    edx,edi
c002325d:	89 f0                	mov    eax,esi
c002325f:	ef                   	out    dx,eax
c0023260:	b0 fe                	mov    al,0xfe
c0023262:	89 ca                	mov    edx,ecx
c0023264:	ee                   	out    dx,al
c0023265:	89 f0                	mov    eax,esi
c0023267:	89 fa                	mov    edx,edi
c0023269:	ef                   	out    dx,eax
c002326a:	89 ca                	mov    edx,ecx
c002326c:	ed                   	in     eax,dx
c002326d:	3c fe                	cmp    al,0xfe
c002326f:	0f 85 a9 00 00 00    	jne    c002331e <IDE::open(int, int, void*)+0x1a4>
c0023275:	8b 15 c8 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d9c8
c002327b:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023282:	74 33                	je     c00232b7 <IDE::open(int, int, void*)+0x13d>
c0023284:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002328a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002328e:	40                   	inc    eax
c002328f:	83 ec 0c             	sub    esp,0xc
c0023292:	0f b6 c0             	movzx  eax,al
c0023295:	50                   	push   eax
c0023296:	55                   	push   ebp
c0023297:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002329b:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00232a1:	51                   	push   ecx
c00232a2:	e8 4d 48 ff ff       	call   c0017af4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00232a7:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00232ac:	83 c4 1c             	add    esp,0x1c
c00232af:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00232b5:	eb 0a                	jmp    c00232c1 <IDE::open(int, int, void*)+0x147>
c00232b7:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00232c1:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00232c8:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00232cf:	c1 e1 10             	shl    ecx,0x10
c00232d2:	c1 e0 08             	shl    eax,0x8
c00232d5:	bf f8 0c 00 00       	mov    edi,0xcf8
c00232da:	09 c1                	or     ecx,eax
c00232dc:	89 fa                	mov    edx,edi
c00232de:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00232e5:	c1 e0 0b             	shl    eax,0xb
c00232e8:	09 c1                	or     ecx,eax
c00232ea:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00232f0:	89 c8                	mov    eax,ecx
c00232f2:	ef                   	out    dx,eax
c00232f3:	be fc 0c 00 00       	mov    esi,0xcfc
c00232f8:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00232fe:	89 f2                	mov    edx,esi
c0023300:	ee                   	out    dx,al
c0023301:	89 c8                	mov    eax,ecx
c0023303:	89 fa                	mov    edx,edi
c0023305:	ef                   	out    dx,eax
c0023306:	89 f2                	mov    edx,esi
c0023308:	ed                   	in     eax,dx
c0023309:	0f b6 c0             	movzx  eax,al
c002330c:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023312:	74 46                	je     c002335a <IDE::open(int, int, void*)+0x1e0>
c0023314:	83 ec 0c             	sub    esp,0xc
c0023317:	68 20 c1 02 c0       	push   0xc002c120
c002331c:	eb 34                	jmp    c0023352 <IDE::open(int, int, void*)+0x1d8>
c002331e:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023327:	75 17                	jne    c0023340 <IDE::open(int, int, void*)+0x1c6>
c0023329:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c002332e:	74 07                	je     c0023337 <IDE::open(int, int, void*)+0x1bd>
c0023330:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023335:	75 09                	jne    c0023340 <IDE::open(int, int, void*)+0x1c6>
c0023337:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002333e:	eb 1a                	jmp    c002335a <IDE::open(int, int, void*)+0x1e0>
c0023340:	83 ec 0c             	sub    esp,0xc
c0023343:	68 28 c1 02 c0       	push   0xc002c128
c0023348:	eb 08                	jmp    c0023352 <IDE::open(int, int, void*)+0x1d8>
c002334a:	83 ec 0c             	sub    esp,0xc
c002334d:	68 59 c1 02 c0       	push   0xc002c159
c0023352:	e8 e4 6a ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c0023357:	83 c4 10             	add    esp,0x10
c002335a:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023361:	79 1a                	jns    c002337d <IDE::open(int, int, void*)+0x203>
c0023363:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023369:	83 e0 fc             	and    eax,0xfffffffc
c002336c:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023373:	83 c0 08             	add    eax,0x8
c0023376:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002337d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023383:	89 c2                	mov    edx,eax
c0023385:	83 e2 0f             	and    edx,0xf
c0023388:	66 83 fa 08          	cmp    dx,0x8
c002338c:	75 0a                	jne    c0023398 <IDE::open(int, int, void*)+0x21e>
c002338e:	83 e8 02             	sub    eax,0x2
c0023391:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023398:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002339e:	89 c2                	mov    edx,eax
c00233a0:	83 e2 0f             	and    edx,0xf
c00233a3:	66 83 fa 08          	cmp    dx,0x8
c00233a7:	75 0a                	jne    c00233b3 <IDE::open(int, int, void*)+0x239>
c00233a9:	83 e8 02             	sub    eax,0x2
c00233ac:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00233b3:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00233ba:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00233c1:	89 d0                	mov    eax,edx
c00233c3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00233c6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00233ca:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00233ce:	8d 4a 01             	lea    ecx,[edx+0x1]
c00233d1:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00233d6:	0f b6 c9             	movzx  ecx,cl
c00233d9:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00233e0:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00233e3:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00233e7:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00233eb:	8d 50 02             	lea    edx,[eax+0x2]
c00233ee:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00233f3:	0f b6 d2             	movzx  edx,dl
c00233f6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00233fc:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00233ff:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023403:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023407:	8d 48 03             	lea    ecx,[eax+0x3]
c002340a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002340f:	0f b6 c9             	movzx  ecx,cl
c0023412:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023418:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002341b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002341f:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023423:	8d 50 04             	lea    edx,[eax+0x4]
c0023426:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002342c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023431:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023438:	66 85 f6             	test   si,si
c002343b:	74 5b                	je     c0023498 <IDE::open(int, int, void*)+0x31e>
c002343d:	0f b6 d2             	movzx  edx,dl
c0023440:	83 c0 05             	add    eax,0x5
c0023443:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023446:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002344a:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002344e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023454:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023459:	eb 3d                	jmp    c0023498 <IDE::open(int, int, void*)+0x31e>
c002345b:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0023461:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023468:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002346f:	66 05 06 02          	add    ax,0x206
c0023473:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002347a:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0023481:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023488:	66 05 06 02          	add    ax,0x206
c002348c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023493:	e9 e5 fe ff ff       	jmp    c002337d <IDE::open(int, int, void*)+0x203>
c0023498:	50                   	push   eax
c0023499:	50                   	push   eax
c002349a:	6a 00                	push   0x0
c002349c:	53                   	push   ebx
c002349d:	e8 60 fa ff ff       	call   c0022f02 <IDE::prepareInterrupt(unsigned char)>
c00234a2:	5a                   	pop    edx
c00234a3:	59                   	pop    ecx
c00234a4:	6a 01                	push   0x1
c00234a6:	53                   	push   ebx
c00234a7:	e8 56 fa ff ff       	call   c0022f02 <IDE::prepareInterrupt(unsigned char)>
c00234ac:	83 c4 0c             	add    esp,0xc
c00234af:	6a 00                	push   0x0
c00234b1:	6a 00                	push   0x0
c00234b3:	53                   	push   ebx
c00234b4:	e8 7b fc ff ff       	call   c0023134 <IDE::enableIRQs(unsigned char, bool)>
c00234b9:	83 c4 0c             	add    esp,0xc
c00234bc:	6a 00                	push   0x0
c00234be:	6a 01                	push   0x1
c00234c0:	53                   	push   ebx
c00234c1:	e8 6e fc ff ff       	call   c0023134 <IDE::enableIRQs(unsigned char, bool)>
c00234c6:	83 c4 10             	add    esp,0x10
c00234c9:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00234d0:	74 34                	je     c0023506 <IDE::open(int, int, void*)+0x38c>
c00234d2:	83 ec 0c             	sub    esp,0xc
c00234d5:	53                   	push   ebx
c00234d6:	6a 01                	push   0x1
c00234d8:	68 fc 30 02 c0       	push   0xc00230fc
c00234dd:	6a 0e                	push   0xe
c00234df:	53                   	push   ebx
c00234e0:	e8 9b 05 ff ff       	call   c0013a80 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234e5:	83 c4 14             	add    esp,0x14
c00234e8:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00234ee:	53                   	push   ebx
c00234ef:	6a 01                	push   0x1
c00234f1:	68 18 31 02 c0       	push   0xc0023118
c00234f6:	6a 0f                	push   0xf
c00234f8:	53                   	push   ebx
c00234f9:	e8 82 05 ff ff       	call   c0013a80 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234fe:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023504:	eb 38                	jmp    c002353e <IDE::open(int, int, void*)+0x3c4>
c0023506:	83 ec 0c             	sub    esp,0xc
c0023509:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023513:	53                   	push   ebx
c0023514:	6a 00                	push   0x0
c0023516:	68 fc 30 02 c0       	push   0xc00230fc
c002351b:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023521:	53                   	push   ebx
c0023522:	e8 59 05 ff ff       	call   c0013a80 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023527:	83 c4 14             	add    esp,0x14
c002352a:	53                   	push   ebx
c002352b:	6a 00                	push   0x0
c002352d:	68 18 31 02 c0       	push   0xc0023118
c0023532:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023538:	53                   	push   ebx
c0023539:	e8 42 05 ff ff       	call   c0013a80 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002353e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023540:	83 c4 20             	add    esp,0x20
c0023543:	83 ec 0c             	sub    esp,0xc
c0023546:	53                   	push   ebx
c0023547:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002354a:	83 c4 0c             	add    esp,0xc
c002354d:	6a 07                	push   0x7
c002354f:	6a 00                	push   0x0
c0023551:	53                   	push   ebx
c0023552:	e8 91 fa ff ff       	call   c0022fe8 <IDE::read(unsigned char, unsigned char)>
c0023557:	83 c4 0c             	add    esp,0xc
c002355a:	6a 07                	push   0x7
c002355c:	6a 01                	push   0x1
c002355e:	53                   	push   ebx
c002355f:	e8 84 fa ff ff       	call   c0022fe8 <IDE::read(unsigned char, unsigned char)>
c0023564:	83 c4 0c             	add    esp,0xc
c0023567:	6a 01                	push   0x1
c0023569:	6a 00                	push   0x0
c002356b:	53                   	push   ebx
c002356c:	e8 c3 fb ff ff       	call   c0023134 <IDE::enableIRQs(unsigned char, bool)>
c0023571:	83 c4 0c             	add    esp,0xc
c0023574:	6a 01                	push   0x1
c0023576:	6a 01                	push   0x1
c0023578:	53                   	push   ebx
c0023579:	e8 b6 fb ff ff       	call   c0023134 <IDE::enableIRQs(unsigned char, bool)>
c002357e:	83 c4 2c             	add    esp,0x2c
c0023581:	31 c0                	xor    eax,eax
c0023583:	5b                   	pop    ebx
c0023584:	5e                   	pop    esi
c0023585:	5f                   	pop    edi
c0023586:	5d                   	pop    ebp
c0023587:	c3                   	ret    

c0023588 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023588:	55                   	push   ebp
c0023589:	57                   	push   edi
c002358a:	56                   	push   esi
c002358b:	53                   	push   ebx
c002358c:	83 ec 1c             	sub    esp,0x1c
c002358f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023593:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023597:	8d 50 f8             	lea    edx,[eax-0x8]
c002359a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002359e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00235a2:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00235a6:	80 fa 03             	cmp    dl,0x3
c00235a9:	77 5d                	ja     c0023608 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00235ab:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00235af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00235b3:	0f b6 db             	movzx  ebx,bl
c00235b6:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00235b9:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00235bd:	83 ca 80             	or     edx,0xffffff80
c00235c0:	0f b6 d2             	movzx  edx,dl
c00235c3:	52                   	push   edx
c00235c4:	6a 0c                	push   0xc
c00235c6:	53                   	push   ebx
c00235c7:	56                   	push   esi
c00235c8:	e8 5b f9 ff ff       	call   c0022f28 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235cd:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00235d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00235d6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00235da:	0f b6 c0             	movzx  eax,al
c00235dd:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00235e1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00235e3:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00235e8:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00235ec:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00235f0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00235f4:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00235fc:	83 c4 2c             	add    esp,0x2c
c00235ff:	5b                   	pop    ebx
c0023600:	5e                   	pop    esi
c0023601:	5f                   	pop    edi
c0023602:	5d                   	pop    ebp
c0023603:	e9 20 f9 ff ff       	jmp    c0022f28 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023608:	3c 07                	cmp    al,0x7
c002360a:	77 10                	ja     c002361c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c002360c:	0f b6 db             	movzx  ebx,bl
c002360f:	0f b6 d0             	movzx  edx,al
c0023612:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c002361a:	eb 2d                	jmp    c0023649 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002361c:	3c 0d                	cmp    al,0xd
c002361e:	77 13                	ja     c0023633 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023620:	0f b6 db             	movzx  ebx,bl
c0023623:	0f b6 c0             	movzx  eax,al
c0023626:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c002362d:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023631:	eb 16                	jmp    c0023649 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023633:	3c 15                	cmp    al,0x15
c0023635:	77 14                	ja     c002364b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023637:	0f b6 db             	movzx  ebx,bl
c002363a:	0f b6 c0             	movzx  eax,al
c002363d:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023645:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023649:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002364b:	83 c4 1c             	add    esp,0x1c
c002364e:	5b                   	pop    ebx
c002364f:	5e                   	pop    esi
c0023650:	5f                   	pop    edi
c0023651:	5d                   	pop    ebp
c0023652:	c3                   	ret    
c0023653:	90                   	nop

c0023654 <IDE::detect()>:
c0023654:	55                   	push   ebp
c0023655:	57                   	push   edi
c0023656:	56                   	push   esi
c0023657:	53                   	push   ebx
c0023658:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002365e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023665:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002366c:	0f 85 9d 02 00 00    	jne    c002390f <IDE::detect()+0x2bb>
c0023672:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023679:	31 f6                	xor    esi,esi
c002367b:	31 ed                	xor    ebp,ebp
c002367d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023685:	89 e8                	mov    eax,ebp
c0023687:	c1 e0 06             	shl    eax,0x6
c002368a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023692:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023696:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002369a:	c1 e0 04             	shl    eax,0x4
c002369d:	83 c8 a0             	or     eax,0xffffffa0
c00236a0:	0f b6 c0             	movzx  eax,al
c00236a3:	50                   	push   eax
c00236a4:	6a 06                	push   0x6
c00236a6:	56                   	push   esi
c00236a7:	53                   	push   ebx
c00236a8:	e8 7b f8 ff ff       	call   c0022f28 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236ad:	83 c4 0c             	add    esp,0xc
c00236b0:	6a 0c                	push   0xc
c00236b2:	56                   	push   esi
c00236b3:	53                   	push   ebx
c00236b4:	e8 2f f9 ff ff       	call   c0022fe8 <IDE::read(unsigned char, unsigned char)>
c00236b9:	83 c4 0c             	add    esp,0xc
c00236bc:	6a 0c                	push   0xc
c00236be:	56                   	push   esi
c00236bf:	53                   	push   ebx
c00236c0:	e8 23 f9 ff ff       	call   c0022fe8 <IDE::read(unsigned char, unsigned char)>
c00236c5:	83 c4 0c             	add    esp,0xc
c00236c8:	6a 0c                	push   0xc
c00236ca:	56                   	push   esi
c00236cb:	53                   	push   ebx
c00236cc:	e8 17 f9 ff ff       	call   c0022fe8 <IDE::read(unsigned char, unsigned char)>
c00236d1:	83 c4 0c             	add    esp,0xc
c00236d4:	6a 0c                	push   0xc
c00236d6:	56                   	push   esi
c00236d7:	53                   	push   ebx
c00236d8:	e8 0b f9 ff ff       	call   c0022fe8 <IDE::read(unsigned char, unsigned char)>
c00236dd:	68 ec 00 00 00       	push   0xec
c00236e2:	6a 07                	push   0x7
c00236e4:	56                   	push   esi
c00236e5:	53                   	push   ebx
c00236e6:	e8 3d f8 ff ff       	call   c0022f28 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236eb:	83 c4 1c             	add    esp,0x1c
c00236ee:	6a 0c                	push   0xc
c00236f0:	56                   	push   esi
c00236f1:	53                   	push   ebx
c00236f2:	e8 f1 f8 ff ff       	call   c0022fe8 <IDE::read(unsigned char, unsigned char)>
c00236f7:	83 c4 0c             	add    esp,0xc
c00236fa:	6a 0c                	push   0xc
c00236fc:	56                   	push   esi
c00236fd:	53                   	push   ebx
c00236fe:	e8 e5 f8 ff ff       	call   c0022fe8 <IDE::read(unsigned char, unsigned char)>
c0023703:	83 c4 0c             	add    esp,0xc
c0023706:	6a 0c                	push   0xc
c0023708:	56                   	push   esi
c0023709:	53                   	push   ebx
c002370a:	e8 d9 f8 ff ff       	call   c0022fe8 <IDE::read(unsigned char, unsigned char)>
c002370f:	83 c4 0c             	add    esp,0xc
c0023712:	6a 0c                	push   0xc
c0023714:	56                   	push   esi
c0023715:	53                   	push   ebx
c0023716:	e8 cd f8 ff ff       	call   c0022fe8 <IDE::read(unsigned char, unsigned char)>
c002371b:	83 c4 0c             	add    esp,0xc
c002371e:	6a 0c                	push   0xc
c0023720:	56                   	push   esi
c0023721:	53                   	push   ebx
c0023722:	e8 c1 f8 ff ff       	call   c0022fe8 <IDE::read(unsigned char, unsigned char)>
c0023727:	83 c4 10             	add    esp,0x10
c002372a:	84 c0                	test   al,al
c002372c:	0f 84 63 01 00 00    	je     c0023895 <IDE::detect()+0x241>
c0023732:	31 ff                	xor    edi,edi
c0023734:	50                   	push   eax
c0023735:	6a 0c                	push   0xc
c0023737:	56                   	push   esi
c0023738:	53                   	push   ebx
c0023739:	e8 aa f8 ff ff       	call   c0022fe8 <IDE::read(unsigned char, unsigned char)>
c002373e:	83 c4 10             	add    esp,0x10
c0023741:	a8 01                	test   al,0x1
c0023743:	0f 85 6d 01 00 00    	jne    c00238b6 <IDE::detect()+0x262>
c0023749:	84 c0                	test   al,al
c002374b:	78 04                	js     c0023751 <IDE::detect()+0xfd>
c002374d:	a8 08                	test   al,0x8
c002374f:	75 27                	jne    c0023778 <IDE::detect()+0x124>
c0023751:	47                   	inc    edi
c0023752:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023758:	7e da                	jle    c0023734 <IDE::detect()+0xe0>
c002375a:	50                   	push   eax
c002375b:	50                   	push   eax
c002375c:	6a 00                	push   0x0
c002375e:	68 40 4b 4c 00       	push   0x4c4b40
c0023763:	e8 3d a5 ff ff       	call   c001dca5 <nanoSleep(unsigned long long)>
c0023768:	83 c4 10             	add    esp,0x10
c002376b:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023771:	75 c1                	jne    c0023734 <IDE::detect()+0xe0>
c0023773:	e9 3e 01 00 00       	jmp    c00238b6 <IDE::detect()+0x262>
c0023778:	31 c9                	xor    ecx,ecx
c002377a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002377e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023782:	83 ec 0c             	sub    esp,0xc
c0023785:	68 80 00 00 00       	push   0x80
c002378a:	57                   	push   edi
c002378b:	6a 00                	push   0x0
c002378d:	56                   	push   esi
c002378e:	53                   	push   ebx
c002378f:	e8 f4 fd ff ff       	call   c0023588 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023794:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023799:	89 e8                	mov    eax,ebp
c002379b:	89 d1                	mov    ecx,edx
c002379d:	c1 e0 06             	shl    eax,0x6
c00237a0:	01 d8                	add    eax,ebx
c00237a2:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00237a9:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00237b0:	89 f2                	mov    edx,esi
c00237b2:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00237b8:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00237bc:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00237c2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00237c6:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00237cd:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00237d5:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00237dc:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00237e4:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00237ea:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00237f1:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00237f7:	8d 54 24 58          	lea    edx,[esp+0x58]
c00237fb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00237ff:	83 c4 20             	add    esp,0x20
c0023802:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023805:	83 c0 02             	add    eax,0x2
c0023808:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002380e:	83 c7 02             	add    edi,0x2
c0023811:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023814:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002381a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002381e:	75 e2                	jne    c0023802 <IDE::detect()+0x1ae>
c0023820:	89 e8                	mov    eax,ebp
c0023822:	c1 e0 06             	shl    eax,0x6
c0023825:	01 d8                	add    eax,ebx
c0023827:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c002382d:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023834:	66 c1 ea 09          	shr    dx,0x9
c0023838:	83 e2 01             	and    edx,0x1
c002383b:	84 c9                	test   cl,cl
c002383d:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023843:	75 22                	jne    c0023867 <IDE::detect()+0x213>
c0023845:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c002384c:	74 46                	je     c0023894 <IDE::detect()+0x240>
c002384e:	83 ec 0c             	sub    esp,0xc
c0023851:	68 7c 01 00 00       	push   0x17c
c0023856:	e8 3e bd fe ff       	call   c000f599 <malloc>
c002385b:	89 c7                	mov    edi,eax
c002385d:	89 04 24             	mov    DWORD PTR [esp],eax
c0023860:	e8 15 05 00 00       	call   c0023d7a <ATA::ATA()>
c0023865:	eb 17                	jmp    c002387e <IDE::detect()+0x22a>
c0023867:	83 ec 0c             	sub    esp,0xc
c002386a:	68 80 01 00 00       	push   0x180
c002386f:	e8 25 bd fe ff       	call   c000f599 <malloc>
c0023874:	89 c7                	mov    edi,eax
c0023876:	89 04 24             	mov    DWORD PTR [esp],eax
c0023879:	e8 04 0b 00 00       	call   c0024382 <ATAPI::ATAPI()>
c002387e:	5a                   	pop    edx
c002387f:	59                   	pop    ecx
c0023880:	57                   	push   edi
c0023881:	53                   	push   ebx
c0023882:	e8 81 02 ff ff       	call   c0013b08 <Device::addChild(Device*)>
c0023887:	8b 07                	mov    eax,DWORD PTR [edi]
c0023889:	53                   	push   ebx
c002388a:	55                   	push   ebp
c002388b:	6a 00                	push   0x0
c002388d:	57                   	push   edi
c002388e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023891:	83 c4 20             	add    esp,0x20
c0023894:	45                   	inc    ebp
c0023895:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c002389a:	74 0d                	je     c00238a9 <IDE::detect()+0x255>
c002389c:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00238a4:	e9 dc fd ff ff       	jmp    c0023685 <IDE::detect()+0x31>
c00238a9:	4e                   	dec    esi
c00238aa:	74 63                	je     c002390f <IDE::detect()+0x2bb>
c00238ac:	be 01 00 00 00       	mov    esi,0x1
c00238b1:	e9 c7 fd ff ff       	jmp    c002367d <IDE::detect()+0x29>
c00238b6:	50                   	push   eax
c00238b7:	6a 04                	push   0x4
c00238b9:	56                   	push   esi
c00238ba:	53                   	push   ebx
c00238bb:	e8 28 f7 ff ff       	call   c0022fe8 <IDE::read(unsigned char, unsigned char)>
c00238c0:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00238c4:	83 c4 0c             	add    esp,0xc
c00238c7:	6a 05                	push   0x5
c00238c9:	56                   	push   esi
c00238ca:	53                   	push   ebx
c00238cb:	e8 18 f7 ff ff       	call   c0022fe8 <IDE::read(unsigned char, unsigned char)>
c00238d0:	83 c4 10             	add    esp,0x10
c00238d3:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00238d7:	80 fa 14             	cmp    dl,0x14
c00238da:	75 04                	jne    c00238e0 <IDE::detect()+0x28c>
c00238dc:	3c eb                	cmp    al,0xeb
c00238de:	eb 07                	jmp    c00238e7 <IDE::detect()+0x293>
c00238e0:	3c 96                	cmp    al,0x96
c00238e2:	75 b1                	jne    c0023895 <IDE::detect()+0x241>
c00238e4:	80 fa 69             	cmp    dl,0x69
c00238e7:	75 ac                	jne    c0023895 <IDE::detect()+0x241>
c00238e9:	68 a1 00 00 00       	push   0xa1
c00238ee:	6a 07                	push   0x7
c00238f0:	56                   	push   esi
c00238f1:	53                   	push   ebx
c00238f2:	e8 31 f6 ff ff       	call   c0022f28 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238f7:	5f                   	pop    edi
c00238f8:	58                   	pop    eax
c00238f9:	6a 00                	push   0x0
c00238fb:	68 40 42 0f 00       	push   0xf4240
c0023900:	e8 a0 a3 ff ff       	call   c001dca5 <nanoSleep(unsigned long long)>
c0023905:	83 c4 10             	add    esp,0x10
c0023908:	b1 01                	mov    cl,0x1
c002390a:	e9 6b fe ff ff       	jmp    c002377a <IDE::detect()+0x126>
c002390f:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023915:	5b                   	pop    ebx
c0023916:	5e                   	pop    esi
c0023917:	5f                   	pop    edi
c0023918:	5d                   	pop    ebp
c0023919:	c3                   	ret    

c002391a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002391a:	55                   	push   ebp
c002391b:	57                   	push   edi
c002391c:	56                   	push   esi
c002391d:	53                   	push   ebx
c002391e:	83 ec 1c             	sub    esp,0x1c
c0023921:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023925:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023929:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002392d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023931:	88 c3                	mov    bl,al
c0023933:	84 c0                	test   al,al
c0023935:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023939:	0f 84 81 00 00 00    	je     c00239c0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c002393f:	83 ec 0c             	sub    esp,0xc
c0023942:	68 83 c1 02 c0       	push   0xc002c183
c0023947:	e8 83 ed fe ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c002394c:	83 c4 10             	add    esp,0x10
c002394f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023953:	3c 01                	cmp    al,0x1
c0023955:	74 63                	je     c00239ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0023957:	3c 02                	cmp    al,0x2
c0023959:	75 53                	jne    c00239ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c002395b:	d1 e6                	shl    esi,1
c002395d:	09 ee                	or     esi,ebp
c002395f:	50                   	push   eax
c0023960:	89 f0                	mov    eax,esi
c0023962:	6a 01                	push   0x1
c0023964:	0f b6 f0             	movzx  esi,al
c0023967:	c1 e6 06             	shl    esi,0x6
c002396a:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023972:	50                   	push   eax
c0023973:	57                   	push   edi
c0023974:	e8 6f f6 ff ff       	call   c0022fe8 <IDE::read(unsigned char, unsigned char)>
c0023979:	83 c4 10             	add    esp,0x10
c002397c:	a8 01                	test   al,0x1
c002397e:	74 02                	je     c0023982 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0023980:	b3 07                	mov    bl,0x7
c0023982:	a8 02                	test   al,0x2
c0023984:	74 02                	je     c0023988 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0023986:	b3 03                	mov    bl,0x3
c0023988:	a8 04                	test   al,0x4
c002398a:	74 02                	je     c002398e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c002398c:	b3 14                	mov    bl,0x14
c002398e:	a8 08                	test   al,0x8
c0023990:	74 02                	je     c0023994 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0023992:	b3 03                	mov    bl,0x3
c0023994:	a8 10                	test   al,0x10
c0023996:	74 02                	je     c002399a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0023998:	b3 15                	mov    bl,0x15
c002399a:	a8 20                	test   al,0x20
c002399c:	74 02                	je     c00239a0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c002399e:	b3 03                	mov    bl,0x3
c00239a0:	a8 40                	test   al,0x40
c00239a2:	74 02                	je     c00239a6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c00239a4:	b3 16                	mov    bl,0x16
c00239a6:	84 c0                	test   al,al
c00239a8:	79 16                	jns    c00239c0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239aa:	b3 0d                	mov    bl,0xd
c00239ac:	eb 12                	jmp    c00239c0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239ae:	3c 03                	cmp    al,0x3
c00239b0:	74 0c                	je     c00239be <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c00239b2:	3c 04                	cmp    al,0x4
c00239b4:	75 0a                	jne    c00239c0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239b6:	b3 08                	mov    bl,0x8
c00239b8:	eb 06                	jmp    c00239c0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239ba:	b3 13                	mov    bl,0x13
c00239bc:	eb 02                	jmp    c00239c0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239be:	b3 17                	mov    bl,0x17
c00239c0:	83 c4 1c             	add    esp,0x1c
c00239c3:	88 d8                	mov    al,bl
c00239c5:	5b                   	pop    ebx
c00239c6:	5e                   	pop    esi
c00239c7:	5f                   	pop    edi
c00239c8:	5d                   	pop    ebp
c00239c9:	c3                   	ret    

c00239ca <IDE::polling(unsigned char, unsigned int)>:
c00239ca:	57                   	push   edi
c00239cb:	56                   	push   esi
c00239cc:	53                   	push   ebx
c00239cd:	bb 04 00 00 00       	mov    ebx,0x4
c00239d2:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00239d6:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00239db:	52                   	push   edx
c00239dc:	6a 0c                	push   0xc
c00239de:	56                   	push   esi
c00239df:	57                   	push   edi
c00239e0:	e8 03 f6 ff ff       	call   c0022fe8 <IDE::read(unsigned char, unsigned char)>
c00239e5:	83 c4 10             	add    esp,0x10
c00239e8:	4b                   	dec    ebx
c00239e9:	75 f0                	jne    c00239db <IDE::polling(unsigned char, unsigned int)+0x11>
c00239eb:	bb a0 86 01 00       	mov    ebx,0x186a0
c00239f0:	50                   	push   eax
c00239f1:	6a 0c                	push   0xc
c00239f3:	56                   	push   esi
c00239f4:	57                   	push   edi
c00239f5:	e8 ee f5 ff ff       	call   c0022fe8 <IDE::read(unsigned char, unsigned char)>
c00239fa:	83 c4 10             	add    esp,0x10
c00239fd:	a8 01                	test   al,0x1
c00239ff:	75 17                	jne    c0023a18 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023a01:	a8 20                	test   al,0x20
c0023a03:	75 0f                	jne    c0023a14 <IDE::polling(unsigned char, unsigned int)+0x4a>
c0023a05:	4b                   	dec    ebx
c0023a06:	74 10                	je     c0023a18 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023a08:	84 c0                	test   al,al
c0023a0a:	78 e4                	js     c00239f0 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023a0c:	a8 08                	test   al,0x8
c0023a0e:	74 e0                	je     c00239f0 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023a10:	31 c0                	xor    eax,eax
c0023a12:	eb 06                	jmp    c0023a1a <IDE::polling(unsigned char, unsigned int)+0x50>
c0023a14:	b0 01                	mov    al,0x1
c0023a16:	eb 02                	jmp    c0023a1a <IDE::polling(unsigned char, unsigned int)+0x50>
c0023a18:	b0 02                	mov    al,0x2
c0023a1a:	5b                   	pop    ebx
c0023a1b:	5e                   	pop    esi
c0023a1c:	5f                   	pop    edi
c0023a1d:	c3                   	ret    

c0023a1e <SATABus::close(int, int, void*)>:
c0023a1e:	31 c0                	xor    eax,eax
c0023a20:	c3                   	ret    
c0023a21:	90                   	nop

c0023a22 <SATABus::detect()>:
c0023a22:	c3                   	ret    
c0023a23:	90                   	nop

c0023a24 <SATABus::SATABus()>:
c0023a24:	83 ec 0c             	sub    esp,0xc
c0023a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a2b:	83 ec 08             	sub    esp,0x8
c0023a2e:	68 bc c1 02 c0       	push   0xc002c1bc
c0023a33:	50                   	push   eax
c0023a34:	e8 7d 04 ff ff       	call   c0013eb6 <HardDiskController::HardDiskController(char const*)>
c0023a39:	83 c4 10             	add    esp,0x10
c0023a3c:	ba 10 c2 02 c0       	mov    edx,0xc002c210
c0023a41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a45:	89 10                	mov    DWORD PTR [eax],edx
c0023a47:	83 ec 0c             	sub    esp,0xc
c0023a4a:	6a 50                	push   0x50
c0023a4c:	e8 3c c0 fe ff       	call   c000fa8d <Phys::allocateContiguousPages(int)>
c0023a51:	83 c4 10             	add    esp,0x10
c0023a54:	89 c2                	mov    edx,eax
c0023a56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a5a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023a60:	83 ec 0c             	sub    esp,0xc
c0023a63:	6a 50                	push   0x50
c0023a65:	e8 b5 d7 fe ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0023a6a:	83 c4 10             	add    esp,0x10
c0023a6d:	89 c2                	mov    edx,eax
c0023a6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a73:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023a79:	a1 30 db 02 c0       	mov    eax,ds:0xc002db30
c0023a7e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023a82:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023a88:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023a8c:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023a92:	83 ec 0c             	sub    esp,0xc
c0023a95:	6a 03                	push   0x3
c0023a97:	6a 50                	push   0x50
c0023a99:	51                   	push   ecx
c0023a9a:	52                   	push   edx
c0023a9b:	50                   	push   eax
c0023a9c:	e8 31 e2 fe ff       	call   c0011cd2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023aa1:	83 c4 20             	add    esp,0x20
c0023aa4:	90                   	nop
c0023aa5:	83 c4 0c             	add    esp,0xc
c0023aa8:	c3                   	ret    
c0023aa9:	90                   	nop

c0023aaa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023aaa:	83 ec 0c             	sub    esp,0xc
c0023aad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023ab1:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023ab4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023ab7:	09 c2                	or     edx,eax
c0023ab9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023abd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023ac3:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023ac5:	31 c0                	xor    eax,eax
c0023ac7:	c1 e9 08             	shr    ecx,0x8
c0023aca:	83 e1 0f             	and    ecx,0xf
c0023acd:	39 c8                	cmp    eax,ecx
c0023acf:	74 0a                	je     c0023adb <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023ad1:	f6 c2 01             	test   dl,0x1
c0023ad4:	74 18                	je     c0023aee <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023ad6:	d1 ea                	shr    edx,1
c0023ad8:	40                   	inc    eax
c0023ad9:	eb f2                	jmp    c0023acd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023adb:	83 ec 0c             	sub    esp,0xc
c0023ade:	68 e0 c1 02 c0       	push   0xc002c1e0
c0023ae3:	e8 53 63 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c0023ae8:	83 c4 10             	add    esp,0x10
c0023aeb:	83 c8 ff             	or     eax,0xffffffff
c0023aee:	83 c4 0c             	add    esp,0xc
c0023af1:	c3                   	ret    

c0023af2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023af2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023af6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023af9:	89 c2                	mov    edx,eax
c0023afb:	c1 ea 08             	shr    edx,0x8
c0023afe:	83 e2 0f             	and    edx,0xf
c0023b01:	fe ca                	dec    dl
c0023b03:	75 31                	jne    c0023b36 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023b05:	83 e0 0f             	and    eax,0xf
c0023b08:	3c 03                	cmp    al,0x3
c0023b0a:	75 2a                	jne    c0023b36 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023b0c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023b0f:	b8 02 00 00 00       	mov    eax,0x2
c0023b14:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023b1a:	74 1c                	je     c0023b38 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023b1c:	b8 04 00 00 00       	mov    eax,0x4
c0023b21:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023b27:	74 0f                	je     c0023b38 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023b29:	31 c0                	xor    eax,eax
c0023b2b:	83 fa 03             	cmp    edx,0x3
c0023b2e:	0f 94 c0             	sete   al
c0023b31:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023b35:	c3                   	ret    
c0023b36:	31 c0                	xor    eax,eax
c0023b38:	c3                   	ret    
c0023b39:	90                   	nop

c0023b3a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023b3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023b3e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b41:	0f ba e2 0f          	bt     edx,0xf
c0023b45:	72 f7                	jb     c0023b3e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023b47:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b4a:	83 ca 10             	or     edx,0x10
c0023b4d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b50:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b53:	83 ca 01             	or     edx,0x1
c0023b56:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b59:	c3                   	ret    

c0023b5a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023b5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023b5e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b61:	83 e2 fe             	and    edx,0xfffffffe
c0023b64:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b67:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b6a:	83 e2 ef             	and    edx,0xffffffef
c0023b6d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b70:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b73:	0f ba e2 0e          	bt     edx,0xe
c0023b77:	72 f7                	jb     c0023b70 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023b79:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b7c:	0f ba e2 0f          	bt     edx,0xf
c0023b80:	72 ee                	jb     c0023b70 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023b82:	c3                   	ret    
c0023b83:	90                   	nop

c0023b84 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023b84:	55                   	push   ebp
c0023b85:	57                   	push   edi
c0023b86:	56                   	push   esi
c0023b87:	53                   	push   ebx
c0023b88:	83 ec 1c             	sub    esp,0x1c
c0023b8b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023b8f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023b93:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023b97:	53                   	push   ebx
c0023b98:	89 fd                	mov    ebp,edi
c0023b9a:	56                   	push   esi
c0023b9b:	c1 e5 0a             	shl    ebp,0xa
c0023b9e:	e8 b7 ff ff ff       	call   c0023b5a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023ba3:	83 ec 0c             	sub    esp,0xc
c0023ba6:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023bac:	01 e8                	add    eax,ebp
c0023bae:	89 03                	mov    DWORD PTR [ebx],eax
c0023bb0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023bb2:	68 00 04 00 00       	push   0x400
c0023bb7:	6a 00                	push   0x0
c0023bb9:	50                   	push   eax
c0023bba:	e8 91 cb fd ff       	call   c0000750 <memset>
c0023bbf:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023bc5:	89 fa                	mov    edx,edi
c0023bc7:	01 e8                	add    eax,ebp
c0023bc9:	c1 e7 0d             	shl    edi,0xd
c0023bcc:	89 03                	mov    DWORD PTR [ebx],eax
c0023bce:	c1 e2 08             	shl    edx,0x8
c0023bd1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023bd8:	81 c2 00 80 00 00    	add    edx,0x8000
c0023bde:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023be2:	89 d0                	mov    eax,edx
c0023be4:	83 c4 1c             	add    esp,0x1c
c0023be7:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023bed:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023bf0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023bf3:	68 00 01 00 00       	push   0x100
c0023bf8:	6a 00                	push   0x0
c0023bfa:	50                   	push   eax
c0023bfb:	e8 50 cb fd ff       	call   c0000750 <memset>
c0023c00:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023c04:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023c0a:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023c10:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023c14:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023c17:	83 c4 10             	add    esp,0x10
c0023c1a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023c21:	31 ff                	xor    edi,edi
c0023c23:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023c29:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023c2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023c33:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023c39:	83 c5 20             	add    ebp,0x20
c0023c3c:	01 f8                	add    eax,edi
c0023c3e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023c41:	52                   	push   edx
c0023c42:	68 00 01 00 00       	push   0x100
c0023c47:	6a 00                	push   0x0
c0023c49:	50                   	push   eax
c0023c4a:	e8 01 cb fd ff       	call   c0000750 <memset>
c0023c4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023c53:	83 c4 10             	add    esp,0x10
c0023c56:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023c5c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023c63:	01 f8                	add    eax,edi
c0023c65:	81 c7 00 01 00 00    	add    edi,0x100
c0023c6b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023c6e:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023c74:	75 b3                	jne    c0023c29 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023c76:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023c7a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023c7e:	83 c4 1c             	add    esp,0x1c
c0023c81:	5b                   	pop    ebx
c0023c82:	5e                   	pop    esi
c0023c83:	5f                   	pop    edi
c0023c84:	5d                   	pop    ebp
c0023c85:	e9 b0 fe ff ff       	jmp    c0023b3a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023c8a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023c8a:	55                   	push   ebp
c0023c8b:	57                   	push   edi
c0023c8c:	56                   	push   esi
c0023c8d:	53                   	push   ebx
c0023c8e:	31 db                	xor    ebx,ebx
c0023c90:	83 ec 0c             	sub    esp,0xc
c0023c93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023c97:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023c9b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023c9e:	f7 c7 01 00 00 00    	test   edi,0x1
c0023ca4:	74 7a                	je     c0023d20 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023ca6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023caa:	89 d8                	mov    eax,ebx
c0023cac:	c1 e0 07             	shl    eax,0x7
c0023caf:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0023cb6:	55                   	push   ebp
c0023cb7:	56                   	push   esi
c0023cb8:	e8 35 fe ff ff       	call   c0023af2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023cbd:	5a                   	pop    edx
c0023cbe:	83 f8 01             	cmp    eax,0x1
c0023cc1:	59                   	pop    ecx
c0023cc2:	75 21                	jne    c0023ce5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0023cc4:	50                   	push   eax
c0023cc5:	53                   	push   ebx
c0023cc6:	55                   	push   ebp
c0023cc7:	56                   	push   esi
c0023cc8:	e8 b7 fe ff ff       	call   c0023b84 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023ccd:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023cd4:	e8 c0 b8 fe ff       	call   c000f599 <malloc>
c0023cd9:	89 c5                	mov    ebp,eax
c0023cdb:	89 04 24             	mov    DWORD PTR [esp],eax
c0023cde:	e8 03 0d 00 00       	call   c00249e6 <SATA::SATA()>
c0023ce3:	eb 24                	jmp    c0023d09 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0023ce5:	83 f8 04             	cmp    eax,0x4
c0023ce8:	75 36                	jne    c0023d20 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023cea:	51                   	push   ecx
c0023ceb:	53                   	push   ebx
c0023cec:	55                   	push   ebp
c0023ced:	56                   	push   esi
c0023cee:	e8 91 fe ff ff       	call   c0023b84 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023cf3:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023cfa:	e8 9a b8 fe ff       	call   c000f599 <malloc>
c0023cff:	89 c5                	mov    ebp,eax
c0023d01:	89 04 24             	mov    DWORD PTR [esp],eax
c0023d04:	e8 53 10 00 00       	call   c0024d5c <SATAPI::SATAPI()>
c0023d09:	58                   	pop    eax
c0023d0a:	5a                   	pop    edx
c0023d0b:	55                   	push   ebp
c0023d0c:	56                   	push   esi
c0023d0d:	e8 f6 fd fe ff       	call   c0013b08 <Device::addChild(Device*)>
c0023d12:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0023d15:	56                   	push   esi
c0023d16:	6a 00                	push   0x0
c0023d18:	53                   	push   ebx
c0023d19:	55                   	push   ebp
c0023d1a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0023d1d:	83 c4 20             	add    esp,0x20
c0023d20:	d1 ef                	shr    edi,1
c0023d22:	43                   	inc    ebx
c0023d23:	83 fb 20             	cmp    ebx,0x20
c0023d26:	0f 85 72 ff ff ff    	jne    c0023c9e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023d2c:	83 c4 0c             	add    esp,0xc
c0023d2f:	5b                   	pop    ebx
c0023d30:	5e                   	pop    esi
c0023d31:	5f                   	pop    edi
c0023d32:	5d                   	pop    ebp
c0023d33:	c3                   	ret    

c0023d34 <SATABus::open(int, int, void*)>:
c0023d34:	83 ec 14             	sub    esp,0x14
c0023d37:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023d3b:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023d41:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023d47:	52                   	push   edx
c0023d48:	50                   	push   eax
c0023d49:	e8 3c ff ff ff       	call   c0023c8a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023d4e:	31 c0                	xor    eax,eax
c0023d50:	83 c4 1c             	add    esp,0x1c
c0023d53:	c3                   	ret    

c0023d54 <ATA::close(int, int, void*)>:
c0023d54:	83 ec 0c             	sub    esp,0xc
c0023d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d5b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023d61:	85 c0                	test   eax,eax
c0023d63:	74 0c                	je     c0023d71 <ATA::close(int, int, void*)+0x1d>
c0023d65:	83 ec 0c             	sub    esp,0xc
c0023d68:	8b 10                	mov    edx,DWORD PTR [eax]
c0023d6a:	50                   	push   eax
c0023d6b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023d6e:	83 c4 10             	add    esp,0x10
c0023d71:	31 c0                	xor    eax,eax
c0023d73:	83 c4 0c             	add    esp,0xc
c0023d76:	c3                   	ret    
c0023d77:	90                   	nop

c0023d78 <ATA::powerSaving(PowerSavingLevel)>:
c0023d78:	c3                   	ret    
c0023d79:	90                   	nop

c0023d7a <ATA::ATA()>:
c0023d7a:	83 ec 0c             	sub    esp,0xc
c0023d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d81:	83 ec 04             	sub    esp,0x4
c0023d84:	68 00 02 00 00       	push   0x200
c0023d89:	68 d9 c2 02 c0       	push   0xc002c2d9
c0023d8e:	50                   	push   eax
c0023d8f:	e8 aa 01 ff ff       	call   c0013f3e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023d94:	83 c4 10             	add    esp,0x10
c0023d97:	ba 5c c2 02 c0       	mov    edx,0xc002c25c
c0023d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023da0:	89 10                	mov    DWORD PTR [eax],edx
c0023da2:	90                   	nop
c0023da3:	83 c4 0c             	add    esp,0xc
c0023da6:	c3                   	ret    
c0023da7:	90                   	nop

c0023da8 <ATA::flush(bool)>:
c0023da8:	53                   	push   ebx
c0023da9:	83 ec 08             	sub    esp,0x8
c0023dac:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023db1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023db5:	19 c0                	sbb    eax,eax
c0023db7:	83 e0 fd             	and    eax,0xfffffffd
c0023dba:	05 ea 00 00 00       	add    eax,0xea
c0023dbf:	50                   	push   eax
c0023dc0:	6a 07                	push   0x7
c0023dc2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023dc9:	50                   	push   eax
c0023dca:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023dd0:	e8 53 f1 ff ff       	call   c0022f28 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023dd5:	83 c4 0c             	add    esp,0xc
c0023dd8:	6a 00                	push   0x0
c0023dda:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023de1:	50                   	push   eax
c0023de2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023de8:	e8 dd fb ff ff       	call   c00239ca <IDE::polling(unsigned char, unsigned int)>
c0023ded:	83 c4 18             	add    esp,0x18
c0023df0:	5b                   	pop    ebx
c0023df1:	c3                   	ret    

c0023df2 <ATA::readyForCommand()>:
c0023df2:	56                   	push   esi
c0023df3:	53                   	push   ebx
c0023df4:	31 db                	xor    ebx,ebx
c0023df6:	50                   	push   eax
c0023df7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023dfb:	50                   	push   eax
c0023dfc:	6a 0c                	push   0xc
c0023dfe:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023e05:	50                   	push   eax
c0023e06:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023e0c:	e8 d7 f1 ff ff       	call   c0022fe8 <IDE::read(unsigned char, unsigned char)>
c0023e11:	83 c4 10             	add    esp,0x10
c0023e14:	a8 88                	test   al,0x88
c0023e16:	74 23                	je     c0023e3b <ATA::readyForCommand()+0x49>
c0023e18:	43                   	inc    ebx
c0023e19:	83 fb 63             	cmp    ebx,0x63
c0023e1c:	7e dd                	jle    c0023dfb <ATA::readyForCommand()+0x9>
c0023e1e:	51                   	push   ecx
c0023e1f:	51                   	push   ecx
c0023e20:	6a 00                	push   0x0
c0023e22:	68 40 42 0f 00       	push   0xf4240
c0023e27:	e8 79 9e ff ff       	call   c001dca5 <nanoSleep(unsigned long long)>
c0023e2c:	83 c4 10             	add    esp,0x10
c0023e2f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023e35:	75 c4                	jne    c0023dfb <ATA::readyForCommand()+0x9>
c0023e37:	31 c0                	xor    eax,eax
c0023e39:	eb 02                	jmp    c0023e3d <ATA::readyForCommand()+0x4b>
c0023e3b:	b0 01                	mov    al,0x1
c0023e3d:	5a                   	pop    edx
c0023e3e:	5b                   	pop    ebx
c0023e3f:	5e                   	pop    esi
c0023e40:	c3                   	ret    
c0023e41:	90                   	nop

c0023e42 <ATA::access(unsigned long long, int, void*, bool)>:
c0023e42:	55                   	push   ebp
c0023e43:	57                   	push   edi
c0023e44:	56                   	push   esi
c0023e45:	53                   	push   ebx
c0023e46:	83 ec 2c             	sub    esp,0x2c
c0023e49:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023e4d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023e51:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023e55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023e59:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023e5d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023e61:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023e65:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023e6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023e6f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023e75:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023e79:	c1 e0 06             	shl    eax,0x6
c0023e7c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023e84:	74 5d                	je     c0023ee3 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023e86:	89 fa                	mov    edx,edi
c0023e88:	89 f0                	mov    eax,esi
c0023e8a:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023e8e:	c1 ea 1c             	shr    edx,0x1c
c0023e91:	89 d1                	mov    ecx,edx
c0023e93:	09 c1                	or     ecx,eax
c0023e95:	74 25                	je     c0023ebc <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023e97:	31 ed                	xor    ebp,ebp
c0023e99:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023ea0:	89 fa                	mov    edx,edi
c0023ea2:	89 f0                	mov    eax,esi
c0023ea4:	0f ad d0             	shrd   eax,edx,cl
c0023ea7:	d3 ea                	shr    edx,cl
c0023ea9:	f6 c1 20             	test   cl,0x20
c0023eac:	74 02                	je     c0023eb0 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023eae:	89 d0                	mov    eax,edx
c0023eb0:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023eb4:	45                   	inc    ebp
c0023eb5:	83 fd 06             	cmp    ebp,0x6
c0023eb8:	75 df                	jne    c0023e99 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023eba:	eb 76                	jmp    c0023f32 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023ebc:	89 f0                	mov    eax,esi
c0023ebe:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023ec3:	89 fa                	mov    edx,edi
c0023ec5:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023ecc:	0f ac d0 10          	shrd   eax,edx,0x10
c0023ed0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023ed5:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023ed9:	c1 ee 18             	shr    esi,0x18
c0023edc:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023ee1:	eb 56                	jmp    c0023f39 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023ee3:	6a 00                	push   0x0
c0023ee5:	6a 3f                	push   0x3f
c0023ee7:	57                   	push   edi
c0023ee8:	56                   	push   esi
c0023ee9:	e8 26 29 00 00       	call   c0026814 <__umoddi3>
c0023eee:	83 c4 10             	add    esp,0x10
c0023ef1:	40                   	inc    eax
c0023ef2:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023ef6:	6a 00                	push   0x0
c0023ef8:	68 f0 03 00 00       	push   0x3f0
c0023efd:	57                   	push   edi
c0023efe:	56                   	push   esi
c0023eff:	e8 10 28 00 00       	call   c0026714 <__udivdi3>
c0023f04:	83 c4 10             	add    esp,0x10
c0023f07:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023f0c:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023f13:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023f18:	6a 00                	push   0x0
c0023f1a:	6a 3f                	push   0x3f
c0023f1c:	57                   	push   edi
c0023f1d:	56                   	push   esi
c0023f1e:	e8 f1 27 00 00       	call   c0026714 <__udivdi3>
c0023f23:	83 c4 10             	add    esp,0x10
c0023f26:	89 c6                	mov    esi,eax
c0023f28:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023f2d:	83 e6 0f             	and    esi,0xf
c0023f30:	eb 07                	jmp    c0023f39 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023f32:	31 f6                	xor    esi,esi
c0023f34:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023f39:	bf 01 00 00 00       	mov    edi,0x1
c0023f3e:	50                   	push   eax
c0023f3f:	6a 00                	push   0x0
c0023f41:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f48:	50                   	push   eax
c0023f49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023f4d:	e8 e2 f1 ff ff       	call   c0023134 <IDE::enableIRQs(unsigned char, bool)>
c0023f52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023f55:	e8 98 fe ff ff       	call   c0023df2 <ATA::readyForCommand()>
c0023f5a:	83 c4 10             	add    esp,0x10
c0023f5d:	84 c0                	test   al,al
c0023f5f:	0f 84 5a 02 00 00    	je     c00241bf <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023f65:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023f6b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023f71:	c1 e0 04             	shl    eax,0x4
c0023f74:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023f7b:	09 c6                	or     esi,eax
c0023f7d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023f82:	75 05                	jne    c0023f89 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023f84:	83 ce a0             	or     esi,0xffffffa0
c0023f87:	eb 03                	jmp    c0023f8c <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023f89:	83 ce e0             	or     esi,0xffffffe0
c0023f8c:	89 f0                	mov    eax,esi
c0023f8e:	0f b6 f0             	movzx  esi,al
c0023f91:	56                   	push   esi
c0023f92:	6a 06                	push   0x6
c0023f94:	51                   	push   ecx
c0023f95:	52                   	push   edx
c0023f96:	e8 8d ef ff ff       	call   c0022f28 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f9b:	83 c4 10             	add    esp,0x10
c0023f9e:	6a 00                	push   0x0
c0023fa0:	6a 01                	push   0x1
c0023fa2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fa9:	50                   	push   eax
c0023faa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fb0:	e8 73 ef ff ff       	call   c0022f28 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fb5:	83 c4 10             	add    esp,0x10
c0023fb8:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023fbd:	75 6e                	jne    c002402d <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023fbf:	6a 00                	push   0x0
c0023fc1:	6a 08                	push   0x8
c0023fc3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fca:	50                   	push   eax
c0023fcb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fd1:	e8 52 ef ff ff       	call   c0022f28 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fd6:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023fdb:	50                   	push   eax
c0023fdc:	6a 09                	push   0x9
c0023fde:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fe5:	50                   	push   eax
c0023fe6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fec:	e8 37 ef ff ff       	call   c0022f28 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ff1:	83 c4 20             	add    esp,0x20
c0023ff4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0023ff9:	50                   	push   eax
c0023ffa:	6a 0a                	push   0xa
c0023ffc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024003:	50                   	push   eax
c0024004:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002400a:	e8 19 ef ff ff       	call   c0022f28 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002400f:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024014:	50                   	push   eax
c0024015:	6a 0b                	push   0xb
c0024017:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002401e:	50                   	push   eax
c002401f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024025:	e8 fe ee ff ff       	call   c0022f28 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002402a:	83 c4 20             	add    esp,0x20
c002402d:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024032:	50                   	push   eax
c0024033:	6a 02                	push   0x2
c0024035:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002403c:	50                   	push   eax
c002403d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024043:	e8 e0 ee ff ff       	call   c0022f28 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024048:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002404d:	50                   	push   eax
c002404e:	6a 03                	push   0x3
c0024050:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024057:	50                   	push   eax
c0024058:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002405e:	e8 c5 ee ff ff       	call   c0022f28 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024063:	83 c4 20             	add    esp,0x20
c0024066:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002406b:	50                   	push   eax
c002406c:	6a 04                	push   0x4
c002406e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024075:	50                   	push   eax
c0024076:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002407c:	e8 a7 ee ff ff       	call   c0022f28 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024081:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024086:	50                   	push   eax
c0024087:	6a 05                	push   0x5
c0024089:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024090:	50                   	push   eax
c0024091:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024097:	e8 8c ee ff ff       	call   c0022f28 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002409c:	83 c4 20             	add    esp,0x20
c002409f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00240a4:	0f 94 c0             	sete   al
c00240a7:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00240ac:	74 09                	je     c00240b7 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00240ae:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00240b5:	eb 07                	jmp    c00240be <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00240b7:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00240be:	0f b6 c0             	movzx  eax,al
c00240c1:	50                   	push   eax
c00240c2:	6a 07                	push   0x7
c00240c4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240cb:	50                   	push   eax
c00240cc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240d2:	e8 51 ee ff ff       	call   c0022f28 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240d7:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00240db:	83 c4 10             	add    esp,0x10
c00240de:	85 f6                	test   esi,esi
c00240e0:	0f 84 ba 00 00 00    	je     c00241a0 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c00240e6:	50                   	push   eax
c00240e7:	6a 01                	push   0x1
c00240e9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240f0:	50                   	push   eax
c00240f1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240f7:	e8 ce f8 ff ff       	call   c00239ca <IDE::polling(unsigned char, unsigned int)>
c00240fc:	83 c4 10             	add    esp,0x10
c00240ff:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024105:	84 c0                	test   al,al
c0024107:	74 2c                	je     c0024135 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024109:	0f b6 f8             	movzx  edi,al
c002410c:	0f b6 d2             	movzx  edx,dl
c002410f:	57                   	push   edi
c0024110:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024117:	50                   	push   eax
c0024118:	52                   	push   edx
c0024119:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002411f:	e8 f6 f7 ff ff       	call   c002391a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024124:	c7 04 24 34 c2 02 c0 	mov    DWORD PTR [esp],0xc002c234
c002412b:	e8 9f e5 fe ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0024130:	e9 87 00 00 00       	jmp    c00241bc <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024135:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002413a:	74 33                	je     c002416f <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c002413c:	31 ed                	xor    ebp,ebp
c002413e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024142:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024146:	50                   	push   eax
c0024147:	50                   	push   eax
c0024148:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002414f:	50                   	push   eax
c0024150:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024156:	e8 bb ed ff ff       	call   c0022f16 <IDE::getBase(unsigned char)>
c002415b:	89 c2                	mov    edx,eax
c002415d:	89 f8                	mov    eax,edi
c002415f:	66 ef                	out    dx,ax
c0024161:	45                   	inc    ebp
c0024162:	83 c4 10             	add    esp,0x10
c0024165:	81 fd 00 01 00 00    	cmp    ebp,0x100
c002416b:	75 d1                	jne    c002413e <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c002416d:	eb 23                	jmp    c0024192 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c002416f:	0f b6 d2             	movzx  edx,dl
c0024172:	51                   	push   ecx
c0024173:	51                   	push   ecx
c0024174:	52                   	push   edx
c0024175:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002417b:	e8 96 ed ff ff       	call   c0022f16 <IDE::getBase(unsigned char)>
c0024180:	b9 00 01 00 00       	mov    ecx,0x100
c0024185:	89 c2                	mov    edx,eax
c0024187:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002418b:	fc                   	cld    
c002418c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002418f:	83 c4 10             	add    esp,0x10
c0024192:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002419a:	4e                   	dec    esi
c002419b:	e9 3e ff ff ff       	jmp    c00240de <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c00241a0:	31 ff                	xor    edi,edi
c00241a2:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00241a7:	74 16                	je     c00241bf <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00241a9:	50                   	push   eax
c00241aa:	50                   	push   eax
c00241ab:	31 c0                	xor    eax,eax
c00241ad:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00241b2:	0f 94 c0             	sete   al
c00241b5:	50                   	push   eax
c00241b6:	53                   	push   ebx
c00241b7:	e8 ec fb ff ff       	call   c0023da8 <ATA::flush(bool)>
c00241bc:	83 c4 10             	add    esp,0x10
c00241bf:	83 c4 2c             	add    esp,0x2c
c00241c2:	89 f8                	mov    eax,edi
c00241c4:	5b                   	pop    ebx
c00241c5:	5e                   	pop    esi
c00241c6:	5f                   	pop    edi
c00241c7:	5d                   	pop    ebp
c00241c8:	c3                   	ret    
c00241c9:	90                   	nop

c00241ca <ATA::read(unsigned long long, int, void*)>:
c00241ca:	57                   	push   edi
c00241cb:	b8 04 00 00 00       	mov    eax,0x4
c00241d0:	56                   	push   esi
c00241d1:	53                   	push   ebx
c00241d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00241d6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00241da:	8d 7a ff             	lea    edi,[edx-0x1]
c00241dd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00241e1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00241e5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00241eb:	77 25                	ja     c0024212 <ATA::read(unsigned long long, int, void*)+0x48>
c00241ed:	b8 06 00 00 00       	mov    eax,0x6
c00241f2:	85 f6                	test   esi,esi
c00241f4:	74 1c                	je     c0024212 <ATA::read(unsigned long long, int, void*)+0x48>
c00241f6:	50                   	push   eax
c00241f7:	50                   	push   eax
c00241f8:	6a 00                	push   0x0
c00241fa:	56                   	push   esi
c00241fb:	52                   	push   edx
c00241fc:	53                   	push   ebx
c00241fd:	51                   	push   ecx
c00241fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024202:	e8 3b fc ff ff       	call   c0023e42 <ATA::access(unsigned long long, int, void*, bool)>
c0024207:	83 c4 20             	add    esp,0x20
c002420a:	85 c0                	test   eax,eax
c002420c:	0f 95 c0             	setne  al
c002420f:	0f b6 c0             	movzx  eax,al
c0024212:	5b                   	pop    ebx
c0024213:	5e                   	pop    esi
c0024214:	5f                   	pop    edi
c0024215:	c3                   	ret    

c0024216 <ATA::write(unsigned long long, int, void*)>:
c0024216:	57                   	push   edi
c0024217:	b8 04 00 00 00       	mov    eax,0x4
c002421c:	56                   	push   esi
c002421d:	53                   	push   ebx
c002421e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024222:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024226:	8d 7a ff             	lea    edi,[edx-0x1]
c0024229:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002422d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024231:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024237:	77 25                	ja     c002425e <ATA::write(unsigned long long, int, void*)+0x48>
c0024239:	b8 06 00 00 00       	mov    eax,0x6
c002423e:	85 f6                	test   esi,esi
c0024240:	74 1c                	je     c002425e <ATA::write(unsigned long long, int, void*)+0x48>
c0024242:	50                   	push   eax
c0024243:	50                   	push   eax
c0024244:	6a 01                	push   0x1
c0024246:	56                   	push   esi
c0024247:	52                   	push   edx
c0024248:	53                   	push   ebx
c0024249:	51                   	push   ecx
c002424a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002424e:	e8 ef fb ff ff       	call   c0023e42 <ATA::access(unsigned long long, int, void*, bool)>
c0024253:	83 c4 20             	add    esp,0x20
c0024256:	85 c0                	test   eax,eax
c0024258:	0f 95 c0             	setne  al
c002425b:	0f b6 c0             	movzx  eax,al
c002425e:	5b                   	pop    ebx
c002425f:	5e                   	pop    esi
c0024260:	5f                   	pop    edi
c0024261:	c3                   	ret    

c0024262 <ATA::detectCHS()>:
c0024262:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024266:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002426c:	c1 e0 06             	shl    eax,0x6
c002426f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024275:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002427f:	c7 44 24 04 3f c2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c23f
c0024287:	e9 af 5b ff ff       	jmp    c0019e3b <Krnl::panic(char const*)>

c002428c <ATA::open(int, int, void*)>:
c002428c:	53                   	push   ebx
c002428d:	83 ec 08             	sub    esp,0x8
c0024290:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024294:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024298:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002429c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00242a2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00242a8:	c1 e0 06             	shl    eax,0x6
c00242ab:	01 d0                	add    eax,edx
c00242ad:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00242b4:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00242ba:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00242c1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00242cb:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00242d1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00242d8:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00242df:	75 0c                	jne    c00242ed <ATA::open(int, int, void*)+0x61>
c00242e1:	83 ec 0c             	sub    esp,0xc
c00242e4:	53                   	push   ebx
c00242e5:	e8 78 ff ff ff       	call   c0024262 <ATA::detectCHS()>
c00242ea:	83 c4 10             	add    esp,0x10
c00242ed:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00242f3:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00242f9:	c1 e0 06             	shl    eax,0x6
c00242fc:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024303:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002430d:	d1 e8                	shr    eax,1
c002430f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024315:	6a 04                	push   0x4
c0024317:	6a 0c                	push   0xc
c0024319:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024320:	50                   	push   eax
c0024321:	52                   	push   edx
c0024322:	e8 01 ec ff ff       	call   c0022f28 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024327:	90                   	nop
c0024328:	90                   	nop
c0024329:	6a 00                	push   0x0
c002432b:	6a 0c                	push   0xc
c002432d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024334:	50                   	push   eax
c0024335:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002433b:	e8 e8 eb ff ff       	call   c0022f28 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024340:	83 c4 14             	add    esp,0x14
c0024343:	53                   	push   ebx
c0024344:	e8 5d fc fe ff       	call   c0013fa6 <PhysicalDisk::startCache()>
c0024349:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002434c:	e8 d7 1e ff ff       	call   c0016228 <createPartitionsForDisk(PhysicalDisk*)>
c0024351:	31 c0                	xor    eax,eax
c0024353:	83 c4 18             	add    esp,0x18
c0024356:	5b                   	pop    ebx
c0024357:	c3                   	ret    

c0024358 <ATAPI::write(unsigned long long, int, void*)>:
c0024358:	b8 03 00 00 00       	mov    eax,0x3
c002435d:	c3                   	ret    

c002435e <ATAPI::close(int, int, void*)>:
c002435e:	83 ec 0c             	sub    esp,0xc
c0024361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024365:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002436b:	85 c0                	test   eax,eax
c002436d:	74 0c                	je     c002437b <ATAPI::close(int, int, void*)+0x1d>
c002436f:	83 ec 0c             	sub    esp,0xc
c0024372:	8b 10                	mov    edx,DWORD PTR [eax]
c0024374:	50                   	push   eax
c0024375:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024378:	83 c4 10             	add    esp,0x10
c002437b:	31 c0                	xor    eax,eax
c002437d:	83 c4 0c             	add    esp,0xc
c0024380:	c3                   	ret    
c0024381:	90                   	nop

c0024382 <ATAPI::ATAPI()>:
c0024382:	83 ec 0c             	sub    esp,0xc
c0024385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024389:	83 ec 04             	sub    esp,0x4
c002438c:	68 00 08 00 00       	push   0x800
c0024391:	68 79 c3 02 c0       	push   0xc002c379
c0024396:	50                   	push   eax
c0024397:	e8 a2 fb fe ff       	call   c0013f3e <PhysicalDisk::PhysicalDisk(char const*, int)>
c002439c:	83 c4 10             	add    esp,0x10
c002439f:	ba 94 c2 02 c0       	mov    edx,0xc002c294
c00243a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243a8:	89 10                	mov    DWORD PTR [eax],edx
c00243aa:	90                   	nop
c00243ab:	83 c4 0c             	add    esp,0xc
c00243ae:	c3                   	ret    
c00243af:	90                   	nop

c00243b0 <ATAPI::readyForCommand()>:
c00243b0:	56                   	push   esi
c00243b1:	53                   	push   ebx
c00243b2:	31 db                	xor    ebx,ebx
c00243b4:	50                   	push   eax
c00243b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00243b9:	50                   	push   eax
c00243ba:	6a 0c                	push   0xc
c00243bc:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00243c3:	50                   	push   eax
c00243c4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00243ca:	e8 19 ec ff ff       	call   c0022fe8 <IDE::read(unsigned char, unsigned char)>
c00243cf:	83 c4 10             	add    esp,0x10
c00243d2:	a8 88                	test   al,0x88
c00243d4:	74 23                	je     c00243f9 <ATAPI::readyForCommand()+0x49>
c00243d6:	43                   	inc    ebx
c00243d7:	83 fb 63             	cmp    ebx,0x63
c00243da:	7e dd                	jle    c00243b9 <ATAPI::readyForCommand()+0x9>
c00243dc:	51                   	push   ecx
c00243dd:	51                   	push   ecx
c00243de:	6a 00                	push   0x0
c00243e0:	68 40 42 0f 00       	push   0xf4240
c00243e5:	e8 bb 98 ff ff       	call   c001dca5 <nanoSleep(unsigned long long)>
c00243ea:	83 c4 10             	add    esp,0x10
c00243ed:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00243f3:	75 c4                	jne    c00243b9 <ATAPI::readyForCommand()+0x9>
c00243f5:	31 c0                	xor    eax,eax
c00243f7:	eb 02                	jmp    c00243fb <ATAPI::readyForCommand()+0x4b>
c00243f9:	b0 01                	mov    al,0x1
c00243fb:	5a                   	pop    edx
c00243fc:	5b                   	pop    ebx
c00243fd:	5e                   	pop    esi
c00243fe:	c3                   	ret    
c00243ff:	90                   	nop

c0024400 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024400:	55                   	push   ebp
c0024401:	57                   	push   edi
c0024402:	56                   	push   esi
c0024403:	53                   	push   ebx
c0024404:	83 ec 20             	sub    esp,0x20
c0024407:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002440b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002440f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024413:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024417:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002441b:	6a 01                	push   0x1
c002441d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024424:	50                   	push   eax
c0024425:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002442b:	e8 04 ed ff ff       	call   c0023134 <IDE::enableIRQs(unsigned char, bool)>
c0024430:	5e                   	pop    esi
c0024431:	58                   	pop    eax
c0024432:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024439:	50                   	push   eax
c002443a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024440:	e8 bd ea ff ff       	call   c0022f02 <IDE::prepareInterrupt(unsigned char)>
c0024445:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024448:	e8 63 ff ff ff       	call   c00243b0 <ATAPI::readyForCommand()>
c002444d:	83 c4 10             	add    esp,0x10
c0024450:	84 c0                	test   al,al
c0024452:	75 0a                	jne    c002445e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024454:	bb 01 00 00 00       	mov    ebx,0x1
c0024459:	e9 57 02 00 00       	jmp    c00246b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002445e:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024464:	c1 e0 04             	shl    eax,0x4
c0024467:	0f b6 c0             	movzx  eax,al
c002446a:	50                   	push   eax
c002446b:	6a 06                	push   0x6
c002446d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024474:	50                   	push   eax
c0024475:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002447b:	e8 a8 ea ff ff       	call   c0022f28 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024480:	6a 00                	push   0x0
c0024482:	6a 01                	push   0x1
c0024484:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002448b:	50                   	push   eax
c002448c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024492:	e8 91 ea ff ff       	call   c0022f28 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024497:	83 c4 20             	add    esp,0x20
c002449a:	0f b6 c3             	movzx  eax,bl
c002449d:	0f b6 df             	movzx  ebx,bh
c00244a0:	50                   	push   eax
c00244a1:	6a 04                	push   0x4
c00244a3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244aa:	50                   	push   eax
c00244ab:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244b1:	e8 72 ea ff ff       	call   c0022f28 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244b6:	53                   	push   ebx
c00244b7:	6a 05                	push   0x5
c00244b9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244c0:	50                   	push   eax
c00244c1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244c7:	e8 5c ea ff ff       	call   c0022f28 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244cc:	83 c4 20             	add    esp,0x20
c00244cf:	68 a0 00 00 00       	push   0xa0
c00244d4:	6a 07                	push   0x7
c00244d6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244dd:	50                   	push   eax
c00244de:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244e4:	e8 3f ea ff ff       	call   c0022f28 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244e9:	83 c4 0c             	add    esp,0xc
c00244ec:	6a 01                	push   0x1
c00244ee:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244f5:	50                   	push   eax
c00244f6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244fc:	e8 c9 f4 ff ff       	call   c00239ca <IDE::polling(unsigned char, unsigned int)>
c0024501:	83 c4 10             	add    esp,0x10
c0024504:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c002450a:	84 c0                	test   al,al
c002450c:	74 23                	je     c0024531 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002450e:	0f b6 d8             	movzx  ebx,al
c0024511:	0f b6 d2             	movzx  edx,dl
c0024514:	53                   	push   ebx
c0024515:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c002451c:	50                   	push   eax
c002451d:	52                   	push   edx
c002451e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024524:	e8 f1 f3 ff ff       	call   c002391a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024529:	83 c4 10             	add    esp,0x10
c002452c:	e9 84 01 00 00       	jmp    c00246b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024531:	0f b6 d2             	movzx  edx,dl
c0024534:	53                   	push   ebx
c0024535:	53                   	push   ebx
c0024536:	52                   	push   edx
c0024537:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002453d:	e8 d4 e9 ff ff       	call   c0022f16 <IDE::getBase(unsigned char)>
c0024542:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024546:	b9 06 00 00 00       	mov    ecx,0x6
c002454b:	89 c2                	mov    edx,eax
c002454d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024550:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024554:	83 c4 10             	add    esp,0x10
c0024557:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002455d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024564:	85 db                	test   ebx,ebx
c0024566:	0f 84 ec 00 00 00    	je     c0024658 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002456c:	51                   	push   ecx
c002456d:	51                   	push   ecx
c002456e:	52                   	push   edx
c002456f:	50                   	push   eax
c0024570:	e8 21 eb ff ff       	call   c0023096 <IDE::waitInterrupt(unsigned char)>
c0024575:	83 c4 10             	add    esp,0x10
c0024578:	84 c0                	test   al,al
c002457a:	0f 84 d4 fe ff ff    	je     c0024454 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024580:	56                   	push   esi
c0024581:	56                   	push   esi
c0024582:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024589:	50                   	push   eax
c002458a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024590:	e8 6d e9 ff ff       	call   c0022f02 <IDE::prepareInterrupt(unsigned char)>
c0024595:	83 c4 0c             	add    esp,0xc
c0024598:	6a 04                	push   0x4
c002459a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245a1:	50                   	push   eax
c00245a2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245a8:	e8 3b ea ff ff       	call   c0022fe8 <IDE::read(unsigned char, unsigned char)>
c00245ad:	83 c4 0c             	add    esp,0xc
c00245b0:	89 c6                	mov    esi,eax
c00245b2:	6a 05                	push   0x5
c00245b4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245bb:	50                   	push   eax
c00245bc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245c2:	e8 21 ea ff ff       	call   c0022fe8 <IDE::read(unsigned char, unsigned char)>
c00245c7:	89 f1                	mov    ecx,esi
c00245c9:	0f b6 c0             	movzx  eax,al
c00245cc:	0f b6 f1             	movzx  esi,cl
c00245cf:	c1 e0 08             	shl    eax,0x8
c00245d2:	09 c6                	or     esi,eax
c00245d4:	d1 fe                	sar    esi,1
c00245d6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00245da:	83 c4 10             	add    esp,0x10
c00245dd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00245e2:	74 41                	je     c0024625 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00245e4:	31 c9                	xor    ecx,ecx
c00245e6:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00245ec:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00245f3:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00245f7:	75 0a                	jne    c0024603 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00245f9:	01 c9                	add    ecx,ecx
c00245fb:	01 cd                	add    ebp,ecx
c00245fd:	4b                   	dec    ebx
c00245fe:	e9 54 ff ff ff       	jmp    c0024557 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024603:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024608:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002460c:	51                   	push   ecx
c002460d:	51                   	push   ecx
c002460e:	52                   	push   edx
c002460f:	50                   	push   eax
c0024610:	e8 01 e9 ff ff       	call   c0022f16 <IDE::getBase(unsigned char)>
c0024615:	89 c2                	mov    edx,eax
c0024617:	89 f0                	mov    eax,esi
c0024619:	66 ef                	out    dx,ax
c002461b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002461f:	83 c4 10             	add    esp,0x10
c0024622:	41                   	inc    ecx
c0024623:	eb c1                	jmp    c00245e6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024625:	31 f6                	xor    esi,esi
c0024627:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002462d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024634:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024638:	75 06                	jne    c0024640 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c002463a:	01 f6                	add    esi,esi
c002463c:	01 f5                	add    ebp,esi
c002463e:	eb bd                	jmp    c00245fd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024640:	51                   	push   ecx
c0024641:	51                   	push   ecx
c0024642:	52                   	push   edx
c0024643:	50                   	push   eax
c0024644:	e8 cd e8 ff ff       	call   c0022f16 <IDE::getBase(unsigned char)>
c0024649:	89 c2                	mov    edx,eax
c002464b:	66 ed                	in     ax,dx
c002464d:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024652:	83 c4 10             	add    esp,0x10
c0024655:	46                   	inc    esi
c0024656:	eb cf                	jmp    c0024627 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024658:	51                   	push   ecx
c0024659:	51                   	push   ecx
c002465a:	52                   	push   edx
c002465b:	50                   	push   eax
c002465c:	e8 35 ea ff ff       	call   c0023096 <IDE::waitInterrupt(unsigned char)>
c0024661:	83 c4 10             	add    esp,0x10
c0024664:	84 c0                	test   al,al
c0024666:	0f 84 e8 fd ff ff    	je     c0024454 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002466c:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024671:	52                   	push   edx
c0024672:	52                   	push   edx
c0024673:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002467a:	50                   	push   eax
c002467b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024681:	e8 7c e8 ff ff       	call   c0022f02 <IDE::prepareInterrupt(unsigned char)>
c0024686:	83 c4 10             	add    esp,0x10
c0024689:	50                   	push   eax
c002468a:	50                   	push   eax
c002468b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024692:	50                   	push   eax
c0024693:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024699:	e8 78 e8 ff ff       	call   c0022f16 <IDE::getBase(unsigned char)>
c002469e:	8d 50 07             	lea    edx,[eax+0x7]
c00246a1:	ec                   	in     al,dx
c00246a2:	83 c4 10             	add    esp,0x10
c00246a5:	a8 88                	test   al,0x88
c00246a7:	74 0a                	je     c00246b3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00246a9:	4b                   	dec    ebx
c00246aa:	75 dd                	jne    c0024689 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00246ac:	bb 02 00 00 00       	mov    ebx,0x2
c00246b1:	eb 02                	jmp    c00246b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00246b3:	31 db                	xor    ebx,ebx
c00246b5:	83 c4 1c             	add    esp,0x1c
c00246b8:	89 d8                	mov    eax,ebx
c00246ba:	5b                   	pop    ebx
c00246bb:	5e                   	pop    esi
c00246bc:	5f                   	pop    edi
c00246bd:	5d                   	pop    ebp
c00246be:	c3                   	ret    
c00246bf:	90                   	nop

c00246c0 <ATAPI::diskRemoved()>:
c00246c0:	83 ec 18             	sub    esp,0x18
c00246c3:	68 85 c3 02 c0       	push   0xc002c385
c00246c8:	e8 02 e0 fe ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c00246cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00246d1:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00246d8:	83 c4 1c             	add    esp,0x1c
c00246db:	c3                   	ret    

c00246dc <ATAPI::eject()>:
c00246dc:	57                   	push   edi
c00246dd:	b9 03 00 00 00       	mov    ecx,0x3
c00246e2:	53                   	push   ebx
c00246e3:	83 ec 14             	sub    esp,0x14
c00246e6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00246ea:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00246ee:	fc                   	cld    
c00246ef:	31 c0                	xor    eax,eax
c00246f1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00246f3:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00246f8:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00246fd:	50                   	push   eax
c00246fe:	50                   	push   eax
c00246ff:	6a 00                	push   0x0
c0024701:	6a 00                	push   0x0
c0024703:	6a 00                	push   0x0
c0024705:	6a 02                	push   0x2
c0024707:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002470b:	50                   	push   eax
c002470c:	53                   	push   ebx
c002470d:	e8 ee fc ff ff       	call   c0024400 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024712:	83 c4 14             	add    esp,0x14
c0024715:	53                   	push   ebx
c0024716:	e8 a5 ff ff ff       	call   c00246c0 <ATAPI::diskRemoved()>
c002471b:	83 c4 24             	add    esp,0x24
c002471e:	31 c0                	xor    eax,eax
c0024720:	5b                   	pop    ebx
c0024721:	5f                   	pop    edi
c0024722:	c3                   	ret    
c0024723:	90                   	nop

c0024724 <ATAPI::diskInserted()>:
c0024724:	53                   	push   ebx
c0024725:	83 ec 14             	sub    esp,0x14
c0024728:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002472c:	68 9c c3 02 c0       	push   0xc002c39c
c0024731:	e8 99 df fe ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0024736:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c002473d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024740:	e8 61 f8 fe ff       	call   c0013fa6 <PhysicalDisk::startCache()>
c0024745:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024749:	83 c4 18             	add    esp,0x18
c002474c:	5b                   	pop    ebx
c002474d:	e9 d6 1a ff ff       	jmp    c0016228 <createPartitionsForDisk(PhysicalDisk*)>

c0024752 <ATAPI::detectMedia()>:
c0024752:	56                   	push   esi
c0024753:	53                   	push   ebx
c0024754:	83 ec 28             	sub    esp,0x28
c0024757:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002475b:	6a 0c                	push   0xc
c002475d:	6a 00                	push   0x0
c002475f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024763:	56                   	push   esi
c0024764:	e8 e7 bf fd ff       	call   c0000750 <memset>
c0024769:	58                   	pop    eax
c002476a:	5a                   	pop    edx
c002476b:	6a 00                	push   0x0
c002476d:	6a 00                	push   0x0
c002476f:	6a 00                	push   0x0
c0024771:	6a 00                	push   0x0
c0024773:	56                   	push   esi
c0024774:	53                   	push   ebx
c0024775:	e8 86 fc ff ff       	call   c0024400 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002477a:	83 c4 1c             	add    esp,0x1c
c002477d:	6a 0c                	push   0xc
c002477f:	6a 00                	push   0x0
c0024781:	56                   	push   esi
c0024782:	e8 c9 bf fd ff       	call   c0000750 <memset>
c0024787:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002478c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024791:	59                   	pop    ecx
c0024792:	58                   	pop    eax
c0024793:	6a 01                	push   0x1
c0024795:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024799:	50                   	push   eax
c002479a:	6a 00                	push   0x0
c002479c:	6a 12                	push   0x12
c002479e:	56                   	push   esi
c002479f:	53                   	push   ebx
c00247a0:	e8 5b fc ff ff       	call   c0024400 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00247a5:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00247a9:	83 c4 20             	add    esp,0x20
c00247ac:	83 e0 7f             	and    eax,0x7f
c00247af:	3c 70                	cmp    al,0x70
c00247b1:	74 15                	je     c00247c8 <ATAPI::detectMedia()+0x76>
c00247b3:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00247ba:	75 0c                	jne    c00247c8 <ATAPI::detectMedia()+0x76>
c00247bc:	83 ec 0c             	sub    esp,0xc
c00247bf:	53                   	push   ebx
c00247c0:	e8 5f ff ff ff       	call   c0024724 <ATAPI::diskInserted()>
c00247c5:	83 c4 10             	add    esp,0x10
c00247c8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00247cc:	83 e0 0f             	and    eax,0xf
c00247cf:	3c 02                	cmp    al,0x2
c00247d1:	75 1b                	jne    c00247ee <ATAPI::detectMedia()+0x9c>
c00247d3:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00247d8:	75 2d                	jne    c0024807 <ATAPI::detectMedia()+0xb5>
c00247da:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00247e1:	74 24                	je     c0024807 <ATAPI::detectMedia()+0xb5>
c00247e3:	83 ec 0c             	sub    esp,0xc
c00247e6:	53                   	push   ebx
c00247e7:	e8 d4 fe ff ff       	call   c00246c0 <ATAPI::diskRemoved()>
c00247ec:	eb 16                	jmp    c0024804 <ATAPI::detectMedia()+0xb2>
c00247ee:	84 c0                	test   al,al
c00247f0:	75 15                	jne    c0024807 <ATAPI::detectMedia()+0xb5>
c00247f2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00247f9:	75 0c                	jne    c0024807 <ATAPI::detectMedia()+0xb5>
c00247fb:	83 ec 0c             	sub    esp,0xc
c00247fe:	53                   	push   ebx
c00247ff:	e8 20 ff ff ff       	call   c0024724 <ATAPI::diskInserted()>
c0024804:	83 c4 10             	add    esp,0x10
c0024807:	83 c4 24             	add    esp,0x24
c002480a:	5b                   	pop    ebx
c002480b:	5e                   	pop    esi
c002480c:	c3                   	ret    
c002480d:	90                   	nop

c002480e <ATAPI::open(int, int, void*)>:
c002480e:	53                   	push   ebx
c002480f:	83 ec 08             	sub    esp,0x8
c0024812:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024816:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002481a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002481e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024824:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002482a:	c1 e0 06             	shl    eax,0x6
c002482d:	01 d0                	add    eax,edx
c002482f:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024836:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002483c:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024843:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002484d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024853:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002485a:	6a 04                	push   0x4
c002485c:	6a 0c                	push   0xc
c002485e:	51                   	push   ecx
c002485f:	52                   	push   edx
c0024860:	e8 c3 e6 ff ff       	call   c0022f28 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024865:	90                   	nop
c0024866:	90                   	nop
c0024867:	6a 00                	push   0x0
c0024869:	6a 0c                	push   0xc
c002486b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024872:	50                   	push   eax
c0024873:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024879:	e8 aa e6 ff ff       	call   c0022f28 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002487e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024885:	83 c4 14             	add    esp,0x14
c0024888:	53                   	push   ebx
c0024889:	e8 c4 fe ff ff       	call   c0024752 <ATAPI::detectMedia()>
c002488e:	31 c0                	xor    eax,eax
c0024890:	83 c4 18             	add    esp,0x18
c0024893:	5b                   	pop    ebx
c0024894:	c3                   	ret    
c0024895:	90                   	nop

c0024896 <ATAPI::read(unsigned long long, int, void*)>:
c0024896:	55                   	push   ebp
c0024897:	57                   	push   edi
c0024898:	56                   	push   esi
c0024899:	53                   	push   ebx
c002489a:	83 ec 1c             	sub    esp,0x1c
c002489d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00248a1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00248a5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00248a9:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00248b0:	74 41                	je     c00248f3 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00248b2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00248b6:	b9 03 00 00 00       	mov    ecx,0x3
c00248bb:	fc                   	cld    
c00248bc:	31 c0                	xor    eax,eax
c00248be:	86 fb                	xchg   bl,bh
c00248c0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00248c2:	c1 c3 10             	rol    ebx,0x10
c00248c5:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00248ca:	89 e8                	mov    eax,ebp
c00248cc:	86 fb                	xchg   bl,bh
c00248ce:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00248d2:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00248d6:	50                   	push   eax
c00248d7:	50                   	push   eax
c00248d8:	55                   	push   ebp
c00248d9:	c1 e5 0b             	shl    ebp,0xb
c00248dc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00248e0:	6a 00                	push   0x0
c00248e2:	55                   	push   ebp
c00248e3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00248e7:	50                   	push   eax
c00248e8:	56                   	push   esi
c00248e9:	e8 12 fb ff ff       	call   c0024400 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00248ee:	83 c4 20             	add    esp,0x20
c00248f1:	eb 1a                	jmp    c002490d <ATAPI::read(unsigned long long, int, void*)+0x77>
c00248f3:	83 ec 0c             	sub    esp,0xc
c00248f6:	56                   	push   esi
c00248f7:	e8 56 fe ff ff       	call   c0024752 <ATAPI::detectMedia()>
c00248fc:	83 c4 10             	add    esp,0x10
c00248ff:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024906:	75 aa                	jne    c00248b2 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024908:	b8 02 00 00 00       	mov    eax,0x2
c002490d:	83 c4 1c             	add    esp,0x1c
c0024910:	5b                   	pop    ebx
c0024911:	5e                   	pop    esi
c0024912:	5f                   	pop    edi
c0024913:	5d                   	pop    ebp
c0024914:	c3                   	ret    
c0024915:	90                   	nop

c0024916 <SATA::close(int, int, void*)>:
c0024916:	83 ec 0c             	sub    esp,0xc
c0024919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002491d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024923:	85 c0                	test   eax,eax
c0024925:	74 0c                	je     c0024933 <SATA::close(int, int, void*)+0x1d>
c0024927:	83 ec 0c             	sub    esp,0xc
c002492a:	8b 10                	mov    edx,DWORD PTR [eax]
c002492c:	50                   	push   eax
c002492d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024930:	83 c4 10             	add    esp,0x10
c0024933:	31 c0                	xor    eax,eax
c0024935:	83 c4 0c             	add    esp,0xc
c0024938:	c3                   	ret    
c0024939:	90                   	nop

c002493a <SATA::powerSaving(PowerSavingLevel)>:
c002493a:	c3                   	ret    
c002493b:	90                   	nop

c002493c <SATA::open(int, int, void*)>:
c002493c:	56                   	push   esi
c002493d:	53                   	push   ebx
c002493e:	50                   	push   eax
c002493f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024943:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024947:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024951:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024957:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024961:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024965:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002496f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024975:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002497c:	e8 14 b0 fe ff       	call   c000f995 <Phys::allocatePage()>
c0024981:	89 c6                	mov    esi,eax
c0024983:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024989:	81 c6 00 10 00 00    	add    esi,0x1000
c002498f:	e8 01 b0 fe ff       	call   c000f995 <Phys::allocatePage()>
c0024994:	39 c6                	cmp    esi,eax
c0024996:	74 10                	je     c00249a8 <SATA::open(int, int, void*)+0x6c>
c0024998:	83 ec 0c             	sub    esp,0xc
c002499b:	68 c4 c2 02 c0       	push   0xc002c2c4
c00249a0:	e8 96 54 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c00249a5:	83 c4 10             	add    esp,0x10
c00249a8:	83 ec 0c             	sub    esp,0xc
c00249ab:	6a 02                	push   0x2
c00249ad:	e8 6d c8 fe ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c00249b2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00249b8:	6a 03                	push   0x3
c00249ba:	50                   	push   eax
c00249bb:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00249c1:	ff 35 30 db 02 c0    	push   DWORD PTR ds:0xc002db30
c00249c7:	e8 10 d0 fe ff       	call   c00119dc <VAS::mapPage(unsigned long, unsigned long, int)>
c00249cc:	83 c4 14             	add    esp,0x14
c00249cf:	53                   	push   ebx
c00249d0:	e8 d1 f5 fe ff       	call   c0013fa6 <PhysicalDisk::startCache()>
c00249d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00249d8:	e8 4b 18 ff ff       	call   c0016228 <createPartitionsForDisk(PhysicalDisk*)>
c00249dd:	83 c4 14             	add    esp,0x14
c00249e0:	31 c0                	xor    eax,eax
c00249e2:	5b                   	pop    ebx
c00249e3:	5e                   	pop    esi
c00249e4:	c3                   	ret    
c00249e5:	90                   	nop

c00249e6 <SATA::SATA()>:
c00249e6:	83 ec 0c             	sub    esp,0xc
c00249e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249ed:	83 ec 04             	sub    esp,0x4
c00249f0:	68 00 02 00 00       	push   0x200
c00249f5:	68 d8 c2 02 c0       	push   0xc002c2d8
c00249fa:	50                   	push   eax
c00249fb:	e8 3e f5 fe ff       	call   c0013f3e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024a00:	83 c4 10             	add    esp,0x10
c0024a03:	ba 48 c3 02 c0       	mov    edx,0xc002c348
c0024a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a0c:	89 10                	mov    DWORD PTR [eax],edx
c0024a0e:	90                   	nop
c0024a0f:	83 c4 0c             	add    esp,0xc
c0024a12:	c3                   	ret    
c0024a13:	90                   	nop

c0024a14 <SATA::access(unsigned long long, int, void*, bool)>:
c0024a14:	55                   	push   ebp
c0024a15:	57                   	push   edi
c0024a16:	56                   	push   esi
c0024a17:	53                   	push   ebx
c0024a18:	83 ec 2c             	sub    esp,0x2c
c0024a1b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024a1f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024a23:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024a27:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024a2b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024a2f:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024a38:	7e 10                	jle    c0024a4a <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024a3a:	83 ec 0c             	sub    esp,0xc
c0024a3d:	68 e8 c2 02 c0       	push   0xc002c2e8
c0024a42:	e8 f4 53 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c0024a47:	83 c4 10             	add    esp,0x10
c0024a4a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024a50:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0024a56:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024a5c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024a60:	89 d0                	mov    eax,edx
c0024a62:	c1 e0 07             	shl    eax,0x7
c0024a65:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024a69:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024a73:	51                   	push   ecx
c0024a74:	8d 42 02             	lea    eax,[edx+0x2]
c0024a77:	51                   	push   ecx
c0024a78:	c1 e0 07             	shl    eax,0x7
c0024a7b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024a7f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024a83:	50                   	push   eax
c0024a84:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0024a8a:	e8 1b f0 ff ff       	call   c0023aaa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024a8f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024a93:	83 c4 10             	add    esp,0x10
c0024a96:	b8 01 00 00 00       	mov    eax,0x1
c0024a9b:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024aa0:	0f 84 cb 01 00 00    	je     c0024c71 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024aa6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024aaa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024aae:	c1 e0 09             	shl    eax,0x9
c0024ab1:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024ab6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024aba:	74 0e                	je     c0024aca <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c0024abc:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0024ac2:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0024ac6:	89 c1                	mov    ecx,eax
c0024ac8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024aca:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0024ace:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024ad4:	8d 42 02             	lea    eax,[edx+0x2]
c0024ad7:	c1 e0 07             	shl    eax,0x7
c0024ada:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024ade:	8b 00                	mov    eax,DWORD PTR [eax]
c0024ae0:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024ae6:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024aec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024af0:	c1 e1 05             	shl    ecx,0x5
c0024af3:	01 c8                	add    eax,ecx
c0024af5:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0024af9:	83 e1 01             	and    ecx,0x1
c0024afc:	89 ce                	mov    esi,ecx
c0024afe:	8a 08                	mov    cl,BYTE PTR [eax]
c0024b00:	c1 e6 06             	shl    esi,0x6
c0024b03:	83 e1 bf             	and    ecx,0xffffffbf
c0024b06:	09 f1                	or     ecx,esi
c0024b08:	88 08                	mov    BYTE PTR [eax],cl
c0024b0a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024b0c:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024b12:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024b18:	89 08                	mov    DWORD PTR [eax],ecx
c0024b1a:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024b20:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0024b26:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0024b2c:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0024b2f:	50                   	push   eax
c0024b30:	68 90 00 00 00       	push   0x90
c0024b35:	6a 00                	push   0x0
c0024b37:	56                   	push   esi
c0024b38:	e8 13 bc fd ff       	call   c0000750 <memset>
c0024b3d:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024b43:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0024b47:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0024b4d:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0024b51:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024b55:	83 c4 10             	add    esp,0x10
c0024b58:	48                   	dec    eax
c0024b59:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024b5e:	89 c1                	mov    ecx,eax
c0024b60:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0024b66:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024b6b:	09 c8                	or     eax,ecx
c0024b6d:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0024b73:	66 8b 06             	mov    ax,WORD PTR [esi]
c0024b76:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0024b7d:	66 25 00 7f          	and    ax,0x7f00
c0024b81:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024b85:	66 0d 27 80          	or     ax,0x8027
c0024b89:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0024b8e:	66 89 06             	mov    WORD PTR [esi],ax
c0024b91:	19 c0                	sbb    eax,eax
c0024b93:	83 e0 f0             	and    eax,0xfffffff0
c0024b96:	83 c0 35             	add    eax,0x35
c0024b99:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0024b9c:	89 e8                	mov    eax,ebp
c0024b9e:	c1 e8 10             	shr    eax,0x10
c0024ba1:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0024ba4:	89 e8                	mov    eax,ebp
c0024ba6:	c1 e8 18             	shr    eax,0x18
c0024ba9:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0024bac:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0024bb0:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0024bb3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024bb7:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0024bba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024bbe:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0024bc2:	89 d6                	mov    esi,edx
c0024bc4:	31 c0                	xor    eax,eax
c0024bc6:	c1 e6 07             	shl    esi,0x7
c0024bc9:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024bcd:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0024bd3:	80 e1 88             	and    cl,0x88
c0024bd6:	74 0a                	je     c0024be2 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0024bd8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024bdd:	74 0a                	je     c0024be9 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0024bdf:	40                   	inc    eax
c0024be0:	eb eb                	jmp    c0024bcd <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0024be2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024be7:	75 0a                	jne    c0024bf3 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0024be9:	83 ec 0c             	sub    esp,0xc
c0024bec:	68 21 c3 02 c0       	push   0xc002c321
c0024bf1:	eb 56                	jmp    c0024c49 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0024bf3:	b8 01 00 00 00       	mov    eax,0x1
c0024bf8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024bfc:	c1 e2 07             	shl    edx,0x7
c0024bff:	d3 e0                	shl    eax,cl
c0024c01:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0024c05:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0024c0b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0024c11:	85 c8                	test   eax,ecx
c0024c13:	74 20                	je     c0024c35 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0024c15:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0024c1b:	0f ba e1 1e          	bt     ecx,0x1e
c0024c1f:	73 ea                	jae    c0024c0b <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0024c21:	83 ec 0c             	sub    esp,0xc
c0024c24:	68 2f c3 02 c0       	push   0xc002c32f
c0024c29:	e8 0d 52 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c0024c2e:	83 c4 10             	add    esp,0x10
c0024c31:	31 c0                	xor    eax,eax
c0024c33:	eb 3c                	jmp    c0024c71 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024c35:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0024c3b:	0f ba e0 1e          	bt     eax,0x1e
c0024c3f:	73 17                	jae    c0024c58 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0024c41:	83 ec 0c             	sub    esp,0xc
c0024c44:	68 2f c3 02 c0       	push   0xc002c32f
c0024c49:	e8 ed 51 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c0024c4e:	83 c4 10             	add    esp,0x10
c0024c51:	b8 01 00 00 00       	mov    eax,0x1
c0024c56:	eb 19                	jmp    c0024c71 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024c58:	31 c0                	xor    eax,eax
c0024c5a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024c5f:	75 10                	jne    c0024c71 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024c61:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0024c67:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0024c6b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024c6f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024c71:	83 c4 2c             	add    esp,0x2c
c0024c74:	5b                   	pop    ebx
c0024c75:	5e                   	pop    esi
c0024c76:	5f                   	pop    edi
c0024c77:	5d                   	pop    ebp
c0024c78:	c3                   	ret    
c0024c79:	90                   	nop

c0024c7a <SATA::read(unsigned long long, int, void*)>:
c0024c7a:	57                   	push   edi
c0024c7b:	b8 04 00 00 00       	mov    eax,0x4
c0024c80:	56                   	push   esi
c0024c81:	53                   	push   ebx
c0024c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024c86:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024c8a:	8d 7a ff             	lea    edi,[edx-0x1]
c0024c8d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024c91:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024c95:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024c9b:	77 25                	ja     c0024cc2 <SATA::read(unsigned long long, int, void*)+0x48>
c0024c9d:	b8 06 00 00 00       	mov    eax,0x6
c0024ca2:	85 f6                	test   esi,esi
c0024ca4:	74 1c                	je     c0024cc2 <SATA::read(unsigned long long, int, void*)+0x48>
c0024ca6:	50                   	push   eax
c0024ca7:	50                   	push   eax
c0024ca8:	6a 00                	push   0x0
c0024caa:	56                   	push   esi
c0024cab:	52                   	push   edx
c0024cac:	53                   	push   ebx
c0024cad:	51                   	push   ecx
c0024cae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024cb2:	e8 5d fd ff ff       	call   c0024a14 <SATA::access(unsigned long long, int, void*, bool)>
c0024cb7:	83 c4 20             	add    esp,0x20
c0024cba:	85 c0                	test   eax,eax
c0024cbc:	0f 95 c0             	setne  al
c0024cbf:	0f b6 c0             	movzx  eax,al
c0024cc2:	5b                   	pop    ebx
c0024cc3:	5e                   	pop    esi
c0024cc4:	5f                   	pop    edi
c0024cc5:	c3                   	ret    

c0024cc6 <SATA::write(unsigned long long, int, void*)>:
c0024cc6:	55                   	push   ebp
c0024cc7:	b8 04 00 00 00       	mov    eax,0x4
c0024ccc:	57                   	push   edi
c0024ccd:	56                   	push   esi
c0024cce:	53                   	push   ebx
c0024ccf:	83 ec 0c             	sub    esp,0xc
c0024cd2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024cd6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024cda:	8d 73 ff             	lea    esi,[ebx-0x1]
c0024cdd:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024ce1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024ce5:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024ceb:	77 3d                	ja     c0024d2a <SATA::write(unsigned long long, int, void*)+0x64>
c0024ced:	b8 06 00 00 00       	mov    eax,0x6
c0024cf2:	85 ed                	test   ebp,ebp
c0024cf4:	74 34                	je     c0024d2a <SATA::write(unsigned long long, int, void*)+0x64>
c0024cf6:	c1 e3 09             	shl    ebx,0x9
c0024cf9:	01 eb                	add    ebx,ebp
c0024cfb:	89 d6                	mov    esi,edx
c0024cfd:	89 cf                	mov    edi,ecx
c0024cff:	83 c6 01             	add    esi,0x1
c0024d02:	83 d7 00             	adc    edi,0x0
c0024d05:	50                   	push   eax
c0024d06:	50                   	push   eax
c0024d07:	6a 01                	push   0x1
c0024d09:	55                   	push   ebp
c0024d0a:	81 c5 00 02 00 00    	add    ebp,0x200
c0024d10:	6a 01                	push   0x1
c0024d12:	51                   	push   ecx
c0024d13:	52                   	push   edx
c0024d14:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024d18:	e8 f7 fc ff ff       	call   c0024a14 <SATA::access(unsigned long long, int, void*, bool)>
c0024d1d:	83 c4 20             	add    esp,0x20
c0024d20:	89 f2                	mov    edx,esi
c0024d22:	89 f9                	mov    ecx,edi
c0024d24:	39 dd                	cmp    ebp,ebx
c0024d26:	75 d3                	jne    c0024cfb <SATA::write(unsigned long long, int, void*)+0x35>
c0024d28:	31 c0                	xor    eax,eax
c0024d2a:	83 c4 0c             	add    esp,0xc
c0024d2d:	5b                   	pop    ebx
c0024d2e:	5e                   	pop    esi
c0024d2f:	5f                   	pop    edi
c0024d30:	5d                   	pop    ebp
c0024d31:	c3                   	ret    

c0024d32 <SATAPI::write(unsigned long long, int, void*)>:
c0024d32:	b8 03 00 00 00       	mov    eax,0x3
c0024d37:	c3                   	ret    

c0024d38 <SATAPI::close(int, int, void*)>:
c0024d38:	83 ec 0c             	sub    esp,0xc
c0024d3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d3f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024d45:	85 c0                	test   eax,eax
c0024d47:	74 0c                	je     c0024d55 <SATAPI::close(int, int, void*)+0x1d>
c0024d49:	83 ec 0c             	sub    esp,0xc
c0024d4c:	8b 10                	mov    edx,DWORD PTR [eax]
c0024d4e:	50                   	push   eax
c0024d4f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024d52:	83 c4 10             	add    esp,0x10
c0024d55:	31 c0                	xor    eax,eax
c0024d57:	83 c4 0c             	add    esp,0xc
c0024d5a:	c3                   	ret    
c0024d5b:	90                   	nop

c0024d5c <SATAPI::SATAPI()>:
c0024d5c:	83 ec 0c             	sub    esp,0xc
c0024d5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d63:	83 ec 04             	sub    esp,0x4
c0024d66:	68 00 08 00 00       	push   0x800
c0024d6b:	68 78 c3 02 c0       	push   0xc002c378
c0024d70:	50                   	push   eax
c0024d71:	e8 c8 f1 fe ff       	call   c0013f3e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024d76:	83 c4 10             	add    esp,0x10
c0024d79:	ba 24 c4 02 c0       	mov    edx,0xc002c424
c0024d7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d82:	89 10                	mov    DWORD PTR [eax],edx
c0024d84:	90                   	nop
c0024d85:	83 c4 0c             	add    esp,0xc
c0024d88:	c3                   	ret    
c0024d89:	90                   	nop

c0024d8a <SATAPI::diskRemoved()>:
c0024d8a:	83 ec 18             	sub    esp,0x18
c0024d8d:	68 84 c3 02 c0       	push   0xc002c384
c0024d92:	e8 38 d9 fe ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0024d97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d9b:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024da2:	83 c4 1c             	add    esp,0x1c
c0024da5:	c3                   	ret    

c0024da6 <SATAPI::diskInserted()>:
c0024da6:	53                   	push   ebx
c0024da7:	83 ec 14             	sub    esp,0x14
c0024daa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024dae:	68 9b c3 02 c0       	push   0xc002c39b
c0024db3:	e8 17 d9 fe ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0024db8:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024dbf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024dc2:	e8 df f1 fe ff       	call   c0013fa6 <PhysicalDisk::startCache()>
c0024dc7:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024dcb:	83 c4 18             	add    esp,0x18
c0024dce:	5b                   	pop    ebx
c0024dcf:	e9 54 14 ff ff       	jmp    c0016228 <createPartitionsForDisk(PhysicalDisk*)>

c0024dd4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024dd4:	55                   	push   ebp
c0024dd5:	57                   	push   edi
c0024dd6:	56                   	push   esi
c0024dd7:	53                   	push   ebx
c0024dd8:	83 ec 34             	sub    esp,0x34
c0024ddb:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0024ddf:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024de3:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0024de7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024deb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024def:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024df5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024dfb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024dff:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0024e05:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024e09:	c1 e0 07             	shl    eax,0x7
c0024e0c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024e10:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024e14:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024e1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024e22:	8d 58 02             	lea    ebx,[eax+0x2]
c0024e25:	c1 e3 07             	shl    ebx,0x7
c0024e28:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0024e2c:	53                   	push   ebx
c0024e2d:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024e33:	e8 72 ec ff ff       	call   c0023aaa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024e38:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024e3c:	83 c4 10             	add    esp,0x10
c0024e3f:	b8 01 00 00 00       	mov    eax,0x1
c0024e44:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024e49:	0f 84 85 01 00 00    	je     c0024fd4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024e4f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024e57:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024e5d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024e63:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024e67:	c1 e1 05             	shl    ecx,0x5
c0024e6a:	01 c8                	add    eax,ecx
c0024e6c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024e6e:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024e74:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024e7a:	89 08                	mov    DWORD PTR [eax],ecx
c0024e7c:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e82:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024e88:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024e8e:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024e91:	8d 7b 40             	lea    edi,[ebx+0x40]
c0024e94:	50                   	push   eax
c0024e95:	68 90 00 00 00       	push   0x90
c0024e9a:	6a 00                	push   0x0
c0024e9c:	53                   	push   ebx
c0024e9d:	e8 ae b8 fd ff       	call   c0000750 <memset>
c0024ea2:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0024ea6:	b9 0c 00 00 00       	mov    ecx,0xc
c0024eab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024ead:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0024eb3:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024eb7:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024ebd:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024ec1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024ec5:	48                   	dec    eax
c0024ec6:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024ecb:	89 c1                	mov    ecx,eax
c0024ecd:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024ed3:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024ed8:	09 c8                	or     eax,ecx
c0024eda:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024ee0:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024ee3:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024eea:	66 25 00 7f          	and    ax,0x7f00
c0024eee:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0024ef2:	66 0d 27 80          	or     ax,0x8027
c0024ef6:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0024efa:	66 89 03             	mov    WORD PTR [ebx],ax
c0024efd:	89 d0                	mov    eax,edx
c0024eff:	c1 ea 18             	shr    edx,0x18
c0024f02:	c1 e8 10             	shr    eax,0x10
c0024f05:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024f08:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024f0b:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0024f0f:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024f12:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024f16:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024f19:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0024f1d:	83 c4 10             	add    esp,0x10
c0024f20:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024f24:	31 c0                	xor    eax,eax
c0024f26:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024f2a:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0024f30:	80 e2 88             	and    dl,0x88
c0024f33:	74 0a                	je     c0024f3f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0024f35:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f3a:	74 0a                	je     c0024f46 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0024f3c:	40                   	inc    eax
c0024f3d:	eb eb                	jmp    c0024f2a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0024f3f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f44:	75 0f                	jne    c0024f55 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0024f46:	83 ec 0c             	sub    esp,0xc
c0024f49:	68 21 c3 02 c0       	push   0xc002c321
c0024f4e:	e8 e8 4e ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c0024f53:	eb 3f                	jmp    c0024f94 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0024f55:	ba 01 00 00 00       	mov    edx,0x1
c0024f5a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024f5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f62:	d3 e2                	shl    edx,cl
c0024f64:	c1 e0 07             	shl    eax,0x7
c0024f67:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0024f6d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024f71:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0024f77:	85 ca                	test   edx,ecx
c0024f79:	74 23                	je     c0024f9e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0024f7b:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0024f81:	0f ba e1 1e          	bt     ecx,0x1e
c0024f85:	73 ea                	jae    c0024f71 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0024f87:	83 ec 0c             	sub    esp,0xc
c0024f8a:	68 b3 c3 02 c0       	push   0xc002c3b3
c0024f8f:	e8 3b d7 fe ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0024f94:	83 c4 10             	add    esp,0x10
c0024f97:	b8 01 00 00 00       	mov    eax,0x1
c0024f9c:	eb 36                	jmp    c0024fd4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024f9e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0024fa4:	0f ba e0 1e          	bt     eax,0x1e
c0024fa8:	73 0a                	jae    c0024fb4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0024faa:	83 ec 0c             	sub    esp,0xc
c0024fad:	68 c6 c3 02 c0       	push   0xc002c3c6
c0024fb2:	eb db                	jmp    c0024f8f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0024fb4:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0024fb9:	74 17                	je     c0024fd2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024fbb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0024fc0:	74 10                	je     c0024fd2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024fc2:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0024fc8:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0024fcc:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0024fd0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024fd2:	31 c0                	xor    eax,eax
c0024fd4:	83 c4 2c             	add    esp,0x2c
c0024fd7:	5b                   	pop    ebx
c0024fd8:	5e                   	pop    esi
c0024fd9:	5f                   	pop    edi
c0024fda:	5d                   	pop    ebp
c0024fdb:	c3                   	ret    

c0024fdc <SATAPI::eject()>:
c0024fdc:	57                   	push   edi
c0024fdd:	b9 03 00 00 00       	mov    ecx,0x3
c0024fe2:	53                   	push   ebx
c0024fe3:	83 ec 14             	sub    esp,0x14
c0024fe6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024fea:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024fee:	fc                   	cld    
c0024fef:	31 c0                	xor    eax,eax
c0024ff1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024ff3:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024ff8:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024ffd:	50                   	push   eax
c0024ffe:	6a 00                	push   0x0
c0025000:	6a 00                	push   0x0
c0025002:	6a 00                	push   0x0
c0025004:	6a 00                	push   0x0
c0025006:	6a 02                	push   0x2
c0025008:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002500c:	50                   	push   eax
c002500d:	53                   	push   ebx
c002500e:	e8 c1 fd ff ff       	call   c0024dd4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025013:	83 c4 14             	add    esp,0x14
c0025016:	53                   	push   ebx
c0025017:	e8 6e fd ff ff       	call   c0024d8a <SATAPI::diskRemoved()>
c002501c:	83 c4 24             	add    esp,0x24
c002501f:	31 c0                	xor    eax,eax
c0025021:	5b                   	pop    ebx
c0025022:	5f                   	pop    edi
c0025023:	c3                   	ret    

c0025024 <SATAPI::detectMedia()>:
c0025024:	56                   	push   esi
c0025025:	53                   	push   ebx
c0025026:	83 ec 28             	sub    esp,0x28
c0025029:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002502d:	6a 0c                	push   0xc
c002502f:	6a 00                	push   0x0
c0025031:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025035:	56                   	push   esi
c0025036:	e8 15 b7 fd ff       	call   c0000750 <memset>
c002503b:	83 c4 0c             	add    esp,0xc
c002503e:	6a 00                	push   0x0
c0025040:	6a 00                	push   0x0
c0025042:	6a 00                	push   0x0
c0025044:	6a 00                	push   0x0
c0025046:	6a 00                	push   0x0
c0025048:	56                   	push   esi
c0025049:	53                   	push   ebx
c002504a:	e8 85 fd ff ff       	call   c0024dd4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002504f:	83 c4 1c             	add    esp,0x1c
c0025052:	6a 0c                	push   0xc
c0025054:	6a 00                	push   0x0
c0025056:	56                   	push   esi
c0025057:	e8 f4 b6 fd ff       	call   c0000750 <memset>
c002505c:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025061:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025066:	83 c4 0c             	add    esp,0xc
c0025069:	6a 01                	push   0x1
c002506b:	8d 44 24 16          	lea    eax,[esp+0x16]
c002506f:	50                   	push   eax
c0025070:	6a 00                	push   0x0
c0025072:	6a 00                	push   0x0
c0025074:	6a 12                	push   0x12
c0025076:	56                   	push   esi
c0025077:	53                   	push   ebx
c0025078:	e8 57 fd ff ff       	call   c0024dd4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002507d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025081:	83 c4 20             	add    esp,0x20
c0025084:	83 e0 7f             	and    eax,0x7f
c0025087:	3c 70                	cmp    al,0x70
c0025089:	74 15                	je     c00250a0 <SATAPI::detectMedia()+0x7c>
c002508b:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025092:	75 0c                	jne    c00250a0 <SATAPI::detectMedia()+0x7c>
c0025094:	83 ec 0c             	sub    esp,0xc
c0025097:	53                   	push   ebx
c0025098:	e8 09 fd ff ff       	call   c0024da6 <SATAPI::diskInserted()>
c002509d:	83 c4 10             	add    esp,0x10
c00250a0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00250a4:	83 e0 0f             	and    eax,0xf
c00250a7:	3c 02                	cmp    al,0x2
c00250a9:	75 1b                	jne    c00250c6 <SATAPI::detectMedia()+0xa2>
c00250ab:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00250b0:	75 2d                	jne    c00250df <SATAPI::detectMedia()+0xbb>
c00250b2:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00250b9:	74 24                	je     c00250df <SATAPI::detectMedia()+0xbb>
c00250bb:	83 ec 0c             	sub    esp,0xc
c00250be:	53                   	push   ebx
c00250bf:	e8 c6 fc ff ff       	call   c0024d8a <SATAPI::diskRemoved()>
c00250c4:	eb 16                	jmp    c00250dc <SATAPI::detectMedia()+0xb8>
c00250c6:	84 c0                	test   al,al
c00250c8:	75 15                	jne    c00250df <SATAPI::detectMedia()+0xbb>
c00250ca:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00250d1:	75 0c                	jne    c00250df <SATAPI::detectMedia()+0xbb>
c00250d3:	83 ec 0c             	sub    esp,0xc
c00250d6:	53                   	push   ebx
c00250d7:	e8 ca fc ff ff       	call   c0024da6 <SATAPI::diskInserted()>
c00250dc:	83 c4 10             	add    esp,0x10
c00250df:	83 c4 24             	add    esp,0x24
c00250e2:	5b                   	pop    ebx
c00250e3:	5e                   	pop    esi
c00250e4:	c3                   	ret    
c00250e5:	90                   	nop

c00250e6 <SATAPI::open(int, int, void*)>:
c00250e6:	56                   	push   esi
c00250e7:	53                   	push   ebx
c00250e8:	50                   	push   eax
c00250e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00250ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00250f1:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00250fb:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025101:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002510b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002510f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025119:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002511f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025126:	e8 6a a8 fe ff       	call   c000f995 <Phys::allocatePage()>
c002512b:	89 c6                	mov    esi,eax
c002512d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025133:	81 c6 00 10 00 00    	add    esi,0x1000
c0025139:	e8 57 a8 fe ff       	call   c000f995 <Phys::allocatePage()>
c002513e:	39 c6                	cmp    esi,eax
c0025140:	74 10                	je     c0025152 <SATAPI::open(int, int, void*)+0x6c>
c0025142:	83 ec 0c             	sub    esp,0xc
c0025145:	68 db c3 02 c0       	push   0xc002c3db
c002514a:	e8 ec 4c ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c002514f:	83 c4 10             	add    esp,0x10
c0025152:	83 ec 0c             	sub    esp,0xc
c0025155:	6a 02                	push   0x2
c0025157:	e8 c3 c0 fe ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c002515c:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025162:	6a 03                	push   0x3
c0025164:	50                   	push   eax
c0025165:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c002516b:	ff 35 30 db 02 c0    	push   DWORD PTR ds:0xc002db30
c0025171:	e8 66 c8 fe ff       	call   c00119dc <VAS::mapPage(unsigned long, unsigned long, int)>
c0025176:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002517d:	83 c4 14             	add    esp,0x14
c0025180:	53                   	push   ebx
c0025181:	e8 9e fe ff ff       	call   c0025024 <SATAPI::detectMedia()>
c0025186:	83 c4 14             	add    esp,0x14
c0025189:	31 c0                	xor    eax,eax
c002518b:	5b                   	pop    ebx
c002518c:	5e                   	pop    esi
c002518d:	c3                   	ret    

c002518e <SATAPI::read(unsigned long long, int, void*)>:
c002518e:	55                   	push   ebp
c002518f:	57                   	push   edi
c0025190:	56                   	push   esi
c0025191:	53                   	push   ebx
c0025192:	83 ec 1c             	sub    esp,0x1c
c0025195:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025199:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002519d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00251a1:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00251a8:	74 19                	je     c00251c3 <SATAPI::read(unsigned long long, int, void*)+0x35>
c00251aa:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00251af:	7e 2e                	jle    c00251df <SATAPI::read(unsigned long long, int, void*)+0x51>
c00251b1:	83 ec 0c             	sub    esp,0xc
c00251b4:	68 f1 c3 02 c0       	push   0xc002c3f1
c00251b9:	e8 7d 4c ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c00251be:	83 c4 10             	add    esp,0x10
c00251c1:	eb 1c                	jmp    c00251df <SATAPI::read(unsigned long long, int, void*)+0x51>
c00251c3:	83 ec 0c             	sub    esp,0xc
c00251c6:	55                   	push   ebp
c00251c7:	e8 58 fe ff ff       	call   c0025024 <SATAPI::detectMedia()>
c00251cc:	83 c4 10             	add    esp,0x10
c00251cf:	b8 02 00 00 00       	mov    eax,0x2
c00251d4:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00251db:	75 cd                	jne    c00251aa <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00251dd:	eb 49                	jmp    c0025228 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00251df:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00251e3:	b9 03 00 00 00       	mov    ecx,0x3
c00251e8:	fc                   	cld    
c00251e9:	31 c0                	xor    eax,eax
c00251eb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00251ed:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00251f2:	89 d8                	mov    eax,ebx
c00251f4:	86 e0                	xchg   al,ah
c00251f6:	c1 c0 10             	rol    eax,0x10
c00251f9:	86 e0                	xchg   al,ah
c00251fb:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00251ff:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025203:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025207:	50                   	push   eax
c0025208:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002520c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025210:	56                   	push   esi
c0025211:	53                   	push   ebx
c0025212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025216:	c1 e0 0b             	shl    eax,0xb
c0025219:	50                   	push   eax
c002521a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002521e:	50                   	push   eax
c002521f:	55                   	push   ebp
c0025220:	e8 af fb ff ff       	call   c0024dd4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025225:	83 c4 20             	add    esp,0x20
c0025228:	83 c4 1c             	add    esp,0x1c
c002522b:	5b                   	pop    ebx
c002522c:	5e                   	pop    esi
c002522d:	5f                   	pop    edi
c002522e:	5d                   	pop    ebp
c002522f:	c3                   	ret    

c0025230 <AVX::open(int, int, void*)>:
c0025230:	83 ec 0c             	sub    esp,0xc
c0025233:	e8 40 11 00 00       	call   c0026378 <avxInit>
c0025238:	b8 00 00 00 00       	mov    eax,0x0
c002523d:	83 c4 0c             	add    esp,0xc
c0025240:	c3                   	ret    
c0025241:	90                   	nop

c0025242 <AVX::close(int, int, void*)>:
c0025242:	83 ec 0c             	sub    esp,0xc
c0025245:	e8 2f 11 00 00       	call   c0026379 <avxClose>
c002524a:	b8 00 00 00 00       	mov    eax,0x0
c002524f:	83 c4 0c             	add    esp,0xc
c0025252:	c3                   	ret    
c0025253:	90                   	nop

c0025254 <AVX::available()>:
c0025254:	83 ec 0c             	sub    esp,0xc
c0025257:	e8 14 11 00 00       	call   c0026370 <avxDetect>
c002525c:	85 c0                	test   eax,eax
c002525e:	0f 95 c0             	setne  al
c0025261:	83 c4 0c             	add    esp,0xc
c0025264:	c3                   	ret    
c0025265:	90                   	nop

c0025266 <AVX::save(void*)>:
c0025266:	83 ec 0c             	sub    esp,0xc
c0025269:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002526d:	83 ec 0c             	sub    esp,0xc
c0025270:	50                   	push   eax
c0025271:	e8 00 11 00 00       	call   c0026376 <avxSave>
c0025276:	83 c4 10             	add    esp,0x10
c0025279:	90                   	nop
c002527a:	83 c4 0c             	add    esp,0xc
c002527d:	c3                   	ret    

c002527e <AVX::load(void*)>:
c002527e:	83 ec 0c             	sub    esp,0xc
c0025281:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025285:	83 ec 0c             	sub    esp,0xc
c0025288:	50                   	push   eax
c0025289:	e8 e9 10 00 00       	call   c0026377 <avxLoad>
c002528e:	83 c4 10             	add    esp,0x10
c0025291:	90                   	nop
c0025292:	83 c4 0c             	add    esp,0xc
c0025295:	c3                   	ret    

c0025296 <AVX::AVX()>:
c0025296:	83 ec 0c             	sub    esp,0xc
c0025299:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002529d:	83 ec 08             	sub    esp,0x8
c00252a0:	68 54 c4 02 c0       	push   0xc002c454
c00252a5:	50                   	push   eax
c00252a6:	e8 71 ed fe ff       	call   c001401c <FPU::FPU(char const*)>
c00252ab:	83 c4 10             	add    esp,0x10
c00252ae:	ba 64 c4 02 c0       	mov    edx,0xc002c464
c00252b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252b7:	89 10                	mov    DWORD PTR [eax],edx
c00252b9:	90                   	nop
c00252ba:	83 c4 0c             	add    esp,0xc
c00252bd:	c3                   	ret    

c00252be <MMX::available()>:
c00252be:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00252c3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00252c9:	83 e0 20             	and    eax,0x20
c00252cc:	84 c0                	test   al,al
c00252ce:	0f 95 c0             	setne  al
c00252d1:	c3                   	ret    

c00252d2 <MMX::open(int, int, void*)>:
c00252d2:	83 ec 0c             	sub    esp,0xc
c00252d5:	e8 28 11 00 00       	call   c0026402 <x87Init>
c00252da:	b8 00 00 00 00       	mov    eax,0x0
c00252df:	83 c4 0c             	add    esp,0xc
c00252e2:	c3                   	ret    
c00252e3:	90                   	nop

c00252e4 <MMX::close(int, int, void*)>:
c00252e4:	83 ec 0c             	sub    esp,0xc
c00252e7:	e8 30 11 00 00       	call   c002641c <x87Close>
c00252ec:	b8 00 00 00 00       	mov    eax,0x0
c00252f1:	83 c4 0c             	add    esp,0xc
c00252f4:	c3                   	ret    
c00252f5:	90                   	nop

c00252f6 <MMX::save(void*)>:
c00252f6:	83 ec 0c             	sub    esp,0xc
c00252f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00252fd:	83 ec 0c             	sub    esp,0xc
c0025300:	50                   	push   eax
c0025301:	e8 eb 10 00 00       	call   c00263f1 <x87Save>
c0025306:	83 c4 10             	add    esp,0x10
c0025309:	90                   	nop
c002530a:	83 c4 0c             	add    esp,0xc
c002530d:	c3                   	ret    

c002530e <MMX::load(void*)>:
c002530e:	83 ec 0c             	sub    esp,0xc
c0025311:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025315:	83 ec 0c             	sub    esp,0xc
c0025318:	50                   	push   eax
c0025319:	e8 dc 10 00 00       	call   c00263fa <x87Load>
c002531e:	83 c4 10             	add    esp,0x10
c0025321:	90                   	nop
c0025322:	83 c4 0c             	add    esp,0xc
c0025325:	c3                   	ret    

c0025326 <MMX::MMX()>:
c0025326:	83 ec 0c             	sub    esp,0xc
c0025329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002532d:	83 ec 08             	sub    esp,0x8
c0025330:	68 94 c4 02 c0       	push   0xc002c494
c0025335:	50                   	push   eax
c0025336:	e8 e1 ec fe ff       	call   c001401c <FPU::FPU(char const*)>
c002533b:	83 c4 10             	add    esp,0x10
c002533e:	ba a4 c4 02 c0       	mov    edx,0xc002c4a4
c0025343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025347:	89 10                	mov    DWORD PTR [eax],edx
c0025349:	90                   	nop
c002534a:	83 c4 0c             	add    esp,0xc
c002534d:	c3                   	ret    

c002534e <SSE::open(int, int, void*)>:
c002534e:	83 ec 0c             	sub    esp,0xc
c0025351:	e8 5e 10 00 00       	call   c00263b4 <sseInit>
c0025356:	b8 00 00 00 00       	mov    eax,0x0
c002535b:	83 c4 0c             	add    esp,0xc
c002535e:	c3                   	ret    
c002535f:	90                   	nop

c0025360 <SSE::close(int, int, void*)>:
c0025360:	83 ec 0c             	sub    esp,0xc
c0025363:	e8 5c 10 00 00       	call   c00263c4 <sseClose>
c0025368:	b8 00 00 00 00       	mov    eax,0x0
c002536d:	83 c4 0c             	add    esp,0xc
c0025370:	c3                   	ret    
c0025371:	90                   	nop

c0025372 <SSE::available()>:
c0025372:	83 ec 1c             	sub    esp,0x1c
c0025375:	e8 16 10 00 00       	call   c0026390 <absolutelyNoChanceInHell>
c002537a:	85 c0                	test   eax,eax
c002537c:	0f 95 c0             	setne  al
c002537f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025383:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025387:	83 c4 1c             	add    esp,0x1c
c002538a:	c3                   	ret    
c002538b:	90                   	nop

c002538c <SSE::save(void*)>:
c002538c:	83 ec 0c             	sub    esp,0xc
c002538f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025393:	83 ec 0c             	sub    esp,0xc
c0025396:	50                   	push   eax
c0025397:	e8 0c 10 00 00       	call   c00263a8 <sseSave>
c002539c:	83 c4 10             	add    esp,0x10
c002539f:	90                   	nop
c00253a0:	83 c4 0c             	add    esp,0xc
c00253a3:	c3                   	ret    

c00253a4 <SSE::load(void*)>:
c00253a4:	83 ec 0c             	sub    esp,0xc
c00253a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253ab:	83 ec 0c             	sub    esp,0xc
c00253ae:	50                   	push   eax
c00253af:	e8 fa 0f 00 00       	call   c00263ae <sseLoad>
c00253b4:	83 c4 10             	add    esp,0x10
c00253b7:	90                   	nop
c00253b8:	83 c4 0c             	add    esp,0xc
c00253bb:	c3                   	ret    

c00253bc <SSE::SSE()>:
c00253bc:	83 ec 0c             	sub    esp,0xc
c00253bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253c3:	83 ec 08             	sub    esp,0x8
c00253c6:	68 d4 c4 02 c0       	push   0xc002c4d4
c00253cb:	50                   	push   eax
c00253cc:	e8 4b ec fe ff       	call   c001401c <FPU::FPU(char const*)>
c00253d1:	83 c4 10             	add    esp,0x10
c00253d4:	ba e4 c4 02 c0       	mov    edx,0xc002c4e4
c00253d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253dd:	89 10                	mov    DWORD PTR [eax],edx
c00253df:	90                   	nop
c00253e0:	83 c4 0c             	add    esp,0xc
c00253e3:	c3                   	ret    

c00253e4 <x87::open(int, int, void*)>:
c00253e4:	83 ec 0c             	sub    esp,0xc
c00253e7:	e8 16 10 00 00       	call   c0026402 <x87Init>
c00253ec:	b8 00 00 00 00       	mov    eax,0x0
c00253f1:	83 c4 0c             	add    esp,0xc
c00253f4:	c3                   	ret    
c00253f5:	90                   	nop

c00253f6 <x87::close(int, int, void*)>:
c00253f6:	83 ec 0c             	sub    esp,0xc
c00253f9:	e8 1e 10 00 00       	call   c002641c <x87Close>
c00253fe:	b8 00 00 00 00       	mov    eax,0x0
c0025403:	83 c4 0c             	add    esp,0xc
c0025406:	c3                   	ret    
c0025407:	90                   	nop

c0025408 <x87::available()>:
c0025408:	83 ec 0c             	sub    esp,0xc
c002540b:	e8 c6 0f 00 00       	call   c00263d6 <x87Detect>
c0025410:	85 c0                	test   eax,eax
c0025412:	0f 95 c0             	setne  al
c0025415:	83 c4 0c             	add    esp,0xc
c0025418:	c3                   	ret    
c0025419:	90                   	nop

c002541a <x87::save(void*)>:
c002541a:	83 ec 0c             	sub    esp,0xc
c002541d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025421:	83 ec 0c             	sub    esp,0xc
c0025424:	50                   	push   eax
c0025425:	e8 c7 0f 00 00       	call   c00263f1 <x87Save>
c002542a:	83 c4 10             	add    esp,0x10
c002542d:	90                   	nop
c002542e:	83 c4 0c             	add    esp,0xc
c0025431:	c3                   	ret    

c0025432 <x87::load(void*)>:
c0025432:	83 ec 0c             	sub    esp,0xc
c0025435:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025439:	83 ec 0c             	sub    esp,0xc
c002543c:	50                   	push   eax
c002543d:	e8 b8 0f 00 00       	call   c00263fa <x87Load>
c0025442:	83 c4 10             	add    esp,0x10
c0025445:	90                   	nop
c0025446:	83 c4 0c             	add    esp,0xc
c0025449:	c3                   	ret    

c002544a <x87::x87()>:
c002544a:	83 ec 0c             	sub    esp,0xc
c002544d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025451:	83 ec 08             	sub    esp,0x8
c0025454:	68 14 c5 02 c0       	push   0xc002c514
c0025459:	50                   	push   eax
c002545a:	e8 bd eb fe ff       	call   c001401c <FPU::FPU(char const*)>
c002545f:	83 c4 10             	add    esp,0x10
c0025462:	ba 24 c5 02 c0       	mov    edx,0xc002c524
c0025467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002546b:	89 10                	mov    DWORD PTR [eax],edx
c002546d:	90                   	nop
c002546e:	83 c4 0c             	add    esp,0xc
c0025471:	c3                   	ret    

c0025472 <APIC::disable()>:
c0025472:	90                   	nop
c0025473:	c3                   	ret    

c0025474 <APIC::close(int, int, void*)>:
c0025474:	55                   	push   ebp
c0025475:	89 e5                	mov    ebp,esp
c0025477:	83 ec 08             	sub    esp,0x8
c002547a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002547d:	8b 00                	mov    eax,DWORD PTR [eax]
c002547f:	83 c0 3c             	add    eax,0x3c
c0025482:	8b 00                	mov    eax,DWORD PTR [eax]
c0025484:	83 ec 0c             	sub    esp,0xc
c0025487:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002548a:	ff d0                	call   eax
c002548c:	83 c4 10             	add    esp,0x10
c002548f:	b8 00 00 00 00       	mov    eax,0x0
c0025494:	c9                   	leave  
c0025495:	c3                   	ret    

c0025496 <IOAPIC::close(int, int, void*)>:
c0025496:	b8 00 00 00 00       	mov    eax,0x0
c002549b:	c3                   	ret    

c002549c <APIC::io_wait()>:
c002549c:	eb 00                	jmp    c002549e <APIC::io_wait()+0x2>
c002549e:	eb 00                	jmp    c00254a0 <APIC::io_wait()+0x4>
c00254a0:	90                   	nop
c00254a1:	c3                   	ret    

c00254a2 <APIC::getBase()>:
c00254a2:	55                   	push   ebp
c00254a3:	89 e5                	mov    ebp,esp
c00254a5:	83 ec 18             	sub    esp,0x18
c00254a8:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00254ad:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00254b3:	83 e0 08             	and    eax,0x8
c00254b6:	84 c0                	test   al,al
c00254b8:	75 07                	jne    c00254c1 <APIC::getBase()+0x1f>
c00254ba:	b8 00 00 00 00       	mov    eax,0x0
c00254bf:	eb 21                	jmp    c00254e2 <APIC::getBase()+0x40>
c00254c1:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00254c6:	83 ec 08             	sub    esp,0x8
c00254c9:	6a 1b                	push   0x1b
c00254cb:	50                   	push   eax
c00254cc:	e8 6f 96 fe ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00254d1:	83 c4 10             	add    esp,0x10
c00254d4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00254d7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00254da:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00254dd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00254e2:	c9                   	leave  
c00254e3:	c3                   	ret    

c00254e4 <APIC::eoi(unsigned char)>:
c00254e4:	55                   	push   ebp
c00254e5:	89 e5                	mov    ebp,esp
c00254e7:	83 ec 28             	sub    esp,0x28
c00254ea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00254ed:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00254f0:	83 ec 0c             	sub    esp,0xc
c00254f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00254f6:	e8 a7 ff ff ff       	call   c00254a2 <APIC::getBase()>
c00254fb:	83 c4 10             	add    esp,0x10
c00254fe:	05 b0 00 00 00       	add    eax,0xb0
c0025503:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025506:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025509:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002550f:	90                   	nop
c0025510:	c9                   	leave  
c0025511:	c3                   	ret    

c0025512 <APIC::open(int, int, void*)>:
c0025512:	55                   	push   ebp
c0025513:	89 e5                	mov    ebp,esp
c0025515:	57                   	push   edi
c0025516:	56                   	push   esi
c0025517:	53                   	push   ebx
c0025518:	83 ec 2c             	sub    esp,0x2c
c002551b:	83 ec 0c             	sub    esp,0xc
c002551e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025521:	e8 7c ff ff ff       	call   c00254a2 <APIC::getBase()>
c0025526:	83 c4 10             	add    esp,0x10
c0025529:	89 c2                	mov    edx,eax
c002552b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002552e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025534:	0f b6 f8             	movzx  edi,al
c0025537:	89 d0                	mov    eax,edx
c0025539:	ba 00 00 00 00       	mov    edx,0x0
c002553e:	89 c1                	mov    ecx,eax
c0025540:	80 e5 ff             	and    ch,0xff
c0025543:	89 cb                	mov    ebx,ecx
c0025545:	0f b6 f2             	movzx  esi,dl
c0025548:	89 d8                	mov    eax,ebx
c002554a:	89 f2                	mov    edx,esi
c002554c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002554f:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025552:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025556:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002555a:	83 e0 00             	and    eax,0x0
c002555d:	09 d0                	or     eax,edx
c002555f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025563:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025566:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002556c:	8d 50 01             	lea    edx,[eax+0x1]
c002556f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025572:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025578:	0f b6 d0             	movzx  edx,al
c002557b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002557e:	83 c2 08             	add    edx,0x8
c0025581:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025585:	0f b6 c9             	movzx  ecx,cl
c0025588:	81 c9 00 00 01 00    	or     ecx,0x10000
c002558e:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025592:	83 ec 0c             	sub    esp,0xc
c0025595:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025598:	e8 05 ff ff ff       	call   c00254a2 <APIC::getBase()>
c002559d:	83 c4 10             	add    esp,0x10
c00255a0:	05 f0 00 00 00       	add    eax,0xf0
c00255a5:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00255a8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00255ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00255ad:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00255b0:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00255b7:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00255be:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00255c1:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00255c4:	89 10                	mov    DWORD PTR [eax],edx
c00255c6:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00255cd:	a1 90 02 03 c0       	mov    eax,ds:0xc0030290
c00255d2:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00255d5:	7d 7c                	jge    c0025653 <APIC::open(int, int, void*)+0x141>
c00255d7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00255da:	8b 04 85 a0 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfd60]
c00255e1:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00255e4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00255e7:	8b 04 85 a0 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfd60]
c00255ee:	c1 e8 08             	shr    eax,0x8
c00255f1:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00255f5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00255f8:	8b 04 85 a0 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfd60]
c00255ff:	c1 e8 18             	shr    eax,0x18
c0025602:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025605:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025609:	75 40                	jne    c002564b <APIC::open(int, int, void*)+0x139>
c002560b:	83 ec 0c             	sub    esp,0xc
c002560e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025611:	e8 8c fe ff ff       	call   c00254a2 <APIC::getBase()>
c0025616:	83 c4 10             	add    esp,0x10
c0025619:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c002561d:	75 07                	jne    c0025626 <APIC::open(int, int, void*)+0x114>
c002561f:	ba 60 03 00 00       	mov    edx,0x360
c0025624:	eb 05                	jmp    c002562b <APIC::open(int, int, void*)+0x119>
c0025626:	ba 50 03 00 00       	mov    edx,0x350
c002562b:	01 d0                	add    eax,edx
c002562d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025630:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025633:	8b 00                	mov    eax,DWORD PTR [eax]
c0025635:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025638:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c002563f:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025643:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025646:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025649:	89 10                	mov    DWORD PTR [eax],edx
c002564b:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c002564e:	e9 7a ff ff ff       	jmp    c00255cd <APIC::open(int, int, void*)+0xbb>
c0025653:	b8 00 00 00 00       	mov    eax,0x0
c0025658:	8d 65 f4             	lea    esp,[ebp-0xc]
c002565b:	5b                   	pop    ebx
c002565c:	5e                   	pop    esi
c002565d:	5f                   	pop    edi
c002565e:	5d                   	pop    ebp
c002565f:	c3                   	ret    

c0025660 <IOAPIC::IOAPIC()>:
c0025660:	83 ec 0c             	sub    esp,0xc
c0025663:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025667:	83 ec 08             	sub    esp,0x8
c002566a:	68 54 c5 02 c0       	push   0xc002c554
c002566f:	50                   	push   eax
c0025670:	e8 97 e6 fe ff       	call   c0013d0c <Device::Device(char const*)>
c0025675:	83 c4 10             	add    esp,0x10
c0025678:	ba 7c c6 02 c0       	mov    edx,0xc002c67c
c002567d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025681:	89 10                	mov    DWORD PTR [eax],edx
c0025683:	90                   	nop
c0025684:	83 c4 0c             	add    esp,0xc
c0025687:	c3                   	ret    

c0025688 <APIC::APIC()>:
c0025688:	53                   	push   ebx
c0025689:	83 ec 18             	sub    esp,0x18
c002568c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025690:	83 ec 08             	sub    esp,0x8
c0025693:	68 5c c5 02 c0       	push   0xc002c55c
c0025698:	50                   	push   eax
c0025699:	e8 d8 ed fe ff       	call   c0014476 <InterruptController::InterruptController(char const*)>
c002569e:	83 c4 10             	add    esp,0x10
c00256a1:	ba 34 c6 02 c0       	mov    edx,0xc002c634
c00256a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00256aa:	89 10                	mov    DWORD PTR [eax],edx
c00256ac:	a0 60 1d 03 c0       	mov    al,ds:0xc0031d60
c00256b1:	83 f0 01             	xor    eax,0x1
c00256b4:	84 c0                	test   al,al
c00256b6:	0f 84 a1 00 00 00    	je     c002575d <APIC::APIC()+0xd5>
c00256bc:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00256c1:	a0 40 03 03 c0       	mov    al,ds:0xc0030340
c00256c6:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00256ca:	0f 83 86 00 00 00    	jae    c0025756 <APIC::APIC()+0xce>
c00256d0:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00256d8:	83 ec 0c             	sub    esp,0xc
c00256db:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00256df:	e8 b5 9e fe ff       	call   c000f599 <malloc>
c00256e4:	83 c4 10             	add    esp,0x10
c00256e7:	89 c3                	mov    ebx,eax
c00256e9:	83 ec 0c             	sub    esp,0xc
c00256ec:	53                   	push   ebx
c00256ed:	e8 6e ff ff ff       	call   c0025660 <IOAPIC::IOAPIC()>
c00256f2:	83 c4 10             	add    esp,0x10
c00256f5:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00256f9:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00256fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025702:	89 14 85 40 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce2c0],edx
c0025709:	a1 20 1d 03 c0       	mov    eax,ds:0xc0031d20
c002570e:	40                   	inc    eax
c002570f:	a3 20 1d 03 c0       	mov    ds:0xc0031d20,eax
c0025714:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0025719:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002571f:	83 ec 08             	sub    esp,0x8
c0025722:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025726:	50                   	push   eax
c0025727:	e8 dc e3 fe ff       	call   c0013b08 <Device::addChild(Device*)>
c002572c:	83 c4 10             	add    esp,0x10
c002572f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025733:	8b 00                	mov    eax,DWORD PTR [eax]
c0025735:	83 c0 08             	add    eax,0x8
c0025738:	8b 00                	mov    eax,DWORD PTR [eax]
c002573a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c002573f:	6a 00                	push   0x0
c0025741:	6a 00                	push   0x0
c0025743:	52                   	push   edx
c0025744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025748:	ff d0                	call   eax
c002574a:	83 c4 10             	add    esp,0x10
c002574d:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025751:	e9 6b ff ff ff       	jmp    c00256c1 <APIC::APIC()+0x39>
c0025756:	c6 05 60 1d 03 c0 01 	mov    BYTE PTR ds:0xc0031d60,0x1
c002575d:	90                   	nop
c002575e:	83 c4 18             	add    esp,0x18
c0025761:	5b                   	pop    ebx
c0025762:	c3                   	ret    
c0025763:	90                   	nop

c0025764 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025764:	55                   	push   ebp
c0025765:	89 e5                	mov    ebp,esp
c0025767:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002576a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025770:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025773:	72 1d                	jb     c0025792 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025775:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025778:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002577e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025781:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025787:	01 d0                	add    eax,edx
c0025789:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002578c:	73 04                	jae    c0025792 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002578e:	b0 01                	mov    al,0x1
c0025790:	eb 02                	jmp    c0025794 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025792:	b0 00                	mov    al,0x0
c0025794:	5d                   	pop    ebp
c0025795:	c3                   	ret    

c0025796 <IOAPIC::read(int)>:
c0025796:	55                   	push   ebp
c0025797:	89 e5                	mov    ebp,esp
c0025799:	83 ec 10             	sub    esp,0x10
c002579c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002579f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00257a5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00257a8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00257ab:	0f b6 d0             	movzx  edx,al
c00257ae:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00257b1:	89 10                	mov    DWORD PTR [eax],edx
c00257b3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00257b6:	83 c0 10             	add    eax,0x10
c00257b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00257bb:	c9                   	leave  
c00257bc:	c3                   	ret    
c00257bd:	90                   	nop

c00257be <IOAPIC::open(int, int, void*)>:
c00257be:	55                   	push   ebp
c00257bf:	89 e5                	mov    ebp,esp
c00257c1:	57                   	push   edi
c00257c2:	56                   	push   esi
c00257c3:	53                   	push   ebx
c00257c4:	83 ec 0c             	sub    esp,0xc
c00257c7:	83 ec 0c             	sub    esp,0xc
c00257ca:	68 87 c5 02 c0       	push   0xc002c587
c00257cf:	e8 fb ce fe ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c00257d4:	83 c4 10             	add    esp,0x10
c00257d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257da:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00257dd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00257e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257e6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00257ec:	8b 14 85 80 03 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfc80]
c00257f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257f6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00257fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257ff:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025805:	8b 14 85 00 04 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfc00]
c002580c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002580f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025815:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025818:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002581e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025821:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025827:	0f b6 f8             	movzx  edi,al
c002582a:	89 d0                	mov    eax,edx
c002582c:	ba 00 00 00 00       	mov    edx,0x0
c0025831:	89 c1                	mov    ecx,eax
c0025833:	80 e5 ff             	and    ch,0xff
c0025836:	89 cb                	mov    ebx,ecx
c0025838:	0f b6 f2             	movzx  esi,dl
c002583b:	89 d8                	mov    eax,ebx
c002583d:	89 f2                	mov    edx,esi
c002583f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025842:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025845:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025849:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002584d:	83 e0 00             	and    eax,0x0
c0025850:	09 d0                	or     eax,edx
c0025852:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025856:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025859:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002585f:	8d 50 01             	lea    edx,[eax+0x1]
c0025862:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025865:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002586b:	0f b6 d0             	movzx  edx,al
c002586e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025871:	83 c2 08             	add    edx,0x8
c0025874:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025878:	0f b6 c9             	movzx  ecx,cl
c002587b:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025881:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025885:	83 ec 08             	sub    esp,0x8
c0025888:	6a 01                	push   0x1
c002588a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002588d:	e8 04 ff ff ff       	call   c0025796 <IOAPIC::read(int)>
c0025892:	83 c4 10             	add    esp,0x10
c0025895:	c1 f8 10             	sar    eax,0x10
c0025898:	0f b6 c0             	movzx  eax,al
c002589b:	8d 50 01             	lea    edx,[eax+0x1]
c002589e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258a1:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00258a7:	b8 00 00 00 00       	mov    eax,0x0
c00258ac:	8d 65 f4             	lea    esp,[ebp-0xc]
c00258af:	5b                   	pop    ebx
c00258b0:	5e                   	pop    esi
c00258b1:	5f                   	pop    edi
c00258b2:	5d                   	pop    ebp
c00258b3:	c3                   	ret    

c00258b4 <IOAPIC::write(int, int)>:
c00258b4:	55                   	push   ebp
c00258b5:	89 e5                	mov    ebp,esp
c00258b7:	83 ec 10             	sub    esp,0x10
c00258ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258bd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00258c3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00258c6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258c9:	0f b6 d0             	movzx  edx,al
c00258cc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00258cf:	89 10                	mov    DWORD PTR [eax],edx
c00258d1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00258d4:	8d 50 10             	lea    edx,[eax+0x10]
c00258d7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00258da:	89 02                	mov    DWORD PTR [edx],eax
c00258dc:	90                   	nop
c00258dd:	c9                   	leave  
c00258de:	c3                   	ret    
c00258df:	90                   	nop

c00258e0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00258e0:	55                   	push   ebp
c00258e1:	89 e5                	mov    ebp,esp
c00258e3:	53                   	push   ebx
c00258e4:	83 ec 2c             	sub    esp,0x2c
c00258e7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258ea:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00258ed:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00258f0:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00258f3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00258f6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00258f9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00258fc:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00258ff:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025902:	88 d8                	mov    al,bl
c0025904:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025907:	88 c8                	mov    al,cl
c0025909:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002590c:	88 d0                	mov    al,dl
c002590e:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025911:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025915:	83 c0 08             	add    eax,0x8
c0025918:	01 c0                	add    eax,eax
c002591a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002591d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025921:	83 c0 08             	add    eax,0x8
c0025924:	01 c0                	add    eax,eax
c0025926:	40                   	inc    eax
c0025927:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002592a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002592d:	50                   	push   eax
c002592e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025931:	e8 60 fe ff ff       	call   c0025796 <IOAPIC::read(int)>
c0025936:	83 c4 08             	add    esp,0x8
c0025939:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002593c:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025943:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025946:	c1 e0 18             	shl    eax,0x18
c0025949:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002594c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002594f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025952:	52                   	push   edx
c0025953:	50                   	push   eax
c0025954:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025957:	e8 58 ff ff ff       	call   c00258b4 <IOAPIC::write(int, int)>
c002595c:	83 c4 0c             	add    esp,0xc
c002595f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025962:	50                   	push   eax
c0025963:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025966:	e8 2b fe ff ff       	call   c0025796 <IOAPIC::read(int)>
c002596b:	83 c4 08             	add    esp,0x8
c002596e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025971:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025978:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002597f:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025986:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002598a:	74 09                	je     c0025995 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c002598c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025993:	eb 07                	jmp    c002599c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025995:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002599c:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00259a0:	74 09                	je     c00259ab <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00259a2:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00259a9:	eb 07                	jmp    c00259b2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00259ab:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00259b2:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00259b9:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00259bd:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00259c0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00259c3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00259c6:	52                   	push   edx
c00259c7:	50                   	push   eax
c00259c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259cb:	e8 e4 fe ff ff       	call   c00258b4 <IOAPIC::write(int, int)>
c00259d0:	83 c4 0c             	add    esp,0xc
c00259d3:	90                   	nop
c00259d4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00259d7:	c9                   	leave  
c00259d8:	c3                   	ret    
c00259d9:	90                   	nop

c00259da <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00259da:	55                   	push   ebp
c00259db:	89 e5                	mov    ebp,esp
c00259dd:	57                   	push   edi
c00259de:	56                   	push   esi
c00259df:	53                   	push   ebx
c00259e0:	83 ec 2c             	sub    esp,0x2c
c00259e3:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00259e6:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00259e9:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00259ed:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00259f1:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00259f5:	74 5a                	je     c0025a51 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00259f7:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00259fb:	7f 44                	jg     c0025a41 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00259fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a00:	05 20 cc 02 c0       	add    eax,0xc002cc20
c0025a05:	8a 00                	mov    al,BYTE PTR [eax]
c0025a07:	0f b6 c0             	movzx  eax,al
c0025a0a:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025a0d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a10:	66 8b 84 00 20 03 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfce0]
c0025a18:	0f b7 c0             	movzx  eax,ax
c0025a1b:	83 e0 02             	and    eax,0x2
c0025a1e:	85 c0                	test   eax,eax
c0025a20:	74 04                	je     c0025a26 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025a22:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025a26:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a29:	66 8b 84 00 20 03 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfce0]
c0025a31:	0f b7 c0             	movzx  eax,ax
c0025a34:	83 e0 08             	and    eax,0x8
c0025a37:	85 c0                	test   eax,eax
c0025a39:	74 16                	je     c0025a51 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025a3b:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025a3f:	eb 10                	jmp    c0025a51 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025a41:	83 ec 0c             	sub    esp,0xc
c0025a44:	68 98 c5 02 c0       	push   0xc002c598
c0025a49:	e8 ed 43 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c0025a4e:	83 c4 10             	add    esp,0x10
c0025a51:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025a55:	a1 20 1d 03 c0       	mov    eax,ds:0xc0031d20
c0025a5a:	83 ec 08             	sub    esp,0x8
c0025a5d:	50                   	push   eax
c0025a5e:	68 d0 c5 02 c0       	push   0xc002c5d0
c0025a63:	e8 67 cc fe ff       	call   c00126cf <Dbg::kprintf(char const*, ...)>
c0025a68:	83 c4 10             	add    esp,0x10
c0025a6b:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025a72:	a1 20 1d 03 c0       	mov    eax,ds:0xc0031d20
c0025a77:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025a7a:	7d 67                	jge    c0025ae3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025a7c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025a7f:	8b 04 85 40 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce2c0]
c0025a86:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a89:	83 ec 08             	sub    esp,0x8
c0025a8c:	52                   	push   edx
c0025a8d:	50                   	push   eax
c0025a8e:	e8 d1 fc ff ff       	call   c0025764 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025a93:	83 c4 10             	add    esp,0x10
c0025a96:	84 c0                	test   al,al
c0025a98:	74 44                	je     c0025ade <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025a9a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025a9d:	8b 1c 85 40 1d 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffce2c0]
c0025aa4:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025aa8:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025aab:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025aaf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ab2:	83 c0 20             	add    eax,0x20
c0025ab5:	0f b6 f0             	movzx  esi,al
c0025ab8:	b8 00 00 00 00       	mov    eax,0x0
c0025abd:	99                   	cdq    
c0025abe:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025ac1:	0f b6 c9             	movzx  ecx,cl
c0025ac4:	83 ec 04             	sub    esp,0x4
c0025ac7:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025aca:	57                   	push   edi
c0025acb:	56                   	push   esi
c0025acc:	52                   	push   edx
c0025acd:	50                   	push   eax
c0025ace:	51                   	push   ecx
c0025acf:	53                   	push   ebx
c0025ad0:	e8 0b fe ff ff       	call   c00258e0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025ad5:	83 c4 20             	add    esp,0x20
c0025ad8:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025adc:	eb 05                	jmp    c0025ae3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025ade:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025ae1:	eb 8f                	jmp    c0025a72 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025ae3:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025ae6:	83 f0 01             	xor    eax,0x1
c0025ae9:	84 c0                	test   al,al
c0025aeb:	74 10                	je     c0025afd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025aed:	83 ec 0c             	sub    esp,0xc
c0025af0:	68 e7 c5 02 c0       	push   0xc002c5e7
c0025af5:	e8 41 43 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c0025afa:	83 c4 10             	add    esp,0x10
c0025afd:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025b01:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025b08:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025b0c:	7f 65                	jg     c0025b73 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025b0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b11:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b14:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025b1b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025b1e:	01 ca                	add    edx,ecx
c0025b20:	83 c2 54             	add    edx,0x54
c0025b23:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025b27:	85 c0                	test   eax,eax
c0025b29:	75 43                	jne    c0025b6e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025b2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b2e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b31:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025b38:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025b3b:	01 ca                	add    edx,ecx
c0025b3d:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025b40:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025b43:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025b47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b4a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b4d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025b54:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025b57:	01 ca                	add    edx,ecx
c0025b59:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025b5f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025b62:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025b66:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b69:	83 e8 20             	sub    eax,0x20
c0025b6c:	eb 1a                	jmp    c0025b88 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025b6e:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025b71:	eb 95                	jmp    c0025b08 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025b73:	83 ec 0c             	sub    esp,0xc
c0025b76:	68 f4 c5 02 c0       	push   0xc002c5f4
c0025b7b:	e8 bb 42 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c0025b80:	83 c4 10             	add    esp,0x10
c0025b83:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025b88:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025b8b:	5b                   	pop    ebx
c0025b8c:	5e                   	pop    esi
c0025b8d:	5f                   	pop    edi
c0025b8e:	5d                   	pop    ebp
c0025b8f:	c3                   	ret    

c0025b90 <PIC::disable()>:
c0025b90:	55                   	push   ebp
c0025b91:	89 e5                	mov    ebp,esp
c0025b93:	83 ec 10             	sub    esp,0x10
c0025b96:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025b9c:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025ba0:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025ba3:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025ba7:	ee                   	out    dx,al
c0025ba8:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025bae:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025bb2:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025bb5:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025bb9:	ee                   	out    dx,al
c0025bba:	90                   	nop
c0025bbb:	c9                   	leave  
c0025bbc:	c3                   	ret    
c0025bbd:	90                   	nop

c0025bbe <PIC::close(int, int, void*)>:
c0025bbe:	55                   	push   ebp
c0025bbf:	89 e5                	mov    ebp,esp
c0025bc1:	83 ec 08             	sub    esp,0x8
c0025bc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bc7:	8b 00                	mov    eax,DWORD PTR [eax]
c0025bc9:	83 c0 3c             	add    eax,0x3c
c0025bcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0025bce:	83 ec 0c             	sub    esp,0xc
c0025bd1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bd4:	ff d0                	call   eax
c0025bd6:	83 c4 10             	add    esp,0x10
c0025bd9:	b8 00 00 00 00       	mov    eax,0x0
c0025bde:	c9                   	leave  
c0025bdf:	c3                   	ret    

c0025be0 <PIC::PIC()>:
c0025be0:	83 ec 0c             	sub    esp,0xc
c0025be3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025be7:	83 ec 08             	sub    esp,0x8
c0025bea:	68 a0 c6 02 c0       	push   0xc002c6a0
c0025bef:	50                   	push   eax
c0025bf0:	e8 81 e8 fe ff       	call   c0014476 <InterruptController::InterruptController(char const*)>
c0025bf5:	83 c4 10             	add    esp,0x10
c0025bf8:	ba cc c6 02 c0       	mov    edx,0xc002c6cc
c0025bfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c01:	89 10                	mov    DWORD PTR [eax],edx
c0025c03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c07:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c0d:	0f b6 d0             	movzx  edx,al
c0025c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c14:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025c1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c1f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c25:	0f b6 d0             	movzx  edx,al
c0025c28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c2c:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025c31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c35:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c3b:	8d 50 01             	lea    edx,[eax+0x1]
c0025c3e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025c42:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025c48:	0f b6 d0             	movzx  edx,al
c0025c4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c4f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025c53:	83 e1 3f             	and    ecx,0x3f
c0025c56:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c5e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c64:	0f b6 d0             	movzx  edx,al
c0025c67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c6b:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c76:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c7c:	0f b6 d0             	movzx  edx,al
c0025c7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c83:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c8c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c92:	8d 50 01             	lea    edx,[eax+0x1]
c0025c95:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025c99:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025c9f:	0f b6 d0             	movzx  edx,al
c0025ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ca6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025caa:	83 e1 3f             	and    ecx,0x3f
c0025cad:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025cb1:	90                   	nop
c0025cb2:	83 c4 0c             	add    esp,0xc
c0025cb5:	c3                   	ret    

c0025cb6 <PIC::ioWait()>:
c0025cb6:	eb 00                	jmp    c0025cb8 <PIC::ioWait()+0x2>
c0025cb8:	eb 00                	jmp    c0025cba <PIC::ioWait()+0x4>
c0025cba:	90                   	nop
c0025cbb:	c3                   	ret    

c0025cbc <PIC::getIRQReg(int)>:
c0025cbc:	55                   	push   ebp
c0025cbd:	89 e5                	mov    ebp,esp
c0025cbf:	83 ec 10             	sub    esp,0x10
c0025cc2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cc5:	0f b6 c0             	movzx  eax,al
c0025cc8:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025cce:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025cd1:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025cd4:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025cd8:	ee                   	out    dx,al
c0025cd9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cdc:	0f b6 c0             	movzx  eax,al
c0025cdf:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025ce5:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025ce8:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025ceb:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025cef:	ee                   	out    dx,al
c0025cf0:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025cf6:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025cfa:	89 c2                	mov    edx,eax
c0025cfc:	ec                   	in     al,dx
c0025cfd:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025d00:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025d03:	0f b6 c0             	movzx  eax,al
c0025d06:	c1 e0 08             	shl    eax,0x8
c0025d09:	89 c1                	mov    ecx,eax
c0025d0b:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025d11:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025d15:	89 c2                	mov    edx,eax
c0025d17:	ec                   	in     al,dx
c0025d18:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025d1b:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025d1e:	0f b6 c0             	movzx  eax,al
c0025d21:	09 c8                	or     eax,ecx
c0025d23:	c9                   	leave  
c0025d24:	c3                   	ret    
c0025d25:	90                   	nop

c0025d26 <PIC::eoi(unsigned char)>:
c0025d26:	55                   	push   ebp
c0025d27:	89 e5                	mov    ebp,esp
c0025d29:	83 ec 14             	sub    esp,0x14
c0025d2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d2f:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025d32:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025d36:	75 1e                	jne    c0025d56 <PIC::eoi(unsigned char)+0x30>
c0025d38:	6a 0b                	push   0xb
c0025d3a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d3d:	e8 7a ff ff ff       	call   c0025cbc <PIC::getIRQReg(int)>
c0025d42:	83 c4 08             	add    esp,0x8
c0025d45:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025d49:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025d4d:	25 80 00 00 00       	and    eax,0x80
c0025d52:	85 c0                	test   eax,eax
c0025d54:	74 5f                	je     c0025db5 <PIC::eoi(unsigned char)+0x8f>
c0025d56:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025d5a:	75 2d                	jne    c0025d89 <PIC::eoi(unsigned char)+0x63>
c0025d5c:	6a 0b                	push   0xb
c0025d5e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d61:	e8 56 ff ff ff       	call   c0025cbc <PIC::getIRQReg(int)>
c0025d66:	83 c4 08             	add    esp,0x8
c0025d69:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025d6d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025d70:	66 85 c0             	test   ax,ax
c0025d73:	78 14                	js     c0025d89 <PIC::eoi(unsigned char)+0x63>
c0025d75:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025d7b:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025d7f:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025d82:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025d86:	ee                   	out    dx,al
c0025d87:	eb 2d                	jmp    c0025db6 <PIC::eoi(unsigned char)+0x90>
c0025d89:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025d8d:	76 12                	jbe    c0025da1 <PIC::eoi(unsigned char)+0x7b>
c0025d8f:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025d95:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025d99:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025d9c:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025da0:	ee                   	out    dx,al
c0025da1:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025da7:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025dab:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025dae:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025db2:	ee                   	out    dx,al
c0025db3:	eb 01                	jmp    c0025db6 <PIC::eoi(unsigned char)+0x90>
c0025db5:	90                   	nop
c0025db6:	c9                   	leave  
c0025db7:	c3                   	ret    

c0025db8 <PIC::remap()>:
c0025db8:	55                   	push   ebp
c0025db9:	89 e5                	mov    ebp,esp
c0025dbb:	83 ec 48             	sub    esp,0x48
c0025dbe:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025dc5:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025dcc:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025dd2:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025dd5:	89 c2                	mov    edx,eax
c0025dd7:	ec                   	in     al,dx
c0025dd8:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025ddb:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025dde:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025de1:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025de7:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025dea:	89 c2                	mov    edx,eax
c0025dec:	ec                   	in     al,dx
c0025ded:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025df0:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025df3:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025df6:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025dfc:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025e00:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025e03:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025e06:	ee                   	out    dx,al
c0025e07:	83 ec 0c             	sub    esp,0xc
c0025e0a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e0d:	e8 a4 fe ff ff       	call   c0025cb6 <PIC::ioWait()>
c0025e12:	83 c4 10             	add    esp,0x10
c0025e15:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025e1b:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025e1f:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025e22:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025e25:	ee                   	out    dx,al
c0025e26:	83 ec 0c             	sub    esp,0xc
c0025e29:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e2c:	e8 85 fe ff ff       	call   c0025cb6 <PIC::ioWait()>
c0025e31:	83 c4 10             	add    esp,0x10
c0025e34:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025e37:	0f b6 c0             	movzx  eax,al
c0025e3a:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025e40:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025e43:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025e46:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025e49:	ee                   	out    dx,al
c0025e4a:	83 ec 0c             	sub    esp,0xc
c0025e4d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e50:	e8 61 fe ff ff       	call   c0025cb6 <PIC::ioWait()>
c0025e55:	83 c4 10             	add    esp,0x10
c0025e58:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025e5b:	0f b6 c0             	movzx  eax,al
c0025e5e:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025e64:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025e67:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025e6a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025e6d:	ee                   	out    dx,al
c0025e6e:	83 ec 0c             	sub    esp,0xc
c0025e71:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e74:	e8 3d fe ff ff       	call   c0025cb6 <PIC::ioWait()>
c0025e79:	83 c4 10             	add    esp,0x10
c0025e7c:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025e82:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025e86:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025e89:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025e8c:	ee                   	out    dx,al
c0025e8d:	83 ec 0c             	sub    esp,0xc
c0025e90:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e93:	e8 1e fe ff ff       	call   c0025cb6 <PIC::ioWait()>
c0025e98:	83 c4 10             	add    esp,0x10
c0025e9b:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0025ea1:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0025ea5:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0025ea8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025eab:	ee                   	out    dx,al
c0025eac:	83 ec 0c             	sub    esp,0xc
c0025eaf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025eb2:	e8 ff fd ff ff       	call   c0025cb6 <PIC::ioWait()>
c0025eb7:	83 c4 10             	add    esp,0x10
c0025eba:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025ec0:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025ec4:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025ec7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025eca:	ee                   	out    dx,al
c0025ecb:	83 ec 0c             	sub    esp,0xc
c0025ece:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ed1:	e8 e0 fd ff ff       	call   c0025cb6 <PIC::ioWait()>
c0025ed6:	83 c4 10             	add    esp,0x10
c0025ed9:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025edf:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025ee3:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025ee6:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025ee9:	ee                   	out    dx,al
c0025eea:	83 ec 0c             	sub    esp,0xc
c0025eed:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ef0:	e8 c1 fd ff ff       	call   c0025cb6 <PIC::ioWait()>
c0025ef5:	83 c4 10             	add    esp,0x10
c0025ef8:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025efc:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025f02:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025f05:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025f08:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025f0b:	ee                   	out    dx,al
c0025f0c:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025f10:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025f16:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025f19:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025f1c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025f1f:	ee                   	out    dx,al
c0025f20:	90                   	nop
c0025f21:	c9                   	leave  
c0025f22:	c3                   	ret    
c0025f23:	90                   	nop

c0025f24 <PIC::open(int, int, void*)>:
c0025f24:	55                   	push   ebp
c0025f25:	89 e5                	mov    ebp,esp
c0025f27:	83 ec 18             	sub    esp,0x18
c0025f2a:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025f30:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025f34:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f37:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025f3b:	ee                   	out    dx,al
c0025f3c:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025f42:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025f46:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025f49:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025f4d:	ee                   	out    dx,al
c0025f4e:	83 ec 0c             	sub    esp,0xc
c0025f51:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f54:	e8 5f fe ff ff       	call   c0025db8 <PIC::remap()>
c0025f59:	83 c4 10             	add    esp,0x10
c0025f5c:	b8 00 00 00 00       	mov    eax,0x0
c0025f61:	c9                   	leave  
c0025f62:	c3                   	ret    
c0025f63:	90                   	nop

c0025f64 <APICTimer::close(int, int, void*)>:
c0025f64:	b8 00 00 00 00       	mov    eax,0x0
c0025f69:	c3                   	ret    

c0025f6a <apicTimerHandler(regs*, void*)>:
c0025f6a:	83 ec 0c             	sub    esp,0xc
c0025f6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f71:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f73:	99                   	cdq    
c0025f74:	52                   	push   edx
c0025f75:	50                   	push   eax
c0025f76:	6a 00                	push   0x0
c0025f78:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025f7d:	e8 92 07 00 00       	call   c0026714 <__udivdi3>
c0025f82:	83 c4 10             	add    esp,0x10
c0025f85:	83 ec 08             	sub    esp,0x8
c0025f88:	52                   	push   edx
c0025f89:	50                   	push   eax
c0025f8a:	e8 3e 06 ff ff       	call   c00165cd <timerHandler(unsigned long long)>
c0025f8f:	83 c4 10             	add    esp,0x10
c0025f92:	90                   	nop
c0025f93:	83 c4 0c             	add    esp,0xc
c0025f96:	c3                   	ret    
c0025f97:	90                   	nop

c0025f98 <APICTimer::write(int)>:
c0025f98:	53                   	push   ebx
c0025f99:	83 ec 28             	sub    esp,0x28
c0025f9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025fa0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0025fa4:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025faa:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0025faf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025fb5:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025fbb:	83 ec 0c             	sub    esp,0xc
c0025fbe:	50                   	push   eax
c0025fbf:	e8 de f4 ff ff       	call   c00254a2 <APIC::getBase()>
c0025fc4:	83 c4 10             	add    esp,0x10
c0025fc7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025fcb:	a1 30 e0 02 c0       	mov    eax,ds:0xc002e030
c0025fd0:	8b 15 34 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e034
c0025fd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025fda:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025fde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025fe2:	05 e0 03 00 00       	add    eax,0x3e0
c0025fe7:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025fed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025ff1:	05 80 03 00 00       	add    eax,0x380
c0025ff6:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0025ffc:	fb                   	sti    
c0025ffd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026001:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026005:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c002600a:	83 d2 00             	adc    edx,0x0
c002600d:	89 c1                	mov    ecx,eax
c002600f:	89 d3                	mov    ebx,edx
c0026011:	a1 30 e0 02 c0       	mov    eax,ds:0xc002e030
c0026016:	8b 15 34 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e034
c002601c:	39 c8                	cmp    eax,ecx
c002601e:	89 d0                	mov    eax,edx
c0026020:	19 d8                	sbb    eax,ebx
c0026022:	73 02                	jae    c0026026 <APICTimer::write(int)+0x8e>
c0026024:	eb d7                	jmp    c0025ffd <APICTimer::write(int)+0x65>
c0026026:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002602a:	05 20 03 00 00       	add    eax,0x320
c002602f:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026035:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026039:	05 90 03 00 00       	add    eax,0x390
c002603e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026040:	f7 d0                	not    eax
c0026042:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026046:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002604a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002604e:	ba 00 00 00 00       	mov    edx,0x0
c0026053:	f7 f3                	div    ebx
c0026055:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026059:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002605d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026063:	0d 00 00 02 00       	or     eax,0x20000
c0026068:	89 c2                	mov    edx,eax
c002606a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002606e:	05 20 03 00 00       	add    eax,0x320
c0026073:	89 10                	mov    DWORD PTR [eax],edx
c0026075:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026079:	05 e0 03 00 00       	add    eax,0x3e0
c002607e:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026084:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026088:	05 80 03 00 00       	add    eax,0x380
c002608d:	89 c2                	mov    edx,eax
c002608f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026093:	89 02                	mov    DWORD PTR [edx],eax
c0026095:	90                   	nop
c0026096:	83 c4 28             	add    esp,0x28
c0026099:	5b                   	pop    ebx
c002609a:	c3                   	ret    
c002609b:	90                   	nop

c002609c <APICTimer::open(int, int, void*)>:
c002609c:	57                   	push   edi
c002609d:	56                   	push   esi
c002609e:	53                   	push   ebx
c002609f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00260a5:	83 c0 24             	add    eax,0x24
c00260a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00260aa:	83 ec 08             	sub    esp,0x8
c00260ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00260b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00260b5:	ff d0                	call   eax
c00260b7:	83 c4 10             	add    esp,0x10
c00260ba:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c00260bf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00260c5:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00260cb:	83 ec 0c             	sub    esp,0xc
c00260ce:	50                   	push   eax
c00260cf:	e8 ce f3 ff ff       	call   c00254a2 <APIC::getBase()>
c00260d4:	83 c4 10             	add    esp,0x10
c00260d7:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00260dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260e1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00260e7:	0f b6 f8             	movzx  edi,al
c00260ea:	89 d0                	mov    eax,edx
c00260ec:	ba 00 00 00 00       	mov    edx,0x0
c00260f1:	89 c1                	mov    ecx,eax
c00260f3:	80 e5 ff             	and    ch,0xff
c00260f6:	89 cb                	mov    ebx,ecx
c00260f8:	0f b6 f2             	movzx  esi,dl
c00260fb:	89 d8                	mov    eax,ebx
c00260fd:	89 f2                	mov    edx,esi
c00260ff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026103:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026106:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002610a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002610e:	83 e0 00             	and    eax,0x0
c0026111:	09 d0                	or     eax,edx
c0026113:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026117:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002611b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026121:	8d 50 01             	lea    edx,[eax+0x1]
c0026124:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026128:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002612e:	0f b6 d0             	movzx  edx,al
c0026131:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026135:	83 c2 08             	add    edx,0x8
c0026138:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002613c:	0f b6 c9             	movzx  ecx,cl
c002613f:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026145:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002614d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026151:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002615b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002615f:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026165:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026169:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002616f:	83 ec 0c             	sub    esp,0xc
c0026172:	51                   	push   ecx
c0026173:	6a 01                	push   0x1
c0026175:	68 6a 5f 02 c0       	push   0xc0025f6a
c002617a:	52                   	push   edx
c002617b:	50                   	push   eax
c002617c:	e8 ff d8 fe ff       	call   c0013a80 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026181:	83 c4 20             	add    esp,0x20
c0026184:	89 c2                	mov    edx,eax
c0026186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002618a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026190:	b8 00 00 00 00       	mov    eax,0x0
c0026195:	5b                   	pop    ebx
c0026196:	5e                   	pop    esi
c0026197:	5f                   	pop    edi
c0026198:	c3                   	ret    
c0026199:	90                   	nop

c002619a <APICTimer::APICTimer()>:
c002619a:	83 ec 0c             	sub    esp,0xc
c002619d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261a1:	83 ec 08             	sub    esp,0x8
c00261a4:	68 0c c7 02 c0       	push   0xc002c70c
c00261a9:	50                   	push   eax
c00261aa:	e8 8f 03 ff ff       	call   c001653e <Timer::Timer(char const*)>
c00261af:	83 c4 10             	add    esp,0x10
c00261b2:	ba 20 c7 02 c0       	mov    edx,0xc002c720
c00261b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261bb:	89 10                	mov    DWORD PTR [eax],edx
c00261bd:	90                   	nop
c00261be:	83 c4 0c             	add    esp,0xc
c00261c1:	c3                   	ret    

c00261c2 <PIT::write(int)>:
c00261c2:	83 ec 10             	sub    esp,0x10
c00261c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00261c9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00261cd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00261d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00261d7:	a3 64 1d 03 c0       	mov    ds:0xc0031d64,eax
c00261dc:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00261e1:	99                   	cdq    
c00261e2:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00261e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00261ea:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00261f1:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00261f6:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00261fa:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00261ff:	ee                   	out    dx,al
c0026200:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026204:	0f b6 c0             	movzx  eax,al
c0026207:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002620e:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026212:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026216:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002621b:	ee                   	out    dx,al
c002621c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026220:	c1 f8 08             	sar    eax,0x8
c0026223:	0f b6 c0             	movzx  eax,al
c0026226:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002622d:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026231:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026235:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002623a:	ee                   	out    dx,al
c002623b:	90                   	nop
c002623c:	83 c4 10             	add    esp,0x10
c002623f:	c3                   	ret    

c0026240 <pitHandler(regs*, void*)>:
c0026240:	83 ec 0c             	sub    esp,0xc
c0026243:	a1 64 1d 03 c0       	mov    eax,ds:0xc0031d64
c0026248:	99                   	cdq    
c0026249:	52                   	push   edx
c002624a:	50                   	push   eax
c002624b:	6a 00                	push   0x0
c002624d:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026252:	e8 bd 04 00 00       	call   c0026714 <__udivdi3>
c0026257:	83 c4 10             	add    esp,0x10
c002625a:	83 ec 08             	sub    esp,0x8
c002625d:	52                   	push   edx
c002625e:	50                   	push   eax
c002625f:	e8 69 03 ff ff       	call   c00165cd <timerHandler(unsigned long long)>
c0026264:	83 c4 10             	add    esp,0x10
c0026267:	90                   	nop
c0026268:	83 c4 0c             	add    esp,0xc
c002626b:	c3                   	ret    

c002626c <PIT::open(int, int, void*)>:
c002626c:	83 ec 0c             	sub    esp,0xc
c002626f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026273:	8b 00                	mov    eax,DWORD PTR [eax]
c0026275:	83 c0 24             	add    eax,0x24
c0026278:	8b 00                	mov    eax,DWORD PTR [eax]
c002627a:	83 ec 08             	sub    esp,0x8
c002627d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026281:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026285:	ff d0                	call   eax
c0026287:	83 c4 10             	add    esp,0x10
c002628a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002628e:	83 ec 0c             	sub    esp,0xc
c0026291:	6a 00                	push   0x0
c0026293:	6a 01                	push   0x1
c0026295:	68 40 62 02 c0       	push   0xc0026240
c002629a:	6a 00                	push   0x0
c002629c:	50                   	push   eax
c002629d:	e8 de d7 fe ff       	call   c0013a80 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00262a2:	83 c4 20             	add    esp,0x20
c00262a5:	89 c2                	mov    edx,eax
c00262a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262ab:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00262b1:	b8 00 00 00 00       	mov    eax,0x0
c00262b6:	83 c4 0c             	add    esp,0xc
c00262b9:	c3                   	ret    

c00262ba <PIT::close(int, int, void*)>:
c00262ba:	83 ec 0c             	sub    esp,0xc
c00262bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262c1:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00262cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262cf:	6a 01                	push   0x1
c00262d1:	68 40 62 02 c0       	push   0xc0026240
c00262d6:	6a 00                	push   0x0
c00262d8:	50                   	push   eax
c00262d9:	e8 ec d7 fe ff       	call   c0013aca <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00262de:	83 c4 10             	add    esp,0x10
c00262e1:	b8 00 00 00 00       	mov    eax,0x0
c00262e6:	83 c4 0c             	add    esp,0xc
c00262e9:	c3                   	ret    

c00262ea <PIT::PIT()>:
c00262ea:	83 ec 0c             	sub    esp,0xc
c00262ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262f1:	83 ec 08             	sub    esp,0x8
c00262f4:	68 48 c7 02 c0       	push   0xc002c748
c00262f9:	50                   	push   eax
c00262fa:	e8 3f 02 ff ff       	call   c001653e <Timer::Timer(char const*)>
c00262ff:	83 c4 10             	add    esp,0x10
c0026302:	ba 70 c7 02 c0       	mov    edx,0xc002c770
c0026307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002630b:	89 10                	mov    DWORD PTR [eax],edx
c002630d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026311:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026317:	0f b6 d0             	movzx  edx,al
c002631a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002631e:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026329:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002632f:	0f b6 d0             	movzx  edx,al
c0026332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026336:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002633b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002633f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026345:	8d 50 01             	lea    edx,[eax+0x1]
c0026348:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002634c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026352:	0f b6 d0             	movzx  edx,al
c0026355:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026359:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002635d:	83 e1 3f             	and    ecx,0x3f
c0026360:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026364:	90                   	nop
c0026365:	83 c4 0c             	add    esp,0xc
c0026368:	c3                   	ret    
c0026369:	66 90                	xchg   ax,ax
c002636b:	66 90                	xchg   ax,ax
c002636d:	66 90                	xchg   ax,ax
c002636f:	90                   	nop

c0026370 <avxDetect>:
c0026370:	b8 00 00 00 00       	mov    eax,0x0
c0026375:	c3                   	ret    

c0026376 <avxSave>:
c0026376:	c3                   	ret    

c0026377 <avxLoad>:
c0026377:	c3                   	ret    

c0026378 <avxInit>:
c0026378:	c3                   	ret    

c0026379 <avxClose>:
c0026379:	c3                   	ret    

c002637a <wouldSheSayYes>:
c002637a:	c3                   	ret    
c002637b:	49                   	dec    ecx
c002637c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026380:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026384:	75 20                	jne    c00263a6 <sseDetect.noSSE+0x1>
c0026386:	4e                   	dec    esi
c0026387:	79 61                	jns    c00263ea <x87Detect+0x14>
c0026389:	68 2e 2e 2e 00       	push   0x2e2e2e
c002638e:	66 90                	xchg   ax,ax

c0026390 <absolutelyNoChanceInHell>:
c0026390:	b8 01 00 00 00       	mov    eax,0x1
c0026395:	0f a2                	cpuid  
c0026397:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002639d:	74 06                	je     c00263a5 <sseDetect.noSSE>
c002639f:	b8 01 00 00 00       	mov    eax,0x1
c00263a4:	c3                   	ret    

c00263a5 <sseDetect.noSSE>:
c00263a5:	31 c0                	xor    eax,eax
c00263a7:	c3                   	ret    

c00263a8 <sseSave>:
c00263a8:	0f ae 44 24 04       	fxsave [esp+0x4]
c00263ad:	c3                   	ret    

c00263ae <sseLoad>:
c00263ae:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c00263b3:	c3                   	ret    

c00263b4 <sseInit>:
c00263b4:	e8 49 00 00 00       	call   c0026402 <x87Init>
c00263b9:	0f 20 e0             	mov    eax,cr4
c00263bc:	66 0d 00 06          	or     ax,0x600
c00263c0:	0f 22 e0             	mov    cr4,eax
c00263c3:	c3                   	ret    

c00263c4 <sseClose>:
c00263c4:	c3                   	ret    
c00263c5:	66 90                	xchg   ax,ax
c00263c7:	66 90                	xchg   ax,ax
c00263c9:	66 90                	xchg   ax,ax
c00263cb:	66 90                	xchg   ax,ax
c00263cd:	66 90                	xchg   ax,ax
c00263cf:	90                   	nop

c00263d0 <value_37F>:
c00263d0:	7f 03                	jg     c00263d5 <value_37A+0x1>

c00263d2 <value_37E>:
c00263d2:	7e 03                	jle    c00263d7 <x87Detect+0x1>

c00263d4 <value_37A>:
c00263d4:	7a 03                	jp     c00263d9 <x87Detect+0x3>

c00263d6 <x87Detect>:
c00263d6:	b8 01 00 00 00       	mov    eax,0x1
c00263db:	0f a2                	cpuid  
c00263dd:	f7 c2 01 00 00 00    	test   edx,0x1
c00263e3:	74 06                	je     c00263eb <x87Detect.nox87>
c00263e5:	b8 01 00 00 00       	mov    eax,0x1
c00263ea:	c3                   	ret    

c00263eb <x87Detect.nox87>:
c00263eb:	b8 00 00 00 00       	mov    eax,0x0
c00263f0:	c3                   	ret    

c00263f1 <x87Save>:
c00263f1:	55                   	push   ebp
c00263f2:	89 e5                	mov    ebp,esp
c00263f4:	9b dd 75 08          	fsave  [ebp+0x8]
c00263f8:	c9                   	leave  
c00263f9:	c3                   	ret    

c00263fa <x87Load>:
c00263fa:	55                   	push   ebp
c00263fb:	89 e5                	mov    ebp,esp
c00263fd:	dd 65 08             	frstor [ebp+0x8]
c0026400:	c9                   	leave  
c0026401:	c3                   	ret    

c0026402 <x87Init>:
c0026402:	9b db e3             	finit  
c0026405:	0f 20 c0             	mov    eax,cr0
c0026408:	66 25 fb ff          	and    ax,0xfffb
c002640c:	66 0d 22 00          	or     ax,0x22
c0026410:	0f 22 c0             	mov    cr0,eax
c0026413:	0f 06                	clts   
c0026415:	d9 2d d4 63 02 c0    	fldcw  WORD PTR ds:0xc00263d4
c002641b:	c3                   	ret    

c002641c <x87Close>:
c002641c:	c3                   	ret    
c002641d:	66 90                	xchg   ax,ax
c002641f:	90                   	nop

c0026420 <__do_global_ctors_aux>:
c0026420:	a1 14 90 02 c0       	mov    eax,ds:0xc0029014
c0026425:	83 f8 ff             	cmp    eax,0xffffffff
c0026428:	74 1a                	je     c0026444 <__do_global_ctors_aux+0x24>
c002642a:	55                   	push   ebp
c002642b:	89 e5                	mov    ebp,esp
c002642d:	53                   	push   ebx
c002642e:	52                   	push   edx
c002642f:	bb 14 90 02 c0       	mov    ebx,0xc0029014
c0026434:	ff d0                	call   eax
c0026436:	83 eb 04             	sub    ebx,0x4
c0026439:	8b 03                	mov    eax,DWORD PTR [ebx]
c002643b:	83 f8 ff             	cmp    eax,0xffffffff
c002643e:	75 f4                	jne    c0026434 <__do_global_ctors_aux+0x14>
c0026440:	58                   	pop    eax
c0026441:	5b                   	pop    ebx
c0026442:	5d                   	pop    ebp
c0026443:	c3                   	ret    
c0026444:	c3                   	ret    
c0026445:	66 90                	xchg   ax,ax
c0026447:	90                   	nop

c0026448 <__divdi3>:
c0026448:	55                   	push   ebp
c0026449:	57                   	push   edi
c002644a:	56                   	push   esi
c002644b:	53                   	push   ebx
c002644c:	83 ec 1c             	sub    esp,0x1c
c002644f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026453:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026457:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002645a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002645e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026462:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026466:	85 db                	test   ebx,ebx
c0026468:	0f 88 8e 00 00 00    	js     c00264fc <__divdi3+0xb4>
c002646e:	89 dd                	mov    ebp,ebx
c0026470:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026478:	89 d3                	mov    ebx,edx
c002647a:	85 d2                	test   edx,edx
c002647c:	79 0d                	jns    c002648b <__divdi3+0x43>
c002647e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026482:	f7 d8                	neg    eax
c0026484:	83 d2 00             	adc    edx,0x0
c0026487:	f7 da                	neg    edx
c0026489:	89 d3                	mov    ebx,edx
c002648b:	89 c7                	mov    edi,eax
c002648d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026490:	85 db                	test   ebx,ebx
c0026492:	75 48                	jne    c00264dc <__divdi3+0x94>
c0026494:	39 ef                	cmp    edi,ebp
c0026496:	76 24                	jbe    c00264bc <__divdi3+0x74>
c0026498:	89 ea                	mov    edx,ebp
c002649a:	f7 f7                	div    edi
c002649c:	89 c1                	mov    ecx,eax
c002649e:	31 f6                	xor    esi,esi
c00264a0:	89 c8                	mov    eax,ecx
c00264a2:	89 f2                	mov    edx,esi
c00264a4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00264a8:	85 c9                	test   ecx,ecx
c00264aa:	74 07                	je     c00264b3 <__divdi3+0x6b>
c00264ac:	f7 d8                	neg    eax
c00264ae:	83 d2 00             	adc    edx,0x0
c00264b1:	f7 da                	neg    edx
c00264b3:	83 c4 1c             	add    esp,0x1c
c00264b6:	5b                   	pop    ebx
c00264b7:	5e                   	pop    esi
c00264b8:	5f                   	pop    edi
c00264b9:	5d                   	pop    ebp
c00264ba:	c3                   	ret    
c00264bb:	90                   	nop
c00264bc:	85 ff                	test   edi,edi
c00264be:	75 0b                	jne    c00264cb <__divdi3+0x83>
c00264c0:	b8 01 00 00 00       	mov    eax,0x1
c00264c5:	31 d2                	xor    edx,edx
c00264c7:	f7 f3                	div    ebx
c00264c9:	89 c7                	mov    edi,eax
c00264cb:	31 d2                	xor    edx,edx
c00264cd:	89 e8                	mov    eax,ebp
c00264cf:	f7 f7                	div    edi
c00264d1:	89 c6                	mov    esi,eax
c00264d3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00264d6:	f7 f7                	div    edi
c00264d8:	89 c1                	mov    ecx,eax
c00264da:	eb c4                	jmp    c00264a0 <__divdi3+0x58>
c00264dc:	39 eb                	cmp    ebx,ebp
c00264de:	77 3c                	ja     c002651c <__divdi3+0xd4>
c00264e0:	0f bd f3             	bsr    esi,ebx
c00264e3:	83 f6 1f             	xor    esi,0x1f
c00264e6:	75 40                	jne    c0026528 <__divdi3+0xe0>
c00264e8:	39 eb                	cmp    ebx,ebp
c00264ea:	72 09                	jb     c00264f5 <__divdi3+0xad>
c00264ec:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00264ef:	0f 87 97 00 00 00    	ja     c002658c <__divdi3+0x144>
c00264f5:	b9 01 00 00 00       	mov    ecx,0x1
c00264fa:	eb a4                	jmp    c00264a0 <__divdi3+0x58>
c00264fc:	f7 d9                	neg    ecx
c00264fe:	83 d3 00             	adc    ebx,0x0
c0026501:	f7 db                	neg    ebx
c0026503:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026506:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002650a:	89 dd                	mov    ebp,ebx
c002650c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026514:	e9 5f ff ff ff       	jmp    c0026478 <__divdi3+0x30>
c0026519:	8d 76 00             	lea    esi,[esi+0x0]
c002651c:	31 f6                	xor    esi,esi
c002651e:	31 c9                	xor    ecx,ecx
c0026520:	e9 7b ff ff ff       	jmp    c00264a0 <__divdi3+0x58>
c0026525:	8d 76 00             	lea    esi,[esi+0x0]
c0026528:	b8 20 00 00 00       	mov    eax,0x20
c002652d:	29 f0                	sub    eax,esi
c002652f:	89 f1                	mov    ecx,esi
c0026531:	d3 e3                	shl    ebx,cl
c0026533:	89 fa                	mov    edx,edi
c0026535:	88 c1                	mov    cl,al
c0026537:	d3 ea                	shr    edx,cl
c0026539:	09 da                	or     edx,ebx
c002653b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002653f:	89 f1                	mov    ecx,esi
c0026541:	d3 e7                	shl    edi,cl
c0026543:	89 eb                	mov    ebx,ebp
c0026545:	88 c1                	mov    cl,al
c0026547:	d3 eb                	shr    ebx,cl
c0026549:	89 f1                	mov    ecx,esi
c002654b:	d3 e5                	shl    ebp,cl
c002654d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026550:	88 c1                	mov    cl,al
c0026552:	d3 ea                	shr    edx,cl
c0026554:	09 d5                	or     ebp,edx
c0026556:	89 e8                	mov    eax,ebp
c0026558:	89 da                	mov    edx,ebx
c002655a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002655e:	89 d3                	mov    ebx,edx
c0026560:	89 c5                	mov    ebp,eax
c0026562:	f7 e7                	mul    edi
c0026564:	39 d3                	cmp    ebx,edx
c0026566:	72 18                	jb     c0026580 <__divdi3+0x138>
c0026568:	74 0a                	je     c0026574 <__divdi3+0x12c>
c002656a:	89 e9                	mov    ecx,ebp
c002656c:	31 f6                	xor    esi,esi
c002656e:	e9 2d ff ff ff       	jmp    c00264a0 <__divdi3+0x58>
c0026573:	90                   	nop
c0026574:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026577:	89 f1                	mov    ecx,esi
c0026579:	d3 e7                	shl    edi,cl
c002657b:	39 c7                	cmp    edi,eax
c002657d:	73 eb                	jae    c002656a <__divdi3+0x122>
c002657f:	90                   	nop
c0026580:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026583:	31 f6                	xor    esi,esi
c0026585:	e9 16 ff ff ff       	jmp    c00264a0 <__divdi3+0x58>
c002658a:	66 90                	xchg   ax,ax
c002658c:	31 c9                	xor    ecx,ecx
c002658e:	e9 0d ff ff ff       	jmp    c00264a0 <__divdi3+0x58>
c0026593:	90                   	nop

c0026594 <__moddi3>:
c0026594:	55                   	push   ebp
c0026595:	57                   	push   edi
c0026596:	56                   	push   esi
c0026597:	53                   	push   ebx
c0026598:	83 ec 2c             	sub    esp,0x2c
c002659b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002659f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00265a3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00265a7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00265ab:	85 db                	test   ebx,ebx
c00265ad:	0f 88 85 00 00 00    	js     c0026638 <__moddi3+0xa4>
c00265b3:	89 de                	mov    esi,ebx
c00265b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00265bd:	89 d7                	mov    edi,edx
c00265bf:	85 d2                	test   edx,edx
c00265c1:	79 09                	jns    c00265cc <__moddi3+0x38>
c00265c3:	f7 d8                	neg    eax
c00265c5:	83 d2 00             	adc    edx,0x0
c00265c8:	f7 da                	neg    edx
c00265ca:	89 d7                	mov    edi,edx
c00265cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00265d0:	89 cd                	mov    ebp,ecx
c00265d2:	85 ff                	test   edi,edi
c00265d4:	75 52                	jne    c0026628 <__moddi3+0x94>
c00265d6:	89 c3                	mov    ebx,eax
c00265d8:	39 f0                	cmp    eax,esi
c00265da:	76 24                	jbe    c0026600 <__moddi3+0x6c>
c00265dc:	89 c8                	mov    eax,ecx
c00265de:	89 f2                	mov    edx,esi
c00265e0:	f7 f3                	div    ebx
c00265e2:	89 d6                	mov    esi,edx
c00265e4:	89 f0                	mov    eax,esi
c00265e6:	31 d2                	xor    edx,edx
c00265e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00265ec:	85 c9                	test   ecx,ecx
c00265ee:	74 07                	je     c00265f7 <__moddi3+0x63>
c00265f0:	f7 d8                	neg    eax
c00265f2:	83 d2 00             	adc    edx,0x0
c00265f5:	f7 da                	neg    edx
c00265f7:	83 c4 2c             	add    esp,0x2c
c00265fa:	5b                   	pop    ebx
c00265fb:	5e                   	pop    esi
c00265fc:	5f                   	pop    edi
c00265fd:	5d                   	pop    ebp
c00265fe:	c3                   	ret    
c00265ff:	90                   	nop
c0026600:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0026604:	85 db                	test   ebx,ebx
c0026606:	75 0d                	jne    c0026615 <__moddi3+0x81>
c0026608:	b8 01 00 00 00       	mov    eax,0x1
c002660d:	31 d2                	xor    edx,edx
c002660f:	f7 f7                	div    edi
c0026611:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026615:	89 f0                	mov    eax,esi
c0026617:	31 d2                	xor    edx,edx
c0026619:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002661d:	f7 f7                	div    edi
c002661f:	89 e8                	mov    eax,ebp
c0026621:	f7 f7                	div    edi
c0026623:	89 d6                	mov    esi,edx
c0026625:	eb bd                	jmp    c00265e4 <__moddi3+0x50>
c0026627:	90                   	nop
c0026628:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002662c:	39 f7                	cmp    edi,esi
c002662e:	76 20                	jbe    c0026650 <__moddi3+0xbc>
c0026630:	89 c8                	mov    eax,ecx
c0026632:	89 f2                	mov    edx,esi
c0026634:	eb b2                	jmp    c00265e8 <__moddi3+0x54>
c0026636:	66 90                	xchg   ax,ax
c0026638:	f7 d9                	neg    ecx
c002663a:	83 d3 00             	adc    ebx,0x0
c002663d:	f7 db                	neg    ebx
c002663f:	89 de                	mov    esi,ebx
c0026641:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026649:	e9 6f ff ff ff       	jmp    c00265bd <__moddi3+0x29>
c002664e:	66 90                	xchg   ax,ax
c0026650:	0f bd c7             	bsr    eax,edi
c0026653:	83 f0 1f             	xor    eax,0x1f
c0026656:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002665a:	75 24                	jne    c0026680 <__moddi3+0xec>
c002665c:	39 f7                	cmp    edi,esi
c002665e:	72 06                	jb     c0026666 <__moddi3+0xd2>
c0026660:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026664:	77 0c                	ja     c0026672 <__moddi3+0xde>
c0026666:	89 e9                	mov    ecx,ebp
c0026668:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002666c:	19 fe                	sbb    esi,edi
c002666e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026672:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026676:	89 f2                	mov    edx,esi
c0026678:	e9 6b ff ff ff       	jmp    c00265e8 <__moddi3+0x54>
c002667d:	8d 76 00             	lea    esi,[esi+0x0]
c0026680:	b8 20 00 00 00       	mov    eax,0x20
c0026685:	89 c2                	mov    edx,eax
c0026687:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002668b:	29 da                	sub    edx,ebx
c002668d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026691:	88 d9                	mov    cl,bl
c0026693:	d3 e7                	shl    edi,cl
c0026695:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026699:	88 d1                	mov    cl,dl
c002669b:	d3 e8                	shr    eax,cl
c002669d:	09 c7                	or     edi,eax
c002669f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00266a3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00266a7:	89 d8                	mov    eax,ebx
c00266a9:	88 d9                	mov    cl,bl
c00266ab:	d3 e7                	shl    edi,cl
c00266ad:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00266b1:	89 f3                	mov    ebx,esi
c00266b3:	88 d1                	mov    cl,dl
c00266b5:	d3 eb                	shr    ebx,cl
c00266b7:	89 c7                	mov    edi,eax
c00266b9:	88 c1                	mov    cl,al
c00266bb:	d3 e6                	shl    esi,cl
c00266bd:	89 e8                	mov    eax,ebp
c00266bf:	88 d1                	mov    cl,dl
c00266c1:	d3 e8                	shr    eax,cl
c00266c3:	09 f0                	or     eax,esi
c00266c5:	89 f9                	mov    ecx,edi
c00266c7:	d3 e5                	shl    ebp,cl
c00266c9:	89 da                	mov    edx,ebx
c00266cb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00266cf:	89 d3                	mov    ebx,edx
c00266d1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00266d5:	89 c6                	mov    esi,eax
c00266d7:	89 d1                	mov    ecx,edx
c00266d9:	39 d3                	cmp    ebx,edx
c00266db:	72 27                	jb     c0026704 <__moddi3+0x170>
c00266dd:	74 21                	je     c0026700 <__moddi3+0x16c>
c00266df:	29 f5                	sub    ebp,esi
c00266e1:	19 cb                	sbb    ebx,ecx
c00266e3:	89 de                	mov    esi,ebx
c00266e5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00266e9:	d3 e6                	shl    esi,cl
c00266eb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00266ef:	89 f9                	mov    ecx,edi
c00266f1:	d3 ed                	shr    ebp,cl
c00266f3:	09 ee                	or     esi,ebp
c00266f5:	89 f0                	mov    eax,esi
c00266f7:	d3 eb                	shr    ebx,cl
c00266f9:	89 da                	mov    edx,ebx
c00266fb:	e9 e8 fe ff ff       	jmp    c00265e8 <__moddi3+0x54>
c0026700:	39 c5                	cmp    ebp,eax
c0026702:	73 db                	jae    c00266df <__moddi3+0x14b>
c0026704:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026708:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002670c:	89 d1                	mov    ecx,edx
c002670e:	89 c6                	mov    esi,eax
c0026710:	eb cd                	jmp    c00266df <__moddi3+0x14b>
c0026712:	66 90                	xchg   ax,ax

c0026714 <__udivdi3>:
c0026714:	55                   	push   ebp
c0026715:	57                   	push   edi
c0026716:	56                   	push   esi
c0026717:	53                   	push   ebx
c0026718:	83 ec 1c             	sub    esp,0x1c
c002671b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002671f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026723:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026727:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002672b:	85 d2                	test   edx,edx
c002672d:	75 41                	jne    c0026770 <__udivdi3+0x5c>
c002672f:	39 f7                	cmp    edi,esi
c0026731:	76 15                	jbe    c0026748 <__udivdi3+0x34>
c0026733:	89 e8                	mov    eax,ebp
c0026735:	89 f2                	mov    edx,esi
c0026737:	f7 f7                	div    edi
c0026739:	31 db                	xor    ebx,ebx
c002673b:	89 da                	mov    edx,ebx
c002673d:	83 c4 1c             	add    esp,0x1c
c0026740:	5b                   	pop    ebx
c0026741:	5e                   	pop    esi
c0026742:	5f                   	pop    edi
c0026743:	5d                   	pop    ebp
c0026744:	c3                   	ret    
c0026745:	8d 76 00             	lea    esi,[esi+0x0]
c0026748:	89 f9                	mov    ecx,edi
c002674a:	85 ff                	test   edi,edi
c002674c:	75 0b                	jne    c0026759 <__udivdi3+0x45>
c002674e:	b8 01 00 00 00       	mov    eax,0x1
c0026753:	31 d2                	xor    edx,edx
c0026755:	f7 f7                	div    edi
c0026757:	89 c1                	mov    ecx,eax
c0026759:	31 d2                	xor    edx,edx
c002675b:	89 f0                	mov    eax,esi
c002675d:	f7 f1                	div    ecx
c002675f:	89 c3                	mov    ebx,eax
c0026761:	89 e8                	mov    eax,ebp
c0026763:	f7 f1                	div    ecx
c0026765:	89 da                	mov    edx,ebx
c0026767:	83 c4 1c             	add    esp,0x1c
c002676a:	5b                   	pop    ebx
c002676b:	5e                   	pop    esi
c002676c:	5f                   	pop    edi
c002676d:	5d                   	pop    ebp
c002676e:	c3                   	ret    
c002676f:	90                   	nop
c0026770:	39 f2                	cmp    edx,esi
c0026772:	77 1c                	ja     c0026790 <__udivdi3+0x7c>
c0026774:	0f bd da             	bsr    ebx,edx
c0026777:	83 f3 1f             	xor    ebx,0x1f
c002677a:	75 24                	jne    c00267a0 <__udivdi3+0x8c>
c002677c:	39 f2                	cmp    edx,esi
c002677e:	72 08                	jb     c0026788 <__udivdi3+0x74>
c0026780:	39 ef                	cmp    edi,ebp
c0026782:	0f 87 84 00 00 00    	ja     c002680c <__udivdi3+0xf8>
c0026788:	b8 01 00 00 00       	mov    eax,0x1
c002678d:	eb ac                	jmp    c002673b <__udivdi3+0x27>
c002678f:	90                   	nop
c0026790:	31 db                	xor    ebx,ebx
c0026792:	31 c0                	xor    eax,eax
c0026794:	89 da                	mov    edx,ebx
c0026796:	83 c4 1c             	add    esp,0x1c
c0026799:	5b                   	pop    ebx
c002679a:	5e                   	pop    esi
c002679b:	5f                   	pop    edi
c002679c:	5d                   	pop    ebp
c002679d:	c3                   	ret    
c002679e:	66 90                	xchg   ax,ax
c00267a0:	b8 20 00 00 00       	mov    eax,0x20
c00267a5:	29 d8                	sub    eax,ebx
c00267a7:	88 d9                	mov    cl,bl
c00267a9:	d3 e2                	shl    edx,cl
c00267ab:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00267af:	89 fa                	mov    edx,edi
c00267b1:	88 c1                	mov    cl,al
c00267b3:	d3 ea                	shr    edx,cl
c00267b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00267b9:	09 d1                	or     ecx,edx
c00267bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00267bf:	88 d9                	mov    cl,bl
c00267c1:	d3 e7                	shl    edi,cl
c00267c3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00267c7:	89 f7                	mov    edi,esi
c00267c9:	88 c1                	mov    cl,al
c00267cb:	d3 ef                	shr    edi,cl
c00267cd:	88 d9                	mov    cl,bl
c00267cf:	d3 e6                	shl    esi,cl
c00267d1:	89 ea                	mov    edx,ebp
c00267d3:	88 c1                	mov    cl,al
c00267d5:	d3 ea                	shr    edx,cl
c00267d7:	09 d6                	or     esi,edx
c00267d9:	89 f0                	mov    eax,esi
c00267db:	89 fa                	mov    edx,edi
c00267dd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00267e1:	89 d7                	mov    edi,edx
c00267e3:	89 c6                	mov    esi,eax
c00267e5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00267e9:	39 d7                	cmp    edi,edx
c00267eb:	72 13                	jb     c0026800 <__udivdi3+0xec>
c00267ed:	74 09                	je     c00267f8 <__udivdi3+0xe4>
c00267ef:	89 f0                	mov    eax,esi
c00267f1:	31 db                	xor    ebx,ebx
c00267f3:	e9 43 ff ff ff       	jmp    c002673b <__udivdi3+0x27>
c00267f8:	88 d9                	mov    cl,bl
c00267fa:	d3 e5                	shl    ebp,cl
c00267fc:	39 c5                	cmp    ebp,eax
c00267fe:	73 ef                	jae    c00267ef <__udivdi3+0xdb>
c0026800:	8d 46 ff             	lea    eax,[esi-0x1]
c0026803:	31 db                	xor    ebx,ebx
c0026805:	e9 31 ff ff ff       	jmp    c002673b <__udivdi3+0x27>
c002680a:	66 90                	xchg   ax,ax
c002680c:	31 c0                	xor    eax,eax
c002680e:	e9 28 ff ff ff       	jmp    c002673b <__udivdi3+0x27>
c0026813:	90                   	nop

c0026814 <__umoddi3>:
c0026814:	55                   	push   ebp
c0026815:	57                   	push   edi
c0026816:	56                   	push   esi
c0026817:	53                   	push   ebx
c0026818:	83 ec 1c             	sub    esp,0x1c
c002681b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002681f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026823:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026827:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002682b:	89 da                	mov    edx,ebx
c002682d:	85 c0                	test   eax,eax
c002682f:	75 37                	jne    c0026868 <__umoddi3+0x54>
c0026831:	39 df                	cmp    edi,ebx
c0026833:	76 13                	jbe    c0026848 <__umoddi3+0x34>
c0026835:	89 f0                	mov    eax,esi
c0026837:	f7 f7                	div    edi
c0026839:	89 d0                	mov    eax,edx
c002683b:	31 d2                	xor    edx,edx
c002683d:	83 c4 1c             	add    esp,0x1c
c0026840:	5b                   	pop    ebx
c0026841:	5e                   	pop    esi
c0026842:	5f                   	pop    edi
c0026843:	5d                   	pop    ebp
c0026844:	c3                   	ret    
c0026845:	8d 76 00             	lea    esi,[esi+0x0]
c0026848:	89 fd                	mov    ebp,edi
c002684a:	85 ff                	test   edi,edi
c002684c:	75 0b                	jne    c0026859 <__umoddi3+0x45>
c002684e:	b8 01 00 00 00       	mov    eax,0x1
c0026853:	31 d2                	xor    edx,edx
c0026855:	f7 f7                	div    edi
c0026857:	89 c5                	mov    ebp,eax
c0026859:	89 d8                	mov    eax,ebx
c002685b:	31 d2                	xor    edx,edx
c002685d:	f7 f5                	div    ebp
c002685f:	89 f0                	mov    eax,esi
c0026861:	f7 f5                	div    ebp
c0026863:	89 d0                	mov    eax,edx
c0026865:	eb d4                	jmp    c002683b <__umoddi3+0x27>
c0026867:	90                   	nop
c0026868:	89 f1                	mov    ecx,esi
c002686a:	39 d8                	cmp    eax,ebx
c002686c:	76 0a                	jbe    c0026878 <__umoddi3+0x64>
c002686e:	89 f0                	mov    eax,esi
c0026870:	83 c4 1c             	add    esp,0x1c
c0026873:	5b                   	pop    ebx
c0026874:	5e                   	pop    esi
c0026875:	5f                   	pop    edi
c0026876:	5d                   	pop    ebp
c0026877:	c3                   	ret    
c0026878:	0f bd e8             	bsr    ebp,eax
c002687b:	83 f5 1f             	xor    ebp,0x1f
c002687e:	75 1c                	jne    c002689c <__umoddi3+0x88>
c0026880:	39 d8                	cmp    eax,ebx
c0026882:	72 04                	jb     c0026888 <__umoddi3+0x74>
c0026884:	39 f7                	cmp    edi,esi
c0026886:	77 08                	ja     c0026890 <__umoddi3+0x7c>
c0026888:	89 da                	mov    edx,ebx
c002688a:	29 fe                	sub    esi,edi
c002688c:	19 c2                	sbb    edx,eax
c002688e:	89 f1                	mov    ecx,esi
c0026890:	89 c8                	mov    eax,ecx
c0026892:	83 c4 1c             	add    esp,0x1c
c0026895:	5b                   	pop    ebx
c0026896:	5e                   	pop    esi
c0026897:	5f                   	pop    edi
c0026898:	5d                   	pop    ebp
c0026899:	c3                   	ret    
c002689a:	66 90                	xchg   ax,ax
c002689c:	ba 20 00 00 00       	mov    edx,0x20
c00268a1:	29 ea                	sub    edx,ebp
c00268a3:	89 e9                	mov    ecx,ebp
c00268a5:	d3 e0                	shl    eax,cl
c00268a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00268ab:	89 f8                	mov    eax,edi
c00268ad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00268b1:	88 d1                	mov    cl,dl
c00268b3:	d3 e8                	shr    eax,cl
c00268b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00268b9:	09 c1                	or     ecx,eax
c00268bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00268bf:	89 e9                	mov    ecx,ebp
c00268c1:	d3 e7                	shl    edi,cl
c00268c3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00268c7:	89 d8                	mov    eax,ebx
c00268c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00268cd:	88 d1                	mov    cl,dl
c00268cf:	d3 e8                	shr    eax,cl
c00268d1:	89 c7                	mov    edi,eax
c00268d3:	89 e9                	mov    ecx,ebp
c00268d5:	d3 e3                	shl    ebx,cl
c00268d7:	89 f0                	mov    eax,esi
c00268d9:	88 d1                	mov    cl,dl
c00268db:	d3 e8                	shr    eax,cl
c00268dd:	09 d8                	or     eax,ebx
c00268df:	89 e9                	mov    ecx,ebp
c00268e1:	d3 e6                	shl    esi,cl
c00268e3:	89 f3                	mov    ebx,esi
c00268e5:	89 fa                	mov    edx,edi
c00268e7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00268eb:	89 d1                	mov    ecx,edx
c00268ed:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00268f1:	89 c6                	mov    esi,eax
c00268f3:	89 d7                	mov    edi,edx
c00268f5:	39 d1                	cmp    ecx,edx
c00268f7:	72 27                	jb     c0026920 <__umoddi3+0x10c>
c00268f9:	74 21                	je     c002691c <__umoddi3+0x108>
c00268fb:	89 ca                	mov    edx,ecx
c00268fd:	29 f3                	sub    ebx,esi
c00268ff:	19 fa                	sbb    edx,edi
c0026901:	89 d0                	mov    eax,edx
c0026903:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026907:	d3 e0                	shl    eax,cl
c0026909:	89 e9                	mov    ecx,ebp
c002690b:	d3 eb                	shr    ebx,cl
c002690d:	09 d8                	or     eax,ebx
c002690f:	d3 ea                	shr    edx,cl
c0026911:	83 c4 1c             	add    esp,0x1c
c0026914:	5b                   	pop    ebx
c0026915:	5e                   	pop    esi
c0026916:	5f                   	pop    edi
c0026917:	5d                   	pop    ebp
c0026918:	c3                   	ret    
c0026919:	8d 76 00             	lea    esi,[esi+0x0]
c002691c:	39 c3                	cmp    ebx,eax
c002691e:	73 db                	jae    c00268fb <__umoddi3+0xe7>
c0026920:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026924:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026928:	89 d7                	mov    edi,edx
c002692a:	89 c6                	mov    esi,eax
c002692c:	eb cd                	jmp    c00268fb <__umoddi3+0xe7>

c002692e <__addsf3>:
c002692e:	55                   	push   ebp
c002692f:	89 e5                	mov    ebp,esp
c0026931:	57                   	push   edi
c0026932:	56                   	push   esi
c0026933:	53                   	push   ebx
c0026934:	83 ec 08             	sub    esp,0x8
c0026937:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002693a:	89 fa                	mov    edx,edi
c002693c:	89 f8                	mov    eax,edi
c002693e:	c1 f8 17             	sar    eax,0x17
c0026941:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026944:	c1 e2 08             	shl    edx,0x8
c0026947:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002694d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026950:	89 de                	mov    esi,ebx
c0026952:	c1 fe 17             	sar    esi,0x17
c0026955:	c1 e3 08             	shl    ebx,0x8
c0026958:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002695e:	31 f0                	xor    eax,esi
c0026960:	0f 88 3b 01 00 00    	js     c0026aa1 <__addsf3+0x173>
c0026966:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026969:	29 f1                	sub    ecx,esi
c002696b:	85 c9                	test   ecx,ecx
c002696d:	7e 54                	jle    c00269c3 <__addsf3+0x95>
c002696f:	89 f0                	mov    eax,esi
c0026971:	84 c0                	test   al,al
c0026973:	75 10                	jne    c0026985 <__addsf3+0x57>
c0026975:	85 db                	test   ebx,ebx
c0026977:	0f 84 aa 02 00 00    	je     c0026c27 <__addsf3+0x2f9>
c002697d:	49                   	dec    ecx
c002697e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026981:	74 38                	je     c00269bb <__addsf3+0x8d>
c0026983:	eb 13                	jmp    c0026998 <__addsf3+0x6a>
c0026985:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026988:	f7 d0                	not    eax
c002698a:	84 c0                	test   al,al
c002698c:	0f 84 95 02 00 00    	je     c0026c27 <__addsf3+0x2f9>
c0026992:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026998:	83 f9 1f             	cmp    ecx,0x1f
c002699b:	0f 8f 86 02 00 00    	jg     c0026c27 <__addsf3+0x2f9>
c00269a1:	89 de                	mov    esi,ebx
c00269a3:	d3 ee                	shr    esi,cl
c00269a5:	b8 20 00 00 00       	mov    eax,0x20
c00269aa:	29 c8                	sub    eax,ecx
c00269ac:	89 c1                	mov    ecx,eax
c00269ae:	d3 e3                	shl    ebx,cl
c00269b0:	31 c0                	xor    eax,eax
c00269b2:	85 db                	test   ebx,ebx
c00269b4:	0f 95 c0             	setne  al
c00269b7:	09 f0                	or     eax,esi
c00269b9:	01 d0                	add    eax,edx
c00269bb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00269be:	e9 b6 00 00 00       	jmp    c0026a79 <__addsf3+0x14b>
c00269c3:	74 5c                	je     c0026a21 <__addsf3+0xf3>
c00269c5:	89 f1                	mov    ecx,esi
c00269c7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00269ca:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00269cd:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00269d1:	75 14                	jne    c00269e7 <__addsf3+0xb9>
c00269d3:	85 d2                	test   edx,edx
c00269d5:	0f 84 4c 02 00 00    	je     c0026c27 <__addsf3+0x2f9>
c00269db:	49                   	dec    ecx
c00269dc:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00269df:	0f 84 94 00 00 00    	je     c0026a79 <__addsf3+0x14b>
c00269e5:	eb 12                	jmp    c00269f9 <__addsf3+0xcb>
c00269e7:	89 f0                	mov    eax,esi
c00269e9:	f7 d0                	not    eax
c00269eb:	84 c0                	test   al,al
c00269ed:	0f 84 34 02 00 00    	je     c0026c27 <__addsf3+0x2f9>
c00269f3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00269f9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00269fc:	83 f9 1f             	cmp    ecx,0x1f
c00269ff:	0f 8f 22 02 00 00    	jg     c0026c27 <__addsf3+0x2f9>
c0026a05:	89 d7                	mov    edi,edx
c0026a07:	d3 ef                	shr    edi,cl
c0026a09:	b8 20 00 00 00       	mov    eax,0x20
c0026a0e:	29 c8                	sub    eax,ecx
c0026a10:	89 c1                	mov    ecx,eax
c0026a12:	d3 e2                	shl    edx,cl
c0026a14:	31 c0                	xor    eax,eax
c0026a16:	85 d2                	test   edx,edx
c0026a18:	0f 95 c0             	setne  al
c0026a1b:	09 f8                	or     eax,edi
c0026a1d:	01 d8                	add    eax,ebx
c0026a1f:	eb 58                	jmp    c0026a79 <__addsf3+0x14b>
c0026a21:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026a24:	8d 70 01             	lea    esi,[eax+0x1]
c0026a27:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026a2d:	75 32                	jne    c0026a61 <__addsf3+0x133>
c0026a2f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026a33:	75 1f                	jne    c0026a54 <__addsf3+0x126>
c0026a35:	85 d2                	test   edx,edx
c0026a37:	0f 84 e0 01 00 00    	je     c0026c1d <__addsf3+0x2ef>
c0026a3d:	85 db                	test   ebx,ebx
c0026a3f:	0f 84 e2 01 00 00    	je     c0026c27 <__addsf3+0x2f9>
c0026a45:	89 d0                	mov    eax,edx
c0026a47:	01 d8                	add    eax,ebx
c0026a49:	0f 89 a9 01 00 00    	jns    c0026bf8 <__addsf3+0x2ca>
c0026a4f:	e9 9d 01 00 00       	jmp    c0026bf1 <__addsf3+0x2c3>
c0026a54:	85 d2                	test   edx,edx
c0026a56:	0f 85 cb 01 00 00    	jne    c0026c27 <__addsf3+0x2f9>
c0026a5c:	e9 bc 01 00 00       	jmp    c0026c1d <__addsf3+0x2ef>
c0026a61:	31 c0                	xor    eax,eax
c0026a63:	89 f1                	mov    ecx,esi
c0026a65:	f7 d1                	not    ecx
c0026a67:	84 c9                	test   cl,cl
c0026a69:	0f 84 90 01 00 00    	je     c0026bff <__addsf3+0x2d1>
c0026a6f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026a72:	d1 e8                	shr    eax,1
c0026a74:	e9 86 01 00 00       	jmp    c0026bff <__addsf3+0x2d1>
c0026a79:	85 c0                	test   eax,eax
c0026a7b:	0f 89 7e 01 00 00    	jns    c0026bff <__addsf3+0x2d1>
c0026a81:	46                   	inc    esi
c0026a82:	89 f2                	mov    edx,esi
c0026a84:	f7 d2                	not    edx
c0026a86:	84 d2                	test   dl,dl
c0026a88:	0f 84 6f 01 00 00    	je     c0026bfd <__addsf3+0x2cf>
c0026a8e:	89 c2                	mov    edx,eax
c0026a90:	83 e2 01             	and    edx,0x1
c0026a93:	d1 e8                	shr    eax,1
c0026a95:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026a9a:	09 d0                	or     eax,edx
c0026a9c:	e9 5e 01 00 00       	jmp    c0026bff <__addsf3+0x2d1>
c0026aa1:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026aa5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026aa8:	89 f0                	mov    eax,esi
c0026aaa:	0f b6 c0             	movzx  eax,al
c0026aad:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026ab0:	29 c1                	sub    ecx,eax
c0026ab2:	85 c9                	test   ecx,ecx
c0026ab4:	7e 55                	jle    c0026b0b <__addsf3+0x1dd>
c0026ab6:	85 c0                	test   eax,eax
c0026ab8:	75 11                	jne    c0026acb <__addsf3+0x19d>
c0026aba:	85 db                	test   ebx,ebx
c0026abc:	0f 84 65 01 00 00    	je     c0026c27 <__addsf3+0x2f9>
c0026ac2:	49                   	dec    ecx
c0026ac3:	75 19                	jne    c0026ade <__addsf3+0x1b0>
c0026ac5:	89 d0                	mov    eax,edx
c0026ac7:	29 d8                	sub    eax,ebx
c0026ac9:	eb 38                	jmp    c0026b03 <__addsf3+0x1d5>
c0026acb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026ace:	f7 d0                	not    eax
c0026ad0:	84 c0                	test   al,al
c0026ad2:	0f 84 4f 01 00 00    	je     c0026c27 <__addsf3+0x2f9>
c0026ad8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026ade:	83 f9 1f             	cmp    ecx,0x1f
c0026ae1:	0f 8f 40 01 00 00    	jg     c0026c27 <__addsf3+0x2f9>
c0026ae7:	89 de                	mov    esi,ebx
c0026ae9:	d3 ee                	shr    esi,cl
c0026aeb:	b8 20 00 00 00       	mov    eax,0x20
c0026af0:	29 c8                	sub    eax,ecx
c0026af2:	89 c1                	mov    ecx,eax
c0026af4:	d3 e3                	shl    ebx,cl
c0026af6:	31 c0                	xor    eax,eax
c0026af8:	85 db                	test   ebx,ebx
c0026afa:	0f 95 c0             	setne  al
c0026afd:	09 f0                	or     eax,esi
c0026aff:	29 c2                	sub    edx,eax
c0026b01:	89 d0                	mov    eax,edx
c0026b03:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026b06:	e9 af 00 00 00       	jmp    c0026bba <__addsf3+0x28c>
c0026b0b:	74 5c                	je     c0026b69 <__addsf3+0x23b>
c0026b0d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026b10:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b13:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026b17:	75 14                	jne    c0026b2d <__addsf3+0x1ff>
c0026b19:	85 d2                	test   edx,edx
c0026b1b:	0f 84 06 01 00 00    	je     c0026c27 <__addsf3+0x2f9>
c0026b21:	48                   	dec    eax
c0026b22:	75 1b                	jne    c0026b3f <__addsf3+0x211>
c0026b24:	89 d8                	mov    eax,ebx
c0026b26:	29 d0                	sub    eax,edx
c0026b28:	e9 8d 00 00 00       	jmp    c0026bba <__addsf3+0x28c>
c0026b2d:	89 f1                	mov    ecx,esi
c0026b2f:	f7 d1                	not    ecx
c0026b31:	84 c9                	test   cl,cl
c0026b33:	0f 84 ee 00 00 00    	je     c0026c27 <__addsf3+0x2f9>
c0026b39:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026b3f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b42:	83 f8 1f             	cmp    eax,0x1f
c0026b45:	0f 8f dc 00 00 00    	jg     c0026c27 <__addsf3+0x2f9>
c0026b4b:	89 d7                	mov    edi,edx
c0026b4d:	88 c1                	mov    cl,al
c0026b4f:	d3 ef                	shr    edi,cl
c0026b51:	b9 20 00 00 00       	mov    ecx,0x20
c0026b56:	29 c1                	sub    ecx,eax
c0026b58:	d3 e2                	shl    edx,cl
c0026b5a:	31 c0                	xor    eax,eax
c0026b5c:	85 d2                	test   edx,edx
c0026b5e:	0f 95 c0             	setne  al
c0026b61:	09 f8                	or     eax,edi
c0026b63:	29 c3                	sub    ebx,eax
c0026b65:	89 d8                	mov    eax,ebx
c0026b67:	eb 51                	jmp    c0026bba <__addsf3+0x28c>
c0026b69:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026b6c:	40                   	inc    eax
c0026b6d:	a8 fe                	test   al,0xfe
c0026b6f:	75 3d                	jne    c0026bae <__addsf3+0x280>
c0026b71:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026b75:	0f 85 a7 00 00 00    	jne    c0026c22 <__addsf3+0x2f4>
c0026b7b:	85 d2                	test   edx,edx
c0026b7d:	75 12                	jne    c0026b91 <__addsf3+0x263>
c0026b7f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b82:	85 db                	test   ebx,ebx
c0026b84:	0f 85 9d 00 00 00    	jne    c0026c27 <__addsf3+0x2f9>
c0026b8a:	31 ff                	xor    edi,edi
c0026b8c:	e9 96 00 00 00       	jmp    c0026c27 <__addsf3+0x2f9>
c0026b91:	85 db                	test   ebx,ebx
c0026b93:	0f 84 8e 00 00 00    	je     c0026c27 <__addsf3+0x2f9>
c0026b99:	89 d0                	mov    eax,edx
c0026b9b:	29 d8                	sub    eax,ebx
c0026b9d:	79 06                	jns    c0026ba5 <__addsf3+0x277>
c0026b9f:	89 d8                	mov    eax,ebx
c0026ba1:	29 d0                	sub    eax,edx
c0026ba3:	eb 5a                	jmp    c0026bff <__addsf3+0x2d1>
c0026ba5:	bf 00 00 00 00       	mov    edi,0x0
c0026baa:	74 7b                	je     c0026c27 <__addsf3+0x2f9>
c0026bac:	eb 4a                	jmp    c0026bf8 <__addsf3+0x2ca>
c0026bae:	89 d0                	mov    eax,edx
c0026bb0:	29 d8                	sub    eax,ebx
c0026bb2:	79 12                	jns    c0026bc6 <__addsf3+0x298>
c0026bb4:	89 d8                	mov    eax,ebx
c0026bb6:	29 d0                	sub    eax,edx
c0026bb8:	eb 09                	jmp    c0026bc3 <__addsf3+0x295>
c0026bba:	85 c0                	test   eax,eax
c0026bbc:	79 41                	jns    c0026bff <__addsf3+0x2d1>
c0026bbe:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026bc3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026bc6:	31 f6                	xor    esi,esi
c0026bc8:	85 c0                	test   eax,eax
c0026bca:	74 33                	je     c0026bff <__addsf3+0x2d1>
c0026bcc:	0f bd c8             	bsr    ecx,eax
c0026bcf:	83 f1 1f             	xor    ecx,0x1f
c0026bd2:	d3 e0                	shl    eax,cl
c0026bd4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026bd8:	39 ca                	cmp    edx,ecx
c0026bda:	7f 10                	jg     c0026bec <__addsf3+0x2be>
c0026bdc:	29 d1                	sub    ecx,edx
c0026bde:	41                   	inc    ecx
c0026bdf:	d3 e8                	shr    eax,cl
c0026be1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026be4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026bea:	eb 13                	jmp    c0026bff <__addsf3+0x2d1>
c0026bec:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026bef:	29 ce                	sub    esi,ecx
c0026bf1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026bf6:	eb 07                	jmp    c0026bff <__addsf3+0x2d1>
c0026bf8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026bfb:	eb 02                	jmp    c0026bff <__addsf3+0x2d1>
c0026bfd:	31 c0                	xor    eax,eax
c0026bff:	89 c2                	mov    edx,eax
c0026c01:	c1 ea 08             	shr    edx,0x8
c0026c04:	a8 7f                	test   al,0x7f
c0026c06:	0f 95 c1             	setne  cl
c0026c09:	09 d1                	or     ecx,edx
c0026c0b:	83 e1 01             	and    ecx,0x1
c0026c0e:	c1 e8 07             	shr    eax,0x7
c0026c11:	21 c8                	and    eax,ecx
c0026c13:	c1 e6 17             	shl    esi,0x17
c0026c16:	09 d6                	or     esi,edx
c0026c18:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026c1b:	eb 0a                	jmp    c0026c27 <__addsf3+0x2f9>
c0026c1d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c20:	eb 05                	jmp    c0026c27 <__addsf3+0x2f9>
c0026c22:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026c27:	89 f8                	mov    eax,edi
c0026c29:	5a                   	pop    edx
c0026c2a:	59                   	pop    ecx
c0026c2b:	5b                   	pop    ebx
c0026c2c:	5e                   	pop    esi
c0026c2d:	5f                   	pop    edi
c0026c2e:	5d                   	pop    ebp
c0026c2f:	c3                   	ret    

c0026c30 <__subsf3>:
c0026c30:	55                   	push   ebp
c0026c31:	89 e5                	mov    ebp,esp
c0026c33:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c36:	05 00 00 00 80       	add    eax,0x80000000
c0026c3b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026c3e:	5d                   	pop    ebp
c0026c3f:	e9 ea fc ff ff       	jmp    c002692e <__addsf3>

c0026c44 <__negsf2>:
c0026c44:	55                   	push   ebp
c0026c45:	89 e5                	mov    ebp,esp
c0026c47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026c4a:	05 00 00 00 80       	add    eax,0x80000000
c0026c4f:	5d                   	pop    ebp
c0026c50:	c3                   	ret    

c0026c51 <__mulsf3>:
c0026c51:	55                   	push   ebp
c0026c52:	89 e5                	mov    ebp,esp
c0026c54:	57                   	push   edi
c0026c55:	56                   	push   esi
c0026c56:	53                   	push   ebx
c0026c57:	83 ec 1c             	sub    esp,0x1c
c0026c5a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026c5d:	89 f0                	mov    eax,esi
c0026c5f:	89 f1                	mov    ecx,esi
c0026c61:	c1 f9 17             	sar    ecx,0x17
c0026c64:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026c67:	c1 e0 08             	shl    eax,0x8
c0026c6a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026c6f:	89 c1                	mov    ecx,eax
c0026c71:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c74:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026c77:	89 c7                	mov    edi,eax
c0026c79:	c1 ff 17             	sar    edi,0x17
c0026c7c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026c80:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026c83:	89 f8                	mov    eax,edi
c0026c85:	0f b6 c0             	movzx  eax,al
c0026c88:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026c8b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026c8f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026c92:	42                   	inc    edx
c0026c93:	80 e2 fe             	and    dl,0xfe
c0026c96:	75 7b                	jne    c0026d13 <__mulsf3+0xc2>
c0026c98:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026c9c:	74 54                	je     c0026cf2 <__mulsf3+0xa1>
c0026c9e:	85 c9                	test   ecx,ecx
c0026ca0:	0f 85 64 01 00 00    	jne    c0026e0a <__mulsf3+0x1b9>
c0026ca6:	8d 57 01             	lea    edx,[edi+0x1]
c0026ca9:	80 e2 fe             	and    dl,0xfe
c0026cac:	75 1f                	jne    c0026ccd <__mulsf3+0x7c>
c0026cae:	85 c0                	test   eax,eax
c0026cb0:	b8 00 00 00 00       	mov    eax,0x0
c0026cb5:	74 29                	je     c0026ce0 <__mulsf3+0x8f>
c0026cb7:	53                   	push   ebx
c0026cb8:	53                   	push   ebx
c0026cb9:	50                   	push   eax
c0026cba:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026cbd:	e8 96 05 00 00       	call   c0027258 <__nesf2>
c0026cc2:	83 c4 10             	add    esp,0x10
c0026cc5:	85 c0                	test   eax,eax
c0026cc7:	0f 85 3a 01 00 00    	jne    c0026e07 <__mulsf3+0x1b6>
c0026ccd:	85 ff                	test   edi,edi
c0026ccf:	0f 89 35 01 00 00    	jns    c0026e0a <__mulsf3+0x1b9>
c0026cd5:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026cdb:	e9 2a 01 00 00       	jmp    c0026e0a <__mulsf3+0x1b9>
c0026ce0:	51                   	push   ecx
c0026ce1:	51                   	push   ecx
c0026ce2:	50                   	push   eax
c0026ce3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ce6:	e8 6d 05 00 00       	call   c0027258 <__nesf2>
c0026ceb:	83 c4 10             	add    esp,0x10
c0026cee:	85 c0                	test   eax,eax
c0026cf0:	eb 15                	jmp    c0026d07 <__mulsf3+0xb6>
c0026cf2:	85 c9                	test   ecx,ecx
c0026cf4:	74 0b                	je     c0026d01 <__mulsf3+0xb0>
c0026cf6:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026cf9:	01 c9                	add    ecx,ecx
c0026cfb:	78 16                	js     c0026d13 <__mulsf3+0xc2>
c0026cfd:	89 d3                	mov    ebx,edx
c0026cff:	eb f5                	jmp    c0026cf6 <__mulsf3+0xa5>
c0026d01:	89 f8                	mov    eax,edi
c0026d03:	f7 d0                	not    eax
c0026d05:	84 c0                	test   al,al
c0026d07:	75 c4                	jne    c0026ccd <__mulsf3+0x7c>
c0026d09:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026d0e:	e9 f7 00 00 00       	jmp    c0026e0a <__mulsf3+0x1b9>
c0026d13:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026d16:	c1 e6 08             	shl    esi,0x8
c0026d19:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026d1f:	8d 57 01             	lea    edx,[edi+0x1]
c0026d22:	80 e2 fe             	and    dl,0xfe
c0026d25:	75 63                	jne    c0026d8a <__mulsf3+0x139>
c0026d27:	85 c0                	test   eax,eax
c0026d29:	74 2f                	je     c0026d5a <__mulsf3+0x109>
c0026d2b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026d2f:	0f 89 d2 00 00 00    	jns    c0026e07 <__mulsf3+0x1b6>
c0026d35:	52                   	push   edx
c0026d36:	52                   	push   edx
c0026d37:	6a 00                	push   0x0
c0026d39:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d3c:	e8 dc 04 00 00       	call   c002721d <__eqsf2>
c0026d41:	83 c4 10             	add    esp,0x10
c0026d44:	85 c0                	test   eax,eax
c0026d46:	0f 85 bb 00 00 00    	jne    c0026e07 <__mulsf3+0x1b6>
c0026d4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026d4f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026d55:	e9 b0 00 00 00       	jmp    c0026e0a <__mulsf3+0x1b9>
c0026d5a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026d5d:	50                   	push   eax
c0026d5e:	50                   	push   eax
c0026d5f:	6a 00                	push   0x0
c0026d61:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d64:	e8 b4 04 00 00       	call   c002721d <__eqsf2>
c0026d69:	83 c4 10             	add    esp,0x10
c0026d6c:	85 c0                	test   eax,eax
c0026d6e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026d71:	75 0c                	jne    c0026d7f <__mulsf3+0x12e>
c0026d73:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026d77:	0f 89 8a 00 00 00    	jns    c0026e07 <__mulsf3+0x1b6>
c0026d7d:	eb cd                	jmp    c0026d4c <__mulsf3+0xfb>
c0026d7f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026d82:	01 f6                	add    esi,esi
c0026d84:	78 04                	js     c0026d8a <__mulsf3+0x139>
c0026d86:	89 c3                	mov    ebx,eax
c0026d88:	eb f5                	jmp    c0026d7f <__mulsf3+0x12e>
c0026d8a:	89 c8                	mov    eax,ecx
c0026d8c:	0d 00 00 00 80       	or     eax,0x80000000
c0026d91:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026d97:	f7 e6                	mul    esi
c0026d99:	85 c0                	test   eax,eax
c0026d9b:	0f 95 c0             	setne  al
c0026d9e:	0f b6 c0             	movzx  eax,al
c0026da1:	09 c2                	or     edx,eax
c0026da3:	78 03                	js     c0026da8 <__mulsf3+0x157>
c0026da5:	01 d2                	add    edx,edx
c0026da7:	4b                   	dec    ebx
c0026da8:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026dae:	7f 22                	jg     c0026dd2 <__mulsf3+0x181>
c0026db0:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026db6:	85 db                	test   ebx,ebx
c0026db8:	7f 23                	jg     c0026ddd <__mulsf3+0x18c>
c0026dba:	83 fb e9             	cmp    ebx,0xffffffe9
c0026dbd:	7c 1a                	jl     c0026dd9 <__mulsf3+0x188>
c0026dbf:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026dc5:	b9 01 00 00 00       	mov    ecx,0x1
c0026dca:	29 d9                	sub    ecx,ebx
c0026dcc:	d3 ea                	shr    edx,cl
c0026dce:	31 db                	xor    ebx,ebx
c0026dd0:	eb 0b                	jmp    c0026ddd <__mulsf3+0x18c>
c0026dd2:	bb ff 00 00 00       	mov    ebx,0xff
c0026dd7:	eb 02                	jmp    c0026ddb <__mulsf3+0x18a>
c0026dd9:	31 db                	xor    ebx,ebx
c0026ddb:	31 d2                	xor    edx,edx
c0026ddd:	89 d0                	mov    eax,edx
c0026ddf:	c1 e8 08             	shr    eax,0x8
c0026de2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026de5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026deb:	09 fb                	or     ebx,edi
c0026ded:	c1 e3 17             	shl    ebx,0x17
c0026df0:	09 c3                	or     ebx,eax
c0026df2:	f6 c2 7f             	test   dl,0x7f
c0026df5:	0f 95 c1             	setne  cl
c0026df8:	09 c8                	or     eax,ecx
c0026dfa:	83 e0 01             	and    eax,0x1
c0026dfd:	c1 ea 07             	shr    edx,0x7
c0026e00:	21 c2                	and    edx,eax
c0026e02:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026e05:	eb 03                	jmp    c0026e0a <__mulsf3+0x1b9>
c0026e07:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026e0a:	89 f0                	mov    eax,esi
c0026e0c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026e0f:	5b                   	pop    ebx
c0026e10:	5e                   	pop    esi
c0026e11:	5f                   	pop    edi
c0026e12:	5d                   	pop    ebp
c0026e13:	c3                   	ret    

c0026e14 <__divsf3>:
c0026e14:	55                   	push   ebp
c0026e15:	89 e5                	mov    ebp,esp
c0026e17:	57                   	push   edi
c0026e18:	56                   	push   esi
c0026e19:	53                   	push   ebx
c0026e1a:	83 ec 1c             	sub    esp,0x1c
c0026e1d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026e20:	89 d8                	mov    eax,ebx
c0026e22:	89 d9                	mov    ecx,ebx
c0026e24:	c1 f9 17             	sar    ecx,0x17
c0026e27:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026e2a:	c1 e0 08             	shl    eax,0x8
c0026e2d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026e32:	89 c1                	mov    ecx,eax
c0026e34:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026e37:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026e3a:	89 c7                	mov    edi,eax
c0026e3c:	c1 ff 17             	sar    edi,0x17
c0026e3f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026e43:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026e46:	89 f8                	mov    eax,edi
c0026e48:	0f b6 c0             	movzx  eax,al
c0026e4b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026e4e:	29 c6                	sub    esi,eax
c0026e50:	83 c6 7f             	add    esi,0x7f
c0026e53:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026e56:	42                   	inc    edx
c0026e57:	80 e2 fe             	and    dl,0xfe
c0026e5a:	0f 85 9c 00 00 00    	jne    c0026efc <__divsf3+0xe8>
c0026e60:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026e64:	74 33                	je     c0026e99 <__divsf3+0x85>
c0026e66:	85 c9                	test   ecx,ecx
c0026e68:	0f 85 c7 01 00 00    	jne    c0027035 <__divsf3+0x221>
c0026e6e:	8d 57 01             	lea    edx,[edi+0x1]
c0026e71:	80 e2 fe             	and    dl,0xfe
c0026e74:	75 2f                	jne    c0026ea5 <__divsf3+0x91>
c0026e76:	85 c0                	test   eax,eax
c0026e78:	74 2b                	je     c0026ea5 <__divsf3+0x91>
c0026e7a:	51                   	push   ecx
c0026e7b:	51                   	push   ecx
c0026e7c:	6a 00                	push   0x0
c0026e7e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e81:	e8 d2 03 00 00       	call   c0027258 <__nesf2>
c0026e86:	83 c4 10             	add    esp,0x10
c0026e89:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026e8c:	85 c0                	test   eax,eax
c0026e8e:	0f 85 a1 01 00 00    	jne    c0027035 <__divsf3+0x221>
c0026e94:	e9 92 01 00 00       	jmp    c002702b <__divsf3+0x217>
c0026e99:	85 c9                	test   ecx,ecx
c0026e9b:	75 1b                	jne    c0026eb8 <__divsf3+0xa4>
c0026e9d:	8d 57 01             	lea    edx,[edi+0x1]
c0026ea0:	80 e2 fe             	and    dl,0xfe
c0026ea3:	74 1e                	je     c0026ec3 <__divsf3+0xaf>
c0026ea5:	85 ff                	test   edi,edi
c0026ea7:	0f 89 88 01 00 00    	jns    c0027035 <__divsf3+0x221>
c0026ead:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0026eb3:	e9 7d 01 00 00       	jmp    c0027035 <__divsf3+0x221>
c0026eb8:	8d 56 ff             	lea    edx,[esi-0x1]
c0026ebb:	01 c9                	add    ecx,ecx
c0026ebd:	78 3d                	js     c0026efc <__divsf3+0xe8>
c0026ebf:	89 d6                	mov    esi,edx
c0026ec1:	eb f5                	jmp    c0026eb8 <__divsf3+0xa4>
c0026ec3:	85 c0                	test   eax,eax
c0026ec5:	b8 00 00 00 00       	mov    eax,0x0
c0026eca:	74 18                	je     c0026ee4 <__divsf3+0xd0>
c0026ecc:	52                   	push   edx
c0026ecd:	52                   	push   edx
c0026ece:	50                   	push   eax
c0026ecf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ed2:	e8 81 03 00 00       	call   c0027258 <__nesf2>
c0026ed7:	83 c4 10             	add    esp,0x10
c0026eda:	85 c0                	test   eax,eax
c0026edc:	0f 85 50 01 00 00    	jne    c0027032 <__divsf3+0x21e>
c0026ee2:	eb c1                	jmp    c0026ea5 <__divsf3+0x91>
c0026ee4:	56                   	push   esi
c0026ee5:	56                   	push   esi
c0026ee6:	50                   	push   eax
c0026ee7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026eea:	e8 69 03 00 00       	call   c0027258 <__nesf2>
c0026eef:	83 c4 10             	add    esp,0x10
c0026ef2:	85 c0                	test   eax,eax
c0026ef4:	0f 84 31 01 00 00    	je     c002702b <__divsf3+0x217>
c0026efa:	eb a9                	jmp    c0026ea5 <__divsf3+0x91>
c0026efc:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026eff:	c1 e3 08             	shl    ebx,0x8
c0026f02:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026f08:	8d 57 01             	lea    edx,[edi+0x1]
c0026f0b:	80 e2 fe             	and    dl,0xfe
c0026f0e:	75 71                	jne    c0026f81 <__divsf3+0x16d>
c0026f10:	85 c0                	test   eax,eax
c0026f12:	ba 00 00 00 00       	mov    edx,0x0
c0026f17:	74 2f                	je     c0026f48 <__divsf3+0x134>
c0026f19:	51                   	push   ecx
c0026f1a:	51                   	push   ecx
c0026f1b:	52                   	push   edx
c0026f1c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f1f:	e8 f9 02 00 00       	call   c002721d <__eqsf2>
c0026f24:	83 c4 10             	add    esp,0x10
c0026f27:	85 c0                	test   eax,eax
c0026f29:	0f 85 03 01 00 00    	jne    c0027032 <__divsf3+0x21e>
c0026f2f:	31 d2                	xor    edx,edx
c0026f31:	89 d3                	mov    ebx,edx
c0026f33:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026f36:	31 f8                	xor    eax,edi
c0026f38:	0f 89 f7 00 00 00    	jns    c0027035 <__divsf3+0x221>
c0026f3e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0026f43:	e9 ed 00 00 00       	jmp    c0027035 <__divsf3+0x221>
c0026f48:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026f4b:	50                   	push   eax
c0026f4c:	50                   	push   eax
c0026f4d:	52                   	push   edx
c0026f4e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f51:	e8 c7 02 00 00       	call   c002721d <__eqsf2>
c0026f56:	83 c4 10             	add    esp,0x10
c0026f59:	85 c0                	test   eax,eax
c0026f5b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026f5e:	75 16                	jne    c0026f76 <__divsf3+0x162>
c0026f60:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026f63:	31 fb                	xor    ebx,edi
c0026f65:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0026f6b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0026f71:	e9 bf 00 00 00       	jmp    c0027035 <__divsf3+0x221>
c0026f76:	8d 46 01             	lea    eax,[esi+0x1]
c0026f79:	01 db                	add    ebx,ebx
c0026f7b:	78 04                	js     c0026f81 <__divsf3+0x16d>
c0026f7d:	89 c6                	mov    esi,eax
c0026f7f:	eb f5                	jmp    c0026f76 <__divsf3+0x162>
c0026f81:	89 c8                	mov    eax,ecx
c0026f83:	0d 00 00 00 80       	or     eax,0x80000000
c0026f88:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026f8e:	31 d2                	xor    edx,edx
c0026f90:	39 d8                	cmp    eax,ebx
c0026f92:	72 07                	jb     c0026f9b <__divsf3+0x187>
c0026f94:	29 d8                	sub    eax,ebx
c0026f96:	ba 01 00 00 00       	mov    edx,0x1
c0026f9b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0026fa2:	01 d2                	add    edx,edx
c0026fa4:	89 c1                	mov    ecx,eax
c0026fa6:	01 c0                	add    eax,eax
c0026fa8:	85 c9                	test   ecx,ecx
c0026faa:	78 04                	js     c0026fb0 <__divsf3+0x19c>
c0026fac:	39 c3                	cmp    ebx,eax
c0026fae:	77 05                	ja     c0026fb5 <__divsf3+0x1a1>
c0026fb0:	29 d8                	sub    eax,ebx
c0026fb2:	83 ca 01             	or     edx,0x1
c0026fb5:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0026fb8:	75 e8                	jne    c0026fa2 <__divsf3+0x18e>
c0026fba:	85 c0                	test   eax,eax
c0026fbc:	0f 95 c0             	setne  al
c0026fbf:	0f b6 c0             	movzx  eax,al
c0026fc2:	c1 e2 06             	shl    edx,0x6
c0026fc5:	09 c2                	or     edx,eax
c0026fc7:	78 03                	js     c0026fcc <__divsf3+0x1b8>
c0026fc9:	01 d2                	add    edx,edx
c0026fcb:	4e                   	dec    esi
c0026fcc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0026fd2:	7f 22                	jg     c0026ff6 <__divsf3+0x1e2>
c0026fd4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026fda:	85 f6                	test   esi,esi
c0026fdc:	7f 23                	jg     c0027001 <__divsf3+0x1ed>
c0026fde:	83 fe e9             	cmp    esi,0xffffffe9
c0026fe1:	7c 1a                	jl     c0026ffd <__divsf3+0x1e9>
c0026fe3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026fe9:	b9 01 00 00 00       	mov    ecx,0x1
c0026fee:	29 f1                	sub    ecx,esi
c0026ff0:	d3 ea                	shr    edx,cl
c0026ff2:	31 f6                	xor    esi,esi
c0026ff4:	eb 0b                	jmp    c0027001 <__divsf3+0x1ed>
c0026ff6:	be ff 00 00 00       	mov    esi,0xff
c0026ffb:	eb 02                	jmp    c0026fff <__divsf3+0x1eb>
c0026ffd:	31 f6                	xor    esi,esi
c0026fff:	31 d2                	xor    edx,edx
c0027001:	89 d0                	mov    eax,edx
c0027003:	c1 e8 08             	shr    eax,0x8
c0027006:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027009:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002700f:	09 fe                	or     esi,edi
c0027011:	c1 e6 17             	shl    esi,0x17
c0027014:	09 c6                	or     esi,eax
c0027016:	f6 c2 7f             	test   dl,0x7f
c0027019:	0f 95 c1             	setne  cl
c002701c:	09 c8                	or     eax,ecx
c002701e:	83 e0 01             	and    eax,0x1
c0027021:	c1 ea 07             	shr    edx,0x7
c0027024:	21 c2                	and    edx,eax
c0027026:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027029:	eb 0a                	jmp    c0027035 <__divsf3+0x221>
c002702b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027030:	eb 03                	jmp    c0027035 <__divsf3+0x221>
c0027032:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027035:	89 d8                	mov    eax,ebx
c0027037:	8d 65 f4             	lea    esp,[ebp-0xc]
c002703a:	5b                   	pop    ebx
c002703b:	5e                   	pop    esi
c002703c:	5f                   	pop    edi
c002703d:	5d                   	pop    ebp
c002703e:	c3                   	ret    

c002703f <__floatsisf>:
c002703f:	55                   	push   ebp
c0027040:	89 e5                	mov    ebp,esp
c0027042:	53                   	push   ebx
c0027043:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027046:	85 d2                	test   edx,edx
c0027048:	7e 2b                	jle    c0027075 <__floatsisf+0x36>
c002704a:	0f bd ca             	bsr    ecx,edx
c002704d:	83 f1 1f             	xor    ecx,0x1f
c0027050:	d3 e2                	shl    edx,cl
c0027052:	89 d0                	mov    eax,edx
c0027054:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027059:	89 c3                	mov    ebx,eax
c002705b:	c1 eb 08             	shr    ebx,0x8
c002705e:	80 e2 7f             	and    dl,0x7f
c0027061:	0f 95 c2             	setne  dl
c0027064:	09 da                	or     edx,ebx
c0027066:	83 e2 01             	and    edx,0x1
c0027069:	c1 e8 07             	shr    eax,0x7
c002706c:	21 c2                	and    edx,eax
c002706e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027073:	eb 32                	jmp    c00270a7 <__floatsisf+0x68>
c0027075:	b8 00 00 00 00       	mov    eax,0x0
c002707a:	74 34                	je     c00270b0 <__floatsisf+0x71>
c002707c:	f7 da                	neg    edx
c002707e:	0f bd ca             	bsr    ecx,edx
c0027081:	83 f1 1f             	xor    ecx,0x1f
c0027084:	d3 e2                	shl    edx,cl
c0027086:	89 d0                	mov    eax,edx
c0027088:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002708d:	89 c3                	mov    ebx,eax
c002708f:	c1 eb 08             	shr    ebx,0x8
c0027092:	80 e2 7f             	and    dl,0x7f
c0027095:	0f 95 c2             	setne  dl
c0027098:	09 da                	or     edx,ebx
c002709a:	83 e2 01             	and    edx,0x1
c002709d:	c1 e8 07             	shr    eax,0x7
c00270a0:	21 c2                	and    edx,eax
c00270a2:	b8 9e 01 00 00       	mov    eax,0x19e
c00270a7:	29 c8                	sub    eax,ecx
c00270a9:	c1 e0 17             	shl    eax,0x17
c00270ac:	09 d8                	or     eax,ebx
c00270ae:	01 d0                	add    eax,edx
c00270b0:	5b                   	pop    ebx
c00270b1:	5d                   	pop    ebp
c00270b2:	c3                   	ret    

c00270b3 <__floatunsisf>:
c00270b3:	55                   	push   ebp
c00270b4:	89 e5                	mov    ebp,esp
c00270b6:	53                   	push   ebx
c00270b7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00270ba:	31 c0                	xor    eax,eax
c00270bc:	85 d2                	test   edx,edx
c00270be:	74 32                	je     c00270f2 <__floatunsisf+0x3f>
c00270c0:	0f bd ca             	bsr    ecx,edx
c00270c3:	83 f1 1f             	xor    ecx,0x1f
c00270c6:	d3 e2                	shl    edx,cl
c00270c8:	89 d0                	mov    eax,edx
c00270ca:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00270cf:	89 c3                	mov    ebx,eax
c00270d1:	c1 eb 08             	shr    ebx,0x8
c00270d4:	80 e2 7f             	and    dl,0x7f
c00270d7:	0f 95 c2             	setne  dl
c00270da:	09 da                	or     edx,ebx
c00270dc:	83 e2 01             	and    edx,0x1
c00270df:	c1 e8 07             	shr    eax,0x7
c00270e2:	21 c2                	and    edx,eax
c00270e4:	b8 9e 00 00 00       	mov    eax,0x9e
c00270e9:	29 c8                	sub    eax,ecx
c00270eb:	c1 e0 17             	shl    eax,0x17
c00270ee:	09 d8                	or     eax,ebx
c00270f0:	01 d0                	add    eax,edx
c00270f2:	5b                   	pop    ebx
c00270f3:	5d                   	pop    ebp
c00270f4:	c3                   	ret    

c00270f5 <__fixsfsi>:
c00270f5:	55                   	push   ebp
c00270f6:	89 e5                	mov    ebp,esp
c00270f8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00270fb:	89 d1                	mov    ecx,edx
c00270fd:	c1 e1 08             	shl    ecx,0x8
c0027100:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027106:	c1 fa 17             	sar    edx,0x17
c0027109:	78 1c                	js     c0027127 <__fixsfsi+0x32>
c002710b:	83 ea 7f             	sub    edx,0x7f
c002710e:	31 c0                	xor    eax,eax
c0027110:	83 fa 1e             	cmp    edx,0x1e
c0027113:	77 40                	ja     c0027155 <__fixsfsi+0x60>
c0027115:	89 c8                	mov    eax,ecx
c0027117:	0d 00 00 00 80       	or     eax,0x80000000
c002711c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027121:	29 d1                	sub    ecx,edx
c0027123:	d3 e8                	shr    eax,cl
c0027125:	eb 2e                	jmp    c0027155 <__fixsfsi+0x60>
c0027127:	31 c0                	xor    eax,eax
c0027129:	81 c2 81 00 00 00    	add    edx,0x81
c002712f:	78 24                	js     c0027155 <__fixsfsi+0x60>
c0027131:	83 fa 1e             	cmp    edx,0x1e
c0027134:	7e 09                	jle    c002713f <__fixsfsi+0x4a>
c0027136:	83 fa 1f             	cmp    edx,0x1f
c0027139:	75 18                	jne    c0027153 <__fixsfsi+0x5e>
c002713b:	85 c9                	test   ecx,ecx
c002713d:	75 14                	jne    c0027153 <__fixsfsi+0x5e>
c002713f:	89 c8                	mov    eax,ecx
c0027141:	0d 00 00 00 80       	or     eax,0x80000000
c0027146:	b9 1f 00 00 00       	mov    ecx,0x1f
c002714b:	29 d1                	sub    ecx,edx
c002714d:	d3 e8                	shr    eax,cl
c002714f:	f7 d8                	neg    eax
c0027151:	eb 02                	jmp    c0027155 <__fixsfsi+0x60>
c0027153:	31 c0                	xor    eax,eax
c0027155:	5d                   	pop    ebp
c0027156:	c3                   	ret    

c0027157 <__fixunssfsi>:
c0027157:	55                   	push   ebp
c0027158:	89 e5                	mov    ebp,esp
c002715a:	53                   	push   ebx
c002715b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002715e:	89 d3                	mov    ebx,edx
c0027160:	c1 fb 17             	sar    ebx,0x17
c0027163:	83 eb 7f             	sub    ebx,0x7f
c0027166:	31 c0                	xor    eax,eax
c0027168:	83 fb 1f             	cmp    ebx,0x1f
c002716b:	77 18                	ja     c0027185 <__fixunssfsi+0x2e>
c002716d:	89 d0                	mov    eax,edx
c002716f:	c1 e0 08             	shl    eax,0x8
c0027172:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027177:	0d 00 00 00 80       	or     eax,0x80000000
c002717c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027181:	29 d9                	sub    ecx,ebx
c0027183:	d3 e8                	shr    eax,cl
c0027185:	5b                   	pop    ebx
c0027186:	5d                   	pop    ebp
c0027187:	c3                   	ret    

c0027188 <__cmpsf2>:
c0027188:	55                   	push   ebp
c0027189:	89 e5                	mov    ebp,esp
c002718b:	57                   	push   edi
c002718c:	56                   	push   esi
c002718d:	53                   	push   ebx
c002718e:	83 ec 24             	sub    esp,0x24
c0027191:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027194:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027197:	e8 4f 10 00 00       	call   c00281eb <__truncdfsf2>
c002719c:	5a                   	pop    edx
c002719d:	59                   	pop    ecx
c002719e:	89 c3                	mov    ebx,eax
c00271a0:	c1 e8 17             	shr    eax,0x17
c00271a3:	0f b6 f0             	movzx  esi,al
c00271a6:	89 d8                	mov    eax,ebx
c00271a8:	c1 e8 1f             	shr    eax,0x1f
c00271ab:	31 c6                	xor    esi,eax
c00271ad:	c1 e3 08             	shl    ebx,0x8
c00271b0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00271b3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00271b6:	e8 30 10 00 00       	call   c00281eb <__truncdfsf2>
c00271bb:	83 c4 10             	add    esp,0x10
c00271be:	89 c1                	mov    ecx,eax
c00271c0:	c1 e9 17             	shr    ecx,0x17
c00271c3:	0f b6 c9             	movzx  ecx,cl
c00271c6:	89 c7                	mov    edi,eax
c00271c8:	c1 ef 1f             	shr    edi,0x1f
c00271cb:	89 ca                	mov    edx,ecx
c00271cd:	31 fa                	xor    edx,edi
c00271cf:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00271d2:	c1 e0 08             	shl    eax,0x8
c00271d5:	89 c2                	mov    edx,eax
c00271d7:	89 d8                	mov    eax,ebx
c00271d9:	09 d0                	or     eax,edx
c00271db:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00271e0:	09 f0                	or     eax,esi
c00271e2:	75 08                	jne    c00271ec <__cmpsf2+0x64>
c00271e4:	31 c0                	xor    eax,eax
c00271e6:	39 f9                	cmp    ecx,edi
c00271e8:	75 0c                	jne    c00271f6 <__cmpsf2+0x6e>
c00271ea:	eb 29                	jmp    c0027215 <__cmpsf2+0x8d>
c00271ec:	b8 01 00 00 00       	mov    eax,0x1
c00271f1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00271f4:	7f 1f                	jg     c0027215 <__cmpsf2+0x8d>
c00271f6:	83 c8 ff             	or     eax,0xffffffff
c00271f9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00271fc:	7c 17                	jl     c0027215 <__cmpsf2+0x8d>
c00271fe:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027204:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002720a:	b8 01 00 00 00       	mov    eax,0x1
c002720f:	39 d3                	cmp    ebx,edx
c0027211:	77 02                	ja     c0027215 <__cmpsf2+0x8d>
c0027213:	19 c0                	sbb    eax,eax
c0027215:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027218:	5b                   	pop    ebx
c0027219:	5e                   	pop    esi
c002721a:	5f                   	pop    edi
c002721b:	5d                   	pop    ebp
c002721c:	c3                   	ret    

c002721d <__eqsf2>:
c002721d:	55                   	push   ebp
c002721e:	89 e5                	mov    ebp,esp
c0027220:	83 ec 24             	sub    esp,0x24
c0027223:	6a 01                	push   0x1
c0027225:	83 ec 0c             	sub    esp,0xc
c0027228:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002722b:	e8 df 10 00 00       	call   c002830f <__extendsfdf2>
c0027230:	83 c4 10             	add    esp,0x10
c0027233:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027236:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027239:	52                   	push   edx
c002723a:	50                   	push   eax
c002723b:	50                   	push   eax
c002723c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002723f:	e8 cb 10 00 00       	call   c002830f <__extendsfdf2>
c0027244:	59                   	pop    ecx
c0027245:	59                   	pop    ecx
c0027246:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027249:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002724c:	52                   	push   edx
c002724d:	50                   	push   eax
c002724e:	e8 35 ff ff ff       	call   c0027188 <__cmpsf2>
c0027253:	83 c4 20             	add    esp,0x20
c0027256:	c9                   	leave  
c0027257:	c3                   	ret    

c0027258 <__nesf2>:
c0027258:	eb c3                	jmp    c002721d <__eqsf2>

c002725a <__gtsf2>:
c002725a:	55                   	push   ebp
c002725b:	89 e5                	mov    ebp,esp
c002725d:	83 ec 24             	sub    esp,0x24
c0027260:	6a ff                	push   0xffffffff
c0027262:	83 ec 0c             	sub    esp,0xc
c0027265:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027268:	e8 a2 10 00 00       	call   c002830f <__extendsfdf2>
c002726d:	83 c4 10             	add    esp,0x10
c0027270:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027273:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027276:	52                   	push   edx
c0027277:	50                   	push   eax
c0027278:	50                   	push   eax
c0027279:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002727c:	e8 8e 10 00 00       	call   c002830f <__extendsfdf2>
c0027281:	59                   	pop    ecx
c0027282:	59                   	pop    ecx
c0027283:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027286:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027289:	52                   	push   edx
c002728a:	50                   	push   eax
c002728b:	e8 f8 fe ff ff       	call   c0027188 <__cmpsf2>
c0027290:	83 c4 20             	add    esp,0x20
c0027293:	c9                   	leave  
c0027294:	c3                   	ret    

c0027295 <__gesf2>:
c0027295:	eb c3                	jmp    c002725a <__gtsf2>

c0027297 <__ltsf2>:
c0027297:	eb 84                	jmp    c002721d <__eqsf2>

c0027299 <__lesf2>:
c0027299:	eb 82                	jmp    c002721d <__eqsf2>

c002729b <__adddf3>:
c002729b:	55                   	push   ebp
c002729c:	89 e5                	mov    ebp,esp
c002729e:	57                   	push   edi
c002729f:	56                   	push   esi
c00272a0:	53                   	push   ebx
c00272a1:	83 ec 24             	sub    esp,0x24
c00272a4:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00272a7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00272aa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00272ad:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00272b0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00272b3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00272b6:	89 c8                	mov    eax,ecx
c00272b8:	89 ce                	mov    esi,ecx
c00272ba:	c1 fe 14             	sar    esi,0x14
c00272bd:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00272c0:	89 fb                	mov    ebx,edi
c00272c2:	89 fa                	mov    edx,edi
c00272c4:	c1 e2 0b             	shl    edx,0xb
c00272c7:	c1 e0 0b             	shl    eax,0xb
c00272ca:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00272cf:	c1 eb 15             	shr    ebx,0x15
c00272d2:	09 d8                	or     eax,ebx
c00272d4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00272d7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00272da:	c1 fe 14             	sar    esi,0x14
c00272dd:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00272e0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00272e3:	89 f3                	mov    ebx,esi
c00272e5:	c1 e3 0b             	shl    ebx,0xb
c00272e8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00272eb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00272ee:	c1 e3 0b             	shl    ebx,0xb
c00272f1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00272f7:	c1 ee 15             	shr    esi,0x15
c00272fa:	09 f3                	or     ebx,esi
c00272fc:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00272ff:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027302:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027305:	0f 88 5f 02 00 00    	js     c002756a <__adddf3+0x2cf>
c002730b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002730e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027311:	85 db                	test   ebx,ebx
c0027313:	0f 8e c7 00 00 00    	jle    c00273e0 <__adddf3+0x145>
c0027319:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027320:	75 1a                	jne    c002733c <__adddf3+0xa1>
c0027322:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027325:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027328:	0f 84 b2 05 00 00    	je     c00278e0 <__adddf3+0x645>
c002732e:	4b                   	dec    ebx
c002732f:	75 23                	jne    c0027354 <__adddf3+0xb9>
c0027331:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027334:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027337:	e9 99 00 00 00       	jmp    c00273d5 <__adddf3+0x13a>
c002733c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002733f:	f7 d6                	not    esi
c0027341:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027347:	0f 84 93 05 00 00    	je     c00278e0 <__adddf3+0x645>
c002734d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027354:	83 fb 1f             	cmp    ebx,0x1f
c0027357:	7e 42                	jle    c002739b <__adddf3+0x100>
c0027359:	83 fb 3f             	cmp    ebx,0x3f
c002735c:	0f 8f 7e 05 00 00    	jg     c00278e0 <__adddf3+0x645>
c0027362:	83 e3 1f             	and    ebx,0x1f
c0027365:	89 d9                	mov    ecx,ebx
c0027367:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002736a:	d3 ef                	shr    edi,cl
c002736c:	31 db                	xor    ebx,ebx
c002736e:	85 c9                	test   ecx,ecx
c0027370:	74 15                	je     c0027387 <__adddf3+0xec>
c0027372:	be 20 00 00 00       	mov    esi,0x20
c0027377:	29 ce                	sub    esi,ecx
c0027379:	89 f1                	mov    ecx,esi
c002737b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002737e:	d3 e6                	shl    esi,cl
c0027380:	31 db                	xor    ebx,ebx
c0027382:	85 f6                	test   esi,esi
c0027384:	0f 95 c3             	setne  bl
c0027387:	31 c9                	xor    ecx,ecx
c0027389:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002738d:	0f 95 c1             	setne  cl
c0027390:	09 cf                	or     edi,ecx
c0027392:	09 fb                	or     ebx,edi
c0027394:	01 da                	add    edx,ebx
c0027396:	83 d0 00             	adc    eax,0x0
c0027399:	eb 3a                	jmp    c00273d5 <__adddf3+0x13a>
c002739b:	bf 20 00 00 00       	mov    edi,0x20
c00273a0:	29 df                	sub    edi,ebx
c00273a2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00273a5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00273a8:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00273ab:	d3 e6                	shl    esi,cl
c00273ad:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00273b0:	88 d9                	mov    cl,bl
c00273b2:	d3 ef                	shr    edi,cl
c00273b4:	09 fe                	or     esi,edi
c00273b6:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00273b9:	88 d9                	mov    cl,bl
c00273bb:	d3 ef                	shr    edi,cl
c00273bd:	89 fb                	mov    ebx,edi
c00273bf:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00273c2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00273c5:	d3 e7                	shl    edi,cl
c00273c7:	85 ff                	test   edi,edi
c00273c9:	0f 95 c1             	setne  cl
c00273cc:	0f b6 c9             	movzx  ecx,cl
c00273cf:	09 ce                	or     esi,ecx
c00273d1:	01 f2                	add    edx,esi
c00273d3:	11 d8                	adc    eax,ebx
c00273d5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00273d8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00273db:	e9 52 01 00 00       	jmp    c0027532 <__adddf3+0x297>
c00273e0:	0f 84 d5 00 00 00    	je     c00274bb <__adddf3+0x220>
c00273e6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00273e9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00273ec:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00273ef:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00273f2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00273f9:	75 20                	jne    c002741b <__adddf3+0x180>
c00273fb:	89 d6                	mov    esi,edx
c00273fd:	09 c6                	or     esi,eax
c00273ff:	0f 84 db 04 00 00    	je     c00278e0 <__adddf3+0x645>
c0027405:	4b                   	dec    ebx
c0027406:	75 29                	jne    c0027431 <__adddf3+0x196>
c0027408:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002740b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002740e:	01 d1                	add    ecx,edx
c0027410:	11 c6                	adc    esi,eax
c0027412:	89 f0                	mov    eax,esi
c0027414:	89 ca                	mov    edx,ecx
c0027416:	e9 17 01 00 00       	jmp    c0027532 <__adddf3+0x297>
c002741b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002741e:	f7 d6                	not    esi
c0027420:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027426:	0f 84 b4 04 00 00    	je     c00278e0 <__adddf3+0x645>
c002742c:	0d 00 00 00 80       	or     eax,0x80000000
c0027431:	83 fb 1f             	cmp    ebx,0x1f
c0027434:	7e 48                	jle    c002747e <__adddf3+0x1e3>
c0027436:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027439:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002743c:	83 fb 3f             	cmp    ebx,0x3f
c002743f:	0f 8f 9b 04 00 00    	jg     c00278e0 <__adddf3+0x645>
c0027445:	83 e3 1f             	and    ebx,0x1f
c0027448:	89 d9                	mov    ecx,ebx
c002744a:	89 c7                	mov    edi,eax
c002744c:	d3 ef                	shr    edi,cl
c002744e:	31 db                	xor    ebx,ebx
c0027450:	85 c9                	test   ecx,ecx
c0027452:	74 12                	je     c0027466 <__adddf3+0x1cb>
c0027454:	be 20 00 00 00       	mov    esi,0x20
c0027459:	29 ce                	sub    esi,ecx
c002745b:	89 f1                	mov    ecx,esi
c002745d:	d3 e0                	shl    eax,cl
c002745f:	31 db                	xor    ebx,ebx
c0027461:	85 c0                	test   eax,eax
c0027463:	0f 95 c3             	setne  bl
c0027466:	31 c0                	xor    eax,eax
c0027468:	85 d2                	test   edx,edx
c002746a:	0f 95 c0             	setne  al
c002746d:	09 c7                	or     edi,eax
c002746f:	09 fb                	or     ebx,edi
c0027471:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027474:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027477:	01 da                	add    edx,ebx
c0027479:	83 d6 00             	adc    esi,0x0
c002747c:	eb 39                	jmp    c00274b7 <__adddf3+0x21c>
c002747e:	be 20 00 00 00       	mov    esi,0x20
c0027483:	29 de                	sub    esi,ebx
c0027485:	89 c7                	mov    edi,eax
c0027487:	89 f1                	mov    ecx,esi
c0027489:	d3 e7                	shl    edi,cl
c002748b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002748e:	89 d7                	mov    edi,edx
c0027490:	88 d9                	mov    cl,bl
c0027492:	d3 ef                	shr    edi,cl
c0027494:	89 f9                	mov    ecx,edi
c0027496:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027499:	09 cf                	or     edi,ecx
c002749b:	88 d9                	mov    cl,bl
c002749d:	d3 e8                	shr    eax,cl
c002749f:	89 f1                	mov    ecx,esi
c00274a1:	d3 e2                	shl    edx,cl
c00274a3:	85 d2                	test   edx,edx
c00274a5:	0f 95 c2             	setne  dl
c00274a8:	0f b6 d2             	movzx  edx,dl
c00274ab:	09 d7                	or     edi,edx
c00274ad:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00274b0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00274b3:	01 fa                	add    edx,edi
c00274b5:	11 c6                	adc    esi,eax
c00274b7:	89 f0                	mov    eax,esi
c00274b9:	eb 77                	jmp    c0027532 <__adddf3+0x297>
c00274bb:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00274be:	46                   	inc    esi
c00274bf:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00274c2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00274c8:	75 41                	jne    c002750b <__adddf3+0x270>
c00274ca:	89 d3                	mov    ebx,edx
c00274cc:	09 c3                	or     ebx,eax
c00274ce:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00274d5:	75 27                	jne    c00274fe <__adddf3+0x263>
c00274d7:	85 db                	test   ebx,ebx
c00274d9:	0f 84 fb 03 00 00    	je     c00278da <__adddf3+0x63f>
c00274df:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00274e2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00274e5:	0f 84 f5 03 00 00    	je     c00278e0 <__adddf3+0x645>
c00274eb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00274ee:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00274f1:	85 c0                	test   eax,eax
c00274f3:	0f 89 91 03 00 00    	jns    c002788a <__adddf3+0x5ef>
c00274f9:	e9 85 03 00 00       	jmp    c0027883 <__adddf3+0x5e8>
c00274fe:	85 db                	test   ebx,ebx
c0027500:	0f 85 da 03 00 00    	jne    c00278e0 <__adddf3+0x645>
c0027506:	e9 cf 03 00 00       	jmp    c00278da <__adddf3+0x63f>
c002750b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002750e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027511:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027514:	f7 d1                	not    ecx
c0027516:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002751c:	0f 84 70 03 00 00    	je     c0027892 <__adddf3+0x5f7>
c0027522:	d1 ea                	shr    edx,1
c0027524:	89 c1                	mov    ecx,eax
c0027526:	c1 e1 1f             	shl    ecx,0x1f
c0027529:	09 ca                	or     edx,ecx
c002752b:	d1 e8                	shr    eax,1
c002752d:	e9 6f 03 00 00       	jmp    c00278a1 <__adddf3+0x606>
c0027532:	85 c0                	test   eax,eax
c0027534:	0f 89 67 03 00 00    	jns    c00278a1 <__adddf3+0x606>
c002753a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002753d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027540:	f7 d1                	not    ecx
c0027542:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027548:	0f 84 44 03 00 00    	je     c0027892 <__adddf3+0x5f7>
c002754e:	89 d1                	mov    ecx,edx
c0027550:	d1 e9                	shr    ecx,1
c0027552:	83 e2 01             	and    edx,0x1
c0027555:	09 ca                	or     edx,ecx
c0027557:	89 c1                	mov    ecx,eax
c0027559:	c1 e1 1f             	shl    ecx,0x1f
c002755c:	09 ca                	or     edx,ecx
c002755e:	d1 e8                	shr    eax,1
c0027560:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027565:	e9 37 03 00 00       	jmp    c00278a1 <__adddf3+0x606>
c002756a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002756d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027573:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027576:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027579:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002757f:	29 de                	sub    esi,ebx
c0027581:	85 f6                	test   esi,esi
c0027583:	0f 8e bd 00 00 00    	jle    c0027646 <__adddf3+0x3ab>
c0027589:	85 db                	test   ebx,ebx
c002758b:	75 17                	jne    c00275a4 <__adddf3+0x309>
c002758d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027590:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027593:	0f 84 47 03 00 00    	je     c00278e0 <__adddf3+0x645>
c0027599:	4e                   	dec    esi
c002759a:	75 20                	jne    c00275bc <__adddf3+0x321>
c002759c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002759f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00275a2:	eb 5b                	jmp    c00275ff <__adddf3+0x364>
c00275a4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00275a7:	f7 d3                	not    ebx
c00275a9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00275af:	0f 84 2b 03 00 00    	je     c00278e0 <__adddf3+0x645>
c00275b5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00275bc:	83 fe 1f             	cmp    esi,0x1f
c00275bf:	7e 49                	jle    c002760a <__adddf3+0x36f>
c00275c1:	83 fe 3f             	cmp    esi,0x3f
c00275c4:	0f 8f 16 03 00 00    	jg     c00278e0 <__adddf3+0x645>
c00275ca:	83 e6 1f             	and    esi,0x1f
c00275cd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00275d0:	89 f1                	mov    ecx,esi
c00275d2:	d3 ef                	shr    edi,cl
c00275d4:	31 db                	xor    ebx,ebx
c00275d6:	85 f6                	test   esi,esi
c00275d8:	74 13                	je     c00275ed <__adddf3+0x352>
c00275da:	b9 20 00 00 00       	mov    ecx,0x20
c00275df:	29 f1                	sub    ecx,esi
c00275e1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275e4:	d3 e6                	shl    esi,cl
c00275e6:	31 db                	xor    ebx,ebx
c00275e8:	85 f6                	test   esi,esi
c00275ea:	0f 95 c3             	setne  bl
c00275ed:	31 c9                	xor    ecx,ecx
c00275ef:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00275f3:	0f 95 c1             	setne  cl
c00275f6:	09 cf                	or     edi,ecx
c00275f8:	09 fb                	or     ebx,edi
c00275fa:	29 da                	sub    edx,ebx
c00275fc:	83 d8 00             	sbb    eax,0x0
c00275ff:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027602:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027605:	e9 aa 01 00 00       	jmp    c00277b4 <__adddf3+0x519>
c002760a:	bf 20 00 00 00       	mov    edi,0x20
c002760f:	29 f7                	sub    edi,esi
c0027611:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027614:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027617:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002761a:	d3 e3                	shl    ebx,cl
c002761c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002761f:	89 f1                	mov    ecx,esi
c0027621:	d3 ef                	shr    edi,cl
c0027623:	09 fb                	or     ebx,edi
c0027625:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027628:	89 f1                	mov    ecx,esi
c002762a:	d3 ef                	shr    edi,cl
c002762c:	89 fe                	mov    esi,edi
c002762e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027631:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027634:	d3 e7                	shl    edi,cl
c0027636:	85 ff                	test   edi,edi
c0027638:	0f 95 c1             	setne  cl
c002763b:	0f b6 c9             	movzx  ecx,cl
c002763e:	09 cb                	or     ebx,ecx
c0027640:	29 da                	sub    edx,ebx
c0027642:	19 f0                	sbb    eax,esi
c0027644:	eb b9                	jmp    c00275ff <__adddf3+0x364>
c0027646:	0f 84 cd 00 00 00    	je     c0027719 <__adddf3+0x47e>
c002764c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002764f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027652:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027655:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027659:	75 1b                	jne    c0027676 <__adddf3+0x3db>
c002765b:	89 d6                	mov    esi,edx
c002765d:	09 c6                	or     esi,eax
c002765f:	0f 84 7b 02 00 00    	je     c00278e0 <__adddf3+0x645>
c0027665:	4b                   	dec    ebx
c0027666:	75 24                	jne    c002768c <__adddf3+0x3f1>
c0027668:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002766b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002766e:	29 d1                	sub    ecx,edx
c0027670:	19 c6                	sbb    esi,eax
c0027672:	89 ca                	mov    edx,ecx
c0027674:	eb 61                	jmp    c00276d7 <__adddf3+0x43c>
c0027676:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027679:	f7 d6                	not    esi
c002767b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027681:	0f 84 59 02 00 00    	je     c00278e0 <__adddf3+0x645>
c0027687:	0d 00 00 00 80       	or     eax,0x80000000
c002768c:	83 fb 1f             	cmp    ebx,0x1f
c002768f:	7e 4d                	jle    c00276de <__adddf3+0x443>
c0027691:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027694:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027697:	83 fb 3f             	cmp    ebx,0x3f
c002769a:	0f 8f 40 02 00 00    	jg     c00278e0 <__adddf3+0x645>
c00276a0:	83 e3 1f             	and    ebx,0x1f
c00276a3:	89 d9                	mov    ecx,ebx
c00276a5:	89 c7                	mov    edi,eax
c00276a7:	d3 ef                	shr    edi,cl
c00276a9:	31 db                	xor    ebx,ebx
c00276ab:	85 c9                	test   ecx,ecx
c00276ad:	74 12                	je     c00276c1 <__adddf3+0x426>
c00276af:	be 20 00 00 00       	mov    esi,0x20
c00276b4:	29 ce                	sub    esi,ecx
c00276b6:	89 f1                	mov    ecx,esi
c00276b8:	d3 e0                	shl    eax,cl
c00276ba:	31 db                	xor    ebx,ebx
c00276bc:	85 c0                	test   eax,eax
c00276be:	0f 95 c3             	setne  bl
c00276c1:	31 c0                	xor    eax,eax
c00276c3:	85 d2                	test   edx,edx
c00276c5:	0f 95 c0             	setne  al
c00276c8:	09 c7                	or     edi,eax
c00276ca:	09 fb                	or     ebx,edi
c00276cc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276cf:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00276d2:	29 da                	sub    edx,ebx
c00276d4:	83 de 00             	sbb    esi,0x0
c00276d7:	89 f0                	mov    eax,esi
c00276d9:	e9 d6 00 00 00       	jmp    c00277b4 <__adddf3+0x519>
c00276de:	be 20 00 00 00       	mov    esi,0x20
c00276e3:	29 de                	sub    esi,ebx
c00276e5:	89 c7                	mov    edi,eax
c00276e7:	89 f1                	mov    ecx,esi
c00276e9:	d3 e7                	shl    edi,cl
c00276eb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00276ee:	89 d7                	mov    edi,edx
c00276f0:	88 d9                	mov    cl,bl
c00276f2:	d3 ef                	shr    edi,cl
c00276f4:	89 f9                	mov    ecx,edi
c00276f6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00276f9:	09 cf                	or     edi,ecx
c00276fb:	88 d9                	mov    cl,bl
c00276fd:	d3 e8                	shr    eax,cl
c00276ff:	89 f1                	mov    ecx,esi
c0027701:	d3 e2                	shl    edx,cl
c0027703:	85 d2                	test   edx,edx
c0027705:	0f 95 c2             	setne  dl
c0027708:	0f b6 d2             	movzx  edx,dl
c002770b:	09 d7                	or     edi,edx
c002770d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027710:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027713:	29 fa                	sub    edx,edi
c0027715:	19 c6                	sbb    esi,eax
c0027717:	eb be                	jmp    c00276d7 <__adddf3+0x43c>
c0027719:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002771c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002771f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027725:	75 6a                	jne    c0027791 <__adddf3+0x4f6>
c0027727:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002772b:	75 58                	jne    c0027785 <__adddf3+0x4ea>
c002772d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027730:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027733:	89 d6                	mov    esi,edx
c0027735:	09 c6                	or     esi,eax
c0027737:	75 17                	jne    c0027750 <__adddf3+0x4b5>
c0027739:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002773c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002773f:	85 db                	test   ebx,ebx
c0027741:	0f 85 99 01 00 00    	jne    c00278e0 <__adddf3+0x645>
c0027747:	31 ff                	xor    edi,edi
c0027749:	31 c9                	xor    ecx,ecx
c002774b:	e9 90 01 00 00       	jmp    c00278e0 <__adddf3+0x645>
c0027750:	85 db                	test   ebx,ebx
c0027752:	0f 84 88 01 00 00    	je     c00278e0 <__adddf3+0x645>
c0027758:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002775b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002775e:	85 c0                	test   eax,eax
c0027760:	79 10                	jns    c0027772 <__adddf3+0x4d7>
c0027762:	31 c9                	xor    ecx,ecx
c0027764:	f7 da                	neg    edx
c0027766:	0f 95 c1             	setne  cl
c0027769:	01 c8                	add    eax,ecx
c002776b:	f7 d8                	neg    eax
c002776d:	e9 2f 01 00 00       	jmp    c00278a1 <__adddf3+0x606>
c0027772:	31 ff                	xor    edi,edi
c0027774:	31 c9                	xor    ecx,ecx
c0027776:	89 c3                	mov    ebx,eax
c0027778:	09 d3                	or     ebx,edx
c002777a:	0f 84 60 01 00 00    	je     c00278e0 <__adddf3+0x645>
c0027780:	e9 05 01 00 00       	jmp    c002788a <__adddf3+0x5ef>
c0027785:	31 ff                	xor    edi,edi
c0027787:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002778c:	e9 4f 01 00 00       	jmp    c00278e0 <__adddf3+0x645>
c0027791:	89 c1                	mov    ecx,eax
c0027793:	89 d0                	mov    eax,edx
c0027795:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027798:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002779b:	89 ca                	mov    edx,ecx
c002779d:	85 c9                	test   ecx,ecx
c002779f:	79 2c                	jns    c00277cd <__adddf3+0x532>
c00277a1:	31 c9                	xor    ecx,ecx
c00277a3:	f7 d8                	neg    eax
c00277a5:	0f 95 c1             	setne  cl
c00277a8:	01 ca                	add    edx,ecx
c00277aa:	f7 da                	neg    edx
c00277ac:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00277af:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00277b2:	eb 19                	jmp    c00277cd <__adddf3+0x532>
c00277b4:	85 c0                	test   eax,eax
c00277b6:	0f 89 e5 00 00 00    	jns    c00278a1 <__adddf3+0x606>
c00277bc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00277c1:	89 c1                	mov    ecx,eax
c00277c3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00277c6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00277c9:	89 d0                	mov    eax,edx
c00277cb:	89 ca                	mov    edx,ecx
c00277cd:	85 d2                	test   edx,edx
c00277cf:	74 59                	je     c002782a <__adddf3+0x58f>
c00277d1:	0f bd da             	bsr    ebx,edx
c00277d4:	83 f3 1f             	xor    ebx,0x1f
c00277d7:	88 d9                	mov    cl,bl
c00277d9:	d3 e2                	shl    edx,cl
c00277db:	bf 20 00 00 00       	mov    edi,0x20
c00277e0:	89 f9                	mov    ecx,edi
c00277e2:	29 d9                	sub    ecx,ebx
c00277e4:	89 c6                	mov    esi,eax
c00277e6:	d3 ee                	shr    esi,cl
c00277e8:	09 d6                	or     esi,edx
c00277ea:	88 d9                	mov    cl,bl
c00277ec:	d3 e0                	shl    eax,cl
c00277ee:	89 c2                	mov    edx,eax
c00277f0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00277f3:	25 ff 07 00 00       	and    eax,0x7ff
c00277f8:	39 d8                	cmp    eax,ebx
c00277fa:	7f 22                	jg     c002781e <__adddf3+0x583>
c00277fc:	29 c3                	sub    ebx,eax
c00277fe:	43                   	inc    ebx
c00277ff:	88 d9                	mov    cl,bl
c0027801:	d3 ea                	shr    edx,cl
c0027803:	29 df                	sub    edi,ebx
c0027805:	89 f9                	mov    ecx,edi
c0027807:	89 f0                	mov    eax,esi
c0027809:	d3 e0                	shl    eax,cl
c002780b:	09 c2                	or     edx,eax
c002780d:	89 f0                	mov    eax,esi
c002780f:	88 d9                	mov    cl,bl
c0027811:	d3 e8                	shr    eax,cl
c0027813:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027816:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c002781c:	eb 6f                	jmp    c002788d <__adddf3+0x5f2>
c002781e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027821:	29 d8                	sub    eax,ebx
c0027823:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027826:	89 f0                	mov    eax,esi
c0027828:	eb 59                	jmp    c0027883 <__adddf3+0x5e8>
c002782a:	85 c0                	test   eax,eax
c002782c:	74 6a                	je     c0027898 <__adddf3+0x5fd>
c002782e:	0f bd c8             	bsr    ecx,eax
c0027831:	83 f1 1f             	xor    ecx,0x1f
c0027834:	d3 e0                	shl    eax,cl
c0027836:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027839:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002783f:	83 c1 20             	add    ecx,0x20
c0027842:	39 cb                	cmp    ebx,ecx
c0027844:	7f 35                	jg     c002787b <__adddf3+0x5e0>
c0027846:	29 d9                	sub    ecx,ebx
c0027848:	8d 71 01             	lea    esi,[ecx+0x1]
c002784b:	83 fe 1f             	cmp    esi,0x1f
c002784e:	7e 09                	jle    c0027859 <__adddf3+0x5be>
c0027850:	83 e9 1f             	sub    ecx,0x1f
c0027853:	d3 e8                	shr    eax,cl
c0027855:	89 c3                	mov    ebx,eax
c0027857:	eb 11                	jmp    c002786a <__adddf3+0x5cf>
c0027859:	b9 20 00 00 00       	mov    ecx,0x20
c002785e:	29 f1                	sub    ecx,esi
c0027860:	89 c3                	mov    ebx,eax
c0027862:	d3 e3                	shl    ebx,cl
c0027864:	89 f1                	mov    ecx,esi
c0027866:	d3 e8                	shr    eax,cl
c0027868:	89 c2                	mov    edx,eax
c002786a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002786d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027872:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027875:	89 d0                	mov    eax,edx
c0027877:	89 da                	mov    edx,ebx
c0027879:	eb 26                	jmp    c00278a1 <__adddf3+0x606>
c002787b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002787e:	29 cf                	sub    edi,ecx
c0027880:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027883:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027888:	eb 17                	jmp    c00278a1 <__adddf3+0x606>
c002788a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002788d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027890:	eb 0f                	jmp    c00278a1 <__adddf3+0x606>
c0027892:	31 d2                	xor    edx,edx
c0027894:	31 c0                	xor    eax,eax
c0027896:	eb 09                	jmp    c00278a1 <__adddf3+0x606>
c0027898:	89 c2                	mov    edx,eax
c002789a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00278a1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00278a4:	c1 e1 14             	shl    ecx,0x14
c00278a7:	89 c3                	mov    ebx,eax
c00278a9:	c1 eb 0b             	shr    ebx,0xb
c00278ac:	09 d9                	or     ecx,ebx
c00278ae:	89 d3                	mov    ebx,edx
c00278b0:	c1 eb 0b             	shr    ebx,0xb
c00278b3:	c1 e0 15             	shl    eax,0x15
c00278b6:	09 d8                	or     eax,ebx
c00278b8:	89 c7                	mov    edi,eax
c00278ba:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00278c0:	0f 95 c0             	setne  al
c00278c3:	89 c6                	mov    esi,eax
c00278c5:	09 f3                	or     ebx,esi
c00278c7:	83 e3 01             	and    ebx,0x1
c00278ca:	c1 ea 0a             	shr    edx,0xa
c00278cd:	21 da                	and    edx,ebx
c00278cf:	89 f8                	mov    eax,edi
c00278d1:	01 d0                	add    eax,edx
c00278d3:	83 d1 00             	adc    ecx,0x0
c00278d6:	89 c7                	mov    edi,eax
c00278d8:	eb 06                	jmp    c00278e0 <__adddf3+0x645>
c00278da:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00278dd:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00278e0:	89 f8                	mov    eax,edi
c00278e2:	89 ca                	mov    edx,ecx
c00278e4:	83 c4 24             	add    esp,0x24
c00278e7:	5b                   	pop    ebx
c00278e8:	5e                   	pop    esi
c00278e9:	5f                   	pop    edi
c00278ea:	5d                   	pop    ebp
c00278eb:	c3                   	ret    

c00278ec <__subdf3>:
c00278ec:	55                   	push   ebp
c00278ed:	89 e5                	mov    ebp,esp
c00278ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00278f2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00278f5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00278fb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00278fe:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027901:	5d                   	pop    ebp
c0027902:	e9 94 f9 ff ff       	jmp    c002729b <__adddf3>

c0027907 <__negdf2>:
c0027907:	55                   	push   ebp
c0027908:	89 e5                	mov    ebp,esp
c002790a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002790d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027910:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027916:	5d                   	pop    ebp
c0027917:	c3                   	ret    

c0027918 <__muldf3>:
c0027918:	55                   	push   ebp
c0027919:	89 e5                	mov    ebp,esp
c002791b:	57                   	push   edi
c002791c:	56                   	push   esi
c002791d:	53                   	push   ebx
c002791e:	83 ec 24             	sub    esp,0x24
c0027921:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027924:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027927:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002792a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002792d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027930:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027933:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027936:	89 c8                	mov    eax,ecx
c0027938:	c1 f8 14             	sar    eax,0x14
c002793b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002793e:	89 f8                	mov    eax,edi
c0027940:	89 fb                	mov    ebx,edi
c0027942:	c1 e3 0b             	shl    ebx,0xb
c0027945:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027948:	c1 e1 0b             	shl    ecx,0xb
c002794b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027951:	c1 e8 15             	shr    eax,0x15
c0027954:	09 c1                	or     ecx,eax
c0027956:	89 d6                	mov    esi,edx
c0027958:	89 d0                	mov    eax,edx
c002795a:	c1 f8 14             	sar    eax,0x14
c002795d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027960:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027963:	89 c3                	mov    ebx,eax
c0027965:	c1 e3 0b             	shl    ebx,0xb
c0027968:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002796b:	c1 e6 0b             	shl    esi,0xb
c002796e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027974:	c1 e8 15             	shr    eax,0x15
c0027977:	09 c6                	or     esi,eax
c0027979:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002797c:	25 ff 07 00 00       	and    eax,0x7ff
c0027981:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027984:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027987:	25 ff 07 00 00       	and    eax,0x7ff
c002798c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002798f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027992:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027995:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002799c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002799f:	40                   	inc    eax
c00279a0:	a9 fe 07 00 00       	test   eax,0x7fe
c00279a5:	0f 85 8d 00 00 00    	jne    c0027a38 <__muldf3+0x120>
c00279ab:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00279ae:	09 c8                	or     eax,ecx
c00279b0:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00279b4:	74 44                	je     c00279fa <__muldf3+0xe2>
c00279b6:	85 c0                	test   eax,eax
c00279b8:	0f 85 31 02 00 00    	jne    c0027bef <__muldf3+0x2d7>
c00279be:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00279c1:	40                   	inc    eax
c00279c2:	a9 fe 07 00 00       	test   eax,0x7fe
c00279c7:	75 13                	jne    c00279dc <__muldf3+0xc4>
c00279c9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00279cc:	09 f1                	or     ecx,esi
c00279ce:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00279d2:	74 22                	je     c00279f6 <__muldf3+0xde>
c00279d4:	85 c9                	test   ecx,ecx
c00279d6:	0f 85 0d 02 00 00    	jne    c0027be9 <__muldf3+0x2d1>
c00279dc:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00279e0:	0f 89 09 02 00 00    	jns    c0027bef <__muldf3+0x2d7>
c00279e6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00279e9:	05 00 00 00 80       	add    eax,0x80000000
c00279ee:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00279f1:	e9 f9 01 00 00       	jmp    c0027bef <__muldf3+0x2d7>
c00279f6:	85 c9                	test   ecx,ecx
c00279f8:	eb 2e                	jmp    c0027a28 <__muldf3+0x110>
c00279fa:	85 c0                	test   eax,eax
c00279fc:	74 20                	je     c0027a1e <__muldf3+0x106>
c00279fe:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027a01:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a04:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a07:	c1 ef 1f             	shr    edi,0x1f
c0027a0a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027a0d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027a10:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027a13:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027a16:	09 f9                	or     ecx,edi
c0027a18:	78 1e                	js     c0027a38 <__muldf3+0x120>
c0027a1a:	89 c3                	mov    ebx,eax
c0027a1c:	eb e0                	jmp    c00279fe <__muldf3+0xe6>
c0027a1e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027a21:	f7 d0                	not    eax
c0027a23:	a9 ff 07 00 00       	test   eax,0x7ff
c0027a28:	75 b2                	jne    c00279dc <__muldf3+0xc4>
c0027a2a:	31 ff                	xor    edi,edi
c0027a2c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027a33:	e9 b7 01 00 00       	jmp    c0027bef <__muldf3+0x2d7>
c0027a38:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027a3b:	40                   	inc    eax
c0027a3c:	a9 fe 07 00 00       	test   eax,0x7fe
c0027a41:	75 57                	jne    c0027a9a <__muldf3+0x182>
c0027a43:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027a46:	09 f0                	or     eax,esi
c0027a48:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a4c:	74 23                	je     c0027a71 <__muldf3+0x159>
c0027a4e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027a52:	0f 89 91 01 00 00    	jns    c0027be9 <__muldf3+0x2d1>
c0027a58:	85 c0                	test   eax,eax
c0027a5a:	0f 85 89 01 00 00    	jne    c0027be9 <__muldf3+0x2d1>
c0027a60:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027a63:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027a69:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a6c:	e9 7e 01 00 00       	jmp    c0027bef <__muldf3+0x2d7>
c0027a71:	85 c0                	test   eax,eax
c0027a73:	75 0c                	jne    c0027a81 <__muldf3+0x169>
c0027a75:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027a79:	0f 89 6a 01 00 00    	jns    c0027be9 <__muldf3+0x2d1>
c0027a7f:	eb df                	jmp    c0027a60 <__muldf3+0x148>
c0027a81:	01 f6                	add    esi,esi
c0027a83:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a86:	c1 ea 1f             	shr    edx,0x1f
c0027a89:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027a8c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027a8f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027a92:	09 d6                	or     esi,edx
c0027a94:	78 04                	js     c0027a9a <__muldf3+0x182>
c0027a96:	89 c3                	mov    ebx,eax
c0027a98:	eb e7                	jmp    c0027a81 <__muldf3+0x169>
c0027a9a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027aa0:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027aa6:	89 c8                	mov    eax,ecx
c0027aa8:	f7 e6                	mul    esi
c0027aaa:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027aad:	89 c7                	mov    edi,eax
c0027aaf:	89 c8                	mov    eax,ecx
c0027ab1:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027ab4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027ab7:	89 c1                	mov    ecx,eax
c0027ab9:	89 f0                	mov    eax,esi
c0027abb:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027abe:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027ac1:	89 c6                	mov    esi,eax
c0027ac3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ac6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027ac9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027acc:	31 c0                	xor    eax,eax
c0027ace:	01 f1                	add    ecx,esi
c0027ad0:	0f 92 c0             	setb   al
c0027ad3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027ad6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027ad9:	83 d6 00             	adc    esi,0x0
c0027adc:	01 c7                	add    edi,eax
c0027ade:	83 d6 00             	adc    esi,0x0
c0027ae1:	01 ca                	add    edx,ecx
c0027ae3:	0f 92 c1             	setb   cl
c0027ae6:	0f b6 c9             	movzx  ecx,cl
c0027ae9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027aec:	83 d6 00             	adc    esi,0x0
c0027aef:	01 cf                	add    edi,ecx
c0027af1:	83 d6 00             	adc    esi,0x0
c0027af4:	31 c9                	xor    ecx,ecx
c0027af6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027af9:	0f 95 c1             	setne  cl
c0027afc:	09 cf                	or     edi,ecx
c0027afe:	85 f6                	test   esi,esi
c0027b00:	78 0c                	js     c0027b0e <__muldf3+0x1f6>
c0027b02:	01 f6                	add    esi,esi
c0027b04:	89 f8                	mov    eax,edi
c0027b06:	c1 e8 1f             	shr    eax,0x1f
c0027b09:	09 c6                	or     esi,eax
c0027b0b:	01 ff                	add    edi,edi
c0027b0d:	4b                   	dec    ebx
c0027b0e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027b14:	0f 8f 85 00 00 00    	jg     c0027b9f <__muldf3+0x287>
c0027b1a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027b20:	85 db                	test   ebx,ebx
c0027b22:	0f 8f 84 00 00 00    	jg     c0027bac <__muldf3+0x294>
c0027b28:	83 fb cc             	cmp    ebx,0xffffffcc
c0027b2b:	7c 79                	jl     c0027ba6 <__muldf3+0x28e>
c0027b2d:	ba 01 00 00 00       	mov    edx,0x1
c0027b32:	29 da                	sub    edx,ebx
c0027b34:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027b3a:	83 fa 1f             	cmp    edx,0x1f
c0027b3d:	7e 30                	jle    c0027b6f <__muldf3+0x257>
c0027b3f:	83 fa 20             	cmp    edx,0x20
c0027b42:	75 0b                	jne    c0027b4f <__muldf3+0x237>
c0027b44:	31 c0                	xor    eax,eax
c0027b46:	85 ff                	test   edi,edi
c0027b48:	0f 95 c0             	setne  al
c0027b4b:	89 c7                	mov    edi,eax
c0027b4d:	eb 1a                	jmp    c0027b69 <__muldf3+0x251>
c0027b4f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027b52:	89 f0                	mov    eax,esi
c0027b54:	d3 e0                	shl    eax,cl
c0027b56:	09 f8                	or     eax,edi
c0027b58:	0f 95 c0             	setne  al
c0027b5b:	0f b6 c0             	movzx  eax,al
c0027b5e:	89 c7                	mov    edi,eax
c0027b60:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027b65:	29 d9                	sub    ecx,ebx
c0027b67:	d3 ee                	shr    esi,cl
c0027b69:	09 f7                	or     edi,esi
c0027b6b:	31 db                	xor    ebx,ebx
c0027b6d:	eb 3b                	jmp    c0027baa <__muldf3+0x292>
c0027b6f:	83 c3 1f             	add    ebx,0x1f
c0027b72:	89 f0                	mov    eax,esi
c0027b74:	88 d9                	mov    cl,bl
c0027b76:	d3 e0                	shl    eax,cl
c0027b78:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b7b:	89 f8                	mov    eax,edi
c0027b7d:	88 d1                	mov    cl,dl
c0027b7f:	d3 e8                	shr    eax,cl
c0027b81:	89 c1                	mov    ecx,eax
c0027b83:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027b86:	09 c8                	or     eax,ecx
c0027b88:	88 d9                	mov    cl,bl
c0027b8a:	d3 e7                	shl    edi,cl
c0027b8c:	31 db                	xor    ebx,ebx
c0027b8e:	85 ff                	test   edi,edi
c0027b90:	0f 95 c3             	setne  bl
c0027b93:	89 df                	mov    edi,ebx
c0027b95:	09 c7                	or     edi,eax
c0027b97:	88 d1                	mov    cl,dl
c0027b99:	d3 ee                	shr    esi,cl
c0027b9b:	31 db                	xor    ebx,ebx
c0027b9d:	eb 0d                	jmp    c0027bac <__muldf3+0x294>
c0027b9f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027ba4:	eb 02                	jmp    c0027ba8 <__muldf3+0x290>
c0027ba6:	31 db                	xor    ebx,ebx
c0027ba8:	31 ff                	xor    edi,edi
c0027baa:	31 f6                	xor    esi,esi
c0027bac:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027baf:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027bb2:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027bb7:	09 c3                	or     ebx,eax
c0027bb9:	c1 e3 14             	shl    ebx,0x14
c0027bbc:	89 f0                	mov    eax,esi
c0027bbe:	c1 e8 0b             	shr    eax,0xb
c0027bc1:	09 c3                	or     ebx,eax
c0027bc3:	89 f8                	mov    eax,edi
c0027bc5:	c1 e8 0b             	shr    eax,0xb
c0027bc8:	c1 e6 15             	shl    esi,0x15
c0027bcb:	09 c6                	or     esi,eax
c0027bcd:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027bd3:	0f 95 c1             	setne  cl
c0027bd6:	09 c8                	or     eax,ecx
c0027bd8:	83 e0 01             	and    eax,0x1
c0027bdb:	c1 ef 0a             	shr    edi,0xa
c0027bde:	21 c7                	and    edi,eax
c0027be0:	01 f7                	add    edi,esi
c0027be2:	83 d3 00             	adc    ebx,0x0
c0027be5:	89 da                	mov    edx,ebx
c0027be7:	eb 03                	jmp    c0027bec <__muldf3+0x2d4>
c0027be9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027bec:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027bef:	89 f8                	mov    eax,edi
c0027bf1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027bf4:	83 c4 24             	add    esp,0x24
c0027bf7:	5b                   	pop    ebx
c0027bf8:	5e                   	pop    esi
c0027bf9:	5f                   	pop    edi
c0027bfa:	5d                   	pop    ebp
c0027bfb:	c3                   	ret    

c0027bfc <__divdf3>:
c0027bfc:	55                   	push   ebp
c0027bfd:	89 e5                	mov    ebp,esp
c0027bff:	57                   	push   edi
c0027c00:	56                   	push   esi
c0027c01:	53                   	push   ebx
c0027c02:	83 ec 2c             	sub    esp,0x2c
c0027c05:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027c08:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027c0b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c0e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027c11:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027c14:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027c17:	89 ce                	mov    esi,ecx
c0027c19:	89 c8                	mov    eax,ecx
c0027c1b:	c1 f8 14             	sar    eax,0x14
c0027c1e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027c21:	89 f8                	mov    eax,edi
c0027c23:	89 fb                	mov    ebx,edi
c0027c25:	c1 e3 0b             	shl    ebx,0xb
c0027c28:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027c2b:	c1 e6 0b             	shl    esi,0xb
c0027c2e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027c34:	c1 e8 15             	shr    eax,0x15
c0027c37:	09 c6                	or     esi,eax
c0027c39:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027c3c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027c3f:	89 c2                	mov    edx,eax
c0027c41:	c1 fa 14             	sar    edx,0x14
c0027c44:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027c47:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027c4a:	89 de                	mov    esi,ebx
c0027c4c:	c1 e6 0b             	shl    esi,0xb
c0027c4f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027c52:	c1 e0 0b             	shl    eax,0xb
c0027c55:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027c5a:	c1 eb 15             	shr    ebx,0x15
c0027c5d:	09 d8                	or     eax,ebx
c0027c5f:	89 c2                	mov    edx,eax
c0027c61:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c64:	25 ff 07 00 00       	and    eax,0x7ff
c0027c69:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027c6c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027c6f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027c75:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027c78:	29 d8                	sub    eax,ebx
c0027c7a:	05 ff 03 00 00       	add    eax,0x3ff
c0027c7f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027c82:	46                   	inc    esi
c0027c83:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027c89:	0f 85 a5 00 00 00    	jne    c0027d34 <__divdf3+0x138>
c0027c8f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027c92:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027c95:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027c99:	74 2a                	je     c0027cc5 <__divdf3+0xc9>
c0027c9b:	85 f6                	test   esi,esi
c0027c9d:	0f 85 cc 02 00 00    	jne    c0027f6f <__divdf3+0x373>
c0027ca3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ca6:	40                   	inc    eax
c0027ca7:	a9 fe 07 00 00       	test   eax,0x7fe
c0027cac:	75 26                	jne    c0027cd4 <__divdf3+0xd8>
c0027cae:	85 db                	test   ebx,ebx
c0027cb0:	74 22                	je     c0027cd4 <__divdf3+0xd8>
c0027cb2:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027cb5:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027cb8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027cbb:	09 d0                	or     eax,edx
c0027cbd:	0f 85 ac 02 00 00    	jne    c0027f6f <__divdf3+0x373>
c0027cc3:	eb 63                	jmp    c0027d28 <__divdf3+0x12c>
c0027cc5:	85 f6                	test   esi,esi
c0027cc7:	75 22                	jne    c0027ceb <__divdf3+0xef>
c0027cc9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ccc:	40                   	inc    eax
c0027ccd:	a9 fe 07 00 00       	test   eax,0x7fe
c0027cd2:	74 36                	je     c0027d0a <__divdf3+0x10e>
c0027cd4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027cd8:	0f 89 91 02 00 00    	jns    c0027f6f <__divdf3+0x373>
c0027cde:	89 f8                	mov    eax,edi
c0027ce0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027ce6:	e9 80 02 00 00       	jmp    c0027f6b <__divdf3+0x36f>
c0027ceb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027cee:	01 f6                	add    esi,esi
c0027cf0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027cf3:	c1 ef 1f             	shr    edi,0x1f
c0027cf6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027cf9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027cfc:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027cff:	09 f7                	or     edi,esi
c0027d01:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027d04:	78 2e                	js     c0027d34 <__divdf3+0x138>
c0027d06:	89 c8                	mov    eax,ecx
c0027d08:	eb e1                	jmp    c0027ceb <__divdf3+0xef>
c0027d0a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d0d:	09 d0                	or     eax,edx
c0027d0f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027d13:	74 0f                	je     c0027d24 <__divdf3+0x128>
c0027d15:	85 c0                	test   eax,eax
c0027d17:	74 bb                	je     c0027cd4 <__divdf3+0xd8>
c0027d19:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027d1c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027d1f:	e9 4b 02 00 00       	jmp    c0027f6f <__divdf3+0x373>
c0027d24:	85 c0                	test   eax,eax
c0027d26:	75 ac                	jne    c0027cd4 <__divdf3+0xd8>
c0027d28:	31 ff                	xor    edi,edi
c0027d2a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027d2f:	e9 3b 02 00 00       	jmp    c0027f6f <__divdf3+0x373>
c0027d34:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027d37:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027d3a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027d40:	75 6b                	jne    c0027dad <__divdf3+0x1b1>
c0027d42:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027d45:	09 d6                	or     esi,edx
c0027d47:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027d4b:	74 28                	je     c0027d75 <__divdf3+0x179>
c0027d4d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027d50:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027d53:	85 f6                	test   esi,esi
c0027d55:	0f 85 14 02 00 00    	jne    c0027f6f <__divdf3+0x373>
c0027d5b:	31 ff                	xor    edi,edi
c0027d5d:	31 c9                	xor    ecx,ecx
c0027d5f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d62:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027d65:	0f 89 04 02 00 00    	jns    c0027f6f <__divdf3+0x373>
c0027d6b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027d70:	e9 fa 01 00 00       	jmp    c0027f6f <__divdf3+0x373>
c0027d75:	85 f6                	test   esi,esi
c0027d77:	75 1b                	jne    c0027d94 <__divdf3+0x198>
c0027d79:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d7c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027d7f:	25 00 00 00 80       	and    eax,0x80000000
c0027d84:	31 c9                	xor    ecx,ecx
c0027d86:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027d8b:	89 cf                	mov    edi,ecx
c0027d8d:	89 c1                	mov    ecx,eax
c0027d8f:	e9 db 01 00 00       	jmp    c0027f6f <__divdf3+0x373>
c0027d94:	01 d2                	add    edx,edx
c0027d96:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027d99:	c1 eb 1f             	shr    ebx,0x1f
c0027d9c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027d9f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027da2:	8d 48 01             	lea    ecx,[eax+0x1]
c0027da5:	09 da                	or     edx,ebx
c0027da7:	78 04                	js     c0027dad <__divdf3+0x1b1>
c0027da9:	89 c8                	mov    eax,ecx
c0027dab:	eb e7                	jmp    c0027d94 <__divdf3+0x198>
c0027dad:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027db0:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027db6:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027dbc:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027dbf:	39 d6                	cmp    esi,edx
c0027dc1:	77 0d                	ja     c0027dd0 <__divdf3+0x1d4>
c0027dc3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027dc6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027dc9:	72 1b                	jb     c0027de6 <__divdf3+0x1ea>
c0027dcb:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027dce:	75 16                	jne    c0027de6 <__divdf3+0x1ea>
c0027dd0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027dd3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027dd6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027dd9:	83 de 00             	sbb    esi,0x0
c0027ddc:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027ddf:	ba 01 00 00 00       	mov    edx,0x1
c0027de4:	eb 02                	jmp    c0027de8 <__divdf3+0x1ec>
c0027de6:	31 d2                	xor    edx,edx
c0027de8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027def:	31 ff                	xor    edi,edi
c0027df1:	01 ff                	add    edi,edi
c0027df3:	89 d1                	mov    ecx,edx
c0027df5:	c1 e9 1f             	shr    ecx,0x1f
c0027df8:	09 cf                	or     edi,ecx
c0027dfa:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027dfd:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027e00:	89 da                	mov    edx,ebx
c0027e02:	89 f3                	mov    ebx,esi
c0027e04:	8d 34 36             	lea    esi,[esi+esi*1]
c0027e07:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027e0a:	c1 e9 1f             	shr    ecx,0x1f
c0027e0d:	09 ce                	or     esi,ecx
c0027e0f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027e12:	01 c9                	add    ecx,ecx
c0027e14:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027e17:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027e1a:	85 db                	test   ebx,ebx
c0027e1c:	78 29                	js     c0027e47 <__divdf3+0x24b>
c0027e1e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027e21:	72 07                	jb     c0027e2a <__divdf3+0x22e>
c0027e23:	75 3c                	jne    c0027e61 <__divdf3+0x265>
c0027e25:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027e28:	77 37                	ja     c0027e61 <__divdf3+0x265>
c0027e2a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027e2d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027e30:	31 d2                	xor    edx,edx
c0027e32:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027e35:	0f 97 c2             	seta   dl
c0027e38:	29 d6                	sub    esi,edx
c0027e3a:	89 d9                	mov    ecx,ebx
c0027e3c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027e3f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027e42:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027e45:	eb 17                	jmp    c0027e5e <__divdf3+0x262>
c0027e47:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027e4a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027e4d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027e50:	0f 97 c1             	seta   cl
c0027e53:	0f b6 c9             	movzx  ecx,cl
c0027e56:	29 ce                	sub    esi,ecx
c0027e58:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027e5b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027e5e:	83 ca 01             	or     edx,0x1
c0027e61:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027e64:	75 8b                	jne    c0027df1 <__divdf3+0x1f5>
c0027e66:	c1 e7 09             	shl    edi,0x9
c0027e69:	89 d1                	mov    ecx,edx
c0027e6b:	c1 e9 17             	shr    ecx,0x17
c0027e6e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027e71:	09 f3                	or     ebx,esi
c0027e73:	0f 95 c3             	setne  bl
c0027e76:	0f b6 db             	movzx  ebx,bl
c0027e79:	c1 e2 09             	shl    edx,0x9
c0027e7c:	09 d3                	or     ebx,edx
c0027e7e:	89 ca                	mov    edx,ecx
c0027e80:	09 fa                	or     edx,edi
c0027e82:	78 0c                	js     c0027e90 <__divdf3+0x294>
c0027e84:	01 d2                	add    edx,edx
c0027e86:	89 d9                	mov    ecx,ebx
c0027e88:	c1 e9 1f             	shr    ecx,0x1f
c0027e8b:	09 ca                	or     edx,ecx
c0027e8d:	01 db                	add    ebx,ebx
c0027e8f:	48                   	dec    eax
c0027e90:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027e95:	0f 8f 83 00 00 00    	jg     c0027f1e <__divdf3+0x322>
c0027e9b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027ea1:	85 c0                	test   eax,eax
c0027ea3:	0f 8f 82 00 00 00    	jg     c0027f2b <__divdf3+0x32f>
c0027ea9:	83 f8 cc             	cmp    eax,0xffffffcc
c0027eac:	7c 77                	jl     c0027f25 <__divdf3+0x329>
c0027eae:	be 01 00 00 00       	mov    esi,0x1
c0027eb3:	29 c6                	sub    esi,eax
c0027eb5:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027ebb:	83 fe 1f             	cmp    esi,0x1f
c0027ebe:	7e 2f                	jle    c0027eef <__divdf3+0x2f3>
c0027ec0:	83 fe 20             	cmp    esi,0x20
c0027ec3:	75 0a                	jne    c0027ecf <__divdf3+0x2d3>
c0027ec5:	85 db                	test   ebx,ebx
c0027ec7:	0f 95 c3             	setne  bl
c0027eca:	0f b6 db             	movzx  ebx,bl
c0027ecd:	eb 1a                	jmp    c0027ee9 <__divdf3+0x2ed>
c0027ecf:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0027ed2:	89 d7                	mov    edi,edx
c0027ed4:	d3 e7                	shl    edi,cl
c0027ed6:	89 f9                	mov    ecx,edi
c0027ed8:	09 d9                	or     ecx,ebx
c0027eda:	0f 95 c3             	setne  bl
c0027edd:	0f b6 db             	movzx  ebx,bl
c0027ee0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027ee5:	29 c1                	sub    ecx,eax
c0027ee7:	d3 ea                	shr    edx,cl
c0027ee9:	09 d3                	or     ebx,edx
c0027eeb:	31 c0                	xor    eax,eax
c0027eed:	eb 3a                	jmp    c0027f29 <__divdf3+0x32d>
c0027eef:	83 c0 1f             	add    eax,0x1f
c0027ef2:	89 d7                	mov    edi,edx
c0027ef4:	88 c1                	mov    cl,al
c0027ef6:	d3 e7                	shl    edi,cl
c0027ef8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027efb:	89 df                	mov    edi,ebx
c0027efd:	89 f1                	mov    ecx,esi
c0027eff:	d3 ef                	shr    edi,cl
c0027f01:	89 f9                	mov    ecx,edi
c0027f03:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027f06:	09 cf                	or     edi,ecx
c0027f08:	88 c1                	mov    cl,al
c0027f0a:	d3 e3                	shl    ebx,cl
c0027f0c:	85 db                	test   ebx,ebx
c0027f0e:	0f 95 c3             	setne  bl
c0027f11:	0f b6 db             	movzx  ebx,bl
c0027f14:	09 fb                	or     ebx,edi
c0027f16:	89 f1                	mov    ecx,esi
c0027f18:	d3 ea                	shr    edx,cl
c0027f1a:	31 c0                	xor    eax,eax
c0027f1c:	eb 0d                	jmp    c0027f2b <__divdf3+0x32f>
c0027f1e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0027f23:	eb 02                	jmp    c0027f27 <__divdf3+0x32b>
c0027f25:	31 c0                	xor    eax,eax
c0027f27:	31 db                	xor    ebx,ebx
c0027f29:	31 d2                	xor    edx,edx
c0027f2b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027f2e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027f31:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0027f37:	09 c8                	or     eax,ecx
c0027f39:	c1 e0 14             	shl    eax,0x14
c0027f3c:	89 d1                	mov    ecx,edx
c0027f3e:	c1 e9 0b             	shr    ecx,0xb
c0027f41:	09 c8                	or     eax,ecx
c0027f43:	89 c6                	mov    esi,eax
c0027f45:	89 d9                	mov    ecx,ebx
c0027f47:	c1 e9 0b             	shr    ecx,0xb
c0027f4a:	c1 e2 15             	shl    edx,0x15
c0027f4d:	09 ca                	or     edx,ecx
c0027f4f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0027f55:	0f 95 c0             	setne  al
c0027f58:	09 c1                	or     ecx,eax
c0027f5a:	83 e1 01             	and    ecx,0x1
c0027f5d:	c1 eb 0a             	shr    ebx,0xa
c0027f60:	21 cb                	and    ebx,ecx
c0027f62:	01 d3                	add    ebx,edx
c0027f64:	89 d8                	mov    eax,ebx
c0027f66:	83 d6 00             	adc    esi,0x0
c0027f69:	89 f2                	mov    edx,esi
c0027f6b:	89 c7                	mov    edi,eax
c0027f6d:	89 d1                	mov    ecx,edx
c0027f6f:	89 f8                	mov    eax,edi
c0027f71:	89 ca                	mov    edx,ecx
c0027f73:	83 c4 2c             	add    esp,0x2c
c0027f76:	5b                   	pop    ebx
c0027f77:	5e                   	pop    esi
c0027f78:	5f                   	pop    edi
c0027f79:	5d                   	pop    ebp
c0027f7a:	c3                   	ret    

c0027f7b <__floatsidf>:
c0027f7b:	55                   	push   ebp
c0027f7c:	89 e5                	mov    ebp,esp
c0027f7e:	56                   	push   esi
c0027f7f:	53                   	push   ebx
c0027f80:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027f83:	85 db                	test   ebx,ebx
c0027f85:	7e 15                	jle    c0027f9c <__floatsidf+0x21>
c0027f87:	0f bd cb             	bsr    ecx,ebx
c0027f8a:	83 f1 1f             	xor    ecx,0x1f
c0027f8d:	d3 e3                	shl    ebx,cl
c0027f8f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027f95:	b8 1e 04 00 00       	mov    eax,0x41e
c0027f9a:	eb 21                	jmp    c0027fbd <__floatsidf+0x42>
c0027f9c:	b8 00 00 00 00       	mov    eax,0x0
c0027fa1:	ba 00 00 00 00       	mov    edx,0x0
c0027fa6:	74 2a                	je     c0027fd2 <__floatsidf+0x57>
c0027fa8:	f7 db                	neg    ebx
c0027faa:	0f bd cb             	bsr    ecx,ebx
c0027fad:	83 f1 1f             	xor    ecx,0x1f
c0027fb0:	d3 e3                	shl    ebx,cl
c0027fb2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027fb8:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0027fbd:	29 c8                	sub    eax,ecx
c0027fbf:	c1 e0 14             	shl    eax,0x14
c0027fc2:	89 c1                	mov    ecx,eax
c0027fc4:	89 de                	mov    esi,ebx
c0027fc6:	c1 ee 0b             	shr    esi,0xb
c0027fc9:	09 f1                	or     ecx,esi
c0027fcb:	89 ca                	mov    edx,ecx
c0027fcd:	c1 e3 15             	shl    ebx,0x15
c0027fd0:	89 d8                	mov    eax,ebx
c0027fd2:	5b                   	pop    ebx
c0027fd3:	5e                   	pop    esi
c0027fd4:	5d                   	pop    ebp
c0027fd5:	c3                   	ret    

c0027fd6 <__floatunsidf>:
c0027fd6:	55                   	push   ebp
c0027fd7:	89 e5                	mov    ebp,esp
c0027fd9:	56                   	push   esi
c0027fda:	53                   	push   ebx
c0027fdb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027fde:	85 db                	test   ebx,ebx
c0027fe0:	74 2a                	je     c002800c <__floatunsidf+0x36>
c0027fe2:	0f bd cb             	bsr    ecx,ebx
c0027fe5:	83 f1 1f             	xor    ecx,0x1f
c0027fe8:	d3 e3                	shl    ebx,cl
c0027fea:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027ff0:	b8 1e 04 00 00       	mov    eax,0x41e
c0027ff5:	29 c8                	sub    eax,ecx
c0027ff7:	c1 e0 14             	shl    eax,0x14
c0027ffa:	89 c1                	mov    ecx,eax
c0027ffc:	89 de                	mov    esi,ebx
c0027ffe:	c1 ee 0b             	shr    esi,0xb
c0028001:	09 f1                	or     ecx,esi
c0028003:	89 ca                	mov    edx,ecx
c0028005:	c1 e3 15             	shl    ebx,0x15
c0028008:	89 d8                	mov    eax,ebx
c002800a:	eb 04                	jmp    c0028010 <__floatunsidf+0x3a>
c002800c:	31 c0                	xor    eax,eax
c002800e:	31 d2                	xor    edx,edx
c0028010:	5b                   	pop    ebx
c0028011:	5e                   	pop    esi
c0028012:	5d                   	pop    ebp
c0028013:	c3                   	ret    

c0028014 <__fixdfsi>:
c0028014:	55                   	push   ebp
c0028015:	89 e5                	mov    ebp,esp
c0028017:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002801a:	89 d1                	mov    ecx,edx
c002801c:	c1 e1 0b             	shl    ecx,0xb
c002801f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028028:	c1 e8 15             	shr    eax,0x15
c002802b:	09 c1                	or     ecx,eax
c002802d:	c1 fa 14             	sar    edx,0x14
c0028030:	78 1f                	js     c0028051 <__fixdfsi+0x3d>
c0028032:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028038:	31 c0                	xor    eax,eax
c002803a:	83 fa 1e             	cmp    edx,0x1e
c002803d:	77 40                	ja     c002807f <__fixdfsi+0x6b>
c002803f:	89 c8                	mov    eax,ecx
c0028041:	0d 00 00 00 80       	or     eax,0x80000000
c0028046:	b9 1f 00 00 00       	mov    ecx,0x1f
c002804b:	29 d1                	sub    ecx,edx
c002804d:	d3 e8                	shr    eax,cl
c002804f:	eb 2e                	jmp    c002807f <__fixdfsi+0x6b>
c0028051:	31 c0                	xor    eax,eax
c0028053:	81 c2 01 04 00 00    	add    edx,0x401
c0028059:	78 24                	js     c002807f <__fixdfsi+0x6b>
c002805b:	83 fa 1e             	cmp    edx,0x1e
c002805e:	7e 09                	jle    c0028069 <__fixdfsi+0x55>
c0028060:	83 fa 1f             	cmp    edx,0x1f
c0028063:	75 18                	jne    c002807d <__fixdfsi+0x69>
c0028065:	85 c9                	test   ecx,ecx
c0028067:	75 14                	jne    c002807d <__fixdfsi+0x69>
c0028069:	89 c8                	mov    eax,ecx
c002806b:	0d 00 00 00 80       	or     eax,0x80000000
c0028070:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028075:	29 d1                	sub    ecx,edx
c0028077:	d3 e8                	shr    eax,cl
c0028079:	f7 d8                	neg    eax
c002807b:	eb 02                	jmp    c002807f <__fixdfsi+0x6b>
c002807d:	31 c0                	xor    eax,eax
c002807f:	5d                   	pop    ebp
c0028080:	c3                   	ret    

c0028081 <__fixunsdfsi>:
c0028081:	55                   	push   ebp
c0028082:	89 e5                	mov    ebp,esp
c0028084:	53                   	push   ebx
c0028085:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028088:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002808b:	89 d3                	mov    ebx,edx
c002808d:	c1 fb 14             	sar    ebx,0x14
c0028090:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028096:	31 c0                	xor    eax,eax
c0028098:	83 fb 1f             	cmp    ebx,0x1f
c002809b:	77 1d                	ja     c00280ba <__fixunsdfsi+0x39>
c002809d:	89 d0                	mov    eax,edx
c002809f:	c1 e0 0b             	shl    eax,0xb
c00280a2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00280a7:	c1 e9 15             	shr    ecx,0x15
c00280aa:	09 c8                	or     eax,ecx
c00280ac:	0d 00 00 00 80       	or     eax,0x80000000
c00280b1:	b9 1f 00 00 00       	mov    ecx,0x1f
c00280b6:	29 d9                	sub    ecx,ebx
c00280b8:	d3 e8                	shr    eax,cl
c00280ba:	5b                   	pop    ebx
c00280bb:	5d                   	pop    ebp
c00280bc:	c3                   	ret    

c00280bd <__cmpdf2>:
c00280bd:	55                   	push   ebp
c00280be:	89 e5                	mov    ebp,esp
c00280c0:	57                   	push   edi
c00280c1:	56                   	push   esi
c00280c2:	53                   	push   ebx
c00280c3:	83 ec 0c             	sub    esp,0xc
c00280c6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00280c9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00280cc:	89 ca                	mov    edx,ecx
c00280ce:	c1 ea 14             	shr    edx,0x14
c00280d1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00280d7:	89 cb                	mov    ebx,ecx
c00280d9:	c1 fb 1f             	sar    ebx,0x1f
c00280dc:	31 da                	xor    edx,ebx
c00280de:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00280e1:	89 df                	mov    edi,ebx
c00280e3:	c1 e7 0b             	shl    edi,0xb
c00280e6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00280e9:	c1 e1 0b             	shl    ecx,0xb
c00280ec:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00280f2:	c1 eb 15             	shr    ebx,0x15
c00280f5:	09 d9                	or     ecx,ebx
c00280f7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00280fa:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00280fd:	89 ce                	mov    esi,ecx
c00280ff:	c1 ee 14             	shr    esi,0x14
c0028102:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028108:	89 cb                	mov    ebx,ecx
c002810a:	c1 fb 1f             	sar    ebx,0x1f
c002810d:	31 de                	xor    esi,ebx
c002810f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028112:	89 df                	mov    edi,ebx
c0028114:	c1 e7 0b             	shl    edi,0xb
c0028117:	c1 e1 0b             	shl    ecx,0xb
c002811a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028120:	c1 eb 15             	shr    ebx,0x15
c0028123:	09 d9                	or     ecx,ebx
c0028125:	89 d3                	mov    ebx,edx
c0028127:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002812d:	43                   	inc    ebx
c002812e:	83 fb 01             	cmp    ebx,0x1
c0028131:	77 08                	ja     c002813b <__cmpdf2+0x7e>
c0028133:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028136:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028139:	75 68                	jne    c00281a3 <__cmpdf2+0xe6>
c002813b:	89 f3                	mov    ebx,esi
c002813d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028143:	43                   	inc    ebx
c0028144:	83 fb 01             	cmp    ebx,0x1
c0028147:	77 06                	ja     c002814f <__cmpdf2+0x92>
c0028149:	89 fb                	mov    ebx,edi
c002814b:	09 cb                	or     ebx,ecx
c002814d:	75 54                	jne    c00281a3 <__cmpdf2+0xe6>
c002814f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028152:	09 f8                	or     eax,edi
c0028154:	09 c8                	or     eax,ecx
c0028156:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028159:	75 12                	jne    c002816d <__cmpdf2+0xb0>
c002815b:	8d 42 01             	lea    eax,[edx+0x1]
c002815e:	83 f8 01             	cmp    eax,0x1
c0028161:	77 0a                	ja     c002816d <__cmpdf2+0xb0>
c0028163:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028166:	31 c0                	xor    eax,eax
c0028168:	83 fb 01             	cmp    ebx,0x1
c002816b:	76 36                	jbe    c00281a3 <__cmpdf2+0xe6>
c002816d:	b8 01 00 00 00       	mov    eax,0x1
c0028172:	39 f2                	cmp    edx,esi
c0028174:	7f 2d                	jg     c00281a3 <__cmpdf2+0xe6>
c0028176:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002817b:	7c 26                	jl     c00281a3 <__cmpdf2+0xe6>
c002817d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028180:	77 07                	ja     c0028189 <__cmpdf2+0xcc>
c0028182:	72 16                	jb     c002819a <__cmpdf2+0xdd>
c0028184:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028187:	76 0a                	jbe    c0028193 <__cmpdf2+0xd6>
c0028189:	89 d0                	mov    eax,edx
c002818b:	c1 f8 1f             	sar    eax,0x1f
c002818e:	83 c8 01             	or     eax,0x1
c0028191:	eb 10                	jmp    c00281a3 <__cmpdf2+0xe6>
c0028193:	b8 00 00 00 00       	mov    eax,0x0
c0028198:	73 09                	jae    c00281a3 <__cmpdf2+0xe6>
c002819a:	89 d0                	mov    eax,edx
c002819c:	c1 f8 1f             	sar    eax,0x1f
c002819f:	83 e0 02             	and    eax,0x2
c00281a2:	48                   	dec    eax
c00281a3:	83 c4 0c             	add    esp,0xc
c00281a6:	5b                   	pop    ebx
c00281a7:	5e                   	pop    esi
c00281a8:	5f                   	pop    edi
c00281a9:	5d                   	pop    ebp
c00281aa:	c3                   	ret    

c00281ab <__eqdf2>:
c00281ab:	55                   	push   ebp
c00281ac:	89 e5                	mov    ebp,esp
c00281ae:	50                   	push   eax
c00281af:	6a 01                	push   0x1
c00281b1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00281b4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00281b7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00281ba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00281bd:	e8 fb fe ff ff       	call   c00280bd <__cmpdf2>
c00281c2:	83 c4 18             	add    esp,0x18
c00281c5:	c9                   	leave  
c00281c6:	c3                   	ret    

c00281c7 <__nedf2>:
c00281c7:	eb e2                	jmp    c00281ab <__eqdf2>

c00281c9 <__gtdf2>:
c00281c9:	55                   	push   ebp
c00281ca:	89 e5                	mov    ebp,esp
c00281cc:	50                   	push   eax
c00281cd:	6a ff                	push   0xffffffff
c00281cf:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00281d2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00281d5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00281d8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00281db:	e8 dd fe ff ff       	call   c00280bd <__cmpdf2>
c00281e0:	83 c4 18             	add    esp,0x18
c00281e3:	c9                   	leave  
c00281e4:	c3                   	ret    

c00281e5 <__gedf2>:
c00281e5:	eb e2                	jmp    c00281c9 <__gtdf2>

c00281e7 <__ltdf2>:
c00281e7:	eb c2                	jmp    c00281ab <__eqdf2>

c00281e9 <__ledf2>:
c00281e9:	eb c0                	jmp    c00281ab <__eqdf2>

c00281eb <__truncdfsf2>:
c00281eb:	55                   	push   ebp
c00281ec:	89 e5                	mov    ebp,esp
c00281ee:	57                   	push   edi
c00281ef:	56                   	push   esi
c00281f0:	53                   	push   ebx
c00281f1:	83 ec 0c             	sub    esp,0xc
c00281f4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00281f7:	89 d1                	mov    ecx,edx
c00281f9:	c1 f9 14             	sar    ecx,0x14
c00281fc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00281ff:	89 df                	mov    edi,ebx
c0028201:	c1 e7 0b             	shl    edi,0xb
c0028204:	89 d0                	mov    eax,edx
c0028206:	c1 e0 0b             	shl    eax,0xb
c0028209:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002820e:	c1 eb 15             	shr    ebx,0x15
c0028211:	09 d8                	or     eax,ebx
c0028213:	89 cb                	mov    ebx,ecx
c0028215:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002821b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028221:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028227:	0f 86 9e 00 00 00    	jbe    c00282cb <__truncdfsf2+0xe0>
c002822d:	85 db                	test   ebx,ebx
c002822f:	75 0a                	jne    c002823b <__truncdfsf2+0x50>
c0028231:	c1 fa 17             	sar    edx,0x17
c0028234:	30 d2                	xor    dl,dl
c0028236:	e9 84 00 00 00       	jmp    c00282bf <__truncdfsf2+0xd4>
c002823b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028241:	83 fe 83             	cmp    esi,0xffffff83
c0028244:	7d 4b                	jge    c0028291 <__truncdfsf2+0xa6>
c0028246:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002824b:	29 f1                	sub    ecx,esi
c002824d:	83 f9 1f             	cmp    ecx,0x1f
c0028250:	7f 6b                	jg     c00282bd <__truncdfsf2+0xd2>
c0028252:	0d 00 00 00 80       	or     eax,0x80000000
c0028257:	89 c3                	mov    ebx,eax
c0028259:	d3 eb                	shr    ebx,cl
c002825b:	be 01 00 00 00       	mov    esi,0x1
c0028260:	d3 e6                	shl    esi,cl
c0028262:	4e                   	dec    esi
c0028263:	21 f0                	and    eax,esi
c0028265:	09 f8                	or     eax,edi
c0028267:	0f 95 c0             	setne  al
c002826a:	0f b6 c0             	movzx  eax,al
c002826d:	09 c3                	or     ebx,eax
c002826f:	89 d9                	mov    ecx,ebx
c0028271:	c1 e9 08             	shr    ecx,0x8
c0028274:	f6 c3 7f             	test   bl,0x7f
c0028277:	0f 95 c0             	setne  al
c002827a:	09 c8                	or     eax,ecx
c002827c:	83 e0 01             	and    eax,0x1
c002827f:	c1 eb 07             	shr    ebx,0x7
c0028282:	21 c3                	and    ebx,eax
c0028284:	81 e2 00 00 00 80    	and    edx,0x80000000
c002828a:	09 d1                	or     ecx,edx
c002828c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002828f:	eb 76                	jmp    c0028307 <__truncdfsf2+0x11c>
c0028291:	83 c6 80             	add    esi,0xffffff80
c0028294:	7e 1d                	jle    c00282b3 <__truncdfsf2+0xc8>
c0028296:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002829c:	75 0b                	jne    c00282a9 <__truncdfsf2+0xbe>
c002829e:	09 f8                	or     eax,edi
c00282a0:	74 09                	je     c00282ab <__truncdfsf2+0xc0>
c00282a2:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00282a7:	eb 02                	jmp    c00282ab <__truncdfsf2+0xc0>
c00282a9:	31 c0                	xor    eax,eax
c00282ab:	c1 fa 17             	sar    edx,0x17
c00282ae:	80 ca ff             	or     dl,0xff
c00282b1:	eb 0e                	jmp    c00282c1 <__truncdfsf2+0xd6>
c00282b3:	c1 fa 1f             	sar    edx,0x1f
c00282b6:	c1 e2 08             	shl    edx,0x8
c00282b9:	09 ca                	or     edx,ecx
c00282bb:	eb 04                	jmp    c00282c1 <__truncdfsf2+0xd6>
c00282bd:	31 d2                	xor    edx,edx
c00282bf:	31 c0                	xor    eax,eax
c00282c1:	c1 e2 17             	shl    edx,0x17
c00282c4:	c1 e8 08             	shr    eax,0x8
c00282c7:	09 d0                	or     eax,edx
c00282c9:	eb 3c                	jmp    c0028307 <__truncdfsf2+0x11c>
c00282cb:	81 e9 80 03 00 00    	sub    ecx,0x380
c00282d1:	89 ca                	mov    edx,ecx
c00282d3:	c1 fa 0b             	sar    edx,0xb
c00282d6:	c1 e2 08             	shl    edx,0x8
c00282d9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00282dc:	31 db                	xor    ebx,ebx
c00282de:	85 ff                	test   edi,edi
c00282e0:	0f 95 c3             	setne  bl
c00282e3:	09 d8                	or     eax,ebx
c00282e5:	89 c3                	mov    ebx,eax
c00282e7:	c1 eb 08             	shr    ebx,0x8
c00282ea:	a8 7f                	test   al,0x7f
c00282ec:	0f 95 c2             	setne  dl
c00282ef:	89 d6                	mov    esi,edx
c00282f1:	09 de                	or     esi,ebx
c00282f3:	83 e6 01             	and    esi,0x1
c00282f6:	c1 e8 07             	shr    eax,0x7
c00282f9:	21 f0                	and    eax,esi
c00282fb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00282fe:	09 ca                	or     edx,ecx
c0028300:	c1 e2 17             	shl    edx,0x17
c0028303:	09 da                	or     edx,ebx
c0028305:	01 d0                	add    eax,edx
c0028307:	83 c4 0c             	add    esp,0xc
c002830a:	5b                   	pop    ebx
c002830b:	5e                   	pop    esi
c002830c:	5f                   	pop    edi
c002830d:	5d                   	pop    ebp
c002830e:	c3                   	ret    

c002830f <__extendsfdf2>:
c002830f:	55                   	push   ebp
c0028310:	89 e5                	mov    ebp,esp
c0028312:	57                   	push   edi
c0028313:	56                   	push   esi
c0028314:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028317:	89 d1                	mov    ecx,edx
c0028319:	c1 f9 17             	sar    ecx,0x17
c002831c:	c1 e2 08             	shl    edx,0x8
c002831f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028325:	89 c8                	mov    eax,ecx
c0028327:	80 e4 f8             	and    ah,0xf8
c002832a:	8d 71 01             	lea    esi,[ecx+0x1]
c002832d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028333:	75 27                	jne    c002835c <__extendsfdf2+0x4d>
c0028335:	81 e1 ff 00 00 00    	and    ecx,0xff
c002833b:	75 18                	jne    c0028355 <__extendsfdf2+0x46>
c002833d:	85 d2                	test   edx,edx
c002833f:	74 20                	je     c0028361 <__extendsfdf2+0x52>
c0028341:	41                   	inc    ecx
c0028342:	01 d2                	add    edx,edx
c0028344:	79 fb                	jns    c0028341 <__extendsfdf2+0x32>
c0028346:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002834c:	29 c8                	sub    eax,ecx
c002834e:	05 81 03 00 00       	add    eax,0x381
c0028353:	eb 0c                	jmp    c0028361 <__extendsfdf2+0x52>
c0028355:	05 00 07 00 00       	add    eax,0x700
c002835a:	eb 05                	jmp    c0028361 <__extendsfdf2+0x52>
c002835c:	05 80 03 00 00       	add    eax,0x380
c0028361:	c1 e0 14             	shl    eax,0x14
c0028364:	89 c1                	mov    ecx,eax
c0028366:	89 d0                	mov    eax,edx
c0028368:	c1 e8 0b             	shr    eax,0xb
c002836b:	09 c1                	or     ecx,eax
c002836d:	c1 e2 15             	shl    edx,0x15
c0028370:	89 d0                	mov    eax,edx
c0028372:	89 ca                	mov    edx,ecx
c0028374:	5e                   	pop    esi
c0028375:	5f                   	pop    edi
c0028376:	5d                   	pop    ebp
c0028377:	c3                   	ret    
c0028378:	66 90                	xchg   ax,ax
c002837a:	66 90                	xchg   ax,ax
c002837c:	66 90                	xchg   ax,ax
c002837e:	66 90                	xchg   ax,ax

c0028380 <fabs>:
c0028380:	83 ec 0c             	sub    esp,0xc
c0028383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028387:	89 04 24             	mov    DWORD PTR [esp],eax
c002838a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002838e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028393:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028397:	dd 04 24             	fld    QWORD PTR [esp]
c002839a:	83 c4 0c             	add    esp,0xc
c002839d:	c3                   	ret    
c002839e:	66 90                	xchg   ax,ax

c00283a0 <lrint>:
c00283a0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00283a4:	83 ec 04             	sub    esp,0x4
c00283a7:	db 1c 24             	fistp  DWORD PTR [esp]
c00283aa:	58                   	pop    eax
c00283ab:	c3                   	ret    

c00283ac <lrintf>:
c00283ac:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00283b0:	83 ec 04             	sub    esp,0x4
c00283b3:	db 1c 24             	fistp  DWORD PTR [esp]
c00283b6:	58                   	pop    eax
c00283b7:	c3                   	ret    

Disassembly of section .init:

c00283b8 <_init>:
c00283b8:	55                   	push   ebp
c00283b9:	89 e5                	mov    ebp,esp
c00283bb:	e8 58 7d fd ff       	call   c0000118 <frame_dummy>
c00283c0:	e8 5b e0 ff ff       	call   c0026420 <__do_global_ctors_aux>
c00283c5:	5d                   	pop    ebp
c00283c6:	c3                   	ret    

Disassembly of section .fini:

c00283c7 <_fini>:
c00283c7:	55                   	push   ebp
c00283c8:	89 e5                	mov    ebp,esp
c00283ca:	e8 d9 7c fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00283cf:	5d                   	pop    ebp
c00283d0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00283d2 <Computer::~Computer()>:
c00283d2:	83 ec 0c             	sub    esp,0xc
c00283d5:	ba 5c 9f 02 c0       	mov    edx,0xc0029f5c
c00283da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283de:	89 10                	mov    DWORD PTR [eax],edx
c00283e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283e4:	83 ec 0c             	sub    esp,0xc
c00283e7:	50                   	push   eax
c00283e8:	e8 e9 b5 fe ff       	call   c00139d6 <Device::~Device()>
c00283ed:	83 c4 10             	add    esp,0x10
c00283f0:	90                   	nop
c00283f1:	83 c4 0c             	add    esp,0xc
c00283f4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00283f6 <Computer::~Computer()>:
c00283f6:	83 ec 0c             	sub    esp,0xc
c00283f9:	83 ec 0c             	sub    esp,0xc
c00283fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028400:	e8 cd ff ff ff       	call   c00283d2 <Computer::~Computer()>
c0028405:	83 c4 10             	add    esp,0x10
c0028408:	83 ec 08             	sub    esp,0x8
c002840b:	68 ec 01 00 00       	push   0x1ec
c0028410:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028414:	e8 de a1 fe ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0028419:	83 c4 10             	add    esp,0x10
c002841c:	83 c4 0c             	add    esp,0xc
c002841f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028420 <idleCommon()>:
c0028420:	83 ec 0c             	sub    esp,0xc
c0028423:	fa                   	cli    
c0028424:	ff 05 e8 0e 03 c0    	inc    DWORD PTR ds:0xc0030ee8
c002842a:	e8 9c 55 ff ff       	call   c001d9cb <schedule()>
c002842f:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c0028434:	48                   	dec    eax
c0028435:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c002843a:	75 01                	jne    c002843d <idleCommon()+0x1d>
c002843c:	fb                   	sti    
c002843d:	83 c4 0c             	add    esp,0xc
c0028440:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028442 <LinkedList<UnixFile>::~LinkedList()>:
c0028442:	90                   	nop
c0028443:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028444 <LinkedList<UnixFile>::LinkedList()>:
c0028444:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028448:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002844e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028452:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028459:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002845d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028464:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028468:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002846e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028472:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028479:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002847d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028484:	90                   	nop
c0028485:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028486 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028486:	83 ec 0c             	sub    esp,0xc
c0028489:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002848e:	75 10                	jne    c00284a0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028490:	83 ec 0c             	sub    esp,0xc
c0028493:	68 14 a2 02 c0       	push   0xc002a214
c0028498:	e8 9e 19 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c002849d:	83 c4 10             	add    esp,0x10
c00284a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00284a6:	85 c0                	test   eax,eax
c00284a8:	74 34                	je     c00284de <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00284aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284b1:	85 c0                	test   eax,eax
c00284b3:	74 29                	je     c00284de <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00284b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284b9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284c0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00284c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284cb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00284ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284d5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00284dc:	eb 65                	jmp    c0028543 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00284de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00284e4:	85 c0                	test   eax,eax
c00284e6:	75 4b                	jne    c0028533 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00284e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284ef:	85 c0                	test   eax,eax
c00284f1:	75 40                	jne    c0028533 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00284f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284fb:	89 10                	mov    DWORD PTR [eax],edx
c00284fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028501:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028505:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002850c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002850f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002851a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002851d:	85 c0                	test   eax,eax
c002851f:	74 22                	je     c0028543 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028521:	83 ec 0c             	sub    esp,0xc
c0028524:	68 36 a2 02 c0       	push   0xc002a236
c0028529:	e8 0d 19 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c002852e:	83 c4 10             	add    esp,0x10
c0028531:	eb 10                	jmp    c0028543 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028533:	83 ec 0c             	sub    esp,0xc
c0028536:	68 40 a2 02 c0       	push   0xc002a240
c002853b:	e8 fb 18 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c0028540:	83 c4 10             	add    esp,0x10
c0028543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028547:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002854a:	8d 50 01             	lea    edx,[eax+0x1]
c002854d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028551:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028554:	90                   	nop
c0028555:	83 c4 0c             	add    esp,0xc
c0028558:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002855a <LinkedList<UnixFile>::getFirstElement()>:
c002855a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002855e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028560:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0028562 <LinkedList<UnixFile>::removeFirst()>:
c0028562:	83 ec 0c             	sub    esp,0xc
c0028565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028569:	8b 00                	mov    eax,DWORD PTR [eax]
c002856b:	85 c0                	test   eax,eax
c002856d:	75 12                	jne    c0028581 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002856f:	83 ec 0c             	sub    esp,0xc
c0028572:	68 4c a2 02 c0       	push   0xc002a24c
c0028577:	e8 bf 18 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c002857c:	83 c4 10             	add    esp,0x10
c002857f:	eb 7e                	jmp    c00285ff <LinkedList<UnixFile>::removeFirst()+0x9d>
c0028581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028585:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028588:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002858b:	85 c0                	test   eax,eax
c002858d:	74 10                	je     c002859f <LinkedList<UnixFile>::removeFirst()+0x3d>
c002858f:	83 ec 0c             	sub    esp,0xc
c0028592:	68 97 a2 02 c0       	push   0xc002a297
c0028597:	e8 9f 18 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c002859c:	83 c4 10             	add    esp,0x10
c002859f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00285a5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285a8:	85 c0                	test   eax,eax
c00285aa:	75 33                	jne    c00285df <LinkedList<UnixFile>::removeFirst()+0x7d>
c00285ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00285b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285ba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00285c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285c5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285c8:	83 f8 01             	cmp    eax,0x1
c00285cb:	74 21                	je     c00285ee <LinkedList<UnixFile>::removeFirst()+0x8c>
c00285cd:	83 ec 0c             	sub    esp,0xc
c00285d0:	68 70 a2 02 c0       	push   0xc002a270
c00285d5:	e8 61 18 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c00285da:	83 c4 10             	add    esp,0x10
c00285dd:	eb 0f                	jmp    c00285ee <LinkedList<UnixFile>::removeFirst()+0x8c>
c00285df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00285e5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00285e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285ec:	89 10                	mov    DWORD PTR [eax],edx
c00285ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285f2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285f5:	8d 50 ff             	lea    edx,[eax-0x1]
c00285f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285fc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00285ff:	83 c4 0c             	add    esp,0xc
c0028602:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0028604 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0028604:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028608:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002860b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002860c <DriverlessDevice::~DriverlessDevice()>:
c002860c:	ba fc aa 02 c0       	mov    edx,0xc002aafc
c0028611:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028615:	89 10                	mov    DWORD PTR [eax],edx
c0028617:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002861b:	50                   	push   eax
c002861c:	e8 b5 b3 fe ff       	call   c00139d6 <Device::~Device()>
c0028621:	83 c4 04             	add    esp,0x4
c0028624:	90                   	nop
c0028625:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028626 <DriverlessDevice::~DriverlessDevice()>:
c0028626:	83 ec 0c             	sub    esp,0xc
c0028629:	83 ec 0c             	sub    esp,0xc
c002862c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028630:	e8 d7 ff ff ff       	call   c002860c <DriverlessDevice::~DriverlessDevice()>
c0028635:	83 c4 10             	add    esp,0x10
c0028638:	83 ec 08             	sub    esp,0x8
c002863b:	68 58 01 00 00       	push   0x158
c0028640:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028644:	e8 ae 9f fe ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0028649:	83 c4 10             	add    esp,0x10
c002864c:	83 c4 0c             	add    esp,0xc
c002864f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028650 <LinkedList<Device>::addElement(Device*)>:
c0028650:	83 ec 0c             	sub    esp,0xc
c0028653:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028658:	75 10                	jne    c002866a <LinkedList<Device>::addElement(Device*)+0x1a>
c002865a:	83 ec 0c             	sub    esp,0xc
c002865d:	68 14 a2 02 c0       	push   0xc002a214
c0028662:	e8 d4 17 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c0028667:	83 c4 10             	add    esp,0x10
c002866a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002866e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028670:	85 c0                	test   eax,eax
c0028672:	74 3a                	je     c00286ae <LinkedList<Device>::addElement(Device*)+0x5e>
c0028674:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028678:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002867b:	85 c0                	test   eax,eax
c002867d:	74 2f                	je     c00286ae <LinkedList<Device>::addElement(Device*)+0x5e>
c002867f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028683:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028686:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002868a:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028694:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028698:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002869b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002869f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286a2:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00286ac:	eb 68                	jmp    c0028716 <LinkedList<Device>::addElement(Device*)+0xc6>
c00286ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00286b4:	85 c0                	test   eax,eax
c00286b6:	75 4e                	jne    c0028706 <LinkedList<Device>::addElement(Device*)+0xb6>
c00286b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286bf:	85 c0                	test   eax,eax
c00286c1:	75 43                	jne    c0028706 <LinkedList<Device>::addElement(Device*)+0xb6>
c00286c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286cb:	89 10                	mov    DWORD PTR [eax],edx
c00286cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286d5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00286d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286df:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00286e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ed:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286f0:	85 c0                	test   eax,eax
c00286f2:	74 22                	je     c0028716 <LinkedList<Device>::addElement(Device*)+0xc6>
c00286f4:	83 ec 0c             	sub    esp,0xc
c00286f7:	68 36 a2 02 c0       	push   0xc002a236
c00286fc:	e8 3a 17 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c0028701:	83 c4 10             	add    esp,0x10
c0028704:	eb 10                	jmp    c0028716 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028706:	83 ec 0c             	sub    esp,0xc
c0028709:	68 40 a2 02 c0       	push   0xc002a240
c002870e:	e8 28 17 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c0028713:	83 c4 10             	add    esp,0x10
c0028716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002871a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002871d:	8d 50 01             	lea    edx,[eax+0x1]
c0028720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028724:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028727:	90                   	nop
c0028728:	83 c4 0c             	add    esp,0xc
c002872b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002872c <LinkedList<Device>::LinkedList()>:
c002872c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028730:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028736:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002873a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028741:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028745:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002874c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028750:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002875a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028761:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028765:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002876c:	90                   	nop
c002876d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002876e <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002876e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028772:	8b 00                	mov    eax,DWORD PTR [eax]
c0028774:	85 c0                	test   eax,eax
c0028776:	75 0e                	jne    c0028786 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028778:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002877c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002877f:	85 c0                	test   eax,eax
c0028781:	75 03                	jne    c0028786 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028783:	b0 01                	mov    al,0x1
c0028785:	c3                   	ret    
c0028786:	b0 00                	mov    al,0x0
c0028788:	90                   	nop
c0028789:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002878a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002878a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002878e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028790:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028792 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028792:	83 ec 0c             	sub    esp,0xc
c0028795:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028799:	8b 00                	mov    eax,DWORD PTR [eax]
c002879b:	85 c0                	test   eax,eax
c002879d:	75 15                	jne    c00287b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002879f:	83 ec 0c             	sub    esp,0xc
c00287a2:	68 4c a2 02 c0       	push   0xc002a24c
c00287a7:	e8 8f 16 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c00287ac:	83 c4 10             	add    esp,0x10
c00287af:	e9 88 00 00 00       	jmp    c002883c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00287b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287bb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00287be:	85 c0                	test   eax,eax
c00287c0:	0f 95 c0             	setne  al
c00287c3:	84 c0                	test   al,al
c00287c5:	74 10                	je     c00287d7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00287c7:	83 ec 0c             	sub    esp,0xc
c00287ca:	68 97 a2 02 c0       	push   0xc002a297
c00287cf:	e8 67 16 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c00287d4:	83 c4 10             	add    esp,0x10
c00287d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287db:	8b 00                	mov    eax,DWORD PTR [eax]
c00287dd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00287e0:	85 c0                	test   eax,eax
c00287e2:	0f 94 c0             	sete   al
c00287e5:	84 c0                	test   al,al
c00287e7:	74 33                	je     c002881c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00287e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00287f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00287fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028802:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028805:	83 f8 01             	cmp    eax,0x1
c0028808:	74 21                	je     c002882b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002880a:	83 ec 0c             	sub    esp,0xc
c002880d:	68 70 a2 02 c0       	push   0xc002a270
c0028812:	e8 24 16 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c0028817:	83 c4 10             	add    esp,0x10
c002881a:	eb 0f                	jmp    c002882b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002881c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028820:	8b 00                	mov    eax,DWORD PTR [eax]
c0028822:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028829:	89 10                	mov    DWORD PTR [eax],edx
c002882b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002882f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028832:	8d 50 ff             	lea    edx,[eax-0x1]
c0028835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028839:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002883c:	83 c4 0c             	add    esp,0xc
c002883f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028840 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028840:	83 ec 0c             	sub    esp,0xc
c0028843:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028848:	75 10                	jne    c002885a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002884a:	83 ec 0c             	sub    esp,0xc
c002884d:	68 14 a2 02 c0       	push   0xc002a214
c0028852:	e8 e4 15 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c0028857:	83 c4 10             	add    esp,0x10
c002885a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002885e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028860:	85 c0                	test   eax,eax
c0028862:	74 34                	je     c0028898 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028868:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002886b:	85 c0                	test   eax,eax
c002886d:	74 29                	je     c0028898 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002886f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028873:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028876:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002887a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002887d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028881:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028885:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002888c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002888f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028896:	eb 65                	jmp    c00288fd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889c:	8b 00                	mov    eax,DWORD PTR [eax]
c002889e:	85 c0                	test   eax,eax
c00288a0:	75 4b                	jne    c00288ed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00288a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288a9:	85 c0                	test   eax,eax
c00288ab:	75 40                	jne    c00288ed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00288ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288b5:	89 10                	mov    DWORD PTR [eax],edx
c00288b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288bf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00288c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288c9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00288d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288d7:	85 c0                	test   eax,eax
c00288d9:	74 22                	je     c00288fd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00288db:	83 ec 0c             	sub    esp,0xc
c00288de:	68 36 a2 02 c0       	push   0xc002a236
c00288e3:	e8 53 15 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c00288e8:	83 c4 10             	add    esp,0x10
c00288eb:	eb 10                	jmp    c00288fd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00288ed:	83 ec 0c             	sub    esp,0xc
c00288f0:	68 40 a2 02 c0       	push   0xc002a240
c00288f5:	e8 41 15 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c00288fa:	83 c4 10             	add    esp,0x10
c00288fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028901:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028904:	8d 50 01             	lea    edx,[eax+0x1]
c0028907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002890b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002890e:	90                   	nop
c002890f:	83 c4 0c             	add    esp,0xc
c0028912:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028914 <ACPI::~ACPI()>:
c0028914:	83 ec 0c             	sub    esp,0xc
c0028917:	ba 68 b3 02 c0       	mov    edx,0xc002b368
c002891c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028920:	89 10                	mov    DWORD PTR [eax],edx
c0028922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028926:	83 ec 0c             	sub    esp,0xc
c0028929:	50                   	push   eax
c002892a:	e8 a7 b0 fe ff       	call   c00139d6 <Device::~Device()>
c002892f:	83 c4 10             	add    esp,0x10
c0028932:	90                   	nop
c0028933:	83 c4 0c             	add    esp,0xc
c0028936:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028938 <ACPI::~ACPI()>:
c0028938:	83 ec 0c             	sub    esp,0xc
c002893b:	83 ec 0c             	sub    esp,0xc
c002893e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028942:	e8 cd ff ff ff       	call   c0028914 <ACPI::~ACPI()>
c0028947:	83 c4 10             	add    esp,0x10
c002894a:	83 ec 08             	sub    esp,0x8
c002894d:	68 64 12 00 00       	push   0x1264
c0028952:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028956:	e8 9c 9c fe ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c002895b:	83 c4 10             	add    esp,0x10
c002895e:	83 c4 0c             	add    esp,0xc
c0028961:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0028962 <LinkedList<Device>::~LinkedList()>:
c0028962:	90                   	nop
c0028963:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0028964 <LinkedList<Device>::isEmpty()>:
c0028964:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028968:	8b 00                	mov    eax,DWORD PTR [eax]
c002896a:	85 c0                	test   eax,eax
c002896c:	75 0e                	jne    c002897c <LinkedList<Device>::isEmpty()+0x18>
c002896e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028972:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028975:	85 c0                	test   eax,eax
c0028977:	75 03                	jne    c002897c <LinkedList<Device>::isEmpty()+0x18>
c0028979:	b0 01                	mov    al,0x1
c002897b:	c3                   	ret    
c002897c:	b0 00                	mov    al,0x0
c002897e:	90                   	nop
c002897f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0028980 <LinkedList<Device>::getFirstElement()>:
c0028980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028984:	8b 00                	mov    eax,DWORD PTR [eax]
c0028986:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0028988 <LinkedList<Device>::removeFirst()>:
c0028988:	83 ec 0c             	sub    esp,0xc
c002898b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002898f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028991:	85 c0                	test   eax,eax
c0028993:	75 15                	jne    c00289aa <LinkedList<Device>::removeFirst()+0x22>
c0028995:	83 ec 0c             	sub    esp,0xc
c0028998:	68 4c a2 02 c0       	push   0xc002a24c
c002899d:	e8 99 14 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c00289a2:	83 c4 10             	add    esp,0x10
c00289a5:	e9 87 00 00 00       	jmp    c0028a31 <LinkedList<Device>::removeFirst()+0xa9>
c00289aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289b1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00289b7:	85 c0                	test   eax,eax
c00289b9:	74 10                	je     c00289cb <LinkedList<Device>::removeFirst()+0x43>
c00289bb:	83 ec 0c             	sub    esp,0xc
c00289be:	68 97 a2 02 c0       	push   0xc002a297
c00289c3:	e8 73 14 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c00289c8:	83 c4 10             	add    esp,0x10
c00289cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00289d1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00289d7:	85 c0                	test   eax,eax
c00289d9:	75 33                	jne    c0028a0e <LinkedList<Device>::removeFirst()+0x86>
c00289db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289f7:	83 f8 01             	cmp    eax,0x1
c00289fa:	74 24                	je     c0028a20 <LinkedList<Device>::removeFirst()+0x98>
c00289fc:	83 ec 0c             	sub    esp,0xc
c00289ff:	68 70 a2 02 c0       	push   0xc002a270
c0028a04:	e8 32 14 ff ff       	call   c0019e3b <Krnl::panic(char const*)>
c0028a09:	83 c4 10             	add    esp,0x10
c0028a0c:	eb 12                	jmp    c0028a20 <LinkedList<Device>::removeFirst()+0x98>
c0028a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a12:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a14:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0028a1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a1e:	89 10                	mov    DWORD PTR [eax],edx
c0028a20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a24:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a27:	8d 50 ff             	lea    edx,[eax-0x1]
c0028a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a2e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a31:	83 c4 0c             	add    esp,0xc
c0028a34:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028a36 <CPU::~CPU()>:
c0028a36:	83 ec 0c             	sub    esp,0xc
c0028a39:	ba b8 b5 02 c0       	mov    edx,0xc002b5b8
c0028a3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a42:	89 10                	mov    DWORD PTR [eax],edx
c0028a44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a48:	83 ec 0c             	sub    esp,0xc
c0028a4b:	50                   	push   eax
c0028a4c:	e8 85 af fe ff       	call   c00139d6 <Device::~Device()>
c0028a51:	83 c4 10             	add    esp,0x10
c0028a54:	90                   	nop
c0028a55:	83 c4 0c             	add    esp,0xc
c0028a58:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028a5a <CPU::~CPU()>:
c0028a5a:	83 ec 0c             	sub    esp,0xc
c0028a5d:	83 ec 0c             	sub    esp,0xc
c0028a60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a64:	e8 cd ff ff ff       	call   c0028a36 <CPU::~CPU()>
c0028a69:	83 c4 10             	add    esp,0x10
c0028a6c:	83 ec 08             	sub    esp,0x8
c0028a6f:	68 98 11 00 00       	push   0x1198
c0028a74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a78:	e8 7a 9b fe ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0028a7d:	83 c4 10             	add    esp,0x10
c0028a80:	83 c4 0c             	add    esp,0xc
c0028a83:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028a84 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028a84:	90                   	nop
c0028a85:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028a86 <ThreadControlBlock::ThreadControlBlock()>:
c0028a86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a8a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028a91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a95:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028a9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028aa0:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028aa7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028aab:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028ab2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ab6:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0028abd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ac1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028ac5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ac9:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028acd:	90                   	nop
c0028ace:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028ad0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028ad0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ad4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ade:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ae9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028af0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028af4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028afa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028afe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b09:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b10:	90                   	nop
c0028b11:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028b12 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028b12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028b16:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b19:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028b1a <Vm::_FPUState::_FPUState()>:
c0028b1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b1e:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028b25:	90                   	nop
c0028b26:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028b28 <PCI::~PCI()>:
c0028b28:	83 ec 0c             	sub    esp,0xc
c0028b2b:	ba e4 c0 02 c0       	mov    edx,0xc002c0e4
c0028b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b34:	89 10                	mov    DWORD PTR [eax],edx
c0028b36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b3a:	83 ec 0c             	sub    esp,0xc
c0028b3d:	50                   	push   eax
c0028b3e:	e8 63 a8 fe ff       	call   c00133a6 <Bus::~Bus()>
c0028b43:	83 c4 10             	add    esp,0x10
c0028b46:	90                   	nop
c0028b47:	83 c4 0c             	add    esp,0xc
c0028b4a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028b4c <PCI::~PCI()>:
c0028b4c:	83 ec 0c             	sub    esp,0xc
c0028b4f:	83 ec 0c             	sub    esp,0xc
c0028b52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b56:	e8 cd ff ff ff       	call   c0028b28 <PCI::~PCI()>
c0028b5b:	83 c4 10             	add    esp,0x10
c0028b5e:	83 ec 08             	sub    esp,0x8
c0028b61:	68 5c 01 00 00       	push   0x15c
c0028b66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b6a:	e8 88 9a fe ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0028b6f:	83 c4 10             	add    esp,0x10
c0028b72:	83 c4 0c             	add    esp,0xc
c0028b75:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028b76 <IDE::~IDE()>:
c0028b76:	83 ec 0c             	sub    esp,0xc
c0028b79:	ba 98 c1 02 c0       	mov    edx,0xc002c198
c0028b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b82:	89 10                	mov    DWORD PTR [eax],edx
c0028b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b88:	83 ec 0c             	sub    esp,0xc
c0028b8b:	50                   	push   eax
c0028b8c:	e8 5b b3 fe ff       	call   c0013eec <HardDiskController::~HardDiskController()>
c0028b91:	83 c4 10             	add    esp,0x10
c0028b94:	90                   	nop
c0028b95:	83 c4 0c             	add    esp,0xc
c0028b98:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028b9a <IDE::~IDE()>:
c0028b9a:	83 ec 0c             	sub    esp,0xc
c0028b9d:	83 ec 0c             	sub    esp,0xc
c0028ba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ba4:	e8 cd ff ff ff       	call   c0028b76 <IDE::~IDE()>
c0028ba9:	83 c4 10             	add    esp,0x10
c0028bac:	83 ec 08             	sub    esp,0x8
c0028baf:	68 70 02 00 00       	push   0x270
c0028bb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bb8:	e8 3a 9a fe ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0028bbd:	83 c4 10             	add    esp,0x10
c0028bc0:	83 c4 0c             	add    esp,0xc
c0028bc3:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028bc4 <SATABus::~SATABus()>:
c0028bc4:	83 ec 0c             	sub    esp,0xc
c0028bc7:	ba 10 c2 02 c0       	mov    edx,0xc002c210
c0028bcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd0:	89 10                	mov    DWORD PTR [eax],edx
c0028bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd6:	83 ec 0c             	sub    esp,0xc
c0028bd9:	50                   	push   eax
c0028bda:	e8 0d b3 fe ff       	call   c0013eec <HardDiskController::~HardDiskController()>
c0028bdf:	83 c4 10             	add    esp,0x10
c0028be2:	90                   	nop
c0028be3:	83 c4 0c             	add    esp,0xc
c0028be6:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028be8 <SATABus::~SATABus()>:
c0028be8:	83 ec 0c             	sub    esp,0xc
c0028beb:	83 ec 0c             	sub    esp,0xc
c0028bee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bf2:	e8 cd ff ff ff       	call   c0028bc4 <SATABus::~SATABus()>
c0028bf7:	83 c4 10             	add    esp,0x10
c0028bfa:	83 ec 08             	sub    esp,0x8
c0028bfd:	68 64 01 00 00       	push   0x164
c0028c02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c06:	e8 ec 99 fe ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0028c0b:	83 c4 10             	add    esp,0x10
c0028c0e:	83 c4 0c             	add    esp,0xc
c0028c11:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028c12 <ATA::~ATA()>:
c0028c12:	83 ec 0c             	sub    esp,0xc
c0028c15:	ba 5c c2 02 c0       	mov    edx,0xc002c25c
c0028c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c1e:	89 10                	mov    DWORD PTR [eax],edx
c0028c20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c24:	83 ec 0c             	sub    esp,0xc
c0028c27:	50                   	push   eax
c0028c28:	e8 a1 b3 fe ff       	call   c0013fce <PhysicalDisk::~PhysicalDisk()>
c0028c2d:	83 c4 10             	add    esp,0x10
c0028c30:	90                   	nop
c0028c31:	83 c4 0c             	add    esp,0xc
c0028c34:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028c36 <ATA::~ATA()>:
c0028c36:	83 ec 0c             	sub    esp,0xc
c0028c39:	83 ec 0c             	sub    esp,0xc
c0028c3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c40:	e8 cd ff ff ff       	call   c0028c12 <ATA::~ATA()>
c0028c45:	83 c4 10             	add    esp,0x10
c0028c48:	83 ec 08             	sub    esp,0x8
c0028c4b:	68 7c 01 00 00       	push   0x17c
c0028c50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c54:	e8 9e 99 fe ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0028c59:	83 c4 10             	add    esp,0x10
c0028c5c:	83 c4 0c             	add    esp,0xc
c0028c5f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028c60 <ATAPI::~ATAPI()>:
c0028c60:	83 ec 0c             	sub    esp,0xc
c0028c63:	ba 94 c2 02 c0       	mov    edx,0xc002c294
c0028c68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c6c:	89 10                	mov    DWORD PTR [eax],edx
c0028c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c72:	83 ec 0c             	sub    esp,0xc
c0028c75:	50                   	push   eax
c0028c76:	e8 53 b3 fe ff       	call   c0013fce <PhysicalDisk::~PhysicalDisk()>
c0028c7b:	83 c4 10             	add    esp,0x10
c0028c7e:	90                   	nop
c0028c7f:	83 c4 0c             	add    esp,0xc
c0028c82:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028c84 <ATAPI::~ATAPI()>:
c0028c84:	83 ec 0c             	sub    esp,0xc
c0028c87:	83 ec 0c             	sub    esp,0xc
c0028c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c8e:	e8 cd ff ff ff       	call   c0028c60 <ATAPI::~ATAPI()>
c0028c93:	83 c4 10             	add    esp,0x10
c0028c96:	83 ec 08             	sub    esp,0x8
c0028c99:	68 80 01 00 00       	push   0x180
c0028c9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ca2:	e8 50 99 fe ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0028ca7:	83 c4 10             	add    esp,0x10
c0028caa:	83 c4 0c             	add    esp,0xc
c0028cad:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028cae <SATA::~SATA()>:
c0028cae:	83 ec 0c             	sub    esp,0xc
c0028cb1:	ba 48 c3 02 c0       	mov    edx,0xc002c348
c0028cb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cba:	89 10                	mov    DWORD PTR [eax],edx
c0028cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cc0:	83 ec 0c             	sub    esp,0xc
c0028cc3:	50                   	push   eax
c0028cc4:	e8 05 b3 fe ff       	call   c0013fce <PhysicalDisk::~PhysicalDisk()>
c0028cc9:	83 c4 10             	add    esp,0x10
c0028ccc:	90                   	nop
c0028ccd:	83 c4 0c             	add    esp,0xc
c0028cd0:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028cd2 <SATA::~SATA()>:
c0028cd2:	83 ec 0c             	sub    esp,0xc
c0028cd5:	83 ec 0c             	sub    esp,0xc
c0028cd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cdc:	e8 cd ff ff ff       	call   c0028cae <SATA::~SATA()>
c0028ce1:	83 c4 10             	add    esp,0x10
c0028ce4:	83 ec 08             	sub    esp,0x8
c0028ce7:	68 7c 01 00 00       	push   0x17c
c0028cec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cf0:	e8 02 99 fe ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0028cf5:	83 c4 10             	add    esp,0x10
c0028cf8:	83 c4 0c             	add    esp,0xc
c0028cfb:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028cfc <SATAPI::~SATAPI()>:
c0028cfc:	83 ec 0c             	sub    esp,0xc
c0028cff:	ba 24 c4 02 c0       	mov    edx,0xc002c424
c0028d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d08:	89 10                	mov    DWORD PTR [eax],edx
c0028d0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d0e:	83 ec 0c             	sub    esp,0xc
c0028d11:	50                   	push   eax
c0028d12:	e8 b7 b2 fe ff       	call   c0013fce <PhysicalDisk::~PhysicalDisk()>
c0028d17:	83 c4 10             	add    esp,0x10
c0028d1a:	90                   	nop
c0028d1b:	83 c4 0c             	add    esp,0xc
c0028d1e:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028d20 <SATAPI::~SATAPI()>:
c0028d20:	83 ec 0c             	sub    esp,0xc
c0028d23:	83 ec 0c             	sub    esp,0xc
c0028d26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d2a:	e8 cd ff ff ff       	call   c0028cfc <SATAPI::~SATAPI()>
c0028d2f:	83 c4 10             	add    esp,0x10
c0028d32:	83 ec 08             	sub    esp,0x8
c0028d35:	68 80 01 00 00       	push   0x180
c0028d3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d3e:	e8 b4 98 fe ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0028d43:	83 c4 10             	add    esp,0x10
c0028d46:	83 c4 0c             	add    esp,0xc
c0028d49:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028d4a <AVX::~AVX()>:
c0028d4a:	83 ec 0c             	sub    esp,0xc
c0028d4d:	ba 64 c4 02 c0       	mov    edx,0xc002c464
c0028d52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d56:	89 10                	mov    DWORD PTR [eax],edx
c0028d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d5c:	83 ec 0c             	sub    esp,0xc
c0028d5f:	50                   	push   eax
c0028d60:	e8 ed b2 fe ff       	call   c0014052 <FPU::~FPU()>
c0028d65:	83 c4 10             	add    esp,0x10
c0028d68:	90                   	nop
c0028d69:	83 c4 0c             	add    esp,0xc
c0028d6c:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028d6e <AVX::~AVX()>:
c0028d6e:	83 ec 0c             	sub    esp,0xc
c0028d71:	83 ec 0c             	sub    esp,0xc
c0028d74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d78:	e8 cd ff ff ff       	call   c0028d4a <AVX::~AVX()>
c0028d7d:	83 c4 10             	add    esp,0x10
c0028d80:	83 ec 08             	sub    esp,0x8
c0028d83:	68 58 01 00 00       	push   0x158
c0028d88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d8c:	e8 66 98 fe ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0028d91:	83 c4 10             	add    esp,0x10
c0028d94:	83 c4 0c             	add    esp,0xc
c0028d97:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028d98 <MMX::~MMX()>:
c0028d98:	83 ec 0c             	sub    esp,0xc
c0028d9b:	ba a4 c4 02 c0       	mov    edx,0xc002c4a4
c0028da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028da4:	89 10                	mov    DWORD PTR [eax],edx
c0028da6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028daa:	83 ec 0c             	sub    esp,0xc
c0028dad:	50                   	push   eax
c0028dae:	e8 9f b2 fe ff       	call   c0014052 <FPU::~FPU()>
c0028db3:	83 c4 10             	add    esp,0x10
c0028db6:	90                   	nop
c0028db7:	83 c4 0c             	add    esp,0xc
c0028dba:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028dbc <MMX::~MMX()>:
c0028dbc:	83 ec 0c             	sub    esp,0xc
c0028dbf:	83 ec 0c             	sub    esp,0xc
c0028dc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dc6:	e8 cd ff ff ff       	call   c0028d98 <MMX::~MMX()>
c0028dcb:	83 c4 10             	add    esp,0x10
c0028dce:	83 ec 08             	sub    esp,0x8
c0028dd1:	68 58 01 00 00       	push   0x158
c0028dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dda:	e8 18 98 fe ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0028ddf:	83 c4 10             	add    esp,0x10
c0028de2:	83 c4 0c             	add    esp,0xc
c0028de5:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028de6 <SSE::~SSE()>:
c0028de6:	83 ec 0c             	sub    esp,0xc
c0028de9:	ba e4 c4 02 c0       	mov    edx,0xc002c4e4
c0028dee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028df2:	89 10                	mov    DWORD PTR [eax],edx
c0028df4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028df8:	83 ec 0c             	sub    esp,0xc
c0028dfb:	50                   	push   eax
c0028dfc:	e8 51 b2 fe ff       	call   c0014052 <FPU::~FPU()>
c0028e01:	83 c4 10             	add    esp,0x10
c0028e04:	90                   	nop
c0028e05:	83 c4 0c             	add    esp,0xc
c0028e08:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028e0a <SSE::~SSE()>:
c0028e0a:	83 ec 0c             	sub    esp,0xc
c0028e0d:	83 ec 0c             	sub    esp,0xc
c0028e10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e14:	e8 cd ff ff ff       	call   c0028de6 <SSE::~SSE()>
c0028e19:	83 c4 10             	add    esp,0x10
c0028e1c:	83 ec 08             	sub    esp,0x8
c0028e1f:	68 58 01 00 00       	push   0x158
c0028e24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e28:	e8 ca 97 fe ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0028e2d:	83 c4 10             	add    esp,0x10
c0028e30:	83 c4 0c             	add    esp,0xc
c0028e33:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028e34 <x87::~x87()>:
c0028e34:	83 ec 0c             	sub    esp,0xc
c0028e37:	ba 24 c5 02 c0       	mov    edx,0xc002c524
c0028e3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e40:	89 10                	mov    DWORD PTR [eax],edx
c0028e42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e46:	83 ec 0c             	sub    esp,0xc
c0028e49:	50                   	push   eax
c0028e4a:	e8 03 b2 fe ff       	call   c0014052 <FPU::~FPU()>
c0028e4f:	83 c4 10             	add    esp,0x10
c0028e52:	90                   	nop
c0028e53:	83 c4 0c             	add    esp,0xc
c0028e56:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028e58 <x87::~x87()>:
c0028e58:	83 ec 0c             	sub    esp,0xc
c0028e5b:	83 ec 0c             	sub    esp,0xc
c0028e5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e62:	e8 cd ff ff ff       	call   c0028e34 <x87::~x87()>
c0028e67:	83 c4 10             	add    esp,0x10
c0028e6a:	83 ec 08             	sub    esp,0x8
c0028e6d:	68 58 01 00 00       	push   0x158
c0028e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e76:	e8 7c 97 fe ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0028e7b:	83 c4 10             	add    esp,0x10
c0028e7e:	83 c4 0c             	add    esp,0xc
c0028e81:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028e82 <IOAPIC::~IOAPIC()>:
c0028e82:	83 ec 0c             	sub    esp,0xc
c0028e85:	ba 7c c6 02 c0       	mov    edx,0xc002c67c
c0028e8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e8e:	89 10                	mov    DWORD PTR [eax],edx
c0028e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e94:	83 ec 0c             	sub    esp,0xc
c0028e97:	50                   	push   eax
c0028e98:	e8 39 ab fe ff       	call   c00139d6 <Device::~Device()>
c0028e9d:	83 c4 10             	add    esp,0x10
c0028ea0:	90                   	nop
c0028ea1:	83 c4 0c             	add    esp,0xc
c0028ea4:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028ea6 <IOAPIC::~IOAPIC()>:
c0028ea6:	83 ec 0c             	sub    esp,0xc
c0028ea9:	83 ec 0c             	sub    esp,0xc
c0028eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eb0:	e8 cd ff ff ff       	call   c0028e82 <IOAPIC::~IOAPIC()>
c0028eb5:	83 c4 10             	add    esp,0x10
c0028eb8:	83 ec 08             	sub    esp,0x8
c0028ebb:	68 68 01 00 00       	push   0x168
c0028ec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ec4:	e8 2e 97 fe ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0028ec9:	83 c4 10             	add    esp,0x10
c0028ecc:	83 c4 0c             	add    esp,0xc
c0028ecf:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028ed0 <APIC::~APIC()>:
c0028ed0:	83 ec 0c             	sub    esp,0xc
c0028ed3:	ba 34 c6 02 c0       	mov    edx,0xc002c634
c0028ed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028edc:	89 10                	mov    DWORD PTR [eax],edx
c0028ede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ee2:	83 ec 0c             	sub    esp,0xc
c0028ee5:	50                   	push   eax
c0028ee6:	e8 31 b6 fe ff       	call   c001451c <InterruptController::~InterruptController()>
c0028eeb:	83 c4 10             	add    esp,0x10
c0028eee:	90                   	nop
c0028eef:	83 c4 0c             	add    esp,0xc
c0028ef2:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028ef4 <APIC::~APIC()>:
c0028ef4:	83 ec 0c             	sub    esp,0xc
c0028ef7:	83 ec 0c             	sub    esp,0xc
c0028efa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028efe:	e8 cd ff ff ff       	call   c0028ed0 <APIC::~APIC()>
c0028f03:	83 c4 10             	add    esp,0x10
c0028f06:	83 ec 08             	sub    esp,0x8
c0028f09:	68 58 21 00 00       	push   0x2158
c0028f0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f12:	e8 e0 96 fe ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0028f17:	83 c4 10             	add    esp,0x10
c0028f1a:	83 c4 0c             	add    esp,0xc
c0028f1d:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028f1e <PIC::~PIC()>:
c0028f1e:	83 ec 0c             	sub    esp,0xc
c0028f21:	ba cc c6 02 c0       	mov    edx,0xc002c6cc
c0028f26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f2a:	89 10                	mov    DWORD PTR [eax],edx
c0028f2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f30:	83 ec 0c             	sub    esp,0xc
c0028f33:	50                   	push   eax
c0028f34:	e8 e3 b5 fe ff       	call   c001451c <InterruptController::~InterruptController()>
c0028f39:	83 c4 10             	add    esp,0x10
c0028f3c:	90                   	nop
c0028f3d:	83 c4 0c             	add    esp,0xc
c0028f40:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028f42 <PIC::~PIC()>:
c0028f42:	83 ec 0c             	sub    esp,0xc
c0028f45:	83 ec 0c             	sub    esp,0xc
c0028f48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f4c:	e8 cd ff ff ff       	call   c0028f1e <PIC::~PIC()>
c0028f51:	83 c4 10             	add    esp,0x10
c0028f54:	83 ec 08             	sub    esp,0x8
c0028f57:	68 58 21 00 00       	push   0x2158
c0028f5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f60:	e8 92 96 fe ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0028f65:	83 c4 10             	add    esp,0x10
c0028f68:	83 c4 0c             	add    esp,0xc
c0028f6b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0028f6c <APICTimer::~APICTimer()>:
c0028f6c:	83 ec 0c             	sub    esp,0xc
c0028f6f:	ba 20 c7 02 c0       	mov    edx,0xc002c720
c0028f74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f78:	89 10                	mov    DWORD PTR [eax],edx
c0028f7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f7e:	83 ec 0c             	sub    esp,0xc
c0028f81:	50                   	push   eax
c0028f82:	e8 ed d5 fe ff       	call   c0016574 <Timer::~Timer()>
c0028f87:	83 c4 10             	add    esp,0x10
c0028f8a:	90                   	nop
c0028f8b:	83 c4 0c             	add    esp,0xc
c0028f8e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028f90 <APICTimer::~APICTimer()>:
c0028f90:	83 ec 0c             	sub    esp,0xc
c0028f93:	83 ec 0c             	sub    esp,0xc
c0028f96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f9a:	e8 cd ff ff ff       	call   c0028f6c <APICTimer::~APICTimer()>
c0028f9f:	83 c4 10             	add    esp,0x10
c0028fa2:	83 ec 08             	sub    esp,0x8
c0028fa5:	68 60 01 00 00       	push   0x160
c0028faa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fae:	e8 44 96 fe ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0028fb3:	83 c4 10             	add    esp,0x10
c0028fb6:	83 c4 0c             	add    esp,0xc
c0028fb9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028fba <PIT::~PIT()>:
c0028fba:	83 ec 0c             	sub    esp,0xc
c0028fbd:	ba 70 c7 02 c0       	mov    edx,0xc002c770
c0028fc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc6:	89 10                	mov    DWORD PTR [eax],edx
c0028fc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fcc:	83 ec 0c             	sub    esp,0xc
c0028fcf:	50                   	push   eax
c0028fd0:	e8 9f d5 fe ff       	call   c0016574 <Timer::~Timer()>
c0028fd5:	83 c4 10             	add    esp,0x10
c0028fd8:	90                   	nop
c0028fd9:	83 c4 0c             	add    esp,0xc
c0028fdc:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028fde <PIT::~PIT()>:
c0028fde:	83 ec 0c             	sub    esp,0xc
c0028fe1:	83 ec 0c             	sub    esp,0xc
c0028fe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fe8:	e8 cd ff ff ff       	call   c0028fba <PIT::~PIT()>
c0028fed:	83 c4 10             	add    esp,0x10
c0028ff0:	83 ec 08             	sub    esp,0x8
c0028ff3:	68 5c 01 00 00       	push   0x15c
c0028ff8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ffc:	e8 f6 95 fe ff       	call   c00125f7 <operator delete(void*, unsigned long)>
c0029001:	83 c4 10             	add    esp,0x10
c0029004:	83 c4 0c             	add    esp,0xc
c0029007:	c3                   	ret    
