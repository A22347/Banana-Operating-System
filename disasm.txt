
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f3 77 00 00       	call   c0007813 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 10 f4 01 c0       	mov    eax,0xc001f410
c0000025:	3d 10 f4 01 c0       	cmp    eax,0xc001f410
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 10 f4 01 c0       	push   0xc001f410
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 10 f4 01 c0       	mov    eax,0xc001f410
c0000051:	2d 10 f4 01 c0       	sub    eax,0xc001f410
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 10 f4 01 c0       	push   0xc001f410
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d 40 f6 01 c0 00 	cmp    BYTE PTR ds:0xc001f640,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb a8 c8 01 c0       	mov    ebx,0xc001c8a8
c0000097:	81 eb a4 c8 01 c0    	sub    ebx,0xc001c8a4
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be a4 c8 01 c0       	mov    esi,0xc001c8a4
c00000a6:	a1 44 f6 01 c0       	mov    eax,ds:0xc001f644
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 44 f6 01 c0       	mov    ds:0xc001f644,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 44 f6 01 c0       	mov    eax,ds:0xc001f644
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 10 f4 01 c0       	push   0xc001f410
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 40 f6 01 c0 01 	mov    BYTE PTR ds:0xc001f640,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 48 f6 01 c0       	push   0xc001f648
c0000108:	68 10 f4 01 c0       	push   0xc001f410
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 11                	jne    c00002b9 <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 cc 28 01 00       	call   c0012b7c <changeTSS>
c00002b0:	5d                   	pop    ebp
c00002b1:	5f                   	pop    edi
c00002b2:	5e                   	pop    esi
c00002b3:	5a                   	pop    edx
c00002b4:	59                   	pop    ecx
c00002b5:	5b                   	pop    ebx
c00002b6:	58                   	pop    eax
c00002b7:	9d                   	popf   
c00002b8:	c3                   	ret    

c00002b9 <commonThreadSwitch.firstTime>:
c00002b9:	fa                   	cli    
c00002ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002bd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002c2:	60                   	pusha  
c00002c3:	e8 8c 9f 00 00       	call   c000a254 <mapVASFirstTime>
c00002c8:	61                   	popa   
c00002c9:	89 c4                	mov    esp,eax
c00002cb:	56                   	push   esi
c00002cc:	52                   	push   edx
c00002cd:	e8 aa 28 01 00       	call   c0012b7c <changeTSS>
c00002d2:	5a                   	pop    edx
c00002d3:	5e                   	pop    esi
c00002d4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002db:	5d                   	pop    ebp
c00002dc:	5f                   	pop    edi
c00002dd:	5e                   	pop    esi
c00002de:	59                   	pop    ecx
c00002df:	59                   	pop    ecx
c00002e0:	5b                   	pop    ebx
c00002e1:	58                   	pop    eax
c00002e2:	81 c4 04 00 00 00    	add    esp,0x4
c00002e8:	6a 02                	push   0x2
c00002ea:	9d                   	popf   
c00002eb:	52                   	push   edx
c00002ec:	e8 7b 2d 01 00       	call   c001306c <taskStartupFunction>
c00002f1:	5a                   	pop    edx
c00002f2:	50                   	push   eax
c00002f3:	ff d2                	call   edx
c00002f5:	e8 ca 33 01 00       	call   c00136c4 <taskReturned>
c00002fa:	e9 fb ff ff ff       	jmp    c00002fa <commonThreadSwitch.firstTime+0x41>

c00002ff <asmQuickAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmQuickAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 02                	jb     c000030e <asmQuickAcquireLock.spin_with_pause>
c000030c:	fa                   	cli    
c000030d:	c3                   	ret    

c000030e <asmQuickAcquireLock.spin_with_pause>:
c000030e:	f3 90                	pause  
c0000310:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000316:	75 f6                	jne    c000030e <asmQuickAcquireLock.spin_with_pause>
c0000318:	e9 e8 ff ff ff       	jmp    c0000305 <asmQuickAcquireLock.retry>

c000031d <asmQuickReleaseLock>:
c000031d:	55                   	push   ebp
c000031e:	89 e5                	mov    ebp,esp
c0000320:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000327:	5d                   	pop    ebp
c0000328:	c3                   	ret    

c0000329 <asmAcquireLock>:
c0000329:	55                   	push   ebp
c000032a:	89 e5                	mov    ebp,esp
c000032c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032f <asmAcquireLock.retry>:
c000032f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000334:	72 05                	jb     c000033b <asmAcquireLock.spin_with_pause>
c0000336:	9c                   	pushf  
c0000337:	58                   	pop    eax
c0000338:	fa                   	cli    
c0000339:	5d                   	pop    ebp
c000033a:	c3                   	ret    

c000033b <asmAcquireLock.spin_with_pause>:
c000033b:	f3 90                	pause  
c000033d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000343:	75 f6                	jne    c000033b <asmAcquireLock.spin_with_pause>
c0000345:	e9 e5 ff ff ff       	jmp    c000032f <asmAcquireLock.retry>

c000034a <asmReleaseLock>:
c000034a:	55                   	push   ebp
c000034b:	89 e5                	mov    ebp,esp
c000034d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000353:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000359:	52                   	push   edx
c000035a:	9d                   	popf   
c000035b:	5d                   	pop    ebp
c000035c:	c3                   	ret    

c000035d <loadGDT>:
c000035d:	0f 01 15 40 04 02 c0 	lgdtd  ds:0xc0020440
c0000364:	66 b8 10 00          	mov    ax,0x10
c0000368:	66 8e d8             	mov    ds,ax
c000036b:	66 8e c0             	mov    es,ax
c000036e:	66 8e e0             	mov    fs,ax
c0000371:	66 8e e8             	mov    gs,ax
c0000374:	66 8e d0             	mov    ss,ax
c0000377:	e9 00 00 00 00       	jmp    c000037c <flush2>

c000037c <flush2>:
c000037c:	c3                   	ret    

c000037d <memcpy>:
c000037d:	e9 34 fd 00 00       	jmp    c00100b6 <__not_memcpy>
c0000382:	66 90                	xchg   ax,ax
c0000384:	66 90                	xchg   ax,ax
c0000386:	66 90                	xchg   ax,ax
c0000388:	66 90                	xchg   ax,ax
c000038a:	66 90                	xchg   ax,ax
c000038c:	66 90                	xchg   ax,ax
c000038e:	66 90                	xchg   ax,ax

c0000390 <memcmp>:
c0000390:	56                   	push   esi
c0000391:	53                   	push   ebx
c0000392:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000039a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000039e:	85 f6                	test   esi,esi
c00003a0:	74 1c                	je     c00003be <memcmp+0x2e>
c00003a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a6:	38 cb                	cmp    bl,cl
c00003a8:	75 26                	jne    c00003d0 <memcmp+0x40>
c00003aa:	01 c6                	add    esi,eax
c00003ac:	eb 0a                	jmp    c00003b8 <memcmp+0x28>
c00003ae:	66 90                	xchg   ax,ax
c00003b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b4:	38 d9                	cmp    cl,bl
c00003b6:	75 18                	jne    c00003d0 <memcmp+0x40>
c00003b8:	40                   	inc    eax
c00003b9:	42                   	inc    edx
c00003ba:	39 f0                	cmp    eax,esi
c00003bc:	75 f2                	jne    c00003b0 <memcmp+0x20>
c00003be:	31 c0                	xor    eax,eax
c00003c0:	5b                   	pop    ebx
c00003c1:	5e                   	pop    esi
c00003c2:	c3                   	ret    
c00003c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003d0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003d6:	31 c0                	xor    eax,eax
c00003d8:	88 c8                	mov    al,cl
c00003da:	29 d8                	sub    eax,ebx
c00003dc:	5b                   	pop    ebx
c00003dd:	5e                   	pop    esi
c00003de:	c3                   	ret    
c00003df:	90                   	nop

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 98 00 00 00    	jae    c0000490 <memmove+0xb0>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	0f 84 7c 00 00 00    	je     c000047c <memmove+0x9c>
c0000400:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000403:	8d 75 04             	lea    esi,[ebp+0x4]
c0000406:	39 cd                	cmp    ebp,ecx
c0000408:	0f 93 c1             	setae  cl
c000040b:	39 f3                	cmp    ebx,esi
c000040d:	0f 93 c0             	setae  al
c0000410:	89 c6                	mov    esi,eax
c0000412:	09 ce                	or     esi,ecx
c0000414:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000417:	89 f0                	mov    eax,esi
c0000419:	83 f9 0c             	cmp    ecx,0xc
c000041c:	0f 97 c1             	seta   cl
c000041f:	84 c8                	test   al,cl
c0000421:	0f 84 89 00 00 00    	je     c00004b0 <memmove+0xd0>
c0000427:	89 e9                	mov    ecx,ebp
c0000429:	09 d9                	or     ecx,ebx
c000042b:	83 e1 03             	and    ecx,0x3
c000042e:	0f 85 7c 00 00 00    	jne    c00004b0 <memmove+0xd0>
c0000434:	89 d7                	mov    edi,edx
c0000436:	89 d9                	mov    ecx,ebx
c0000438:	83 e7 fc             	and    edi,0xfffffffc
c000043b:	89 ee                	mov    esi,ebp
c000043d:	01 df                	add    edi,ebx
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x60>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0x9c>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0x9c>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0x9c>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0x9c>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0x9c>
c0000496:	4b                   	dec    ebx
c0000497:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	4a                   	dec    edx
c00004a7:	75 f7                	jne    c00004a0 <memmove+0xc0>
c00004a9:	5b                   	pop    ebx
c00004aa:	89 e8                	mov    eax,ebp
c00004ac:	5e                   	pop    esi
c00004ad:	5f                   	pop    edi
c00004ae:	5d                   	pop    ebp
c00004af:	c3                   	ret    
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	41                   	inc    ecx
c00004c3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c6:	43                   	inc    ebx
c00004c7:	39 d1                	cmp    ecx,edx
c00004c9:	75 f5                	jne    c00004c0 <memmove+0xe0>
c00004cb:	eb af                	jmp    c000047c <memmove+0x9c>
c00004cd:	8d 76 00             	lea    esi,[esi+0x0]

c00004d0 <memset>:
c00004d0:	57                   	push   edi
c00004d1:	53                   	push   ebx
c00004d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004da:	85 d2                	test   edx,edx
c00004dc:	74 1f                	je     c00004fd <memset+0x2d>
c00004de:	31 c0                	xor    eax,eax
c00004e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004e4:	88 c4                	mov    ah,al
c00004e6:	89 c1                	mov    ecx,eax
c00004e8:	c1 e1 10             	shl    ecx,0x10
c00004eb:	09 c8                	or     eax,ecx
c00004ed:	83 fa 04             	cmp    edx,0x4
c00004f0:	73 1e                	jae    c0000510 <memset+0x40>
c00004f2:	85 d2                	test   edx,edx
c00004f4:	74 07                	je     c00004fd <memset+0x2d>
c00004f6:	88 03                	mov    BYTE PTR [ebx],al
c00004f8:	f6 c2 02             	test   dl,0x2
c00004fb:	75 30                	jne    c000052d <memset+0x5d>
c00004fd:	89 d8                	mov    eax,ebx
c00004ff:	5b                   	pop    ebx
c0000500:	5f                   	pop    edi
c0000501:	c3                   	ret    
c0000502:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000510:	89 03                	mov    DWORD PTR [ebx],eax
c0000512:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000515:	89 d9                	mov    ecx,ebx
c0000517:	83 e7 fc             	and    edi,0xfffffffc
c000051a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000051e:	29 f9                	sub    ecx,edi
c0000520:	01 d1                	add    ecx,edx
c0000522:	c1 e9 02             	shr    ecx,0x2
c0000525:	fc                   	cld    
c0000526:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000528:	89 d8                	mov    eax,ebx
c000052a:	5b                   	pop    ebx
c000052b:	5f                   	pop    edi
c000052c:	c3                   	ret    
c000052d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000532:	eb c9                	jmp    c00004fd <memset+0x2d>
c0000534:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000053a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000540 <strlen>:
c0000540:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000544:	31 c0                	xor    eax,eax
c0000546:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000549:	74 15                	je     c0000560 <strlen+0x20>
c000054b:	90                   	nop
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	40                   	inc    eax
c0000551:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000555:	75 f9                	jne    c0000550 <strlen+0x10>
c0000557:	c3                   	ret    
c0000558:	90                   	nop
c0000559:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000560:	c3                   	ret    
c0000561:	eb 0d                	jmp    c0000570 <strpbrk>
c0000563:	90                   	nop
c0000564:	90                   	nop
c0000565:	90                   	nop
c0000566:	90                   	nop
c0000567:	90                   	nop
c0000568:	90                   	nop
c0000569:	90                   	nop
c000056a:	90                   	nop
c000056b:	90                   	nop
c000056c:	90                   	nop
c000056d:	90                   	nop
c000056e:	90                   	nop
c000056f:	90                   	nop

c0000570 <strpbrk>:
c0000570:	57                   	push   edi
c0000571:	56                   	push   esi
c0000572:	53                   	push   ebx
c0000573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000577:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000057b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000057d:	84 db                	test   bl,bl
c000057f:	74 21                	je     c00005a2 <strpbrk+0x32>
c0000581:	8a 07                	mov    al,BYTE PTR [edi]
c0000583:	84 c0                	test   al,al
c0000585:	74 14                	je     c000059b <strpbrk+0x2b>
c0000587:	38 d8                	cmp    al,bl
c0000589:	74 19                	je     c00005a4 <strpbrk+0x34>
c000058b:	89 fa                	mov    edx,edi
c000058d:	eb 05                	jmp    c0000594 <strpbrk+0x24>
c000058f:	90                   	nop
c0000590:	38 d9                	cmp    cl,bl
c0000592:	74 10                	je     c00005a4 <strpbrk+0x34>
c0000594:	42                   	inc    edx
c0000595:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000597:	84 c9                	test   cl,cl
c0000599:	75 f5                	jne    c0000590 <strpbrk+0x20>
c000059b:	46                   	inc    esi
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	84 db                	test   bl,bl
c00005a0:	75 e1                	jne    c0000583 <strpbrk+0x13>
c00005a2:	31 f6                	xor    esi,esi
c00005a4:	89 f0                	mov    eax,esi
c00005a6:	5b                   	pop    ebx
c00005a7:	5e                   	pop    esi
c00005a8:	5f                   	pop    edi
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strtok>:
c00005b0:	56                   	push   esi
c00005b1:	53                   	push   ebx
c00005b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ba:	85 db                	test   ebx,ebx
c00005bc:	75 07                	jne    c00005c5 <strtok+0x15>
c00005be:	eb 30                	jmp    c00005f0 <strtok+0x40>
c00005c0:	43                   	inc    ebx
c00005c1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005c5:	56                   	push   esi
c00005c6:	53                   	push   ebx
c00005c7:	e8 a4 ff ff ff       	call   c0000570 <strpbrk>
c00005cc:	5a                   	pop    edx
c00005cd:	a3 60 f6 01 c0       	mov    ds:0xc001f660,eax
c00005d2:	59                   	pop    ecx
c00005d3:	39 d8                	cmp    eax,ebx
c00005d5:	74 e9                	je     c00005c0 <strtok+0x10>
c00005d7:	85 c0                	test   eax,eax
c00005d9:	74 1f                	je     c00005fa <strtok+0x4a>
c00005db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005de:	8d 50 01             	lea    edx,[eax+0x1]
c00005e1:	89 d8                	mov    eax,ebx
c00005e3:	89 15 60 f6 01 c0    	mov    DWORD PTR ds:0xc001f660,edx
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	c3                   	ret    
c00005ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005f0:	8b 1d 60 f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f660
c00005f6:	85 db                	test   ebx,ebx
c00005f8:	75 cb                	jne    c00005c5 <strtok+0x15>
c00005fa:	31 c0                	xor    eax,eax
c00005fc:	5b                   	pop    ebx
c00005fd:	5e                   	pop    esi
c00005fe:	c3                   	ret    
c00005ff:	90                   	nop

c0000600 <strcpy>:
c0000600:	53                   	push   ebx
c0000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000609:	89 c3                	mov    ebx,eax
c000060b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000060d:	84 d2                	test   dl,dl
c000060f:	74 19                	je     c000062a <strcpy+0x2a>
c0000611:	eb 0d                	jmp    c0000620 <strcpy+0x20>
c0000613:	90                   	nop
c0000614:	90                   	nop
c0000615:	90                   	nop
c0000616:	90                   	nop
c0000617:	90                   	nop
c0000618:	90                   	nop
c0000619:	90                   	nop
c000061a:	90                   	nop
c000061b:	90                   	nop
c000061c:	90                   	nop
c000061d:	90                   	nop
c000061e:	90                   	nop
c000061f:	90                   	nop
c0000620:	88 13                	mov    BYTE PTR [ebx],dl
c0000622:	41                   	inc    ecx
c0000623:	43                   	inc    ebx
c0000624:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000626:	84 d2                	test   dl,dl
c0000628:	75 f6                	jne    c0000620 <strcpy+0x20>
c000062a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000062d:	5b                   	pop    ebx
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strncpy>:
c0000630:	57                   	push   edi
c0000631:	56                   	push   esi
c0000632:	53                   	push   ebx
c0000633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	85 ff                	test   edi,edi
c0000641:	74 3e                	je     c0000681 <strncpy+0x51>
c0000643:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000645:	8d 47 ff             	lea    eax,[edi-0x1]
c0000648:	8d 4a 01             	lea    ecx,[edx+0x1]
c000064b:	88 1a                	mov    BYTE PTR [edx],bl
c000064d:	84 db                	test   bl,bl
c000064f:	74 3f                	je     c0000690 <strncpy+0x60>
c0000651:	85 c0                	test   eax,eax
c0000653:	74 2c                	je     c0000681 <strncpy+0x51>
c0000655:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000658:	8d 47 fe             	lea    eax,[edi-0x2]
c000065b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000065e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000661:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000664:	84 db                	test   bl,bl
c0000666:	75 15                	jne    c000067d <strncpy+0x4d>
c0000668:	eb 26                	jmp    c0000690 <strncpy+0x60>
c000066a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000670:	47                   	inc    edi
c0000671:	41                   	inc    ecx
c0000672:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000675:	48                   	dec    eax
c0000676:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000679:	84 db                	test   bl,bl
c000067b:	74 13                	je     c0000690 <strncpy+0x60>
c000067d:	85 c0                	test   eax,eax
c000067f:	75 ef                	jne    c0000670 <strncpy+0x40>
c0000681:	5b                   	pop    ebx
c0000682:	89 d0                	mov    eax,edx
c0000684:	5e                   	pop    esi
c0000685:	5f                   	pop    edi
c0000686:	c3                   	ret    
c0000687:	89 f6                	mov    esi,esi
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000690:	85 c0                	test   eax,eax
c0000692:	74 ed                	je     c0000681 <strncpy+0x51>
c0000694:	83 f8 04             	cmp    eax,0x4
c0000697:	73 17                	jae    c00006b0 <strncpy+0x80>
c0000699:	85 c0                	test   eax,eax
c000069b:	74 e4                	je     c0000681 <strncpy+0x51>
c000069d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006a0:	a8 02                	test   al,0x2
c00006a2:	74 dd                	je     c0000681 <strncpy+0x51>
c00006a4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006ab:	eb d4                	jmp    c0000681 <strncpy+0x51>
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]
c00006b0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006b6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006b9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006c1:	83 e7 fc             	and    edi,0xfffffffc
c00006c4:	29 f9                	sub    ecx,edi
c00006c6:	01 c1                	add    ecx,eax
c00006c8:	c1 e9 02             	shr    ecx,0x2
c00006cb:	fc                   	cld    
c00006cc:	31 c0                	xor    eax,eax
c00006ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006d0:	89 d0                	mov    eax,edx
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    
c00006d6:	8d 76 00             	lea    esi,[esi+0x0]
c00006d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	31 c0                	xor    eax,eax
c0000722:	5b                   	pop    ebx
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007b9:	88 d0                	mov    al,dl
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000857:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000085b:	57                   	push   edi
c000085c:	e8 df fc ff ff       	call   c0000540 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	74 3a                	je     c00008a0 <strstr+0x50>
c0000866:	89 c6                	mov    esi,eax
c0000868:	eb 16                	jmp    c0000880 <strstr+0x30>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 18 fb ff ff       	call   c0000390 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 ba fc ff ff       	call   c0000540 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 c0 c8 01 c0 02 	test   BYTE PTR [edx-0x3ffe3740],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 c0 c8 01 c0 01 	test   BYTE PTR [edx-0x3ffe3740],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 08             	sub    esp,0x8
c00008f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ff:	90                   	nop
c0000900:	31 d2                	xor    edx,edx
c0000902:	8a 01                	mov    al,BYTE PTR [ecx]
c0000904:	88 c2                	mov    dl,al
c0000906:	f6 82 c0 c8 01 c0 08 	test   BYTE PTR [edx-0x3ffe3740],0x8
c000090d:	75 04                	jne    c0000913 <simple_strtoul+0x23>
c000090f:	3c 09                	cmp    al,0x9
c0000911:	75 0d                	jne    c0000920 <simple_strtoul+0x30>
c0000913:	41                   	inc    ecx
c0000914:	eb ea                	jmp    c0000900 <simple_strtoul+0x10>
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	3c 2d                	cmp    al,0x2d
c0000922:	0f 84 48 01 00 00    	je     c0000a70 <simple_strtoul+0x180>
c0000928:	3c 2b                	cmp    al,0x2b
c000092a:	0f 84 e0 00 00 00    	je     c0000a10 <simple_strtoul+0x120>
c0000930:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000938:	85 f6                	test   esi,esi
c000093a:	0f 85 e1 00 00 00    	jne    c0000a21 <simple_strtoul+0x131>
c0000940:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000943:	80 fa 30             	cmp    dl,0x30
c0000946:	0f 84 75 01 00 00    	je     c0000ac1 <simple_strtoul+0x1d1>
c000094c:	be 0a 00 00 00       	mov    esi,0xa
c0000951:	84 d2                	test   dl,dl
c0000953:	0f 84 9f 01 00 00    	je     c0000af8 <simple_strtoul+0x208>
c0000959:	31 ed                	xor    ebp,ebp
c000095b:	31 ff                	xor    edi,edi
c000095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000964:	eb 35                	jmp    c000099b <simple_strtoul+0xab>
c0000966:	8d 76 00             	lea    esi,[esi+0x0]
c0000969:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000970:	83 eb 30             	sub    ebx,0x30
c0000973:	39 f3                	cmp    ebx,esi
c0000975:	73 59                	jae    c00009d0 <simple_strtoul+0xe0>
c0000977:	31 d2                	xor    edx,edx
c0000979:	89 d8                	mov    eax,ebx
c000097b:	f7 d0                	not    eax
c000097d:	f7 f6                	div    esi
c000097f:	39 f8                	cmp    eax,edi
c0000981:	0f 82 c9 00 00 00    	jb     c0000a50 <simple_strtoul+0x160>
c0000987:	0f af fe             	imul   edi,esi
c000098a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000991:	01 df                	add    edi,ebx
c0000993:	41                   	inc    ecx
c0000994:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 35                	je     c00009d0 <simple_strtoul+0xe0>
c000099b:	31 db                	xor    ebx,ebx
c000099d:	88 d3                	mov    bl,dl
c000099f:	f6 83 c0 c8 01 c0 04 	test   BYTE PTR [ebx-0x3ffe3740],0x4
c00009a6:	75 c8                	jne    c0000970 <simple_strtoul+0x80>
c00009a8:	52                   	push   edx
c00009a9:	e8 02 ff ff ff       	call   c00008b0 <toupper>
c00009ae:	31 d2                	xor    edx,edx
c00009b0:	5b                   	pop    ebx
c00009b1:	88 c2                	mov    dl,al
c00009b3:	f6 82 c0 c8 01 c0 01 	test   BYTE PTR [edx-0x3ffe3740],0x1
c00009ba:	74 14                	je     c00009d0 <simple_strtoul+0xe0>
c00009bc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009bf:	39 f3                	cmp    ebx,esi
c00009c1:	72 b4                	jb     c0000977 <simple_strtoul+0x87>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d4:	85 c0                	test   eax,eax
c00009d6:	74 18                	je     c00009f0 <simple_strtoul+0x100>
c00009d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009db:	09 f8                	or     eax,edi
c00009dd:	0f 85 7d 00 00 00    	jne    c0000a60 <simple_strtoul+0x170>
c00009e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009eb:	31 ff                	xor    edi,edi
c00009ed:	89 30                	mov    DWORD PTR [eax],esi
c00009ef:	90                   	nop
c00009f0:	4d                   	dec    ebp
c00009f1:	75 05                	jne    c00009f8 <simple_strtoul+0x108>
c00009f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009f8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009fd:	75 02                	jne    c0000a01 <simple_strtoul+0x111>
c00009ff:	f7 df                	neg    edi
c0000a01:	83 c4 08             	add    esp,0x8
c0000a04:	89 f8                	mov    eax,edi
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	5d                   	pop    ebp
c0000a0a:	c3                   	ret    
c0000a0b:	90                   	nop
c0000a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a10:	41                   	inc    ecx
c0000a11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a19:	85 f6                	test   esi,esi
c0000a1b:	0f 84 1f ff ff ff    	je     c0000940 <simple_strtoul+0x50>
c0000a21:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a24:	83 f8 22             	cmp    eax,0x22
c0000a27:	77 7b                	ja     c0000aa4 <simple_strtoul+0x1b4>
c0000a29:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2c:	83 fe 08             	cmp    esi,0x8
c0000a2f:	0f 84 b3 00 00 00    	je     c0000ae8 <simple_strtoul+0x1f8>
c0000a35:	83 fe 10             	cmp    esi,0x10
c0000a38:	0f 85 13 ff ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000a3e:	80 fa 30             	cmp    dl,0x30
c0000a41:	74 3b                	je     c0000a7e <simple_strtoul+0x18e>
c0000a43:	be 10 00 00 00       	mov    esi,0x10
c0000a48:	e9 04 ff ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a50:	bd 01 00 00 00       	mov    ebp,0x1
c0000a55:	31 ff                	xor    edi,edi
c0000a57:	e9 37 ff ff ff       	jmp    c0000993 <simple_strtoul+0xa3>
c0000a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	89 08                	mov    DWORD PTR [eax],ecx
c0000a66:	eb 88                	jmp    c00009f0 <simple_strtoul+0x100>
c0000a68:	90                   	nop
c0000a69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a70:	41                   	inc    ecx
c0000a71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a79:	e9 ba fe ff ff       	jmp    c0000938 <simple_strtoul+0x48>
c0000a7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a82:	88 04 24             	mov    BYTE PTR [esp],al
c0000a85:	50                   	push   eax
c0000a86:	e8 45 fe ff ff       	call   c00008d0 <tolower>
c0000a8b:	5e                   	pop    esi
c0000a8c:	83 f8 78             	cmp    eax,0x78
c0000a8f:	0f 84 88 00 00 00    	je     c0000b1d <simple_strtoul+0x22d>
c0000a95:	41                   	inc    ecx
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a9f:	e9 ad fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aa8:	85 ff                	test   edi,edi
c0000aaa:	74 5e                	je     c0000b0a <simple_strtoul+0x21a>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	85 c9                	test   ecx,ecx
c0000ab2:	75 50                	jne    c0000b04 <simple_strtoul+0x214>
c0000ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aba:	31 ff                	xor    edi,edi
c0000abc:	e9 37 ff ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000ac1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac8:	50                   	push   eax
c0000ac9:	e8 02 fe ff ff       	call   c00008d0 <tolower>
c0000ace:	5d                   	pop    ebp
c0000acf:	83 f8 78             	cmp    eax,0x78
c0000ad2:	74 3d                	je     c0000b11 <simple_strtoul+0x221>
c0000ad4:	41                   	inc    ecx
c0000ad5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ad9:	80 fa 30             	cmp    dl,0x30
c0000adc:	74 13                	je     c0000af1 <simple_strtoul+0x201>
c0000ade:	be 08 00 00 00       	mov    esi,0x8
c0000ae3:	e9 69 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000ae8:	80 fa 30             	cmp    dl,0x30
c0000aeb:	0f 85 60 fe ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000af1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000af5:	41                   	inc    ecx
c0000af6:	eb e6                	jmp    c0000ade <simple_strtoul+0x1ee>
c0000af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000afc:	85 d2                	test   edx,edx
c0000afe:	74 0a                	je     c0000b0a <simple_strtoul+0x21a>
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b08:	89 30                	mov    DWORD PTR [eax],esi
c0000b0a:	31 ff                	xor    edi,edi
c0000b0c:	e9 e7 fe ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000b11:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b15:	83 c1 02             	add    ecx,0x2
c0000b18:	e9 21 ff ff ff       	jmp    c0000a3e <simple_strtoul+0x14e>
c0000b1d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b21:	be 10 00 00 00       	mov    esi,0x10
c0000b26:	83 c1 02             	add    ecx,0x2
c0000b29:	e9 23 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>

c0000b2e <largebin_index>:
c0000b2e:	89 c2                	mov    edx,eax
c0000b30:	c1 ea 08             	shr    edx,0x8
c0000b33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b39:	77 10                	ja     c0000b4b <largebin_index+0x1d>
c0000b3b:	0f bd d2             	bsr    edx,edx
c0000b3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b41:	d3 e8                	shr    eax,cl
c0000b43:	83 e0 03             	and    eax,0x3
c0000b46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b4a:	c3                   	ret    
c0000b4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b50:	c3                   	ret    

c0000b51 <malloc_init_state>:
c0000b51:	53                   	push   ebx
c0000b52:	8d 50 34             	lea    edx,[eax+0x34]
c0000b55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b5b:	89 d1                	mov    ecx,edx
c0000b5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b63:	83 c2 08             	add    edx,0x8
c0000b66:	39 da                	cmp    edx,ebx
c0000b68:	75 f3                	jne    c0000b5d <malloc_init_state+0xc>
c0000b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b76:	83 e2 03             	and    edx,0x3
c0000b79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b83:	83 ca 48             	or     edx,0x48
c0000b86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ba1:	89 10                	mov    DWORD PTR [eax],edx
c0000ba3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ba6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb0:	5b                   	pop    ebx
c0000bb1:	c3                   	ret    

c0000bb2 <malloc_consolidate>:
c0000bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bb4:	85 d2                	test   edx,edx
c0000bb6:	0f 84 d8 00 00 00    	je     c0000c94 <malloc_consolidate+0xe2>
c0000bbc:	55                   	push   ebp
c0000bbd:	83 e2 fd             	and    edx,0xfffffffd
c0000bc0:	57                   	push   edi
c0000bc1:	89 c5                	mov    ebp,eax
c0000bc3:	56                   	push   esi
c0000bc4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bc7:	53                   	push   ebx
c0000bc8:	83 ec 10             	sub    esp,0x10
c0000bcb:	89 10                	mov    DWORD PTR [eax],edx
c0000bcd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bd1:	c1 ea 03             	shr    edx,0x3
c0000bd4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bd8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bdc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bdf:	85 d2                	test   edx,edx
c0000be1:	0f 84 98 00 00 00    	je     c0000c7f <malloc_consolidate+0xcd>
c0000be7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bf1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000bf8:	89 f9                	mov    ecx,edi
c0000bfa:	83 e1 fe             	and    ecx,0xfffffffe
c0000bfd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c03:	83 e3 fc             	and    ebx,0xfffffffc
c0000c06:	83 e7 01             	and    edi,0x1
c0000c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c0c:	75 14                	jne    c0000c22 <malloc_consolidate+0x70>
c0000c0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c10:	29 fa                	sub    edx,edi
c0000c12:	01 f9                	add    ecx,edi
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	89 fb                	mov    ebx,edi
c0000c19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c25:	74 40                	je     c0000c67 <malloc_consolidate+0xb5>
c0000c27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c34:	83 e7 01             	and    edi,0x1
c0000c37:	75 0e                	jne    c0000c47 <malloc_consolidate+0x95>
c0000c39:	01 d9                	add    ecx,ebx
c0000c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c4a:	89 ce                	mov    esi,ecx
c0000c4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c4f:	83 ce 01             	or     esi,0x1
c0000c52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c65:	eb 0c                	jmp    c0000c73 <malloc_consolidate+0xc1>
c0000c67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c77:	85 d2                	test   edx,edx
c0000c79:	0f 85 6f ff ff ff    	jne    c0000bee <malloc_consolidate+0x3c>
c0000c7f:	83 c5 04             	add    ebp,0x4
c0000c82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c86:	0f 85 50 ff ff ff    	jne    c0000bdc <malloc_consolidate+0x2a>
c0000c8c:	83 c4 10             	add    esp,0x10
c0000c8f:	5b                   	pop    ebx
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	5d                   	pop    ebp
c0000c93:	c3                   	ret    
c0000c94:	e9 b8 fe ff ff       	jmp    c0000b51 <malloc_init_state>

c0000c99 <dlfree>:
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca0:	85 db                	test   ebx,ebx
c0000ca2:	0f 84 e2 00 00 00    	je     c0000d8a <dlfree+0xf1>
c0000ca8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cab:	8b 0d 80 f6 01 c0    	mov    ecx,DWORD PTR ds:0xc001f680
c0000cb1:	89 f0                	mov    eax,esi
c0000cb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cb6:	83 e0 fc             	and    eax,0xfffffffc
c0000cb9:	39 c1                	cmp    ecx,eax
c0000cbb:	72 24                	jb     c0000ce1 <dlfree+0x48>
c0000cbd:	83 c9 03             	or     ecx,0x3
c0000cc0:	c1 e8 03             	shr    eax,0x3
c0000cc3:	89 0d 80 f6 01 c0    	mov    DWORD PTR ds:0xc001f680,ecx
c0000cc9:	83 e8 02             	sub    eax,0x2
c0000ccc:	8b 0c 85 84 f6 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe097c]
c0000cd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cd5:	89 14 85 84 f6 01 c0 	mov    DWORD PTR [eax*4-0x3ffe097c],edx
c0000cdc:	e9 a9 00 00 00       	jmp    c0000d8a <dlfree+0xf1>
c0000ce1:	83 e6 02             	and    esi,0x2
c0000ce4:	0f 85 a0 00 00 00    	jne    c0000d8a <dlfree+0xf1>
c0000cea:	83 c9 01             	or     ecx,0x1
c0000ced:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf0:	89 0d 80 f6 01 c0    	mov    DWORD PTR ds:0xc001f680,ecx
c0000cf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000cf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d00:	75 13                	jne    c0000d15 <dlfree+0x7c>
c0000d02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d05:	29 da                	sub    edx,ebx
c0000d07:	01 d8                	add    eax,ebx
c0000d09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d15:	39 35 ac f6 01 c0    	cmp    DWORD PTR ds:0xc001f6ac,esi
c0000d1b:	74 40                	je     c0000d5d <dlfree+0xc4>
c0000d1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d24:	80 e3 01             	and    bl,0x1
c0000d27:	75 0e                	jne    c0000d37 <dlfree+0x9e>
c0000d29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d2f:	01 c8                	add    eax,ecx
c0000d31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d37:	8b 0d bc f6 01 c0    	mov    ecx,DWORD PTR ds:0xc001f6bc
c0000d3d:	c7 42 0c b4 f6 01 c0 	mov    DWORD PTR [edx+0xc],0xc001f6b4
c0000d44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d47:	89 15 bc f6 01 c0    	mov    DWORD PTR ds:0xc001f6bc,edx
c0000d4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d50:	89 c1                	mov    ecx,eax
c0000d52:	83 c9 01             	or     ecx,0x1
c0000d55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d5b:	eb 10                	jmp    c0000d6d <dlfree+0xd4>
c0000d5d:	01 c8                	add    eax,ecx
c0000d5f:	89 c1                	mov    ecx,eax
c0000d61:	83 c9 01             	or     ecx,0x1
c0000d64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d67:	89 15 ac f6 01 c0    	mov    DWORD PTR ds:0xc001f6ac,edx
c0000d6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d72:	76 16                	jbe    c0000d8a <dlfree+0xf1>
c0000d74:	f6 05 80 f6 01 c0 02 	test   BYTE PTR ds:0xc001f680,0x2
c0000d7b:	74 0d                	je     c0000d8a <dlfree+0xf1>
c0000d7d:	5b                   	pop    ebx
c0000d7e:	b8 80 f6 01 c0       	mov    eax,0xc001f680
c0000d83:	5e                   	pop    esi
c0000d84:	5f                   	pop    edi
c0000d85:	e9 28 fe ff ff       	jmp    c0000bb2 <malloc_consolidate>
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	c3                   	ret    

c0000d8e <sYSMALLOc>:
c0000d8e:	55                   	push   ebp
c0000d8f:	57                   	push   edi
c0000d90:	56                   	push   esi
c0000d91:	53                   	push   ebx
c0000d92:	89 d3                	mov    ebx,edx
c0000d94:	83 ec 2c             	sub    esp,0x2c
c0000d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000da1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000da4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dab:	74 1f                	je     c0000dcc <sYSMALLOc+0x3e>
c0000dad:	89 d8                	mov    eax,ebx
c0000daf:	e8 fe fd ff ff       	call   c0000bb2 <malloc_consolidate>
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dbb:	83 e8 07             	sub    eax,0x7
c0000dbe:	50                   	push   eax
c0000dbf:	e8 30 02 00 00       	call   c0000ff4 <dlmalloc>
c0000dc4:	83 c4 10             	add    esp,0x10
c0000dc7:	e9 20 02 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000dcc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dcf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dd8:	83 e0 fc             	and    eax,0xfffffffc
c0000ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000de3:	83 c0 10             	add    eax,0x10
c0000de6:	01 c1                	add    ecx,eax
c0000de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df3:	74 04                	je     c0000df9 <sYSMALLOc+0x6b>
c0000df5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000df9:	f7 da                	neg    edx
c0000dfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000dff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e03:	21 d1                	and    ecx,edx
c0000e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e09:	7f 07                	jg     c0000e12 <sYSMALLOc+0x84>
c0000e0b:	31 c0                	xor    eax,eax
c0000e0d:	e9 da 01 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000e12:	83 ec 0c             	sub    esp,0xc
c0000e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e19:	e8 72 68 00 00       	call   c0007690 <sbrk>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	89 c6                	mov    esi,eax
c0000e23:	83 f8 ff             	cmp    eax,0xffffffff
c0000e26:	74 e3                	je     c0000e0b <sYSMALLOc+0x7d>
c0000e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e39:	39 f1                	cmp    ecx,esi
c0000e3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e41:	75 13                	jne    c0000e56 <sYSMALLOc+0xc8>
c0000e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e51:	e9 3e 01 00 00       	jmp    c0000f94 <sYSMALLOc+0x206>
c0000e56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e5c:	88 d0                	mov    al,dl
c0000e5e:	83 e0 01             	and    eax,0x1
c0000e61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e6a:	0f 95 c0             	setne  al
c0000e6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e71:	39 f1                	cmp    ecx,esi
c0000e73:	76 12                	jbe    c0000e87 <sYSMALLOc+0xf9>
c0000e75:	84 c0                	test   al,al
c0000e77:	74 0e                	je     c0000e87 <sYSMALLOc+0xf9>
c0000e79:	83 e2 fe             	and    edx,0xfffffffe
c0000e7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e82:	e9 83 00 00 00       	jmp    c0000f0a <sYSMALLOc+0x17c>
c0000e87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e8c:	74 7c                	je     c0000f0a <sYSMALLOc+0x17c>
c0000e8e:	84 c0                	test   al,al
c0000e90:	74 0c                	je     c0000e9e <sYSMALLOc+0x110>
c0000e92:	89 f0                	mov    eax,esi
c0000e94:	29 c8                	sub    eax,ecx
c0000e96:	01 e8                	add    eax,ebp
c0000e98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e9e:	89 f2                	mov    edx,esi
c0000ea0:	83 e2 07             	and    edx,0x7
c0000ea3:	74 0c                	je     c0000eb1 <sYSMALLOc+0x123>
c0000ea5:	b8 08 00 00 00       	mov    eax,0x8
c0000eaa:	29 d0                	sub    eax,edx
c0000eac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eaf:	eb 04                	jmp    c0000eb5 <sYSMALLOc+0x127>
c0000eb1:	89 f5                	mov    ebp,esi
c0000eb3:	31 c0                	xor    eax,eax
c0000eb5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ebd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ec1:	01 c1                	add    ecx,eax
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	01 f1                	add    ecx,esi
c0000ec8:	01 ca                	add    edx,ecx
c0000eca:	29 c8                	sub    eax,ecx
c0000ecc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	52                   	push   edx
c0000ed3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ed7:	e8 b4 67 00 00       	call   c0007690 <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee6:	75 0f                	jne    c0000ef7 <sYSMALLOc+0x169>
c0000ee8:	83 ec 0c             	sub    esp,0xc
c0000eeb:	6a 00                	push   0x0
c0000eed:	e8 9e 67 00 00       	call   c0007690 <sbrk>
c0000ef2:	83 c4 10             	add    esp,0x10
c0000ef5:	eb 30                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000ef7:	39 c6                	cmp    esi,eax
c0000ef9:	76 33                	jbe    c0000f2e <sYSMALLOc+0x1a0>
c0000efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f06:	01 f0                	add    eax,esi
c0000f08:	eb 1d                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000f0a:	83 ec 0c             	sub    esp,0xc
c0000f0d:	89 f5                	mov    ebp,esi
c0000f0f:	6a 00                	push   0x0
c0000f11:	e8 7a 67 00 00       	call   c0007690 <sbrk>
c0000f16:	89 c2                	mov    edx,eax
c0000f18:	29 f2                	sub    edx,esi
c0000f1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f1e:	83 c4 10             	add    esp,0x10
c0000f21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f27:	31 d2                	xor    edx,edx
c0000f29:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2c:	74 66                	je     c0000f94 <sYSMALLOc+0x206>
c0000f2e:	29 e8                	sub    eax,ebp
c0000f30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f33:	01 d0                	add    eax,edx
c0000f35:	83 c8 01             	or     eax,0x1
c0000f38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f46:	74 4c                	je     c0000f94 <sYSMALLOc+0x206>
c0000f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4c:	83 e8 0c             	sub    eax,0xc
c0000f4f:	83 e0 f8             	and    eax,0xfffffff8
c0000f52:	89 c2                	mov    edx,eax
c0000f54:	83 ca 01             	or     edx,0x1
c0000f57:	83 f8 0f             	cmp    eax,0xf
c0000f5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f6d:	76 25                	jbe    c0000f94 <sYSMALLOc+0x206>
c0000f6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f82:	83 c7 08             	add    edi,0x8
c0000f85:	57                   	push   edi
c0000f86:	e8 0e fd ff ff       	call   c0000c99 <dlfree>
c0000f8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f91:	83 c4 10             	add    esp,0x10
c0000f94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fa0:	73 06                	jae    c0000fa8 <sYSMALLOc+0x21a>
c0000fa2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fa8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fb4:	73 06                	jae    c0000fbc <sYSMALLOc+0x22e>
c0000fb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fc2:	83 e2 fc             	and    edx,0xfffffffc
c0000fc5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fc9:	0f 82 3c fe ff ff    	jb     c0000e0b <sYSMALLOc+0x7d>
c0000fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fd3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fd6:	29 fa                	sub    edx,edi
c0000fd8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fdb:	83 ca 01             	or     edx,0x1
c0000fde:	89 fb                	mov    ebx,edi
c0000fe0:	83 c0 08             	add    eax,0x8
c0000fe3:	83 cb 01             	or     ebx,0x1
c0000fe6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fe9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fec:	83 c4 2c             	add    esp,0x2c
c0000fef:	5b                   	pop    ebx
c0000ff0:	5e                   	pop    esi
c0000ff1:	5f                   	pop    edi
c0000ff2:	5d                   	pop    ebp
c0000ff3:	c3                   	ret    

c0000ff4 <dlmalloc>:
c0000ff4:	55                   	push   ebp
c0000ff5:	57                   	push   edi
c0000ff6:	56                   	push   esi
c0000ff7:	53                   	push   ebx
c0000ff8:	83 ec 1c             	sub    esp,0x1c
c0000ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fff:	83 f8 df             	cmp    eax,0xffffffdf
c0001002:	0f 87 70 03 00 00    	ja     c0001378 <dlmalloc+0x384>
c0001008:	83 c0 0b             	add    eax,0xb
c000100b:	be 10 00 00 00       	mov    esi,0x10
c0001010:	83 f8 0f             	cmp    eax,0xf
c0001013:	76 05                	jbe    c000101a <dlmalloc+0x26>
c0001015:	83 e0 f8             	and    eax,0xfffffff8
c0001018:	89 c6                	mov    esi,eax
c000101a:	8b 3d 80 f6 01 c0    	mov    edi,DWORD PTR ds:0xc001f680
c0001020:	f7 c7 01 00 00 00    	test   edi,0x1
c0001026:	75 17                	jne    c000103f <dlmalloc+0x4b>
c0001028:	85 ff                	test   edi,edi
c000102a:	0f 85 05 03 00 00    	jne    c0001335 <dlmalloc+0x341>
c0001030:	b8 80 f6 01 c0       	mov    eax,0xc001f680
c0001035:	e8 78 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c000103a:	e9 f6 02 00 00       	jmp    c0001335 <dlmalloc+0x341>
c000103f:	39 f7                	cmp    edi,esi
c0001041:	72 1f                	jb     c0001062 <dlmalloc+0x6e>
c0001043:	89 f2                	mov    edx,esi
c0001045:	c1 ea 03             	shr    edx,0x3
c0001048:	83 ea 02             	sub    edx,0x2
c000104b:	8b 04 95 84 f6 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe097c]
c0001052:	85 c0                	test   eax,eax
c0001054:	74 0c                	je     c0001062 <dlmalloc+0x6e>
c0001056:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001059:	89 0c 95 84 f6 01 c0 	mov    DWORD PTR [edx*4-0x3ffe097c],ecx
c0001060:	eb 30                	jmp    c0001092 <dlmalloc+0x9e>
c0001062:	89 f0                	mov    eax,esi
c0001064:	81 fe ff 00 00 00    	cmp    esi,0xff
c000106a:	77 2e                	ja     c000109a <dlmalloc+0xa6>
c000106c:	c1 e8 03             	shr    eax,0x3
c000106f:	8d 14 c5 b4 f6 01 c0 	lea    edx,[eax*8-0x3ffe094c]
c0001076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000107d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001080:	39 c3                	cmp    ebx,eax
c0001082:	74 2e                	je     c00010b2 <dlmalloc+0xbe>
c0001084:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001087:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000108c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000108f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001092:	83 c0 08             	add    eax,0x8
c0001095:	e9 e0 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c000109a:	e8 8f fa ff ff       	call   c0000b2e <largebin_index>
c000109f:	83 e7 02             	and    edi,0x2
c00010a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a6:	74 0a                	je     c00010b2 <dlmalloc+0xbe>
c00010a8:	b8 80 f6 01 c0       	mov    eax,0xc001f680
c00010ad:	e8 00 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c00010b2:	8d 46 10             	lea    eax,[esi+0x10]
c00010b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010b9:	8b 1d c0 f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f6c0
c00010bf:	81 fb b4 f6 01 c0    	cmp    ebx,0xc001f6b4
c00010c5:	0f 84 13 01 00 00    	je     c00011de <dlmalloc+0x1ea>
c00010cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010d1:	83 e7 fc             	and    edi,0xfffffffc
c00010d4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010da:	77 4c                	ja     c0001128 <dlmalloc+0x134>
c00010dc:	3d b4 f6 01 c0       	cmp    eax,0xc001f6b4
c00010e1:	75 45                	jne    c0001128 <dlmalloc+0x134>
c00010e3:	39 1d b0 f6 01 c0    	cmp    DWORD PTR ds:0xc001f6b0,ebx
c00010e9:	75 3d                	jne    c0001128 <dlmalloc+0x134>
c00010eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ef:	73 37                	jae    c0001128 <dlmalloc+0x134>
c00010f1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010f4:	89 fa                	mov    edx,edi
c00010f6:	a3 bc f6 01 c0       	mov    ds:0xc001f6bc,eax
c00010fb:	a3 c0 f6 01 c0       	mov    ds:0xc001f6c0,eax
c0001100:	a3 b0 f6 01 c0       	mov    ds:0xc001f6b0,eax
c0001105:	29 f2                	sub    edx,esi
c0001107:	c7 40 08 b4 f6 01 c0 	mov    DWORD PTR [eax+0x8],0xc001f6b4
c000110e:	c7 40 0c b4 f6 01 c0 	mov    DWORD PTR [eax+0xc],0xc001f6b4
c0001115:	83 ce 01             	or     esi,0x1
c0001118:	89 d1                	mov    ecx,edx
c000111a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000111d:	83 c9 01             	or     ecx,0x1
c0001120:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001123:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001126:	eb 15                	jmp    c000113d <dlmalloc+0x149>
c0001128:	a3 c0 f6 01 c0       	mov    ds:0xc001f6c0,eax
c000112d:	39 fe                	cmp    esi,edi
c000112f:	c7 40 08 b4 f6 01 c0 	mov    DWORD PTR [eax+0x8],0xc001f6b4
c0001136:	75 0d                	jne    c0001145 <dlmalloc+0x151>
c0001138:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000113d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001140:	e9 35 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001145:	89 f8                	mov    eax,edi
c0001147:	81 ff ff 00 00 00    	cmp    edi,0xff
c000114d:	77 19                	ja     c0001168 <dlmalloc+0x174>
c000114f:	c1 e8 03             	shr    eax,0x3
c0001152:	8d 14 00             	lea    edx,[eax+eax*1]
c0001155:	83 c2 0d             	add    edx,0xd
c0001158:	8d 2c 95 78 f6 01 c0 	lea    ebp,[edx*4-0x3ffe0988]
c000115f:	8b 14 95 80 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0980]
c0001166:	eb 46                	jmp    c00011ae <dlmalloc+0x1ba>
c0001168:	e8 c1 f9 ff ff       	call   c0000b2e <largebin_index>
c000116d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001170:	83 c2 0d             	add    edx,0xd
c0001173:	8d 0c 95 80 f6 01 c0 	lea    ecx,[edx*4-0x3ffe0980]
c000117a:	8b 14 95 80 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0980]
c0001181:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001184:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001188:	89 d5                	mov    ebp,edx
c000118a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000118e:	74 1e                	je     c00011ae <dlmalloc+0x1ba>
c0001190:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001193:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001196:	77 12                	ja     c00011aa <dlmalloc+0x1b6>
c0001198:	83 cf 01             	or     edi,0x1
c000119b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000119e:	76 05                	jbe    c00011a5 <dlmalloc+0x1b1>
c00011a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011a3:	eb f6                	jmp    c000119b <dlmalloc+0x1a7>
c00011a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011a8:	eb 04                	jmp    c00011ae <dlmalloc+0x1ba>
c00011aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ae:	89 c7                	mov    edi,eax
c00011b0:	88 c1                	mov    cl,al
c00011b2:	c1 ff 05             	sar    edi,0x5
c00011b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011b9:	bf 01 00 00 00       	mov    edi,0x1
c00011be:	d3 e7                	shl    edi,cl
c00011c0:	89 f8                	mov    eax,edi
c00011c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011c6:	09 04 bd b4 f9 01 c0 	or     DWORD PTR [edi*4-0x3ffe064c],eax
c00011cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011d9:	e9 db fe ff ff       	jmp    c00010b9 <dlmalloc+0xc5>
c00011de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e4:	76 78                	jbe    c000125e <dlmalloc+0x26a>
c00011e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011ea:	8d 04 c5 b4 f6 01 c0 	lea    eax,[eax*8-0x3ffe094c]
c00011f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011f7:	39 ca                	cmp    edx,ecx
c00011f9:	74 63                	je     c000125e <dlmalloc+0x26a>
c00011fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001201:	83 e3 fc             	and    ebx,0xfffffffc
c0001204:	39 de                	cmp    esi,ebx
c0001206:	77 52                	ja     c000125a <dlmalloc+0x266>
c0001208:	89 df                	mov    edi,ebx
c000120a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000120d:	29 f7                	sub    edi,esi
c000120f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001212:	01 d3                	add    ebx,edx
c0001214:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001217:	83 ff 0f             	cmp    edi,0xf
c000121a:	8d 42 08             	lea    eax,[edx+0x8]
c000121d:	77 09                	ja     c0001228 <dlmalloc+0x234>
c000121f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001223:	e9 52 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001228:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000122b:	83 ce 01             	or     esi,0x1
c000122e:	89 0d bc f6 01 c0    	mov    DWORD PTR ds:0xc001f6bc,ecx
c0001234:	89 0d c0 f6 01 c0    	mov    DWORD PTR ds:0xc001f6c0,ecx
c000123a:	c7 41 08 b4 f6 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001f6b4
c0001241:	c7 41 0c b4 f6 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001f6b4
c0001248:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000124b:	89 fa                	mov    edx,edi
c000124d:	83 ca 01             	or     edx,0x1
c0001250:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001253:	89 3b                	mov    DWORD PTR [ebx],edi
c0001255:	e9 20 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c000125a:	89 c2                	mov    edx,eax
c000125c:	eb 99                	jmp    c00011f7 <dlmalloc+0x203>
c000125e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001262:	b8 01 00 00 00       	mov    eax,0x1
c0001267:	41                   	inc    ecx
c0001268:	89 cb                	mov    ebx,ecx
c000126a:	8d 14 cd ac f6 01 c0 	lea    edx,[ecx*8-0x3ffe0954]
c0001271:	c1 eb 05             	shr    ebx,0x5
c0001274:	d3 e0                	shl    eax,cl
c0001276:	8b 3c 9d b4 f9 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe064c]
c000127d:	39 f8                	cmp    eax,edi
c000127f:	77 04                	ja     c0001285 <dlmalloc+0x291>
c0001281:	85 c0                	test   eax,eax
c0001283:	75 26                	jne    c00012ab <dlmalloc+0x2b7>
c0001285:	43                   	inc    ebx
c0001286:	83 fb 02             	cmp    ebx,0x2
c0001289:	0f 87 a6 00 00 00    	ja     c0001335 <dlmalloc+0x341>
c000128f:	8b 3c 9d b4 f9 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe064c]
c0001296:	85 ff                	test   edi,edi
c0001298:	74 eb                	je     c0001285 <dlmalloc+0x291>
c000129a:	89 d8                	mov    eax,ebx
c000129c:	c1 e0 06             	shl    eax,0x6
c000129f:	8d 14 85 ac f6 01 c0 	lea    edx,[eax*4-0x3ffe0954]
c00012a6:	b8 01 00 00 00       	mov    eax,0x1
c00012ab:	85 f8                	test   eax,edi
c00012ad:	75 07                	jne    c00012b6 <dlmalloc+0x2c2>
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	01 c0                	add    eax,eax
c00012b4:	eb f5                	jmp    c00012ab <dlmalloc+0x2b7>
c00012b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012b9:	39 ca                	cmp    edx,ecx
c00012bb:	75 14                	jne    c00012d1 <dlmalloc+0x2dd>
c00012bd:	89 c1                	mov    ecx,eax
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	f7 d1                	not    ecx
c00012c4:	01 c0                	add    eax,eax
c00012c6:	21 cf                	and    edi,ecx
c00012c8:	89 3c 9d b4 f9 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe064c],edi
c00012cf:	eb ac                	jmp    c000127d <dlmalloc+0x289>
c00012d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012d7:	83 e0 fc             	and    eax,0xfffffffc
c00012da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012dd:	89 c3                	mov    ebx,eax
c00012df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012e2:	29 f3                	sub    ebx,esi
c00012e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012e7:	83 fb 0f             	cmp    ebx,0xf
c00012ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x304>
c00012ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012f3:	e9 82 00 00 00       	jmp    c000137a <dlmalloc+0x386>
c00012f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001301:	89 3d bc f6 01 c0    	mov    DWORD PTR ds:0xc001f6bc,edi
c0001307:	89 3d c0 f6 01 c0    	mov    DWORD PTR ds:0xc001f6c0,edi
c000130d:	c7 47 08 b4 f6 01 c0 	mov    DWORD PTR [edi+0x8],0xc001f6b4
c0001314:	c7 47 0c b4 f6 01 c0 	mov    DWORD PTR [edi+0xc],0xc001f6b4
c000131b:	77 06                	ja     c0001323 <dlmalloc+0x32f>
c000131d:	89 3d b0 f6 01 c0    	mov    DWORD PTR ds:0xc001f6b0,edi
c0001323:	83 ce 01             	or     esi,0x1
c0001326:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001329:	89 d9                	mov    ecx,ebx
c000132b:	83 c9 01             	or     ecx,0x1
c000132e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001331:	89 1a                	mov    DWORD PTR [edx],ebx
c0001333:	eb 45                	jmp    c000137a <dlmalloc+0x386>
c0001335:	a1 ac f6 01 c0       	mov    eax,ds:0xc001f6ac
c000133a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000133d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001340:	83 e2 fc             	and    edx,0xfffffffc
c0001343:	39 d1                	cmp    ecx,edx
c0001345:	77 1e                	ja     c0001365 <dlmalloc+0x371>
c0001347:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000134a:	89 f3                	mov    ebx,esi
c000134c:	89 0d ac f6 01 c0    	mov    DWORD PTR ds:0xc001f6ac,ecx
c0001352:	83 cb 01             	or     ebx,0x1
c0001355:	29 f2                	sub    edx,esi
c0001357:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000135a:	83 ca 01             	or     edx,0x1
c000135d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001360:	e9 2d fd ff ff       	jmp    c0001092 <dlmalloc+0x9e>
c0001365:	83 c4 1c             	add    esp,0x1c
c0001368:	89 f0                	mov    eax,esi
c000136a:	5b                   	pop    ebx
c000136b:	ba 80 f6 01 c0       	mov    edx,0xc001f680
c0001370:	5e                   	pop    esi
c0001371:	5f                   	pop    edi
c0001372:	5d                   	pop    ebp
c0001373:	e9 16 fa ff ff       	jmp    c0000d8e <sYSMALLOc>
c0001378:	31 c0                	xor    eax,eax
c000137a:	83 c4 1c             	add    esp,0x1c
c000137d:	5b                   	pop    ebx
c000137e:	5e                   	pop    esi
c000137f:	5f                   	pop    edi
c0001380:	5d                   	pop    ebp
c0001381:	c3                   	ret    

c0001382 <iALLOc>:
c0001382:	55                   	push   ebp
c0001383:	89 c5                	mov    ebp,eax
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 2c             	sub    esp,0x2c
c000138b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000138f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001397:	83 3d 80 f6 01 c0 00 	cmp    DWORD PTR ds:0xc001f680,0x0
c000139e:	75 12                	jne    c00013b2 <iALLOc+0x30>
c00013a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013a4:	b8 80 f6 01 c0       	mov    eax,0xc001f680
c00013a9:	e8 04 f8 ff ff       	call   c0000bb2 <malloc_consolidate>
c00013ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013b7:	74 12                	je     c00013cb <iALLOc+0x49>
c00013b9:	85 ed                	test   ebp,ebp
c00013bb:	0f 84 64 01 00 00    	je     c0001525 <iALLOc+0x1a3>
c00013c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013c9:	eb 33                	jmp    c00013fe <iALLOc+0x7c>
c00013cb:	85 ed                	test   ebp,ebp
c00013cd:	75 14                	jne    c00013e3 <iALLOc+0x61>
c00013cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013d7:	83 c4 2c             	add    esp,0x2c
c00013da:	5b                   	pop    ebx
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 11 fc ff ff       	jmp    c0000ff4 <dlmalloc>
c00013e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013f2:	83 f8 0f             	cmp    eax,0xf
c00013f5:	76 07                	jbe    c00013fe <iALLOc+0x7c>
c00013f7:	83 e0 f8             	and    eax,0xfffffff8
c00013fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001403:	75 09                	jne    c000140e <iALLOc+0x8c>
c0001405:	89 d0                	mov    eax,edx
c0001407:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000140a:	31 f6                	xor    esi,esi
c000140c:	eb 3b                	jmp    c0001449 <iALLOc+0xc7>
c000140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001410:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001418:	83 c0 0b             	add    eax,0xb
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 07                	jbe    c0001427 <iALLOc+0xa5>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000142b:	0f af f5             	imul   esi,ebp
c000142e:	eb 25                	jmp    c0001455 <iALLOc+0xd3>
c0001430:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001432:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001435:	bb 10 00 00 00       	mov    ebx,0x10
c000143a:	83 f9 0f             	cmp    ecx,0xf
c000143d:	76 05                	jbe    c0001444 <iALLOc+0xc2>
c000143f:	83 e1 f8             	and    ecx,0xfffffff8
c0001442:	89 cb                	mov    ebx,ecx
c0001444:	01 de                	add    esi,ebx
c0001446:	83 c0 04             	add    eax,0x4
c0001449:	39 c7                	cmp    edi,eax
c000144b:	75 e3                	jne    c0001430 <iALLOc+0xae>
c000144d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001459:	8b 1d d4 f9 01 c0    	mov    ebx,DWORD PTR ds:0xc001f9d4
c000145f:	83 ec 0c             	sub    esp,0xc
c0001462:	c7 05 d4 f9 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001f9d4,0x0
c000146c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001470:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001474:	50                   	push   eax
c0001475:	e8 7a fb ff ff       	call   c0000ff4 <dlmalloc>
c000147a:	83 c4 10             	add    esp,0x10
c000147d:	89 1d d4 f9 01 c0    	mov    DWORD PTR ds:0xc001f9d4,ebx
c0001483:	85 c0                	test   eax,eax
c0001485:	0f 84 92 00 00 00    	je     c000151d <iALLOc+0x19b>
c000148b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000148e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001491:	83 e3 fc             	and    ebx,0xfffffffc
c0001494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001498:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000149d:	74 1e                	je     c00014bd <iALLOc+0x13b>
c000149f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014a3:	89 d9                	mov    ecx,ebx
c00014a5:	52                   	push   edx
c00014a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014aa:	83 e9 04             	sub    ecx,0x4
c00014ad:	51                   	push   ecx
c00014ae:	6a 00                	push   0x0
c00014b0:	50                   	push   eax
c00014b1:	e8 1a f0 ff ff       	call   c00004d0 <memset>
c00014b6:	83 c4 10             	add    esp,0x10
c00014b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014c2:	75 14                	jne    c00014d8 <iALLOc+0x156>
c00014c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014c7:	29 f3                	sub    ebx,esi
c00014c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014cc:	83 cb 01             	or     ebx,0x1
c00014cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d6:	89 f3                	mov    ebx,esi
c00014d8:	31 c0                	xor    eax,eax
c00014da:	4d                   	dec    ebp
c00014db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014e2:	39 c5                	cmp    ebp,eax
c00014e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014e7:	74 2c                	je     c0001515 <iALLOc+0x193>
c00014e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014ed:	85 c9                	test   ecx,ecx
c00014ef:	75 15                	jne    c0001506 <iALLOc+0x184>
c00014f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014f7:	b9 10 00 00 00       	mov    ecx,0x10
c00014fc:	83 fe 0f             	cmp    esi,0xf
c00014ff:	76 05                	jbe    c0001506 <iALLOc+0x184>
c0001501:	83 e6 f8             	and    esi,0xfffffff8
c0001504:	89 f1                	mov    ecx,esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	29 cb                	sub    ebx,ecx
c000150a:	83 ce 01             	or     esi,0x1
c000150d:	40                   	inc    eax
c000150e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001511:	01 cf                	add    edi,ecx
c0001513:	eb c6                	jmp    c00014db <iALLOc+0x159>
c0001515:	83 cb 01             	or     ebx,0x1
c0001518:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000151b:	eb 08                	jmp    c0001525 <iALLOc+0x1a3>
c000151d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001529:	83 c4 2c             	add    esp,0x2c
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	c3                   	ret    

c0001531 <dlrealloc>:
c0001531:	55                   	push   ebp
c0001532:	57                   	push   edi
c0001533:	56                   	push   esi
c0001534:	53                   	push   ebx
c0001535:	83 ec 1c             	sub    esp,0x1c
c0001538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000153c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001540:	85 db                	test   ebx,ebx
c0001542:	75 10                	jne    c0001554 <dlrealloc+0x23>
c0001544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001548:	83 c4 1c             	add    esp,0x1c
c000154b:	5b                   	pop    ebx
c000154c:	5e                   	pop    esi
c000154d:	5f                   	pop    edi
c000154e:	5d                   	pop    ebp
c000154f:	e9 a0 fa ff ff       	jmp    c0000ff4 <dlmalloc>
c0001554:	83 f8 df             	cmp    eax,0xffffffdf
c0001557:	76 07                	jbe    c0001560 <dlrealloc+0x2f>
c0001559:	31 db                	xor    ebx,ebx
c000155b:	e9 6a 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c0001560:	83 c0 0b             	add    eax,0xb
c0001563:	bd 10 00 00 00       	mov    ebp,0x10
c0001568:	83 f8 0f             	cmp    eax,0xf
c000156b:	76 05                	jbe    c0001572 <dlrealloc+0x41>
c000156d:	83 e0 f8             	and    eax,0xfffffff8
c0001570:	89 c5                	mov    ebp,eax
c0001572:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001575:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001578:	89 c6                	mov    esi,eax
c000157a:	83 e6 fc             	and    esi,0xfffffffc
c000157d:	a8 02                	test   al,0x2
c000157f:	75 d8                	jne    c0001559 <dlrealloc+0x28>
c0001581:	39 f5                	cmp    ebp,esi
c0001583:	0f 86 04 01 00 00    	jbe    c000168d <dlrealloc+0x15c>
c0001589:	8d 14 37             	lea    edx,[edi+esi*1]
c000158c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000158f:	39 15 ac f6 01 c0    	cmp    DWORD PTR ds:0xc001f6ac,edx
c0001595:	75 33                	jne    c00015ca <dlrealloc+0x99>
c0001597:	83 e1 fc             	and    ecx,0xfffffffc
c000159a:	01 f1                	add    ecx,esi
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015a7:	77 49                	ja     c00015f2 <dlrealloc+0xc1>
c00015a9:	01 ef                	add    edi,ebp
c00015ab:	83 e0 01             	and    eax,0x1
c00015ae:	09 e8                	or     eax,ebp
c00015b0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015b3:	89 3d ac f6 01 c0    	mov    DWORD PTR ds:0xc001f6ac,edi
c00015b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015bd:	29 e8                	sub    eax,ebp
c00015bf:	83 c8 01             	or     eax,0x1
c00015c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015c5:	e9 00 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c00015ca:	89 c8                	mov    eax,ecx
c00015cc:	83 e0 fe             	and    eax,0xfffffffe
c00015cf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015d4:	75 1c                	jne    c00015f2 <dlrealloc+0xc1>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	39 cd                	cmp    ebp,ecx
c00015dd:	77 13                	ja     c00015f2 <dlrealloc+0xc1>
c00015df:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015e2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015e5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015e8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015eb:	89 ce                	mov    esi,ecx
c00015ed:	e9 9b 00 00 00       	jmp    c000168d <dlrealloc+0x15c>
c00015f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015f6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	50                   	push   eax
c00015fd:	e8 f2 f9 ff ff       	call   c0000ff4 <dlmalloc>
c0001602:	83 c4 10             	add    esp,0x10
c0001605:	85 c0                	test   eax,eax
c0001607:	0f 84 4c ff ff ff    	je     c0001559 <dlrealloc+0x28>
c000160d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001614:	39 ca                	cmp    edx,ecx
c0001616:	75 0a                	jne    c0001622 <dlrealloc+0xf1>
c0001618:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000161b:	83 e0 fc             	and    eax,0xfffffffc
c000161e:	01 c6                	add    esi,eax
c0001620:	eb 6b                	jmp    c000168d <dlrealloc+0x15c>
c0001622:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001625:	83 f9 27             	cmp    ecx,0x27
c0001628:	76 08                	jbe    c0001632 <dlrealloc+0x101>
c000162a:	89 de                	mov    esi,ebx
c000162c:	89 c7                	mov    edi,eax
c000162e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001630:	eb 43                	jmp    c0001675 <dlrealloc+0x144>
c0001632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001634:	83 f9 13             	cmp    ecx,0x13
c0001637:	89 10                	mov    DWORD PTR [eax],edx
c0001639:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000163c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000163f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001645:	76 2e                	jbe    c0001675 <dlrealloc+0x144>
c0001647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000164a:	83 f9 1b             	cmp    ecx,0x1b
c000164d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001650:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001656:	76 1d                	jbe    c0001675 <dlrealloc+0x144>
c0001658:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000165b:	83 f9 23             	cmp    ecx,0x23
c000165e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001661:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001664:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001667:	76 0c                	jbe    c0001675 <dlrealloc+0x144>
c0001669:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000166c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000166f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	53                   	push   ebx
c000167d:	e8 17 f6 ff ff       	call   c0000c99 <dlfree>
c0001682:	83 c4 10             	add    esp,0x10
c0001685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001689:	89 c3                	mov    ebx,eax
c000168b:	eb 3d                	jmp    c00016ca <dlrealloc+0x199>
c000168d:	89 f2                	mov    edx,esi
c000168f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001692:	29 ea                	sub    edx,ebp
c0001694:	83 e1 01             	and    ecx,0x1
c0001697:	8d 04 37             	lea    eax,[edi+esi*1]
c000169a:	83 fa 0f             	cmp    edx,0xf
c000169d:	77 0b                	ja     c00016aa <dlrealloc+0x179>
c000169f:	09 ce                	or     esi,ecx
c00016a1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016a4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016a8:	eb 20                	jmp    c00016ca <dlrealloc+0x199>
c00016aa:	01 ef                	add    edi,ebp
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	09 cd                	or     ebp,ecx
c00016b1:	83 ca 01             	or     edx,0x1
c00016b4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016b7:	83 c7 08             	add    edi,0x8
c00016ba:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c1:	57                   	push   edi
c00016c2:	e8 d2 f5 ff ff       	call   c0000c99 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	83 c4 1c             	add    esp,0x1c
c00016cd:	89 d8                	mov    eax,ebx
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlmemalign>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 0c             	sub    esp,0xc
c00016db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016e3:	83 fa 08             	cmp    edx,0x8
c00016e6:	77 10                	ja     c00016f8 <dlmemalign+0x24>
c00016e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016ec:	83 c4 0c             	add    esp,0xc
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	e9 fc f8 ff ff       	jmp    c0000ff4 <dlmalloc>
c00016f8:	bf 10 00 00 00       	mov    edi,0x10
c00016fd:	83 fa 0f             	cmp    edx,0xf
c0001700:	76 13                	jbe    c0001715 <dlmemalign+0x41>
c0001702:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001705:	85 d1                	test   ecx,edx
c0001707:	75 04                	jne    c000170d <dlmemalign+0x39>
c0001709:	89 d7                	mov    edi,edx
c000170b:	eb 08                	jmp    c0001715 <dlmemalign+0x41>
c000170d:	39 d7                	cmp    edi,edx
c000170f:	73 04                	jae    c0001715 <dlmemalign+0x41>
c0001711:	01 ff                	add    edi,edi
c0001713:	eb f8                	jmp    c000170d <dlmemalign+0x39>
c0001715:	83 f8 df             	cmp    eax,0xffffffdf
c0001718:	76 07                	jbe    c0001721 <dlmemalign+0x4d>
c000171a:	31 c0                	xor    eax,eax
c000171c:	e9 ce 00 00 00       	jmp    c00017ef <dlmemalign+0x11b>
c0001721:	83 c0 0b             	add    eax,0xb
c0001724:	bd 10 00 00 00       	mov    ebp,0x10
c0001729:	83 f8 0f             	cmp    eax,0xf
c000172c:	76 05                	jbe    c0001733 <dlmemalign+0x5f>
c000172e:	83 e0 f8             	and    eax,0xfffffff8
c0001731:	89 c5                	mov    ebp,eax
c0001733:	83 ec 0c             	sub    esp,0xc
c0001736:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000173a:	50                   	push   eax
c000173b:	e8 b4 f8 ff ff       	call   c0000ff4 <dlmalloc>
c0001740:	83 c4 10             	add    esp,0x10
c0001743:	89 c1                	mov    ecx,eax
c0001745:	85 c0                	test   eax,eax
c0001747:	74 d1                	je     c000171a <dlmemalign+0x46>
c0001749:	31 d2                	xor    edx,edx
c000174b:	8d 70 f8             	lea    esi,[eax-0x8]
c000174e:	f7 f7                	div    edi
c0001750:	85 d2                	test   edx,edx
c0001752:	74 62                	je     c00017b6 <dlmemalign+0xe2>
c0001754:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001758:	89 f8                	mov    eax,edi
c000175a:	f7 d8                	neg    eax
c000175c:	21 c3                	and    ebx,eax
c000175e:	83 eb 08             	sub    ebx,0x8
c0001761:	89 d8                	mov    eax,ebx
c0001763:	29 f0                	sub    eax,esi
c0001765:	83 f8 0f             	cmp    eax,0xf
c0001768:	77 02                	ja     c000176c <dlmemalign+0x98>
c000176a:	01 fb                	add    ebx,edi
c000176c:	89 d8                	mov    eax,ebx
c000176e:	29 f0                	sub    eax,esi
c0001770:	89 c6                	mov    esi,eax
c0001772:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001775:	89 c2                	mov    edx,eax
c0001777:	83 e2 fc             	and    edx,0xfffffffc
c000177a:	29 f2                	sub    edx,esi
c000177c:	a8 02                	test   al,0x2
c000177e:	74 10                	je     c0001790 <dlmemalign+0xbc>
c0001780:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001783:	83 ca 02             	or     edx,0x2
c0001786:	8d 43 08             	lea    eax,[ebx+0x8]
c0001789:	89 33                	mov    DWORD PTR [ebx],esi
c000178b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000178e:	eb 5f                	jmp    c00017ef <dlmemalign+0x11b>
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	89 d0                	mov    eax,edx
c0001795:	83 c8 01             	or     eax,0x1
c0001798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000179b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017a0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a3:	83 e0 01             	and    eax,0x1
c00017a6:	09 f0                	or     eax,esi
c00017a8:	89 de                	mov    esi,ebx
c00017aa:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ad:	51                   	push   ecx
c00017ae:	e8 e6 f4 ff ff       	call   c0000c99 <dlfree>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017b9:	a8 02                	test   al,0x2
c00017bb:	75 2f                	jne    c00017ec <dlmemalign+0x118>
c00017bd:	83 e0 fc             	and    eax,0xfffffffc
c00017c0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017c3:	39 c2                	cmp    edx,eax
c00017c5:	73 25                	jae    c00017ec <dlmemalign+0x118>
c00017c7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	29 e8                	sub    eax,ebp
c00017cf:	83 c2 08             	add    edx,0x8
c00017d2:	83 c8 01             	or     eax,0x1
c00017d5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017db:	83 e0 01             	and    eax,0x1
c00017de:	09 c5                	or     ebp,eax
c00017e0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017e3:	52                   	push   edx
c00017e4:	e8 b0 f4 ff ff       	call   c0000c99 <dlfree>
c00017e9:	83 c4 10             	add    esp,0x10
c00017ec:	8d 46 08             	lea    eax,[esi+0x8]
c00017ef:	83 c4 0c             	add    esp,0xc
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlcalloc>:
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 14             	sub    esp,0x14
c00017fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ff:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001804:	50                   	push   eax
c0001805:	e8 ea f7 ff ff       	call   c0000ff4 <dlmalloc>
c000180a:	83 c4 10             	add    esp,0x10
c000180d:	89 c3                	mov    ebx,eax
c000180f:	85 c0                	test   eax,eax
c0001811:	74 77                	je     c000188a <dlcalloc+0x93>
c0001813:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001816:	89 d0                	mov    eax,edx
c0001818:	83 e0 fc             	and    eax,0xfffffffc
c000181b:	80 e2 02             	and    dl,0x2
c000181e:	75 5a                	jne    c000187a <dlcalloc+0x83>
c0001820:	83 e8 04             	sub    eax,0x4
c0001823:	83 f8 27             	cmp    eax,0x27
c0001826:	76 03                	jbe    c000182b <dlcalloc+0x34>
c0001828:	51                   	push   ecx
c0001829:	eb 53                	jmp    c000187e <dlcalloc+0x87>
c000182b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001838:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000183f:	83 f8 13             	cmp    eax,0x13
c0001842:	76 46                	jbe    c000188a <dlcalloc+0x93>
c0001844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000184b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001852:	83 f8 1b             	cmp    eax,0x1b
c0001855:	76 33                	jbe    c000188a <dlcalloc+0x93>
c0001857:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000185e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001865:	83 f8 23             	cmp    eax,0x23
c0001868:	76 20                	jbe    c000188a <dlcalloc+0x93>
c000186a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001871:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001878:	eb 10                	jmp    c000188a <dlcalloc+0x93>
c000187a:	83 e8 08             	sub    eax,0x8
c000187d:	52                   	push   edx
c000187e:	50                   	push   eax
c000187f:	6a 00                	push   0x0
c0001881:	53                   	push   ebx
c0001882:	e8 49 ec ff ff       	call   c00004d0 <memset>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 d8                	mov    eax,ebx
c000188c:	83 c4 08             	add    esp,0x8
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlcfree>:
c0001891:	e9 03 f4 ff ff       	jmp    c0000c99 <dlfree>

c0001896 <dlindependent_calloc>:
c0001896:	83 ec 28             	sub    esp,0x28
c0001899:	b9 03 00 00 00       	mov    ecx,0x3
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	e8 cb fa ff ff       	call   c0001382 <iALLOc>
c00018b7:	83 c4 2c             	add    esp,0x2c
c00018ba:	c3                   	ret    

c00018bb <dlindependent_comalloc>:
c00018bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018c3:	31 c9                	xor    ecx,ecx
c00018c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018cd:	e9 b0 fa ff ff       	jmp    c0001382 <iALLOc>

c00018d2 <dlvalloc>:
c00018d2:	83 ec 0c             	sub    esp,0xc
c00018d5:	83 3d 80 f6 01 c0 00 	cmp    DWORD PTR ds:0xc001f680,0x0
c00018dc:	75 0a                	jne    c00018e8 <dlvalloc+0x16>
c00018de:	b8 80 f6 01 c0       	mov    eax,0xc001f680
c00018e3:	e8 ca f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c00018e8:	50                   	push   eax
c00018e9:	50                   	push   eax
c00018ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018ee:	ff 35 dc f9 01 c0    	push   DWORD PTR ds:0xc001f9dc
c00018f4:	e8 db fd ff ff       	call   c00016d4 <dlmemalign>
c00018f9:	83 c4 1c             	add    esp,0x1c
c00018fc:	c3                   	ret    

c00018fd <dlpvalloc>:
c00018fd:	83 ec 0c             	sub    esp,0xc
c0001900:	83 3d 80 f6 01 c0 00 	cmp    DWORD PTR ds:0xc001f680,0x0
c0001907:	75 0a                	jne    c0001913 <dlpvalloc+0x16>
c0001909:	b8 80 f6 01 c0       	mov    eax,0xc001f680
c000190e:	e8 9f f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001913:	a1 dc f9 01 c0       	mov    eax,ds:0xc001f9dc
c0001918:	89 c1                	mov    ecx,eax
c000191a:	52                   	push   edx
c000191b:	f7 d9                	neg    ecx
c000191d:	52                   	push   edx
c000191e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001922:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001926:	21 ca                	and    edx,ecx
c0001928:	52                   	push   edx
c0001929:	50                   	push   eax
c000192a:	e8 a5 fd ff ff       	call   c00016d4 <dlmemalign>
c000192f:	83 c4 1c             	add    esp,0x1c
c0001932:	c3                   	ret    

c0001933 <dlmalloc_trim>:
c0001933:	b8 80 f6 01 c0       	mov    eax,0xc001f680
c0001938:	e8 75 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <dlmalloc_usable_size>:
c0001940:	53                   	push   ebx
c0001941:	31 c0                	xor    eax,eax
c0001943:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001947:	85 c9                	test   ecx,ecx
c0001949:	74 24                	je     c000196f <dlmalloc_usable_size+0x2f>
c000194b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000194e:	f6 c2 02             	test   dl,0x2
c0001951:	74 08                	je     c000195b <dlmalloc_usable_size+0x1b>
c0001953:	83 e2 fc             	and    edx,0xfffffffc
c0001956:	8d 42 f8             	lea    eax,[edx-0x8]
c0001959:	eb 14                	jmp    c000196f <dlmalloc_usable_size+0x2f>
c000195b:	89 d3                	mov    ebx,edx
c000195d:	31 c0                	xor    eax,eax
c000195f:	83 e3 fe             	and    ebx,0xfffffffe
c0001962:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001967:	74 06                	je     c000196f <dlmalloc_usable_size+0x2f>
c0001969:	83 e2 fc             	and    edx,0xfffffffc
c000196c:	8d 42 fc             	lea    eax,[edx-0x4]
c000196f:	5b                   	pop    ebx
c0001970:	c3                   	ret    

c0001971 <dlmallinfo>:
c0001971:	55                   	push   ebp
c0001972:	57                   	push   edi
c0001973:	56                   	push   esi
c0001974:	53                   	push   ebx
c0001975:	83 ec 08             	sub    esp,0x8
c0001978:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000197c:	83 3d ac f6 01 c0 00 	cmp    DWORD PTR ds:0xc001f6ac,0x0
c0001983:	75 0a                	jne    c000198f <dlmallinfo+0x1e>
c0001985:	b8 80 f6 01 c0       	mov    eax,0xc001f680
c000198a:	e8 23 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000198f:	a1 ac f6 01 c0       	mov    eax,ds:0xc001f6ac
c0001994:	31 ed                	xor    ebp,ebp
c0001996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001999:	31 c9                	xor    ecx,ecx
c000199b:	83 e0 fc             	and    eax,0xfffffffc
c000199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019a2:	31 c0                	xor    eax,eax
c00019a4:	8b 14 85 84 f6 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe097c]
c00019ab:	85 d2                	test   edx,edx
c00019ad:	74 0e                	je     c00019bd <dlmallinfo+0x4c>
c00019af:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019b2:	45                   	inc    ebp
c00019b3:	83 e6 fc             	and    esi,0xfffffffc
c00019b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019b9:	01 f1                	add    ecx,esi
c00019bb:	eb ee                	jmp    c00019ab <dlmallinfo+0x3a>
c00019bd:	40                   	inc    eax
c00019be:	83 f8 0a             	cmp    eax,0xa
c00019c1:	75 e1                	jne    c00019a4 <dlmallinfo+0x33>
c00019c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019c7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ce:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019d1:	b8 b4 f6 01 c0       	mov    eax,0xc001f6b4
c00019d6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019d9:	39 f0                	cmp    eax,esi
c00019db:	74 10                	je     c00019ed <dlmallinfo+0x7c>
c00019dd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019e0:	ff 04 24             	inc    DWORD PTR [esp]
c00019e3:	83 e7 fc             	and    edi,0xfffffffc
c00019e6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019e9:	01 fa                	add    edx,edi
c00019eb:	eb ec                	jmp    c00019d9 <dlmallinfo+0x68>
c00019ed:	83 c0 08             	add    eax,0x8
c00019f0:	3d ac f9 01 c0       	cmp    eax,0xc001f9ac
c00019f5:	75 df                	jne    c00019d6 <dlmallinfo+0x65>
c00019f7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019fa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019fd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a00:	a1 e8 f9 01 c0       	mov    eax,ds:0xc001f9e8
c0001a05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a08:	89 03                	mov    DWORD PTR [ebx],eax
c0001a0a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a0d:	8b 35 d0 f9 01 c0    	mov    esi,DWORD PTR ds:0xc001f9d0
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a18:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a1b:	8b 35 e4 f9 01 c0    	mov    esi,DWORD PTR ds:0xc001f9e4
c0001a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a25:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a2b:	8b 35 f4 f9 01 c0    	mov    esi,DWORD PTR ds:0xc001f9f4
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a36:	83 c4 08             	add    esp,0x8
c0001a39:	5b                   	pop    ebx
c0001a3a:	5e                   	pop    esi
c0001a3b:	5f                   	pop    edi
c0001a3c:	5d                   	pop    ebp
c0001a3d:	c2 04 00             	ret    0x4

c0001a40 <dlmalloc_stats>:
c0001a40:	83 ec 30             	sub    esp,0x30
c0001a43:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a47:	50                   	push   eax
c0001a48:	e8 24 ff ff ff       	call   c0001971 <dlmallinfo>
c0001a4d:	83 c4 30             	add    esp,0x30
c0001a50:	c3                   	ret    

c0001a51 <dlmallopt>:
c0001a51:	56                   	push   esi
c0001a52:	b8 80 f6 01 c0       	mov    eax,0xc001f680
c0001a57:	53                   	push   ebx
c0001a58:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a60:	e8 4d f1 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001a65:	8d 46 04             	lea    eax,[esi+0x4]
c0001a68:	83 f8 05             	cmp    eax,0x5
c0001a6b:	77 67                	ja     c0001ad4 <dlmallopt+0x83>
c0001a6d:	ff 24 85 c4 c9 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe363c]
c0001a74:	83 fb 50             	cmp    ebx,0x50
c0001a77:	77 5b                	ja     c0001ad4 <dlmallopt+0x83>
c0001a79:	ba 08 00 00 00       	mov    edx,0x8
c0001a7e:	85 db                	test   ebx,ebx
c0001a80:	74 12                	je     c0001a94 <dlmallopt+0x43>
c0001a82:	83 c3 0b             	add    ebx,0xb
c0001a85:	ba 10 00 00 00       	mov    edx,0x10
c0001a8a:	83 fb 0f             	cmp    ebx,0xf
c0001a8d:	76 05                	jbe    c0001a94 <dlmallopt+0x43>
c0001a8f:	89 da                	mov    edx,ebx
c0001a91:	83 e2 f8             	and    edx,0xfffffff8
c0001a94:	a1 80 f6 01 c0       	mov    eax,ds:0xc001f680
c0001a99:	83 e0 03             	and    eax,0x3
c0001a9c:	09 d0                	or     eax,edx
c0001a9e:	a3 80 f6 01 c0       	mov    ds:0xc001f680,eax
c0001aa3:	eb 31                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aa5:	89 1d c4 f9 01 c0    	mov    DWORD PTR ds:0xc001f9c4,ebx
c0001aab:	eb 06                	jmp    c0001ab3 <dlmallopt+0x62>
c0001aad:	89 1d c8 f9 01 c0    	mov    DWORD PTR ds:0xc001f9c8,ebx
c0001ab3:	be 01 00 00 00       	mov    esi,0x1
c0001ab8:	eb 1c                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aba:	89 1d cc f9 01 c0    	mov    DWORD PTR ds:0xc001f9cc,ebx
c0001ac0:	eb f1                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ac2:	31 f6                	xor    esi,esi
c0001ac4:	85 db                	test   ebx,ebx
c0001ac6:	75 0e                	jne    c0001ad6 <dlmallopt+0x85>
c0001ac8:	c7 05 d4 f9 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001f9d4,0x0
c0001ad2:	eb df                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ad4:	31 f6                	xor    esi,esi
c0001ad6:	89 f0                	mov    eax,esi
c0001ad8:	5b                   	pop    ebx
c0001ad9:	5e                   	pop    esi
c0001ada:	c3                   	ret    
c0001adb:	90                   	nop

c0001adc <isblank>:
c0001adc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ae1:	74 09                	je     c0001aec <isblank+0x10>
c0001ae3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ae8:	75 0a                	jne    c0001af4 <isblank+0x18>
c0001aea:	66 90                	xchg   ax,ax
c0001aec:	b8 01 00 00 00       	mov    eax,0x1
c0001af1:	c3                   	ret    
c0001af2:	66 90                	xchg   ax,ax
c0001af4:	b8 00 00 00 00       	mov    eax,0x0
c0001af9:	c3                   	ret    
c0001afa:	66 90                	xchg   ax,ax

c0001afc <iscntrl>:
c0001afc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b01:	7e 09                	jle    c0001b0c <iscntrl+0x10>
c0001b03:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b08:	75 0a                	jne    c0001b14 <iscntrl+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <isdigit>:
c0001b1c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b21:	7e 0d                	jle    c0001b30 <isdigit+0x14>
c0001b23:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b28:	7f 06                	jg     c0001b30 <isdigit+0x14>
c0001b2a:	b8 01 00 00 00       	mov    eax,0x1
c0001b2f:	c3                   	ret    
c0001b30:	b8 00 00 00 00       	mov    eax,0x0
c0001b35:	c3                   	ret    
c0001b36:	66 90                	xchg   ax,ax

c0001b38 <islower>:
c0001b38:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b3d:	7e 0d                	jle    c0001b4c <islower+0x14>
c0001b3f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b44:	7f 06                	jg     c0001b4c <islower+0x14>
c0001b46:	b8 01 00 00 00       	mov    eax,0x1
c0001b4b:	c3                   	ret    
c0001b4c:	b8 00 00 00 00       	mov    eax,0x0
c0001b51:	c3                   	ret    
c0001b52:	66 90                	xchg   ax,ax

c0001b54 <isspace>:
c0001b54:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b59:	7c 19                	jl     c0001b74 <isspace+0x20>
c0001b5b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b60:	7e 0a                	jle    c0001b6c <isspace+0x18>
c0001b62:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b67:	75 0b                	jne    c0001b74 <isspace+0x20>
c0001b69:	8d 76 00             	lea    esi,[esi+0x0]
c0001b6c:	b8 01 00 00 00       	mov    eax,0x1
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax
c0001b74:	b8 00 00 00 00       	mov    eax,0x0
c0001b79:	c3                   	ret    
c0001b7a:	66 90                	xchg   ax,ax

c0001b7c <isupper>:
c0001b7c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b81:	7e 0d                	jle    c0001b90 <isupper+0x14>
c0001b83:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b88:	7f 06                	jg     c0001b90 <isupper+0x14>
c0001b8a:	b8 01 00 00 00       	mov    eax,0x1
c0001b8f:	c3                   	ret    
c0001b90:	b8 00 00 00 00       	mov    eax,0x0
c0001b95:	c3                   	ret    
c0001b96:	66 90                	xchg   ax,ax

c0001b98 <isalpha>:
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 db ff ff ff       	call   c0001b7c <isupper>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	75 10                	jne    c0001bb8 <isalpha+0x20>
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 87 ff ff ff       	call   c0001b38 <islower>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	74 08                	je     c0001bc0 <isalpha+0x28>
c0001bb8:	b8 01 00 00 00       	mov    eax,0x1
c0001bbd:	c3                   	ret    
c0001bbe:	66 90                	xchg   ax,ax
c0001bc0:	b8 00 00 00 00       	mov    eax,0x0
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax

c0001bc8 <isalnum>:
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 c7 ff ff ff       	call   c0001b98 <isalpha>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	75 10                	jne    c0001be8 <isalnum+0x20>
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 3b ff ff ff       	call   c0001b1c <isdigit>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	74 08                	je     c0001bf0 <isalnum+0x28>
c0001be8:	b8 01 00 00 00       	mov    eax,0x1
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax
c0001bf0:	b8 00 00 00 00       	mov    eax,0x0
c0001bf5:	c3                   	ret    
c0001bf6:	66 90                	xchg   ax,ax

c0001bf8 <ispunct>:
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 c7 ff ff ff       	call   c0001bc8 <isalnum>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 28                	jne    c0001c30 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 43 ff ff ff       	call   c0001b54 <isspace>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 18                	jne    c0001c30 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 db fe ff ff       	call   c0001afc <iscntrl>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 08                	jne    c0001c30 <ispunct+0x38>
c0001c28:	b8 01 00 00 00       	mov    eax,0x1
c0001c2d:	c3                   	ret    
c0001c2e:	66 90                	xchg   ax,ax
c0001c30:	b8 00 00 00 00       	mov    eax,0x0
c0001c35:	c3                   	ret    
c0001c36:	66 90                	xchg   ax,ax

c0001c38 <isgraph>:
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 87 ff ff ff       	call   c0001bc8 <isalnum>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 10                	jne    c0001c58 <isgraph+0x20>
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 a7 ff ff ff       	call   c0001bf8 <ispunct>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	74 08                	je     c0001c60 <isgraph+0x28>
c0001c58:	b8 01 00 00 00       	mov    eax,0x1
c0001c5d:	c3                   	ret    
c0001c5e:	66 90                	xchg   ax,ax
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isprint>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 c7 ff ff ff       	call   c0001c38 <isgraph>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 08                	jne    c0001c80 <isprint+0x18>
c0001c78:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c7d:	75 09                	jne    c0001c88 <isprint+0x20>
c0001c7f:	90                   	nop
c0001c80:	b8 01 00 00 00       	mov    eax,0x1
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax
c0001c88:	b8 00 00 00 00       	mov    eax,0x0
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax

c0001c90 <isxdigit>:
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 83 fe ff ff       	call   c0001b1c <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	75 20                	jne    c0001cc0 <isxdigit+0x30>
c0001ca0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ca5:	7e 09                	jle    c0001cb0 <isxdigit+0x20>
c0001ca7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cac:	7e 12                	jle    c0001cc0 <isxdigit+0x30>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 11                	jle    c0001cc8 <isxdigit+0x38>
c0001cb7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cbc:	7f 0a                	jg     c0001cc8 <isxdigit+0x38>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 01 00 00 00       	mov    eax,0x1
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 00 00 00 00       	mov    eax,0x0
c0001ccd:	c3                   	ret    

c0001cce <disk_status>:
c0001cce:	31 c0                	xor    eax,eax
c0001cd0:	c3                   	ret    

c0001cd1 <disk_initialize>:
c0001cd1:	31 c0                	xor    eax,eax
c0001cd3:	c3                   	ret    

c0001cd4 <disk_read>:
c0001cd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cd9:	0f b6 04 85 40 38 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc7c0]
c0001ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ce5:	e9 6a 4d 01 00       	jmp    c0016a54 <fatWrapperReadDisk>

c0001cea <disk_write>:
c0001cea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cef:	0f b6 04 85 40 38 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc7c0]
c0001cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cfb:	e9 98 4d 01 00       	jmp    c0016a98 <fatWrapperWriteDisk>

c0001d00 <disk_ioctl>:
c0001d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0e:	0f b6 04 85 40 38 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc7c0]
c0001d16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1a:	e9 bd 4d 01 00       	jmp    c0016adc <fatWrapperIoctl>

c0001d1f <ld_word>:
c0001d1f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d26:	c1 e2 08             	shl    edx,0x8
c0001d29:	09 d0                	or     eax,edx
c0001d2b:	c3                   	ret    

c0001d2c <ld_dword>:
c0001d2c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d30:	89 d1                	mov    ecx,edx
c0001d32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d36:	c1 e1 08             	shl    ecx,0x8
c0001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d3c:	09 ca                	or     edx,ecx
c0001d3e:	c1 e2 08             	shl    edx,0x8
c0001d41:	09 d0                	or     eax,edx
c0001d43:	c3                   	ret    

c0001d44 <st_word>:
c0001d44:	66 89 10             	mov    WORD PTR [eax],dx
c0001d47:	c3                   	ret    

c0001d48 <st_dword>:
c0001d48:	89 10                	mov    DWORD PTR [eax],edx
c0001d4a:	c3                   	ret    

c0001d4b <mem_cpy>:
c0001d4b:	85 c9                	test   ecx,ecx
c0001d4d:	74 10                	je     c0001d5f <mem_cpy+0x14>
c0001d4f:	57                   	push   edi
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	56                   	push   esi
c0001d53:	89 c7                	mov    edi,eax
c0001d55:	89 d6                	mov    esi,edx
c0001d57:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d58:	39 f9                	cmp    ecx,edi
c0001d5a:	75 fb                	jne    c0001d57 <mem_cpy+0xc>
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    
c0001d5f:	c3                   	ret    

c0001d60 <mem_set>:
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	40                   	inc    eax
c0001d63:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d66:	39 c8                	cmp    eax,ecx
c0001d68:	75 f8                	jne    c0001d62 <mem_set+0x2>
c0001d6a:	c3                   	ret    

c0001d6b <mem_cmp>:
c0001d6b:	57                   	push   edi
c0001d6c:	56                   	push   esi
c0001d6d:	89 c6                	mov    esi,eax
c0001d6f:	53                   	push   ebx
c0001d70:	46                   	inc    esi
c0001d71:	42                   	inc    edx
c0001d72:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d76:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d7a:	29 fb                	sub    ebx,edi
c0001d7c:	89 cf                	mov    edi,ecx
c0001d7e:	29 f7                	sub    edi,esi
c0001d80:	01 c7                	add    edi,eax
c0001d82:	74 04                	je     c0001d88 <mem_cmp+0x1d>
c0001d84:	85 db                	test   ebx,ebx
c0001d86:	74 e8                	je     c0001d70 <mem_cmp+0x5>
c0001d88:	89 d8                	mov    eax,ebx
c0001d8a:	5b                   	pop    ebx
c0001d8b:	5e                   	pop    esi
c0001d8c:	5f                   	pop    edi
c0001d8d:	c3                   	ret    

c0001d8e <chk_chr>:
c0001d8e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d91:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d94:	74 07                	je     c0001d9d <chk_chr+0xf>
c0001d96:	39 d1                	cmp    ecx,edx
c0001d98:	74 03                	je     c0001d9d <chk_chr+0xf>
c0001d9a:	40                   	inc    eax
c0001d9b:	eb f1                	jmp    c0001d8e <chk_chr>
c0001d9d:	89 c8                	mov    eax,ecx
c0001d9f:	c3                   	ret    

c0001da0 <dbc_1st>:
c0001da0:	31 c0                	xor    eax,eax
c0001da2:	c3                   	ret    

c0001da3 <dbc_2nd>:
c0001da3:	31 c0                	xor    eax,eax
c0001da5:	c3                   	ret    

c0001da6 <tchar2uni>:
c0001da6:	57                   	push   edi
c0001da7:	89 c7                	mov    edi,eax
c0001da9:	56                   	push   esi
c0001daa:	53                   	push   ebx
c0001dab:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001daf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001db2:	84 c9                	test   cl,cl
c0001db4:	78 0a                	js     c0001dc0 <tchar2uni+0x1a>
c0001db6:	0f b6 d1             	movzx  edx,cl
c0001db9:	89 f3                	mov    ebx,esi
c0001dbb:	e9 9f 00 00 00       	jmp    c0001e5f <tchar2uni+0xb9>
c0001dc0:	88 ca                	mov    dl,cl
c0001dc2:	83 e2 e0             	and    edx,0xffffffe0
c0001dc5:	80 fa c0             	cmp    dl,0xc0
c0001dc8:	75 0c                	jne    c0001dd6 <tchar2uni+0x30>
c0001dca:	89 ca                	mov    edx,ecx
c0001dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dd1:	83 e2 1f             	and    edx,0x1f
c0001dd4:	eb 2e                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dd6:	88 ca                	mov    dl,cl
c0001dd8:	83 e2 f0             	and    edx,0xfffffff0
c0001ddb:	80 fa e0             	cmp    dl,0xe0
c0001dde:	75 0c                	jne    c0001dec <tchar2uni+0x46>
c0001de0:	89 ca                	mov    edx,ecx
c0001de2:	b9 02 00 00 00       	mov    ecx,0x2
c0001de7:	83 e2 0f             	and    edx,0xf
c0001dea:	eb 18                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dec:	88 ca                	mov    dl,cl
c0001dee:	83 e2 f8             	and    edx,0xfffffff8
c0001df1:	88 d0                	mov    al,dl
c0001df3:	83 ca ff             	or     edx,0xffffffff
c0001df6:	3c f0                	cmp    al,0xf0
c0001df8:	75 6c                	jne    c0001e66 <tchar2uni+0xc0>
c0001dfa:	89 ca                	mov    edx,ecx
c0001dfc:	b9 03 00 00 00       	mov    ecx,0x3
c0001e01:	83 e2 07             	and    edx,0x7
c0001e04:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e08:	46                   	inc    esi
c0001e09:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e0c:	88 c8                	mov    al,cl
c0001e0e:	83 e0 c0             	and    eax,0xffffffc0
c0001e11:	3c 80                	cmp    al,0x80
c0001e13:	75 4e                	jne    c0001e63 <tchar2uni+0xbd>
c0001e15:	c1 e2 06             	shl    edx,0x6
c0001e18:	83 e1 3f             	and    ecx,0x3f
c0001e1b:	09 ca                	or     edx,ecx
c0001e1d:	39 de                	cmp    esi,ebx
c0001e1f:	75 e7                	jne    c0001e08 <tchar2uni+0x62>
c0001e21:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e24:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e2a:	77 37                	ja     c0001e63 <tchar2uni+0xbd>
c0001e2c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e32:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e38:	76 29                	jbe    c0001e63 <tchar2uni+0xbd>
c0001e3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e40:	76 1d                	jbe    c0001e5f <tchar2uni+0xb9>
c0001e42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e4e:	c1 e1 06             	shl    ecx,0x6
c0001e51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e57:	09 ca                	or     edx,ecx
c0001e59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e5f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e61:	eb 03                	jmp    c0001e66 <tchar2uni+0xc0>
c0001e63:	83 ca ff             	or     edx,0xffffffff
c0001e66:	5b                   	pop    ebx
c0001e67:	89 d0                	mov    eax,edx
c0001e69:	5e                   	pop    esi
c0001e6a:	5f                   	pop    edi
c0001e6b:	c3                   	ret    

c0001e6c <put_utf>:
c0001e6c:	53                   	push   ebx
c0001e6d:	83 f8 7f             	cmp    eax,0x7f
c0001e70:	89 c3                	mov    ebx,eax
c0001e72:	b0 00                	mov    al,0x0
c0001e74:	77 11                	ja     c0001e87 <put_utf+0x1b>
c0001e76:	85 c9                	test   ecx,ecx
c0001e78:	0f 84 e5 00 00 00    	je     c0001f63 <put_utf+0xf7>
c0001e7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e80:	b0 01                	mov    al,0x1
c0001e82:	e9 dc 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001e87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e8d:	77 23                	ja     c0001eb2 <put_utf+0x46>
c0001e8f:	83 f9 01             	cmp    ecx,0x1
c0001e92:	0f 86 cb 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 c8 c0             	or     eax,0xffffffc0
c0001ea6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ea9:	88 02                	mov    BYTE PTR [edx],al
c0001eab:	b0 02                	mov    al,0x2
c0001ead:	e9 b1 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001eb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001eb8:	77 40                	ja     c0001efa <put_utf+0x8e>
c0001eba:	83 f9 02             	cmp    ecx,0x2
c0001ebd:	0f 86 a0 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ec3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ec9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ecf:	0f 86 8e 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 c8 e0             	or     eax,0xffffffe0
c0001edd:	88 02                	mov    BYTE PTR [edx],al
c0001edf:	89 d8                	mov    eax,ebx
c0001ee1:	83 e3 3f             	and    ebx,0x3f
c0001ee4:	c1 e8 06             	shr    eax,0x6
c0001ee7:	83 cb 80             	or     ebx,0xffffff80
c0001eea:	83 e0 3f             	and    eax,0x3f
c0001eed:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ef0:	83 c8 80             	or     eax,0xffffff80
c0001ef3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef6:	b0 03                	mov    al,0x3
c0001ef8:	eb 69                	jmp    c0001f63 <put_utf+0xf7>
c0001efa:	83 f9 03             	cmp    ecx,0x3
c0001efd:	76 64                	jbe    c0001f63 <put_utf+0xf7>
c0001eff:	89 d9                	mov    ecx,ebx
c0001f01:	0f b7 c3             	movzx  eax,bx
c0001f04:	66 31 c9             	xor    cx,cx
c0001f07:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f0d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f13:	c1 e9 06             	shr    ecx,0x6
c0001f16:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f1c:	77 43                	ja     c0001f61 <put_utf+0xf5>
c0001f1e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f24:	77 3b                	ja     c0001f61 <put_utf+0xf5>
c0001f26:	09 cb                	or     ebx,ecx
c0001f28:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f2e:	89 d8                	mov    eax,ebx
c0001f30:	c1 e8 12             	shr    eax,0x12
c0001f33:	83 c8 f0             	or     eax,0xfffffff0
c0001f36:	88 02                	mov    BYTE PTR [edx],al
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	c1 e8 0c             	shr    eax,0xc
c0001f3d:	83 e0 3f             	and    eax,0x3f
c0001f40:	83 c8 80             	or     eax,0xffffff80
c0001f43:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f46:	89 d8                	mov    eax,ebx
c0001f48:	83 e3 3f             	and    ebx,0x3f
c0001f4b:	c1 e8 06             	shr    eax,0x6
c0001f4e:	83 cb 80             	or     ebx,0xffffff80
c0001f51:	83 e0 3f             	and    eax,0x3f
c0001f54:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f57:	83 c8 80             	or     eax,0xffffff80
c0001f5a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f5d:	b0 04                	mov    al,0x4
c0001f5f:	eb 02                	jmp    c0001f63 <put_utf+0xf7>
c0001f61:	31 c0                	xor    eax,eax
c0001f63:	5b                   	pop    ebx
c0001f64:	c3                   	ret    

c0001f65 <clst2sect>:
c0001f65:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f6b:	83 ea 02             	sub    edx,0x2
c0001f6e:	39 ca                	cmp    edx,ecx
c0001f70:	76 0d                	jbe    c0001f7f <clst2sect+0x1a>
c0001f72:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f76:	0f af d1             	imul   edx,ecx
c0001f79:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f7c:	89 d0                	mov    eax,edx
c0001f7e:	c3                   	ret    
c0001f7f:	31 c0                	xor    eax,eax
c0001f81:	c3                   	ret    

c0001f82 <pick_lfn>:
c0001f82:	55                   	push   ebp
c0001f83:	57                   	push   edi
c0001f84:	56                   	push   esi
c0001f85:	89 d6                	mov    esi,edx
c0001f87:	53                   	push   ebx
c0001f88:	89 c3                	mov    ebx,eax
c0001f8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8d:	e8 8d fd ff ff       	call   c0001d1f <ld_word>
c0001f92:	66 85 c0             	test   ax,ax
c0001f95:	74 04                	je     c0001f9b <pick_lfn+0x19>
c0001f97:	31 c0                	xor    eax,eax
c0001f99:	eb 5c                	jmp    c0001ff7 <pick_lfn+0x75>
c0001f9b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa6:	31 ff                	xor    edi,edi
c0001fa8:	49                   	dec    ecx
c0001fa9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fac:	0f b6 87 20 cb 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe34e0]
c0001fb3:	01 f0                	add    eax,esi
c0001fb5:	e8 65 fd ff ff       	call   c0001d1f <ld_word>
c0001fba:	66 85 ed             	test   bp,bp
c0001fbd:	74 11                	je     c0001fd0 <pick_lfn+0x4e>
c0001fbf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc5:	77 d0                	ja     c0001f97 <pick_lfn+0x15>
c0001fc7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fcb:	89 c5                	mov    ebp,eax
c0001fcd:	41                   	inc    ecx
c0001fce:	eb 04                	jmp    c0001fd4 <pick_lfn+0x52>
c0001fd0:	66 40                	inc    ax
c0001fd2:	75 c3                	jne    c0001f97 <pick_lfn+0x15>
c0001fd4:	47                   	inc    edi
c0001fd5:	83 ff 0d             	cmp    edi,0xd
c0001fd8:	75 d2                	jne    c0001fac <pick_lfn+0x2a>
c0001fda:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdd:	74 13                	je     c0001ff2 <pick_lfn+0x70>
c0001fdf:	66 85 ed             	test   bp,bp
c0001fe2:	74 0e                	je     c0001ff2 <pick_lfn+0x70>
c0001fe4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fea:	77 ab                	ja     c0001f97 <pick_lfn+0x15>
c0001fec:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff2:	b8 01 00 00 00       	mov    eax,0x1
c0001ff7:	5b                   	pop    ebx
c0001ff8:	5e                   	pop    esi
c0001ff9:	5f                   	pop    edi
c0001ffa:	5d                   	pop    ebp
c0001ffb:	c3                   	ret    

c0001ffc <put_lfn>:
c0001ffc:	55                   	push   ebp
c0001ffd:	31 ed                	xor    ebp,ebp
c0001fff:	57                   	push   edi
c0002000:	89 d7                	mov    edi,edx
c0002002:	56                   	push   esi
c0002003:	31 f6                	xor    esi,esi
c0002005:	53                   	push   ebx
c0002006:	83 ec 08             	sub    esp,0x8
c0002009:	89 04 24             	mov    DWORD PTR [esp],eax
c000200c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002014:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002020:	31 d2                	xor    edx,edx
c0002022:	e8 1d fd ff ff       	call   c0001d44 <st_word>
c0002027:	0f b6 d9             	movzx  ebx,cl
c000202a:	4b                   	dec    ebx
c000202b:	6b db 0d             	imul   ebx,ebx,0xd
c000202e:	66 83 fe ff          	cmp    si,0xffff
c0002032:	74 08                	je     c000203c <put_lfn+0x40>
c0002034:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002037:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000203b:	43                   	inc    ebx
c000203c:	0f b6 85 20 cb 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe34e0]
c0002043:	0f b7 d6             	movzx  edx,si
c0002046:	01 f8                	add    eax,edi
c0002048:	e8 f7 fc ff ff       	call   c0001d44 <st_word>
c000204d:	66 85 f6             	test   si,si
c0002050:	75 03                	jne    c0002055 <put_lfn+0x59>
c0002052:	83 ce ff             	or     esi,0xffffffff
c0002055:	45                   	inc    ebp
c0002056:	83 fd 0d             	cmp    ebp,0xd
c0002059:	75 d3                	jne    c000202e <put_lfn+0x32>
c000205b:	66 46                	inc    si
c000205d:	74 0a                	je     c0002069 <put_lfn+0x6d>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002067:	75 09                	jne    c0002072 <put_lfn+0x76>
c0002069:	88 c8                	mov    al,cl
c000206b:	83 c8 40             	or     eax,0x40
c000206e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002072:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002076:	88 07                	mov    BYTE PTR [edi],al
c0002078:	83 c4 08             	add    esp,0x8
c000207b:	5b                   	pop    ebx
c000207c:	5e                   	pop    esi
c000207d:	5f                   	pop    edi
c000207e:	5d                   	pop    ebp
c000207f:	c3                   	ret    

c0002080 <gen_numname>:
c0002080:	57                   	push   edi
c0002081:	89 cf                	mov    edi,ecx
c0002083:	56                   	push   esi
c0002084:	b9 0b 00 00 00       	mov    ecx,0xb
c0002089:	53                   	push   ebx
c000208a:	89 c6                	mov    esi,eax
c000208c:	83 ec 10             	sub    esp,0x10
c000208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002093:	e8 b3 fc ff ff       	call   c0001d4b <mem_cpy>
c0002098:	83 fb 05             	cmp    ebx,0x5
c000209b:	76 2d                	jbe    c00020ca <gen_numname+0x4a>
c000209d:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a0:	66 85 c0             	test   ax,ax
c00020a3:	74 25                	je     c00020ca <gen_numname+0x4a>
c00020a5:	83 c7 02             	add    edi,0x2
c00020a8:	ba 10 00 00 00       	mov    edx,0x10
c00020ad:	01 db                	add    ebx,ebx
c00020af:	89 c1                	mov    ecx,eax
c00020b1:	66 d1 e8             	shr    ax,1
c00020b4:	83 e1 01             	and    ecx,0x1
c00020b7:	01 cb                	add    ebx,ecx
c00020b9:	0f ba e3 10          	bt     ebx,0x10
c00020bd:	73 06                	jae    c00020c5 <gen_numname+0x45>
c00020bf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c5:	4a                   	dec    edx
c00020c6:	75 e5                	jne    c00020ad <gen_numname+0x2d>
c00020c8:	eb d3                	jmp    c000209d <gen_numname+0x1d>
c00020ca:	b8 07 00 00 00       	mov    eax,0x7
c00020cf:	88 d9                	mov    cl,bl
c00020d1:	83 e1 0f             	and    ecx,0xf
c00020d4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d7:	80 fa 39             	cmp    dl,0x39
c00020da:	76 03                	jbe    c00020df <gen_numname+0x5f>
c00020dc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020df:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e6:	89 da                	mov    edx,ebx
c00020e8:	c1 ea 04             	shr    edx,0x4
c00020eb:	83 fb 0f             	cmp    ebx,0xf
c00020ee:	76 06                	jbe    c00020f6 <gen_numname+0x76>
c00020f0:	89 c8                	mov    eax,ecx
c00020f2:	89 d3                	mov    ebx,edx
c00020f4:	eb d9                	jmp    c00020cf <gen_numname+0x4f>
c00020f6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002100:	8d 04 16             	lea    eax,[esi+edx*1]
c0002103:	39 ca                	cmp    edx,ecx
c0002105:	73 18                	jae    c000211f <gen_numname+0x9f>
c0002107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210a:	3c 20                	cmp    al,0x20
c000210c:	74 11                	je     c000211f <gen_numname+0x9f>
c000210e:	e8 8d fc ff ff       	call   c0001da0 <dbc_1st>
c0002113:	85 c0                	test   eax,eax
c0002115:	74 05                	je     c000211c <gen_numname+0x9c>
c0002117:	39 d3                	cmp    ebx,edx
c0002119:	74 04                	je     c000211f <gen_numname+0x9f>
c000211b:	42                   	inc    edx
c000211c:	42                   	inc    edx
c000211d:	eb e1                	jmp    c0002100 <gen_numname+0x80>
c000211f:	b0 20                	mov    al,0x20
c0002121:	83 f9 07             	cmp    ecx,0x7
c0002124:	77 05                	ja     c000212b <gen_numname+0xab>
c0002126:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212a:	41                   	inc    ecx
c000212b:	42                   	inc    edx
c000212c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002130:	83 fa 07             	cmp    edx,0x7
c0002133:	76 ea                	jbe    c000211f <gen_numname+0x9f>
c0002135:	83 c4 10             	add    esp,0x10
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	c3                   	ret    

c000213c <sum_sfn>:
c000213c:	31 c9                	xor    ecx,ecx
c000213e:	31 d2                	xor    edx,edx
c0002140:	d0 ca                	ror    dl,1
c0002142:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002145:	41                   	inc    ecx
c0002146:	83 f9 0b             	cmp    ecx,0xb
c0002149:	75 f5                	jne    c0002140 <sum_sfn+0x4>
c000214b:	88 d0                	mov    al,dl
c000214d:	c3                   	ret    

c000214e <get_ldnumber>:
c000214e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002150:	85 d2                	test   edx,edx
c0002152:	74 14                	je     c0002168 <get_ldnumber+0x1a>
c0002154:	56                   	push   esi
c0002155:	53                   	push   ebx
c0002156:	89 d3                	mov    ebx,edx
c0002158:	43                   	inc    ebx
c0002159:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215c:	80 f9 1f             	cmp    cl,0x1f
c000215f:	76 0d                	jbe    c000216e <get_ldnumber+0x20>
c0002161:	80 f9 3a             	cmp    cl,0x3a
c0002164:	75 f2                	jne    c0002158 <get_ldnumber+0xa>
c0002166:	eb 0a                	jmp    c0002172 <get_ldnumber+0x24>
c0002168:	83 c9 ff             	or     ecx,0xffffffff
c000216b:	89 c8                	mov    eax,ecx
c000216d:	c3                   	ret    
c000216e:	31 c9                	xor    ecx,ecx
c0002170:	eb 24                	jmp    c0002196 <get_ldnumber+0x48>
c0002172:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002175:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002178:	80 f9 09             	cmp    cl,0x9
c000217b:	77 16                	ja     c0002193 <get_ldnumber+0x45>
c000217d:	83 c2 02             	add    edx,0x2
c0002180:	83 c9 ff             	or     ecx,0xffffffff
c0002183:	39 d3                	cmp    ebx,edx
c0002185:	75 0f                	jne    c0002196 <get_ldnumber+0x48>
c0002187:	89 f2                	mov    edx,esi
c0002189:	89 18                	mov    DWORD PTR [eax],ebx
c000218b:	0f be ca             	movsx  ecx,dl
c000218e:	83 e9 30             	sub    ecx,0x30
c0002191:	eb 03                	jmp    c0002196 <get_ldnumber+0x48>
c0002193:	83 c9 ff             	or     ecx,0xffffffff
c0002196:	89 c8                	mov    eax,ecx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <validate>:
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 d6                	mov    esi,edx
c000219f:	51                   	push   ecx
c00021a0:	85 c0                	test   eax,eax
c00021a2:	75 09                	jne    c00021ad <validate+0x12>
c00021a4:	b8 09 00 00 00       	mov    eax,0x9
c00021a9:	31 c9                	xor    ecx,ecx
c00021ab:	eb 2f                	jmp    c00021dc <validate+0x41>
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b1:	85 c0                	test   eax,eax
c00021b3:	74 ef                	je     c00021a4 <validate+0x9>
c00021b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021b8:	74 ea                	je     c00021a4 <validate+0x9>
c00021ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021be:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c2:	75 e0                	jne    c00021a4 <validate+0x9>
c00021c4:	83 ec 0c             	sub    esp,0xc
c00021c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021cb:	50                   	push   eax
c00021cc:	e8 fd fa ff ff       	call   c0001cce <disk_status>
c00021d1:	83 c4 10             	add    esp,0x10
c00021d4:	a8 01                	test   al,0x1
c00021d6:	75 cc                	jne    c00021a4 <validate+0x9>
c00021d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021de:	5a                   	pop    edx
c00021df:	5b                   	pop    ebx
c00021e0:	5e                   	pop    esi
c00021e1:	c3                   	ret    

c00021e2 <sync_window>:
c00021e2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021e6:	74 58                	je     c0002240 <sync_window+0x5e>
c00021e8:	56                   	push   esi
c00021e9:	53                   	push   ebx
c00021ea:	8d 70 34             	lea    esi,[eax+0x34]
c00021ed:	51                   	push   ecx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	6a 01                	push   0x1
c00021f2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021f5:	56                   	push   esi
c00021f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021fa:	50                   	push   eax
c00021fb:	e8 ea fa ff ff       	call   c0001cea <disk_write>
c0002200:	83 c4 10             	add    esp,0x10
c0002203:	ba 01 00 00 00       	mov    edx,0x1
c0002208:	85 c0                	test   eax,eax
c000220a:	75 2e                	jne    c000223a <sync_window+0x58>
c000220c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000220f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002212:	89 c1                	mov    ecx,eax
c0002214:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002218:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000221b:	39 d1                	cmp    ecx,edx
c000221d:	73 19                	jae    c0002238 <sync_window+0x56>
c000221f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002223:	75 13                	jne    c0002238 <sync_window+0x56>
c0002225:	6a 01                	push   0x1
c0002227:	01 d0                	add    eax,edx
c0002229:	50                   	push   eax
c000222a:	56                   	push   esi
c000222b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000222f:	50                   	push   eax
c0002230:	e8 b5 fa ff ff       	call   c0001cea <disk_write>
c0002235:	83 c4 10             	add    esp,0x10
c0002238:	31 d2                	xor    edx,edx
c000223a:	89 d0                	mov    eax,edx
c000223c:	5a                   	pop    edx
c000223d:	5b                   	pop    ebx
c000223e:	5e                   	pop    esi
c000223f:	c3                   	ret    
c0002240:	31 d2                	xor    edx,edx
c0002242:	89 d0                	mov    eax,edx
c0002244:	c3                   	ret    

c0002245 <move_window>:
c0002245:	57                   	push   edi
c0002246:	56                   	push   esi
c0002247:	31 f6                	xor    esi,esi
c0002249:	53                   	push   ebx
c000224a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000224d:	74 32                	je     c0002281 <move_window+0x3c>
c000224f:	89 c3                	mov    ebx,eax
c0002251:	89 d7                	mov    edi,edx
c0002253:	e8 8a ff ff ff       	call   c00021e2 <sync_window>
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	75 23                	jne    c0002281 <move_window+0x3c>
c000225e:	6a 01                	push   0x1
c0002260:	8d 43 34             	lea    eax,[ebx+0x34]
c0002263:	57                   	push   edi
c0002264:	50                   	push   eax
c0002265:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002269:	50                   	push   eax
c000226a:	e8 65 fa ff ff       	call   c0001cd4 <disk_read>
c000226f:	83 c4 10             	add    esp,0x10
c0002272:	85 c0                	test   eax,eax
c0002274:	74 08                	je     c000227e <move_window+0x39>
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	83 cf ff             	or     edi,0xffffffff
c000227e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002281:	89 f0                	mov    eax,esi
c0002283:	5b                   	pop    ebx
c0002284:	5e                   	pop    esi
c0002285:	5f                   	pop    edi
c0002286:	c3                   	ret    

c0002287 <check_fs>:
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	83 ec 08             	sub    esp,0x8
c000228d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002291:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002298:	e8 a8 ff ff ff       	call   c0002245 <move_window>
c000229d:	ba 04 00 00 00       	mov    edx,0x4
c00022a2:	85 c0                	test   eax,eax
c00022a4:	75 68                	jne    c000230e <check_fs+0x87>
c00022a6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022ac:	e8 6e fa ff ff       	call   c0001d1f <ld_word>
c00022b1:	ba 03 00 00 00       	mov    edx,0x3
c00022b6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ba:	75 52                	jne    c000230e <check_fs+0x87>
c00022bc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022bf:	8d 50 18             	lea    edx,[eax+0x18]
c00022c2:	80 fa 01             	cmp    dl,0x1
c00022c5:	76 09                	jbe    c00022d0 <check_fs+0x49>
c00022c7:	ba 02 00 00 00       	mov    edx,0x2
c00022cc:	3c eb                	cmp    al,0xeb
c00022ce:	75 3e                	jne    c000230e <check_fs+0x87>
c00022d0:	ba 84 e9 01 c0       	mov    edx,0xc001e984
c00022d5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022d8:	b9 03 00 00 00       	mov    ecx,0x3
c00022dd:	e8 89 fa ff ff       	call   c0001d6b <mem_cmp>
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	85 c0                	test   eax,eax
c00022e6:	74 26                	je     c000230e <check_fs+0x87>
c00022e8:	ba dc c9 01 c0       	mov    edx,0xc001c9dc
c00022ed:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f3:	b9 05 00 00 00       	mov    ecx,0x5
c00022f8:	e8 6e fa ff ff       	call   c0001d6b <mem_cmp>
c00022fd:	31 d2                	xor    edx,edx
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 0b                	je     c000230e <check_fs+0x87>
c0002303:	31 d2                	xor    edx,edx
c0002305:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002309:	0f 95 c2             	setne  dl
c000230c:	01 d2                	add    edx,edx
c000230e:	89 d0                	mov    eax,edx
c0002310:	83 c4 08             	add    esp,0x8
c0002313:	5b                   	pop    ebx
c0002314:	c3                   	ret    

c0002315 <find_volume>:
c0002315:	55                   	push   ebp
c0002316:	57                   	push   edi
c0002317:	56                   	push   esi
c0002318:	89 c6                	mov    esi,eax
c000231a:	53                   	push   ebx
c000231b:	89 d3                	mov    ebx,edx
c000231d:	83 ec 2c             	sub    esp,0x2c
c0002320:	31 d2                	xor    edx,edx
c0002322:	e8 60 ff ff ff       	call   c0002287 <check_fs>
c0002327:	83 f8 02             	cmp    eax,0x2
c000232a:	74 06                	je     c0002332 <find_volume+0x1d>
c000232c:	77 62                	ja     c0002390 <find_volume+0x7b>
c000232e:	85 db                	test   ebx,ebx
c0002330:	74 5e                	je     c0002390 <find_volume+0x7b>
c0002332:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002336:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000233c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002346:	89 cf                	mov    edi,ecx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 e8                	mov    eax,ebp
c000234e:	83 c5 10             	add    ebp,0x10
c0002351:	e8 d6 f9 ff ff       	call   c0001d2c <ld_dword>
c0002356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235a:	89 01                	mov    DWORD PTR [ecx],eax
c000235c:	83 c1 04             	add    ecx,0x4
c000235f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002363:	75 e3                	jne    c0002348 <find_volume+0x33>
c0002365:	31 ed                	xor    ebp,ebp
c0002367:	85 db                	test   ebx,ebx
c0002369:	74 03                	je     c000236e <find_volume+0x59>
c000236b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000236e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002371:	b8 03 00 00 00       	mov    eax,0x3
c0002376:	85 d2                	test   edx,edx
c0002378:	74 0c                	je     c0002386 <find_volume+0x71>
c000237a:	89 f0                	mov    eax,esi
c000237c:	e8 06 ff ff ff       	call   c0002287 <check_fs>
c0002381:	83 f8 01             	cmp    eax,0x1
c0002384:	76 0a                	jbe    c0002390 <find_volume+0x7b>
c0002386:	85 db                	test   ebx,ebx
c0002388:	75 06                	jne    c0002390 <find_volume+0x7b>
c000238a:	45                   	inc    ebp
c000238b:	83 fd 03             	cmp    ebp,0x3
c000238e:	76 de                	jbe    c000236e <find_volume+0x59>
c0002390:	83 c4 2c             	add    esp,0x2c
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	5f                   	pop    edi
c0002396:	5d                   	pop    ebp
c0002397:	c3                   	ret    

c0002398 <mount_volume>:
c0002398:	55                   	push   ebp
c0002399:	89 d5                	mov    ebp,edx
c000239b:	57                   	push   edi
c000239c:	89 cf                	mov    edi,ecx
c000239e:	56                   	push   esi
c000239f:	53                   	push   ebx
c00023a0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023a5:	83 ec 2c             	sub    esp,0x2c
c00023a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ae:	e8 9b fd ff ff       	call   c000214e <get_ldnumber>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	0f 88 d6 02 00 00    	js     c0002691 <mount_volume+0x2f9>
c00023bb:	8b 34 85 20 fa 01 c0 	mov    esi,DWORD PTR [eax*4-0x3ffe05e0]
c00023c2:	89 c2                	mov    edx,eax
c00023c4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023c9:	85 f6                	test   esi,esi
c00023cb:	0f 84 c0 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c00023d1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023d4:	83 e7 fe             	and    edi,0xfffffffe
c00023d7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023da:	74 3a                	je     c0002416 <mount_volume+0x7e>
c00023dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e0:	83 ec 0c             	sub    esp,0xc
c00023e3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023e7:	50                   	push   eax
c00023e8:	e8 e1 f8 ff ff       	call   c0001cce <disk_status>
c00023ed:	83 c4 10             	add    esp,0x10
c00023f0:	a8 01                	test   al,0x1
c00023f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023f6:	75 1e                	jne    c0002416 <mount_volume+0x7e>
c00023f8:	31 db                	xor    ebx,ebx
c00023fa:	89 f9                	mov    ecx,edi
c00023fc:	84 c9                	test   cl,cl
c00023fe:	0f 84 8d 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002404:	a8 04                	test   al,0x4
c0002406:	0f 84 85 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c000240c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002411:	e9 7b 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002416:	83 ec 0c             	sub    esp,0xc
c0002419:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000241c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000241f:	0f b6 c2             	movzx  eax,dl
c0002422:	bb 03 00 00 00       	mov    ebx,0x3
c0002427:	50                   	push   eax
c0002428:	e8 a4 f8 ff ff       	call   c0001cd1 <disk_initialize>
c000242d:	83 c4 10             	add    esp,0x10
c0002430:	a8 01                	test   al,0x1
c0002432:	0f 85 59 02 00 00    	jne    c0002691 <mount_volume+0x2f9>
c0002438:	89 f9                	mov    ecx,edi
c000243a:	84 c9                	test   cl,cl
c000243c:	74 04                	je     c0002442 <mount_volume+0xaa>
c000243e:	a8 04                	test   al,0x4
c0002440:	75 ca                	jne    c000240c <mount_volume+0x74>
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 f0                	mov    eax,esi
c0002446:	bb 01 00 00 00       	mov    ebx,0x1
c000244b:	e8 c5 fe ff ff       	call   c0002315 <find_volume>
c0002450:	83 f8 04             	cmp    eax,0x4
c0002453:	0f 84 38 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002459:	83 f8 01             	cmp    eax,0x1
c000245c:	76 0a                	jbe    c0002468 <mount_volume+0xd0>
c000245e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002463:	e9 29 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002468:	8d 46 3f             	lea    eax,[esi+0x3f]
c000246b:	e8 af f8 ff ff       	call   c0001d1f <ld_word>
c0002470:	66 3d 00 02          	cmp    ax,0x200
c0002474:	75 e8                	jne    c000245e <mount_volume+0xc6>
c0002476:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002479:	e8 a1 f8 ff ff       	call   c0001d1f <ld_word>
c000247e:	0f b7 c0             	movzx  eax,ax
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	85 c0                	test   eax,eax
c0002487:	75 0c                	jne    c0002495 <mount_volume+0xfd>
c0002489:	8d 46 58             	lea    eax,[esi+0x58]
c000248c:	e8 9b f8 ff ff       	call   c0001d2c <ld_dword>
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002498:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024a3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024a6:	89 e8                	mov    eax,ebp
c00024a8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024ab:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ae:	3c 01                	cmp    al,0x1
c00024b0:	77 ac                	ja     c000245e <mount_volume+0xc6>
c00024b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024b6:	89 c3                	mov    ebx,eax
c00024b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024bc:	66 85 c0             	test   ax,ax
c00024bf:	74 9d                	je     c000245e <mount_volume+0xc6>
c00024c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024c4:	85 d8                	test   eax,ebx
c00024c6:	75 96                	jne    c000245e <mount_volume+0xc6>
c00024c8:	8d 46 45             	lea    eax,[esi+0x45]
c00024cb:	e8 4f f8 ff ff       	call   c0001d1f <ld_word>
c00024d0:	89 c7                	mov    edi,eax
c00024d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024d6:	a8 0f                	test   al,0xf
c00024d8:	75 84                	jne    c000245e <mount_volume+0xc6>
c00024da:	8d 46 47             	lea    eax,[esi+0x47]
c00024dd:	e8 3d f8 ff ff       	call   c0001d1f <ld_word>
c00024e2:	0f b7 d0             	movzx  edx,ax
c00024e5:	85 d2                	test   edx,edx
c00024e7:	75 0a                	jne    c00024f3 <mount_volume+0x15b>
c00024e9:	8d 46 54             	lea    eax,[esi+0x54]
c00024ec:	e8 3b f8 ff ff       	call   c0001d2c <ld_dword>
c00024f1:	89 c2                	mov    edx,eax
c00024f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f7:	8d 46 42             	lea    eax,[esi+0x42]
c00024fa:	e8 20 f8 ff ff       	call   c0001d1f <ld_word>
c00024ff:	66 85 c0             	test   ax,ax
c0002502:	0f 84 56 ff ff ff    	je     c000245e <mount_volume+0xc6>
c0002508:	89 e9                	mov    ecx,ebp
c000250a:	0f b7 c0             	movzx  eax,ax
c000250d:	0f b6 e9             	movzx  ebp,cl
c0002510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002518:	89 f8                	mov    eax,edi
c000251a:	0f af cd             	imul   ecx,ebp
c000251d:	66 c1 e8 04          	shr    ax,0x4
c0002521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002525:	0f b7 c0             	movzx  eax,ax
c0002528:	01 c8                	add    eax,ecx
c000252a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000252e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002532:	39 c2                	cmp    edx,eax
c0002534:	0f 82 24 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000253a:	29 c2                	sub    edx,eax
c000253c:	89 d5                	mov    ebp,edx
c000253e:	89 d0                	mov    eax,edx
c0002540:	31 d2                	xor    edx,edx
c0002542:	f7 f3                	div    ebx
c0002544:	39 dd                	cmp    ebp,ebx
c0002546:	0f 82 12 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000254c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002551:	0f 87 07 ff ff ff    	ja     c000245e <mount_volume+0xc6>
c0002557:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000255c:	0f 86 1f 01 00 00    	jbe    c0002681 <mount_volume+0x2e9>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	8d 68 02             	lea    ebp,[eax+0x2]
c000256a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000256e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002572:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002576:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002579:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002583:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002587:	83 fb 03             	cmp    ebx,0x3
c000258a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258d:	75 21                	jne    c00025b0 <mount_volume+0x218>
c000258f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002592:	e8 88 f7 ff ff       	call   c0001d1f <ld_word>
c0002597:	66 09 c7             	or     di,ax
c000259a:	0f 85 be fe ff ff    	jne    c000245e <mount_volume+0xc6>
c00025a0:	8d 46 60             	lea    eax,[esi+0x60]
c00025a3:	c1 e5 02             	shl    ebp,0x2
c00025a6:	e8 81 f7 ff ff       	call   c0001d2c <ld_dword>
c00025ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ae:	eb 22                	jmp    c00025d2 <mount_volume+0x23a>
c00025b0:	66 85 ff             	test   di,di
c00025b3:	0f 84 a5 fe ff ff    	je     c000245e <mount_volume+0xc6>
c00025b9:	01 c8                	add    eax,ecx
c00025bb:	83 fb 02             	cmp    ebx,0x2
c00025be:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c1:	75 04                	jne    c00025c7 <mount_volume+0x22f>
c00025c3:	01 ed                	add    ebp,ebp
c00025c5:	eb 0b                	jmp    c00025d2 <mount_volume+0x23a>
c00025c7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025cb:	83 e5 01             	and    ebp,0x1
c00025ce:	d1 e8                	shr    eax,1
c00025d0:	01 c5                	add    ebp,eax
c00025d2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025d8:	c1 ed 09             	shr    ebp,0x9
c00025db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025df:	0f 87 79 fe ff ff    	ja     c000245e <mount_volume+0xc6>
c00025e5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025ec:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025f3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025f7:	83 fb 03             	cmp    ebx,0x3
c00025fa:	75 6e                	jne    c000266a <mount_volume+0x2d2>
c00025fc:	8d 46 64             	lea    eax,[esi+0x64]
c00025ff:	e8 1b f7 ff ff       	call   c0001d1f <ld_word>
c0002604:	66 48                	dec    ax
c0002606:	75 62                	jne    c000266a <mount_volume+0x2d2>
c0002608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000260c:	89 f0                	mov    eax,esi
c000260e:	42                   	inc    edx
c000260f:	e8 31 fc ff ff       	call   c0002245 <move_window>
c0002614:	85 c0                	test   eax,eax
c0002616:	75 52                	jne    c000266a <mount_volume+0x2d2>
c0002618:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000261c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002622:	e8 f8 f6 ff ff       	call   c0001d1f <ld_word>
c0002627:	66 3d 55 aa          	cmp    ax,0xaa55
c000262b:	75 3d                	jne    c000266a <mount_volume+0x2d2>
c000262d:	8d 46 34             	lea    eax,[esi+0x34]
c0002630:	e8 f7 f6 ff ff       	call   c0001d2c <ld_dword>
c0002635:	3d 52 52 61 41       	cmp    eax,0x41615252
c000263a:	75 2e                	jne    c000266a <mount_volume+0x2d2>
c000263c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002642:	e8 e5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002647:	3d 72 72 41 61       	cmp    eax,0x61417272
c000264c:	75 1c                	jne    c000266a <mount_volume+0x2d2>
c000264e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002654:	e8 d3 f6 ff ff       	call   c0001d2c <ld_dword>
c0002659:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000265c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002662:	e8 c5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000266a:	66 a1 00 fa 01 c0    	mov    ax,ds:0xc001fa00
c0002670:	88 1e                	mov    BYTE PTR [esi],bl
c0002672:	40                   	inc    eax
c0002673:	31 db                	xor    ebx,ebx
c0002675:	66 a3 00 fa 01 c0    	mov    ds:0xc001fa00,ax
c000267b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000267f:	eb 10                	jmp    c0002691 <mount_volume+0x2f9>
c0002681:	31 db                	xor    ebx,ebx
c0002683:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002688:	0f 97 c3             	seta   bl
c000268b:	43                   	inc    ebx
c000268c:	e9 d6 fe ff ff       	jmp    c0002567 <mount_volume+0x1cf>
c0002691:	83 c4 2c             	add    esp,0x2c
c0002694:	89 d8                	mov    eax,ebx
c0002696:	5b                   	pop    ebx
c0002697:	5e                   	pop    esi
c0002698:	5f                   	pop    edi
c0002699:	5d                   	pop    ebp
c000269a:	c3                   	ret    

c000269b <put_fat>:
c000269b:	55                   	push   ebp
c000269c:	bd 02 00 00 00       	mov    ebp,0x2
c00026a1:	57                   	push   edi
c00026a2:	56                   	push   esi
c00026a3:	53                   	push   ebx
c00026a4:	83 ec 1c             	sub    esp,0x1c
c00026a7:	83 fa 01             	cmp    edx,0x1
c00026aa:	0f 86 31 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026b3:	0f 86 28 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b9:	89 c6                	mov    esi,eax
c00026bb:	89 cf                	mov    edi,ecx
c00026bd:	8a 00                	mov    al,BYTE PTR [eax]
c00026bf:	89 d3                	mov    ebx,edx
c00026c1:	3c 02                	cmp    al,0x2
c00026c3:	0f 84 ac 00 00 00    	je     c0002775 <put_fat+0xda>
c00026c9:	3c 03                	cmp    al,0x3
c00026cb:	0f 84 d1 00 00 00    	je     c00027a2 <put_fat+0x107>
c00026d1:	fe c8                	dec    al
c00026d3:	0f 85 08 01 00 00    	jne    c00027e1 <put_fat+0x146>
c00026d9:	89 d1                	mov    ecx,edx
c00026db:	89 f0                	mov    eax,esi
c00026dd:	d1 e9                	shr    ecx,1
c00026df:	01 d1                	add    ecx,edx
c00026e1:	89 ca                	mov    edx,ecx
c00026e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026e7:	c1 ea 09             	shr    edx,0x9
c00026ea:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026ed:	e8 53 fb ff ff       	call   c0002245 <move_window>
c00026f2:	89 c5                	mov    ebp,eax
c00026f4:	85 c0                	test   eax,eax
c00026f6:	0f 85 e5 00 00 00    	jne    c00027e1 <put_fat+0x146>
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	8d 46 34             	lea    eax,[esi+0x34]
c0002703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002707:	8d 41 01             	lea    eax,[ecx+0x1]
c000270a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002714:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002718:	89 f8                	mov    eax,edi
c000271a:	83 e3 01             	and    ebx,0x1
c000271d:	74 0c                	je     c000272b <put_fat+0x90>
c000271f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002721:	89 f8                	mov    eax,edi
c0002723:	83 e2 0f             	and    edx,0xf
c0002726:	c1 e0 04             	shl    eax,0x4
c0002729:	09 d0                	or     eax,edx
c000272b:	88 01                	mov    BYTE PTR [ecx],al
c000272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002731:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002735:	c1 ea 09             	shr    edx,0x9
c0002738:	89 f0                	mov    eax,esi
c000273a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000273d:	e8 03 fb ff ff       	call   c0002245 <move_window>
c0002742:	89 c5                	mov    ebp,eax
c0002744:	85 c0                	test   eax,eax
c0002746:	0f 85 95 00 00 00    	jne    c00027e1 <put_fat+0x146>
c000274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002750:	25 ff 01 00 00       	and    eax,0x1ff
c0002755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002759:	85 db                	test   ebx,ebx
c000275b:	74 07                	je     c0002764 <put_fat+0xc9>
c000275d:	c1 ef 04             	shr    edi,0x4
c0002760:	89 f9                	mov    ecx,edi
c0002762:	eb 0d                	jmp    c0002771 <put_fat+0xd6>
c0002764:	8a 08                	mov    cl,BYTE PTR [eax]
c0002766:	c1 ef 08             	shr    edi,0x8
c0002769:	83 e1 f0             	and    ecx,0xfffffff0
c000276c:	83 e7 0f             	and    edi,0xf
c000276f:	09 f9                	or     ecx,edi
c0002771:	88 08                	mov    BYTE PTR [eax],cl
c0002773:	eb 27                	jmp    c000279c <put_fat+0x101>
c0002775:	c1 ea 08             	shr    edx,0x8
c0002778:	89 f0                	mov    eax,esi
c000277a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000277d:	e8 c3 fa ff ff       	call   c0002245 <move_window>
c0002782:	89 c5                	mov    ebp,eax
c0002784:	85 c0                	test   eax,eax
c0002786:	75 59                	jne    c00027e1 <put_fat+0x146>
c0002788:	01 db                	add    ebx,ebx
c000278a:	0f b7 d7             	movzx  edx,di
c000278d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002793:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002797:	e8 a8 f5 ff ff       	call   c0001d44 <st_word>
c000279c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a0:	eb 3f                	jmp    c00027e1 <put_fat+0x146>
c00027a2:	c1 ea 07             	shr    edx,0x7
c00027a5:	89 f0                	mov    eax,esi
c00027a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027aa:	e8 96 fa ff ff       	call   c0002245 <move_window>
c00027af:	89 c5                	mov    ebp,eax
c00027b1:	85 c0                	test   eax,eax
c00027b3:	75 2c                	jne    c00027e1 <put_fat+0x146>
c00027b5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027bb:	c1 e3 02             	shl    ebx,0x2
c00027be:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027c4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 5d f5 ff ff       	call   c0001d2c <ld_dword>
c00027cf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027d4:	09 f8                	or     eax,edi
c00027d6:	89 c2                	mov    edx,eax
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 69 f5 ff ff       	call   c0001d48 <st_dword>
c00027df:	eb bb                	jmp    c000279c <put_fat+0x101>
c00027e1:	83 c4 1c             	add    esp,0x1c
c00027e4:	89 e8                	mov    eax,ebp
c00027e6:	5b                   	pop    ebx
c00027e7:	5e                   	pop    esi
c00027e8:	5f                   	pop    edi
c00027e9:	5d                   	pop    ebp
c00027ea:	c3                   	ret    

c00027eb <dir_clear>:
c00027eb:	55                   	push   ebp
c00027ec:	57                   	push   edi
c00027ed:	56                   	push   esi
c00027ee:	89 c6                	mov    esi,eax
c00027f0:	53                   	push   ebx
c00027f1:	83 ec 1c             	sub    esp,0x1c
c00027f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f8:	e8 e5 f9 ff ff       	call   c00021e2 <sync_window>
c00027fd:	85 c0                	test   eax,eax
c00027ff:	0f 85 c0 00 00 00    	jne    c00028c5 <dir_clear+0xda>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	89 f0                	mov    eax,esi
c000280b:	e8 55 f7 ff ff       	call   c0001f65 <clst2sect>
c0002810:	31 d2                	xor    edx,edx
c0002812:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002815:	89 c5                	mov    ebp,eax
c0002817:	b9 00 02 00 00       	mov    ecx,0x200
c000281c:	8d 46 34             	lea    eax,[esi+0x34]
c000281f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002823:	e8 38 f5 ff ff       	call   c0001d60 <mem_set>
c0002828:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000282c:	c1 e3 09             	shl    ebx,0x9
c000282f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002835:	76 1b                	jbe    c0002852 <dir_clear+0x67>
c0002837:	bb 00 80 00 00       	mov    ebx,0x8000
c000283c:	eb 14                	jmp    c0002852 <dir_clear+0x67>
c000283e:	83 ec 0c             	sub    esp,0xc
c0002841:	53                   	push   ebx
c0002842:	e8 25 32 00 00       	call   c0005a6c <ff_memalloc>
c0002847:	83 c4 10             	add    esp,0x10
c000284a:	89 c7                	mov    edi,eax
c000284c:	85 c0                	test   eax,eax
c000284e:	75 7c                	jne    c00028cc <dir_clear+0xe1>
c0002850:	d1 eb                	shr    ebx,1
c0002852:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002858:	77 e4                	ja     c000283e <dir_clear+0x53>
c000285a:	31 db                	xor    ebx,ebx
c000285c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002860:	39 d8                	cmp    eax,ebx
c0002862:	76 53                	jbe    c00028b7 <dir_clear+0xcc>
c0002864:	6a 01                	push   0x1
c0002866:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002869:	50                   	push   eax
c000286a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002872:	50                   	push   eax
c0002873:	e8 72 f4 ff ff       	call   c0001cea <disk_write>
c0002878:	83 c4 10             	add    esp,0x10
c000287b:	85 c0                	test   eax,eax
c000287d:	75 38                	jne    c00028b7 <dir_clear+0xcc>
c000287f:	43                   	inc    ebx
c0002880:	eb da                	jmp    c000285c <dir_clear+0x71>
c0002882:	52                   	push   edx
c0002883:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000288a:	50                   	push   eax
c000288b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288f:	57                   	push   edi
c0002890:	50                   	push   eax
c0002891:	e8 54 f4 ff ff       	call   c0001cea <disk_write>
c0002896:	83 c4 10             	add    esp,0x10
c0002899:	85 c0                	test   eax,eax
c000289b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000289f:	75 0a                	jne    c00028ab <dir_clear+0xc0>
c00028a1:	01 d3                	add    ebx,edx
c00028a3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028a7:	39 d8                	cmp    eax,ebx
c00028a9:	77 d7                	ja     c0002882 <dir_clear+0x97>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	57                   	push   edi
c00028af:	e8 d0 31 00 00       	call   c0005a84 <ff_memfree>
c00028b4:	83 c4 10             	add    esp,0x10
c00028b7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028bb:	39 d8                	cmp    eax,ebx
c00028bd:	0f 95 c0             	setne  al
c00028c0:	0f b6 c0             	movzx  eax,al
c00028c3:	eb 19                	jmp    c00028de <dir_clear+0xf3>
c00028c5:	b8 01 00 00 00       	mov    eax,0x1
c00028ca:	eb 12                	jmp    c00028de <dir_clear+0xf3>
c00028cc:	89 d9                	mov    ecx,ebx
c00028ce:	31 d2                	xor    edx,edx
c00028d0:	e8 8b f4 ff ff       	call   c0001d60 <mem_set>
c00028d5:	89 da                	mov    edx,ebx
c00028d7:	31 db                	xor    ebx,ebx
c00028d9:	c1 ea 09             	shr    edx,0x9
c00028dc:	eb c5                	jmp    c00028a3 <dir_clear+0xb8>
c00028de:	83 c4 1c             	add    esp,0x1c
c00028e1:	5b                   	pop    ebx
c00028e2:	5e                   	pop    esi
c00028e3:	5f                   	pop    edi
c00028e4:	5d                   	pop    ebp
c00028e5:	c3                   	ret    

c00028e6 <create_name>:
c00028e6:	55                   	push   ebp
c00028e7:	89 d5                	mov    ebp,edx
c00028e9:	57                   	push   edi
c00028ea:	89 c7                	mov    edi,eax
c00028ec:	56                   	push   esi
c00028ed:	31 f6                	xor    esi,esi
c00028ef:	53                   	push   ebx
c00028f0:	83 ec 3c             	sub    esp,0x3c
c00028f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002902:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002906:	e8 9b f4 ff ff       	call   c0001da6 <tchar2uni>
c000290b:	89 c3                	mov    ebx,eax
c000290d:	83 f8 ff             	cmp    eax,0xffffffff
c0002910:	75 0a                	jne    c000291c <create_name+0x36>
c0002912:	b8 06 00 00 00       	mov    eax,0x6
c0002917:	e9 9e 02 00 00       	jmp    c0002bba <create_name+0x2d4>
c000291c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002921:	76 0c                	jbe    c000292f <create_name+0x49>
c0002923:	c1 e8 10             	shr    eax,0x10
c0002926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000292a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000292e:	46                   	inc    esi
c000292f:	66 83 fb 1f          	cmp    bx,0x1f
c0002933:	76 4f                	jbe    c0002984 <create_name+0x9e>
c0002935:	66 83 fb 5c          	cmp    bx,0x5c
c0002939:	74 35                	je     c0002970 <create_name+0x8a>
c000293b:	66 83 fb 2f          	cmp    bx,0x2f
c000293f:	74 2f                	je     c0002970 <create_name+0x8a>
c0002941:	66 83 fb 7f          	cmp    bx,0x7f
c0002945:	77 11                	ja     c0002958 <create_name+0x72>
c0002947:	0f b7 d3             	movzx  edx,bx
c000294a:	b8 e2 c9 01 c0       	mov    eax,0xc001c9e2
c000294f:	e8 3a f4 ff ff       	call   c0001d8e <chk_chr>
c0002954:	85 c0                	test   eax,eax
c0002956:	75 ba                	jne    c0002912 <create_name+0x2c>
c0002958:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000295e:	77 b2                	ja     c0002912 <create_name+0x2c>
c0002960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002964:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002968:	46                   	inc    esi
c0002969:	eb 97                	jmp    c0002902 <create_name+0x1c>
c000296b:	40                   	inc    eax
c000296c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	8a 10                	mov    dl,BYTE PTR [eax]
c0002976:	80 fa 2f             	cmp    dl,0x2f
c0002979:	74 f0                	je     c000296b <create_name+0x85>
c000297b:	80 fa 5c             	cmp    dl,0x5c
c000297e:	74 eb                	je     c000296b <create_name+0x85>
c0002980:	31 db                	xor    ebx,ebx
c0002982:	eb 02                	jmp    c0002986 <create_name+0xa0>
c0002984:	b3 04                	mov    bl,0x4
c0002986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000298a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000298d:	85 f6                	test   esi,esi
c000298f:	74 18                	je     c00029a9 <create_name+0xc3>
c0002991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002995:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000299a:	66 83 f8 20          	cmp    ax,0x20
c000299e:	74 06                	je     c00029a6 <create_name+0xc0>
c00029a0:	66 83 f8 2e          	cmp    ax,0x2e
c00029a4:	75 03                	jne    c00029a9 <create_name+0xc3>
c00029a6:	4e                   	dec    esi
c00029a7:	eb e4                	jmp    c000298d <create_name+0xa7>
c00029a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ad:	31 ed                	xor    ebp,ebp
c00029af:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029b5:	85 f6                	test   esi,esi
c00029b7:	0f 84 55 ff ff ff    	je     c0002912 <create_name+0x2c>
c00029bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029c1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029c4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029c8:	66 83 f8 20          	cmp    ax,0x20
c00029cc:	75 04                	jne    c00029d2 <create_name+0xec>
c00029ce:	89 d5                	mov    ebp,edx
c00029d0:	eb eb                	jmp    c00029bd <create_name+0xd7>
c00029d2:	85 ed                	test   ebp,ebp
c00029d4:	75 06                	jne    c00029dc <create_name+0xf6>
c00029d6:	66 83 f8 2e          	cmp    ax,0x2e
c00029da:	75 08                	jne    c00029e4 <create_name+0xfe>
c00029dc:	83 cb 03             	or     ebx,0x3
c00029df:	eb 03                	jmp    c00029e4 <create_name+0xfe>
c00029e1:	4e                   	dec    esi
c00029e2:	74 0c                	je     c00029f0 <create_name+0x10a>
c00029e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029ee:	75 f1                	jne    c00029e1 <create_name+0xfb>
c00029f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029f5:	8d 47 20             	lea    eax,[edi+0x20]
c00029f8:	ba 20 00 00 00       	mov    edx,0x20
c00029fd:	e8 5e f3 ff ff       	call   c0001d60 <mem_set>
c0002a02:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a0a:	31 c9                	xor    ecx,ecx
c0002a0c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a11:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a1c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a20:	66 85 ed             	test   bp,bp
c0002a23:	0f 84 30 01 00 00    	je     c0002b59 <create_name+0x273>
c0002a29:	66 83 fd 20          	cmp    bp,0x20
c0002a2d:	74 10                	je     c0002a3f <create_name+0x159>
c0002a2f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a33:	75 13                	jne    c0002a48 <create_name+0x162>
c0002a35:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a39:	0f 84 6b 01 00 00    	je     c0002baa <create_name+0x2c4>
c0002a3f:	83 cb 03             	or     ebx,0x3
c0002a42:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a46:	eb c9                	jmp    c0002a11 <create_name+0x12b>
c0002a48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a4c:	73 0b                	jae    c0002a59 <create_name+0x173>
c0002a4e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a52:	75 47                	jne    c0002a9b <create_name+0x1b5>
c0002a54:	e9 51 01 00 00       	jmp    c0002baa <create_name+0x2c4>
c0002a59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a5e:	75 10                	jne    c0002a70 <create_name+0x18a>
c0002a60:	83 cb 03             	or     ebx,0x3
c0002a63:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a6b:	e9 e9 00 00 00       	jmp    c0002b59 <create_name+0x273>
c0002a70:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a74:	74 0d                	je     c0002a83 <create_name+0x19d>
c0002a76:	83 cb 03             	or     ebx,0x3
c0002a79:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a7d:	0f 87 d6 00 00 00    	ja     c0002b59 <create_name+0x273>
c0002a83:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a8c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a94:	b9 08 00 00 00       	mov    ecx,0x8
c0002a99:	eb a7                	jmp    c0002a42 <create_name+0x15c>
c0002a9b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9f:	76 68                	jbe    c0002b09 <create_name+0x223>
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	88 da                	mov    dl,bl
c0002aa7:	83 ca 02             	or     edx,0x2
c0002aaa:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aae:	50                   	push   eax
c0002aaf:	50                   	push   eax
c0002ab0:	68 b5 01 00 00       	push   0x1b5
c0002ab5:	55                   	push   ebp
c0002ab6:	e8 e1 2f 00 00       	call   c0005a9c <ff_uni2oem>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	89 c5                	mov    ebp,eax
c0002ac0:	a8 80                	test   al,0x80
c0002ac2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aca:	74 0c                	je     c0002ad8 <create_name+0x1f2>
c0002acc:	83 e5 7f             	and    ebp,0x7f
c0002acf:	0f b6 ad a0 ca 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe3560]
c0002ad6:	eb 2a                	jmp    c0002b02 <create_name+0x21c>
c0002ad8:	66 3d ff 00          	cmp    ax,0xff
c0002adc:	76 24                	jbe    c0002b02 <create_name+0x21c>
c0002ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae2:	48                   	dec    eax
c0002ae3:	39 c8                	cmp    eax,ecx
c0002ae5:	77 0c                	ja     c0002af3 <create_name+0x20d>
c0002ae7:	83 cb 03             	or     ebx,0x3
c0002aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002aee:	e9 4f ff ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002af3:	89 e8                	mov    eax,ebp
c0002af5:	88 d3                	mov    bl,dl
c0002af7:	66 c1 e8 08          	shr    ax,0x8
c0002afb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aff:	41                   	inc    ecx
c0002b00:	eb 4b                	jmp    c0002b4d <create_name+0x267>
c0002b02:	88 d3                	mov    bl,dl
c0002b04:	66 85 ed             	test   bp,bp
c0002b07:	74 19                	je     c0002b22 <create_name+0x23c>
c0002b09:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b0d:	0f b7 d5             	movzx  edx,bp
c0002b10:	b8 eb c9 01 c0       	mov    eax,0xc001c9eb
c0002b15:	e8 74 f2 ff ff       	call   c0001d8e <chk_chr>
c0002b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1e:	85 c0                	test   eax,eax
c0002b20:	74 0a                	je     c0002b2c <create_name+0x246>
c0002b22:	83 cb 03             	or     ebx,0x3
c0002b25:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b2a:	eb 21                	jmp    c0002b4d <create_name+0x267>
c0002b2c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 07                	ja     c0002b3c <create_name+0x256>
c0002b35:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b3a:	eb 11                	jmp    c0002b4d <create_name+0x267>
c0002b3c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 08                	ja     c0002b4d <create_name+0x267>
c0002b45:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b4a:	83 ed 20             	sub    ebp,0x20
c0002b4d:	89 e8                	mov    eax,ebp
c0002b4f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b53:	41                   	inc    ecx
c0002b54:	e9 e9 fe ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002b59:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5d:	75 04                	jne    c0002b63 <create_name+0x27d>
c0002b5f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b63:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b68:	75 05                	jne    c0002b6f <create_name+0x289>
c0002b6a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b73:	83 e0 0c             	and    eax,0xc
c0002b76:	3c 0c                	cmp    al,0xc
c0002b78:	74 0b                	je     c0002b85 <create_name+0x29f>
c0002b7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b7e:	83 e0 03             	and    eax,0x3
c0002b81:	3c 03                	cmp    al,0x3
c0002b83:	75 05                	jne    c0002b8a <create_name+0x2a4>
c0002b85:	83 cb 02             	or     ebx,0x2
c0002b88:	eb 19                	jmp    c0002ba3 <create_name+0x2bd>
c0002b8a:	f6 c3 02             	test   bl,0x2
c0002b8d:	75 14                	jne    c0002ba3 <create_name+0x2bd>
c0002b8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b94:	74 03                	je     c0002b99 <create_name+0x2b3>
c0002b96:	83 cb 10             	or     ebx,0x10
c0002b99:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b9e:	74 03                	je     c0002ba3 <create_name+0x2bd>
c0002ba0:	83 cb 08             	or     ebx,0x8
c0002ba3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba6:	31 c0                	xor    eax,eax
c0002ba8:	eb 10                	jmp    c0002bba <create_name+0x2d4>
c0002baa:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002baf:	0f 85 ce fe ff ff    	jne    c0002a83 <create_name+0x19d>
c0002bb5:	e9 a6 fe ff ff       	jmp    c0002a60 <create_name+0x17a>
c0002bba:	83 c4 3c             	add    esp,0x3c
c0002bbd:	5b                   	pop    ebx
c0002bbe:	5e                   	pop    esi
c0002bbf:	5f                   	pop    edi
c0002bc0:	5d                   	pop    ebp
c0002bc1:	c3                   	ret    

c0002bc2 <cmp_lfn>:
c0002bc2:	55                   	push   ebp
c0002bc3:	57                   	push   edi
c0002bc4:	89 d7                	mov    edi,edx
c0002bc6:	56                   	push   esi
c0002bc7:	53                   	push   ebx
c0002bc8:	83 ec 1c             	sub    esp,0x1c
c0002bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bcf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bd2:	e8 48 f1 ff ff       	call   c0001d1f <ld_word>
c0002bd7:	66 85 c0             	test   ax,ax
c0002bda:	74 07                	je     c0002be3 <cmp_lfn+0x21>
c0002bdc:	31 c0                	xor    eax,eax
c0002bde:	e9 9a 00 00 00       	jmp    c0002c7d <cmp_lfn+0xbb>
c0002be3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002be5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bea:	83 e3 3f             	and    ebx,0x3f
c0002bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002bf5:	4b                   	dec    ebx
c0002bf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bfd:	0f b6 80 20 cb 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe34e0]
c0002c04:	01 f8                	add    eax,edi
c0002c06:	e8 14 f1 ff ff       	call   c0001d1f <ld_word>
c0002c0b:	66 85 ed             	test   bp,bp
c0002c0e:	89 c6                	mov    esi,eax
c0002c10:	74 3c                	je     c0002c4e <cmp_lfn+0x8c>
c0002c12:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c18:	77 c2                	ja     c0002bdc <cmp_lfn+0x1a>
c0002c1a:	83 ec 0c             	sub    esp,0xc
c0002c1d:	0f b7 c0             	movzx  eax,ax
c0002c20:	50                   	push   eax
c0002c21:	e8 8e 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c26:	89 c5                	mov    ebp,eax
c0002c28:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c33:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c3a:	e8 75 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c3f:	83 c4 10             	add    esp,0x10
c0002c42:	39 c5                	cmp    ebp,eax
c0002c44:	75 96                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c46:	89 f5                	mov    ebp,esi
c0002c48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c4c:	eb 04                	jmp    c0002c52 <cmp_lfn+0x90>
c0002c4e:	66 46                	inc    si
c0002c50:	75 8a                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c52:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c56:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c5b:	75 9c                	jne    c0002bf9 <cmp_lfn+0x37>
c0002c5d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c60:	74 16                	je     c0002c78 <cmp_lfn+0xb6>
c0002c62:	66 85 ed             	test   bp,bp
c0002c65:	74 11                	je     c0002c78 <cmp_lfn+0xb6>
c0002c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c6b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c70:	0f 94 c0             	sete   al
c0002c73:	0f b6 c0             	movzx  eax,al
c0002c76:	eb 05                	jmp    c0002c7d <cmp_lfn+0xbb>
c0002c78:	b8 01 00 00 00       	mov    eax,0x1
c0002c7d:	83 c4 1c             	add    esp,0x1c
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <sync_fs>:
c0002c85:	56                   	push   esi
c0002c86:	53                   	push   ebx
c0002c87:	53                   	push   ebx
c0002c88:	89 c3                	mov    ebx,eax
c0002c8a:	e8 53 f5 ff ff       	call   c00021e2 <sync_window>
c0002c8f:	85 c0                	test   eax,eax
c0002c91:	0f 85 9a 00 00 00    	jne    c0002d31 <sync_fs+0xac>
c0002c97:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c9a:	75 7b                	jne    c0002d17 <sync_fs+0x92>
c0002c9c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ca0:	75 75                	jne    c0002d17 <sync_fs+0x92>
c0002ca2:	b9 00 02 00 00       	mov    ecx,0x200
c0002ca7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002caa:	31 d2                	xor    edx,edx
c0002cac:	89 f0                	mov    eax,esi
c0002cae:	e8 ad f0 ff ff       	call   c0001d60 <mem_set>
c0002cb3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cbe:	e8 81 f0 ff ff       	call   c0001d44 <st_word>
c0002cc3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	e8 79 f0 ff ff       	call   c0001d48 <st_dword>
c0002ccf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cd5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cda:	e8 69 f0 ff ff       	call   c0001d48 <st_dword>
c0002cdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ce2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ce8:	e8 5b f0 ff ff       	call   c0001d48 <st_dword>
c0002ced:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cf0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002cf6:	e8 4d f0 ff ff       	call   c0001d48 <st_dword>
c0002cfb:	6a 01                	push   0x1
c0002cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d00:	40                   	inc    eax
c0002d01:	50                   	push   eax
c0002d02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d05:	56                   	push   esi
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	50                   	push   eax
c0002d0b:	e8 da ef ff ff       	call   c0001cea <disk_write>
c0002d10:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d14:	83 c4 10             	add    esp,0x10
c0002d17:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1b:	51                   	push   ecx
c0002d1c:	6a 00                	push   0x0
c0002d1e:	6a 00                	push   0x0
c0002d20:	50                   	push   eax
c0002d21:	e8 da ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d26:	83 c4 10             	add    esp,0x10
c0002d29:	85 c0                	test   eax,eax
c0002d2b:	0f 95 c0             	setne  al
c0002d2e:	0f b6 c0             	movzx  eax,al
c0002d31:	5a                   	pop    edx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	c3                   	ret    

c0002d35 <create_partition>:
c0002d35:	55                   	push   ebp
c0002d36:	0f b6 c0             	movzx  eax,al
c0002d39:	57                   	push   edi
c0002d3a:	56                   	push   esi
c0002d3b:	53                   	push   ebx
c0002d3c:	83 ec 40             	sub    esp,0x40
c0002d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d4f:	50                   	push   eax
c0002d50:	6a 01                	push   0x1
c0002d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d56:	e8 a5 ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d5b:	83 c4 10             	add    esp,0x10
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	0f 85 69 01 00 00    	jne    c0002ecf <create_partition+0x19a>
c0002d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d6a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d73:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d78:	31 d2                	xor    edx,edx
c0002d7a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d83:	f7 f3                	div    ebx
c0002d85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d8a:	76 0c                	jbe    c0002d98 <create_partition+0x63>
c0002d8c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d90:	49                   	dec    ecx
c0002d91:	75 e5                	jne    c0002d78 <create_partition+0x43>
c0002d93:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d98:	b9 00 02 00 00       	mov    ecx,0x200
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da3:	e8 b8 ef ff ff       	call   c0001d60 <mem_set>
c0002da8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002db1:	31 d2                	xor    edx,edx
c0002db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dbb:	f7 f1                	div    ecx
c0002dbd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dca:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dd0:	85 c9                	test   ecx,ecx
c0002dd2:	75 34                	jne    c0002e08 <create_partition+0xd3>
c0002dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dd8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ddd:	05 fe 01 00 00       	add    eax,0x1fe
c0002de2:	e8 5d ef ff ff       	call   c0001d44 <st_word>
c0002de7:	6a 01                	push   0x1
c0002de9:	6a 00                	push   0x0
c0002deb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002df3:	e8 f2 ee ff ff       	call   c0001cea <disk_write>
c0002df8:	83 c4 10             	add    esp,0x10
c0002dfb:	85 c0                	test   eax,eax
c0002dfd:	0f 95 c0             	setne  al
c0002e00:	0f b6 c0             	movzx  eax,al
c0002e03:	e9 cc 00 00 00       	jmp    c0002ed4 <create_partition+0x19f>
c0002e08:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e0c:	76 c6                	jbe    c0002dd4 <create_partition+0x9f>
c0002e0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e16:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e19:	83 fe 64             	cmp    esi,0x64
c0002e1c:	77 0d                	ja     c0002e2b <create_partition+0xf6>
c0002e1e:	74 07                	je     c0002e27 <create_partition+0xf2>
c0002e20:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e25:	eb 04                	jmp    c0002e2b <create_partition+0xf6>
c0002e27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e2b:	31 c0                	xor    eax,eax
c0002e2d:	89 f2                	mov    edx,esi
c0002e2f:	01 ca                	add    edx,ecx
c0002e31:	0f 92 c0             	setb   al
c0002e34:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e38:	77 04                	ja     c0002e3e <create_partition+0x109>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <create_partition+0x111>
c0002e3e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e42:	29 ce                	sub    esi,ecx
c0002e44:	eb 04                	jmp    c0002e4a <create_partition+0x115>
c0002e46:	85 f6                	test   esi,esi
c0002e48:	74 8a                	je     c0002dd4 <create_partition+0x9f>
c0002e4a:	89 ca                	mov    edx,ecx
c0002e4c:	89 d8                	mov    eax,ebx
c0002e4e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e53:	e8 f0 ee ff ff       	call   c0001d48 <st_dword>
c0002e58:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e5b:	89 f2                	mov    edx,esi
c0002e5d:	83 c3 10             	add    ebx,0x10
c0002e60:	e8 e3 ee ff ff       	call   c0001d48 <st_dword>
c0002e65:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e77:	89 c8                	mov    eax,ecx
c0002e79:	01 f1                	add    ecx,esi
c0002e7b:	f7 f5                	div    ebp
c0002e7d:	89 d5                	mov    ebp,edx
c0002e7f:	31 d2                	xor    edx,edx
c0002e81:	45                   	inc    ebp
c0002e82:	f7 f7                	div    edi
c0002e84:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e87:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e8a:	89 c2                	mov    edx,eax
c0002e8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e8f:	c1 ea 02             	shr    edx,0x2
c0002e92:	83 e2 c0             	and    edx,0xffffffc0
c0002e95:	09 ea                	or     edx,ebp
c0002e97:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e9c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	f7 f5                	div    ebp
c0002ea3:	89 d6                	mov    esi,edx
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	46                   	inc    esi
c0002ea8:	f7 f7                	div    edi
c0002eaa:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ead:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002eb0:	89 c7                	mov    edi,eax
c0002eb2:	c1 ef 02             	shr    edi,0x2
c0002eb5:	83 e7 c0             	and    edi,0xffffffc0
c0002eb8:	09 fe                	or     esi,edi
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ebf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ec4:	0f 85 06 ff ff ff    	jne    c0002dd0 <create_partition+0x9b>
c0002eca:	e9 05 ff ff ff       	jmp    c0002dd4 <create_partition+0x9f>
c0002ecf:	b8 01 00 00 00       	mov    eax,0x1
c0002ed4:	83 c4 3c             	add    esp,0x3c
c0002ed7:	5b                   	pop    ebx
c0002ed8:	5e                   	pop    esi
c0002ed9:	5f                   	pop    edi
c0002eda:	5d                   	pop    ebp
c0002edb:	c3                   	ret    

c0002edc <get_fileinfo>:
c0002edc:	55                   	push   ebp
c0002edd:	57                   	push   edi
c0002ede:	56                   	push   esi
c0002edf:	53                   	push   ebx
c0002ee0:	83 ec 1c             	sub    esp,0x1c
c0002ee3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ee5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ee9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002eed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ef1:	0f 84 c1 01 00 00    	je     c00030b8 <get_fileinfo+0x1dc>
c0002ef7:	89 d3                	mov    ebx,edx
c0002ef9:	89 c6                	mov    esi,eax
c0002efb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eff:	74 6a                	je     c0002f6b <get_fileinfo+0x8f>
c0002f01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f09:	31 ed                	xor    ebp,ebp
c0002f0b:	31 ff                	xor    edi,edi
c0002f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f1c:	66 85 d2             	test   dx,dx
c0002f1f:	74 3e                	je     c0002f5f <get_fileinfo+0x83>
c0002f21:	66 85 ed             	test   bp,bp
c0002f24:	75 0c                	jne    c0002f32 <get_fileinfo+0x56>
c0002f26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f2c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f30:	76 22                	jbe    c0002f54 <get_fileinfo+0x78>
c0002f32:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f37:	89 e8                	mov    eax,ebp
c0002f39:	29 f9                	sub    ecx,edi
c0002f3b:	c1 e0 10             	shl    eax,0x10
c0002f3e:	09 d0                	or     eax,edx
c0002f40:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f44:	e8 23 ef ff ff       	call   c0001e6c <put_utf>
c0002f49:	84 c0                	test   al,al
c0002f4b:	74 10                	je     c0002f5d <get_fileinfo+0x81>
c0002f4d:	0f b6 c0             	movzx  eax,al
c0002f50:	31 d2                	xor    edx,edx
c0002f52:	01 c7                	add    edi,eax
c0002f54:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f59:	89 d5                	mov    ebp,edx
c0002f5b:	eb b0                	jmp    c0002f0d <get_fileinfo+0x31>
c0002f5d:	31 ff                	xor    edi,edi
c0002f5f:	66 85 ed             	test   bp,bp
c0002f62:	74 02                	je     c0002f66 <get_fileinfo+0x8a>
c0002f64:	31 ff                	xor    edi,edi
c0002f66:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f6b:	31 ff                	xor    edi,edi
c0002f6d:	31 c9                	xor    ecx,ecx
c0002f6f:	83 f9 0a             	cmp    ecx,0xa
c0002f72:	0f 87 ad 00 00 00    	ja     c0003025 <get_fileinfo+0x149>
c0002f78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f82:	66 83 fa 20          	cmp    dx,0x20
c0002f86:	0f 84 92 00 00 00    	je     c000301e <get_fileinfo+0x142>
c0002f8c:	66 83 fa 05          	cmp    dx,0x5
c0002f90:	75 05                	jne    c0002f97 <get_fileinfo+0xbb>
c0002f92:	ba e5 00 00 00       	mov    edx,0xe5
c0002f97:	83 ff 0b             	cmp    edi,0xb
c0002f9a:	77 0b                	ja     c0002fa7 <get_fileinfo+0xcb>
c0002f9c:	83 fd 09             	cmp    ebp,0x9
c0002f9f:	75 06                	jne    c0002fa7 <get_fileinfo+0xcb>
c0002fa1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fa6:	47                   	inc    edi
c0002fa7:	0f b7 c2             	movzx  eax,dx
c0002faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fae:	e8 ed ed ff ff       	call   c0001da0 <dbc_1st>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	74 2f                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fb7:	83 fd 08             	cmp    ebp,0x8
c0002fba:	74 2a                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fbc:	83 fd 0b             	cmp    ebp,0xb
c0002fbf:	74 25                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fc1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fcc:	e8 d2 ed ff ff       	call   c0001da3 <dbc_2nd>
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 11                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fde:	c1 e2 08             	shl    edx,0x8
c0002fe1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fe4:	09 c2                	or     edx,eax
c0002fe6:	0f b7 d2             	movzx  edx,dx
c0002fe9:	50                   	push   eax
c0002fea:	50                   	push   eax
c0002feb:	68 b5 01 00 00       	push   0x1b5
c0002ff0:	52                   	push   edx
c0002ff1:	e8 46 2b 00 00       	call   c0005b3c <ff_oem2uni>
c0002ff6:	83 c4 10             	add    esp,0x10
c0002ff9:	66 85 c0             	test   ax,ax
c0002ffc:	75 04                	jne    c0003002 <get_fileinfo+0x126>
c0002ffe:	31 ff                	xor    edi,edi
c0003000:	eb 23                	jmp    c0003025 <get_fileinfo+0x149>
c0003002:	b9 0c 00 00 00       	mov    ecx,0xc
c0003007:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000300b:	29 f9                	sub    ecx,edi
c000300d:	0f b7 c0             	movzx  eax,ax
c0003010:	e8 57 ee ff ff       	call   c0001e6c <put_utf>
c0003015:	84 c0                	test   al,al
c0003017:	74 e5                	je     c0002ffe <get_fileinfo+0x122>
c0003019:	0f b6 c0             	movzx  eax,al
c000301c:	01 c7                	add    edi,eax
c000301e:	89 e9                	mov    ecx,ebp
c0003020:	e9 4a ff ff ff       	jmp    c0002f6f <get_fileinfo+0x93>
c0003025:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000302a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000302e:	75 54                	jne    c0003084 <get_fileinfo+0x1a8>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 0b                	jne    c000303f <get_fileinfo+0x163>
c0003034:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003038:	ba 01 00 00 00       	mov    edx,0x1
c000303d:	eb 33                	jmp    c0003072 <get_fileinfo+0x196>
c000303f:	b1 08                	mov    cl,0x8
c0003041:	31 d2                	xor    edx,edx
c0003043:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003049:	84 c0                	test   al,al
c000304b:	74 25                	je     c0003072 <get_fileinfo+0x196>
c000304d:	66 83 f8 2e          	cmp    ax,0x2e
c0003051:	74 16                	je     c0003069 <get_fileinfo+0x18d>
c0003053:	8d 78 bf             	lea    edi,[eax-0x41]
c0003056:	66 83 ff 19          	cmp    di,0x19
c000305a:	77 0f                	ja     c000306b <get_fileinfo+0x18f>
c000305c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000305f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003062:	74 07                	je     c000306b <get_fileinfo+0x18f>
c0003064:	83 c0 20             	add    eax,0x20
c0003067:	eb 02                	jmp    c000306b <get_fileinfo+0x18f>
c0003069:	b1 10                	mov    cl,0x10
c000306b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000306f:	42                   	inc    edx
c0003070:	eb d1                	jmp    c0003043 <get_fileinfo+0x167>
c0003072:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000307e:	75 04                	jne    c0003084 <get_fileinfo+0x1a8>
c0003080:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003084:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003087:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000308a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 1c             	add    eax,0x1c
c0003093:	e8 94 ec ff ff       	call   c0001d2c <ld_dword>
c0003098:	89 03                	mov    DWORD PTR [ebx],eax
c000309a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309d:	83 c0 16             	add    eax,0x16
c00030a0:	e8 7a ec ff ff       	call   c0001d1f <ld_word>
c00030a5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ac:	83 c0 18             	add    eax,0x18
c00030af:	e8 6b ec ff ff       	call   c0001d1f <ld_word>
c00030b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <ld_clust.isra.0>:
c00030c0:	56                   	push   esi
c00030c1:	89 c6                	mov    esi,eax
c00030c3:	53                   	push   ebx
c00030c4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030c7:	89 d3                	mov    ebx,edx
c00030c9:	e8 51 ec ff ff       	call   c0001d1f <ld_word>
c00030ce:	0f b7 c8             	movzx  ecx,ax
c00030d1:	89 f0                	mov    eax,esi
c00030d3:	3c 03                	cmp    al,0x3
c00030d5:	75 0d                	jne    c00030e4 <ld_clust.isra.0+0x24>
c00030d7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030da:	e8 40 ec ff ff       	call   c0001d1f <ld_word>
c00030df:	c1 e0 10             	shl    eax,0x10
c00030e2:	09 c1                	or     ecx,eax
c00030e4:	89 c8                	mov    eax,ecx
c00030e6:	5b                   	pop    ebx
c00030e7:	5e                   	pop    esi
c00030e8:	c3                   	ret    

c00030e9 <st_clust.isra.1>:
c00030e9:	56                   	push   esi
c00030ea:	89 c6                	mov    esi,eax
c00030ec:	53                   	push   ebx
c00030ed:	89 d3                	mov    ebx,edx
c00030ef:	0f b7 d1             	movzx  edx,cx
c00030f2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030f5:	e8 4a ec ff ff       	call   c0001d44 <st_word>
c00030fa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030fd:	75 0f                	jne    c000310e <st_clust.isra.1+0x25>
c00030ff:	c1 e9 10             	shr    ecx,0x10
c0003102:	8d 43 14             	lea    eax,[ebx+0x14]
c0003105:	89 ca                	mov    edx,ecx
c0003107:	5b                   	pop    ebx
c0003108:	5e                   	pop    esi
c0003109:	e9 36 ec ff ff       	jmp    c0001d44 <st_word>
c000310e:	5b                   	pop    ebx
c000310f:	5e                   	pop    esi
c0003110:	c3                   	ret    

c0003111 <get_fat.isra.2>:
c0003111:	b9 01 00 00 00       	mov    ecx,0x1
c0003116:	83 fa 01             	cmp    edx,0x1
c0003119:	0f 86 f1 00 00 00    	jbe    c0003210 <get_fat.isra.2+0xff>
c000311f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003122:	0f 83 e8 00 00 00    	jae    c0003210 <get_fat.isra.2+0xff>
c0003128:	55                   	push   ebp
c0003129:	57                   	push   edi
c000312a:	89 c7                	mov    edi,eax
c000312c:	56                   	push   esi
c000312d:	89 d6                	mov    esi,edx
c000312f:	53                   	push   ebx
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	8a 00                	mov    al,BYTE PTR [eax]
c0003135:	3c 02                	cmp    al,0x2
c0003137:	74 78                	je     c00031b1 <get_fat.isra.2+0xa0>
c0003139:	3c 03                	cmp    al,0x3
c000313b:	0f 84 97 00 00 00    	je     c00031d8 <get_fat.isra.2+0xc7>
c0003141:	fe c8                	dec    al
c0003143:	0f 85 bd 00 00 00    	jne    c0003206 <get_fat.isra.2+0xf5>
c0003149:	89 d3                	mov    ebx,edx
c000314b:	89 f8                	mov    eax,edi
c000314d:	d1 eb                	shr    ebx,1
c000314f:	01 d3                	add    ebx,edx
c0003151:	89 da                	mov    edx,ebx
c0003153:	c1 ea 09             	shr    edx,0x9
c0003156:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003159:	e8 e7 f0 ff ff       	call   c0002245 <move_window>
c000315e:	85 c0                	test   eax,eax
c0003160:	74 08                	je     c000316a <get_fat.isra.2+0x59>
c0003162:	83 c9 ff             	or     ecx,0xffffffff
c0003165:	e9 9c 00 00 00       	jmp    c0003206 <get_fat.isra.2+0xf5>
c000316a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000316d:	89 f8                	mov    eax,edi
c000316f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003175:	89 ea                	mov    edx,ebp
c0003177:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000317b:	c1 ea 09             	shr    edx,0x9
c000317e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003181:	e8 bf f0 ff ff       	call   c0002245 <move_window>
c0003186:	85 c0                	test   eax,eax
c0003188:	75 d8                	jne    c0003162 <get_fat.isra.2+0x51>
c000318a:	0f b6 c3             	movzx  eax,bl
c000318d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003193:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003198:	c1 e3 08             	shl    ebx,0x8
c000319b:	09 c3                	or     ebx,eax
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031a5:	83 e6 01             	and    esi,0x1
c00031a8:	74 5c                	je     c0003206 <get_fat.isra.2+0xf5>
c00031aa:	89 d9                	mov    ecx,ebx
c00031ac:	c1 e9 04             	shr    ecx,0x4
c00031af:	eb 55                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031b1:	c1 ea 08             	shr    edx,0x8
c00031b4:	89 f8                	mov    eax,edi
c00031b6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031b9:	e8 87 f0 ff ff       	call   c0002245 <move_window>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 a0                	jne    c0003162 <get_fat.isra.2+0x51>
c00031c2:	01 f6                	add    esi,esi
c00031c4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ca:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ce:	e8 4c eb ff ff       	call   c0001d1f <ld_word>
c00031d3:	0f b7 c8             	movzx  ecx,ax
c00031d6:	eb 2e                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031d8:	c1 ea 07             	shr    edx,0x7
c00031db:	89 f8                	mov    eax,edi
c00031dd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031e0:	e8 60 f0 ff ff       	call   c0002245 <move_window>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	0f 85 75 ff ff ff    	jne    c0003162 <get_fat.isra.2+0x51>
c00031ed:	c1 e6 02             	shl    esi,0x2
c00031f0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031f6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031fa:	e8 2d eb ff ff       	call   c0001d2c <ld_dword>
c00031ff:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003204:	89 c1                	mov    ecx,eax
c0003206:	83 c4 0c             	add    esp,0xc
c0003209:	89 c8                	mov    eax,ecx
c000320b:	5b                   	pop    ebx
c000320c:	5e                   	pop    esi
c000320d:	5f                   	pop    edi
c000320e:	5d                   	pop    ebp
c000320f:	c3                   	ret    
c0003210:	89 c8                	mov    eax,ecx
c0003212:	c3                   	ret    

c0003213 <dir_sdi>:
c0003213:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003219:	0f 87 b6 00 00 00    	ja     c00032d5 <dir_sdi+0xc2>
c000321f:	55                   	push   ebp
c0003220:	57                   	push   edi
c0003221:	56                   	push   esi
c0003222:	53                   	push   ebx
c0003223:	89 d3                	mov    ebx,edx
c0003225:	83 ec 1c             	sub    esp,0x1c
c0003228:	f6 c2 1f             	test   dl,0x1f
c000322b:	74 0a                	je     c0003237 <dir_sdi+0x24>
c000322d:	b8 02 00 00 00       	mov    eax,0x2
c0003232:	e9 96 00 00 00       	jmp    c00032cd <dir_sdi+0xba>
c0003237:	89 c6                	mov    esi,eax
c0003239:	8b 38                	mov    edi,DWORD PTR [eax]
c000323b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000323e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003241:	85 c9                	test   ecx,ecx
c0003243:	75 23                	jne    c0003268 <dir_sdi+0x55>
c0003245:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003248:	76 07                	jbe    c0003251 <dir_sdi+0x3e>
c000324a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000324d:	85 c0                	test   eax,eax
c000324f:	75 15                	jne    c0003266 <dir_sdi+0x53>
c0003251:	89 da                	mov    edx,ebx
c0003253:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003257:	c1 ea 05             	shr    edx,0x5
c000325a:	39 c2                	cmp    edx,eax
c000325c:	73 cf                	jae    c000322d <dir_sdi+0x1a>
c000325e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003261:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003264:	eb 3d                	jmp    c00032a3 <dir_sdi+0x90>
c0003266:	89 c1                	mov    ecx,eax
c0003268:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000326c:	c1 e5 09             	shl    ebp,0x9
c000326f:	89 ca                	mov    edx,ecx
c0003271:	39 eb                	cmp    ebx,ebp
c0003273:	72 1c                	jb     c0003291 <dir_sdi+0x7e>
c0003275:	8b 06                	mov    eax,DWORD PTR [esi]
c0003277:	e8 95 fe ff ff       	call   c0003111 <get_fat.isra.2>
c000327c:	89 c1                	mov    ecx,eax
c000327e:	83 f8 ff             	cmp    eax,0xffffffff
c0003281:	74 45                	je     c00032c8 <dir_sdi+0xb5>
c0003283:	83 f8 01             	cmp    eax,0x1
c0003286:	76 a5                	jbe    c000322d <dir_sdi+0x1a>
c0003288:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000328b:	76 a0                	jbe    c000322d <dir_sdi+0x1a>
c000328d:	29 eb                	sub    ebx,ebp
c000328f:	eb de                	jmp    c000326f <dir_sdi+0x5c>
c0003291:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003295:	89 f8                	mov    eax,edi
c0003297:	e8 c9 ec ff ff       	call   c0001f65 <clst2sect>
c000329c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032a0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032a3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032a6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032a9:	85 d2                	test   edx,edx
c00032ab:	74 80                	je     c000322d <dir_sdi+0x1a>
c00032ad:	89 d8                	mov    eax,ebx
c00032af:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032b5:	c1 e8 09             	shr    eax,0x9
c00032b8:	01 d0                	add    eax,edx
c00032ba:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032bd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032c4:	31 c0                	xor    eax,eax
c00032c6:	eb 05                	jmp    c00032cd <dir_sdi+0xba>
c00032c8:	b8 01 00 00 00       	mov    eax,0x1
c00032cd:	83 c4 1c             	add    esp,0x1c
c00032d0:	5b                   	pop    ebx
c00032d1:	5e                   	pop    esi
c00032d2:	5f                   	pop    edi
c00032d3:	5d                   	pop    ebp
c00032d4:	c3                   	ret    
c00032d5:	b8 02 00 00 00       	mov    eax,0x2
c00032da:	c3                   	ret    

c00032db <create_chain>:
c00032db:	55                   	push   ebp
c00032dc:	89 c5                	mov    ebp,eax
c00032de:	57                   	push   edi
c00032df:	89 d7                	mov    edi,edx
c00032e1:	56                   	push   esi
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 1c             	sub    esp,0x1c
c00032e6:	85 d2                	test   edx,edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x1f>
c00032ec:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ef:	85 c9                	test   ecx,ecx
c00032f1:	74 34                	je     c0003327 <create_chain+0x4c>
c00032f3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032f6:	77 34                	ja     c000332c <create_chain+0x51>
c00032f8:	eb 2d                	jmp    c0003327 <create_chain+0x4c>
c00032fa:	89 f0                	mov    eax,esi
c00032fc:	e8 10 fe ff ff       	call   c0003111 <get_fat.isra.2>
c0003301:	89 c3                	mov    ebx,eax
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	77 0a                	ja     c0003312 <create_chain+0x37>
c0003308:	bb 01 00 00 00       	mov    ebx,0x1
c000330d:	e9 f9 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003312:	83 f8 ff             	cmp    eax,0xffffffff
c0003315:	0f 84 ed 00 00 00    	je     c0003408 <create_chain+0x12d>
c000331b:	89 f9                	mov    ecx,edi
c000331d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003320:	76 0a                	jbe    c000332c <create_chain+0x51>
c0003322:	e9 e4 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003330:	75 07                	jne    c0003339 <create_chain+0x5e>
c0003332:	31 db                	xor    ebx,ebx
c0003334:	e9 d2 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003339:	39 f9                	cmp    ecx,edi
c000333b:	75 46                	jne    c0003383 <create_chain+0xa8>
c000333d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003340:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003343:	77 05                	ja     c000334a <create_chain+0x6f>
c0003345:	bb 02 00 00 00       	mov    ebx,0x2
c000334a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334e:	89 da                	mov    edx,ebx
c0003350:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003353:	e8 b9 fd ff ff       	call   c0003111 <get_fat.isra.2>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	74 ab                	je     c0003308 <create_chain+0x2d>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	0f 84 a2 00 00 00    	je     c0003408 <create_chain+0x12d>
c0003366:	85 c0                	test   eax,eax
c0003368:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336c:	74 11                	je     c000337f <create_chain+0xa4>
c000336e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003371:	83 f8 01             	cmp    eax,0x1
c0003374:	76 0d                	jbe    c0003383 <create_chain+0xa8>
c0003376:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003379:	73 08                	jae    c0003383 <create_chain+0xa8>
c000337b:	89 c1                	mov    ecx,eax
c000337d:	eb 04                	jmp    c0003383 <create_chain+0xa8>
c000337f:	85 db                	test   ebx,ebx
c0003381:	75 3d                	jne    c00033c0 <create_chain+0xe5>
c0003383:	89 cb                	mov    ebx,ecx
c0003385:	43                   	inc    ebx
c0003386:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003389:	77 0a                	ja     c0003395 <create_chain+0xba>
c000338b:	83 f9 01             	cmp    ecx,0x1
c000338e:	76 a2                	jbe    c0003332 <create_chain+0x57>
c0003390:	bb 02 00 00 00       	mov    ebx,0x2
c0003395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003399:	89 da                	mov    edx,ebx
c000339b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000339e:	e8 6e fd ff ff       	call   c0003111 <get_fat.isra.2>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 19                	je     c00033c0 <create_chain+0xe5>
c00033a7:	83 f8 01             	cmp    eax,0x1
c00033aa:	0f 84 58 ff ff ff    	je     c0003308 <create_chain+0x2d>
c00033b0:	40                   	inc    eax
c00033b1:	74 55                	je     c0003408 <create_chain+0x12d>
c00033b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b7:	39 cb                	cmp    ebx,ecx
c00033b9:	75 ca                	jne    c0003385 <create_chain+0xaa>
c00033bb:	e9 72 ff ff ff       	jmp    c0003332 <create_chain+0x57>
c00033c0:	83 c9 ff             	or     ecx,0xffffffff
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 f0                	mov    eax,esi
c00033c7:	e8 cf f2 ff ff       	call   c000269b <put_fat>
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 31                	jne    c0003401 <create_chain+0x126>
c00033d0:	85 ff                	test   edi,edi
c00033d2:	75 16                	jne    c00033ea <create_chain+0x10f>
c00033d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033da:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033dd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e0:	39 d0                	cmp    eax,edx
c00033e2:	77 17                	ja     c00033fb <create_chain+0x120>
c00033e4:	48                   	dec    eax
c00033e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033e8:	eb 11                	jmp    c00033fb <create_chain+0x120>
c00033ea:	89 d9                	mov    ecx,ebx
c00033ec:	89 fa                	mov    edx,edi
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 a6 f2 ff ff       	call   c000269b <put_fat>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	74 db                	je     c00033d4 <create_chain+0xf9>
c00033f9:	eb 06                	jmp    c0003401 <create_chain+0x126>
c00033fb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ff:	eb 0a                	jmp    c000340b <create_chain+0x130>
c0003401:	48                   	dec    eax
c0003402:	0f 85 00 ff ff ff    	jne    c0003308 <create_chain+0x2d>
c0003408:	83 cb ff             	or     ebx,0xffffffff
c000340b:	83 c4 1c             	add    esp,0x1c
c000340e:	89 d8                	mov    eax,ebx
c0003410:	5b                   	pop    ebx
c0003411:	5e                   	pop    esi
c0003412:	5f                   	pop    edi
c0003413:	5d                   	pop    ebp
c0003414:	c3                   	ret    

c0003415 <remove_chain>:
c0003415:	55                   	push   ebp
c0003416:	57                   	push   edi
c0003417:	56                   	push   esi
c0003418:	89 d6                	mov    esi,edx
c000341a:	53                   	push   ebx
c000341b:	83 ec 0c             	sub    esp,0xc
c000341e:	83 fa 01             	cmp    edx,0x1
c0003421:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003423:	76 65                	jbe    c000348a <remove_chain+0x75>
c0003425:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003428:	76 60                	jbe    c000348a <remove_chain+0x75>
c000342a:	89 c5                	mov    ebp,eax
c000342c:	89 ca                	mov    edx,ecx
c000342e:	85 c9                	test   ecx,ecx
c0003430:	74 0e                	je     c0003440 <remove_chain+0x2b>
c0003432:	83 c9 ff             	or     ecx,0xffffffff
c0003435:	89 d8                	mov    eax,ebx
c0003437:	e8 5f f2 ff ff       	call   c000269b <put_fat>
c000343c:	85 c0                	test   eax,eax
c000343e:	75 56                	jne    c0003496 <remove_chain+0x81>
c0003440:	89 f2                	mov    edx,esi
c0003442:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003445:	e8 c7 fc ff ff       	call   c0003111 <get_fat.isra.2>
c000344a:	89 c7                	mov    edi,eax
c000344c:	85 c0                	test   eax,eax
c000344e:	75 04                	jne    c0003454 <remove_chain+0x3f>
c0003450:	31 c0                	xor    eax,eax
c0003452:	eb 42                	jmp    c0003496 <remove_chain+0x81>
c0003454:	83 f8 01             	cmp    eax,0x1
c0003457:	74 31                	je     c000348a <remove_chain+0x75>
c0003459:	83 f8 ff             	cmp    eax,0xffffffff
c000345c:	74 33                	je     c0003491 <remove_chain+0x7c>
c000345e:	31 c9                	xor    ecx,ecx
c0003460:	89 f2                	mov    edx,esi
c0003462:	89 d8                	mov    eax,ebx
c0003464:	e8 32 f2 ff ff       	call   c000269b <put_fat>
c0003469:	85 c0                	test   eax,eax
c000346b:	75 29                	jne    c0003496 <remove_chain+0x81>
c000346d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003470:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003473:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003476:	39 c8                	cmp    eax,ecx
c0003478:	73 08                	jae    c0003482 <remove_chain+0x6d>
c000347a:	40                   	inc    eax
c000347b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000347f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003482:	89 fe                	mov    esi,edi
c0003484:	39 fa                	cmp    edx,edi
c0003486:	77 b8                	ja     c0003440 <remove_chain+0x2b>
c0003488:	eb c6                	jmp    c0003450 <remove_chain+0x3b>
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	eb 05                	jmp    c0003496 <remove_chain+0x81>
c0003491:	b8 01 00 00 00       	mov    eax,0x1
c0003496:	83 c4 0c             	add    esp,0xc
c0003499:	5b                   	pop    ebx
c000349a:	5e                   	pop    esi
c000349b:	5f                   	pop    edi
c000349c:	5d                   	pop    ebp
c000349d:	c3                   	ret    

c000349e <dir_next>:
c000349e:	55                   	push   ebp
c000349f:	57                   	push   edi
c00034a0:	56                   	push   esi
c00034a1:	53                   	push   ebx
c00034a2:	83 ec 1c             	sub    esp,0x1c
c00034a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034aa:	83 c7 20             	add    edi,0x20
c00034ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034b3:	76 07                	jbe    c00034bc <dir_next+0x1e>
c00034b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034bf:	b9 04 00 00 00       	mov    ecx,0x4
c00034c4:	85 f6                	test   esi,esi
c00034c6:	0f 84 cd 00 00 00    	je     c0003599 <dir_next+0xfb>
c00034cc:	89 c3                	mov    ebx,eax
c00034ce:	89 d1                	mov    ecx,edx
c00034d0:	89 f8                	mov    eax,edi
c00034d2:	25 ff 01 00 00       	and    eax,0x1ff
c00034d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034db:	0f 85 a8 00 00 00    	jne    c0003589 <dir_next+0xeb>
c00034e1:	46                   	inc    esi
c00034e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034e8:	85 d2                	test   edx,edx
c00034ea:	75 22                	jne    c000350e <dir_next+0x70>
c00034ec:	89 fa                	mov    edx,edi
c00034ee:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034f2:	c1 ea 05             	shr    edx,0x5
c00034f5:	39 c2                	cmp    edx,eax
c00034f7:	0f 82 8c 00 00 00    	jb     c0003589 <dir_next+0xeb>
c00034fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003504:	b9 04 00 00 00       	mov    ecx,0x4
c0003509:	e9 8b 00 00 00       	jmp    c0003599 <dir_next+0xfb>
c000350e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003512:	89 fe                	mov    esi,edi
c0003514:	48                   	dec    eax
c0003515:	c1 ee 09             	shr    esi,0x9
c0003518:	85 f0                	test   eax,esi
c000351a:	75 6d                	jne    c0003589 <dir_next+0xeb>
c000351c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003520:	89 e8                	mov    eax,ebp
c0003522:	e8 ea fb ff ff       	call   c0003111 <get_fat.isra.2>
c0003527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000352b:	89 c6                	mov    esi,eax
c000352d:	83 f8 01             	cmp    eax,0x1
c0003530:	77 07                	ja     c0003539 <dir_next+0x9b>
c0003532:	b9 02 00 00 00       	mov    ecx,0x2
c0003537:	eb 60                	jmp    c0003599 <dir_next+0xfb>
c0003539:	83 f8 ff             	cmp    eax,0xffffffff
c000353c:	75 07                	jne    c0003545 <dir_next+0xa7>
c000353e:	b9 01 00 00 00       	mov    ecx,0x1
c0003543:	eb 54                	jmp    c0003599 <dir_next+0xfb>
c0003545:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003548:	77 30                	ja     c000357a <dir_next+0xdc>
c000354a:	85 c9                	test   ecx,ecx
c000354c:	74 af                	je     c00034fd <dir_next+0x5f>
c000354e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003551:	89 d8                	mov    eax,ebx
c0003553:	e8 83 fd ff ff       	call   c00032db <create_chain>
c0003558:	b9 07 00 00 00       	mov    ecx,0x7
c000355d:	89 c6                	mov    esi,eax
c000355f:	85 c0                	test   eax,eax
c0003561:	74 36                	je     c0003599 <dir_next+0xfb>
c0003563:	83 f8 01             	cmp    eax,0x1
c0003566:	74 ca                	je     c0003532 <dir_next+0x94>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	74 d1                	je     c000353e <dir_next+0xa0>
c000356d:	89 c2                	mov    edx,eax
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 75 f2 ff ff       	call   c00027eb <dir_clear>
c0003576:	85 c0                	test   eax,eax
c0003578:	75 c4                	jne    c000353e <dir_next+0xa0>
c000357a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000357d:	89 f2                	mov    edx,esi
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 df e9 ff ff       	call   c0001f65 <clst2sect>
c0003586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000358d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003590:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003594:	31 c9                	xor    ecx,ecx
c0003596:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003599:	83 c4 1c             	add    esp,0x1c
c000359c:	89 c8                	mov    eax,ecx
c000359e:	5b                   	pop    ebx
c000359f:	5e                   	pop    esi
c00035a0:	5f                   	pop    edi
c00035a1:	5d                   	pop    ebp
c00035a2:	c3                   	ret    

c00035a3 <dir_alloc>:
c00035a3:	55                   	push   ebp
c00035a4:	89 c5                	mov    ebp,eax
c00035a6:	57                   	push   edi
c00035a7:	89 d7                	mov    edi,edx
c00035a9:	56                   	push   esi
c00035aa:	31 d2                	xor    edx,edx
c00035ac:	53                   	push   ebx
c00035ad:	83 ec 0c             	sub    esp,0xc
c00035b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035b2:	e8 5c fc ff ff       	call   c0003213 <dir_sdi>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 37                	jne    c00035f2 <dir_alloc+0x4f>
c00035bb:	31 db                	xor    ebx,ebx
c00035bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035c0:	89 f0                	mov    eax,esi
c00035c2:	e8 7e ec ff ff       	call   c0002245 <move_window>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 27                	jne    c00035f2 <dir_alloc+0x4f>
c00035cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ce:	8a 12                	mov    dl,BYTE PTR [edx]
c00035d0:	84 d2                	test   dl,dl
c00035d2:	74 05                	je     c00035d9 <dir_alloc+0x36>
c00035d4:	80 fa e5             	cmp    dl,0xe5
c00035d7:	75 07                	jne    c00035e0 <dir_alloc+0x3d>
c00035d9:	43                   	inc    ebx
c00035da:	39 fb                	cmp    ebx,edi
c00035dc:	75 04                	jne    c00035e2 <dir_alloc+0x3f>
c00035de:	eb 1c                	jmp    c00035fc <dir_alloc+0x59>
c00035e0:	31 db                	xor    ebx,ebx
c00035e2:	ba 01 00 00 00       	mov    edx,0x1
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 b0 fe ff ff       	call   c000349e <dir_next>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	74 cb                	je     c00035bd <dir_alloc+0x1a>
c00035f2:	83 f8 04             	cmp    eax,0x4
c00035f5:	75 05                	jne    c00035fc <dir_alloc+0x59>
c00035f7:	b8 07 00 00 00       	mov    eax,0x7
c00035fc:	83 c4 0c             	add    esp,0xc
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_read>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	bf ff ff ff ff       	mov    edi,0xffffffff
c000360b:	56                   	push   esi
c000360c:	be 04 00 00 00       	mov    esi,0x4
c0003611:	53                   	push   ebx
c0003612:	89 c3                	mov    ebx,eax
c0003614:	83 ec 1c             	sub    esp,0x1c
c0003617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003622:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003625:	85 d2                	test   edx,edx
c0003627:	0f 84 d8 00 00 00    	je     c0003705 <dir_read+0x101>
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 11 ec ff ff       	call   c0002245 <move_window>
c0003634:	89 c6                	mov    esi,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 d2 00 00 00    	jne    c0003710 <dir_read+0x10c>
c000363e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003641:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003643:	84 c9                	test   cl,cl
c0003645:	0f 84 c0 00 00 00    	je     c000370b <dir_read+0x107>
c000364b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000364e:	83 e0 3f             	and    eax,0x3f
c0003651:	80 f9 2e             	cmp    cl,0x2e
c0003654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003658:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000365b:	0f 84 8a 00 00 00    	je     c00036eb <dir_read+0xe7>
c0003661:	80 f9 e5             	cmp    cl,0xe5
c0003664:	0f 84 81 00 00 00    	je     c00036eb <dir_read+0xe7>
c000366a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000366e:	83 e0 1f             	and    eax,0x1f
c0003671:	83 f8 08             	cmp    eax,0x8
c0003674:	0f 94 c0             	sete   al
c0003677:	0f b6 c0             	movzx  eax,al
c000367a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000367e:	75 6b                	jne    c00036eb <dir_read+0xe7>
c0003680:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003685:	75 44                	jne    c00036cb <dir_read+0xc7>
c0003687:	f6 c1 40             	test   cl,0x40
c000368a:	74 12                	je     c000369e <dir_read+0x9a>
c000368c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000368f:	83 e1 bf             	and    ecx,0xffffffbf
c0003692:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003696:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003699:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000369c:	eb 06                	jmp    c00036a4 <dir_read+0xa0>
c000369e:	89 f8                	mov    eax,edi
c00036a0:	38 c8                	cmp    al,cl
c00036a2:	75 47                	jne    c00036eb <dir_read+0xe7>
c00036a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ad:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036b0:	75 3e                	jne    c00036f0 <dir_read+0xec>
c00036b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036b9:	e8 c4 e8 ff ff       	call   c0001f82 <pick_lfn>
c00036be:	85 c0                	test   eax,eax
c00036c0:	74 2e                	je     c00036f0 <dir_read+0xec>
c00036c2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036c6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036c9:	eb 25                	jmp    c00036f0 <dir_read+0xec>
c00036cb:	89 f8                	mov    eax,edi
c00036cd:	84 c0                	test   al,al
c00036cf:	75 11                	jne    c00036e2 <dir_read+0xde>
c00036d1:	89 d0                	mov    eax,edx
c00036d3:	e8 64 ea ff ff       	call   c000213c <sum_sfn>
c00036d8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036dc:	75 04                	jne    c00036e2 <dir_read+0xde>
c00036de:	31 f6                	xor    esi,esi
c00036e0:	eb 35                	jmp    c0003717 <dir_read+0x113>
c00036e2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036e9:	eb 2c                	jmp    c0003717 <dir_read+0x113>
c00036eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 d8                	mov    eax,ebx
c00036f4:	e8 a5 fd ff ff       	call   c000349e <dir_next>
c00036f9:	89 c6                	mov    esi,eax
c00036fb:	85 c0                	test   eax,eax
c00036fd:	0f 84 1f ff ff ff    	je     c0003622 <dir_read+0x1e>
c0003703:	eb 0b                	jmp    c0003710 <dir_read+0x10c>
c0003705:	85 f6                	test   esi,esi
c0003707:	74 d5                	je     c00036de <dir_read+0xda>
c0003709:	eb 05                	jmp    c0003710 <dir_read+0x10c>
c000370b:	be 04 00 00 00       	mov    esi,0x4
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 f0                	mov    eax,esi
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <dir_remove>:
c0003721:	57                   	push   edi
c0003722:	56                   	push   esi
c0003723:	53                   	push   ebx
c0003724:	89 c3                	mov    ebx,eax
c0003726:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003729:	8b 30                	mov    esi,DWORD PTR [eax]
c000372b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000372e:	83 fa ff             	cmp    edx,0xffffffff
c0003731:	74 09                	je     c000373c <dir_remove+0x1b>
c0003733:	e8 db fa ff ff       	call   c0003213 <dir_sdi>
c0003738:	85 c0                	test   eax,eax
c000373a:	75 34                	jne    c0003770 <dir_remove+0x4f>
c000373c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000373f:	89 f0                	mov    eax,esi
c0003741:	e8 ff ea ff ff       	call   c0002245 <move_window>
c0003746:	85 c0                	test   eax,eax
c0003748:	75 1c                	jne    c0003766 <dir_remove+0x45>
c000374a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000374d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003750:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003754:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003757:	73 17                	jae    c0003770 <dir_remove+0x4f>
c0003759:	31 d2                	xor    edx,edx
c000375b:	89 d8                	mov    eax,ebx
c000375d:	e8 3c fd ff ff       	call   c000349e <dir_next>
c0003762:	85 c0                	test   eax,eax
c0003764:	74 d6                	je     c000373c <dir_remove+0x1b>
c0003766:	83 f8 04             	cmp    eax,0x4
c0003769:	75 05                	jne    c0003770 <dir_remove+0x4f>
c000376b:	b8 02 00 00 00       	mov    eax,0x2
c0003770:	5b                   	pop    ebx
c0003771:	5e                   	pop    esi
c0003772:	5f                   	pop    edi
c0003773:	c3                   	ret    

c0003774 <dir_find>:
c0003774:	55                   	push   ebp
c0003775:	31 d2                	xor    edx,edx
c0003777:	57                   	push   edi
c0003778:	56                   	push   esi
c0003779:	53                   	push   ebx
c000377a:	89 c3                	mov    ebx,eax
c000377c:	83 ec 1c             	sub    esp,0x1c
c000377f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	e8 87 fa ff ff       	call   c0003213 <dir_sdi>
c000378c:	89 c6                	mov    esi,eax
c000378e:	85 c0                	test   eax,eax
c0003790:	0f 85 02 01 00 00    	jne    c0003898 <dir_find+0x124>
c0003796:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000379d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037a2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037a7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ae:	e8 92 ea ff ff       	call   c0002245 <move_window>
c00037b3:	89 c6                	mov    esi,eax
c00037b5:	85 c0                	test   eax,eax
c00037b7:	0f 85 db 00 00 00    	jne    c0003898 <dir_find+0x124>
c00037bd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037c0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037c3:	84 c9                	test   cl,cl
c00037c5:	0f 84 c8 00 00 00    	je     c0003893 <dir_find+0x11f>
c00037cb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ce:	88 d0                	mov    al,dl
c00037d0:	83 e0 3f             	and    eax,0x3f
c00037d3:	80 f9 e5             	cmp    cl,0xe5
c00037d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037d9:	0f 84 93 00 00 00    	je     c0003872 <dir_find+0xfe>
c00037df:	80 e2 08             	and    dl,0x8
c00037e2:	74 0a                	je     c00037ee <dir_find+0x7a>
c00037e4:	3c 0f                	cmp    al,0xf
c00037e6:	0f 85 86 00 00 00    	jne    c0003872 <dir_find+0xfe>
c00037ec:	eb 04                	jmp    c00037f2 <dir_find+0x7e>
c00037ee:	3c 0f                	cmp    al,0xf
c00037f0:	75 54                	jne    c0003846 <dir_find+0xd2>
c00037f2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037f6:	0f 85 82 00 00 00    	jne    c000387e <dir_find+0x10a>
c00037fc:	f6 c1 40             	test   cl,0x40
c00037ff:	74 12                	je     c0003813 <dir_find+0x9f>
c0003801:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003804:	83 e1 bf             	and    ecx,0xffffffbf
c0003807:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000380b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000380e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003811:	eb 06                	jmp    c0003819 <dir_find+0xa5>
c0003813:	89 f8                	mov    eax,edi
c0003815:	38 c8                	cmp    al,cl
c0003817:	75 60                	jne    c0003879 <dir_find+0x105>
c0003819:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003825:	75 57                	jne    c000387e <dir_find+0x10a>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000382f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003832:	89 ea                	mov    edx,ebp
c0003834:	e8 89 f3 ff ff       	call   c0002bc2 <cmp_lfn>
c0003839:	85 c0                	test   eax,eax
c000383b:	74 41                	je     c000387e <dir_find+0x10a>
c000383d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003841:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003844:	eb 38                	jmp    c000387e <dir_find+0x10a>
c0003846:	89 f8                	mov    eax,edi
c0003848:	84 c0                	test   al,al
c000384a:	75 0d                	jne    c0003859 <dir_find+0xe5>
c000384c:	89 e8                	mov    eax,ebp
c000384e:	e8 e9 e8 ff ff       	call   c000213c <sum_sfn>
c0003853:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003857:	74 3f                	je     c0003898 <dir_find+0x124>
c0003859:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000385d:	75 13                	jne    c0003872 <dir_find+0xfe>
c000385f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003862:	b9 0b 00 00 00       	mov    ecx,0xb
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 fd e4 ff ff       	call   c0001d6b <mem_cmp>
c000386e:	85 c0                	test   eax,eax
c0003870:	74 26                	je     c0003898 <dir_find+0x124>
c0003872:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003879:	bf ff ff ff ff       	mov    edi,0xffffffff
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 d8                	mov    eax,ebx
c0003882:	e8 17 fc ff ff       	call   c000349e <dir_next>
c0003887:	89 c6                	mov    esi,eax
c0003889:	85 c0                	test   eax,eax
c000388b:	0f 84 16 ff ff ff    	je     c00037a7 <dir_find+0x33>
c0003891:	eb 05                	jmp    c0003898 <dir_find+0x124>
c0003893:	be 04 00 00 00       	mov    esi,0x4
c0003898:	83 c4 1c             	add    esp,0x1c
c000389b:	89 f0                	mov    eax,esi
c000389d:	5b                   	pop    ebx
c000389e:	5e                   	pop    esi
c000389f:	5f                   	pop    edi
c00038a0:	5d                   	pop    ebp
c00038a1:	c3                   	ret    

c00038a2 <follow_path>:
c00038a2:	56                   	push   esi
c00038a3:	53                   	push   ebx
c00038a4:	89 c3                	mov    ebx,eax
c00038a6:	83 ec 14             	sub    esp,0x14
c00038a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00038af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038b3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038b5:	80 fa 5c             	cmp    dl,0x5c
c00038b8:	75 07                	jne    c00038c1 <follow_path+0x1f>
c00038ba:	40                   	inc    eax
c00038bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038bf:	eb ee                	jmp    c00038af <follow_path+0xd>
c00038c1:	80 fa 2f             	cmp    dl,0x2f
c00038c4:	74 f4                	je     c00038ba <follow_path+0x18>
c00038c6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038cd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038d0:	77 3e                	ja     c0003910 <follow_path+0x6e>
c00038d2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	89 d8                	mov    eax,ebx
c00038da:	e8 34 f9 ff ff       	call   c0003213 <dir_sdi>
c00038df:	eb 4f                	jmp    c0003930 <follow_path+0x8e>
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 8c fe ff ff       	call   c0003774 <dir_find>
c00038e8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038eb:	85 c0                	test   eax,eax
c00038ed:	75 32                	jne    c0003921 <follow_path+0x7f>
c00038ef:	80 e2 04             	and    dl,0x4
c00038f2:	75 3c                	jne    c0003930 <follow_path+0x8e>
c00038f4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038f8:	74 31                	je     c000392b <follow_path+0x89>
c00038fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038fd:	25 ff 01 00 00       	and    eax,0x1ff
c0003902:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003906:	8a 06                	mov    al,BYTE PTR [esi]
c0003908:	e8 b3 f7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000390d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003910:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 cb ef ff ff       	call   c00028e6 <create_name>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c2                	je     c00038e1 <follow_path+0x3f>
c000391f:	eb 0f                	jmp    c0003930 <follow_path+0x8e>
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	75 0a                	jne    c0003930 <follow_path+0x8e>
c0003926:	80 e2 04             	and    dl,0x4
c0003929:	75 05                	jne    c0003930 <follow_path+0x8e>
c000392b:	b8 05 00 00 00       	mov    eax,0x5
c0003930:	83 c4 14             	add    esp,0x14
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	c3                   	ret    

c0003936 <dir_register>:
c0003936:	55                   	push   ebp
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	be 06 00 00 00       	mov    esi,0x6
c000393e:	53                   	push   ebx
c000393f:	83 ec 2c             	sub    esp,0x2c
c0003942:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003946:	0f 85 65 01 00 00    	jne    c0003ab1 <dir_register+0x17b>
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003956:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000395d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003962:	74 06                	je     c000396a <dir_register+0x34>
c0003964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003968:	eb ef                	jmp    c0003959 <dir_register+0x23>
c000396a:	89 c3                	mov    ebx,eax
c000396c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003971:	8d 40 20             	lea    eax,[eax+0x20]
c0003974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003978:	89 c2                	mov    edx,eax
c000397a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000397e:	e8 c8 e3 ff ff       	call   c0001d4b <mem_cpy>
c0003983:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003988:	74 48                	je     c00039d2 <dir_register+0x9c>
c000398a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000398e:	bd 01 00 00 00       	mov    ebp,0x1
c0003993:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003996:	55                   	push   ebp
c0003997:	8d 54 24 18          	lea    edx,[esp+0x18]
c000399b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000399f:	e8 dc e6 ff ff       	call   c0002080 <gen_numname>
c00039a4:	58                   	pop    eax
c00039a5:	89 d8                	mov    eax,ebx
c00039a7:	e8 c8 fd ff ff       	call   c0003774 <dir_find>
c00039ac:	89 c6                	mov    esi,eax
c00039ae:	85 c0                	test   eax,eax
c00039b0:	75 10                	jne    c00039c2 <dir_register+0x8c>
c00039b2:	45                   	inc    ebp
c00039b3:	83 fd 64             	cmp    ebp,0x64
c00039b6:	75 db                	jne    c0003993 <dir_register+0x5d>
c00039b8:	be 07 00 00 00       	mov    esi,0x7
c00039bd:	e9 ef 00 00 00       	jmp    c0003ab1 <dir_register+0x17b>
c00039c2:	83 f8 04             	cmp    eax,0x4
c00039c5:	0f 85 e6 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c00039cb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039cf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039d2:	bd 01 00 00 00       	mov    ebp,0x1
c00039d7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039dc:	74 13                	je     c00039f1 <dir_register+0xbb>
c00039de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039e2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039e7:	83 c0 0c             	add    eax,0xc
c00039ea:	31 d2                	xor    edx,edx
c00039ec:	f7 f1                	div    ecx
c00039ee:	8d 68 01             	lea    ebp,[eax+0x1]
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	89 d8                	mov    eax,ebx
c00039f5:	e8 a9 fb ff ff       	call   c00035a3 <dir_alloc>
c00039fa:	89 c6                	mov    esi,eax
c00039fc:	85 c0                	test   eax,eax
c00039fe:	0f 85 ad 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a04:	4d                   	dec    ebp
c0003a05:	74 6a                	je     c0003a71 <dir_register+0x13b>
c0003a07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a0a:	89 e8                	mov    eax,ebp
c0003a0c:	c1 e0 05             	shl    eax,0x5
c0003a0f:	29 c2                	sub    edx,eax
c0003a11:	89 d8                	mov    eax,ebx
c0003a13:	e8 fb f7 ff ff       	call   c0003213 <dir_sdi>
c0003a18:	89 c6                	mov    esi,eax
c0003a1a:	85 c0                	test   eax,eax
c0003a1c:	0f 85 8f 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a26:	e8 11 e7 ff ff       	call   c000213c <sum_sfn>
c0003a2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a2f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	e8 0c e8 ff ff       	call   c0002245 <move_window>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 72                	jne    c0003ab1 <dir_register+0x17b>
c0003a3f:	83 ec 0c             	sub    esp,0xc
c0003a42:	89 e8                	mov    eax,ebp
c0003a44:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a49:	0f b6 c8             	movzx  ecx,al
c0003a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a4f:	52                   	push   edx
c0003a50:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a53:	e8 a4 e5 ff ff       	call   c0001ffc <put_lfn>
c0003a58:	31 d2                	xor    edx,edx
c0003a5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a5e:	89 d8                	mov    eax,ebx
c0003a60:	e8 39 fa ff ff       	call   c000349e <dir_next>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c6                	mov    esi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	75 43                	jne    c0003ab1 <dir_register+0x17b>
c0003a6e:	4d                   	dec    ebp
c0003a6f:	75 be                	jne    c0003a2f <dir_register+0xf9>
c0003a71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a74:	89 f8                	mov    eax,edi
c0003a76:	e8 ca e7 ff ff       	call   c0002245 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 30                	jne    c0003ab1 <dir_register+0x17b>
c0003a81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a84:	b9 20 00 00 00       	mov    ecx,0x20
c0003a89:	31 d2                	xor    edx,edx
c0003a8b:	e8 d0 e2 ff ff       	call   c0001d60 <mem_set>
c0003a90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a9c:	e8 aa e2 ff ff       	call   c0001d4b <mem_cpy>
c0003aa1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aa4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa7:	83 e0 18             	and    eax,0x18
c0003aaa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ab1:	83 c4 2c             	add    esp,0x2c
c0003ab4:	89 f0                	mov    eax,esi
c0003ab6:	5b                   	pop    ebx
c0003ab7:	5e                   	pop    esi
c0003ab8:	5f                   	pop    edi
c0003ab9:	5d                   	pop    ebp
c0003aba:	c3                   	ret    

c0003abb <f_mount>:
c0003abb:	53                   	push   ebx
c0003abc:	83 ec 18             	sub    esp,0x18
c0003abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ac3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003acf:	e8 7a e6 ff ff       	call   c000214e <get_ldnumber>
c0003ad4:	89 c2                	mov    edx,eax
c0003ad6:	b8 0b 00 00 00       	mov    eax,0xb
c0003adb:	85 d2                	test   edx,edx
c0003add:	78 39                	js     c0003b18 <f_mount+0x5d>
c0003adf:	8b 04 95 20 fa 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe05e0]
c0003ae6:	85 c0                	test   eax,eax
c0003ae8:	74 03                	je     c0003aed <f_mount+0x32>
c0003aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 03                	je     c0003af8 <f_mount+0x3d>
c0003af5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003afc:	89 04 95 20 fa 01 c0 	mov    DWORD PTR [edx*4-0x3ffe05e0],eax
c0003b03:	31 c0                	xor    eax,eax
c0003b05:	84 db                	test   bl,bl
c0003b07:	74 0f                	je     c0003b18 <f_mount+0x5d>
c0003b09:	31 c9                	xor    ecx,ecx
c0003b0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b13:	e8 80 e8 ff ff       	call   c0002398 <mount_volume>
c0003b18:	83 c4 18             	add    esp,0x18
c0003b1b:	5b                   	pop    ebx
c0003b1c:	c3                   	ret    

c0003b1d <f_open>:
c0003b1d:	55                   	push   ebp
c0003b1e:	b8 09 00 00 00       	mov    eax,0x9
c0003b23:	57                   	push   edi
c0003b24:	56                   	push   esi
c0003b25:	53                   	push   ebx
c0003b26:	83 ec 5c             	sub    esp,0x5c
c0003b29:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b2d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b31:	85 db                	test   ebx,ebx
c0003b33:	0f 84 a7 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b39:	89 fe                	mov    esi,edi
c0003b3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b3f:	83 e6 3f             	and    esi,0x3f
c0003b42:	89 f0                	mov    eax,esi
c0003b44:	0f b6 c8             	movzx  ecx,al
c0003b47:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b4b:	e8 48 e8 ff ff       	call   c0002398 <mount_volume>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	0f 85 82 02 00 00    	jne    c0003dda <f_open+0x2bd>
c0003b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b5c:	83 ec 0c             	sub    esp,0xc
c0003b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b63:	68 00 02 00 00       	push   0x200
c0003b68:	e8 ff 1e 00 00       	call   c0005a6c <ff_memalloc>
c0003b6d:	83 c4 10             	add    esp,0x10
c0003b70:	89 c5                	mov    ebp,eax
c0003b72:	b8 11 00 00 00       	mov    eax,0x11
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	0f 84 61 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b83:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b87:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b8e:	e8 0f fd ff ff       	call   c00038a2 <follow_path>
c0003b93:	85 c0                	test   eax,eax
c0003b95:	75 0c                	jne    c0003ba3 <f_open+0x86>
c0003b97:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b9c:	79 05                	jns    c0003ba3 <f_open+0x86>
c0003b9e:	b8 06 00 00 00       	mov    eax,0x6
c0003ba3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ba9:	0f 84 de 00 00 00    	je     c0003c8d <f_open+0x170>
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	74 1e                	je     c0003bd1 <f_open+0xb4>
c0003bb3:	83 f8 04             	cmp    eax,0x4
c0003bb6:	0f 85 06 02 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bc0:	83 ce 08             	or     esi,0x8
c0003bc3:	e8 6e fd ff ff       	call   c0003936 <dir_register>
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	74 2f                	je     c0003bfb <f_open+0xde>
c0003bcc:	e9 f1 01 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003bd1:	b8 07 00 00 00       	mov    eax,0x7
c0003bd6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bdb:	0f 85 e1 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003be1:	b8 08 00 00 00       	mov    eax,0x8
c0003be6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bec:	0f 85 d0 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bf2:	83 e7 08             	and    edi,0x8
c0003bf5:	0f 84 bf 00 00 00    	je     c0003cba <f_open+0x19d>
c0003bfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c03:	89 ca                	mov    edx,ecx
c0003c05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c09:	8a 00                	mov    al,BYTE PTR [eax]
c0003c0b:	e8 b0 f4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c14:	89 c7                	mov    edi,eax
c0003c16:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c1b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c1e:	e8 25 e1 ff ff       	call   c0001d48 <st_dword>
c0003c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c27:	31 c9                	xor    ecx,ecx
c0003c29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c35:	e8 af f4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0003c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c3e:	31 d2                	xor    edx,edx
c0003c40:	83 c0 1c             	add    eax,0x1c
c0003c43:	e8 00 e1 ff ff       	call   c0001d48 <st_dword>
c0003c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4c:	85 ff                	test   edi,edi
c0003c4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c52:	74 66                	je     c0003cba <f_open+0x19d>
c0003c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c58:	31 c9                	xor    ecx,ecx
c0003c5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c5d:	89 fa                	mov    edx,edi
c0003c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c67:	e8 a9 f7 ff ff       	call   c0003415 <remove_chain>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	0f 85 4e 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c78:	4f                   	dec    edi
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	e8 c3 e5 ff ff       	call   c0002245 <move_window>
c0003c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c86:	85 c0                	test   eax,eax
c0003c88:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c8b:	eb 27                	jmp    c0003cb4 <f_open+0x197>
c0003c8d:	85 c0                	test   eax,eax
c0003c8f:	0f 85 2d 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c95:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c99:	b8 04 00 00 00       	mov    eax,0x4
c0003c9e:	f6 c2 10             	test   dl,0x10
c0003ca1:	0f 85 1b 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003ca7:	83 e7 02             	and    edi,0x2
c0003caa:	74 0e                	je     c0003cba <f_open+0x19d>
c0003cac:	b8 07 00 00 00       	mov    eax,0x7
c0003cb1:	80 e2 01             	and    dl,0x1
c0003cb4:	0f 85 08 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003cba:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cc0:	74 03                	je     c0003cc5 <f_open+0x1a8>
c0003cc2:	83 ce 40             	or     esi,0x40
c0003cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ccd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cd0:	89 fa                	mov    edx,edi
c0003cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cd9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cdc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cde:	e8 dd f3 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003ce3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ce6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ce9:	e8 3e e0 ff ff       	call   c0001d2c <ld_dword>
c0003cee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003cf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003cf7:	31 d2                	xor    edx,edx
c0003cf9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d01:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d0c:	89 f0                	mov    eax,esi
c0003d0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d18:	b9 00 02 00 00       	mov    ecx,0x200
c0003d1d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d24:	e8 37 e0 ff ff       	call   c0001d60 <mem_set>
c0003d29:	83 e6 20             	and    esi,0x20
c0003d2c:	75 07                	jne    c0003d35 <f_open+0x218>
c0003d2e:	31 c0                	xor    eax,eax
c0003d30:	e9 8d 00 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003d35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d38:	85 ff                	test   edi,edi
c0003d3a:	74 f2                	je     c0003d2e <f_open+0x211>
c0003d3c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d43:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d46:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d4a:	c1 e6 09             	shl    esi,0x9
c0003d4d:	39 fe                	cmp    esi,edi
c0003d4f:	73 1c                	jae    c0003d6d <f_open+0x250>
c0003d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d53:	29 f7                	sub    edi,esi
c0003d55:	e8 b7 f3 ff ff       	call   c0003111 <get_fat.isra.2>
c0003d5a:	89 c2                	mov    edx,eax
c0003d5c:	83 f8 01             	cmp    eax,0x1
c0003d5f:	76 10                	jbe    c0003d71 <f_open+0x254>
c0003d61:	83 f8 ff             	cmp    eax,0xffffffff
c0003d64:	75 e7                	jne    c0003d4d <f_open+0x230>
c0003d66:	b8 01 00 00 00       	mov    eax,0x1
c0003d6b:	eb 09                	jmp    c0003d76 <f_open+0x259>
c0003d6d:	31 c0                	xor    eax,eax
c0003d6f:	eb 05                	jmp    c0003d76 <f_open+0x259>
c0003d71:	b8 02 00 00 00       	mov    eax,0x2
c0003d76:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d79:	85 c0                	test   eax,eax
c0003d7b:	75 45                	jne    c0003dc2 <f_open+0x2a5>
c0003d7d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d83:	74 a9                	je     c0003d2e <f_open+0x211>
c0003d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d89:	89 f0                	mov    eax,esi
c0003d8b:	e8 d5 e1 ff ff       	call   c0001f65 <clst2sect>
c0003d90:	89 c2                	mov    edx,eax
c0003d92:	b8 02 00 00 00       	mov    eax,0x2
c0003d97:	85 d2                	test   edx,edx
c0003d99:	74 27                	je     c0003dc2 <f_open+0x2a5>
c0003d9b:	89 f9                	mov    ecx,edi
c0003d9d:	c1 e9 09             	shr    ecx,0x9
c0003da0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003da3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003da6:	6a 01                	push   0x1
c0003da8:	50                   	push   eax
c0003da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003db1:	50                   	push   eax
c0003db2:	e8 1d df ff ff       	call   c0001cd4 <disk_read>
c0003db7:	83 c4 10             	add    esp,0x10
c0003dba:	85 c0                	test   eax,eax
c0003dbc:	0f 95 c0             	setne  al
c0003dbf:	0f b6 c0             	movzx  eax,al
c0003dc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dc6:	83 ec 0c             	sub    esp,0xc
c0003dc9:	55                   	push   ebp
c0003dca:	e8 b5 1c 00 00       	call   c0005a84 <ff_memfree>
c0003dcf:	83 c4 10             	add    esp,0x10
c0003dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 06                	je     c0003de0 <f_open+0x2c3>
c0003dda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003de0:	83 c4 5c             	add    esp,0x5c
c0003de3:	5b                   	pop    ebx
c0003de4:	5e                   	pop    esi
c0003de5:	5f                   	pop    edi
c0003de6:	5d                   	pop    ebp
c0003de7:	c3                   	ret    

c0003de8 <f_read>:
c0003de8:	55                   	push   ebp
c0003de9:	57                   	push   edi
c0003dea:	56                   	push   esi
c0003deb:	53                   	push   ebx
c0003dec:	83 ec 2c             	sub    esp,0x2c
c0003def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003df3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003dfd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e05:	89 d8                	mov    eax,ebx
c0003e07:	e8 8f e3 ff ff       	call   c000219b <validate>
c0003e0c:	89 c5                	mov    ebp,eax
c0003e0e:	85 c0                	test   eax,eax
c0003e10:	0f 85 c7 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e16:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e1a:	85 ed                	test   ebp,ebp
c0003e1c:	0f 85 bb 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e22:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e26:	0f 84 ac 01 00 00    	je     c0003fd8 <f_read+0x1f0>
c0003e2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e2f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e32:	89 c7                	mov    edi,eax
c0003e34:	39 f0                	cmp    eax,esi
c0003e36:	0f 86 ad 00 00 00    	jbe    c0003ee9 <f_read+0x101>
c0003e3c:	89 f7                	mov    edi,esi
c0003e3e:	e9 a6 00 00 00       	jmp    c0003ee9 <f_read+0x101>
c0003e43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e46:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e4c:	0f 85 5b 01 00 00    	jne    c0003fad <f_read+0x1c5>
c0003e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e56:	89 d1                	mov    ecx,edx
c0003e58:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e5c:	c1 e9 09             	shr    ecx,0x9
c0003e5f:	48                   	dec    eax
c0003e60:	21 c8                	and    eax,ecx
c0003e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e66:	0f 84 8a 00 00 00    	je     c0003ef6 <f_read+0x10e>
c0003e6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e73:	89 c8                	mov    eax,ecx
c0003e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e79:	e8 e7 e0 ff ff       	call   c0001f65 <clst2sect>
c0003e7e:	85 c0                	test   eax,eax
c0003e80:	0f 84 88 00 00 00    	je     c0003f0e <f_read+0x126>
c0003e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e92:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e98:	0f 86 bd 00 00 00    	jbe    c0003f5b <f_read+0x173>
c0003e9e:	89 fe                	mov    esi,edi
c0003ea0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ea4:	c1 ee 09             	shr    esi,0x9
c0003ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003eab:	01 f2                	add    edx,esi
c0003ead:	39 c2                	cmp    edx,eax
c0003eaf:	76 06                	jbe    c0003eb7 <f_read+0xcf>
c0003eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eb5:	89 c6                	mov    esi,eax
c0003eb7:	56                   	push   esi
c0003eb8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ec0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ec4:	50                   	push   eax
c0003ec5:	e8 0a de ff ff       	call   c0001cd4 <disk_read>
c0003eca:	83 c4 10             	add    esp,0x10
c0003ecd:	85 c0                	test   eax,eax
c0003ecf:	75 50                	jne    c0003f21 <f_read+0x139>
c0003ed1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ed5:	78 60                	js     c0003f37 <f_read+0x14f>
c0003ed7:	c1 e6 09             	shl    esi,0x9
c0003eda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ede:	29 f7                	sub    edi,esi
c0003ee0:	01 30                	add    DWORD PTR [eax],esi
c0003ee2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ee6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ee9:	85 ff                	test   edi,edi
c0003eeb:	0f 85 52 ff ff ff    	jne    c0003e43 <f_read+0x5b>
c0003ef1:	e9 e7 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003ef6:	85 d2                	test   edx,edx
c0003ef8:	75 05                	jne    c0003eff <f_read+0x117>
c0003efa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003efd:	eb 0a                	jmp    c0003f09 <f_read+0x121>
c0003eff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f04:	e8 08 f2 ff ff       	call   c0003111 <get_fat.isra.2>
c0003f09:	83 f8 01             	cmp    eax,0x1
c0003f0c:	77 0e                	ja     c0003f1c <f_read+0x134>
c0003f0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f12:	bd 02 00 00 00       	mov    ebp,0x2
c0003f17:	e9 c1 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f1f:	75 0e                	jne    c0003f2f <f_read+0x147>
c0003f21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f25:	bd 01 00 00 00       	mov    ebp,0x1
c0003f2a:	e9 ae 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f32:	e9 35 ff ff ff       	jmp    c0003e6c <f_read+0x84>
c0003f37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f3e:	39 f0                	cmp    eax,esi
c0003f40:	73 95                	jae    c0003ed7 <f_read+0xef>
c0003f42:	c1 e0 09             	shl    eax,0x9
c0003f45:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f51:	e8 f5 dd ff ff       	call   c0001d4b <mem_cpy>
c0003f56:	e9 7c ff ff ff       	jmp    c0003ed7 <f_read+0xef>
c0003f5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f62:	74 42                	je     c0003fa6 <f_read+0x1be>
c0003f64:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f67:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f6b:	79 19                	jns    c0003f86 <f_read+0x19e>
c0003f6d:	6a 01                	push   0x1
c0003f6f:	50                   	push   eax
c0003f70:	56                   	push   esi
c0003f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f75:	50                   	push   eax
c0003f76:	e8 6f dd ff ff       	call   c0001cea <disk_write>
c0003f7b:	83 c4 10             	add    esp,0x10
c0003f7e:	85 c0                	test   eax,eax
c0003f80:	75 9f                	jne    c0003f21 <f_read+0x139>
c0003f82:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f86:	6a 01                	push   0x1
c0003f88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f8c:	56                   	push   esi
c0003f8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 39 dd ff ff       	call   c0001cd4 <disk_read>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	0f 85 7b ff ff ff    	jne    c0003f21 <f_read+0x139>
c0003fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003faa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fb0:	ba 00 02 00 00       	mov    edx,0x200
c0003fb5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fba:	89 fe                	mov    esi,edi
c0003fbc:	29 c2                	sub    edx,eax
c0003fbe:	39 d7                	cmp    edi,edx
c0003fc0:	76 02                	jbe    c0003fc4 <f_read+0x1dc>
c0003fc2:	89 d6                	mov    esi,edx
c0003fc4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fc8:	89 f1                	mov    ecx,esi
c0003fca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fce:	e8 78 dd ff ff       	call   c0001d4b <mem_cpy>
c0003fd3:	e9 02 ff ff ff       	jmp    c0003eda <f_read+0xf2>
c0003fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fdd:	83 c4 2c             	add    esp,0x2c
c0003fe0:	89 e8                	mov    eax,ebp
c0003fe2:	5b                   	pop    ebx
c0003fe3:	5e                   	pop    esi
c0003fe4:	5f                   	pop    edi
c0003fe5:	5d                   	pop    ebp
c0003fe6:	c3                   	ret    

c0003fe7 <f_write>:
c0003fe7:	55                   	push   ebp
c0003fe8:	57                   	push   edi
c0003fe9:	56                   	push   esi
c0003fea:	53                   	push   ebx
c0003feb:	83 ec 2c             	sub    esp,0x2c
c0003fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004000:	89 d8                	mov    eax,ebx
c0004002:	e8 94 e1 ff ff       	call   c000219b <validate>
c0004007:	89 c5                	mov    ebp,eax
c0004009:	85 c0                	test   eax,eax
c000400b:	0f 85 00 02 00 00    	jne    c0004211 <f_write+0x22a>
c0004011:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004015:	85 ed                	test   ebp,ebp
c0004017:	0f 85 f4 01 00 00    	jne    c0004211 <f_write+0x22a>
c000401d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004021:	0f 84 e5 01 00 00    	je     c000420c <f_write+0x225>
c0004027:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402a:	89 c7                	mov    edi,eax
c000402c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004030:	0f 83 ea 00 00 00    	jae    c0004120 <f_write+0x139>
c0004036:	f7 d0                	not    eax
c0004038:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000403c:	e9 df 00 00 00       	jmp    c0004120 <f_write+0x139>
c0004041:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004044:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000404a:	0f 85 8b 01 00 00    	jne    c00041db <f_write+0x1f4>
c0004050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004054:	89 d1                	mov    ecx,edx
c0004056:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000405a:	c1 e9 09             	shr    ecx,0x9
c000405d:	48                   	dec    eax
c000405e:	21 c8                	and    eax,ecx
c0004060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004064:	0f 84 c3 00 00 00    	je     c000412d <f_write+0x146>
c000406a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000406e:	0f 88 18 01 00 00    	js     c000418c <f_write+0x1a5>
c0004074:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004078:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000407b:	89 c8                	mov    eax,ecx
c000407d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004081:	e8 df de ff ff       	call   c0001f65 <clst2sect>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 84 c8 00 00 00    	je     c0004156 <f_write+0x16f>
c000408e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004096:	01 c7                	add    edi,eax
c0004098:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040a0:	0f 86 0d 01 00 00    	jbe    c00041b3 <f_write+0x1cc>
c00040a6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040aa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ae:	c1 ee 09             	shr    esi,0x9
c00040b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040b5:	01 f2                	add    edx,esi
c00040b7:	39 c2                	cmp    edx,eax
c00040b9:	76 06                	jbe    c00040c1 <f_write+0xda>
c00040bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040bf:	89 c6                	mov    esi,eax
c00040c1:	56                   	push   esi
c00040c2:	57                   	push   edi
c00040c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040cb:	50                   	push   eax
c00040cc:	e8 19 dc ff ff       	call   c0001cea <disk_write>
c00040d1:	83 c4 10             	add    esp,0x10
c00040d4:	85 c0                	test   eax,eax
c00040d6:	0f 85 8d 00 00 00    	jne    c0004169 <f_write+0x182>
c00040dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040df:	29 fa                	sub    edx,edi
c00040e1:	39 f2                	cmp    edx,esi
c00040e3:	73 18                	jae    c00040fd <f_write+0x116>
c00040e5:	c1 e2 09             	shl    edx,0x9
c00040e8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040eb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ef:	b9 00 02 00 00       	mov    ecx,0x200
c00040f4:	e8 52 dc ff ff       	call   c0001d4b <mem_cpy>
c00040f9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040fd:	c1 e6 09             	shl    esi,0x9
c0004100:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004104:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004108:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000410c:	01 30                	add    DWORD PTR [eax],esi
c000410e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004111:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004114:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004117:	39 f0                	cmp    eax,esi
c0004119:	73 02                	jae    c000411d <f_write+0x136>
c000411b:	89 f0                	mov    eax,esi
c000411d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004120:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004125:	0f 85 16 ff ff ff    	jne    c0004041 <f_write+0x5a>
c000412b:	eb 1b                	jmp    c0004148 <f_write+0x161>
c000412d:	85 d2                	test   edx,edx
c000412f:	75 09                	jne    c000413a <f_write+0x153>
c0004131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004134:	85 c0                	test   eax,eax
c0004136:	75 19                	jne    c0004151 <f_write+0x16a>
c0004138:	eb 03                	jmp    c000413d <f_write+0x156>
c000413a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000413d:	89 d8                	mov    eax,ebx
c000413f:	e8 97 f1 ff ff       	call   c00032db <create_chain>
c0004144:	85 c0                	test   eax,eax
c0004146:	75 09                	jne    c0004151 <f_write+0x16a>
c0004148:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000414c:	e9 c0 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004151:	83 f8 01             	cmp    eax,0x1
c0004154:	75 0e                	jne    c0004164 <f_write+0x17d>
c0004156:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000415a:	bd 02 00 00 00       	mov    ebp,0x2
c000415f:	e9 ad 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004164:	83 f8 ff             	cmp    eax,0xffffffff
c0004167:	75 0e                	jne    c0004177 <f_write+0x190>
c0004169:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000416d:	bd 01 00 00 00       	mov    ebp,0x1
c0004172:	e9 9a 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004177:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000417a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417e:	0f 85 e6 fe ff ff    	jne    c000406a <f_write+0x83>
c0004184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004187:	e9 de fe ff ff       	jmp    c000406a <f_write+0x83>
c000418c:	6a 01                	push   0x1
c000418e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004191:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004194:	50                   	push   eax
c0004195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004199:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000419d:	50                   	push   eax
c000419e:	e8 47 db ff ff       	call   c0001cea <disk_write>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	85 c0                	test   eax,eax
c00041a8:	75 bf                	jne    c0004169 <f_write+0x182>
c00041aa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ae:	e9 c1 fe ff ff       	jmp    c0004074 <f_write+0x8d>
c00041b3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041b6:	74 20                	je     c00041d8 <f_write+0x1f1>
c00041b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041bb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041be:	76 18                	jbe    c00041d8 <f_write+0x1f1>
c00041c0:	6a 01                	push   0x1
c00041c2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c5:	57                   	push   edi
c00041c6:	50                   	push   eax
c00041c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041cb:	50                   	push   eax
c00041cc:	e8 03 db ff ff       	call   c0001cd4 <disk_read>
c00041d1:	83 c4 10             	add    esp,0x10
c00041d4:	85 c0                	test   eax,eax
c00041d6:	75 91                	jne    c0004169 <f_write+0x182>
c00041d8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041de:	ba 00 02 00 00       	mov    edx,0x200
c00041e3:	25 ff 01 00 00       	and    eax,0x1ff
c00041e8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ec:	29 c2                	sub    edx,eax
c00041ee:	39 d6                	cmp    esi,edx
c00041f0:	76 02                	jbe    c00041f4 <f_write+0x20d>
c00041f2:	89 d6                	mov    esi,edx
c00041f4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041f8:	89 f1                	mov    ecx,esi
c00041fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041fe:	e8 48 db ff ff       	call   c0001d4b <mem_cpy>
c0004203:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004207:	e9 f4 fe ff ff       	jmp    c0004100 <f_write+0x119>
c000420c:	bd 07 00 00 00       	mov    ebp,0x7
c0004211:	83 c4 2c             	add    esp,0x2c
c0004214:	89 e8                	mov    eax,ebp
c0004216:	5b                   	pop    ebx
c0004217:	5e                   	pop    esi
c0004218:	5f                   	pop    edi
c0004219:	5d                   	pop    ebp
c000421a:	c3                   	ret    

c000421b <f_sync>:
c000421b:	56                   	push   esi
c000421c:	53                   	push   ebx
c000421d:	83 ec 14             	sub    esp,0x14
c0004220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004224:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 6c df ff ff       	call   c000219b <validate>
c000422f:	85 c0                	test   eax,eax
c0004231:	0f 85 93 00 00 00    	jne    c00042ca <f_sync+0xaf>
c0004237:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000423a:	f6 c2 40             	test   dl,0x40
c000423d:	0f 84 87 00 00 00    	je     c00042ca <f_sync+0xaf>
c0004243:	84 d2                	test   dl,dl
c0004245:	79 29                	jns    c0004270 <f_sync+0x55>
c0004247:	6a 01                	push   0x1
c0004249:	8d 43 28             	lea    eax,[ebx+0x28]
c000424c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000424f:	50                   	push   eax
c0004250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 8c da ff ff       	call   c0001cea <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	89 c2                	mov    edx,eax
c0004263:	b8 01 00 00 00       	mov    eax,0x1
c0004268:	85 d2                	test   edx,edx
c000426a:	75 5e                	jne    c00042ca <f_sync+0xaf>
c000426c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004277:	e8 c9 df ff ff       	call   c0002245 <move_window>
c000427c:	85 c0                	test   eax,eax
c000427e:	75 4a                	jne    c00042ca <f_sync+0xaf>
c0004280:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004283:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004287:	89 f2                	mov    edx,esi
c0004289:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000428e:	e8 56 ee ff ff       	call   c00030e9 <st_clust.isra.1>
c0004293:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004296:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004299:	e8 aa da ff ff       	call   c0001d48 <st_dword>
c000429e:	8d 46 16             	lea    eax,[esi+0x16]
c00042a1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042a6:	e8 9d da ff ff       	call   c0001d48 <st_dword>
c00042ab:	8d 46 12             	lea    eax,[esi+0x12]
c00042ae:	31 d2                	xor    edx,edx
c00042b0:	e8 8f da ff ff       	call   c0001d44 <st_word>
c00042b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c1:	e8 bf e9 ff ff       	call   c0002c85 <sync_fs>
c00042c6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ca:	83 c4 14             	add    esp,0x14
c00042cd:	5b                   	pop    ebx
c00042ce:	5e                   	pop    esi
c00042cf:	c3                   	ret    

c00042d0 <f_close>:
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 24             	sub    esp,0x24
c00042d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042d8:	53                   	push   ebx
c00042d9:	e8 3d ff ff ff       	call   c000421b <f_sync>
c00042de:	83 c4 10             	add    esp,0x10
c00042e1:	85 c0                	test   eax,eax
c00042e3:	75 15                	jne    c00042fa <f_close+0x2a>
c00042e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 ab de ff ff       	call   c000219b <validate>
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 06                	jne    c00042fa <f_close+0x2a>
c00042f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042fa:	83 c4 18             	add    esp,0x18
c00042fd:	5b                   	pop    ebx
c00042fe:	c3                   	ret    

c00042ff <f_lseek>:
c00042ff:	55                   	push   ebp
c0004300:	57                   	push   edi
c0004301:	56                   	push   esi
c0004302:	53                   	push   ebx
c0004303:	83 ec 2c             	sub    esp,0x2c
c0004306:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	89 d8                	mov    eax,ebx
c0004314:	e8 82 de ff ff       	call   c000219b <validate>
c0004319:	89 c5                	mov    ebp,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 79 01 00 00    	jne    c000449c <f_lseek+0x19d>
c0004323:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004327:	85 ed                	test   ebp,ebp
c0004329:	0f 85 6d 01 00 00    	jne    c000449c <f_lseek+0x19d>
c000432f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004332:	39 f0                	cmp    eax,esi
c0004334:	73 08                	jae    c000433e <f_lseek+0x3f>
c0004336:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433a:	75 02                	jne    c000433e <f_lseek+0x3f>
c000433c:	89 c6                	mov    esi,eax
c000433e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004341:	85 f6                	test   esi,esi
c0004343:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000434a:	75 07                	jne    c0004353 <f_lseek+0x54>
c000434c:	31 f6                	xor    esi,esi
c000434e:	e9 e2 00 00 00       	jmp    c0004435 <f_lseek+0x136>
c0004353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004357:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000435b:	c1 e7 09             	shl    edi,0x9
c000435e:	85 c9                	test   ecx,ecx
c0004360:	74 28                	je     c000438a <f_lseek+0x8b>
c0004362:	49                   	dec    ecx
c0004363:	31 d2                	xor    edx,edx
c0004365:	8d 46 ff             	lea    eax,[esi-0x1]
c0004368:	f7 f7                	div    edi
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004370:	89 c8                	mov    eax,ecx
c0004372:	f7 f7                	div    edi
c0004374:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004378:	72 10                	jb     c000438a <f_lseek+0x8b>
c000437a:	89 f8                	mov    eax,edi
c000437c:	f7 d8                	neg    eax
c000437e:	21 c1                	and    ecx,eax
c0004380:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004383:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004386:	29 ce                	sub    esi,ecx
c0004388:	eb 3c                	jmp    c00043c6 <f_lseek+0xc7>
c000438a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000438d:	85 c0                	test   eax,eax
c000438f:	75 32                	jne    c00043c3 <f_lseek+0xc4>
c0004391:	31 d2                	xor    edx,edx
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 41 ef ff ff       	call   c00032db <create_chain>
c000439a:	83 f8 01             	cmp    eax,0x1
c000439d:	75 0e                	jne    c00043ad <f_lseek+0xae>
c000439f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043a3:	bd 02 00 00 00       	mov    ebp,0x2
c00043a8:	e9 ef 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043ad:	83 f8 ff             	cmp    eax,0xffffffff
c00043b0:	75 0e                	jne    c00043c0 <f_lseek+0xc1>
c00043b2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b6:	bd 01 00 00 00       	mov    ebp,0x1
c00043bb:	e9 dc 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043c6:	85 c0                	test   eax,eax
c00043c8:	74 82                	je     c000434c <f_lseek+0x4d>
c00043ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043cd:	39 fe                	cmp    esi,edi
c00043cf:	76 3d                	jbe    c000440e <f_lseek+0x10f>
c00043d1:	01 fa                	add    edx,edi
c00043d3:	29 fe                	sub    esi,edi
c00043d5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043d8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043dc:	89 c2                	mov    edx,eax
c00043de:	74 0d                	je     c00043ed <f_lseek+0xee>
c00043e0:	89 d8                	mov    eax,ebx
c00043e2:	e8 f4 ee ff ff       	call   c00032db <create_chain>
c00043e7:	85 c0                	test   eax,eax
c00043e9:	75 09                	jne    c00043f4 <f_lseek+0xf5>
c00043eb:	eb 1f                	jmp    c000440c <f_lseek+0x10d>
c00043ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ef:	e8 1d ed ff ff       	call   c0003111 <get_fat.isra.2>
c00043f4:	83 f8 ff             	cmp    eax,0xffffffff
c00043f7:	74 b9                	je     c00043b2 <f_lseek+0xb3>
c00043f9:	83 f8 01             	cmp    eax,0x1
c00043fc:	76 a1                	jbe    c000439f <f_lseek+0xa0>
c00043fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004402:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004405:	76 98                	jbe    c000439f <f_lseek+0xa0>
c0004407:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000440a:	eb be                	jmp    c00043ca <f_lseek+0xcb>
c000440c:	31 f6                	xor    esi,esi
c000440e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004411:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004417:	0f 84 2f ff ff ff    	je     c000434c <f_lseek+0x4d>
c000441d:	89 c2                	mov    edx,eax
c000441f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004423:	e8 3d db ff ff       	call   c0001f65 <clst2sect>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 84 6f ff ff ff    	je     c000439f <f_lseek+0xa0>
c0004430:	c1 ee 09             	shr    esi,0x9
c0004433:	01 c6                	add    esi,eax
c0004435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004438:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000443b:	76 07                	jbe    c0004444 <f_lseek+0x145>
c000443d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004440:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004444:	a9 ff 01 00 00       	test   eax,0x1ff
c0004449:	74 51                	je     c000449c <f_lseek+0x19d>
c000444b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000444e:	39 f0                	cmp    eax,esi
c0004450:	74 4a                	je     c000449c <f_lseek+0x19d>
c0004452:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004455:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004459:	79 21                	jns    c000447c <f_lseek+0x17d>
c000445b:	6a 01                	push   0x1
c000445d:	50                   	push   eax
c000445e:	57                   	push   edi
c000445f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004463:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004467:	50                   	push   eax
c0004468:	e8 7d d8 ff ff       	call   c0001cea <disk_write>
c000446d:	83 c4 10             	add    esp,0x10
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 3a ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004478:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000447c:	6a 01                	push   0x1
c000447e:	56                   	push   esi
c000447f:	57                   	push   edi
c0004480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004484:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004488:	50                   	push   eax
c0004489:	e8 46 d8 ff ff       	call   c0001cd4 <disk_read>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	85 c0                	test   eax,eax
c0004493:	0f 85 19 ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004499:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000449c:	83 c4 2c             	add    esp,0x2c
c000449f:	89 e8                	mov    eax,ebp
c00044a1:	5b                   	pop    ebx
c00044a2:	5e                   	pop    esi
c00044a3:	5f                   	pop    edi
c00044a4:	5d                   	pop    ebp
c00044a5:	c3                   	ret    

c00044a6 <f_opendir>:
c00044a6:	56                   	push   esi
c00044a7:	b8 09 00 00 00       	mov    eax,0x9
c00044ac:	53                   	push   ebx
c00044ad:	83 ec 24             	sub    esp,0x24
c00044b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044b4:	85 db                	test   ebx,ebx
c00044b6:	0f 84 af 00 00 00    	je     c000456b <f_opendir+0xc5>
c00044bc:	31 c9                	xor    ecx,ecx
c00044be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044c2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044c6:	e8 cd de ff ff       	call   c0002398 <mount_volume>
c00044cb:	85 c0                	test   eax,eax
c00044cd:	0f 85 92 00 00 00    	jne    c0004565 <f_opendir+0xbf>
c00044d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d7:	83 ec 0c             	sub    esp,0xc
c00044da:	89 03                	mov    DWORD PTR [ebx],eax
c00044dc:	68 00 02 00 00       	push   0x200
c00044e1:	e8 86 15 00 00       	call   c0005a6c <ff_memalloc>
c00044e6:	83 c4 10             	add    esp,0x10
c00044e9:	89 c6                	mov    esi,eax
c00044eb:	b8 11 00 00 00       	mov    eax,0x11
c00044f0:	85 f6                	test   esi,esi
c00044f2:	74 77                	je     c000456b <f_opendir+0xc5>
c00044f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044fc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 9c f3 ff ff       	call   c00038a2 <follow_path>
c0004506:	85 c0                	test   eax,eax
c0004508:	75 37                	jne    c0004541 <f_opendir+0x9b>
c000450a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000450e:	78 1c                	js     c000452c <f_opendir+0x86>
c0004510:	b8 05 00 00 00       	mov    eax,0x5
c0004515:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004519:	74 26                	je     c0004541 <f_opendir+0x9b>
c000451b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000451e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004522:	8a 00                	mov    al,BYTE PTR [eax]
c0004524:	e8 97 eb ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004529:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004530:	31 d2                	xor    edx,edx
c0004532:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004536:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 d2 ec ff ff       	call   c0003213 <dir_sdi>
c0004541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004545:	83 ec 0c             	sub    esp,0xc
c0004548:	56                   	push   esi
c0004549:	e8 36 15 00 00       	call   c0005a84 <ff_memfree>
c000454e:	83 c4 10             	add    esp,0x10
c0004551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004555:	83 f8 04             	cmp    eax,0x4
c0004558:	74 06                	je     c0004560 <f_opendir+0xba>
c000455a:	85 c0                	test   eax,eax
c000455c:	74 0d                	je     c000456b <f_opendir+0xc5>
c000455e:	eb 05                	jmp    c0004565 <f_opendir+0xbf>
c0004560:	b8 05 00 00 00       	mov    eax,0x5
c0004565:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000456b:	83 c4 24             	add    esp,0x24
c000456e:	5b                   	pop    ebx
c000456f:	5e                   	pop    esi
c0004570:	c3                   	ret    

c0004571 <f_closedir>:
c0004571:	53                   	push   ebx
c0004572:	83 ec 18             	sub    esp,0x18
c0004575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004579:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000457d:	89 d8                	mov    eax,ebx
c000457f:	e8 17 dc ff ff       	call   c000219b <validate>
c0004584:	85 c0                	test   eax,eax
c0004586:	75 06                	jne    c000458e <f_closedir+0x1d>
c0004588:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458e:	83 c4 18             	add    esp,0x18
c0004591:	5b                   	pop    ebx
c0004592:	c3                   	ret    

c0004593 <f_readdir>:
c0004593:	57                   	push   edi
c0004594:	56                   	push   esi
c0004595:	53                   	push   ebx
c0004596:	83 ec 20             	sub    esp,0x20
c0004599:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000459d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 ef db ff ff       	call   c000219b <validate>
c00045ac:	85 c0                	test   eax,eax
c00045ae:	75 6e                	jne    c000461e <f_readdir+0x8b>
c00045b0:	85 ff                	test   edi,edi
c00045b2:	75 0b                	jne    c00045bf <f_readdir+0x2c>
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 d8                	mov    eax,ebx
c00045b8:	e8 56 ec ff ff       	call   c0003213 <dir_sdi>
c00045bd:	eb 5f                	jmp    c000461e <f_readdir+0x8b>
c00045bf:	83 ec 0c             	sub    esp,0xc
c00045c2:	68 00 02 00 00       	push   0x200
c00045c7:	e8 a0 14 00 00       	call   c0005a6c <ff_memalloc>
c00045cc:	83 c4 10             	add    esp,0x10
c00045cf:	89 c6                	mov    esi,eax
c00045d1:	b8 11 00 00 00       	mov    eax,0x11
c00045d6:	85 f6                	test   esi,esi
c00045d8:	74 44                	je     c000461e <f_readdir+0x8b>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	31 d2                	xor    edx,edx
c00045e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 1a f0 ff ff       	call   c0003604 <dir_read>
c00045ea:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ef:	75 19                	jne    c000460a <f_readdir+0x77>
c00045f1:	89 fa                	mov    edx,edi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 e2 e8 ff ff       	call   c0002edc <get_fileinfo>
c00045fa:	31 d2                	xor    edx,edx
c00045fc:	89 d8                	mov    eax,ebx
c00045fe:	e8 9b ee ff ff       	call   c000349e <dir_next>
c0004603:	83 f8 04             	cmp    eax,0x4
c0004606:	75 02                	jne    c000460a <f_readdir+0x77>
c0004608:	31 c0                	xor    eax,eax
c000460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000460e:	83 ec 0c             	sub    esp,0xc
c0004611:	56                   	push   esi
c0004612:	e8 6d 14 00 00       	call   c0005a84 <ff_memfree>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461e:	83 c4 20             	add    esp,0x20
c0004621:	5b                   	pop    ebx
c0004622:	5e                   	pop    esi
c0004623:	5f                   	pop    edi
c0004624:	c3                   	ret    

c0004625 <f_stat>:
c0004625:	57                   	push   edi
c0004626:	31 c9                	xor    ecx,ecx
c0004628:	56                   	push   esi
c0004629:	53                   	push   ebx
c000462a:	83 ec 30             	sub    esp,0x30
c000462d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004631:	89 e2                	mov    edx,esp
c0004633:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004637:	e8 5c dd ff ff       	call   c0002398 <mount_volume>
c000463c:	89 c3                	mov    ebx,eax
c000463e:	85 c0                	test   eax,eax
c0004640:	75 59                	jne    c000469b <f_stat+0x76>
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	bb 11 00 00 00       	mov    ebx,0x11
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 18 14 00 00       	call   c0005a6c <ff_memalloc>
c0004654:	83 c4 10             	add    esp,0x10
c0004657:	89 c6                	mov    esi,eax
c0004659:	85 c0                	test   eax,eax
c000465b:	74 3e                	je     c000469b <f_stat+0x76>
c000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004660:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004664:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004667:	89 e0                	mov    eax,esp
c0004669:	e8 34 f2 ff ff       	call   c00038a2 <follow_path>
c000466e:	89 c3                	mov    ebx,eax
c0004670:	85 c0                	test   eax,eax
c0004672:	75 1b                	jne    c000468f <f_stat+0x6a>
c0004674:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004679:	78 0f                	js     c000468a <f_stat+0x65>
c000467b:	85 ff                	test   edi,edi
c000467d:	74 10                	je     c000468f <f_stat+0x6a>
c000467f:	89 fa                	mov    edx,edi
c0004681:	89 e0                	mov    eax,esp
c0004683:	e8 54 e8 ff ff       	call   c0002edc <get_fileinfo>
c0004688:	eb 05                	jmp    c000468f <f_stat+0x6a>
c000468a:	bb 06 00 00 00       	mov    ebx,0x6
c000468f:	83 ec 0c             	sub    esp,0xc
c0004692:	56                   	push   esi
c0004693:	e8 ec 13 00 00       	call   c0005a84 <ff_memfree>
c0004698:	83 c4 10             	add    esp,0x10
c000469b:	83 c4 30             	add    esp,0x30
c000469e:	89 d8                	mov    eax,ebx
c00046a0:	5b                   	pop    ebx
c00046a1:	5e                   	pop    esi
c00046a2:	5f                   	pop    edi
c00046a3:	c3                   	ret    

c00046a4 <f_getfree>:
c00046a4:	55                   	push   ebp
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	57                   	push   edi
c00046a8:	56                   	push   esi
c00046a9:	53                   	push   ebx
c00046aa:	83 ec 2c             	sub    esp,0x2c
c00046ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046b1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046b5:	e8 de dc ff ff       	call   c0002398 <mount_volume>
c00046ba:	89 c7                	mov    edi,eax
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 d8 00 00 00    	jne    c000479c <f_getfree+0xf8>
c00046c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046cc:	89 30                	mov    DWORD PTR [eax],esi
c00046ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046d1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046d4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046d7:	39 d0                	cmp    eax,edx
c00046d9:	77 0b                	ja     c00046e6 <f_getfree+0x42>
c00046db:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046df:	89 01                	mov    DWORD PTR [ecx],eax
c00046e1:	e9 b6 00 00 00       	jmp    c000479c <f_getfree+0xf8>
c00046e6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046e9:	75 29                	jne    c0004714 <f_getfree+0x70>
c00046eb:	bd 02 00 00 00       	mov    ebp,0x2
c00046f0:	31 db                	xor    ebx,ebx
c00046f2:	89 ea                	mov    edx,ebp
c00046f4:	89 f0                	mov    eax,esi
c00046f6:	e8 16 ea ff ff       	call   c0003111 <get_fat.isra.2>
c00046fb:	83 f8 ff             	cmp    eax,0xffffffff
c00046fe:	74 7b                	je     c000477b <f_getfree+0xd7>
c0004700:	83 f8 01             	cmp    eax,0x1
c0004703:	74 7d                	je     c0004782 <f_getfree+0xde>
c0004705:	83 d3 00             	adc    ebx,0x0
c0004708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470c:	45                   	inc    ebp
c000470d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004710:	77 e0                	ja     c00046f2 <f_getfree+0x4e>
c0004712:	eb 77                	jmp    c000478b <f_getfree+0xe7>
c0004714:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004717:	31 db                	xor    ebx,ebx
c0004719:	31 f6                	xor    esi,esi
c000471b:	85 f6                	test   esi,esi
c000471d:	75 18                	jne    c0004737 <f_getfree+0x93>
c000471f:	8d 42 01             	lea    eax,[edx+0x1]
c0004722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472a:	e8 16 db ff ff       	call   c0002245 <move_window>
c000472f:	85 c0                	test   eax,eax
c0004731:	75 56                	jne    c0004789 <f_getfree+0xe5>
c0004733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000473f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004743:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004746:	75 11                	jne    c0004759 <f_getfree+0xb5>
c0004748:	e8 d2 d5 ff ff       	call   c0001d1f <ld_word>
c000474d:	66 83 f8 01          	cmp    ax,0x1
c0004751:	83 d3 00             	adc    ebx,0x0
c0004754:	83 c6 02             	add    esi,0x2
c0004757:	eb 13                	jmp    c000476c <f_getfree+0xc8>
c0004759:	e8 ce d5 ff ff       	call   c0001d2c <ld_dword>
c000475e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004763:	83 f8 01             	cmp    eax,0x1
c0004766:	83 d3 00             	adc    ebx,0x0
c0004769:	83 c6 04             	add    esi,0x4
c000476c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004776:	4d                   	dec    ebp
c0004777:	75 a2                	jne    c000471b <f_getfree+0x77>
c0004779:	eb 10                	jmp    c000478b <f_getfree+0xe7>
c000477b:	bf 01 00 00 00       	mov    edi,0x1
c0004780:	eb 09                	jmp    c000478b <f_getfree+0xe7>
c0004782:	bf 02 00 00 00       	mov    edi,0x2
c0004787:	eb 02                	jmp    c000478b <f_getfree+0xe7>
c0004789:	89 c7                	mov    edi,eax
c000478b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000478f:	89 18                	mov    DWORD PTR [eax],ebx
c0004791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004795:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004798:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000479c:	83 c4 2c             	add    esp,0x2c
c000479f:	89 f8                	mov    eax,edi
c00047a1:	5b                   	pop    ebx
c00047a2:	5e                   	pop    esi
c00047a3:	5f                   	pop    edi
c00047a4:	5d                   	pop    ebp
c00047a5:	c3                   	ret    

c00047a6 <f_truncate>:
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 14             	sub    esp,0x14
c00047ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b3:	89 d8                	mov    eax,ebx
c00047b5:	e8 e1 d9 ff ff       	call   c000219b <validate>
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	0f 85 be 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047c4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047c8:	85 f6                	test   esi,esi
c00047ca:	0f 85 b2 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047d4:	0f 84 a3 00 00 00    	je     c000487d <f_truncate+0xd7>
c00047da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047e0:	0f 83 9c 00 00 00    	jae    c0004882 <f_truncate+0xdc>
c00047e6:	85 c0                	test   eax,eax
c00047e8:	75 15                	jne    c00047ff <f_truncate+0x59>
c00047ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047ed:	31 c9                	xor    ecx,ecx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	e8 1f ec ff ff       	call   c0003415 <remove_chain>
c00047f6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047fd:	eb 35                	jmp    c0004834 <f_truncate+0x8e>
c00047ff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004804:	e8 08 e9 ff ff       	call   c0003111 <get_fat.isra.2>
c0004809:	89 c2                	mov    edx,eax
c000480b:	b8 01 00 00 00       	mov    eax,0x1
c0004810:	83 fa ff             	cmp    edx,0xffffffff
c0004813:	74 1f                	je     c0004834 <f_truncate+0x8e>
c0004815:	b8 02 00 00 00       	mov    eax,0x2
c000481a:	83 fa 01             	cmp    edx,0x1
c000481d:	74 15                	je     c0004834 <f_truncate+0x8e>
c000481f:	31 c0                	xor    eax,eax
c0004821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004825:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004828:	76 0a                	jbe    c0004834 <f_truncate+0x8e>
c000482a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000482d:	89 d8                	mov    eax,ebx
c000482f:	e8 e1 eb ff ff       	call   c0003415 <remove_chain>
c0004834:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004837:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000483a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000483d:	83 ca 40             	or     edx,0x40
c0004840:	85 c0                	test   eax,eax
c0004842:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004845:	75 2f                	jne    c0004876 <f_truncate+0xd0>
c0004847:	84 d2                	test   dl,dl
c0004849:	79 37                	jns    c0004882 <f_truncate+0xdc>
c000484b:	6a 01                	push   0x1
c000484d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004850:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004853:	50                   	push   eax
c0004854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004858:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000485c:	50                   	push   eax
c000485d:	e8 88 d4 ff ff       	call   c0001cea <disk_write>
c0004862:	83 c4 10             	add    esp,0x10
c0004865:	85 c0                	test   eax,eax
c0004867:	75 08                	jne    c0004871 <f_truncate+0xcb>
c0004869:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000486d:	31 f6                	xor    esi,esi
c000486f:	eb 11                	jmp    c0004882 <f_truncate+0xdc>
c0004871:	b8 01 00 00 00       	mov    eax,0x1
c0004876:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004879:	89 c6                	mov    esi,eax
c000487b:	eb 05                	jmp    c0004882 <f_truncate+0xdc>
c000487d:	be 07 00 00 00       	mov    esi,0x7
c0004882:	89 f0                	mov    eax,esi
c0004884:	83 c4 14             	add    esp,0x14
c0004887:	5b                   	pop    ebx
c0004888:	5e                   	pop    esi
c0004889:	c3                   	ret    

c000488a <f_unlink>:
c000488a:	55                   	push   ebp
c000488b:	b9 02 00 00 00       	mov    ecx,0x2
c0004890:	57                   	push   edi
c0004891:	56                   	push   esi
c0004892:	53                   	push   ebx
c0004893:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004899:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000489d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048a4:	e8 ef da ff ff       	call   c0002398 <mount_volume>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	0f 85 f0 00 00 00    	jne    c00049a1 <f_unlink+0x117>
c00048b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b5:	83 ec 0c             	sub    esp,0xc
c00048b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048bc:	68 00 02 00 00       	push   0x200
c00048c1:	e8 a6 11 00 00       	call   c0005a6c <ff_memalloc>
c00048c6:	83 c4 10             	add    esp,0x10
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	b8 11 00 00 00       	mov    eax,0x11
c00048d0:	85 db                	test   ebx,ebx
c00048d2:	0f 84 c9 00 00 00    	je     c00049a1 <f_unlink+0x117>
c00048d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048dc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048e3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 b3 ef ff ff       	call   c00038a2 <follow_path>
c00048ef:	85 c0                	test   eax,eax
c00048f1:	0f 85 96 00 00 00    	jne    c000498d <f_unlink+0x103>
c00048f7:	b8 06 00 00 00       	mov    eax,0x6
c00048fc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004901:	0f 88 86 00 00 00    	js     c000498d <f_unlink+0x103>
c0004907:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000490c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004912:	74 07                	je     c000491b <f_unlink+0x91>
c0004914:	b8 07 00 00 00       	mov    eax,0x7
c0004919:	eb 72                	jmp    c000498d <f_unlink+0x103>
c000491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000491f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004923:	8a 07                	mov    al,BYTE PTR [edi]
c0004925:	e8 96 e7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000492a:	83 e5 10             	and    ebp,0x10
c000492d:	89 c6                	mov    esi,eax
c000492f:	75 0f                	jne    c0004940 <f_unlink+0xb6>
c0004931:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004935:	e8 e7 ed ff ff       	call   c0003721 <dir_remove>
c000493a:	85 c0                	test   eax,eax
c000493c:	74 2f                	je     c000496d <f_unlink+0xe3>
c000493e:	eb 4d                	jmp    c000498d <f_unlink+0x103>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494e:	e8 c0 e8 ff ff       	call   c0003213 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 36                	jne    c000498d <f_unlink+0x103>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 a2 ec ff ff       	call   c0003604 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 ae                	je     c0004914 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 22                	jne    c000498d <f_unlink+0x103>
c000496b:	eb c4                	jmp    c0004931 <f_unlink+0xa7>
c000496d:	85 f6                	test   esi,esi
c000496f:	75 0b                	jne    c000497c <f_unlink+0xf2>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 0b e3 ff ff       	call   c0002c85 <sync_fs>
c000497a:	eb 11                	jmp    c000498d <f_unlink+0x103>
c000497c:	31 c9                	xor    ecx,ecx
c000497e:	89 f2                	mov    edx,esi
c0004980:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004984:	e8 8c ea ff ff       	call   c0003415 <remove_chain>
c0004989:	85 c0                	test   eax,eax
c000498b:	74 e4                	je     c0004971 <f_unlink+0xe7>
c000498d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004991:	83 ec 0c             	sub    esp,0xc
c0004994:	53                   	push   ebx
c0004995:	e8 ea 10 00 00       	call   c0005a84 <ff_memfree>
c000499a:	83 c4 10             	add    esp,0x10
c000499d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049a1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <f_mkdir>:
c00049ac:	57                   	push   edi
c00049ad:	b9 02 00 00 00       	mov    ecx,0x2
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 50             	sub    esp,0x50
c00049b7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049bf:	e8 d4 d9 ff ff       	call   c0002398 <mount_volume>
c00049c4:	89 c3                	mov    ebx,eax
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 70 01 00 00    	jne    c0004b3e <f_mkdir+0x192>
c00049ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d2:	bb 11 00 00 00       	mov    ebx,0x11
c00049d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	68 00 02 00 00       	push   0x200
c00049e3:	e8 84 10 00 00       	call   c0005a6c <ff_memalloc>
c00049e8:	83 c4 10             	add    esp,0x10
c00049eb:	89 c7                	mov    edi,eax
c00049ed:	85 c0                	test   eax,eax
c00049ef:	0f 84 49 01 00 00    	je     c0004b3e <f_mkdir+0x192>
c00049f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a04:	e8 99 ee ff ff       	call   c00038a2 <follow_path>
c0004a09:	89 c3                	mov    ebx,eax
c0004a0b:	85 c0                	test   eax,eax
c0004a0d:	74 3e                	je     c0004a4d <f_mkdir+0xa1>
c0004a0f:	83 f8 04             	cmp    eax,0x4
c0004a12:	75 3e                	jne    c0004a52 <f_mkdir+0xa6>
c0004a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a18:	31 d2                	xor    edx,edx
c0004a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a22:	e8 b4 e8 ff ff       	call   c00032db <create_chain>
c0004a27:	89 c6                	mov    esi,eax
c0004a29:	85 c0                	test   eax,eax
c0004a2b:	74 0c                	je     c0004a39 <f_mkdir+0x8d>
c0004a2d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a32:	83 f8 01             	cmp    eax,0x1
c0004a35:	74 07                	je     c0004a3e <f_mkdir+0x92>
c0004a37:	eb 2a                	jmp    c0004a63 <f_mkdir+0xb7>
c0004a39:	bb 07 00 00 00       	mov    ebx,0x7
c0004a3e:	31 c9                	xor    ecx,ecx
c0004a40:	89 f2                	mov    edx,esi
c0004a42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a46:	e8 ca e9 ff ff       	call   c0003415 <remove_chain>
c0004a4b:	eb 05                	jmp    c0004a52 <f_mkdir+0xa6>
c0004a4d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a52:	83 ec 0c             	sub    esp,0xc
c0004a55:	57                   	push   edi
c0004a56:	e8 29 10 00 00       	call   c0005a84 <ff_memfree>
c0004a5b:	83 c4 10             	add    esp,0x10
c0004a5e:	e9 db 00 00 00       	jmp    c0004b3e <f_mkdir+0x192>
c0004a63:	bb 01 00 00 00       	mov    ebx,0x1
c0004a68:	83 f8 ff             	cmp    eax,0xffffffff
c0004a6b:	74 d1                	je     c0004a3e <f_mkdir+0x92>
c0004a6d:	89 f2                	mov    edx,esi
c0004a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a73:	e8 73 dd ff ff       	call   c00027eb <dir_clear>
c0004a78:	89 c3                	mov    ebx,eax
c0004a7a:	85 c0                	test   eax,eax
c0004a7c:	75 c0                	jne    c0004a3e <f_mkdir+0x92>
c0004a7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a87:	ba 20 00 00 00       	mov    edx,0x20
c0004a8c:	83 c0 34             	add    eax,0x34
c0004a8f:	e8 cc d2 ff ff       	call   c0001d60 <mem_set>
c0004a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a98:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a9d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004aa1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004aa5:	83 c0 4a             	add    eax,0x4a
c0004aa8:	e8 9b d2 ff ff       	call   c0001d48 <st_dword>
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	89 f1                	mov    ecx,esi
c0004ab3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab6:	e8 2e e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004abf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ac4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac7:	83 c0 54             	add    eax,0x54
c0004aca:	e8 7c d2 ff ff       	call   c0001d4b <mem_cpy>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ad7:	8d 50 54             	lea    edx,[eax+0x54]
c0004ada:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ade:	e8 06 e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004aeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aef:	e8 42 ee ff ff       	call   c0003936 <dir_register>
c0004af4:	89 c3                	mov    ebx,eax
c0004af6:	85 c0                	test   eax,eax
c0004af8:	0f 85 40 ff ff ff    	jne    c0004a3e <f_mkdir+0x92>
c0004afe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b07:	83 c0 16             	add    eax,0x16
c0004b0a:	e8 39 d2 ff ff       	call   c0001d48 <st_dword>
c0004b0f:	89 f1                	mov    ecx,esi
c0004b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	e8 cb e5 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b32:	e8 4e e1 ff ff       	call   c0002c85 <sync_fs>
c0004b37:	89 c3                	mov    ebx,eax
c0004b39:	e9 14 ff ff ff       	jmp    c0004a52 <f_mkdir+0xa6>
c0004b3e:	83 c4 50             	add    esp,0x50
c0004b41:	89 d8                	mov    eax,ebx
c0004b43:	5b                   	pop    ebx
c0004b44:	5e                   	pop    esi
c0004b45:	5f                   	pop    edi
c0004b46:	c3                   	ret    

c0004b47 <f_rename>:
c0004b47:	57                   	push   edi
c0004b48:	56                   	push   esi
c0004b49:	53                   	push   ebx
c0004b4a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b50:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b57:	e8 f2 d5 ff ff       	call   c000214e <get_ldnumber>
c0004b5c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b65:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b6c:	e8 27 d8 ff ff       	call   c0002398 <mount_volume>
c0004b71:	85 c0                	test   eax,eax
c0004b73:	0f 85 7a 01 00 00    	jne    c0004cf3 <f_rename+0x1ac>
c0004b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7d:	83 ec 0c             	sub    esp,0xc
c0004b80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b84:	68 00 02 00 00       	push   0x200
c0004b89:	e8 de 0e 00 00       	call   c0005a6c <ff_memalloc>
c0004b8e:	83 c4 10             	add    esp,0x10
c0004b91:	89 c6                	mov    esi,eax
c0004b93:	b8 11 00 00 00       	mov    eax,0x11
c0004b98:	85 f6                	test   esi,esi
c0004b9a:	0f 84 53 01 00 00    	je     c0004cf3 <f_rename+0x1ac>
c0004ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ba4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bae:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bb2:	e8 eb ec ff ff       	call   c00038a2 <follow_path>
c0004bb7:	85 c0                	test   eax,eax
c0004bb9:	0f 85 20 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bbf:	b8 06 00 00 00       	mov    eax,0x6
c0004bc4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bc9:	0f 85 10 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 6a d1 ff ff       	call   c0001d4b <mem_cpy>
c0004be1:	b9 30 00 00 00       	mov    ecx,0x30
c0004be6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 58 d1 ff ff       	call   c0001d4b <mem_cpy>
c0004bf3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 9f ec ff ff       	call   c00038a2 <follow_path>
c0004c03:	85 c0                	test   eax,eax
c0004c05:	75 20                	jne    c0004c27 <f_rename+0xe0>
c0004c07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c0b:	b8 08 00 00 00       	mov    eax,0x8
c0004c10:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c14:	0f 85 c5 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c1a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c1e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c25:	eb 03                	jmp    c0004c2a <f_rename+0xe3>
c0004c27:	83 f8 04             	cmp    eax,0x4
c0004c2a:	0f 85 af 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c30:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c34:	e8 fd ec ff ff       	call   c0003936 <dir_register>
c0004c39:	85 c0                	test   eax,eax
c0004c3b:	0f 85 9e 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c41:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c48:	b9 13 00 00 00       	mov    ecx,0x13
c0004c4d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c50:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c54:	e8 f2 d0 ff ff       	call   c0001d4b <mem_cpy>
c0004c59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c5d:	a8 10                	test   al,0x10
c0004c5f:	75 03                	jne    c0004c64 <f_rename+0x11d>
c0004c61:	83 c8 20             	or     eax,0x20
c0004c64:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c6f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c73:	74 54                	je     c0004cc9 <f_rename+0x182>
c0004c75:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c79:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c7d:	74 4a                	je     c0004cc9 <f_rename+0x182>
c0004c7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c83:	89 da                	mov    edx,ebx
c0004c85:	8a 07                	mov    al,BYTE PTR [edi]
c0004c87:	e8 34 e4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004c8c:	89 c2                	mov    edx,eax
c0004c8e:	89 f8                	mov    eax,edi
c0004c90:	e8 d0 d2 ff ff       	call   c0001f65 <clst2sect>
c0004c95:	89 c2                	mov    edx,eax
c0004c97:	b8 02 00 00 00       	mov    eax,0x2
c0004c9c:	85 d2                	test   edx,edx
c0004c9e:	74 3f                	je     c0004cdf <f_rename+0x198>
c0004ca0:	89 f8                	mov    eax,edi
c0004ca2:	e8 9e d5 ff ff       	call   c0002245 <move_window>
c0004ca7:	85 c0                	test   eax,eax
c0004ca9:	75 34                	jne    c0004cdf <f_rename+0x198>
c0004cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004caf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cb3:	75 14                	jne    c0004cc9 <f_rename+0x182>
c0004cb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cb8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cbc:	e8 28 e4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ccd:	e8 4f ea ff ff       	call   c0003721 <dir_remove>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	75 09                	jne    c0004cdf <f_rename+0x198>
c0004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cda:	e8 a6 df ff ff       	call   c0002c85 <sync_fs>
c0004cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce3:	83 ec 0c             	sub    esp,0xc
c0004ce6:	56                   	push   esi
c0004ce7:	e8 98 0d 00 00       	call   c0005a84 <ff_memfree>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004cf9:	5b                   	pop    ebx
c0004cfa:	5e                   	pop    esi
c0004cfb:	5f                   	pop    edi
c0004cfc:	c3                   	ret    

c0004cfd <f_chmod>:
c0004cfd:	57                   	push   edi
c0004cfe:	b9 02 00 00 00       	mov    ecx,0x2
c0004d03:	56                   	push   esi
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 50             	sub    esp,0x50
c0004d08:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d0c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 7b d6 ff ff       	call   c0002398 <mount_volume>
c0004d1d:	85 c0                	test   eax,eax
c0004d1f:	75 7e                	jne    c0004d9f <f_chmod+0xa2>
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	83 ec 0c             	sub    esp,0xc
c0004d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2c:	68 00 02 00 00       	push   0x200
c0004d31:	e8 36 0d 00 00       	call   c0005a6c <ff_memalloc>
c0004d36:	83 c4 10             	add    esp,0x10
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	b8 11 00 00 00       	mov    eax,0x11
c0004d40:	85 f6                	test   esi,esi
c0004d42:	74 5b                	je     c0004d9f <f_chmod+0xa2>
c0004d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d4c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d53:	e8 4a eb ff ff       	call   c00038a2 <follow_path>
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	75 2f                	jne    c0004d8b <f_chmod+0x8e>
c0004d5c:	b8 06 00 00 00       	mov    eax,0x6
c0004d61:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d66:	75 23                	jne    c0004d8b <f_chmod+0x8e>
c0004d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d6f:	21 fb                	and    ebx,edi
c0004d71:	83 e3 27             	and    ebx,0x27
c0004d74:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d77:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d86:	e8 fa de ff ff       	call   c0002c85 <sync_fs>
c0004d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	56                   	push   esi
c0004d93:	e8 ec 0c 00 00       	call   c0005a84 <ff_memfree>
c0004d98:	83 c4 10             	add    esp,0x10
c0004d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9f:	83 c4 50             	add    esp,0x50
c0004da2:	5b                   	pop    ebx
c0004da3:	5e                   	pop    esi
c0004da4:	5f                   	pop    edi
c0004da5:	c3                   	ret    

c0004da6 <f_utime>:
c0004da6:	56                   	push   esi
c0004da7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dac:	53                   	push   ebx
c0004dad:	83 ec 54             	sub    esp,0x54
c0004db0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004db4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004db8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dbc:	e8 d7 d5 ff ff       	call   c0002398 <mount_volume>
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	0f 85 85 00 00 00    	jne    c0004e4e <f_utime+0xa8>
c0004dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dd4:	68 00 02 00 00       	push   0x200
c0004dd9:	e8 8e 0c 00 00       	call   c0005a6c <ff_memalloc>
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	89 c3                	mov    ebx,eax
c0004de3:	b8 11 00 00 00       	mov    eax,0x11
c0004de8:	85 db                	test   ebx,ebx
c0004dea:	74 62                	je     c0004e4e <f_utime+0xa8>
c0004dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004df4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004df7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfb:	e8 a2 ea ff ff       	call   c00038a2 <follow_path>
c0004e00:	85 c0                	test   eax,eax
c0004e02:	75 36                	jne    c0004e3a <f_utime+0x94>
c0004e04:	b8 06 00 00 00       	mov    eax,0x6
c0004e09:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e0e:	75 2a                	jne    c0004e3a <f_utime+0x94>
c0004e10:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e14:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e18:	c1 e2 10             	shl    edx,0x10
c0004e1b:	09 c2                	or     edx,eax
c0004e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e21:	83 c0 16             	add    eax,0x16
c0004e24:	e8 1f cf ff ff       	call   c0001d48 <st_dword>
c0004e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e35:	e8 4b de ff ff       	call   c0002c85 <sync_fs>
c0004e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e3e:	83 ec 0c             	sub    esp,0xc
c0004e41:	53                   	push   ebx
c0004e42:	e8 3d 0c 00 00       	call   c0005a84 <ff_memfree>
c0004e47:	83 c4 10             	add    esp,0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	83 c4 54             	add    esp,0x54
c0004e51:	5b                   	pop    ebx
c0004e52:	5e                   	pop    esi
c0004e53:	c3                   	ret    

c0004e54 <f_getlabel>:
c0004e54:	55                   	push   ebp
c0004e55:	31 c9                	xor    ecx,ecx
c0004e57:	57                   	push   edi
c0004e58:	56                   	push   esi
c0004e59:	53                   	push   ebx
c0004e5a:	83 ec 5c             	sub    esp,0x5c
c0004e5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e65:	e8 2e d5 ff ff       	call   c0002398 <mount_volume>
c0004e6a:	89 c6                	mov    esi,eax
c0004e6c:	85 c0                	test   eax,eax
c0004e6e:	0f 85 27 01 00 00    	jne    c0004f9b <f_getlabel+0x147>
c0004e74:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e79:	0f 84 d1 00 00 00    	je     c0004f50 <f_getlabel+0xfc>
c0004e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e89:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e95:	e8 79 e3 ff ff       	call   c0003213 <dir_sdi>
c0004e9a:	85 c0                	test   eax,eax
c0004e9c:	0f 85 a2 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004ea2:	ba 01 00 00 00       	mov    edx,0x1
c0004ea7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eab:	e8 54 e7 ff ff       	call   c0003604 <dir_read>
c0004eb0:	85 c0                	test   eax,eax
c0004eb2:	0f 85 8c 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004eb8:	31 db                	xor    ebx,ebx
c0004eba:	31 c9                	xor    ecx,ecx
c0004ebc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ec0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ec3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ec8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ed1:	e8 ca ce ff ff       	call   c0001da0 <dbc_1st>
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	74 16                	je     c0004ef0 <f_getlabel+0x9c>
c0004eda:	83 ff 0b             	cmp    edi,0xb
c0004edd:	74 11                	je     c0004ef0 <f_getlabel+0x9c>
c0004edf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ee8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004eeb:	c1 e0 08             	shl    eax,0x8
c0004eee:	09 c2                	or     edx,eax
c0004ef0:	0f b7 d2             	movzx  edx,dx
c0004ef3:	50                   	push   eax
c0004ef4:	50                   	push   eax
c0004ef5:	68 b5 01 00 00       	push   0x1b5
c0004efa:	52                   	push   edx
c0004efb:	e8 3c 0c 00 00       	call   c0005b3c <ff_oem2uni>
c0004f00:	83 c4 10             	add    esp,0x10
c0004f03:	66 85 c0             	test   ax,ax
c0004f06:	74 25                	je     c0004f2d <f_getlabel+0xd9>
c0004f08:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f0c:	0f b7 c0             	movzx  eax,ax
c0004f0f:	01 da                	add    edx,ebx
c0004f11:	b9 04 00 00 00       	mov    ecx,0x4
c0004f16:	e8 51 cf ff ff       	call   c0001e6c <put_utf>
c0004f1b:	84 c0                	test   al,al
c0004f1d:	74 0e                	je     c0004f2d <f_getlabel+0xd9>
c0004f1f:	0f b6 c0             	movzx  eax,al
c0004f22:	01 c3                	add    ebx,eax
c0004f24:	83 ff 0b             	cmp    edi,0xb
c0004f27:	74 06                	je     c0004f2f <f_getlabel+0xdb>
c0004f29:	89 f9                	mov    ecx,edi
c0004f2b:	eb 8f                	jmp    c0004ebc <f_getlabel+0x68>
c0004f2d:	31 db                	xor    ebx,ebx
c0004f2f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f36:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f3a:	74 14                	je     c0004f50 <f_getlabel+0xfc>
c0004f3c:	4b                   	dec    ebx
c0004f3d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f40:	74 f1                	je     c0004f33 <f_getlabel+0xdf>
c0004f42:	eb 0c                	jmp    c0004f50 <f_getlabel+0xfc>
c0004f44:	83 f8 04             	cmp    eax,0x4
c0004f47:	75 50                	jne    c0004f99 <f_getlabel+0x145>
c0004f49:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f50:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f55:	74 44                	je     c0004f9b <f_getlabel+0x147>
c0004f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f5b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f5e:	e8 e2 d2 ff ff       	call   c0002245 <move_window>
c0004f63:	89 c6                	mov    esi,eax
c0004f65:	85 c0                	test   eax,eax
c0004f67:	75 32                	jne    c0004f9b <f_getlabel+0x147>
c0004f69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f6d:	b8 43 00 00 00       	mov    eax,0x43
c0004f72:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f74:	80 f9 03             	cmp    cl,0x3
c0004f77:	74 0f                	je     c0004f88 <f_getlabel+0x134>
c0004f79:	31 c0                	xor    eax,eax
c0004f7b:	80 f9 04             	cmp    cl,0x4
c0004f7e:	0f 94 c0             	sete   al
c0004f81:	48                   	dec    eax
c0004f82:	83 e0 c3             	and    eax,0xffffffc3
c0004f85:	83 c0 64             	add    eax,0x64
c0004f88:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f8c:	e8 9b cd ff ff       	call   c0001d2c <ld_dword>
c0004f91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f95:	89 07                	mov    DWORD PTR [edi],eax
c0004f97:	eb 02                	jmp    c0004f9b <f_getlabel+0x147>
c0004f99:	89 c6                	mov    esi,eax
c0004f9b:	83 c4 5c             	add    esp,0x5c
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	5b                   	pop    ebx
c0004fa1:	5e                   	pop    esi
c0004fa2:	5f                   	pop    edi
c0004fa3:	5d                   	pop    ebp
c0004fa4:	c3                   	ret    

c0004fa5 <f_setlabel>:
c0004fa5:	56                   	push   esi
c0004fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fab:	53                   	push   ebx
c0004fac:	83 ec 54             	sub    esp,0x54
c0004faf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb7:	e8 dc d3 ff ff       	call   c0002398 <mount_volume>
c0004fbc:	89 c6                	mov    esi,eax
c0004fbe:	85 c0                	test   eax,eax
c0004fc0:	0f 85 67 01 00 00    	jne    c000512d <f_setlabel+0x188>
c0004fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fcb:	ba 20 00 00 00       	mov    edx,0x20
c0004fd0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fd4:	31 db                	xor    ebx,ebx
c0004fd6:	e8 85 cd ff ff       	call   c0001d60 <mem_set>
c0004fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fdf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fe2:	76 5b                	jbe    c000503f <f_setlabel+0x9a>
c0004fe4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe8:	e8 b9 cd ff ff       	call   c0001da6 <tchar2uni>
c0004fed:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ff2:	76 0a                	jbe    c0004ffe <f_setlabel+0x59>
c0004ff4:	be 06 00 00 00       	mov    esi,0x6
c0004ff9:	e9 2f 01 00 00       	jmp    c000512d <f_setlabel+0x188>
c0004ffe:	83 ec 0c             	sub    esp,0xc
c0005001:	50                   	push   eax
c0005002:	e8 ad 0b 00 00       	call   c0005bb4 <ff_wtoupper>
c0005007:	5a                   	pop    edx
c0005008:	59                   	pop    ecx
c0005009:	68 b5 01 00 00       	push   0x1b5
c000500e:	50                   	push   eax
c000500f:	e8 88 0a 00 00       	call   c0005a9c <ff_uni2oem>
c0005014:	83 c4 10             	add    esp,0x10
c0005017:	89 c6                	mov    esi,eax
c0005019:	66 85 c0             	test   ax,ax
c000501c:	74 d6                	je     c0004ff4 <f_setlabel+0x4f>
c000501e:	0f b7 d0             	movzx  edx,ax
c0005021:	b8 70 ca 01 c0       	mov    eax,0xc001ca70
c0005026:	e8 63 cd ff ff       	call   c0001d8e <chk_chr>
c000502b:	85 c0                	test   eax,eax
c000502d:	75 c5                	jne    c0004ff4 <f_setlabel+0x4f>
c000502f:	66 81 fe ff 00       	cmp    si,0xff
c0005034:	0f 87 c9 00 00 00    	ja     c0005103 <f_setlabel+0x15e>
c000503a:	e9 e4 00 00 00       	jmp    c0005123 <f_setlabel+0x17e>
c000503f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005044:	74 ae                	je     c0004ff4 <f_setlabel+0x4f>
c0005046:	85 db                	test   ebx,ebx
c0005048:	74 0e                	je     c0005058 <f_setlabel+0xb3>
c000504a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000504d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005052:	75 04                	jne    c0005058 <f_setlabel+0xb3>
c0005054:	89 c3                	mov    ebx,eax
c0005056:	eb ee                	jmp    c0005046 <f_setlabel+0xa1>
c0005058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000505c:	31 d2                	xor    edx,edx
c000505e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000506a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506e:	e8 a0 e1 ff ff       	call   c0003213 <dir_sdi>
c0005073:	89 c6                	mov    esi,eax
c0005075:	85 c0                	test   eax,eax
c0005077:	0f 85 b0 00 00 00    	jne    c000512d <f_setlabel+0x188>
c000507d:	ba 01 00 00 00       	mov    edx,0x1
c0005082:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005086:	e8 79 e5 ff ff       	call   c0003604 <dir_read>
c000508b:	85 c0                	test   eax,eax
c000508d:	75 18                	jne    c00050a7 <f_setlabel+0x102>
c000508f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005093:	85 db                	test   ebx,ebx
c0005095:	74 0b                	je     c00050a2 <f_setlabel+0xfd>
c0005097:	b9 0b 00 00 00       	mov    ecx,0xb
c000509c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050a0:	eb 47                	jmp    c00050e9 <f_setlabel+0x144>
c00050a2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050a5:	eb 47                	jmp    c00050ee <f_setlabel+0x149>
c00050a7:	83 f8 04             	cmp    eax,0x4
c00050aa:	75 53                	jne    c00050ff <f_setlabel+0x15a>
c00050ac:	85 db                	test   ebx,ebx
c00050ae:	74 7d                	je     c000512d <f_setlabel+0x188>
c00050b0:	ba 01 00 00 00       	mov    edx,0x1
c00050b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b9:	e8 e5 e4 ff ff       	call   c00035a3 <dir_alloc>
c00050be:	89 c6                	mov    esi,eax
c00050c0:	85 c0                	test   eax,eax
c00050c2:	75 69                	jne    c000512d <f_setlabel+0x188>
c00050c4:	b9 20 00 00 00       	mov    ecx,0x20
c00050c9:	31 d2                	xor    edx,edx
c00050cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cf:	e8 8c cc ff ff       	call   c0001d60 <mem_set>
c00050d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050dd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050e1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	e8 5d cc ff ff       	call   c0001d4b <mem_cpy>
c00050ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050fa:	e8 86 db ff ff       	call   c0002c85 <sync_fs>
c00050ff:	89 c6                	mov    esi,eax
c0005101:	eb 2a                	jmp    c000512d <f_setlabel+0x188>
c0005103:	83 fb 09             	cmp    ebx,0x9
c0005106:	0f 87 e8 fe ff ff    	ja     c0004ff4 <f_setlabel+0x4f>
c000510c:	89 f0                	mov    eax,esi
c000510e:	66 c1 e8 08          	shr    ax,0x8
c0005112:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005116:	43                   	inc    ebx
c0005117:	89 f0                	mov    eax,esi
c0005119:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000511d:	43                   	inc    ebx
c000511e:	e9 b8 fe ff ff       	jmp    c0004fdb <f_setlabel+0x36>
c0005123:	83 fb 0a             	cmp    ebx,0xa
c0005126:	76 ef                	jbe    c0005117 <f_setlabel+0x172>
c0005128:	e9 c7 fe ff ff       	jmp    c0004ff4 <f_setlabel+0x4f>
c000512d:	89 f0                	mov    eax,esi
c000512f:	83 c4 54             	add    esp,0x54
c0005132:	5b                   	pop    ebx
c0005133:	5e                   	pop    esi
c0005134:	c3                   	ret    

c0005135 <f_expand>:
c0005135:	55                   	push   ebp
c0005136:	57                   	push   edi
c0005137:	56                   	push   esi
c0005138:	53                   	push   ebx
c0005139:	83 ec 2c             	sub    esp,0x2c
c000513c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005148:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000514c:	89 d8                	mov    eax,ebx
c000514e:	e8 48 d0 ff ff       	call   c000219b <validate>
c0005153:	89 c6                	mov    esi,eax
c0005155:	85 c0                	test   eax,eax
c0005157:	0f 85 2e 01 00 00    	jne    c000528b <f_expand+0x156>
c000515d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005161:	85 f6                	test   esi,esi
c0005163:	0f 85 22 01 00 00    	jne    c000528b <f_expand+0x156>
c0005169:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000516e:	75 0a                	jne    c000517a <f_expand+0x45>
c0005170:	be 07 00 00 00       	mov    esi,0x7
c0005175:	e9 11 01 00 00       	jmp    c000528b <f_expand+0x156>
c000517a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000517e:	75 f0                	jne    c0005170 <f_expand+0x3b>
c0005180:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005184:	74 ea                	je     c0005170 <f_expand+0x3b>
c0005186:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000518a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000518e:	c1 e1 09             	shl    ecx,0x9
c0005191:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005194:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005198:	0f 95 c0             	setne  al
c000519b:	31 d2                	xor    edx,edx
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c7                	mov    edi,eax
c00051a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051a6:	f7 f1                	div    ecx
c00051a8:	01 f8                	add    eax,edi
c00051aa:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051b1:	83 ff 01             	cmp    edi,0x1
c00051b4:	76 05                	jbe    c00051bb <f_expand+0x86>
c00051b6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051b9:	77 05                	ja     c00051c0 <f_expand+0x8b>
c00051bb:	bf 02 00 00 00       	mov    edi,0x2
c00051c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051c3:	89 fd                	mov    ebp,edi
c00051c5:	31 c9                	xor    ecx,ecx
c00051c7:	89 ea                	mov    edx,ebp
c00051c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051cf:	45                   	inc    ebp
c00051d0:	e8 3c df ff ff       	call   c0003111 <get_fat.isra.2>
c00051d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051dd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051e0:	77 05                	ja     c00051e7 <f_expand+0xb2>
c00051e2:	bd 02 00 00 00       	mov    ebp,0x2
c00051e7:	83 f8 01             	cmp    eax,0x1
c00051ea:	74 20                	je     c000520c <f_expand+0xd7>
c00051ec:	83 f8 ff             	cmp    eax,0xffffffff
c00051ef:	74 22                	je     c0005213 <f_expand+0xde>
c00051f1:	85 c0                	test   eax,eax
c00051f3:	75 09                	jne    c00051fe <f_expand+0xc9>
c00051f5:	41                   	inc    ecx
c00051f6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051fa:	75 07                	jne    c0005203 <f_expand+0xce>
c00051fc:	eb 1c                	jmp    c000521a <f_expand+0xe5>
c00051fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005201:	31 c9                	xor    ecx,ecx
c0005203:	39 fd                	cmp    ebp,edi
c0005205:	75 c0                	jne    c00051c7 <f_expand+0x92>
c0005207:	e9 64 ff ff ff       	jmp    c0005170 <f_expand+0x3b>
c000520c:	be 02 00 00 00       	mov    esi,0x2
c0005211:	eb 78                	jmp    c000528b <f_expand+0x156>
c0005213:	be 01 00 00 00       	mov    esi,0x1
c0005218:	eb 71                	jmp    c000528b <f_expand+0x156>
c000521a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000521f:	74 2b                	je     c000524c <f_expand+0x117>
c0005221:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005224:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005228:	85 ed                	test   ebp,ebp
c000522a:	74 24                	je     c0005250 <f_expand+0x11b>
c000522c:	83 c9 ff             	or     ecx,0xffffffff
c000522f:	83 fd 01             	cmp    ebp,0x1
c0005232:	74 03                	je     c0005237 <f_expand+0x102>
c0005234:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005237:	89 fa                	mov    edx,edi
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	e8 59 d4 ff ff       	call   c000269b <put_fat>
c0005242:	85 c0                	test   eax,eax
c0005244:	75 43                	jne    c0005289 <f_expand+0x154>
c0005246:	89 f8                	mov    eax,edi
c0005248:	4d                   	dec    ebp
c0005249:	47                   	inc    edi
c000524a:	eb dc                	jmp    c0005228 <f_expand+0xf3>
c000524c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000524f:	48                   	dec    eax
c0005250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005254:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005259:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000525c:	74 2d                	je     c000528b <f_expand+0x156>
c000525e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005265:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005268:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000526c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005272:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005275:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005278:	39 c8                	cmp    eax,ecx
c000527a:	77 0f                	ja     c000528b <f_expand+0x156>
c000527c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005280:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005287:	eb 02                	jmp    c000528b <f_expand+0x156>
c0005289:	89 c6                	mov    esi,eax
c000528b:	83 c4 2c             	add    esp,0x2c
c000528e:	89 f0                	mov    eax,esi
c0005290:	5b                   	pop    ebx
c0005291:	5e                   	pop    esi
c0005292:	5f                   	pop    edi
c0005293:	5d                   	pop    ebp
c0005294:	c3                   	ret    

c0005295 <f_mkfs>:
c0005295:	55                   	push   ebp
c0005296:	57                   	push   edi
c0005297:	bf 0b 00 00 00       	mov    edi,0xb
c000529c:	56                   	push   esi
c000529d:	53                   	push   ebx
c000529e:	83 ec 4c             	sub    esp,0x4c
c00052a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052a5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052ad:	e8 9c ce ff ff       	call   c000214e <get_ldnumber>
c00052b2:	85 c0                	test   eax,eax
c00052b4:	0f 88 a6 07 00 00    	js     c0005a60 <f_mkfs+0x7cb>
c00052ba:	8b 14 85 20 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe05e0]
c00052c1:	85 d2                	test   edx,edx
c00052c3:	74 03                	je     c00052c8 <f_mkfs+0x33>
c00052c5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	75 05                	jne    c00052d1 <f_mkfs+0x3c>
c00052cc:	bb 60 ca 01 c0       	mov    ebx,0xc001ca60
c00052d1:	83 ec 0c             	sub    esp,0xc
c00052d4:	0f b6 c0             	movzx  eax,al
c00052d7:	bf 03 00 00 00       	mov    edi,0x3
c00052dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052e4:	e8 e8 c9 ff ff       	call   c0001cd1 <disk_initialize>
c00052e9:	83 c4 10             	add    esp,0x10
c00052ec:	a8 01                	test   al,0x1
c00052ee:	0f 85 6c 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c00052f4:	bf 0a 00 00 00       	mov    edi,0xa
c00052f9:	a8 04                	test   al,0x4
c00052fb:	0f 85 5f 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c0005301:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005308:	85 c0                	test   eax,eax
c000530a:	75 20                	jne    c000532c <f_mkfs+0x97>
c000530c:	51                   	push   ecx
c000530d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005311:	50                   	push   eax
c0005312:	6a 03                	push   0x3
c0005314:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005318:	e8 e3 c9 ff ff       	call   c0001d00 <disk_ioctl>
c000531d:	83 c4 10             	add    esp,0x10
c0005320:	85 c0                	test   eax,eax
c0005322:	74 08                	je     c000532c <f_mkfs+0x97>
c0005324:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000532c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005330:	8d 42 ff             	lea    eax,[edx-0x1]
c0005333:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005338:	77 04                	ja     c000533e <f_mkfs+0xa9>
c000533a:	85 c2                	test   edx,eax
c000533c:	74 08                	je     c0005346 <f_mkfs+0xb1>
c000533e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005346:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005349:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000534d:	48                   	dec    eax
c000534e:	3c 01                	cmp    al,0x1
c0005350:	76 05                	jbe    c0005357 <f_mkfs+0xc2>
c0005352:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005357:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000535a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535e:	48                   	dec    eax
c000535f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005364:	77 07                	ja     c000536d <f_mkfs+0xd8>
c0005366:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000536b:	74 08                	je     c0005375 <f_mkfs+0xe0>
c000536d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005375:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005378:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000537e:	77 07                	ja     c0005387 <f_mkfs+0xf2>
c0005380:	8d 47 ff             	lea    eax,[edi-0x1]
c0005383:	85 f8                	test   eax,edi
c0005385:	74 02                	je     c0005389 <f_mkfs+0xf4>
c0005387:	31 ff                	xor    edi,edi
c0005389:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005391:	77 0a                	ja     c000539d <f_mkfs+0x108>
c0005393:	bf 11 00 00 00       	mov    edi,0x11
c0005398:	e9 c3 06 00 00       	jmp    c0005a60 <f_mkfs+0x7cb>
c000539d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000539f:	89 ee                	mov    esi,ebp
c00053a1:	85 ed                	test   ebp,ebp
c00053a3:	75 1b                	jne    c00053c0 <f_mkfs+0x12b>
c00053a5:	83 ec 0c             	sub    esp,0xc
c00053a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053b1:	50                   	push   eax
c00053b2:	e8 b5 06 00 00       	call   c0005a6c <ff_memalloc>
c00053b7:	83 c4 10             	add    esp,0x10
c00053ba:	89 c6                	mov    esi,eax
c00053bc:	85 c0                	test   eax,eax
c00053be:	74 d3                	je     c0005393 <f_mkfs+0xfe>
c00053c0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053c8:	52                   	push   edx
c00053c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053cd:	50                   	push   eax
c00053ce:	6a 01                	push   0x1
c00053d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053d4:	e8 27 c9 ff ff       	call   c0001d00 <disk_ioctl>
c00053d9:	83 c4 10             	add    esp,0x10
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 25 06 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00053e4:	88 d8                	mov    al,bl
c00053e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053ee:	24 08                	and    al,0x8
c00053f0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053f4:	75 18                	jne    c000540e <f_mkfs+0x179>
c00053f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053fa:	83 f8 3f             	cmp    eax,0x3f
c00053fd:	76 0f                	jbe    c000540e <f_mkfs+0x179>
c00053ff:	83 e8 3f             	sub    eax,0x3f
c0005402:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000540a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000540e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005416:	83 f8 7f             	cmp    eax,0x7f
c0005419:	0f 86 52 02 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000541f:	b9 80 00 00 00       	mov    ecx,0x80
c0005424:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000542a:	77 05                	ja     c0005431 <f_mkfs+0x19c>
c000542c:	89 f9                	mov    ecx,edi
c000542e:	c1 e9 09             	shr    ecx,0x9
c0005431:	88 d8                	mov    al,bl
c0005433:	83 e0 01             	and    eax,0x1
c0005436:	80 e3 02             	and    bl,0x2
c0005439:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000543d:	74 0a                	je     c0005449 <f_mkfs+0x1b4>
c000543f:	84 c0                	test   al,al
c0005441:	0f 84 4c 01 00 00    	je     c0005593 <f_mkfs+0x2fe>
c0005447:	eb 38                	jmp    c0005481 <f_mkfs+0x1ec>
c0005449:	bf 13 00 00 00       	mov    edi,0x13
c000544e:	84 c0                	test   al,al
c0005450:	75 2f                	jne    c0005481 <f_mkfs+0x1ec>
c0005452:	e9 c9 05 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c0005457:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000545c:	0f 85 08 02 00 00    	jne    c000566a <f_mkfs+0x3d5>
c0005462:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005467:	0f 86 e1 01 00 00    	jbe    c000564e <f_mkfs+0x3b9>
c000546d:	85 c9                	test   ecx,ecx
c000546f:	0f 85 bd 05 00 00    	jne    c0005a32 <f_mkfs+0x79d>
c0005475:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005478:	83 f9 40             	cmp    ecx,0x40
c000547b:	0f 87 c1 05 00 00    	ja     c0005a42 <f_mkfs+0x7ad>
c0005481:	89 cf                	mov    edi,ecx
c0005483:	85 c9                	test   ecx,ecx
c0005485:	75 1d                	jne    c00054a4 <f_mkfs+0x20f>
c0005487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000548b:	ba 40 ca 01 c0       	mov    edx,0xc001ca40
c0005490:	c1 eb 0c             	shr    ebx,0xc
c0005493:	bf 01 00 00 00       	mov    edi,0x1
c0005498:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000549b:	66 85 c0             	test   ax,ax
c000549e:	0f 85 5f 01 00 00    	jne    c0005603 <f_mkfs+0x36e>
c00054a4:	31 d2                	xor    edx,edx
c00054a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054aa:	f7 f7                	div    edi
c00054ac:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054b1:	0f 86 5e 01 00 00    	jbe    c0005615 <f_mkfs+0x380>
c00054b7:	83 c0 02             	add    eax,0x2
c00054ba:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054bf:	01 c0                	add    eax,eax
c00054c1:	05 ff 01 00 00       	add    eax,0x1ff
c00054c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054d9:	c1 e0 05             	shl    eax,0x5
c00054dc:	c1 e8 09             	shr    eax,0x9
c00054df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054fc:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005501:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005505:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000550d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005511:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005515:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005519:	f7 d8                	neg    eax
c000551b:	21 c3                	and    ebx,eax
c000551d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005521:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005526:	0f 85 fc 00 00 00    	jne    c0005628 <f_mkfs+0x393>
c000552c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005530:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005534:	89 f8                	mov    eax,edi
c0005536:	c1 e0 04             	shl    eax,0x4
c0005539:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000553d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005541:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005545:	0f 82 26 01 00 00    	jb     c0005671 <f_mkfs+0x3dc>
c000554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005553:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005557:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000555c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005560:	29 d0                	sub    eax,edx
c0005562:	31 d2                	xor    edx,edx
c0005564:	f7 f7                	div    edi
c0005566:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000556b:	89 c3                	mov    ebx,eax
c000556d:	0f 85 e4 fe ff ff    	jne    c0005457 <f_mkfs+0x1c2>
c0005573:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005578:	0f 87 02 01 00 00    	ja     c0005680 <f_mkfs+0x3eb>
c000557e:	85 c9                	test   ecx,ecx
c0005580:	0f 85 eb 00 00 00    	jne    c0005671 <f_mkfs+0x3dc>
c0005586:	83 ff 01             	cmp    edi,0x1
c0005589:	0f 86 e2 00 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000558f:	89 f9                	mov    ecx,edi
c0005591:	d1 e9                	shr    ecx,1
c0005593:	89 cb                	mov    ebx,ecx
c0005595:	85 c9                	test   ecx,ecx
c0005597:	75 26                	jne    c00055bf <f_mkfs+0x32a>
c0005599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000559d:	ba 50 ca 01 c0       	mov    edx,0xc001ca50
c00055a2:	c1 eb 11             	shr    ebx,0x11
c00055a5:	b9 01 00 00 00       	mov    ecx,0x1
c00055aa:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055ad:	66 85 c0             	test   ax,ax
c00055b0:	74 0b                	je     c00055bd <f_mkfs+0x328>
c00055b2:	83 c2 02             	add    edx,0x2
c00055b5:	39 d8                	cmp    eax,ebx
c00055b7:	77 04                	ja     c00055bd <f_mkfs+0x328>
c00055b9:	01 c9                	add    ecx,ecx
c00055bb:	eb ed                	jmp    c00055aa <f_mkfs+0x315>
c00055bd:	31 db                	xor    ebx,ebx
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055c5:	f7 f1                	div    ecx
c00055c7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ce:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055d3:	c1 ea 09             	shr    edx,0x9
c00055d6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055df:	0f 87 8c 00 00 00    	ja     c0005671 <f_mkfs+0x3dc>
c00055e5:	89 cf                	mov    edi,ecx
c00055e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ef:	89 d9                	mov    ecx,ebx
c00055f1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055f9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055fe:	e9 e0 fe ff ff       	jmp    c00054e3 <f_mkfs+0x24e>
c0005603:	83 c2 02             	add    edx,0x2
c0005606:	39 d8                	cmp    eax,ebx
c0005608:	0f 87 96 fe ff ff    	ja     c00054a4 <f_mkfs+0x20f>
c000560e:	01 ff                	add    edi,edi
c0005610:	e9 83 fe ff ff       	jmp    c0005498 <f_mkfs+0x203>
c0005615:	8d 04 40             	lea    eax,[eax+eax*2]
c0005618:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000561d:	40                   	inc    eax
c000561e:	d1 e8                	shr    eax,1
c0005620:	83 c0 03             	add    eax,0x3
c0005623:	e9 99 fe ff ff       	jmp    c00054c1 <f_mkfs+0x22c>
c0005628:	31 d2                	xor    edx,edx
c000562a:	89 d8                	mov    eax,ebx
c000562c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005630:	85 d2                	test   edx,edx
c0005632:	74 09                	je     c000563d <f_mkfs+0x3a8>
c0005634:	4b                   	dec    ebx
c0005635:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000563d:	89 d8                	mov    eax,ebx
c000563f:	31 d2                	xor    edx,edx
c0005641:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005645:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005649:	e9 e6 fe ff ff       	jmp    c0005534 <f_mkfs+0x29f>
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	77 2b                	ja     c0005680 <f_mkfs+0x3eb>
c0005655:	85 c9                	test   ecx,ecx
c0005657:	75 18                	jne    c0005671 <f_mkfs+0x3dc>
c0005659:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000565c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005662:	0f 86 19 fe ff ff    	jbe    c0005481 <f_mkfs+0x1ec>
c0005668:	eb 07                	jmp    c0005671 <f_mkfs+0x3dc>
c000566a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000566f:	76 0a                	jbe    c000567b <f_mkfs+0x3e6>
c0005671:	bf 0e 00 00 00       	mov    edi,0xe
c0005676:	e9 a5 03 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c000567b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005680:	31 d2                	xor    edx,edx
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	89 f0                	mov    eax,esi
c0005689:	e8 d2 c6 ff ff       	call   c0001d60 <mem_set>
c000568e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005693:	ba f2 c9 01 c0       	mov    edx,0xc001c9f2
c0005698:	89 f0                	mov    eax,esi
c000569a:	e8 ac c6 ff ff       	call   c0001d4b <mem_cpy>
c000569f:	8d 46 0b             	lea    eax,[esi+0xb]
c00056a2:	ba 00 02 00 00       	mov    edx,0x200
c00056a7:	e8 98 c6 ff ff       	call   c0001d44 <st_word>
c00056ac:	89 f8                	mov    eax,edi
c00056ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056b3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056b6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056b9:	e8 86 c6 ff ff       	call   c0001d44 <st_word>
c00056be:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056c2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056c7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ca:	75 08                	jne    c00056d4 <f_mkfs+0x43f>
c00056cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056d8:	8d 46 11             	lea    eax,[esi+0x11]
c00056db:	e8 64 c6 ff ff       	call   c0001d44 <st_word>
c00056e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056ea:	77 0a                	ja     c00056f6 <f_mkfs+0x461>
c00056ec:	8d 46 13             	lea    eax,[esi+0x13]
c00056ef:	e8 50 c6 ff ff       	call   c0001d44 <st_word>
c00056f4:	eb 08                	jmp    c00056fe <f_mkfs+0x469>
c00056f6:	8d 46 20             	lea    eax,[esi+0x20]
c00056f9:	e8 4a c6 ff ff       	call   c0001d48 <st_dword>
c00056fe:	8d 46 18             	lea    eax,[esi+0x18]
c0005701:	ba 3f 00 00 00       	mov    edx,0x3f
c0005706:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000570a:	e8 35 c6 ff ff       	call   c0001d44 <st_word>
c000570f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005712:	ba ff 00 00 00       	mov    edx,0xff
c0005717:	e8 28 c6 ff ff       	call   c0001d44 <st_word>
c000571c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000571f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005723:	e8 20 c6 ff ff       	call   c0001d48 <st_dword>
c0005728:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000572d:	75 57                	jne    c0005786 <f_mkfs+0x4f1>
c000572f:	8d 46 43             	lea    eax,[esi+0x43]
c0005732:	ba 00 00 21 50       	mov    edx,0x50210000
c0005737:	e8 0c c6 ff ff       	call   c0001d48 <st_dword>
c000573c:	8d 46 24             	lea    eax,[esi+0x24]
c000573f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005743:	e8 00 c6 ff ff       	call   c0001d48 <st_dword>
c0005748:	8d 46 2c             	lea    eax,[esi+0x2c]
c000574b:	ba 02 00 00 00       	mov    edx,0x2
c0005750:	e8 f3 c5 ff ff       	call   c0001d48 <st_dword>
c0005755:	8d 46 30             	lea    eax,[esi+0x30]
c0005758:	ba 01 00 00 00       	mov    edx,0x1
c000575d:	e8 e2 c5 ff ff       	call   c0001d44 <st_word>
c0005762:	8d 46 32             	lea    eax,[esi+0x32]
c0005765:	ba 06 00 00 00       	mov    edx,0x6
c000576a:	e8 d5 c5 ff ff       	call   c0001d44 <st_word>
c000576f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005773:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005777:	8d 46 47             	lea    eax,[esi+0x47]
c000577a:	b9 13 00 00 00       	mov    ecx,0x13
c000577f:	ba fe c9 01 c0       	mov    edx,0xc001c9fe
c0005784:	eb 2f                	jmp    c00057b5 <f_mkfs+0x520>
c0005786:	8d 46 27             	lea    eax,[esi+0x27]
c0005789:	ba 00 00 21 50       	mov    edx,0x50210000
c000578e:	e8 b5 c5 ff ff       	call   c0001d48 <st_dword>
c0005793:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005798:	8d 46 16             	lea    eax,[esi+0x16]
c000579b:	e8 a4 c5 ff ff       	call   c0001d44 <st_word>
c00057a0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057a4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057a8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057ab:	b9 13 00 00 00       	mov    ecx,0x13
c00057b0:	ba 12 ca 01 c0       	mov    edx,0xc001ca12
c00057b5:	e8 91 c5 ff ff       	call   c0001d4b <mem_cpy>
c00057ba:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057c0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057c9:	e8 76 c5 ff ff       	call   c0001d44 <st_word>
c00057ce:	6a 01                	push   0x1
c00057d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057d4:	56                   	push   esi
c00057d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057d9:	e8 0c c5 ff ff       	call   c0001cea <disk_write>
c00057de:	83 c4 10             	add    esp,0x10
c00057e1:	85 c0                	test   eax,eax
c00057e3:	0f 85 20 02 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00057e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057ee:	0f 85 98 00 00 00    	jne    c000588c <f_mkfs+0x5f7>
c00057f4:	6a 01                	push   0x1
c00057f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057fa:	83 c0 06             	add    eax,0x6
c00057fd:	50                   	push   eax
c00057fe:	56                   	push   esi
c00057ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005803:	e8 e2 c4 ff ff       	call   c0001cea <disk_write>
c0005808:	b9 00 02 00 00       	mov    ecx,0x200
c000580d:	31 d2                	xor    edx,edx
c000580f:	89 f0                	mov    eax,esi
c0005811:	e8 4a c5 ff ff       	call   c0001d60 <mem_set>
c0005816:	ba 52 52 61 41       	mov    edx,0x41615252
c000581b:	89 f0                	mov    eax,esi
c000581d:	e8 26 c5 ff ff       	call   c0001d48 <st_dword>
c0005822:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005828:	ba 72 72 41 61       	mov    edx,0x61417272
c000582d:	e8 16 c5 ff ff       	call   c0001d48 <st_dword>
c0005832:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005835:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000583b:	e8 08 c5 ff ff       	call   c0001d48 <st_dword>
c0005840:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005846:	ba 02 00 00 00       	mov    edx,0x2
c000584b:	e8 f8 c4 ff ff       	call   c0001d48 <st_dword>
c0005850:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005855:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000585b:	e8 e4 c4 ff ff       	call   c0001d44 <st_word>
c0005860:	6a 01                	push   0x1
c0005862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005866:	83 c0 07             	add    eax,0x7
c0005869:	50                   	push   eax
c000586a:	56                   	push   esi
c000586b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000586f:	e8 76 c4 ff ff       	call   c0001cea <disk_write>
c0005874:	83 c4 20             	add    esp,0x20
c0005877:	6a 01                	push   0x1
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	40                   	inc    eax
c000587e:	50                   	push   eax
c000587f:	56                   	push   esi
c0005880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005884:	e8 61 c4 ff ff       	call   c0001cea <disk_write>
c0005889:	83 c4 10             	add    esp,0x10
c000588c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005890:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005894:	c1 e8 09             	shr    eax,0x9
c0005897:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000589d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058a1:	31 d2                	xor    edx,edx
c00058a3:	31 db                	xor    ebx,ebx
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 b4 c4 ff ff       	call   c0001d60 <mem_set>
c00058ac:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058b9:	0f 94 c3             	sete   bl
c00058bc:	4b                   	dec    ebx
c00058bd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058c3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ce:	75 21                	jne    c00058f1 <f_mkfs+0x65c>
c00058d0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058d5:	89 f0                	mov    eax,esi
c00058d7:	e8 6c c4 ff ff       	call   c0001d48 <st_dword>
c00058dc:	8d 46 04             	lea    eax,[esi+0x4]
c00058df:	83 ca ff             	or     edx,0xffffffff
c00058e2:	e8 61 c4 ff ff       	call   c0001d48 <st_dword>
c00058e7:	8d 46 08             	lea    eax,[esi+0x8]
c00058ea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ef:	eb 04                	jmp    c00058f5 <f_mkfs+0x660>
c00058f1:	89 da                	mov    edx,ebx
c00058f3:	89 f0                	mov    eax,esi
c00058f5:	e8 4e c4 ff ff       	call   c0001d48 <st_dword>
c00058fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000590e:	76 08                	jbe    c0005918 <f_mkfs+0x683>
c0005910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000591c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005920:	56                   	push   esi
c0005921:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005925:	e8 c0 c3 ff ff       	call   c0001cea <disk_write>
c000592a:	83 c4 10             	add    esp,0x10
c000592d:	85 c0                	test   eax,eax
c000592f:	0f 85 d4 00 00 00    	jne    c0005a09 <f_mkfs+0x774>
c0005935:	b9 00 02 00 00       	mov    ecx,0x200
c000593a:	31 d2                	xor    edx,edx
c000593c:	89 f0                	mov    eax,esi
c000593e:	e8 1d c4 ff ff       	call   c0001d60 <mem_set>
c0005943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005947:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000594b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000594f:	75 b1                	jne    c0005902 <f_mkfs+0x66d>
c0005951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005955:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000595d:	40                   	inc    eax
c000595e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005962:	0f 87 61 ff ff ff    	ja     c00058c9 <f_mkfs+0x634>
c0005968:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000596d:	74 04                	je     c0005973 <f_mkfs+0x6de>
c000596f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005973:	89 fb                	mov    ebx,edi
c0005975:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005979:	76 04                	jbe    c000597f <f_mkfs+0x6ea>
c000597b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000597f:	53                   	push   ebx
c0005980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005984:	56                   	push   esi
c0005985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005989:	e8 5c c3 ff ff       	call   c0001cea <disk_write>
c000598e:	83 c4 10             	add    esp,0x10
c0005991:	85 c0                	test   eax,eax
c0005993:	75 74                	jne    c0005a09 <f_mkfs+0x774>
c0005995:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005999:	29 df                	sub    edi,ebx
c000599b:	75 d6                	jne    c0005973 <f_mkfs+0x6de>
c000599d:	b1 0c                	mov    cl,0xc
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	74 18                	je     c00059be <f_mkfs+0x729>
c00059a6:	b1 06                	mov    cl,0x6
c00059a8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059b0:	77 0c                	ja     c00059be <f_mkfs+0x729>
c00059b2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059b7:	0f 94 c1             	sete   cl
c00059ba:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059be:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059c3:	75 2d                	jne    c00059f2 <f_mkfs+0x75d>
c00059c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059d5:	0f b6 c9             	movzx  ecx,cl
c00059d8:	83 ec 0c             	sub    esp,0xc
c00059db:	56                   	push   esi
c00059dc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059e4:	e8 4c d3 ff ff       	call   c0002d35 <create_partition>
c00059e9:	83 c4 10             	add    esp,0x10
c00059ec:	89 c7                	mov    edi,eax
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 2e                	jne    c0005a20 <f_mkfs+0x78b>
c00059f2:	31 ff                	xor    edi,edi
c00059f4:	50                   	push   eax
c00059f5:	6a 00                	push   0x0
c00059f7:	6a 00                	push   0x0
c00059f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059fd:	e8 fe c2 ff ff       	call   c0001d00 <disk_ioctl>
c0005a02:	83 c4 10             	add    esp,0x10
c0005a05:	85 c0                	test   eax,eax
c0005a07:	74 17                	je     c0005a20 <f_mkfs+0x78b>
c0005a09:	85 ed                	test   ebp,ebp
c0005a0b:	75 0c                	jne    c0005a19 <f_mkfs+0x784>
c0005a0d:	83 ec 0c             	sub    esp,0xc
c0005a10:	56                   	push   esi
c0005a11:	e8 6e 00 00 00       	call   c0005a84 <ff_memfree>
c0005a16:	83 c4 10             	add    esp,0x10
c0005a19:	bf 01 00 00 00       	mov    edi,0x1
c0005a1e:	eb 40                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a20:	85 ed                	test   ebp,ebp
c0005a22:	75 3c                	jne    c0005a60 <f_mkfs+0x7cb>
c0005a24:	83 ec 0c             	sub    esp,0xc
c0005a27:	56                   	push   esi
c0005a28:	e8 57 00 00 00       	call   c0005a84 <ff_memfree>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	eb 2e                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 56 fb ff ff    	jne    c0005593 <f_mkfs+0x2fe>
c0005a3d:	e9 2f fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 4c fb ff ff    	jne    c0005599 <f_mkfs+0x304>
c0005a4d:	89 cf                	mov    edi,ecx
c0005a4f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a55:	0f 86 49 fa ff ff    	jbe    c00054a4 <f_mkfs+0x20f>
c0005a5b:	e9 11 fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a60:	83 c4 4c             	add    esp,0x4c
c0005a63:	89 f8                	mov    eax,edi
c0005a65:	5b                   	pop    ebx
c0005a66:	5e                   	pop    esi
c0005a67:	5f                   	pop    edi
c0005a68:	5d                   	pop    ebp
c0005a69:	c3                   	ret    
c0005a6a:	66 90                	xchg   ax,ax

c0005a6c <ff_memalloc>:
c0005a6c:	83 ec 0c             	sub    esp,0xc
c0005a6f:	83 ec 0c             	sub    esp,0xc
c0005a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a76:	e8 3e 1d 00 00       	call   c00077b9 <malloc>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	83 c4 0c             	add    esp,0xc
c0005a81:	c3                   	ret    
c0005a82:	66 90                	xchg   ax,ax

c0005a84 <ff_memfree>:
c0005a84:	83 ec 0c             	sub    esp,0xc
c0005a87:	83 ec 0c             	sub    esp,0xc
c0005a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a8e:	e8 36 1d 00 00       	call   c00077c9 <free>
c0005a93:	83 c4 10             	add    esp,0x10
c0005a96:	90                   	nop
c0005a97:	83 c4 0c             	add    esp,0xc
c0005a9a:	c3                   	ret    
c0005a9b:	90                   	nop

c0005a9c <ff_uni2oem>:
c0005a9c:	83 ec 14             	sub    esp,0x14
c0005a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005aa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aae:	c7 44 24 0c 40 ce 01 c0 	mov    DWORD PTR [esp+0xc],0xc001ce40
c0005ab6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005abb:	77 0b                	ja     c0005ac8 <ff_uni2oem+0x2c>
c0005abd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ac6:	eb 68                	jmp    c0005b30 <ff_uni2oem+0x94>
c0005ac8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ad0:	77 5e                	ja     c0005b30 <ff_uni2oem+0x94>
c0005ad2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ad8:	75 56                	jne    c0005b30 <ff_uni2oem+0x94>
c0005ada:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae1:	eb 0d                	jmp    c0005af0 <ff_uni2oem+0x54>
c0005ae3:	90                   	nop
c0005ae4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ae9:	40                   	inc    eax
c0005aea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aef:	90                   	nop
c0005af0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005af6:	77 24                	ja     c0005b1c <ff_uni2oem+0x80>
c0005af8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005afd:	25 ff ff 00 00       	and    eax,0xffff
c0005b02:	01 c0                	add    eax,eax
c0005b04:	89 c2                	mov    edx,eax
c0005b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b0a:	01 d0                	add    eax,edx
c0005b0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b0f:	25 ff ff 00 00       	and    eax,0xffff
c0005b14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b18:	75 ca                	jne    c0005ae4 <ff_uni2oem+0x48>
c0005b1a:	66 90                	xchg   ax,ax
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	83 e8 80             	sub    eax,0xffffff80
c0005b24:	25 ff 00 00 00       	and    eax,0xff
c0005b29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b35:	83 c4 14             	add    esp,0x14
c0005b38:	c3                   	ret    
c0005b39:	8d 76 00             	lea    esi,[esi+0x0]

c0005b3c <ff_oem2uni>:
c0005b3c:	83 ec 18             	sub    esp,0x18
c0005b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b47:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b4c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b50:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b57:	c7 44 24 10 40 ce 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ce40
c0005b5f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b65:	77 0d                	ja     c0005b74 <ff_oem2uni+0x38>
c0005b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b6b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b70:	eb 36                	jmp    c0005ba8 <ff_oem2uni+0x6c>
c0005b72:	66 90                	xchg   ax,ax
c0005b74:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b7a:	75 2c                	jne    c0005ba8 <ff_oem2uni+0x6c>
c0005b7c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b83:	77 23                	ja     c0005ba8 <ff_oem2uni+0x6c>
c0005b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b89:	25 ff ff 00 00       	and    eax,0xffff
c0005b8e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b93:	01 c0                	add    eax,eax
c0005b95:	89 c2                	mov    edx,eax
c0005b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b9b:	01 d0                	add    eax,edx
c0005b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ba8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bad:	83 c4 18             	add    esp,0x18
c0005bb0:	c3                   	ret    
c0005bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bb4 <ff_wtoupper>:
c0005bb4:	83 ec 10             	sub    esp,0x10
c0005bb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bbf:	0f 87 77 01 00 00    	ja     c0005d3c <ff_wtoupper+0x188>
c0005bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bc9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bce:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bd5:	77 09                	ja     c0005be0 <ff_wtoupper+0x2c>
c0005bd7:	b8 40 cc 01 c0       	mov    eax,0xc001cc40
c0005bdc:	eb 0a                	jmp    c0005be8 <ff_wtoupper+0x34>
c0005bde:	66 90                	xchg   ax,ax
c0005be0:	b8 80 cb 01 c0       	mov    eax,0xc001cb80
c0005be5:	8d 76 00             	lea    esi,[esi+0x0]
c0005be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0005bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bfa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c05:	0f 84 21 01 00 00    	je     c0005d2c <ff_wtoupper+0x178>
c0005c0b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c10:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c15:	0f 82 11 01 00 00    	jb     c0005d2c <ff_wtoupper+0x178>
c0005c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c33:	66 c1 e8 08          	shr    ax,0x8
c0005c37:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c3c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c43:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c48:	31 d2                	xor    edx,edx
c0005c4a:	66 89 c2             	mov    dx,ax
c0005c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c51:	31 c9                	xor    ecx,ecx
c0005c53:	66 89 c1             	mov    cx,ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	25 ff ff 00 00       	and    eax,0xffff
c0005c60:	01 c8                	add    eax,ecx
c0005c62:	39 c2                	cmp    edx,eax
c0005c64:	0f 8d 9a 00 00 00    	jge    c0005d04 <ff_wtoupper+0x150>
c0005c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6e:	25 ff ff 00 00       	and    eax,0xffff
c0005c73:	83 f8 08             	cmp    eax,0x8
c0005c76:	0f 87 ac 00 00 00    	ja     c0005d28 <ff_wtoupper+0x174>
c0005c7c:	8b 04 85 40 cb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe34c0]
c0005c83:	ff e0                	jmp    eax
c0005c85:	8d 76 00             	lea    esi,[esi+0x0]
c0005c88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c8d:	31 d2                	xor    edx,edx
c0005c8f:	66 89 c2             	mov    dx,ax
c0005c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c96:	25 ff ff 00 00       	and    eax,0xffff
c0005c9b:	29 c2                	sub    edx,eax
c0005c9d:	89 d0                	mov    eax,edx
c0005c9f:	01 c0                	add    eax,eax
c0005ca1:	89 c2                	mov    edx,eax
c0005ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ca7:	01 d0                	add    eax,edx
c0005ca9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cb1:	eb 4d                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cb3:	90                   	nop
c0005cb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cbd:	83 e0 01             	and    eax,0x1
c0005cc0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cc5:	eb 39                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cc7:	90                   	nop
c0005cc8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cce:	eb 30                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cd6:	eb 28                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cde:	eb 20                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005ce6:	eb 18                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cee:	eb 10                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005cf6:	eb 08                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cff:	90                   	nop
c0005d00:	eb 26                	jmp    c0005d28 <ff_wtoupper+0x174>
c0005d02:	66 90                	xchg   ax,ax
c0005d04:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d0a:	0f 85 dc fe ff ff    	jne    c0005bec <ff_wtoupper+0x38>
c0005d10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d15:	25 ff ff 00 00       	and    eax,0xffff
c0005d1a:	01 c0                	add    eax,eax
c0005d1c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d20:	e9 c7 fe ff ff       	jmp    c0005bec <ff_wtoupper+0x38>
c0005d25:	8d 76 00             	lea    esi,[esi+0x0]
c0005d28:	90                   	nop
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d31:	25 ff ff 00 00       	and    eax,0xffff
c0005d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d3a:	66 90                	xchg   ax,ax
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	31 c9                	xor    ecx,ecx
c0005d47:	56                   	push   esi
c0005d48:	89 d7                	mov    edi,edx
c0005d4a:	53                   	push   ebx
c0005d4b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d4f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d53:	89 de                	mov    esi,ebx
c0005d55:	c1 fe 08             	sar    esi,0x8
c0005d58:	89 f2                	mov    edx,esi
c0005d5a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d5d:	41                   	inc    ecx
c0005d5e:	85 db                	test   ebx,ebx
c0005d60:	75 e9                	jne    c0005d4b <utf2ucs+0x7>
c0005d62:	5b                   	pop    ebx
c0005d63:	5e                   	pop    esi
c0005d64:	5f                   	pop    edi
c0005d65:	c3                   	ret    

c0005d66 <ucs2utfn>:
c0005d66:	83 e1 fe             	and    ecx,0xfffffffe
c0005d69:	01 d1                	add    ecx,edx
c0005d6b:	39 d1                	cmp    ecx,edx
c0005d6d:	75 04                	jne    c0005d73 <ucs2utfn+0xd>
c0005d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d72:	c3                   	ret    
c0005d73:	57                   	push   edi
c0005d74:	56                   	push   esi
c0005d75:	53                   	push   ebx
c0005d76:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d79:	83 c2 02             	add    edx,0x2
c0005d7c:	89 de                	mov    esi,ebx
c0005d7e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d82:	c1 e6 08             	shl    esi,0x8
c0005d85:	09 f3                	or     ebx,esi
c0005d87:	83 fb 3b             	cmp    ebx,0x3b
c0005d8a:	74 51                	je     c0005ddd <ucs2utfn+0x77>
c0005d8c:	83 fb 7f             	cmp    ebx,0x7f
c0005d8f:	7f 05                	jg     c0005d96 <ucs2utfn+0x30>
c0005d91:	88 18                	mov    BYTE PTR [eax],bl
c0005d93:	40                   	inc    eax
c0005d94:	eb 43                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005d96:	89 de                	mov    esi,ebx
c0005d98:	89 df                	mov    edi,ebx
c0005d9a:	c1 fe 06             	sar    esi,0x6
c0005d9d:	83 e7 3f             	and    edi,0x3f
c0005da0:	83 cf 80             	or     edi,0xffffff80
c0005da3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005da9:	7f 12                	jg     c0005dbd <ucs2utfn+0x57>
c0005dab:	89 f3                	mov    ebx,esi
c0005dad:	83 c0 02             	add    eax,0x2
c0005db0:	83 cb c0             	or     ebx,0xffffffc0
c0005db3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005db6:	89 fb                	mov    ebx,edi
c0005db8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dbb:	eb 1c                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005dbd:	c1 fb 0c             	sar    ebx,0xc
c0005dc0:	83 e6 3f             	and    esi,0x3f
c0005dc3:	83 cb e0             	or     ebx,0xffffffe0
c0005dc6:	83 c0 03             	add    eax,0x3
c0005dc9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dcc:	89 f3                	mov    ebx,esi
c0005dce:	83 cb 80             	or     ebx,0xffffff80
c0005dd1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd4:	89 fb                	mov    ebx,edi
c0005dd6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dd9:	39 d1                	cmp    ecx,edx
c0005ddb:	75 99                	jne    c0005d76 <ucs2utfn+0x10>
c0005ddd:	5b                   	pop    ebx
c0005dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005de1:	5e                   	pop    esi
c0005de2:	5f                   	pop    edi
c0005de3:	c3                   	ret    

c0005de4 <isjoliet>:
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005de9:	75 22                	jne    c0005e0d <isjoliet+0x29>
c0005deb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005def:	75 1c                	jne    c0005e0d <isjoliet+0x29>
c0005df1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005df4:	ba 02 00 00 00       	mov    edx,0x2
c0005df9:	3c 43                	cmp    al,0x43
c0005dfb:	74 10                	je     c0005e0d <isjoliet+0x29>
c0005dfd:	ba 03 00 00 00       	mov    edx,0x3
c0005e02:	3c 45                	cmp    al,0x45
c0005e04:	74 07                	je     c0005e0d <isjoliet+0x29>
c0005e06:	31 d2                	xor    edx,edx
c0005e08:	3c 40                	cmp    al,0x40
c0005e0a:	0f 94 c2             	sete   dl
c0005e0d:	89 d0                	mov    eax,edx
c0005e0f:	c3                   	ret    

c0005e10 <htohl_32>:
c0005e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e12:	c3                   	ret    

c0005e13 <iso_733>:
c0005e13:	eb fb                	jmp    c0005e10 <htohl_32>

c0005e15 <bclear_cache>:
c0005e15:	31 c0                	xor    eax,eax
c0005e17:	8b 14 85 a0 f5 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0a60]
c0005e1e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e24:	8b 14 85 00 f6 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0a00]
c0005e2b:	40                   	inc    eax
c0005e2c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e32:	83 f8 10             	cmp    eax,0x10
c0005e35:	75 e0                	jne    c0005e17 <bclear_cache+0x2>
c0005e37:	c3                   	ret    

c0005e38 <bgrad_cache>:
c0005e38:	83 fa 0e             	cmp    edx,0xe
c0005e3b:	77 16                	ja     c0005e53 <bgrad_cache+0x1b>
c0005e3d:	53                   	push   ebx
c0005e3e:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e41:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e45:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e48:	42                   	inc    edx
c0005e49:	83 fa 0f             	cmp    edx,0xf
c0005e4c:	75 f3                	jne    c0005e41 <bgrad_cache+0x9>
c0005e4e:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e51:	5b                   	pop    ebx
c0005e52:	c3                   	ret    
c0005e53:	c3                   	ret    

c0005e54 <bclear>:
c0005e54:	eb bf                	jmp    c0005e15 <bclear_cache>

c0005e56 <iso_break_all>:
c0005e56:	31 c0                	xor    eax,eax
c0005e58:	c7 80 50 fb 01 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffe04b0],0x1
c0005e62:	05 94 00 00 00       	add    eax,0x94
c0005e67:	3d 40 09 00 00       	cmp    eax,0x940
c0005e6c:	75 ea                	jne    c0005e58 <iso_break_all+0x2>
c0005e6e:	c3                   	ret    

c0005e6f <ucscompare>:
c0005e6f:	55                   	push   ebp
c0005e70:	57                   	push   edi
c0005e71:	89 c7                	mov    edi,eax
c0005e73:	56                   	push   esi
c0005e74:	89 d6                	mov    esi,edx
c0005e76:	53                   	push   ebx
c0005e77:	31 d2                	xor    edx,edx
c0005e79:	83 ec 1c             	sub    esp,0x1c
c0005e7c:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e80:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e85:	c1 e3 08             	shl    ebx,0x8
c0005e88:	09 c3                	or     ebx,eax
c0005e8a:	39 ca                	cmp    edx,ecx
c0005e8c:	7d 42                	jge    c0005ed0 <ucscompare+0x61>
c0005e8e:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e92:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e97:	c1 e0 08             	shl    eax,0x8
c0005e9a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e9e:	09 e8                	or     eax,ebp
c0005ea0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005ea4:	83 f8 3b             	cmp    eax,0x3b
c0005ea7:	74 27                	je     c0005ed0 <ucscompare+0x61>
c0005ea9:	83 ec 0c             	sub    esp,0xc
c0005eac:	50                   	push   eax
c0005ead:	e8 1e aa ff ff       	call   c00008d0 <tolower>
c0005eb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005eb5:	89 c5                	mov    ebp,eax
c0005eb7:	e8 14 aa ff ff       	call   c00008d0 <tolower>
c0005ebc:	83 c4 10             	add    esp,0x10
c0005ebf:	39 c5                	cmp    ebp,eax
c0005ec1:	75 20                	jne    c0005ee3 <ucscompare+0x74>
c0005ec3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005ec7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ecb:	83 c2 02             	add    edx,0x2
c0005ece:	eb ac                	jmp    c0005e7c <ucscompare+0xd>
c0005ed0:	85 db                	test   ebx,ebx
c0005ed2:	0f 95 c2             	setne  dl
c0005ed5:	31 c0                	xor    eax,eax
c0005ed7:	83 fb 2f             	cmp    ebx,0x2f
c0005eda:	0f 95 c0             	setne  al
c0005edd:	21 d0                	and    eax,edx
c0005edf:	f7 d8                	neg    eax
c0005ee1:	eb 03                	jmp    c0005ee6 <ucscompare+0x77>
c0005ee3:	83 c8 ff             	or     eax,0xffffffff
c0005ee6:	83 c4 1c             	add    esp,0x1c
c0005ee9:	5b                   	pop    ebx
c0005eea:	5e                   	pop    esi
c0005eeb:	5f                   	pop    edi
c0005eec:	5d                   	pop    ebp
c0005eed:	c3                   	ret    

c0005eee <fncompare>:
c0005eee:	55                   	push   ebp
c0005eef:	57                   	push   edi
c0005ef0:	89 c7                	mov    edi,eax
c0005ef2:	56                   	push   esi
c0005ef3:	89 ce                	mov    esi,ecx
c0005ef5:	53                   	push   ebx
c0005ef6:	31 db                	xor    ebx,ebx
c0005ef8:	83 ec 1c             	sub    esp,0x1c
c0005efb:	39 d3                	cmp    ebx,edx
c0005efd:	7d 43                	jge    c0005f42 <fncompare+0x54>
c0005eff:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005f03:	3c 3b                	cmp    al,0x3b
c0005f05:	74 3b                	je     c0005f42 <fncompare+0x54>
c0005f07:	3c 2e                	cmp    al,0x2e
c0005f09:	75 0e                	jne    c0005f19 <fncompare+0x2b>
c0005f0b:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005f0e:	39 d9                	cmp    ecx,ebx
c0005f10:	74 30                	je     c0005f42 <fncompare+0x54>
c0005f12:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005f17:	74 29                	je     c0005f42 <fncompare+0x54>
c0005f19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f1d:	83 ec 0c             	sub    esp,0xc
c0005f20:	50                   	push   eax
c0005f21:	e8 aa a9 ff ff       	call   c00008d0 <tolower>
c0005f26:	89 c5                	mov    ebp,eax
c0005f28:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0005f2f:	e8 9c a9 ff ff       	call   c00008d0 <tolower>
c0005f34:	83 c4 10             	add    esp,0x10
c0005f37:	39 c5                	cmp    ebp,eax
c0005f39:	75 1d                	jne    c0005f58 <fncompare+0x6a>
c0005f3b:	43                   	inc    ebx
c0005f3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f40:	eb b9                	jmp    c0005efb <fncompare+0xd>
c0005f42:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f45:	84 d2                	test   dl,dl
c0005f47:	0f 95 c1             	setne  cl
c0005f4a:	31 c0                	xor    eax,eax
c0005f4c:	80 fa 2f             	cmp    dl,0x2f
c0005f4f:	0f 95 c0             	setne  al
c0005f52:	21 c8                	and    eax,ecx
c0005f54:	f7 d8                	neg    eax
c0005f56:	eb 03                	jmp    c0005f5b <fncompare+0x6d>
c0005f58:	83 c8 ff             	or     eax,0xffffffff
c0005f5b:	83 c4 1c             	add    esp,0x1c
c0005f5e:	5b                   	pop    ebx
c0005f5f:	5e                   	pop    esi
c0005f60:	5f                   	pop    edi
c0005f61:	5d                   	pop    ebp
c0005f62:	c3                   	ret    

c0005f63 <isoReadDiscSector>:
c0005f63:	83 ec 0c             	sub    esp,0xc
c0005f66:	0f be 05 e0 f5 01 c0 	movsx  eax,BYTE PTR ds:0xc001f5e0
c0005f6d:	50                   	push   eax
c0005f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f7a:	e8 b1 13 01 00       	call   c0017330 <isoReadDiscSectorHelper>
c0005f7f:	83 c4 1c             	add    esp,0x1c
c0005f82:	c3                   	ret    

c0005f83 <bread_cache>:
c0005f83:	55                   	push   ebp
c0005f84:	57                   	push   edi
c0005f85:	89 d7                	mov    edi,edx
c0005f87:	56                   	push   esi
c0005f88:	ba 0f 00 00 00       	mov    edx,0xf
c0005f8d:	53                   	push   ebx
c0005f8e:	89 c6                	mov    esi,eax
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005f96:	39 38                	cmp    DWORD PTR [eax],edi
c0005f98:	74 3c                	je     c0005fd6 <bread_cache+0x53>
c0005f9a:	4a                   	dec    edx
c0005f9b:	83 fa ff             	cmp    edx,0xffffffff
c0005f9e:	75 f3                	jne    c0005f93 <bread_cache+0x10>
c0005fa0:	31 db                	xor    ebx,ebx
c0005fa2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fa5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fa8:	74 08                	je     c0005fb2 <bread_cache+0x2f>
c0005faa:	43                   	inc    ebx
c0005fab:	83 fb 10             	cmp    ebx,0x10
c0005fae:	75 f2                	jne    c0005fa2 <bread_cache+0x1f>
c0005fb0:	31 db                	xor    ebx,ebx
c0005fb2:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fb5:	50                   	push   eax
c0005fb6:	6a 01                	push   0x1
c0005fb8:	57                   	push   edi
c0005fb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fbc:	83 c0 04             	add    eax,0x4
c0005fbf:	50                   	push   eax
c0005fc0:	e8 9e ff ff ff       	call   c0005f63 <isoReadDiscSector>
c0005fc5:	83 c4 10             	add    esp,0x10
c0005fc8:	83 c9 ff             	or     ecx,0xffffffff
c0005fcb:	85 c0                	test   eax,eax
c0005fcd:	78 13                	js     c0005fe2 <bread_cache+0x5f>
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	89 da                	mov    edx,ebx
c0005fd4:	89 38                	mov    DWORD PTR [eax],edi
c0005fd6:	89 f0                	mov    eax,esi
c0005fd8:	e8 5b fe ff ff       	call   c0005e38 <bgrad_cache>
c0005fdd:	b9 0f 00 00 00       	mov    ecx,0xf
c0005fe2:	83 c4 0c             	add    esp,0xc
c0005fe5:	89 c8                	mov    eax,ecx
c0005fe7:	5b                   	pop    ebx
c0005fe8:	5e                   	pop    esi
c0005fe9:	5f                   	pop    edi
c0005fea:	5d                   	pop    ebp
c0005feb:	c3                   	ret    

c0005fec <biread>:
c0005fec:	89 c2                	mov    edx,eax
c0005fee:	b8 00 f6 01 c0       	mov    eax,0xc001f600
c0005ff3:	eb 8e                	jmp    c0005f83 <bread_cache>

c0005ff5 <bdread>:
c0005ff5:	89 c2                	mov    edx,eax
c0005ff7:	b8 a0 f5 01 c0       	mov    eax,0xc001f5a0
c0005ffc:	eb 85                	jmp    c0005f83 <bread_cache>

c0005ffe <strnicmp>:
c0005ffe:	55                   	push   ebp
c0005fff:	57                   	push   edi
c0006000:	56                   	push   esi
c0006001:	31 f6                	xor    esi,esi
c0006003:	53                   	push   ebx
c0006004:	83 ec 0c             	sub    esp,0xc
c0006007:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000600b:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c000600f:	74 42                	je     c0006053 <strnicmp+0x55>
c0006011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006015:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c0006019:	84 c0                	test   al,al
c000601b:	74 36                	je     c0006053 <strnicmp+0x55>
c000601d:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006020:	84 d2                	test   dl,dl
c0006022:	74 2f                	je     c0006053 <strnicmp+0x55>
c0006024:	38 d0                	cmp    al,dl
c0006026:	8d 6e 01             	lea    ebp,[esi+0x1]
c0006029:	75 04                	jne    c000602f <strnicmp+0x31>
c000602b:	89 ee                	mov    esi,ebp
c000602d:	eb dc                	jmp    c000600b <strnicmp+0xd>
c000602f:	83 ec 0c             	sub    esp,0xc
c0006032:	50                   	push   eax
c0006033:	e8 98 a8 ff ff       	call   c00008d0 <tolower>
c0006038:	89 c7                	mov    edi,eax
c000603a:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c000603e:	89 ee                	mov    esi,ebp
c0006040:	89 04 24             	mov    DWORD PTR [esp],eax
c0006043:	e8 88 a8 ff ff       	call   c00008d0 <tolower>
c0006048:	83 c4 10             	add    esp,0x10
c000604b:	29 c7                	sub    edi,eax
c000604d:	89 f8                	mov    eax,edi
c000604f:	74 ba                	je     c000600b <strnicmp+0xd>
c0006051:	eb 02                	jmp    c0006055 <strnicmp+0x57>
c0006053:	31 c0                	xor    eax,eax
c0006055:	83 c4 0c             	add    esp,0xc
c0006058:	5b                   	pop    ebx
c0006059:	5e                   	pop    esi
c000605a:	5f                   	pop    edi
c000605b:	5d                   	pop    ebp
c000605c:	c3                   	ret    

c000605d <find_object>:
c000605d:	55                   	push   ebp
c000605e:	89 c5                	mov    ebp,eax
c0006060:	57                   	push   edi
c0006061:	56                   	push   esi
c0006062:	53                   	push   ebx
c0006063:	89 d3                	mov    ebx,edx
c0006065:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000606b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006072:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006076:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000607a:	83 3d 34 04 02 c0 00 	cmp    DWORD PTR ds:0xc0020434,0x0
c0006081:	74 0b                	je     c000608e <find_object+0x31>
c0006083:	89 ea                	mov    edx,ebp
c0006085:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006089:	e8 b6 fc ff ff       	call   c0005d44 <utf2ucs>
c000608e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006091:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006095:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000609a:	7e 11                	jle    c00060ad <find_object+0x50>
c000609c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060a0:	e8 47 ff ff ff       	call   c0005fec <biread>
c00060a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060a9:	85 c0                	test   eax,eax
c00060ab:	79 07                	jns    c00060b4 <find_object+0x57>
c00060ad:	31 db                	xor    ebx,ebx
c00060af:	e9 5b 01 00 00       	jmp    c000620f <find_object+0x1b2>
c00060b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060c4:	8b 04 85 00 f6 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0a00]
c00060cb:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060cf:	8a 03                	mov    al,BYTE PTR [ebx]
c00060d1:	84 c0                	test   al,al
c00060d3:	75 0e                	jne    c00060e3 <find_object+0x86>
c00060d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060d9:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060e1:	eb b2                	jmp    c0006095 <find_object+0x38>
c00060e3:	8b 35 34 04 02 c0    	mov    esi,DWORD PTR ds:0xc0020434
c00060e9:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00060ed:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00060f1:	89 ca                	mov    edx,ecx
c00060f3:	85 f6                	test   esi,esi
c00060f5:	74 2b                	je     c0006122 <find_object+0xc5>
c00060f7:	8d 43 21             	lea    eax,[ebx+0x21]
c00060fa:	8d 54 24 20          	lea    edx,[esp+0x20]
c00060fe:	e8 6c fd ff ff       	call   c0005e6f <ucscompare>
c0006103:	85 c0                	test   eax,eax
c0006105:	0f 84 c1 00 00 00    	je     c00061cc <find_object+0x16f>
c000610b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000610e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006112:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c000611a:	0f 8e dc 00 00 00    	jle    c00061fc <find_object+0x19f>
c0006120:	eb b3                	jmp    c00060d5 <find_object+0x78>
c0006122:	0f b6 f0             	movzx  esi,al
c0006125:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c0006129:	29 ce                	sub    esi,ecx
c000612b:	80 e2 01             	and    dl,0x1
c000612e:	74 05                	je     c0006135 <find_object+0xd8>
c0006130:	83 ee 21             	sub    esi,0x21
c0006133:	eb 55                	jmp    c000618a <find_object+0x12d>
c0006135:	47                   	inc    edi
c0006136:	83 ee 22             	sub    esi,0x22
c0006139:	eb 4f                	jmp    c000618a <find_object+0x12d>
c000613b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000613e:	48                   	dec    eax
c000613f:	3c 01                	cmp    al,0x1
c0006141:	77 4c                	ja     c000618f <find_object+0x132>
c0006143:	50                   	push   eax
c0006144:	6a 02                	push   0x2
c0006146:	68 40 cf 01 c0       	push   0xc001cf40
c000614b:	57                   	push   edi
c000614c:	e8 0f a6 ff ff       	call   c0000760 <strncmp>
c0006151:	83 c4 10             	add    esp,0x10
c0006154:	85 c0                	test   eax,eax
c0006156:	75 2a                	jne    c0006182 <find_object+0x125>
c0006158:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c000615c:	8d 42 fb             	lea    eax,[edx-0x5]
c000615f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006163:	50                   	push   eax
c0006164:	8d 47 05             	lea    eax,[edi+0x5]
c0006167:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000616b:	50                   	push   eax
c000616c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006170:	50                   	push   eax
c0006171:	e8 ba a4 ff ff       	call   c0000630 <strncpy>
c0006176:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000617a:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006186:	29 c6                	sub    esi,eax
c0006188:	01 c7                	add    edi,eax
c000618a:	83 fe 03             	cmp    esi,0x3
c000618d:	7f ac                	jg     c000613b <find_object+0xde>
c000618f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006194:	7e 40                	jle    c00061d6 <find_object+0x179>
c0006196:	51                   	push   ecx
c0006197:	51                   	push   ecx
c0006198:	6a 2f                	push   0x2f
c000619a:	55                   	push   ebp
c000619b:	e8 90 a5 ff ff       	call   c0000730 <strchr>
c00061a0:	83 c4 10             	add    esp,0x10
c00061a3:	85 c0                	test   eax,eax
c00061a5:	74 04                	je     c00061ab <find_object+0x14e>
c00061a7:	29 e8                	sub    eax,ebp
c00061a9:	eb 0c                	jmp    c00061b7 <find_object+0x15a>
c00061ab:	83 ec 0c             	sub    esp,0xc
c00061ae:	55                   	push   ebp
c00061af:	e8 8c a3 ff ff       	call   c0000540 <strlen>
c00061b4:	83 c4 10             	add    esp,0x10
c00061b7:	52                   	push   edx
c00061b8:	50                   	push   eax
c00061b9:	55                   	push   ebp
c00061ba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061be:	50                   	push   eax
c00061bf:	e8 3a fe ff ff       	call   c0005ffe <strnicmp>
c00061c4:	83 c4 10             	add    esp,0x10
c00061c7:	e9 37 ff ff ff       	jmp    c0006103 <find_object+0xa6>
c00061cc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061d0:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061d4:	eb 1e                	jmp    c00061f4 <find_object+0x197>
c00061d6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061da:	8d 43 21             	lea    eax,[ebx+0x21]
c00061dd:	89 e9                	mov    ecx,ebp
c00061df:	e8 0a fd ff ff       	call   c0005eee <fncompare>
c00061e4:	85 c0                	test   eax,eax
c00061e6:	0f 85 1f ff ff ff    	jne    c000610b <find_object+0xae>
c00061ec:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061f0:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00061f4:	0f 85 11 ff ff ff    	jne    c000610b <find_object+0xae>
c00061fa:	eb 13                	jmp    c000620f <find_object+0x1b2>
c00061fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006200:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c0006204:	0f 8f b2 fe ff ff    	jg     c00060bc <find_object+0x5f>
c000620a:	e9 c6 fe ff ff       	jmp    c00060d5 <find_object+0x78>
c000620f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006215:	89 d8                	mov    eax,ebx
c0006217:	5b                   	pop    ebx
c0006218:	5e                   	pop    esi
c0006219:	5f                   	pop    edi
c000621a:	5d                   	pop    ebp
c000621b:	c3                   	ret    

c000621c <find_object_path>:
c000621c:	55                   	push   ebp
c000621d:	57                   	push   edi
c000621e:	89 d7                	mov    edi,edx
c0006220:	56                   	push   esi
c0006221:	89 c6                	mov    esi,eax
c0006223:	53                   	push   ebx
c0006224:	89 cb                	mov    ebx,ecx
c0006226:	83 ec 0c             	sub    esp,0xc
c0006229:	50                   	push   eax
c000622a:	50                   	push   eax
c000622b:	6a 2f                	push   0x2f
c000622d:	56                   	push   esi
c000622e:	e8 fd a4 ff ff       	call   c0000730 <strchr>
c0006233:	83 c4 10             	add    esp,0x10
c0006236:	89 c5                	mov    ebp,eax
c0006238:	85 c0                	test   eax,eax
c000623a:	74 3a                	je     c0006276 <find_object_path+0x5a>
c000623c:	39 ee                	cmp    esi,ebp
c000623e:	74 31                	je     c0006271 <find_object_path+0x55>
c0006240:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006243:	e8 cb fb ff ff       	call   c0005e13 <iso_733>
c0006248:	89 c2                	mov    edx,eax
c000624a:	8d 43 02             	lea    eax,[ebx+0x2]
c000624d:	e8 c1 fb ff ff       	call   c0005e13 <iso_733>
c0006252:	83 ec 0c             	sub    esp,0xc
c0006255:	89 c1                	mov    ecx,eax
c0006257:	52                   	push   edx
c0006258:	89 f0                	mov    eax,esi
c000625a:	ba 01 00 00 00       	mov    edx,0x1
c000625f:	e8 f9 fd ff ff       	call   c000605d <find_object>
c0006264:	83 c4 10             	add    esp,0x10
c0006267:	89 c3                	mov    ebx,eax
c0006269:	85 c0                	test   eax,eax
c000626b:	75 04                	jne    c0006271 <find_object_path+0x55>
c000626d:	31 db                	xor    ebx,ebx
c000626f:	eb 36                	jmp    c00062a7 <find_object_path+0x8b>
c0006271:	8d 75 01             	lea    esi,[ebp+0x1]
c0006274:	eb b3                	jmp    c0006229 <find_object_path+0xd>
c0006276:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006279:	74 28                	je     c00062a3 <find_object_path+0x87>
c000627b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000627e:	e8 90 fb ff ff       	call   c0005e13 <iso_733>
c0006283:	89 c2                	mov    edx,eax
c0006285:	8d 43 02             	lea    eax,[ebx+0x2]
c0006288:	e8 86 fb ff ff       	call   c0005e13 <iso_733>
c000628d:	83 ec 0c             	sub    esp,0xc
c0006290:	89 c1                	mov    ecx,eax
c0006292:	52                   	push   edx
c0006293:	89 f0                	mov    eax,esi
c0006295:	89 fa                	mov    edx,edi
c0006297:	e8 c1 fd ff ff       	call   c000605d <find_object>
c000629c:	83 c4 10             	add    esp,0x10
c000629f:	89 c3                	mov    ebx,eax
c00062a1:	eb 04                	jmp    c00062a7 <find_object_path+0x8b>
c00062a3:	85 ff                	test   edi,edi
c00062a5:	74 c6                	je     c000626d <find_object_path+0x51>
c00062a7:	83 c4 0c             	add    esp,0xc
c00062aa:	89 d8                	mov    eax,ebx
c00062ac:	5b                   	pop    ebx
c00062ad:	5e                   	pop    esi
c00062ae:	5f                   	pop    edi
c00062af:	5d                   	pop    ebp
c00062b0:	c3                   	ret    

c00062b1 <stricmp>:
c00062b1:	57                   	push   edi
c00062b2:	56                   	push   esi
c00062b3:	31 f6                	xor    esi,esi
c00062b5:	53                   	push   ebx
c00062b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062ba:	83 ec 0c             	sub    esp,0xc
c00062bd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062c9:	50                   	push   eax
c00062ca:	e8 e1 a5 ff ff       	call   c00008b0 <toupper>
c00062cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00062d2:	e8 f9 a5 ff ff       	call   c00008d0 <tolower>
c00062d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062da:	89 c3                	mov    ebx,eax
c00062dc:	e8 cf a5 ff ff       	call   c00008b0 <toupper>
c00062e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e4:	e8 e7 a5 ff ff       	call   c00008d0 <tolower>
c00062e9:	83 c4 10             	add    esp,0x10
c00062ec:	39 c3                	cmp    ebx,eax
c00062ee:	75 05                	jne    c00062f5 <stricmp+0x44>
c00062f0:	46                   	inc    esi
c00062f1:	85 db                	test   ebx,ebx
c00062f3:	75 c1                	jne    c00062b6 <stricmp+0x5>
c00062f5:	29 c3                	sub    ebx,eax
c00062f7:	89 d8                	mov    eax,ebx
c00062f9:	5b                   	pop    ebx
c00062fa:	5e                   	pop    esi
c00062fb:	5f                   	pop    edi
c00062fc:	c3                   	ret    

c00062fd <iso_open>:
c00062fd:	57                   	push   edi
c00062fe:	31 c0                	xor    eax,eax
c0006300:	56                   	push   esi
c0006301:	b9 00 04 02 c0       	mov    ecx,0xc0020400
c0006306:	53                   	push   ebx
c0006307:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000630c:	0f 95 c0             	setne  al
c000630f:	89 c2                	mov    edx,eax
c0006311:	89 c6                	mov    esi,eax
c0006313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006317:	e8 00 ff ff ff       	call   c000621c <find_object_path>
c000631c:	83 ca ff             	or     edx,0xffffffff
c000631f:	85 c0                	test   eax,eax
c0006321:	74 5e                	je     c0006381 <iso_open+0x84>
c0006323:	89 c1                	mov    ecx,eax
c0006325:	31 d2                	xor    edx,edx
c0006327:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000632d:	83 bf c0 fa 01 c0 00 	cmp    DWORD PTR [edi-0x3ffe0540],0x0
c0006334:	75 42                	jne    c0006378 <iso_open+0x7b>
c0006336:	8d 41 02             	lea    eax,[ecx+0x2]
c0006339:	c7 87 c0 fa 01 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffe0540],0xffffffff
c0006343:	e8 cb fa ff ff       	call   c0005e13 <iso_733>
c0006348:	89 b7 c4 fa 01 c0    	mov    DWORD PTR [edi-0x3ffe053c],esi
c000634e:	89 87 c0 fa 01 c0    	mov    DWORD PTR [edi-0x3ffe0540],eax
c0006354:	c7 87 c8 fa 01 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffe0538],0x0
c000635e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006361:	e8 ad fa ff ff       	call   c0005e13 <iso_733>
c0006366:	c7 87 50 fb 01 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffe04b0],0x0
c0006370:	89 87 cc fa 01 c0    	mov    DWORD PTR [edi-0x3ffe0534],eax
c0006376:	eb 09                	jmp    c0006381 <iso_open+0x84>
c0006378:	42                   	inc    edx
c0006379:	83 fa 10             	cmp    edx,0x10
c000637c:	75 a9                	jne    c0006327 <iso_open+0x2a>
c000637e:	83 ca ff             	or     edx,0xffffffff
c0006381:	5b                   	pop    ebx
c0006382:	89 d0                	mov    eax,edx
c0006384:	5e                   	pop    esi
c0006385:	5f                   	pop    edi
c0006386:	c3                   	ret    

c0006387 <iso_close>:
c0006387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000638b:	83 f8 0f             	cmp    eax,0xf
c000638e:	7f 10                	jg     c00063a0 <iso_close+0x19>
c0006390:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006396:	c7 80 c0 fa 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0540],0x0
c00063a0:	e9 70 fa ff ff       	jmp    c0005e15 <bclear_cache>

c00063a5 <iso_read>:
c00063a5:	55                   	push   ebp
c00063a6:	57                   	push   edi
c00063a7:	56                   	push   esi
c00063a8:	53                   	push   ebx
c00063a9:	83 ec 1c             	sub    esp,0x1c
c00063ac:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063b0:	83 fd 0f             	cmp    ebp,0xf
c00063b3:	7e 0a                	jle    c00063bf <iso_read+0x1a>
c00063b5:	83 c8 ff             	or     eax,0xffffffff
c00063b8:	89 c2                	mov    edx,eax
c00063ba:	e9 f4 00 00 00       	jmp    c00064b3 <iso_read+0x10e>
c00063bf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063c5:	83 bd c0 fa 01 c0 00 	cmp    DWORD PTR [ebp-0x3ffe0540],0x0
c00063cc:	74 e7                	je     c00063b5 <iso_read+0x10>
c00063ce:	8b 95 50 fb 01 c0    	mov    edx,DWORD PTR [ebp-0x3ffe04b0]
c00063d4:	85 d2                	test   edx,edx
c00063d6:	75 dd                	jne    c00063b5 <iso_read+0x10>
c00063d8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063dd:	0f 84 cd 00 00 00    	je     c00064b0 <iso_read+0x10b>
c00063e3:	8b 85 c8 fa 01 c0    	mov    eax,DWORD PTR [ebp-0x3ffe0538]
c00063e9:	8b 8d cc fa 01 c0    	mov    ecx,DWORD PTR [ebp-0x3ffe0534]
c00063ef:	29 c1                	sub    ecx,eax
c00063f1:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00063f5:	76 04                	jbe    c00063fb <iso_read+0x56>
c00063f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00063fb:	85 c9                	test   ecx,ecx
c00063fd:	0f 84 ad 00 00 00    	je     c00064b0 <iso_read+0x10b>
c0006403:	89 c6                	mov    esi,eax
c0006405:	bb 00 08 00 00       	mov    ebx,0x800
c000640a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006410:	c1 e8 0b             	shr    eax,0xb
c0006413:	29 f3                	sub    ebx,esi
c0006415:	03 85 c0 fa 01 c0    	add    eax,DWORD PTR [ebp-0x3ffe0540]
c000641b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006421:	7e 3f                	jle    c0006462 <iso_read+0xbd>
c0006423:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006429:	75 37                	jne    c0006462 <iso_read+0xbd>
c000642b:	be 20 00 00 00       	mov    esi,0x20
c0006430:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006436:	7f 05                	jg     c000643d <iso_read+0x98>
c0006438:	89 ce                	mov    esi,ecx
c000643a:	c1 fe 0b             	sar    esi,0xb
c000643d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006441:	89 f3                	mov    ebx,esi
c0006443:	c1 e3 0b             	shl    ebx,0xb
c0006446:	52                   	push   edx
c0006447:	56                   	push   esi
c0006448:	50                   	push   eax
c0006449:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000644d:	e8 11 fb ff ff       	call   c0005f63 <isoReadDiscSector>
c0006452:	83 c4 10             	add    esp,0x10
c0006455:	85 c0                	test   eax,eax
c0006457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000645b:	7f 3e                	jg     c000649b <iso_read+0xf6>
c000645d:	e9 53 ff ff ff       	jmp    c00063b5 <iso_read+0x10>
c0006462:	39 cb                	cmp    ebx,ecx
c0006464:	7e 02                	jle    c0006468 <iso_read+0xc3>
c0006466:	89 cb                	mov    ebx,ecx
c0006468:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000646c:	e8 84 fb ff ff       	call   c0005ff5 <bdread>
c0006471:	85 c0                	test   eax,eax
c0006473:	0f 88 3c ff ff ff    	js     c00063b5 <iso_read+0x10>
c0006479:	8b 0c 85 a0 f5 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe0a60]
c0006480:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006484:	8b 85 c8 fa 01 c0    	mov    eax,DWORD PTR [ebp-0x3ffe0538]
c000648a:	25 ff 07 00 00       	and    eax,0x7ff
c000648f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006493:	89 d9                	mov    ecx,ebx
c0006495:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006497:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000649b:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c000649f:	01 9d c8 fa 01 c0    	add    DWORD PTR [ebp-0x3ffe0538],ebx
c00064a5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064a9:	01 da                	add    edx,ebx
c00064ab:	e9 28 ff ff ff       	jmp    c00063d8 <iso_read+0x33>
c00064b0:	89 d0                	mov    eax,edx
c00064b2:	99                   	cdq    
c00064b3:	83 c4 1c             	add    esp,0x1c
c00064b6:	5b                   	pop    ebx
c00064b7:	5e                   	pop    esi
c00064b8:	5f                   	pop    edi
c00064b9:	5d                   	pop    ebp
c00064ba:	c3                   	ret    

c00064bb <iso_seek>:
c00064bb:	55                   	push   ebp
c00064bc:	83 c8 ff             	or     eax,0xffffffff
c00064bf:	57                   	push   edi
c00064c0:	89 c2                	mov    edx,eax
c00064c2:	56                   	push   esi
c00064c3:	53                   	push   ebx
c00064c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064c8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064d0:	83 fe 0f             	cmp    esi,0xf
c00064d3:	7f 65                	jg     c000653a <iso_seek+0x7f>
c00064d5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064db:	8d 8d c0 fa 01 c0    	lea    ecx,[ebp-0x3ffe0540]
c00064e1:	83 bd c0 fa 01 c0 00 	cmp    DWORD PTR [ebp-0x3ffe0540],0x0
c00064e8:	74 50                	je     c000653a <iso_seek+0x7f>
c00064ea:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00064f1:	75 47                	jne    c000653a <iso_seek+0x7f>
c00064f3:	83 fb 01             	cmp    ebx,0x1
c00064f6:	74 0e                	je     c0006506 <iso_seek+0x4b>
c00064f8:	83 fb 02             	cmp    ebx,0x2
c00064fb:	74 0e                	je     c000650b <iso_seek+0x50>
c00064fd:	85 db                	test   ebx,ebx
c00064ff:	75 39                	jne    c000653a <iso_seek+0x7f>
c0006501:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006504:	eb 0d                	jmp    c0006513 <iso_seek+0x58>
c0006506:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006509:	eb 08                	jmp    c0006513 <iso_seek+0x58>
c000650b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000650e:	01 f8                	add    eax,edi
c0006510:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006513:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006519:	8b 88 cc fa 01 c0    	mov    ecx,DWORD PTR [eax-0x3ffe0534]
c000651f:	05 c0 fa 01 c0       	add    eax,0xc001fac0
c0006524:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006527:	76 03                	jbe    c000652c <iso_seek+0x71>
c0006529:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000652c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006532:	8b 82 c8 fa 01 c0    	mov    eax,DWORD PTR [edx-0x3ffe0538]
c0006538:	31 d2                	xor    edx,edx
c000653a:	5b                   	pop    ebx
c000653b:	5e                   	pop    esi
c000653c:	5f                   	pop    edi
c000653d:	5d                   	pop    ebp
c000653e:	c3                   	ret    

c000653f <iso_tell>:
c000653f:	83 c8 ff             	or     eax,0xffffffff
c0006542:	53                   	push   ebx
c0006543:	89 c2                	mov    edx,eax
c0006545:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006549:	83 f9 0f             	cmp    ecx,0xf
c000654c:	7f 20                	jg     c000656e <iso_tell+0x2f>
c000654e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006554:	83 bb c0 fa 01 c0 00 	cmp    DWORD PTR [ebx-0x3ffe0540],0x0
c000655b:	74 11                	je     c000656e <iso_tell+0x2f>
c000655d:	83 bb 50 fb 01 c0 00 	cmp    DWORD PTR [ebx-0x3ffe04b0],0x0
c0006564:	75 08                	jne    c000656e <iso_tell+0x2f>
c0006566:	8b 83 c8 fa 01 c0    	mov    eax,DWORD PTR [ebx-0x3ffe0538]
c000656c:	31 d2                	xor    edx,edx
c000656e:	5b                   	pop    ebx
c000656f:	c3                   	ret    

c0006570 <iso_total>:
c0006570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006574:	83 c8 ff             	or     eax,0xffffffff
c0006577:	83 fa 0f             	cmp    edx,0xf
c000657a:	7f 1e                	jg     c000659a <iso_total+0x2a>
c000657c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006582:	83 ba c0 fa 01 c0 00 	cmp    DWORD PTR [edx-0x3ffe0540],0x0
c0006589:	74 0f                	je     c000659a <iso_total+0x2a>
c000658b:	83 ba 50 fb 01 c0 00 	cmp    DWORD PTR [edx-0x3ffe04b0],0x0
c0006592:	75 06                	jne    c000659a <iso_total+0x2a>
c0006594:	8b 82 cc fa 01 c0    	mov    eax,DWORD PTR [edx-0x3ffe0534]
c000659a:	c3                   	ret    

c000659b <fn_postprocess>:
c000659b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000659f:	89 d0                	mov    eax,edx
c00065a1:	8a 08                	mov    cl,BYTE PTR [eax]
c00065a3:	80 f9 3b             	cmp    cl,0x3b
c00065a6:	74 07                	je     c00065af <fn_postprocess+0x14>
c00065a8:	84 c9                	test   cl,cl
c00065aa:	74 03                	je     c00065af <fn_postprocess+0x14>
c00065ac:	40                   	inc    eax
c00065ad:	eb f2                	jmp    c00065a1 <fn_postprocess+0x6>
c00065af:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065b2:	39 d0                	cmp    eax,edx
c00065b4:	76 0a                	jbe    c00065c0 <fn_postprocess+0x25>
c00065b6:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065ba:	75 04                	jne    c00065c0 <fn_postprocess+0x25>
c00065bc:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065c0:	c3                   	ret    

c00065c1 <iso_readdir>:
c00065c1:	55                   	push   ebp
c00065c2:	57                   	push   edi
c00065c3:	56                   	push   esi
c00065c4:	53                   	push   ebx
c00065c5:	83 ec 1c             	sub    esp,0x1c
c00065c8:	83 7c 24 30 0f       	cmp    DWORD PTR [esp+0x30],0xf
c00065cd:	7e 07                	jle    c00065d6 <iso_readdir+0x15>
c00065cf:	31 c0                	xor    eax,eax
c00065d1:	e9 d4 01 00 00       	jmp    c00067aa <iso_readdir+0x1e9>
c00065d6:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00065de:	8d b0 c0 fa 01 c0    	lea    esi,[eax-0x3ffe0540]
c00065e4:	83 b8 c0 fa 01 c0 00 	cmp    DWORD PTR [eax-0x3ffe0540],0x0
c00065eb:	74 e2                	je     c00065cf <iso_readdir+0xe>
c00065ed:	83 7e 04 00          	cmp    DWORD PTR [esi+0x4],0x0
c00065f1:	74 dc                	je     c00065cf <iso_readdir+0xe>
c00065f3:	83 be 90 00 00 00 00 	cmp    DWORD PTR [esi+0x90],0x0
c00065fa:	75 d3                	jne    c00065cf <iso_readdir+0xe>
c00065fc:	31 db                	xor    ebx,ebx
c00065fe:	83 c8 ff             	or     eax,0xffffffff
c0006601:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0006604:	3b 56 0c             	cmp    edx,DWORD PTR [esi+0xc]
c0006607:	73 3c                	jae    c0006645 <iso_readdir+0x84>
c0006609:	c1 ea 0b             	shr    edx,0xb
c000660c:	8b 06                	mov    eax,DWORD PTR [esi]
c000660e:	01 d0                	add    eax,edx
c0006610:	e8 d7 f9 ff ff       	call   c0005fec <biread>
c0006615:	85 c0                	test   eax,eax
c0006617:	78 b6                	js     c00065cf <iso_readdir+0xe>
c0006619:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000661c:	8b 1c 85 00 f6 01 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffe0a00]
c0006623:	89 d1                	mov    ecx,edx
c0006625:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c000662b:	8d 5c 0b 04          	lea    ebx,[ebx+ecx*1+0x4]
c000662f:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006632:	75 11                	jne    c0006645 <iso_readdir+0x84>
c0006634:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c000663a:	81 c2 00 08 00 00    	add    edx,0x800
c0006640:	89 56 08             	mov    DWORD PTR [esi+0x8],edx
c0006643:	eb bc                	jmp    c0006601 <iso_readdir+0x40>
c0006645:	69 54 24 30 94 00 00 00 	imul   edx,DWORD PTR [esp+0x30],0x94
c000664d:	8b b2 c8 fa 01 c0    	mov    esi,DWORD PTR [edx-0x3ffe0538]
c0006653:	81 c2 c0 fa 01 c0    	add    edx,0xc001fac0
c0006659:	3b 72 0c             	cmp    esi,DWORD PTR [edx+0xc]
c000665c:	0f 83 6d ff ff ff    	jae    c00065cf <iso_readdir+0xe>
c0006662:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006666:	75 38                	jne    c00066a0 <iso_readdir+0xdf>
c0006668:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c000666c:	75 32                	jne    c00066a0 <iso_readdir+0xdf>
c000666e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0006671:	8b 1c 85 00 f6 01 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffe0a00]
c0006678:	01 f1                	add    ecx,esi
c000667a:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c000667d:	89 c8                	mov    eax,ecx
c000667f:	25 ff 07 00 00       	and    eax,0x7ff
c0006684:	0f b6 44 03 04       	movzx  eax,BYTE PTR [ebx+eax*1+0x4]
c0006689:	01 c8                	add    eax,ecx
c000668b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000668e:	25 ff 07 00 00       	and    eax,0x7ff
c0006693:	8d 5c 03 04          	lea    ebx,[ebx+eax*1+0x4]
c0006697:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c000669a:	0f 84 2f ff ff ff    	je     c00065cf <iso_readdir+0xe>
c00066a0:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00066a8:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00066ac:	8d 53 21             	lea    edx,[ebx+0x21]
c00066af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00066b3:	8d a8 d8 fa 01 c0    	lea    ebp,[eax-0x3ffe0528]
c00066b9:	83 3d 34 04 02 c0 00 	cmp    DWORD PTR ds:0xc0020434,0x0
c00066c0:	74 0c                	je     c00066ce <iso_readdir+0x10d>
c00066c2:	89 e8                	mov    eax,ebp
c00066c4:	e8 9d f6 ff ff       	call   c0005d66 <ucs2utfn>
c00066c9:	e9 9e 00 00 00       	jmp    c000676c <iso_readdir+0x1ab>
c00066ce:	56                   	push   esi
c00066cf:	51                   	push   ecx
c00066d0:	52                   	push   edx
c00066d1:	55                   	push   ebp
c00066d2:	e8 59 9f ff ff       	call   c0000630 <strncpy>
c00066d7:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00066e2:	c6 84 07 d8 fa 01 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffe0528],0x0
c00066ea:	e8 ac fe ff ff       	call   c000659b <fn_postprocess>
c00066ef:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066f3:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00066f6:	83 c4 10             	add    esp,0x10
c00066f9:	29 c6                	sub    esi,eax
c00066fb:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c00066ff:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006703:	74 05                	je     c000670a <iso_readdir+0x149>
c0006705:	83 ee 21             	sub    esi,0x21
c0006708:	eb 04                	jmp    c000670e <iso_readdir+0x14d>
c000670a:	47                   	inc    edi
c000670b:	83 ee 22             	sub    esi,0x22
c000670e:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c0006716:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000671a:	83 fe 03             	cmp    esi,0x3
c000671d:	7e 4d                	jle    c000676c <iso_readdir+0x1ab>
c000671f:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006722:	48                   	dec    eax
c0006723:	3c 01                	cmp    al,0x1
c0006725:	77 45                	ja     c000676c <iso_readdir+0x1ab>
c0006727:	52                   	push   edx
c0006728:	6a 02                	push   0x2
c000672a:	68 40 cf 01 c0       	push   0xc001cf40
c000672f:	57                   	push   edi
c0006730:	e8 2b a0 ff ff       	call   c0000760 <strncmp>
c0006735:	83 c4 10             	add    esp,0x10
c0006738:	85 c0                	test   eax,eax
c000673a:	75 26                	jne    c0006762 <iso_readdir+0x1a1>
c000673c:	50                   	push   eax
c000673d:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006741:	83 e8 05             	sub    eax,0x5
c0006744:	50                   	push   eax
c0006745:	8d 47 05             	lea    eax,[edi+0x5]
c0006748:	50                   	push   eax
c0006749:	55                   	push   ebp
c000674a:	e8 e1 9e ff ff       	call   c0000630 <strncpy>
c000674f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006753:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006757:	83 c4 10             	add    esp,0x10
c000675a:	c6 84 08 d3 fa 01 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffe052d],0x0
c0006762:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006766:	29 c6                	sub    esi,eax
c0006768:	01 c7                	add    edi,eax
c000676a:	eb ae                	jmp    c000671a <iso_readdir+0x159>
c000676c:	83 c8 ff             	or     eax,0xffffffff
c000676f:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006773:	89 c2                	mov    edx,eax
c0006775:	75 0a                	jne    c0006781 <iso_readdir+0x1c0>
c0006777:	8d 43 0a             	lea    eax,[ebx+0xa]
c000677a:	e8 94 f6 ff ff       	call   c0005e13 <iso_733>
c000677f:	31 d2                	xor    edx,edx
c0006781:	69 4c 24 30 94 00 00 00 	imul   ecx,DWORD PTR [esp+0x30],0x94
c0006789:	89 81 d0 fa 01 c0    	mov    DWORD PTR [ecx-0x3ffe0530],eax
c000678f:	89 91 d4 fa 01 c0    	mov    DWORD PTR [ecx-0x3ffe052c],edx
c0006795:	81 c1 c0 fa 01 c0    	add    ecx,0xc001fac0
c000679b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000679e:	01 41 08             	add    DWORD PTR [ecx+0x8],eax
c00067a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a5:	05 d0 fa 01 c0       	add    eax,0xc001fad0
c00067aa:	83 c4 1c             	add    esp,0x1c
c00067ad:	5b                   	pop    ebx
c00067ae:	5e                   	pop    esi
c00067af:	5f                   	pop    edi
c00067b0:	5d                   	pop    ebp
c00067b1:	c3                   	ret    

c00067b2 <iso_reset>:
c00067b2:	e8 9f f6 ff ff       	call   c0005e56 <iso_break_all>
c00067b7:	e8 98 f6 ff ff       	call   c0005e54 <bclear>
c00067bc:	31 c0                	xor    eax,eax
c00067be:	c3                   	ret    

c00067bf <init_percd>:
c00067bf:	57                   	push   edi
c00067c0:	56                   	push   esi
c00067c1:	53                   	push   ebx
c00067c2:	bb 01 00 00 00       	mov    ebx,0x1
c00067c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00067cb:	a2 e0 f5 01 c0       	mov    ds:0xc001f5e0,al
c00067d0:	e8 dd ff ff ff       	call   c00067b2 <iso_reset>
c00067d5:	c7 05 34 04 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020434,0x0
c00067df:	a1 2c 04 02 c0       	mov    eax,ds:0xc002042c
c00067e4:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c00067e8:	e8 ff f7 ff ff       	call   c0005fec <biread>
c00067ed:	89 c6                	mov    esi,eax
c00067ef:	85 c0                	test   eax,eax
c00067f1:	0f 88 ba 00 00 00    	js     c00068b1 <init_percd+0xf2>
c00067f7:	8b 04 85 00 f6 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0a00]
c00067fe:	83 c0 04             	add    eax,0x4
c0006801:	52                   	push   edx
c0006802:	6a 06                	push   0x6
c0006804:	68 43 cf 01 c0       	push   0xc001cf43
c0006809:	50                   	push   eax
c000680a:	e8 81 9b ff ff       	call   c0000390 <memcmp>
c000680f:	83 c4 10             	add    esp,0x10
c0006812:	85 c0                	test   eax,eax
c0006814:	74 08                	je     c000681e <init_percd+0x5f>
c0006816:	43                   	inc    ebx
c0006817:	83 fb 04             	cmp    ebx,0x4
c000681a:	75 c3                	jne    c00067df <init_percd+0x20>
c000681c:	eb 1a                	jmp    c0006838 <init_percd+0x79>
c000681e:	8b 04 b5 00 f6 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe0a00]
c0006825:	83 c0 5c             	add    eax,0x5c
c0006828:	e8 b7 f5 ff ff       	call   c0005de4 <isjoliet>
c000682d:	a3 34 04 02 c0       	mov    ds:0xc0020434,eax
c0006832:	85 c0                	test   eax,eax
c0006834:	74 e0                	je     c0006816 <init_percd+0x57>
c0006836:	eb 3e                	jmp    c0006876 <init_percd+0xb7>
c0006838:	83 3d 34 04 02 c0 00 	cmp    DWORD PTR ds:0xc0020434,0x0
c000683f:	75 35                	jne    c0006876 <init_percd+0xb7>
c0006841:	a1 2c 04 02 c0       	mov    eax,ds:0xc002042c
c0006846:	83 c0 10             	add    eax,0x10
c0006849:	e8 9e f7 ff ff       	call   c0005fec <biread>
c000684e:	89 c6                	mov    esi,eax
c0006850:	85 c0                	test   eax,eax
c0006852:	78 5f                	js     c00068b3 <init_percd+0xf4>
c0006854:	83 cb ff             	or     ebx,0xffffffff
c0006857:	50                   	push   eax
c0006858:	8b 04 b5 00 f6 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe0a00]
c000685f:	6a 06                	push   0x6
c0006861:	83 c0 04             	add    eax,0x4
c0006864:	68 4a cf 01 c0       	push   0xc001cf4a
c0006869:	50                   	push   eax
c000686a:	e8 21 9b ff ff       	call   c0000390 <memcmp>
c000686f:	83 c4 10             	add    esp,0x10
c0006872:	85 c0                	test   eax,eax
c0006874:	75 3d                	jne    c00068b3 <init_percd+0xf4>
c0006876:	8b 34 b5 00 f6 01 c0 	mov    esi,DWORD PTR [esi*4-0x3ffe0a00]
c000687d:	bf 00 04 02 c0       	mov    edi,0xc0020400
c0006882:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006888:	b9 22 00 00 00       	mov    ecx,0x22
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	b8 02 04 02 c0       	mov    eax,0xc0020402
c0006894:	31 db                	xor    ebx,ebx
c0006896:	e8 78 f5 ff ff       	call   c0005e13 <iso_733>
c000689b:	a3 28 04 02 c0       	mov    ds:0xc0020428,eax
c00068a0:	b8 0a 04 02 c0       	mov    eax,0xc002040a
c00068a5:	e8 69 f5 ff ff       	call   c0005e13 <iso_733>
c00068aa:	a3 24 04 02 c0       	mov    ds:0xc0020424,eax
c00068af:	eb 02                	jmp    c00068b3 <init_percd+0xf4>
c00068b1:	89 c3                	mov    ebx,eax
c00068b3:	89 d8                	mov    eax,ebx
c00068b5:	5b                   	pop    ebx
c00068b6:	5e                   	pop    esi
c00068b7:	5f                   	pop    edi
c00068b8:	c3                   	ret    

c00068b9 <iso_ioctl>:
c00068b9:	e8 f4 fe ff ff       	call   c00067b2 <iso_reset>
c00068be:	31 c0                	xor    eax,eax
c00068c0:	c3                   	ret    

c00068c1 <fs_iso9660_init>:
c00068c1:	53                   	push   ebx
c00068c2:	31 db                	xor    ebx,ebx
c00068c4:	83 ec 0c             	sub    esp,0xc
c00068c7:	68 40 09 00 00       	push   0x940
c00068cc:	6a 00                	push   0x0
c00068ce:	68 c0 fa 01 c0       	push   0xc001fac0
c00068d3:	e8 f8 9b ff ff       	call   c00004d0 <memset>
c00068d8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068df:	c7 05 c0 fa 01 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc001fac0,0xffffffff
c00068e9:	e8 cb 0e 00 00       	call   c00077b9 <malloc>
c00068ee:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068f5:	a3 30 04 02 c0       	mov    ds:0xc0020430,eax
c00068fa:	e8 ba 0e 00 00       	call   c00077b9 <malloc>
c00068ff:	83 c4 10             	add    esp,0x10
c0006902:	a3 a0 fa 01 c0       	mov    ds:0xc001faa0,eax
c0006907:	83 ec 0c             	sub    esp,0xc
c000690a:	68 04 08 00 00       	push   0x804
c000690f:	e8 a5 0e 00 00       	call   c00077b9 <malloc>
c0006914:	89 04 9d 00 f6 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0a00],eax
c000691b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006921:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006928:	e8 8c 0e 00 00       	call   c00077b9 <malloc>
c000692d:	83 c4 10             	add    esp,0x10
c0006930:	89 04 9d a0 f5 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0a60],eax
c0006937:	43                   	inc    ebx
c0006938:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c000693e:	83 fb 10             	cmp    ebx,0x10
c0006941:	75 c4                	jne    c0006907 <fs_iso9660_init+0x46>
c0006943:	31 c0                	xor    eax,eax
c0006945:	83 c4 08             	add    esp,0x8
c0006948:	5b                   	pop    ebx
c0006949:	c3                   	ret    

c000694a <fs_iso9660_shutdown>:
c000694a:	53                   	push   ebx
c000694b:	31 db                	xor    ebx,ebx
c000694d:	83 ec 08             	sub    esp,0x8
c0006950:	83 ec 0c             	sub    esp,0xc
c0006953:	ff 34 9d 00 f6 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0a00]
c000695a:	e8 6a 0e 00 00       	call   c00077c9 <free>
c000695f:	58                   	pop    eax
c0006960:	ff 34 9d a0 f5 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0a60]
c0006967:	43                   	inc    ebx
c0006968:	e8 5c 0e 00 00       	call   c00077c9 <free>
c000696d:	83 c4 10             	add    esp,0x10
c0006970:	83 fb 10             	cmp    ebx,0x10
c0006973:	75 db                	jne    c0006950 <fs_iso9660_shutdown+0x6>
c0006975:	a1 30 04 02 c0       	mov    eax,ds:0xc0020430
c000697a:	85 c0                	test   eax,eax
c000697c:	74 0c                	je     c000698a <fs_iso9660_shutdown+0x40>
c000697e:	83 ec 0c             	sub    esp,0xc
c0006981:	50                   	push   eax
c0006982:	e8 42 0e 00 00       	call   c00077c9 <free>
c0006987:	83 c4 10             	add    esp,0x10
c000698a:	a1 a0 fa 01 c0       	mov    eax,ds:0xc001faa0
c000698f:	85 c0                	test   eax,eax
c0006991:	74 0c                	je     c000699f <fs_iso9660_shutdown+0x55>
c0006993:	83 ec 0c             	sub    esp,0xc
c0006996:	50                   	push   eax
c0006997:	e8 2d 0e 00 00       	call   c00077c9 <free>
c000699c:	83 c4 10             	add    esp,0x10
c000699f:	c7 05 a0 fa 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001faa0,0x0
c00069a9:	c7 05 30 04 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020430,0x0
c00069b3:	31 c0                	xor    eax,eax
c00069b5:	83 c4 08             	add    esp,0x8
c00069b8:	5b                   	pop    ebx
c00069b9:	c3                   	ret    

c00069ba <Computer::close(int, int, void*)>:
c00069ba:	57                   	push   edi
c00069bb:	56                   	push   esi
c00069bc:	53                   	push   ebx
c00069bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00069c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00069c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00069c9:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069cf:	83 ec 0c             	sub    esp,0xc
c00069d2:	50                   	push   eax
c00069d3:	e8 da 4f 00 00       	call   c000b9b2 <Device::closeAll()>
c00069d8:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069de:	83 c4 10             	add    esp,0x10
c00069e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00069e3:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c00069e7:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c00069ef:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00069f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00069f7:	5b                   	pop    ebx
c00069f8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00069fb:	5e                   	pop    esi
c00069fc:	5f                   	pop    edi
c00069fd:	ff e0                	jmp    eax

c00069ff <Krnl::firstTask()>:
c00069ff:	53                   	push   ebx
c0006a00:	83 ec 14             	sub    esp,0x14
c0006a03:	fb                   	sti    
c0006a04:	68 51 cf 01 c0       	push   0xc001cf51
c0006a09:	e8 45 90 00 00       	call   c000fa53 <KeSetBootMessage(char const*)>
c0006a0e:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0006a15:	e8 9f 0d 00 00       	call   c00077b9 <malloc>
c0006a1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006a21:	89 c3                	mov    ebx,eax
c0006a23:	a1 10 37 02 c0       	mov    eax,ds:0xc0023710
c0006a28:	50                   	push   eax
c0006a29:	68 6a cf 01 c0       	push   0xc001cf6a
c0006a2e:	6a 01                	push   0x1
c0006a30:	53                   	push   ebx
c0006a31:	e8 7a c4 00 00       	call   c0012eb0 <Process::Process(bool, char const*, Process*, char**)>
c0006a36:	83 c4 20             	add    esp,0x20
c0006a39:	68 ff 00 00 00       	push   0xff
c0006a3e:	6a 00                	push   0x0
c0006a40:	68 0f 72 00 c0       	push   0xc000720f
c0006a45:	53                   	push   ebx
c0006a46:	e8 71 c6 00 00       	call   c00130bc <Process::createThread(void (*)(void*), void*, int)>
c0006a4b:	8b 15 10 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023710
c0006a51:	6a 7a                	push   0x7a
c0006a53:	6a 00                	push   0x0
c0006a55:	68 10 3b 01 c0       	push   0xc0013b10
c0006a5a:	52                   	push   edx
c0006a5b:	e8 5c c6 00 00       	call   c00130bc <Process::createThread(void (*)(void*), void*, int)>
c0006a60:	83 c4 14             	add    esp,0x14
c0006a63:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c0006a68:	68 68 d0 01 c0       	push   0xc001d068
c0006a6d:	c6 05 3d 04 02 c0 01 	mov    BYTE PTR ds:0xc002043d,0x1
c0006a74:	e8 da 8f 00 00       	call   c000fa53 <KeSetBootMessage(char const*)>
c0006a79:	e8 71 d4 00 00       	call   c0013eef <Vm::initialise8086()>
c0006a7e:	e8 73 3d 00 00       	call   c000a7f6 <Fs::initVFS()>
c0006a83:	c7 04 24 77 cf 01 c0 	mov    DWORD PTR [esp],0xc001cf77
c0006a8a:	e8 c4 8f 00 00       	call   c000fa53 <KeSetBootMessage(char const*)>
c0006a8f:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c0006a94:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006a9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a9c:	6a 00                	push   0x0
c0006a9e:	6a 00                	push   0x0
c0006aa0:	6a 00                	push   0x0
c0006aa2:	50                   	push   eax
c0006aa3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006aa6:	83 c4 14             	add    esp,0x14
c0006aa9:	68 68 d0 01 c0       	push   0xc001d068
c0006aae:	e8 a0 8f 00 00       	call   c000fa53 <KeSetBootMessage(char const*)>
c0006ab3:	e8 76 94 00 00       	call   c000ff2e <Krnl::loadSystemEnv()>
c0006ab8:	e8 d3 96 00 00       	call   c0010190 <Krnl::setupPowerManager()>
c0006abd:	83 c4 0c             	add    esp,0xc
c0006ac0:	6a 3a                	push   0x3a
c0006ac2:	68 91 cf 01 c0       	push   0xc001cf91
c0006ac7:	68 9a cf 01 c0       	push   0xc001cf9a
c0006acc:	e8 cd a9 00 00       	call   c001149e <Reg::readIntWithDefault(char*, char*, int)>
c0006ad1:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ad4:	e8 2b 48 00 00       	call   c000b304 <User::loadClockSettings(int)>
c0006ad9:	c7 04 24 8c d0 01 c0 	mov    DWORD PTR [esp],0xc001d08c
c0006ae0:	e8 6e 8f 00 00       	call   c000fa53 <KeSetBootMessage(char const*)>
c0006ae5:	59                   	pop    ecx
c0006ae6:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c0006aeb:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006af1:	53                   	push   ebx
c0006af2:	e8 b9 4e 00 00       	call   c000b9b0 <Device::loadDriversForAll()>
c0006af7:	c7 04 24 a2 cf 01 c0 	mov    DWORD PTR [esp],0xc001cfa2
c0006afe:	e8 50 8f 00 00       	call   c000fa53 <KeSetBootMessage(char const*)>
c0006b03:	58                   	pop    eax
c0006b04:	8b 1d 38 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020438
c0006b0a:	5a                   	pop    edx
c0006b0b:	6a 01                	push   0x1
c0006b0d:	68 b3 cf 01 c0       	push   0xc001cfb3
c0006b12:	e8 d3 bd 00 00       	call   c00128ea <Thr::loadDLL(char const*, bool)>
c0006b17:	59                   	pop    ecx
c0006b18:	5a                   	pop    edx
c0006b19:	53                   	push   ebx
c0006b1a:	50                   	push   eax
c0006b1b:	e8 fb bf 00 00       	call   c0012b1b <Thr::executeDLL(unsigned long, void*)>
c0006b20:	83 c4 10             	add    esp,0x10
c0006b23:	83 ec 0c             	sub    esp,0xc
c0006b26:	6a 02                	push   0x2
c0006b28:	e8 ab c9 00 00       	call   c00134d8 <blockTask(TaskState)>
c0006b2d:	83 c4 10             	add    esp,0x10
c0006b30:	eb f1                	jmp    c0006b23 <Krnl::firstTask()+0x124>

c0006b32 <Computer::Computer()>:
c0006b32:	83 ec 0c             	sub    esp,0xc
c0006b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b39:	83 ec 08             	sub    esp,0x8
c0006b3c:	68 cf cf 01 c0       	push   0xc001cfcf
c0006b41:	50                   	push   eax
c0006b42:	e8 e5 4e 00 00       	call   c000ba2c <Device::Device(char const*)>
c0006b47:	83 c4 10             	add    esp,0x10
c0006b4a:	ba d8 d0 01 c0       	mov    edx,0xc001d0d8
c0006b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b53:	89 10                	mov    DWORD PTR [eax],edx
c0006b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b59:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b67:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b75:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006b7b:	83 ca 04             	or     edx,0x4
c0006b7e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b88:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006b8e:	31 d2                	xor    edx,edx
c0006b90:	88 c2                	mov    dl,al
c0006b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b96:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ba7:	31 d2                	xor    edx,edx
c0006ba9:	88 c2                	mov    dl,al
c0006bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006baf:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006bbe:	8d 50 01             	lea    edx,[eax+0x1]
c0006bc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006bc5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006bcb:	31 d2                	xor    edx,edx
c0006bcd:	88 c2                	mov    dl,al
c0006bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006bd7:	83 e1 3f             	and    ecx,0x3f
c0006bda:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006bde:	90                   	nop
c0006bdf:	83 c4 0c             	add    esp,0xc
c0006be2:	c3                   	ret    
c0006be3:	90                   	nop

c0006be4 <Computer::setBootMessage(char const*)>:
c0006be4:	c3                   	ret    
c0006be5:	90                   	nop

c0006be6 <Computer::detectFeatures()>:
c0006be6:	55                   	push   ebp
c0006be7:	57                   	push   edi
c0006be8:	56                   	push   esi
c0006be9:	53                   	push   ebx
c0006bea:	83 ec 1c             	sub    esp,0x1c
c0006bed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006bf1:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006bfb:	e8 f9 95 ff ff       	call   c00001f9 <detectCPUID>
c0006c00:	85 c0                	test   eax,eax
c0006c02:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c08:	0f 95 c2             	setne  dl
c0006c0b:	83 e0 fd             	and    eax,0xfffffffd
c0006c0e:	01 d2                	add    edx,edx
c0006c10:	09 d0                	or     eax,edx
c0006c12:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c18:	a8 02                	test   al,0x2
c0006c1a:	75 46                	jne    c0006c62 <Computer::detectFeatures()+0x7c>
c0006c1c:	f6 05 51 04 02 c0 04 	test   BYTE PTR ds:0xc0020451,0x4
c0006c23:	74 07                	je     c0006c2c <Computer::detectFeatures()+0x46>
c0006c25:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006c2c:	e8 75 4c 01 00       	call   c001b8a6 <x87Detect>
c0006c31:	83 e0 01             	and    eax,0x1
c0006c34:	c1 e0 04             	shl    eax,0x4
c0006c37:	88 c2                	mov    dl,al
c0006c39:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c3f:	83 e0 ef             	and    eax,0xffffffef
c0006c42:	09 d0                	or     eax,edx
c0006c44:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c4a:	a8 10                	test   al,0x10
c0006c4c:	0f 85 2a 01 00 00    	jne    c0006d7c <Computer::detectFeatures()+0x196>
c0006c52:	84 c0                	test   al,al
c0006c54:	0f 88 45 01 00 00    	js     c0006d9f <Computer::detectFeatures()+0x1b9>
c0006c5a:	83 c4 1c             	add    esp,0x1c
c0006c5d:	5b                   	pop    ebx
c0006c5e:	5e                   	pop    esi
c0006c5f:	5f                   	pop    edi
c0006c60:	5d                   	pop    ebp
c0006c61:	c3                   	ret    
c0006c62:	83 ec 0c             	sub    esp,0xc
c0006c65:	6a 20                	push   0x20
c0006c67:	e8 14 83 00 00       	call   c000ef80 <CPU::cpuidCheckEDX(unsigned int)>
c0006c6c:	83 e0 01             	and    eax,0x1
c0006c6f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006c76:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c7c:	83 e0 f7             	and    eax,0xfffffff7
c0006c7f:	09 d0                	or     eax,edx
c0006c81:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c87:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006c8e:	e8 ed 82 00 00       	call   c000ef80 <CPU::cpuidCheckEDX(unsigned int)>
c0006c93:	83 e0 01             	and    eax,0x1
c0006c96:	88 c2                	mov    dl,al
c0006c98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006c9e:	83 e0 fe             	and    eax,0xfffffffe
c0006ca1:	09 d0                	or     eax,edx
c0006ca3:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ca9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006cb0:	e8 cb 82 00 00       	call   c000ef80 <CPU::cpuidCheckEDX(unsigned int)>
c0006cb5:	c1 e0 07             	shl    eax,0x7
c0006cb8:	88 c2                	mov    dl,al
c0006cba:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006cc0:	83 e0 7f             	and    eax,0x7f
c0006cc3:	09 d0                	or     eax,edx
c0006cc5:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ccb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006cd2:	e8 a9 82 00 00       	call   c000ef80 <CPU::cpuidCheckEDX(unsigned int)>
c0006cd7:	83 c4 10             	add    esp,0x10
c0006cda:	83 e0 01             	and    eax,0x1
c0006cdd:	c1 e0 05             	shl    eax,0x5
c0006ce0:	88 c2                	mov    dl,al
c0006ce2:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ce8:	83 e0 df             	and    eax,0xffffffdf
c0006ceb:	09 d0                	or     eax,edx
c0006ced:	f7 05 50 04 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0020450,0x401
c0006cf7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cfd:	0f 84 c2 00 00 00    	je     c0006dc5 <Computer::detectFeatures()+0x1df>
c0006d03:	83 e0 fe             	and    eax,0xfffffffe
c0006d06:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d0c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d12:	88 c2                	mov    dl,al
c0006d14:	83 e2 09             	and    edx,0x9
c0006d17:	fe ca                	dec    dl
c0006d19:	75 09                	jne    c0006d24 <Computer::detectFeatures()+0x13e>
c0006d1b:	83 e0 fe             	and    eax,0xfffffffe
c0006d1e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d24:	83 ec 0c             	sub    esp,0xc
c0006d27:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006d2b:	50                   	push   eax
c0006d2c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006d30:	55                   	push   ebp
c0006d31:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006d35:	57                   	push   edi
c0006d36:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006d3a:	56                   	push   esi
c0006d3b:	68 00 00 00 80       	push   0x80000000
c0006d40:	e8 b7 81 00 00       	call   c000eefc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d45:	83 c4 20             	add    esp,0x20
c0006d48:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006d4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006d53:	0f 86 c3 fe ff ff    	jbe    c0006c1c <Computer::detectFeatures()+0x36>
c0006d59:	83 ec 0c             	sub    esp,0xc
c0006d5c:	50                   	push   eax
c0006d5d:	55                   	push   ebp
c0006d5e:	57                   	push   edi
c0006d5f:	56                   	push   esi
c0006d60:	68 01 00 00 80       	push   0x80000001
c0006d65:	e8 92 81 00 00       	call   c000eefc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d6a:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006d74:	83 c4 20             	add    esp,0x20
c0006d77:	e9 a0 fe ff ff       	jmp    c0006c1c <Computer::detectFeatures()+0x36>
c0006d7c:	e8 df 4a 01 00       	call   c001b860 <absolutelyNoChanceInHell>
c0006d81:	88 c2                	mov    dl,al
c0006d83:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d89:	c1 e2 07             	shl    edx,0x7
c0006d8c:	83 e0 7f             	and    eax,0x7f
c0006d8f:	09 d0                	or     eax,edx
c0006d91:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d97:	84 c0                	test   al,al
c0006d99:	0f 89 bb fe ff ff    	jns    c0006c5a <Computer::detectFeatures()+0x74>
c0006d9f:	e8 3c 48 01 00       	call   c001b5e0 <avxDetect>
c0006da4:	83 e0 01             	and    eax,0x1
c0006da7:	c1 e0 05             	shl    eax,0x5
c0006daa:	88 c2                	mov    dl,al
c0006dac:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006db2:	83 e0 df             	and    eax,0xffffffdf
c0006db5:	09 d0                	or     eax,edx
c0006db7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006dbd:	83 c4 1c             	add    esp,0x1c
c0006dc0:	5b                   	pop    ebx
c0006dc1:	5e                   	pop    esi
c0006dc2:	5f                   	pop    edi
c0006dc3:	5d                   	pop    ebp
c0006dc4:	c3                   	ret    
c0006dc5:	83 ec 0c             	sub    esp,0xc
c0006dc8:	68 00 02 00 00       	push   0x200
c0006dcd:	e8 ae 81 00 00       	call   c000ef80 <CPU::cpuidCheckEDX(unsigned int)>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	83 e0 01             	and    eax,0x1
c0006dd8:	88 c2                	mov    dl,al
c0006dda:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006de0:	83 e0 fe             	and    eax,0xfffffffe
c0006de3:	09 d0                	or     eax,edx
c0006de5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006deb:	e9 1c ff ff ff       	jmp    c0006d0c <Computer::detectFeatures()+0x126>

c0006df0 <Computer::displayFeatures()>:
c0006df0:	c3                   	ret    
c0006df1:	90                   	nop

c0006df2 <Computer::rdmsr(unsigned int)>:
c0006df2:	83 ec 0c             	sub    esp,0xc
c0006df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e00:	74 0a                	je     c0006e0c <Computer::rdmsr(unsigned int)+0x1a>
c0006e02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e06:	0f 32                	rdmsr  
c0006e08:	83 c4 0c             	add    esp,0xc
c0006e0b:	c3                   	ret    
c0006e0c:	83 ec 0c             	sub    esp,0xc
c0006e0f:	68 d8 cf 01 c0       	push   0xc001cfd8
c0006e14:	e8 b2 92 00 00       	call   c00100cb <KePanic(char const*)>
c0006e19:	83 c4 10             	add    esp,0x10
c0006e1c:	eb e4                	jmp    c0006e02 <Computer::rdmsr(unsigned int)+0x10>

c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006e1e:	57                   	push   edi
c0006e1f:	56                   	push   esi
c0006e20:	52                   	push   edx
c0006e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e25:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006e29:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006e2d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e34:	74 0e                	je     c0006e44 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006e36:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e3a:	89 f0                	mov    eax,esi
c0006e3c:	89 fa                	mov    edx,edi
c0006e3e:	0f 30                	wrmsr  
c0006e40:	58                   	pop    eax
c0006e41:	5e                   	pop    esi
c0006e42:	5f                   	pop    edi
c0006e43:	c3                   	ret    
c0006e44:	83 ec 0c             	sub    esp,0xc
c0006e47:	68 de cf 01 c0       	push   0xc001cfde
c0006e4c:	e8 7a 92 00 00       	call   c00100cb <KePanic(char const*)>
c0006e51:	83 c4 10             	add    esp,0x10
c0006e54:	eb e0                	jmp    c0006e36 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006e56 <Computer::shutdown()>:
c0006e56:	83 ec 0c             	sub    esp,0xc
c0006e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e5f:	6a 00                	push   0x0
c0006e61:	6a 00                	push   0x0
c0006e63:	6a 00                	push   0x0
c0006e65:	50                   	push   eax
c0006e66:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e69:	83 c4 1c             	add    esp,0x1c
c0006e6c:	c3                   	ret    
c0006e6d:	90                   	nop

c0006e6e <Computer::restart()>:
c0006e6e:	83 ec 0c             	sub    esp,0xc
c0006e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e75:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e77:	6a 00                	push   0x0
c0006e79:	6a 00                	push   0x0
c0006e7b:	6a 01                	push   0x1
c0006e7d:	50                   	push   eax
c0006e7e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e81:	83 c4 1c             	add    esp,0x1c
c0006e84:	c3                   	ret    
c0006e85:	90                   	nop

c0006e86 <Computer::sleep()>:
c0006e86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e8a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006e90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006e94:	e9 5f 7b 00 00       	jmp    c000e9f8 <ACPI::sleep()>
c0006e99:	90                   	nop

c0006e9a <Computer::nmiEnabled()>:
c0006e9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e9e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006ea4:	c3                   	ret    
c0006ea5:	90                   	nop

c0006ea6 <Computer::readCMOS(unsigned char)>:
c0006ea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006eaa:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006eb1:	19 c0                	sbb    eax,eax
c0006eb3:	83 e0 80             	and    eax,0xffffff80
c0006eb6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006eba:	e6 70                	out    0x70,al
c0006ebc:	e4 71                	in     al,0x71
c0006ebe:	c3                   	ret    
c0006ebf:	90                   	nop

c0006ec0 <Computer::enableNMI(bool)>:
c0006ec0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006ec8:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006ece:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006ed6:	eb ce                	jmp    c0006ea6 <Computer::readCMOS(unsigned char)>

c0006ed8 <Computer::open(int, int, void*)>:
c0006ed8:	56                   	push   esi
c0006ed9:	53                   	push   ebx
c0006eda:	83 ec 10             	sub    esp,0x10
c0006edd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ee1:	f6 05 50 04 02 c0 04 	test   BYTE PTR ds:0xc0020450,0x4
c0006ee8:	68 e4 cf 01 c0       	push   0xc001cfe4
c0006eed:	0f 94 05 e0 f0 01 c0 	sete   BYTE PTR ds:0xc001f0e0
c0006ef4:	e8 5a 8b 00 00       	call   c000fa53 <KeSetBootMessage(char const*)>
c0006ef9:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006f00:	e8 b4 08 00 00       	call   c00077b9 <malloc>
c0006f05:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f08:	89 c6                	mov    esi,eax
c0006f0a:	e8 81 76 00 00       	call   c000e590 <ACPI::ACPI()>
c0006f0f:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006f15:	58                   	pop    eax
c0006f16:	5a                   	pop    edx
c0006f17:	56                   	push   esi
c0006f18:	53                   	push   ebx
c0006f19:	e8 76 49 00 00       	call   c000b894 <Device::addChild(Device*)>
c0006f1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006f21:	e8 c0 fc ff ff       	call   c0006be6 <Computer::detectFeatures()>
c0006f26:	59                   	pop    ecx
c0006f27:	5e                   	pop    esi
c0006f28:	6a 01                	push   0x1
c0006f2a:	53                   	push   ebx
c0006f2b:	e8 90 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006f30:	c7 04 24 fc cf 01 c0 	mov    DWORD PTR [esp],0xc001cffc
c0006f37:	e8 17 8b 00 00       	call   c000fa53 <KeSetBootMessage(char const*)>
c0006f3c:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006f43:	e8 71 08 00 00       	call   c00077b9 <malloc>
c0006f48:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	e8 e6 80 00 00       	call   c000f038 <CPU::CPU()>
c0006f52:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0006f58:	58                   	pop    eax
c0006f59:	5a                   	pop    edx
c0006f5a:	56                   	push   esi
c0006f5b:	53                   	push   ebx
c0006f5c:	e8 33 49 00 00       	call   c000b894 <Device::addChild(Device*)>
c0006f61:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0006f67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006f6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f6d:	51                   	push   ecx
c0006f6e:	6a 00                	push   0x0
c0006f70:	6a 00                	push   0x0
c0006f72:	50                   	push   eax
c0006f73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006f76:	83 c4 14             	add    esp,0x14
c0006f79:	68 ac d0 01 c0       	push   0xc001d0ac
c0006f7e:	e8 d0 8a 00 00       	call   c000fa53 <KeSetBootMessage(char const*)>
c0006f83:	e8 9e e0 00 00       	call   c0015026 <HalInitialiseCoprocessor()>
c0006f88:	c7 04 24 16 d0 01 c0 	mov    DWORD PTR [esp],0xc001d016
c0006f8f:	e8 bf 8a 00 00       	call   c000fa53 <KeSetBootMessage(char const*)>
c0006f94:	c7 04 24 ff 69 00 c0 	mov    DWORD PTR [esp],0xc00069ff
c0006f9b:	e8 34 c2 00 00       	call   c00131d4 <setupMultitasking(void (*)())>
c0006fa0:	83 c4 14             	add    esp,0x14
c0006fa3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006fa8:	5b                   	pop    ebx
c0006fa9:	5e                   	pop    esi
c0006faa:	c3                   	ret    
c0006fab:	90                   	nop

c0006fac <Computer::disableNMI()>:
c0006fac:	6a 00                	push   0x0
c0006fae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006fb2:	50                   	push   eax
c0006fb3:	e8 08 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006fb8:	5a                   	pop    edx
c0006fb9:	59                   	pop    ecx
c0006fba:	c3                   	ret    
c0006fbb:	90                   	nop

c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>:
c0006fbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006fc0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006fc7:	19 c0                	sbb    eax,eax
c0006fc9:	83 e0 80             	and    eax,0xffffff80
c0006fcc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006fd0:	e6 70                	out    0x70,al
c0006fd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006fd6:	e6 71                	out    0x71,al
c0006fd8:	c3                   	ret    
c0006fd9:	90                   	nop

c0006fda <Computer::handleNMI()>:
c0006fda:	56                   	push   esi
c0006fdb:	53                   	push   ebx
c0006fdc:	83 ec 10             	sub    esp,0x10
c0006fdf:	e4 92                	in     al,0x92
c0006fe1:	89 c6                	mov    esi,eax
c0006fe3:	e4 61                	in     al,0x61
c0006fe5:	68 31 d0 01 c0       	push   0xc001d031
c0006fea:	88 c3                	mov    bl,al
c0006fec:	e8 63 34 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0006ff1:	83 c4 10             	add    esp,0x10
c0006ff4:	83 e6 10             	and    esi,0x10
c0006ff7:	75 0d                	jne    c0007006 <Computer::handleNMI()+0x2c>
c0006ff9:	f6 c3 40             	test   bl,0x40
c0006ffc:	75 1d                	jne    c000701b <Computer::handleNMI()+0x41>
c0006ffe:	84 db                	test   bl,bl
c0007000:	78 2d                	js     c000702f <Computer::handleNMI()+0x55>
c0007002:	58                   	pop    eax
c0007003:	5b                   	pop    ebx
c0007004:	5e                   	pop    esi
c0007005:	c3                   	ret    
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	68 42 d0 01 c0       	push   0xc001d042
c000700e:	e8 b8 90 00 00       	call   c00100cb <KePanic(char const*)>
c0007013:	83 c4 10             	add    esp,0x10
c0007016:	f6 c3 40             	test   bl,0x40
c0007019:	74 e3                	je     c0006ffe <Computer::handleNMI()+0x24>
c000701b:	83 ec 0c             	sub    esp,0xc
c000701e:	68 4f d0 01 c0       	push   0xc001d04f
c0007023:	e8 a3 90 00 00       	call   c00100cb <KePanic(char const*)>
c0007028:	83 c4 10             	add    esp,0x10
c000702b:	84 db                	test   bl,bl
c000702d:	79 d3                	jns    c0007002 <Computer::handleNMI()+0x28>
c000702f:	c7 44 24 10 59 d0 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d059
c0007037:	5a                   	pop    edx
c0007038:	5b                   	pop    ebx
c0007039:	5e                   	pop    esi
c000703a:	e9 8c 90 00 00       	jmp    c00100cb <KePanic(char const*)>
c000703f:	90                   	nop

c0007040 <GDTEntry::setBase(unsigned int)>:
c0007040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007044:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007048:	89 c1                	mov    ecx,eax
c000704a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000704e:	c1 e9 10             	shr    ecx,0x10
c0007051:	c1 e8 18             	shr    eax,0x18
c0007054:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007057:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000705a:	c3                   	ret    
c000705b:	90                   	nop

c000705c <GDTEntry::setLimit(unsigned int)>:
c000705c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007064:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007067:	66 89 01             	mov    WORD PTR [ecx],ax
c000706a:	83 e2 f0             	and    edx,0xfffffff0
c000706d:	c1 e8 10             	shr    eax,0x10
c0007070:	83 e0 0f             	and    eax,0xf
c0007073:	09 d0                	or     eax,edx
c0007075:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007078:	c3                   	ret    
c0007079:	90                   	nop

c000707a <GDT::GDT()>:
c000707a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000707e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007088:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000708e:	90                   	nop
c000708f:	c3                   	ret    

c0007090 <GDT::addEntry(GDTEntry)>:
c0007090:	53                   	push   ebx
c0007091:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007095:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007099:	8b 02                	mov    eax,DWORD PTR [edx]
c000709b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000709f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00070a3:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00070a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00070aa:	c1 e0 03             	shl    eax,0x3
c00070ad:	89 0a                	mov    DWORD PTR [edx],ecx
c00070af:	5b                   	pop    ebx
c00070b0:	c3                   	ret    
c00070b1:	90                   	nop

c00070b2 <GDT::getNumberOfEntries()>:
c00070b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00070b8:	c3                   	ret    
c00070b9:	90                   	nop

c00070ba <GDT::flush()>:
c00070ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070be:	8b 10                	mov    edx,DWORD PTR [eax]
c00070c0:	83 c0 04             	add    eax,0x4
c00070c3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00070ca:	a3 42 04 02 c0       	mov    ds:0xc0020442,eax
c00070cf:	66 89 15 40 04 02 c0 	mov    WORD PTR ds:0xc0020440,dx
c00070d6:	e9 82 92 ff ff       	jmp    c000035d <loadGDT>
c00070db:	90                   	nop

c00070dc <GDT::setup()>:
c00070dc:	57                   	push   edi
c00070dd:	56                   	push   esi
c00070de:	53                   	push   ebx
c00070df:	83 ec 30             	sub    esp,0x30
c00070e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00070e6:	6a 00                	push   0x0
c00070e8:	8d 74 24 14          	lea    esi,[esp+0x14]
c00070ec:	56                   	push   esi
c00070ed:	e8 4e ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c00070f2:	6a 00                	push   0x0
c00070f4:	56                   	push   esi
c00070f5:	e8 62 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c00070fa:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007102:	6a 00                	push   0x0
c0007104:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007108:	56                   	push   esi
c0007109:	e8 32 ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000710e:	68 ff ff ff 00       	push   0xffffff
c0007113:	56                   	push   esi
c0007114:	e8 43 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0007119:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000711d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007121:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007125:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007129:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000712e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007133:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007137:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000713b:	89 f8                	mov    eax,edi
c000713d:	89 fa                	mov    edx,edi
c000713f:	80 e4 f7             	and    ah,0xf7
c0007142:	80 ce 60             	or     dh,0x60
c0007145:	89 c7                	mov    edi,eax
c0007147:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000714b:	80 cc 60             	or     ah,0x60
c000714e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007152:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007156:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000715a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000715e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007162:	83 c4 20             	add    esp,0x20
c0007165:	6a 00                	push   0x0
c0007167:	8d 44 24 24          	lea    eax,[esp+0x24]
c000716b:	50                   	push   eax
c000716c:	e8 cf fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0007171:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007175:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007179:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c000717e:	6a 00                	push   0x0
c0007180:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007184:	50                   	push   eax
c0007185:	e8 b6 fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000718a:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c000718f:	83 c4 0c             	add    esp,0xc
c0007192:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007196:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719a:	53                   	push   ebx
c000719b:	e8 f0 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071a0:	83 c4 0c             	add    esp,0xc
c00071a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071ab:	53                   	push   ebx
c00071ac:	e8 df fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071b1:	83 c4 0c             	add    esp,0xc
c00071b4:	57                   	push   edi
c00071b5:	56                   	push   esi
c00071b6:	53                   	push   ebx
c00071b7:	e8 d4 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071bc:	83 c4 0c             	add    esp,0xc
c00071bf:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c7:	53                   	push   ebx
c00071c8:	e8 c3 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071cd:	83 c4 0c             	add    esp,0xc
c00071d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d8:	53                   	push   ebx
c00071d9:	e8 b2 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071de:	83 c4 0c             	add    esp,0xc
c00071e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e9:	53                   	push   ebx
c00071ea:	e8 a1 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071ef:	83 c4 0c             	add    esp,0xc
c00071f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071fa:	53                   	push   ebx
c00071fb:	e8 90 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0007200:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007203:	e8 b2 fe ff ff       	call   c00070ba <GDT::flush()>
c0007208:	83 c4 40             	add    esp,0x40
c000720b:	5b                   	pop    ebx
c000720c:	5e                   	pop    esi
c000720d:	5f                   	pop    edi
c000720e:	c3                   	ret    

c000720f <idleFunction(void*)>:
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0007217:	48                   	dec    eax
c0007218:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c000721d:	75 01                	jne    c0007220 <idleFunction(void*)+0x11>
c000721f:	fb                   	sti    
c0007220:	e8 db da 00 00       	call   c0014d00 <HalSystemIdle()>
c0007225:	e8 38 4c 01 00       	call   c001be62 <idleCommon()>
c000722a:	eb f4                	jmp    c0007220 <idleFunction(void*)+0x11>

c000722c <IDTEntry::IDTEntry(bool)>:
c000722c:	83 ec 04             	sub    esp,0x4
c000722f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007233:	88 04 24             	mov    BYTE PTR [esp],al
c0007236:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000723a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007244:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007248:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000724c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000724f:	83 e2 f0             	and    edx,0xfffffff0
c0007252:	83 ca 0e             	or     edx,0xe
c0007255:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007258:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000725c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000725f:	83 e2 ef             	and    edx,0xffffffef
c0007262:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007265:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007269:	74 05                	je     c0007270 <IDTEntry::IDTEntry(bool)+0x44>
c000726b:	b2 03                	mov    dl,0x3
c000726d:	eb 05                	jmp    c0007274 <IDTEntry::IDTEntry(bool)+0x48>
c000726f:	90                   	nop
c0007270:	b2 00                	mov    dl,0x0
c0007272:	66 90                	xchg   ax,ax
c0007274:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007278:	83 e2 03             	and    edx,0x3
c000727b:	88 d1                	mov    cl,dl
c000727d:	c1 e1 05             	shl    ecx,0x5
c0007280:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007283:	83 e2 9f             	and    edx,0xffffff9f
c0007286:	09 ca                	or     edx,ecx
c0007288:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000728b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000728f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007292:	83 ca 80             	or     edx,0xffffff80
c0007295:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007298:	90                   	nop
c0007299:	83 c4 04             	add    esp,0x4
c000729c:	c3                   	ret    
c000729d:	90                   	nop

c000729e <IDTEntry::setOffset(unsigned int)>:
c000729e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00072a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a6:	66 89 02             	mov    WORD PTR [edx],ax
c00072a9:	c1 e8 10             	shr    eax,0x10
c00072ac:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop
c00072b2:	66 90                	xchg   ax,ax

c00072b4 <IDT::IDT()>:
c00072b4:	90                   	nop
c00072b5:	c3                   	ret    

c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00072b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072ba:	83 c0 30             	add    eax,0x30
c00072bd:	c3                   	ret    

c00072be <IDT::addEntry(IDTEntry, int)>:
c00072be:	53                   	push   ebx
c00072bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00072c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00072cf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00072d2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00072d6:	5b                   	pop    ebx
c00072d7:	c3                   	ret    

c00072d8 <IDT::addEntry(int, void (*)(), bool)>:
c00072d8:	53                   	push   ebx
c00072d9:	83 ec 10             	sub    esp,0x10
c00072dc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00072e1:	50                   	push   eax
c00072e2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00072e6:	53                   	push   ebx
c00072e7:	e8 40 ff ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c00072ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00072f0:	53                   	push   ebx
c00072f1:	e8 a8 ff ff ff       	call   c000729e <IDTEntry::setOffset(unsigned int)>
c00072f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00072fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007302:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007306:	e8 b3 ff ff ff       	call   c00072be <IDT::addEntry(IDTEntry, int)>
c000730b:	83 c4 30             	add    esp,0x30
c000730e:	5b                   	pop    ebx
c000730f:	c3                   	ret    

c0007310 <IDT::flush()>:
c0007310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007314:	66 c7 05 48 04 02 c0 ff 07 	mov    WORD PTR ds:0xc0020448,0x7ff
c000731d:	a3 4a 04 02 c0       	mov    ds:0xc002044a,eax
c0007322:	0f 01 1d 48 04 02 c0 	lidtd  ds:0xc0020448
c0007329:	c3                   	ret    

c000732a <IDT::setup()>:
c000732a:	57                   	push   edi
c000732b:	56                   	push   esi
c000732c:	53                   	push   ebx
c000732d:	83 ec 10             	sub    esp,0x10
c0007330:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007334:	6a 00                	push   0x0
c0007336:	68 70 b6 01 c0       	push   0xc001b670
c000733b:	6a 00                	push   0x0
c000733d:	53                   	push   ebx
c000733e:	e8 95 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007343:	6a 00                	push   0x0
c0007345:	68 80 b6 01 c0       	push   0xc001b680
c000734a:	6a 01                	push   0x1
c000734c:	53                   	push   ebx
c000734d:	e8 86 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007352:	83 c4 20             	add    esp,0x20
c0007355:	6a 00                	push   0x0
c0007357:	68 8a b6 01 c0       	push   0xc001b68a
c000735c:	6a 02                	push   0x2
c000735e:	53                   	push   ebx
c000735f:	e8 74 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007364:	6a 00                	push   0x0
c0007366:	68 94 b6 01 c0       	push   0xc001b694
c000736b:	6a 03                	push   0x3
c000736d:	53                   	push   ebx
c000736e:	e8 65 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007373:	83 c4 20             	add    esp,0x20
c0007376:	6a 00                	push   0x0
c0007378:	68 9e b6 01 c0       	push   0xc001b69e
c000737d:	6a 04                	push   0x4
c000737f:	53                   	push   ebx
c0007380:	e8 53 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007385:	6a 00                	push   0x0
c0007387:	68 a8 b6 01 c0       	push   0xc001b6a8
c000738c:	6a 05                	push   0x5
c000738e:	53                   	push   ebx
c000738f:	e8 44 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007394:	83 c4 20             	add    esp,0x20
c0007397:	6a 00                	push   0x0
c0007399:	68 b2 b6 01 c0       	push   0xc001b6b2
c000739e:	6a 06                	push   0x6
c00073a0:	53                   	push   ebx
c00073a1:	e8 32 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073a6:	6a 00                	push   0x0
c00073a8:	68 bc b6 01 c0       	push   0xc001b6bc
c00073ad:	6a 07                	push   0x7
c00073af:	53                   	push   ebx
c00073b0:	e8 23 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073b5:	83 c4 20             	add    esp,0x20
c00073b8:	6a 00                	push   0x0
c00073ba:	68 c6 b6 01 c0       	push   0xc001b6c6
c00073bf:	6a 08                	push   0x8
c00073c1:	53                   	push   ebx
c00073c2:	e8 11 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073c7:	6a 00                	push   0x0
c00073c9:	68 ce b6 01 c0       	push   0xc001b6ce
c00073ce:	6a 09                	push   0x9
c00073d0:	53                   	push   ebx
c00073d1:	e8 02 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073d6:	83 c4 20             	add    esp,0x20
c00073d9:	6a 00                	push   0x0
c00073db:	68 d8 b6 01 c0       	push   0xc001b6d8
c00073e0:	6a 0a                	push   0xa
c00073e2:	53                   	push   ebx
c00073e3:	e8 f0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073e8:	6a 00                	push   0x0
c00073ea:	68 e0 b6 01 c0       	push   0xc001b6e0
c00073ef:	6a 0b                	push   0xb
c00073f1:	53                   	push   ebx
c00073f2:	e8 e1 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073f7:	83 c4 20             	add    esp,0x20
c00073fa:	6a 00                	push   0x0
c00073fc:	68 e8 b6 01 c0       	push   0xc001b6e8
c0007401:	6a 0c                	push   0xc
c0007403:	53                   	push   ebx
c0007404:	e8 cf fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007409:	6a 00                	push   0x0
c000740b:	68 f0 b6 01 c0       	push   0xc001b6f0
c0007410:	6a 0d                	push   0xd
c0007412:	53                   	push   ebx
c0007413:	e8 c0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007418:	83 c4 20             	add    esp,0x20
c000741b:	6a 00                	push   0x0
c000741d:	68 f8 b6 01 c0       	push   0xc001b6f8
c0007422:	6a 0e                	push   0xe
c0007424:	53                   	push   ebx
c0007425:	e8 ae fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000742a:	6a 00                	push   0x0
c000742c:	68 00 b7 01 c0       	push   0xc001b700
c0007431:	6a 0f                	push   0xf
c0007433:	53                   	push   ebx
c0007434:	e8 9f fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007439:	83 c4 20             	add    esp,0x20
c000743c:	6a 00                	push   0x0
c000743e:	68 0a b7 01 c0       	push   0xc001b70a
c0007443:	6a 10                	push   0x10
c0007445:	53                   	push   ebx
c0007446:	e8 8d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000744b:	6a 00                	push   0x0
c000744d:	68 14 b7 01 c0       	push   0xc001b714
c0007452:	6a 11                	push   0x11
c0007454:	53                   	push   ebx
c0007455:	e8 7e fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000745a:	83 c4 20             	add    esp,0x20
c000745d:	6a 00                	push   0x0
c000745f:	68 1e b7 01 c0       	push   0xc001b71e
c0007464:	6a 12                	push   0x12
c0007466:	53                   	push   ebx
c0007467:	e8 6c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000746c:	6a 01                	push   0x1
c000746e:	68 b8 b7 01 c0       	push   0xc001b7b8
c0007473:	6a 60                	push   0x60
c0007475:	53                   	push   ebx
c0007476:	e8 5d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000747b:	83 c4 20             	add    esp,0x20
c000747e:	6a 00                	push   0x0
c0007480:	68 bf b7 01 c0       	push   0xc001b7bf
c0007485:	6a 20                	push   0x20
c0007487:	53                   	push   ebx
c0007488:	e8 4b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000748d:	6a 00                	push   0x0
c000748f:	68 aa b7 01 c0       	push   0xc001b7aa
c0007494:	6a 21                	push   0x21
c0007496:	53                   	push   ebx
c0007497:	e8 3c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000749c:	83 c4 20             	add    esp,0x20
c000749f:	6a 00                	push   0x0
c00074a1:	68 b1 b7 01 c0       	push   0xc001b7b1
c00074a6:	6a 22                	push   0x22
c00074a8:	53                   	push   ebx
c00074a9:	e8 2a fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ae:	6a 00                	push   0x0
c00074b0:	68 28 b7 01 c0       	push   0xc001b728
c00074b5:	6a 23                	push   0x23
c00074b7:	53                   	push   ebx
c00074b8:	e8 1b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074bd:	83 c4 20             	add    esp,0x20
c00074c0:	6a 00                	push   0x0
c00074c2:	68 32 b7 01 c0       	push   0xc001b732
c00074c7:	6a 24                	push   0x24
c00074c9:	53                   	push   ebx
c00074ca:	e8 09 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074cf:	6a 00                	push   0x0
c00074d1:	68 3c b7 01 c0       	push   0xc001b73c
c00074d6:	6a 25                	push   0x25
c00074d8:	53                   	push   ebx
c00074d9:	e8 fa fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074de:	83 c4 20             	add    esp,0x20
c00074e1:	6a 00                	push   0x0
c00074e3:	68 46 b7 01 c0       	push   0xc001b746
c00074e8:	6a 26                	push   0x26
c00074ea:	53                   	push   ebx
c00074eb:	e8 e8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074f0:	6a 00                	push   0x0
c00074f2:	68 50 b7 01 c0       	push   0xc001b750
c00074f7:	6a 27                	push   0x27
c00074f9:	53                   	push   ebx
c00074fa:	e8 d9 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ff:	83 c4 20             	add    esp,0x20
c0007502:	6a 00                	push   0x0
c0007504:	68 5a b7 01 c0       	push   0xc001b75a
c0007509:	6a 28                	push   0x28
c000750b:	53                   	push   ebx
c000750c:	e8 c7 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007511:	6a 00                	push   0x0
c0007513:	68 64 b7 01 c0       	push   0xc001b764
c0007518:	6a 29                	push   0x29
c000751a:	53                   	push   ebx
c000751b:	e8 b8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007520:	83 c4 20             	add    esp,0x20
c0007523:	6a 00                	push   0x0
c0007525:	68 6e b7 01 c0       	push   0xc001b76e
c000752a:	6a 2a                	push   0x2a
c000752c:	53                   	push   ebx
c000752d:	e8 a6 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007532:	6a 00                	push   0x0
c0007534:	68 78 b7 01 c0       	push   0xc001b778
c0007539:	6a 2b                	push   0x2b
c000753b:	53                   	push   ebx
c000753c:	e8 97 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007541:	83 c4 20             	add    esp,0x20
c0007544:	6a 00                	push   0x0
c0007546:	68 82 b7 01 c0       	push   0xc001b782
c000754b:	6a 2c                	push   0x2c
c000754d:	53                   	push   ebx
c000754e:	e8 85 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007553:	6a 00                	push   0x0
c0007555:	68 8c b7 01 c0       	push   0xc001b78c
c000755a:	6a 2d                	push   0x2d
c000755c:	53                   	push   ebx
c000755d:	e8 76 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007562:	83 c4 20             	add    esp,0x20
c0007565:	6a 00                	push   0x0
c0007567:	68 96 b7 01 c0       	push   0xc001b796
c000756c:	6a 2e                	push   0x2e
c000756e:	53                   	push   ebx
c000756f:	e8 64 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007574:	6a 00                	push   0x0
c0007576:	68 a0 b7 01 c0       	push   0xc001b7a0
c000757b:	6a 2f                	push   0x2f
c000757d:	53                   	push   ebx
c000757e:	e8 55 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007583:	83 c4 20             	add    esp,0x20
c0007586:	6a 00                	push   0x0
c0007588:	68 f6 b7 01 c0       	push   0xc001b7f6
c000758d:	6a 30                	push   0x30
c000758f:	53                   	push   ebx
c0007590:	e8 43 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007595:	6a 00                	push   0x0
c0007597:	68 00 b8 01 c0       	push   0xc001b800
c000759c:	6a 31                	push   0x31
c000759e:	53                   	push   ebx
c000759f:	e8 34 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075a4:	83 c4 20             	add    esp,0x20
c00075a7:	6a 00                	push   0x0
c00075a9:	68 0a b8 01 c0       	push   0xc001b80a
c00075ae:	6a 32                	push   0x32
c00075b0:	53                   	push   ebx
c00075b1:	e8 22 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075b6:	6a 00                	push   0x0
c00075b8:	68 14 b8 01 c0       	push   0xc001b814
c00075bd:	6a 33                	push   0x33
c00075bf:	53                   	push   ebx
c00075c0:	e8 13 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075c5:	83 c4 20             	add    esp,0x20
c00075c8:	6a 00                	push   0x0
c00075ca:	68 1e b8 01 c0       	push   0xc001b81e
c00075cf:	6a 34                	push   0x34
c00075d1:	53                   	push   ebx
c00075d2:	e8 01 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075d7:	6a 00                	push   0x0
c00075d9:	68 28 b8 01 c0       	push   0xc001b828
c00075de:	6a 35                	push   0x35
c00075e0:	53                   	push   ebx
c00075e1:	e8 f2 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075e6:	83 c4 20             	add    esp,0x20
c00075e9:	6a 00                	push   0x0
c00075eb:	68 32 b8 01 c0       	push   0xc001b832
c00075f0:	6a 36                	push   0x36
c00075f2:	53                   	push   ebx
c00075f3:	e8 e0 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075f8:	6a 00                	push   0x0
c00075fa:	68 3c b8 01 c0       	push   0xc001b83c
c00075ff:	6a 37                	push   0x37
c0007601:	53                   	push   ebx
c0007602:	e8 d1 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007607:	83 c4 1c             	add    esp,0x1c
c000760a:	6a 03                	push   0x3
c000760c:	6a 02                	push   0x2
c000760e:	ff 35 30 05 02 c0    	push   DWORD PTR ds:0xc0020530
c0007614:	e8 81 23 00 00       	call   c000999a <VAS::allocatePages(int, int)>
c0007619:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007620:	89 c6                	mov    esi,eax
c0007622:	e8 92 01 00 00       	call   c00077b9 <malloc>
c0007627:	81 c6 00 20 00 00    	add    esi,0x2000
c000762d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007630:	89 c7                	mov    edi,eax
c0007632:	e8 0d 15 00 00       	call   c0008b44 <TSS::TSS()>
c0007637:	83 c4 0c             	add    esp,0xc
c000763a:	68 c6 b6 01 c0       	push   0xc001b6c6
c000763f:	56                   	push   esi
c0007640:	57                   	push   edi
c0007641:	e8 42 15 00 00       	call   c0008b88 <TSS::setup(unsigned long, unsigned long)>
c0007646:	89 c6                	mov    esi,eax
c0007648:	58                   	pop    eax
c0007649:	5a                   	pop    edx
c000764a:	6a 00                	push   0x0
c000764c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007650:	50                   	push   eax
c0007651:	e8 d6 fb ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c0007656:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000765a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000765f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007666:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000766c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007670:	80 ce 05             	or     dh,0x5
c0007673:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007676:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000767a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007684:	e8 87 fc ff ff       	call   c0007310 <IDT::flush()>
c0007689:	83 c4 20             	add    esp,0x20
c000768c:	5b                   	pop    ebx
c000768d:	5e                   	pop    esi
c000768e:	5f                   	pop    edi
c000768f:	c3                   	ret    

c0007690 <sbrk>:
c0007690:	55                   	push   ebp
c0007691:	57                   	push   edi
c0007692:	56                   	push   esi
c0007693:	53                   	push   ebx
c0007694:	83 ec 1c             	sub    esp,0x1c
c0007697:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000769b:	85 c0                	test   eax,eax
c000769d:	74 5f                	je     c00076fe <sbrk+0x6e>
c000769f:	78 64                	js     c0007705 <sbrk+0x75>
c00076a1:	8b 15 d4 f0 01 c0    	mov    edx,DWORD PTR ds:0xc001f0d4
c00076a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00076ab:	05 ff 0f 00 00       	add    eax,0xfff
c00076b0:	89 c5                	mov    ebp,eax
c00076b2:	78 69                	js     c000771d <sbrk+0x8d>
c00076b4:	c1 fd 0c             	sar    ebp,0xc
c00076b7:	bb 00 00 00 00       	mov    ebx,0x0
c00076bc:	8b 35 30 05 02 c0    	mov    esi,DWORD PTR ds:0xc0020530
c00076c2:	8b 3d d4 f0 01 c0    	mov    edi,DWORD PTR ds:0xc001f0d4
c00076c8:	e8 c8 03 00 00       	call   c0007a95 <Phys::allocatePage()>
c00076cd:	68 01 04 00 00       	push   0x401
c00076d2:	57                   	push   edi
c00076d3:	50                   	push   eax
c00076d4:	56                   	push   esi
c00076d5:	e8 bc 21 00 00       	call   c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>
c00076da:	81 05 d4 f0 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f0d4,0x1000
c00076e4:	43                   	inc    ebx
c00076e5:	83 c4 10             	add    esp,0x10
c00076e8:	39 dd                	cmp    ebp,ebx
c00076ea:	75 d0                	jne    c00076bc <sbrk+0x2c>
c00076ec:	0f 20 d8             	mov    eax,cr3
c00076ef:	0f 22 d8             	mov    cr3,eax
c00076f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00076f6:	83 c4 1c             	add    esp,0x1c
c00076f9:	5b                   	pop    ebx
c00076fa:	5e                   	pop    esi
c00076fb:	5f                   	pop    edi
c00076fc:	5d                   	pop    ebp
c00076fd:	c3                   	ret    
c00076fe:	a1 d4 f0 01 c0       	mov    eax,ds:0xc001f0d4
c0007703:	eb f1                	jmp    c00076f6 <sbrk+0x66>
c0007705:	83 ec 08             	sub    esp,0x8
c0007708:	50                   	push   eax
c0007709:	68 fc d0 01 c0       	push   0xc001d0fc
c000770e:	e8 41 2d 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0007713:	83 c4 10             	add    esp,0x10
c0007716:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000771b:	eb d9                	jmp    c00076f6 <sbrk+0x66>
c000771d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007723:	eb 8f                	jmp    c00076b4 <sbrk+0x24>

c0007725 <mmap>:
c0007725:	83 ec 18             	sub    esp,0x18
c0007728:	68 2c d1 01 c0       	push   0xc001d12c
c000772d:	e8 99 89 00 00       	call   c00100cb <KePanic(char const*)>
c0007732:	b8 00 00 00 00       	mov    eax,0x0
c0007737:	83 c4 1c             	add    esp,0x1c
c000773a:	c3                   	ret    

c000773b <munmap>:
c000773b:	83 ec 18             	sub    esp,0x18
c000773e:	68 31 d1 01 c0       	push   0xc001d131
c0007743:	e8 83 89 00 00       	call   c00100cb <KePanic(char const*)>
c0007748:	b8 00 00 00 00       	mov    eax,0x0
c000774d:	83 c4 1c             	add    esp,0x1c
c0007750:	c3                   	ret    

c0007751 <liballoc_lock()>:
c0007751:	fa                   	cli    
c0007752:	ff 05 e8 36 02 c0    	inc    DWORD PTR ds:0xc00236e8
c0007758:	b8 00 00 00 00       	mov    eax,0x0
c000775d:	c3                   	ret    

c000775e <liballoc_unlock()>:
c000775e:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0007763:	48                   	dec    eax
c0007764:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c0007769:	75 01                	jne    c000776c <liballoc_unlock()+0xe>
c000776b:	fb                   	sti    
c000776c:	b8 00 00 00 00       	mov    eax,0x0
c0007771:	c3                   	ret    

c0007772 <liballoc_alloc(int)>:
c0007772:	83 ec 10             	sub    esp,0x10
c0007775:	6a 01                	push   0x1
c0007777:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000777b:	ff 35 30 05 02 c0    	push   DWORD PTR ds:0xc0020530
c0007781:	e8 14 22 00 00       	call   c000999a <VAS::allocatePages(int, int)>
c0007786:	83 c4 1c             	add    esp,0x1c
c0007789:	c3                   	ret    

c000778a <liballoc_free(void*, int)>:
c000778a:	83 ec 14             	sub    esp,0x14
c000778d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007791:	ff 35 30 05 02 c0    	push   DWORD PTR ds:0xc0020530
c0007797:	e8 ba 1e 00 00       	call   c0009656 <VAS::freeAllocatedPages(unsigned long)>
c000779c:	b8 00 00 00 00       	mov    eax,0x0
c00077a1:	83 c4 1c             	add    esp,0x1c
c00077a4:	c3                   	ret    

c00077a5 <realloc>:
c00077a5:	83 ec 14             	sub    esp,0x14
c00077a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077b0:	e8 7c 9d ff ff       	call   c0001531 <dlrealloc>
c00077b5:	83 c4 1c             	add    esp,0x1c
c00077b8:	c3                   	ret    

c00077b9 <malloc>:
c00077b9:	83 ec 18             	sub    esp,0x18
c00077bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077c0:	e8 2f 98 ff ff       	call   c0000ff4 <dlmalloc>
c00077c5:	83 c4 1c             	add    esp,0x1c
c00077c8:	c3                   	ret    

c00077c9 <free>:
c00077c9:	83 ec 18             	sub    esp,0x18
c00077cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077d0:	e8 c4 94 ff ff       	call   c0000c99 <dlfree>
c00077d5:	83 c4 1c             	add    esp,0x1c
c00077d8:	c3                   	ret    

c00077d9 <rfree>:
c00077d9:	83 ec 18             	sub    esp,0x18
c00077dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077e0:	e8 b4 94 ff ff       	call   c0000c99 <dlfree>
c00077e5:	83 c4 1c             	add    esp,0x1c
c00077e8:	c3                   	ret    

c00077e9 <calloc>:
c00077e9:	56                   	push   esi
c00077ea:	53                   	push   ebx
c00077eb:	83 ec 10             	sub    esp,0x10
c00077ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00077f2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00077f7:	53                   	push   ebx
c00077f8:	e8 bc ff ff ff       	call   c00077b9 <malloc>
c00077fd:	89 c6                	mov    esi,eax
c00077ff:	83 c4 0c             	add    esp,0xc
c0007802:	53                   	push   ebx
c0007803:	6a 00                	push   0x0
c0007805:	50                   	push   eax
c0007806:	e8 c5 8c ff ff       	call   c00004d0 <memset>
c000780b:	89 f0                	mov    eax,esi
c000780d:	83 c4 14             	add    esp,0x14
c0007810:	5b                   	pop    ebx
c0007811:	5e                   	pop    esi
c0007812:	c3                   	ret    

c0007813 <KeEntryPoint>:
c0007813:	57                   	push   edi
c0007814:	bf f9 03 00 00       	mov    edi,0x3f9
c0007819:	56                   	push   esi
c000781a:	89 fa                	mov    edx,edi
c000781c:	53                   	push   ebx
c000781d:	31 f6                	xor    esi,esi
c000781f:	83 ec 2c             	sub    esp,0x2c
c0007822:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007827:	a3 50 04 02 c0       	mov    ds:0xc0020450,eax
c000782c:	89 f0                	mov    eax,esi
c000782e:	ee                   	out    dx,al
c000782f:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007834:	b0 80                	mov    al,0x80
c0007836:	89 da                	mov    edx,ebx
c0007838:	ee                   	out    dx,al
c0007839:	b1 03                	mov    cl,0x3
c000783b:	ba f8 03 00 00       	mov    edx,0x3f8
c0007840:	88 c8                	mov    al,cl
c0007842:	ee                   	out    dx,al
c0007843:	89 f0                	mov    eax,esi
c0007845:	89 fa                	mov    edx,edi
c0007847:	ee                   	out    dx,al
c0007848:	88 c8                	mov    al,cl
c000784a:	89 da                	mov    edx,ebx
c000784c:	ee                   	out    dx,al
c000784d:	b0 c7                	mov    al,0xc7
c000784f:	ba fa 03 00 00       	mov    edx,0x3fa
c0007854:	ee                   	out    dx,al
c0007855:	b0 0b                	mov    al,0xb
c0007857:	ba fc 03 00 00       	mov    edx,0x3fc
c000785c:	ee                   	out    dx,al
c000785d:	68 38 d1 01 c0       	push   0xc001d138
c0007862:	e8 ed 2b 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0007867:	e8 79 81 00 00       	call   c000f9e5 <KeDisplaySplashScreen()>
c000786c:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007871:	05 ff 0f 00 00       	add    eax,0xfff
c0007876:	25 00 f0 ff ff       	and    eax,0xfffff000
c000787b:	89 04 24             	mov    DWORD PTR [esp],eax
c000787e:	e8 64 03 00 00       	call   c0007be7 <Phys::physicalMemorySetup(unsigned int)>
c0007883:	e8 38 1b 00 00       	call   c00093c0 <Virt::virtualMemorySetup()>
c0007888:	58                   	pop    eax
c0007889:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000788d:	53                   	push   ebx
c000788e:	e8 e9 1b 00 00       	call   c000947c <VAS::VAS()>
c0007893:	89 1d 30 05 02 c0    	mov    DWORD PTR ds:0xc0020530,ebx
c0007899:	e8 5c 45 01 00       	call   c001bdfa <_init>
c000789e:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00078a5:	e8 0f ff ff ff       	call   c00077b9 <malloc>
c00078aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00078ad:	89 c6                	mov    esi,eax
c00078af:	e8 7e f2 ff ff       	call   c0006b32 <Computer::Computer()>
c00078b4:	6a 00                	push   0x0
c00078b6:	89 35 38 04 02 c0    	mov    DWORD PTR ds:0xc0020438,esi
c00078bc:	6a 00                	push   0x0
c00078be:	6a 00                	push   0x0
c00078c0:	56                   	push   esi
c00078c1:	e8 12 f6 ff ff       	call   c0006ed8 <Computer::open(int, int, void*)>
c00078c6:	83 c4 14             	add    esp,0x14
c00078c9:	53                   	push   ebx
c00078ca:	e8 63 1e 00 00       	call   c0009732 <VAS::~VAS()>
c00078cf:	83 c4 30             	add    esp,0x30
c00078d2:	5b                   	pop    ebx
c00078d3:	5e                   	pop    esi
c00078d4:	5f                   	pop    edi
c00078d5:	c3                   	ret    

c00078d6 <Phys::allocateDMA(unsigned long)>:
c00078d6:	55                   	push   ebp
c00078d7:	31 ed                	xor    ebp,ebp
c00078d9:	57                   	push   edi
c00078da:	56                   	push   esi
c00078db:	53                   	push   ebx
c00078dc:	31 db                	xor    ebx,ebx
c00078de:	83 ec 1c             	sub    esp,0x1c
c00078e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00078e5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00078ed:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00078f3:	31 c0                	xor    eax,eax
c00078f5:	c1 ef 0c             	shr    edi,0xc
c00078f8:	eb 19                	jmp    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c00078fa:	85 c0                	test   eax,eax
c00078fc:	75 06                	jne    c0007904 <Phys::allocateDMA(unsigned long)+0x2e>
c00078fe:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007902:	89 dd                	mov    ebp,ebx
c0007904:	8d 70 01             	lea    esi,[eax+0x1]
c0007907:	39 f7                	cmp    edi,esi
c0007909:	74 33                	je     c000793e <Phys::allocateDMA(unsigned long)+0x68>
c000790b:	89 f0                	mov    eax,esi
c000790d:	43                   	inc    ebx
c000790e:	83 fb 0f             	cmp    ebx,0xf
c0007911:	7f 11                	jg     c0007924 <Phys::allocateDMA(unsigned long)+0x4e>
c0007913:	80 bb 6c 04 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdfb94],0x0
c000791a:	74 de                	je     c00078fa <Phys::allocateDMA(unsigned long)+0x24>
c000791c:	31 c0                	xor    eax,eax
c000791e:	43                   	inc    ebx
c000791f:	83 fb 0f             	cmp    ebx,0xf
c0007922:	7e ef                	jle    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c0007924:	83 ec 0c             	sub    esp,0xc
c0007927:	68 50 d1 01 c0       	push   0xc001d150
c000792c:	e8 9a 87 00 00       	call   c00100cb <KePanic(char const*)>
c0007931:	83 c4 10             	add    esp,0x10
c0007934:	31 c0                	xor    eax,eax
c0007936:	83 c4 1c             	add    esp,0x1c
c0007939:	5b                   	pop    ebx
c000793a:	5e                   	pop    esi
c000793b:	5f                   	pop    edi
c000793c:	5d                   	pop    ebp
c000793d:	c3                   	ret    
c000793e:	89 e9                	mov    ecx,ebp
c0007940:	c1 f9 04             	sar    ecx,0x4
c0007943:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007947:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000794b:	89 ca                	mov    edx,ecx
c000794d:	4a                   	dec    edx
c000794e:	79 03                	jns    c0007953 <Phys::allocateDMA(unsigned long)+0x7d>
c0007950:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007953:	c1 fa 04             	sar    edx,0x4
c0007956:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000795a:	74 08                	je     c0007964 <Phys::allocateDMA(unsigned long)+0x8e>
c000795c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007960:	31 c0                	xor    eax,eax
c0007962:	eb ba                	jmp    c000791e <Phys::allocateDMA(unsigned long)+0x48>
c0007964:	85 f6                	test   esi,esi
c0007966:	74 15                	je     c000797d <Phys::allocateDMA(unsigned long)+0xa7>
c0007968:	8d 95 6c 04 02 c0    	lea    edx,[ebp-0x3ffdfb94]
c000796e:	8d 84 05 6d 04 02 c0 	lea    eax,[ebp+eax*1-0x3ffdfb93]
c0007975:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007978:	42                   	inc    edx
c0007979:	39 d0                	cmp    eax,edx
c000797b:	75 f8                	jne    c0007975 <Phys::allocateDMA(unsigned long)+0x9f>
c000797d:	01 3d 64 04 02 c0    	add    DWORD PTR ds:0xc0020464,edi
c0007983:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007987:	85 c0                	test   eax,eax
c0007989:	74 17                	je     c00079a2 <Phys::allocateDMA(unsigned long)+0xcc>
c000798b:	83 ec 0c             	sub    esp,0xc
c000798e:	68 50 d1 01 c0       	push   0xc001d150
c0007993:	e8 33 87 00 00       	call   c00100cb <KePanic(char const*)>
c0007998:	83 c4 10             	add    esp,0x10
c000799b:	89 f0                	mov    eax,esi
c000799d:	e9 6b ff ff ff       	jmp    c000790d <Phys::allocateDMA(unsigned long)+0x37>
c00079a2:	c1 e5 0c             	shl    ebp,0xc
c00079a5:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00079ab:	eb 89                	jmp    c0007936 <Phys::allocateDMA(unsigned long)+0x60>

c00079ad <Phys::freeDMA(unsigned long, unsigned long)>:
c00079ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079b1:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00079b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079bb:	c1 ea 0c             	shr    edx,0xc
c00079be:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00079c3:	29 15 64 04 02 c0    	sub    DWORD PTR ds:0xc0020464,edx
c00079c9:	c1 e8 0c             	shr    eax,0xc
c00079cc:	85 d2                	test   edx,edx
c00079ce:	74 0f                	je     c00079df <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c00079d0:	05 6c 04 02 c0       	add    eax,0xc002046c
c00079d5:	01 c2                	add    edx,eax
c00079d7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00079da:	40                   	inc    eax
c00079db:	39 d0                	cmp    eax,edx
c00079dd:	75 f8                	jne    c00079d7 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c00079df:	c3                   	ret    

c00079e0 <Phys::setPageState(unsigned long, bool)>:
c00079e0:	56                   	push   esi
c00079e1:	ba 01 00 00 00       	mov    edx,0x1
c00079e6:	53                   	push   ebx
c00079e7:	8b 35 d8 f0 01 c0    	mov    esi,DWORD PTR ds:0xc001f0d8
c00079ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00079f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00079f5:	89 c8                	mov    eax,ecx
c00079f7:	83 e1 07             	and    ecx,0x7
c00079fa:	c1 e8 03             	shr    eax,0x3
c00079fd:	d3 e3                	shl    ebx,cl
c00079ff:	01 c6                	add    esi,eax
c0007a01:	d3 e2                	shl    edx,cl
c0007a03:	f7 d2                	not    edx
c0007a05:	20 16                	and    BYTE PTR [esi],dl
c0007a07:	03 05 d8 f0 01 c0    	add    eax,DWORD PTR ds:0xc001f0d8
c0007a0d:	08 18                	or     BYTE PTR [eax],bl
c0007a0f:	5b                   	pop    ebx
c0007a10:	5e                   	pop    esi
c0007a11:	c3                   	ret    

c0007a12 <Phys::getPageState(unsigned long)>:
c0007a12:	53                   	push   ebx
c0007a13:	8b 15 d8 f0 01 c0    	mov    edx,DWORD PTR ds:0xc001f0d8
c0007a19:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007a1d:	31 db                	xor    ebx,ebx
c0007a1f:	89 c8                	mov    eax,ecx
c0007a21:	83 e1 07             	and    ecx,0x7
c0007a24:	c1 e8 03             	shr    eax,0x3
c0007a27:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007a2a:	89 d8                	mov    eax,ebx
c0007a2c:	5b                   	pop    ebx
c0007a2d:	d3 f8                	sar    eax,cl
c0007a2f:	83 e0 01             	and    eax,0x1
c0007a32:	c3                   	ret    

c0007a33 <Phys::freePage(unsigned long)>:
c0007a33:	53                   	push   ebx
c0007a34:	83 ec 08             	sub    esp,0x8
c0007a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007a3b:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007a41:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007a47:	76 3a                	jbe    c0007a83 <Phys::freePage(unsigned long)+0x50>
c0007a49:	c1 e8 0c             	shr    eax,0xc
c0007a4c:	50                   	push   eax
c0007a4d:	89 c3                	mov    ebx,eax
c0007a4f:	e8 be ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007a54:	5a                   	pop    edx
c0007a55:	84 c0                	test   al,al
c0007a57:	74 19                	je     c0007a72 <Phys::freePage(unsigned long)+0x3f>
c0007a59:	83 ec 08             	sub    esp,0x8
c0007a5c:	ff 0d 64 04 02 c0    	dec    DWORD PTR ds:0xc0020464
c0007a62:	6a 00                	push   0x0
c0007a64:	53                   	push   ebx
c0007a65:	e8 76 ff ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007a6a:	83 c4 10             	add    esp,0x10
c0007a6d:	83 c4 08             	add    esp,0x8
c0007a70:	5b                   	pop    ebx
c0007a71:	c3                   	ret    
c0007a72:	c7 44 24 10 f5 d1 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d1f5
c0007a7a:	83 c4 08             	add    esp,0x8
c0007a7d:	5b                   	pop    ebx
c0007a7e:	e9 48 86 00 00       	jmp    c00100cb <KePanic(char const*)>
c0007a83:	68 00 10 00 00       	push   0x1000
c0007a88:	50                   	push   eax
c0007a89:	e8 1f ff ff ff       	call   c00079ad <Phys::freeDMA(unsigned long, unsigned long)>
c0007a8e:	59                   	pop    ecx
c0007a8f:	5b                   	pop    ebx
c0007a90:	83 c4 08             	add    esp,0x8
c0007a93:	5b                   	pop    ebx
c0007a94:	c3                   	ret    

c0007a95 <Phys::allocatePage()>:
c0007a95:	56                   	push   esi
c0007a96:	53                   	push   ebx
c0007a97:	83 ec 14             	sub    esp,0x14
c0007a9a:	8b 35 58 04 02 c0    	mov    esi,DWORD PTR ds:0xc0020458
c0007aa0:	89 f3                	mov    ebx,esi
c0007aa2:	eb 0a                	jmp    c0007aae <Phys::allocatePage()+0x19>
c0007aa4:	89 1d 58 04 02 c0    	mov    DWORD PTR ds:0xc0020458,ebx
c0007aaa:	39 de                	cmp    esi,ebx
c0007aac:	74 24                	je     c0007ad2 <Phys::allocatePage()+0x3d>
c0007aae:	53                   	push   ebx
c0007aaf:	e8 5e ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007ab4:	5a                   	pop    edx
c0007ab5:	84 c0                	test   al,al
c0007ab7:	74 5f                	je     c0007b18 <Phys::allocatePage()+0x83>
c0007ab9:	43                   	inc    ebx
c0007aba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ac0:	75 e2                	jne    c0007aa4 <Phys::allocatePage()+0xf>
c0007ac2:	31 db                	xor    ebx,ebx
c0007ac4:	c7 05 58 04 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020458,0x0
c0007ace:	39 de                	cmp    esi,ebx
c0007ad0:	75 dc                	jne    c0007aae <Phys::allocatePage()+0x19>
c0007ad2:	83 ec 0c             	sub    esp,0xc
c0007ad5:	80 35 7c 04 02 c0 01 	xor    BYTE PTR ds:0xc002047c,0x1
c0007adc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007ae1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007ae4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007aea:	50                   	push   eax
c0007aeb:	e8 84 26 00 00       	call   c000a174 <VAS::scanForEviction()>
c0007af0:	83 c4 10             	add    esp,0x10
c0007af3:	85 c0                	test   eax,eax
c0007af5:	75 3f                	jne    c0007b36 <Phys::allocatePage()+0xa1>
c0007af7:	83 ec 0c             	sub    esp,0xc
c0007afa:	68 78 d1 01 c0       	push   0xc001d178
c0007aff:	e8 c7 85 00 00       	call   c00100cb <KePanic(char const*)>
c0007b04:	83 c4 10             	add    esp,0x10
c0007b07:	8b 1d 58 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020458
c0007b0d:	53                   	push   ebx
c0007b0e:	e8 ff fe ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007b13:	5a                   	pop    edx
c0007b14:	84 c0                	test   al,al
c0007b16:	75 a1                	jne    c0007ab9 <Phys::allocatePage()+0x24>
c0007b18:	6a 01                	push   0x1
c0007b1a:	53                   	push   ebx
c0007b1b:	e8 c0 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b20:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c0007b25:	5a                   	pop    edx
c0007b26:	ff 05 64 04 02 c0    	inc    DWORD PTR ds:0xc0020464
c0007b2c:	c1 e0 0c             	shl    eax,0xc
c0007b2f:	59                   	pop    ecx
c0007b30:	83 c4 14             	add    esp,0x14
c0007b33:	5b                   	pop    ebx
c0007b34:	5e                   	pop    esi
c0007b35:	c3                   	ret    
c0007b36:	83 ec 08             	sub    esp,0x8
c0007b39:	89 c2                	mov    edx,eax
c0007b3b:	6a 01                	push   0x1
c0007b3d:	c1 ea 0c             	shr    edx,0xc
c0007b40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b44:	52                   	push   edx
c0007b45:	e8 96 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b4a:	83 c4 10             	add    esp,0x10
c0007b4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b51:	eb dd                	jmp    c0007b30 <Phys::allocatePage()+0x9b>

c0007b53 <Phys::allocateContiguousPages(int)>:
c0007b53:	57                   	push   edi
c0007b54:	56                   	push   esi
c0007b55:	53                   	push   ebx
c0007b56:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b5a:	fa                   	cli    
c0007b5b:	ff 05 e8 36 02 c0    	inc    DWORD PTR ds:0xc00236e8
c0007b61:	31 db                	xor    ebx,ebx
c0007b63:	85 db                	test   ebx,ebx
c0007b65:	75 11                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b67:	e8 29 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b6c:	83 fe 01             	cmp    esi,0x1
c0007b6f:	89 c7                	mov    edi,eax
c0007b71:	74 21                	je     c0007b94 <Phys::allocateContiguousPages(int)+0x41>
c0007b73:	bb 01 00 00 00       	mov    ebx,0x1
c0007b78:	e8 18 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b7d:	89 da                	mov    edx,ebx
c0007b7f:	c1 e2 0c             	shl    edx,0xc
c0007b82:	01 fa                	add    edx,edi
c0007b84:	39 c2                	cmp    edx,eax
c0007b86:	74 20                	je     c0007ba8 <Phys::allocateContiguousPages(int)+0x55>
c0007b88:	bb 01 00 00 00       	mov    ebx,0x1
c0007b8d:	89 c7                	mov    edi,eax
c0007b8f:	83 fe 01             	cmp    esi,0x1
c0007b92:	75 e4                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b94:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0007b99:	48                   	dec    eax
c0007b9a:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c0007b9f:	75 01                	jne    c0007ba2 <Phys::allocateContiguousPages(int)+0x4f>
c0007ba1:	fb                   	sti    
c0007ba2:	89 f8                	mov    eax,edi
c0007ba4:	5b                   	pop    ebx
c0007ba5:	5e                   	pop    esi
c0007ba6:	5f                   	pop    edi
c0007ba7:	c3                   	ret    
c0007ba8:	43                   	inc    ebx
c0007ba9:	39 f3                	cmp    ebx,esi
c0007bab:	75 b6                	jne    c0007b63 <Phys::allocateContiguousPages(int)+0x10>
c0007bad:	eb e5                	jmp    c0007b94 <Phys::allocateContiguousPages(int)+0x41>

c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007baf:	56                   	push   esi
c0007bb0:	53                   	push   ebx
c0007bb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007bb5:	39 1d 5c 04 02 c0    	cmp    DWORD PTR ds:0xc002045c,ebx
c0007bbb:	73 06                	jae    c0007bc3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007bbd:	89 1d 5c 04 02 c0    	mov    DWORD PTR ds:0xc002045c,ebx
c0007bc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bc7:	c1 eb 0c             	shr    ebx,0xc
c0007bca:	c1 e8 0c             	shr    eax,0xc
c0007bcd:	39 d8                	cmp    eax,ebx
c0007bcf:	73 13                	jae    c0007be4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007bd1:	6a 00                	push   0x0
c0007bd3:	8d 70 01             	lea    esi,[eax+0x1]
c0007bd6:	50                   	push   eax
c0007bd7:	e8 04 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007bdc:	5a                   	pop    edx
c0007bdd:	89 f0                	mov    eax,esi
c0007bdf:	59                   	pop    ecx
c0007be0:	39 f3                	cmp    ebx,esi
c0007be2:	75 ed                	jne    c0007bd1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007be4:	5b                   	pop    ebx
c0007be5:	5e                   	pop    esi
c0007be6:	c3                   	ret    

c0007be7 <Phys::physicalMemorySetup(unsigned int)>:
c0007be7:	55                   	push   ebp
c0007be8:	57                   	push   edi
c0007be9:	56                   	push   esi
c0007bea:	53                   	push   ebx
c0007beb:	31 db                	xor    ebx,ebx
c0007bed:	83 ec 40             	sub    esp,0x40
c0007bf0:	6a 10                	push   0x10
c0007bf2:	6a 00                	push   0x0
c0007bf4:	68 6c 04 02 c0       	push   0xc002046c
c0007bf9:	e8 d2 88 ff ff       	call   c00004d0 <memset>
c0007bfe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007c02:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007c07:	05 00 10 00 00       	add    eax,0x1000
c0007c0c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007c10:	5a                   	pop    edx
c0007c11:	59                   	pop    ecx
c0007c12:	50                   	push   eax
c0007c13:	68 0b d2 01 c0       	push   0xc001d20b
c0007c18:	e8 37 28 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0007c1d:	83 c4 10             	add    esp,0x10
c0007c20:	83 ec 08             	sub    esp,0x8
c0007c23:	6a 01                	push   0x1
c0007c25:	53                   	push   ebx
c0007c26:	43                   	inc    ebx
c0007c27:	e8 b4 fd ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007c2c:	83 c4 10             	add    esp,0x10
c0007c2f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007c35:	75 e9                	jne    c0007c20 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007c37:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007c3d:	66 85 c0             	test   ax,ax
c0007c40:	0f 84 97 01 00 00    	je     c0007ddd <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007c46:	89 c7                	mov    edi,eax
c0007c48:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007c50:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007c56:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007c5b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007c5f:	eb 15                	jmp    c0007c76 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007c61:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007c65:	83 c3 18             	add    ebx,0x18
c0007c68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007c6c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007c70:	0f 84 77 01 00 00    	je     c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007c76:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007c79:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007c7c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007c7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c83:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007c87:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007c89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007c8c:	01 f0                	add    eax,esi
c0007c8e:	55                   	push   ebp
c0007c8f:	11 fa                	adc    edx,edi
c0007c91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c95:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c9d:	50                   	push   eax
c0007c9e:	56                   	push   esi
c0007c9f:	68 a8 d1 01 c0       	push   0xc001d1a8
c0007ca4:	e8 ab 27 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0007ca9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007cad:	83 c4 10             	add    esp,0x10
c0007cb0:	09 f8                	or     eax,edi
c0007cb2:	0f 85 35 01 00 00    	jne    c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007cb8:	4d                   	dec    ebp
c0007cb9:	75 a6                	jne    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007cbb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007cbf:	ba 00 00 08 00       	mov    edx,0x80000
c0007cc4:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007cc8:	39 f2                	cmp    edx,esi
c0007cca:	89 c1                	mov    ecx,eax
c0007ccc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007cd4:	19 f9                	sbb    ecx,edi
c0007cd6:	0f 82 a7 00 00 00    	jb     c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cdc:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007ce0:	89 c1                	mov    ecx,eax
c0007ce2:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007ce6:	0f 83 97 00 00 00    	jae    c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cec:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007cf1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cf5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007cf9:	39 fa                	cmp    edx,edi
c0007cfb:	19 e8                	sbb    eax,ebp
c0007cfd:	0f 82 9a 01 00 00    	jb     c0007e9d <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007d03:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d07:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d0b:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007d11:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007d16:	83 d5 ff             	adc    ebp,0xffffffff
c0007d19:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007d1d:	31 c0                	xor    eax,eax
c0007d1f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007d23:	39 fa                	cmp    edx,edi
c0007d25:	89 c1                	mov    ecx,eax
c0007d27:	19 e9                	sbb    ecx,ebp
c0007d29:	0f 83 32 ff ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d2f:	be 00 00 08 00       	mov    esi,0x80000
c0007d34:	51                   	push   ecx
c0007d35:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007d39:	57                   	push   edi
c0007d3a:	56                   	push   esi
c0007d3b:	68 cc d1 01 c0       	push   0xc001d1cc
c0007d40:	e8 0f 27 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0007d45:	5d                   	pop    ebp
c0007d46:	58                   	pop    eax
c0007d47:	57                   	push   edi
c0007d48:	56                   	push   esi
c0007d49:	e8 61 fe ff ff       	call   c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007d4e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007d52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007d56:	83 c4 0c             	add    esp,0xc
c0007d59:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007d5d:	03 05 68 04 02 c0    	add    eax,DWORD PTR ds:0xc0020468
c0007d63:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007d6a:	a3 68 04 02 c0       	mov    ds:0xc0020468,eax
c0007d6f:	52                   	push   edx
c0007d70:	50                   	push   eax
c0007d71:	68 31 d2 01 c0       	push   0xc001d231
c0007d76:	e8 d9 26 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0007d7b:	83 c4 10             	add    esp,0x10
c0007d7e:	e9 de fe ff ff       	jmp    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d83:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007d87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007d8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007d8f:	39 ea                	cmp    edx,ebp
c0007d91:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007d95:	0f 82 c6 fe ff ff    	jb     c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d9b:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007da0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007da4:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007da8:	0f 83 b3 fe ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007dae:	39 ee                	cmp    esi,ebp
c0007db0:	89 f8                	mov    eax,edi
c0007db2:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007db6:	0f 83 78 ff ff ff    	jae    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007dbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007dc4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007dc8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007dcc:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007dd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dd4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007dd8:	e9 57 ff ff ff       	jmp    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007ddd:	83 ec 0c             	sub    esp,0xc
c0007de0:	68 23 d2 01 c0       	push   0xc001d223
c0007de5:	e8 e1 82 00 00       	call   c00100cb <KePanic(char const*)>
c0007dea:	83 c4 10             	add    esp,0x10
c0007ded:	83 ec 08             	sub    esp,0x8
c0007df0:	bb 60 00 00 00       	mov    ebx,0x60
c0007df5:	6a 00                	push   0x0
c0007df7:	6a 06                	push   0x6
c0007df9:	e8 e2 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007dfe:	58                   	pop    eax
c0007dff:	5a                   	pop    edx
c0007e00:	6a 00                	push   0x0
c0007e02:	6a 07                	push   0x7
c0007e04:	e8 d7 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e09:	83 05 68 04 02 c0 02 	add    DWORD PTR ds:0xc0020468,0x2
c0007e10:	83 c4 10             	add    esp,0x10
c0007e13:	83 ec 08             	sub    esp,0x8
c0007e16:	6a 00                	push   0x0
c0007e18:	53                   	push   ebx
c0007e19:	43                   	inc    ebx
c0007e1a:	e8 c1 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e1f:	83 c4 10             	add    esp,0x10
c0007e22:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007e28:	75 e9                	jne    c0007e13 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007e2a:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c0007e2f:	bb 40 01 00 00       	mov    ebx,0x140
c0007e34:	83 c0 20             	add    eax,0x20
c0007e37:	a3 68 04 02 c0       	mov    ds:0xc0020468,eax
c0007e3c:	eb 22                	jmp    c0007e60 <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007e3e:	83 ec 08             	sub    esp,0x8
c0007e41:	6a 00                	push   0x0
c0007e43:	53                   	push   ebx
c0007e44:	43                   	inc    ebx
c0007e45:	e8 96 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e4a:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c0007e4f:	83 c4 10             	add    esp,0x10
c0007e52:	40                   	inc    eax
c0007e53:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007e59:	a3 68 04 02 c0       	mov    ds:0xc0020468,eax
c0007e5e:	74 07                	je     c0007e67 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007e60:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007e65:	7e d7                	jle    c0007e3e <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007e67:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007e6c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007e71:	7f 22                	jg     c0007e95 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007e73:	83 ec 08             	sub    esp,0x8
c0007e76:	6a 00                	push   0x0
c0007e78:	53                   	push   ebx
c0007e79:	43                   	inc    ebx
c0007e7a:	e8 61 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e7f:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c0007e84:	83 c4 10             	add    esp,0x10
c0007e87:	40                   	inc    eax
c0007e88:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007e8e:	a3 68 04 02 c0       	mov    ds:0xc0020468,eax
c0007e93:	75 d7                	jne    c0007e6c <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007e95:	83 c4 3c             	add    esp,0x3c
c0007e98:	5b                   	pop    ebx
c0007e99:	5e                   	pop    esi
c0007e9a:	5f                   	pop    edi
c0007e9b:	5d                   	pop    ebp
c0007e9c:	c3                   	ret    
c0007e9d:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007ea5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007ead:	e9 51 fe ff ff       	jmp    c0007d03 <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007eb2 <Pipe::isAtty()>:
c0007eb2:	31 c0                	xor    eax,eax
c0007eb4:	c3                   	ret    
c0007eb5:	90                   	nop

c0007eb6 <Pipe::~Pipe()>:
c0007eb6:	83 ec 0c             	sub    esp,0xc
c0007eb9:	ba 90 d2 01 c0       	mov    edx,0xc001d290
c0007ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec2:	89 10                	mov    DWORD PTR [eax],edx
c0007ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	50                   	push   eax
c0007ecc:	e8 cf 10 00 00       	call   c0008fa0 <UnixFile::~UnixFile()>
c0007ed1:	83 c4 10             	add    esp,0x10
c0007ed4:	90                   	nop
c0007ed5:	83 c4 0c             	add    esp,0xc
c0007ed8:	c3                   	ret    
c0007ed9:	90                   	nop

c0007eda <Pipe::~Pipe()>:
c0007eda:	83 ec 0c             	sub    esp,0xc
c0007edd:	83 ec 0c             	sub    esp,0xc
c0007ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ee4:	e8 cd ff ff ff       	call   c0007eb6 <Pipe::~Pipe()>
c0007ee9:	83 c4 10             	add    esp,0x10
c0007eec:	83 ec 08             	sub    esp,0x8
c0007eef:	6a 20                	push   0x20
c0007ef1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ef5:	e8 64 24 00 00       	call   c000a35e <operator delete(void*, unsigned long)>
c0007efa:	83 c4 10             	add    esp,0x10
c0007efd:	83 c4 0c             	add    esp,0xc
c0007f00:	c3                   	ret    
c0007f01:	90                   	nop

c0007f02 <Pipe::write(unsigned long long, void*, int*)>:
c0007f02:	55                   	push   ebp
c0007f03:	57                   	push   edi
c0007f04:	56                   	push   esi
c0007f05:	53                   	push   ebx
c0007f06:	83 ec 1c             	sub    esp,0x1c
c0007f09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007f0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f11:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007f14:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f18:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f1b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007f1f:	89 d8                	mov    eax,ebx
c0007f21:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007f24:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f28:	89 d6                	mov    esi,edx
c0007f2a:	89 d7                	mov    edi,edx
c0007f2c:	c1 ff 1f             	sar    edi,0x1f
c0007f2f:	03 34 24             	add    esi,DWORD PTR [esp]
c0007f32:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007f36:	c1 f8 1f             	sar    eax,0x1f
c0007f39:	39 f3                	cmp    ebx,esi
c0007f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f43:	19 f8                	sbb    eax,edi
c0007f45:	b8 01 00 00 00       	mov    eax,0x1
c0007f4a:	72 6e                	jb     c0007fba <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0007f4c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0007f4f:	01 d0                	add    eax,edx
c0007f51:	99                   	cdq    
c0007f52:	f7 fb                	idiv   ebx
c0007f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f58:	29 d3                	sub    ebx,edx
c0007f5a:	89 d7                	mov    edi,edx
c0007f5c:	89 de                	mov    esi,ebx
c0007f5e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007f61:	c1 fb 1f             	sar    ebx,0x1f
c0007f64:	39 f2                	cmp    edx,esi
c0007f66:	19 d8                	sbb    eax,ebx
c0007f68:	b8 00 00 00 00       	mov    eax,0x0
c0007f6d:	72 04                	jb     c0007f73 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0007f6f:	89 d0                	mov    eax,edx
c0007f71:	29 f0                	sub    eax,esi
c0007f73:	89 d3                	mov    ebx,edx
c0007f75:	29 c3                	sub    ebx,eax
c0007f77:	74 0b                	je     c0007f84 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007f79:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007f7c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0007f80:	89 d9                	mov    ecx,ebx
c0007f82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f84:	85 c0                	test   eax,eax
c0007f86:	74 0d                	je     c0007f95 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007f88:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007f8c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007f8f:	89 de                	mov    esi,ebx
c0007f91:	89 c1                	mov    ecx,eax
c0007f93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f95:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007f98:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007f9d:	75 10                	jne    c0007faf <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007f9f:	83 ec 0c             	sub    esp,0xc
c0007fa2:	68 4d d2 01 c0       	push   0xc001d24d
c0007fa7:	e8 1f 81 00 00       	call   c00100cb <KePanic(char const*)>
c0007fac:	83 c4 10             	add    esp,0x10
c0007faf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007fb3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007fb6:	89 08                	mov    DWORD PTR [eax],ecx
c0007fb8:	31 c0                	xor    eax,eax
c0007fba:	83 c4 1c             	add    esp,0x1c
c0007fbd:	5b                   	pop    ebx
c0007fbe:	5e                   	pop    esi
c0007fbf:	5f                   	pop    edi
c0007fc0:	5d                   	pop    ebp
c0007fc1:	c3                   	ret    

c0007fc2 <Pipe::read(unsigned long long, void*, int*)>:
c0007fc2:	55                   	push   ebp
c0007fc3:	57                   	push   edi
c0007fc4:	56                   	push   esi
c0007fc5:	53                   	push   ebx
c0007fc6:	83 ec 1c             	sub    esp,0x1c
c0007fc9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007fcd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0007fd1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007fd5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0007fd8:	89 c8                	mov    eax,ecx
c0007fda:	99                   	cdq    
c0007fdb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0007fdf:	74 24                	je     c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe1:	39 f9                	cmp    ecx,edi
c0007fe3:	89 d1                	mov    ecx,edx
c0007fe5:	19 f1                	sbb    ecx,esi
c0007fe7:	73 1c                	jae    c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe9:	fa                   	cli    
c0007fea:	ff 05 e8 36 02 c0    	inc    DWORD PTR ds:0xc00236e8
c0007ff0:	e8 e7 b2 00 00       	call   c00132dc <schedule()>
c0007ff5:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0007ffa:	48                   	dec    eax
c0007ffb:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c0008000:	75 d3                	jne    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008002:	fb                   	sti    
c0008003:	eb d0                	jmp    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008005:	39 f8                	cmp    eax,edi
c0008007:	89 d1                	mov    ecx,edx
c0008009:	89 3c 24             	mov    DWORD PTR [esp],edi
c000800c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008010:	19 f1                	sbb    ecx,esi
c0008012:	73 07                	jae    c000801b <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008014:	89 04 24             	mov    DWORD PTR [esp],eax
c0008017:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000801b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000801e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008021:	29 f7                	sub    edi,esi
c0008023:	89 f8                	mov    eax,edi
c0008025:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008029:	99                   	cdq    
c000802a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000802d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008031:	19 d0                	sbb    eax,edx
c0008033:	73 07                	jae    c000803c <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008035:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000803c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000803f:	89 ea                	mov    edx,ebp
c0008041:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008045:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000804a:	74 0d                	je     c0008059 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000804c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000804f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008053:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008057:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008059:	85 d2                	test   edx,edx
c000805b:	74 11                	je     c000806e <Pipe::read(unsigned long long, void*, int*)+0xac>
c000805d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008061:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008064:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008068:	89 d1                	mov    ecx,edx
c000806a:	89 c7                	mov    edi,eax
c000806c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000806e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008071:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008074:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008077:	99                   	cdq    
c0008078:	89 f7                	mov    edi,esi
c000807a:	03 04 24             	add    eax,DWORD PTR [esp]
c000807d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008081:	c1 ff 1f             	sar    edi,0x1f
c0008084:	57                   	push   edi
c0008085:	56                   	push   esi
c0008086:	52                   	push   edx
c0008087:	50                   	push   eax
c0008088:	e8 53 3c 01 00       	call   c001bce0 <__umoddi3>
c000808d:	83 c4 10             	add    esp,0x10
c0008090:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008093:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008098:	75 10                	jne    c00080aa <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000809a:	83 ec 0c             	sub    esp,0xc
c000809d:	68 6a d2 01 c0       	push   0xc001d26a
c00080a2:	e8 24 80 00 00       	call   c00100cb <KePanic(char const*)>
c00080a7:	83 c4 10             	add    esp,0x10
c00080aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080ae:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00080b1:	89 10                	mov    DWORD PTR [eax],edx
c00080b3:	83 c4 1c             	add    esp,0x1c
c00080b6:	31 c0                	xor    eax,eax
c00080b8:	5b                   	pop    ebx
c00080b9:	5e                   	pop    esi
c00080ba:	5f                   	pop    edi
c00080bb:	5d                   	pop    ebp
c00080bc:	c3                   	ret    
c00080bd:	90                   	nop

c00080be <Pipe::Pipe(int)>:
c00080be:	83 ec 0c             	sub    esp,0xc
c00080c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080c5:	83 ec 08             	sub    esp,0x8
c00080c8:	6a 00                	push   0x0
c00080ca:	50                   	push   eax
c00080cb:	e8 ee 0c 00 00       	call   c0008dbe <UnixFile::UnixFile(int)>
c00080d0:	83 c4 10             	add    esp,0x10
c00080d3:	ba 90 d2 01 c0       	mov    edx,0xc001d290
c00080d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080dc:	89 10                	mov    DWORD PTR [eax],edx
c00080de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00080e6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00080e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080ed:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00080f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080f8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00080ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008103:	83 ec 0c             	sub    esp,0xc
c0008106:	50                   	push   eax
c0008107:	e8 ad f6 ff ff       	call   c00077b9 <malloc>
c000810c:	83 c4 10             	add    esp,0x10
c000810f:	89 c2                	mov    edx,eax
c0008111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008115:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000811c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008120:	90                   	nop
c0008121:	83 c4 0c             	add    esp,0xc
c0008124:	c3                   	ret    
c0008125:	90                   	nop

c0008126 <VgaText::isAtty()>:
c0008126:	b0 01                	mov    al,0x1
c0008128:	c3                   	ret    
c0008129:	90                   	nop

c000812a <VgaText::~VgaText()>:
c000812a:	83 ec 0c             	sub    esp,0xc
c000812d:	ba 18 d3 01 c0       	mov    edx,0xc001d318
c0008132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008136:	89 10                	mov    DWORD PTR [eax],edx
c0008138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000813c:	83 ec 0c             	sub    esp,0xc
c000813f:	50                   	push   eax
c0008140:	e8 5b 0e 00 00       	call   c0008fa0 <UnixFile::~UnixFile()>
c0008145:	83 c4 10             	add    esp,0x10
c0008148:	90                   	nop
c0008149:	83 c4 0c             	add    esp,0xc
c000814c:	c3                   	ret    
c000814d:	90                   	nop

c000814e <VgaText::~VgaText()>:
c000814e:	83 ec 0c             	sub    esp,0xc
c0008151:	83 ec 0c             	sub    esp,0xc
c0008154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008158:	e8 cd ff ff ff       	call   c000812a <VgaText::~VgaText()>
c000815d:	83 c4 10             	add    esp,0x10
c0008160:	83 ec 08             	sub    esp,0x8
c0008163:	68 34 01 00 00       	push   0x134
c0008168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000816c:	e8 ed 21 00 00       	call   c000a35e <operator delete(void*, unsigned long)>
c0008171:	83 c4 10             	add    esp,0x10
c0008174:	83 c4 0c             	add    esp,0xc
c0008177:	c3                   	ret    

c0008178 <VgaText::read(unsigned long long, void*, int*)>:
c0008178:	83 ec 10             	sub    esp,0x10
c000817b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000817f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008187:	e8 22 45 00 00       	call   c000c6ae <readKeyboard(VgaText*, char*, unsigned long)>
c000818c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008190:	89 02                	mov    DWORD PTR [edx],eax
c0008192:	31 c0                	xor    eax,eax
c0008194:	83 c4 1c             	add    esp,0x1c
c0008197:	c3                   	ret    

c0008198 <setTerminalScrollLock(bool)>:
c0008198:	c3                   	ret    

c0008199 <doTerminalCycle()>:
c0008199:	c3                   	ret    

c000819a <addToTerminalCycle(VgaText*)>:
c000819a:	c3                   	ret    

c000819b <scrollTerminalScrollLock(int)>:
c000819b:	c3                   	ret    

c000819c <VgaText::updateTitle()>:
c000819c:	c3                   	ret    
c000819d:	90                   	nop

c000819e <VgaText::load()>:
c000819e:	c3                   	ret    
c000819f:	90                   	nop

c00081a0 <VgaText::updateCursor()>:
c00081a0:	83 ec 14             	sub    esp,0x14
c00081a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00081a7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00081aa:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00081ad:	e8 06 dd 00 00       	call   c0015eb8 <HalConsoleCursorUpdate(int, int)>
c00081b2:	83 c4 1c             	add    esp,0x1c
c00081b5:	c3                   	ret    

c00081b6 <VgaText::doANSI_SGR(int)>:
c00081b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00081ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081be:	85 d2                	test   edx,edx
c00081c0:	75 0b                	jne    c00081cd <VgaText::doANSI_SGR(int)+0x17>
c00081c2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00081c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00081c8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00081cb:	eb 59                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081cd:	83 fa 07             	cmp    edx,0x7
c00081d0:	75 0b                	jne    c00081dd <VgaText::doANSI_SGR(int)+0x27>
c00081d2:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00081d5:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00081d8:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00081db:	eb 49                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081dd:	83 fa 1b             	cmp    edx,0x1b
c00081e0:	74 e0                	je     c00081c2 <VgaText::doANSI_SGR(int)+0xc>
c00081e2:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00081e5:	83 f9 07             	cmp    ecx,0x7
c00081e8:	77 09                	ja     c00081f3 <VgaText::doANSI_SGR(int)+0x3d>
c00081ea:	8b 14 8d 00 f1 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0f00]
c00081f1:	eb 20                	jmp    c0008213 <VgaText::doANSI_SGR(int)+0x5d>
c00081f3:	8d 4a d8             	lea    ecx,[edx-0x28]
c00081f6:	83 f9 07             	cmp    ecx,0x7
c00081f9:	77 09                	ja     c0008204 <VgaText::doANSI_SGR(int)+0x4e>
c00081fb:	8b 14 8d 00 f1 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0f00]
c0008202:	eb 22                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c0008204:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008207:	83 f9 07             	cmp    ecx,0x7
c000820a:	77 0b                	ja     c0008217 <VgaText::doANSI_SGR(int)+0x61>
c000820c:	8b 14 95 b8 ef 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe1048]
c0008213:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008216:	c3                   	ret    
c0008217:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000821a:	83 f9 07             	cmp    ecx,0x7
c000821d:	77 0a                	ja     c0008229 <VgaText::doANSI_SGR(int)+0x73>
c000821f:	8b 14 95 90 ef 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe1070]
c0008226:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008229:	c3                   	ret    

c000822a <VgaText::setDefaultBgColour(VgaColour)>:
c000822a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000822e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008232:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008235:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008238:	c3                   	ret    
c0008239:	90                   	nop

c000823a <VgaText::setDefaultFgColour(VgaColour)>:
c000823a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000823e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008242:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008245:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000824a:	53                   	push   ebx
c000824b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000824f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008253:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008257:	51                   	push   ecx
c0008258:	e8 cd ff ff ff       	call   c000822a <VgaText::setDefaultBgColour(VgaColour)>
c000825d:	58                   	pop    eax
c000825e:	5a                   	pop    edx
c000825f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008263:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008267:	5b                   	pop    ebx
c0008268:	eb d0                	jmp    c000823a <VgaText::setDefaultFgColour(VgaColour)>

c000826a <VgaText::setTitleTextColour(VgaColour)>:
c000826a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000826e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008272:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008275:	c3                   	ret    

c0008276 <VgaText::setTitleColour(VgaColour)>:
c0008276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000827a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000827e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008281:	c3                   	ret    

c0008282 <VgaText::setTitle(char*)>:
c0008282:	c3                   	ret    
c0008283:	90                   	nop

c0008284 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008284:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008288:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000828d:	83 e0 0f             	and    eax,0xf
c0008290:	c1 e2 04             	shl    edx,0x4
c0008293:	09 d0                	or     eax,edx
c0008295:	c3                   	ret    

c0008296 <VgaText::scrollScreen()>:
c0008296:	55                   	push   ebp
c0008297:	b9 01 00 00 00       	mov    ecx,0x1
c000829c:	57                   	push   edi
c000829d:	56                   	push   esi
c000829e:	53                   	push   ebx
c000829f:	83 ec 0c             	sub    esp,0xc
c00082a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082a6:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00082ac:	31 ff                	xor    edi,edi
c00082ae:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00082b1:	83 f9 18             	cmp    ecx,0x18
c00082b4:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00082b7:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00082be:	75 27                	jne    c00082e7 <VgaText::scrollScreen()+0x51>
c00082c0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00082c3:	01 f5                	add    ebp,esi
c00082c5:	f7 c7 01 00 00 00    	test   edi,0x1
c00082cb:	74 16                	je     c00082e3 <VgaText::scrollScreen()+0x4d>
c00082cd:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00082d1:	50                   	push   eax
c00082d2:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00082d6:	50                   	push   eax
c00082d7:	e8 a8 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00082dc:	5a                   	pop    edx
c00082dd:	5a                   	pop    edx
c00082de:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00082e1:	eb 04                	jmp    c00082e7 <VgaText::scrollScreen()+0x51>
c00082e3:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00082e7:	47                   	inc    edi
c00082e8:	46                   	inc    esi
c00082e9:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00082ef:	75 bd                	jne    c00082ae <VgaText::scrollScreen()+0x18>
c00082f1:	41                   	inc    ecx
c00082f2:	83 f9 19             	cmp    ecx,0x19
c00082f5:	75 af                	jne    c00082a6 <VgaText::scrollScreen()+0x10>
c00082f7:	39 1d 84 04 02 c0    	cmp    DWORD PTR ds:0xc0020484,ebx
c00082fd:	75 1f                	jne    c000831e <VgaText::scrollScreen()+0x88>
c00082ff:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008303:	74 05                	je     c000830a <VgaText::scrollScreen()+0x74>
c0008305:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008308:	eb 14                	jmp    c000831e <VgaText::scrollScreen()+0x88>
c000830a:	50                   	push   eax
c000830b:	50                   	push   eax
c000830c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008310:	50                   	push   eax
c0008311:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008315:	50                   	push   eax
c0008316:	e8 29 da 00 00       	call   c0015d44 <HalConsoleScroll(int, int)>
c000831b:	83 c4 10             	add    esp,0x10
c000831e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008322:	83 c4 0c             	add    esp,0xc
c0008325:	5b                   	pop    ebx
c0008326:	5e                   	pop    esi
c0008327:	5f                   	pop    edi
c0008328:	5d                   	pop    ebp
c0008329:	e9 72 fe ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c000832e <VgaText::combineCharAndColour(char, unsigned char)>:
c000832e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008333:	c1 e0 08             	shl    eax,0x8
c0008336:	89 c2                	mov    edx,eax
c0008338:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000833d:	09 d0                	or     eax,edx
c000833f:	c3                   	ret    

c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008340:	55                   	push   ebp
c0008341:	57                   	push   edi
c0008342:	56                   	push   esi
c0008343:	53                   	push   ebx
c0008344:	83 ec 1c             	sub    esp,0x1c
c0008347:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000834b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000834f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008353:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008357:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000835b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000835f:	0f b6 c3             	movzx  eax,bl
c0008362:	50                   	push   eax
c0008363:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008368:	50                   	push   eax
c0008369:	e8 16 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c000836e:	5a                   	pop    edx
c000836f:	0f b6 c0             	movzx  eax,al
c0008372:	59                   	pop    ecx
c0008373:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008378:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000837c:	50                   	push   eax
c000837d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008381:	e8 a8 ff ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c0008386:	5a                   	pop    edx
c0008387:	66 6b d7 50          	imul   dx,di,0x50
c000838b:	59                   	pop    ecx
c000838c:	01 f2                	add    edx,esi
c000838e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008391:	0f b7 d2             	movzx  edx,dx
c0008394:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008398:	39 2d 84 04 02 c0    	cmp    DWORD PTR ds:0xc0020484,ebp
c000839e:	75 28                	jne    c00083c8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00083a8:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00083ac:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00083b0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00083bc:	83 c4 1c             	add    esp,0x1c
c00083bf:	5b                   	pop    ebx
c00083c0:	5e                   	pop    esi
c00083c1:	5f                   	pop    edi
c00083c2:	5d                   	pop    ebp
c00083c3:	e9 84 da 00 00       	jmp    c0015e4c <HalConsoleWriteCharacter(char, int, int, int, int)>
c00083c8:	83 c4 1c             	add    esp,0x1c
c00083cb:	5b                   	pop    ebx
c00083cc:	5e                   	pop    esi
c00083cd:	5f                   	pop    edi
c00083ce:	5d                   	pop    ebp
c00083cf:	c3                   	ret    

c00083d0 <VgaText::getCursorX()>:
c00083d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00083d7:	c3                   	ret    

c00083d8 <VgaText::getCursorY()>:
c00083d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083dc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00083df:	c3                   	ret    

c00083e0 <VgaText::setCursor(int, int)>:
c00083e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00083e8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00083eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083ef:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00083f2:	e9 a9 fd ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c00083f7 <setActiveTerminal(VgaText*)>:
c00083f7:	53                   	push   ebx
c00083f8:	83 ec 08             	sub    esp,0x8
c00083fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00083ff:	85 db                	test   ebx,ebx
c0008401:	75 11                	jne    c0008414 <setActiveTerminal(VgaText*)+0x1d>
c0008403:	c7 44 24 10 a4 d2 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d2a4
c000840b:	83 c4 08             	add    esp,0x8
c000840e:	5b                   	pop    ebx
c000840f:	e9 b7 7c 00 00       	jmp    c00100cb <KePanic(char const*)>
c0008414:	a1 84 04 02 c0       	mov    eax,ds:0xc0020484
c0008419:	85 c0                	test   eax,eax
c000841b:	74 0c                	je     c0008429 <setActiveTerminal(VgaText*)+0x32>
c000841d:	83 ec 0c             	sub    esp,0xc
c0008420:	50                   	push   eax
c0008421:	e8 7a fd ff ff       	call   c00081a0 <VgaText::updateCursor()>
c0008426:	83 c4 10             	add    esp,0x10
c0008429:	89 1d 84 04 02 c0    	mov    DWORD PTR ds:0xc0020484,ebx
c000842f:	50                   	push   eax
c0008430:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008433:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008436:	53                   	push   ebx
c0008437:	e8 a4 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c000843c:	83 c4 18             	add    esp,0x18
c000843f:	5b                   	pop    ebx
c0008440:	c3                   	ret    
c0008441:	90                   	nop

c0008442 <VgaText::clearScreen()>:
c0008442:	57                   	push   edi
c0008443:	56                   	push   esi
c0008444:	31 f6                	xor    esi,esi
c0008446:	53                   	push   ebx
c0008447:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000844b:	52                   	push   edx
c000844c:	6a 00                	push   0x0
c000844e:	6a 00                	push   0x0
c0008450:	53                   	push   ebx
c0008451:	e8 8a ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c0008456:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000845d:	83 c4 10             	add    esp,0x10
c0008460:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008463:	7e 20                	jle    c0008485 <VgaText::clearScreen()+0x43>
c0008465:	31 ff                	xor    edi,edi
c0008467:	50                   	push   eax
c0008468:	50                   	push   eax
c0008469:	56                   	push   esi
c000846a:	57                   	push   edi
c000846b:	47                   	inc    edi
c000846c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000846f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008472:	6a 20                	push   0x20
c0008474:	53                   	push   ebx
c0008475:	e8 c6 fe ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000847a:	83 c4 20             	add    esp,0x20
c000847d:	83 ff 50             	cmp    edi,0x50
c0008480:	75 e5                	jne    c0008467 <VgaText::clearScreen()+0x25>
c0008482:	46                   	inc    esi
c0008483:	eb db                	jmp    c0008460 <VgaText::clearScreen()+0x1e>
c0008485:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000848c:	5b                   	pop    ebx
c000848d:	5e                   	pop    esi
c000848e:	5f                   	pop    edi
c000848f:	c3                   	ret    

c0008490 <VgaText::setCursorX(int)>:
c0008490:	83 ec 10             	sub    esp,0x10
c0008493:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008497:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	50                   	push   eax
c000849f:	e8 3c ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084a4:	83 c4 1c             	add    esp,0x1c
c00084a7:	c3                   	ret    

c00084a8 <VgaText::setCursorY(int)>:
c00084a8:	83 ec 10             	sub    esp,0x10
c00084ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084b3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00084b6:	50                   	push   eax
c00084b7:	e8 24 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084bc:	83 c4 1c             	add    esp,0x1c
c00084bf:	c3                   	ret    

c00084c0 <VgaText::incrementCursor(bool)>:
c00084c0:	56                   	push   esi
c00084c1:	53                   	push   ebx
c00084c2:	51                   	push   ecx
c00084c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00084ce:	40                   	inc    eax
c00084cf:	83 f8 50             	cmp    eax,0x50
c00084d2:	74 05                	je     c00084d9 <VgaText::incrementCursor(bool)+0x19>
c00084d4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00084d7:	eb 24                	jmp    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00084dc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00084e3:	8d 50 01             	lea    edx,[eax+0x1]
c00084e6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00084e9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00084ec:	75 0f                	jne    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084ee:	83 ec 0c             	sub    esp,0xc
c00084f1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00084f4:	53                   	push   ebx
c00084f5:	e8 9c fd ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00084fa:	83 c4 10             	add    esp,0x10
c00084fd:	89 f0                	mov    eax,esi
c00084ff:	84 c0                	test   al,al
c0008501:	74 0c                	je     c000850f <VgaText::incrementCursor(bool)+0x4f>
c0008503:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008507:	5a                   	pop    edx
c0008508:	5b                   	pop    ebx
c0008509:	5e                   	pop    esi
c000850a:	e9 91 fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c000850f:	58                   	pop    eax
c0008510:	5b                   	pop    ebx
c0008511:	5e                   	pop    esi
c0008512:	c3                   	ret    
c0008513:	90                   	nop

c0008514 <VgaText::decrementCursor(bool)>:
c0008514:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008518:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000851c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000851f:	85 c0                	test   eax,eax
c0008521:	74 04                	je     c0008527 <VgaText::decrementCursor(bool)+0x13>
c0008523:	48                   	dec    eax
c0008524:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008527:	84 c9                	test   cl,cl
c0008529:	74 09                	je     c0008534 <VgaText::decrementCursor(bool)+0x20>
c000852b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000852f:	e9 6c fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c0008534:	c3                   	ret    
c0008535:	90                   	nop

c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008536:	53                   	push   ebx
c0008537:	83 ec 08             	sub    esp,0x8
c000853a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000853e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008542:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008546:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000854a:	3c 07                	cmp    al,0x7
c000854c:	75 21                	jne    c000856f <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000854e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008556:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000855e:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008566:	83 c4 08             	add    esp,0x8
c0008569:	5b                   	pop    ebx
c000856a:	e9 3c 2d 00 00       	jmp    c000b2ab <Krnl::beep(int, int, bool)>
c000856f:	3c 0d                	cmp    al,0xd
c0008571:	75 09                	jne    c000857c <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008573:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000857a:	eb 2c                	jmp    c00085a8 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000857c:	3c 0a                	cmp    al,0xa
c000857e:	75 31                	jne    c00085b1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008580:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008583:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000858a:	8d 50 01             	lea    edx,[eax+0x1]
c000858d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008590:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008593:	75 0f                	jne    c00085a4 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008595:	83 ec 0c             	sub    esp,0xc
c0008598:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000859b:	53                   	push   ebx
c000859c:	e8 f5 fc ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00085a1:	83 c4 10             	add    esp,0x10
c00085a4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085a8:	83 c4 08             	add    esp,0x8
c00085ab:	5b                   	pop    ebx
c00085ac:	e9 ef fb ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c00085b1:	3c 08                	cmp    al,0x8
c00085b3:	75 25                	jne    c00085da <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c00085b5:	50                   	push   eax
c00085b6:	50                   	push   eax
c00085b7:	6a 01                	push   0x1
c00085b9:	53                   	push   ebx
c00085ba:	e8 55 ff ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c00085bf:	5a                   	pop    edx
c00085c0:	59                   	pop    ecx
c00085c1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085c4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085c7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00085ca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00085cd:	6a 20                	push   0x20
c00085cf:	53                   	push   ebx
c00085d0:	e8 6b fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085d5:	83 c4 28             	add    esp,0x28
c00085d8:	5b                   	pop    ebx
c00085d9:	c3                   	ret    
c00085da:	83 ec 08             	sub    esp,0x8
c00085dd:	0f be c0             	movsx  eax,al
c00085e0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085e6:	51                   	push   ecx
c00085e7:	52                   	push   edx
c00085e8:	50                   	push   eax
c00085e9:	53                   	push   ebx
c00085ea:	e8 51 fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085ef:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00085f3:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00085fb:	83 c4 28             	add    esp,0x28
c00085fe:	5b                   	pop    ebx
c00085ff:	e9 bc fe ff ff       	jmp    c00084c0 <VgaText::incrementCursor(bool)>

c0008604 <VgaText::putchar(char)>:
c0008604:	56                   	push   esi
c0008605:	53                   	push   ebx
c0008606:	83 ec 14             	sub    esp,0x14
c0008609:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000860d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008611:	3c 5b                	cmp    al,0x5b
c0008613:	75 18                	jne    c000862d <VgaText::putchar(char)+0x29>
c0008615:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008619:	74 1f                	je     c000863a <VgaText::putchar(char)+0x36>
c000861b:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008621:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008628:	e9 bd 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000862d:	3c 1b                	cmp    al,0x1b
c000862f:	75 09                	jne    c000863a <VgaText::putchar(char)+0x36>
c0008631:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008635:	e9 b0 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000863a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000863d:	84 c9                	test   cl,cl
c000863f:	0f 84 92 00 00 00    	je     c00086d7 <VgaText::putchar(char)+0xd3>
c0008645:	8d 50 c0             	lea    edx,[eax-0x40]
c0008648:	80 fa 3e             	cmp    dl,0x3e
c000864b:	77 76                	ja     c00086c3 <VgaText::putchar(char)+0xbf>
c000864d:	3c 6d                	cmp    al,0x6d
c000864f:	75 47                	jne    c0008698 <VgaText::putchar(char)+0x94>
c0008651:	31 f6                	xor    esi,esi
c0008653:	31 d2                	xor    edx,edx
c0008655:	31 c0                	xor    eax,eax
c0008657:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000865a:	7e 2d                	jle    c0008689 <VgaText::putchar(char)+0x85>
c000865c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008661:	80 fa 3b             	cmp    dl,0x3b
c0008664:	75 17                	jne    c000867d <VgaText::putchar(char)+0x79>
c0008666:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000866a:	50                   	push   eax
c000866b:	53                   	push   ebx
c000866c:	e8 45 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008671:	59                   	pop    ecx
c0008672:	31 d2                	xor    edx,edx
c0008674:	58                   	pop    eax
c0008675:	31 c0                	xor    eax,eax
c0008677:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000867b:	eb 09                	jmp    c0008686 <VgaText::putchar(char)+0x82>
c000867d:	6b c0 0a             	imul   eax,eax,0xa
c0008680:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008684:	88 ca                	mov    dl,cl
c0008686:	46                   	inc    esi
c0008687:	eb ce                	jmp    c0008657 <VgaText::putchar(char)+0x53>
c0008689:	84 d2                	test   dl,dl
c000868b:	74 2e                	je     c00086bb <VgaText::putchar(char)+0xb7>
c000868d:	50                   	push   eax
c000868e:	53                   	push   ebx
c000868f:	e8 22 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008694:	58                   	pop    eax
c0008695:	5a                   	pop    edx
c0008696:	eb 23                	jmp    c00086bb <VgaText::putchar(char)+0xb7>
c0008698:	3c 4a                	cmp    al,0x4a
c000869a:	75 1f                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c000869c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00086a0:	75 19                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c00086a2:	83 ec 0c             	sub    esp,0xc
c00086a5:	53                   	push   ebx
c00086a6:	e8 97 fd ff ff       	call   c0008442 <VgaText::clearScreen()>
c00086ab:	83 c4 0c             	add    esp,0xc
c00086ae:	6a 00                	push   0x0
c00086b0:	6a 00                	push   0x0
c00086b2:	53                   	push   ebx
c00086b3:	e8 28 fd ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00086b8:	83 c4 10             	add    esp,0x10
c00086bb:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00086c1:	eb 27                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086c3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00086c6:	83 fa 0e             	cmp    edx,0xe
c00086c9:	7f 1f                	jg     c00086ea <VgaText::putchar(char)+0xe6>
c00086cb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00086ce:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00086d1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00086d5:	eb 13                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086d7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086da:	0f be c0             	movsx  eax,al
c00086dd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00086e0:	50                   	push   eax
c00086e1:	53                   	push   ebx
c00086e2:	e8 4f fe ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c00086e7:	83 c4 10             	add    esp,0x10
c00086ea:	83 c4 14             	add    esp,0x14
c00086ed:	5b                   	pop    ebx
c00086ee:	5e                   	pop    esi
c00086ef:	c3                   	ret    

c00086f0 <VgaText::putx(unsigned int)>:
c00086f0:	57                   	push   edi
c00086f1:	b9 11 00 00 00       	mov    ecx,0x11
c00086f6:	56                   	push   esi
c00086f7:	be b2 d2 01 c0       	mov    esi,0xc001d2b2
c00086fc:	53                   	push   ebx
c00086fd:	83 ec 20             	sub    esp,0x20
c0008700:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008704:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008708:	fc                   	cld    
c0008709:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000870b:	be 08 00 00 00       	mov    esi,0x8
c0008710:	50                   	push   eax
c0008711:	50                   	push   eax
c0008712:	89 d8                	mov    eax,ebx
c0008714:	c1 e3 04             	shl    ebx,0x4
c0008717:	c1 e8 1c             	shr    eax,0x1c
c000871a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000871f:	50                   	push   eax
c0008720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008724:	e8 db fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008729:	83 c4 10             	add    esp,0x10
c000872c:	4e                   	dec    esi
c000872d:	75 e1                	jne    c0008710 <VgaText::putx(unsigned int)+0x20>
c000872f:	83 c4 20             	add    esp,0x20
c0008732:	5b                   	pop    ebx
c0008733:	5e                   	pop    esi
c0008734:	5f                   	pop    edi
c0008735:	c3                   	ret    

c0008736 <VgaText::puts(char const*)>:
c0008736:	53                   	push   ebx
c0008737:	83 ec 08             	sub    esp,0x8
c000873a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000873e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008741:	84 c0                	test   al,al
c0008743:	74 12                	je     c0008757 <VgaText::puts(char const*)+0x21>
c0008745:	43                   	inc    ebx
c0008746:	51                   	push   ecx
c0008747:	51                   	push   ecx
c0008748:	50                   	push   eax
c0008749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000874d:	e8 b2 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008752:	83 c4 10             	add    esp,0x10
c0008755:	eb e7                	jmp    c000873e <VgaText::puts(char const*)+0x8>
c0008757:	83 c4 08             	add    esp,0x8
c000875a:	5b                   	pop    ebx
c000875b:	c3                   	ret    

c000875c <VgaText::write(unsigned long long, void*, int*)>:
c000875c:	55                   	push   ebp
c000875d:	57                   	push   edi
c000875e:	56                   	push   esi
c000875f:	53                   	push   ebx
c0008760:	83 ec 0c             	sub    esp,0xc
c0008763:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008767:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000876b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000876f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008776:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008779:	39 eb                	cmp    ebx,ebp
c000877b:	74 13                	je     c0008790 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000877d:	43                   	inc    ebx
c000877e:	50                   	push   eax
c000877f:	50                   	push   eax
c0008780:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008784:	50                   	push   eax
c0008785:	56                   	push   esi
c0008786:	e8 79 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c000878b:	83 c4 10             	add    esp,0x10
c000878e:	eb e9                	jmp    c0008779 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008790:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000879b:	89 38                	mov    DWORD PTR [eax],edi
c000879d:	83 c4 0c             	add    esp,0xc
c00087a0:	31 c0                	xor    eax,eax
c00087a2:	5b                   	pop    ebx
c00087a3:	5e                   	pop    esi
c00087a4:	5f                   	pop    edi
c00087a5:	5d                   	pop    ebp
c00087a6:	c3                   	ret    
c00087a7:	90                   	nop

c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00087a8:	55                   	push   ebp
c00087a9:	57                   	push   edi
c00087aa:	56                   	push   esi
c00087ab:	53                   	push   ebx
c00087ac:	83 ec 0c             	sub    esp,0xc
c00087af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00087b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	50                   	push   eax
c00087c0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087c5:	50                   	push   eax
c00087c6:	e8 b9 fa ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00087cb:	5a                   	pop    edx
c00087cc:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00087d1:	59                   	pop    ecx
c00087d2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00087d5:	89 c5                	mov    ebp,eax
c00087d7:	0f b7 f6             	movzx  esi,si
c00087da:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00087de:	01 f6                	add    esi,esi
c00087e0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087e3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00087e6:	84 c0                	test   al,al
c00087e8:	0f 84 f4 00 00 00    	je     c00088e2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00087ee:	3c 0d                	cmp    al,0xd
c00087f0:	75 0c                	jne    c00087fe <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c00087f2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00087f9:	e9 de 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00087fe:	3c 0a                	cmp    al,0xa
c0008800:	75 45                	jne    c0008847 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008802:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008805:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000880c:	8d 48 01             	lea    ecx,[eax+0x1]
c000880f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008812:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008815:	75 0f                	jne    c0008826 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008817:	83 ec 0c             	sub    esp,0xc
c000881a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000881d:	53                   	push   ebx
c000881e:	e8 73 fa ff ff       	call   c0008296 <VgaText::scrollScreen()>
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	83 ec 0c             	sub    esp,0xc
c0008829:	53                   	push   ebx
c000882a:	e8 71 f9 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c000882f:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008834:	83 c4 10             	add    esp,0x10
c0008837:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000883a:	0f b7 f6             	movzx  esi,si
c000883d:	01 f6                	add    esi,esi
c000883f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008842:	e9 95 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008847:	3c 08                	cmp    al,0x8
c0008849:	75 35                	jne    c0008880 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c000884b:	51                   	push   ecx
c000884c:	51                   	push   ecx
c000884d:	6a 01                	push   0x1
c000884f:	53                   	push   ebx
c0008850:	e8 bf fc ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c0008855:	5e                   	pop    esi
c0008856:	58                   	pop    eax
c0008857:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000885a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000885d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008860:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008863:	6a 20                	push   0x20
c0008865:	53                   	push   ebx
c0008866:	e8 d5 fa ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000886b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008870:	83 c4 20             	add    esp,0x20
c0008873:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008876:	0f b7 f6             	movzx  esi,si
c0008879:	01 f6                	add    esi,esi
c000887b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000887e:	eb 5c                	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008880:	52                   	push   edx
c0008881:	52                   	push   edx
c0008882:	89 ea                	mov    edx,ebp
c0008884:	0f b6 ca             	movzx  ecx,dl
c0008887:	51                   	push   ecx
c0008888:	50                   	push   eax
c0008889:	e8 a0 fa ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c000888e:	83 c4 10             	add    esp,0x10
c0008891:	66 89 06             	mov    WORD PTR [esi],ax
c0008894:	39 1d 84 04 02 c0    	cmp    DWORD PTR ds:0xc0020484,ebx
c000889a:	75 1d                	jne    c00088b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c000889c:	83 ec 0c             	sub    esp,0xc
c000889f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088a2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088a5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088a9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088ad:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00088b0:	50                   	push   eax
c00088b1:	e8 96 d5 00 00       	call   c0015e4c <HalConsoleWriteCharacter(char, int, int, int, int)>
c00088b6:	83 c4 20             	add    esp,0x20
c00088b9:	83 c6 02             	add    esi,0x2
c00088bc:	50                   	push   eax
c00088bd:	50                   	push   eax
c00088be:	6a 00                	push   0x0
c00088c0:	53                   	push   ebx
c00088c1:	e8 fa fb ff ff       	call   c00084c0 <VgaText::incrementCursor(bool)>
c00088c6:	83 c4 10             	add    esp,0x10
c00088c9:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00088cd:	75 0d                	jne    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088cf:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088d4:	0f b7 f6             	movzx  esi,si
c00088d7:	01 f6                	add    esi,esi
c00088d9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088dc:	47                   	inc    edi
c00088dd:	e9 01 ff ff ff       	jmp    c00087e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c00088e2:	83 ec 0c             	sub    esp,0xc
c00088e5:	53                   	push   ebx
c00088e6:	e8 b5 f8 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c00088eb:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00088f2:	83 c4 1c             	add    esp,0x1c
c00088f5:	5b                   	pop    ebx
c00088f6:	5e                   	pop    esi
c00088f7:	5f                   	pop    edi
c00088f8:	5d                   	pop    ebp
c00088f9:	c3                   	ret    

c00088fa <VgaText::VgaText(char const*)>:
c00088fa:	56                   	push   esi
c00088fb:	53                   	push   ebx
c00088fc:	83 ec 04             	sub    esp,0x4
c00088ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008903:	83 ec 08             	sub    esp,0x8
c0008906:	6a 00                	push   0x0
c0008908:	50                   	push   eax
c0008909:	e8 b0 04 00 00       	call   c0008dbe <UnixFile::UnixFile(int)>
c000890e:	83 c4 10             	add    esp,0x10
c0008911:	ba 18 d3 01 c0       	mov    edx,0xc001d318
c0008916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000891a:	89 10                	mov    DWORD PTR [eax],edx
c000891c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008920:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008936:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000893a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000893e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008946:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000894d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008951:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000895c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008967:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000896e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008972:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008979:	83 ec 0c             	sub    esp,0xc
c000897c:	6a 01                	push   0x1
c000897e:	e8 7e 08 00 00       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c0008983:	83 c4 10             	add    esp,0x10
c0008986:	89 c2                	mov    edx,eax
c0008988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000898f:	8b 1d 30 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020530
c0008995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008999:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000899c:	89 c6                	mov    esi,eax
c000899e:	e8 f2 f0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00089a3:	68 05 0c 00 00       	push   0xc05
c00089a8:	56                   	push   esi
c00089a9:	50                   	push   eax
c00089aa:	53                   	push   ebx
c00089ab:	e8 e6 0e 00 00       	call   c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>
c00089b0:	83 c4 10             	add    esp,0x10
c00089b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089ba:	83 ec 04             	sub    esp,0x4
c00089bd:	68 a0 0f 00 00       	push   0xfa0
c00089c2:	6a 00                	push   0x0
c00089c4:	50                   	push   eax
c00089c5:	e8 06 7b ff ff       	call   c00004d0 <memset>
c00089ca:	83 c4 10             	add    esp,0x10
c00089cd:	83 ec 04             	sub    esp,0x4
c00089d0:	6a 00                	push   0x0
c00089d2:	6a 07                	push   0x7
c00089d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089d8:	e8 6d f8 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00089dd:	83 c4 10             	add    esp,0x10
c00089e0:	83 ec 04             	sub    esp,0x4
c00089e3:	6a 00                	push   0x0
c00089e5:	6a 00                	push   0x0
c00089e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089eb:	e8 f0 f9 ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	83 ec 0c             	sub    esp,0xc
c00089f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089fa:	e8 43 fa ff ff       	call   c0008442 <VgaText::clearScreen()>
c00089ff:	83 c4 10             	add    esp,0x10
c0008a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a06:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0e:	05 82 00 00 00       	add    eax,0x82
c0008a13:	83 ec 04             	sub    esp,0x4
c0008a16:	6a 30                	push   0x30
c0008a18:	6a 00                	push   0x0
c0008a1a:	50                   	push   eax
c0008a1b:	e8 b0 7a ff ff       	call   c00004d0 <memset>
c0008a20:	83 c4 10             	add    esp,0x10
c0008a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a27:	05 b2 00 00 00       	add    eax,0xb2
c0008a2c:	83 ec 04             	sub    esp,0x4
c0008a2f:	68 80 00 00 00       	push   0x80
c0008a34:	6a 00                	push   0x0
c0008a36:	50                   	push   eax
c0008a37:	e8 94 7a ff ff       	call   c00004d0 <memset>
c0008a3c:	83 c4 10             	add    esp,0x10
c0008a3f:	90                   	nop
c0008a40:	83 c4 04             	add    esp,0x4
c0008a43:	5b                   	pop    ebx
c0008a44:	5e                   	pop    esi
c0008a45:	c3                   	ret    

c0008a46 <VgaText::receiveKey(unsigned char)>:
c0008a46:	57                   	push   edi
c0008a47:	56                   	push   esi
c0008a48:	53                   	push   ebx
c0008a49:	83 ec 10             	sub    esp,0x10
c0008a4c:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0008a50:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008a54:	84 db                	test   bl,bl
c0008a56:	0f 84 ba 00 00 00    	je     c0008b16 <VgaText::receiveKey(unsigned char)+0xd0>
c0008a5c:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c0008a62:	80 fb 08             	cmp    bl,0x8
c0008a65:	75 2c                	jne    c0008a93 <VgaText::receiveKey(unsigned char)+0x4d>
c0008a67:	83 ec 0c             	sub    esp,0xc
c0008a6a:	57                   	push   edi
c0008a6b:	e8 d0 7a ff ff       	call   c0000540 <strlen>
c0008a70:	83 c4 10             	add    esp,0x10
c0008a73:	85 c0                	test   eax,eax
c0008a75:	74 41                	je     c0008ab8 <VgaText::receiveKey(unsigned char)+0x72>
c0008a77:	50                   	push   eax
c0008a78:	50                   	push   eax
c0008a79:	6a 08                	push   0x8
c0008a7b:	56                   	push   esi
c0008a7c:	e8 83 fb ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008a81:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008a84:	e8 b7 7a ff ff       	call   c0000540 <strlen>
c0008a89:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c0008a91:	eb 22                	jmp    c0008ab5 <VgaText::receiveKey(unsigned char)+0x6f>
c0008a93:	0f be c3             	movsx  eax,bl
c0008a96:	52                   	push   edx
c0008a97:	52                   	push   edx
c0008a98:	50                   	push   eax
c0008a99:	56                   	push   esi
c0008a9a:	e8 65 fb ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008a9f:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0008aa3:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008aa8:	59                   	pop    ecx
c0008aa9:	58                   	pop    eax
c0008aaa:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008aae:	50                   	push   eax
c0008aaf:	57                   	push   edi
c0008ab0:	e8 0b 7d ff ff       	call   c00007c0 <strcat>
c0008ab5:	83 c4 10             	add    esp,0x10
c0008ab8:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0008abf:	75 05                	jne    c0008ac6 <VgaText::receiveKey(unsigned char)+0x80>
c0008ac1:	80 fb 0a             	cmp    bl,0xa
c0008ac4:	75 50                	jne    c0008b16 <VgaText::receiveKey(unsigned char)+0xd0>
c0008ac6:	83 ec 0c             	sub    esp,0xc
c0008ac9:	81 c6 b2 00 00 00    	add    esi,0xb2
c0008acf:	56                   	push   esi
c0008ad0:	e8 6b 7a ff ff       	call   c0000540 <strlen>
c0008ad5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008ad8:	89 c3                	mov    ebx,eax
c0008ada:	e8 61 7a ff ff       	call   c0000540 <strlen>
c0008adf:	83 c4 10             	add    esp,0x10
c0008ae2:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c0008ae6:	3d 80 00 00 00       	cmp    eax,0x80
c0008aeb:	76 10                	jbe    c0008afd <VgaText::receiveKey(unsigned char)+0xb7>
c0008aed:	83 ec 0c             	sub    esp,0xc
c0008af0:	68 c3 d2 01 c0       	push   0xc001d2c3
c0008af5:	e8 d1 75 00 00       	call   c00100cb <KePanic(char const*)>
c0008afa:	83 c4 10             	add    esp,0x10
c0008afd:	50                   	push   eax
c0008afe:	50                   	push   eax
c0008aff:	57                   	push   edi
c0008b00:	56                   	push   esi
c0008b01:	e8 ba 7c ff ff       	call   c00007c0 <strcat>
c0008b06:	83 c4 0c             	add    esp,0xc
c0008b09:	6a 30                	push   0x30
c0008b0b:	6a 00                	push   0x0
c0008b0d:	57                   	push   edi
c0008b0e:	e8 bd 79 ff ff       	call   c00004d0 <memset>
c0008b13:	83 c4 10             	add    esp,0x10
c0008b16:	83 c4 10             	add    esp,0x10
c0008b19:	5b                   	pop    ebx
c0008b1a:	5e                   	pop    esi
c0008b1b:	5f                   	pop    edi
c0008b1c:	c3                   	ret    
c0008b1d:	90                   	nop

c0008b1e <VgaText::doUpdate()>:
c0008b1e:	c3                   	ret    

c0008b1f <newTerminal(char*)>:
c0008b1f:	83 ec 28             	sub    esp,0x28
c0008b22:	68 34 01 00 00       	push   0x134
c0008b27:	e8 8d ec ff ff       	call   c00077b9 <malloc>
c0008b2c:	5a                   	pop    edx
c0008b2d:	59                   	pop    ecx
c0008b2e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008b32:	50                   	push   eax
c0008b33:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b37:	e8 be fd ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0008b3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b40:	83 c4 2c             	add    esp,0x2c
c0008b43:	c3                   	ret    

c0008b44 <TSS::TSS()>:
c0008b44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008b4f:	90                   	nop
c0008b50:	c3                   	ret    
c0008b51:	90                   	nop
c0008b52:	66 90                	xchg   ax,ax

c0008b54 <TSS::setESP(unsigned long)>:
c0008b54:	55                   	push   ebp
c0008b55:	89 e5                	mov    ebp,esp
c0008b57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008b5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008b5d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008b60:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008b63:	90                   	nop
c0008b64:	5d                   	pop    ebp
c0008b65:	c3                   	ret    
c0008b66:	66 90                	xchg   ax,ax

c0008b68 <TSS::flush()>:
c0008b68:	55                   	push   ebp
c0008b69:	89 e5                	mov    ebp,esp
c0008b6b:	83 ec 10             	sub    esp,0x10
c0008b6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008b71:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b73:	83 c8 03             	or     eax,0x3
c0008b76:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008b7a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008b7e:	66 89 d0             	mov    ax,dx
c0008b81:	0f 00 d8             	ltr    ax
c0008b84:	90                   	nop
c0008b85:	c9                   	leave  
c0008b86:	c3                   	ret    
c0008b87:	90                   	nop

c0008b88 <TSS::setup(unsigned long, unsigned long)>:
c0008b88:	55                   	push   ebp
c0008b89:	89 e5                	mov    ebp,esp
c0008b8b:	83 ec 18             	sub    esp,0x18
c0008b8e:	83 ec 0c             	sub    esp,0xc
c0008b91:	6a 68                	push   0x68
c0008b93:	e8 21 ec ff ff       	call   c00077b9 <malloc>
c0008b98:	83 c4 10             	add    esp,0x10
c0008b9b:	89 c2                	mov    edx,eax
c0008b9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ba0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008ba3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ba6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ba9:	83 ec 04             	sub    esp,0x4
c0008bac:	6a 68                	push   0x68
c0008bae:	6a 00                	push   0x0
c0008bb0:	50                   	push   eax
c0008bb1:	e8 1a 79 ff ff       	call   c00004d0 <memset>
c0008bb6:	83 c4 10             	add    esp,0x10
c0008bb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008bbf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008bc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008bcb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008bd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008bd7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008bda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008bdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008be0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008be3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008be9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008bef:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008bf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bf8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008bfb:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008c01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c07:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008c0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c13:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008c19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c1f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008c25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c2b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008c2e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008c31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c37:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c3a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008c3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c43:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008c4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c50:	0f 20 da             	mov    edx,cr3
c0008c53:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008c56:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008c59:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008c5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c62:	83 ec 08             	sub    esp,0x8
c0008c65:	50                   	push   eax
c0008c66:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008c69:	50                   	push   eax
c0008c6a:	e8 d1 e3 ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0008c6f:	83 c4 10             	add    esp,0x10
c0008c72:	83 ec 08             	sub    esp,0x8
c0008c75:	6a 68                	push   0x68
c0008c77:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008c7a:	50                   	push   eax
c0008c7b:	e8 dc e3 ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0008c80:	83 c4 10             	add    esp,0x10
c0008c83:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008c87:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008c8a:	83 e0 0f             	and    eax,0xf
c0008c8d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008c90:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008c93:	83 c8 40             	or     eax,0x40
c0008c96:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008c99:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c0008c9e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008ca4:	05 78 01 00 00       	add    eax,0x178
c0008ca9:	83 ec 04             	sub    esp,0x4
c0008cac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008caf:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008cb2:	50                   	push   eax
c0008cb3:	e8 d8 e3 ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0008cb8:	83 c4 10             	add    esp,0x10
c0008cbb:	89 c2                	mov    edx,eax
c0008cbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cc0:	89 10                	mov    DWORD PTR [eax],edx
c0008cc2:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c0008cc7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008ccd:	05 78 01 00 00       	add    eax,0x178
c0008cd2:	83 ec 0c             	sub    esp,0xc
c0008cd5:	50                   	push   eax
c0008cd6:	e8 df e3 ff ff       	call   c00070ba <GDT::flush()>
c0008cdb:	83 c4 10             	add    esp,0x10
c0008cde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ce1:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ce3:	c9                   	leave  
c0008ce4:	c3                   	ret    
c0008ce5:	90                   	nop

c0008ce6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008ce6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008cea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008cee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cf1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008cf6:	75 08                	jne    c0008d00 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008cf8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008cfe:	eb 38                	jmp    c0008d38 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008d00:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008d05:	75 17                	jne    c0008d1e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008d07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008d0c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008d0f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008d15:	8b 10                	mov    edx,DWORD PTR [eax]
c0008d17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008d1b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008d1e:	89 c1                	mov    ecx,eax
c0008d20:	83 e1 fd             	and    ecx,0xfffffffd
c0008d23:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008d29:	74 cd                	je     c0008cf8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008d2b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008d30:	83 e0 ef             	and    eax,0xffffffef
c0008d33:	83 f8 08             	cmp    eax,0x8
c0008d36:	76 c0                	jbe    c0008cf8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008d38:	31 c0                	xor    eax,eax
c0008d3a:	c3                   	ret    
c0008d3b:	90                   	nop

c0008d3c <ReservedFilename::isAtty()>:
c0008d3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d40:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008d43:	31 c0                	xor    eax,eax
c0008d45:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008d4b:	74 09                	je     c0008d56 <ReservedFilename::isAtty()+0x1a>
c0008d4d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008d53:	0f 94 c0             	sete   al
c0008d56:	c3                   	ret    
c0008d57:	90                   	nop

c0008d58 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008d58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d5c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008d60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008d67:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008d6c:	75 08                	jne    c0008d76 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008d6e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008d74:	eb 3d                	jmp    c0008db3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008d76:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008d7b:	75 17                	jne    c0008d94 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008d7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008d82:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008d85:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008d8b:	8b 10                	mov    edx,DWORD PTR [eax]
c0008d8d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008d91:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008d94:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008d99:	75 04                	jne    c0008d9f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008d9b:	89 0a                	mov    DWORD PTR [edx],ecx
c0008d9d:	eb 14                	jmp    c0008db3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008d9f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008da4:	74 c8                	je     c0008d6e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008da6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008dab:	83 e0 ef             	and    eax,0xffffffef
c0008dae:	83 f8 08             	cmp    eax,0x8
c0008db1:	76 bb                	jbe    c0008d6e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008db3:	31 c0                	xor    eax,eax
c0008db5:	c3                   	ret    

c0008db6 <UnixFile::getFileDescriptor()>:
c0008db6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008dba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008dbd:	c3                   	ret    

c0008dbe <UnixFile::UnixFile(int)>:
c0008dbe:	53                   	push   ebx
c0008dbf:	83 ec 28             	sub    esp,0x28
c0008dc2:	ba e0 d3 01 c0       	mov    edx,0xc001d3e0
c0008dc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008dcb:	89 10                	mov    DWORD PTR [eax],edx
c0008dcd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008dd5:	0f 8f 8c 01 00 00    	jg     c0008f67 <UnixFile::UnixFile(int)+0x1a9>
c0008ddb:	a1 40 f1 01 c0       	mov    eax,ds:0xc001f140
c0008de0:	8d 50 01             	lea    edx,[eax+0x1]
c0008de3:	89 15 40 f1 01 c0    	mov    DWORD PTR ds:0xc001f140,edx
c0008de9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008ded:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008df0:	83 ec 08             	sub    esp,0x8
c0008df3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008df7:	68 18 05 02 c0       	push   0xc0020518
c0008dfc:	e8 c7 30 01 00       	call   c001bec8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008e01:	83 c4 10             	add    esp,0x10
c0008e04:	a0 14 05 02 c0       	mov    al,ds:0xc0020514
c0008e09:	83 f0 01             	xor    eax,0x1
c0008e0c:	84 c0                	test   al,al
c0008e0e:	0f 84 54 01 00 00    	je     c0008f68 <UnixFile::UnixFile(int)+0x1aa>
c0008e14:	c6 05 14 05 02 c0 01 	mov    BYTE PTR ds:0xc0020514,0x1
c0008e1b:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008e23:	83 ec 0c             	sub    esp,0xc
c0008e26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008e2a:	e8 8a e9 ff ff       	call   c00077b9 <malloc>
c0008e2f:	83 c4 10             	add    esp,0x10
c0008e32:	89 c3                	mov    ebx,eax
c0008e34:	83 ec 08             	sub    esp,0x8
c0008e37:	68 03 ff ff 0f       	push   0xfffff03
c0008e3c:	53                   	push   ebx
c0008e3d:	e8 2c 01 00 00       	call   c0008f6e <ReservedFilename::ReservedFilename(int)>
c0008e42:	83 c4 10             	add    esp,0x10
c0008e45:	89 1d 0c 05 02 c0    	mov    DWORD PTR ds:0xc002050c,ebx
c0008e4b:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008e53:	83 ec 0c             	sub    esp,0xc
c0008e56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e5a:	e8 5a e9 ff ff       	call   c00077b9 <malloc>
c0008e5f:	83 c4 10             	add    esp,0x10
c0008e62:	89 c3                	mov    ebx,eax
c0008e64:	83 ec 08             	sub    esp,0x8
c0008e67:	68 01 ff ff 0f       	push   0xfffff01
c0008e6c:	53                   	push   ebx
c0008e6d:	e8 fc 00 00 00       	call   c0008f6e <ReservedFilename::ReservedFilename(int)>
c0008e72:	83 c4 10             	add    esp,0x10
c0008e75:	89 1d 10 05 02 c0    	mov    DWORD PTR ds:0xc0020510,ebx
c0008e7b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008e83:	83 ec 0c             	sub    esp,0xc
c0008e86:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008e8a:	e8 2a e9 ff ff       	call   c00077b9 <malloc>
c0008e8f:	83 c4 10             	add    esp,0x10
c0008e92:	89 c3                	mov    ebx,eax
c0008e94:	83 ec 08             	sub    esp,0x8
c0008e97:	68 00 ff ff 0f       	push   0xfffff00
c0008e9c:	53                   	push   ebx
c0008e9d:	e8 cc 00 00 00       	call   c0008f6e <ReservedFilename::ReservedFilename(int)>
c0008ea2:	83 c4 10             	add    esp,0x10
c0008ea5:	89 1d 04 05 02 c0    	mov    DWORD PTR ds:0xc0020504,ebx
c0008eab:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008eb3:	83 ec 0c             	sub    esp,0xc
c0008eb6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008eba:	e8 fa e8 ff ff       	call   c00077b9 <malloc>
c0008ebf:	83 c4 10             	add    esp,0x10
c0008ec2:	89 c3                	mov    ebx,eax
c0008ec4:	83 ec 08             	sub    esp,0x8
c0008ec7:	68 02 ff ff 0f       	push   0xfffff02
c0008ecc:	53                   	push   ebx
c0008ecd:	e8 9c 00 00 00       	call   c0008f6e <ReservedFilename::ReservedFilename(int)>
c0008ed2:	83 c4 10             	add    esp,0x10
c0008ed5:	89 1d 08 05 02 c0    	mov    DWORD PTR ds:0xc0020508,ebx
c0008edb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008ee3:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008ee8:	7f 7e                	jg     c0008f68 <UnixFile::UnixFile(int)+0x1aa>
c0008eea:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0008ef2:	83 ec 0c             	sub    esp,0xc
c0008ef5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008ef9:	e8 bb e8 ff ff       	call   c00077b9 <malloc>
c0008efe:	83 c4 10             	add    esp,0x10
c0008f01:	89 c3                	mov    ebx,eax
c0008f03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f07:	05 10 ff ff 0f       	add    eax,0xfffff10
c0008f0c:	83 ec 08             	sub    esp,0x8
c0008f0f:	50                   	push   eax
c0008f10:	53                   	push   ebx
c0008f11:	e8 58 00 00 00       	call   c0008f6e <ReservedFilename::ReservedFilename(int)>
c0008f16:	83 c4 10             	add    esp,0x10
c0008f19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f1d:	89 1c 85 e0 04 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfb20],ebx
c0008f24:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0008f2c:	83 ec 0c             	sub    esp,0xc
c0008f2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f33:	e8 81 e8 ff ff       	call   c00077b9 <malloc>
c0008f38:	83 c4 10             	add    esp,0x10
c0008f3b:	89 c3                	mov    ebx,eax
c0008f3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f41:	05 20 ff ff 0f       	add    eax,0xfffff20
c0008f46:	83 ec 08             	sub    esp,0x8
c0008f49:	50                   	push   eax
c0008f4a:	53                   	push   ebx
c0008f4b:	e8 1e 00 00 00       	call   c0008f6e <ReservedFilename::ReservedFilename(int)>
c0008f50:	83 c4 10             	add    esp,0x10
c0008f53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f57:	89 1c 85 a0 04 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfb60],ebx
c0008f5e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008f62:	e9 7c ff ff ff       	jmp    c0008ee3 <UnixFile::UnixFile(int)+0x125>
c0008f67:	90                   	nop
c0008f68:	83 c4 28             	add    esp,0x28
c0008f6b:	5b                   	pop    ebx
c0008f6c:	c3                   	ret    
c0008f6d:	90                   	nop

c0008f6e <ReservedFilename::ReservedFilename(int)>:
c0008f6e:	83 ec 0c             	sub    esp,0xc
c0008f71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f75:	83 ec 08             	sub    esp,0x8
c0008f78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f7c:	50                   	push   eax
c0008f7d:	e8 3c fe ff ff       	call   c0008dbe <UnixFile::UnixFile(int)>
c0008f82:	83 c4 10             	add    esp,0x10
c0008f85:	ba fc d3 01 c0       	mov    edx,0xc001d3fc
c0008f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f8e:	89 10                	mov    DWORD PTR [eax],edx
c0008f90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f94:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008f98:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f9b:	90                   	nop
c0008f9c:	83 c4 0c             	add    esp,0xc
c0008f9f:	c3                   	ret    

c0008fa0 <UnixFile::~UnixFile()>:
c0008fa0:	83 ec 1c             	sub    esp,0x1c
c0008fa3:	ba e0 d3 01 c0       	mov    edx,0xc001d3e0
c0008fa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fac:	89 10                	mov    DWORD PTR [eax],edx
c0008fae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb5:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0008fba:	7f 73                	jg     c000902f <UnixFile::~UnixFile()+0x8f>
c0008fbc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008fc4:	83 ec 0c             	sub    esp,0xc
c0008fc7:	68 18 05 02 c0       	push   0xc0020518
c0008fcc:	e8 cb 2f 01 00       	call   c001bf9c <LinkedList<UnixFile>::getFirstElement()>
c0008fd1:	83 c4 10             	add    esp,0x10
c0008fd4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fd8:	83 ec 0c             	sub    esp,0xc
c0008fdb:	68 18 05 02 c0       	push   0xc0020518
c0008fe0:	e8 bf 2f 01 00       	call   c001bfa4 <LinkedList<UnixFile>::removeFirst()>
c0008fe5:	83 c4 10             	add    esp,0x10
c0008fe8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008fec:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0008ff0:	74 40                	je     c0009032 <UnixFile::~UnixFile()+0x92>
c0008ff2:	83 ec 08             	sub    esp,0x8
c0008ff5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008ff9:	68 18 05 02 c0       	push   0xc0020518
c0008ffe:	e8 c5 2e 01 00       	call   c001bec8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009003:	83 c4 10             	add    esp,0x10
c0009006:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000900a:	8d 50 01             	lea    edx,[eax+0x1]
c000900d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009011:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009016:	0f 94 c0             	sete   al
c0009019:	84 c0                	test   al,al
c000901b:	74 a7                	je     c0008fc4 <UnixFile::~UnixFile()+0x24>
c000901d:	83 ec 0c             	sub    esp,0xc
c0009020:	68 b8 d3 01 c0       	push   0xc001d3b8
c0009025:	e8 a1 70 00 00       	call   c00100cb <KePanic(char const*)>
c000902a:	83 c4 10             	add    esp,0x10
c000902d:	eb 95                	jmp    c0008fc4 <UnixFile::~UnixFile()+0x24>
c000902f:	90                   	nop
c0009030:	eb 01                	jmp    c0009033 <UnixFile::~UnixFile()+0x93>
c0009032:	90                   	nop
c0009033:	90                   	nop
c0009034:	83 c4 1c             	add    esp,0x1c
c0009037:	c3                   	ret    

c0009038 <UnixFile::~UnixFile()>:
c0009038:	83 ec 0c             	sub    esp,0xc
c000903b:	83 ec 0c             	sub    esp,0xc
c000903e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009042:	e8 59 ff ff ff       	call   c0008fa0 <UnixFile::~UnixFile()>
c0009047:	83 c4 10             	add    esp,0x10
c000904a:	83 ec 08             	sub    esp,0x8
c000904d:	6a 0c                	push   0xc
c000904f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009053:	e8 06 13 00 00       	call   c000a35e <operator delete(void*, unsigned long)>
c0009058:	83 c4 10             	add    esp,0x10
c000905b:	83 c4 0c             	add    esp,0xc
c000905e:	c3                   	ret    
c000905f:	90                   	nop

c0009060 <ReservedFilename::~ReservedFilename()>:
c0009060:	83 ec 0c             	sub    esp,0xc
c0009063:	ba fc d3 01 c0       	mov    edx,0xc001d3fc
c0009068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000906c:	89 10                	mov    DWORD PTR [eax],edx
c000906e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009072:	83 ec 0c             	sub    esp,0xc
c0009075:	50                   	push   eax
c0009076:	e8 25 ff ff ff       	call   c0008fa0 <UnixFile::~UnixFile()>
c000907b:	83 c4 10             	add    esp,0x10
c000907e:	90                   	nop
c000907f:	83 c4 0c             	add    esp,0xc
c0009082:	c3                   	ret    
c0009083:	90                   	nop

c0009084 <ReservedFilename::~ReservedFilename()>:
c0009084:	83 ec 0c             	sub    esp,0xc
c0009087:	83 ec 0c             	sub    esp,0xc
c000908a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000908e:	e8 cd ff ff ff       	call   c0009060 <ReservedFilename::~ReservedFilename()>
c0009093:	83 c4 10             	add    esp,0x10
c0009096:	83 ec 08             	sub    esp,0x8
c0009099:	6a 0c                	push   0xc
c000909b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909f:	e8 ba 12 00 00       	call   c000a35e <operator delete(void*, unsigned long)>
c00090a4:	83 c4 10             	add    esp,0x10
c00090a7:	83 c4 0c             	add    esp,0xc
c00090aa:	c3                   	ret    

c00090ab <getFromFileDescriptor(int)>:
c00090ab:	53                   	push   ebx
c00090ac:	83 ec 08             	sub    esp,0x8
c00090af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00090b3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00090b9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00090bf:	7f 2c                	jg     c00090ed <getFromFileDescriptor(int)+0x42>
c00090c1:	83 ec 0c             	sub    esp,0xc
c00090c4:	68 18 05 02 c0       	push   0xc0020518
c00090c9:	e8 ce 2e 01 00       	call   c001bf9c <LinkedList<UnixFile>::getFirstElement()>
c00090ce:	83 c4 10             	add    esp,0x10
c00090d1:	85 c0                	test   eax,eax
c00090d3:	75 04                	jne    c00090d9 <getFromFileDescriptor(int)+0x2e>
c00090d5:	31 c0                	xor    eax,eax
c00090d7:	eb 6e                	jmp    c0009147 <getFromFileDescriptor(int)+0x9c>
c00090d9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00090dc:	74 69                	je     c0009147 <getFromFileDescriptor(int)+0x9c>
c00090de:	52                   	push   edx
c00090df:	52                   	push   edx
c00090e0:	50                   	push   eax
c00090e1:	68 18 05 02 c0       	push   0xc0020518
c00090e6:	e8 5b 2f 01 00       	call   c001c046 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00090eb:	eb e1                	jmp    c00090ce <getFromFileDescriptor(int)+0x23>
c00090ed:	a1 0c 05 02 c0       	mov    eax,ds:0xc002050c
c00090f2:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00090f8:	74 4d                	je     c0009147 <getFromFileDescriptor(int)+0x9c>
c00090fa:	a1 10 05 02 c0       	mov    eax,ds:0xc0020510
c00090ff:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009105:	74 40                	je     c0009147 <getFromFileDescriptor(int)+0x9c>
c0009107:	a1 08 05 02 c0       	mov    eax,ds:0xc0020508
c000910c:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0009112:	74 33                	je     c0009147 <getFromFileDescriptor(int)+0x9c>
c0009114:	a1 04 05 02 c0       	mov    eax,ds:0xc0020504
c0009119:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000911f:	74 26                	je     c0009147 <getFromFileDescriptor(int)+0x9c>
c0009121:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009127:	83 f8 08             	cmp    eax,0x8
c000912a:	77 09                	ja     c0009135 <getFromFileDescriptor(int)+0x8a>
c000912c:	8b 04 85 e0 04 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfb20]
c0009133:	eb 12                	jmp    c0009147 <getFromFileDescriptor(int)+0x9c>
c0009135:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000913b:	83 fb 08             	cmp    ebx,0x8
c000913e:	77 95                	ja     c00090d5 <getFromFileDescriptor(int)+0x2a>
c0009140:	8b 04 9d a0 04 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdfb60]
c0009147:	83 c4 08             	add    esp,0x8
c000914a:	5b                   	pop    ebx
c000914b:	c3                   	ret    

c000914c <__static_initialization_and_destruction_0(int, int)>:
c000914c:	83 ec 0c             	sub    esp,0xc
c000914f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009154:	75 34                	jne    c000918a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009156:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000915e:	75 2a                	jne    c000918a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009160:	83 ec 0c             	sub    esp,0xc
c0009163:	68 18 05 02 c0       	push   0xc0020518
c0009168:	e8 19 2d 01 00       	call   c001be86 <LinkedList<UnixFile>::LinkedList()>
c000916d:	83 c4 10             	add    esp,0x10
c0009170:	83 ec 04             	sub    esp,0x4
c0009173:	68 d0 f0 01 c0       	push   0xc001f0d0
c0009178:	68 18 05 02 c0       	push   0xc0020518
c000917d:	68 84 be 01 c0       	push   0xc001be84
c0009182:	e8 87 11 00 00       	call   c000a30e <__cxa_atexit>
c0009187:	83 c4 10             	add    esp,0x10
c000918a:	90                   	nop
c000918b:	83 c4 0c             	add    esp,0xc
c000918e:	c3                   	ret    

c000918f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000918f:	83 ec 0c             	sub    esp,0xc
c0009192:	83 ec 08             	sub    esp,0x8
c0009195:	68 ff ff 00 00       	push   0xffff
c000919a:	6a 01                	push   0x1
c000919c:	e8 ab ff ff ff       	call   c000914c <__static_initialization_and_destruction_0(int, int)>
c00091a1:	83 c4 10             	add    esp,0x10
c00091a4:	83 c4 0c             	add    esp,0xc
c00091a7:	c3                   	ret    

c00091a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00091a8:	53                   	push   ebx
c00091a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00091ad:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00091b1:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00091b7:	89 c8                	mov    eax,ecx
c00091b9:	d1 e8                	shr    eax,1
c00091bb:	03 05 48 f1 01 c0    	add    eax,DWORD PTR ds:0xc001f148
c00091c1:	83 e1 01             	and    ecx,0x1
c00091c4:	8a 10                	mov    dl,BYTE PTR [eax]
c00091c6:	75 09                	jne    c00091d1 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00091c8:	83 e2 f0             	and    edx,0xfffffff0
c00091cb:	09 da                	or     edx,ebx
c00091cd:	88 10                	mov    BYTE PTR [eax],dl
c00091cf:	5b                   	pop    ebx
c00091d0:	c3                   	ret    
c00091d1:	c1 e3 04             	shl    ebx,0x4
c00091d4:	83 e2 0f             	and    edx,0xf
c00091d7:	09 da                	or     edx,ebx
c00091d9:	88 10                	mov    BYTE PTR [eax],dl
c00091db:	5b                   	pop    ebx
c00091dc:	c3                   	ret    

c00091dd <Virt::getPageState(unsigned long)>:
c00091dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091e1:	8b 0d 48 f1 01 c0    	mov    ecx,DWORD PTR ds:0xc001f148
c00091e7:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00091ed:	89 d0                	mov    eax,edx
c00091ef:	d1 e8                	shr    eax,1
c00091f1:	83 e2 01             	and    edx,0x1
c00091f4:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00091f7:	75 04                	jne    c00091fd <Virt::getPageState(unsigned long)+0x20>
c00091f9:	83 e0 0f             	and    eax,0xf
c00091fc:	c3                   	ret    
c00091fd:	c0 e8 04             	shr    al,0x4
c0009200:	c3                   	ret    

c0009201 <Virt::allocateKernelVirtualPages(int)>:
c0009201:	55                   	push   ebp
c0009202:	31 ed                	xor    ebp,ebp
c0009204:	57                   	push   edi
c0009205:	56                   	push   esi
c0009206:	53                   	push   ebx
c0009207:	31 db                	xor    ebx,ebx
c0009209:	83 ec 1c             	sub    esp,0x1c
c000920c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009210:	8b 3d 44 f1 01 c0    	mov    edi,DWORD PTR ds:0xc001f144
c0009216:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000921b:	57                   	push   edi
c000921c:	e8 bc ff ff ff       	call   c00091dd <Virt::getPageState(unsigned long)>
c0009221:	5a                   	pop    edx
c0009222:	84 c0                	test   al,al
c0009224:	75 3a                	jne    c0009260 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0009226:	85 db                	test   ebx,ebx
c0009228:	75 02                	jne    c000922c <Virt::allocateKernelVirtualPages(int)+0x2b>
c000922a:	89 fd                	mov    ebp,edi
c000922c:	43                   	inc    ebx
c000922d:	39 f3                	cmp    ebx,esi
c000922f:	74 5a                	je     c000928b <Virt::allocateKernelVirtualPages(int)+0x8a>
c0009231:	47                   	inc    edi
c0009232:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0009238:	76 31                	jbe    c000926b <Virt::allocateKernelVirtualPages(int)+0x6a>
c000923a:	c7 05 44 f1 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f144,0xc8000
c0009244:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0009249:	75 28                	jne    c0009273 <Virt::allocateKernelVirtualPages(int)+0x72>
c000924b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009250:	bf 00 80 0c 00       	mov    edi,0xc8000
c0009255:	57                   	push   edi
c0009256:	e8 82 ff ff ff       	call   c00091dd <Virt::getPageState(unsigned long)>
c000925b:	5a                   	pop    edx
c000925c:	84 c0                	test   al,al
c000925e:	74 c6                	je     c0009226 <Virt::allocateKernelVirtualPages(int)+0x25>
c0009260:	31 db                	xor    ebx,ebx
c0009262:	47                   	inc    edi
c0009263:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0009269:	77 cf                	ja     c000923a <Virt::allocateKernelVirtualPages(int)+0x39>
c000926b:	89 3d 44 f1 01 c0    	mov    DWORD PTR ds:0xc001f144,edi
c0009271:	eb a8                	jmp    c000921b <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009273:	83 ec 0c             	sub    esp,0xc
c0009276:	68 10 d4 01 c0       	push   0xc001d410
c000927b:	e8 4b 6e 00 00       	call   c00100cb <KePanic(char const*)>
c0009280:	8b 3d 44 f1 01 c0    	mov    edi,DWORD PTR ds:0xc001f144
c0009286:	83 c4 10             	add    esp,0x10
c0009289:	eb 90                	jmp    c000921b <Virt::allocateKernelVirtualPages(int)+0x1a>
c000928b:	89 2d 44 f1 01 c0    	mov    DWORD PTR ds:0xc001f144,ebp
c0009291:	4b                   	dec    ebx
c0009292:	74 5f                	je     c00092f3 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009294:	85 f6                	test   esi,esi
c0009296:	74 3d                	je     c00092d5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009298:	89 e8                	mov    eax,ebp
c000929a:	31 db                	xor    ebx,ebx
c000929c:	8d 7e ff             	lea    edi,[esi-0x1]
c000929f:	eb 14                	jmp    c00092b5 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00092a1:	6a 01                	push   0x1
c00092a3:	43                   	inc    ebx
c00092a4:	50                   	push   eax
c00092a5:	e8 fe fe ff ff       	call   c00091a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00092aa:	58                   	pop    eax
c00092ab:	39 f3                	cmp    ebx,esi
c00092ad:	5a                   	pop    edx
c00092ae:	74 25                	je     c00092d5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00092b0:	a1 44 f1 01 c0       	mov    eax,ds:0xc001f144
c00092b5:	8d 50 01             	lea    edx,[eax+0x1]
c00092b8:	85 db                	test   ebx,ebx
c00092ba:	89 15 44 f1 01 c0    	mov    DWORD PTR ds:0xc001f144,edx
c00092c0:	74 20                	je     c00092e2 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00092c2:	39 df                	cmp    edi,ebx
c00092c4:	75 db                	jne    c00092a1 <Virt::allocateKernelVirtualPages(int)+0xa0>
c00092c6:	6a 03                	push   0x3
c00092c8:	43                   	inc    ebx
c00092c9:	50                   	push   eax
c00092ca:	e8 d9 fe ff ff       	call   c00091a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00092cf:	59                   	pop    ecx
c00092d0:	39 f3                	cmp    ebx,esi
c00092d2:	58                   	pop    eax
c00092d3:	75 db                	jne    c00092b0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00092d5:	83 c4 1c             	add    esp,0x1c
c00092d8:	89 e8                	mov    eax,ebp
c00092da:	5b                   	pop    ebx
c00092db:	c1 e0 0c             	shl    eax,0xc
c00092de:	5e                   	pop    esi
c00092df:	5f                   	pop    edi
c00092e0:	5d                   	pop    ebp
c00092e1:	c3                   	ret    
c00092e2:	6a 02                	push   0x2
c00092e4:	bb 01 00 00 00       	mov    ebx,0x1
c00092e9:	50                   	push   eax
c00092ea:	e8 b9 fe ff ff       	call   c00091a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00092ef:	58                   	pop    eax
c00092f0:	5a                   	pop    edx
c00092f1:	eb bd                	jmp    c00092b0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00092f3:	6a 04                	push   0x4
c00092f5:	8d 45 01             	lea    eax,[ebp+0x1]
c00092f8:	55                   	push   ebp
c00092f9:	a3 44 f1 01 c0       	mov    ds:0xc001f144,eax
c00092fe:	e8 a5 fe ff ff       	call   c00091a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009303:	59                   	pop    ecx
c0009304:	89 e8                	mov    eax,ebp
c0009306:	5b                   	pop    ebx
c0009307:	c1 e0 0c             	shl    eax,0xc
c000930a:	83 c4 1c             	add    esp,0x1c
c000930d:	5b                   	pop    ebx
c000930e:	5e                   	pop    esi
c000930f:	5f                   	pop    edi
c0009310:	5d                   	pop    ebp
c0009311:	c3                   	ret    

c0009312 <Virt::freeSwapfilePage(unsigned long)>:
c0009312:	53                   	push   ebx
c0009313:	8b 15 2c 05 02 c0    	mov    edx,DWORD PTR ds:0xc002052c
c0009319:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000931d:	b8 01 00 00 00       	mov    eax,0x1
c0009322:	89 cb                	mov    ebx,ecx
c0009324:	d3 e0                	shl    eax,cl
c0009326:	c1 eb 05             	shr    ebx,0x5
c0009329:	f7 d0                	not    eax
c000932b:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000932e:	5b                   	pop    ebx
c000932f:	c3                   	ret    

c0009330 <Virt::swapIDToSector(unsigned long)>:
c0009330:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009334:	0f af 05 4c f1 01 c0 	imul   eax,DWORD PTR ds:0xc001f14c
c000933b:	03 05 54 f1 01 c0    	add    eax,DWORD PTR ds:0xc001f154
c0009341:	c3                   	ret    

c0009342 <Virt::allocateSwapfilePage()>:
c0009342:	55                   	push   ebp
c0009343:	31 d2                	xor    edx,edx
c0009345:	57                   	push   edi
c0009346:	56                   	push   esi
c0009347:	53                   	push   ebx
c0009348:	83 ec 0c             	sub    esp,0xc
c000934b:	8b 0d 4c f1 01 c0    	mov    ecx,DWORD PTR ds:0xc001f14c
c0009351:	a1 50 f1 01 c0       	mov    eax,ds:0xc001f150
c0009356:	f7 f1                	div    ecx
c0009358:	39 0d 50 f1 01 c0    	cmp    DWORD PTR ds:0xc001f150,ecx
c000935e:	72 2d                	jb     c000938d <Virt::allocateSwapfilePage()+0x4b>
c0009360:	8b 35 2c 05 02 c0    	mov    esi,DWORD PTR ds:0xc002052c
c0009366:	8b 16                	mov    edx,DWORD PTR [esi]
c0009368:	f6 c2 01             	test   dl,0x1
c000936b:	74 3c                	je     c00093a9 <Virt::allocateSwapfilePage()+0x67>
c000936d:	31 c9                	xor    ecx,ecx
c000936f:	bf 01 00 00 00       	mov    edi,0x1
c0009374:	eb 12                	jmp    c0009388 <Virt::allocateSwapfilePage()+0x46>
c0009376:	89 fd                	mov    ebp,edi
c0009378:	89 ca                	mov    edx,ecx
c000937a:	d3 e5                	shl    ebp,cl
c000937c:	c1 ea 05             	shr    edx,0x5
c000937f:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009382:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009384:	85 ea                	test   edx,ebp
c0009386:	74 2a                	je     c00093b2 <Virt::allocateSwapfilePage()+0x70>
c0009388:	41                   	inc    ecx
c0009389:	39 c8                	cmp    eax,ecx
c000938b:	77 e9                	ja     c0009376 <Virt::allocateSwapfilePage()+0x34>
c000938d:	83 ec 0c             	sub    esp,0xc
c0009390:	68 77 d5 01 c0       	push   0xc001d577
c0009395:	e8 31 6d 00 00       	call   c00100cb <KePanic(char const*)>
c000939a:	83 c4 10             	add    esp,0x10
c000939d:	31 c9                	xor    ecx,ecx
c000939f:	83 c4 0c             	add    esp,0xc
c00093a2:	89 c8                	mov    eax,ecx
c00093a4:	5b                   	pop    ebx
c00093a5:	5e                   	pop    esi
c00093a6:	5f                   	pop    edi
c00093a7:	5d                   	pop    ebp
c00093a8:	c3                   	ret    
c00093a9:	89 f3                	mov    ebx,esi
c00093ab:	bd 01 00 00 00       	mov    ebp,0x1
c00093b0:	31 c9                	xor    ecx,ecx
c00093b2:	09 ea                	or     edx,ebp
c00093b4:	89 c8                	mov    eax,ecx
c00093b6:	89 13                	mov    DWORD PTR [ebx],edx
c00093b8:	83 c4 0c             	add    esp,0xc
c00093bb:	5b                   	pop    ebx
c00093bc:	5e                   	pop    esi
c00093bd:	5f                   	pop    edi
c00093be:	5d                   	pop    ebp
c00093bf:	c3                   	ret    

c00093c0 <Virt::virtualMemorySetup()>:
c00093c0:	53                   	push   ebx
c00093c1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00093c6:	6a 0f                	push   0xf
c00093c8:	53                   	push   ebx
c00093c9:	43                   	inc    ebx
c00093ca:	e8 d9 fd ff ff       	call   c00091a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00093cf:	58                   	pop    eax
c00093d0:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00093d6:	5a                   	pop    edx
c00093d7:	75 ed                	jne    c00093c6 <Virt::virtualMemorySetup()+0x6>
c00093d9:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00093de:	6a 00                	push   0x0
c00093e0:	53                   	push   ebx
c00093e1:	43                   	inc    ebx
c00093e2:	e8 c1 fd ff ff       	call   c00091a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00093e7:	59                   	pop    ecx
c00093e8:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00093ee:	58                   	pop    eax
c00093ef:	75 ed                	jne    c00093de <Virt::virtualMemorySetup()+0x1e>
c00093f1:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00093f6:	6a 0f                	push   0xf
c00093f8:	53                   	push   ebx
c00093f9:	43                   	inc    ebx
c00093fa:	e8 a9 fd ff ff       	call   c00091a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00093ff:	58                   	pop    eax
c0009400:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009406:	5a                   	pop    edx
c0009407:	75 ed                	jne    c00093f6 <Virt::virtualMemorySetup()+0x36>
c0009409:	5b                   	pop    ebx
c000940a:	c3                   	ret    

c000940b <Virt::setupPageSwapping(int)>:
c000940b:	53                   	push   ebx
c000940c:	83 ec 0c             	sub    esp,0xc
c000940f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009413:	a1 a8 29 02 c0       	mov    eax,ds:0xc00229a8
c0009418:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000941e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009420:	53                   	push   ebx
c0009421:	c1 e3 0b             	shl    ebx,0xb
c0009424:	68 8e d5 01 c0       	push   0xc001d58e
c0009429:	50                   	push   eax
c000942a:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000942d:	89 1d 50 f1 01 c0    	mov    DWORD PTR ds:0xc001f150,ebx
c0009433:	c6 05 58 f1 01 c0 43 	mov    BYTE PTR ds:0xc001f158,0x43
c000943a:	c1 eb 08             	shr    ebx,0x8
c000943d:	a3 54 f1 01 c0       	mov    ds:0xc001f154,eax
c0009442:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009445:	c7 05 4c f1 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f14c,0x8
c000944f:	e8 65 e3 ff ff       	call   c00077b9 <malloc>
c0009454:	83 c4 0c             	add    esp,0xc
c0009457:	89 c1                	mov    ecx,eax
c0009459:	a3 2c 05 02 c0       	mov    ds:0xc002052c,eax
c000945e:	31 d2                	xor    edx,edx
c0009460:	a1 50 f1 01 c0       	mov    eax,ds:0xc001f150
c0009465:	f7 35 4c f1 01 c0    	div    DWORD PTR ds:0xc001f14c
c000946b:	c1 e8 05             	shr    eax,0x5
c000946e:	50                   	push   eax
c000946f:	6a 00                	push   0x0
c0009471:	51                   	push   ecx
c0009472:	e8 59 70 ff ff       	call   c00004d0 <memset>
c0009477:	83 c4 18             	add    esp,0x18
c000947a:	5b                   	pop    ebx
c000947b:	c3                   	ret    

c000947c <VAS::VAS()>:
c000947c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009480:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009487:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000948b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009492:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009496:	a3 30 05 02 c0       	mov    ds:0xc0020530,eax
c000949b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000949f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00094a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094a7:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00094aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094ae:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00094b5:	90                   	nop
c00094b6:	c3                   	ret    
c00094b7:	90                   	nop

c00094b8 <VAS::VAS(VAS*)>:
c00094b8:	83 ec 0c             	sub    esp,0xc
c00094bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094bf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00094c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094ca:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00094d1:	83 ec 0c             	sub    esp,0xc
c00094d4:	68 30 d4 01 c0       	push   0xc001d430
c00094d9:	e8 ed 6b 00 00       	call   c00100cb <KePanic(char const*)>
c00094de:	83 c4 10             	add    esp,0x10
c00094e1:	90                   	nop
c00094e2:	83 c4 0c             	add    esp,0xc
c00094e5:	c3                   	ret    

c00094e6 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00094e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00094ea:	89 c2                	mov    edx,eax
c00094ec:	c1 e8 0a             	shr    eax,0xa
c00094ef:	c1 ea 16             	shr    edx,0x16
c00094f2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00094f7:	19 c9                	sbb    ecx,ecx
c00094f9:	c1 e2 0c             	shl    edx,0xc
c00094fc:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009502:	25 fc 0f 00 00       	and    eax,0xffc
c0009507:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000950e:	01 d0                	add    eax,edx
c0009510:	c3                   	ret    
c0009511:	90                   	nop

c0009512 <VAS::getPageTableEntry(unsigned long)>:
c0009512:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009516:	89 ca                	mov    edx,ecx
c0009518:	c1 e9 0a             	shr    ecx,0xa
c000951b:	c1 ea 16             	shr    edx,0x16
c000951e:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009524:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000952a:	c1 e0 0c             	shl    eax,0xc
c000952d:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009530:	c3                   	ret    

c0009531 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009531:	57                   	push   edi
c0009532:	56                   	push   esi
c0009533:	be 01 00 00 00       	mov    esi,0x1
c0009538:	53                   	push   ebx
c0009539:	83 ec 10             	sub    esp,0x10
c000953c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009540:	c1 eb 0c             	shr    ebx,0xc
c0009543:	eb 3f                	jmp    c0009584 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0009545:	83 ec 08             	sub    esp,0x8
c0009548:	a1 30 05 02 c0       	mov    eax,ds:0xc0020530
c000954d:	57                   	push   edi
c000954e:	50                   	push   eax
c000954f:	e8 be ff ff ff       	call   c0009512 <VAS::getPageTableEntry(unsigned long)>
c0009554:	83 c4 10             	add    esp,0x10
c0009557:	8b 00                	mov    eax,DWORD PTR [eax]
c0009559:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000955d:	f6 c4 04             	test   ah,0x4
c0009560:	75 60                	jne    c00095c2 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c0009562:	80 fa 04             	cmp    dl,0x4
c0009565:	74 79                	je     c00095e0 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c0009567:	80 fa 02             	cmp    dl,0x2
c000956a:	0f 84 89 00 00 00    	je     c00095f9 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c0009570:	80 fa 03             	cmp    dl,0x3
c0009573:	0f 84 ae 00 00 00    	je     c0009627 <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c0009579:	fe ca                	dec    dl
c000957b:	0f 84 93 00 00 00    	je     c0009614 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009581:	43                   	inc    ebx
c0009582:	31 f6                	xor    esi,esi
c0009584:	53                   	push   ebx
c0009585:	89 df                	mov    edi,ebx
c0009587:	e8 51 fc ff ff       	call   c00091dd <Virt::getPageState(unsigned long)>
c000958c:	c1 e7 0c             	shl    edi,0xc
c000958f:	5a                   	pop    edx
c0009590:	84 c0                	test   al,al
c0009592:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009596:	75 ad                	jne    c0009545 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0009598:	83 ec 0c             	sub    esp,0xc
c000959b:	68 a5 d5 01 c0       	push   0xc001d5a5
c00095a0:	e8 26 6b 00 00       	call   c00100cb <KePanic(char const*)>
c00095a5:	5a                   	pop    edx
c00095a6:	59                   	pop    ecx
c00095a7:	57                   	push   edi
c00095a8:	8b 3d 30 05 02 c0    	mov    edi,DWORD PTR ds:0xc0020530
c00095ae:	57                   	push   edi
c00095af:	e8 5e ff ff ff       	call   c0009512 <VAS::getPageTableEntry(unsigned long)>
c00095b4:	83 c4 10             	add    esp,0x10
c00095b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00095b9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00095bd:	f6 c4 04             	test   ah,0x4
c00095c0:	74 bf                	je     c0009581 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00095c2:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00095c6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00095cb:	83 ec 0c             	sub    esp,0xc
c00095ce:	50                   	push   eax
c00095cf:	e8 5f e4 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00095d4:	83 c4 10             	add    esp,0x10
c00095d7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00095db:	80 fa 04             	cmp    dl,0x4
c00095de:	75 87                	jne    c0009567 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00095e0:	89 f0                	mov    eax,esi
c00095e2:	84 c0                	test   al,al
c00095e4:	75 47                	jne    c000962d <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c00095e6:	c7 44 24 20 54 d4 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d454
c00095ee:	83 c4 10             	add    esp,0x10
c00095f1:	5b                   	pop    ebx
c00095f2:	5e                   	pop    esi
c00095f3:	5f                   	pop    edi
c00095f4:	e9 d2 6a 00 00       	jmp    c00100cb <KePanic(char const*)>
c00095f9:	89 f0                	mov    eax,esi
c00095fb:	84 c0                	test   al,al
c00095fd:	75 15                	jne    c0009614 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c00095ff:	83 ec 0c             	sub    esp,0xc
c0009602:	68 c1 d5 01 c0       	push   0xc001d5c1
c0009607:	e8 bf 6a 00 00       	call   c00100cb <KePanic(char const*)>
c000960c:	83 c4 10             	add    esp,0x10
c000960f:	e9 6d ff ff ff       	jmp    c0009581 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009614:	83 ec 08             	sub    esp,0x8
c0009617:	6a 00                	push   0x0
c0009619:	53                   	push   ebx
c000961a:	e8 89 fb ff ff       	call   c00091a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000961f:	83 c4 10             	add    esp,0x10
c0009622:	e9 5a ff ff ff       	jmp    c0009581 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009627:	89 f0                	mov    eax,esi
c0009629:	84 c0                	test   al,al
c000962b:	75 15                	jne    c0009642 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c000962d:	83 ec 08             	sub    esp,0x8
c0009630:	6a 00                	push   0x0
c0009632:	53                   	push   ebx
c0009633:	e8 70 fb ff ff       	call   c00091a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009638:	83 c4 10             	add    esp,0x10
c000963b:	83 c4 10             	add    esp,0x10
c000963e:	5b                   	pop    ebx
c000963f:	5e                   	pop    esi
c0009640:	5f                   	pop    edi
c0009641:	c3                   	ret    
c0009642:	c7 44 24 20 dd d5 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d5dd
c000964a:	83 c4 10             	add    esp,0x10
c000964d:	5b                   	pop    ebx
c000964e:	5e                   	pop    esi
c000964f:	5f                   	pop    edi
c0009650:	e9 76 6a 00 00       	jmp    c00100cb <KePanic(char const*)>
c0009655:	90                   	nop

c0009656 <VAS::freeAllocatedPages(unsigned long)>:
c0009656:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000965a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000965e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009662:	74 09                	je     c000966d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009664:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009668:	e9 c4 fe ff ff       	jmp    c0009531 <Virt::freeKernelVirtualPages(unsigned long)>
c000966d:	c7 44 24 04 78 d4 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d478
c0009675:	e9 da 0d 00 00       	jmp    c000a454 <Dbg::kprintf(char const*, ...)>

c000967a <VAS::virtualToPhysical(unsigned long)>:
c000967a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000967e:	50                   	push   eax
c000967f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009683:	52                   	push   edx
c0009684:	e8 89 fe ff ff       	call   c0009512 <VAS::getPageTableEntry(unsigned long)>
c0009689:	59                   	pop    ecx
c000968a:	8b 00                	mov    eax,DWORD PTR [eax]
c000968c:	5a                   	pop    edx
c000968d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009692:	c3                   	ret    
c0009693:	90                   	nop

c0009694 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009694:	55                   	push   ebp
c0009695:	57                   	push   edi
c0009696:	56                   	push   esi
c0009697:	53                   	push   ebx
c0009698:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000969c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00096a0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00096a4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00096a8:	85 db                	test   ebx,ebx
c00096aa:	7e 22                	jle    c00096ce <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00096ac:	c1 e3 0c             	shl    ebx,0xc
c00096af:	01 f3                	add    ebx,esi
c00096b1:	56                   	push   esi
c00096b2:	81 c6 00 10 00 00    	add    esi,0x1000
c00096b8:	55                   	push   ebp
c00096b9:	e8 54 fe ff ff       	call   c0009512 <VAS::getPageTableEntry(unsigned long)>
c00096be:	5a                   	pop    edx
c00096bf:	59                   	pop    ecx
c00096c0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00096c2:	21 f9                	and    ecx,edi
c00096c4:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00096c8:	39 f3                	cmp    ebx,esi
c00096ca:	89 08                	mov    DWORD PTR [eax],ecx
c00096cc:	75 e3                	jne    c00096b1 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00096ce:	5b                   	pop    ebx
c00096cf:	5e                   	pop    esi
c00096d0:	5f                   	pop    edi
c00096d1:	5d                   	pop    ebp
c00096d2:	c3                   	ret    
c00096d3:	90                   	nop

c00096d4 <VAS::setToWriteCombining(unsigned long, int)>:
c00096d4:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c00096d9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00096df:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c00096e6:	75 01                	jne    c00096e9 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00096e8:	c3                   	ret    
c00096e9:	68 80 00 00 00       	push   0x80
c00096ee:	6a ff                	push   0xffffffff
c00096f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096f4:	50                   	push   eax
c00096f5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00096f9:	52                   	push   edx
c00096fa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00096fe:	51                   	push   ecx
c00096ff:	e8 90 ff ff ff       	call   c0009694 <VAS::reflagRange(unsigned long, int, int, int)>
c0009704:	83 c4 14             	add    esp,0x14
c0009707:	c3                   	ret    

c0009708 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009708:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000970d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009711:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009714:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009718:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000971b:	19 c0                	sbb    eax,eax
c000971d:	83 ca 03             	or     edx,0x3
c0009720:	83 e0 fc             	and    eax,0xfffffffc
c0009723:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000972a:	0f 20 d8             	mov    eax,cr3
c000972d:	0f 22 d8             	mov    cr3,eax
c0009730:	c3                   	ret    
c0009731:	90                   	nop

c0009732 <VAS::~VAS()>:
c0009732:	83 ec 2c             	sub    esp,0x2c
c0009735:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000973d:	fa                   	cli    
c000973e:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0009743:	40                   	inc    eax
c0009744:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c0009749:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000974e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009750:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009753:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009759:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000975d:	6a 01                	push   0x1
c000975f:	50                   	push   eax
c0009760:	e8 a3 ff ff ff       	call   c0009708 <VAS::mapOtherVASIn(bool, VAS*)>
c0009765:	83 c4 0c             	add    esp,0xc
c0009768:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009770:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009778:	0f 8f d4 00 00 00    	jg     c0009852 <VAS::~VAS()+0x120>
c000977e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009782:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009785:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009789:	c1 e2 02             	shl    edx,0x2
c000978c:	01 d0                	add    eax,edx
c000978e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009790:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009798:	83 e0 01             	and    eax,0x1
c000979b:	0f 84 a8 00 00 00    	je     c0009849 <VAS::~VAS()+0x117>
c00097a1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00097a9:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00097b1:	7f 72                	jg     c0009825 <VAS::~VAS()+0xf3>
c00097b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00097b7:	c1 e0 0a             	shl    eax,0xa
c00097ba:	89 c2                	mov    edx,eax
c00097bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00097c0:	01 d0                	add    eax,edx
c00097c2:	c1 e0 0c             	shl    eax,0xc
c00097c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00097c9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00097ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00097d0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00097d3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00097d9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00097dd:	6a 01                	push   0x1
c00097df:	50                   	push   eax
c00097e0:	e8 01 fd ff ff       	call   c00094e6 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00097e5:	83 c4 0c             	add    esp,0xc
c00097e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00097f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00097f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097fa:	25 01 04 00 00       	and    eax,0x401
c00097ff:	3d 01 04 00 00       	cmp    eax,0x401
c0009804:	75 19                	jne    c000981f <VAS::~VAS()+0xed>
c0009806:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000980a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000980f:	83 ec 0c             	sub    esp,0xc
c0009812:	50                   	push   eax
c0009813:	e8 1b e2 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0009818:	83 c4 10             	add    esp,0x10
c000981b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000981f:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009823:	eb 84                	jmp    c00097a9 <VAS::~VAS()+0x77>
c0009825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009829:	25 00 04 00 00       	and    eax,0x400
c000982e:	74 19                	je     c0009849 <VAS::~VAS()+0x117>
c0009830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009834:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009839:	83 ec 0c             	sub    esp,0xc
c000983c:	50                   	push   eax
c000983d:	e8 f1 e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0009842:	83 c4 10             	add    esp,0x10
c0009845:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009849:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000984d:	e9 1e ff ff ff       	jmp    c0009770 <VAS::~VAS()+0x3e>
c0009852:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009856:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009859:	83 ec 0c             	sub    esp,0xc
c000985c:	50                   	push   eax
c000985d:	e8 cf fc ff ff       	call   c0009531 <Virt::freeKernelVirtualPages(unsigned long)>
c0009862:	83 c4 10             	add    esp,0x10
c0009865:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009869:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000986c:	83 ec 0c             	sub    esp,0xc
c000986f:	50                   	push   eax
c0009870:	e8 be e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0009875:	83 c4 10             	add    esp,0x10
c0009878:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000987c:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0009881:	48                   	dec    eax
c0009882:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c0009887:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c000988c:	85 c0                	test   eax,eax
c000988e:	75 01                	jne    c0009891 <VAS::~VAS()+0x15f>
c0009890:	fb                   	sti    
c0009891:	90                   	nop
c0009892:	83 c4 2c             	add    esp,0x2c
c0009895:	c3                   	ret    

c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009896:	55                   	push   ebp
c0009897:	57                   	push   edi
c0009898:	56                   	push   esi
c0009899:	53                   	push   ebx
c000989a:	83 ec 1c             	sub    esp,0x1c
c000989d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00098a1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00098a5:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00098ab:	77 0b                	ja     c00098b8 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c00098ad:	0f 20 d8             	mov    eax,cr3
c00098b0:	0f 20 d8             	mov    eax,cr3
c00098b3:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c00098b6:	75 47                	jne    c00098ff <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c00098b8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00098bc:	09 d8                	or     eax,ebx
c00098be:	a9 ff 0f 00 00       	test   eax,0xfff
c00098c3:	75 57                	jne    c000991c <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c00098c5:	89 de                	mov    esi,ebx
c00098c7:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00098ca:	c1 ee 16             	shr    esi,0x16
c00098cd:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00098d4:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00098d8:	74 54                	je     c000992e <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c00098da:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00098de:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00098e4:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00098e8:	c1 e6 0c             	shl    esi,0xc
c00098eb:	c1 eb 0a             	shr    ebx,0xa
c00098ee:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00098f4:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00098f7:	83 c4 1c             	add    esp,0x1c
c00098fa:	5b                   	pop    ebx
c00098fb:	5e                   	pop    esi
c00098fc:	5f                   	pop    edi
c00098fd:	5d                   	pop    ebp
c00098fe:	c3                   	ret    
c00098ff:	83 ec 0c             	sub    esp,0xc
c0009902:	68 9c d4 01 c0       	push   0xc001d49c
c0009907:	e8 48 0b 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000990c:	83 c4 10             	add    esp,0x10
c000990f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009913:	09 d8                	or     eax,ebx
c0009915:	a9 ff 0f 00 00       	test   eax,0xfff
c000991a:	74 a9                	je     c00098c5 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000991c:	83 ec 0c             	sub    esp,0xc
c000991f:	68 04 d5 01 c0       	push   0xc001d504
c0009924:	e8 a2 67 00 00       	call   c00100cb <KePanic(char const*)>
c0009929:	83 c4 10             	add    esp,0x10
c000992c:	eb 97                	jmp    c00098c5 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000992e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009932:	e8 5e e1 ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009937:	83 ec 0c             	sub    esp,0xc
c000993a:	89 c5                	mov    ebp,eax
c000993c:	8b 0d 30 05 02 c0    	mov    ecx,DWORD PTR ds:0xc0020530
c0009942:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009946:	6a 01                	push   0x1
c0009948:	e8 b4 f8 ff ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c000994d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009954:	6a 01                	push   0x1
c0009956:	50                   	push   eax
c0009957:	55                   	push   ebp
c0009958:	81 cd 07 04 00 00    	or     ebp,0x407
c000995e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009962:	51                   	push   ecx
c0009963:	e8 28 02 00 00       	call   c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009968:	83 c4 1c             	add    esp,0x1c
c000996b:	68 00 10 00 00       	push   0x1000
c0009970:	6a 00                	push   0x0
c0009972:	50                   	push   eax
c0009973:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009977:	e8 54 6b ff ff       	call   c00004d0 <memset>
c000997c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009980:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009983:	e8 a9 fb ff ff       	call   c0009531 <Virt::freeKernelVirtualPages(unsigned long)>
c0009988:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000998c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000998f:	83 c4 10             	add    esp,0x10
c0009992:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009995:	e9 40 ff ff ff       	jmp    c00098da <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c000999a <VAS::allocatePages(int, int)>:
c000999a:	55                   	push   ebp
c000999b:	57                   	push   edi
c000999c:	56                   	push   esi
c000999d:	53                   	push   ebx
c000999e:	83 ec 1c             	sub    esp,0x1c
c00099a1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00099a5:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c00099aa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00099b0:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c00099b6:	83 e0 01             	and    eax,0x1
c00099b9:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c00099bd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00099c1:	0f 85 cc 00 00 00    	jne    c0009a93 <VAS::allocatePages(int, int)+0xf9>
c00099c7:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00099ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099ce:	85 c0                	test   eax,eax
c00099d0:	0f 84 a1 00 00 00    	je     c0009a77 <VAS::allocatePages(int, int)+0xdd>
c00099d6:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00099da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00099de:	c1 e6 0c             	shl    esi,0xc
c00099e1:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00099e5:	85 c0                	test   eax,eax
c00099e7:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00099ea:	7e 33                	jle    c0009a1f <VAS::allocatePages(int, int)+0x85>
c00099ec:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00099f0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00099f4:	81 cd 00 04 00 00    	or     ebp,0x400
c00099fa:	e8 96 e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00099ff:	55                   	push   ebp
c0009a00:	53                   	push   ebx
c0009a01:	50                   	push   eax
c0009a02:	57                   	push   edi
c0009a03:	e8 8e fe ff ff       	call   c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009a10:	74 03                	je     c0009a15 <VAS::allocatePages(int, int)+0x7b>
c0009a12:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009a15:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009a1b:	39 de                	cmp    esi,ebx
c0009a1d:	75 db                	jne    c00099fa <VAS::allocatePages(int, int)+0x60>
c0009a1f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009a24:	75 12                	jne    c0009a38 <VAS::allocatePages(int, int)+0x9e>
c0009a26:	0f 20 d8             	mov    eax,cr3
c0009a29:	0f 22 d8             	mov    cr3,eax
c0009a2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a30:	83 c4 1c             	add    esp,0x1c
c0009a33:	5b                   	pop    ebx
c0009a34:	5e                   	pop    esi
c0009a35:	5f                   	pop    edi
c0009a36:	5d                   	pop    ebp
c0009a37:	c3                   	ret    
c0009a38:	c1 ee 0a             	shr    esi,0xa
c0009a3b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009a3f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009a45:	c1 eb 0a             	shr    ebx,0xa
c0009a48:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009a4e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009a54:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009a5a:	39 c3                	cmp    ebx,eax
c0009a5c:	77 ce                	ja     c0009a2c <VAS::allocatePages(int, int)+0x92>
c0009a5e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009a61:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009a67:	39 d8                	cmp    eax,ebx
c0009a69:	73 f3                	jae    c0009a5e <VAS::allocatePages(int, int)+0xc4>
c0009a6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a6f:	83 c4 1c             	add    esp,0x1c
c0009a72:	5b                   	pop    ebx
c0009a73:	5e                   	pop    esi
c0009a74:	5f                   	pop    edi
c0009a75:	5d                   	pop    ebp
c0009a76:	c3                   	ret    
c0009a77:	83 ec 0c             	sub    esp,0xc
c0009a7a:	68 28 d5 01 c0       	push   0xc001d528
c0009a7f:	e8 47 66 00 00       	call   c00100cb <KePanic(char const*)>
c0009a84:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009a87:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009a8b:	83 c4 10             	add    esp,0x10
c0009a8e:	e9 43 ff ff ff       	jmp    c00099d6 <VAS::allocatePages(int, int)+0x3c>
c0009a93:	83 ec 0c             	sub    esp,0xc
c0009a96:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009a9a:	51                   	push   ecx
c0009a9b:	e8 61 f7 ff ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c0009aa0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009aa4:	83 c4 10             	add    esp,0x10
c0009aa7:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009aac:	0f 87 9b 00 00 00    	ja     c0009b4d <VAS::allocatePages(int, int)+0x1b3>
c0009ab2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ab6:	85 d2                	test   edx,edx
c0009ab8:	7e 3c                	jle    c0009af6 <VAS::allocatePages(int, int)+0x15c>
c0009aba:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009abe:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009ac2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ac6:	c1 e5 0c             	shl    ebp,0xc
c0009ac9:	81 ce 00 04 00 00    	or     esi,0x400
c0009acf:	01 dd                	add    ebp,ebx
c0009ad1:	e8 bf df ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009ad6:	56                   	push   esi
c0009ad7:	53                   	push   ebx
c0009ad8:	50                   	push   eax
c0009ad9:	57                   	push   edi
c0009ada:	e8 b7 fd ff ff       	call   c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009adf:	83 c4 10             	add    esp,0x10
c0009ae2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009ae7:	74 03                	je     c0009aec <VAS::allocatePages(int, int)+0x152>
c0009ae9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009aec:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009af2:	39 dd                	cmp    ebp,ebx
c0009af4:	75 db                	jne    c0009ad1 <VAS::allocatePages(int, int)+0x137>
c0009af6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009afb:	0f 84 25 ff ff ff    	je     c0009a26 <VAS::allocatePages(int, int)+0x8c>
c0009b01:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b05:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b09:	89 d3                	mov    ebx,edx
c0009b0b:	c1 e0 0c             	shl    eax,0xc
c0009b0e:	c1 eb 0a             	shr    ebx,0xa
c0009b11:	01 d0                	add    eax,edx
c0009b13:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009b19:	c1 e8 0a             	shr    eax,0xa
c0009b1c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009b22:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009b27:	2d 00 00 40 00       	sub    eax,0x400000
c0009b2c:	39 c3                	cmp    ebx,eax
c0009b2e:	0f 87 f8 fe ff ff    	ja     c0009a2c <VAS::allocatePages(int, int)+0x92>
c0009b34:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b37:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b3d:	39 d8                	cmp    eax,ebx
c0009b3f:	73 f3                	jae    c0009b34 <VAS::allocatePages(int, int)+0x19a>
c0009b41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b45:	83 c4 1c             	add    esp,0x1c
c0009b48:	5b                   	pop    ebx
c0009b49:	5e                   	pop    esi
c0009b4a:	5f                   	pop    edi
c0009b4b:	5d                   	pop    ebp
c0009b4c:	c3                   	ret    
c0009b4d:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c0009b52:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b58:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009b5f:	0f 84 4d ff ff ff    	je     c0009ab2 <VAS::allocatePages(int, int)+0x118>
c0009b65:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009b6d:	e9 40 ff ff ff       	jmp    c0009ab2 <VAS::allocatePages(int, int)+0x118>

c0009b72 <VAS::setCPUSpecific(unsigned long)>:
c0009b72:	83 ec 0c             	sub    esp,0xc
c0009b75:	6a 05                	push   0x5
c0009b77:	68 00 00 40 c2       	push   0xc2400000
c0009b7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b80:	50                   	push   eax
c0009b81:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009b85:	52                   	push   edx
c0009b86:	e8 0b fd ff ff       	call   c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b8b:	83 c4 1c             	add    esp,0x1c
c0009b8e:	c3                   	ret    
c0009b8f:	90                   	nop

c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009b90:	55                   	push   ebp
c0009b91:	57                   	push   edi
c0009b92:	56                   	push   esi
c0009b93:	53                   	push   ebx
c0009b94:	83 ec 1c             	sub    esp,0x1c
c0009b97:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c0009b9c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009ba0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ba6:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009baa:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009bb0:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009bb4:	83 e0 01             	and    eax,0x1
c0009bb7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009bbb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009bbf:	85 c0                	test   eax,eax
c0009bc1:	7e 39                	jle    c0009bfc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009bc3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009bc7:	89 f3                	mov    ebx,esi
c0009bc9:	c1 e0 0c             	shl    eax,0xc
c0009bcc:	01 f0                	add    eax,esi
c0009bce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009bd2:	55                   	push   ebp
c0009bd3:	53                   	push   ebx
c0009bd4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009bd8:	29 f0                	sub    eax,esi
c0009bda:	01 d8                	add    eax,ebx
c0009bdc:	50                   	push   eax
c0009bdd:	57                   	push   edi
c0009bde:	e8 b3 fc ff ff       	call   c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009be3:	83 c4 10             	add    esp,0x10
c0009be6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009beb:	74 03                	je     c0009bf0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009bed:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009bf0:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009bf6:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009bfa:	75 d6                	jne    c0009bd2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009bfc:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c01:	75 10                	jne    c0009c13 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009c03:	0f 20 d8             	mov    eax,cr3
c0009c06:	0f 22 d8             	mov    cr3,eax
c0009c09:	83 c4 1c             	add    esp,0x1c
c0009c0c:	89 f0                	mov    eax,esi
c0009c0e:	5b                   	pop    ebx
c0009c0f:	5e                   	pop    esi
c0009c10:	5f                   	pop    edi
c0009c11:	5d                   	pop    ebp
c0009c12:	c3                   	ret    
c0009c13:	89 f3                	mov    ebx,esi
c0009c15:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c19:	c1 eb 0a             	shr    ebx,0xa
c0009c1c:	c1 e0 0c             	shl    eax,0xc
c0009c1f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009c25:	01 f0                	add    eax,esi
c0009c27:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009c2d:	c1 e8 0a             	shr    eax,0xa
c0009c30:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c35:	2d 00 00 40 00       	sub    eax,0x400000
c0009c3a:	39 c3                	cmp    ebx,eax
c0009c3c:	77 cb                	ja     c0009c09 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009c3e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c41:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c47:	39 d8                	cmp    eax,ebx
c0009c49:	73 f3                	jae    c0009c3e <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009c4b:	83 c4 1c             	add    esp,0x1c
c0009c4e:	89 f0                	mov    eax,esi
c0009c50:	5b                   	pop    ebx
c0009c51:	5e                   	pop    esi
c0009c52:	5f                   	pop    edi
c0009c53:	5d                   	pop    ebp
c0009c54:	c3                   	ret    
c0009c55:	90                   	nop

c0009c56 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009c56:	55                   	push   ebp
c0009c57:	57                   	push   edi
c0009c58:	56                   	push   esi
c0009c59:	53                   	push   ebx
c0009c5a:	83 ec 1c             	sub    esp,0x1c
c0009c5d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009c61:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009c65:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009c69:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009c6d:	a9 ff 0f 00 00       	test   eax,0xfff
c0009c72:	75 4a                	jne    c0009cbe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009c74:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009c78:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009c7b:	c1 eb 16             	shr    ebx,0x16
c0009c7e:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009c85:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009c89:	74 4d                	je     c0009cd8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009c8b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009c8f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009c93:	c1 e8 0a             	shr    eax,0xa
c0009c96:	80 fa 01             	cmp    dl,0x1
c0009c99:	19 d2                	sbb    edx,edx
c0009c9b:	c1 e3 0c             	shl    ebx,0xc
c0009c9e:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009ca2:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009ca8:	25 fc 0f 00 00       	and    eax,0xffc
c0009cad:	01 d8                	add    eax,ebx
c0009caf:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009cb6:	83 c4 1c             	add    esp,0x1c
c0009cb9:	5b                   	pop    ebx
c0009cba:	5e                   	pop    esi
c0009cbb:	5f                   	pop    edi
c0009cbc:	5d                   	pop    ebp
c0009cbd:	c3                   	ret    
c0009cbe:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009cc2:	83 ec 0c             	sub    esp,0xc
c0009cc5:	68 54 d5 01 c0       	push   0xc001d554
c0009cca:	e8 fc 63 00 00       	call   c00100cb <KePanic(char const*)>
c0009ccf:	83 c4 10             	add    esp,0x10
c0009cd2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009cd6:	eb 9c                	jmp    c0009c74 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009cd8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cdc:	e8 b4 dd ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009ce1:	83 ec 0c             	sub    esp,0xc
c0009ce4:	89 c5                	mov    ebp,eax
c0009ce6:	8b 0d 30 05 02 c0    	mov    ecx,DWORD PTR ds:0xc0020530
c0009cec:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009cf0:	6a 01                	push   0x1
c0009cf2:	e8 0a f5 ff ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c0009cf7:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009cfe:	6a 01                	push   0x1
c0009d00:	50                   	push   eax
c0009d01:	55                   	push   ebp
c0009d02:	81 cd 07 04 00 00    	or     ebp,0x407
c0009d08:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009d0c:	51                   	push   ecx
c0009d0d:	e8 7e fe ff ff       	call   c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009d12:	83 c4 1c             	add    esp,0x1c
c0009d15:	68 00 10 00 00       	push   0x1000
c0009d1a:	6a 00                	push   0x0
c0009d1c:	50                   	push   eax
c0009d1d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d21:	e8 aa 67 ff ff       	call   c00004d0 <memset>
c0009d26:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009d2a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009d2d:	e8 ff f7 ff ff       	call   c0009531 <Virt::freeKernelVirtualPages(unsigned long)>
c0009d32:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d35:	83 c4 10             	add    esp,0x10
c0009d38:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009d3b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009d3f:	e9 47 ff ff ff       	jmp    c0009c8b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009d44 <VAS::VAS(bool)>:
c0009d44:	53                   	push   ebx
c0009d45:	83 ec 28             	sub    esp,0x28
c0009d48:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d4c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009d50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d54:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009d5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d5f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009d66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d6a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009d6e:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009d71:	e8 1f dd ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009d76:	89 c2                	mov    edx,eax
c0009d78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d7c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009d7f:	8b 1d 30 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020530
c0009d85:	83 ec 0c             	sub    esp,0xc
c0009d88:	6a 01                	push   0x1
c0009d8a:	e8 72 f4 ff ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c0009d8f:	83 c4 10             	add    esp,0x10
c0009d92:	89 c2                	mov    edx,eax
c0009d94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d98:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009d9b:	83 ec 0c             	sub    esp,0xc
c0009d9e:	6a 03                	push   0x3
c0009da0:	6a 01                	push   0x1
c0009da2:	52                   	push   edx
c0009da3:	50                   	push   eax
c0009da4:	53                   	push   ebx
c0009da5:	e8 e6 fd ff ff       	call   c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009daa:	83 c4 20             	add    esp,0x20
c0009dad:	89 c2                	mov    edx,eax
c0009daf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009db3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009db6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009dbe:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009dc6:	7f 1c                	jg     c0009de4 <VAS::VAS(bool)+0xa0>
c0009dc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dcc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009dcf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dd3:	c1 e2 02             	shl    edx,0x2
c0009dd6:	01 d0                	add    eax,edx
c0009dd8:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009dde:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009de2:	eb da                	jmp    c0009dbe <VAS::VAS(bool)+0x7a>
c0009de4:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009dec:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009df4:	7f 7a                	jg     c0009e70 <VAS::VAS(bool)+0x12c>
c0009df6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009dfa:	2d 00 02 00 00       	sub    eax,0x200
c0009dff:	c1 e0 0c             	shl    eax,0xc
c0009e02:	83 c8 03             	or     eax,0x3
c0009e05:	89 c2                	mov    edx,eax
c0009e07:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c0009e0c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e12:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009e18:	83 e0 10             	and    eax,0x10
c0009e1b:	84 c0                	test   al,al
c0009e1d:	74 07                	je     c0009e26 <VAS::VAS(bool)+0xe2>
c0009e1f:	b8 00 01 00 00       	mov    eax,0x100
c0009e24:	eb 05                	jmp    c0009e2b <VAS::VAS(bool)+0xe7>
c0009e26:	b8 00 00 00 00       	mov    eax,0x0
c0009e2b:	09 d0                	or     eax,edx
c0009e2d:	89 c1                	mov    ecx,eax
c0009e2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e33:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e36:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009e3a:	c1 e2 02             	shl    edx,0x2
c0009e3d:	01 d0                	add    eax,edx
c0009e3f:	89 ca                	mov    edx,ecx
c0009e41:	89 10                	mov    DWORD PTR [eax],edx
c0009e43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e47:	2d 40 03 00 00       	sub    eax,0x340
c0009e4c:	83 f8 7f             	cmp    eax,0x7f
c0009e4f:	77 16                	ja     c0009e67 <VAS::VAS(bool)+0x123>
c0009e51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e58:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009e5c:	c1 e2 02             	shl    edx,0x2
c0009e5f:	01 d0                	add    eax,edx
c0009e61:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009e67:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009e6b:	e9 7c ff ff ff       	jmp    c0009dec <VAS::VAS(bool)+0xa8>
c0009e70:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c0009e75:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e7b:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009e81:	83 e0 10             	and    eax,0x10
c0009e84:	84 c0                	test   al,al
c0009e86:	74 07                	je     c0009e8f <VAS::VAS(bool)+0x14b>
c0009e88:	b8 03 41 00 00       	mov    eax,0x4103
c0009e8d:	eb 05                	jmp    c0009e94 <VAS::VAS(bool)+0x150>
c0009e8f:	b8 03 40 00 00       	mov    eax,0x4003
c0009e94:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009e98:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009e9b:	81 c2 20 0c 00 00    	add    edx,0xc20
c0009ea1:	89 02                	mov    DWORD PTR [edx],eax
c0009ea3:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c0009ea8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009eae:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009eb4:	83 ec 08             	sub    esp,0x8
c0009eb7:	50                   	push   eax
c0009eb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009ebc:	e8 b1 fc ff ff       	call   c0009b72 <VAS::setCPUSpecific(unsigned long)>
c0009ec1:	83 c4 10             	add    esp,0x10
c0009ec4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ec8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009ecb:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c0009ed0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ed6:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009edc:	83 e0 10             	and    eax,0x10
c0009edf:	84 c0                	test   al,al
c0009ee1:	74 07                	je     c0009eea <VAS::VAS(bool)+0x1a6>
c0009ee3:	b8 00 01 00 00       	mov    eax,0x100
c0009ee8:	eb 05                	jmp    c0009eef <VAS::VAS(bool)+0x1ab>
c0009eea:	b8 00 00 00 00       	mov    eax,0x0
c0009eef:	09 c2                	or     edx,eax
c0009ef1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ef5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ef8:	05 fc 0f 00 00       	add    eax,0xffc
c0009efd:	83 ca 03             	or     edx,0x3
c0009f00:	89 10                	mov    DWORD PTR [eax],edx
c0009f02:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c0009f07:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f0d:	83 ec 0c             	sub    esp,0xc
c0009f10:	50                   	push   eax
c0009f11:	e8 12 1c 00 00       	call   c000bb28 <Device::getName()>
c0009f16:	83 c4 10             	add    esp,0x10
c0009f19:	83 ec 08             	sub    esp,0x8
c0009f1c:	68 f7 d5 01 c0       	push   0xc001d5f7
c0009f21:	50                   	push   eax
c0009f22:	e8 b9 67 ff ff       	call   c00006e0 <strcmp>
c0009f27:	83 c4 10             	add    esp,0x10
c0009f2a:	85 c0                	test   eax,eax
c0009f2c:	0f 94 c0             	sete   al
c0009f2f:	84 c0                	test   al,al
c0009f31:	0f 84 87 00 00 00    	je     c0009fbe <VAS::VAS(bool)+0x27a>
c0009f37:	fa                   	cli    
c0009f38:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0009f3d:	40                   	inc    eax
c0009f3e:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c0009f43:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c0009f48:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f4e:	05 7c 09 00 00       	add    eax,0x97c
c0009f53:	83 ec 0c             	sub    esp,0xc
c0009f56:	50                   	push   eax
c0009f57:	e8 5a d3 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0009f5c:	83 c4 10             	add    esp,0x10
c0009f5f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f64:	89 c3                	mov    ebx,eax
c0009f66:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c0009f6b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f71:	05 7c 09 00 00       	add    eax,0x97c
c0009f76:	83 ec 0c             	sub    esp,0xc
c0009f79:	50                   	push   eax
c0009f7a:	e8 37 d3 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0009f7f:	83 c4 10             	add    esp,0x10
c0009f82:	83 ec 08             	sub    esp,0x8
c0009f85:	50                   	push   eax
c0009f86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f8a:	e8 83 f5 ff ff       	call   c0009512 <VAS::getPageTableEntry(unsigned long)>
c0009f8f:	83 c4 10             	add    esp,0x10
c0009f92:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f94:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f99:	6a 11                	push   0x11
c0009f9b:	53                   	push   ebx
c0009f9c:	50                   	push   eax
c0009f9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009fa1:	e8 f0 f8 ff ff       	call   c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009fa6:	83 c4 10             	add    esp,0x10
c0009fa9:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0009fae:	48                   	dec    eax
c0009faf:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c0009fb4:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0009fb9:	85 c0                	test   eax,eax
c0009fbb:	75 01                	jne    c0009fbe <VAS::VAS(bool)+0x27a>
c0009fbd:	fb                   	sti    
c0009fbe:	90                   	nop
c0009fbf:	83 c4 28             	add    esp,0x28
c0009fc2:	5b                   	pop    ebx
c0009fc3:	c3                   	ret    

c0009fc4 <VAS::evict(unsigned long)>:
c0009fc4:	55                   	push   ebp
c0009fc5:	57                   	push   edi
c0009fc6:	56                   	push   esi
c0009fc7:	53                   	push   ebx
c0009fc8:	83 ec 1c             	sub    esp,0x1c
c0009fcb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fcf:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009fd3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009fd7:	e8 66 f3 ff ff       	call   c0009342 <Virt::allocateSwapfilePage()>
c0009fdc:	8b 0d 4c f1 01 c0    	mov    ecx,DWORD PTR ds:0xc001f14c
c0009fe2:	89 c7                	mov    edi,eax
c0009fe4:	85 c9                	test   ecx,ecx
c0009fe6:	7e 3e                	jle    c000a026 <VAS::evict(unsigned long)+0x62>
c0009fe8:	89 ee                	mov    esi,ebp
c0009fea:	31 db                	xor    ebx,ebx
c0009fec:	83 ec 0c             	sub    esp,0xc
c0009fef:	57                   	push   edi
c0009ff0:	e8 3b f3 ff ff       	call   c0009330 <Virt::swapIDToSector(unsigned long)>
c0009ff5:	89 34 24             	mov    DWORD PTR [esp],esi
c0009ff8:	01 d8                	add    eax,ebx
c0009ffa:	6a 01                	push   0x1
c0009ffc:	31 d2                	xor    edx,edx
c0009ffe:	43                   	inc    ebx
c0009fff:	52                   	push   edx
c000a000:	81 c6 00 02 00 00    	add    esi,0x200
c000a006:	50                   	push   eax
c000a007:	0f be 05 58 f1 01 c0 	movsx  eax,BYTE PTR ds:0xc001f158
c000a00e:	8b 14 85 9c 28 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd764]
c000a015:	52                   	push   edx
c000a016:	e8 9f 2b 00 00       	call   c000cbba <LogicalDisk::write(unsigned long long, int, void*)>
c000a01b:	83 c4 20             	add    esp,0x20
c000a01e:	39 1d 4c f1 01 c0    	cmp    DWORD PTR ds:0xc001f14c,ebx
c000a024:	7f c6                	jg     c0009fec <VAS::evict(unsigned long)+0x28>
c000a026:	83 ec 08             	sub    esp,0x8
c000a029:	c1 e7 0b             	shl    edi,0xb
c000a02c:	55                   	push   ebp
c000a02d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a031:	50                   	push   eax
c000a032:	e8 db f4 ff ff       	call   c0009512 <VAS::getPageTableEntry(unsigned long)>
c000a037:	8b 10                	mov    edx,DWORD PTR [eax]
c000a039:	89 d1                	mov    ecx,edx
c000a03b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a041:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a047:	09 cf                	or     edi,ecx
c000a049:	89 38                	mov    DWORD PTR [eax],edi
c000a04b:	89 14 24             	mov    DWORD PTR [esp],edx
c000a04e:	ff 05 28 05 02 c0    	inc    DWORD PTR ds:0xc0020528
c000a054:	e8 da d9 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000a059:	0f 20 d8             	mov    eax,cr3
c000a05c:	0f 22 d8             	mov    cr3,eax
c000a05f:	a1 24 05 02 c0       	mov    eax,ds:0xc0020524
c000a064:	c7 44 24 40 05 d6 01 c0 	mov    DWORD PTR [esp+0x40],0xc001d605
c000a06c:	8d 50 01             	lea    edx,[eax+0x1]
c000a06f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a073:	89 15 24 05 02 c0    	mov    DWORD PTR ds:0xc0020524,edx
c000a079:	83 c4 2c             	add    esp,0x2c
c000a07c:	5b                   	pop    ebx
c000a07d:	5e                   	pop    esi
c000a07e:	5f                   	pop    edi
c000a07f:	5d                   	pop    ebp
c000a080:	e9 cf 03 00 00       	jmp    c000a454 <Dbg::kprintf(char const*, ...)>
c000a085:	90                   	nop

c000a086 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a086:	55                   	push   ebp
c000a087:	57                   	push   edi
c000a088:	56                   	push   esi
c000a089:	53                   	push   ebx
c000a08a:	83 ec 14             	sub    esp,0x14
c000a08d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a091:	53                   	push   ebx
c000a092:	68 16 d6 01 c0       	push   0xc001d616
c000a097:	e8 b8 03 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000a09c:	83 c4 10             	add    esp,0x10
c000a09f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a0a5:	74 21                	je     c000a0c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a0a7:	83 ec 08             	sub    esp,0x8
c000a0aa:	53                   	push   ebx
c000a0ab:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a0af:	57                   	push   edi
c000a0b0:	e8 5d f4 ff ff       	call   c0009512 <VAS::getPageTableEntry(unsigned long)>
c000a0b5:	83 c4 10             	add    esp,0x10
c000a0b8:	89 c6                	mov    esi,eax
c000a0ba:	85 c0                	test   eax,eax
c000a0bc:	74 0a                	je     c000a0c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a0be:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a0c0:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a0c6:	74 0a                	je     c000a0d2 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a0c8:	31 c0                	xor    eax,eax
c000a0ca:	83 c4 0c             	add    esp,0xc
c000a0cd:	5b                   	pop    ebx
c000a0ce:	5e                   	pop    esi
c000a0cf:	5f                   	pop    edi
c000a0d0:	5d                   	pop    ebp
c000a0d1:	c3                   	ret    
c000a0d2:	e8 be d9 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a0d7:	c1 ed 0b             	shr    ebp,0xb
c000a0da:	8b 16                	mov    edx,DWORD PTR [esi]
c000a0dc:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a0e2:	09 c2                	or     edx,eax
c000a0e4:	81 ca 01 08 00 00    	or     edx,0x801
c000a0ea:	89 16                	mov    DWORD PTR [esi],edx
c000a0ec:	8b 35 4c f1 01 c0    	mov    esi,DWORD PTR ds:0xc001f14c
c000a0f2:	85 f6                	test   esi,esi
c000a0f4:	7e 3e                	jle    c000a134 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a0f6:	89 df                	mov    edi,ebx
c000a0f8:	31 f6                	xor    esi,esi
c000a0fa:	83 ec 0c             	sub    esp,0xc
c000a0fd:	55                   	push   ebp
c000a0fe:	e8 2d f2 ff ff       	call   c0009330 <Virt::swapIDToSector(unsigned long)>
c000a103:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a106:	01 f0                	add    eax,esi
c000a108:	6a 01                	push   0x1
c000a10a:	31 d2                	xor    edx,edx
c000a10c:	46                   	inc    esi
c000a10d:	52                   	push   edx
c000a10e:	81 c7 00 02 00 00    	add    edi,0x200
c000a114:	50                   	push   eax
c000a115:	0f be 05 58 f1 01 c0 	movsx  eax,BYTE PTR ds:0xc001f158
c000a11c:	8b 0c 85 9c 28 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd764]
c000a123:	51                   	push   ecx
c000a124:	e8 25 2a 00 00       	call   c000cb4e <LogicalDisk::read(unsigned long long, int, void*)>
c000a129:	83 c4 20             	add    esp,0x20
c000a12c:	39 35 4c f1 01 c0    	cmp    DWORD PTR ds:0xc001f14c,esi
c000a132:	7f c6                	jg     c000a0fa <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a134:	a1 28 05 02 c0       	mov    eax,ds:0xc0020528
c000a139:	48                   	dec    eax
c000a13a:	52                   	push   edx
c000a13b:	a3 28 05 02 c0       	mov    ds:0xc0020528,eax
c000a140:	50                   	push   eax
c000a141:	53                   	push   ebx
c000a142:	68 29 d6 01 c0       	push   0xc001d629
c000a147:	e8 08 03 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000a14c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a14f:	e8 be f1 ff ff       	call   c0009312 <Virt::freeSwapfilePage(unsigned long)>
c000a154:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c000a159:	83 c4 10             	add    esp,0x10
c000a15c:	48                   	dec    eax
c000a15d:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c000a162:	85 c0                	test   eax,eax
c000a164:	75 01                	jne    c000a167 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a166:	fb                   	sti    
c000a167:	0f 20 d8             	mov    eax,cr3
c000a16a:	0f 22 d8             	mov    cr3,eax
c000a16d:	b0 01                	mov    al,0x1
c000a16f:	e9 56 ff ff ff       	jmp    c000a0ca <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a174 <VAS::scanForEviction()>:
c000a174:	57                   	push   edi
c000a175:	31 ff                	xor    edi,edi
c000a177:	56                   	push   esi
c000a178:	53                   	push   ebx
c000a179:	83 ec 10             	sub    esp,0x10
c000a17c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a180:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a183:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a189:	75 0e                	jne    c000a199 <VAS::scanForEviction()+0x25>
c000a18b:	89 da                	mov    edx,ebx
c000a18d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a190:	c1 ea 16             	shr    edx,0x16
c000a193:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a197:	74 4e                	je     c000a1e7 <VAS::scanForEviction()+0x73>
c000a199:	53                   	push   ebx
c000a19a:	56                   	push   esi
c000a19b:	e8 72 f3 ff ff       	call   c0009512 <VAS::getPageTableEntry(unsigned long)>
c000a1a0:	5a                   	pop    edx
c000a1a1:	8b 10                	mov    edx,DWORD PTR [eax]
c000a1a3:	59                   	pop    ecx
c000a1a4:	89 d1                	mov    ecx,edx
c000a1a6:	81 e1 01 08 00 00    	and    ecx,0x801
c000a1ac:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a1b2:	74 3e                	je     c000a1f2 <VAS::scanForEviction()+0x7e>
c000a1b4:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a1ba:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a1c0:	76 2b                	jbe    c000a1ed <VAS::scanForEviction()+0x79>
c000a1c2:	47                   	inc    edi
c000a1c3:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a1ca:	83 ff 03             	cmp    edi,0x3
c000a1cd:	74 32                	je     c000a201 <VAS::scanForEviction()+0x8d>
c000a1cf:	31 db                	xor    ebx,ebx
c000a1d1:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a1d7:	75 c0                	jne    c000a199 <VAS::scanForEviction()+0x25>
c000a1d9:	89 da                	mov    edx,ebx
c000a1db:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a1de:	c1 ea 16             	shr    edx,0x16
c000a1e1:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a1e5:	75 b2                	jne    c000a199 <VAS::scanForEviction()+0x25>
c000a1e7:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a1ed:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a1f0:	eb 91                	jmp    c000a183 <VAS::scanForEviction()+0xf>
c000a1f2:	f6 c2 20             	test   dl,0x20
c000a1f5:	74 13                	je     c000a20a <VAS::scanForEviction()+0x96>
c000a1f7:	83 e2 df             	and    edx,0xffffffdf
c000a1fa:	89 10                	mov    DWORD PTR [eax],edx
c000a1fc:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a1ff:	eb b3                	jmp    c000a1b4 <VAS::scanForEviction()+0x40>
c000a201:	83 c4 10             	add    esp,0x10
c000a204:	31 c0                	xor    eax,eax
c000a206:	5b                   	pop    ebx
c000a207:	5e                   	pop    esi
c000a208:	5f                   	pop    edi
c000a209:	c3                   	ret    
c000a20a:	83 ec 08             	sub    esp,0x8
c000a20d:	89 d0                	mov    eax,edx
c000a20f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a214:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a218:	53                   	push   ebx
c000a219:	68 3e d6 01 c0       	push   0xc001d63e
c000a21e:	e8 31 02 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000a223:	58                   	pop    eax
c000a224:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a227:	5a                   	pop    edx
c000a228:	51                   	push   ecx
c000a229:	56                   	push   esi
c000a22a:	e8 95 fd ff ff       	call   c0009fc4 <VAS::evict(unsigned long)>
c000a22f:	5b                   	pop    ebx
c000a230:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a233:	5f                   	pop    edi
c000a234:	50                   	push   eax
c000a235:	68 52 d6 01 c0       	push   0xc001d652
c000a23a:	e8 15 02 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000a23f:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a246:	83 c4 10             	add    esp,0x10
c000a249:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a24d:	83 c4 10             	add    esp,0x10
c000a250:	5b                   	pop    ebx
c000a251:	5e                   	pop    esi
c000a252:	5f                   	pop    edi
c000a253:	c3                   	ret    

c000a254 <mapVASFirstTime>:
c000a254:	55                   	push   ebp
c000a255:	57                   	push   edi
c000a256:	56                   	push   esi
c000a257:	53                   	push   ebx
c000a258:	83 ec 0c             	sub    esp,0xc
c000a25b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a260:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a263:	4a                   	dec    edx
c000a264:	0f 84 8c 00 00 00    	je     c000a2f6 <mapVASFirstTime+0xa2>
c000a26a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a26d:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a270:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a275:	c1 e5 15             	shl    ebp,0x15
c000a278:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a27d:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a283:	29 eb                	sub    ebx,ebp
c000a285:	29 ef                	sub    edi,ebp
c000a287:	e8 09 d8 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a28c:	83 ec 0c             	sub    esp,0xc
c000a28f:	68 03 04 00 00       	push   0x403
c000a294:	6a 01                	push   0x1
c000a296:	53                   	push   ebx
c000a297:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a29d:	50                   	push   eax
c000a29e:	56                   	push   esi
c000a29f:	e8 ec f8 ff ff       	call   c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a2a4:	83 c4 20             	add    esp,0x20
c000a2a7:	39 fb                	cmp    ebx,edi
c000a2a9:	75 dc                	jne    c000a287 <mapVASFirstTime+0x33>
c000a2ab:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a2b0:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a2b5:	29 eb                	sub    ebx,ebp
c000a2b7:	29 ef                	sub    edi,ebp
c000a2b9:	e8 d7 d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a2be:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a2c2:	19 d2                	sbb    edx,edx
c000a2c4:	83 ec 0c             	sub    esp,0xc
c000a2c7:	83 e2 04             	and    edx,0x4
c000a2ca:	81 c2 03 04 00 00    	add    edx,0x403
c000a2d0:	52                   	push   edx
c000a2d1:	6a 01                	push   0x1
c000a2d3:	53                   	push   ebx
c000a2d4:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a2da:	50                   	push   eax
c000a2db:	56                   	push   esi
c000a2dc:	e8 af f8 ff ff       	call   c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a2e1:	83 c4 20             	add    esp,0x20
c000a2e4:	39 df                	cmp    edi,ebx
c000a2e6:	75 d1                	jne    c000a2b9 <mapVASFirstTime+0x65>
c000a2e8:	0f 20 d8             	mov    eax,cr3
c000a2eb:	0f 22 d8             	mov    cr3,eax
c000a2ee:	83 c4 0c             	add    esp,0xc
c000a2f1:	5b                   	pop    ebx
c000a2f2:	5e                   	pop    esi
c000a2f3:	5f                   	pop    edi
c000a2f4:	5d                   	pop    ebp
c000a2f5:	c3                   	ret    
c000a2f6:	83 ec 0c             	sub    esp,0xc
c000a2f9:	68 65 d6 01 c0       	push   0xc001d665
c000a2fe:	e8 51 01 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000a303:	83 c4 10             	add    esp,0x10
c000a306:	83 c4 0c             	add    esp,0xc
c000a309:	5b                   	pop    ebx
c000a30a:	5e                   	pop    esi
c000a30b:	5f                   	pop    edi
c000a30c:	5d                   	pop    ebp
c000a30d:	c3                   	ret    

c000a30e <__cxa_atexit>:
c000a30e:	31 c0                	xor    eax,eax
c000a310:	c3                   	ret    

c000a311 <__cxa_finalize>:
c000a311:	c3                   	ret    

c000a312 <__stack_chk_fail>:
c000a312:	55                   	push   ebp
c000a313:	89 e5                	mov    ebp,esp
c000a315:	83 ec 10             	sub    esp,0x10
c000a318:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a31b:	68 7e d6 01 c0       	push   0xc001d67e
c000a320:	e8 2f 01 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000a325:	58                   	pop    eax
c000a326:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a329:	5a                   	pop    edx
c000a32a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a32d:	68 7e d6 01 c0       	push   0xc001d67e
c000a332:	e8 1d 01 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000a337:	c7 04 24 86 d6 01 c0 	mov    DWORD PTR [esp],0xc001d686
c000a33e:	e8 88 5d 00 00       	call   c00100cb <KePanic(char const*)>
c000a343:	83 c4 10             	add    esp,0x10
c000a346:	c9                   	leave  
c000a347:	c3                   	ret    

c000a348 <__cxa_pure_virtual>:
c000a348:	83 ec 18             	sub    esp,0x18
c000a34b:	68 9e d6 01 c0       	push   0xc001d69e
c000a350:	e8 76 5d 00 00       	call   c00100cb <KePanic(char const*)>
c000a355:	83 c4 1c             	add    esp,0x1c
c000a358:	c3                   	ret    

c000a359 <operator new[](unsigned long)>:
c000a359:	e9 5b d4 ff ff       	jmp    c00077b9 <malloc>

c000a35e <operator delete(void*, unsigned long)>:
c000a35e:	e9 76 d4 ff ff       	jmp    c00077d9 <rfree>

c000a363 <operator delete[](void*)>:
c000a363:	e9 71 d4 ff ff       	jmp    c00077d9 <rfree>

c000a368 <operator delete[](void*, unsigned long)>:
c000a368:	e9 6c d4 ff ff       	jmp    c00077d9 <rfree>

c000a36d <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a36d:	55                   	push   ebp
c000a36e:	b9 04 00 00 00       	mov    ecx,0x4
c000a373:	57                   	push   edi
c000a374:	56                   	push   esi
c000a375:	be b3 d2 01 c0       	mov    esi,0xc001d2b3
c000a37a:	53                   	push   ebx
c000a37b:	83 ec 20             	sub    esp,0x20
c000a37e:	a1 b2 d2 01 c0       	mov    eax,ds:0xc001d2b2
c000a383:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a387:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a38b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a38f:	a1 bf d2 01 c0       	mov    eax,ds:0xc001d2bf
c000a394:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a398:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a39c:	fc                   	cld    
c000a39d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a39f:	89 ee                	mov    esi,ebp
c000a3a1:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a3a5:	eb 02                	jmp    c000a3a9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a3a7:	89 c6                	mov    esi,eax
c000a3a9:	31 d2                	xor    edx,edx
c000a3ab:	41                   	inc    ecx
c000a3ac:	89 f0                	mov    eax,esi
c000a3ae:	f7 f3                	div    ebx
c000a3b0:	39 de                	cmp    esi,ebx
c000a3b2:	73 f3                	jae    c000a3a7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a3b4:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a3b7:	eb 02                	jmp    c000a3bb <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a3b9:	89 c5                	mov    ebp,eax
c000a3bb:	31 d2                	xor    edx,edx
c000a3bd:	49                   	dec    ecx
c000a3be:	89 e8                	mov    eax,ebp
c000a3c0:	f7 f3                	div    ebx
c000a3c2:	39 dd                	cmp    ebp,ebx
c000a3c4:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a3c8:	88 11                	mov    BYTE PTR [ecx],dl
c000a3ca:	73 ed                	jae    c000a3b9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a3cc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a3d0:	83 c4 20             	add    esp,0x20
c000a3d3:	5b                   	pop    ebx
c000a3d4:	5e                   	pop    esi
c000a3d5:	5f                   	pop    edi
c000a3d6:	5d                   	pop    ebp
c000a3d7:	c3                   	ret    

c000a3d8 <Dbg::logc(char)>:
c000a3d8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a3dc:	f6 05 50 04 02 c0 10 	test   BYTE PTR ds:0xc0020450,0x10
c000a3e3:	75 12                	jne    c000a3f7 <Dbg::logc(char)+0x1f>
c000a3e5:	ba fd 03 00 00       	mov    edx,0x3fd
c000a3ea:	ec                   	in     al,dx
c000a3eb:	a8 20                	test   al,0x20
c000a3ed:	74 fb                	je     c000a3ea <Dbg::logc(char)+0x12>
c000a3ef:	ba f8 03 00 00       	mov    edx,0x3f8
c000a3f4:	88 c8                	mov    al,cl
c000a3f6:	ee                   	out    dx,al
c000a3f7:	c3                   	ret    

c000a3f8 <Dbg::logs(char*)>:
c000a3f8:	53                   	push   ebx
c000a3f9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a3fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a400:	84 c0                	test   al,al
c000a402:	74 0f                	je     c000a413 <Dbg::logs(char*)+0x1b>
c000a404:	50                   	push   eax
c000a405:	43                   	inc    ebx
c000a406:	e8 cd ff ff ff       	call   c000a3d8 <Dbg::logc(char)>
c000a40b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a40e:	5a                   	pop    edx
c000a40f:	84 c0                	test   al,al
c000a411:	75 f1                	jne    c000a404 <Dbg::logs(char*)+0xc>
c000a413:	5b                   	pop    ebx
c000a414:	c3                   	ret    

c000a415 <Dbg::logWriteInt(unsigned int)>:
c000a415:	83 ec 10             	sub    esp,0x10
c000a418:	6a 0a                	push   0xa
c000a41a:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a41e:	50                   	push   eax
c000a41f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a423:	50                   	push   eax
c000a424:	e8 44 ff ff ff       	call   c000a36d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a429:	50                   	push   eax
c000a42a:	e8 c9 ff ff ff       	call   c000a3f8 <Dbg::logs(char*)>
c000a42f:	83 c4 20             	add    esp,0x20
c000a432:	c3                   	ret    

c000a433 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a433:	83 ec 10             	sub    esp,0x10
c000a436:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a43a:	50                   	push   eax
c000a43b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a43f:	50                   	push   eax
c000a440:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a444:	52                   	push   edx
c000a445:	e8 23 ff ff ff       	call   c000a36d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a44a:	50                   	push   eax
c000a44b:	e8 a8 ff ff ff       	call   c000a3f8 <Dbg::logs(char*)>
c000a450:	83 c4 20             	add    esp,0x20
c000a453:	c3                   	ret    

c000a454 <Dbg::kprintf(char const*, ...)>:
c000a454:	55                   	push   ebp
c000a455:	57                   	push   edi
c000a456:	56                   	push   esi
c000a457:	53                   	push   ebx
c000a458:	83 ec 0c             	sub    esp,0xc
c000a45b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a45f:	f6 05 50 04 02 c0 10 	test   BYTE PTR ds:0xc0020450,0x10
c000a466:	74 08                	je     c000a470 <Dbg::kprintf(char const*, ...)+0x1c>
c000a468:	83 c4 0c             	add    esp,0xc
c000a46b:	5b                   	pop    ebx
c000a46c:	5e                   	pop    esi
c000a46d:	5f                   	pop    edi
c000a46e:	5d                   	pop    ebp
c000a46f:	c3                   	ret    
c000a470:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a474:	31 ff                	xor    edi,edi
c000a476:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a47a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a47d:	84 c0                	test   al,al
c000a47f:	74 e7                	je     c000a468 <Dbg::kprintf(char const*, ...)+0x14>
c000a481:	8d 77 01             	lea    esi,[edi+0x1]
c000a484:	3c 25                	cmp    al,0x25
c000a486:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a489:	75 47                	jne    c000a4d2 <Dbg::kprintf(char const*, ...)+0x7e>
c000a48b:	83 c7 02             	add    edi,0x2
c000a48e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a491:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a494:	83 e8 25             	sub    eax,0x25
c000a497:	3c 53                	cmp    al,0x53
c000a499:	0f 87 d2 00 00 00    	ja     c000a571 <Dbg::kprintf(char const*, ...)+0x11d>
c000a49f:	25 ff 00 00 00       	and    eax,0xff
c000a4a4:	ff 24 85 b4 d6 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe294c]
c000a4ab:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a4af:	89 c8                	mov    eax,ecx
c000a4b1:	83 c1 04             	add    ecx,0x4
c000a4b4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a4b8:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a4ba:	55                   	push   ebp
c000a4bb:	e8 55 ff ff ff       	call   c000a415 <Dbg::logWriteInt(unsigned int)>
c000a4c0:	58                   	pop    eax
c000a4c1:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a4c4:	84 c0                	test   al,al
c000a4c6:	74 a0                	je     c000a468 <Dbg::kprintf(char const*, ...)+0x14>
c000a4c8:	8d 77 01             	lea    esi,[edi+0x1]
c000a4cb:	3c 25                	cmp    al,0x25
c000a4cd:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a4d0:	74 b9                	je     c000a48b <Dbg::kprintf(char const*, ...)+0x37>
c000a4d2:	50                   	push   eax
c000a4d3:	89 f7                	mov    edi,esi
c000a4d5:	e8 fe fe ff ff       	call   c000a3d8 <Dbg::logc(char)>
c000a4da:	89 ee                	mov    esi,ebp
c000a4dc:	58                   	pop    eax
c000a4dd:	eb e2                	jmp    c000a4c1 <Dbg::kprintf(char const*, ...)+0x6d>
c000a4df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a4e3:	89 c8                	mov    eax,ecx
c000a4e5:	83 c1 04             	add    ecx,0x4
c000a4e8:	8b 00                	mov    eax,DWORD PTR [eax]
c000a4ea:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a4ee:	50                   	push   eax
c000a4ef:	e8 04 ff ff ff       	call   c000a3f8 <Dbg::logs(char*)>
c000a4f4:	58                   	pop    eax
c000a4f5:	eb ca                	jmp    c000a4c1 <Dbg::kprintf(char const*, ...)+0x6d>
c000a4f7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a4fb:	89 d0                	mov    eax,edx
c000a4fd:	83 c2 04             	add    edx,0x4
c000a500:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a504:	8b 00                	mov    eax,DWORD PTR [eax]
c000a506:	50                   	push   eax
c000a507:	e8 09 ff ff ff       	call   c000a415 <Dbg::logWriteInt(unsigned int)>
c000a50c:	58                   	pop    eax
c000a50d:	eb b2                	jmp    c000a4c1 <Dbg::kprintf(char const*, ...)+0x6d>
c000a50f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a513:	89 d0                	mov    eax,edx
c000a515:	83 c2 04             	add    edx,0x4
c000a518:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a51b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a51f:	50                   	push   eax
c000a520:	e8 b3 fe ff ff       	call   c000a3d8 <Dbg::logc(char)>
c000a525:	58                   	pop    eax
c000a526:	eb 99                	jmp    c000a4c1 <Dbg::kprintf(char const*, ...)+0x6d>
c000a528:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a52c:	89 c8                	mov    eax,ecx
c000a52e:	83 c1 04             	add    ecx,0x4
c000a531:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a535:	6a 10                	push   0x10
c000a537:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a539:	51                   	push   ecx
c000a53a:	e8 f4 fe ff ff       	call   c000a433 <Dbg::logWriteIntBase(unsigned int, int)>
c000a53f:	5d                   	pop    ebp
c000a540:	58                   	pop    eax
c000a541:	e9 7b ff ff ff       	jmp    c000a4c1 <Dbg::kprintf(char const*, ...)+0x6d>
c000a546:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a54a:	89 d0                	mov    eax,edx
c000a54c:	83 c2 08             	add    edx,0x8
c000a54f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a553:	6a 10                	push   0x10
c000a555:	8b 00                	mov    eax,DWORD PTR [eax]
c000a557:	50                   	push   eax
c000a558:	e8 d6 fe ff ff       	call   c000a433 <Dbg::logWriteIntBase(unsigned int, int)>
c000a55d:	58                   	pop    eax
c000a55e:	5a                   	pop    edx
c000a55f:	e9 5d ff ff ff       	jmp    c000a4c1 <Dbg::kprintf(char const*, ...)+0x6d>
c000a564:	6a 25                	push   0x25
c000a566:	e8 6d fe ff ff       	call   c000a3d8 <Dbg::logc(char)>
c000a56b:	5a                   	pop    edx
c000a56c:	e9 50 ff ff ff       	jmp    c000a4c1 <Dbg::kprintf(char const*, ...)+0x6d>
c000a571:	6a 25                	push   0x25
c000a573:	e8 60 fe ff ff       	call   c000a3d8 <Dbg::logc(char)>
c000a578:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a57c:	50                   	push   eax
c000a57d:	e8 56 fe ff ff       	call   c000a3d8 <Dbg::logc(char)>
c000a582:	5a                   	pop    edx
c000a583:	59                   	pop    ecx
c000a584:	e9 38 ff ff ff       	jmp    c000a4c1 <Dbg::kprintf(char const*, ...)+0x6d>
c000a589:	90                   	nop

c000a58a <File::read(unsigned long long, void*, int*)>:
c000a58a:	53                   	push   ebx
c000a58b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a58f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a593:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a59a:	3c 19                	cmp    al,0x19
c000a59c:	77 35                	ja     c000a5d3 <File::read(unsigned long long, void*, int*)+0x49>
c000a59e:	8b 04 85 a0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd660]
c000a5a5:	85 c0                	test   eax,eax
c000a5a7:	74 2a                	je     c000a5d3 <File::read(unsigned long long, void*, int*)+0x49>
c000a5a9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a5af:	85 c0                	test   eax,eax
c000a5b1:	74 20                	je     c000a5d3 <File::read(unsigned long long, void*, int*)+0x49>
c000a5b3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a5b7:	74 21                	je     c000a5da <File::read(unsigned long long, void*, int*)+0x50>
c000a5b9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a5bb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a5bf:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a5c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a5c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a5cd:	5b                   	pop    ebx
c000a5ce:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a5d1:	ff e0                	jmp    eax
c000a5d3:	b8 0b 00 00 00       	mov    eax,0xb
c000a5d8:	eb 05                	jmp    c000a5df <File::read(unsigned long long, void*, int*)+0x55>
c000a5da:	b8 05 00 00 00       	mov    eax,0x5
c000a5df:	5b                   	pop    ebx
c000a5e0:	c3                   	ret    
c000a5e1:	90                   	nop

c000a5e2 <File::write(unsigned long long, void*, int*)>:
c000a5e2:	53                   	push   ebx
c000a5e3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a5e7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a5eb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a5f2:	3c 19                	cmp    al,0x19
c000a5f4:	77 35                	ja     c000a62b <File::write(unsigned long long, void*, int*)+0x49>
c000a5f6:	8b 04 85 a0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd660]
c000a5fd:	85 c0                	test   eax,eax
c000a5ff:	74 2a                	je     c000a62b <File::write(unsigned long long, void*, int*)+0x49>
c000a601:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a607:	85 c0                	test   eax,eax
c000a609:	74 20                	je     c000a62b <File::write(unsigned long long, void*, int*)+0x49>
c000a60b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a60f:	74 21                	je     c000a632 <File::write(unsigned long long, void*, int*)+0x50>
c000a611:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a613:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a617:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a61d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a625:	5b                   	pop    ebx
c000a626:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a629:	ff e0                	jmp    eax
c000a62b:	b8 0b 00 00 00       	mov    eax,0xb
c000a630:	eb 05                	jmp    c000a637 <File::write(unsigned long long, void*, int*)+0x55>
c000a632:	b8 05 00 00 00       	mov    eax,0x5
c000a637:	5b                   	pop    ebx
c000a638:	c3                   	ret    
c000a639:	90                   	nop

c000a63a <Directory::read(unsigned long long, void*, int*)>:
c000a63a:	53                   	push   ebx
c000a63b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a63f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a643:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a64a:	3c 19                	cmp    al,0x19
c000a64c:	77 35                	ja     c000a683 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a64e:	8b 04 85 a0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd660]
c000a655:	85 c0                	test   eax,eax
c000a657:	74 2a                	je     c000a683 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a659:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a65f:	85 c0                	test   eax,eax
c000a661:	74 20                	je     c000a683 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a663:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a667:	74 21                	je     c000a68a <Directory::read(unsigned long long, void*, int*)+0x50>
c000a669:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a66b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a66f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a675:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a679:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a67d:	5b                   	pop    ebx
c000a67e:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a681:	ff e0                	jmp    eax
c000a683:	b8 0b 00 00 00       	mov    eax,0xb
c000a688:	eb 05                	jmp    c000a68f <Directory::read(unsigned long long, void*, int*)+0x55>
c000a68a:	b8 05 00 00 00       	mov    eax,0x5
c000a68f:	5b                   	pop    ebx
c000a690:	c3                   	ret    
c000a691:	90                   	nop

c000a692 <Directory::write(unsigned long long, void*, int*)>:
c000a692:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a696:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a69d:	b8 0b 00 00 00       	mov    eax,0xb
c000a6a2:	80 fa 19             	cmp    dl,0x19
c000a6a5:	77 18                	ja     c000a6bf <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a6a7:	8b 14 95 a0 29 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd660]
c000a6ae:	85 d2                	test   edx,edx
c000a6b0:	74 0d                	je     c000a6bf <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a6b2:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000a6b9:	19 c0                	sbb    eax,eax
c000a6bb:	83 e0 0a             	and    eax,0xa
c000a6be:	40                   	inc    eax
c000a6bf:	c3                   	ret    

c000a6c0 <File::isAtty()>:
c000a6c0:	31 c0                	xor    eax,eax
c000a6c2:	c3                   	ret    
c000a6c3:	90                   	nop

c000a6c4 <Directory::isAtty()>:
c000a6c4:	31 c0                	xor    eax,eax
c000a6c6:	c3                   	ret    
c000a6c7:	90                   	nop

c000a6c8 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a6c8:	b8 0a 00 00 00       	mov    eax,0xa
c000a6cd:	c3                   	ret    

c000a6ce <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a6ce:	b8 0a 00 00 00       	mov    eax,0xa
c000a6d3:	c3                   	ret    

c000a6d4 <Filesystem::allocateSwapfile(char const*, int)>:
c000a6d4:	31 c0                	xor    eax,eax
c000a6d6:	31 d2                	xor    edx,edx
c000a6d8:	c3                   	ret    
c000a6d9:	90                   	nop

c000a6da <File::~File()>:
c000a6da:	83 ec 0c             	sub    esp,0xc
c000a6dd:	ba 74 d8 01 c0       	mov    edx,0xc001d874
c000a6e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6e6:	89 10                	mov    DWORD PTR [eax],edx
c000a6e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6ec:	83 ec 0c             	sub    esp,0xc
c000a6ef:	50                   	push   eax
c000a6f0:	e8 ab e8 ff ff       	call   c0008fa0 <UnixFile::~UnixFile()>
c000a6f5:	83 c4 10             	add    esp,0x10
c000a6f8:	90                   	nop
c000a6f9:	83 c4 0c             	add    esp,0xc
c000a6fc:	c3                   	ret    
c000a6fd:	90                   	nop

c000a6fe <File::~File()>:
c000a6fe:	83 ec 0c             	sub    esp,0xc
c000a701:	83 ec 0c             	sub    esp,0xc
c000a704:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a708:	e8 cd ff ff ff       	call   c000a6da <File::~File()>
c000a70d:	83 c4 10             	add    esp,0x10
c000a710:	83 ec 08             	sub    esp,0x8
c000a713:	68 14 01 00 00       	push   0x114
c000a718:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a71c:	e8 3d fc ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000a721:	83 c4 10             	add    esp,0x10
c000a724:	83 c4 0c             	add    esp,0xc
c000a727:	c3                   	ret    

c000a728 <Directory::~Directory()>:
c000a728:	83 ec 0c             	sub    esp,0xc
c000a72b:	ba 90 d8 01 c0       	mov    edx,0xc001d890
c000a730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a734:	89 10                	mov    DWORD PTR [eax],edx
c000a736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a73a:	83 ec 0c             	sub    esp,0xc
c000a73d:	50                   	push   eax
c000a73e:	e8 5d e8 ff ff       	call   c0008fa0 <UnixFile::~UnixFile()>
c000a743:	83 c4 10             	add    esp,0x10
c000a746:	90                   	nop
c000a747:	83 c4 0c             	add    esp,0xc
c000a74a:	c3                   	ret    
c000a74b:	90                   	nop

c000a74c <Directory::~Directory()>:
c000a74c:	83 ec 0c             	sub    esp,0xc
c000a74f:	83 ec 0c             	sub    esp,0xc
c000a752:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a756:	e8 cd ff ff ff       	call   c000a728 <Directory::~Directory()>
c000a75b:	83 c4 10             	add    esp,0x10
c000a75e:	83 ec 08             	sub    esp,0x8
c000a761:	68 14 01 00 00       	push   0x114
c000a766:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a76a:	e8 ef fb ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000a76f:	83 c4 10             	add    esp,0x10
c000a772:	83 c4 0c             	add    esp,0xc
c000a775:	c3                   	ret    

c000a776 <Filesystem::Filesystem()>:
c000a776:	ba 0c d8 01 c0       	mov    edx,0xc001d80c
c000a77b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a77f:	89 10                	mov    DWORD PTR [eax],edx
c000a781:	8b 15 34 05 02 c0    	mov    edx,DWORD PTR ds:0xc0020534
c000a787:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a78b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a78e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a792:	a3 34 05 02 c0       	mov    ds:0xc0020534,eax
c000a797:	90                   	nop
c000a798:	c3                   	ret    
c000a799:	90                   	nop

c000a79a <Filesystem::~Filesystem()>:
c000a79a:	ba 0c d8 01 c0       	mov    edx,0xc001d80c
c000a79f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7a3:	89 10                	mov    DWORD PTR [eax],edx
c000a7a5:	90                   	nop
c000a7a6:	c3                   	ret    
c000a7a7:	90                   	nop

c000a7a8 <Filesystem::~Filesystem()>:
c000a7a8:	83 ec 0c             	sub    esp,0xc
c000a7ab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a7af:	e8 e6 ff ff ff       	call   c000a79a <Filesystem::~Filesystem()>
c000a7b4:	83 c4 04             	add    esp,0x4
c000a7b7:	83 ec 08             	sub    esp,0x8
c000a7ba:	6a 08                	push   0x8
c000a7bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7c0:	e8 99 fb ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000a7c5:	83 c4 10             	add    esp,0x10
c000a7c8:	83 c4 0c             	add    esp,0xc
c000a7cb:	c3                   	ret    

c000a7cc <Fs::getcwd(Process*, char*, int)>:
c000a7cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a7d0:	31 c0                	xor    eax,eax
c000a7d2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a7d5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a7d9:	7d 15                	jge    c000a7f0 <Fs::getcwd(Process*, char*, int)+0x24>
c000a7db:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a7df:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a7e6:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a7e9:	84 c9                	test   cl,cl
c000a7eb:	74 06                	je     c000a7f3 <Fs::getcwd(Process*, char*, int)+0x27>
c000a7ed:	40                   	inc    eax
c000a7ee:	eb e2                	jmp    c000a7d2 <Fs::getcwd(Process*, char*, int)+0x6>
c000a7f0:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a7f3:	31 c0                	xor    eax,eax
c000a7f5:	c3                   	ret    

c000a7f6 <Fs::initVFS()>:
c000a7f6:	83 ec 18             	sub    esp,0x18
c000a7f9:	6a 08                	push   0x8
c000a7fb:	e8 b9 cf ff ff       	call   c00077b9 <malloc>
c000a800:	89 04 24             	mov    DWORD PTR [esp],eax
c000a803:	e8 f0 c3 00 00       	call   c0016bf8 <FAT::FAT()>
c000a808:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a80f:	e8 a5 cf ff ff       	call   c00077b9 <malloc>
c000a814:	89 04 24             	mov    DWORD PTR [esp],eax
c000a817:	e8 38 d1 00 00       	call   c0017954 <ISO9660::ISO9660()>
c000a81c:	83 c4 1c             	add    esp,0x1c
c000a81f:	c3                   	ret    

c000a820 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a820:	55                   	push   ebp
c000a821:	57                   	push   edi
c000a822:	56                   	push   esi
c000a823:	53                   	push   ebx
c000a824:	81 ec 10 04 00 00    	sub    esp,0x410
c000a82a:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a831:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a838:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a83f:	68 00 04 00 00       	push   0x400
c000a844:	6a 00                	push   0x0
c000a846:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000a84a:	56                   	push   esi
c000a84b:	e8 80 5c ff ff       	call   c00004d0 <memset>
c000a850:	83 c4 10             	add    esp,0x10
c000a853:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000a857:	75 0b                	jne    c000a864 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000a859:	50                   	push   eax
c000a85a:	50                   	push   eax
c000a85b:	57                   	push   edi
c000a85c:	56                   	push   esi
c000a85d:	e8 9e 5d ff ff       	call   c0000600 <strcpy>
c000a862:	eb 41                	jmp    c000a8a5 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000a864:	8a 07                	mov    al,BYTE PTR [edi]
c000a866:	3c 5c                	cmp    al,0x5c
c000a868:	74 04                	je     c000a86e <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000a86a:	3c 2f                	cmp    al,0x2f
c000a86c:	75 18                	jne    c000a886 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000a86e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a871:	3c 60                	cmp    al,0x60
c000a873:	7e 03                	jle    c000a878 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000a875:	83 e8 20             	sub    eax,0x20
c000a878:	88 04 24             	mov    BYTE PTR [esp],al
c000a87b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a882:	50                   	push   eax
c000a883:	50                   	push   eax
c000a884:	eb 18                	jmp    c000a89e <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000a886:	50                   	push   eax
c000a887:	50                   	push   eax
c000a888:	55                   	push   ebp
c000a889:	56                   	push   esi
c000a88a:	e8 71 5d ff ff       	call   c0000600 <strcpy>
c000a88f:	5a                   	pop    edx
c000a890:	59                   	pop    ecx
c000a891:	68 e6 e4 01 c0       	push   0xc001e4e6
c000a896:	56                   	push   esi
c000a897:	e8 24 5f ff ff       	call   c00007c0 <strcat>
c000a89c:	5d                   	pop    ebp
c000a89d:	58                   	pop    eax
c000a89e:	57                   	push   edi
c000a89f:	56                   	push   esi
c000a8a0:	e8 1b 5f ff ff       	call   c00007c0 <strcat>
c000a8a5:	83 c4 10             	add    esp,0x10
c000a8a8:	8a 04 24             	mov    al,BYTE PTR [esp]
c000a8ab:	3c 60                	cmp    al,0x60
c000a8ad:	7e 03                	jle    c000a8b2 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000a8af:	83 e8 20             	sub    eax,0x20
c000a8b2:	88 04 24             	mov    BYTE PTR [esp],al
c000a8b5:	88 03                	mov    BYTE PTR [ebx],al
c000a8b7:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a8be:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000a8c4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000a8c8:	bf 03 00 00 00       	mov    edi,0x3
c000a8cd:	b8 03 00 00 00       	mov    eax,0x3
c000a8d2:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000a8d5:	84 d2                	test   dl,dl
c000a8d7:	0f 84 91 00 00 00    	je     c000a96e <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000a8dd:	8d 4f 01             	lea    ecx,[edi+0x1]
c000a8e0:	80 fa 5c             	cmp    dl,0x5c
c000a8e3:	74 05                	je     c000a8ea <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000a8e5:	80 fa 2f             	cmp    dl,0x2f
c000a8e8:	75 12                	jne    c000a8fc <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a8ea:	89 c5                	mov    ebp,eax
c000a8ec:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000a8f1:	74 09                	je     c000a8fc <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a8f3:	40                   	inc    eax
c000a8f4:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000a8f8:	89 cf                	mov    edi,ecx
c000a8fa:	eb d6                	jmp    c000a8d2 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000a8fc:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000a901:	75 5b                	jne    c000a95e <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a903:	80 fa 2e             	cmp    dl,0x2e
c000a906:	75 56                	jne    c000a95e <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a908:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000a90c:	74 19                	je     c000a927 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000a90e:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a913:	74 53                	je     c000a968 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a915:	89 f9                	mov    ecx,edi
c000a917:	41                   	inc    ecx
c000a918:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a91b:	80 fa 2f             	cmp    dl,0x2f
c000a91e:	74 f7                	je     c000a917 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a920:	80 fa 5c             	cmp    dl,0x5c
c000a923:	74 f2                	je     c000a917 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a925:	eb d1                	jmp    c000a8f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a927:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a92c:	74 3a                	je     c000a968 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a92e:	83 f8 03             	cmp    eax,0x3
c000a931:	74 c5                	je     c000a8f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a933:	41                   	inc    ecx
c000a934:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a937:	80 fa 2f             	cmp    dl,0x2f
c000a93a:	74 f7                	je     c000a933 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000a93c:	80 fa 5c             	cmp    dl,0x5c
c000a93f:	74 f2                	je     c000a933 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000a941:	48                   	dec    eax
c000a942:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000a946:	75 06                	jne    c000a94e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000a948:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a94c:	eb f3                	jmp    c000a941 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000a94e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000a952:	74 07                	je     c000a95b <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000a954:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a958:	48                   	dec    eax
c000a959:	eb f3                	jmp    c000a94e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000a95b:	40                   	inc    eax
c000a95c:	eb 9a                	jmp    c000a8f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a95e:	80 fa 2f             	cmp    dl,0x2f
c000a961:	74 95                	je     c000a8f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a963:	80 fa 5c             	cmp    dl,0x5c
c000a966:	74 90                	je     c000a8f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a968:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000a96b:	40                   	inc    eax
c000a96c:	eb 8a                	jmp    c000a8f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a96e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a972:	83 ec 0c             	sub    esp,0xc
c000a975:	53                   	push   ebx
c000a976:	e8 c5 5b ff ff       	call   c0000540 <strlen>
c000a97b:	83 c4 10             	add    esp,0x10
c000a97e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000a983:	75 26                	jne    c000a9ab <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000a985:	83 ec 0c             	sub    esp,0xc
c000a988:	53                   	push   ebx
c000a989:	e8 b2 5b ff ff       	call   c0000540 <strlen>
c000a98e:	83 c4 10             	add    esp,0x10
c000a991:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000a996:	74 26                	je     c000a9be <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000a998:	83 ec 0c             	sub    esp,0xc
c000a99b:	53                   	push   ebx
c000a99c:	e8 9f 5b ff ff       	call   c0000540 <strlen>
c000a9a1:	83 c4 10             	add    esp,0x10
c000a9a4:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000a9a9:	eb c7                	jmp    c000a972 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000a9ab:	83 ec 0c             	sub    esp,0xc
c000a9ae:	53                   	push   ebx
c000a9af:	e8 8c 5b ff ff       	call   c0000540 <strlen>
c000a9b4:	83 c4 10             	add    esp,0x10
c000a9b7:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000a9bc:	74 c7                	je     c000a985 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000a9be:	81 c4 0c 04 00 00    	add    esp,0x40c
c000a9c4:	5b                   	pop    ebx
c000a9c5:	5e                   	pop    esi
c000a9c6:	5f                   	pop    edi
c000a9c7:	5d                   	pop    ebp
c000a9c8:	c3                   	ret    
c000a9c9:	90                   	nop

c000a9ca <File::File(char const*, Process*)>:
c000a9ca:	83 ec 0c             	sub    esp,0xc
c000a9cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9d1:	83 ec 08             	sub    esp,0x8
c000a9d4:	6a 00                	push   0x0
c000a9d6:	50                   	push   eax
c000a9d7:	e8 e2 e3 ff ff       	call   c0008dbe <UnixFile::UnixFile(int)>
c000a9dc:	83 c4 10             	add    esp,0x10
c000a9df:	ba 74 d8 01 c0       	mov    edx,0xc001d874
c000a9e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9e8:	89 10                	mov    DWORD PTR [eax],edx
c000a9ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9ee:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000a9f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9f8:	83 c0 0d             	add    eax,0xd
c000a9fb:	83 ec 04             	sub    esp,0x4
c000a9fe:	52                   	push   edx
c000a9ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa03:	50                   	push   eax
c000aa04:	e8 17 fe ff ff       	call   c000a820 <Fs::standardiseFiles(char*, char const*, char const*)>
c000aa09:	83 c4 10             	add    esp,0x10
c000aa0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa10:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000aa13:	8d 50 bf             	lea    edx,[eax-0x41]
c000aa16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa1a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000aa20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa24:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000aa28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa2c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aa32:	25 ff 00 00 00       	and    eax,0xff
c000aa37:	8b 04 85 a0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd660]
c000aa3e:	85 c0                	test   eax,eax
c000aa40:	74 42                	je     c000aa84 <File::File(char const*, Process*)+0xba>
c000aa42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa46:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aa4c:	25 ff 00 00 00       	and    eax,0xff
c000aa51:	8b 04 85 a0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd660]
c000aa58:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000aa5e:	85 c0                	test   eax,eax
c000aa60:	75 22                	jne    c000aa84 <File::File(char const*, Process*)+0xba>
c000aa62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa66:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aa6c:	25 ff 00 00 00       	and    eax,0xff
c000aa71:	8b 04 85 a0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd660]
c000aa78:	83 ec 0c             	sub    esp,0xc
c000aa7b:	50                   	push   eax
c000aa7c:	e8 0b 20 00 00       	call   c000ca8c <LogicalDisk::mount()>
c000aa81:	83 c4 10             	add    esp,0x10
c000aa84:	90                   	nop
c000aa85:	83 c4 0c             	add    esp,0xc
c000aa88:	c3                   	ret    
c000aa89:	90                   	nop

c000aa8a <File::open(FileOpenMode)>:
c000aa8a:	53                   	push   ebx
c000aa8b:	b8 0b 00 00 00       	mov    eax,0xb
c000aa90:	83 ec 08             	sub    esp,0x8
c000aa93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aa97:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000aa9e:	80 fa 19             	cmp    dl,0x19
c000aaa1:	77 40                	ja     c000aae3 <File::open(FileOpenMode)+0x59>
c000aaa3:	8b 14 95 a0 29 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd660]
c000aaaa:	85 d2                	test   edx,edx
c000aaac:	74 35                	je     c000aae3 <File::open(FileOpenMode)+0x59>
c000aaae:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000aab4:	85 d2                	test   edx,edx
c000aab6:	74 2b                	je     c000aae3 <File::open(FileOpenMode)+0x59>
c000aab8:	b8 06 00 00 00       	mov    eax,0x6
c000aabd:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000aac1:	75 20                	jne    c000aae3 <File::open(FileOpenMode)+0x59>
c000aac3:	8b 02                	mov    eax,DWORD PTR [edx]
c000aac5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000aacb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aacf:	51                   	push   ecx
c000aad0:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000aad3:	51                   	push   ecx
c000aad4:	52                   	push   edx
c000aad5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000aad8:	83 c4 10             	add    esp,0x10
c000aadb:	85 c0                	test   eax,eax
c000aadd:	75 04                	jne    c000aae3 <File::open(FileOpenMode)+0x59>
c000aadf:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000aae3:	83 c4 08             	add    esp,0x8
c000aae6:	5b                   	pop    ebx
c000aae7:	c3                   	ret    

c000aae8 <File::close()>:
c000aae8:	53                   	push   ebx
c000aae9:	b8 0b 00 00 00       	mov    eax,0xb
c000aaee:	83 ec 08             	sub    esp,0x8
c000aaf1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aaf5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000aafc:	80 fa 19             	cmp    dl,0x19
c000aaff:	77 41                	ja     c000ab42 <File::close()+0x5a>
c000ab01:	8b 1c 95 a0 29 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd660]
c000ab08:	85 db                	test   ebx,ebx
c000ab0a:	74 36                	je     c000ab42 <File::close()+0x5a>
c000ab0c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000ab13:	74 2d                	je     c000ab42 <File::close()+0x5a>
c000ab15:	b8 05 00 00 00       	mov    eax,0x5
c000ab1a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ab1e:	74 22                	je     c000ab42 <File::close()+0x5a>
c000ab20:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000ab24:	8b 04 95 a0 29 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd660]
c000ab2b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ab31:	53                   	push   ebx
c000ab32:	53                   	push   ebx
c000ab33:	8b 10                	mov    edx,DWORD PTR [eax]
c000ab35:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ab3b:	50                   	push   eax
c000ab3c:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000ab3f:	83 c4 10             	add    esp,0x10
c000ab42:	83 c4 08             	add    esp,0x8
c000ab45:	5b                   	pop    ebx
c000ab46:	c3                   	ret    
c000ab47:	90                   	nop

c000ab48 <File::seek(unsigned long long)>:
c000ab48:	56                   	push   esi
c000ab49:	53                   	push   ebx
c000ab4a:	b8 0b 00 00 00       	mov    eax,0xb
c000ab4f:	51                   	push   ecx
c000ab50:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ab54:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ab58:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ab5f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ab63:	80 fa 19             	cmp    dl,0x19
c000ab66:	77 31                	ja     c000ab99 <File::seek(unsigned long long)+0x51>
c000ab68:	8b 14 95 a0 29 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd660]
c000ab6f:	85 d2                	test   edx,edx
c000ab71:	74 26                	je     c000ab99 <File::seek(unsigned long long)+0x51>
c000ab73:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ab79:	85 d2                	test   edx,edx
c000ab7b:	74 1c                	je     c000ab99 <File::seek(unsigned long long)+0x51>
c000ab7d:	b8 05 00 00 00       	mov    eax,0x5
c000ab82:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ab86:	74 11                	je     c000ab99 <File::seek(unsigned long long)+0x51>
c000ab88:	8b 02                	mov    eax,DWORD PTR [edx]
c000ab8a:	53                   	push   ebx
c000ab8b:	51                   	push   ecx
c000ab8c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ab92:	52                   	push   edx
c000ab93:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ab96:	83 c4 10             	add    esp,0x10
c000ab99:	5a                   	pop    edx
c000ab9a:	5b                   	pop    ebx
c000ab9b:	5e                   	pop    esi
c000ab9c:	c3                   	ret    
c000ab9d:	90                   	nop

c000ab9e <File::tell(unsigned long long*)>:
c000ab9e:	83 ec 0c             	sub    esp,0xc
c000aba1:	b8 0b 00 00 00       	mov    eax,0xb
c000aba6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000abaa:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000abb1:	80 fa 19             	cmp    dl,0x19
c000abb4:	77 34                	ja     c000abea <File::tell(unsigned long long*)+0x4c>
c000abb6:	8b 14 95 a0 29 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd660]
c000abbd:	85 d2                	test   edx,edx
c000abbf:	74 29                	je     c000abea <File::tell(unsigned long long*)+0x4c>
c000abc1:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000abc7:	85 d2                	test   edx,edx
c000abc9:	74 1f                	je     c000abea <File::tell(unsigned long long*)+0x4c>
c000abcb:	b8 05 00 00 00       	mov    eax,0x5
c000abd0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000abd4:	74 14                	je     c000abea <File::tell(unsigned long long*)+0x4c>
c000abd6:	50                   	push   eax
c000abd7:	8b 02                	mov    eax,DWORD PTR [edx]
c000abd9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abdd:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000abe3:	52                   	push   edx
c000abe4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000abe7:	83 c4 10             	add    esp,0x10
c000abea:	83 c4 0c             	add    esp,0xc
c000abed:	c3                   	ret    

c000abee <File::rewind()>:
c000abee:	83 ec 10             	sub    esp,0x10
c000abf1:	6a 00                	push   0x0
c000abf3:	6a 00                	push   0x0
c000abf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abf9:	e8 4a ff ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c000abfe:	83 c4 1c             	add    esp,0x1c
c000ac01:	c3                   	ret    

c000ac02 <File::unlink()>:
c000ac02:	83 ec 0c             	sub    esp,0xc
c000ac05:	b8 0b 00 00 00       	mov    eax,0xb
c000ac0a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac0e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ac15:	80 f9 19             	cmp    cl,0x19
c000ac18:	77 2f                	ja     c000ac49 <File::unlink()+0x47>
c000ac1a:	8b 0c 8d a0 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd660]
c000ac21:	85 c9                	test   ecx,ecx
c000ac23:	74 24                	je     c000ac49 <File::unlink()+0x47>
c000ac25:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ac2b:	85 c9                	test   ecx,ecx
c000ac2d:	74 1a                	je     c000ac49 <File::unlink()+0x47>
c000ac2f:	b8 06 00 00 00       	mov    eax,0x6
c000ac34:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ac38:	75 0f                	jne    c000ac49 <File::unlink()+0x47>
c000ac3a:	83 c2 0d             	add    edx,0xd
c000ac3d:	50                   	push   eax
c000ac3e:	50                   	push   eax
c000ac3f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ac41:	52                   	push   edx
c000ac42:	51                   	push   ecx
c000ac43:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000ac46:	83 c4 10             	add    esp,0x10
c000ac49:	83 c4 0c             	add    esp,0xc
c000ac4c:	c3                   	ret    
c000ac4d:	90                   	nop

c000ac4e <File::rename(char const*)>:
c000ac4e:	83 ec 0c             	sub    esp,0xc
c000ac51:	b8 0b 00 00 00       	mov    eax,0xb
c000ac56:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac5a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ac61:	80 f9 19             	cmp    cl,0x19
c000ac64:	77 32                	ja     c000ac98 <File::rename(char const*)+0x4a>
c000ac66:	8b 0c 8d a0 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd660]
c000ac6d:	85 c9                	test   ecx,ecx
c000ac6f:	74 27                	je     c000ac98 <File::rename(char const*)+0x4a>
c000ac71:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ac77:	85 c9                	test   ecx,ecx
c000ac79:	74 1d                	je     c000ac98 <File::rename(char const*)+0x4a>
c000ac7b:	b8 06 00 00 00       	mov    eax,0x6
c000ac80:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ac84:	75 12                	jne    c000ac98 <File::rename(char const*)+0x4a>
c000ac86:	83 c2 0d             	add    edx,0xd
c000ac89:	50                   	push   eax
c000ac8a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ac8c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac90:	52                   	push   edx
c000ac91:	51                   	push   ecx
c000ac92:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ac95:	83 c4 10             	add    esp,0x10
c000ac98:	83 c4 0c             	add    esp,0xc
c000ac9b:	c3                   	ret    

c000ac9c <File::chfatattr(unsigned char, unsigned char)>:
c000ac9c:	57                   	push   edi
c000ac9d:	b8 0b 00 00 00       	mov    eax,0xb
c000aca2:	56                   	push   esi
c000aca3:	53                   	push   ebx
c000aca4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aca8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000acac:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000acb3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000acb7:	80 f9 19             	cmp    cl,0x19
c000acba:	77 37                	ja     c000acf3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000acbc:	8b 0c 8d a0 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd660]
c000acc3:	85 c9                	test   ecx,ecx
c000acc5:	74 2c                	je     c000acf3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000acc7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000accd:	85 c9                	test   ecx,ecx
c000accf:	74 22                	je     c000acf3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000acd1:	b8 06 00 00 00       	mov    eax,0x6
c000acd6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000acda:	75 17                	jne    c000acf3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000acdc:	8b 39                	mov    edi,DWORD PTR [ecx]
c000acde:	89 f0                	mov    eax,esi
c000ace0:	83 c2 0d             	add    edx,0xd
c000ace3:	0f b6 f0             	movzx  esi,al
c000ace6:	0f b6 db             	movzx  ebx,bl
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	52                   	push   edx
c000acec:	51                   	push   ecx
c000aced:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	5b                   	pop    ebx
c000acf4:	5e                   	pop    esi
c000acf5:	5f                   	pop    edi
c000acf6:	c3                   	ret    
c000acf7:	90                   	nop

c000acf8 <File::exists()>:
c000acf8:	83 ec 0c             	sub    esp,0xc
c000acfb:	31 c0                	xor    eax,eax
c000acfd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad01:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad08:	80 f9 19             	cmp    cl,0x19
c000ad0b:	77 24                	ja     c000ad31 <File::exists()+0x39>
c000ad0d:	8b 0c 8d a0 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd660]
c000ad14:	85 c9                	test   ecx,ecx
c000ad16:	74 19                	je     c000ad31 <File::exists()+0x39>
c000ad18:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad1e:	85 c9                	test   ecx,ecx
c000ad20:	74 0f                	je     c000ad31 <File::exists()+0x39>
c000ad22:	83 c2 0d             	add    edx,0xd
c000ad25:	50                   	push   eax
c000ad26:	50                   	push   eax
c000ad27:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ad29:	52                   	push   edx
c000ad2a:	51                   	push   ecx
c000ad2b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000ad2e:	83 c4 10             	add    esp,0x10
c000ad31:	83 c4 0c             	add    esp,0xc
c000ad34:	c3                   	ret    
c000ad35:	90                   	nop

c000ad36 <File::stat(unsigned long long*, bool*)>:
c000ad36:	56                   	push   esi
c000ad37:	53                   	push   ebx
c000ad38:	50                   	push   eax
c000ad39:	b8 0b 00 00 00       	mov    eax,0xb
c000ad3e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad42:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ad46:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad4d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ad51:	80 f9 19             	cmp    cl,0x19
c000ad54:	77 3d                	ja     c000ad93 <File::stat(unsigned long long*, bool*)+0x5d>
c000ad56:	8b 0c 8d a0 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd660]
c000ad5d:	85 c9                	test   ecx,ecx
c000ad5f:	74 32                	je     c000ad93 <File::stat(unsigned long long*, bool*)+0x5d>
c000ad61:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad67:	85 c9                	test   ecx,ecx
c000ad69:	74 28                	je     c000ad93 <File::stat(unsigned long long*, bool*)+0x5d>
c000ad6b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ad6d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad71:	74 13                	je     c000ad86 <File::stat(unsigned long long*, bool*)+0x50>
c000ad73:	83 ec 04             	sub    esp,0x4
c000ad76:	56                   	push   esi
c000ad77:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000ad7d:	51                   	push   ecx
c000ad7e:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000ad81:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000ad84:	eb 0a                	jmp    c000ad90 <File::stat(unsigned long long*, bool*)+0x5a>
c000ad86:	53                   	push   ebx
c000ad87:	83 c2 0d             	add    edx,0xd
c000ad8a:	56                   	push   esi
c000ad8b:	52                   	push   edx
c000ad8c:	51                   	push   ecx
c000ad8d:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000ad90:	83 c4 10             	add    esp,0x10
c000ad93:	5a                   	pop    edx
c000ad94:	5b                   	pop    ebx
c000ad95:	5e                   	pop    esi
c000ad96:	c3                   	ret    

c000ad97 <Fs::setcwd(Process*, char*)>:
c000ad97:	55                   	push   ebp
c000ad98:	57                   	push   edi
c000ad99:	56                   	push   esi
c000ad9a:	53                   	push   ebx
c000ad9b:	81 ec 20 02 00 00    	sub    esp,0x220
c000ada1:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000ada8:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000adae:	57                   	push   edi
c000adaf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000adb6:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000adba:	56                   	push   esi
c000adbb:	e8 60 fa ff ff       	call   c000a820 <Fs::standardiseFiles(char*, char const*, char const*)>
c000adc0:	89 34 24             	mov    DWORD PTR [esp],esi
c000adc3:	e8 78 57 ff ff       	call   c0000540 <strlen>
c000adc8:	83 c4 10             	add    esp,0x10
c000adcb:	83 f8 02             	cmp    eax,0x2
c000adce:	77 15                	ja     c000ade5 <Fs::setcwd(Process*, char*)+0x4e>
c000add0:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000add5:	83 eb 41             	sub    ebx,0x41
c000add8:	8b 04 9d a0 29 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdd660]
c000addf:	85 c0                	test   eax,eax
c000ade1:	75 1c                	jne    c000adff <Fs::setcwd(Process*, char*)+0x68>
c000ade3:	eb 2f                	jmp    c000ae14 <Fs::setcwd(Process*, char*)+0x7d>
c000ade5:	83 ec 0c             	sub    esp,0xc
c000ade8:	56                   	push   esi
c000ade9:	e8 52 57 ff ff       	call   c0000540 <strlen>
c000adee:	83 c4 10             	add    esp,0x10
c000adf1:	83 f8 03             	cmp    eax,0x3
c000adf4:	75 57                	jne    c000ae4d <Fs::setcwd(Process*, char*)+0xb6>
c000adf6:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000adfb:	75 50                	jne    c000ae4d <Fs::setcwd(Process*, char*)+0xb6>
c000adfd:	eb d1                	jmp    c000add0 <Fs::setcwd(Process*, char*)+0x39>
c000adff:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000ae06:	75 0c                	jne    c000ae14 <Fs::setcwd(Process*, char*)+0x7d>
c000ae08:	83 ec 0c             	sub    esp,0xc
c000ae0b:	50                   	push   eax
c000ae0c:	e8 7b 1c 00 00       	call   c000ca8c <LogicalDisk::mount()>
c000ae11:	83 c4 10             	add    esp,0x10
c000ae14:	b8 03 00 00 00       	mov    eax,0x3
c000ae19:	83 fb 19             	cmp    ebx,0x19
c000ae1c:	0f 87 c6 00 00 00    	ja     c000aee8 <Fs::setcwd(Process*, char*)+0x151>
c000ae22:	8b 14 9d a0 29 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdd660]
c000ae29:	b8 05 00 00 00       	mov    eax,0x5
c000ae2e:	85 d2                	test   edx,edx
c000ae30:	0f 84 b2 00 00 00    	je     c000aee8 <Fs::setcwd(Process*, char*)+0x151>
c000ae36:	b8 06 00 00 00       	mov    eax,0x6
c000ae3b:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000ae42:	0f 85 92 00 00 00    	jne    c000aeda <Fs::setcwd(Process*, char*)+0x143>
c000ae48:	e9 9b 00 00 00       	jmp    c000aee8 <Fs::setcwd(Process*, char*)+0x151>
c000ae4d:	83 ec 0c             	sub    esp,0xc
c000ae50:	68 14 01 00 00       	push   0x114
c000ae55:	e8 5f c9 ff ff       	call   c00077b9 <malloc>
c000ae5a:	83 c4 0c             	add    esp,0xc
c000ae5d:	89 c3                	mov    ebx,eax
c000ae5f:	55                   	push   ebp
c000ae60:	56                   	push   esi
c000ae61:	50                   	push   eax
c000ae62:	e8 63 fb ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c000ae67:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000ae6c:	83 c4 0c             	add    esp,0xc
c000ae6f:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000ae73:	50                   	push   eax
c000ae74:	8d 44 24 10          	lea    eax,[esp+0x10]
c000ae78:	50                   	push   eax
c000ae79:	53                   	push   ebx
c000ae7a:	e8 b7 fe ff ff       	call   c000ad36 <File::stat(unsigned long long*, bool*)>
c000ae7f:	83 c4 10             	add    esp,0x10
c000ae82:	83 f8 02             	cmp    eax,0x2
c000ae85:	74 04                	je     c000ae8b <Fs::setcwd(Process*, char*)+0xf4>
c000ae87:	85 c0                	test   eax,eax
c000ae89:	74 1c                	je     c000aea7 <Fs::setcwd(Process*, char*)+0x110>
c000ae8b:	b8 01 00 00 00       	mov    eax,0x1
c000ae90:	85 db                	test   ebx,ebx
c000ae92:	74 54                	je     c000aee8 <Fs::setcwd(Process*, char*)+0x151>
c000ae94:	83 ec 0c             	sub    esp,0xc
c000ae97:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae99:	53                   	push   ebx
c000ae9a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae9d:	83 c4 10             	add    esp,0x10
c000aea0:	b8 01 00 00 00       	mov    eax,0x1
c000aea5:	eb 41                	jmp    c000aee8 <Fs::setcwd(Process*, char*)+0x151>
c000aea7:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000aeac:	75 1c                	jne    c000aeca <Fs::setcwd(Process*, char*)+0x133>
c000aeae:	b8 02 00 00 00       	mov    eax,0x2
c000aeb3:	85 db                	test   ebx,ebx
c000aeb5:	74 31                	je     c000aee8 <Fs::setcwd(Process*, char*)+0x151>
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aebc:	53                   	push   ebx
c000aebd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000aec0:	83 c4 10             	add    esp,0x10
c000aec3:	b8 02 00 00 00       	mov    eax,0x2
c000aec8:	eb 1e                	jmp    c000aee8 <Fs::setcwd(Process*, char*)+0x151>
c000aeca:	85 db                	test   ebx,ebx
c000aecc:	74 0c                	je     c000aeda <Fs::setcwd(Process*, char*)+0x143>
c000aece:	83 ec 0c             	sub    esp,0xc
c000aed1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aed3:	53                   	push   ebx
c000aed4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000aed7:	83 c4 10             	add    esp,0x10
c000aeda:	50                   	push   eax
c000aedb:	50                   	push   eax
c000aedc:	56                   	push   esi
c000aedd:	57                   	push   edi
c000aede:	e8 1d 57 ff ff       	call   c0000600 <strcpy>
c000aee3:	83 c4 10             	add    esp,0x10
c000aee6:	31 c0                	xor    eax,eax
c000aee8:	81 c4 1c 02 00 00    	add    esp,0x21c
c000aeee:	5b                   	pop    ebx
c000aeef:	5e                   	pop    esi
c000aef0:	5f                   	pop    edi
c000aef1:	5d                   	pop    ebp
c000aef2:	c3                   	ret    
c000aef3:	90                   	nop

c000aef4 <Directory::Directory(char const*, Process*)>:
c000aef4:	83 ec 0c             	sub    esp,0xc
c000aef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aefb:	83 ec 08             	sub    esp,0x8
c000aefe:	6a 00                	push   0x0
c000af00:	50                   	push   eax
c000af01:	e8 b8 de ff ff       	call   c0008dbe <UnixFile::UnixFile(int)>
c000af06:	83 c4 10             	add    esp,0x10
c000af09:	ba 90 d8 01 c0       	mov    edx,0xc001d890
c000af0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af12:	89 10                	mov    DWORD PTR [eax],edx
c000af14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000af18:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000af1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af22:	83 c0 0d             	add    eax,0xd
c000af25:	83 ec 04             	sub    esp,0x4
c000af28:	52                   	push   edx
c000af29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af2d:	50                   	push   eax
c000af2e:	e8 ed f8 ff ff       	call   c000a820 <Fs::standardiseFiles(char*, char const*, char const*)>
c000af33:	83 c4 10             	add    esp,0x10
c000af36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af3a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000af3d:	8d 50 bf             	lea    edx,[eax-0x41]
c000af40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af44:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000af4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af4e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000af52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af56:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af5c:	25 ff 00 00 00       	and    eax,0xff
c000af61:	8b 04 85 a0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd660]
c000af68:	85 c0                	test   eax,eax
c000af6a:	74 42                	je     c000afae <Directory::Directory(char const*, Process*)+0xba>
c000af6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af70:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af76:	25 ff 00 00 00       	and    eax,0xff
c000af7b:	8b 04 85 a0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd660]
c000af82:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000af88:	85 c0                	test   eax,eax
c000af8a:	75 22                	jne    c000afae <Directory::Directory(char const*, Process*)+0xba>
c000af8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af90:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af96:	25 ff 00 00 00       	and    eax,0xff
c000af9b:	8b 04 85 a0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd660]
c000afa2:	83 ec 0c             	sub    esp,0xc
c000afa5:	50                   	push   eax
c000afa6:	e8 e1 1a 00 00       	call   c000ca8c <LogicalDisk::mount()>
c000afab:	83 c4 10             	add    esp,0x10
c000afae:	90                   	nop
c000afaf:	83 c4 0c             	add    esp,0xc
c000afb2:	c3                   	ret    
c000afb3:	90                   	nop

c000afb4 <Directory::open()>:
c000afb4:	53                   	push   ebx
c000afb5:	b8 0b 00 00 00       	mov    eax,0xb
c000afba:	83 ec 08             	sub    esp,0x8
c000afbd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000afc1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000afc8:	80 fa 19             	cmp    dl,0x19
c000afcb:	77 3d                	ja     c000b00a <Directory::open()+0x56>
c000afcd:	8b 14 95 a0 29 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd660]
c000afd4:	85 d2                	test   edx,edx
c000afd6:	74 32                	je     c000b00a <Directory::open()+0x56>
c000afd8:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000afde:	85 d2                	test   edx,edx
c000afe0:	74 28                	je     c000b00a <Directory::open()+0x56>
c000afe2:	b8 06 00 00 00       	mov    eax,0x6
c000afe7:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000afeb:	75 1d                	jne    c000b00a <Directory::open()+0x56>
c000afed:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000aff3:	50                   	push   eax
c000aff4:	8b 02                	mov    eax,DWORD PTR [edx]
c000aff6:	51                   	push   ecx
c000aff7:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000affa:	51                   	push   ecx
c000affb:	52                   	push   edx
c000affc:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000afff:	83 c4 10             	add    esp,0x10
c000b002:	85 c0                	test   eax,eax
c000b004:	75 04                	jne    c000b00a <Directory::open()+0x56>
c000b006:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b00a:	83 c4 08             	add    esp,0x8
c000b00d:	5b                   	pop    ebx
c000b00e:	c3                   	ret    
c000b00f:	90                   	nop

c000b010 <Directory::close()>:
c000b010:	53                   	push   ebx
c000b011:	b8 0b 00 00 00       	mov    eax,0xb
c000b016:	83 ec 08             	sub    esp,0x8
c000b019:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b01d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b024:	80 fa 19             	cmp    dl,0x19
c000b027:	77 41                	ja     c000b06a <Directory::close()+0x5a>
c000b029:	8b 1c 95 a0 29 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd660]
c000b030:	85 db                	test   ebx,ebx
c000b032:	74 36                	je     c000b06a <Directory::close()+0x5a>
c000b034:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b03b:	74 2d                	je     c000b06a <Directory::close()+0x5a>
c000b03d:	b8 05 00 00 00       	mov    eax,0x5
c000b042:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b046:	74 22                	je     c000b06a <Directory::close()+0x5a>
c000b048:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b04c:	8b 04 95 a0 29 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd660]
c000b053:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b059:	53                   	push   ebx
c000b05a:	53                   	push   ebx
c000b05b:	8b 10                	mov    edx,DWORD PTR [eax]
c000b05d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b063:	50                   	push   eax
c000b064:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b067:	83 c4 10             	add    esp,0x10
c000b06a:	83 c4 08             	add    esp,0x8
c000b06d:	5b                   	pop    ebx
c000b06e:	c3                   	ret    
c000b06f:	90                   	nop

c000b070 <Directory::unlink()>:
c000b070:	83 ec 0c             	sub    esp,0xc
c000b073:	b8 0b 00 00 00       	mov    eax,0xb
c000b078:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b07c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b083:	80 f9 19             	cmp    cl,0x19
c000b086:	77 2f                	ja     c000b0b7 <Directory::unlink()+0x47>
c000b088:	8b 0c 8d a0 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd660]
c000b08f:	85 c9                	test   ecx,ecx
c000b091:	74 24                	je     c000b0b7 <Directory::unlink()+0x47>
c000b093:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b099:	85 c9                	test   ecx,ecx
c000b09b:	74 1a                	je     c000b0b7 <Directory::unlink()+0x47>
c000b09d:	b8 06 00 00 00       	mov    eax,0x6
c000b0a2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b0a6:	75 0f                	jne    c000b0b7 <Directory::unlink()+0x47>
c000b0a8:	83 c2 0d             	add    edx,0xd
c000b0ab:	50                   	push   eax
c000b0ac:	50                   	push   eax
c000b0ad:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b0af:	52                   	push   edx
c000b0b0:	51                   	push   ecx
c000b0b1:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b0b4:	83 c4 10             	add    esp,0x10
c000b0b7:	83 c4 0c             	add    esp,0xc
c000b0ba:	c3                   	ret    
c000b0bb:	90                   	nop

c000b0bc <Directory::rename(char const*)>:
c000b0bc:	83 ec 0c             	sub    esp,0xc
c000b0bf:	b8 0b 00 00 00       	mov    eax,0xb
c000b0c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b0c8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b0cf:	80 f9 19             	cmp    cl,0x19
c000b0d2:	77 32                	ja     c000b106 <Directory::rename(char const*)+0x4a>
c000b0d4:	8b 0c 8d a0 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd660]
c000b0db:	85 c9                	test   ecx,ecx
c000b0dd:	74 27                	je     c000b106 <Directory::rename(char const*)+0x4a>
c000b0df:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b0e5:	85 c9                	test   ecx,ecx
c000b0e7:	74 1d                	je     c000b106 <Directory::rename(char const*)+0x4a>
c000b0e9:	b8 06 00 00 00       	mov    eax,0x6
c000b0ee:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b0f2:	75 12                	jne    c000b106 <Directory::rename(char const*)+0x4a>
c000b0f4:	83 c2 0d             	add    edx,0xd
c000b0f7:	50                   	push   eax
c000b0f8:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b0fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b0fe:	52                   	push   edx
c000b0ff:	51                   	push   ecx
c000b100:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b103:	83 c4 10             	add    esp,0x10
c000b106:	83 c4 0c             	add    esp,0xc
c000b109:	c3                   	ret    

c000b10a <Directory::exists()>:
c000b10a:	83 ec 0c             	sub    esp,0xc
c000b10d:	31 c0                	xor    eax,eax
c000b10f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b113:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b11a:	80 f9 19             	cmp    cl,0x19
c000b11d:	77 24                	ja     c000b143 <Directory::exists()+0x39>
c000b11f:	8b 0c 8d a0 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd660]
c000b126:	85 c9                	test   ecx,ecx
c000b128:	74 19                	je     c000b143 <Directory::exists()+0x39>
c000b12a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b130:	85 c9                	test   ecx,ecx
c000b132:	74 0f                	je     c000b143 <Directory::exists()+0x39>
c000b134:	83 c2 0d             	add    edx,0xd
c000b137:	50                   	push   eax
c000b138:	50                   	push   eax
c000b139:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b13b:	52                   	push   edx
c000b13c:	51                   	push   ecx
c000b13d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b140:	83 c4 10             	add    esp,0x10
c000b143:	83 c4 0c             	add    esp,0xc
c000b146:	c3                   	ret    
c000b147:	90                   	nop

c000b148 <Directory::read(dirent*)>:
c000b148:	83 ec 1c             	sub    esp,0x1c
c000b14b:	b8 0b 00 00 00       	mov    eax,0xb
c000b150:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b154:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b15b:	80 fa 19             	cmp    dl,0x19
c000b15e:	77 30                	ja     c000b190 <Directory::read(dirent*)+0x48>
c000b160:	8b 14 95 a0 29 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd660]
c000b167:	85 d2                	test   edx,edx
c000b169:	74 25                	je     c000b190 <Directory::read(dirent*)+0x48>
c000b16b:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b172:	74 1c                	je     c000b190 <Directory::read(dirent*)+0x48>
c000b174:	83 ec 0c             	sub    esp,0xc
c000b177:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b179:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b17d:	52                   	push   edx
c000b17e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b182:	6a 00                	push   0x0
c000b184:	68 10 01 00 00       	push   0x110
c000b189:	51                   	push   ecx
c000b18a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b18d:	83 c4 20             	add    esp,0x20
c000b190:	83 c4 1c             	add    esp,0x1c
c000b193:	c3                   	ret    

c000b194 <Directory::create()>:
c000b194:	83 ec 0c             	sub    esp,0xc
c000b197:	b8 0b 00 00 00       	mov    eax,0xb
c000b19c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1a0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1a7:	80 f9 19             	cmp    cl,0x19
c000b1aa:	77 2f                	ja     c000b1db <Directory::create()+0x47>
c000b1ac:	8b 0c 8d a0 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd660]
c000b1b3:	85 c9                	test   ecx,ecx
c000b1b5:	74 24                	je     c000b1db <Directory::create()+0x47>
c000b1b7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b1bd:	85 c9                	test   ecx,ecx
c000b1bf:	74 1a                	je     c000b1db <Directory::create()+0x47>
c000b1c1:	b8 06 00 00 00       	mov    eax,0x6
c000b1c6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1ca:	75 0f                	jne    c000b1db <Directory::create()+0x47>
c000b1cc:	83 c2 0d             	add    edx,0xd
c000b1cf:	50                   	push   eax
c000b1d0:	50                   	push   eax
c000b1d1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1d3:	52                   	push   edx
c000b1d4:	51                   	push   ecx
c000b1d5:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b1d8:	83 c4 10             	add    esp,0x10
c000b1db:	83 c4 0c             	add    esp,0xc
c000b1de:	c3                   	ret    
c000b1df:	90                   	nop

c000b1e0 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b1e0:	b8 0a 00 00 00       	mov    eax,0xa
c000b1e5:	c3                   	ret    
c000b1e6:	66 90                	xchg   ax,ax

c000b1e8 <Bus::Bus(char const*)>:
c000b1e8:	83 ec 0c             	sub    esp,0xc
c000b1eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1ef:	83 ec 08             	sub    esp,0x8
c000b1f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b1f6:	50                   	push   eax
c000b1f7:	e8 30 08 00 00       	call   c000ba2c <Device::Device(char const*)>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	ba ac d8 01 c0       	mov    edx,0xc001d8ac
c000b204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b208:	89 10                	mov    DWORD PTR [eax],edx
c000b20a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b20e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b218:	90                   	nop
c000b219:	83 c4 0c             	add    esp,0xc
c000b21c:	c3                   	ret    
c000b21d:	90                   	nop
c000b21e:	66 90                	xchg   ax,ax

c000b220 <Bus::~Bus()>:
c000b220:	83 ec 0c             	sub    esp,0xc
c000b223:	ba ac d8 01 c0       	mov    edx,0xc001d8ac
c000b228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b22c:	89 10                	mov    DWORD PTR [eax],edx
c000b22e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b232:	83 ec 0c             	sub    esp,0xc
c000b235:	50                   	push   eax
c000b236:	e8 5b 05 00 00       	call   c000b796 <Device::~Device()>
c000b23b:	83 c4 10             	add    esp,0x10
c000b23e:	90                   	nop
c000b23f:	83 c4 0c             	add    esp,0xc
c000b242:	c3                   	ret    
c000b243:	90                   	nop

c000b244 <Bus::~Bus()>:
c000b244:	83 ec 0c             	sub    esp,0xc
c000b247:	83 ec 0c             	sub    esp,0xc
c000b24a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b24e:	e8 cd ff ff ff       	call   c000b220 <Bus::~Bus()>
c000b253:	83 c4 10             	add    esp,0x10
c000b256:	83 ec 08             	sub    esp,0x8
c000b259:	68 58 01 00 00       	push   0x158
c000b25e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b262:	e8 f7 f0 ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000b267:	83 c4 10             	add    esp,0x10
c000b26a:	83 c4 0c             	add    esp,0xc
c000b26d:	c3                   	ret    

c000b26e <beepThread(void*)>:
c000b26e:	83 ec 0c             	sub    esp,0xc
c000b271:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c000b276:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b27a:	48                   	dec    eax
c000b27b:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c000b280:	75 01                	jne    c000b283 <beepThread(void*)+0x15>
c000b282:	fb                   	sti    
c000b283:	83 ec 0c             	sub    esp,0xc
c000b286:	6b c2 0a             	imul   eax,edx,0xa
c000b289:	50                   	push   eax
c000b28a:	e8 4d 83 00 00       	call   c00135dc <milliTenthSleep(unsigned int)>
c000b28f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b296:	e8 f3 a0 00 00       	call   c001538e <HalMakeBeep(int)>
c000b29b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b2a3:	83 c4 1c             	add    esp,0x1c
c000b2a6:	e9 2d 82 00 00       	jmp    c00134d8 <blockTask(TaskState)>

c000b2ab <Krnl::beep(int, int, bool)>:
c000b2ab:	56                   	push   esi
c000b2ac:	53                   	push   ebx
c000b2ad:	83 ec 10             	sub    esp,0x10
c000b2b0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b2b4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b2b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2bc:	e8 cd a0 00 00       	call   c001538e <HalMakeBeep(int)>
c000b2c1:	83 c4 10             	add    esp,0x10
c000b2c4:	89 f0                	mov    eax,esi
c000b2c6:	84 c0                	test   al,al
c000b2c8:	74 1e                	je     c000b2e8 <Krnl::beep(int, int, bool)+0x3d>
c000b2ca:	83 ec 0c             	sub    esp,0xc
c000b2cd:	6b db 0a             	imul   ebx,ebx,0xa
c000b2d0:	53                   	push   ebx
c000b2d1:	e8 06 83 00 00       	call   c00135dc <milliTenthSleep(unsigned int)>
c000b2d6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b2de:	83 c4 14             	add    esp,0x14
c000b2e1:	5b                   	pop    ebx
c000b2e2:	5e                   	pop    esi
c000b2e3:	e9 a6 a0 00 00       	jmp    c001538e <HalMakeBeep(int)>
c000b2e8:	68 e6 00 00 00       	push   0xe6
c000b2ed:	53                   	push   ebx
c000b2ee:	68 6e b2 00 c0       	push   0xc000b26e
c000b2f3:	ff 35 10 37 02 c0    	push   DWORD PTR ds:0xc0023710
c000b2f9:	e8 be 7d 00 00       	call   c00130bc <Process::createThread(void (*)(void*), void*, int)>
c000b2fe:	83 c4 14             	add    esp,0x14
c000b301:	5b                   	pop    ebx
c000b302:	5e                   	pop    esi
c000b303:	c3                   	ret    

c000b304 <User::loadClockSettings(int)>:
c000b304:	53                   	push   ebx
c000b305:	83 ec 14             	sub    esp,0x14
c000b308:	68 14 01 00 00       	push   0x114
c000b30d:	e8 a7 c4 ff ff       	call   c00077b9 <malloc>
c000b312:	83 c4 0c             	add    esp,0xc
c000b315:	89 c3                	mov    ebx,eax
c000b317:	ff 35 10 37 02 c0    	push   DWORD PTR ds:0xc0023710
c000b31d:	68 d0 d8 01 c0       	push   0xc001d8d0
c000b322:	50                   	push   eax
c000b323:	e8 a2 f6 ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c000b328:	58                   	pop    eax
c000b329:	5a                   	pop    edx
c000b32a:	6a 01                	push   0x1
c000b32c:	53                   	push   ebx
c000b32d:	e8 58 f7 ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c000b332:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b335:	e8 ae f7 ff ff       	call   c000aae8 <File::close()>
c000b33a:	83 c4 10             	add    esp,0x10
c000b33d:	85 db                	test   ebx,ebx
c000b33f:	74 0f                	je     c000b350 <User::loadClockSettings(int)+0x4c>
c000b341:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b343:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b347:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b34a:	83 c4 08             	add    esp,0x8
c000b34d:	5b                   	pop    ebx
c000b34e:	ff e0                	jmp    eax
c000b350:	83 c4 08             	add    esp,0x8
c000b353:	5b                   	pop    ebx
c000b354:	c3                   	ret    
c000b355:	90                   	nop

c000b356 <Clock::Clock(char const*)>:
c000b356:	83 ec 0c             	sub    esp,0xc
c000b359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b35d:	83 ec 08             	sub    esp,0x8
c000b360:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b364:	50                   	push   eax
c000b365:	e8 c2 06 00 00       	call   c000ba2c <Device::Device(char const*)>
c000b36a:	83 c4 10             	add    esp,0x10
c000b36d:	ba f8 d8 01 c0       	mov    edx,0xc001d8f8
c000b372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b376:	89 10                	mov    DWORD PTR [eax],edx
c000b378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b37c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b386:	90                   	nop
c000b387:	83 c4 0c             	add    esp,0xc
c000b38a:	c3                   	ret    
c000b38b:	90                   	nop

c000b38c <Clock::~Clock()>:
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	ba f8 d8 01 c0       	mov    edx,0xc001d8f8
c000b394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b398:	89 10                	mov    DWORD PTR [eax],edx
c000b39a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b39e:	83 ec 0c             	sub    esp,0xc
c000b3a1:	50                   	push   eax
c000b3a2:	e8 ef 03 00 00       	call   c000b796 <Device::~Device()>
c000b3a7:	83 c4 10             	add    esp,0x10
c000b3aa:	90                   	nop
c000b3ab:	83 c4 0c             	add    esp,0xc
c000b3ae:	c3                   	ret    
c000b3af:	90                   	nop

c000b3b0 <Clock::~Clock()>:
c000b3b0:	83 ec 0c             	sub    esp,0xc
c000b3b3:	83 ec 0c             	sub    esp,0xc
c000b3b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3ba:	e8 cd ff ff ff       	call   c000b38c <Clock::~Clock()>
c000b3bf:	83 c4 10             	add    esp,0x10
c000b3c2:	83 ec 08             	sub    esp,0x8
c000b3c5:	68 58 01 00 00       	push   0x158
c000b3ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3ce:	e8 8b ef ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000b3d3:	83 c4 10             	add    esp,0x10
c000b3d6:	83 c4 0c             	add    esp,0xc
c000b3d9:	c3                   	ret    

c000b3da <Clock::timeInSecondsLocal()>:
c000b3da:	53                   	push   ebx
c000b3db:	83 ec 14             	sub    esp,0x14
c000b3de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3e2:	8b 10                	mov    edx,DWORD PTR [eax]
c000b3e4:	50                   	push   eax
c000b3e5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b3e8:	0f b6 0d 38 05 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020538
c000b3ef:	03 0d 3c 05 02 c0    	add    ecx,DWORD PTR ds:0xc002053c
c000b3f5:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b3fb:	89 cb                	mov    ebx,ecx
c000b3fd:	c1 fb 1f             	sar    ebx,0x1f
c000b400:	01 c8                	add    eax,ecx
c000b402:	11 da                	adc    edx,ebx
c000b404:	83 c4 10             	add    esp,0x10
c000b407:	31 c9                	xor    ecx,ecx
c000b409:	80 3d 39 05 02 c0 00 	cmp    BYTE PTR ds:0xc0020539,0x0
c000b410:	74 05                	je     c000b417 <Clock::timeInSecondsLocal()+0x3d>
c000b412:	b9 08 07 00 00       	mov    ecx,0x708
c000b417:	31 db                	xor    ebx,ebx
c000b419:	01 c8                	add    eax,ecx
c000b41b:	11 da                	adc    edx,ebx
c000b41d:	83 c4 08             	add    esp,0x8
c000b420:	5b                   	pop    ebx
c000b421:	c3                   	ret    

c000b422 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b422:	57                   	push   edi
c000b423:	56                   	push   esi
c000b424:	53                   	push   ebx
c000b425:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b429:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b42d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b42f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b433:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b436:	0f b6 05 38 05 02 c0 	movzx  eax,BYTE PTR ds:0xc0020538
c000b43d:	03 05 3c 05 02 c0    	add    eax,DWORD PTR ds:0xc002053c
c000b443:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b449:	99                   	cdq    
c000b44a:	29 c6                	sub    esi,eax
c000b44c:	19 d7                	sbb    edi,edx
c000b44e:	89 f0                	mov    eax,esi
c000b450:	89 fa                	mov    edx,edi
c000b452:	31 f6                	xor    esi,esi
c000b454:	80 3d 39 05 02 c0 00 	cmp    BYTE PTR ds:0xc0020539,0x0
c000b45b:	74 05                	je     c000b462 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b45d:	be 08 07 00 00       	mov    esi,0x708
c000b462:	31 ff                	xor    edi,edi
c000b464:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b468:	29 f0                	sub    eax,esi
c000b46a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b46e:	19 fa                	sbb    edx,edi
c000b470:	89 d8                	mov    eax,ebx
c000b472:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b476:	5b                   	pop    ebx
c000b477:	5e                   	pop    esi
c000b478:	5f                   	pop    edi
c000b479:	ff e0                	jmp    eax

c000b47b <datetimeToSeconds(datetime_t)>:
c000b47b:	55                   	push   ebp
c000b47c:	57                   	push   edi
c000b47d:	56                   	push   esi
c000b47e:	53                   	push   ebx
c000b47f:	83 ec 14             	sub    esp,0x14
c000b482:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b486:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b48a:	89 d3                	mov    ebx,edx
c000b48c:	0f b6 c6             	movzx  eax,dh
c000b48f:	c1 eb 10             	shr    ebx,0x10
c000b492:	48                   	dec    eax
c000b493:	66 81 eb 6c 07       	sub    bx,0x76c
c000b498:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b49c:	0f b6 f5             	movzx  esi,ch
c000b49f:	89 cf                	mov    edi,ecx
c000b4a1:	6b f6 3c             	imul   esi,esi,0x3c
c000b4a4:	c1 ef 10             	shr    edi,0x10
c000b4a7:	0f b6 c9             	movzx  ecx,cl
c000b4aa:	89 f8                	mov    eax,edi
c000b4ac:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b4b2:	0f b6 f8             	movzx  edi,al
c000b4b5:	0f b6 d2             	movzx  edx,dl
c000b4b8:	01 fe                	add    esi,edi
c000b4ba:	01 f1                	add    ecx,esi
c000b4bc:	0f b7 f3             	movzx  esi,bx
c000b4bf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b4c3:	c1 f9 1f             	sar    ecx,0x1f
c000b4c6:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b4cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b4cf:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b4d4:	8b 0c 8d 40 d9 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe26c0]
c000b4db:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b4df:	76 29                	jbe    c000b50a <datetimeToSeconds(datetime_t)+0x8f>
c000b4e1:	f6 c3 03             	test   bl,0x3
c000b4e4:	75 24                	jne    c000b50a <datetimeToSeconds(datetime_t)+0x8f>
c000b4e6:	31 d2                	xor    edx,edx
c000b4e8:	bf 64 00 00 00       	mov    edi,0x64
c000b4ed:	89 d8                	mov    eax,ebx
c000b4ef:	66 f7 f7             	div    di
c000b4f2:	66 85 d2             	test   dx,dx
c000b4f5:	75 12                	jne    c000b509 <datetimeToSeconds(datetime_t)+0x8e>
c000b4f7:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b4fd:	bf 90 01 00 00       	mov    edi,0x190
c000b502:	99                   	cdq    
c000b503:	f7 ff                	idiv   edi
c000b505:	85 d2                	test   edx,edx
c000b507:	75 01                	jne    c000b50a <datetimeToSeconds(datetime_t)+0x8f>
c000b509:	41                   	inc    ecx
c000b50a:	66 83 fb 46          	cmp    bx,0x46
c000b50e:	76 45                	jbe    c000b555 <datetimeToSeconds(datetime_t)+0xda>
c000b510:	bb 46 00 00 00       	mov    ebx,0x46
c000b515:	bf 64 00 00 00       	mov    edi,0x64
c000b51a:	bd 90 01 00 00       	mov    ebp,0x190
c000b51f:	b8 6d 01 00 00       	mov    eax,0x16d
c000b524:	f6 c3 03             	test   bl,0x3
c000b527:	75 23                	jne    c000b54c <datetimeToSeconds(datetime_t)+0xd1>
c000b529:	89 d8                	mov    eax,ebx
c000b52b:	99                   	cdq    
c000b52c:	f7 ff                	idiv   edi
c000b52e:	b8 6e 01 00 00       	mov    eax,0x16e
c000b533:	85 d2                	test   edx,edx
c000b535:	75 15                	jne    c000b54c <datetimeToSeconds(datetime_t)+0xd1>
c000b537:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b53d:	99                   	cdq    
c000b53e:	f7 fd                	idiv   ebp
c000b540:	31 c0                	xor    eax,eax
c000b542:	85 d2                	test   edx,edx
c000b544:	0f 94 c0             	sete   al
c000b547:	05 6d 01 00 00       	add    eax,0x16d
c000b54c:	01 c1                	add    ecx,eax
c000b54e:	43                   	inc    ebx
c000b54f:	39 f3                	cmp    ebx,esi
c000b551:	7c cc                	jl     c000b51f <datetimeToSeconds(datetime_t)+0xa4>
c000b553:	eb 3b                	jmp    c000b590 <datetimeToSeconds(datetime_t)+0x115>
c000b555:	74 39                	je     c000b590 <datetimeToSeconds(datetime_t)+0x115>
c000b557:	b8 45 00 00 00       	mov    eax,0x45
c000b55c:	89 c2                	mov    edx,eax
c000b55e:	83 e2 03             	and    edx,0x3
c000b561:	39 f0                	cmp    eax,esi
c000b563:	7e 13                	jle    c000b578 <datetimeToSeconds(datetime_t)+0xfd>
c000b565:	85 d2                	test   edx,edx
c000b567:	0f 94 c2             	sete   dl
c000b56a:	48                   	dec    eax
c000b56b:	0f b6 d2             	movzx  edx,dl
c000b56e:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b574:	29 d1                	sub    ecx,edx
c000b576:	eb e4                	jmp    c000b55c <datetimeToSeconds(datetime_t)+0xe1>
c000b578:	b8 6d 01 00 00       	mov    eax,0x16d
c000b57d:	85 d2                	test   edx,edx
c000b57f:	75 0d                	jne    c000b58e <datetimeToSeconds(datetime_t)+0x113>
c000b581:	31 c0                	xor    eax,eax
c000b583:	66 85 db             	test   bx,bx
c000b586:	0f 95 c0             	setne  al
c000b589:	05 6d 01 00 00       	add    eax,0x16d
c000b58e:	29 c1                	sub    ecx,eax
c000b590:	b8 80 51 01 00       	mov    eax,0x15180
c000b595:	f7 e9                	imul   ecx
c000b597:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b59b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b59f:	83 c4 14             	add    esp,0x14
c000b5a2:	5b                   	pop    ebx
c000b5a3:	5e                   	pop    esi
c000b5a4:	5f                   	pop    edi
c000b5a5:	5d                   	pop    ebp
c000b5a6:	c3                   	ret    
c000b5a7:	90                   	nop

c000b5a8 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b5a8:	57                   	push   edi
c000b5a9:	56                   	push   esi
c000b5aa:	53                   	push   ebx
c000b5ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b5af:	8b 06                	mov    eax,DWORD PTR [esi]
c000b5b1:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b5b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b5b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b5bc:	e8 ba fe ff ff       	call   c000b47b <datetimeToSeconds(datetime_t)>
c000b5c1:	59                   	pop    ecx
c000b5c2:	0f b6 0d 38 05 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020538
c000b5c9:	5b                   	pop    ebx
c000b5ca:	03 0d 3c 05 02 c0    	add    ecx,DWORD PTR ds:0xc002053c
c000b5d0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b5d6:	89 cb                	mov    ebx,ecx
c000b5d8:	c1 fb 1f             	sar    ebx,0x1f
c000b5db:	29 c8                	sub    eax,ecx
c000b5dd:	19 da                	sbb    edx,ebx
c000b5df:	31 c9                	xor    ecx,ecx
c000b5e1:	80 3d 39 05 02 c0 00 	cmp    BYTE PTR ds:0xc0020539,0x0
c000b5e8:	74 05                	je     c000b5ef <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b5ea:	b9 08 07 00 00       	mov    ecx,0x708
c000b5ef:	31 db                	xor    ebx,ebx
c000b5f1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b5f5:	29 c8                	sub    eax,ecx
c000b5f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b5fb:	19 da                	sbb    edx,ebx
c000b5fd:	89 f8                	mov    eax,edi
c000b5ff:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b603:	5b                   	pop    ebx
c000b604:	5e                   	pop    esi
c000b605:	5f                   	pop    edi
c000b606:	ff e0                	jmp    eax

c000b608 <secondsToDatetime(unsigned long long)>:
c000b608:	55                   	push   ebp
c000b609:	57                   	push   edi
c000b60a:	56                   	push   esi
c000b60b:	53                   	push   ebx
c000b60c:	83 ec 1c             	sub    esp,0x1c
c000b60f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b613:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b617:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b61b:	6a 00                	push   0x0
c000b61d:	68 80 51 01 00       	push   0x15180
c000b622:	55                   	push   ebp
c000b623:	57                   	push   edi
c000b624:	e8 b7 05 01 00       	call   c001bbe0 <__udivdi3>
c000b629:	83 c4 10             	add    esp,0x10
c000b62c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b632:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b636:	6a 00                	push   0x0
c000b638:	68 80 51 01 00       	push   0x15180
c000b63d:	55                   	push   ebp
c000b63e:	57                   	push   edi
c000b63f:	bf 10 0e 00 00       	mov    edi,0xe10
c000b644:	e8 97 06 01 00       	call   c001bce0 <__umoddi3>
c000b649:	83 c4 10             	add    esp,0x10
c000b64c:	99                   	cdq    
c000b64d:	f7 ff                	idiv   edi
c000b64f:	bf 3c 00 00 00       	mov    edi,0x3c
c000b654:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b657:	89 d0                	mov    eax,edx
c000b659:	99                   	cdq    
c000b65a:	f7 ff                	idiv   edi
c000b65c:	85 db                	test   ebx,ebx
c000b65e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b661:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b664:	79 11                	jns    c000b677 <secondsToDatetime(unsigned long long)+0x6f>
c000b666:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b66a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b670:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b675:	eb 07                	jmp    c000b67e <secondsToDatetime(unsigned long long)+0x76>
c000b677:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b67c:	89 d8                	mov    eax,ebx
c000b67e:	bf b4 05 00 00       	mov    edi,0x5b4
c000b683:	99                   	cdq    
c000b684:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b689:	f7 f9                	idiv   ecx
c000b68b:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b690:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b694:	31 d2                	xor    edx,edx
c000b696:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b69e:	01 c3                	add    ebx,eax
c000b6a0:	89 d8                	mov    eax,ebx
c000b6a2:	f7 f1                	div    ecx
c000b6a4:	31 d2                	xor    edx,edx
c000b6a6:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b6a9:	89 d8                	mov    eax,ebx
c000b6ab:	f7 f7                	div    edi
c000b6ad:	31 d2                	xor    edx,edx
c000b6af:	29 c1                	sub    ecx,eax
c000b6b1:	89 d8                	mov    eax,ebx
c000b6b3:	f7 f5                	div    ebp
c000b6b5:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b6ba:	29 c1                	sub    ecx,eax
c000b6bc:	31 d2                	xor    edx,edx
c000b6be:	89 c8                	mov    eax,ecx
c000b6c0:	f7 f5                	div    ebp
c000b6c2:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b6c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b6cb:	31 d2                	xor    edx,edx
c000b6cd:	89 c8                	mov    eax,ecx
c000b6cf:	f7 f5                	div    ebp
c000b6d1:	31 d2                	xor    edx,edx
c000b6d3:	01 c3                	add    ebx,eax
c000b6d5:	89 c8                	mov    eax,ecx
c000b6d7:	f7 f7                	div    edi
c000b6d9:	bf 99 00 00 00       	mov    edi,0x99
c000b6de:	29 c3                	sub    ebx,eax
c000b6e0:	31 d2                	xor    edx,edx
c000b6e2:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b6ea:	29 c3                	sub    ebx,eax
c000b6ec:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b6ef:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b6f2:	bb 05 00 00 00       	mov    ebx,0x5
c000b6f7:	83 c1 02             	add    ecx,0x2
c000b6fa:	89 c8                	mov    eax,ecx
c000b6fc:	f7 f7                	div    edi
c000b6fe:	31 d2                	xor    edx,edx
c000b700:	89 c7                	mov    edi,eax
c000b702:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b708:	83 c0 02             	add    eax,0x2
c000b70b:	f7 f3                	div    ebx
c000b70d:	89 eb                	mov    ebx,ebp
c000b70f:	29 c3                	sub    ebx,eax
c000b711:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b717:	88 1e                	mov    BYTE PTR [esi],bl
c000b719:	19 c0                	sbb    eax,eax
c000b71b:	31 d2                	xor    edx,edx
c000b71d:	83 e0 0c             	and    eax,0xc
c000b720:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b724:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b72c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b730:	83 f9 01             	cmp    ecx,0x1
c000b733:	0f 96 c2             	setbe  dl
c000b736:	41                   	inc    ecx
c000b737:	01 d0                	add    eax,edx
c000b739:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b73c:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b740:	83 c4 1c             	add    esp,0x1c
c000b743:	89 f0                	mov    eax,esi
c000b745:	5b                   	pop    ebx
c000b746:	5e                   	pop    esi
c000b747:	5f                   	pop    edi
c000b748:	5d                   	pop    ebp
c000b749:	c2 04 00             	ret    0x4

c000b74c <Clock::timeInDatetimeLocal()>:
c000b74c:	53                   	push   ebx
c000b74d:	83 ec 14             	sub    esp,0x14
c000b750:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b754:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b758:	e8 7d fc ff ff       	call   c000b3da <Clock::timeInSecondsLocal()>
c000b75d:	83 c4 0c             	add    esp,0xc
c000b760:	52                   	push   edx
c000b761:	50                   	push   eax
c000b762:	53                   	push   ebx
c000b763:	e8 a0 fe ff ff       	call   c000b608 <secondsToDatetime(unsigned long long)>
c000b768:	89 d8                	mov    eax,ebx
c000b76a:	83 c4 14             	add    esp,0x14
c000b76d:	5b                   	pop    ebx
c000b76e:	c2 04 00             	ret    0x4
c000b771:	90                   	nop

c000b772 <Device::hibernate()>:
c000b772:	c3                   	ret    
c000b773:	90                   	nop

c000b774 <Device::wake()>:
c000b774:	c3                   	ret    
c000b775:	90                   	nop

c000b776 <Device::detect()>:
c000b776:	c3                   	ret    
c000b777:	90                   	nop

c000b778 <Device::disableLegacy()>:
c000b778:	c3                   	ret    
c000b779:	90                   	nop

c000b77a <Device::powerSaving(PowerSavingLevel)>:
c000b77a:	c3                   	ret    
c000b77b:	90                   	nop

c000b77c <DriverlessDevice::close(int, int, void*)>:
c000b77c:	31 c0                	xor    eax,eax
c000b77e:	c3                   	ret    
c000b77f:	90                   	nop

c000b780 <DriverlessDevice::detect()>:
c000b780:	c3                   	ret    
c000b781:	90                   	nop

c000b782 <DriverlessDevice::open(int, int, void*)>:
c000b782:	83 ec 18             	sub    esp,0x18
c000b785:	68 70 d9 01 c0       	push   0xc001d970
c000b78a:	e8 3c 49 00 00       	call   c00100cb <KePanic(char const*)>
c000b78f:	83 c8 ff             	or     eax,0xffffffff
c000b792:	83 c4 1c             	add    esp,0x1c
c000b795:	c3                   	ret    

c000b796 <Device::~Device()>:
c000b796:	ba d0 d9 01 c0       	mov    edx,0xc001d9d0
c000b79b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b79f:	89 10                	mov    DWORD PTR [eax],edx
c000b7a1:	90                   	nop
c000b7a2:	c3                   	ret    
c000b7a3:	90                   	nop

c000b7a4 <Device::~Device()>:
c000b7a4:	83 ec 0c             	sub    esp,0xc
c000b7a7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b7ab:	e8 e6 ff ff ff       	call   c000b796 <Device::~Device()>
c000b7b0:	83 c4 04             	add    esp,0x4
c000b7b3:	83 ec 08             	sub    esp,0x8
c000b7b6:	68 58 01 00 00       	push   0x158
c000b7bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7bf:	e8 9a eb ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	83 c4 0c             	add    esp,0xc
c000b7ca:	c3                   	ret    
c000b7cb:	90                   	nop

c000b7cc <Device::findAndLoadDriver()>:
c000b7cc:	c7 44 24 04 8e d9 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d98e
c000b7d4:	e9 7b ec ff ff       	jmp    c000a454 <Dbg::kprintf(char const*, ...)>
c000b7d9:	90                   	nop

c000b7da <Device::preOpenPCI(PCIDeviceInfo)>:
c000b7da:	57                   	push   edi
c000b7db:	b9 09 00 00 00       	mov    ecx,0x9
c000b7e0:	56                   	push   esi
c000b7e1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b7e5:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b7e9:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b7f3:	81 c7 18 01 00 00    	add    edi,0x118
c000b7f9:	fc                   	cld    
c000b7fa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b7fc:	5e                   	pop    esi
c000b7fd:	5f                   	pop    edi
c000b7fe:	c3                   	ret    
c000b7ff:	90                   	nop

c000b800 <Device::preOpenACPI(void*, char*, char*)>:
c000b800:	57                   	push   edi
c000b801:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b806:	56                   	push   esi
c000b807:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b80b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b80f:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b819:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b81f:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b825:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b829:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b82b:	b9 0e 00 00 00       	mov    ecx,0xe
c000b830:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b836:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b83a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b83c:	5e                   	pop    esi
c000b83d:	5f                   	pop    edi
c000b83e:	c3                   	ret    
c000b83f:	90                   	nop

c000b840 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b840:	53                   	push   ebx
c000b841:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b845:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b849:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b84d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b851:	0f b6 c0             	movzx  eax,al
c000b854:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000b858:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b85c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b860:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b864:	5b                   	pop    ebx
c000b865:	e9 a6 05 00 00       	jmp    c000be10 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000b86a <Device::getParent()>:
c000b86a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b86e:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000b874:	c3                   	ret    
c000b875:	90                   	nop

c000b876 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b876:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b87a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b87e:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000b883:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b887:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b88b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b88f:	e9 e8 06 00 00       	jmp    c000bf7c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000b894 <Device::addChild(Device*)>:
c000b894:	53                   	push   ebx
c000b895:	83 ec 08             	sub    esp,0x8
c000b898:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b89c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b8a0:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000b8a6:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000b8ac:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b8ae:	85 d2                	test   edx,edx
c000b8b0:	74 04                	je     c000b8b6 <Device::addChild(Device*)+0x22>
c000b8b2:	89 d3                	mov    ebx,edx
c000b8b4:	eb f6                	jmp    c000b8ac <Device::addChild(Device*)+0x18>
c000b8b6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000b8b9:	83 ec 0c             	sub    esp,0xc
c000b8bc:	6a 08                	push   0x8
c000b8be:	e8 f6 be ff ff       	call   c00077b9 <malloc>
c000b8c3:	89 03                	mov    DWORD PTR [ebx],eax
c000b8c5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b8cb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b8d2:	83 c4 18             	add    esp,0x18
c000b8d5:	5b                   	pop    ebx
c000b8d6:	c3                   	ret    
c000b8d7:	90                   	nop

c000b8d8 <Device::removeAllChildren()>:
c000b8d8:	56                   	push   esi
c000b8d9:	53                   	push   ebx
c000b8da:	52                   	push   edx
c000b8db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b8df:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000b8e5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b8e8:	74 17                	je     c000b901 <Device::removeAllChildren()+0x29>
c000b8ea:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b8ed:	85 c0                	test   eax,eax
c000b8ef:	74 0c                	je     c000b8fd <Device::removeAllChildren()+0x25>
c000b8f1:	83 ec 0c             	sub    esp,0xc
c000b8f4:	8b 10                	mov    edx,DWORD PTR [eax]
c000b8f6:	50                   	push   eax
c000b8f7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000b8fa:	83 c4 10             	add    esp,0x10
c000b8fd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b8ff:	eb e4                	jmp    c000b8e5 <Device::removeAllChildren()+0xd>
c000b901:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b907:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b90d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b913:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b91a:	58                   	pop    eax
c000b91b:	5b                   	pop    ebx
c000b91c:	5e                   	pop    esi
c000b91d:	c3                   	ret    

c000b91e <Device::hibernateAll()>:
c000b91e:	53                   	push   ebx
c000b91f:	83 ec 14             	sub    esp,0x14
c000b922:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b926:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b928:	53                   	push   ebx
c000b929:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b92c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b932:	83 c4 10             	add    esp,0x10
c000b935:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b938:	74 0f                	je     c000b949 <Device::hibernateAll()+0x2b>
c000b93a:	83 ec 0c             	sub    esp,0xc
c000b93d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b940:	e8 d9 ff ff ff       	call   c000b91e <Device::hibernateAll()>
c000b945:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b947:	eb e9                	jmp    c000b932 <Device::hibernateAll()+0x14>
c000b949:	83 c4 08             	add    esp,0x8
c000b94c:	5b                   	pop    ebx
c000b94d:	c3                   	ret    

c000b94e <Device::wakeAll()>:
c000b94e:	53                   	push   ebx
c000b94f:	83 ec 14             	sub    esp,0x14
c000b952:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b956:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b958:	53                   	push   ebx
c000b959:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000b95c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b962:	83 c4 10             	add    esp,0x10
c000b965:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b968:	74 0f                	je     c000b979 <Device::wakeAll()+0x2b>
c000b96a:	83 ec 0c             	sub    esp,0xc
c000b96d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b970:	e8 d9 ff ff ff       	call   c000b94e <Device::wakeAll()>
c000b975:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b977:	eb e9                	jmp    c000b962 <Device::wakeAll()+0x14>
c000b979:	83 c4 08             	add    esp,0x8
c000b97c:	5b                   	pop    ebx
c000b97d:	c3                   	ret    

c000b97e <Device::detectAll()>:
c000b97e:	53                   	push   ebx
c000b97f:	83 ec 14             	sub    esp,0x14
c000b982:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b986:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b988:	53                   	push   ebx
c000b989:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000b98c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b992:	83 c4 10             	add    esp,0x10
c000b995:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b998:	74 0f                	je     c000b9a9 <Device::detectAll()+0x2b>
c000b99a:	83 ec 0c             	sub    esp,0xc
c000b99d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b9a0:	e8 d9 ff ff ff       	call   c000b97e <Device::detectAll()>
c000b9a5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b9a7:	eb e9                	jmp    c000b992 <Device::detectAll()+0x14>
c000b9a9:	83 c4 08             	add    esp,0x8
c000b9ac:	5b                   	pop    ebx
c000b9ad:	c3                   	ret    

c000b9ae <Device::disableLegacyAll()>:
c000b9ae:	c3                   	ret    
c000b9af:	90                   	nop

c000b9b0 <Device::loadDriversForAll()>:
c000b9b0:	c3                   	ret    
c000b9b1:	90                   	nop

c000b9b2 <Device::closeAll()>:
c000b9b2:	53                   	push   ebx
c000b9b3:	83 ec 08             	sub    esp,0x8
c000b9b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b9ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b9bc:	6a 00                	push   0x0
c000b9be:	6a 00                	push   0x0
c000b9c0:	6a 00                	push   0x0
c000b9c2:	53                   	push   ebx
c000b9c3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b9c6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b9cc:	83 c4 10             	add    esp,0x10
c000b9cf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b9d2:	74 0f                	je     c000b9e3 <Device::closeAll()+0x31>
c000b9d4:	83 ec 0c             	sub    esp,0xc
c000b9d7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b9da:	e8 d3 ff ff ff       	call   c000b9b2 <Device::closeAll()>
c000b9df:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b9e1:	eb e9                	jmp    c000b9cc <Device::closeAll()+0x1a>
c000b9e3:	83 c4 08             	add    esp,0x8
c000b9e6:	5b                   	pop    ebx
c000b9e7:	c3                   	ret    

c000b9e8 <Device::powerSavingAll(PowerSavingLevel)>:
c000b9e8:	56                   	push   esi
c000b9e9:	53                   	push   ebx
c000b9ea:	83 ec 0c             	sub    esp,0xc
c000b9ed:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b9f1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000b9f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b9f7:	56                   	push   esi
c000b9f8:	53                   	push   ebx
c000b9f9:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000b9fc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba02:	83 c4 10             	add    esp,0x10
c000ba05:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba08:	74 0f                	je     c000ba19 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000ba0a:	52                   	push   edx
c000ba0b:	52                   	push   edx
c000ba0c:	56                   	push   esi
c000ba0d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba10:	e8 d3 ff ff ff       	call   c000b9e8 <Device::powerSavingAll(PowerSavingLevel)>
c000ba15:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba17:	eb e9                	jmp    c000ba02 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000ba19:	58                   	pop    eax
c000ba1a:	5b                   	pop    ebx
c000ba1b:	5e                   	pop    esi
c000ba1c:	c3                   	ret    
c000ba1d:	90                   	nop

c000ba1e <Device::setName(char const*)>:
c000ba1e:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000ba26:	e9 d5 4b ff ff       	jmp    c0000600 <strcpy>
c000ba2b:	90                   	nop

c000ba2c <Device::Device(char const*)>:
c000ba2c:	83 ec 1c             	sub    esp,0x1c
c000ba2f:	ba d0 d9 01 c0       	mov    edx,0xc001d9d0
c000ba34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba38:	89 10                	mov    DWORD PTR [eax],edx
c000ba3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba3e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000ba48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba4c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000ba56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba5a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000ba64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba68:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000ba72:	83 ec 08             	sub    esp,0x8
c000ba75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ba79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ba7d:	e8 9c ff ff ff       	call   c000ba1e <Device::setName(char const*)>
c000ba82:	83 c4 10             	add    esp,0x10
c000ba85:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000ba8d:	83 ec 0c             	sub    esp,0xc
c000ba90:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ba94:	e8 20 bd ff ff       	call   c00077b9 <malloc>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000baa2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000baa9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000baad:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bab7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000babd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bac3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bac7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bacd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bad4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bad8:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000badf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bae3:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000baea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baee:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000baf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bafc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bb06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb0a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bb14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb18:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bb22:	90                   	nop
c000bb23:	83 c4 1c             	add    esp,0x1c
c000bb26:	c3                   	ret    
c000bb27:	90                   	nop

c000bb28 <Device::getName()>:
c000bb28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bb2c:	05 d0 00 00 00       	add    eax,0xd0
c000bb31:	c3                   	ret    

c000bb32 <DriverlessDevice::DriverlessDevice(char const*)>:
c000bb32:	83 ec 0c             	sub    esp,0xc
c000bb35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb39:	83 ec 08             	sub    esp,0x8
c000bb3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb40:	50                   	push   eax
c000bb41:	e8 e6 fe ff ff       	call   c000ba2c <Device::Device(char const*)>
c000bb46:	83 c4 10             	add    esp,0x10
c000bb49:	ba fc d9 01 c0       	mov    edx,0xc001d9fc
c000bb4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb52:	89 10                	mov    DWORD PTR [eax],edx
c000bb54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb58:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000bb62:	90                   	nop
c000bb63:	83 c4 0c             	add    esp,0xc
c000bb66:	c3                   	ret    
c000bb67:	90                   	nop

c000bb68 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bb68:	57                   	push   edi
c000bb69:	56                   	push   esi
c000bb6a:	53                   	push   ebx
c000bb6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb6f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bb73:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bb77:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bb7d:	75 0c                	jne    c000bb8b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bb7f:	52                   	push   edx
c000bb80:	52                   	push   edx
c000bb81:	53                   	push   ebx
c000bb82:	56                   	push   esi
c000bb83:	e8 0a 05 01 00       	call   c001c092 <LinkedList<Device>::addElement(Device*)>
c000bb88:	83 c4 10             	add    esp,0x10
c000bb8b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb91:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb94:	74 12                	je     c000bba8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bb96:	50                   	push   eax
c000bb97:	57                   	push   edi
c000bb98:	56                   	push   esi
c000bb99:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb9c:	e8 c7 ff ff ff       	call   c000bb68 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bba1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bba3:	83 c4 10             	add    esp,0x10
c000bba6:	eb e9                	jmp    c000bb91 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bba8:	5b                   	pop    ebx
c000bba9:	5e                   	pop    esi
c000bbaa:	5f                   	pop    edi
c000bbab:	c3                   	ret    

c000bbac <getDevicesOfType(DeviceType)>:
c000bbac:	53                   	push   ebx
c000bbad:	83 ec 14             	sub    esp,0x14
c000bbb0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bbb4:	53                   	push   ebx
c000bbb5:	e8 b4 05 01 00       	call   c001c16e <LinkedList<Device>::LinkedList()>
c000bbba:	83 c4 0c             	add    esp,0xc
c000bbbd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbc1:	53                   	push   ebx
c000bbc2:	ff 35 38 04 02 c0    	push   DWORD PTR ds:0xc0020438
c000bbc8:	e8 9b ff ff ff       	call   c000bb68 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bbcd:	89 d8                	mov    eax,ebx
c000bbcf:	83 c4 18             	add    esp,0x18
c000bbd2:	5b                   	pop    ebx
c000bbd3:	c2 04 00             	ret    0x4
c000bbd6:	66 90                	xchg   ax,ax

c000bbd8 <HardDiskController::HardDiskController(char const*)>:
c000bbd8:	83 ec 0c             	sub    esp,0xc
c000bbdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbdf:	83 ec 08             	sub    esp,0x8
c000bbe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbe6:	50                   	push   eax
c000bbe7:	e8 40 fe ff ff       	call   c000ba2c <Device::Device(char const*)>
c000bbec:	83 c4 10             	add    esp,0x10
c000bbef:	ba 28 da 01 c0       	mov    edx,0xc001da28
c000bbf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbf8:	89 10                	mov    DWORD PTR [eax],edx
c000bbfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbfe:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bc08:	90                   	nop
c000bc09:	83 c4 0c             	add    esp,0xc
c000bc0c:	c3                   	ret    
c000bc0d:	90                   	nop
c000bc0e:	66 90                	xchg   ax,ax

c000bc10 <HardDiskController::~HardDiskController()>:
c000bc10:	83 ec 0c             	sub    esp,0xc
c000bc13:	ba 28 da 01 c0       	mov    edx,0xc001da28
c000bc18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc1c:	89 10                	mov    DWORD PTR [eax],edx
c000bc1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc22:	83 ec 0c             	sub    esp,0xc
c000bc25:	50                   	push   eax
c000bc26:	e8 6b fb ff ff       	call   c000b796 <Device::~Device()>
c000bc2b:	83 c4 10             	add    esp,0x10
c000bc2e:	90                   	nop
c000bc2f:	83 c4 0c             	add    esp,0xc
c000bc32:	c3                   	ret    
c000bc33:	90                   	nop

c000bc34 <HardDiskController::~HardDiskController()>:
c000bc34:	83 ec 0c             	sub    esp,0xc
c000bc37:	83 ec 0c             	sub    esp,0xc
c000bc3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc3e:	e8 cd ff ff ff       	call   c000bc10 <HardDiskController::~HardDiskController()>
c000bc43:	83 c4 10             	add    esp,0x10
c000bc46:	83 ec 08             	sub    esp,0x8
c000bc49:	68 58 01 00 00       	push   0x158
c000bc4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc52:	e8 07 e7 ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000bc57:	83 c4 10             	add    esp,0x10
c000bc5a:	83 c4 0c             	add    esp,0xc
c000bc5d:	c3                   	ret    

c000bc5e <PhysicalDisk::eject()>:
c000bc5e:	83 c8 ff             	or     eax,0xffffffff
c000bc61:	c3                   	ret    

c000bc62 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000bc62:	83 ec 0c             	sub    esp,0xc
c000bc65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc69:	83 ec 08             	sub    esp,0x8
c000bc6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc70:	50                   	push   eax
c000bc71:	e8 b6 fd ff ff       	call   c000ba2c <Device::Device(char const*)>
c000bc76:	83 c4 10             	add    esp,0x10
c000bc79:	ba 54 da 01 c0       	mov    edx,0xc001da54
c000bc7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc82:	89 10                	mov    DWORD PTR [eax],edx
c000bc84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc88:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bc8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc93:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000bc9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc9e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000bca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bcb0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000bcb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcba:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000bcc4:	90                   	nop
c000bcc5:	83 c4 0c             	add    esp,0xc
c000bcc8:	c3                   	ret    
c000bcc9:	90                   	nop

c000bcca <PhysicalDisk::startCache()>:
c000bcca:	56                   	push   esi
c000bccb:	53                   	push   ebx
c000bccc:	83 ec 10             	sub    esp,0x10
c000bccf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bcd3:	6a 44                	push   0x44
c000bcd5:	e8 df ba ff ff       	call   c00077b9 <malloc>
c000bcda:	89 c6                	mov    esi,eax
c000bcdc:	58                   	pop    eax
c000bcdd:	5a                   	pop    edx
c000bcde:	53                   	push   ebx
c000bcdf:	56                   	push   esi
c000bce0:	e8 bf 15 00 00       	call   c000d2a4 <VCache::VCache(PhysicalDisk*)>
c000bce5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000bceb:	83 c4 14             	add    esp,0x14
c000bcee:	5b                   	pop    ebx
c000bcef:	5e                   	pop    esi
c000bcf0:	c3                   	ret    
c000bcf1:	90                   	nop

c000bcf2 <PhysicalDisk::~PhysicalDisk()>:
c000bcf2:	83 ec 0c             	sub    esp,0xc
c000bcf5:	ba 54 da 01 c0       	mov    edx,0xc001da54
c000bcfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcfe:	89 10                	mov    DWORD PTR [eax],edx
c000bd00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd04:	83 ec 0c             	sub    esp,0xc
c000bd07:	50                   	push   eax
c000bd08:	e8 89 fa ff ff       	call   c000b796 <Device::~Device()>
c000bd0d:	83 c4 10             	add    esp,0x10
c000bd10:	90                   	nop
c000bd11:	83 c4 0c             	add    esp,0xc
c000bd14:	c3                   	ret    
c000bd15:	90                   	nop

c000bd16 <PhysicalDisk::~PhysicalDisk()>:
c000bd16:	83 ec 0c             	sub    esp,0xc
c000bd19:	83 ec 0c             	sub    esp,0xc
c000bd1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd20:	e8 cd ff ff ff       	call   c000bcf2 <PhysicalDisk::~PhysicalDisk()>
c000bd25:	83 c4 10             	add    esp,0x10
c000bd28:	83 ec 08             	sub    esp,0x8
c000bd2b:	68 6c 01 00 00       	push   0x16c
c000bd30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd34:	e8 25 e6 ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000bd39:	83 c4 10             	add    esp,0x10
c000bd3c:	83 c4 0c             	add    esp,0xc
c000bd3f:	c3                   	ret    

c000bd40 <int_handler>:
c000bd40:	55                   	push   ebp
c000bd41:	57                   	push   edi
c000bd42:	56                   	push   esi
c000bd43:	53                   	push   ebx
c000bd44:	83 ec 0c             	sub    esp,0xc
c000bd47:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bd4b:	80 3d b8 2e 02 c0 00 	cmp    BYTE PTR ds:0xc0022eb8,0x0
c000bd52:	74 0b                	je     c000bd5f <int_handler+0x1f>
c000bd54:	fa                   	cli    
c000bd55:	f4                   	hlt    
c000bd56:	80 3d b8 2e 02 c0 00 	cmp    BYTE PTR ds:0xc0022eb8,0x0
c000bd5d:	75 f5                	jne    c000bd54 <int_handler+0x14>
c000bd5f:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000bd62:	8d 46 e0             	lea    eax,[esi-0x20]
c000bd65:	83 f8 17             	cmp    eax,0x17
c000bd68:	76 3e                	jbe    c000bda8 <int_handler+0x68>
c000bd6a:	c1 e6 04             	shl    esi,0x4
c000bd6d:	31 db                	xor    ebx,ebx
c000bd6f:	8d ae 40 15 02 c0    	lea    ebp,[esi-0x3ffdeac0]
c000bd75:	81 c6 40 05 02 c0    	add    esi,0xc0020540
c000bd7b:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000bd7f:	85 c0                	test   eax,eax
c000bd81:	74 13                	je     c000bd96 <int_handler+0x56>
c000bd83:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000bd86:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000bd8a:	74 2a                	je     c000bdb6 <int_handler+0x76>
c000bd8c:	83 ec 08             	sub    esp,0x8
c000bd8f:	52                   	push   edx
c000bd90:	57                   	push   edi
c000bd91:	ff d0                	call   eax
c000bd93:	83 c4 10             	add    esp,0x10
c000bd96:	43                   	inc    ebx
c000bd97:	83 fb 04             	cmp    ebx,0x4
c000bd9a:	75 df                	jne    c000bd7b <int_handler+0x3b>
c000bd9c:	83 c4 0c             	add    esp,0xc
c000bd9f:	31 c0                	xor    eax,eax
c000bda1:	5b                   	pop    ebx
c000bda2:	31 d2                	xor    edx,edx
c000bda4:	5e                   	pop    esi
c000bda5:	5f                   	pop    edi
c000bda6:	5d                   	pop    ebp
c000bda7:	c3                   	ret    
c000bda8:	83 ec 0c             	sub    esp,0xc
c000bdab:	50                   	push   eax
c000bdac:	e8 1a 96 00 00       	call   c00153cb <HalEndOfInterrupt(int)>
c000bdb1:	83 c4 10             	add    esp,0x10
c000bdb4:	eb b4                	jmp    c000bd6a <int_handler+0x2a>
c000bdb6:	83 ec 08             	sub    esp,0x8
c000bdb9:	52                   	push   edx
c000bdba:	57                   	push   edi
c000bdbb:	ff d0                	call   eax
c000bdbd:	83 c4 10             	add    esp,0x10
c000bdc0:	83 c4 0c             	add    esp,0xc
c000bdc3:	5b                   	pop    ebx
c000bdc4:	5e                   	pop    esi
c000bdc5:	5f                   	pop    edi
c000bdc6:	5d                   	pop    ebp
c000bdc7:	c3                   	ret    

c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000bdc8:	56                   	push   esi
c000bdc9:	31 c0                	xor    eax,eax
c000bdcb:	53                   	push   ebx
c000bdcc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bdd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bdd4:	89 ca                	mov    edx,ecx
c000bdd6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bdda:	c1 e2 04             	shl    edx,0x4
c000bddd:	83 bc 82 40 15 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdeac0],0x0
c000bde5:	74 15                	je     c000bdfc <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000bde7:	40                   	inc    eax
c000bde8:	83 f8 04             	cmp    eax,0x4
c000bdeb:	75 f0                	jne    c000bddd <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000bded:	c7 44 24 0c 84 da 01 c0 	mov    DWORD PTR [esp+0xc],0xc001da84
c000bdf5:	5b                   	pop    ebx
c000bdf6:	5e                   	pop    esi
c000bdf7:	e9 cf 42 00 00       	jmp    c00100cb <KePanic(char const*)>
c000bdfc:	8d 04 88             	lea    eax,[eax+ecx*4]
c000bdff:	89 1c 85 40 15 02 c0 	mov    DWORD PTR [eax*4-0x3ffdeac0],ebx
c000be06:	89 34 85 40 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfac0],esi
c000be0d:	5b                   	pop    ebx
c000be0e:	5e                   	pop    esi
c000be0f:	c3                   	ret    

c000be10 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000be10:	57                   	push   edi
c000be11:	8b 15 38 04 02 c0    	mov    edx,DWORD PTR ds:0xc0020438
c000be17:	56                   	push   esi
c000be18:	53                   	push   ebx
c000be19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000be1d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be21:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000be28:	74 5b                	je     c000be85 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000be2a:	89 c7                	mov    edi,eax
c000be2c:	84 c0                	test   al,al
c000be2e:	74 24                	je     c000be54 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000be30:	83 fe 0f             	cmp    esi,0xf
c000be33:	0f 8f d9 00 00 00    	jg     c000bf12 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000be39:	8a 86 60 f1 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0ea0]
c000be3f:	25 ff 00 00 00       	and    eax,0xff
c000be44:	66 8b bc 00 e0 2c 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdd320]
c000be4c:	89 c6                	mov    esi,eax
c000be4e:	66 d1 ef             	shr    di,1
c000be51:	83 e7 01             	and    edi,0x1
c000be54:	83 ec 08             	sub    esp,0x8
c000be57:	a1 e0 40 02 c0       	mov    eax,ds:0xc00240e0
c000be5c:	31 db                	xor    ebx,ebx
c000be5e:	50                   	push   eax
c000be5f:	68 91 da 01 c0       	push   0xc001da91
c000be64:	e8 eb e5 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000be69:	83 c4 10             	add    esp,0x10
c000be6c:	a1 e0 40 02 c0       	mov    eax,ds:0xc00240e0
c000be71:	85 c0                	test   eax,eax
c000be73:	7f 51                	jg     c000bec6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000be75:	83 ec 0c             	sub    esp,0xc
c000be78:	68 a8 da 01 c0       	push   0xc001daa8
c000be7d:	e8 49 42 00 00       	call   c00100cb <KePanic(char const*)>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	8d 4e 20             	lea    ecx,[esi+0x20]
c000be88:	31 d2                	xor    edx,edx
c000be8a:	89 c8                	mov    eax,ecx
c000be8c:	c1 e0 04             	shl    eax,0x4
c000be8f:	8b 9c 90 40 15 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdeac0]
c000be96:	85 db                	test   ebx,ebx
c000be98:	0f 84 8b 00 00 00    	je     c000bf29 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000be9e:	42                   	inc    edx
c000be9f:	83 fa 04             	cmp    edx,0x4
c000bea2:	75 eb                	jne    c000be8f <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000bea4:	83 ec 0c             	sub    esp,0xc
c000bea7:	68 fc da 01 c0       	push   0xc001dafc
c000beac:	e8 1a 42 00 00       	call   c00100cb <KePanic(char const*)>
c000beb1:	83 c4 10             	add    esp,0x10
c000beb4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000beb9:	5b                   	pop    ebx
c000beba:	5e                   	pop    esi
c000bebb:	5f                   	pop    edi
c000bebc:	c3                   	ret    
c000bebd:	43                   	inc    ebx
c000bebe:	39 1d e0 40 02 c0    	cmp    DWORD PTR ds:0xc00240e0,ebx
c000bec4:	7e af                	jle    c000be75 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000bec6:	83 ec 08             	sub    esp,0x8
c000bec9:	8b 04 9d 00 41 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbf00]
c000bed0:	56                   	push   esi
c000bed1:	50                   	push   eax
c000bed2:	e8 e1 f1 00 00       	call   c001b0b8 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000bed7:	83 c4 10             	add    esp,0x10
c000beda:	84 c0                	test   al,al
c000bedc:	74 df                	je     c000bebd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000bede:	81 e7 ff 00 00 00    	and    edi,0xff
c000bee4:	50                   	push   eax
c000bee5:	8d 46 20             	lea    eax,[esi+0x20]
c000bee8:	57                   	push   edi
c000bee9:	25 ff 00 00 00       	and    eax,0xff
c000beee:	6a 00                	push   0x0
c000bef0:	50                   	push   eax
c000bef1:	89 f0                	mov    eax,esi
c000bef3:	6a 00                	push   0x0
c000bef5:	25 ff 00 00 00       	and    eax,0xff
c000befa:	6a 00                	push   0x0
c000befc:	50                   	push   eax
c000befd:	8b 04 9d 00 41 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbf00]
c000bf04:	50                   	push   eax
c000bf05:	e8 28 f3 00 00       	call   c001b232 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000bf0a:	83 c4 20             	add    esp,0x20
c000bf0d:	e9 73 ff ff ff       	jmp    c000be85 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bf12:	83 ec 0c             	sub    esp,0xc
c000bf15:	31 ff                	xor    edi,edi
c000bf17:	68 c4 da 01 c0       	push   0xc001dac4
c000bf1c:	e8 aa 41 00 00       	call   c00100cb <KePanic(char const*)>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	e9 2b ff ff ff       	jmp    c000be54 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bf29:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bf2c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bf30:	89 14 85 40 15 02 c0 	mov    DWORD PTR [eax*4-0x3ffdeac0],edx
c000bf37:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3b:	5b                   	pop    ebx
c000bf3c:	89 14 85 40 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfac0],edx
c000bf43:	89 f0                	mov    eax,esi
c000bf45:	5e                   	pop    esi
c000bf46:	5f                   	pop    edi
c000bf47:	c3                   	ret    

c000bf48 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000bf48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf4c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bf50:	c1 e0 04             	shl    eax,0x4
c000bf53:	8d 50 10             	lea    edx,[eax+0x10]
c000bf56:	39 88 40 15 02 c0    	cmp    DWORD PTR [eax-0x3ffdeac0],ecx
c000bf5c:	74 08                	je     c000bf66 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000bf5e:	83 c0 04             	add    eax,0x4
c000bf61:	39 d0                	cmp    eax,edx
c000bf63:	75 f1                	jne    c000bf56 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000bf65:	c3                   	ret    
c000bf66:	c7 80 40 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeac0],0x0
c000bf70:	c7 80 40 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfac0],0x0
c000bf7a:	eb e2                	jmp    c000bf5e <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000bf7c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000bf7c:	53                   	push   ebx
c000bf7d:	83 ec 08             	sub    esp,0x8
c000bf80:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bf84:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000bf89:	74 0e                	je     c000bf99 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000bf8b:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c000bf90:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000bf97:	75 37                	jne    c000bfd0 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000bf99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf9d:	83 c0 20             	add    eax,0x20
c000bfa0:	c1 e0 04             	shl    eax,0x4
c000bfa3:	8d 50 10             	lea    edx,[eax+0x10]
c000bfa6:	39 98 40 15 02 c0    	cmp    DWORD PTR [eax-0x3ffdeac0],ebx
c000bfac:	74 0c                	je     c000bfba <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000bfae:	83 c0 04             	add    eax,0x4
c000bfb1:	39 d0                	cmp    eax,edx
c000bfb3:	75 f1                	jne    c000bfa6 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000bfb5:	83 c4 08             	add    esp,0x8
c000bfb8:	5b                   	pop    ebx
c000bfb9:	c3                   	ret    
c000bfba:	c7 80 40 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeac0],0x0
c000bfc4:	c7 80 40 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfac0],0x0
c000bfce:	eb de                	jmp    c000bfae <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000bfd0:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000bfd5:	7f 12                	jg     c000bfe9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000bfd7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bfdb:	31 c0                	xor    eax,eax
c000bfdd:	8a 81 60 f1 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0ea0]
c000bfe3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bfe7:	eb b0                	jmp    c000bf99 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000bfe9:	83 ec 0c             	sub    esp,0xc
c000bfec:	68 b5 da 01 c0       	push   0xc001dab5
c000bff1:	e8 d5 40 00 00       	call   c00100cb <KePanic(char const*)>
c000bff6:	83 c4 10             	add    esp,0x10
c000bff9:	eb 9e                	jmp    c000bf99 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000bffb <setupINTS()>:
c000bffb:	31 c0                	xor    eax,eax
c000bffd:	c7 80 40 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeac0],0x0
c000c007:	c7 80 40 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfac0],0x0
c000c011:	c7 80 44 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeabc],0x0
c000c01b:	c7 80 44 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfabc],0x0
c000c025:	c7 80 48 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeab8],0x0
c000c02f:	c7 80 48 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfab8],0x0
c000c039:	c7 80 4c 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeab4],0x0
c000c043:	c7 80 4c 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfab4],0x0
c000c04d:	83 c0 10             	add    eax,0x10
c000c050:	3d 00 10 00 00       	cmp    eax,0x1000
c000c055:	75 a6                	jne    c000bffd <setupINTS()+0x2>
c000c057:	c3                   	ret    

c000c058 <convertLegacyIRQNumber(int)>:
c000c058:	83 ec 0c             	sub    esp,0xc
c000c05b:	8b 15 38 04 02 c0    	mov    edx,DWORD PTR ds:0xc0020438
c000c061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c065:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c06c:	74 0f                	je     c000c07d <convertLegacyIRQNumber(int)+0x25>
c000c06e:	83 f8 0f             	cmp    eax,0xf
c000c071:	7f 0e                	jg     c000c081 <convertLegacyIRQNumber(int)+0x29>
c000c073:	31 c9                	xor    ecx,ecx
c000c075:	8a 88 60 f1 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0ea0]
c000c07b:	89 c8                	mov    eax,ecx
c000c07d:	83 c4 0c             	add    esp,0xc
c000c080:	c3                   	ret    
c000c081:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c085:	83 ec 0c             	sub    esp,0xc
c000c088:	68 c4 da 01 c0       	push   0xc001dac4
c000c08d:	e8 39 40 00 00       	call   c00100cb <KePanic(char const*)>
c000c092:	83 c4 10             	add    esp,0x10
c000c095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c099:	83 c4 0c             	add    esp,0xc
c000c09c:	c3                   	ret    
c000c09d:	90                   	nop

c000c09e <startGUI(void*)>:
c000c09e:	55                   	push   ebp
c000c09f:	89 e5                	mov    ebp,esp
c000c0a1:	53                   	push   ebx
c000c0a2:	83 ec 04             	sub    esp,0x4
c000c0a5:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c000c0aa:	48                   	dec    eax
c000c0ab:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c000c0b0:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c000c0b5:	85 c0                	test   eax,eax
c000c0b7:	75 01                	jne    c000c0ba <startGUI(void*)+0x1c>
c000c0b9:	fb                   	sti    
c000c0ba:	8b 1d 38 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020438
c000c0c0:	83 ec 08             	sub    esp,0x8
c000c0c3:	6a 01                	push   0x1
c000c0c5:	68 21 db 01 c0       	push   0xc001db21
c000c0ca:	e8 1b 68 00 00       	call   c00128ea <Thr::loadDLL(char const*, bool)>
c000c0cf:	83 c4 10             	add    esp,0x10
c000c0d2:	83 ec 08             	sub    esp,0x8
c000c0d5:	53                   	push   ebx
c000c0d6:	50                   	push   eax
c000c0d7:	e8 3f 6a 00 00       	call   c0012b1b <Thr::executeDLL(unsigned long, void*)>
c000c0dc:	83 c4 10             	add    esp,0x10
c000c0df:	8b 1d 38 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020438
c000c0e5:	83 ec 08             	sub    esp,0x8
c000c0e8:	6a 01                	push   0x1
c000c0ea:	68 3b db 01 c0       	push   0xc001db3b
c000c0ef:	e8 f6 67 00 00       	call   c00128ea <Thr::loadDLL(char const*, bool)>
c000c0f4:	83 c4 10             	add    esp,0x10
c000c0f7:	83 ec 08             	sub    esp,0x8
c000c0fa:	53                   	push   ebx
c000c0fb:	50                   	push   eax
c000c0fc:	e8 1a 6a 00 00       	call   c0012b1b <Thr::executeDLL(unsigned long, void*)>
c000c101:	83 c4 10             	add    esp,0x10
c000c104:	90                   	nop
c000c105:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c108:	c9                   	leave  
c000c109:	c3                   	ret    

c000c10a <startGUIVESA(void*)>:
c000c10a:	55                   	push   ebp
c000c10b:	89 e5                	mov    ebp,esp
c000c10d:	53                   	push   ebx
c000c10e:	83 ec 04             	sub    esp,0x4
c000c111:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c000c116:	48                   	dec    eax
c000c117:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c000c11c:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c000c121:	85 c0                	test   eax,eax
c000c123:	75 01                	jne    c000c126 <startGUIVESA(void*)+0x1c>
c000c125:	fb                   	sti    
c000c126:	8b 1d 38 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020438
c000c12c:	83 ec 08             	sub    esp,0x8
c000c12f:	6a 01                	push   0x1
c000c131:	68 59 db 01 c0       	push   0xc001db59
c000c136:	e8 af 67 00 00       	call   c00128ea <Thr::loadDLL(char const*, bool)>
c000c13b:	83 c4 10             	add    esp,0x10
c000c13e:	83 ec 08             	sub    esp,0x8
c000c141:	53                   	push   ebx
c000c142:	50                   	push   eax
c000c143:	e8 d3 69 00 00       	call   c0012b1b <Thr::executeDLL(unsigned long, void*)>
c000c148:	83 c4 10             	add    esp,0x10
c000c14b:	8b 1d 38 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020438
c000c151:	83 ec 08             	sub    esp,0x8
c000c154:	6a 01                	push   0x1
c000c156:	68 3b db 01 c0       	push   0xc001db3b
c000c15b:	e8 8a 67 00 00       	call   c00128ea <Thr::loadDLL(char const*, bool)>
c000c160:	83 c4 10             	add    esp,0x10
c000c163:	83 ec 08             	sub    esp,0x8
c000c166:	53                   	push   ebx
c000c167:	50                   	push   eax
c000c168:	e8 ae 69 00 00       	call   c0012b1b <Thr::executeDLL(unsigned long, void*)>
c000c16d:	83 c4 10             	add    esp,0x10
c000c170:	90                   	nop
c000c171:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c174:	c9                   	leave  
c000c175:	c3                   	ret    

c000c176 <sendKeyToTerminal(unsigned char)>:
c000c176:	55                   	push   ebp
c000c177:	89 e5                	mov    ebp,esp
c000c179:	83 ec 28             	sub    esp,0x28
c000c17c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c17f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c182:	8b 15 84 04 02 c0    	mov    edx,DWORD PTR ds:0xc0020484
c000c188:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c18b:	25 ff 00 00 00       	and    eax,0xff
c000c190:	83 ec 08             	sub    esp,0x8
c000c193:	50                   	push   eax
c000c194:	52                   	push   edx
c000c195:	e8 ac c8 ff ff       	call   c0008a46 <VgaText::receiveKey(unsigned char)>
c000c19a:	83 c4 10             	add    esp,0x10
c000c19d:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c1a1:	0f 85 8f 00 00 00    	jne    c000c236 <sendKeyToTerminal(unsigned char)+0xc0>
c000c1a7:	fa                   	cli    
c000c1a8:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c000c1ad:	40                   	inc    eax
c000c1ae:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c000c1b3:	a1 e4 36 02 c0       	mov    eax,ds:0xc00236e4
c000c1b8:	40                   	inc    eax
c000c1b9:	a3 e4 36 02 c0       	mov    ds:0xc00236e4,eax
c000c1be:	a1 40 25 02 c0       	mov    eax,ds:0xc0022540
c000c1c3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c1c6:	c7 05 40 25 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022540,0x0
c000c1d0:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c1d4:	74 1f                	je     c000c1f5 <sendKeyToTerminal(unsigned char)+0x7f>
c000c1d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c1d9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c1dc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c1df:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c1e2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c1e5:	83 ec 0c             	sub    esp,0xc
c000c1e8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c1eb:	e8 b0 75 00 00       	call   c00137a0 <unblockTask(ThreadControlBlock*)>
c000c1f0:	83 c4 10             	add    esp,0x10
c000c1f3:	eb db                	jmp    c000c1d0 <sendKeyToTerminal(unsigned char)+0x5a>
c000c1f5:	a1 e4 36 02 c0       	mov    eax,ds:0xc00236e4
c000c1fa:	48                   	dec    eax
c000c1fb:	a3 e4 36 02 c0       	mov    ds:0xc00236e4,eax
c000c200:	a1 e4 36 02 c0       	mov    eax,ds:0xc00236e4
c000c205:	85 c0                	test   eax,eax
c000c207:	75 18                	jne    c000c221 <sendKeyToTerminal(unsigned char)+0xab>
c000c209:	a1 e0 36 02 c0       	mov    eax,ds:0xc00236e0
c000c20e:	85 c0                	test   eax,eax
c000c210:	74 0f                	je     c000c221 <sendKeyToTerminal(unsigned char)+0xab>
c000c212:	c7 05 e0 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00236e0,0x0
c000c21c:	e8 bb 70 00 00       	call   c00132dc <schedule()>
c000c221:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c000c226:	48                   	dec    eax
c000c227:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c000c22c:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c000c231:	85 c0                	test   eax,eax
c000c233:	75 01                	jne    c000c236 <sendKeyToTerminal(unsigned char)+0xc0>
c000c235:	fb                   	sti    
c000c236:	90                   	nop
c000c237:	c9                   	leave  
c000c238:	c3                   	ret    

c000c239 <sendKeyboardToken(KeyboardToken)>:
c000c239:	55                   	push   ebp
c000c23a:	89 e5                	mov    ebp,esp
c000c23c:	83 ec 18             	sub    esp,0x18
c000c23f:	e8 d7 3e 00 00       	call   c001011b <Krnl::userIOReceived()>
c000c244:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c247:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c24a:	25 ff ff 00 00       	and    eax,0xffff
c000c24f:	83 f2 01             	xor    edx,0x1
c000c252:	88 90 60 25 02 c0    	mov    BYTE PTR [eax-0x3ffddaa0],dl
c000c258:	a1 48 25 02 c0       	mov    eax,ds:0xc0022548
c000c25d:	85 c0                	test   eax,eax
c000c25f:	74 24                	je     c000c285 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c261:	8b 0d 48 25 02 c0    	mov    ecx,DWORD PTR ds:0xc0022548
c000c267:	83 ec 04             	sub    esp,0x4
c000c26a:	68 60 25 02 c0       	push   0xc0022560
c000c26f:	83 ec 08             	sub    esp,0x8
c000c272:	89 e2                	mov    edx,esp
c000c274:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c277:	89 02                	mov    DWORD PTR [edx],eax
c000c279:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c27c:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c280:	ff d1                	call   ecx
c000c282:	83 c4 10             	add    esp,0x10
c000c285:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c289:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c28c:	a0 68 29 02 c0       	mov    al,ds:0xc0022968
c000c291:	38 c2                	cmp    dl,al
c000c293:	74 1e                	je     c000c2b3 <sendKeyboardToken(KeyboardToken)+0x7a>
c000c295:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c298:	a2 68 29 02 c0       	mov    ds:0xc0022968,al
c000c29d:	a0 68 29 02 c0       	mov    al,ds:0xc0022968
c000c2a2:	25 ff 00 00 00       	and    eax,0xff
c000c2a7:	83 ec 0c             	sub    esp,0xc
c000c2aa:	50                   	push   eax
c000c2ab:	e8 e8 be ff ff       	call   c0008198 <setTerminalScrollLock(bool)>
c000c2b0:	83 c4 10             	add    esp,0x10
c000c2b3:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c2b6:	84 c0                	test   al,al
c000c2b8:	0f 84 ae 00 00 00    	je     c000c36c <sendKeyboardToken(KeyboardToken)+0x133>
c000c2be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2c1:	66 3d 10 03          	cmp    ax,0x310
c000c2c5:	75 06                	jne    c000c2cd <sendKeyboardToken(KeyboardToken)+0x94>
c000c2c7:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c2cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2d0:	66 3d 11 03          	cmp    ax,0x311
c000c2d4:	75 06                	jne    c000c2dc <sendKeyboardToken(KeyboardToken)+0xa3>
c000c2d6:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	66 3d 12 03          	cmp    ax,0x312
c000c2e3:	75 06                	jne    c000c2eb <sendKeyboardToken(KeyboardToken)+0xb2>
c000c2e5:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c2eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2ee:	66 3d 13 03          	cmp    ax,0x313
c000c2f2:	75 06                	jne    c000c2fa <sendKeyboardToken(KeyboardToken)+0xc1>
c000c2f4:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c2fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2fd:	66 3d 14 03          	cmp    ax,0x314
c000c301:	75 06                	jne    c000c309 <sendKeyboardToken(KeyboardToken)+0xd0>
c000c303:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c309:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c30c:	66 3d 15 03          	cmp    ax,0x315
c000c310:	75 06                	jne    c000c318 <sendKeyboardToken(KeyboardToken)+0xdf>
c000c312:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c318:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c31b:	66 3d 16 03          	cmp    ax,0x316
c000c31f:	75 06                	jne    c000c327 <sendKeyboardToken(KeyboardToken)+0xee>
c000c321:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c327:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c32a:	66 3d 17 03          	cmp    ax,0x317
c000c32e:	75 06                	jne    c000c336 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c330:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c336:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c339:	66 3d 18 03          	cmp    ax,0x318
c000c33d:	75 06                	jne    c000c345 <sendKeyboardToken(KeyboardToken)+0x10c>
c000c33f:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c345:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c348:	66 3d 19 03          	cmp    ax,0x319
c000c34c:	75 06                	jne    c000c354 <sendKeyboardToken(KeyboardToken)+0x11b>
c000c34e:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c354:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c357:	66 3d 1a 03          	cmp    ax,0x31a
c000c35b:	0f 85 c9 00 00 00    	jne    c000c42a <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c361:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c367:	e9 be 00 00 00       	jmp    c000c42a <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c36c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c36f:	66 3d 10 03          	cmp    ax,0x310
c000c373:	75 0a                	jne    c000c37f <sendKeyboardToken(KeyboardToken)+0x146>
c000c375:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c37b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c37f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c382:	66 3d 11 03          	cmp    ax,0x311
c000c386:	75 0a                	jne    c000c392 <sendKeyboardToken(KeyboardToken)+0x159>
c000c388:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c38e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c392:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c395:	66 3d 12 03          	cmp    ax,0x312
c000c399:	75 0a                	jne    c000c3a5 <sendKeyboardToken(KeyboardToken)+0x16c>
c000c39b:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c3a1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c3a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3a8:	66 3d 13 03          	cmp    ax,0x313
c000c3ac:	75 0a                	jne    c000c3b8 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c3ae:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c3b4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c3b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3bb:	66 3d 14 03          	cmp    ax,0x314
c000c3bf:	75 0a                	jne    c000c3cb <sendKeyboardToken(KeyboardToken)+0x192>
c000c3c1:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c3c7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c3cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3ce:	66 3d 15 03          	cmp    ax,0x315
c000c3d2:	75 0a                	jne    c000c3de <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c3d4:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c3da:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c3de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3e1:	66 3d 16 03          	cmp    ax,0x316
c000c3e5:	75 0a                	jne    c000c3f1 <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c3e7:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c3ed:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c3f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3f4:	66 3d 17 03          	cmp    ax,0x317
c000c3f8:	75 0a                	jne    c000c404 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c3fa:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c400:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c404:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c407:	66 3d 18 03          	cmp    ax,0x318
c000c40b:	75 0a                	jne    c000c417 <sendKeyboardToken(KeyboardToken)+0x1de>
c000c40d:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c413:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c417:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c41a:	66 3d 19 03          	cmp    ax,0x319
c000c41e:	75 0a                	jne    c000c42a <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c420:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c426:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c42a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c42d:	66 3d 00 02          	cmp    ax,0x200
c000c431:	75 2c                	jne    c000c45f <sendKeyboardToken(KeyboardToken)+0x226>
c000c433:	a0 60 29 02 c0       	mov    al,ds:0xc0022960
c000c438:	83 f0 01             	xor    eax,0x1
c000c43b:	84 c0                	test   al,al
c000c43d:	74 20                	je     c000c45f <sendKeyboardToken(KeyboardToken)+0x226>
c000c43f:	a1 10 37 02 c0       	mov    eax,ds:0xc0023710
c000c444:	6a 01                	push   0x1
c000c446:	6a 00                	push   0x0
c000c448:	68 9e c0 00 c0       	push   0xc000c09e
c000c44d:	50                   	push   eax
c000c44e:	e8 69 6c 00 00       	call   c00130bc <Process::createThread(void (*)(void*), void*, int)>
c000c453:	83 c4 10             	add    esp,0x10
c000c456:	c6 05 60 29 02 c0 01 	mov    BYTE PTR ds:0xc0022960,0x1
c000c45d:	eb 33                	jmp    c000c492 <sendKeyboardToken(KeyboardToken)+0x259>
c000c45f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c462:	66 3d 01 02          	cmp    ax,0x201
c000c466:	75 2a                	jne    c000c492 <sendKeyboardToken(KeyboardToken)+0x259>
c000c468:	a0 60 29 02 c0       	mov    al,ds:0xc0022960
c000c46d:	83 f0 01             	xor    eax,0x1
c000c470:	84 c0                	test   al,al
c000c472:	74 1e                	je     c000c492 <sendKeyboardToken(KeyboardToken)+0x259>
c000c474:	a1 10 37 02 c0       	mov    eax,ds:0xc0023710
c000c479:	6a 01                	push   0x1
c000c47b:	6a 00                	push   0x0
c000c47d:	68 0a c1 00 c0       	push   0xc000c10a
c000c482:	50                   	push   eax
c000c483:	e8 34 6c 00 00       	call   c00130bc <Process::createThread(void (*)(void*), void*, int)>
c000c488:	83 c4 10             	add    esp,0x10
c000c48b:	c6 05 60 29 02 c0 01 	mov    BYTE PTR ds:0xc0022960,0x1
c000c492:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c495:	66 3d 1d 03          	cmp    ax,0x31d
c000c499:	75 06                	jne    c000c4a1 <sendKeyboardToken(KeyboardToken)+0x268>
c000c49b:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c4a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4a4:	66 3d 1c 03          	cmp    ax,0x31c
c000c4a8:	75 06                	jne    c000c4b0 <sendKeyboardToken(KeyboardToken)+0x277>
c000c4aa:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c4b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4b3:	66 3d 1b 03          	cmp    ax,0x31b
c000c4b7:	75 06                	jne    c000c4bf <sendKeyboardToken(KeyboardToken)+0x286>
c000c4b9:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c4bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4c2:	66 3d 1e 03          	cmp    ax,0x31e
c000c4c6:	75 06                	jne    c000c4ce <sendKeyboardToken(KeyboardToken)+0x295>
c000c4c8:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c4ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4d1:	66 3d 1f 03          	cmp    ax,0x31f
c000c4d5:	75 06                	jne    c000c4dd <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c4d7:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c4dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4e0:	66 3d 1a 03          	cmp    ax,0x31a
c000c4e4:	75 06                	jne    c000c4ec <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c4e6:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c4ec:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c4f0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c4f3:	83 f0 01             	xor    eax,0x1
c000c4f6:	84 c0                	test   al,al
c000c4f8:	74 7b                	je     c000c575 <sendKeyboardToken(KeyboardToken)+0x33c>
c000c4fa:	a0 61 26 02 c0       	mov    al,ds:0xc0022661
c000c4ff:	84 c0                	test   al,al
c000c501:	74 43                	je     c000c546 <sendKeyboardToken(KeyboardToken)+0x30d>
c000c503:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c507:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c50b:	74 2d                	je     c000c53a <sendKeyboardToken(KeyboardToken)+0x301>
c000c50d:	8b 15 64 29 02 c0    	mov    edx,DWORD PTR ds:0xc0022964
c000c513:	89 d0                	mov    eax,edx
c000c515:	c1 e0 02             	shl    eax,0x2
c000c518:	01 d0                	add    eax,edx
c000c51a:	01 c0                	add    eax,eax
c000c51c:	a3 64 29 02 c0       	mov    ds:0xc0022964,eax
c000c521:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c524:	25 ff ff 00 00       	and    eax,0xffff
c000c529:	8d 50 d0             	lea    edx,[eax-0x30]
c000c52c:	a1 64 29 02 c0       	mov    eax,ds:0xc0022964
c000c531:	01 d0                	add    eax,edx
c000c533:	a3 64 29 02 c0       	mov    ds:0xc0022964,eax
c000c538:	eb 71                	jmp    c000c5ab <sendKeyboardToken(KeyboardToken)+0x372>
c000c53a:	c7 05 64 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022964,0x0
c000c544:	eb 65                	jmp    c000c5ab <sendKeyboardToken(KeyboardToken)+0x372>
c000c546:	a1 64 29 02 c0       	mov    eax,ds:0xc0022964
c000c54b:	85 c0                	test   eax,eax
c000c54d:	74 1a                	je     c000c569 <sendKeyboardToken(KeyboardToken)+0x330>
c000c54f:	a1 64 29 02 c0       	mov    eax,ds:0xc0022964
c000c554:	25 ff 00 00 00       	and    eax,0xff
c000c559:	83 ec 0c             	sub    esp,0xc
c000c55c:	50                   	push   eax
c000c55d:	e8 14 fc ff ff       	call   c000c176 <sendKeyToTerminal(unsigned char)>
c000c562:	83 c4 10             	add    esp,0x10
c000c565:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c569:	c7 05 64 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022964,0x0
c000c573:	eb 36                	jmp    c000c5ab <sendKeyboardToken(KeyboardToken)+0x372>
c000c575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c578:	66 3d 01 01          	cmp    ax,0x101
c000c57c:	75 2d                	jne    c000c5ab <sendKeyboardToken(KeyboardToken)+0x372>
c000c57e:	a1 64 29 02 c0       	mov    eax,ds:0xc0022964
c000c583:	85 c0                	test   eax,eax
c000c585:	74 1a                	je     c000c5a1 <sendKeyboardToken(KeyboardToken)+0x368>
c000c587:	a1 64 29 02 c0       	mov    eax,ds:0xc0022964
c000c58c:	25 ff 00 00 00       	and    eax,0xff
c000c591:	83 ec 0c             	sub    esp,0xc
c000c594:	50                   	push   eax
c000c595:	e8 dc fb ff ff       	call   c000c176 <sendKeyToTerminal(unsigned char)>
c000c59a:	83 c4 10             	add    esp,0x10
c000c59d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c5a1:	c7 05 64 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022964,0x0
c000c5ab:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c5ae:	83 f0 01             	xor    eax,0x1
c000c5b1:	84 c0                	test   al,al
c000c5b3:	74 4e                	je     c000c603 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c5b5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c5b8:	83 f0 01             	xor    eax,0x1
c000c5bb:	84 c0                	test   al,al
c000c5bd:	74 44                	je     c000c603 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c5bf:	a0 60 26 02 c0       	mov    al,ds:0xc0022660
c000c5c4:	83 f0 01             	xor    eax,0x1
c000c5c7:	84 c0                	test   al,al
c000c5c9:	74 38                	je     c000c603 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c5cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5ce:	66 83 f8 1f          	cmp    ax,0x1f
c000c5d2:	76 09                	jbe    c000c5dd <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c5d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5d7:	66 83 f8 7e          	cmp    ax,0x7e
c000c5db:	76 12                	jbe    c000c5ef <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c5dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5e0:	66 83 f8 0a          	cmp    ax,0xa
c000c5e4:	74 09                	je     c000c5ef <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c5e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5e9:	66 83 f8 08          	cmp    ax,0x8
c000c5ed:	75 14                	jne    c000c603 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c5ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5f2:	25 ff 00 00 00       	and    eax,0xff
c000c5f7:	83 ec 0c             	sub    esp,0xc
c000c5fa:	50                   	push   eax
c000c5fb:	e8 76 fb ff ff       	call   c000c176 <sendKeyToTerminal(unsigned char)>
c000c600:	83 c4 10             	add    esp,0x10
c000c603:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c606:	83 f0 01             	xor    eax,0x1
c000c609:	84 c0                	test   al,al
c000c60b:	74 51                	je     c000c65e <sendKeyboardToken(KeyboardToken)+0x425>
c000c60d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c610:	83 f0 01             	xor    eax,0x1
c000c613:	84 c0                	test   al,al
c000c615:	74 47                	je     c000c65e <sendKeyboardToken(KeyboardToken)+0x425>
c000c617:	a0 60 26 02 c0       	mov    al,ds:0xc0022660
c000c61c:	84 c0                	test   al,al
c000c61e:	74 3e                	je     c000c65e <sendKeyboardToken(KeyboardToken)+0x425>
c000c620:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c623:	66 83 f8 3f          	cmp    ax,0x3f
c000c627:	76 35                	jbe    c000c65e <sendKeyboardToken(KeyboardToken)+0x425>
c000c629:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c62c:	66 83 f8 7f          	cmp    ax,0x7f
c000c630:	77 2c                	ja     c000c65e <sendKeyboardToken(KeyboardToken)+0x425>
c000c632:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c635:	88 c2                	mov    dl,al
c000c637:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c63a:	66 83 f8 5f          	cmp    ax,0x5f
c000c63e:	76 04                	jbe    c000c644 <sendKeyboardToken(KeyboardToken)+0x40b>
c000c640:	b0 20                	mov    al,0x20
c000c642:	eb 02                	jmp    c000c646 <sendKeyboardToken(KeyboardToken)+0x40d>
c000c644:	b0 00                	mov    al,0x0
c000c646:	29 c2                	sub    edx,eax
c000c648:	88 d0                	mov    al,dl
c000c64a:	83 e8 40             	sub    eax,0x40
c000c64d:	25 ff 00 00 00       	and    eax,0xff
c000c652:	83 ec 0c             	sub    esp,0xc
c000c655:	50                   	push   eax
c000c656:	e8 1b fb ff ff       	call   c000c176 <sendKeyToTerminal(unsigned char)>
c000c65b:	83 c4 10             	add    esp,0x10
c000c65e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c661:	66 3d 00 03          	cmp    ax,0x300
c000c665:	75 0f                	jne    c000c676 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c667:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c66a:	83 f0 01             	xor    eax,0x1
c000c66d:	84 c0                	test   al,al
c000c66f:	74 05                	je     c000c676 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c671:	e8 23 bb ff ff       	call   c0008199 <doTerminalCycle()>
c000c676:	90                   	nop
c000c677:	c9                   	leave  
c000c678:	c3                   	ret    

c000c679 <clearInternalKeybuffer(VgaText*)>:
c000c679:	55                   	push   ebp
c000c67a:	89 e5                	mov    ebp,esp
c000c67c:	83 ec 08             	sub    esp,0x8
c000c67f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c682:	05 b2 00 00 00       	add    eax,0xb2
c000c687:	83 ec 0c             	sub    esp,0xc
c000c68a:	50                   	push   eax
c000c68b:	e8 b0 3e ff ff       	call   c0000540 <strlen>
c000c690:	83 c4 10             	add    esp,0x10
c000c693:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c696:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c69c:	83 ec 04             	sub    esp,0x4
c000c69f:	50                   	push   eax
c000c6a0:	6a 00                	push   0x0
c000c6a2:	52                   	push   edx
c000c6a3:	e8 28 3e ff ff       	call   c00004d0 <memset>
c000c6a8:	83 c4 10             	add    esp,0x10
c000c6ab:	90                   	nop
c000c6ac:	c9                   	leave  
c000c6ad:	c3                   	ret    

c000c6ae <readKeyboard(VgaText*, char*, unsigned long)>:
c000c6ae:	55                   	push   ebp
c000c6af:	89 e5                	mov    ebp,esp
c000c6b1:	83 ec 18             	sub    esp,0x18
c000c6b4:	a1 48 25 02 c0       	mov    eax,ds:0xc0022548
c000c6b9:	85 c0                	test   eax,eax
c000c6bb:	74 2a                	je     c000c6e7 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c6bd:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c6c3:	8b 0d 48 25 02 c0    	mov    ecx,DWORD PTR ds:0xc0022548
c000c6c9:	83 ec 04             	sub    esp,0x4
c000c6cc:	68 60 25 02 c0       	push   0xc0022560
c000c6d1:	83 ec 08             	sub    esp,0x8
c000c6d4:	89 e2                	mov    edx,esp
c000c6d6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c6d9:	89 02                	mov    DWORD PTR [edx],eax
c000c6db:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c6de:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c6e2:	ff d1                	call   ecx
c000c6e4:	83 c4 10             	add    esp,0x10
c000c6e7:	fb                   	sti    
c000c6e8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c6ef:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c6f3:	0f 84 b4 00 00 00    	je     c000c7ad <readKeyboard(VgaText*, char*, unsigned long)+0xff>
c000c6f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6fc:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c702:	84 c0                	test   al,al
c000c704:	75 28                	jne    c000c72e <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c706:	fa                   	cli    
c000c707:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c000c70c:	40                   	inc    eax
c000c70d:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c000c712:	e8 c5 6b 00 00       	call   c00132dc <schedule()>
c000c717:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c000c71c:	48                   	dec    eax
c000c71d:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c000c722:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c000c727:	85 c0                	test   eax,eax
c000c729:	75 ce                	jne    c000c6f9 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c72b:	fb                   	sti    
c000c72c:	eb cb                	jmp    c000c6f9 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c72e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c731:	8d 50 01             	lea    edx,[eax+0x1]
c000c734:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c737:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c73a:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000c740:	88 10                	mov    BYTE PTR [eax],dl
c000c742:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c745:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c74b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c74e:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c752:	75 0d                	jne    c000c761 <readKeyboard(VgaText*, char*, unsigned long)+0xb3>
c000c754:	83 ec 0c             	sub    esp,0xc
c000c757:	6a ff                	push   0xffffffff
c000c759:	e8 a2 74 00 00       	call   c0013c00 <terminateTask(int)>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c764:	05 b2 00 00 00       	add    eax,0xb2
c000c769:	83 ec 0c             	sub    esp,0xc
c000c76c:	50                   	push   eax
c000c76d:	e8 ce 3d ff ff       	call   c0000540 <strlen>
c000c772:	83 c4 10             	add    esp,0x10
c000c775:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c778:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c77e:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c781:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c784:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c78a:	83 ec 04             	sub    esp,0x4
c000c78d:	50                   	push   eax
c000c78e:	51                   	push   ecx
c000c78f:	52                   	push   edx
c000c790:	e8 4b 3c ff ff       	call   c00003e0 <memmove>
c000c795:	83 c4 10             	add    esp,0x10
c000c798:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c79b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c79e:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c7a2:	0f 85 47 ff ff ff    	jne    c000c6ef <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c7a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c7ab:	eb 03                	jmp    c000c7b0 <readKeyboard(VgaText*, char*, unsigned long)+0x102>
c000c7ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c7b0:	c9                   	leave  
c000c7b1:	c3                   	ret    

c000c7b2 <Keyboard::Keyboard(char const*)>:
c000c7b2:	83 ec 0c             	sub    esp,0xc
c000c7b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7b9:	83 ec 08             	sub    esp,0x8
c000c7bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7c0:	50                   	push   eax
c000c7c1:	e8 66 f2 ff ff       	call   c000ba2c <Device::Device(char const*)>
c000c7c6:	83 c4 10             	add    esp,0x10
c000c7c9:	ba 7c db 01 c0       	mov    edx,0xc001db7c
c000c7ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7d2:	89 10                	mov    DWORD PTR [eax],edx
c000c7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7d8:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c7e2:	c6 05 44 25 02 c0 01 	mov    BYTE PTR ds:0xc0022544,0x1
c000c7e9:	90                   	nop
c000c7ea:	83 c4 0c             	add    esp,0xc
c000c7ed:	c3                   	ret    

c000c7ee <Keyboard::~Keyboard()>:
c000c7ee:	83 ec 0c             	sub    esp,0xc
c000c7f1:	ba 7c db 01 c0       	mov    edx,0xc001db7c
c000c7f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7fa:	89 10                	mov    DWORD PTR [eax],edx
c000c7fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c800:	83 ec 0c             	sub    esp,0xc
c000c803:	50                   	push   eax
c000c804:	e8 8d ef ff ff       	call   c000b796 <Device::~Device()>
c000c809:	83 c4 10             	add    esp,0x10
c000c80c:	90                   	nop
c000c80d:	83 c4 0c             	add    esp,0xc
c000c810:	c3                   	ret    
c000c811:	90                   	nop

c000c812 <Keyboard::~Keyboard()>:
c000c812:	83 ec 0c             	sub    esp,0xc
c000c815:	83 ec 0c             	sub    esp,0xc
c000c818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81c:	e8 cd ff ff ff       	call   c000c7ee <Keyboard::~Keyboard()>
c000c821:	83 c4 10             	add    esp,0x10
c000c824:	83 ec 08             	sub    esp,0x8
c000c827:	68 5c 01 00 00       	push   0x15c
c000c82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c830:	e8 29 db ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000c835:	83 c4 10             	add    esp,0x10
c000c838:	83 c4 0c             	add    esp,0xc
c000c83b:	c3                   	ret    

c000c83c <LogicalDisk::close(int, int, void*)>:
c000c83c:	83 c8 ff             	or     eax,0xffffffff
c000c83f:	c3                   	ret    

c000c840 <LogicalDisk::~LogicalDisk()>:
c000c840:	83 ec 0c             	sub    esp,0xc
c000c843:	ba f4 db 01 c0       	mov    edx,0xc001dbf4
c000c848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c84c:	89 10                	mov    DWORD PTR [eax],edx
c000c84e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c852:	83 ec 0c             	sub    esp,0xc
c000c855:	50                   	push   eax
c000c856:	e8 3b ef ff ff       	call   c000b796 <Device::~Device()>
c000c85b:	83 c4 10             	add    esp,0x10
c000c85e:	90                   	nop
c000c85f:	83 c4 0c             	add    esp,0xc
c000c862:	c3                   	ret    
c000c863:	90                   	nop

c000c864 <LogicalDisk::~LogicalDisk()>:
c000c864:	83 ec 0c             	sub    esp,0xc
c000c867:	83 ec 0c             	sub    esp,0xc
c000c86a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c86e:	e8 cd ff ff ff       	call   c000c840 <LogicalDisk::~LogicalDisk()>
c000c873:	83 c4 10             	add    esp,0x10
c000c876:	83 ec 08             	sub    esp,0x8
c000c879:	68 74 01 00 00       	push   0x174
c000c87e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c882:	e8 d7 da ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000c887:	83 c4 10             	add    esp,0x10
c000c88a:	83 c4 0c             	add    esp,0xc
c000c88d:	c3                   	ret    

c000c88e <LogicalDisk::open(int, int, void*)>:
c000c88e:	83 ec 18             	sub    esp,0x18
c000c891:	68 a8 db 01 c0       	push   0xc001dba8
c000c896:	e8 30 38 00 00       	call   c00100cb <KePanic(char const*)>
c000c89b:	83 c8 ff             	or     eax,0xffffffff
c000c89e:	83 c4 1c             	add    esp,0x1c
c000c8a1:	c3                   	ret    

c000c8a2 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000c8a2:	53                   	push   ebx
c000c8a3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c8a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c8ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c8af:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000c8b5:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000c8bb:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000c8c1:	77 10                	ja     c000c8d3 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000c8c3:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000c8c9:	89 d3                	mov    ebx,edx
c000c8cb:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000c8d1:	72 05                	jb     c000c8d8 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000c8d3:	83 c8 ff             	or     eax,0xffffffff
c000c8d6:	89 c2                	mov    edx,eax
c000c8d8:	5b                   	pop    ebx
c000c8d9:	c3                   	ret    

c000c8da <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000c8da:	56                   	push   esi
c000c8db:	83 c8 ff             	or     eax,0xffffffff
c000c8de:	53                   	push   ebx
c000c8df:	89 c2                	mov    edx,eax
c000c8e1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c8e5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c8e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c8ed:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000c8f3:	77 27                	ja     c000c91c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c8f5:	89 d8                	mov    eax,ebx
c000c8f7:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000c8fd:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000c903:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c908:	89 c2                	mov    edx,eax
c000c90a:	73 10                	jae    c000c91c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c90c:	89 c8                	mov    eax,ecx
c000c90e:	89 da                	mov    edx,ebx
c000c910:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000c916:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000c91c:	5b                   	pop    ebx
c000c91d:	5e                   	pop    esi
c000c91e:	c3                   	ret    
c000c91f:	90                   	nop

c000c920 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000c920:	83 ec 1c             	sub    esp,0x1c
c000c923:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c927:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c92b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c92f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c933:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c937:	89 04 24             	mov    DWORD PTR [esp],eax
c000c93a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c93e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c942:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c946:	83 ec 08             	sub    esp,0x8
c000c949:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c94d:	50                   	push   eax
c000c94e:	e8 d9 f0 ff ff       	call   c000ba2c <Device::Device(char const*)>
c000c953:	83 c4 10             	add    esp,0x10
c000c956:	ba f4 db 01 c0       	mov    edx,0xc001dbf4
c000c95b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c95f:	89 10                	mov    DWORD PTR [eax],edx
c000c961:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c965:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c96c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c970:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c977:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c97b:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000c985:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c989:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c98d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c991:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000c997:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000c99d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c9a1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000c9a4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c9a8:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000c9ae:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000c9b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9b8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c9bc:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000c9c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9c6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000c9d0:	90                   	nop
c000c9d1:	83 c4 1c             	add    esp,0x1c
c000c9d4:	c3                   	ret    
c000c9d5:	90                   	nop

c000c9d6 <LogicalDisk::assignDriveLetter()>:
c000c9d6:	55                   	push   ebp
c000c9d7:	57                   	push   edi
c000c9d8:	56                   	push   esi
c000c9d9:	53                   	push   ebx
c000c9da:	83 ec 14             	sub    esp,0x14
c000c9dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c9e1:	8b 3d 80 29 02 c0    	mov    edi,DWORD PTR ds:0xc0022980
c000c9e7:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000c9ed:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c9f1:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000c9f7:	8b 3d 84 29 02 c0    	mov    edi,DWORD PTR ds:0xc0022984
c000c9fd:	3c 01                	cmp    al,0x1
c000c9ff:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000ca03:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ca07:	19 c0                	sbb    eax,eax
c000ca09:	83 e0 02             	and    eax,0x2
c000ca0c:	83 c0 41             	add    eax,0x41
c000ca0f:	0f be e8             	movsx  ebp,al
c000ca12:	3c 43                	cmp    al,0x43
c000ca14:	75 10                	jne    c000ca26 <LogicalDisk::assignDriveLetter()+0x50>
c000ca16:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000ca1d:	75 5d                	jne    c000ca7c <LogicalDisk::assignDriveLetter()+0xa6>
c000ca1f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000ca24:	75 56                	jne    c000ca7c <LogicalDisk::assignDriveLetter()+0xa6>
c000ca26:	8d 75 bf             	lea    esi,[ebp-0x41]
c000ca29:	ba 01 00 00 00       	mov    edx,0x1
c000ca2e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ca32:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000ca36:	d3 e2                	shl    edx,cl
c000ca38:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ca3c:	89 d7                	mov    edi,edx
c000ca3e:	89 d6                	mov    esi,edx
c000ca40:	c1 ff 1f             	sar    edi,0x1f
c000ca43:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000ca47:	21 f9                	and    ecx,edi
c000ca49:	09 d1                	or     ecx,edx
c000ca4b:	75 2f                	jne    c000ca7c <LogicalDisk::assignDriveLetter()+0xa6>
c000ca4d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000ca51:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca55:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000ca5b:	09 f2                	or     edx,esi
c000ca5d:	89 15 80 29 02 c0    	mov    DWORD PTR ds:0xc0022980,edx
c000ca63:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca67:	09 fa                	or     edx,edi
c000ca69:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000ca6d:	89 15 84 29 02 c0    	mov    DWORD PTR ds:0xc0022984,edx
c000ca73:	89 1c bd a0 29 02 c0 	mov    DWORD PTR [edi*4-0x3ffdd660],ebx
c000ca7a:	eb 08                	jmp    c000ca84 <LogicalDisk::assignDriveLetter()+0xae>
c000ca7c:	45                   	inc    ebp
c000ca7d:	40                   	inc    eax
c000ca7e:	3c 5b                	cmp    al,0x5b
c000ca80:	75 90                	jne    c000ca12 <LogicalDisk::assignDriveLetter()+0x3c>
c000ca82:	31 c0                	xor    eax,eax
c000ca84:	83 c4 14             	add    esp,0x14
c000ca87:	5b                   	pop    ebx
c000ca88:	5e                   	pop    esi
c000ca89:	5f                   	pop    edi
c000ca8a:	5d                   	pop    ebp
c000ca8b:	c3                   	ret    

c000ca8c <LogicalDisk::mount()>:
c000ca8c:	56                   	push   esi
c000ca8d:	53                   	push   ebx
c000ca8e:	53                   	push   ebx
c000ca8f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ca93:	8b 1d 34 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020534
c000ca99:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000caa3:	85 db                	test   ebx,ebx
c000caa5:	74 27                	je     c000cace <LogicalDisk::mount()+0x42>
c000caa7:	51                   	push   ecx
c000caa8:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000caaf:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cab1:	83 e8 41             	sub    eax,0x41
c000cab4:	50                   	push   eax
c000cab5:	56                   	push   esi
c000cab6:	53                   	push   ebx
c000cab7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000caba:	83 c4 10             	add    esp,0x10
c000cabd:	84 c0                	test   al,al
c000cabf:	74 08                	je     c000cac9 <LogicalDisk::mount()+0x3d>
c000cac1:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000cac7:	eb 07                	jmp    c000cad0 <LogicalDisk::mount()+0x44>
c000cac9:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cacc:	eb d5                	jmp    c000caa3 <LogicalDisk::mount()+0x17>
c000cace:	31 c0                	xor    eax,eax
c000cad0:	5a                   	pop    edx
c000cad1:	5b                   	pop    ebx
c000cad2:	5e                   	pop    esi
c000cad3:	c3                   	ret    

c000cad4 <LogicalDisk::unmount()>:
c000cad4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cad8:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cae2:	c3                   	ret    
c000cae3:	90                   	nop

c000cae4 <LogicalDisk::eject()>:
c000cae4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cae8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000caee:	8b 10                	mov    edx,DWORD PTR [eax]
c000caf0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000caf4:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000caf7:	90                   	nop

c000caf8 <LogicalDisk::unassignDriveLetter()>:
c000caf8:	57                   	push   edi
c000caf9:	56                   	push   esi
c000cafa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cafe:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cb05:	84 c9                	test   cl,cl
c000cb07:	75 0f                	jne    c000cb18 <LogicalDisk::unassignDriveLetter()+0x20>
c000cb09:	c7 44 24 0c cc db 01 c0 	mov    DWORD PTR [esp+0xc],0xc001dbcc
c000cb11:	5e                   	pop    esi
c000cb12:	5f                   	pop    edi
c000cb13:	e9 b3 35 00 00       	jmp    c00100cb <KePanic(char const*)>
c000cb18:	83 e9 41             	sub    ecx,0x41
c000cb1b:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cb22:	b8 01 00 00 00       	mov    eax,0x1
c000cb27:	c7 04 8d a0 29 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdd660],0x0
c000cb32:	d3 e0                	shl    eax,cl
c000cb34:	89 c7                	mov    edi,eax
c000cb36:	f7 d0                	not    eax
c000cb38:	c1 ff 1f             	sar    edi,0x1f
c000cb3b:	21 05 80 29 02 c0    	and    DWORD PTR ds:0xc0022980,eax
c000cb41:	89 fe                	mov    esi,edi
c000cb43:	f7 d6                	not    esi
c000cb45:	21 35 84 29 02 c0    	and    DWORD PTR ds:0xc0022984,esi
c000cb4b:	5e                   	pop    esi
c000cb4c:	5f                   	pop    edi
c000cb4d:	c3                   	ret    

c000cb4e <LogicalDisk::read(unsigned long long, int, void*)>:
c000cb4e:	57                   	push   edi
c000cb4f:	56                   	push   esi
c000cb50:	53                   	push   ebx
c000cb51:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cb55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cb59:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cb5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cb61:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cb67:	77 41                	ja     c000cbaa <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cb69:	99                   	cdq    
c000cb6a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cb70:	01 c8                	add    eax,ecx
c000cb72:	11 da                	adc    edx,ebx
c000cb74:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cb7a:	19 d7                	sbb    edi,edx
c000cb7c:	72 33                	jb     c000cbb1 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cb7e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cb84:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cb8a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cb8e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cb92:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cb98:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cb9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cba2:	5b                   	pop    ebx
c000cba3:	5e                   	pop    esi
c000cba4:	5f                   	pop    edi
c000cba5:	e9 50 0a 00 00       	jmp    c000d5fa <VCache::read(unsigned long long, int, void*)>
c000cbaa:	b8 05 00 00 00       	mov    eax,0x5
c000cbaf:	eb 05                	jmp    c000cbb6 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cbb1:	b8 07 00 00 00       	mov    eax,0x7
c000cbb6:	5b                   	pop    ebx
c000cbb7:	5e                   	pop    esi
c000cbb8:	5f                   	pop    edi
c000cbb9:	c3                   	ret    

c000cbba <LogicalDisk::write(unsigned long long, int, void*)>:
c000cbba:	57                   	push   edi
c000cbbb:	56                   	push   esi
c000cbbc:	53                   	push   ebx
c000cbbd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cbc1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cbc5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cbc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cbcd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cbd3:	77 41                	ja     c000cc16 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000cbd5:	99                   	cdq    
c000cbd6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cbdc:	01 c8                	add    eax,ecx
c000cbde:	11 da                	adc    edx,ebx
c000cbe0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cbe6:	19 d7                	sbb    edi,edx
c000cbe8:	72 33                	jb     c000cc1d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cbea:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cbf0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cbf6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cbfa:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cbfe:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cc04:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cc0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc0e:	5b                   	pop    ebx
c000cc0f:	5e                   	pop    esi
c000cc10:	5f                   	pop    edi
c000cc11:	e9 ce 08 00 00       	jmp    c000d4e4 <VCache::write(unsigned long long, int, void*)>
c000cc16:	b8 05 00 00 00       	mov    eax,0x5
c000cc1b:	eb 05                	jmp    c000cc22 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000cc1d:	b8 07 00 00 00       	mov    eax,0x7
c000cc22:	5b                   	pop    ebx
c000cc23:	5e                   	pop    esi
c000cc24:	5f                   	pop    edi
c000cc25:	c3                   	ret    
c000cc26:	66 90                	xchg   ax,ax

c000cc28 <Mouse::Mouse(char const*)>:
c000cc28:	83 ec 0c             	sub    esp,0xc
c000cc2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc2f:	83 ec 08             	sub    esp,0x8
c000cc32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc36:	50                   	push   eax
c000cc37:	e8 f0 ed ff ff       	call   c000ba2c <Device::Device(char const*)>
c000cc3c:	83 c4 10             	add    esp,0x10
c000cc3f:	ba 20 dc 01 c0       	mov    edx,0xc001dc20
c000cc44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc48:	89 10                	mov    DWORD PTR [eax],edx
c000cc4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc4e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000cc58:	90                   	nop
c000cc59:	83 c4 0c             	add    esp,0xc
c000cc5c:	c3                   	ret    
c000cc5d:	90                   	nop
c000cc5e:	66 90                	xchg   ax,ax

c000cc60 <Mouse::~Mouse()>:
c000cc60:	83 ec 0c             	sub    esp,0xc
c000cc63:	ba 20 dc 01 c0       	mov    edx,0xc001dc20
c000cc68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc6c:	89 10                	mov    DWORD PTR [eax],edx
c000cc6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc72:	83 ec 0c             	sub    esp,0xc
c000cc75:	50                   	push   eax
c000cc76:	e8 1b eb ff ff       	call   c000b796 <Device::~Device()>
c000cc7b:	83 c4 10             	add    esp,0x10
c000cc7e:	90                   	nop
c000cc7f:	83 c4 0c             	add    esp,0xc
c000cc82:	c3                   	ret    
c000cc83:	90                   	nop

c000cc84 <Mouse::~Mouse()>:
c000cc84:	83 ec 0c             	sub    esp,0xc
c000cc87:	83 ec 0c             	sub    esp,0xc
c000cc8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc8e:	e8 cd ff ff ff       	call   c000cc60 <Mouse::~Mouse()>
c000cc93:	83 c4 10             	add    esp,0x10
c000cc96:	83 ec 08             	sub    esp,0x8
c000cc99:	68 58 01 00 00       	push   0x158
c000cc9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca2:	e8 b7 d6 ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000cca7:	83 c4 10             	add    esp,0x10
c000ccaa:	83 c4 0c             	add    esp,0xc
c000ccad:	c3                   	ret    

c000ccae <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ccae:	55                   	push   ebp
c000ccaf:	57                   	push   edi
c000ccb0:	56                   	push   esi
c000ccb1:	53                   	push   ebx
c000ccb2:	81 ec 28 01 00 00    	sub    esp,0x128
c000ccb8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000ccbf:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000ccc6:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cccd:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000ccd4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ccd8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ccdc:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cce3:	e8 40 ee ff ff       	call   c000bb28 <Device::getName()>
c000cce8:	5a                   	pop    edx
c000cce9:	59                   	pop    ecx
c000ccea:	50                   	push   eax
c000cceb:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ccef:	55                   	push   ebp
c000ccf0:	e8 0b 39 ff ff       	call   c0000600 <strcpy>
c000ccf5:	5b                   	pop    ebx
c000ccf6:	58                   	pop    eax
c000ccf7:	68 44 dc 01 c0       	push   0xc001dc44
c000ccfc:	55                   	push   ebp
c000ccfd:	e8 be 3a ff ff       	call   c00007c0 <strcat>
c000cd02:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000cd09:	e8 ab aa ff ff       	call   c00077b9 <malloc>
c000cd0e:	83 c4 0c             	add    esp,0xc
c000cd11:	89 c3                	mov    ebx,eax
c000cd13:	57                   	push   edi
c000cd14:	56                   	push   esi
c000cd15:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cd19:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cd1d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000cd24:	55                   	push   ebp
c000cd25:	50                   	push   eax
c000cd26:	e8 f5 fb ff ff       	call   c000c920 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000cd2b:	83 c4 14             	add    esp,0x14
c000cd2e:	53                   	push   ebx
c000cd2f:	e8 a2 fc ff ff       	call   c000c9d6 <LogicalDisk::assignDriveLetter()>
c000cd34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cd37:	e8 50 fd ff ff       	call   c000ca8c <LogicalDisk::mount()>
c000cd3c:	58                   	pop    eax
c000cd3d:	5a                   	pop    edx
c000cd3e:	53                   	push   ebx
c000cd3f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cd46:	e8 49 eb ff ff       	call   c000b894 <Device::addChild(Device*)>
c000cd4b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000cd51:	5b                   	pop    ebx
c000cd52:	5e                   	pop    esi
c000cd53:	5f                   	pop    edi
c000cd54:	5d                   	pop    ebp
c000cd55:	c3                   	ret    

c000cd56 <createPartitionsForDisk(PhysicalDisk*)>:
c000cd56:	55                   	push   ebp
c000cd57:	57                   	push   edi
c000cd58:	56                   	push   esi
c000cd59:	53                   	push   ebx
c000cd5a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000cd60:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000cd67:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000cd6d:	3d 00 02 00 00       	cmp    eax,0x200
c000cd72:	74 27                	je     c000cd9b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000cd74:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000cd7a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000cd80:	83 ec 10             	sub    esp,0x10
c000cd83:	0f a4 f7 0a          	shld   edi,esi,0xa
c000cd87:	99                   	cdq    
c000cd88:	c1 e6 0a             	shl    esi,0xa
c000cd8b:	52                   	push   edx
c000cd8c:	89 fd                	mov    ebp,edi
c000cd8e:	50                   	push   eax
c000cd8f:	55                   	push   ebp
c000cd90:	56                   	push   esi
c000cd91:	e8 4a ee 00 00       	call   c001bbe0 <__udivdi3>
c000cd96:	e9 b1 00 00 00       	jmp    c000ce4c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cd9b:	83 ec 0c             	sub    esp,0xc
c000cd9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cda0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000cda4:	56                   	push   esi
c000cda5:	6a 01                	push   0x1
c000cda7:	6a 00                	push   0x0
c000cda9:	6a 00                	push   0x0
c000cdab:	53                   	push   ebx
c000cdac:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000cdaf:	83 c4 20             	add    esp,0x20
c000cdb2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000cdba:	75 0a                	jne    c000cdc6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000cdbc:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000cdc4:	74 2c                	je     c000cdf2 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000cdc6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cdcc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cdd2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cdd8:	83 ec 10             	sub    esp,0x10
c000cddb:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cddf:	89 f7                	mov    edi,esi
c000cde1:	c1 e0 0a             	shl    eax,0xa
c000cde4:	c1 ff 1f             	sar    edi,0x1f
c000cde7:	57                   	push   edi
c000cde8:	56                   	push   esi
c000cde9:	52                   	push   edx
c000cdea:	50                   	push   eax
c000cdeb:	e8 f0 ed 00 00       	call   c001bbe0 <__udivdi3>
c000cdf0:	eb 5a                	jmp    c000ce4c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cdf2:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000cdf9:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000ce00:	83 e1 7f             	and    ecx,0x7f
c000ce03:	83 e0 7f             	and    eax,0x7f
c000ce06:	01 c1                	add    ecx,eax
c000ce08:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000ce0f:	83 e0 7f             	and    eax,0x7f
c000ce12:	01 c1                	add    ecx,eax
c000ce14:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000ce1b:	83 e0 7f             	and    eax,0x7f
c000ce1e:	00 c1                	add    cl,al
c000ce20:	74 41                	je     c000ce63 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000ce22:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ce28:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ce2e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ce34:	83 ec 10             	sub    esp,0x10
c000ce37:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ce3b:	89 f7                	mov    edi,esi
c000ce3d:	c1 e0 0a             	shl    eax,0xa
c000ce40:	c1 ff 1f             	sar    edi,0x1f
c000ce43:	57                   	push   edi
c000ce44:	56                   	push   esi
c000ce45:	52                   	push   edx
c000ce46:	50                   	push   eax
c000ce47:	e8 94 ed 00 00       	call   c001bbe0 <__udivdi3>
c000ce4c:	83 c4 14             	add    esp,0x14
c000ce4f:	52                   	push   edx
c000ce50:	50                   	push   eax
c000ce51:	6a 00                	push   0x0
c000ce53:	6a 00                	push   0x0
c000ce55:	53                   	push   ebx
c000ce56:	e8 53 fe ff ff       	call   c000ccae <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000ce5b:	83 c4 20             	add    esp,0x20
c000ce5e:	e9 79 01 00 00       	jmp    c000cfdc <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000ce63:	89 f0                	mov    eax,esi
c000ce65:	31 f6                	xor    esi,esi
c000ce67:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000ce6e:	75 02                	jne    c000ce72 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000ce70:	89 f1                	mov    ecx,esi
c000ce72:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000ce79:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000ce80:	c1 e2 08             	shl    edx,0x8
c000ce83:	c1 e7 10             	shl    edi,0x10
c000ce86:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000ce8e:	09 fa                	or     edx,edi
c000ce90:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000ce98:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000ce9f:	83 c0 10             	add    eax,0x10
c000cea2:	09 fa                	or     edx,edi
c000cea4:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000ceab:	c1 e7 18             	shl    edi,0x18
c000ceae:	09 fa                	or     edx,edi
c000ceb0:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000ceb7:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000cebb:	c1 e7 10             	shl    edi,0x10
c000cebe:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000cec5:	c1 e2 08             	shl    edx,0x8
c000cec8:	09 fa                	or     edx,edi
c000ceca:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000ced1:	09 fa                	or     edx,edi
c000ced3:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000ceda:	c1 e7 18             	shl    edi,0x18
c000cedd:	09 fa                	or     edx,edi
c000cedf:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000cee3:	46                   	inc    esi
c000cee4:	83 fe 04             	cmp    esi,0x4
c000cee7:	0f 85 7a ff ff ff    	jne    c000ce67 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000ceed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cef1:	83 f0 01             	xor    eax,0x1
c000cef4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000cef8:	75 57                	jne    c000cf51 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cefa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cefe:	83 f0 01             	xor    eax,0x1
c000cf01:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000cf05:	75 4a                	jne    c000cf51 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cf07:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000cf0b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000cf13:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000cf1b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cf21:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cf27:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cf2d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cf31:	89 f7                	mov    edi,esi
c000cf33:	c1 e0 0a             	shl    eax,0xa
c000cf36:	c1 ff 1f             	sar    edi,0x1f
c000cf39:	57                   	push   edi
c000cf3a:	56                   	push   esi
c000cf3b:	52                   	push   edx
c000cf3c:	50                   	push   eax
c000cf3d:	e8 9e ec 00 00       	call   c001bbe0 <__udivdi3>
c000cf42:	83 c4 10             	add    esp,0x10
c000cf45:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cf49:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cf4d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000cf51:	84 c9                	test   cl,cl
c000cf53:	74 53                	je     c000cfa8 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000cf55:	0f b6 c9             	movzx  ecx,cl
c000cf58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf5c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cf60:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000cf64:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000cf68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf70:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000cf74:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000cf78:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf7c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cf84:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cf88:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000cf8c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000cf90:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000cf94:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000cf98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cf9c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cfa0:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000cfa4:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000cfa8:	31 ed                	xor    ebp,ebp
c000cfaa:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000cfae:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000cfb2:	89 f8                	mov    eax,edi
c000cfb4:	09 f0                	or     eax,esi
c000cfb6:	74 1e                	je     c000cfd6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000cfb8:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000cfbc:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000cfc0:	89 d1                	mov    ecx,edx
c000cfc2:	09 c1                	or     ecx,eax
c000cfc4:	74 10                	je     c000cfd6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000cfc6:	83 ec 0c             	sub    esp,0xc
c000cfc9:	57                   	push   edi
c000cfca:	56                   	push   esi
c000cfcb:	52                   	push   edx
c000cfcc:	50                   	push   eax
c000cfcd:	53                   	push   ebx
c000cfce:	e8 db fc ff ff       	call   c000ccae <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000cfd3:	83 c4 20             	add    esp,0x20
c000cfd6:	45                   	inc    ebp
c000cfd7:	83 fd 04             	cmp    ebp,0x4
c000cfda:	75 ce                	jne    c000cfaa <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000cfdc:	81 c4 5c 02 00 00    	add    esp,0x25c
c000cfe2:	5b                   	pop    ebx
c000cfe3:	5e                   	pop    esi
c000cfe4:	5f                   	pop    edi
c000cfe5:	5d                   	pop    ebp
c000cfe6:	c3                   	ret    
c000cfe7:	90                   	nop

c000cfe8 <Serial::Serial(char const*)>:
c000cfe8:	83 ec 0c             	sub    esp,0xc
c000cfeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfef:	83 ec 08             	sub    esp,0x8
c000cff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff6:	50                   	push   eax
c000cff7:	e8 30 ea ff ff       	call   c000ba2c <Device::Device(char const*)>
c000cffc:	83 c4 10             	add    esp,0x10
c000cfff:	ba 58 dc 01 c0       	mov    edx,0xc001dc58
c000d004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d008:	89 10                	mov    DWORD PTR [eax],edx
c000d00a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d00e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d018:	90                   	nop
c000d019:	83 c4 0c             	add    esp,0xc
c000d01c:	c3                   	ret    
c000d01d:	90                   	nop
c000d01e:	66 90                	xchg   ax,ax

c000d020 <Serial::~Serial()>:
c000d020:	83 ec 0c             	sub    esp,0xc
c000d023:	ba 58 dc 01 c0       	mov    edx,0xc001dc58
c000d028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d02c:	89 10                	mov    DWORD PTR [eax],edx
c000d02e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d032:	83 ec 0c             	sub    esp,0xc
c000d035:	50                   	push   eax
c000d036:	e8 5b e7 ff ff       	call   c000b796 <Device::~Device()>
c000d03b:	83 c4 10             	add    esp,0x10
c000d03e:	90                   	nop
c000d03f:	83 c4 0c             	add    esp,0xc
c000d042:	c3                   	ret    
c000d043:	90                   	nop

c000d044 <Serial::~Serial()>:
c000d044:	83 ec 0c             	sub    esp,0xc
c000d047:	83 ec 0c             	sub    esp,0xc
c000d04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d04e:	e8 cd ff ff ff       	call   c000d020 <Serial::~Serial()>
c000d053:	83 c4 10             	add    esp,0x10
c000d056:	83 ec 08             	sub    esp,0x8
c000d059:	68 58 01 00 00       	push   0x158
c000d05e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d062:	e8 f7 d2 ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000d067:	83 c4 10             	add    esp,0x10
c000d06a:	83 c4 0c             	add    esp,0xc
c000d06d:	c3                   	ret    
c000d06e:	66 90                	xchg   ax,ax

c000d070 <Timer::Timer(char const*)>:
c000d070:	83 ec 0c             	sub    esp,0xc
c000d073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d077:	83 ec 08             	sub    esp,0x8
c000d07a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d07e:	50                   	push   eax
c000d07f:	e8 a8 e9 ff ff       	call   c000ba2c <Device::Device(char const*)>
c000d084:	83 c4 10             	add    esp,0x10
c000d087:	ba 9c dc 01 c0       	mov    edx,0xc001dc9c
c000d08c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d090:	89 10                	mov    DWORD PTR [eax],edx
c000d092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d096:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d0a0:	90                   	nop
c000d0a1:	83 c4 0c             	add    esp,0xc
c000d0a4:	c3                   	ret    
c000d0a5:	90                   	nop
c000d0a6:	66 90                	xchg   ax,ax

c000d0a8 <Timer::~Timer()>:
c000d0a8:	83 ec 0c             	sub    esp,0xc
c000d0ab:	ba 9c dc 01 c0       	mov    edx,0xc001dc9c
c000d0b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0b4:	89 10                	mov    DWORD PTR [eax],edx
c000d0b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0ba:	83 ec 0c             	sub    esp,0xc
c000d0bd:	50                   	push   eax
c000d0be:	e8 d3 e6 ff ff       	call   c000b796 <Device::~Device()>
c000d0c3:	83 c4 10             	add    esp,0x10
c000d0c6:	90                   	nop
c000d0c7:	83 c4 0c             	add    esp,0xc
c000d0ca:	c3                   	ret    
c000d0cb:	90                   	nop

c000d0cc <Timer::~Timer()>:
c000d0cc:	83 ec 0c             	sub    esp,0xc
c000d0cf:	83 ec 0c             	sub    esp,0xc
c000d0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0d6:	e8 cd ff ff ff       	call   c000d0a8 <Timer::~Timer()>
c000d0db:	83 c4 10             	add    esp,0x10
c000d0de:	83 ec 08             	sub    esp,0x8
c000d0e1:	68 5c 01 00 00       	push   0x15c
c000d0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0ea:	e8 6f d2 ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000d0ef:	83 c4 10             	add    esp,0x10
c000d0f2:	83 c4 0c             	add    esp,0xc
c000d0f5:	c3                   	ret    

c000d0f6 <Timer::read()>:
c000d0f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d0fa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d100:	c3                   	ret    

c000d101 <setupTimer(int)>:
c000d101:	53                   	push   ebx
c000d102:	83 ec 14             	sub    esp,0x14
c000d105:	68 5c 01 00 00       	push   0x15c
c000d10a:	e8 aa a6 ff ff       	call   c00077b9 <malloc>
c000d10f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d112:	89 c3                	mov    ebx,eax
c000d114:	e8 37 e4 00 00       	call   c001b550 <PIT::PIT()>
c000d119:	58                   	pop    eax
c000d11a:	5a                   	pop    edx
c000d11b:	53                   	push   ebx
c000d11c:	ff 35 38 04 02 c0    	push   DWORD PTR ds:0xc0020438
c000d122:	e8 6d e7 ff ff       	call   c000b894 <Device::addChild(Device*)>
c000d127:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d129:	6a 00                	push   0x0
c000d12b:	6a 00                	push   0x0
c000d12d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d131:	53                   	push   ebx
c000d132:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d135:	89 d8                	mov    eax,ebx
c000d137:	83 c4 28             	add    esp,0x28
c000d13a:	5b                   	pop    ebx
c000d13b:	c3                   	ret    

c000d13c <timerHandler(unsigned int)>:
c000d13c:	56                   	push   esi
c000d13d:	53                   	push   ebx
c000d13e:	51                   	push   ecx
c000d13f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d143:	01 05 0c 2a 02 c0    	add    DWORD PTR ds:0xc0022a0c,eax
c000d149:	80 3d 3d 04 02 c0 00 	cmp    BYTE PTR ds:0xc002043d,0x0
c000d150:	0f 84 4a 01 00 00    	je     c000d2a0 <timerHandler(unsigned int)+0x164>
c000d156:	fa                   	cli    
c000d157:	ff 05 e8 36 02 c0    	inc    DWORD PTR ds:0xc00236e8
c000d15d:	83 ec 0c             	sub    esp,0xc
c000d160:	ff 05 e4 36 02 c0    	inc    DWORD PTR ds:0xc00236e4
c000d166:	68 f8 36 02 c0       	push   0xc00236f8
c000d16b:	e8 40 f0 00 00       	call   c001c1b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	84 c0                	test   al,al
c000d175:	0f 85 a1 00 00 00    	jne    c000d21c <timerHandler(unsigned int)+0xe0>
c000d17b:	83 ec 0c             	sub    esp,0xc
c000d17e:	68 f8 36 02 c0       	push   0xc00236f8
c000d183:	e8 44 f0 00 00       	call   c001c1cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d188:	83 c4 10             	add    esp,0x10
c000d18b:	89 c6                	mov    esi,eax
c000d18d:	8d 76 00             	lea    esi,[esi+0x0]
c000d190:	83 ec 0c             	sub    esp,0xc
c000d193:	68 f8 36 02 c0       	push   0xc00236f8
c000d198:	e8 2f f0 00 00       	call   c001c1cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d19d:	c7 04 24 f8 36 02 c0 	mov    DWORD PTR [esp],0xc00236f8
c000d1a4:	89 c3                	mov    ebx,eax
c000d1a6:	e8 29 f0 00 00       	call   c001c1d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d1ab:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d1ae:	83 c4 10             	add    esp,0x10
c000d1b1:	3b 05 0c 2a 02 c0    	cmp    eax,DWORD PTR ds:0xc0022a0c
c000d1b7:	77 23                	ja     c000d1dc <timerHandler(unsigned int)+0xa0>
c000d1b9:	83 ec 0c             	sub    esp,0xc
c000d1bc:	53                   	push   ebx
c000d1bd:	e8 de 65 00 00       	call   c00137a0 <unblockTask(ThreadControlBlock*)>
c000d1c2:	83 c4 10             	add    esp,0x10
c000d1c5:	39 de                	cmp    esi,ebx
c000d1c7:	75 27                	jne    c000d1f0 <timerHandler(unsigned int)+0xb4>
c000d1c9:	83 ec 0c             	sub    esp,0xc
c000d1cc:	68 f8 36 02 c0       	push   0xc00236f8
c000d1d1:	e8 f6 ef 00 00       	call   c001c1cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d1d6:	89 c6                	mov    esi,eax
c000d1d8:	eb 12                	jmp    c000d1ec <timerHandler(unsigned int)+0xb0>
c000d1da:	66 90                	xchg   ax,ax
c000d1dc:	52                   	push   edx
c000d1dd:	52                   	push   edx
c000d1de:	53                   	push   ebx
c000d1df:	68 f8 36 02 c0       	push   0xc00236f8
c000d1e4:	e8 a3 f0 00 00       	call   c001c28c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d1e9:	8d 76 00             	lea    esi,[esi+0x0]
c000d1ec:	83 c4 10             	add    esp,0x10
c000d1ef:	90                   	nop
c000d1f0:	83 ec 0c             	sub    esp,0xc
c000d1f3:	68 f8 36 02 c0       	push   0xc00236f8
c000d1f8:	e8 b3 ef 00 00       	call   c001c1b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d1fd:	83 c4 10             	add    esp,0x10
c000d200:	84 c0                	test   al,al
c000d202:	75 18                	jne    c000d21c <timerHandler(unsigned int)+0xe0>
c000d204:	83 ec 0c             	sub    esp,0xc
c000d207:	68 f8 36 02 c0       	push   0xc00236f8
c000d20c:	e8 bb ef 00 00       	call   c001c1cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d211:	83 c4 10             	add    esp,0x10
c000d214:	39 f0                	cmp    eax,esi
c000d216:	0f 85 74 ff ff ff    	jne    c000d190 <timerHandler(unsigned int)+0x54>
c000d21c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d221:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d225:	74 41                	je     c000d268 <timerHandler(unsigned int)+0x12c>
c000d227:	80 3d 3c 04 02 c0 00 	cmp    BYTE PTR ds:0xc002043c,0x0
c000d22e:	74 38                	je     c000d268 <timerHandler(unsigned int)+0x12c>
c000d230:	fa                   	cli    
c000d231:	ff 05 e8 36 02 c0    	inc    DWORD PTR ds:0xc00236e8
c000d237:	a1 0c 2a 02 c0       	mov    eax,ds:0xc0022a0c
c000d23c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d242:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d245:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d24b:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d24e:	72 08                	jb     c000d258 <timerHandler(unsigned int)+0x11c>
c000d250:	e8 87 60 00 00       	call   c00132dc <schedule()>
c000d255:	8d 76 00             	lea    esi,[esi+0x0]
c000d258:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c000d25d:	48                   	dec    eax
c000d25e:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c000d263:	75 03                	jne    c000d268 <timerHandler(unsigned int)+0x12c>
c000d265:	fb                   	sti    
c000d266:	66 90                	xchg   ax,ax
c000d268:	a1 e4 36 02 c0       	mov    eax,ds:0xc00236e4
c000d26d:	48                   	dec    eax
c000d26e:	a3 e4 36 02 c0       	mov    ds:0xc00236e4,eax
c000d273:	75 1b                	jne    c000d290 <timerHandler(unsigned int)+0x154>
c000d275:	83 3d e0 36 02 c0 00 	cmp    DWORD PTR ds:0xc00236e0,0x0
c000d27c:	74 12                	je     c000d290 <timerHandler(unsigned int)+0x154>
c000d27e:	c7 05 e0 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00236e0,0x0
c000d288:	e8 4f 60 00 00       	call   c00132dc <schedule()>
c000d28d:	8d 76 00             	lea    esi,[esi+0x0]
c000d290:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c000d295:	48                   	dec    eax
c000d296:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c000d29b:	75 03                	jne    c000d2a0 <timerHandler(unsigned int)+0x164>
c000d29d:	fb                   	sti    
c000d29e:	66 90                	xchg   ax,ax
c000d2a0:	58                   	pop    eax
c000d2a1:	5b                   	pop    ebx
c000d2a2:	5e                   	pop    esi
c000d2a3:	c3                   	ret    

c000d2a4 <VCache::VCache(PhysicalDisk*)>:
c000d2a4:	53                   	push   ebx
c000d2a5:	83 ec 18             	sub    esp,0x18
c000d2a8:	ba cc dc 01 c0       	mov    edx,0xc001dccc
c000d2ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2b1:	89 10                	mov    DWORD PTR [eax],edx
c000d2b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2b7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d2be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2c2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d2c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2cd:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d2d4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d2db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2df:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d2e6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d2ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2f1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d2f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2fc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d300:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d304:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d30b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d312:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d316:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d31a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d31e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d322:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d326:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d32a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d32e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d335:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d33d:	83 ec 0c             	sub    esp,0xc
c000d340:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d344:	e8 70 a4 ff ff       	call   c00077b9 <malloc>
c000d349:	83 c4 10             	add    esp,0x10
c000d34c:	89 c3                	mov    ebx,eax
c000d34e:	83 ec 0c             	sub    esp,0xc
c000d351:	53                   	push   ebx
c000d352:	e8 51 5d 00 00       	call   c00130a8 <Mutex::Mutex()>
c000d357:	83 c4 10             	add    esp,0x10
c000d35a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d35e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d361:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d365:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d369:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d36c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d370:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d377:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d37b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d381:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d385:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d388:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d38c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d392:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d398:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d39c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d39f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d3a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3a6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d3aa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d3ae:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d3b4:	05 00 01 00 00       	add    eax,0x100
c000d3b9:	c1 e0 04             	shl    eax,0x4
c000d3bc:	83 ec 0c             	sub    esp,0xc
c000d3bf:	50                   	push   eax
c000d3c0:	e8 f4 a3 ff ff       	call   c00077b9 <malloc>
c000d3c5:	83 c4 10             	add    esp,0x10
c000d3c8:	89 c2                	mov    edx,eax
c000d3ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3ce:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d3d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3d5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d3dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3e0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d3e4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d3e8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d3ee:	c1 e0 06             	shl    eax,0x6
c000d3f1:	83 ec 0c             	sub    esp,0xc
c000d3f4:	50                   	push   eax
c000d3f5:	e8 bf a3 ff ff       	call   c00077b9 <malloc>
c000d3fa:	83 c4 10             	add    esp,0x10
c000d3fd:	89 c2                	mov    edx,eax
c000d3ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d403:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d406:	90                   	nop
c000d407:	83 c4 18             	add    esp,0x18
c000d40a:	5b                   	pop    ebx
c000d40b:	c3                   	ret    

c000d40c <VCache::invalidateReadBuffer()>:
c000d40c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d410:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d416:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d41a:	c3                   	ret    
c000d41b:	90                   	nop

c000d41c <VCache::writeWriteBuffer()>:
c000d41c:	53                   	push   ebx
c000d41d:	83 ec 08             	sub    esp,0x8
c000d420:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d424:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d428:	74 1e                	je     c000d448 <VCache::writeWriteBuffer()+0x2c>
c000d42a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d42d:	83 ec 0c             	sub    esp,0xc
c000d430:	8b 10                	mov    edx,DWORD PTR [eax]
c000d432:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d435:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d438:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d43b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43e:	50                   	push   eax
c000d43f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d442:	83 c4 20             	add    esp,0x20
c000d445:	8d 76 00             	lea    esi,[esi+0x0]
c000d448:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d44f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d456:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d45a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d461:	83 c4 08             	add    esp,0x8
c000d464:	5b                   	pop    ebx
c000d465:	c3                   	ret    
c000d466:	66 90                	xchg   ax,ax

c000d468 <VCache::~VCache()>:
c000d468:	83 ec 0c             	sub    esp,0xc
c000d46b:	ba cc dc 01 c0       	mov    edx,0xc001dccc
c000d470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d474:	89 10                	mov    DWORD PTR [eax],edx
c000d476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d47a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d47d:	84 c0                	test   al,al
c000d47f:	74 0f                	je     c000d490 <VCache::~VCache()+0x28>
c000d481:	83 ec 0c             	sub    esp,0xc
c000d484:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d488:	e8 8f ff ff ff       	call   c000d41c <VCache::writeWriteBuffer()>
c000d48d:	83 c4 10             	add    esp,0x10
c000d490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d494:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d497:	83 ec 0c             	sub    esp,0xc
c000d49a:	50                   	push   eax
c000d49b:	e8 29 a3 ff ff       	call   c00077c9 <free>
c000d4a0:	83 c4 10             	add    esp,0x10
c000d4a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4a7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d4aa:	83 ec 0c             	sub    esp,0xc
c000d4ad:	50                   	push   eax
c000d4ae:	e8 16 a3 ff ff       	call   c00077c9 <free>
c000d4b3:	83 c4 10             	add    esp,0x10
c000d4b6:	90                   	nop
c000d4b7:	83 c4 0c             	add    esp,0xc
c000d4ba:	c3                   	ret    
c000d4bb:	90                   	nop

c000d4bc <VCache::~VCache()>:
c000d4bc:	83 ec 0c             	sub    esp,0xc
c000d4bf:	83 ec 0c             	sub    esp,0xc
c000d4c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4c6:	e8 9d ff ff ff       	call   c000d468 <VCache::~VCache()>
c000d4cb:	83 c4 10             	add    esp,0x10
c000d4ce:	83 ec 08             	sub    esp,0x8
c000d4d1:	6a 44                	push   0x44
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	e8 82 ce ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000d4dc:	83 c4 10             	add    esp,0x10
c000d4df:	83 c4 0c             	add    esp,0xc
c000d4e2:	c3                   	ret    
c000d4e3:	90                   	nop

c000d4e4 <VCache::write(unsigned long long, int, void*)>:
c000d4e4:	55                   	push   ebp
c000d4e5:	57                   	push   edi
c000d4e6:	56                   	push   esi
c000d4e7:	53                   	push   ebx
c000d4e8:	83 ec 1c             	sub    esp,0x1c
c000d4eb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d4ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4f7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d4fb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d4ff:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d503:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d507:	31 c0                	xor    eax,eax
c000d509:	8d 76 00             	lea    esi,[esi+0x0]
c000d50c:	39 e8                	cmp    eax,ebp
c000d50e:	7d 18                	jge    c000d528 <VCache::write(unsigned long long, int, void*)+0x44>
c000d510:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d513:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d519:	0f af c8             	imul   ecx,eax
c000d51c:	89 ca                	mov    edx,ecx
c000d51e:	01 f2                	add    edx,esi
c000d520:	8b 3a                	mov    edi,DWORD PTR [edx]
c000d522:	40                   	inc    eax
c000d523:	eb e7                	jmp    c000d50c <VCache::write(unsigned long long, int, void*)+0x28>
c000d525:	8d 76 00             	lea    esi,[esi+0x0]
c000d528:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d52c:	74 0a                	je     c000d538 <VCache::write(unsigned long long, int, void*)+0x54>
c000d52e:	53                   	push   ebx
c000d52f:	e8 d8 fe ff ff       	call   c000d40c <VCache::invalidateReadBuffer()>
c000d534:	58                   	pop    eax
c000d535:	8d 76 00             	lea    esi,[esi+0x0]
c000d538:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d53c:	74 5a                	je     c000d598 <VCache::write(unsigned long long, int, void*)+0xb4>
c000d53e:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000d541:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d545:	89 f8                	mov    eax,edi
c000d547:	99                   	cdq    
c000d548:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d54b:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d54e:	31 c1                	xor    ecx,eax
c000d550:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d554:	31 d0                	xor    eax,edx
c000d556:	09 c1                	or     ecx,eax
c000d558:	75 32                	jne    c000d58c <VCache::write(unsigned long long, int, void*)+0xa8>
c000d55a:	83 fd 01             	cmp    ebp,0x1
c000d55d:	75 2d                	jne    c000d58c <VCache::write(unsigned long long, int, void*)+0xa8>
c000d55f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d562:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d568:	0f af f9             	imul   edi,ecx
c000d56b:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d56e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d570:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d573:	40                   	inc    eax
c000d574:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d577:	83 f8 40             	cmp    eax,0x40
c000d57a:	75 74                	jne    c000d5f0 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d57c:	83 ec 0c             	sub    esp,0xc
c000d57f:	53                   	push   ebx
c000d580:	e8 97 fe ff ff       	call   c000d41c <VCache::writeWriteBuffer()>
c000d585:	83 c4 10             	add    esp,0x10
c000d588:	eb 66                	jmp    c000d5f0 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d58a:	66 90                	xchg   ax,ax
c000d58c:	83 ec 0c             	sub    esp,0xc
c000d58f:	53                   	push   ebx
c000d590:	e8 87 fe ff ff       	call   c000d41c <VCache::writeWriteBuffer()>
c000d595:	83 c4 10             	add    esp,0x10
c000d598:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d59b:	83 fd 3f             	cmp    ebp,0x3f
c000d59e:	7f 24                	jg     c000d5c4 <VCache::write(unsigned long long, int, void*)+0xe0>
c000d5a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d5a4:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000d5a7:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d5aa:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d5ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d5b2:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d5b5:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000d5b8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d5be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d5c0:	eb 2e                	jmp    c000d5f0 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d5c2:	66 90                	xchg   ax,ax
c000d5c4:	8b 10                	mov    edx,DWORD PTR [eax]
c000d5c6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d5ca:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d5ce:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d5d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d5d6:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d5da:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d5de:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000d5e2:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d5e5:	83 c4 1c             	add    esp,0x1c
c000d5e8:	5b                   	pop    ebx
c000d5e9:	5e                   	pop    esi
c000d5ea:	5f                   	pop    edi
c000d5eb:	5d                   	pop    ebp
c000d5ec:	ff e0                	jmp    eax
c000d5ee:	66 90                	xchg   ax,ax
c000d5f0:	83 c4 1c             	add    esp,0x1c
c000d5f3:	31 c0                	xor    eax,eax
c000d5f5:	5b                   	pop    ebx
c000d5f6:	5e                   	pop    esi
c000d5f7:	5f                   	pop    edi
c000d5f8:	5d                   	pop    ebp
c000d5f9:	c3                   	ret    

c000d5fa <VCache::read(unsigned long long, int, void*)>:
c000d5fa:	55                   	push   ebp
c000d5fb:	57                   	push   edi
c000d5fc:	56                   	push   esi
c000d5fd:	53                   	push   ebx
c000d5fe:	83 ec 1c             	sub    esp,0x1c
c000d601:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d605:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d609:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d60d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d611:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000d615:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d619:	31 c0                	xor    eax,eax
c000d61b:	90                   	nop
c000d61c:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d620:	7d 16                	jge    c000d638 <VCache::read(unsigned long long, int, void*)+0x3e>
c000d622:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d625:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d62b:	0f af c8             	imul   ecx,eax
c000d62e:	89 ca                	mov    edx,ecx
c000d630:	01 f2                	add    edx,esi
c000d632:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000d634:	40                   	inc    eax
c000d635:	eb e5                	jmp    c000d61c <VCache::read(unsigned long long, int, void*)+0x22>
c000d637:	90                   	nop
c000d638:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d63c:	74 0e                	je     c000d64c <VCache::read(unsigned long long, int, void*)+0x52>
c000d63e:	83 ec 0c             	sub    esp,0xc
c000d641:	53                   	push   ebx
c000d642:	e8 d5 fd ff ff       	call   c000d41c <VCache::writeWriteBuffer()>
c000d647:	83 c4 10             	add    esp,0x10
c000d64a:	66 90                	xchg   ax,ax
c000d64c:	83 ec 0c             	sub    esp,0xc
c000d64f:	53                   	push   ebx
c000d650:	e8 b7 fd ff ff       	call   c000d40c <VCache::invalidateReadBuffer()>
c000d655:	83 c4 0c             	add    esp,0xc
c000d658:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d65b:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000d661:	6a 00                	push   0x0
c000d663:	56                   	push   esi
c000d664:	e8 67 2e ff ff       	call   c00004d0 <memset>
c000d669:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d66c:	8b 10                	mov    edx,DWORD PTR [eax]
c000d66e:	89 74 24 50          	mov    DWORD PTR [esp+0x50],esi
c000d672:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c000d676:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d67a:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c000d67e:	89 74 24 4c          	mov    DWORD PTR [esp+0x4c],esi
c000d682:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d686:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d689:	83 c4 2c             	add    esp,0x2c
c000d68c:	5b                   	pop    ebx
c000d68d:	5e                   	pop    esi
c000d68e:	5f                   	pop    edi
c000d68f:	5d                   	pop    ebp
c000d690:	ff e0                	jmp    eax

c000d692 <Video::putrect(int, int, int, int, unsigned int)>:
c000d692:	55                   	push   ebp
c000d693:	57                   	push   edi
c000d694:	56                   	push   esi
c000d695:	53                   	push   ebx
c000d696:	83 ec 1c             	sub    esp,0x1c
c000d699:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d69d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d6a1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d6a5:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d6a9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d6ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d6b1:	01 df                	add    edi,ebx
c000d6b3:	39 fb                	cmp    ebx,edi
c000d6b5:	7d 1f                	jge    c000d6d6 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d6b7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d6bb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d6bf:	7d 12                	jge    c000d6d3 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d6c1:	8b 16                	mov    edx,DWORD PTR [esi]
c000d6c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d6c7:	53                   	push   ebx
c000d6c8:	55                   	push   ebp
c000d6c9:	45                   	inc    ebp
c000d6ca:	56                   	push   esi
c000d6cb:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d6ce:	83 c4 10             	add    esp,0x10
c000d6d1:	eb e8                	jmp    c000d6bb <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d6d3:	43                   	inc    ebx
c000d6d4:	eb dd                	jmp    c000d6b3 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d6d6:	83 c4 1c             	add    esp,0x1c
c000d6d9:	5b                   	pop    ebx
c000d6da:	5e                   	pop    esi
c000d6db:	5f                   	pop    edi
c000d6dc:	5d                   	pop    ebp
c000d6dd:	c3                   	ret    

c000d6de <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d6de:	55                   	push   ebp
c000d6df:	57                   	push   edi
c000d6e0:	31 ff                	xor    edi,edi
c000d6e2:	56                   	push   esi
c000d6e3:	53                   	push   ebx
c000d6e4:	83 ec 1c             	sub    esp,0x1c
c000d6e7:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d6eb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d6ef:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d6f6:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d6fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6ff:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d703:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d707:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d70a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d70e:	01 f9                	add    ecx,edi
c000d710:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d714:	7d 2f                	jge    c000d745 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d716:	31 f6                	xor    esi,esi
c000d718:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d71c:	01 f2                	add    edx,esi
c000d71e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d722:	7d 1a                	jge    c000d73e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d724:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d727:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d72a:	46                   	inc    esi
c000d72b:	51                   	push   ecx
c000d72c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d730:	52                   	push   edx
c000d731:	55                   	push   ebp
c000d732:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d735:	83 c4 10             	add    esp,0x10
c000d738:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d73c:	eb da                	jmp    c000d718 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000d73e:	47                   	inc    edi
c000d73f:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000d743:	eb c5                	jmp    c000d70a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000d745:	83 c4 1c             	add    esp,0x1c
c000d748:	5b                   	pop    ebx
c000d749:	5e                   	pop    esi
c000d74a:	5f                   	pop    edi
c000d74b:	5d                   	pop    ebp
c000d74c:	c3                   	ret    
c000d74d:	90                   	nop

c000d74e <Video::blit(unsigned int*, int, int, int, int)>:
c000d74e:	55                   	push   ebp
c000d74f:	57                   	push   edi
c000d750:	56                   	push   esi
c000d751:	53                   	push   ebx
c000d752:	83 ec 1c             	sub    esp,0x1c
c000d755:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d759:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d75d:	85 c0                	test   eax,eax
c000d75f:	79 02                	jns    c000d763 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000d761:	31 c0                	xor    eax,eax
c000d763:	c1 e0 02             	shl    eax,0x2
c000d766:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d76a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d76e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d772:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000d776:	39 d8                	cmp    eax,ebx
c000d778:	7e 49                	jle    c000d7c3 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d77a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d780:	7c 41                	jl     c000d7c3 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d782:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d786:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d78a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d78e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000d792:	39 f9                	cmp    ecx,edi
c000d794:	7e 22                	jle    c000d7b8 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000d796:	83 c5 04             	add    ebp,0x4
c000d799:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d79f:	7c 14                	jl     c000d7b5 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000d7a1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d7a3:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000d7a6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d7aa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d7ae:	56                   	push   esi
c000d7af:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000d7b2:	83 c4 10             	add    esp,0x10
c000d7b5:	47                   	inc    edi
c000d7b6:	eb d2                	jmp    c000d78a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000d7b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d7bc:	43                   	inc    ebx
c000d7bd:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d7c1:	eb ab                	jmp    c000d76e <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000d7c3:	83 c4 1c             	add    esp,0x1c
c000d7c6:	5b                   	pop    ebx
c000d7c7:	5e                   	pop    esi
c000d7c8:	5f                   	pop    edi
c000d7c9:	5d                   	pop    ebp
c000d7ca:	c3                   	ret    
c000d7cb:	90                   	nop

c000d7cc <Video::clearScreen(unsigned int)>:
c000d7cc:	57                   	push   edi
c000d7cd:	56                   	push   esi
c000d7ce:	53                   	push   ebx
c000d7cf:	31 db                	xor    ebx,ebx
c000d7d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d7d5:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d7db:	7e 1f                	jle    c000d7fc <Video::clearScreen(unsigned int)+0x30>
c000d7dd:	31 ff                	xor    edi,edi
c000d7df:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d7e5:	7e 12                	jle    c000d7f9 <Video::clearScreen(unsigned int)+0x2d>
c000d7e7:	8b 06                	mov    eax,DWORD PTR [esi]
c000d7e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7ed:	53                   	push   ebx
c000d7ee:	57                   	push   edi
c000d7ef:	47                   	inc    edi
c000d7f0:	56                   	push   esi
c000d7f1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d7f4:	83 c4 10             	add    esp,0x10
c000d7f7:	eb e6                	jmp    c000d7df <Video::clearScreen(unsigned int)+0x13>
c000d7f9:	43                   	inc    ebx
c000d7fa:	eb d9                	jmp    c000d7d5 <Video::clearScreen(unsigned int)+0x9>
c000d7fc:	5b                   	pop    ebx
c000d7fd:	5e                   	pop    esi
c000d7fe:	5f                   	pop    edi
c000d7ff:	c3                   	ret    

c000d800 <Video::putpixel(int, int, unsigned int)>:
c000d800:	c7 44 24 04 d4 dc 01 c0 	mov    DWORD PTR [esp+0x4],0xc001dcd4
c000d808:	e9 be 28 00 00       	jmp    c00100cb <KePanic(char const*)>
c000d80d:	90                   	nop

c000d80e <Video::Video(char const*)>:
c000d80e:	83 ec 0c             	sub    esp,0xc
c000d811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d815:	83 ec 08             	sub    esp,0x8
c000d818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d81c:	50                   	push   eax
c000d81d:	e8 0a e2 ff ff       	call   c000ba2c <Device::Device(char const*)>
c000d822:	83 c4 10             	add    esp,0x10
c000d825:	ba 44 dd 01 c0       	mov    edx,0xc001dd44
c000d82a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d82e:	89 10                	mov    DWORD PTR [eax],edx
c000d830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d834:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000d83e:	90                   	nop
c000d83f:	83 c4 0c             	add    esp,0xc
c000d842:	c3                   	ret    
c000d843:	90                   	nop

c000d844 <Video::~Video()>:
c000d844:	83 ec 0c             	sub    esp,0xc
c000d847:	ba 44 dd 01 c0       	mov    edx,0xc001dd44
c000d84c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d850:	89 10                	mov    DWORD PTR [eax],edx
c000d852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d856:	83 ec 0c             	sub    esp,0xc
c000d859:	50                   	push   eax
c000d85a:	e8 37 df ff ff       	call   c000b796 <Device::~Device()>
c000d85f:	83 c4 10             	add    esp,0x10
c000d862:	90                   	nop
c000d863:	83 c4 0c             	add    esp,0xc
c000d866:	c3                   	ret    
c000d867:	90                   	nop

c000d868 <Video::~Video()>:
c000d868:	83 ec 0c             	sub    esp,0xc
c000d86b:	83 ec 0c             	sub    esp,0xc
c000d86e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d872:	e8 cd ff ff ff       	call   c000d844 <Video::~Video()>
c000d877:	83 c4 10             	add    esp,0x10
c000d87a:	83 ec 08             	sub    esp,0x8
c000d87d:	68 64 01 00 00       	push   0x164
c000d882:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d886:	e8 d3 ca ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000d88b:	83 c4 10             	add    esp,0x10
c000d88e:	83 c4 0c             	add    esp,0xc
c000d891:	c3                   	ret    

c000d892 <Video::isMonochrome()>:
c000d892:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d896:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000d89c:	c3                   	ret    
c000d89d:	90                   	nop

c000d89e <Video::getWidth()>:
c000d89e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d8a2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d8a8:	c3                   	ret    
c000d8a9:	90                   	nop

c000d8aa <Video::getHeight()>:
c000d8aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d8ae:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d8b4:	c3                   	ret    
c000d8b5:	90                   	nop

c000d8b6 <Video::drawCursor(int, int, unsigned char*, int)>:
c000d8b6:	55                   	push   ebp
c000d8b7:	57                   	push   edi
c000d8b8:	56                   	push   esi
c000d8b9:	53                   	push   ebx
c000d8ba:	83 ec 2c             	sub    esp,0x2c
c000d8bd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d8c1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d8c5:	83 f8 01             	cmp    eax,0x1
c000d8c8:	19 c9                	sbb    ecx,ecx
c000d8ca:	31 db                	xor    ebx,ebx
c000d8cc:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000d8d0:	89 cd                	mov    ebp,ecx
c000d8d2:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000d8da:	f7 d5                	not    ebp
c000d8dc:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000d8e2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000d8e6:	01 d8                	add    eax,ebx
c000d8e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d8ec:	56                   	push   esi
c000d8ed:	e8 b8 ff ff ff       	call   c000d8aa <Video::getHeight()>
c000d8f2:	59                   	pop    ecx
c000d8f3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d8f7:	7e 70                	jle    c000d969 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000d8f9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d8fd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000d901:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000d904:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d908:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d90c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000d913:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d917:	89 f8                	mov    eax,edi
c000d919:	83 c0 20             	add    eax,0x20
c000d91c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d920:	56                   	push   esi
c000d921:	e8 78 ff ff ff       	call   c000d89e <Video::getWidth()>
c000d926:	5a                   	pop    edx
c000d927:	39 c7                	cmp    edi,eax
c000d929:	7d 34                	jge    c000d95f <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000d92b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000d930:	74 05                	je     c000d937 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000d932:	8b 06                	mov    eax,DWORD PTR [esi]
c000d934:	55                   	push   ebp
c000d935:	eb 0d                	jmp    c000d944 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000d937:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000d93c:	74 12                	je     c000d950 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000d93e:	8b 06                	mov    eax,DWORD PTR [esi]
c000d940:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d944:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d948:	57                   	push   edi
c000d949:	56                   	push   esi
c000d94a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d94d:	83 c4 10             	add    esp,0x10
c000d950:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000d954:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000d958:	47                   	inc    edi
c000d959:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000d95d:	75 c1                	jne    c000d920 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000d95f:	43                   	inc    ebx
c000d960:	83 fb 20             	cmp    ebx,0x20
c000d963:	0f 85 79 ff ff ff    	jne    c000d8e2 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000d969:	83 c4 2c             	add    esp,0x2c
c000d96c:	5b                   	pop    ebx
c000d96d:	5e                   	pop    esi
c000d96e:	5f                   	pop    edi
c000d96f:	5d                   	pop    ebp
c000d970:	c3                   	ret    
c000d971:	90                   	nop

c000d972 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000d972:	55                   	push   ebp
c000d973:	57                   	push   edi
c000d974:	56                   	push   esi
c000d975:	53                   	push   ebx
c000d976:	83 ec 28             	sub    esp,0x28
c000d979:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d97d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000d981:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000d985:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000d989:	c1 e6 08             	shl    esi,0x8
c000d98c:	01 c6                	add    esi,eax
c000d98e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000d992:	c1 e0 08             	shl    eax,0x8
c000d995:	01 d0                	add    eax,edx
c000d997:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d99b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d99f:	0f af c6             	imul   eax,esi
c000d9a2:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000d9a9:	50                   	push   eax
c000d9aa:	e8 0a 9e ff ff       	call   c00077b9 <malloc>
c000d9af:	83 c4 10             	add    esp,0x10
c000d9b2:	89 c7                	mov    edi,eax
c000d9b4:	85 c0                	test   eax,eax
c000d9b6:	75 10                	jne    c000d9c8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000d9b8:	83 ec 0c             	sub    esp,0xc
c000d9bb:	68 f5 dc 01 c0       	push   0xc001dcf5
c000d9c0:	e8 06 27 00 00       	call   c00100cb <KePanic(char const*)>
c000d9c5:	83 c4 10             	add    esp,0x10
c000d9c8:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000d9cb:	ba 12 00 00 00       	mov    edx,0x12
c000d9d0:	84 c0                	test   al,al
c000d9d2:	74 11                	je     c000d9e5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000d9d4:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000d9d8:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000d9dc:	c1 fa 03             	sar    edx,0x3
c000d9df:	0f af d1             	imul   edx,ecx
c000d9e2:	83 c2 12             	add    edx,0x12
c000d9e5:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000d9e9:	74 04                	je     c000d9ef <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000d9eb:	85 f6                	test   esi,esi
c000d9ed:	75 12                	jne    c000da01 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000d9ef:	83 ec 0c             	sub    esp,0xc
c000d9f2:	68 05 dd 01 c0       	push   0xc001dd05
c000d9f7:	e8 58 ca ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000d9fc:	e9 b8 00 00 00       	jmp    c000dab9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000da01:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000da05:	80 f9 02             	cmp    cl,0x2
c000da08:	0f 85 96 00 00 00    	jne    c000daa4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000da0e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000da13:	75 0e                	jne    c000da23 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000da15:	84 c0                	test   al,al
c000da17:	75 0a                	jne    c000da23 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000da19:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000da1c:	83 e8 18             	sub    eax,0x18
c000da1f:	a8 f7                	test   al,0xf7
c000da21:	74 0a                	je     c000da2d <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000da23:	83 ec 0c             	sub    esp,0xc
c000da26:	68 1a dd 01 c0       	push   0xc001dd1a
c000da2b:	eb 7f                	jmp    c000daac <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000da2d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000da35:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000da3d:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000da41:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000da49:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000da4d:	75 0c                	jne    c000da5b <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000da4f:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000da54:	c1 e0 18             	shl    eax,0x18
c000da57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da5b:	45                   	inc    ebp
c000da5c:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000da61:	c1 e1 10             	shl    ecx,0x10
c000da64:	89 c8                	mov    eax,ecx
c000da66:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000da6b:	c1 e1 08             	shl    ecx,0x8
c000da6e:	09 c1                	or     ecx,eax
c000da70:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000da74:	09 c1                	or     ecx,eax
c000da76:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000da7a:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000da7e:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000da82:	c1 f8 03             	sar    eax,0x3
c000da85:	01 c2                	add    edx,eax
c000da87:	89 e8                	mov    eax,ebp
c000da89:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000da8d:	39 c6                	cmp    esi,eax
c000da8f:	7f b0                	jg     c000da41 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000da91:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000da95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000da99:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000da9c:	7e 22                	jle    c000dac0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000da9e:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000daa2:	eb 99                	jmp    c000da3d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000daa4:	50                   	push   eax
c000daa5:	50                   	push   eax
c000daa6:	51                   	push   ecx
c000daa7:	68 28 dd 01 c0       	push   0xc001dd28
c000daac:	e8 a3 c9 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000dab1:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dab4:	e8 10 9d ff ff       	call   c00077c9 <free>
c000dab9:	83 c4 10             	add    esp,0x10
c000dabc:	31 ff                	xor    edi,edi
c000dabe:	eb 0f                	jmp    c000dacf <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000dac0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dac4:	89 30                	mov    DWORD PTR [eax],esi
c000dac6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000daca:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dacd:	89 30                	mov    DWORD PTR [eax],esi
c000dacf:	83 c4 1c             	add    esp,0x1c
c000dad2:	89 f8                	mov    eax,edi
c000dad4:	5b                   	pop    ebx
c000dad5:	5e                   	pop    esi
c000dad6:	5f                   	pop    edi
c000dad7:	5d                   	pop    ebp
c000dad8:	c3                   	ret    
c000dad9:	90                   	nop

c000dada <Video::putTGA(int, int, unsigned char*, int)>:
c000dada:	55                   	push   ebp
c000dadb:	57                   	push   edi
c000dadc:	56                   	push   esi
c000dadd:	53                   	push   ebx
c000dade:	83 ec 28             	sub    esp,0x28
c000dae1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000dae5:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dae9:	50                   	push   eax
c000daea:	8d 44 24 18          	lea    eax,[esp+0x18]
c000daee:	50                   	push   eax
c000daef:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000daf3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000daf7:	56                   	push   esi
c000daf8:	e8 75 fe ff ff       	call   c000d972 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000dafd:	83 c4 20             	add    esp,0x20
c000db00:	85 c0                	test   eax,eax
c000db02:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000db06:	74 35                	je     c000db3d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000db08:	89 c7                	mov    edi,eax
c000db0a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000db0e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000db12:	39 d8                	cmp    eax,ebx
c000db14:	7e 27                	jle    c000db3d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000db16:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000db1a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db1e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000db22:	39 e8                	cmp    eax,ebp
c000db24:	7e 14                	jle    c000db3a <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000db26:	8b 06                	mov    eax,DWORD PTR [esi]
c000db28:	83 c7 04             	add    edi,0x4
c000db2b:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000db2e:	53                   	push   ebx
c000db2f:	55                   	push   ebp
c000db30:	45                   	inc    ebp
c000db31:	56                   	push   esi
c000db32:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000db35:	83 c4 10             	add    esp,0x10
c000db38:	eb e0                	jmp    c000db1a <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000db3a:	43                   	inc    ebx
c000db3b:	eb cd                	jmp    c000db0a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000db3d:	83 c4 1c             	add    esp,0x1c
c000db40:	5b                   	pop    ebx
c000db41:	5e                   	pop    esi
c000db42:	5f                   	pop    edi
c000db43:	5d                   	pop    ebp
c000db44:	c3                   	ret    
c000db45:	66 90                	xchg   ax,ax
c000db47:	90                   	nop

c000db48 <ACPI::close(int, int, void*)>:
c000db48:	83 ec 1c             	sub    esp,0x1c
c000db4b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000db53:	74 0b                	je     c000db60 <ACPI::close(int, int, void*)+0x18>
c000db55:	b8 00 00 00 00       	mov    eax,0x0
c000db5a:	e9 9d 00 00 00       	jmp    c000dbfc <ACPI::close(int, int, void*)+0xb4>
c000db5f:	90                   	nop
c000db60:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000db65:	75 29                	jne    c000db90 <ACPI::close(int, int, void*)+0x48>
c000db67:	a1 28 2a 02 c0       	mov    eax,ds:0xc0022a28
c000db6c:	85 c0                	test   eax,eax
c000db6e:	74 08                	je     c000db78 <ACPI::close(int, int, void*)+0x30>
c000db70:	a1 28 2a 02 c0       	mov    eax,ds:0xc0022a28
c000db75:	ff d0                	call   eax
c000db77:	90                   	nop
c000db78:	83 ec 0c             	sub    esp,0xc
c000db7b:	68 84 dd 01 c0       	push   0xc001dd84
c000db80:	e8 46 25 00 00       	call   c00100cb <KePanic(char const*)>
c000db85:	83 c4 10             	add    esp,0x10
c000db88:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000db8d:	eb 6d                	jmp    c000dbfc <ACPI::close(int, int, void*)+0xb4>
c000db8f:	90                   	nop
c000db90:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000db95:	75 5d                	jne    c000dbf4 <ACPI::close(int, int, void*)+0xac>
c000db97:	a1 24 2a 02 c0       	mov    eax,ds:0xc0022a24
c000db9c:	85 c0                	test   eax,eax
c000db9e:	74 08                	je     c000dba8 <ACPI::close(int, int, void*)+0x60>
c000dba0:	a1 24 2a 02 c0       	mov    eax,ds:0xc0022a24
c000dba5:	ff d0                	call   eax
c000dba7:	90                   	nop
c000dba8:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000dbad:	8d 76 00             	lea    esi,[esi+0x0]
c000dbb0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dbb4:	25 ff 00 00 00       	and    eax,0xff
c000dbb9:	83 e0 02             	and    eax,0x2
c000dbbc:	74 1e                	je     c000dbdc <ACPI::close(int, int, void*)+0x94>
c000dbbe:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000dbc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dbc9:	89 c2                	mov    edx,eax
c000dbcb:	ec                   	in     al,dx
c000dbcc:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000dbd0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000dbd4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dbd8:	eb d6                	jmp    c000dbb0 <ACPI::close(int, int, void*)+0x68>
c000dbda:	66 90                	xchg   ax,ax
c000dbdc:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000dbe3:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000dbe8:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000dbec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dbf0:	ee                   	out    dx,al
c000dbf1:	8d 76 00             	lea    esi,[esi+0x0]
c000dbf4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dbf9:	8d 76 00             	lea    esi,[esi+0x0]
c000dbfc:	83 c4 1c             	add    esp,0x1c
c000dbff:	c3                   	ret    

c000dc00 <findRSDP()>:
c000dc00:	83 ec 1c             	sub    esp,0x1c
c000dc03:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c000dc08:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dc0e:	83 e0 04             	and    eax,0x4
c000dc11:	84 c0                	test   al,al
c000dc13:	75 07                	jne    c000dc1c <findRSDP()+0x1c>
c000dc15:	b8 00 00 00 00       	mov    eax,0x0
c000dc1a:	eb 70                	jmp    c000dc8c <findRSDP()+0x8c>
c000dc1c:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c000dc21:	3d ff 07 00 00       	cmp    eax,0x7ff
c000dc26:	7f 1c                	jg     c000dc44 <findRSDP()+0x44>
c000dc28:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c000dc2d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000dc33:	83 e2 fb             	and    edx,0xfffffffb
c000dc36:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000dc3c:	b8 00 00 00 00       	mov    eax,0x0
c000dc41:	eb 49                	jmp    c000dc8c <findRSDP()+0x8c>
c000dc43:	90                   	nop
c000dc44:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000dc4c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000dc54:	77 2e                	ja     c000dc84 <findRSDP()+0x84>
c000dc56:	83 ec 04             	sub    esp,0x4
c000dc59:	6a 08                	push   0x8
c000dc5b:	68 1f de 01 c0       	push   0xc001de1f
c000dc60:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc64:	e8 27 27 ff ff       	call   c0000390 <memcmp>
c000dc69:	83 c4 10             	add    esp,0x10
c000dc6c:	85 c0                	test   eax,eax
c000dc6e:	0f 94 c0             	sete   al
c000dc71:	84 c0                	test   al,al
c000dc73:	74 07                	je     c000dc7c <findRSDP()+0x7c>
c000dc75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dc79:	eb 11                	jmp    c000dc8c <findRSDP()+0x8c>
c000dc7b:	90                   	nop
c000dc7c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000dc81:	eb c9                	jmp    c000dc4c <findRSDP()+0x4c>
c000dc83:	90                   	nop
c000dc84:	b8 00 00 00 00       	mov    eax,0x0
c000dc89:	8d 76 00             	lea    esi,[esi+0x0]
c000dc8c:	83 c4 1c             	add    esp,0x1c
c000dc8f:	c3                   	ret    

c000dc90 <loadACPITables(unsigned char*)>:
c000dc90:	57                   	push   edi
c000dc91:	56                   	push   esi
c000dc92:	53                   	push   ebx
c000dc93:	83 ec 60             	sub    esp,0x60
c000dc96:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c000dc9b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dca1:	83 e0 04             	and    eax,0x4
c000dca4:	84 c0                	test   al,al
c000dca6:	0f 84 3c 02 00 00    	je     c000dee8 <loadACPITables(unsigned char*)+0x258>
c000dcac:	a0 40 2c 02 c0       	mov    al,ds:0xc0022c40
c000dcb1:	84 c0                	test   al,al
c000dcb3:	74 77                	je     c000dd2c <loadACPITables(unsigned char*)+0x9c>
c000dcb5:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dcb9:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000dcbd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dcc1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dcc4:	83 e8 24             	sub    eax,0x24
c000dcc7:	c1 e8 03             	shr    eax,0x3
c000dcca:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000dcce:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000dcd6:	66 90                	xchg   ax,ax
c000dcd8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dcdc:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000dce0:	0f 8d b6 00 00 00    	jge    c000dd9c <loadACPITables(unsigned char*)+0x10c>
c000dce6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dcea:	83 c0 24             	add    eax,0x24
c000dced:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dcf1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dcf5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dcf9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dcfd:	c1 e0 03             	shl    eax,0x3
c000dd00:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000dd04:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000dd08:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dd0b:	8b 00                	mov    eax,DWORD PTR [eax]
c000dd0d:	89 c1                	mov    ecx,eax
c000dd0f:	a1 2c 2a 02 c0       	mov    eax,ds:0xc0022a2c
c000dd14:	8d 50 01             	lea    edx,[eax+0x1]
c000dd17:	89 15 2c 2a 02 c0    	mov    DWORD PTR ds:0xc0022a2c,edx
c000dd1d:	89 ca                	mov    edx,ecx
c000dd1f:	89 14 c5 44 2a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd5bc],edx
c000dd26:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000dd2a:	eb ac                	jmp    c000dcd8 <loadACPITables(unsigned char*)+0x48>
c000dd2c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd30:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd34:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dd38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd3b:	83 e8 24             	sub    eax,0x24
c000dd3e:	c1 e8 02             	shr    eax,0x2
c000dd41:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000dd45:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000dd4d:	8d 76 00             	lea    esi,[esi+0x0]
c000dd50:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000dd54:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000dd58:	7d 42                	jge    c000dd9c <loadACPITables(unsigned char*)+0x10c>
c000dd5a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd5e:	83 c0 24             	add    eax,0x24
c000dd61:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dd65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dd69:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000dd6d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000dd71:	c1 e0 02             	shl    eax,0x2
c000dd74:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000dd78:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dd7c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000dd7e:	a1 2c 2a 02 c0       	mov    eax,ds:0xc0022a2c
c000dd83:	8d 50 01             	lea    edx,[eax+0x1]
c000dd86:	89 15 2c 2a 02 c0    	mov    DWORD PTR ds:0xc0022a2c,edx
c000dd8c:	89 ca                	mov    edx,ecx
c000dd8e:	89 14 c5 44 2a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd5bc],edx
c000dd95:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000dd99:	eb b5                	jmp    c000dd50 <loadACPITables(unsigned char*)+0xc0>
c000dd9b:	90                   	nop
c000dd9c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000dda4:	a1 2c 2a 02 c0       	mov    eax,ds:0xc0022a2c
c000dda9:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000ddad:	0f 8d 39 01 00 00    	jge    c000deec <loadACPITables(unsigned char*)+0x25c>
c000ddb3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ddb7:	8b 04 c5 44 2a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd5bc]
c000ddbe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ddc2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ddc6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ddca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ddce:	25 ff 0f 00 00       	and    eax,0xfff
c000ddd3:	89 c6                	mov    esi,eax
c000ddd5:	8b 1d 30 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020530
c000dddb:	83 ec 0c             	sub    esp,0xc
c000ddde:	6a 01                	push   0x1
c000dde0:	e8 1c b4 ff ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c000dde5:	83 c4 10             	add    esp,0x10
c000dde8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ddec:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ddf2:	83 ec 0c             	sub    esp,0xc
c000ddf5:	6a 01                	push   0x1
c000ddf7:	6a 01                	push   0x1
c000ddf9:	50                   	push   eax
c000ddfa:	52                   	push   edx
c000ddfb:	53                   	push   ebx
c000ddfc:	e8 8f bd ff ff       	call   c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000de01:	83 c4 20             	add    esp,0x20
c000de04:	09 f0                	or     eax,esi
c000de06:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de0a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000de0e:	c1 e0 03             	shl    eax,0x3
c000de11:	05 40 2a 02 c0       	add    eax,0xc0022a40
c000de16:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000de1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de1e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de22:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000de2a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de2e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de32:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000de36:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000de3a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de3e:	89 c6                	mov    esi,eax
c000de40:	89 d7                	mov    edi,edx
c000de42:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de44:	89 c8                	mov    eax,ecx
c000de46:	89 fa                	mov    edx,edi
c000de48:	89 f3                	mov    ebx,esi
c000de4a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000de4e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000de52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000de56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000de5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000de61:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000de65:	05 00 10 00 00       	add    eax,0x1000
c000de6a:	c1 e8 0c             	shr    eax,0xc
c000de6d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000de71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de75:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000de79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de7d:	25 ff 0f 00 00       	and    eax,0xfff
c000de82:	89 c6                	mov    esi,eax
c000de84:	8b 1d 30 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020530
c000de8a:	83 ec 0c             	sub    esp,0xc
c000de8d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000de91:	e8 6b b3 ff ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c000de96:	83 c4 10             	add    esp,0x10
c000de99:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000de9d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000dea3:	83 ec 0c             	sub    esp,0xc
c000dea6:	6a 01                	push   0x1
c000dea8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000deac:	50                   	push   eax
c000dead:	52                   	push   edx
c000deae:	53                   	push   ebx
c000deaf:	e8 dc bc ff ff       	call   c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000deb4:	83 c4 20             	add    esp,0x20
c000deb7:	09 f0                	or     eax,esi
c000deb9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000debd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dec1:	83 ec 0c             	sub    esp,0xc
c000dec4:	50                   	push   eax
c000dec5:	e8 67 b6 ff ff       	call   c0009531 <Virt::freeKernelVirtualPages(unsigned long)>
c000deca:	83 c4 10             	add    esp,0x10
c000decd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ded1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ded5:	89 14 c5 44 2a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd5bc],edx
c000dedc:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000dee0:	e9 bf fe ff ff       	jmp    c000dda4 <loadACPITables(unsigned char*)+0x114>
c000dee5:	8d 76 00             	lea    esi,[esi+0x0]
c000dee8:	90                   	nop
c000dee9:	8d 76 00             	lea    esi,[esi+0x0]
c000deec:	83 c4 60             	add    esp,0x60
c000deef:	5b                   	pop    ebx
c000def0:	5e                   	pop    esi
c000def1:	5f                   	pop    edi
c000def2:	c3                   	ret    
c000def3:	90                   	nop

c000def4 <findRSDT(unsigned char*)>:
c000def4:	57                   	push   edi
c000def5:	56                   	push   esi
c000def6:	53                   	push   ebx
c000def7:	83 ec 50             	sub    esp,0x50
c000defa:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c000deff:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000df05:	83 e0 04             	and    eax,0x4
c000df08:	84 c0                	test   al,al
c000df0a:	75 0c                	jne    c000df18 <findRSDT(unsigned char*)+0x24>
c000df0c:	b8 00 00 00 00       	mov    eax,0x0
c000df11:	e9 26 01 00 00       	jmp    c000e03c <findRSDT(unsigned char*)+0x148>
c000df16:	66 90                	xchg   ax,ax
c000df18:	89 e0                	mov    eax,esp
c000df1a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000df1e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000df22:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000df26:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000df2e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000df32:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000df3a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000df3e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000df42:	89 c6                	mov    esi,eax
c000df44:	89 d7                	mov    edi,edx
c000df46:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000df48:	89 c8                	mov    eax,ecx
c000df4a:	89 fa                	mov    edx,edi
c000df4c:	89 f3                	mov    ebx,esi
c000df4e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000df52:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000df56:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000df5a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000df5e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000df62:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000df6a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000df6e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000df72:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000df76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df7a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000df7e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000df82:	25 ff 0f 00 00       	and    eax,0xfff
c000df87:	89 c6                	mov    esi,eax
c000df89:	8b 1d 30 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020530
c000df8f:	83 ec 0c             	sub    esp,0xc
c000df92:	6a 02                	push   0x2
c000df94:	e8 68 b2 ff ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c000df99:	83 c4 10             	add    esp,0x10
c000df9c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000dfa0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000dfa6:	83 ec 0c             	sub    esp,0xc
c000dfa9:	6a 01                	push   0x1
c000dfab:	6a 02                	push   0x2
c000dfad:	50                   	push   eax
c000dfae:	52                   	push   edx
c000dfaf:	53                   	push   ebx
c000dfb0:	e8 db bb ff ff       	call   c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000dfb5:	83 c4 20             	add    esp,0x20
c000dfb8:	09 f0                	or     eax,esi
c000dfba:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dfbe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dfc2:	25 ff 0f 00 00       	and    eax,0xfff
c000dfc7:	89 c6                	mov    esi,eax
c000dfc9:	8b 1d 30 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020530
c000dfcf:	83 ec 0c             	sub    esp,0xc
c000dfd2:	6a 02                	push   0x2
c000dfd4:	e8 28 b2 ff ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c000dfd9:	83 c4 10             	add    esp,0x10
c000dfdc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000dfe0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000dfe6:	83 ec 0c             	sub    esp,0xc
c000dfe9:	6a 01                	push   0x1
c000dfeb:	6a 02                	push   0x2
c000dfed:	50                   	push   eax
c000dfee:	52                   	push   edx
c000dfef:	53                   	push   ebx
c000dff0:	e8 9b bb ff ff       	call   c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000dff5:	83 c4 20             	add    esp,0x20
c000dff8:	09 f0                	or     eax,esi
c000dffa:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dffe:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e003:	75 13                	jne    c000e018 <findRSDT(unsigned char*)+0x124>
c000e005:	c6 05 40 2c 02 c0 00 	mov    BYTE PTR ds:0xc0022c40,0x0
c000e00c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e010:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e014:	eb 22                	jmp    c000e038 <findRSDT(unsigned char*)+0x144>
c000e016:	66 90                	xchg   ax,ax
c000e018:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e01d:	75 11                	jne    c000e030 <findRSDT(unsigned char*)+0x13c>
c000e01f:	c6 05 40 2c 02 c0 01 	mov    BYTE PTR ds:0xc0022c40,0x1
c000e026:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e02a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e02e:	eb 08                	jmp    c000e038 <findRSDT(unsigned char*)+0x144>
c000e030:	b8 00 00 00 00       	mov    eax,0x0
c000e035:	eb 05                	jmp    c000e03c <findRSDT(unsigned char*)+0x148>
c000e037:	90                   	nop
c000e038:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e03c:	83 c4 50             	add    esp,0x50
c000e03f:	5b                   	pop    ebx
c000e040:	5e                   	pop    esi
c000e041:	5f                   	pop    edi
c000e042:	c3                   	ret    
c000e043:	90                   	nop

c000e044 <findDataTable(unsigned char*, char*)>:
c000e044:	83 ec 1c             	sub    esp,0x1c
c000e047:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c000e04c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e052:	83 e0 04             	and    eax,0x4
c000e055:	84 c0                	test   al,al
c000e057:	75 07                	jne    c000e060 <findDataTable(unsigned char*, char*)+0x1c>
c000e059:	b8 00 00 00 00       	mov    eax,0x0
c000e05e:	eb 58                	jmp    c000e0b8 <findDataTable(unsigned char*, char*)+0x74>
c000e060:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e068:	a1 2c 2a 02 c0       	mov    eax,ds:0xc0022a2c
c000e06d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e071:	7d 3d                	jge    c000e0b0 <findDataTable(unsigned char*, char*)+0x6c>
c000e073:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e077:	c1 e0 03             	shl    eax,0x3
c000e07a:	05 40 2a 02 c0       	add    eax,0xc0022a40
c000e07f:	83 ec 04             	sub    esp,0x4
c000e082:	6a 04                	push   0x4
c000e084:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e088:	50                   	push   eax
c000e089:	e8 02 23 ff ff       	call   c0000390 <memcmp>
c000e08e:	83 c4 10             	add    esp,0x10
c000e091:	85 c0                	test   eax,eax
c000e093:	0f 94 c0             	sete   al
c000e096:	84 c0                	test   al,al
c000e098:	74 0e                	je     c000e0a8 <findDataTable(unsigned char*, char*)+0x64>
c000e09a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e09e:	8b 04 c5 44 2a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd5bc]
c000e0a5:	eb 11                	jmp    c000e0b8 <findDataTable(unsigned char*, char*)+0x74>
c000e0a7:	90                   	nop
c000e0a8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e0ac:	eb ba                	jmp    c000e068 <findDataTable(unsigned char*, char*)+0x24>
c000e0ae:	66 90                	xchg   ax,ax
c000e0b0:	b8 00 00 00 00       	mov    eax,0x0
c000e0b5:	8d 76 00             	lea    esi,[esi+0x0]
c000e0b8:	83 c4 1c             	add    esp,0x1c
c000e0bb:	c3                   	ret    

c000e0bc <scanMADT()>:
c000e0bc:	53                   	push   ebx
c000e0bd:	83 ec 38             	sub    esp,0x38
c000e0c0:	a1 50 04 02 c0       	mov    eax,ds:0xc0020450
c000e0c5:	25 00 04 00 00       	and    eax,0x400
c000e0ca:	74 14                	je     c000e0e0 <scanMADT()+0x24>
c000e0cc:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c000e0d1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e0d7:	83 e2 fb             	and    edx,0xfffffffb
c000e0da:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e0e0:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c000e0e5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e0eb:	83 e0 04             	and    eax,0x4
c000e0ee:	84 c0                	test   al,al
c000e0f0:	0f 84 8a 04 00 00    	je     c000e580 <scanMADT()+0x4c4>
c000e0f6:	e8 05 fb ff ff       	call   c000dc00 <findRSDP()>
c000e0fb:	a3 4c 2c 02 c0       	mov    ds:0xc0022c4c,eax
c000e100:	a1 4c 2c 02 c0       	mov    eax,ds:0xc0022c4c
c000e105:	85 c0                	test   eax,eax
c000e107:	75 1b                	jne    c000e124 <scanMADT()+0x68>
c000e109:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c000e10e:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e114:	83 e2 fb             	and    edx,0xfffffffb
c000e117:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e11d:	e9 66 04 00 00       	jmp    c000e588 <scanMADT()+0x4cc>
c000e122:	66 90                	xchg   ax,ax
c000e124:	a1 4c 2c 02 c0       	mov    eax,ds:0xc0022c4c
c000e129:	83 ec 0c             	sub    esp,0xc
c000e12c:	50                   	push   eax
c000e12d:	e8 c2 fd ff ff       	call   c000def4 <findRSDT(unsigned char*)>
c000e132:	83 c4 10             	add    esp,0x10
c000e135:	a3 48 2c 02 c0       	mov    ds:0xc0022c48,eax
c000e13a:	a1 48 2c 02 c0       	mov    eax,ds:0xc0022c48
c000e13f:	85 c0                	test   eax,eax
c000e141:	75 19                	jne    c000e15c <scanMADT()+0xa0>
c000e143:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c000e148:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e14e:	83 e2 fb             	and    edx,0xfffffffb
c000e151:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e157:	e9 2c 04 00 00       	jmp    c000e588 <scanMADT()+0x4cc>
c000e15c:	a1 48 2c 02 c0       	mov    eax,ds:0xc0022c48
c000e161:	83 ec 0c             	sub    esp,0xc
c000e164:	50                   	push   eax
c000e165:	e8 26 fb ff ff       	call   c000dc90 <loadACPITables(unsigned char*)>
c000e16a:	83 c4 10             	add    esp,0x10
c000e16d:	a1 48 2c 02 c0       	mov    eax,ds:0xc0022c48
c000e172:	83 ec 08             	sub    esp,0x8
c000e175:	68 28 de 01 c0       	push   0xc001de28
c000e17a:	50                   	push   eax
c000e17b:	e8 c4 fe ff ff       	call   c000e044 <findDataTable(unsigned char*, char*)>
c000e180:	83 c4 10             	add    esp,0x10
c000e183:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e187:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e18c:	75 1a                	jne    c000e1a8 <scanMADT()+0xec>
c000e18e:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c000e193:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e199:	83 e2 fe             	and    edx,0xfffffffe
c000e19c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e1a2:	e9 e1 03 00 00       	jmp    c000e588 <scanMADT()+0x4cc>
c000e1a7:	90                   	nop
c000e1a8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e1b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e1b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e1b7:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e1bb:	0f 87 c7 03 00 00    	ja     c000e588 <scanMADT()+0x4cc>
c000e1c1:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e1c9:	0f 87 b9 03 00 00    	ja     c000e588 <scanMADT()+0x4cc>
c000e1cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e1d3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e1d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e1db:	8d 50 01             	lea    edx,[eax+0x1]
c000e1de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e1e2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e1e6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e1ea:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e1ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e1f2:	8d 50 01             	lea    edx,[eax+0x1]
c000e1f5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e1f9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e1fd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e201:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e205:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e20a:	0f 86 74 03 00 00    	jbe    c000e584 <scanMADT()+0x4c8>
c000e210:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e215:	75 5d                	jne    c000e274 <scanMADT()+0x1b8>
c000e217:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e21b:	8d 50 01             	lea    edx,[eax+0x1]
c000e21e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e222:	8a 15 40 2e 02 c0    	mov    dl,BYTE PTR ds:0xc0022e40
c000e228:	81 e2 ff 00 00 00    	and    edx,0xff
c000e22e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e232:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e236:	88 82 80 2e 02 c0    	mov    BYTE PTR [edx-0x3ffdd180],al
c000e23c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e240:	8d 42 01             	lea    eax,[edx+0x1]
c000e243:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e247:	a0 40 2e 02 c0       	mov    al,ds:0xc0022e40
c000e24c:	8d 48 01             	lea    ecx,[eax+0x1]
c000e24f:	88 0d 40 2e 02 c0    	mov    BYTE PTR ds:0xc0022e40,cl
c000e255:	25 ff 00 00 00       	and    eax,0xff
c000e25a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e25e:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e262:	88 90 60 2e 02 c0    	mov    BYTE PTR [eax-0x3ffdd1a0],dl
c000e268:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e26d:	e9 f6 02 00 00       	jmp    c000e568 <scanMADT()+0x4ac>
c000e272:	66 90                	xchg   ax,ax
c000e274:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e279:	0f 85 29 01 00 00    	jne    c000e3a8 <scanMADT()+0x2ec>
c000e27f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e283:	8d 50 01             	lea    edx,[eax+0x1]
c000e286:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e28a:	8a 15 00 2d 02 c0    	mov    dl,BYTE PTR ds:0xc0022d00
c000e290:	81 e2 ff 00 00 00    	and    edx,0xff
c000e296:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e29a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e29e:	88 82 20 2d 02 c0    	mov    BYTE PTR [edx-0x3ffdd2e0],al
c000e2a4:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e2a8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e2ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2b0:	01 d0                	add    eax,edx
c000e2b2:	83 c0 2c             	add    eax,0x2c
c000e2b5:	8a 00                	mov    al,BYTE PTR [eax]
c000e2b7:	31 d2                	xor    edx,edx
c000e2b9:	88 c2                	mov    dl,al
c000e2bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2bf:	8d 48 01             	lea    ecx,[eax+0x1]
c000e2c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e2c6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e2ca:	25 ff 00 00 00       	and    eax,0xff
c000e2cf:	c1 e0 08             	shl    eax,0x8
c000e2d2:	89 d1                	mov    ecx,edx
c000e2d4:	09 c1                	or     ecx,eax
c000e2d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2da:	8d 50 02             	lea    edx,[eax+0x2]
c000e2dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e2e1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e2e5:	25 ff 00 00 00       	and    eax,0xff
c000e2ea:	c1 e0 10             	shl    eax,0x10
c000e2ed:	09 c1                	or     ecx,eax
c000e2ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2f3:	8d 50 03             	lea    edx,[eax+0x3]
c000e2f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e2fa:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e2fe:	25 ff 00 00 00       	and    eax,0xff
c000e303:	c1 e0 18             	shl    eax,0x18
c000e306:	09 c1                	or     ecx,eax
c000e308:	89 ca                	mov    edx,ecx
c000e30a:	a0 00 2d 02 c0       	mov    al,ds:0xc0022d00
c000e30f:	25 ff 00 00 00       	and    eax,0xff
c000e314:	89 14 85 40 2d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd2c0],edx
c000e31b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e320:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e324:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e328:	01 d0                	add    eax,edx
c000e32a:	83 c0 2c             	add    eax,0x2c
c000e32d:	8a 00                	mov    al,BYTE PTR [eax]
c000e32f:	31 d2                	xor    edx,edx
c000e331:	88 c2                	mov    dl,al
c000e333:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e337:	8d 48 01             	lea    ecx,[eax+0x1]
c000e33a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e33e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e342:	25 ff 00 00 00       	and    eax,0xff
c000e347:	c1 e0 08             	shl    eax,0x8
c000e34a:	89 d1                	mov    ecx,edx
c000e34c:	09 c1                	or     ecx,eax
c000e34e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e352:	8d 50 02             	lea    edx,[eax+0x2]
c000e355:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e359:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e35d:	25 ff 00 00 00       	and    eax,0xff
c000e362:	c1 e0 10             	shl    eax,0x10
c000e365:	09 c1                	or     ecx,eax
c000e367:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e36b:	8d 50 03             	lea    edx,[eax+0x3]
c000e36e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e372:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e376:	25 ff 00 00 00       	and    eax,0xff
c000e37b:	c1 e0 18             	shl    eax,0x18
c000e37e:	09 c1                	or     ecx,eax
c000e380:	89 ca                	mov    edx,ecx
c000e382:	a0 00 2d 02 c0       	mov    al,ds:0xc0022d00
c000e387:	25 ff 00 00 00       	and    eax,0xff
c000e38c:	89 14 85 c0 2d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd240],edx
c000e393:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e398:	a0 00 2d 02 c0       	mov    al,ds:0xc0022d00
c000e39d:	40                   	inc    eax
c000e39e:	a2 00 2d 02 c0       	mov    ds:0xc0022d00,al
c000e3a3:	e9 c0 01 00 00       	jmp    c000e568 <scanMADT()+0x4ac>
c000e3a8:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e3ad:	0f 85 fd 00 00 00    	jne    c000e4b0 <scanMADT()+0x3f4>
c000e3b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e3ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e3be:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e3c2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e3c6:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e3ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3ce:	8d 50 01             	lea    edx,[eax+0x1]
c000e3d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e3d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e3d9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e3dd:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e3e1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e3e5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3e9:	01 d0                	add    eax,edx
c000e3eb:	83 c0 2c             	add    eax,0x2c
c000e3ee:	8a 00                	mov    al,BYTE PTR [eax]
c000e3f0:	31 d2                	xor    edx,edx
c000e3f2:	88 c2                	mov    dl,al
c000e3f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3f8:	8d 48 01             	lea    ecx,[eax+0x1]
c000e3fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3ff:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e403:	25 ff 00 00 00       	and    eax,0xff
c000e408:	c1 e0 08             	shl    eax,0x8
c000e40b:	89 d1                	mov    ecx,edx
c000e40d:	09 c1                	or     ecx,eax
c000e40f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e413:	8d 50 02             	lea    edx,[eax+0x2]
c000e416:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e41a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e41e:	25 ff 00 00 00       	and    eax,0xff
c000e423:	c1 e0 10             	shl    eax,0x10
c000e426:	09 c1                	or     ecx,eax
c000e428:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e42c:	8d 50 03             	lea    edx,[eax+0x3]
c000e42f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e433:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e437:	25 ff 00 00 00       	and    eax,0xff
c000e43c:	c1 e0 18             	shl    eax,0x18
c000e43f:	09 c8                	or     eax,ecx
c000e441:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e445:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e44a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e44e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e452:	01 d0                	add    eax,edx
c000e454:	83 c0 2c             	add    eax,0x2c
c000e457:	8a 00                	mov    al,BYTE PTR [eax]
c000e459:	25 ff 00 00 00       	and    eax,0xff
c000e45e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e462:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e465:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e469:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e46d:	81 e2 ff 00 00 00    	and    edx,0xff
c000e473:	c1 e2 08             	shl    edx,0x8
c000e476:	09 d0                	or     eax,edx
c000e478:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e47d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e482:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e486:	25 ff 00 00 00       	and    eax,0xff
c000e48b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e48f:	88 90 60 f1 01 c0    	mov    BYTE PTR [eax-0x3ffe0ea0],dl
c000e495:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e499:	31 d2                	xor    edx,edx
c000e49b:	88 c2                	mov    dl,al
c000e49d:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e4a2:	66 89 84 12 e0 2c 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdd320],ax
c000e4aa:	e9 b9 00 00 00       	jmp    c000e568 <scanMADT()+0x4ac>
c000e4af:	90                   	nop
c000e4b0:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e4b5:	0f 85 a1 00 00 00    	jne    c000e55c <scanMADT()+0x4a0>
c000e4bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4bf:	8d 50 01             	lea    edx,[eax+0x1]
c000e4c2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e4c6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4ca:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e4ce:	25 ff 00 00 00       	and    eax,0xff
c000e4d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e4d7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4df:	01 d0                	add    eax,edx
c000e4e1:	83 c0 2c             	add    eax,0x2c
c000e4e4:	8a 00                	mov    al,BYTE PTR [eax]
c000e4e6:	31 d2                	xor    edx,edx
c000e4e8:	88 c2                	mov    dl,al
c000e4ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4ee:	8d 48 01             	lea    ecx,[eax+0x1]
c000e4f1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4f5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e4f9:	25 ff 00 00 00       	and    eax,0xff
c000e4fe:	c1 e0 08             	shl    eax,0x8
c000e501:	09 d0                	or     eax,edx
c000e503:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e507:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e50c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e510:	8d 50 01             	lea    edx,[eax+0x1]
c000e513:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e517:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e51b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e51f:	25 ff 00 00 00       	and    eax,0xff
c000e524:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e52c:	c1 e0 08             	shl    eax,0x8
c000e52f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e533:	89 c1                	mov    ecx,eax
c000e535:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e539:	c1 e0 18             	shl    eax,0x18
c000e53c:	89 c3                	mov    ebx,eax
c000e53e:	a1 50 2c 02 c0       	mov    eax,ds:0xc0022c50
c000e543:	8d 50 01             	lea    edx,[eax+0x1]
c000e546:	89 15 50 2c 02 c0    	mov    DWORD PTR ds:0xc0022c50,edx
c000e54c:	09 d9                	or     ecx,ebx
c000e54e:	89 ca                	mov    edx,ecx
c000e550:	89 14 85 60 2c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd3a0],edx
c000e557:	eb 0f                	jmp    c000e568 <scanMADT()+0x4ac>
c000e559:	8d 76 00             	lea    esi,[esi+0x0]
c000e55c:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e561:	75 05                	jne    c000e568 <scanMADT()+0x4ac>
c000e563:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e568:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e56c:	31 d2                	xor    edx,edx
c000e56e:	88 c2                	mov    dl,al
c000e570:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e574:	01 d0                	add    eax,edx
c000e576:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e57a:	e9 31 fc ff ff       	jmp    c000e1b0 <scanMADT()+0xf4>
c000e57f:	90                   	nop
c000e580:	90                   	nop
c000e581:	eb 05                	jmp    c000e588 <scanMADT()+0x4cc>
c000e583:	90                   	nop
c000e584:	90                   	nop
c000e585:	8d 76 00             	lea    esi,[esi+0x0]
c000e588:	83 c4 38             	add    esp,0x38
c000e58b:	5b                   	pop    ebx
c000e58c:	c3                   	ret    
c000e58d:	90                   	nop
c000e58e:	66 90                	xchg   ax,ax

c000e590 <ACPI::ACPI()>:
c000e590:	83 ec 0c             	sub    esp,0xc
c000e593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e597:	83 ec 08             	sub    esp,0x8
c000e59a:	68 2d de 01 c0       	push   0xc001de2d
c000e59f:	50                   	push   eax
c000e5a0:	e8 87 d4 ff ff       	call   c000ba2c <Device::Device(char const*)>
c000e5a5:	83 c4 10             	add    esp,0x10
c000e5a8:	ba 64 df 01 c0       	mov    edx,0xc001df64
c000e5ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5b1:	89 10                	mov    DWORD PTR [eax],edx
c000e5b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5b7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e5be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5c2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e5cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5d0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e5da:	e8 dd fa ff ff       	call   c000e0bc <scanMADT()>
c000e5df:	90                   	nop
c000e5e0:	83 c4 0c             	add    esp,0xc
c000e5e3:	c3                   	ret    

c000e5e4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e5e4:	83 ec 2c             	sub    esp,0x2c
c000e5e7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e5eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e5ef:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e5f3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e5f7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e5fc:	88 d0                	mov    al,dl
c000e5fe:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e602:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e607:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e60f:	90                   	nop
c000e610:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e614:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e61a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e61e:	0f 8d 9c 00 00 00    	jge    c000e6c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e624:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e628:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e62c:	83 c2 2a             	add    edx,0x2a
c000e62f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e633:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e638:	75 7a                	jne    c000e6b4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e63a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e63e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e642:	83 c2 2a             	add    edx,0x2a
c000e645:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e649:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e64d:	75 65                	jne    c000e6b4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e64f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e654:	74 3a                	je     c000e690 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e656:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e65a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e65e:	83 c2 2a             	add    edx,0x2a
c000e661:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e665:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e669:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e66c:	39 c2                	cmp    edx,eax
c000e66e:	74 10                	je     c000e680 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e670:	83 ec 0c             	sub    esp,0xc
c000e673:	68 a8 dd 01 c0       	push   0xc001dda8
c000e678:	e8 4e 1a 00 00       	call   c00100cb <KePanic(char const*)>
c000e67d:	83 c4 10             	add    esp,0x10
c000e680:	83 ec 0c             	sub    esp,0xc
c000e683:	68 32 de 01 c0       	push   0xc001de32
c000e688:	e8 3e 1a 00 00       	call   c00100cb <KePanic(char const*)>
c000e68d:	83 c4 10             	add    esp,0x10
c000e690:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e694:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e698:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e69c:	83 c2 2a             	add    edx,0x2a
c000e69f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e6a3:	8b 02                	mov    eax,DWORD PTR [edx]
c000e6a5:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e6a8:	89 01                	mov    DWORD PTR [ecx],eax
c000e6aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e6ad:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e6b2:	66 90                	xchg   ax,ax
c000e6b4:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e6b8:	e9 53 ff ff ff       	jmp    c000e610 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e6bd:	8d 76 00             	lea    esi,[esi+0x0]
c000e6c0:	90                   	nop
c000e6c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e6c5:	83 c4 2c             	add    esp,0x2c
c000e6c8:	c2 04 00             	ret    0x4
c000e6cb:	90                   	nop

c000e6cc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e6cc:	83 ec 1c             	sub    esp,0x1c
c000e6cf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e6d3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e6d7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e6db:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e6e0:	88 c8                	mov    al,cl
c000e6e2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e6e6:	88 d0                	mov    al,dl
c000e6e8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e6ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6f0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e6f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6fa:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e6fd:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e701:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e705:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e709:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e70f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e713:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e716:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e71a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000e71f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e723:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e729:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000e72d:	8d 48 01             	lea    ecx,[eax+0x1]
c000e730:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e734:	83 c2 2a             	add    edx,0x2a
c000e737:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000e73b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e73f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e745:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e749:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e74c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e750:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000e754:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e758:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e75e:	8d 50 01             	lea    edx,[eax+0x1]
c000e761:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e765:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000e76b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e76f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e775:	3d 00 02 00 00       	cmp    eax,0x200
c000e77a:	75 10                	jne    c000e78c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000e77c:	83 ec 0c             	sub    esp,0xc
c000e77f:	68 41 de 01 c0       	push   0xc001de41
c000e784:	e8 42 19 00 00       	call   c00100cb <KePanic(char const*)>
c000e789:	83 c4 10             	add    esp,0x10
c000e78c:	90                   	nop
c000e78d:	83 c4 1c             	add    esp,0x1c
c000e790:	c3                   	ret    
c000e791:	90                   	nop
c000e792:	66 90                	xchg   ax,ax

c000e794 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000e794:	b8 00 00 00 00       	mov    eax,0x0
c000e799:	c3                   	ret    
c000e79a:	66 90                	xchg   ax,ax

c000e79c <ACPI::detectPCI()>:
c000e79c:	53                   	push   ebx
c000e79d:	83 ec 28             	sub    esp,0x28
c000e7a0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e7a5:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000e7aa:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c000e7af:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e7b5:	83 e0 04             	and    eax,0x4
c000e7b8:	84 c0                	test   al,al
c000e7ba:	74 2c                	je     c000e7e8 <ACPI::detectPCI()+0x4c>
c000e7bc:	a1 48 2c 02 c0       	mov    eax,ds:0xc0022c48
c000e7c1:	83 ec 08             	sub    esp,0x8
c000e7c4:	68 5e de 01 c0       	push   0xc001de5e
c000e7c9:	50                   	push   eax
c000e7ca:	e8 75 f8 ff ff       	call   c000e044 <findDataTable(unsigned char*, char*)>
c000e7cf:	83 c4 10             	add    esp,0x10
c000e7d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e7d6:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000e7db:	74 0b                	je     c000e7e8 <ACPI::detectPCI()+0x4c>
c000e7dd:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e7e2:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e7e7:	90                   	nop
c000e7e8:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000e7f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e7f4:	8a 00                	mov    al,BYTE PTR [eax]
c000e7f6:	3c 01                	cmp    al,0x1
c000e7f8:	75 0e                	jne    c000e808 <ACPI::detectPCI()+0x6c>
c000e7fa:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e7ff:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e804:	eb 2a                	jmp    c000e830 <ACPI::detectPCI()+0x94>
c000e806:	66 90                	xchg   ax,ax
c000e808:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e80c:	8a 00                	mov    al,BYTE PTR [eax]
c000e80e:	3c 02                	cmp    al,0x2
c000e810:	75 1e                	jne    c000e830 <ACPI::detectPCI()+0x94>
c000e812:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e817:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e81c:	74 12                	je     c000e830 <ACPI::detectPCI()+0x94>
c000e81e:	83 ec 0c             	sub    esp,0xc
c000e821:	68 d8 dd 01 c0       	push   0xc001ddd8
c000e826:	e8 a0 18 00 00       	call   c00100cb <KePanic(char const*)>
c000e82b:	83 c4 10             	add    esp,0x10
c000e82e:	66 90                	xchg   ax,ax
c000e830:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000e834:	83 f0 01             	xor    eax,0x1
c000e837:	84 c0                	test   al,al
c000e839:	74 41                	je     c000e87c <ACPI::detectPCI()+0xe0>
c000e83b:	e8 f0 18 ff ff       	call   c0000130 <manualPCIProbe>
c000e840:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e844:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e849:	75 0d                	jne    c000e858 <ACPI::detectPCI()+0xbc>
c000e84b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e850:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e855:	eb 25                	jmp    c000e87c <ACPI::detectPCI()+0xe0>
c000e857:	90                   	nop
c000e858:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000e85d:	75 1d                	jne    c000e87c <ACPI::detectPCI()+0xe0>
c000e85f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e864:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e869:	74 11                	je     c000e87c <ACPI::detectPCI()+0xe0>
c000e86b:	83 ec 0c             	sub    esp,0xc
c000e86e:	68 d8 dd 01 c0       	push   0xc001ddd8
c000e873:	e8 53 18 00 00       	call   c00100cb <KePanic(char const*)>
c000e878:	83 c4 10             	add    esp,0x10
c000e87b:	90                   	nop
c000e87c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e881:	0f 84 85 00 00 00    	je     c000e90c <ACPI::detectPCI()+0x170>
c000e887:	83 ec 0c             	sub    esp,0xc
c000e88a:	68 63 de 01 c0       	push   0xc001de63
c000e88f:	e8 bf 11 00 00       	call   c000fa53 <KeSetBootMessage(char const*)>
c000e894:	83 c4 10             	add    esp,0x10
c000e897:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000e89f:	83 ec 0c             	sub    esp,0xc
c000e8a2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e8a6:	e8 0e 8f ff ff       	call   c00077b9 <malloc>
c000e8ab:	83 c4 10             	add    esp,0x10
c000e8ae:	89 c3                	mov    ebx,eax
c000e8b0:	83 ec 0c             	sub    esp,0xc
c000e8b3:	53                   	push   ebx
c000e8b4:	e8 c9 96 00 00       	call   c0017f82 <PCI::PCI()>
c000e8b9:	83 c4 10             	add    esp,0x10
c000e8bc:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e8c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e8c4:	83 ec 08             	sub    esp,0x8
c000e8c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e8cb:	50                   	push   eax
c000e8cc:	e8 c3 cf ff ff       	call   c000b894 <Device::addChild(Device*)>
c000e8d1:	83 c4 10             	add    esp,0x10
c000e8d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8d8:	8b 00                	mov    eax,DWORD PTR [eax]
c000e8da:	83 c0 08             	add    eax,0x8
c000e8dd:	8b 00                	mov    eax,DWORD PTR [eax]
c000e8df:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e8e4:	74 0a                	je     c000e8f0 <ACPI::detectPCI()+0x154>
c000e8e6:	ba 01 00 00 00       	mov    edx,0x1
c000e8eb:	eb 0b                	jmp    c000e8f8 <ACPI::detectPCI()+0x15c>
c000e8ed:	8d 76 00             	lea    esi,[esi+0x0]
c000e8f0:	ba 02 00 00 00       	mov    edx,0x2
c000e8f5:	8d 76 00             	lea    esi,[esi+0x0]
c000e8f8:	6a 00                	push   0x0
c000e8fa:	6a 00                	push   0x0
c000e8fc:	52                   	push   edx
c000e8fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e901:	ff d0                	call   eax
c000e903:	83 c4 10             	add    esp,0x10
c000e906:	e9 91 00 00 00       	jmp    c000e99c <ACPI::detectPCI()+0x200>
c000e90b:	90                   	nop
c000e90c:	83 ec 0c             	sub    esp,0xc
c000e90f:	68 7b de 01 c0       	push   0xc001de7b
c000e914:	e8 3a 11 00 00       	call   c000fa53 <KeSetBootMessage(char const*)>
c000e919:	83 c4 10             	add    esp,0x10
c000e91c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000e923:	83 ec 0c             	sub    esp,0xc
c000e926:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e92a:	e8 8a 8e ff ff       	call   c00077b9 <malloc>
c000e92f:	83 c4 10             	add    esp,0x10
c000e932:	89 c3                	mov    ebx,eax
c000e934:	83 ec 0c             	sub    esp,0xc
c000e937:	53                   	push   ebx
c000e938:	e8 71 a1 00 00       	call   c0018aae <IDE::IDE()>
c000e93d:	83 c4 10             	add    esp,0x10
c000e940:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000e944:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e948:	83 ec 08             	sub    esp,0x8
c000e94b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e94f:	50                   	push   eax
c000e950:	e8 3f cf ff ff       	call   c000b894 <Device::addChild(Device*)>
c000e955:	83 c4 10             	add    esp,0x10
c000e958:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e95c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000e966:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e96a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000e973:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e977:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000e980:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e984:	8b 00                	mov    eax,DWORD PTR [eax]
c000e986:	83 c0 08             	add    eax,0x8
c000e989:	8b 00                	mov    eax,DWORD PTR [eax]
c000e98b:	6a 00                	push   0x0
c000e98d:	6a 00                	push   0x0
c000e98f:	6a 00                	push   0x0
c000e991:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e995:	ff d0                	call   eax
c000e997:	83 c4 10             	add    esp,0x10
c000e99a:	66 90                	xchg   ax,ax
c000e99c:	90                   	nop
c000e99d:	83 c4 28             	add    esp,0x28
c000e9a0:	5b                   	pop    ebx
c000e9a1:	c3                   	ret    
c000e9a2:	66 90                	xchg   ax,ax

c000e9a4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000e9a4:	83 ec 1c             	sub    esp,0x1c
c000e9a7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e9ab:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000e9ae:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e9b2:	8b 15 38 04 02 c0    	mov    edx,DWORD PTR ds:0xc0020438
c000e9b8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e9bc:	25 ff 00 00 00       	and    eax,0xff
c000e9c1:	83 ec 08             	sub    esp,0x8
c000e9c4:	50                   	push   eax
c000e9c5:	52                   	push   edx
c000e9c6:	e8 db 84 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c000e9cb:	83 c4 10             	add    esp,0x10
c000e9ce:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000e9d2:	8b 15 38 04 02 c0    	mov    edx,DWORD PTR ds:0xc0020438
c000e9d8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e9dc:	25 ff 00 00 00       	and    eax,0xff
c000e9e1:	83 ec 04             	sub    esp,0x4
c000e9e4:	6a 01                	push   0x1
c000e9e6:	50                   	push   eax
c000e9e7:	52                   	push   edx
c000e9e8:	e8 cf 85 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c000e9ed:	83 c4 10             	add    esp,0x10
c000e9f0:	90                   	nop
c000e9f1:	83 c4 1c             	add    esp,0x1c
c000e9f4:	c3                   	ret    
c000e9f5:	90                   	nop
c000e9f6:	66 90                	xchg   ax,ax

c000e9f8 <ACPI::sleep()>:
c000e9f8:	83 ec 0c             	sub    esp,0xc
c000e9fb:	a1 20 2a 02 c0       	mov    eax,ds:0xc0022a20
c000ea00:	85 c0                	test   eax,eax
c000ea02:	74 08                	je     c000ea0c <ACPI::sleep()+0x14>
c000ea04:	a1 20 2a 02 c0       	mov    eax,ds:0xc0022a20
c000ea09:	ff d0                	call   eax
c000ea0b:	90                   	nop
c000ea0c:	90                   	nop
c000ea0d:	83 c4 0c             	add    esp,0xc
c000ea10:	c3                   	ret    
c000ea11:	90                   	nop
c000ea12:	66 90                	xchg   ax,ax

c000ea14 <ACPI::open(int, int, void*)>:
c000ea14:	57                   	push   edi
c000ea15:	56                   	push   esi
c000ea16:	53                   	push   ebx
c000ea17:	81 ec 70 01 00 00    	sub    esp,0x170
c000ea1d:	83 ec 0c             	sub    esp,0xc
c000ea20:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ea27:	e8 70 fd ff ff       	call   c000e79c <ACPI::detectPCI()>
c000ea2c:	83 c4 10             	add    esp,0x10
c000ea2f:	83 ec 0c             	sub    esp,0xc
c000ea32:	68 00 de 01 c0       	push   0xc001de00
c000ea37:	e8 17 10 00 00       	call   c000fa53 <KeSetBootMessage(char const*)>
c000ea3c:	83 c4 10             	add    esp,0x10
c000ea3f:	83 ec 0c             	sub    esp,0xc
c000ea42:	68 90 de 01 c0       	push   0xc001de90
c000ea47:	e8 27 34 00 00       	call   c0011e73 <Thr::loadKernelSymbolTable(char const*)>
c000ea4c:	83 c4 10             	add    esp,0x10
c000ea4f:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000ea57:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000ea62:	83 ec 0c             	sub    esp,0xc
c000ea65:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ea6c:	e8 48 8d ff ff       	call   c00077b9 <malloc>
c000ea71:	83 c4 10             	add    esp,0x10
c000ea74:	89 c3                	mov    ebx,eax
c000ea76:	a1 10 37 02 c0       	mov    eax,ds:0xc0023710
c000ea7b:	83 ec 04             	sub    esp,0x4
c000ea7e:	50                   	push   eax
c000ea7f:	68 ae de 01 c0       	push   0xc001deae
c000ea84:	53                   	push   ebx
c000ea85:	e8 40 bf ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c000ea8a:	83 c4 10             	add    esp,0x10
c000ea8d:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000ea94:	83 ec 08             	sub    esp,0x8
c000ea97:	6a 01                	push   0x1
c000ea99:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eaa0:	e8 e5 bf ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c000eaa5:	83 c4 10             	add    esp,0x10
c000eaa8:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000eaaf:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000eab7:	75 17                	jne    c000ead0 <ACPI::open(int, int, void*)+0xbc>
c000eab9:	83 ec 0c             	sub    esp,0xc
c000eabc:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eac3:	e8 20 c0 ff ff       	call   c000aae8 <File::close()>
c000eac8:	83 c4 10             	add    esp,0x10
c000eacb:	eb 0b                	jmp    c000ead8 <ACPI::open(int, int, void*)+0xc4>
c000eacd:	8d 76 00             	lea    esi,[esi+0x0]
c000ead0:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000ead8:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000eae0:	74 1e                	je     c000eb00 <ACPI::open(int, int, void*)+0xec>
c000eae2:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000eae9:	8b 00                	mov    eax,DWORD PTR [eax]
c000eaeb:	83 c0 08             	add    eax,0x8
c000eaee:	8b 00                	mov    eax,DWORD PTR [eax]
c000eaf0:	83 ec 0c             	sub    esp,0xc
c000eaf3:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eafa:	ff d0                	call   eax
c000eafc:	83 c4 10             	add    esp,0x10
c000eaff:	90                   	nop
c000eb00:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000eb07:	83 f0 01             	xor    eax,0x1
c000eb0a:	84 c0                	test   al,al
c000eb0c:	74 42                	je     c000eb50 <ACPI::open(int, int, void*)+0x13c>
c000eb0e:	83 ec 0c             	sub    esp,0xc
c000eb11:	68 cc de 01 c0       	push   0xc001decc
c000eb16:	e8 38 0f 00 00       	call   c000fa53 <KeSetBootMessage(char const*)>
c000eb1b:	83 c4 10             	add    esp,0x10
c000eb1e:	83 ec 04             	sub    esp,0x4
c000eb21:	6a 0c                	push   0xc
c000eb23:	68 e7 de 01 c0       	push   0xc001dee7
c000eb28:	68 f8 de 01 c0       	push   0xc001def8
c000eb2d:	e8 6c 29 00 00       	call   c001149e <Reg::readIntWithDefault(char*, char*, int)>
c000eb32:	83 c4 10             	add    esp,0x10
c000eb35:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000eb3c:	83 ec 0c             	sub    esp,0xc
c000eb3f:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000eb46:	e8 c0 a8 ff ff       	call   c000940b <Virt::setupPageSwapping(int)>
c000eb4b:	83 c4 10             	add    esp,0x10
c000eb4e:	66 90                	xchg   ax,ax
c000eb50:	83 ec 0c             	sub    esp,0xc
c000eb53:	68 77 cf 01 c0       	push   0xc001cf77
c000eb58:	e8 f6 0e 00 00       	call   c000fa53 <KeSetBootMessage(char const*)>
c000eb5d:	83 c4 10             	add    esp,0x10
c000eb60:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000eb67:	83 ec 08             	sub    esp,0x8
c000eb6a:	6a 12                	push   0x12
c000eb6c:	50                   	push   eax
c000eb6d:	e8 3a d0 ff ff       	call   c000bbac <getDevicesOfType(DeviceType)>
c000eb72:	83 c4 0c             	add    esp,0xc
c000eb75:	8d 76 00             	lea    esi,[esi+0x0]
c000eb78:	83 ec 0c             	sub    esp,0xc
c000eb7b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000eb82:	50                   	push   eax
c000eb83:	e8 34 d8 00 00       	call   c001c3bc <LinkedList<Device>::isEmpty()>
c000eb88:	83 c4 10             	add    esp,0x10
c000eb8b:	83 f0 01             	xor    eax,0x1
c000eb8e:	84 c0                	test   al,al
c000eb90:	0f 84 46 01 00 00    	je     c000ecdc <ACPI::open(int, int, void*)+0x2c8>
c000eb96:	83 ec 0c             	sub    esp,0xc
c000eb99:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000eba0:	50                   	push   eax
c000eba1:	e8 32 d8 00 00       	call   c001c3d8 <LinkedList<Device>::getFirstElement()>
c000eba6:	83 c4 10             	add    esp,0x10
c000eba9:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ebb0:	83 ec 0c             	sub    esp,0xc
c000ebb3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ebba:	50                   	push   eax
c000ebbb:	e8 20 d8 00 00       	call   c001c3e0 <LinkedList<Device>::removeFirst()>
c000ebc0:	83 c4 10             	add    esp,0x10
c000ebc3:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ebca:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ebd1:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ebd8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ebdc:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ebe2:	ba 09 00 00 00       	mov    edx,0x9
c000ebe7:	fc                   	cld    
c000ebe8:	89 c7                	mov    edi,eax
c000ebea:	89 de                	mov    esi,ebx
c000ebec:	89 d1                	mov    ecx,edx
c000ebee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ebf0:	83 ec 08             	sub    esp,0x8
c000ebf3:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ebf7:	50                   	push   eax
c000ebf8:	83 ec 24             	sub    esp,0x24
c000ebfb:	89 e0                	mov    eax,esp
c000ebfd:	89 c3                	mov    ebx,eax
c000ebff:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ec03:	ba 09 00 00 00       	mov    edx,0x9
c000ec08:	89 df                	mov    edi,ebx
c000ec0a:	89 c6                	mov    esi,eax
c000ec0c:	89 d1                	mov    ecx,edx
c000ec0e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ec10:	e8 4f 98 00 00       	call   c0018464 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ec15:	83 c4 30             	add    esp,0x30
c000ec18:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ec1f:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ec27:	0f 84 4b ff ff ff    	je     c000eb78 <ACPI::open(int, int, void*)+0x164>
c000ec2d:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ec38:	83 ec 0c             	sub    esp,0xc
c000ec3b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ec42:	e8 72 8b ff ff       	call   c00077b9 <malloc>
c000ec47:	83 c4 10             	add    esp,0x10
c000ec4a:	89 c3                	mov    ebx,eax
c000ec4c:	a1 10 37 02 c0       	mov    eax,ds:0xc0023710
c000ec51:	83 ec 04             	sub    esp,0x4
c000ec54:	50                   	push   eax
c000ec55:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ec5c:	53                   	push   ebx
c000ec5d:	e8 68 bd ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c000ec62:	83 c4 10             	add    esp,0x10
c000ec65:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000ec6c:	83 ec 0c             	sub    esp,0xc
c000ec6f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ec76:	e8 7d c0 ff ff       	call   c000acf8 <File::exists()>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	84 c0                	test   al,al
c000ec80:	74 2a                	je     c000ecac <ACPI::open(int, int, void*)+0x298>
c000ec82:	83 ec 08             	sub    esp,0x8
c000ec85:	6a 01                	push   0x1
c000ec87:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ec8e:	e8 57 3c 00 00       	call   c00128ea <Thr::loadDLL(char const*, bool)>
c000ec93:	83 c4 10             	add    esp,0x10
c000ec96:	83 ec 08             	sub    esp,0x8
c000ec99:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000eca0:	50                   	push   eax
c000eca1:	e8 75 3e 00 00       	call   c0012b1b <Thr::executeDLL(unsigned long, void*)>
c000eca6:	83 c4 10             	add    esp,0x10
c000eca9:	8d 76 00             	lea    esi,[esi+0x0]
c000ecac:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000ecb4:	0f 84 be fe ff ff    	je     c000eb78 <ACPI::open(int, int, void*)+0x164>
c000ecba:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000ecc1:	8b 00                	mov    eax,DWORD PTR [eax]
c000ecc3:	83 c0 08             	add    eax,0x8
c000ecc6:	8b 00                	mov    eax,DWORD PTR [eax]
c000ecc8:	83 ec 0c             	sub    esp,0xc
c000eccb:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ecd2:	ff d0                	call   eax
c000ecd4:	83 c4 10             	add    esp,0x10
c000ecd7:	e9 9c fe ff ff       	jmp    c000eb78 <ACPI::open(int, int, void*)+0x164>
c000ecdc:	83 ec 0c             	sub    esp,0xc
c000ecdf:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ece6:	50                   	push   eax
c000ece7:	e8 cc d6 00 00       	call   c001c3b8 <LinkedList<Device>::~LinkedList()>
c000ecec:	83 c4 10             	add    esp,0x10
c000ecef:	8b 1d 38 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020438
c000ecf5:	83 ec 08             	sub    esp,0x8
c000ecf8:	6a 01                	push   0x1
c000ecfa:	68 ff de 01 c0       	push   0xc001deff
c000ecff:	e8 e6 3b 00 00       	call   c00128ea <Thr::loadDLL(char const*, bool)>
c000ed04:	83 c4 10             	add    esp,0x10
c000ed07:	83 ec 08             	sub    esp,0x8
c000ed0a:	53                   	push   ebx
c000ed0b:	50                   	push   eax
c000ed0c:	e8 0a 3e 00 00       	call   c0012b1b <Thr::executeDLL(unsigned long, void*)>
c000ed11:	83 c4 10             	add    esp,0x10
c000ed14:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c000ed19:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ed1f:	83 e0 04             	and    eax,0x4
c000ed22:	84 c0                	test   al,al
c000ed24:	0f 84 16 01 00 00    	je     c000ee40 <ACPI::open(int, int, void*)+0x42c>
c000ed2a:	83 ec 0c             	sub    esp,0xc
c000ed2d:	68 1c df 01 c0       	push   0xc001df1c
c000ed32:	e8 1c 0d 00 00       	call   c000fa53 <KeSetBootMessage(char const*)>
c000ed37:	83 c4 10             	add    esp,0x10
c000ed3a:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000ed45:	83 ec 0c             	sub    esp,0xc
c000ed48:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000ed4f:	e8 65 8a ff ff       	call   c00077b9 <malloc>
c000ed54:	83 c4 10             	add    esp,0x10
c000ed57:	89 c3                	mov    ebx,eax
c000ed59:	a1 10 37 02 c0       	mov    eax,ds:0xc0023710
c000ed5e:	83 ec 04             	sub    esp,0x4
c000ed61:	50                   	push   eax
c000ed62:	68 39 df 01 c0       	push   0xc001df39
c000ed67:	53                   	push   ebx
c000ed68:	e8 5d bc ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c000ed6d:	83 c4 10             	add    esp,0x10
c000ed70:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000ed77:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ed7f:	74 1b                	je     c000ed9c <ACPI::open(int, int, void*)+0x388>
c000ed81:	83 ec 0c             	sub    esp,0xc
c000ed84:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ed8b:	e8 68 bf ff ff       	call   c000acf8 <File::exists()>
c000ed90:	83 c4 10             	add    esp,0x10
c000ed93:	84 c0                	test   al,al
c000ed95:	74 05                	je     c000ed9c <ACPI::open(int, int, void*)+0x388>
c000ed97:	b0 01                	mov    al,0x1
c000ed99:	eb 05                	jmp    c000eda0 <ACPI::open(int, int, void*)+0x38c>
c000ed9b:	90                   	nop
c000ed9c:	b0 00                	mov    al,0x0
c000ed9e:	66 90                	xchg   ax,ax
c000eda0:	84 c0                	test   al,al
c000eda2:	74 28                	je     c000edcc <ACPI::open(int, int, void*)+0x3b8>
c000eda4:	83 ec 08             	sub    esp,0x8
c000eda7:	6a 01                	push   0x1
c000eda9:	68 39 df 01 c0       	push   0xc001df39
c000edae:	e8 37 3b 00 00       	call   c00128ea <Thr::loadDLL(char const*, bool)>
c000edb3:	83 c4 10             	add    esp,0x10
c000edb6:	83 ec 08             	sub    esp,0x8
c000edb9:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000edc0:	50                   	push   eax
c000edc1:	e8 55 3d 00 00       	call   c0012b1b <Thr::executeDLL(unsigned long, void*)>
c000edc6:	83 c4 10             	add    esp,0x10
c000edc9:	8d 76 00             	lea    esi,[esi+0x0]
c000edcc:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000edd4:	74 2a                	je     c000ee00 <ACPI::open(int, int, void*)+0x3ec>
c000edd6:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000edde:	74 20                	je     c000ee00 <ACPI::open(int, int, void*)+0x3ec>
c000ede0:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000ede7:	8b 00                	mov    eax,DWORD PTR [eax]
c000ede9:	83 c0 08             	add    eax,0x8
c000edec:	8b 00                	mov    eax,DWORD PTR [eax]
c000edee:	83 ec 0c             	sub    esp,0xc
c000edf1:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000edf8:	ff d0                	call   eax
c000edfa:	83 c4 10             	add    esp,0x10
c000edfd:	8d 76 00             	lea    esi,[esi+0x0]
c000ee00:	a1 48 2c 02 c0       	mov    eax,ds:0xc0022c48
c000ee05:	83 ec 08             	sub    esp,0x8
c000ee08:	68 56 df 01 c0       	push   0xc001df56
c000ee0d:	50                   	push   eax
c000ee0e:	e8 31 f2 ff ff       	call   c000e044 <findDataTable(unsigned char*, char*)>
c000ee13:	83 c4 10             	add    esp,0x10
c000ee16:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000ee1d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000ee25:	74 19                	je     c000ee40 <ACPI::open(int, int, void*)+0x42c>
c000ee27:	83 ec 08             	sub    esp,0x8
c000ee2a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ee31:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ee38:	e8 67 fb ff ff       	call   c000e9a4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000ee3d:	83 c4 10             	add    esp,0x10
c000ee40:	b8 00 00 00 00       	mov    eax,0x0
c000ee45:	81 c4 70 01 00 00    	add    esp,0x170
c000ee4b:	5b                   	pop    ebx
c000ee4c:	5e                   	pop    esi
c000ee4d:	5f                   	pop    edi
c000ee4e:	c3                   	ret    
c000ee4f:	90                   	nop

c000ee50 <CPU::close(int, int, void*)>:
c000ee50:	31 c0                	xor    eax,eax
c000ee52:	c3                   	ret    
c000ee53:	90                   	nop

c000ee54 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000ee54:	60                   	pusha  
c000ee55:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ee59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ee61:	9c                   	pushf  
c000ee62:	fa                   	cli    
c000ee63:	0f 09                	wbinvd 
c000ee65:	0f 30                	wrmsr  
c000ee67:	9d                   	popf   
c000ee68:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ee6c:	89 02                	mov    DWORD PTR [edx],eax
c000ee6e:	61                   	popa   
c000ee6f:	c3                   	ret    

c000ee70 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000ee70:	60                   	pusha  
c000ee71:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ee75:	9c                   	pushf  
c000ee76:	fa                   	cli    
c000ee77:	0f 09                	wbinvd 
c000ee79:	31 c0                	xor    eax,eax
c000ee7b:	31 d2                	xor    edx,edx
c000ee7d:	0f 32                	rdmsr  
c000ee7f:	9d                   	popf   
c000ee80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee84:	89 02                	mov    DWORD PTR [edx],eax
c000ee86:	61                   	popa   
c000ee87:	c3                   	ret    

c000ee88 <CPU::AMD_K6_writeback(int, int, int)>:
c000ee88:	56                   	push   esi
c000ee89:	53                   	push   ebx
c000ee8a:	83 ec 10             	sub    esp,0x10
c000ee8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee91:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000ee96:	75 5d                	jne    c000eef5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ee98:	83 f8 08             	cmp    eax,0x8
c000ee9b:	75 09                	jne    c000eea6 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000ee9d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000eea2:	7e 13                	jle    c000eeb7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000eea4:	eb 30                	jmp    c000eed6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000eea6:	83 f8 06             	cmp    eax,0x6
c000eea9:	7c 4a                	jl     c000eef5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000eeab:	83 f8 07             	cmp    eax,0x7
c000eeae:	7e 07                	jle    c000eeb7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000eeb0:	83 f8 09             	cmp    eax,0x9
c000eeb3:	74 21                	je     c000eed6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000eeb5:	eb 3e                	jmp    c000eef5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000eeb7:	89 e6                	mov    esi,esp
c000eeb9:	8b 1d 5c 04 02 c0    	mov    ebx,DWORD PTR ds:0xc002045c
c000eebf:	56                   	push   esi
c000eec0:	c1 eb 15             	shr    ebx,0x15
c000eec3:	68 82 00 00 c0       	push   0xc0000082
c000eec8:	83 e3 7e             	and    ebx,0x7e
c000eecb:	e8 a0 ff ff ff       	call   c000ee70 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000eed0:	56                   	push   esi
c000eed1:	6a 00                	push   0x0
c000eed3:	53                   	push   ebx
c000eed4:	eb 12                	jmp    c000eee8 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000eed6:	89 e3                	mov    ebx,esp
c000eed8:	53                   	push   ebx
c000eed9:	68 82 00 00 c0       	push   0xc0000082
c000eede:	e8 8d ff ff ff       	call   c000ee70 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000eee3:	53                   	push   ebx
c000eee4:	6a 00                	push   0x0
c000eee6:	6a 00                	push   0x0
c000eee8:	68 82 00 00 c0       	push   0xc0000082
c000eeed:	e8 62 ff ff ff       	call   c000ee54 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000eef2:	83 c4 18             	add    esp,0x18
c000eef5:	83 c4 10             	add    esp,0x10
c000eef8:	5b                   	pop    ebx
c000eef9:	5e                   	pop    esi
c000eefa:	c3                   	ret    
c000eefb:	90                   	nop

c000eefc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000eefc:	55                   	push   ebp
c000eefd:	57                   	push   edi
c000eefe:	56                   	push   esi
c000eeff:	53                   	push   ebx
c000ef00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef04:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ef08:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ef0c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000ef10:	39 05 70 f1 01 c0    	cmp    DWORD PTR ds:0xc001f170,eax
c000ef16:	75 23                	jne    c000ef3b <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000ef18:	a1 ac 2e 02 c0       	mov    eax,ds:0xc0022eac
c000ef1d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ef21:	89 06                	mov    DWORD PTR [esi],eax
c000ef23:	a1 a8 2e 02 c0       	mov    eax,ds:0xc0022ea8
c000ef28:	89 07                	mov    DWORD PTR [edi],eax
c000ef2a:	a1 a4 2e 02 c0       	mov    eax,ds:0xc0022ea4
c000ef2f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ef32:	a1 a0 2e 02 c0       	mov    eax,ds:0xc0022ea0
c000ef37:	89 02                	mov    DWORD PTR [edx],eax
c000ef39:	eb 3f                	jmp    c000ef7a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000ef3b:	31 c9                	xor    ecx,ecx
c000ef3d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef41:	0f a2                	cpuid  
c000ef43:	89 06                	mov    DWORD PTR [esi],eax
c000ef45:	89 1f                	mov    DWORD PTR [edi],ebx
c000ef47:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ef4b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000ef4e:	89 10                	mov    DWORD PTR [eax],edx
c000ef50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef54:	a3 70 f1 01 c0       	mov    ds:0xc001f170,eax
c000ef59:	8b 06                	mov    eax,DWORD PTR [esi]
c000ef5b:	a3 ac 2e 02 c0       	mov    ds:0xc0022eac,eax
c000ef60:	8b 07                	mov    eax,DWORD PTR [edi]
c000ef62:	a3 a8 2e 02 c0       	mov    ds:0xc0022ea8,eax
c000ef67:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ef6a:	a3 a4 2e 02 c0       	mov    ds:0xc0022ea4,eax
c000ef6f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ef73:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef75:	a3 a0 2e 02 c0       	mov    ds:0xc0022ea0,eax
c000ef7a:	5b                   	pop    ebx
c000ef7b:	5e                   	pop    esi
c000ef7c:	5f                   	pop    edi
c000ef7d:	5d                   	pop    ebp
c000ef7e:	c3                   	ret    
c000ef7f:	90                   	nop

c000ef80 <CPU::cpuidCheckEDX(unsigned int)>:
c000ef80:	83 ec 10             	sub    esp,0x10
c000ef83:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ef87:	50                   	push   eax
c000ef88:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ef8c:	50                   	push   eax
c000ef8d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ef91:	50                   	push   eax
c000ef92:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ef96:	50                   	push   eax
c000ef97:	6a 01                	push   0x1
c000ef99:	e8 5e ff ff ff       	call   c000eefc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ef9e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000efa2:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000efa6:	0f 95 c0             	setne  al
c000efa9:	83 c4 24             	add    esp,0x24
c000efac:	c3                   	ret    
c000efad:	90                   	nop

c000efae <CPU::cpuidCheckECX(unsigned int)>:
c000efae:	83 ec 10             	sub    esp,0x10
c000efb1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efb5:	50                   	push   eax
c000efb6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efba:	50                   	push   eax
c000efbb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efbf:	50                   	push   eax
c000efc0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efc4:	50                   	push   eax
c000efc5:	6a 01                	push   0x1
c000efc7:	e8 30 ff ff ff       	call   c000eefc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000efcc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000efd0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000efd4:	0f 95 c0             	setne  al
c000efd7:	83 c4 24             	add    esp,0x24
c000efda:	c3                   	ret    
c000efdb:	90                   	nop

c000efdc <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000efdc:	83 ec 10             	sub    esp,0x10
c000efdf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efe3:	50                   	push   eax
c000efe4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efe8:	50                   	push   eax
c000efe9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efed:	50                   	push   eax
c000efee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eff2:	50                   	push   eax
c000eff3:	6a 07                	push   0x7
c000eff5:	e8 02 ff ff ff       	call   c000eefc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000effa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000effe:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f002:	0f 95 c0             	setne  al
c000f005:	83 c4 24             	add    esp,0x24
c000f008:	c3                   	ret    
c000f009:	90                   	nop

c000f00a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f00a:	83 ec 10             	sub    esp,0x10
c000f00d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f011:	50                   	push   eax
c000f012:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f016:	50                   	push   eax
c000f017:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f01b:	50                   	push   eax
c000f01c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f020:	50                   	push   eax
c000f021:	6a 07                	push   0x7
c000f023:	e8 d4 fe ff ff       	call   c000eefc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f028:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f02c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f030:	0f 95 c0             	setne  al
c000f033:	83 c4 24             	add    esp,0x24
c000f036:	c3                   	ret    
c000f037:	90                   	nop

c000f038 <CPU::CPU()>:
c000f038:	83 ec 0c             	sub    esp,0xc
c000f03b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f03f:	83 ec 08             	sub    esp,0x8
c000f042:	68 79 e0 01 c0       	push   0xc001e079
c000f047:	50                   	push   eax
c000f048:	e8 df c9 ff ff       	call   c000ba2c <Device::Device(char const*)>
c000f04d:	83 c4 10             	add    esp,0x10
c000f050:	ba 00 e1 01 c0       	mov    edx,0xc001e100
c000f055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f059:	89 10                	mov    DWORD PTR [eax],edx
c000f05b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f05f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f06d:	05 78 01 00 00       	add    eax,0x178
c000f072:	83 ec 0c             	sub    esp,0xc
c000f075:	50                   	push   eax
c000f076:	e8 ff 7f ff ff       	call   c000707a <GDT::GDT()>
c000f07b:	83 c4 10             	add    esp,0x10
c000f07e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f082:	05 7c 09 00 00       	add    eax,0x97c
c000f087:	83 ec 0c             	sub    esp,0xc
c000f08a:	50                   	push   eax
c000f08b:	e8 24 82 ff ff       	call   c00072b4 <IDT::IDT()>
c000f090:	83 c4 10             	add    esp,0x10
c000f093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f097:	05 7c 11 00 00       	add    eax,0x117c
c000f09c:	83 ec 0c             	sub    esp,0xc
c000f09f:	50                   	push   eax
c000f0a0:	e8 9f 9a ff ff       	call   c0008b44 <TSS::TSS()>
c000f0a5:	83 c4 10             	add    esp,0x10
c000f0a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0ac:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f0b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0b7:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f0c1:	90                   	nop
c000f0c2:	83 c4 0c             	add    esp,0xc
c000f0c5:	c3                   	ret    

c000f0c6 <CPU::displayFeatures()>:
c000f0c6:	c3                   	ret    
c000f0c7:	90                   	nop

c000f0c8 <CPU::detectFeatures()>:
c000f0c8:	55                   	push   ebp
c000f0c9:	57                   	push   edi
c000f0ca:	56                   	push   esi
c000f0cb:	53                   	push   ebx
c000f0cc:	83 ec 30             	sub    esp,0x30
c000f0cf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f0d3:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f0dd:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f0e4:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f0ea:	6a 0d                	push   0xd
c000f0ec:	6a 00                	push   0x0
c000f0ee:	55                   	push   ebp
c000f0ef:	e8 dc 13 ff ff       	call   c00004d0 <memset>
c000f0f4:	83 c4 10             	add    esp,0x10
c000f0f7:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c000f0fc:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f103:	0f 84 d5 05 00 00    	je     c000f6de <CPU::detectFeatures()+0x616>
c000f109:	83 ec 0c             	sub    esp,0xc
c000f10c:	89 ef                	mov    edi,ebp
c000f10e:	6a 10                	push   0x10
c000f110:	e8 6b fe ff ff       	call   c000ef80 <CPU::cpuidCheckEDX(unsigned int)>
c000f115:	83 e0 01             	and    eax,0x1
c000f118:	8d 14 00             	lea    edx,[eax+eax*1]
c000f11b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f121:	83 e0 fd             	and    eax,0xfffffffd
c000f124:	09 d0                	or     eax,edx
c000f126:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f12c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f133:	e8 48 fe ff ff       	call   c000ef80 <CPU::cpuidCheckEDX(unsigned int)>
c000f138:	83 e0 01             	and    eax,0x1
c000f13b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f142:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f148:	83 e0 fb             	and    eax,0xfffffffb
c000f14b:	09 d0                	or     eax,edx
c000f14d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f153:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f15a:	e8 21 fe ff ff       	call   c000ef80 <CPU::cpuidCheckEDX(unsigned int)>
c000f15f:	83 e0 01             	and    eax,0x1
c000f162:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f169:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f16f:	83 e0 f7             	and    eax,0xfffffff7
c000f172:	09 d0                	or     eax,edx
c000f174:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f17a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f181:	e8 fa fd ff ff       	call   c000ef80 <CPU::cpuidCheckEDX(unsigned int)>
c000f186:	83 e0 01             	and    eax,0x1
c000f189:	c1 e0 04             	shl    eax,0x4
c000f18c:	88 c2                	mov    dl,al
c000f18e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f194:	83 e0 ef             	and    eax,0xffffffef
c000f197:	09 d0                	or     eax,edx
c000f199:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f19f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f1a6:	e8 d5 fd ff ff       	call   c000ef80 <CPU::cpuidCheckEDX(unsigned int)>
c000f1ab:	83 e0 01             	and    eax,0x1
c000f1ae:	c1 e0 05             	shl    eax,0x5
c000f1b1:	88 c2                	mov    dl,al
c000f1b3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1b9:	83 e0 df             	and    eax,0xffffffdf
c000f1bc:	09 d0                	or     eax,edx
c000f1be:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1c4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f1cb:	e8 b0 fd ff ff       	call   c000ef80 <CPU::cpuidCheckEDX(unsigned int)>
c000f1d0:	83 e0 01             	and    eax,0x1
c000f1d3:	8d 14 00             	lea    edx,[eax+eax*1]
c000f1d6:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f1dc:	83 e0 fd             	and    eax,0xfffffffd
c000f1df:	09 d0                	or     eax,edx
c000f1e1:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f1e7:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f1ee:	e8 8d fd ff ff       	call   c000ef80 <CPU::cpuidCheckEDX(unsigned int)>
c000f1f3:	83 e0 01             	and    eax,0x1
c000f1f6:	c1 e0 06             	shl    eax,0x6
c000f1f9:	88 c2                	mov    dl,al
c000f1fb:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f201:	83 e0 bf             	and    eax,0xffffffbf
c000f204:	09 d0                	or     eax,edx
c000f206:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f20c:	58                   	pop    eax
c000f20d:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f211:	50                   	push   eax
c000f212:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f216:	50                   	push   eax
c000f217:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f21b:	56                   	push   esi
c000f21c:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f220:	50                   	push   eax
c000f221:	6a 00                	push   0x0
c000f223:	e8 d4 fc ff ff       	call   c000eefc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f228:	b8 04 00 00 00       	mov    eax,0x4
c000f22d:	89 c1                	mov    ecx,eax
c000f22f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f231:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f237:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f23b:	89 c1                	mov    ecx,eax
c000f23d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f23f:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f245:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f249:	89 c1                	mov    ecx,eax
c000f24b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f24d:	83 c4 18             	add    esp,0x18
c000f250:	68 88 df 01 c0       	push   0xc001df88
c000f255:	55                   	push   ebp
c000f256:	e8 85 14 ff ff       	call   c00006e0 <strcmp>
c000f25b:	83 c4 10             	add    esp,0x10
c000f25e:	85 c0                	test   eax,eax
c000f260:	75 0f                	jne    c000f271 <CPU::detectFeatures()+0x1a9>
c000f262:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f26c:	e9 22 02 00 00       	jmp    c000f493 <CPU::detectFeatures()+0x3cb>
c000f271:	50                   	push   eax
c000f272:	50                   	push   eax
c000f273:	68 95 df 01 c0       	push   0xc001df95
c000f278:	55                   	push   ebp
c000f279:	e8 62 14 ff ff       	call   c00006e0 <strcmp>
c000f27e:	83 c4 10             	add    esp,0x10
c000f281:	85 c0                	test   eax,eax
c000f283:	74 dd                	je     c000f262 <CPU::detectFeatures()+0x19a>
c000f285:	50                   	push   eax
c000f286:	50                   	push   eax
c000f287:	68 a2 df 01 c0       	push   0xc001dfa2
c000f28c:	55                   	push   ebp
c000f28d:	e8 4e 14 ff ff       	call   c00006e0 <strcmp>
c000f292:	83 c4 10             	add    esp,0x10
c000f295:	85 c0                	test   eax,eax
c000f297:	74 2a                	je     c000f2c3 <CPU::detectFeatures()+0x1fb>
c000f299:	50                   	push   eax
c000f29a:	50                   	push   eax
c000f29b:	68 af df 01 c0       	push   0xc001dfaf
c000f2a0:	55                   	push   ebp
c000f2a1:	e8 3a 14 ff ff       	call   c00006e0 <strcmp>
c000f2a6:	83 c4 10             	add    esp,0x10
c000f2a9:	85 c0                	test   eax,eax
c000f2ab:	74 16                	je     c000f2c3 <CPU::detectFeatures()+0x1fb>
c000f2ad:	50                   	push   eax
c000f2ae:	50                   	push   eax
c000f2af:	68 bc df 01 c0       	push   0xc001dfbc
c000f2b4:	55                   	push   ebp
c000f2b5:	e8 26 14 ff ff       	call   c00006e0 <strcmp>
c000f2ba:	83 c4 10             	add    esp,0x10
c000f2bd:	85 c0                	test   eax,eax
c000f2bf:	74 48                	je     c000f309 <CPU::detectFeatures()+0x241>
c000f2c1:	eb 0f                	jmp    c000f2d2 <CPU::detectFeatures()+0x20a>
c000f2c3:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f2cd:	e9 c1 01 00 00       	jmp    c000f493 <CPU::detectFeatures()+0x3cb>
c000f2d2:	50                   	push   eax
c000f2d3:	50                   	push   eax
c000f2d4:	68 c9 df 01 c0       	push   0xc001dfc9
c000f2d9:	55                   	push   ebp
c000f2da:	e8 01 14 ff ff       	call   c00006e0 <strcmp>
c000f2df:	83 c4 10             	add    esp,0x10
c000f2e2:	85 c0                	test   eax,eax
c000f2e4:	74 23                	je     c000f309 <CPU::detectFeatures()+0x241>
c000f2e6:	57                   	push   edi
c000f2e7:	57                   	push   edi
c000f2e8:	68 d6 df 01 c0       	push   0xc001dfd6
c000f2ed:	55                   	push   ebp
c000f2ee:	e8 ed 13 ff ff       	call   c00006e0 <strcmp>
c000f2f3:	83 c4 10             	add    esp,0x10
c000f2f6:	85 c0                	test   eax,eax
c000f2f8:	75 1e                	jne    c000f318 <CPU::detectFeatures()+0x250>
c000f2fa:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f304:	e9 8a 01 00 00       	jmp    c000f493 <CPU::detectFeatures()+0x3cb>
c000f309:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f313:	e9 7b 01 00 00       	jmp    c000f493 <CPU::detectFeatures()+0x3cb>
c000f318:	56                   	push   esi
c000f319:	56                   	push   esi
c000f31a:	68 e3 df 01 c0       	push   0xc001dfe3
c000f31f:	55                   	push   ebp
c000f320:	e8 bb 13 ff ff       	call   c00006e0 <strcmp>
c000f325:	83 c4 10             	add    esp,0x10
c000f328:	85 c0                	test   eax,eax
c000f32a:	75 0f                	jne    c000f33b <CPU::detectFeatures()+0x273>
c000f32c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f336:	e9 58 01 00 00       	jmp    c000f493 <CPU::detectFeatures()+0x3cb>
c000f33b:	51                   	push   ecx
c000f33c:	51                   	push   ecx
c000f33d:	68 a2 df 01 c0       	push   0xc001dfa2
c000f342:	55                   	push   ebp
c000f343:	e8 98 13 ff ff       	call   c00006e0 <strcmp>
c000f348:	83 c4 10             	add    esp,0x10
c000f34b:	85 c0                	test   eax,eax
c000f34d:	75 0f                	jne    c000f35e <CPU::detectFeatures()+0x296>
c000f34f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f359:	e9 35 01 00 00       	jmp    c000f493 <CPU::detectFeatures()+0x3cb>
c000f35e:	52                   	push   edx
c000f35f:	52                   	push   edx
c000f360:	68 f0 df 01 c0       	push   0xc001dff0
c000f365:	55                   	push   ebp
c000f366:	e8 75 13 ff ff       	call   c00006e0 <strcmp>
c000f36b:	83 c4 10             	add    esp,0x10
c000f36e:	85 c0                	test   eax,eax
c000f370:	75 0f                	jne    c000f381 <CPU::detectFeatures()+0x2b9>
c000f372:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f37c:	e9 12 01 00 00       	jmp    c000f493 <CPU::detectFeatures()+0x3cb>
c000f381:	50                   	push   eax
c000f382:	50                   	push   eax
c000f383:	68 fd df 01 c0       	push   0xc001dffd
c000f388:	55                   	push   ebp
c000f389:	e8 52 13 ff ff       	call   c00006e0 <strcmp>
c000f38e:	83 c4 10             	add    esp,0x10
c000f391:	85 c0                	test   eax,eax
c000f393:	75 0f                	jne    c000f3a4 <CPU::detectFeatures()+0x2dc>
c000f395:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f39f:	e9 ef 00 00 00       	jmp    c000f493 <CPU::detectFeatures()+0x3cb>
c000f3a4:	50                   	push   eax
c000f3a5:	50                   	push   eax
c000f3a6:	68 0a e0 01 c0       	push   0xc001e00a
c000f3ab:	55                   	push   ebp
c000f3ac:	e8 2f 13 ff ff       	call   c00006e0 <strcmp>
c000f3b1:	83 c4 10             	add    esp,0x10
c000f3b4:	85 c0                	test   eax,eax
c000f3b6:	75 0f                	jne    c000f3c7 <CPU::detectFeatures()+0x2ff>
c000f3b8:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f3c2:	e9 cc 00 00 00       	jmp    c000f493 <CPU::detectFeatures()+0x3cb>
c000f3c7:	50                   	push   eax
c000f3c8:	50                   	push   eax
c000f3c9:	68 17 e0 01 c0       	push   0xc001e017
c000f3ce:	55                   	push   ebp
c000f3cf:	e8 0c 13 ff ff       	call   c00006e0 <strcmp>
c000f3d4:	83 c4 10             	add    esp,0x10
c000f3d7:	85 c0                	test   eax,eax
c000f3d9:	75 0f                	jne    c000f3ea <CPU::detectFeatures()+0x322>
c000f3db:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f3e5:	e9 a9 00 00 00       	jmp    c000f493 <CPU::detectFeatures()+0x3cb>
c000f3ea:	50                   	push   eax
c000f3eb:	50                   	push   eax
c000f3ec:	68 24 e0 01 c0       	push   0xc001e024
c000f3f1:	55                   	push   ebp
c000f3f2:	e8 e9 12 ff ff       	call   c00006e0 <strcmp>
c000f3f7:	83 c4 10             	add    esp,0x10
c000f3fa:	85 c0                	test   eax,eax
c000f3fc:	75 0f                	jne    c000f40d <CPU::detectFeatures()+0x345>
c000f3fe:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f408:	e9 86 00 00 00       	jmp    c000f493 <CPU::detectFeatures()+0x3cb>
c000f40d:	50                   	push   eax
c000f40e:	50                   	push   eax
c000f40f:	68 31 e0 01 c0       	push   0xc001e031
c000f414:	55                   	push   ebp
c000f415:	e8 c6 12 ff ff       	call   c00006e0 <strcmp>
c000f41a:	83 c4 10             	add    esp,0x10
c000f41d:	85 c0                	test   eax,eax
c000f41f:	75 0c                	jne    c000f42d <CPU::detectFeatures()+0x365>
c000f421:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f42b:	eb 66                	jmp    c000f493 <CPU::detectFeatures()+0x3cb>
c000f42d:	50                   	push   eax
c000f42e:	50                   	push   eax
c000f42f:	68 3e e0 01 c0       	push   0xc001e03e
c000f434:	55                   	push   ebp
c000f435:	e8 a6 12 ff ff       	call   c00006e0 <strcmp>
c000f43a:	83 c4 10             	add    esp,0x10
c000f43d:	85 c0                	test   eax,eax
c000f43f:	75 0c                	jne    c000f44d <CPU::detectFeatures()+0x385>
c000f441:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f44b:	eb 46                	jmp    c000f493 <CPU::detectFeatures()+0x3cb>
c000f44d:	57                   	push   edi
c000f44e:	57                   	push   edi
c000f44f:	68 4b e0 01 c0       	push   0xc001e04b
c000f454:	55                   	push   ebp
c000f455:	e8 86 12 ff ff       	call   c00006e0 <strcmp>
c000f45a:	83 c4 10             	add    esp,0x10
c000f45d:	85 c0                	test   eax,eax
c000f45f:	74 e0                	je     c000f441 <CPU::detectFeatures()+0x379>
c000f461:	56                   	push   esi
c000f462:	56                   	push   esi
c000f463:	68 58 e0 01 c0       	push   0xc001e058
c000f468:	55                   	push   ebp
c000f469:	e8 72 12 ff ff       	call   c00006e0 <strcmp>
c000f46e:	83 c4 10             	add    esp,0x10
c000f471:	85 c0                	test   eax,eax
c000f473:	74 cc                	je     c000f441 <CPU::detectFeatures()+0x379>
c000f475:	51                   	push   ecx
c000f476:	51                   	push   ecx
c000f477:	68 65 e0 01 c0       	push   0xc001e065
c000f47c:	55                   	push   ebp
c000f47d:	e8 5e 12 ff ff       	call   c00006e0 <strcmp>
c000f482:	83 c4 10             	add    esp,0x10
c000f485:	85 c0                	test   eax,eax
c000f487:	74 b8                	je     c000f441 <CPU::detectFeatures()+0x379>
c000f489:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f493:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f498:	0f 86 be 00 00 00    	jbe    c000f55c <CPU::detectFeatures()+0x494>
c000f49e:	83 ec 0c             	sub    esp,0xc
c000f4a1:	68 80 00 00 00       	push   0x80
c000f4a6:	e8 31 fb ff ff       	call   c000efdc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f4ab:	83 e0 01             	and    eax,0x1
c000f4ae:	c1 e0 06             	shl    eax,0x6
c000f4b1:	88 c2                	mov    dl,al
c000f4b3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f4b9:	83 e0 bf             	and    eax,0xffffffbf
c000f4bc:	09 d0                	or     eax,edx
c000f4be:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f4c4:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f4cb:	e8 0c fb ff ff       	call   c000efdc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f4d0:	83 e0 01             	and    eax,0x1
c000f4d3:	c1 e0 04             	shl    eax,0x4
c000f4d6:	88 c2                	mov    dl,al
c000f4d8:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f4de:	83 e0 ef             	and    eax,0xffffffef
c000f4e1:	09 d0                	or     eax,edx
c000f4e3:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f4e9:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f4f0:	e8 e7 fa ff ff       	call   c000efdc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f4f5:	c1 e0 07             	shl    eax,0x7
c000f4f8:	88 c2                	mov    dl,al
c000f4fa:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f500:	83 e0 7f             	and    eax,0x7f
c000f503:	09 d0                	or     eax,edx
c000f505:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f50b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f512:	e8 f3 fa ff ff       	call   c000f00a <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f517:	83 e0 01             	and    eax,0x1
c000f51a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f521:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f527:	83 e0 f7             	and    eax,0xfffffff7
c000f52a:	09 d0                	or     eax,edx
c000f52c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f532:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f539:	e8 cc fa ff ff       	call   c000f00a <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f53e:	83 c4 10             	add    esp,0x10
c000f541:	83 e0 01             	and    eax,0x1
c000f544:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f54b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f551:	83 e0 fb             	and    eax,0xfffffffb
c000f554:	09 d0                	or     eax,edx
c000f556:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f55c:	83 ec 0c             	sub    esp,0xc
c000f55f:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f563:	50                   	push   eax
c000f564:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f568:	50                   	push   eax
c000f569:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f56d:	56                   	push   esi
c000f56e:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f572:	50                   	push   eax
c000f573:	6a 01                	push   0x1
c000f575:	e8 82 f9 ff ff       	call   c000eefc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f57a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f57e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f584:	88 ca                	mov    dl,cl
c000f586:	83 e0 f0             	and    eax,0xfffffff0
c000f589:	83 e2 0f             	and    edx,0xf
c000f58c:	09 d0                	or     eax,edx
c000f58e:	88 ca                	mov    dl,cl
c000f590:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f596:	c0 ea 04             	shr    dl,0x4
c000f599:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f59d:	0f b6 c2             	movzx  eax,dl
c000f5a0:	83 c4 20             	add    esp,0x20
c000f5a3:	c1 e0 06             	shl    eax,0x6
c000f5a6:	89 c7                	mov    edi,eax
c000f5a8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f5ae:	66 25 3f c0          	and    ax,0xc03f
c000f5b2:	09 f8                	or     eax,edi
c000f5b4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f5bb:	89 c8                	mov    eax,ecx
c000f5bd:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f5c4:	c1 e8 08             	shr    eax,0x8
c000f5c7:	83 e5 3f             	and    ebp,0x3f
c000f5ca:	83 e0 0f             	and    eax,0xf
c000f5cd:	89 c7                	mov    edi,eax
c000f5cf:	c1 e7 06             	shl    edi,0x6
c000f5d2:	09 ef                	or     edi,ebp
c000f5d4:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f5db:	89 fa                	mov    edx,edi
c000f5dd:	83 e5 c0             	and    ebp,0xffffffc0
c000f5e0:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f5e6:	88 c2                	mov    dl,al
c000f5e8:	c0 ea 02             	shr    dl,0x2
c000f5eb:	89 d7                	mov    edi,edx
c000f5ed:	09 ef                	or     edi,ebp
c000f5ef:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f5f5:	89 fa                	mov    edx,edi
c000f5f7:	83 e5 cf             	and    ebp,0xffffffcf
c000f5fa:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f600:	89 cf                	mov    edi,ecx
c000f602:	c1 ef 0c             	shr    edi,0xc
c000f605:	83 e7 03             	and    edi,0x3
c000f608:	c1 e7 04             	shl    edi,0x4
c000f60b:	09 ef                	or     edi,ebp
c000f60d:	3c 06                	cmp    al,0x6
c000f60f:	89 fa                	mov    edx,edi
c000f611:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f617:	74 04                	je     c000f61d <CPU::detectFeatures()+0x555>
c000f619:	3c 0f                	cmp    al,0xf
c000f61b:	75 5c                	jne    c000f679 <CPU::detectFeatures()+0x5b1>
c000f61d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f621:	89 cf                	mov    edi,ecx
c000f623:	c1 ef 10             	shr    edi,0x10
c000f626:	c1 e7 04             	shl    edi,0x4
c000f629:	09 fa                	or     edx,edi
c000f62b:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f631:	0f b6 d2             	movzx  edx,dl
c000f634:	66 81 e7 3f c0       	and    di,0xc03f
c000f639:	c1 e2 06             	shl    edx,0x6
c000f63c:	09 fa                	or     edx,edi
c000f63e:	3c 0f                	cmp    al,0xf
c000f640:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f647:	75 30                	jne    c000f679 <CPU::detectFeatures()+0x5b1>
c000f649:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f64f:	c1 e9 14             	shr    ecx,0x14
c000f652:	83 e0 3f             	and    eax,0x3f
c000f655:	83 c1 0f             	add    ecx,0xf
c000f658:	88 ca                	mov    dl,cl
c000f65a:	c0 e9 02             	shr    cl,0x2
c000f65d:	c1 e2 06             	shl    edx,0x6
c000f660:	09 d0                	or     eax,edx
c000f662:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f668:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f66e:	83 e0 c0             	and    eax,0xffffffc0
c000f671:	09 c1                	or     ecx,eax
c000f673:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f679:	83 ec 0c             	sub    esp,0xc
c000f67c:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f683:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f687:	50                   	push   eax
c000f688:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f68c:	55                   	push   ebp
c000f68d:	56                   	push   esi
c000f68e:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f692:	57                   	push   edi
c000f693:	68 00 00 00 80       	push   0x80000000
c000f698:	e8 5f f8 ff ff       	call   c000eefc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f69d:	83 c4 20             	add    esp,0x20
c000f6a0:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f6a8:	76 22                	jbe    c000f6cc <CPU::detectFeatures()+0x604>
c000f6aa:	83 ec 0c             	sub    esp,0xc
c000f6ad:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f6b1:	50                   	push   eax
c000f6b2:	55                   	push   ebp
c000f6b3:	56                   	push   esi
c000f6b4:	57                   	push   edi
c000f6b5:	68 01 00 00 80       	push   0x80000001
c000f6ba:	e8 3d f8 ff ff       	call   c000eefc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f6bf:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f6c9:	83 c4 20             	add    esp,0x20
c000f6cc:	52                   	push   edx
c000f6cd:	52                   	push   edx
c000f6ce:	68 71 e0 01 c0       	push   0xc001e071
c000f6d3:	53                   	push   ebx
c000f6d4:	e8 45 c3 ff ff       	call   c000ba1e <Device::setName(char const*)>
c000f6d9:	83 c4 10             	add    esp,0x10
c000f6dc:	eb 67                	jmp    c000f745 <CPU::detectFeatures()+0x67d>
c000f6de:	50                   	push   eax
c000f6df:	50                   	push   eax
c000f6e0:	68 d6 df 01 c0       	push   0xc001dfd6
c000f6e5:	55                   	push   ebp
c000f6e6:	e8 15 0f ff ff       	call   c0000600 <strcpy>
c000f6eb:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f6f5:	e8 c9 0a ff ff       	call   c00001c3 <is486>
c000f6fa:	83 c4 10             	add    esp,0x10
c000f6fd:	85 c0                	test   eax,eax
c000f6ff:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f705:	74 1d                	je     c000f724 <CPU::detectFeatures()+0x65c>
c000f707:	83 c8 07             	or     eax,0x7
c000f70a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f710:	0f 20 c0             	mov    eax,cr0
c000f713:	83 e0 14             	and    eax,0x14
c000f716:	83 f8 04             	cmp    eax,0x4
c000f719:	75 0e                	jne    c000f729 <CPU::detectFeatures()+0x661>
c000f71b:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000f722:	eb 21                	jmp    c000f745 <CPU::detectFeatures()+0x67d>
c000f724:	83 e0 f8             	and    eax,0xfffffff8
c000f727:	eb e1                	jmp    c000f70a <CPU::detectFeatures()+0x642>
c000f729:	e8 70 0a ff ff       	call   c000019e <hasLegacyFPU>
c000f72e:	83 e0 01             	and    eax,0x1
c000f731:	8d 14 00             	lea    edx,[eax+eax*1]
c000f734:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f73a:	83 e0 fd             	and    eax,0xfffffffd
c000f73d:	09 d0                	or     eax,edx
c000f73f:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f745:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000f74c:	74 0e                	je     c000f75c <CPU::detectFeatures()+0x694>
c000f74e:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c000f753:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000f75a:	eb 20                	jmp    c000f77c <CPU::detectFeatures()+0x6b4>
c000f75c:	e8 3d 0a ff ff       	call   c000019e <hasLegacyFPU>
c000f761:	83 e0 01             	and    eax,0x1
c000f764:	8d 14 00             	lea    edx,[eax+eax*1]
c000f767:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f76d:	83 e0 fd             	and    eax,0xfffffffd
c000f770:	09 d0                	or     eax,edx
c000f772:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f778:	a8 02                	test   al,0x2
c000f77a:	75 d2                	jne    c000f74e <CPU::detectFeatures()+0x686>
c000f77c:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000f783:	83 c4 2c             	add    esp,0x2c
c000f786:	5b                   	pop    ebx
c000f787:	5e                   	pop    esi
c000f788:	5f                   	pop    edi
c000f789:	5d                   	pop    ebp
c000f78a:	c3                   	ret    
c000f78b:	90                   	nop

c000f78c <CPU::setupSMEP()>:
c000f78c:	0f 20 e0             	mov    eax,cr4
c000f78f:	0d 00 00 10 00       	or     eax,0x100000
c000f794:	0f 22 e0             	mov    cr4,eax
c000f797:	c3                   	ret    

c000f798 <CPU::setupUMIP()>:
c000f798:	0f 20 e0             	mov    eax,cr4
c000f79b:	80 cc 08             	or     ah,0x8
c000f79e:	0f 22 e0             	mov    cr4,eax
c000f7a1:	c3                   	ret    

c000f7a2 <CPU::setupTSC()>:
c000f7a2:	0f 20 e0             	mov    eax,cr4
c000f7a5:	83 c8 04             	or     eax,0x4
c000f7a8:	0f 22 e0             	mov    cr4,eax
c000f7ab:	c3                   	ret    

c000f7ac <CPU::setupLargePages()>:
c000f7ac:	0f 20 e0             	mov    eax,cr4
c000f7af:	83 c8 10             	or     eax,0x10
c000f7b2:	0f 22 e0             	mov    cr4,eax
c000f7b5:	c3                   	ret    

c000f7b6 <CPU::setupPAT()>:
c000f7b6:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c000f7bb:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000f7c2:	74 2c                	je     c000f7f0 <CPU::setupPAT()+0x3a>
c000f7c4:	53                   	push   ebx
c000f7c5:	83 ec 10             	sub    esp,0x10
c000f7c8:	68 77 02 00 00       	push   0x277
c000f7cd:	50                   	push   eax
c000f7ce:	e8 1f 76 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c000f7d3:	83 e2 f8             	and    edx,0xfffffff8
c000f7d6:	83 ca 01             	or     edx,0x1
c000f7d9:	52                   	push   edx
c000f7da:	50                   	push   eax
c000f7db:	68 77 02 00 00       	push   0x277
c000f7e0:	ff 35 38 04 02 c0    	push   DWORD PTR ds:0xc0020438
c000f7e6:	e8 33 76 ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f7eb:	83 c4 28             	add    esp,0x28
c000f7ee:	5b                   	pop    ebx
c000f7ef:	c3                   	ret    
c000f7f0:	c3                   	ret    
c000f7f1:	90                   	nop

c000f7f2 <CPU::setupMTRR()>:
c000f7f2:	c3                   	ret    
c000f7f3:	90                   	nop

c000f7f4 <CPU::setupGlobalPages()>:
c000f7f4:	0f 20 e0             	mov    eax,cr4
c000f7f7:	0c 80                	or     al,0x80
c000f7f9:	0f 22 e0             	mov    cr4,eax
c000f7fc:	c3                   	ret    
c000f7fd:	90                   	nop

c000f7fe <CPU::allowUsermodeDataAccess()>:
c000f7fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f802:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f809:	74 03                	je     c000f80e <CPU::allowUsermodeDataAccess()+0x10>
c000f80b:	0f 01 cb             	stac   
c000f80e:	c3                   	ret    
c000f80f:	90                   	nop

c000f810 <CPU::prohibitUsermodeDataAccess()>:
c000f810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f814:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f81b:	74 03                	je     c000f820 <CPU::prohibitUsermodeDataAccess()+0x10>
c000f81d:	0f 01 ca             	clac   
c000f820:	c3                   	ret    
c000f821:	90                   	nop

c000f822 <CPU::setupSMAP()>:
c000f822:	0f 20 e0             	mov    eax,cr4
c000f825:	0d 00 00 20 00       	or     eax,0x200000
c000f82a:	0f 22 e0             	mov    cr4,eax
c000f82d:	eb e1                	jmp    c000f810 <CPU::prohibitUsermodeDataAccess()>
c000f82f:	90                   	nop

c000f830 <CPU::setupFeatures()>:
c000f830:	53                   	push   ebx
c000f831:	83 ec 08             	sub    esp,0x8
c000f834:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f838:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000f83f:	74 18                	je     c000f859 <CPU::setupFeatures()+0x29>
c000f841:	83 ec 0c             	sub    esp,0xc
c000f844:	68 7d e0 01 c0       	push   0xc001e07d
c000f849:	e8 06 ac ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000f84e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f851:	e8 42 ff ff ff       	call   c000f798 <CPU::setupUMIP()>
c000f856:	83 c4 10             	add    esp,0x10
c000f859:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000f860:	74 18                	je     c000f87a <CPU::setupFeatures()+0x4a>
c000f862:	83 ec 0c             	sub    esp,0xc
c000f865:	68 87 e0 01 c0       	push   0xc001e087
c000f86a:	e8 e5 ab ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000f86f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f872:	e8 2b ff ff ff       	call   c000f7a2 <CPU::setupTSC()>
c000f877:	83 c4 10             	add    esp,0x10
c000f87a:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000f881:	74 18                	je     c000f89b <CPU::setupFeatures()+0x6b>
c000f883:	83 ec 0c             	sub    esp,0xc
c000f886:	68 90 e0 01 c0       	push   0xc001e090
c000f88b:	e8 c4 ab ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000f890:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f893:	e8 14 ff ff ff       	call   c000f7ac <CPU::setupLargePages()>
c000f898:	83 c4 10             	add    esp,0x10
c000f89b:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000f8a2:	74 18                	je     c000f8bc <CPU::setupFeatures()+0x8c>
c000f8a4:	83 ec 0c             	sub    esp,0xc
c000f8a7:	68 99 e0 01 c0       	push   0xc001e099
c000f8ac:	e8 a3 ab ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000f8b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8b4:	e8 3b ff ff ff       	call   c000f7f4 <CPU::setupGlobalPages()>
c000f8b9:	83 c4 10             	add    esp,0x10
c000f8bc:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000f8c3:	74 18                	je     c000f8dd <CPU::setupFeatures()+0xad>
c000f8c5:	83 ec 0c             	sub    esp,0xc
c000f8c8:	68 ab e0 01 c0       	push   0xc001e0ab
c000f8cd:	e8 82 ab ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000f8d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8d5:	e8 dc fe ff ff       	call   c000f7b6 <CPU::setupPAT()>
c000f8da:	83 c4 10             	add    esp,0x10
c000f8dd:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000f8e4:	74 11                	je     c000f8f7 <CPU::setupFeatures()+0xc7>
c000f8e6:	c7 44 24 10 b4 e0 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e0b4
c000f8ee:	83 c4 08             	add    esp,0x8
c000f8f1:	5b                   	pop    ebx
c000f8f2:	e9 5d ab ff ff       	jmp    c000a454 <Dbg::kprintf(char const*, ...)>
c000f8f7:	83 c4 08             	add    esp,0x8
c000f8fa:	5b                   	pop    ebx
c000f8fb:	c3                   	ret    

c000f8fc <CPU::open(int, int, void*)>:
c000f8fc:	57                   	push   edi
c000f8fd:	56                   	push   esi
c000f8fe:	53                   	push   ebx
c000f8ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f903:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f907:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000f90d:	83 ec 0c             	sub    esp,0xc
c000f910:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000f916:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000f91c:	50                   	push   eax
c000f91d:	e8 ba 77 ff ff       	call   c00070dc <GDT::setup()>
c000f922:	83 c4 0c             	add    esp,0xc
c000f925:	6a 00                	push   0x0
c000f927:	68 ef be ad de       	push   0xdeadbeef
c000f92c:	57                   	push   edi
c000f92d:	e8 56 92 ff ff       	call   c0008b88 <TSS::setup(unsigned long, unsigned long)>
c000f932:	89 3c 24             	mov    DWORD PTR [esp],edi
c000f935:	e8 2e 92 ff ff       	call   c0008b68 <TSS::flush()>
c000f93a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000f940:	89 04 24             	mov    DWORD PTR [esp],eax
c000f943:	e8 e2 79 ff ff       	call   c000732a <IDT::setup()>
c000f948:	b8 00 04 00 00       	mov    eax,0x400
c000f94d:	0f 23 f8             	mov    db7,eax
c000f950:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000f95a:	e8 36 81 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000f95f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000f965:	89 30                	mov    DWORD PTR [eax],esi
c000f967:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000f96d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000f970:	58                   	pop    eax
c000f971:	5a                   	pop    edx
c000f972:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000f978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f97c:	e8 f1 a1 ff ff       	call   c0009b72 <VAS::setCPUSpecific(unsigned long)>
c000f981:	c7 04 24 be e0 01 c0 	mov    DWORD PTR [esp],0xc001e0be
c000f988:	e8 c6 00 00 00       	call   c000fa53 <KeSetBootMessage(char const*)>
c000f98d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f990:	e8 33 f7 ff ff       	call   c000f0c8 <CPU::detectFeatures()>
c000f995:	c7 04 24 e1 e0 01 c0 	mov    DWORD PTR [esp],0xc001e0e1
c000f99c:	e8 b2 00 00 00       	call   c000fa53 <KeSetBootMessage(char const*)>
c000f9a1:	e8 42 58 00 00       	call   c00151e8 <HalInitialise()>
c000f9a6:	a1 50 04 02 c0       	mov    eax,ds:0xc0020450
c000f9ab:	83 e0 10             	and    eax,0x10
c000f9ae:	83 f8 01             	cmp    eax,0x1
c000f9b1:	19 c0                	sbb    eax,eax
c000f9b3:	83 e0 46             	and    eax,0x46
c000f9b6:	83 c0 1e             	add    eax,0x1e
c000f9b9:	89 04 24             	mov    DWORD PTR [esp],eax
c000f9bc:	e8 40 d7 ff ff       	call   c000d101 <setupTimer(int)>
c000f9c1:	83 c4 10             	add    esp,0x10
c000f9c4:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000f9ca:	f6 05 50 04 02 c0 20 	test   BYTE PTR ds:0xc0020450,0x20
c000f9d1:	74 0c                	je     c000f9df <CPU::open(int, int, void*)+0xe3>
c000f9d3:	83 ec 0c             	sub    esp,0xc
c000f9d6:	53                   	push   ebx
c000f9d7:	e8 54 fe ff ff       	call   c000f830 <CPU::setupFeatures()>
c000f9dc:	83 c4 10             	add    esp,0x10
c000f9df:	5b                   	pop    ebx
c000f9e0:	31 c0                	xor    eax,eax
c000f9e2:	5e                   	pop    esi
c000f9e3:	5f                   	pop    edi
c000f9e4:	c3                   	ret    

c000f9e5 <KeDisplaySplashScreen()>:
c000f9e5:	55                   	push   ebp
c000f9e6:	bd 05 00 00 00       	mov    ebp,0x5
c000f9eb:	57                   	push   edi
c000f9ec:	bf 80 f1 01 c0       	mov    edi,0xc001f180
c000f9f1:	56                   	push   esi
c000f9f2:	be 0a 00 00 00       	mov    esi,0xa
c000f9f7:	53                   	push   ebx
c000f9f8:	31 db                	xor    ebx,ebx
c000f9fa:	83 ec 0c             	sub    esp,0xc
c000f9fd:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fa00:	84 c0                	test   al,al
c000fa02:	74 47                	je     c000fa4b <KeDisplaySplashScreen()+0x66>
c000fa04:	80 bb b6 f1 01 c0 db 	cmp    BYTE PTR [ebx-0x3ffe0e4a],0xdb
c000fa0b:	75 13                	jne    c000fa20 <KeDisplaySplashScreen()+0x3b>
c000fa0d:	0f b6 93 b5 f1 01 c0 	movzx  edx,BYTE PTR [ebx-0x3ffe0e4b]
c000fa14:	83 e2 fe             	and    edx,0xfffffffe
c000fa17:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fa1d:	75 01                	jne    c000fa20 <KeDisplaySplashScreen()+0x3b>
c000fa1f:	46                   	inc    esi
c000fa20:	3c 0d                	cmp    al,0xd
c000fa22:	74 24                	je     c000fa48 <KeDisplaySplashScreen()+0x63>
c000fa24:	3c 0a                	cmp    al,0xa
c000fa26:	75 0a                	jne    c000fa32 <KeDisplaySplashScreen()+0x4d>
c000fa28:	45                   	inc    ebp
c000fa29:	be 0a 00 00 00       	mov    esi,0xa
c000fa2e:	31 db                	xor    ebx,ebx
c000fa30:	eb 16                	jmp    c000fa48 <KeDisplaySplashScreen()+0x63>
c000fa32:	83 ec 0c             	sub    esp,0xc
c000fa35:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fa38:	55                   	push   ebp
c000fa39:	43                   	inc    ebx
c000fa3a:	52                   	push   edx
c000fa3b:	6a 00                	push   0x0
c000fa3d:	6a 0e                	push   0xe
c000fa3f:	50                   	push   eax
c000fa40:	e8 07 64 00 00       	call   c0015e4c <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fa45:	83 c4 20             	add    esp,0x20
c000fa48:	47                   	inc    edi
c000fa49:	eb b2                	jmp    c000f9fd <KeDisplaySplashScreen()+0x18>
c000fa4b:	83 c4 0c             	add    esp,0xc
c000fa4e:	5b                   	pop    ebx
c000fa4f:	5e                   	pop    esi
c000fa50:	5f                   	pop    edi
c000fa51:	5d                   	pop    ebp
c000fa52:	c3                   	ret    

c000fa53 <KeSetBootMessage(char const*)>:
c000fa53:	57                   	push   edi
c000fa54:	56                   	push   esi
c000fa55:	53                   	push   ebx
c000fa56:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fa5c:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fa63:	68 9e 00 00 00       	push   0x9e
c000fa68:	6a 00                	push   0x0
c000fa6a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fa6e:	56                   	push   esi
c000fa6f:	e8 5c 0a ff ff       	call   c00004d0 <memset>
c000fa74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa77:	e8 c4 0a ff ff       	call   c0000540 <strlen>
c000fa7c:	ba 50 00 00 00       	mov    edx,0x50
c000fa81:	83 c4 10             	add    esp,0x10
c000fa84:	29 c2                	sub    edx,eax
c000fa86:	31 c9                	xor    ecx,ecx
c000fa88:	83 e2 fe             	and    edx,0xfffffffe
c000fa8b:	01 f2                	add    edx,esi
c000fa8d:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fa92:	84 c0                	test   al,al
c000fa94:	74 0a                	je     c000faa0 <KeSetBootMessage(char const*)+0x4d>
c000fa96:	80 cc 0f             	or     ah,0xf
c000fa99:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fa9d:	41                   	inc    ecx
c000fa9e:	eb ed                	jmp    c000fa8d <KeSetBootMessage(char const*)+0x3a>
c000faa0:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000faa5:	b9 9e 00 00 00       	mov    ecx,0x9e
c000faaa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000faac:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fab2:	5b                   	pop    ebx
c000fab3:	5e                   	pop    esi
c000fab4:	5f                   	pop    edi
c000fab5:	c3                   	ret    

c000fab6 <EnvVarContainer::getEnv(char const*)>:
c000fab6:	57                   	push   edi
c000fab7:	56                   	push   esi
c000fab8:	53                   	push   ebx
c000fab9:	31 db                	xor    ebx,ebx
c000fabb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fabf:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fac1:	7e 2b                	jle    c000faee <EnvVarContainer::getEnv(char const*)+0x38>
c000fac3:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000faca:	50                   	push   eax
c000facb:	50                   	push   eax
c000facc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000facf:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fad2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fad6:	e8 05 0c ff ff       	call   c00006e0 <strcmp>
c000fadb:	83 c4 10             	add    esp,0x10
c000fade:	85 c0                	test   eax,eax
c000fae0:	75 09                	jne    c000faeb <EnvVarContainer::getEnv(char const*)+0x35>
c000fae2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fae5:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fae9:	eb 05                	jmp    c000faf0 <EnvVarContainer::getEnv(char const*)+0x3a>
c000faeb:	43                   	inc    ebx
c000faec:	eb d1                	jmp    c000fabf <EnvVarContainer::getEnv(char const*)+0x9>
c000faee:	31 c0                	xor    eax,eax
c000faf0:	5b                   	pop    ebx
c000faf1:	5e                   	pop    esi
c000faf2:	5f                   	pop    edi
c000faf3:	c3                   	ret    

c000faf4 <EnvVarContainer::setEnv(char const*, char const*)>:
c000faf4:	55                   	push   ebp
c000faf5:	57                   	push   edi
c000faf6:	56                   	push   esi
c000faf7:	53                   	push   ebx
c000faf8:	83 ec 28             	sub    esp,0x28
c000fafb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000faff:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fb03:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fb07:	56                   	push   esi
c000fb08:	e8 33 0a ff ff       	call   c0000540 <strlen>
c000fb0d:	40                   	inc    eax
c000fb0e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb11:	e8 a3 7c ff ff       	call   c00077b9 <malloc>
c000fb16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fb1d:	e8 1e 0a ff ff       	call   c0000540 <strlen>
c000fb22:	40                   	inc    eax
c000fb23:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb26:	e8 8e 7c ff ff       	call   c00077b9 <malloc>
c000fb2b:	89 34 24             	mov    DWORD PTR [esp],esi
c000fb2e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fb32:	e8 09 0a ff ff       	call   c0000540 <strlen>
c000fb37:	83 c4 0c             	add    esp,0xc
c000fb3a:	40                   	inc    eax
c000fb3b:	50                   	push   eax
c000fb3c:	6a 00                	push   0x0
c000fb3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fb42:	e8 89 09 ff ff       	call   c00004d0 <memset>
c000fb47:	89 34 24             	mov    DWORD PTR [esp],esi
c000fb4a:	e8 f1 09 ff ff       	call   c0000540 <strlen>
c000fb4f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fb53:	8d 48 01             	lea    ecx,[eax+0x1]
c000fb56:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fb58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb5b:	89 de                	mov    esi,ebx
c000fb5d:	e8 de 09 ff ff       	call   c0000540 <strlen>
c000fb62:	83 c4 0c             	add    esp,0xc
c000fb65:	40                   	inc    eax
c000fb66:	50                   	push   eax
c000fb67:	6a 00                	push   0x0
c000fb69:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fb6d:	e8 5e 09 ff ff       	call   c00004d0 <memset>
c000fb72:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb75:	e8 c6 09 ff ff       	call   c0000540 <strlen>
c000fb7a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fb7e:	8d 48 01             	lea    ecx,[eax+0x1]
c000fb81:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fb83:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fb86:	40                   	inc    eax
c000fb87:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fb8a:	c1 e0 03             	shl    eax,0x3
c000fb8d:	5a                   	pop    edx
c000fb8e:	59                   	pop    ecx
c000fb8f:	50                   	push   eax
c000fb90:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fb93:	e8 0d 7c ff ff       	call   c00077a5 <realloc>
c000fb98:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fb9c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fb9f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fba2:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fba6:	b9 08 00 00 00       	mov    ecx,0x8
c000fbab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fbad:	83 c4 2c             	add    esp,0x2c
c000fbb0:	5b                   	pop    ebx
c000fbb1:	5e                   	pop    esi
c000fbb2:	5f                   	pop    edi
c000fbb3:	5d                   	pop    ebp
c000fbb4:	c3                   	ret    
c000fbb5:	90                   	nop

c000fbb6 <EnvVarContainer::deleteEnv(char const*)>:
c000fbb6:	c3                   	ret    
c000fbb7:	90                   	nop

c000fbb8 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fbb8:	55                   	push   ebp
c000fbb9:	57                   	push   edi
c000fbba:	56                   	push   esi
c000fbbb:	53                   	push   ebx
c000fbbc:	81 ec 38 01 00 00    	sub    esp,0x138
c000fbc2:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fbc9:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fbd0:	68 14 01 00 00       	push   0x114
c000fbd5:	e8 df 7b ff ff       	call   c00077b9 <malloc>
c000fbda:	83 c4 0c             	add    esp,0xc
c000fbdd:	89 c3                	mov    ebx,eax
c000fbdf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fbe2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fbe9:	50                   	push   eax
c000fbea:	e8 db ad ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c000fbef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbf2:	e8 01 b1 ff ff       	call   c000acf8 <File::exists()>
c000fbf7:	83 c4 10             	add    esp,0x10
c000fbfa:	84 c0                	test   al,al
c000fbfc:	75 31                	jne    c000fc2f <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fbfe:	50                   	push   eax
c000fbff:	50                   	push   eax
c000fc00:	6a 12                	push   0x12
c000fc02:	53                   	push   ebx
c000fc03:	e8 82 ae ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c000fc08:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fc0a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fc0d:	89 34 24             	mov    DWORD PTR [esp],esi
c000fc10:	e8 2b 09 ff ff       	call   c0000540 <strlen>
c000fc15:	5a                   	pop    edx
c000fc16:	31 d2                	xor    edx,edx
c000fc18:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fc1c:	51                   	push   ecx
c000fc1d:	56                   	push   esi
c000fc1e:	52                   	push   edx
c000fc1f:	50                   	push   eax
c000fc20:	53                   	push   ebx
c000fc21:	ff d7                	call   edi
c000fc23:	83 c4 14             	add    esp,0x14
c000fc26:	53                   	push   ebx
c000fc27:	e8 bc ae ff ff       	call   c000aae8 <File::close()>
c000fc2c:	83 c4 10             	add    esp,0x10
c000fc2f:	56                   	push   esi
c000fc30:	31 f6                	xor    esi,esi
c000fc32:	68 00 01 00 00       	push   0x100
c000fc37:	6a 00                	push   0x0
c000fc39:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fc3d:	50                   	push   eax
c000fc3e:	e8 8d 08 ff ff       	call   c00004d0 <memset>
c000fc43:	5f                   	pop    edi
c000fc44:	58                   	pop    eax
c000fc45:	6a 01                	push   0x1
c000fc47:	53                   	push   ebx
c000fc48:	e8 3d ae ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c000fc4d:	83 c4 10             	add    esp,0x10
c000fc50:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fc58:	83 ec 0c             	sub    esp,0xc
c000fc5b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fc5d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fc61:	51                   	push   ecx
c000fc62:	8d 54 24 23          	lea    edx,[esp+0x23]
c000fc66:	52                   	push   edx
c000fc67:	6a 00                	push   0x0
c000fc69:	6a 01                	push   0x1
c000fc6b:	53                   	push   ebx
c000fc6c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fc6f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000fc73:	83 c4 20             	add    esp,0x20
c000fc76:	3c 0d                	cmp    al,0xd
c000fc78:	0f 84 09 01 00 00    	je     c000fd87 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fc7e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fc83:	0f 84 ef 00 00 00    	je     c000fd78 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fc89:	3c 0a                	cmp    al,0xa
c000fc8b:	74 13                	je     c000fca0 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fc8d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fc92:	74 0c                	je     c000fca0 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fc94:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000fc9a:	0f 8e d8 00 00 00    	jle    c000fd78 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fca0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fca4:	83 ec 0c             	sub    esp,0xc
c000fca7:	8d 78 01             	lea    edi,[eax+0x1]
c000fcaa:	57                   	push   edi
c000fcab:	e8 09 7b ff ff       	call   c00077b9 <malloc>
c000fcb0:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000fcb4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fcb8:	8d 56 04             	lea    edx,[esi+0x4]
c000fcbb:	89 14 24             	mov    DWORD PTR [esp],edx
c000fcbe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fcc2:	e8 f2 7a ff ff       	call   c00077b9 <malloc>
c000fcc7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000fccb:	83 c4 0c             	add    esp,0xc
c000fcce:	57                   	push   edi
c000fccf:	6a 00                	push   0x0
c000fcd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fcd5:	e8 f6 07 ff ff       	call   c00004d0 <memset>
c000fcda:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fcde:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000fce2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000fce6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fce8:	83 c4 0c             	add    esp,0xc
c000fceb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fcef:	52                   	push   edx
c000fcf0:	6a 00                	push   0x0
c000fcf2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fcf6:	e8 d5 07 ff ff       	call   c00004d0 <memset>
c000fcfb:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fcff:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000fd03:	89 34 24             	mov    DWORD PTR [esp],esi
c000fd06:	e8 35 08 ff ff       	call   c0000540 <strlen>
c000fd0b:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000fd0f:	89 c1                	mov    ecx,eax
c000fd11:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd13:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fd16:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000fd19:	40                   	inc    eax
c000fd1a:	83 c4 10             	add    esp,0x10
c000fd1d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fd20:	85 d2                	test   edx,edx
c000fd22:	75 0c                	jne    c000fd30 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000fd24:	83 ec 0c             	sub    esp,0xc
c000fd27:	6a 08                	push   0x8
c000fd29:	e8 8b 7a ff ff       	call   c00077b9 <malloc>
c000fd2e:	eb 0c                	jmp    c000fd3c <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000fd30:	c1 e0 03             	shl    eax,0x3
c000fd33:	51                   	push   ecx
c000fd34:	51                   	push   ecx
c000fd35:	50                   	push   eax
c000fd36:	52                   	push   edx
c000fd37:	e8 69 7a ff ff       	call   c00077a5 <realloc>
c000fd3c:	83 c4 10             	add    esp,0x10
c000fd3f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fd42:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fd45:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000fd48:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fd4c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fd50:	b9 08 00 00 00       	mov    ecx,0x8
c000fd55:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd57:	31 f6                	xor    esi,esi
c000fd59:	50                   	push   eax
c000fd5a:	68 00 01 00 00       	push   0x100
c000fd5f:	6a 00                	push   0x0
c000fd61:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fd65:	50                   	push   eax
c000fd66:	e8 65 07 ff ff       	call   c00004d0 <memset>
c000fd6b:	83 c4 10             	add    esp,0x10
c000fd6e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fd76:	eb 0f                	jmp    c000fd87 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fd78:	3c 3d                	cmp    al,0x3d
c000fd7a:	74 07                	je     c000fd83 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000fd7c:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000fd80:	46                   	inc    esi
c000fd81:	eb 04                	jmp    c000fd87 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fd83:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000fd87:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fd8c:	0f 85 c6 fe ff ff    	jne    c000fc58 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000fd92:	81 c4 2c 01 00 00    	add    esp,0x12c
c000fd98:	5b                   	pop    ebx
c000fd99:	5e                   	pop    esi
c000fd9a:	5f                   	pop    edi
c000fd9b:	5d                   	pop    ebp
c000fd9c:	c3                   	ret    
c000fd9d:	90                   	nop

c000fd9e <EnvVarContainer::__loadSystem()>:
c000fd9e:	83 ec 10             	sub    esp,0x10
c000fda1:	68 e0 f2 01 c0       	push   0xc001f2e0
c000fda6:	68 24 e1 01 c0       	push   0xc001e124
c000fdab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdaf:	e8 04 fe ff ff       	call   c000fbb8 <EnvVarContainer::loadFrom(char const*, char const*)>
c000fdb4:	83 c4 1c             	add    esp,0x1c
c000fdb7:	c3                   	ret    

c000fdb8 <EnvVarContainer::__loadUser()>:
c000fdb8:	c3                   	ret    
c000fdb9:	90                   	nop

c000fdba <EnvVarContainer::EnvVarContainer(Process*)>:
c000fdba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdbe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fdc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fdcc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fdcf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdd3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fdda:	90                   	nop
c000fddb:	c3                   	ret    

c000fddc <EnvVarContainer::~EnvVarContainer()>:
c000fddc:	83 ec 0c             	sub    esp,0xc
c000fddf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fde3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fde6:	85 c0                	test   eax,eax
c000fde8:	74 1d                	je     c000fe07 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fdea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdee:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdf0:	85 c0                	test   eax,eax
c000fdf2:	74 13                	je     c000fe07 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fdf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdf8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fdfb:	83 ec 0c             	sub    esp,0xc
c000fdfe:	50                   	push   eax
c000fdff:	e8 c5 79 ff ff       	call   c00077c9 <free>
c000fe04:	83 c4 10             	add    esp,0x10
c000fe07:	90                   	nop
c000fe08:	83 c4 0c             	add    esp,0xc
c000fe0b:	c3                   	ret    

c000fe0c <Krnl::getEnv(Process*, char const*)>:
c000fe0c:	53                   	push   ebx
c000fe0d:	83 ec 08             	sub    esp,0x8
c000fe10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe14:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fe18:	39 05 10 37 02 c0    	cmp    DWORD PTR ds:0xc0023710,eax
c000fe1e:	74 04                	je     c000fe24 <Krnl::getEnv(Process*, char const*)+0x18>
c000fe20:	85 c0                	test   eax,eax
c000fe22:	75 0b                	jne    c000fe2f <Krnl::getEnv(Process*, char const*)+0x23>
c000fe24:	a1 b0 2e 02 c0       	mov    eax,ds:0xc0022eb0
c000fe29:	85 c0                	test   eax,eax
c000fe2b:	75 19                	jne    c000fe46 <Krnl::getEnv(Process*, char const*)+0x3a>
c000fe2d:	eb 27                	jmp    c000fe56 <Krnl::getEnv(Process*, char const*)+0x4a>
c000fe2f:	52                   	push   edx
c000fe30:	52                   	push   edx
c000fe31:	53                   	push   ebx
c000fe32:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000fe38:	e8 79 fc ff ff       	call   c000fab6 <EnvVarContainer::getEnv(char const*)>
c000fe3d:	83 c4 10             	add    esp,0x10
c000fe40:	85 c0                	test   eax,eax
c000fe42:	75 28                	jne    c000fe6c <Krnl::getEnv(Process*, char const*)+0x60>
c000fe44:	eb de                	jmp    c000fe24 <Krnl::getEnv(Process*, char const*)+0x18>
c000fe46:	52                   	push   edx
c000fe47:	52                   	push   edx
c000fe48:	53                   	push   ebx
c000fe49:	50                   	push   eax
c000fe4a:	e8 67 fc ff ff       	call   c000fab6 <EnvVarContainer::getEnv(char const*)>
c000fe4f:	83 c4 10             	add    esp,0x10
c000fe52:	85 c0                	test   eax,eax
c000fe54:	75 16                	jne    c000fe6c <Krnl::getEnv(Process*, char const*)+0x60>
c000fe56:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000fe5a:	a1 b4 2e 02 c0       	mov    eax,ds:0xc0022eb4
c000fe5f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fe63:	83 c4 08             	add    esp,0x8
c000fe66:	5b                   	pop    ebx
c000fe67:	e9 4a fc ff ff       	jmp    c000fab6 <EnvVarContainer::getEnv(char const*)>
c000fe6c:	83 c4 08             	add    esp,0x8
c000fe6f:	5b                   	pop    ebx
c000fe70:	c3                   	ret    

c000fe71 <Krnl::setEnvSystem(char const*, char const*)>:
c000fe71:	83 ec 10             	sub    esp,0x10
c000fe74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fe78:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fe7c:	ff 35 b4 2e 02 c0    	push   DWORD PTR ds:0xc0022eb4
c000fe82:	e8 6d fc ff ff       	call   c000faf4 <EnvVarContainer::setEnv(char const*, char const*)>
c000fe87:	83 c4 1c             	add    esp,0x1c
c000fe8a:	c3                   	ret    

c000fe8b <Krnl::setEnvUser(char const*, char const*)>:
c000fe8b:	a1 b0 2e 02 c0       	mov    eax,ds:0xc0022eb0
c000fe90:	85 c0                	test   eax,eax
c000fe92:	74 15                	je     c000fea9 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c000fe94:	83 ec 10             	sub    esp,0x10
c000fe97:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fe9b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fe9f:	50                   	push   eax
c000fea0:	e8 4f fc ff ff       	call   c000faf4 <EnvVarContainer::setEnv(char const*, char const*)>
c000fea5:	83 c4 1c             	add    esp,0x1c
c000fea8:	c3                   	ret    
c000fea9:	c3                   	ret    

c000feaa <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c000feaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000feae:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000feb4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000feb8:	e9 37 fc ff ff       	jmp    c000faf4 <EnvVarContainer::setEnv(char const*, char const*)>

c000febd <Krnl::deleteEnvSystem(char const*)>:
c000febd:	c3                   	ret    

c000febe <Krnl::deleteEnvUser(char const*)>:
c000febe:	c3                   	ret    

c000febf <Krnl::deleteEnvProcess(Process*, char const*)>:
c000febf:	c3                   	ret    

c000fec0 <Krnl::newProcessEnv(Process*)>:
c000fec0:	83 ec 28             	sub    esp,0x28
c000fec3:	6a 0c                	push   0xc
c000fec5:	e8 ef 78 ff ff       	call   c00077b9 <malloc>
c000feca:	5a                   	pop    edx
c000fecb:	59                   	pop    ecx
c000fecc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fed0:	50                   	push   eax
c000fed1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fed5:	e8 e0 fe ff ff       	call   c000fdba <EnvVarContainer::EnvVarContainer(Process*)>
c000feda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fede:	83 c4 2c             	add    esp,0x2c
c000fee1:	c3                   	ret    

c000fee2 <Krnl::copyProcessEnv(Process*, Process*)>:
c000fee2:	57                   	push   edi
c000fee3:	56                   	push   esi
c000fee4:	53                   	push   ebx
c000fee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fee9:	83 ec 0c             	sub    esp,0xc
c000feec:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000fef2:	6a 0c                	push   0xc
c000fef4:	e8 c0 78 ff ff       	call   c00077b9 <malloc>
c000fef9:	89 c3                	mov    ebx,eax
c000fefb:	58                   	pop    eax
c000fefc:	5a                   	pop    edx
c000fefd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff01:	53                   	push   ebx
c000ff02:	e8 b3 fe ff ff       	call   c000fdba <EnvVarContainer::EnvVarContainer(Process*)>
c000ff07:	8b 07                	mov    eax,DWORD PTR [edi]
c000ff09:	89 03                	mov    DWORD PTR [ebx],eax
c000ff0b:	c1 e0 03             	shl    eax,0x3
c000ff0e:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff11:	e8 a3 78 ff ff       	call   c00077b9 <malloc>
c000ff16:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ff19:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ff1b:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000ff1e:	c1 e1 03             	shl    ecx,0x3
c000ff21:	89 c7                	mov    edi,eax
c000ff23:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff25:	83 c4 10             	add    esp,0x10
c000ff28:	89 d8                	mov    eax,ebx
c000ff2a:	5b                   	pop    ebx
c000ff2b:	5e                   	pop    esi
c000ff2c:	5f                   	pop    edi
c000ff2d:	c3                   	ret    

c000ff2e <Krnl::loadSystemEnv()>:
c000ff2e:	53                   	push   ebx
c000ff2f:	83 ec 14             	sub    esp,0x14
c000ff32:	6a 0c                	push   0xc
c000ff34:	e8 80 78 ff ff       	call   c00077b9 <malloc>
c000ff39:	89 c3                	mov    ebx,eax
c000ff3b:	58                   	pop    eax
c000ff3c:	5a                   	pop    edx
c000ff3d:	ff 35 10 37 02 c0    	push   DWORD PTR ds:0xc0023710
c000ff43:	53                   	push   ebx
c000ff44:	e8 71 fe ff ff       	call   c000fdba <EnvVarContainer::EnvVarContainer(Process*)>
c000ff49:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff4c:	89 1d b4 2e 02 c0    	mov    DWORD PTR ds:0xc0022eb4,ebx
c000ff52:	e8 47 fe ff ff       	call   c000fd9e <EnvVarContainer::__loadSystem()>
c000ff57:	83 c4 18             	add    esp,0x18
c000ff5a:	5b                   	pop    ebx
c000ff5b:	c3                   	ret    

c000ff5c <Krnl::loadUserEnv()>:
c000ff5c:	53                   	push   ebx
c000ff5d:	83 ec 14             	sub    esp,0x14
c000ff60:	6a 0c                	push   0xc
c000ff62:	e8 52 78 ff ff       	call   c00077b9 <malloc>
c000ff67:	89 c3                	mov    ebx,eax
c000ff69:	58                   	pop    eax
c000ff6a:	5a                   	pop    edx
c000ff6b:	ff 35 10 37 02 c0    	push   DWORD PTR ds:0xc0023710
c000ff71:	53                   	push   ebx
c000ff72:	e8 43 fe ff ff       	call   c000fdba <EnvVarContainer::EnvVarContainer(Process*)>
c000ff77:	89 1d b0 2e 02 c0    	mov    DWORD PTR ds:0xc0022eb0,ebx
c000ff7d:	83 c4 18             	add    esp,0x18
c000ff80:	5b                   	pop    ebx
c000ff81:	c3                   	ret    

c000ff82 <Krnl::flushEnv()>:
c000ff82:	c3                   	ret    

c000ff83 <Krnl::getProcessTotalEnvCount(Process*)>:
c000ff83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff87:	8b 15 b0 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022eb0
c000ff8d:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000ff93:	a1 b4 2e 02 c0       	mov    eax,ds:0xc0022eb4
c000ff98:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff9a:	03 01                	add    eax,DWORD PTR [ecx]
c000ff9c:	85 d2                	test   edx,edx
c000ff9e:	74 02                	je     c000ffa2 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c000ffa0:	03 02                	add    eax,DWORD PTR [edx]
c000ffa2:	c3                   	ret    

c000ffa3 <Krnl::getProcessEnvPair(Process*, int)>:
c000ffa3:	57                   	push   edi
c000ffa4:	56                   	push   esi
c000ffa5:	8b 35 b0 2e 02 c0    	mov    esi,DWORD PTR ds:0xc0022eb0
c000ffab:	53                   	push   ebx
c000ffac:	85 f6                	test   esi,esi
c000ffae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffb2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ffb6:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000ffbc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ffc0:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ffc2:	75 16                	jne    c000ffda <Krnl::getProcessEnvPair(Process*, int)+0x37>
c000ffc4:	39 c2                	cmp    edx,eax
c000ffc6:	7c 16                	jl     c000ffde <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c000ffc8:	8b 0d b4 2e 02 c0    	mov    ecx,DWORD PTR ds:0xc0022eb4
c000ffce:	8b 31                	mov    esi,DWORD PTR [ecx]
c000ffd0:	01 c6                	add    esi,eax
c000ffd2:	39 d6                	cmp    esi,edx
c000ffd4:	7e 3c                	jle    c0010012 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c000ffd6:	29 c2                	sub    edx,eax
c000ffd8:	eb 04                	jmp    c000ffde <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c000ffda:	39 c2                	cmp    edx,eax
c000ffdc:	7d 05                	jge    c000ffe3 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c000ffde:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000ffe1:	eb 20                	jmp    c0010003 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c000ffe3:	8b 3e                	mov    edi,DWORD PTR [esi]
c000ffe5:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000ffe8:	39 d1                	cmp    ecx,edx
c000ffea:	7e 04                	jle    c000fff0 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c000ffec:	29 c2                	sub    edx,eax
c000ffee:	eb 10                	jmp    c0010000 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c000fff0:	8b 35 b4 2e 02 c0    	mov    esi,DWORD PTR ds:0xc0022eb4
c000fff6:	03 0e                	add    ecx,DWORD PTR [esi]
c000fff8:	39 d1                	cmp    ecx,edx
c000fffa:	7e 16                	jle    c0010012 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c000fffc:	29 c2                	sub    edx,eax
c000fffe:	29 fa                	sub    edx,edi
c0010000:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010003:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010006:	8b 02                	mov    eax,DWORD PTR [edx]
c0010008:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001000b:	89 03                	mov    DWORD PTR [ebx],eax
c001000d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010010:	eb 1d                	jmp    c001002f <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0010012:	83 ec 0c             	sub    esp,0xc
c0010015:	68 46 e1 01 c0       	push   0xc001e146
c001001a:	e8 ac 00 00 00       	call   c00100cb <KePanic(char const*)>
c001001f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010025:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001002c:	83 c4 10             	add    esp,0x10
c001002f:	89 d8                	mov    eax,ebx
c0010031:	5b                   	pop    ebx
c0010032:	5e                   	pop    esi
c0010033:	5f                   	pop    edi
c0010034:	c2 04 00             	ret    0x4

c0010037 <CPU::current()>:
c0010037:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c001003c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010042:	c3                   	ret    

c0010043 <operator new(unsigned long)>:
c0010043:	e9 71 77 ff ff       	jmp    c00077b9 <malloc>

c0010048 <operator delete(void*)>:
c0010048:	e9 8c 77 ff ff       	jmp    c00077d9 <rfree>

c001004d <disableIRQs()>:
c001004d:	fa                   	cli    
c001004e:	c3                   	ret    

c001004f <enableIRQs()>:
c001004f:	fb                   	sti    
c0010050:	c3                   	ret    

c0010051 <lockScheduler()>:
c0010051:	fa                   	cli    
c0010052:	ff 05 e8 36 02 c0    	inc    DWORD PTR ds:0xc00236e8
c0010058:	c3                   	ret    

c0010059 <unlockScheduler()>:
c0010059:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c001005e:	48                   	dec    eax
c001005f:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c0010064:	75 01                	jne    c0010067 <unlockScheduler()+0xe>
c0010066:	fb                   	sti    
c0010067:	c3                   	ret    

c0010068 <lockStuff()>:
c0010068:	fa                   	cli    
c0010069:	ff 05 e8 36 02 c0    	inc    DWORD PTR ds:0xc00236e8
c001006f:	ff 05 e4 36 02 c0    	inc    DWORD PTR ds:0xc00236e4
c0010075:	c3                   	ret    

c0010076 <unlockStuff()>:
c0010076:	83 ec 0c             	sub    esp,0xc
c0010079:	a1 e4 36 02 c0       	mov    eax,ds:0xc00236e4
c001007e:	48                   	dec    eax
c001007f:	a3 e4 36 02 c0       	mov    ds:0xc00236e4,eax
c0010084:	75 18                	jne    c001009e <unlockStuff()+0x28>
c0010086:	83 3d e0 36 02 c0 00 	cmp    DWORD PTR ds:0xc00236e0,0x0
c001008d:	74 0f                	je     c001009e <unlockStuff()+0x28>
c001008f:	c7 05 e0 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00236e0,0x0
c0010099:	e8 3e 32 00 00       	call   c00132dc <schedule()>
c001009e:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c00100a3:	48                   	dec    eax
c00100a4:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c00100a9:	75 01                	jne    c00100ac <unlockStuff()+0x36>
c00100ab:	fb                   	sti    
c00100ac:	83 c4 0c             	add    esp,0xc
c00100af:	c3                   	ret    

c00100b0 <Virt::getAKernelVAS()>:
c00100b0:	a1 30 05 02 c0       	mov    eax,ds:0xc0020530
c00100b5:	c3                   	ret    

c00100b6 <__not_memcpy>:
c00100b6:	57                   	push   edi
c00100b7:	56                   	push   esi
c00100b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100bc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00100c0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00100c4:	89 c7                	mov    edi,eax
c00100c6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00100c8:	5e                   	pop    esi
c00100c9:	5f                   	pop    edi
c00100ca:	c3                   	ret    

c00100cb <KePanic(char const*)>:
c00100cb:	c6 05 b8 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022eb8,0x1
c00100d2:	e9 fd 4f 00 00       	jmp    c00150d4 <HalPanic(char const*)>

c00100d7 <Krnl::powerThread(void*)>:
c00100d7:	83 ec 0c             	sub    esp,0xc
c00100da:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c00100df:	48                   	dec    eax
c00100e0:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c00100e5:	75 01                	jne    c00100e8 <Krnl::powerThread(void*)+0x11>
c00100e7:	fb                   	sti    
c00100e8:	83 ec 0c             	sub    esp,0xc
c00100eb:	c6 05 c0 2e 02 c0 00 	mov    BYTE PTR ds:0xc0022ec0,0x0
c00100f2:	6a 0a                	push   0xa
c00100f4:	e8 f3 34 00 00       	call   c00135ec <sleep(unsigned int)>
c00100f9:	83 05 04 2f 02 c0 0a 	add    DWORD PTR ds:0xc0022f04,0xa
c0010100:	83 c4 10             	add    esp,0x10
c0010103:	eb e3                	jmp    c00100e8 <Krnl::powerThread(void*)+0x11>

c0010105 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010105:	57                   	push   edi
c0010106:	b9 09 00 00 00       	mov    ecx,0x9
c001010b:	56                   	push   esi
c001010c:	bf e0 2e 02 c0       	mov    edi,0xc0022ee0
c0010111:	fc                   	cld    
c0010112:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010116:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010118:	5e                   	pop    esi
c0010119:	5f                   	pop    edi
c001011a:	c3                   	ret    

c001011b <Krnl::userIOReceived()>:
c001011b:	c7 05 04 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f04,0x0
c0010125:	c3                   	ret    

c0010126 <Krnl::handlePowerButton()>:
c0010126:	83 ec 0c             	sub    esp,0xc
c0010129:	a1 e0 2e 02 c0       	mov    eax,ds:0xc0022ee0
c001012e:	83 f8 02             	cmp    eax,0x2
c0010131:	75 10                	jne    c0010143 <Krnl::handlePowerButton()+0x1d>
c0010133:	83 ec 0c             	sub    esp,0xc
c0010136:	ff 35 38 04 02 c0    	push   DWORD PTR ds:0xc0020438
c001013c:	e8 15 6d ff ff       	call   c0006e56 <Computer::shutdown()>
c0010141:	eb 11                	jmp    c0010154 <Krnl::handlePowerButton()+0x2e>
c0010143:	48                   	dec    eax
c0010144:	75 11                	jne    c0010157 <Krnl::handlePowerButton()+0x31>
c0010146:	83 ec 0c             	sub    esp,0xc
c0010149:	ff 35 38 04 02 c0    	push   DWORD PTR ds:0xc0020438
c001014f:	e8 32 6d ff ff       	call   c0006e86 <Computer::sleep()>
c0010154:	83 c4 10             	add    esp,0x10
c0010157:	83 c4 0c             	add    esp,0xc
c001015a:	c3                   	ret    

c001015b <Krnl::handleSleepButton()>:
c001015b:	83 ec 0c             	sub    esp,0xc
c001015e:	a1 e4 2e 02 c0       	mov    eax,ds:0xc0022ee4
c0010163:	83 f8 02             	cmp    eax,0x2
c0010166:	75 10                	jne    c0010178 <Krnl::handleSleepButton()+0x1d>
c0010168:	83 ec 0c             	sub    esp,0xc
c001016b:	ff 35 38 04 02 c0    	push   DWORD PTR ds:0xc0020438
c0010171:	e8 e0 6c ff ff       	call   c0006e56 <Computer::shutdown()>
c0010176:	eb 11                	jmp    c0010189 <Krnl::handleSleepButton()+0x2e>
c0010178:	48                   	dec    eax
c0010179:	75 11                	jne    c001018c <Krnl::handleSleepButton()+0x31>
c001017b:	83 ec 0c             	sub    esp,0xc
c001017e:	ff 35 38 04 02 c0    	push   DWORD PTR ds:0xc0020438
c0010184:	e8 fd 6c ff ff       	call   c0006e86 <Computer::sleep()>
c0010189:	83 c4 10             	add    esp,0x10
c001018c:	83 c4 0c             	add    esp,0xc
c001018f:	c3                   	ret    

c0010190 <Krnl::setupPowerManager()>:
c0010190:	83 ec 0c             	sub    esp,0xc
c0010193:	c7 05 04 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f04,0x0
c001019d:	68 f0 00 00 00       	push   0xf0
c00101a2:	c6 05 c0 2e 02 c0 00 	mov    BYTE PTR ds:0xc0022ec0,0x0
c00101a9:	6a 00                	push   0x0
c00101ab:	68 d7 00 01 c0       	push   0xc00100d7
c00101b0:	ff 35 10 37 02 c0    	push   DWORD PTR ds:0xc0023710
c00101b6:	e8 01 2f 00 00       	call   c00130bc <Process::createThread(void (*)(void*), void*, int)>
c00101bb:	c7 05 e0 2e 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0022ee0,0x2
c00101c5:	c7 05 e4 2e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0022ee4,0x1
c00101cf:	c7 05 e8 2e 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0022ee8,0x3
c00101d9:	c7 05 ec 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022eec,0x0
c00101e3:	c7 05 f8 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ef8,0x0
c00101ed:	c7 05 f0 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ef0,0x0
c00101f7:	c7 05 fc 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022efc,0x0
c0010201:	c7 05 f4 2e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0022ef4,0x3c
c001020b:	c7 05 00 2f 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0022f00,0x3c
c0010215:	83 c4 1c             	add    esp,0x1c
c0010218:	c3                   	ret    
c0010219:	66 90                	xchg   ax,ax
c001021b:	90                   	nop

c001021c <KeResolveCompatibilitySymbol(char*)>:
c001021c:	83 ec 0c             	sub    esp,0xc
c001021f:	83 ec 08             	sub    esp,0x8
c0010222:	68 60 e1 01 c0       	push   0xc001e160
c0010227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001022b:	e8 b0 04 ff ff       	call   c00006e0 <strcmp>
c0010230:	83 c4 10             	add    esp,0x10
c0010233:	85 c0                	test   eax,eax
c0010235:	0f 94 c0             	sete   al
c0010238:	84 c0                	test   al,al
c001023a:	74 0c                	je     c0010248 <KeResolveCompatibilitySymbol(char*)+0x2c>
c001023c:	b8 38 04 02 c0       	mov    eax,0xc0020438
c0010241:	e9 62 01 00 00       	jmp    c00103a8 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010246:	66 90                	xchg   ax,ax
c0010248:	83 ec 08             	sub    esp,0x8
c001024b:	68 69 e1 01 c0       	push   0xc001e169
c0010250:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010254:	e8 87 04 ff ff       	call   c00006e0 <strcmp>
c0010259:	83 c4 10             	add    esp,0x10
c001025c:	85 c0                	test   eax,eax
c001025e:	0f 94 c0             	sete   al
c0010261:	84 c0                	test   al,al
c0010263:	74 0b                	je     c0010270 <KeResolveCompatibilitySymbol(char*)+0x54>
c0010265:	b8 e0 bb 01 c0       	mov    eax,0xc001bbe0
c001026a:	e9 39 01 00 00       	jmp    c00103a8 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001026f:	90                   	nop
c0010270:	83 ec 08             	sub    esp,0x8
c0010273:	68 73 e1 01 c0       	push   0xc001e173
c0010278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001027c:	e8 5f 04 ff ff       	call   c00006e0 <strcmp>
c0010281:	83 c4 10             	add    esp,0x10
c0010284:	85 c0                	test   eax,eax
c0010286:	0f 94 c0             	sete   al
c0010289:	84 c0                	test   al,al
c001028b:	74 0b                	je     c0010298 <KeResolveCompatibilitySymbol(char*)+0x7c>
c001028d:	b8 14 b9 01 c0       	mov    eax,0xc001b914
c0010292:	e9 11 01 00 00       	jmp    c00103a8 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010297:	90                   	nop
c0010298:	83 ec 08             	sub    esp,0x8
c001029b:	68 7c e1 01 c0       	push   0xc001e17c
c00102a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102a4:	e8 37 04 ff ff       	call   c00006e0 <strcmp>
c00102a9:	83 c4 10             	add    esp,0x10
c00102ac:	85 c0                	test   eax,eax
c00102ae:	0f 94 c0             	sete   al
c00102b1:	84 c0                	test   al,al
c00102b3:	74 0b                	je     c00102c0 <KeResolveCompatibilitySymbol(char*)+0xa4>
c00102b5:	b8 cb 00 01 c0       	mov    eax,0xc00100cb
c00102ba:	e9 e9 00 00 00       	jmp    c00103a8 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00102bf:	90                   	nop
c00102c0:	83 ec 08             	sub    esp,0x8
c00102c3:	68 8f e1 01 c0       	push   0xc001e18f
c00102c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102cc:	e8 0f 04 ff ff       	call   c00006e0 <strcmp>
c00102d1:	83 c4 10             	add    esp,0x10
c00102d4:	85 c0                	test   eax,eax
c00102d6:	0f 94 c0             	sete   al
c00102d9:	84 c0                	test   al,al
c00102db:	74 0b                	je     c00102e8 <KeResolveCompatibilitySymbol(char*)+0xcc>
c00102dd:	b8 53 fa 00 c0       	mov    eax,0xc000fa53
c00102e2:	e9 c1 00 00 00       	jmp    c00103a8 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00102e7:	90                   	nop
c00102e8:	83 ec 08             	sub    esp,0x8
c00102eb:	68 ac e1 01 c0       	push   0xc001e1ac
c00102f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102f4:	e8 e7 03 ff ff       	call   c00006e0 <strcmp>
c00102f9:	83 c4 10             	add    esp,0x10
c00102fc:	85 c0                	test   eax,eax
c00102fe:	0f 94 c0             	sete   al
c0010301:	84 c0                	test   al,al
c0010303:	74 0b                	je     c0010310 <KeResolveCompatibilitySymbol(char*)+0xf4>
c0010305:	b8 e0 bc 01 c0       	mov    eax,0xc001bce0
c001030a:	e9 99 00 00 00       	jmp    c00103a8 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001030f:	90                   	nop
c0010310:	83 ec 08             	sub    esp,0x8
c0010313:	68 b6 e1 01 c0       	push   0xc001e1b6
c0010318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001031c:	e8 bf 03 ff ff       	call   c00006e0 <strcmp>
c0010321:	83 c4 10             	add    esp,0x10
c0010324:	85 c0                	test   eax,eax
c0010326:	0f 94 c0             	sete   al
c0010329:	84 c0                	test   al,al
c001032b:	74 07                	je     c0010334 <KeResolveCompatibilitySymbol(char*)+0x118>
c001032d:	b8 60 ba 01 c0       	mov    eax,0xc001ba60
c0010332:	eb 74                	jmp    c00103a8 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010334:	83 ec 08             	sub    esp,0x8
c0010337:	68 bf e1 01 c0       	push   0xc001e1bf
c001033c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010340:	e8 9b 03 ff ff       	call   c00006e0 <strcmp>
c0010345:	83 c4 10             	add    esp,0x10
c0010348:	85 c0                	test   eax,eax
c001034a:	0f 94 c0             	sete   al
c001034d:	84 c0                	test   al,al
c001034f:	74 07                	je     c0010358 <KeResolveCompatibilitySymbol(char*)+0x13c>
c0010351:	b8 3c 04 02 c0       	mov    eax,0xc002043c
c0010356:	eb 50                	jmp    c00103a8 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010358:	83 ec 08             	sub    esp,0x8
c001035b:	68 d7 e1 01 c0       	push   0xc001e1d7
c0010360:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010364:	e8 77 03 ff ff       	call   c00006e0 <strcmp>
c0010369:	83 c4 10             	add    esp,0x10
c001036c:	85 c0                	test   eax,eax
c001036e:	0f 94 c0             	sete   al
c0010371:	84 c0                	test   al,al
c0010373:	74 07                	je     c001037c <KeResolveCompatibilitySymbol(char*)+0x160>
c0010375:	b8 3c 04 02 c0       	mov    eax,0xc002043c
c001037a:	eb 2c                	jmp    c00103a8 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001037c:	83 ec 08             	sub    esp,0x8
c001037f:	68 e4 e1 01 c0       	push   0xc001e1e4
c0010384:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010388:	e8 53 03 ff ff       	call   c00006e0 <strcmp>
c001038d:	83 c4 10             	add    esp,0x10
c0010390:	85 c0                	test   eax,eax
c0010392:	0f 94 c0             	sete   al
c0010395:	84 c0                	test   al,al
c0010397:	74 07                	je     c00103a0 <KeResolveCompatibilitySymbol(char*)+0x184>
c0010399:	b8 3d 04 02 c0       	mov    eax,0xc002043d
c001039e:	eb 08                	jmp    c00103a8 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103a0:	b8 00 00 00 00       	mov    eax,0x0
c00103a5:	8d 76 00             	lea    esi,[esi+0x0]
c00103a8:	83 c4 0c             	add    esp,0xc
c00103ab:	c3                   	ret    

c00103ac <SysSeekDir(regs*)>:
c00103ac:	31 c0                	xor    eax,eax
c00103ae:	31 d2                	xor    edx,edx
c00103b0:	c3                   	ret    

c00103b1 <SysTellDir(regs*)>:
c00103b1:	31 c0                	xor    eax,eax
c00103b3:	31 d2                	xor    edx,edx
c00103b5:	c3                   	ret    

c00103b6 <SysVerify(regs*)>:
c00103b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103ba:	31 d2                	xor    edx,edx
c00103bc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00103bf:	c3                   	ret    

c00103c0 <SysGetArgc(regs*)>:
c00103c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00103c5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00103c8:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00103ce:	99                   	cdq    
c00103cf:	c3                   	ret    

c00103d0 <SysTTYName(regs*)>:
c00103d0:	b8 01 00 00 00       	mov    eax,0x1
c00103d5:	31 d2                	xor    edx,edx
c00103d7:	c3                   	ret    

c00103d8 <SysFormatDisk(regs*)>:
c00103d8:	56                   	push   esi
c00103d9:	53                   	push   ebx
c00103da:	50                   	push   eax
c00103db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00103df:	8b 1d 34 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020534
c00103e5:	eb 28                	jmp    c001040f <SysFormatDisk(regs*)+0x37>
c00103e7:	83 ec 0c             	sub    esp,0xc
c00103ea:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00103ed:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00103f0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00103f2:	51                   	push   ecx
c00103f3:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00103f6:	51                   	push   ecx
c00103f7:	50                   	push   eax
c00103f8:	8b 04 85 a0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd660]
c00103ff:	50                   	push   eax
c0010400:	53                   	push   ebx
c0010401:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010404:	83 c4 20             	add    esp,0x20
c0010407:	83 f8 08             	cmp    eax,0x8
c001040a:	75 12                	jne    c001041e <SysFormatDisk(regs*)+0x46>
c001040c:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001040f:	85 db                	test   ebx,ebx
c0010411:	75 d4                	jne    c00103e7 <SysFormatDisk(regs*)+0xf>
c0010413:	59                   	pop    ecx
c0010414:	b8 03 00 00 00       	mov    eax,0x3
c0010419:	31 d2                	xor    edx,edx
c001041b:	5b                   	pop    ebx
c001041c:	5e                   	pop    esi
c001041d:	c3                   	ret    
c001041e:	85 c0                	test   eax,eax
c0010420:	74 1b                	je     c001043d <SysFormatDisk(regs*)+0x65>
c0010422:	83 f8 09             	cmp    eax,0x9
c0010425:	74 0b                	je     c0010432 <SysFormatDisk(regs*)+0x5a>
c0010427:	59                   	pop    ecx
c0010428:	b8 02 00 00 00       	mov    eax,0x2
c001042d:	31 d2                	xor    edx,edx
c001042f:	5b                   	pop    ebx
c0010430:	5e                   	pop    esi
c0010431:	c3                   	ret    
c0010432:	59                   	pop    ecx
c0010433:	b8 01 00 00 00       	mov    eax,0x1
c0010438:	31 d2                	xor    edx,edx
c001043a:	5b                   	pop    ebx
c001043b:	5e                   	pop    esi
c001043c:	c3                   	ret    
c001043d:	59                   	pop    ecx
c001043e:	31 c0                	xor    eax,eax
c0010440:	31 d2                	xor    edx,edx
c0010442:	5b                   	pop    ebx
c0010443:	5e                   	pop    esi
c0010444:	c3                   	ret    

c0010445 <SysSetDiskVolumeLabel(regs*)>:
c0010445:	56                   	push   esi
c0010446:	53                   	push   ebx
c0010447:	53                   	push   ebx
c0010448:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001044c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001044f:	83 f8 19             	cmp    eax,0x19
c0010452:	77 2d                	ja     c0010481 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010454:	8b 0c 85 a0 29 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd660]
c001045b:	85 c9                	test   ecx,ecx
c001045d:	74 22                	je     c0010481 <SysSetDiskVolumeLabel(regs*)+0x3c>
c001045f:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010462:	85 db                	test   ebx,ebx
c0010464:	74 1b                	je     c0010481 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010466:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c001046c:	85 d2                	test   edx,edx
c001046e:	74 11                	je     c0010481 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010470:	8b 32                	mov    esi,DWORD PTR [edx]
c0010472:	53                   	push   ebx
c0010473:	50                   	push   eax
c0010474:	51                   	push   ecx
c0010475:	52                   	push   edx
c0010476:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010479:	83 c4 10             	add    esp,0x10
c001047c:	99                   	cdq    
c001047d:	59                   	pop    ecx
c001047e:	5b                   	pop    ebx
c001047f:	5e                   	pop    esi
c0010480:	c3                   	ret    
c0010481:	59                   	pop    ecx
c0010482:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010487:	ba ff ff ff ff       	mov    edx,0xffffffff
c001048c:	5b                   	pop    ebx
c001048d:	5e                   	pop    esi
c001048e:	c3                   	ret    

c001048f <SysGetDiskVolumeLabel(regs*)>:
c001048f:	57                   	push   edi
c0010490:	56                   	push   esi
c0010491:	53                   	push   ebx
c0010492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010496:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010499:	83 fa 19             	cmp    edx,0x19
c001049c:	77 38                	ja     c00104d6 <SysGetDiskVolumeLabel(regs*)+0x47>
c001049e:	8b 0c 95 a0 29 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdd660]
c00104a5:	85 c9                	test   ecx,ecx
c00104a7:	74 2d                	je     c00104d6 <SysGetDiskVolumeLabel(regs*)+0x47>
c00104a9:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00104ac:	85 db                	test   ebx,ebx
c00104ae:	74 26                	je     c00104d6 <SysGetDiskVolumeLabel(regs*)+0x47>
c00104b0:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00104b3:	85 f6                	test   esi,esi
c00104b5:	74 1f                	je     c00104d6 <SysGetDiskVolumeLabel(regs*)+0x47>
c00104b7:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00104bd:	85 c0                	test   eax,eax
c00104bf:	74 15                	je     c00104d6 <SysGetDiskVolumeLabel(regs*)+0x47>
c00104c1:	83 ec 0c             	sub    esp,0xc
c00104c4:	8b 38                	mov    edi,DWORD PTR [eax]
c00104c6:	56                   	push   esi
c00104c7:	53                   	push   ebx
c00104c8:	52                   	push   edx
c00104c9:	51                   	push   ecx
c00104ca:	50                   	push   eax
c00104cb:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00104ce:	83 c4 20             	add    esp,0x20
c00104d1:	99                   	cdq    
c00104d2:	5b                   	pop    ebx
c00104d3:	5e                   	pop    esi
c00104d4:	5f                   	pop    edi
c00104d5:	c3                   	ret    
c00104d6:	5b                   	pop    ebx
c00104d7:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00104dc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00104e1:	5e                   	pop    esi
c00104e2:	5f                   	pop    edi
c00104e3:	c3                   	ret    

c00104e4 <SysShutdown(regs*)>:
c00104e4:	83 ec 0c             	sub    esp,0xc
c00104e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104eb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00104ee:	85 c0                	test   eax,eax
c00104f0:	74 18                	je     c001050a <SysShutdown(regs*)+0x26>
c00104f2:	83 f8 01             	cmp    eax,0x1
c00104f5:	74 38                	je     c001052f <SysShutdown(regs*)+0x4b>
c00104f7:	83 f8 02             	cmp    eax,0x2
c00104fa:	74 24                	je     c0010520 <SysShutdown(regs*)+0x3c>
c00104fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010501:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010506:	83 c4 0c             	add    esp,0xc
c0010509:	c3                   	ret    
c001050a:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c001050f:	8b 10                	mov    edx,DWORD PTR [eax]
c0010511:	6a 00                	push   0x0
c0010513:	6a 00                	push   0x0
c0010515:	6a 00                	push   0x0
c0010517:	50                   	push   eax
c0010518:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001051b:	83 c4 10             	add    esp,0x10
c001051e:	eb dc                	jmp    c00104fc <SysShutdown(regs*)+0x18>
c0010520:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c0010525:	8b 10                	mov    edx,DWORD PTR [eax]
c0010527:	6a 00                	push   0x0
c0010529:	6a 00                	push   0x0
c001052b:	6a 01                	push   0x1
c001052d:	eb e8                	jmp    c0010517 <SysShutdown(regs*)+0x33>
c001052f:	a1 20 2a 02 c0       	mov    eax,ds:0xc0022a20
c0010534:	85 c0                	test   eax,eax
c0010536:	74 02                	je     c001053a <SysShutdown(regs*)+0x56>
c0010538:	ff d0                	call   eax
c001053a:	31 c0                	xor    eax,eax
c001053c:	31 d2                	xor    edx,edx
c001053e:	83 c4 0c             	add    esp,0xc
c0010541:	c3                   	ret    

c0010542 <SysRealpath(regs*)>:
c0010542:	83 ec 0c             	sub    esp,0xc
c0010545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010549:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001054c:	85 d2                	test   edx,edx
c001054e:	74 07                	je     c0010557 <SysRealpath(regs*)+0x15>
c0010550:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010553:	85 c0                	test   eax,eax
c0010555:	75 0b                	jne    c0010562 <SysRealpath(regs*)+0x20>
c0010557:	b8 01 00 00 00       	mov    eax,0x1
c001055c:	31 d2                	xor    edx,edx
c001055e:	83 c4 0c             	add    esp,0xc
c0010561:	c3                   	ret    
c0010562:	51                   	push   ecx
c0010563:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010569:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001056c:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0010572:	51                   	push   ecx
c0010573:	52                   	push   edx
c0010574:	50                   	push   eax
c0010575:	e8 a6 a2 ff ff       	call   c000a820 <Fs::standardiseFiles(char*, char const*, char const*)>
c001057a:	83 c4 10             	add    esp,0x10
c001057d:	31 c0                	xor    eax,eax
c001057f:	31 d2                	xor    edx,edx
c0010581:	83 c4 0c             	add    esp,0xc
c0010584:	c3                   	ret    

c0010585 <SysReadDir(regs*)>:
c0010585:	53                   	push   ebx
c0010586:	83 ec 18             	sub    esp,0x18
c0010589:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001058d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010590:	83 f8 02             	cmp    eax,0x2
c0010593:	76 61                	jbe    c00105f6 <SysReadDir(regs*)+0x71>
c0010595:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001059c:	77 49                	ja     c00105e7 <SysReadDir(regs*)+0x62>
c001059e:	83 ec 0c             	sub    esp,0xc
c00105a1:	50                   	push   eax
c00105a2:	e8 04 8b ff ff       	call   c00090ab <getFromFileDescriptor(int)>
c00105a7:	83 c4 10             	add    esp,0x10
c00105aa:	85 c0                	test   eax,eax
c00105ac:	74 39                	je     c00105e7 <SysReadDir(regs*)+0x62>
c00105ae:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00105b6:	83 ec 0c             	sub    esp,0xc
c00105b9:	8b 10                	mov    edx,DWORD PTR [eax]
c00105bb:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00105bf:	51                   	push   ecx
c00105c0:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00105c3:	51                   	push   ecx
c00105c4:	6a 00                	push   0x0
c00105c6:	68 10 01 00 00       	push   0x110
c00105cb:	50                   	push   eax
c00105cc:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00105cf:	83 c4 20             	add    esp,0x20
c00105d2:	85 c0                	test   eax,eax
c00105d4:	74 29                	je     c00105ff <SysReadDir(regs*)+0x7a>
c00105d6:	83 f8 07             	cmp    eax,0x7
c00105d9:	74 1b                	je     c00105f6 <SysReadDir(regs*)+0x71>
c00105db:	b8 02 00 00 00       	mov    eax,0x2
c00105e0:	31 d2                	xor    edx,edx
c00105e2:	83 c4 18             	add    esp,0x18
c00105e5:	5b                   	pop    ebx
c00105e6:	c3                   	ret    
c00105e7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00105ec:	ba ff ff ff ff       	mov    edx,0xffffffff
c00105f1:	83 c4 18             	add    esp,0x18
c00105f4:	5b                   	pop    ebx
c00105f5:	c3                   	ret    
c00105f6:	b8 01 00 00 00       	mov    eax,0x1
c00105fb:	31 d2                	xor    edx,edx
c00105fd:	eb e3                	jmp    c00105e2 <SysReadDir(regs*)+0x5d>
c00105ff:	31 c0                	xor    eax,eax
c0010601:	31 d2                	xor    edx,edx
c0010603:	eb dd                	jmp    c00105e2 <SysReadDir(regs*)+0x5d>

c0010605 <SysIsATTY(regs*)>:
c0010605:	83 ec 0c             	sub    esp,0xc
c0010608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001060c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001060f:	83 f8 02             	cmp    eax,0x2
c0010612:	76 07                	jbe    c001061b <SysIsATTY(regs*)+0x16>
c0010614:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010619:	75 28                	jne    c0010643 <SysIsATTY(regs*)+0x3e>
c001061b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010620:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010623:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010629:	85 c0                	test   eax,eax
c001062b:	74 26                	je     c0010653 <SysIsATTY(regs*)+0x4e>
c001062d:	83 ec 0c             	sub    esp,0xc
c0010630:	8b 10                	mov    edx,DWORD PTR [eax]
c0010632:	50                   	push   eax
c0010633:	ff 12                	call   DWORD PTR [edx]
c0010635:	31 d2                	xor    edx,edx
c0010637:	25 ff 00 00 00       	and    eax,0xff
c001063c:	83 c4 10             	add    esp,0x10
c001063f:	83 c4 0c             	add    esp,0xc
c0010642:	c3                   	ret    
c0010643:	83 ec 0c             	sub    esp,0xc
c0010646:	50                   	push   eax
c0010647:	e8 5f 8a ff ff       	call   c00090ab <getFromFileDescriptor(int)>
c001064c:	83 c4 10             	add    esp,0x10
c001064f:	85 c0                	test   eax,eax
c0010651:	75 da                	jne    c001062d <SysIsATTY(regs*)+0x28>
c0010653:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010658:	ba ff ff ff ff       	mov    edx,0xffffffff
c001065d:	83 c4 0c             	add    esp,0xc
c0010660:	c3                   	ret    

c0010661 <SysSeek(regs*)>:
c0010661:	53                   	push   ebx
c0010662:	83 ec 08             	sub    esp,0x8
c0010665:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010669:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001066c:	8d 50 fd             	lea    edx,[eax-0x3]
c001066f:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010675:	77 34                	ja     c00106ab <SysSeek(regs*)+0x4a>
c0010677:	83 ec 0c             	sub    esp,0xc
c001067a:	50                   	push   eax
c001067b:	e8 2b 8a ff ff       	call   c00090ab <getFromFileDescriptor(int)>
c0010680:	83 c4 0c             	add    esp,0xc
c0010683:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010686:	31 db                	xor    ebx,ebx
c0010688:	53                   	push   ebx
c0010689:	51                   	push   ecx
c001068a:	50                   	push   eax
c001068b:	e8 b8 a4 ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c0010690:	83 c4 10             	add    esp,0x10
c0010693:	85 c0                	test   eax,eax
c0010695:	0f 95 c0             	setne  al
c0010698:	31 d2                	xor    edx,edx
c001069a:	25 ff 00 00 00       	and    eax,0xff
c001069f:	f7 d8                	neg    eax
c00106a1:	83 d2 00             	adc    edx,0x0
c00106a4:	83 c4 08             	add    esp,0x8
c00106a7:	f7 da                	neg    edx
c00106a9:	5b                   	pop    ebx
c00106aa:	c3                   	ret    
c00106ab:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00106b0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00106b5:	83 c4 08             	add    esp,0x8
c00106b8:	5b                   	pop    ebx
c00106b9:	c3                   	ret    

c00106ba <SysTell(regs*)>:
c00106ba:	53                   	push   ebx
c00106bb:	83 ec 08             	sub    esp,0x8
c00106be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106c2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00106c5:	83 f8 02             	cmp    eax,0x2
c00106c8:	76 50                	jbe    c001071a <SysTell(regs*)+0x60>
c00106ca:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00106cf:	76 19                	jbe    c00106ea <SysTell(regs*)+0x30>
c00106d1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00106d4:	31 d2                	xor    edx,edx
c00106d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00106dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00106e3:	31 c0                	xor    eax,eax
c00106e5:	83 c4 08             	add    esp,0x8
c00106e8:	5b                   	pop    ebx
c00106e9:	c3                   	ret    
c00106ea:	83 ec 0c             	sub    esp,0xc
c00106ed:	50                   	push   eax
c00106ee:	e8 b8 89 ff ff       	call   c00090ab <getFromFileDescriptor(int)>
c00106f3:	5a                   	pop    edx
c00106f4:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00106f7:	59                   	pop    ecx
c00106f8:	53                   	push   ebx
c00106f9:	50                   	push   eax
c00106fa:	e8 9f a4 ff ff       	call   c000ab9e <File::tell(unsigned long long*)>
c00106ff:	83 c4 10             	add    esp,0x10
c0010702:	85 c0                	test   eax,eax
c0010704:	0f 95 c0             	setne  al
c0010707:	31 d2                	xor    edx,edx
c0010709:	25 ff 00 00 00       	and    eax,0xff
c001070e:	f7 d8                	neg    eax
c0010710:	83 d2 00             	adc    edx,0x0
c0010713:	83 c4 08             	add    esp,0x8
c0010716:	f7 da                	neg    edx
c0010718:	5b                   	pop    ebx
c0010719:	c3                   	ret    
c001071a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001071f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010724:	83 c4 08             	add    esp,0x8
c0010727:	5b                   	pop    ebx
c0010728:	c3                   	ret    

c0010729 <SysSize(regs*)>:
c0010729:	53                   	push   ebx
c001072a:	83 ec 18             	sub    esp,0x18
c001072d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010731:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010734:	83 f8 02             	cmp    eax,0x2
c0010737:	76 56                	jbe    c001078f <SysSize(regs*)+0x66>
c0010739:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001073e:	76 19                	jbe    c0010759 <SysSize(regs*)+0x30>
c0010740:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010743:	31 d2                	xor    edx,edx
c0010745:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001074b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010752:	31 c0                	xor    eax,eax
c0010754:	83 c4 18             	add    esp,0x18
c0010757:	5b                   	pop    ebx
c0010758:	c3                   	ret    
c0010759:	83 ec 0c             	sub    esp,0xc
c001075c:	50                   	push   eax
c001075d:	e8 49 89 ff ff       	call   c00090ab <getFromFileDescriptor(int)>
c0010762:	83 c4 0c             	add    esp,0xc
c0010765:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010769:	52                   	push   edx
c001076a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001076d:	52                   	push   edx
c001076e:	50                   	push   eax
c001076f:	e8 c2 a5 ff ff       	call   c000ad36 <File::stat(unsigned long long*, bool*)>
c0010774:	83 c4 10             	add    esp,0x10
c0010777:	85 c0                	test   eax,eax
c0010779:	0f 95 c0             	setne  al
c001077c:	31 d2                	xor    edx,edx
c001077e:	25 ff 00 00 00       	and    eax,0xff
c0010783:	f7 d8                	neg    eax
c0010785:	83 d2 00             	adc    edx,0x0
c0010788:	83 c4 18             	add    esp,0x18
c001078b:	f7 da                	neg    edx
c001078d:	5b                   	pop    ebx
c001078e:	c3                   	ret    
c001078f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010794:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010799:	83 c4 18             	add    esp,0x18
c001079c:	5b                   	pop    ebx
c001079d:	c3                   	ret    

c001079e <SysSizeFromFilename(regs*)>:
c001079e:	57                   	push   edi
c001079f:	56                   	push   esi
c00107a0:	53                   	push   ebx
c00107a1:	83 ec 20             	sub    esp,0x20
c00107a4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00107a8:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00107ab:	83 fb 02             	cmp    ebx,0x2
c00107ae:	0f 86 8c 00 00 00    	jbe    c0010840 <SysSizeFromFilename(regs*)+0xa2>
c00107b4:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00107ba:	76 1b                	jbe    c00107d7 <SysSizeFromFilename(regs*)+0x39>
c00107bc:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00107bf:	31 d2                	xor    edx,edx
c00107c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00107c7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00107ce:	83 c4 20             	add    esp,0x20
c00107d1:	31 c0                	xor    eax,eax
c00107d3:	5b                   	pop    ebx
c00107d4:	5e                   	pop    esi
c00107d5:	5f                   	pop    edi
c00107d6:	c3                   	ret    
c00107d7:	83 ec 0c             	sub    esp,0xc
c00107da:	68 14 01 00 00       	push   0x114
c00107df:	e8 d5 6f ff ff       	call   c00077b9 <malloc>
c00107e4:	83 c4 0c             	add    esp,0xc
c00107e7:	89 c7                	mov    edi,eax
c00107e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00107ee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00107f1:	50                   	push   eax
c00107f2:	53                   	push   ebx
c00107f3:	57                   	push   edi
c00107f4:	e8 d1 a1 ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c00107f9:	83 c4 0c             	add    esp,0xc
c00107fc:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010800:	50                   	push   eax
c0010801:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010804:	52                   	push   edx
c0010805:	57                   	push   edi
c0010806:	e8 2b a5 ff ff       	call   c000ad36 <File::stat(unsigned long long*, bool*)>
c001080b:	83 c4 10             	add    esp,0x10
c001080e:	85 ff                	test   edi,edi
c0010810:	74 14                	je     c0010826 <SysSizeFromFilename(regs*)+0x88>
c0010812:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010816:	8b 17                	mov    edx,DWORD PTR [edi]
c0010818:	83 ec 0c             	sub    esp,0xc
c001081b:	57                   	push   edi
c001081c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001081f:	83 c4 10             	add    esp,0x10
c0010822:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010826:	85 c0                	test   eax,eax
c0010828:	0f 95 c0             	setne  al
c001082b:	31 d2                	xor    edx,edx
c001082d:	25 ff 00 00 00       	and    eax,0xff
c0010832:	f7 d8                	neg    eax
c0010834:	83 d2 00             	adc    edx,0x0
c0010837:	83 c4 20             	add    esp,0x20
c001083a:	f7 da                	neg    edx
c001083c:	5b                   	pop    ebx
c001083d:	5e                   	pop    esi
c001083e:	5f                   	pop    edi
c001083f:	c3                   	ret    
c0010840:	83 c4 20             	add    esp,0x20
c0010843:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010848:	5b                   	pop    ebx
c0010849:	ba ff ff ff ff       	mov    edx,0xffffffff
c001084e:	5e                   	pop    esi
c001084f:	5f                   	pop    edi
c0010850:	c3                   	ret    

c0010851 <SysClose(regs*)>:
c0010851:	53                   	push   ebx
c0010852:	83 ec 08             	sub    esp,0x8
c0010855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010859:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001085c:	83 f8 02             	cmp    eax,0x2
c001085f:	76 41                	jbe    c00108a2 <SysClose(regs*)+0x51>
c0010861:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010867:	83 fa 01             	cmp    edx,0x1
c001086a:	76 2d                	jbe    c0010899 <SysClose(regs*)+0x48>
c001086c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010871:	77 2f                	ja     c00108a2 <SysClose(regs*)+0x51>
c0010873:	83 ec 0c             	sub    esp,0xc
c0010876:	50                   	push   eax
c0010877:	e8 2f 88 ff ff       	call   c00090ab <getFromFileDescriptor(int)>
c001087c:	89 c3                	mov    ebx,eax
c001087e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010881:	e8 62 a2 ff ff       	call   c000aae8 <File::close()>
c0010886:	83 c4 10             	add    esp,0x10
c0010889:	85 db                	test   ebx,ebx
c001088b:	74 0c                	je     c0010899 <SysClose(regs*)+0x48>
c001088d:	83 ec 0c             	sub    esp,0xc
c0010890:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010892:	53                   	push   ebx
c0010893:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010896:	83 c4 10             	add    esp,0x10
c0010899:	31 c0                	xor    eax,eax
c001089b:	31 d2                	xor    edx,edx
c001089d:	83 c4 08             	add    esp,0x8
c00108a0:	5b                   	pop    ebx
c00108a1:	c3                   	ret    
c00108a2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00108a7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00108ac:	83 c4 08             	add    esp,0x8
c00108af:	5b                   	pop    ebx
c00108b0:	c3                   	ret    

c00108b1 <SysOpenDir(regs*)>:
c00108b1:	56                   	push   esi
c00108b2:	53                   	push   ebx
c00108b3:	50                   	push   eax
c00108b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108b8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00108bb:	85 c0                	test   eax,eax
c00108bd:	74 5b                	je     c001091a <SysOpenDir(regs*)+0x69>
c00108bf:	83 ec 0c             	sub    esp,0xc
c00108c2:	68 14 01 00 00       	push   0x114
c00108c7:	e8 ed 6e ff ff       	call   c00077b9 <malloc>
c00108cc:	83 c4 0c             	add    esp,0xc
c00108cf:	89 c6                	mov    esi,eax
c00108d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00108d6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00108d9:	50                   	push   eax
c00108da:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00108dd:	50                   	push   eax
c00108de:	56                   	push   esi
c00108df:	e8 10 a6 ff ff       	call   c000aef4 <Directory::Directory(char const*, Process*)>
c00108e4:	83 c4 10             	add    esp,0x10
c00108e7:	85 f6                	test   esi,esi
c00108e9:	74 2f                	je     c001091a <SysOpenDir(regs*)+0x69>
c00108eb:	83 ec 0c             	sub    esp,0xc
c00108ee:	56                   	push   esi
c00108ef:	e8 c0 a6 ff ff       	call   c000afb4 <Directory::open()>
c00108f4:	83 c4 10             	add    esp,0x10
c00108f7:	85 c0                	test   eax,eax
c00108f9:	75 1f                	jne    c001091a <SysOpenDir(regs*)+0x69>
c00108fb:	83 ec 0c             	sub    esp,0xc
c00108fe:	56                   	push   esi
c00108ff:	e8 b2 84 ff ff       	call   c0008db6 <UnixFile::getFileDescriptor()>
c0010904:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010907:	83 c4 10             	add    esp,0x10
c001090a:	89 02                	mov    DWORD PTR [edx],eax
c001090c:	c1 f8 1f             	sar    eax,0x1f
c001090f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010912:	31 c0                	xor    eax,eax
c0010914:	59                   	pop    ecx
c0010915:	31 d2                	xor    edx,edx
c0010917:	5b                   	pop    ebx
c0010918:	5e                   	pop    esi
c0010919:	c3                   	ret    
c001091a:	59                   	pop    ecx
c001091b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010920:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010925:	5b                   	pop    ebx
c0010926:	5e                   	pop    esi
c0010927:	c3                   	ret    

c0010928 <SysCloseDir(regs*)>:
c0010928:	53                   	push   ebx
c0010929:	83 ec 08             	sub    esp,0x8
c001092c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010930:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010933:	8d 50 fd             	lea    edx,[eax-0x3]
c0010936:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001093c:	77 2f                	ja     c001096d <SysCloseDir(regs*)+0x45>
c001093e:	83 ec 0c             	sub    esp,0xc
c0010941:	50                   	push   eax
c0010942:	e8 64 87 ff ff       	call   c00090ab <getFromFileDescriptor(int)>
c0010947:	89 c3                	mov    ebx,eax
c0010949:	89 04 24             	mov    DWORD PTR [esp],eax
c001094c:	e8 bf a6 ff ff       	call   c000b010 <Directory::close()>
c0010951:	83 c4 10             	add    esp,0x10
c0010954:	85 db                	test   ebx,ebx
c0010956:	74 0c                	je     c0010964 <SysCloseDir(regs*)+0x3c>
c0010958:	83 ec 0c             	sub    esp,0xc
c001095b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001095d:	53                   	push   ebx
c001095e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010961:	83 c4 10             	add    esp,0x10
c0010964:	31 c0                	xor    eax,eax
c0010966:	31 d2                	xor    edx,edx
c0010968:	83 c4 08             	add    esp,0x8
c001096b:	5b                   	pop    ebx
c001096c:	c3                   	ret    
c001096d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010972:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010977:	83 c4 08             	add    esp,0x8
c001097a:	5b                   	pop    ebx
c001097b:	c3                   	ret    

c001097c <SysMakeDir(regs*)>:
c001097c:	56                   	push   esi
c001097d:	53                   	push   ebx
c001097e:	83 ec 10             	sub    esp,0x10
c0010981:	68 14 01 00 00       	push   0x114
c0010986:	e8 2e 6e ff ff       	call   c00077b9 <malloc>
c001098b:	83 c4 0c             	add    esp,0xc
c001098e:	89 c3                	mov    ebx,eax
c0010990:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010995:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010998:	56                   	push   esi
c0010999:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001099d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00109a0:	50                   	push   eax
c00109a1:	53                   	push   ebx
c00109a2:	e8 4d a5 ff ff       	call   c000aef4 <Directory::Directory(char const*, Process*)>
c00109a7:	83 c4 10             	add    esp,0x10
c00109aa:	85 db                	test   ebx,ebx
c00109ac:	74 32                	je     c00109e0 <SysMakeDir(regs*)+0x64>
c00109ae:	83 ec 0c             	sub    esp,0xc
c00109b1:	53                   	push   ebx
c00109b2:	e8 dd a7 ff ff       	call   c000b194 <Directory::create()>
c00109b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109ba:	89 c6                	mov    esi,eax
c00109bc:	e8 4f a6 ff ff       	call   c000b010 <Directory::close()>
c00109c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00109c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109c6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00109c9:	83 c4 10             	add    esp,0x10
c00109cc:	31 c0                	xor    eax,eax
c00109ce:	59                   	pop    ecx
c00109cf:	85 f6                	test   esi,esi
c00109d1:	5b                   	pop    ebx
c00109d2:	0f 95 c0             	setne  al
c00109d5:	5e                   	pop    esi
c00109d6:	31 d2                	xor    edx,edx
c00109d8:	f7 d8                	neg    eax
c00109da:	83 d2 00             	adc    edx,0x0
c00109dd:	f7 da                	neg    edx
c00109df:	c3                   	ret    
c00109e0:	59                   	pop    ecx
c00109e1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00109e6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00109eb:	5b                   	pop    ebx
c00109ec:	5e                   	pop    esi
c00109ed:	c3                   	ret    

c00109ee <SysWait(regs*)>:
c00109ee:	83 ec 10             	sub    esp,0x10
c00109f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00109f5:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00109f8:	52                   	push   edx
c00109f9:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00109fc:	51                   	push   ecx
c00109fd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010a00:	50                   	push   eax
c0010a01:	e8 02 2b 00 00       	call   c0013508 <waitTask(int, int*, int)>
c0010a06:	83 c4 1c             	add    esp,0x1c
c0010a09:	99                   	cdq    
c0010a0a:	c3                   	ret    

c0010a0b <SysNotImpl(regs*)>:
c0010a0b:	83 ec 18             	sub    esp,0x18
c0010a0e:	68 f1 e1 01 c0       	push   0xc001e1f1
c0010a13:	e8 b3 f6 ff ff       	call   c00100cb <KePanic(char const*)>
c0010a18:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a1d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a22:	83 c4 1c             	add    esp,0x1c
c0010a25:	c3                   	ret    

c0010a26 <SysPanic(regs*)>:
c0010a26:	83 ec 18             	sub    esp,0x18
c0010a29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010a2d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010a30:	50                   	push   eax
c0010a31:	e8 95 f6 ff ff       	call   c00100cb <KePanic(char const*)>
c0010a36:	b8 01 00 00 00       	mov    eax,0x1
c0010a3b:	31 d2                	xor    edx,edx
c0010a3d:	83 c4 1c             	add    esp,0x1c
c0010a40:	c3                   	ret    

c0010a41 <SysRmdir(regs*)>:
c0010a41:	56                   	push   esi
c0010a42:	53                   	push   ebx
c0010a43:	83 ec 20             	sub    esp,0x20
c0010a46:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010a4a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010a4d:	68 14 01 00 00       	push   0x114
c0010a52:	e8 62 6d ff ff       	call   c00077b9 <malloc>
c0010a57:	83 c4 0c             	add    esp,0xc
c0010a5a:	89 c3                	mov    ebx,eax
c0010a5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a61:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a64:	50                   	push   eax
c0010a65:	56                   	push   esi
c0010a66:	53                   	push   ebx
c0010a67:	e8 5e 9f ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c0010a6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a6f:	e8 8e a1 ff ff       	call   c000ac02 <File::unlink()>
c0010a74:	83 c4 10             	add    esp,0x10
c0010a77:	85 db                	test   ebx,ebx
c0010a79:	74 14                	je     c0010a8f <SysRmdir(regs*)+0x4e>
c0010a7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010a7f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010a81:	83 ec 0c             	sub    esp,0xc
c0010a84:	53                   	push   ebx
c0010a85:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010a88:	83 c4 10             	add    esp,0x10
c0010a8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a8f:	85 c0                	test   eax,eax
c0010a91:	0f 95 c0             	setne  al
c0010a94:	31 d2                	xor    edx,edx
c0010a96:	25 ff 00 00 00       	and    eax,0xff
c0010a9b:	f7 d8                	neg    eax
c0010a9d:	83 d2 00             	adc    edx,0x0
c0010aa0:	83 c4 14             	add    esp,0x14
c0010aa3:	f7 da                	neg    edx
c0010aa5:	5b                   	pop    ebx
c0010aa6:	5e                   	pop    esi
c0010aa7:	c3                   	ret    

c0010aa8 <SysUnlink(regs*)>:
c0010aa8:	56                   	push   esi
c0010aa9:	53                   	push   ebx
c0010aaa:	83 ec 20             	sub    esp,0x20
c0010aad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010ab1:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010ab4:	68 14 01 00 00       	push   0x114
c0010ab9:	e8 fb 6c ff ff       	call   c00077b9 <malloc>
c0010abe:	83 c4 0c             	add    esp,0xc
c0010ac1:	89 c3                	mov    ebx,eax
c0010ac3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ac8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010acb:	50                   	push   eax
c0010acc:	56                   	push   esi
c0010acd:	53                   	push   ebx
c0010ace:	e8 f7 9e ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c0010ad3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ad6:	e8 27 a1 ff ff       	call   c000ac02 <File::unlink()>
c0010adb:	83 c4 10             	add    esp,0x10
c0010ade:	85 db                	test   ebx,ebx
c0010ae0:	74 14                	je     c0010af6 <SysUnlink(regs*)+0x4e>
c0010ae2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ae6:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010ae8:	83 ec 0c             	sub    esp,0xc
c0010aeb:	53                   	push   ebx
c0010aec:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010aef:	83 c4 10             	add    esp,0x10
c0010af2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010af6:	85 c0                	test   eax,eax
c0010af8:	0f 95 c0             	setne  al
c0010afb:	31 d2                	xor    edx,edx
c0010afd:	25 ff 00 00 00       	and    eax,0xff
c0010b02:	f7 d8                	neg    eax
c0010b04:	83 d2 00             	adc    edx,0x0
c0010b07:	83 c4 14             	add    esp,0x14
c0010b0a:	f7 da                	neg    edx
c0010b0c:	5b                   	pop    ebx
c0010b0d:	5e                   	pop    esi
c0010b0e:	c3                   	ret    

c0010b0f <SysGetArgv(regs*)>:
c0010b0f:	83 ec 0c             	sub    esp,0xc
c0010b12:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010b16:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010b19:	85 c0                	test   eax,eax
c0010b1b:	78 2c                	js     c0010b49 <SysGetArgv(regs*)+0x3a>
c0010b1d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010b23:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010b26:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010b2c:	7d 1b                	jge    c0010b49 <SysGetArgv(regs*)+0x3a>
c0010b2e:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010b35:	85 c0                	test   eax,eax
c0010b37:	74 18                	je     c0010b51 <SysGetArgv(regs*)+0x42>
c0010b39:	83 ec 08             	sub    esp,0x8
c0010b3c:	50                   	push   eax
c0010b3d:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010b40:	50                   	push   eax
c0010b41:	e8 ba fa fe ff       	call   c0000600 <strcpy>
c0010b46:	83 c4 10             	add    esp,0x10
c0010b49:	31 c0                	xor    eax,eax
c0010b4b:	31 d2                	xor    edx,edx
c0010b4d:	83 c4 0c             	add    esp,0xc
c0010b50:	c3                   	ret    
c0010b51:	b8 01 00 00 00       	mov    eax,0x1
c0010b56:	31 d2                	xor    edx,edx
c0010b58:	83 c4 0c             	add    esp,0xc
c0010b5b:	c3                   	ret    

c0010b5c <SysUSleep(regs*)>:
c0010b5c:	83 ec 1c             	sub    esp,0x1c
c0010b5f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010b63:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010b66:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010b69:	6a 00                	push   0x0
c0010b6b:	6a 64                	push   0x64
c0010b6d:	52                   	push   edx
c0010b6e:	50                   	push   eax
c0010b6f:	e8 6c b0 00 00       	call   c001bbe0 <__udivdi3>
c0010b74:	83 c4 14             	add    esp,0x14
c0010b77:	50                   	push   eax
c0010b78:	e8 5f 2a 00 00       	call   c00135dc <milliTenthSleep(unsigned int)>
c0010b7d:	31 c0                	xor    eax,eax
c0010b7f:	31 d2                	xor    edx,edx
c0010b81:	83 c4 1c             	add    esp,0x1c
c0010b84:	c3                   	ret    

c0010b85 <SysSpawn(regs*)>:
c0010b85:	56                   	push   esi
c0010b86:	53                   	push   ebx
c0010b87:	50                   	push   eax
c0010b88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b8c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010b8f:	85 c0                	test   eax,eax
c0010b91:	75 08                	jne    c0010b9b <SysSpawn(regs*)+0x16>
c0010b93:	59                   	pop    ecx
c0010b94:	31 c0                	xor    eax,eax
c0010b96:	31 d2                	xor    edx,edx
c0010b98:	5b                   	pop    ebx
c0010b99:	5e                   	pop    esi
c0010b9a:	c3                   	ret    
c0010b9b:	83 ec 0c             	sub    esp,0xc
c0010b9e:	68 1f 07 00 00       	push   0x71f
c0010ba3:	e8 11 6c ff ff       	call   c00077b9 <malloc>
c0010ba8:	83 c4 10             	add    esp,0x10
c0010bab:	89 c6                	mov    esi,eax
c0010bad:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010bb0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010bb3:	85 c0                	test   eax,eax
c0010bb5:	75 33                	jne    c0010bea <SysSpawn(regs*)+0x65>
c0010bb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010bbc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010bbf:	52                   	push   edx
c0010bc0:	50                   	push   eax
c0010bc1:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0010bc4:	53                   	push   ebx
c0010bc5:	56                   	push   esi
c0010bc6:	e8 f5 20 00 00       	call   c0012cc0 <Process::Process(char const*, Process*, char**)>
c0010bcb:	83 c4 10             	add    esp,0x10
c0010bce:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0010bd5:	75 bc                	jne    c0010b93 <SysSpawn(regs*)+0xe>
c0010bd7:	83 ec 0c             	sub    esp,0xc
c0010bda:	56                   	push   esi
c0010bdb:	e8 d4 25 00 00       	call   c00131b4 <Process::createUserThread()>
c0010be0:	8b 06                	mov    eax,DWORD PTR [esi]
c0010be2:	83 c4 10             	add    esp,0x10
c0010be5:	99                   	cdq    
c0010be6:	59                   	pop    ecx
c0010be7:	5b                   	pop    ebx
c0010be8:	5e                   	pop    esi
c0010be9:	c3                   	ret    
c0010bea:	31 c0                	xor    eax,eax
c0010bec:	eb d1                	jmp    c0010bbf <SysSpawn(regs*)+0x3a>

c0010bee <SysGetEnv(regs*)>:
c0010bee:	57                   	push   edi
c0010bef:	56                   	push   esi
c0010bf0:	53                   	push   ebx
c0010bf1:	83 ec 1c             	sub    esp,0x1c
c0010bf4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010bf8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010bfd:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010c00:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010c03:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c06:	50                   	push   eax
c0010c07:	e8 77 f3 ff ff       	call   c000ff83 <Krnl::getProcessTotalEnvCount(Process*)>
c0010c0c:	83 c4 10             	add    esp,0x10
c0010c0f:	39 c7                	cmp    edi,eax
c0010c11:	7c 14                	jl     c0010c27 <SysGetEnv(regs*)+0x39>
c0010c13:	85 f6                	test   esi,esi
c0010c15:	75 0b                	jne    c0010c22 <SysGetEnv(regs*)+0x34>
c0010c17:	83 c4 10             	add    esp,0x10
c0010c1a:	31 c0                	xor    eax,eax
c0010c1c:	5b                   	pop    ebx
c0010c1d:	31 d2                	xor    edx,edx
c0010c1f:	5e                   	pop    esi
c0010c20:	5f                   	pop    edi
c0010c21:	c3                   	ret    
c0010c22:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010c25:	eb f0                	jmp    c0010c17 <SysGetEnv(regs*)+0x29>
c0010c27:	8d 44 24 08          	lea    eax,[esp+0x8]
c0010c2b:	52                   	push   edx
c0010c2c:	57                   	push   edi
c0010c2d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010c33:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0010c36:	51                   	push   ecx
c0010c37:	50                   	push   eax
c0010c38:	e8 66 f3 ff ff       	call   c000ffa3 <Krnl::getProcessEnvPair(Process*, int)>
c0010c3d:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010c40:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c44:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010c48:	83 c4 0c             	add    esp,0xc
c0010c4b:	85 db                	test   ebx,ebx
c0010c4d:	75 23                	jne    c0010c72 <SysGetEnv(regs*)+0x84>
c0010c4f:	83 ec 0c             	sub    esp,0xc
c0010c52:	50                   	push   eax
c0010c53:	e8 e8 f8 fe ff       	call   c0000540 <strlen>
c0010c58:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010c5b:	89 c3                	mov    ebx,eax
c0010c5d:	e8 de f8 fe ff       	call   c0000540 <strlen>
c0010c62:	31 d2                	xor    edx,edx
c0010c64:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0010c68:	83 c4 10             	add    esp,0x10
c0010c6b:	83 c4 10             	add    esp,0x10
c0010c6e:	5b                   	pop    ebx
c0010c6f:	5e                   	pop    esi
c0010c70:	5f                   	pop    edi
c0010c71:	c3                   	ret    
c0010c72:	83 ec 08             	sub    esp,0x8
c0010c75:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010c78:	50                   	push   eax
c0010c79:	56                   	push   esi
c0010c7a:	e8 81 f9 fe ff       	call   c0000600 <strcpy>
c0010c7f:	58                   	pop    eax
c0010c80:	5a                   	pop    edx
c0010c81:	68 0b e2 01 c0       	push   0xc001e20b
c0010c86:	56                   	push   esi
c0010c87:	e8 34 fb fe ff       	call   c00007c0 <strcat>
c0010c8c:	59                   	pop    ecx
c0010c8d:	5b                   	pop    ebx
c0010c8e:	57                   	push   edi
c0010c8f:	56                   	push   esi
c0010c90:	e8 2b fb fe ff       	call   c00007c0 <strcat>
c0010c95:	83 c4 10             	add    esp,0x10
c0010c98:	e9 7a ff ff ff       	jmp    c0010c17 <SysGetEnv(regs*)+0x29>

c0010c9d <SysSetFatAttrib(regs*)>:
c0010c9d:	57                   	push   edi
c0010c9e:	56                   	push   esi
c0010c9f:	53                   	push   ebx
c0010ca0:	83 ec 1c             	sub    esp,0x1c
c0010ca3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0010ca7:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0010caa:	68 14 01 00 00       	push   0x114
c0010caf:	e8 05 6b ff ff       	call   c00077b9 <malloc>
c0010cb4:	83 c4 0c             	add    esp,0xc
c0010cb7:	89 c3                	mov    ebx,eax
c0010cb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010cbe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010cc1:	50                   	push   eax
c0010cc2:	57                   	push   edi
c0010cc3:	53                   	push   ebx
c0010cc4:	e8 01 9d ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c0010cc9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010ccc:	83 c4 0c             	add    esp,0xc
c0010ccf:	0f b6 d4             	movzx  edx,ah
c0010cd2:	25 ff 00 00 00       	and    eax,0xff
c0010cd7:	52                   	push   edx
c0010cd8:	50                   	push   eax
c0010cd9:	53                   	push   ebx
c0010cda:	e8 bd 9f ff ff       	call   c000ac9c <File::chfatattr(unsigned char, unsigned char)>
c0010cdf:	83 c4 10             	add    esp,0x10
c0010ce2:	85 db                	test   ebx,ebx
c0010ce4:	74 14                	je     c0010cfa <SysSetFatAttrib(regs*)+0x5d>
c0010ce6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010cea:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010cec:	83 ec 0c             	sub    esp,0xc
c0010cef:	53                   	push   ebx
c0010cf0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010cf3:	83 c4 10             	add    esp,0x10
c0010cf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010cfa:	85 c0                	test   eax,eax
c0010cfc:	0f 95 c0             	setne  al
c0010cff:	31 d2                	xor    edx,edx
c0010d01:	25 ff 00 00 00       	and    eax,0xff
c0010d06:	f7 d8                	neg    eax
c0010d08:	83 d2 00             	adc    edx,0x0
c0010d0b:	83 c4 10             	add    esp,0x10
c0010d0e:	f7 da                	neg    edx
c0010d10:	5b                   	pop    ebx
c0010d11:	5e                   	pop    esi
c0010d12:	5f                   	pop    edi
c0010d13:	c3                   	ret    

c0010d14 <SysPipe(regs*)>:
c0010d14:	57                   	push   edi
c0010d15:	56                   	push   esi
c0010d16:	53                   	push   ebx
c0010d17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d1b:	83 ec 0c             	sub    esp,0xc
c0010d1e:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0010d21:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010d24:	6a 20                	push   0x20
c0010d26:	e8 8e 6a ff ff       	call   c00077b9 <malloc>
c0010d2b:	89 c3                	mov    ebx,eax
c0010d2d:	58                   	pop    eax
c0010d2e:	5a                   	pop    edx
c0010d2f:	68 00 50 00 00       	push   0x5000
c0010d34:	53                   	push   ebx
c0010d35:	e8 84 73 ff ff       	call   c00080be <Pipe::Pipe(int)>
c0010d3a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d3d:	e8 74 80 ff ff       	call   c0008db6 <UnixFile::getFileDescriptor()>
c0010d42:	89 07                	mov    DWORD PTR [edi],eax
c0010d44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d47:	e8 6a 80 ff ff       	call   c0008db6 <UnixFile::getFileDescriptor()>
c0010d4c:	83 c4 10             	add    esp,0x10
c0010d4f:	89 06                	mov    DWORD PTR [esi],eax
c0010d51:	31 d2                	xor    edx,edx
c0010d53:	5b                   	pop    ebx
c0010d54:	31 c0                	xor    eax,eax
c0010d56:	5e                   	pop    esi
c0010d57:	5f                   	pop    edi
c0010d58:	c3                   	ret    

c0010d59 <SysGetUnixTime(regs*)>:
c0010d59:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c0010d5e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010d64:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d68:	e9 6d a6 ff ff       	jmp    c000b3da <Clock::timeInSecondsLocal()>

c0010d6d <string_ends_with(char const*, char const*)>:
c0010d6d:	57                   	push   edi
c0010d6e:	56                   	push   esi
c0010d6f:	53                   	push   ebx
c0010d70:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d74:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0010d78:	83 ec 0c             	sub    esp,0xc
c0010d7b:	53                   	push   ebx
c0010d7c:	e8 bf f7 fe ff       	call   c0000540 <strlen>
c0010d81:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010d84:	89 c6                	mov    esi,eax
c0010d86:	e8 b5 f7 fe ff       	call   c0000540 <strlen>
c0010d8b:	83 c4 10             	add    esp,0x10
c0010d8e:	39 c6                	cmp    esi,eax
c0010d90:	7d 06                	jge    c0010d98 <string_ends_with(char const*, char const*)+0x2b>
c0010d92:	5b                   	pop    ebx
c0010d93:	31 c0                	xor    eax,eax
c0010d95:	5e                   	pop    esi
c0010d96:	5f                   	pop    edi
c0010d97:	c3                   	ret    
c0010d98:	83 ec 08             	sub    esp,0x8
c0010d9b:	29 c6                	sub    esi,eax
c0010d9d:	57                   	push   edi
c0010d9e:	01 f3                	add    ebx,esi
c0010da0:	53                   	push   ebx
c0010da1:	e8 3a f9 fe ff       	call   c00006e0 <strcmp>
c0010da6:	83 c4 10             	add    esp,0x10
c0010da9:	85 c0                	test   eax,eax
c0010dab:	5b                   	pop    ebx
c0010dac:	0f 94 c0             	sete   al
c0010daf:	5e                   	pop    esi
c0010db0:	25 ff 00 00 00       	and    eax,0xff
c0010db5:	5f                   	pop    edi
c0010db6:	c3                   	ret    

c0010db7 <SysOpen(regs*)>:
c0010db7:	56                   	push   esi
c0010db8:	53                   	push   ebx
c0010db9:	81 ec 04 01 00 00    	sub    esp,0x104
c0010dbf:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0010dc6:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010dc9:	85 c9                	test   ecx,ecx
c0010dcb:	0f 84 b9 01 00 00    	je     c0010f8a <SysOpen(regs*)+0x1d3>
c0010dd1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010dd4:	85 c0                	test   eax,eax
c0010dd6:	0f 84 ae 01 00 00    	je     c0010f8a <SysOpen(regs*)+0x1d3>
c0010ddc:	52                   	push   edx
c0010ddd:	68 0d e2 01 c0       	push   0xc001e20d
c0010de2:	50                   	push   eax
c0010de3:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010de7:	56                   	push   esi
c0010de8:	e8 33 9a ff ff       	call   c000a820 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010ded:	89 34 24             	mov    DWORD PTR [esp],esi
c0010df0:	e8 4b f7 fe ff       	call   c0000540 <strlen>
c0010df5:	83 c4 10             	add    esp,0x10
c0010df8:	48                   	dec    eax
c0010df9:	74 1d                	je     c0010e18 <SysOpen(regs*)+0x61>
c0010dfb:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0010dfe:	eb 0f                	jmp    c0010e0f <SysOpen(regs*)+0x58>
c0010e00:	80 fa 3a             	cmp    dl,0x3a
c0010e03:	74 0f                	je     c0010e14 <SysOpen(regs*)+0x5d>
c0010e05:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010e09:	48                   	dec    eax
c0010e0a:	74 0c                	je     c0010e18 <SysOpen(regs*)+0x61>
c0010e0c:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0010e0f:	80 fa 2e             	cmp    dl,0x2e
c0010e12:	75 ec                	jne    c0010e00 <SysOpen(regs*)+0x49>
c0010e14:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010e18:	83 ec 08             	sub    esp,0x8
c0010e1b:	68 11 e2 01 c0       	push   0xc001e211
c0010e20:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010e23:	50                   	push   eax
c0010e24:	e8 44 ff ff ff       	call   c0010d6d <string_ends_with(char const*, char const*)>
c0010e29:	83 c4 10             	add    esp,0x10
c0010e2c:	85 c0                	test   eax,eax
c0010e2e:	74 1d                	je     c0010e4d <SysOpen(regs*)+0x96>
c0010e30:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010e33:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010e39:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010e40:	81 c4 04 01 00 00    	add    esp,0x104
c0010e46:	31 c0                	xor    eax,eax
c0010e48:	31 d2                	xor    edx,edx
c0010e4a:	5b                   	pop    ebx
c0010e4b:	5e                   	pop    esi
c0010e4c:	c3                   	ret    
c0010e4d:	83 ec 08             	sub    esp,0x8
c0010e50:	68 16 e2 01 c0       	push   0xc001e216
c0010e55:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010e58:	50                   	push   eax
c0010e59:	e8 0f ff ff ff       	call   c0010d6d <string_ends_with(char const*, char const*)>
c0010e5e:	83 c4 10             	add    esp,0x10
c0010e61:	85 c0                	test   eax,eax
c0010e63:	75 cb                	jne    c0010e30 <SysOpen(regs*)+0x79>
c0010e65:	83 ec 08             	sub    esp,0x8
c0010e68:	68 12 e2 01 c0       	push   0xc001e212
c0010e6d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010e70:	50                   	push   eax
c0010e71:	e8 6a f8 fe ff       	call   c00006e0 <strcmp>
c0010e76:	83 c4 10             	add    esp,0x10
c0010e79:	85 c0                	test   eax,eax
c0010e7b:	74 b3                	je     c0010e30 <SysOpen(regs*)+0x79>
c0010e7d:	83 ec 08             	sub    esp,0x8
c0010e80:	68 11 e2 01 c0       	push   0xc001e211
c0010e85:	56                   	push   esi
c0010e86:	e8 e2 fe ff ff       	call   c0010d6d <string_ends_with(char const*, char const*)>
c0010e8b:	83 c4 10             	add    esp,0x10
c0010e8e:	85 c0                	test   eax,eax
c0010e90:	75 9e                	jne    c0010e30 <SysOpen(regs*)+0x79>
c0010e92:	83 ec 08             	sub    esp,0x8
c0010e95:	68 1b e2 01 c0       	push   0xc001e21b
c0010e9a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010e9d:	50                   	push   eax
c0010e9e:	e8 ca fe ff ff       	call   c0010d6d <string_ends_with(char const*, char const*)>
c0010ea3:	83 c4 10             	add    esp,0x10
c0010ea6:	85 c0                	test   eax,eax
c0010ea8:	0f 85 ef 00 00 00    	jne    c0010f9d <SysOpen(regs*)+0x1e6>
c0010eae:	83 ec 08             	sub    esp,0x8
c0010eb1:	68 20 e2 01 c0       	push   0xc001e220
c0010eb6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010eb9:	50                   	push   eax
c0010eba:	e8 ae fe ff ff       	call   c0010d6d <string_ends_with(char const*, char const*)>
c0010ebf:	83 c4 10             	add    esp,0x10
c0010ec2:	85 c0                	test   eax,eax
c0010ec4:	0f 85 d3 00 00 00    	jne    c0010f9d <SysOpen(regs*)+0x1e6>
c0010eca:	83 ec 08             	sub    esp,0x8
c0010ecd:	68 1c e2 01 c0       	push   0xc001e21c
c0010ed2:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010ed5:	51                   	push   ecx
c0010ed6:	e8 05 f8 fe ff       	call   c00006e0 <strcmp>
c0010edb:	83 c4 10             	add    esp,0x10
c0010ede:	85 c0                	test   eax,eax
c0010ee0:	0f 84 b7 00 00 00    	je     c0010f9d <SysOpen(regs*)+0x1e6>
c0010ee6:	83 ec 08             	sub    esp,0x8
c0010ee9:	68 1b e2 01 c0       	push   0xc001e21b
c0010eee:	56                   	push   esi
c0010eef:	e8 79 fe ff ff       	call   c0010d6d <string_ends_with(char const*, char const*)>
c0010ef4:	83 c4 10             	add    esp,0x10
c0010ef7:	85 c0                	test   eax,eax
c0010ef9:	0f 85 9e 00 00 00    	jne    c0010f9d <SysOpen(regs*)+0x1e6>
c0010eff:	83 ec 0c             	sub    esp,0xc
c0010f02:	68 14 01 00 00       	push   0x114
c0010f07:	e8 ad 68 ff ff       	call   c00077b9 <malloc>
c0010f0c:	83 c4 0c             	add    esp,0xc
c0010f0f:	89 c6                	mov    esi,eax
c0010f11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f16:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f19:	50                   	push   eax
c0010f1a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010f1d:	52                   	push   edx
c0010f1e:	56                   	push   esi
c0010f1f:	e8 a6 9a ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c0010f24:	83 c4 10             	add    esp,0x10
c0010f27:	85 f6                	test   esi,esi
c0010f29:	74 5f                	je     c0010f8a <SysOpen(regs*)+0x1d3>
c0010f2b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010f2e:	89 d0                	mov    eax,edx
c0010f30:	25 ff 00 00 00       	and    eax,0xff
c0010f35:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0010f38:	89 d0                	mov    eax,edx
c0010f3a:	83 e0 01             	and    eax,0x1
c0010f3d:	f6 c2 02             	test   dl,0x2
c0010f40:	74 03                	je     c0010f45 <SysOpen(regs*)+0x18e>
c0010f42:	83 c8 02             	or     eax,0x2
c0010f45:	f6 c2 04             	test   dl,0x4
c0010f48:	74 03                	je     c0010f4d <SysOpen(regs*)+0x196>
c0010f4a:	83 c8 04             	or     eax,0x4
c0010f4d:	f6 c2 08             	test   dl,0x8
c0010f50:	74 03                	je     c0010f55 <SysOpen(regs*)+0x19e>
c0010f52:	83 c8 0a             	or     eax,0xa
c0010f55:	83 e2 10             	and    edx,0x10
c0010f58:	74 03                	je     c0010f5d <SysOpen(regs*)+0x1a6>
c0010f5a:	83 c8 12             	or     eax,0x12
c0010f5d:	83 ec 08             	sub    esp,0x8
c0010f60:	50                   	push   eax
c0010f61:	56                   	push   esi
c0010f62:	e8 23 9b ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c0010f67:	83 c4 10             	add    esp,0x10
c0010f6a:	85 c0                	test   eax,eax
c0010f6c:	75 1c                	jne    c0010f8a <SysOpen(regs*)+0x1d3>
c0010f6e:	83 ec 0c             	sub    esp,0xc
c0010f71:	56                   	push   esi
c0010f72:	e8 3f 7e ff ff       	call   c0008db6 <UnixFile::getFileDescriptor()>
c0010f77:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010f7a:	83 c4 10             	add    esp,0x10
c0010f7d:	89 02                	mov    DWORD PTR [edx],eax
c0010f7f:	c1 f8 1f             	sar    eax,0x1f
c0010f82:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010f85:	e9 b6 fe ff ff       	jmp    c0010e40 <SysOpen(regs*)+0x89>
c0010f8a:	81 c4 04 01 00 00    	add    esp,0x104
c0010f90:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010f95:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f9a:	5b                   	pop    ebx
c0010f9b:	5e                   	pop    esi
c0010f9c:	c3                   	ret    
c0010f9d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010fa0:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0010fa6:	e9 8e fe ff ff       	jmp    c0010e39 <SysOpen(regs*)+0x82>

c0010fab <KeSystemCall(regs*, void*)>:
c0010fab:	53                   	push   ebx
c0010fac:	83 ec 10             	sub    esp,0x10
c0010faf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010fb3:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0010fb6:	68 25 e2 01 c0       	push   0xc001e225
c0010fbb:	e8 94 94 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0010fc0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010fc3:	83 c4 10             	add    esp,0x10
c0010fc6:	83 f8 31             	cmp    eax,0x31
c0010fc9:	77 16                	ja     c0010fe1 <KeSystemCall(regs*, void*)+0x36>
c0010fcb:	8b 14 85 40 f3 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0cc0]
c0010fd2:	85 d2                	test   edx,edx
c0010fd4:	74 0b                	je     c0010fe1 <KeSystemCall(regs*, void*)+0x36>
c0010fd6:	83 ec 0c             	sub    esp,0xc
c0010fd9:	53                   	push   ebx
c0010fda:	ff d2                	call   edx
c0010fdc:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0010fdf:	eb 0d                	jmp    c0010fee <KeSystemCall(regs*, void*)+0x43>
c0010fe1:	52                   	push   edx
c0010fe2:	52                   	push   edx
c0010fe3:	50                   	push   eax
c0010fe4:	68 35 e2 01 c0       	push   0xc001e235
c0010fe9:	e8 66 94 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0010fee:	83 c4 10             	add    esp,0x10
c0010ff1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0010ff6:	31 d2                	xor    edx,edx
c0010ff8:	83 c4 08             	add    esp,0x8
c0010ffb:	5b                   	pop    ebx
c0010ffc:	c3                   	ret    

c0010ffd <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0010ffd:	55                   	push   ebp
c0010ffe:	57                   	push   edi
c0010fff:	56                   	push   esi
c0011000:	53                   	push   ebx
c0011001:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0011007:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001100e:	8a 1e                	mov    bl,BYTE PTR [esi]
c0011010:	8d 6e 01             	lea    ebp,[esi+0x1]
c0011013:	80 fb 40             	cmp    bl,0x40
c0011016:	75 1b                	jne    c0011033 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0011018:	8a 16                	mov    dl,BYTE PTR [esi]
c001101a:	84 d2                	test   dl,dl
c001101c:	0f 84 f1 00 00 00    	je     c0011113 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011022:	8d 46 01             	lea    eax,[esi+0x1]
c0011025:	80 fa 3a             	cmp    dl,0x3a
c0011028:	74 04                	je     c001102e <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001102a:	89 c6                	mov    esi,eax
c001102c:	eb ea                	jmp    c0011018 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001102e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011031:	89 c6                	mov    esi,eax
c0011033:	50                   	push   eax
c0011034:	6a 40                	push   0x40
c0011036:	6a 00                	push   0x0
c0011038:	8d 44 24 24          	lea    eax,[esp+0x24]
c001103c:	50                   	push   eax
c001103d:	e8 8e f4 fe ff       	call   c00004d0 <memset>
c0011042:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0011049:	31 c0                	xor    eax,eax
c001104b:	83 c4 10             	add    esp,0x10
c001104e:	8a 0f                	mov    cl,BYTE PTR [edi]
c0011050:	84 c9                	test   cl,cl
c0011052:	0f 84 bb 00 00 00    	je     c0011113 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011058:	3d c7 00 00 00       	cmp    eax,0xc7
c001105d:	0f 8f b0 00 00 00    	jg     c0011113 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011063:	80 f9 0a             	cmp    cl,0xa
c0011066:	0f 85 98 00 00 00    	jne    c0011104 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001106c:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0011071:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0011075:	a8 df                	test   al,0xdf
c0011077:	0f 94 c1             	sete   cl
c001107a:	3c 23                	cmp    al,0x23
c001107c:	0f 94 c2             	sete   dl
c001107f:	08 d1                	or     cl,dl
c0011081:	75 4a                	jne    c00110cd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011083:	8d 50 f7             	lea    edx,[eax-0x9]
c0011086:	80 fa 01             	cmp    dl,0x1
c0011089:	76 42                	jbe    c00110cd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001108b:	3c 5b                	cmp    al,0x5b
c001108d:	75 42                	jne    c00110d1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001108f:	80 fb 40             	cmp    bl,0x40
c0011092:	75 39                	jne    c00110cd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011094:	83 ec 0c             	sub    esp,0xc
c0011097:	8d 54 24 65          	lea    edx,[esp+0x65]
c001109b:	52                   	push   edx
c001109c:	e8 9f f4 fe ff       	call   c0000540 <strlen>
c00110a1:	83 c4 10             	add    esp,0x10
c00110a4:	83 f8 3f             	cmp    eax,0x3f
c00110a7:	77 6a                	ja     c0011113 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00110a9:	50                   	push   eax
c00110aa:	50                   	push   eax
c00110ab:	8d 54 24 61          	lea    edx,[esp+0x61]
c00110af:	52                   	push   edx
c00110b0:	8d 54 24 24          	lea    edx,[esp+0x24]
c00110b4:	52                   	push   edx
c00110b5:	e8 46 f5 fe ff       	call   c0000600 <strcpy>
c00110ba:	58                   	pop    eax
c00110bb:	8d 54 24 24          	lea    edx,[esp+0x24]
c00110bf:	52                   	push   edx
c00110c0:	e8 7b f4 fe ff       	call   c0000540 <strlen>
c00110c5:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00110ca:	83 c4 10             	add    esp,0x10
c00110cd:	31 d2                	xor    edx,edx
c00110cf:	eb 3a                	jmp    c001110b <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c00110d1:	80 fb 40             	cmp    bl,0x40
c00110d4:	74 06                	je     c00110dc <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c00110d6:	8d 44 24 58          	lea    eax,[esp+0x58]
c00110da:	eb 20                	jmp    c00110fc <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c00110dc:	50                   	push   eax
c00110dd:	50                   	push   eax
c00110de:	55                   	push   ebp
c00110df:	8d 44 24 24          	lea    eax,[esp+0x24]
c00110e3:	50                   	push   eax
c00110e4:	e8 f7 f5 fe ff       	call   c00006e0 <strcmp>
c00110e9:	83 c4 10             	add    esp,0x10
c00110ec:	85 c0                	test   eax,eax
c00110ee:	75 dd                	jne    c00110cd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00110f0:	eb e4                	jmp    c00110d6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c00110f2:	8d 50 01             	lea    edx,[eax+0x1]
c00110f5:	80 f9 3d             	cmp    cl,0x3d
c00110f8:	74 1d                	je     c0011117 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c00110fa:	89 d0                	mov    eax,edx
c00110fc:	8a 08                	mov    cl,BYTE PTR [eax]
c00110fe:	84 c9                	test   cl,cl
c0011100:	75 f0                	jne    c00110f2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0011102:	eb 0f                	jmp    c0011113 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011104:	8d 50 01             	lea    edx,[eax+0x1]
c0011107:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001110b:	47                   	inc    edi
c001110c:	89 d0                	mov    eax,edx
c001110e:	e9 3b ff ff ff       	jmp    c001104e <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0011113:	31 c0                	xor    eax,eax
c0011115:	eb 33                	jmp    c001114a <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0011117:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001111b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001111e:	50                   	push   eax
c001111f:	50                   	push   eax
c0011120:	8d 44 24 60          	lea    eax,[esp+0x60]
c0011124:	50                   	push   eax
c0011125:	56                   	push   esi
c0011126:	e8 b5 f5 fe ff       	call   c00006e0 <strcmp>
c001112b:	83 c4 10             	add    esp,0x10
c001112e:	85 c0                	test   eax,eax
c0011130:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011134:	75 97                	jne    c00110cd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011136:	51                   	push   ecx
c0011137:	51                   	push   ecx
c0011138:	52                   	push   edx
c0011139:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0011140:	e8 bb f4 fe ff       	call   c0000600 <strcpy>
c0011145:	83 c4 10             	add    esp,0x10
c0011148:	b0 01                	mov    al,0x1
c001114a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0011150:	5b                   	pop    ebx
c0011151:	5e                   	pop    esi
c0011152:	5f                   	pop    edi
c0011153:	5d                   	pop    ebp
c0011154:	c3                   	ret    

c0011155 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0011155:	57                   	push   edi
c0011156:	56                   	push   esi
c0011157:	53                   	push   ebx
c0011158:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001115e:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0011165:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001116c:	53                   	push   ebx
c001116d:	e8 ce f3 fe ff       	call   c0000540 <strlen>
c0011172:	89 34 24             	mov    DWORD PTR [esp],esi
c0011175:	89 c7                	mov    edi,eax
c0011177:	e8 c4 f3 fe ff       	call   c0000540 <strlen>
c001117c:	83 c4 10             	add    esp,0x10
c001117f:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0011183:	3d ff 00 00 00       	cmp    eax,0xff
c0011188:	0f 87 d3 00 00 00    	ja     c0011261 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001118e:	57                   	push   edi
c001118f:	57                   	push   edi
c0011190:	56                   	push   esi
c0011191:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0011195:	56                   	push   esi
c0011196:	e8 65 f4 fe ff       	call   c0000600 <strcpy>
c001119b:	58                   	pop    eax
c001119c:	5a                   	pop    edx
c001119d:	68 e6 e4 01 c0       	push   0xc001e4e6
c00111a2:	56                   	push   esi
c00111a3:	e8 18 f6 fe ff       	call   c00007c0 <strcat>
c00111a8:	59                   	pop    ecx
c00111a9:	5f                   	pop    edi
c00111aa:	53                   	push   ebx
c00111ab:	56                   	push   esi
c00111ac:	e8 0f f6 fe ff       	call   c00007c0 <strcat>
c00111b1:	58                   	pop    eax
c00111b2:	5a                   	pop    edx
c00111b3:	68 49 e2 01 c0       	push   0xc001e249
c00111b8:	56                   	push   esi
c00111b9:	e8 02 f6 fe ff       	call   c00007c0 <strcat>
c00111be:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00111c5:	e8 ef 65 ff ff       	call   c00077b9 <malloc>
c00111ca:	83 c4 0c             	add    esp,0xc
c00111cd:	89 c3                	mov    ebx,eax
c00111cf:	ff 35 10 37 02 c0    	push   DWORD PTR ds:0xc0023710
c00111d5:	56                   	push   esi
c00111d6:	50                   	push   eax
c00111d7:	e8 ee 97 ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c00111dc:	83 c4 10             	add    esp,0x10
c00111df:	85 db                	test   ebx,ebx
c00111e1:	74 7e                	je     c0011261 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00111e3:	51                   	push   ecx
c00111e4:	51                   	push   ecx
c00111e5:	6a 01                	push   0x1
c00111e7:	53                   	push   ebx
c00111e8:	e8 9d 98 ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c00111ed:	83 c4 10             	add    esp,0x10
c00111f0:	85 c0                	test   eax,eax
c00111f2:	74 08                	je     c00111fc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00111f4:	83 ec 0c             	sub    esp,0xc
c00111f7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111f9:	53                   	push   ebx
c00111fa:	eb 5f                	jmp    c001125b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00111fc:	52                   	push   edx
c00111fd:	8d 44 24 17          	lea    eax,[esp+0x17]
c0011201:	50                   	push   eax
c0011202:	8d 44 24 20          	lea    eax,[esp+0x20]
c0011206:	50                   	push   eax
c0011207:	53                   	push   ebx
c0011208:	e8 29 9b ff ff       	call   c000ad36 <File::stat(unsigned long long*, bool*)>
c001120d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011211:	83 c4 10             	add    esp,0x10
c0011214:	89 c1                	mov    ecx,eax
c0011216:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001121a:	74 31                	je     c001124d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001121c:	83 ec 0c             	sub    esp,0xc
c001121f:	50                   	push   eax
c0011220:	e8 94 65 ff ff       	call   c00077b9 <malloc>
c0011225:	89 c6                	mov    esi,eax
c0011227:	58                   	pop    eax
c0011228:	8b 03                	mov    eax,DWORD PTR [ebx]
c001122a:	8d 54 24 20          	lea    edx,[esp+0x20]
c001122e:	52                   	push   edx
c001122f:	56                   	push   esi
c0011230:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011234:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011238:	53                   	push   ebx
c0011239:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001123c:	83 c4 20             	add    esp,0x20
c001123f:	85 c0                	test   eax,eax
c0011241:	75 0a                	jne    c001124d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0011243:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011247:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001124b:	74 18                	je     c0011265 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001124d:	83 ec 0c             	sub    esp,0xc
c0011250:	53                   	push   ebx
c0011251:	e8 92 98 ff ff       	call   c000aae8 <File::close()>
c0011256:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011258:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001125b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001125e:	83 c4 10             	add    esp,0x10
c0011261:	31 c0                	xor    eax,eax
c0011263:	eb 3b                	jmp    c00112a0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0011265:	83 ec 0c             	sub    esp,0xc
c0011268:	53                   	push   ebx
c0011269:	e8 7a 98 ff ff       	call   c000aae8 <File::close()>
c001126e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011270:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011273:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011276:	83 c4 0c             	add    esp,0xc
c0011279:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0011280:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0011287:	56                   	push   esi
c0011288:	e8 70 fd ff ff       	call   c0010ffd <Reg::findLineFromLoadedData(char*, char*, char*)>
c001128d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011290:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011294:	e8 30 65 ff ff       	call   c00077c9 <free>
c0011299:	83 c4 10             	add    esp,0x10
c001129c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00112a0:	81 c4 20 01 00 00    	add    esp,0x120
c00112a6:	5b                   	pop    ebx
c00112a7:	5e                   	pop    esi
c00112a8:	5f                   	pop    edi
c00112a9:	c3                   	ret    

c00112aa <Reg::getLine(char*, char*, char*)>:
c00112aa:	57                   	push   edi
c00112ab:	56                   	push   esi
c00112ac:	53                   	push   ebx
c00112ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00112b1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00112b5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00112b9:	57                   	push   edi
c00112ba:	56                   	push   esi
c00112bb:	53                   	push   ebx
c00112bc:	68 4e e2 01 c0       	push   0xc001e24e
c00112c1:	e8 8f fe ff ff       	call   c0011155 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00112c6:	83 c4 10             	add    esp,0x10
c00112c9:	84 c0                	test   al,al
c00112cb:	75 10                	jne    c00112dd <Reg::getLine(char*, char*, char*)+0x33>
c00112cd:	57                   	push   edi
c00112ce:	56                   	push   esi
c00112cf:	53                   	push   ebx
c00112d0:	68 73 e2 01 c0       	push   0xc001e273
c00112d5:	e8 7b fe ff ff       	call   c0011155 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00112da:	83 c4 10             	add    esp,0x10
c00112dd:	5b                   	pop    ebx
c00112de:	5e                   	pop    esi
c00112df:	5f                   	pop    edi
c00112e0:	c3                   	ret    

c00112e1 <Reg::readInt(char*, char*, int*)>:
c00112e1:	55                   	push   ebp
c00112e2:	57                   	push   edi
c00112e3:	56                   	push   esi
c00112e4:	53                   	push   ebx
c00112e5:	81 ec f0 00 00 00    	sub    esp,0xf0
c00112eb:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00112ef:	57                   	push   edi
c00112f0:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00112f7:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00112fe:	e8 a7 ff ff ff       	call   c00112aa <Reg::getLine(char*, char*, char*)>
c0011303:	83 c4 10             	add    esp,0x10
c0011306:	84 c0                	test   al,al
c0011308:	0f 84 b3 00 00 00    	je     c00113c1 <Reg::readInt(char*, char*, int*)+0xe0>
c001130e:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0011312:	80 fa 2b             	cmp    dl,0x2b
c0011315:	74 0c                	je     c0011323 <Reg::readInt(char*, char*, int*)+0x42>
c0011317:	80 fa 2d             	cmp    dl,0x2d
c001131a:	75 0e                	jne    c001132a <Reg::readInt(char*, char*, int*)+0x49>
c001131c:	ba 01 00 00 00       	mov    edx,0x1
c0011321:	eb 0b                	jmp    c001132e <Reg::readInt(char*, char*, int*)+0x4d>
c0011323:	ba 01 00 00 00       	mov    edx,0x1
c0011328:	eb 02                	jmp    c001132c <Reg::readInt(char*, char*, int*)+0x4b>
c001132a:	31 d2                	xor    edx,edx
c001132c:	31 c0                	xor    eax,eax
c001132e:	be 0a 00 00 00       	mov    esi,0xa
c0011333:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0011338:	75 20                	jne    c001135a <Reg::readInt(char*, char*, int*)+0x79>
c001133a:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001133e:	80 f9 78             	cmp    cl,0x78
c0011341:	75 0a                	jne    c001134d <Reg::readInt(char*, char*, int*)+0x6c>
c0011343:	83 c2 02             	add    edx,0x2
c0011346:	be 10 00 00 00       	mov    esi,0x10
c001134b:	eb 0d                	jmp    c001135a <Reg::readInt(char*, char*, int*)+0x79>
c001134d:	80 f9 62             	cmp    cl,0x62
c0011350:	75 08                	jne    c001135a <Reg::readInt(char*, char*, int*)+0x79>
c0011352:	83 c2 02             	add    edx,0x2
c0011355:	be 02 00 00 00       	mov    esi,0x2
c001135a:	01 d7                	add    edi,edx
c001135c:	31 d2                	xor    edx,edx
c001135e:	8a 1f                	mov    bl,BYTE PTR [edi]
c0011360:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0011364:	80 fb 0d             	cmp    bl,0xd
c0011367:	0f 94 c3             	sete   bl
c001136a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001136f:	0f 94 c1             	sete   cl
c0011372:	08 cb                	or     bl,cl
c0011374:	75 3a                	jne    c00113b0 <Reg::readInt(char*, char*, int*)+0xcf>
c0011376:	0f af d6             	imul   edx,esi
c0011379:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001137e:	83 fe 10             	cmp    esi,0x10
c0011381:	75 26                	jne    c00113a9 <Reg::readInt(char*, char*, int*)+0xc8>
c0011383:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011387:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001138a:	89 e9                	mov    ecx,ebp
c001138c:	80 f9 05             	cmp    cl,0x5
c001138f:	77 06                	ja     c0011397 <Reg::readInt(char*, char*, int*)+0xb6>
c0011391:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0011395:	eb 16                	jmp    c00113ad <Reg::readInt(char*, char*, int*)+0xcc>
c0011397:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001139b:	83 e9 61             	sub    ecx,0x61
c001139e:	80 f9 05             	cmp    cl,0x5
c00113a1:	77 06                	ja     c00113a9 <Reg::readInt(char*, char*, int*)+0xc8>
c00113a3:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00113a7:	eb 04                	jmp    c00113ad <Reg::readInt(char*, char*, int*)+0xcc>
c00113a9:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00113ad:	47                   	inc    edi
c00113ae:	eb ae                	jmp    c001135e <Reg::readInt(char*, char*, int*)+0x7d>
c00113b0:	84 c0                	test   al,al
c00113b2:	74 02                	je     c00113b6 <Reg::readInt(char*, char*, int*)+0xd5>
c00113b4:	f7 da                	neg    edx
c00113b6:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00113bd:	89 10                	mov    DWORD PTR [eax],edx
c00113bf:	88 d8                	mov    al,bl
c00113c1:	81 c4 ec 00 00 00    	add    esp,0xec
c00113c7:	5b                   	pop    ebx
c00113c8:	5e                   	pop    esi
c00113c9:	5f                   	pop    edi
c00113ca:	5d                   	pop    ebp
c00113cb:	c3                   	ret    

c00113cc <Reg::readString(char*, char*, char*, int)>:
c00113cc:	57                   	push   edi
c00113cd:	56                   	push   esi
c00113ce:	53                   	push   ebx
c00113cf:	81 ec d4 00 00 00    	sub    esp,0xd4
c00113d5:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00113dc:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00113e0:	57                   	push   edi
c00113e1:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00113e8:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00113ef:	e8 b6 fe ff ff       	call   c00112aa <Reg::getLine(char*, char*, char*)>
c00113f4:	83 c4 10             	add    esp,0x10
c00113f7:	89 c6                	mov    esi,eax
c00113f9:	84 c0                	test   al,al
c00113fb:	74 44                	je     c0011441 <Reg::readString(char*, char*, char*, int)+0x75>
c00113fd:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0011404:	31 c0                	xor    eax,eax
c0011406:	4a                   	dec    edx
c0011407:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001140a:	84 c9                	test   cl,cl
c001140c:	74 0f                	je     c001141d <Reg::readString(char*, char*, char*, int)+0x51>
c001140e:	39 c2                	cmp    edx,eax
c0011410:	7e 0b                	jle    c001141d <Reg::readString(char*, char*, char*, int)+0x51>
c0011412:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0011415:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001141a:	40                   	inc    eax
c001141b:	eb ea                	jmp    c0011407 <Reg::readString(char*, char*, char*, int)+0x3b>
c001141d:	83 ec 0c             	sub    esp,0xc
c0011420:	53                   	push   ebx
c0011421:	e8 1a f1 fe ff       	call   c0000540 <strlen>
c0011426:	83 c4 10             	add    esp,0x10
c0011429:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001142e:	75 11                	jne    c0011441 <Reg::readString(char*, char*, char*, int)+0x75>
c0011430:	83 ec 0c             	sub    esp,0xc
c0011433:	53                   	push   ebx
c0011434:	e8 07 f1 fe ff       	call   c0000540 <strlen>
c0011439:	83 c4 10             	add    esp,0x10
c001143c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0011441:	81 c4 d0 00 00 00    	add    esp,0xd0
c0011447:	89 f0                	mov    eax,esi
c0011449:	5b                   	pop    ebx
c001144a:	5e                   	pop    esi
c001144b:	5f                   	pop    edi
c001144c:	c3                   	ret    

c001144d <Reg::readBool(char*, char*, bool*)>:
c001144d:	83 ec 20             	sub    esp,0x20
c0011450:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011454:	50                   	push   eax
c0011455:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011459:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001145d:	e8 7f fe ff ff       	call   c00112e1 <Reg::readInt(char*, char*, int*)>
c0011462:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011467:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001146b:	0f 95 02             	setne  BYTE PTR [edx]
c001146e:	83 c4 2c             	add    esp,0x2c
c0011471:	c3                   	ret    

c0011472 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0011472:	53                   	push   ebx
c0011473:	83 ec 1c             	sub    esp,0x1c
c0011476:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001147a:	8d 44 24 13          	lea    eax,[esp+0x13]
c001147e:	50                   	push   eax
c001147f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011487:	e8 c1 ff ff ff       	call   c001144d <Reg::readBool(char*, char*, bool*)>
c001148c:	83 c4 10             	add    esp,0x10
c001148f:	84 c0                	test   al,al
c0011491:	74 04                	je     c0011497 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0011493:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0011497:	88 d8                	mov    al,bl
c0011499:	83 c4 18             	add    esp,0x18
c001149c:	5b                   	pop    ebx
c001149d:	c3                   	ret    

c001149e <Reg::readIntWithDefault(char*, char*, int)>:
c001149e:	53                   	push   ebx
c001149f:	83 ec 1c             	sub    esp,0x1c
c00114a2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00114a6:	8d 44 24 10          	lea    eax,[esp+0x10]
c00114aa:	50                   	push   eax
c00114ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00114af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00114b3:	e8 29 fe ff ff       	call   c00112e1 <Reg::readInt(char*, char*, int*)>
c00114b8:	83 c4 10             	add    esp,0x10
c00114bb:	84 c0                	test   al,al
c00114bd:	74 04                	je     c00114c3 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00114bf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00114c3:	89 d8                	mov    eax,ebx
c00114c5:	83 c4 18             	add    esp,0x18
c00114c8:	5b                   	pop    ebx
c00114c9:	c3                   	ret    

c00114ca <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00114ca:	57                   	push   edi
c00114cb:	56                   	push   esi
c00114cc:	56                   	push   esi
c00114cd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00114d1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00114d5:	56                   	push   esi
c00114d6:	57                   	push   edi
c00114d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114df:	e8 e8 fe ff ff       	call   c00113cc <Reg::readString(char*, char*, char*, int)>
c00114e4:	83 c4 10             	add    esp,0x10
c00114e7:	84 c0                	test   al,al
c00114e9:	75 1a                	jne    c0011505 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00114eb:	51                   	push   ecx
c00114ec:	56                   	push   esi
c00114ed:	6a 00                	push   0x0
c00114ef:	57                   	push   edi
c00114f0:	e8 db ef fe ff       	call   c00004d0 <memset>
c00114f5:	8d 4e ff             	lea    ecx,[esi-0x1]
c00114f8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00114fc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00114fe:	83 c4 10             	add    esp,0x10
c0011501:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011505:	89 f8                	mov    eax,edi
c0011507:	5a                   	pop    edx
c0011508:	5e                   	pop    esi
c0011509:	5f                   	pop    edi
c001150a:	c3                   	ret    

c001150b <SysEject(regs*)>:
c001150b:	83 ec 0c             	sub    esp,0xc
c001150e:	83 ca ff             	or     edx,0xffffffff
c0011511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011515:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011518:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001151d:	83 e9 41             	sub    ecx,0x41
c0011520:	83 f9 19             	cmp    ecx,0x19
c0011523:	77 18                	ja     c001153d <SysEject(regs*)+0x32>
c0011525:	8b 0c 8d a0 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd660]
c001152c:	85 c9                	test   ecx,ecx
c001152e:	74 0d                	je     c001153d <SysEject(regs*)+0x32>
c0011530:	83 ec 0c             	sub    esp,0xc
c0011533:	51                   	push   ecx
c0011534:	e8 ab b5 ff ff       	call   c000cae4 <LogicalDisk::eject()>
c0011539:	83 c4 10             	add    esp,0x10
c001153c:	99                   	cdq    
c001153d:	83 c4 0c             	add    esp,0xc
c0011540:	c3                   	ret    

c0011541 <SysExit(regs*)>:
c0011541:	83 ec 18             	sub    esp,0x18
c0011544:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011548:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001154b:	e8 b0 26 00 00       	call   c0013c00 <terminateTask(int)>
c0011550:	83 c8 ff             	or     eax,0xffffffff
c0011553:	83 c4 1c             	add    esp,0x1c
c0011556:	89 c2                	mov    edx,eax
c0011558:	c3                   	ret    

c0011559 <SysGetCwd(regs*)>:
c0011559:	83 ec 10             	sub    esp,0x10
c001155c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011560:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0011563:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011566:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001156b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001156e:	e8 59 92 ff ff       	call   c000a7cc <Fs::getcwd(Process*, char*, int)>
c0011573:	83 c4 1c             	add    esp,0x1c
c0011576:	99                   	cdq    
c0011577:	c3                   	ret    

c0011578 <SysGetPID(regs*)>:
c0011578:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001157d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011580:	8b 00                	mov    eax,DWORD PTR [eax]
c0011582:	99                   	cdq    
c0011583:	c3                   	ret    

c0011584 <SysGetRAMData(regs*)>:
c0011584:	8b 0d 68 04 02 c0    	mov    ecx,DWORD PTR ds:0xc0020468
c001158a:	69 05 64 04 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0020464,0xc8
c0011594:	99                   	cdq    
c0011595:	f7 f9                	idiv   ecx
c0011597:	c1 e0 18             	shl    eax,0x18
c001159a:	09 c8                	or     eax,ecx
c001159c:	99                   	cdq    
c001159d:	c3                   	ret    

c001159e <SysGetVGAPtr(regs*)>:
c001159e:	55                   	push   ebp
c001159f:	57                   	push   edi
c00115a0:	56                   	push   esi
c00115a1:	53                   	push   ebx
c00115a2:	83 ec 18             	sub    esp,0x18
c00115a5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00115a9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00115ac:	e8 4f 21 00 00       	call   c0013700 <Thr::processFromPID(int)>
c00115b1:	83 c4 10             	add    esp,0x10
c00115b4:	89 c1                	mov    ecx,eax
c00115b6:	b8 01 00 00 00       	mov    eax,0x1
c00115bb:	85 c9                	test   ecx,ecx
c00115bd:	74 57                	je     c0011616 <SysGetVGAPtr(regs*)+0x78>
c00115bf:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00115c5:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00115c9:	74 0c                	je     c00115d7 <SysGetVGAPtr(regs*)+0x39>
c00115cb:	83 ec 0c             	sub    esp,0xc
c00115ce:	55                   	push   ebp
c00115cf:	e8 23 6e ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c00115d4:	83 c4 10             	add    esp,0x10
c00115d7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00115da:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00115dd:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00115e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00115e4:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00115e7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00115ea:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00115f0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00115f3:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00115f6:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00115fc:	50                   	push   eax
c00115fd:	50                   	push   eax
c00115fe:	68 8e e2 01 c0       	push   0xc001e28e
c0011603:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011606:	05 a8 0f 00 00       	add    eax,0xfa8
c001160b:	50                   	push   eax
c001160c:	e8 ef ef fe ff       	call   c0000600 <strcpy>
c0011611:	83 c4 10             	add    esp,0x10
c0011614:	31 c0                	xor    eax,eax
c0011616:	83 c4 0c             	add    esp,0xc
c0011619:	31 d2                	xor    edx,edx
c001161b:	5b                   	pop    ebx
c001161c:	5e                   	pop    esi
c001161d:	5f                   	pop    edi
c001161e:	5d                   	pop    ebp
c001161f:	c3                   	ret    

c0011620 <SysLoadDLL(regs*)>:
c0011620:	56                   	push   esi
c0011621:	53                   	push   ebx
c0011622:	31 d2                	xor    edx,edx
c0011624:	51                   	push   ecx
c0011625:	b8 01 00 00 00       	mov    eax,0x1
c001162a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001162e:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0011632:	0f 84 8c 00 00 00    	je     c00116c4 <SysLoadDLL(regs*)+0xa4>
c0011638:	83 ec 0c             	sub    esp,0xc
c001163b:	68 14 01 00 00       	push   0x114
c0011640:	e8 74 61 ff ff       	call   c00077b9 <malloc>
c0011645:	83 c4 0c             	add    esp,0xc
c0011648:	89 c3                	mov    ebx,eax
c001164a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001164f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011652:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011655:	53                   	push   ebx
c0011656:	e8 6f 93 ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c001165b:	83 c4 10             	add    esp,0x10
c001165e:	31 d2                	xor    edx,edx
c0011660:	b8 02 00 00 00       	mov    eax,0x2
c0011665:	85 db                	test   ebx,ebx
c0011667:	74 5b                	je     c00116c4 <SysLoadDLL(regs*)+0xa4>
c0011669:	83 ec 0c             	sub    esp,0xc
c001166c:	53                   	push   ebx
c001166d:	e8 86 96 ff ff       	call   c000acf8 <File::exists()>
c0011672:	83 c4 10             	add    esp,0x10
c0011675:	84 c0                	test   al,al
c0011677:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011679:	75 11                	jne    c001168c <SysLoadDLL(regs*)+0x6c>
c001167b:	83 ec 0c             	sub    esp,0xc
c001167e:	53                   	push   ebx
c001167f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011682:	83 c4 10             	add    esp,0x10
c0011685:	b8 03 00 00 00       	mov    eax,0x3
c001168a:	eb 36                	jmp    c00116c2 <SysLoadDLL(regs*)+0xa2>
c001168c:	83 ec 0c             	sub    esp,0xc
c001168f:	53                   	push   ebx
c0011690:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011693:	58                   	pop    eax
c0011694:	5a                   	pop    edx
c0011695:	6a 00                	push   0x0
c0011697:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001169a:	e8 4b 12 00 00       	call   c00128ea <Thr::loadDLL(char const*, bool)>
c001169f:	83 c4 10             	add    esp,0x10
c00116a2:	89 c1                	mov    ecx,eax
c00116a4:	31 d2                	xor    edx,edx
c00116a6:	b8 04 00 00 00       	mov    eax,0x4
c00116ab:	85 c9                	test   ecx,ecx
c00116ad:	74 15                	je     c00116c4 <SysLoadDLL(regs*)+0xa4>
c00116af:	53                   	push   ebx
c00116b0:	53                   	push   ebx
c00116b1:	ff 35 38 04 02 c0    	push   DWORD PTR ds:0xc0020438
c00116b7:	51                   	push   ecx
c00116b8:	e8 5e 14 00 00       	call   c0012b1b <Thr::executeDLL(unsigned long, void*)>
c00116bd:	83 c4 10             	add    esp,0x10
c00116c0:	31 c0                	xor    eax,eax
c00116c2:	31 d2                	xor    edx,edx
c00116c4:	59                   	pop    ecx
c00116c5:	5b                   	pop    ebx
c00116c6:	5e                   	pop    esi
c00116c7:	c3                   	ret    

c00116c8 <SysRead(regs*)>:
c00116c8:	57                   	push   edi
c00116c9:	56                   	push   esi
c00116ca:	53                   	push   ebx
c00116cb:	83 ec 10             	sub    esp,0x10
c00116ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00116d2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00116d5:	83 f8 02             	cmp    eax,0x2
c00116d8:	77 10                	ja     c00116ea <SysRead(regs*)+0x22>
c00116da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116df:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00116e2:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00116e8:	eb 0e                	jmp    c00116f8 <SysRead(regs*)+0x30>
c00116ea:	83 ec 0c             	sub    esp,0xc
c00116ed:	50                   	push   eax
c00116ee:	e8 b8 79 ff ff       	call   c00090ab <getFromFileDescriptor(int)>
c00116f3:	83 c4 10             	add    esp,0x10
c00116f6:	89 c1                	mov    ecx,eax
c00116f8:	83 c8 ff             	or     eax,0xffffffff
c00116fb:	85 c9                	test   ecx,ecx
c00116fd:	89 c2                	mov    edx,eax
c00116ff:	74 28                	je     c0011729 <SysRead(regs*)+0x61>
c0011701:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011709:	31 ff                	xor    edi,edi
c001170b:	83 ec 0c             	sub    esp,0xc
c001170e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011710:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011714:	52                   	push   edx
c0011715:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011718:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001171b:	57                   	push   edi
c001171c:	56                   	push   esi
c001171d:	51                   	push   ecx
c001171e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011721:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011725:	83 c4 20             	add    esp,0x20
c0011728:	99                   	cdq    
c0011729:	83 c4 10             	add    esp,0x10
c001172c:	5b                   	pop    ebx
c001172d:	5e                   	pop    esi
c001172e:	5f                   	pop    edi
c001172f:	c3                   	ret    

c0011730 <SysSbrk(regs*)>:
c0011730:	56                   	push   esi
c0011731:	53                   	push   ebx
c0011732:	50                   	push   eax
c0011733:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011738:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001173c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001173f:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0011742:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0011748:	85 db                	test   ebx,ebx
c001174a:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001174d:	74 02                	je     c0011751 <SysSbrk(regs*)+0x21>
c001174f:	79 06                	jns    c0011757 <SysSbrk(regs*)+0x27>
c0011751:	89 f0                	mov    eax,esi
c0011753:	31 d2                	xor    edx,edx
c0011755:	eb 2a                	jmp    c0011781 <SysSbrk(regs*)+0x51>
c0011757:	83 c8 ff             	or     eax,0xffffffff
c001175a:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011760:	89 c2                	mov    edx,eax
c0011762:	77 1d                	ja     c0011781 <SysSbrk(regs*)+0x51>
c0011764:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001176a:	50                   	push   eax
c001176b:	c1 ea 0c             	shr    edx,0xc
c001176e:	68 07 0c 00 00       	push   0xc07
c0011773:	52                   	push   edx
c0011774:	51                   	push   ecx
c0011775:	e8 20 82 ff ff       	call   c000999a <VAS::allocatePages(int, int)>
c001177a:	89 f0                	mov    eax,esi
c001177c:	31 d2                	xor    edx,edx
c001177e:	83 c4 10             	add    esp,0x10
c0011781:	59                   	pop    ecx
c0011782:	5b                   	pop    ebx
c0011783:	5e                   	pop    esi
c0011784:	c3                   	ret    

c0011785 <SysSetCwd(regs*)>:
c0011785:	83 ec 14             	sub    esp,0x14
c0011788:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001178c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001178f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011794:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011797:	e8 fb 95 ff ff       	call   c000ad97 <Fs::setcwd(Process*, char*)>
c001179c:	83 c4 1c             	add    esp,0x1c
c001179f:	99                   	cdq    
c00117a0:	c3                   	ret    

c00117a1 <SysSetTime(regs*)>:
c00117a1:	55                   	push   ebp
c00117a2:	31 c9                	xor    ecx,ecx
c00117a4:	57                   	push   edi
c00117a5:	bd 0c 00 00 00       	mov    ebp,0xc
c00117aa:	56                   	push   esi
c00117ab:	53                   	push   ebx
c00117ac:	31 db                	xor    ebx,ebx
c00117ae:	83 ec 10             	sub    esp,0x10
c00117b1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00117b5:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00117b8:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00117bb:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00117be:	89 c2                	mov    edx,eax
c00117c0:	66 81 ef 6c 07       	sub    di,0x76c
c00117c5:	83 e2 1f             	and    edx,0x1f
c00117c8:	c1 e7 10             	shl    edi,0x10
c00117cb:	42                   	inc    edx
c00117cc:	c1 e8 05             	shr    eax,0x5
c00117cf:	88 d1                	mov    cl,dl
c00117d1:	31 d2                	xor    edx,edx
c00117d3:	f7 f5                	div    ebp
c00117d5:	89 dd                	mov    ebp,ebx
c00117d7:	88 d5                	mov    ch,dl
c00117d9:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00117df:	0f b7 c1             	movzx  eax,cx
c00117e2:	31 d2                	xor    edx,edx
c00117e4:	09 f8                	or     eax,edi
c00117e6:	bf 3c 00 00 00       	mov    edi,0x3c
c00117eb:	89 c1                	mov    ecx,eax
c00117ed:	89 f0                	mov    eax,esi
c00117ef:	f7 f7                	div    edi
c00117f1:	c1 e2 10             	shl    edx,0x10
c00117f4:	09 d5                	or     ebp,edx
c00117f6:	31 d2                	xor    edx,edx
c00117f8:	89 eb                	mov    ebx,ebp
c00117fa:	f7 f7                	div    edi
c00117fc:	bf 10 0e 00 00       	mov    edi,0xe10
c0011801:	88 d7                	mov    bh,dl
c0011803:	89 f0                	mov    eax,esi
c0011805:	31 d2                	xor    edx,edx
c0011807:	f7 f7                	div    edi
c0011809:	bf 18 00 00 00       	mov    edi,0x18
c001180e:	31 d2                	xor    edx,edx
c0011810:	f7 f7                	div    edi
c0011812:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c0011817:	88 d3                	mov    bl,dl
c0011819:	53                   	push   ebx
c001181a:	51                   	push   ecx
c001181b:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011821:	e8 82 9d ff ff       	call   c000b5a8 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0011826:	83 c4 1c             	add    esp,0x1c
c0011829:	83 f0 01             	xor    eax,0x1
c001182c:	5b                   	pop    ebx
c001182d:	0f b6 c0             	movzx  eax,al
c0011830:	5e                   	pop    esi
c0011831:	31 d2                	xor    edx,edx
c0011833:	5f                   	pop    edi
c0011834:	5d                   	pop    ebp
c0011835:	c3                   	ret    

c0011836 <SysTimezone(regs*)>:
c0011836:	53                   	push   ebx
c0011837:	83 ec 08             	sub    esp,0x8
c001183a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001183e:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0011842:	75 17                	jne    c001185b <SysTimezone(regs*)+0x25>
c0011844:	83 ec 0c             	sub    esp,0xc
c0011847:	68 98 e2 01 c0       	push   0xc001e298
c001184c:	e8 03 8c ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0011851:	83 c8 ff             	or     eax,0xffffffff
c0011854:	83 c4 10             	add    esp,0x10
c0011857:	89 c2                	mov    edx,eax
c0011859:	eb 20                	jmp    c001187b <SysTimezone(regs*)+0x45>
c001185b:	83 ec 0c             	sub    esp,0xc
c001185e:	68 ad e2 01 c0       	push   0xc001e2ad
c0011863:	e8 ec 8b ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0011868:	58                   	pop    eax
c0011869:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001186c:	e8 93 9a ff ff       	call   c000b304 <User::loadClockSettings(int)>
c0011871:	83 c4 10             	add    esp,0x10
c0011874:	b8 01 00 00 00       	mov    eax,0x1
c0011879:	31 d2                	xor    edx,edx
c001187b:	83 c4 08             	add    esp,0x8
c001187e:	5b                   	pop    ebx
c001187f:	c3                   	ret    

c0011880 <SysWrite(regs*)>:
c0011880:	57                   	push   edi
c0011881:	56                   	push   esi
c0011882:	53                   	push   ebx
c0011883:	83 ec 10             	sub    esp,0x10
c0011886:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001188a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001188d:	83 f8 02             	cmp    eax,0x2
c0011890:	77 10                	ja     c00118a2 <SysWrite(regs*)+0x22>
c0011892:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011897:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001189a:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00118a0:	eb 0e                	jmp    c00118b0 <SysWrite(regs*)+0x30>
c00118a2:	83 ec 0c             	sub    esp,0xc
c00118a5:	50                   	push   eax
c00118a6:	e8 00 78 ff ff       	call   c00090ab <getFromFileDescriptor(int)>
c00118ab:	83 c4 10             	add    esp,0x10
c00118ae:	89 c1                	mov    ecx,eax
c00118b0:	83 c8 ff             	or     eax,0xffffffff
c00118b3:	85 c9                	test   ecx,ecx
c00118b5:	89 c2                	mov    edx,eax
c00118b7:	74 28                	je     c00118e1 <SysWrite(regs*)+0x61>
c00118b9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00118c1:	31 ff                	xor    edi,edi
c00118c3:	83 ec 0c             	sub    esp,0xc
c00118c6:	8b 01                	mov    eax,DWORD PTR [ecx]
c00118c8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00118cc:	52                   	push   edx
c00118cd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00118d0:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00118d3:	57                   	push   edi
c00118d4:	56                   	push   esi
c00118d5:	51                   	push   ecx
c00118d6:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00118d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00118dd:	83 c4 20             	add    esp,0x20
c00118e0:	99                   	cdq    
c00118e1:	83 c4 10             	add    esp,0x10
c00118e4:	5b                   	pop    ebx
c00118e5:	5e                   	pop    esi
c00118e6:	5f                   	pop    edi
c00118e7:	c3                   	ret    

c00118e8 <SysWsbe(regs*)>:
c00118e8:	57                   	push   edi
c00118e9:	b9 0b 00 00 00       	mov    ecx,0xb
c00118ee:	56                   	push   esi
c00118ef:	be ec e2 01 c0       	mov    esi,0xc001e2ec
c00118f4:	53                   	push   ebx
c00118f5:	83 ec 30             	sub    esp,0x30
c00118f8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00118fc:	fc                   	cld    
c00118fd:	83 ec 0c             	sub    esp,0xc
c0011900:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011902:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0011906:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001190b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001190e:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011914:	8b 06                	mov    eax,DWORD PTR [esi]
c0011916:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0011919:	57                   	push   edi
c001191a:	e8 21 ec fe ff       	call   c0000540 <strlen>
c001191f:	5a                   	pop    edx
c0011920:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011924:	52                   	push   edx
c0011925:	31 d2                	xor    edx,edx
c0011927:	57                   	push   edi
c0011928:	52                   	push   edx
c0011929:	50                   	push   eax
c001192a:	56                   	push   esi
c001192b:	ff d3                	call   ebx
c001192d:	83 c4 14             	add    esp,0x14
c0011930:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011934:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011937:	e8 c4 22 00 00       	call   c0013c00 <terminateTask(int)>
c001193c:	83 c4 40             	add    esp,0x40
c001193f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011944:	5b                   	pop    ebx
c0011945:	31 d2                	xor    edx,edx
c0011947:	5e                   	pop    esi
c0011948:	5f                   	pop    edi
c0011949:	c3                   	ret    

c001194a <SysYield(regs*)>:
c001194a:	83 ec 0c             	sub    esp,0xc
c001194d:	fa                   	cli    
c001194e:	ff 05 e8 36 02 c0    	inc    DWORD PTR ds:0xc00236e8
c0011954:	e8 83 19 00 00       	call   c00132dc <schedule()>
c0011959:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c001195e:	48                   	dec    eax
c001195f:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c0011964:	75 01                	jne    c0011967 <SysYield(regs*)+0x1d>
c0011966:	fb                   	sti    
c0011967:	31 c0                	xor    eax,eax
c0011969:	31 d2                	xor    edx,edx
c001196b:	83 c4 0c             	add    esp,0xc
c001196e:	c3                   	ret    

c001196f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001196f:	55                   	push   ebp
c0011970:	57                   	push   edi
c0011971:	56                   	push   esi
c0011972:	53                   	push   ebx
c0011973:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011979:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0011981:	0f 95 c2             	setne  dl
c0011984:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001198c:	0f 94 c0             	sete   al
c001198f:	84 c2                	test   dl,al
c0011991:	74 34                	je     c00119c7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011993:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001199e:	74 27                	je     c00119c7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c00119a0:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00119a7:	05 00 10 00 00       	add    eax,0x1000
c00119ac:	89 c1                	mov    ecx,eax
c00119ae:	25 00 f0 ff ff       	and    eax,0xfffff000
c00119b3:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00119b9:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00119c0:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00119c7:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00119ce:	83 ec 0c             	sub    esp,0xc
c00119d1:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00119d7:	6a 01                	push   0x1
c00119d9:	e8 23 78 ff ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c00119de:	83 c4 10             	add    esp,0x10
c00119e1:	89 c3                	mov    ebx,eax
c00119e3:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00119e9:	0f 86 25 01 00 00    	jbe    c0011b14 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c00119ef:	c1 ee 0c             	shr    esi,0xc
c00119f2:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00119f9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00119fd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011a05:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011a0c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011a10:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011a17:	29 ef                	sub    edi,ebp
c0011a19:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011a1d:	0f 83 f8 00 00 00    	jae    c0011b1b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011a23:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011a29:	76 05                	jbe    c0011a30 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011a2b:	bf 00 10 00 00       	mov    edi,0x1000
c0011a30:	83 ec 0c             	sub    esp,0xc
c0011a33:	31 d2                	xor    edx,edx
c0011a35:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011a3c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011a3e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011a42:	50                   	push   eax
c0011a43:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011a47:	56                   	push   esi
c0011a48:	52                   	push   edx
c0011a49:	57                   	push   edi
c0011a4a:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0011a51:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011a54:	83 c4 20             	add    esp,0x20
c0011a57:	85 c0                	test   eax,eax
c0011a59:	75 06                	jne    c0011a61 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011a5b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011a5f:	74 13                	je     c0011a74 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011a61:	83 ec 0c             	sub    esp,0xc
c0011a64:	53                   	push   ebx
c0011a65:	e8 c7 7a ff ff       	call   c0009531 <Virt::freeKernelVirtualPages(unsigned long)>
c0011a6a:	83 c4 10             	add    esp,0x10
c0011a6d:	31 c0                	xor    eax,eax
c0011a6f:	e9 7c 01 00 00       	jmp    c0011bf0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011a74:	fa                   	cli    
c0011a75:	ff 05 e8 36 02 c0    	inc    DWORD PTR ds:0xc00236e8
c0011a7b:	e8 15 60 ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011a80:	6a 07                	push   0x7
c0011a82:	89 c7                	mov    edi,eax
c0011a84:	53                   	push   ebx
c0011a85:	50                   	push   eax
c0011a86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a8b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a8e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011a94:	e8 fd 7d ff ff       	call   c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011a99:	83 c4 0c             	add    esp,0xc
c0011a9c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011aa3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011aa9:	6a 00                	push   0x0
c0011aab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ab0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ab3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011ab9:	e8 4a 7c ff ff       	call   c0009708 <VAS::mapOtherVASIn(bool, VAS*)>
c0011abe:	58                   	pop    eax
c0011abf:	5a                   	pop    edx
c0011ac0:	68 07 0c 00 00       	push   0xc07
c0011ac5:	55                   	push   ebp
c0011ac6:	57                   	push   edi
c0011ac7:	89 df                	mov    edi,ebx
c0011ac9:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011ad0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011ad6:	6a 00                	push   0x0
c0011ad8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011add:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ae0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011ae6:	e8 6b 81 ff ff       	call   c0009c56 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011aeb:	b9 00 10 00 00       	mov    ecx,0x1000
c0011af0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011af2:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0011af7:	83 c4 20             	add    esp,0x20
c0011afa:	48                   	dec    eax
c0011afb:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c0011b00:	85 c0                	test   eax,eax
c0011b02:	75 01                	jne    c0011b05 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0011b04:	fb                   	sti    
c0011b05:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011b0b:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011b0f:	e9 f1 fe ff ff       	jmp    c0011a05 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0011b14:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011b1b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011b22:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011b28:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011b2e:	0f 86 ae 00 00 00    	jbe    c0011be2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011b34:	fa                   	cli    
c0011b35:	ff 05 e8 36 02 c0    	inc    DWORD PTR ds:0xc00236e8
c0011b3b:	c1 ee 0c             	shr    esi,0xc
c0011b3e:	51                   	push   ecx
c0011b3f:	31 ff                	xor    edi,edi
c0011b41:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011b48:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b4e:	6a 00                	push   0x0
c0011b50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b55:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b58:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b5e:	e8 a5 7b ff ff       	call   c0009708 <VAS::mapOtherVASIn(bool, VAS*)>
c0011b63:	83 c4 10             	add    esp,0x10
c0011b66:	e8 2a 5f ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011b6b:	47                   	inc    edi
c0011b6c:	6a 07                	push   0x7
c0011b6e:	53                   	push   ebx
c0011b6f:	50                   	push   eax
c0011b70:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011b74:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011b7a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0011b7d:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0011b83:	e8 0e 7d ff ff       	call   c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b88:	58                   	pop    eax
c0011b89:	5a                   	pop    edx
c0011b8a:	68 07 0c 00 00       	push   0xc07
c0011b8f:	55                   	push   ebp
c0011b90:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011b96:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011b9a:	50                   	push   eax
c0011b9b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011ba2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011ba8:	6a 00                	push   0x0
c0011baa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011baf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bb2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011bb8:	e8 99 80 ff ff       	call   c0009c56 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011bbd:	83 c4 1c             	add    esp,0x1c
c0011bc0:	68 00 10 00 00       	push   0x1000
c0011bc5:	6a 00                	push   0x0
c0011bc7:	53                   	push   ebx
c0011bc8:	e8 03 e9 fe ff       	call   c00004d0 <memset>
c0011bcd:	83 c4 10             	add    esp,0x10
c0011bd0:	39 fe                	cmp    esi,edi
c0011bd2:	77 92                	ja     c0011b66 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0011bd4:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0011bd9:	48                   	dec    eax
c0011bda:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c0011bdf:	75 01                	jne    c0011be2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011be1:	fb                   	sti    
c0011be2:	83 ec 0c             	sub    esp,0xc
c0011be5:	53                   	push   ebx
c0011be6:	e8 46 79 ff ff       	call   c0009531 <Virt::freeKernelVirtualPages(unsigned long)>
c0011beb:	83 c4 10             	add    esp,0x10
c0011bee:	b0 01                	mov    al,0x1
c0011bf0:	81 c4 2c 10 00 00    	add    esp,0x102c
c0011bf6:	5b                   	pop    ebx
c0011bf7:	5e                   	pop    esi
c0011bf8:	5f                   	pop    edi
c0011bf9:	5d                   	pop    ebp
c0011bfa:	c3                   	ret    

c0011bfb <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0011bfb:	55                   	push   ebp
c0011bfc:	57                   	push   edi
c0011bfd:	56                   	push   esi
c0011bfe:	53                   	push   ebx
c0011bff:	83 ec 48             	sub    esp,0x48
c0011c02:	68 14 01 00 00       	push   0x114
c0011c07:	e8 ad 5b ff ff       	call   c00077b9 <malloc>
c0011c0c:	83 c4 0c             	add    esp,0xc
c0011c0f:	89 c6                	mov    esi,eax
c0011c11:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011c15:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011c19:	50                   	push   eax
c0011c1a:	e8 ab 8d ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c0011c1f:	58                   	pop    eax
c0011c20:	5a                   	pop    edx
c0011c21:	6a 01                	push   0x1
c0011c23:	56                   	push   esi
c0011c24:	e8 61 8e ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c0011c29:	83 c4 10             	add    esp,0x10
c0011c2c:	85 c0                	test   eax,eax
c0011c2e:	0f 85 47 01 00 00    	jne    c0011d7b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011c34:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011c3c:	83 ec 0c             	sub    esp,0xc
c0011c3f:	6a 34                	push   0x34
c0011c41:	e8 73 5b ff ff       	call   c00077b9 <malloc>
c0011c46:	89 c3                	mov    ebx,eax
c0011c48:	58                   	pop    eax
c0011c49:	8b 06                	mov    eax,DWORD PTR [esi]
c0011c4b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0011c4f:	57                   	push   edi
c0011c50:	53                   	push   ebx
c0011c51:	6a 00                	push   0x0
c0011c53:	6a 34                	push   0x34
c0011c55:	56                   	push   esi
c0011c56:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011c59:	83 c4 20             	add    esp,0x20
c0011c5c:	85 c0                	test   eax,eax
c0011c5e:	0f 85 17 01 00 00    	jne    c0011d7b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011c64:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0011c6a:	0f 85 0b 01 00 00    	jne    c0011d7b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011c70:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c73:	85 c0                	test   eax,eax
c0011c75:	0f 84 00 01 00 00    	je     c0011d7b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011c7b:	31 d2                	xor    edx,edx
c0011c7d:	55                   	push   ebp
c0011c7e:	52                   	push   edx
c0011c7f:	50                   	push   eax
c0011c80:	56                   	push   esi
c0011c81:	e8 c2 8e ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c0011c86:	83 c4 10             	add    esp,0x10
c0011c89:	85 c0                	test   eax,eax
c0011c8b:	0f 85 ea 00 00 00    	jne    c0011d7b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011c91:	83 ec 0c             	sub    esp,0xc
c0011c94:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011c97:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011c9b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011c9f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011ca3:	0f af c2             	imul   eax,edx
c0011ca6:	50                   	push   eax
c0011ca7:	e8 0d 5b ff ff       	call   c00077b9 <malloc>
c0011cac:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011cae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011cb2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011cb5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011cb9:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011cbd:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011cc1:	0f af c2             	imul   eax,edx
c0011cc4:	99                   	cdq    
c0011cc5:	52                   	push   edx
c0011cc6:	50                   	push   eax
c0011cc7:	56                   	push   esi
c0011cc8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011ccb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0011cce:	83 c4 20             	add    esp,0x20
c0011cd1:	85 c0                	test   eax,eax
c0011cd3:	0f 84 a2 00 00 00    	je     c0011d7b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011cd9:	31 d2                	xor    edx,edx
c0011cdb:	51                   	push   ecx
c0011cdc:	52                   	push   edx
c0011cdd:	50                   	push   eax
c0011cde:	56                   	push   esi
c0011cdf:	e8 64 8e ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c0011ce4:	83 c4 10             	add    esp,0x10
c0011ce7:	85 c0                	test   eax,eax
c0011ce9:	0f 85 8c 00 00 00    	jne    c0011d7b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011cef:	83 ec 0c             	sub    esp,0xc
c0011cf2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0011cf6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0011cfa:	31 ed                	xor    ebp,ebp
c0011cfc:	0f af c2             	imul   eax,edx
c0011cff:	50                   	push   eax
c0011d00:	e8 b4 5a ff ff       	call   c00077b9 <malloc>
c0011d05:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011d07:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011d0b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d12:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0011d16:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0011d1a:	0f af c2             	imul   eax,edx
c0011d1d:	99                   	cdq    
c0011d1e:	52                   	push   edx
c0011d1f:	50                   	push   eax
c0011d20:	56                   	push   esi
c0011d21:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011d24:	83 c4 20             	add    esp,0x20
c0011d27:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011d2f:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0011d33:	0f 86 80 00 00 00    	jbe    c0011db9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0011d39:	0f b7 fd             	movzx  edi,bp
c0011d3c:	c1 e7 05             	shl    edi,0x5
c0011d3f:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0011d43:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0011d46:	75 6b                	jne    c0011db3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0011d48:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011d4b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011d4f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0011d52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011d56:	52                   	push   edx
c0011d57:	31 d2                	xor    edx,edx
c0011d59:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011d5c:	52                   	push   edx
c0011d5d:	50                   	push   eax
c0011d5e:	56                   	push   esi
c0011d5f:	e8 e4 8d ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c0011d64:	83 c4 10             	add    esp,0x10
c0011d67:	85 c0                	test   eax,eax
c0011d69:	74 17                	je     c0011d82 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0011d6b:	83 ec 0c             	sub    esp,0xc
c0011d6e:	68 18 e3 01 c0       	push   0xc001e318
c0011d73:	e8 dc 86 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0011d78:	83 c4 10             	add    esp,0x10
c0011d7b:	31 c0                	xor    eax,eax
c0011d7d:	e9 87 00 00 00       	jmp    c0011e09 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0011d82:	83 ec 0c             	sub    esp,0xc
c0011d85:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0011d88:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0011d8b:	50                   	push   eax
c0011d8c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011d90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011d94:	56                   	push   esi
c0011d95:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0011d99:	e8 d1 fb ff ff       	call   c001196f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0011d9e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011da2:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0011da6:	83 c4 20             	add    esp,0x20
c0011da9:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0011dad:	73 04                	jae    c0011db3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0011daf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011db3:	45                   	inc    ebp
c0011db4:	e9 76 ff ff ff       	jmp    c0011d2f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0011db9:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0011dbd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011dc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011dc5:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0011dcb:	83 ec 0c             	sub    esp,0xc
c0011dce:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0011dd4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011dd9:	05 00 10 00 00       	add    eax,0x1000
c0011dde:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011de1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011de5:	e8 df 59 ff ff       	call   c00077c9 <free>
c0011dea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011ded:	e8 d7 59 ff ff       	call   c00077c9 <free>
c0011df2:	58                   	pop    eax
c0011df3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011df7:	e8 cd 59 ff ff       	call   c00077c9 <free>
c0011dfc:	89 34 24             	mov    DWORD PTR [esp],esi
c0011dff:	e8 e4 8c ff ff       	call   c000aae8 <File::close()>
c0011e04:	83 c4 10             	add    esp,0x10
c0011e07:	b0 01                	mov    al,0x1
c0011e09:	83 c4 3c             	add    esp,0x3c
c0011e0c:	5b                   	pop    ebx
c0011e0d:	5e                   	pop    esi
c0011e0e:	5f                   	pop    edi
c0011e0f:	5d                   	pop    ebp
c0011e10:	c3                   	ret    

c0011e11 <Thr::runtimeReferenceHelper()>:
c0011e11:	83 ec 18             	sub    esp,0x18
c0011e14:	68 20 e3 01 c0       	push   0xc001e320
c0011e19:	e8 36 86 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0011e1e:	fa                   	cli    
c0011e1f:	83 c4 10             	add    esp,0x10
c0011e22:	eb fe                	jmp    c0011e22 <Thr::runtimeReferenceHelper()+0x11>

c0011e24 <Thr::getAddressOfKernelSymbol(char const*)>:
c0011e24:	57                   	push   edi
c0011e25:	56                   	push   esi
c0011e26:	53                   	push   ebx
c0011e27:	31 db                	xor    ebx,ebx
c0011e29:	39 1d c0 36 02 c0    	cmp    DWORD PTR ds:0xc00236c0,ebx
c0011e2f:	7e 3c                	jle    c0011e6d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0011e31:	8b 34 9d 40 36 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdc9c0]
c0011e38:	31 ff                	xor    edi,edi
c0011e3a:	39 3c 9d 40 35 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdcac0],edi
c0011e41:	7e 27                	jle    c0011e6a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0011e43:	50                   	push   eax
c0011e44:	50                   	push   eax
c0011e45:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011e49:	8b 06                	mov    eax,DWORD PTR [esi]
c0011e4b:	03 04 9d c0 35 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdca40]
c0011e52:	50                   	push   eax
c0011e53:	e8 88 e8 fe ff       	call   c00006e0 <strcmp>
c0011e58:	83 c4 10             	add    esp,0x10
c0011e5b:	85 c0                	test   eax,eax
c0011e5d:	75 05                	jne    c0011e64 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0011e5f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011e62:	eb 0b                	jmp    c0011e6f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0011e64:	83 c6 10             	add    esi,0x10
c0011e67:	47                   	inc    edi
c0011e68:	eb d0                	jmp    c0011e3a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0011e6a:	43                   	inc    ebx
c0011e6b:	eb bc                	jmp    c0011e29 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0011e6d:	31 c0                	xor    eax,eax
c0011e6f:	5b                   	pop    ebx
c0011e70:	5e                   	pop    esi
c0011e71:	5f                   	pop    edi
c0011e72:	c3                   	ret    

c0011e73 <Thr::loadKernelSymbolTable(char const*)>:
c0011e73:	55                   	push   ebp
c0011e74:	57                   	push   edi
c0011e75:	56                   	push   esi
c0011e76:	53                   	push   ebx
c0011e77:	83 ec 68             	sub    esp,0x68
c0011e7a:	8b 35 10 37 02 c0    	mov    esi,DWORD PTR ds:0xc0023710
c0011e80:	68 14 01 00 00       	push   0x114
c0011e85:	e8 2f 59 ff ff       	call   c00077b9 <malloc>
c0011e8a:	83 c4 0c             	add    esp,0xc
c0011e8d:	89 c3                	mov    ebx,eax
c0011e8f:	56                   	push   esi
c0011e90:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0011e94:	50                   	push   eax
c0011e95:	e8 30 8b ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c0011e9a:	5e                   	pop    esi
c0011e9b:	5f                   	pop    edi
c0011e9c:	6a 01                	push   0x1
c0011e9e:	53                   	push   ebx
c0011e9f:	e8 e6 8b ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c0011ea4:	83 c4 10             	add    esp,0x10
c0011ea7:	85 c0                	test   eax,eax
c0011ea9:	74 0a                	je     c0011eb5 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0011eab:	83 ec 0c             	sub    esp,0xc
c0011eae:	68 42 e3 01 c0       	push   0xc001e342
c0011eb3:	eb 34                	jmp    c0011ee9 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0011eb5:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0011ebd:	83 ec 0c             	sub    esp,0xc
c0011ec0:	6a 34                	push   0x34
c0011ec2:	e8 f2 58 ff ff       	call   c00077b9 <malloc>
c0011ec7:	59                   	pop    ecx
c0011ec8:	89 c7                	mov    edi,eax
c0011eca:	8d 74 24 34          	lea    esi,[esp+0x34]
c0011ece:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011ed0:	56                   	push   esi
c0011ed1:	57                   	push   edi
c0011ed2:	6a 00                	push   0x0
c0011ed4:	6a 34                	push   0x34
c0011ed6:	53                   	push   ebx
c0011ed7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011eda:	83 c4 20             	add    esp,0x20
c0011edd:	85 c0                	test   eax,eax
c0011edf:	74 17                	je     c0011ef8 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0011ee1:	83 ec 0c             	sub    esp,0xc
c0011ee4:	68 59 e3 01 c0       	push   0xc001e359
c0011ee9:	e8 dd e1 ff ff       	call   c00100cb <KePanic(char const*)>
c0011eee:	83 c4 10             	add    esp,0x10
c0011ef1:	31 c0                	xor    eax,eax
c0011ef3:	e9 31 02 00 00       	jmp    c0012129 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0011ef8:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0011efe:	75 e1                	jne    c0011ee1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011f00:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0011f03:	85 c0                	test   eax,eax
c0011f05:	74 da                	je     c0011ee1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011f07:	52                   	push   edx
c0011f08:	31 d2                	xor    edx,edx
c0011f0a:	52                   	push   edx
c0011f0b:	50                   	push   eax
c0011f0c:	53                   	push   ebx
c0011f0d:	e8 36 8c ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c0011f12:	83 c4 10             	add    esp,0x10
c0011f15:	85 c0                	test   eax,eax
c0011f17:	75 c8                	jne    c0011ee1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011f19:	83 ec 0c             	sub    esp,0xc
c0011f1c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0011f20:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011f24:	31 ed                	xor    ebp,ebp
c0011f26:	0f af c2             	imul   eax,edx
c0011f29:	50                   	push   eax
c0011f2a:	e8 8a 58 ff ff       	call   c00077b9 <malloc>
c0011f2f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0011f31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011f35:	89 34 24             	mov    DWORD PTR [esp],esi
c0011f38:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011f3c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0011f40:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011f44:	0f af c2             	imul   eax,edx
c0011f47:	99                   	cdq    
c0011f48:	52                   	push   edx
c0011f49:	50                   	push   eax
c0011f4a:	53                   	push   ebx
c0011f4b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011f4e:	83 c4 20             	add    esp,0x20
c0011f51:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011f59:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0011f61:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011f69:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011f71:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0011f75:	0f 86 aa 00 00 00    	jbe    c0012025 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0011f7b:	0f b7 f5             	movzx  esi,bp
c0011f7e:	6b f6 28             	imul   esi,esi,0x28
c0011f81:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0011f85:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0011f88:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011f8c:	50                   	push   eax
c0011f8d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011f91:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0011f95:	8b 16                	mov    edx,DWORD PTR [esi]
c0011f97:	6b c0 28             	imul   eax,eax,0x28
c0011f9a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0011f9e:	89 d0                	mov    eax,edx
c0011fa0:	31 d2                	xor    edx,edx
c0011fa2:	52                   	push   edx
c0011fa3:	50                   	push   eax
c0011fa4:	53                   	push   ebx
c0011fa5:	e8 9e 8b ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c0011faa:	83 c4 0c             	add    esp,0xc
c0011fad:	6a 20                	push   0x20
c0011faf:	6a 00                	push   0x0
c0011fb1:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0011fb5:	52                   	push   edx
c0011fb6:	e8 15 e5 fe ff       	call   c00004d0 <memset>
c0011fbb:	58                   	pop    eax
c0011fbc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011fbe:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0011fc2:	51                   	push   ecx
c0011fc3:	8d 54 24 40          	lea    edx,[esp+0x40]
c0011fc7:	52                   	push   edx
c0011fc8:	6a 00                	push   0x0
c0011fca:	6a 1f                	push   0x1f
c0011fcc:	53                   	push   ebx
c0011fcd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011fd0:	83 c4 18             	add    esp,0x18
c0011fd3:	68 70 e3 01 c0       	push   0xc001e370
c0011fd8:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0011fdc:	52                   	push   edx
c0011fdd:	e8 fe e6 fe ff       	call   c00006e0 <strcmp>
c0011fe2:	83 c4 10             	add    esp,0x10
c0011fe5:	85 c0                	test   eax,eax
c0011fe7:	75 0f                	jne    c0011ff8 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0011fe9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011fec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ff0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ff4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ff8:	50                   	push   eax
c0011ff9:	50                   	push   eax
c0011ffa:	68 78 e3 01 c0       	push   0xc001e378
c0011fff:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012003:	50                   	push   eax
c0012004:	e8 d7 e6 fe ff       	call   c00006e0 <strcmp>
c0012009:	83 c4 10             	add    esp,0x10
c001200c:	85 c0                	test   eax,eax
c001200e:	75 0f                	jne    c001201f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0012010:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012013:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012017:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001201b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001201f:	45                   	inc    ebp
c0012020:	e9 4c ff ff ff       	jmp    c0011f71 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0012025:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001202a:	75 10                	jne    c001203c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001202c:	83 ec 0c             	sub    esp,0xc
c001202f:	68 80 e3 01 c0       	push   0xc001e380
c0012034:	e8 92 e0 ff ff       	call   c00100cb <KePanic(char const*)>
c0012039:	83 c4 10             	add    esp,0x10
c001203c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012041:	75 10                	jne    c0012053 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0012043:	83 ec 0c             	sub    esp,0xc
c0012046:	68 80 e3 01 c0       	push   0xc001e380
c001204b:	e8 7b e0 ff ff       	call   c00100cb <KePanic(char const*)>
c0012050:	83 c4 10             	add    esp,0x10
c0012053:	31 d2                	xor    edx,edx
c0012055:	50                   	push   eax
c0012056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001205a:	52                   	push   edx
c001205b:	50                   	push   eax
c001205c:	53                   	push   ebx
c001205d:	e8 e6 8a ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c0012062:	5a                   	pop    edx
c0012063:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012067:	e8 4d 57 ff ff       	call   c00077b9 <malloc>
c001206c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012070:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012074:	31 c9                	xor    ecx,ecx
c0012076:	5e                   	pop    esi
c0012077:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012079:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001207d:	55                   	push   ebp
c001207e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012082:	51                   	push   ecx
c0012083:	52                   	push   edx
c0012084:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012088:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001208c:	53                   	push   ebx
c001208d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012090:	83 c4 14             	add    esp,0x14
c0012093:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012097:	e8 1d 57 ff ff       	call   c00077b9 <malloc>
c001209c:	89 c6                	mov    esi,eax
c001209e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00120a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00120a3:	56                   	push   esi
c00120a4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00120a8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00120ac:	51                   	push   ecx
c00120ad:	52                   	push   edx
c00120ae:	53                   	push   ebx
c00120af:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00120b2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00120b6:	8b 15 c0 36 02 c0    	mov    edx,DWORD PTR ds:0xc00236c0
c00120bc:	83 c4 1c             	add    esp,0x1c
c00120bf:	c1 e8 04             	shr    eax,0x4
c00120c2:	89 04 95 40 35 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcac0],eax
c00120c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120cd:	31 d2                	xor    edx,edx
c00120cf:	52                   	push   edx
c00120d0:	50                   	push   eax
c00120d1:	53                   	push   ebx
c00120d2:	e8 71 8a ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c00120d7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00120d9:	31 d2                	xor    edx,edx
c00120db:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00120de:	56                   	push   esi
c00120df:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00120e3:	52                   	push   edx
c00120e4:	50                   	push   eax
c00120e5:	53                   	push   ebx
c00120e6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00120e9:	83 c4 14             	add    esp,0x14
c00120ec:	53                   	push   ebx
c00120ed:	e8 f6 89 ff ff       	call   c000aae8 <File::close()>
c00120f2:	5d                   	pop    ebp
c00120f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120f7:	e8 cd 56 ff ff       	call   c00077c9 <free>
c00120fc:	89 3c 24             	mov    DWORD PTR [esp],edi
c00120ff:	e8 c5 56 ff ff       	call   c00077c9 <free>
c0012104:	a1 c0 36 02 c0       	mov    eax,ds:0xc00236c0
c0012109:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001210d:	8d 50 01             	lea    edx,[eax+0x1]
c0012110:	89 0c 85 40 36 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc9c0],ecx
c0012117:	89 34 85 c0 35 02 c0 	mov    DWORD PTR [eax*4-0x3ffdca40],esi
c001211e:	89 15 c0 36 02 c0    	mov    DWORD PTR ds:0xc00236c0,edx
c0012124:	83 c4 10             	add    esp,0x10
c0012127:	b0 01                	mov    al,0x1
c0012129:	83 c4 5c             	add    esp,0x5c
c001212c:	5b                   	pop    ebx
c001212d:	5e                   	pop    esi
c001212e:	5f                   	pop    edi
c001212f:	5d                   	pop    ebp
c0012130:	c3                   	ret    

c0012131 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0012131:	55                   	push   ebp
c0012132:	57                   	push   edi
c0012133:	56                   	push   esi
c0012134:	53                   	push   ebx
c0012135:	81 ec 68 03 00 00    	sub    esp,0x368
c001213b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0012142:	8b 1d 10 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023710
c0012148:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001214c:	68 14 01 00 00       	push   0x114
c0012151:	e8 63 56 ff ff       	call   c00077b9 <malloc>
c0012156:	83 c4 0c             	add    esp,0xc
c0012159:	89 c5                	mov    ebp,eax
c001215b:	53                   	push   ebx
c001215c:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0012163:	50                   	push   eax
c0012164:	e8 61 88 ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c0012169:	5e                   	pop    esi
c001216a:	5f                   	pop    edi
c001216b:	6a 01                	push   0x1
c001216d:	55                   	push   ebp
c001216e:	e8 17 89 ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c0012173:	83 c4 10             	add    esp,0x10
c0012176:	85 c0                	test   eax,eax
c0012178:	0f 85 a7 06 00 00    	jne    c0012825 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001217e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0012186:	83 ec 0c             	sub    esp,0xc
c0012189:	6a 34                	push   0x34
c001218b:	e8 29 56 ff ff       	call   c00077b9 <malloc>
c0012190:	5b                   	pop    ebx
c0012191:	89 c7                	mov    edi,eax
c0012193:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012197:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001219a:	53                   	push   ebx
c001219b:	57                   	push   edi
c001219c:	6a 00                	push   0x0
c001219e:	6a 34                	push   0x34
c00121a0:	55                   	push   ebp
c00121a1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00121a4:	83 c4 20             	add    esp,0x20
c00121a7:	85 c0                	test   eax,eax
c00121a9:	0f 85 76 06 00 00    	jne    c0012825 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00121af:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00121b5:	0f 85 6a 06 00 00    	jne    c0012825 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00121bb:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00121be:	85 c0                	test   eax,eax
c00121c0:	0f 84 5f 06 00 00    	je     c0012825 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00121c6:	31 d2                	xor    edx,edx
c00121c8:	51                   	push   ecx
c00121c9:	52                   	push   edx
c00121ca:	50                   	push   eax
c00121cb:	55                   	push   ebp
c00121cc:	e8 77 89 ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c00121d1:	83 c4 10             	add    esp,0x10
c00121d4:	85 c0                	test   eax,eax
c00121d6:	0f 85 49 06 00 00    	jne    c0012825 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00121dc:	83 ec 0c             	sub    esp,0xc
c00121df:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00121e2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00121e6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00121ea:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00121ee:	0f af c2             	imul   eax,edx
c00121f1:	50                   	push   eax
c00121f2:	e8 c2 55 ff ff       	call   c00077b9 <malloc>
c00121f7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00121fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00121fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012201:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012205:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012209:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001220d:	0f af c2             	imul   eax,edx
c0012210:	99                   	cdq    
c0012211:	52                   	push   edx
c0012212:	50                   	push   eax
c0012213:	55                   	push   ebp
c0012214:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012217:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001221a:	83 c4 20             	add    esp,0x20
c001221d:	85 c0                	test   eax,eax
c001221f:	0f 84 00 06 00 00    	je     c0012825 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012225:	52                   	push   edx
c0012226:	31 d2                	xor    edx,edx
c0012228:	52                   	push   edx
c0012229:	50                   	push   eax
c001222a:	55                   	push   ebp
c001222b:	e8 18 89 ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c0012230:	83 c4 10             	add    esp,0x10
c0012233:	85 c0                	test   eax,eax
c0012235:	0f 85 ea 05 00 00    	jne    c0012825 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001223b:	83 ec 0c             	sub    esp,0xc
c001223e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012242:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012246:	31 f6                	xor    esi,esi
c0012248:	0f af c2             	imul   eax,edx
c001224b:	50                   	push   eax
c001224c:	e8 68 55 ff ff       	call   c00077b9 <malloc>
c0012251:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012254:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012258:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001225b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001225f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012263:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012267:	0f af c2             	imul   eax,edx
c001226a:	99                   	cdq    
c001226b:	52                   	push   edx
c001226c:	50                   	push   eax
c001226d:	55                   	push   ebp
c001226e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012271:	83 c4 20             	add    esp,0x20
c0012274:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0012278:	0f 86 8a 00 00 00    	jbe    c0012308 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001227e:	0f b7 de             	movzx  ebx,si
c0012281:	c1 e3 05             	shl    ebx,0x5
c0012284:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0012288:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001228b:	75 75                	jne    c0012302 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001228d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012290:	31 d2                	xor    edx,edx
c0012292:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012296:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0012299:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001229d:	50                   	push   eax
c001229e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00122a1:	52                   	push   edx
c00122a2:	50                   	push   eax
c00122a3:	55                   	push   ebp
c00122a4:	e8 9f 88 ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c00122a9:	83 c4 10             	add    esp,0x10
c00122ac:	85 c0                	test   eax,eax
c00122ae:	0f 85 71 05 00 00    	jne    c0012825 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00122b4:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00122bb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00122be:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00122c2:	31 d2                	xor    edx,edx
c00122c4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00122c8:	83 ec 0c             	sub    esp,0xc
c00122cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00122cf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00122d6:	50                   	push   eax
c00122d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00122db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122df:	52                   	push   edx
c00122e0:	50                   	push   eax
c00122e1:	55                   	push   ebp
c00122e2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00122e5:	83 c4 1c             	add    esp,0x1c
c00122e8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00122eb:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00122ee:	50                   	push   eax
c00122ef:	6a 00                	push   0x0
c00122f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122f5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00122f9:	50                   	push   eax
c00122fa:	e8 d1 e1 fe ff       	call   c00004d0 <memset>
c00122ff:	83 c4 10             	add    esp,0x10
c0012302:	46                   	inc    esi
c0012303:	e9 6c ff ff ff       	jmp    c0012274 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0012308:	53                   	push   ebx
c0012309:	31 db                	xor    ebx,ebx
c001230b:	68 00 01 00 00       	push   0x100
c0012310:	6a 00                	push   0x0
c0012312:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0012316:	50                   	push   eax
c0012317:	e8 b4 e1 fe ff       	call   c00004d0 <memset>
c001231c:	83 c4 0c             	add    esp,0xc
c001231f:	68 00 01 00 00       	push   0x100
c0012324:	6a 00                	push   0x0
c0012326:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001232d:	50                   	push   eax
c001232e:	e8 9d e1 fe ff       	call   c00004d0 <memset>
c0012333:	83 c4 10             	add    esp,0x10
c0012336:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001233e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012346:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001234e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012356:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001235e:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0012362:	0f 86 30 01 00 00    	jbe    c0012498 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0012368:	0f b7 f3             	movzx  esi,bx
c001236b:	6b f6 28             	imul   esi,esi,0x28
c001236e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012372:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012375:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012379:	52                   	push   edx
c001237a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001237e:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0012382:	8b 06                	mov    eax,DWORD PTR [esi]
c0012384:	6b d2 28             	imul   edx,edx,0x28
c0012387:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001238b:	31 d2                	xor    edx,edx
c001238d:	52                   	push   edx
c001238e:	50                   	push   eax
c001238f:	55                   	push   ebp
c0012390:	e8 b3 87 ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c0012395:	83 c4 0c             	add    esp,0xc
c0012398:	6a 20                	push   0x20
c001239a:	6a 00                	push   0x0
c001239c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00123a3:	51                   	push   ecx
c00123a4:	e8 27 e1 fe ff       	call   c00004d0 <memset>
c00123a9:	59                   	pop    ecx
c00123aa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00123ad:	8d 54 24 58          	lea    edx,[esp+0x58]
c00123b1:	52                   	push   edx
c00123b2:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00123b9:	51                   	push   ecx
c00123ba:	6a 00                	push   0x0
c00123bc:	6a 1f                	push   0x1f
c00123be:	55                   	push   ebp
c00123bf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00123c2:	83 c4 1c             	add    esp,0x1c
c00123c5:	6a 09                	push   0x9
c00123c7:	68 9a e3 01 c0       	push   0xc001e39a
c00123cc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00123d3:	51                   	push   ecx
c00123d4:	e8 b7 df fe ff       	call   c0000390 <memcmp>
c00123d9:	83 c4 10             	add    esp,0x10
c00123dc:	85 c0                	test   eax,eax
c00123de:	75 21                	jne    c0012401 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00123e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00123e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00123e8:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00123ec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00123f0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00123f3:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00123fa:	89 d0                	mov    eax,edx
c00123fc:	40                   	inc    eax
c00123fd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012401:	50                   	push   eax
c0012402:	6a 09                	push   0x9
c0012404:	68 a4 e3 01 c0       	push   0xc001e3a4
c0012409:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012410:	50                   	push   eax
c0012411:	e8 7a df fe ff       	call   c0000390 <memcmp>
c0012416:	83 c4 10             	add    esp,0x10
c0012419:	85 c0                	test   eax,eax
c001241b:	75 21                	jne    c001243e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001241d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012421:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012425:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012429:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001242d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012430:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012437:	89 d0                	mov    eax,edx
c0012439:	40                   	inc    eax
c001243a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001243e:	50                   	push   eax
c001243f:	50                   	push   eax
c0012440:	68 70 e3 01 c0       	push   0xc001e370
c0012445:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001244c:	50                   	push   eax
c001244d:	e8 8e e2 fe ff       	call   c00006e0 <strcmp>
c0012452:	83 c4 10             	add    esp,0x10
c0012455:	85 c0                	test   eax,eax
c0012457:	75 0f                	jne    c0012468 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0012459:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001245c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012460:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012468:	50                   	push   eax
c0012469:	50                   	push   eax
c001246a:	68 78 e3 01 c0       	push   0xc001e378
c001246f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012476:	50                   	push   eax
c0012477:	e8 64 e2 fe ff       	call   c00006e0 <strcmp>
c001247c:	83 c4 10             	add    esp,0x10
c001247f:	85 c0                	test   eax,eax
c0012481:	75 0f                	jne    c0012492 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0012483:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012486:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001248a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001248e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012492:	43                   	inc    ebx
c0012493:	e9 c6 fe ff ff       	jmp    c001235e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0012498:	31 d2                	xor    edx,edx
c001249a:	50                   	push   eax
c001249b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001249f:	52                   	push   edx
c00124a0:	50                   	push   eax
c00124a1:	55                   	push   ebp
c00124a2:	e8 a1 86 ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c00124a7:	58                   	pop    eax
c00124a8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00124ac:	e8 08 53 ff ff       	call   c00077b9 <malloc>
c00124b1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00124b4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00124b8:	31 d2                	xor    edx,edx
c00124ba:	58                   	pop    eax
c00124bb:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00124bf:	53                   	push   ebx
c00124c0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00124c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00124c8:	52                   	push   edx
c00124c9:	50                   	push   eax
c00124ca:	55                   	push   ebp
c00124cb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00124ce:	83 c4 14             	add    esp,0x14
c00124d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00124d5:	e8 df 52 ff ff       	call   c00077b9 <malloc>
c00124da:	31 d2                	xor    edx,edx
c00124dc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00124e0:	83 c4 0c             	add    esp,0xc
c00124e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00124e7:	52                   	push   edx
c00124e8:	50                   	push   eax
c00124e9:	55                   	push   ebp
c00124ea:	e8 59 86 ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c00124ef:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00124f2:	31 d2                	xor    edx,edx
c00124f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00124f7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00124fb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124ff:	52                   	push   edx
c0012500:	50                   	push   eax
c0012501:	55                   	push   ebp
c0012502:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012505:	83 c4 20             	add    esp,0x20
c0012508:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012510:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012514:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0012518:	0f 84 0b 03 00 00    	je     c0012829 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001251e:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0012525:	31 d2                	xor    edx,edx
c0012527:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001252b:	c1 e8 03             	shr    eax,0x3
c001252e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012532:	51                   	push   ecx
c0012533:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012537:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001253b:	52                   	push   edx
c001253c:	50                   	push   eax
c001253d:	55                   	push   ebp
c001253e:	e8 05 86 ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c0012543:	5b                   	pop    ebx
c0012544:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012548:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001254f:	e8 65 52 ff ff       	call   c00077b9 <malloc>
c0012554:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001255b:	31 d2                	xor    edx,edx
c001255d:	5e                   	pop    esi
c001255e:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012562:	50                   	push   eax
c0012563:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012567:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001256b:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012572:	52                   	push   edx
c0012573:	50                   	push   eax
c0012574:	55                   	push   ebp
c0012575:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012578:	83 c4 20             	add    esp,0x20
c001257b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012583:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012587:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001258b:	0f 8d 7c 02 00 00    	jge    c001280d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012591:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012595:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012599:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001259e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c00125a1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00125a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125a9:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c00125ad:	89 d8                	mov    eax,ebx
c00125af:	c1 e8 08             	shr    eax,0x8
c00125b2:	89 c6                	mov    esi,eax
c00125b4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00125b8:	c1 e6 04             	shl    esi,0x4
c00125bb:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00125bf:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00125c2:	85 d2                	test   edx,edx
c00125c4:	0f 85 bf 00 00 00    	jne    c0012689 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00125ca:	83 ec 0c             	sub    esp,0xc
c00125cd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00125d1:	03 06                	add    eax,DWORD PTR [esi]
c00125d3:	50                   	push   eax
c00125d4:	e8 4b f8 ff ff       	call   c0011e24 <Thr::getAddressOfKernelSymbol(char const*)>
c00125d9:	83 c4 10             	add    esp,0x10
c00125dc:	89 c2                	mov    edx,eax
c00125de:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c00125e3:	85 c0                	test   eax,eax
c00125e5:	0f 85 9e 00 00 00    	jne    c0012689 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00125eb:	83 ec 0c             	sub    esp,0xc
c00125ee:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00125f2:	03 06                	add    eax,DWORD PTR [esi]
c00125f4:	50                   	push   eax
c00125f5:	e8 22 dc ff ff       	call   c001021c <KeResolveCompatibilitySymbol(char*)>
c00125fa:	83 c4 10             	add    esp,0x10
c00125fd:	89 c2                	mov    edx,eax
c00125ff:	85 c0                	test   eax,eax
c0012601:	0f 85 82 00 00 00    	jne    c0012689 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012607:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001260b:	50                   	push   eax
c001260c:	50                   	push   eax
c001260d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012611:	03 06                	add    eax,DWORD PTR [esi]
c0012613:	50                   	push   eax
c0012614:	68 ae e3 01 c0       	push   0xc001e3ae
c0012619:	e8 36 7e ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c001261e:	58                   	pop    eax
c001261f:	5a                   	pop    edx
c0012620:	68 c8 e3 01 c0       	push   0xc001e3c8
c0012625:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001262c:	50                   	push   eax
c001262d:	e8 ce df fe ff       	call   c0000600 <strcpy>
c0012632:	59                   	pop    ecx
c0012633:	58                   	pop    eax
c0012634:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012638:	03 06                	add    eax,DWORD PTR [esi]
c001263a:	50                   	push   eax
c001263b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012642:	50                   	push   eax
c0012643:	e8 78 e1 fe ff       	call   c00007c0 <strcat>
c0012648:	58                   	pop    eax
c0012649:	5a                   	pop    edx
c001264a:	68 5e e4 01 c0       	push   0xc001e45e
c001264f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012656:	50                   	push   eax
c0012657:	e8 64 e1 fe ff       	call   c00007c0 <strcat>
c001265c:	83 c4 10             	add    esp,0x10
c001265f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012664:	0f 84 5d 01 00 00    	je     c00127c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001266a:	83 ec 0c             	sub    esp,0xc
c001266d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012674:	50                   	push   eax
c0012675:	e8 51 da ff ff       	call   c00100cb <KePanic(char const*)>
c001267a:	83 c4 10             	add    esp,0x10
c001267d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012681:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012685:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012689:	80 fb 01             	cmp    bl,0x1
c001268c:	0f 85 88 00 00 00    	jne    c001271a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012692:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012699:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001269d:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c00126a1:	01 ce                	add    esi,ecx
c00126a3:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00126a9:	0f 94 c0             	sete   al
c00126ac:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00126b2:	0f 94 c3             	sete   bl
c00126b5:	09 c3                	or     ebx,eax
c00126b7:	8b 06                	mov    eax,DWORD PTR [esi]
c00126b9:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00126be:	74 41                	je     c0012701 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c00126c0:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00126c3:	84 db                	test   bl,bl
c00126c5:	75 15                	jne    c00126dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c00126c7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00126cb:	66 83 f8 0c          	cmp    ax,0xc
c00126cf:	76 05                	jbe    c00126d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c00126d1:	b8 0c 00 00 00       	mov    eax,0xc
c00126d6:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00126da:	76 37                	jbe    c0012713 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00126dc:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00126e0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00126e5:	0f 84 dc 00 00 00    	je     c00127c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00126eb:	83 ec 0c             	sub    esp,0xc
c00126ee:	68 df e3 01 c0       	push   0xc001e3df
c00126f3:	e8 d3 d9 ff ff       	call   c00100cb <KePanic(char const*)>
c00126f8:	83 c4 10             	add    esp,0x10
c00126fb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00126ff:	eb 12                	jmp    c0012713 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012701:	01 c1                	add    ecx,eax
c0012703:	84 db                	test   bl,bl
c0012705:	75 0c                	jne    c0012713 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012707:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001270b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001270f:	77 02                	ja     c0012713 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012711:	01 d1                	add    ecx,edx
c0012713:	89 0e                	mov    DWORD PTR [esi],ecx
c0012715:	e9 ea 00 00 00       	jmp    c0012804 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001271a:	80 fb 02             	cmp    bl,0x2
c001271d:	75 7c                	jne    c001279b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001271f:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012726:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001272a:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001272e:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012734:	74 20                	je     c0012756 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012736:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001273c:	74 18                	je     c0012756 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001273e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012742:	b9 0a 00 00 00       	mov    ecx,0xa
c0012747:	66 83 f8 0e          	cmp    ax,0xe
c001274b:	77 03                	ja     c0012750 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001274d:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012750:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012754:	76 1f                	jbe    c0012775 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012756:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001275a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001275f:	74 66                	je     c00127c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012761:	83 ec 0c             	sub    esp,0xc
c0012764:	68 fb e3 01 c0       	push   0xc001e3fb
c0012769:	e8 5d d9 ff ff       	call   c00100cb <KePanic(char const*)>
c001276e:	83 c4 10             	add    esp,0x10
c0012771:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012775:	8b 06                	mov    eax,DWORD PTR [esi]
c0012777:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001277c:	74 13                	je     c0012791 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001277e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012782:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012789:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001278d:	01 c8                	add    eax,ecx
c001278f:	eb 04                	jmp    c0012795 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012791:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012795:	01 c2                	add    edx,eax
c0012797:	89 16                	mov    DWORD PTR [esi],edx
c0012799:	eb 69                	jmp    c0012804 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001279b:	0f b6 db             	movzx  ebx,bl
c001279e:	50                   	push   eax
c001279f:	50                   	push   eax
c00127a0:	53                   	push   ebx
c00127a1:	68 17 e4 01 c0       	push   0xc001e417
c00127a6:	e8 a9 7c ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c00127ab:	83 c4 10             	add    esp,0x10
c00127ae:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00127b3:	74 12                	je     c00127c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00127b5:	83 ec 0c             	sub    esp,0xc
c00127b8:	68 22 e4 01 c0       	push   0xc001e422
c00127bd:	e8 09 d9 ff ff       	call   c00100cb <KePanic(char const*)>
c00127c2:	83 c4 10             	add    esp,0x10
c00127c5:	eb 3d                	jmp    c0012804 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00127c7:	83 ec 0c             	sub    esp,0xc
c00127ca:	55                   	push   ebp
c00127cb:	e8 18 83 ff ff       	call   c000aae8 <File::close()>
c00127d0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127d3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00127d6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00127d9:	59                   	pop    ecx
c00127da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00127de:	e8 e6 4f ff ff       	call   c00077c9 <free>
c00127e3:	5b                   	pop    ebx
c00127e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00127e8:	e8 dc 4f ff ff       	call   c00077c9 <free>
c00127ed:	89 3c 24             	mov    DWORD PTR [esp],edi
c00127f0:	e8 d4 4f ff ff       	call   c00077c9 <free>
c00127f5:	5e                   	pop    esi
c00127f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127fa:	e8 ca 4f ff ff       	call   c00077c9 <free>
c00127ff:	83 c4 10             	add    esp,0x10
c0012802:	eb 21                	jmp    c0012825 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012804:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012808:	e9 76 fd ff ff       	jmp    c0012583 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001280d:	83 ec 0c             	sub    esp,0xc
c0012810:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012814:	e8 b0 4f ff ff       	call   c00077c9 <free>
c0012819:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001281d:	83 c4 10             	add    esp,0x10
c0012820:	e9 eb fc ff ff       	jmp    c0012510 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012825:	31 c0                	xor    eax,eax
c0012827:	eb 33                	jmp    c001285c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012829:	83 ec 0c             	sub    esp,0xc
c001282c:	55                   	push   ebp
c001282d:	e8 b6 82 ff ff       	call   c000aae8 <File::close()>
c0012832:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012835:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012838:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001283b:	58                   	pop    eax
c001283c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012840:	e8 84 4f ff ff       	call   c00077c9 <free>
c0012845:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012848:	e8 7c 4f ff ff       	call   c00077c9 <free>
c001284d:	5a                   	pop    edx
c001284e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012852:	e8 72 4f ff ff       	call   c00077c9 <free>
c0012857:	83 c4 10             	add    esp,0x10
c001285a:	b0 01                	mov    al,0x1
c001285c:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012862:	5b                   	pop    ebx
c0012863:	5e                   	pop    esi
c0012864:	5f                   	pop    edi
c0012865:	5d                   	pop    ebp
c0012866:	c3                   	ret    

c0012867 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0012867:	56                   	push   esi
c0012868:	31 d2                	xor    edx,edx
c001286a:	53                   	push   ebx
c001286b:	8b 1d 20 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f20
c0012871:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012875:	39 d3                	cmp    ebx,edx
c0012877:	7e 1b                	jle    c0012894 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012879:	8b 04 95 40 31 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcec0]
c0012880:	39 c8                	cmp    eax,ecx
c0012882:	77 0d                	ja     c0012891 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012884:	8b 34 95 40 2f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdd0c0]
c001288b:	01 c6                	add    esi,eax
c001288d:	39 ce                	cmp    esi,ecx
c001288f:	77 05                	ja     c0012896 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012891:	42                   	inc    edx
c0012892:	eb e1                	jmp    c0012875 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012894:	31 c0                	xor    eax,eax
c0012896:	5b                   	pop    ebx
c0012897:	5e                   	pop    esi
c0012898:	c3                   	ret    

c0012899 <Thr::getDriverNameFromAddress(unsigned long)>:
c0012899:	53                   	push   ebx
c001289a:	31 c0                	xor    eax,eax
c001289c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00128a0:	8b 1d 20 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f20
c00128a6:	39 c3                	cmp    ebx,eax
c00128a8:	7e 22                	jle    c00128cc <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00128aa:	8b 14 85 40 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcec0]
c00128b1:	39 ca                	cmp    edx,ecx
c00128b3:	77 14                	ja     c00128c9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00128b5:	03 14 85 40 2f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdd0c0]
c00128bc:	39 ca                	cmp    edx,ecx
c00128be:	76 09                	jbe    c00128c9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00128c0:	8b 04 85 40 33 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdccc0]
c00128c7:	eb 05                	jmp    c00128ce <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00128c9:	40                   	inc    eax
c00128ca:	eb da                	jmp    c00128a6 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00128cc:	31 c0                	xor    eax,eax
c00128ce:	5b                   	pop    ebx
c00128cf:	c3                   	ret    

c00128d0 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00128d0:	53                   	push   ebx
c00128d1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00128d5:	53                   	push   ebx
c00128d6:	e8 8c ff ff ff       	call   c0012867 <Thr::getDriverBaseFromAddress(unsigned long)>
c00128db:	5a                   	pop    edx
c00128dc:	31 d2                	xor    edx,edx
c00128de:	85 c0                	test   eax,eax
c00128e0:	74 04                	je     c00128e6 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00128e2:	89 da                	mov    edx,ebx
c00128e4:	29 c2                	sub    edx,eax
c00128e6:	89 d0                	mov    eax,edx
c00128e8:	5b                   	pop    ebx
c00128e9:	c3                   	ret    

c00128ea <Thr::loadDLL(char const*, bool)>:
c00128ea:	55                   	push   ebp
c00128eb:	57                   	push   edi
c00128ec:	56                   	push   esi
c00128ed:	53                   	push   ebx
c00128ee:	81 ec 34 01 00 00    	sub    esp,0x134
c00128f4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00128fb:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012902:	56                   	push   esi
c0012903:	68 3a e4 01 c0       	push   0xc001e43a
c0012908:	e8 47 7b ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c001290d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012914:	e8 a0 4e ff ff       	call   c00077b9 <malloc>
c0012919:	83 c4 0c             	add    esp,0xc
c001291c:	89 c3                	mov    ebx,eax
c001291e:	ff 35 10 37 02 c0    	push   DWORD PTR ds:0xc0023710
c0012924:	56                   	push   esi
c0012925:	50                   	push   eax
c0012926:	e8 9f 80 ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c001292b:	83 c4 10             	add    esp,0x10
c001292e:	85 db                	test   ebx,ebx
c0012930:	75 3c                	jne    c001296e <Thr::loadDLL(char const*, bool)+0x84>
c0012932:	89 f8                	mov    eax,edi
c0012934:	84 c0                	test   al,al
c0012936:	0f 84 d2 01 00 00    	je     c0012b0e <Thr::loadDLL(char const*, bool)+0x224>
c001293c:	55                   	push   ebp
c001293d:	55                   	push   ebp
c001293e:	68 4b e4 01 c0       	push   0xc001e44b
c0012943:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0012947:	55                   	push   ebp
c0012948:	e8 b3 dc fe ff       	call   c0000600 <strcpy>
c001294d:	58                   	pop    eax
c001294e:	5a                   	pop    edx
c001294f:	56                   	push   esi
c0012950:	55                   	push   ebp
c0012951:	e8 6a de fe ff       	call   c00007c0 <strcat>
c0012956:	59                   	pop    ecx
c0012957:	58                   	pop    eax
c0012958:	68 5e e4 01 c0       	push   0xc001e45e
c001295d:	55                   	push   ebp
c001295e:	e8 5d de fe ff       	call   c00007c0 <strcat>
c0012963:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012966:	e8 60 d7 ff ff       	call   c00100cb <KePanic(char const*)>
c001296b:	83 c4 10             	add    esp,0x10
c001296e:	51                   	push   ecx
c001296f:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012973:	50                   	push   eax
c0012974:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012978:	50                   	push   eax
c0012979:	53                   	push   ebx
c001297a:	e8 b7 83 ff ff       	call   c000ad36 <File::stat(unsigned long long*, bool*)>
c001297f:	83 c4 10             	add    esp,0x10
c0012982:	85 db                	test   ebx,ebx
c0012984:	74 0c                	je     c0012992 <Thr::loadDLL(char const*, bool)+0xa8>
c0012986:	83 ec 0c             	sub    esp,0xc
c0012989:	8b 03                	mov    eax,DWORD PTR [ebx]
c001298b:	53                   	push   ebx
c001298c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001298f:	83 c4 10             	add    esp,0x10
c0012992:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012997:	75 0a                	jne    c00129a3 <Thr::loadDLL(char const*, bool)+0xb9>
c0012999:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001299d:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00129a1:	75 3c                	jne    c00129df <Thr::loadDLL(char const*, bool)+0xf5>
c00129a3:	89 f8                	mov    eax,edi
c00129a5:	84 c0                	test   al,al
c00129a7:	0f 84 49 01 00 00    	je     c0012af6 <Thr::loadDLL(char const*, bool)+0x20c>
c00129ad:	51                   	push   ecx
c00129ae:	51                   	push   ecx
c00129af:	68 4b e4 01 c0       	push   0xc001e44b
c00129b4:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00129b8:	53                   	push   ebx
c00129b9:	e8 42 dc fe ff       	call   c0000600 <strcpy>
c00129be:	5d                   	pop    ebp
c00129bf:	58                   	pop    eax
c00129c0:	56                   	push   esi
c00129c1:	53                   	push   ebx
c00129c2:	e8 f9 dd fe ff       	call   c00007c0 <strcat>
c00129c7:	58                   	pop    eax
c00129c8:	5a                   	pop    edx
c00129c9:	68 5e e4 01 c0       	push   0xc001e45e
c00129ce:	53                   	push   ebx
c00129cf:	e8 ec dd fe ff       	call   c00007c0 <strcat>
c00129d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00129d7:	e8 ef d6 ff ff       	call   c00100cb <KePanic(char const*)>
c00129dc:	83 c4 10             	add    esp,0x10
c00129df:	52                   	push   edx
c00129e0:	6a 03                	push   0x3
c00129e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00129e6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00129ea:	05 ff 0f 00 00       	add    eax,0xfff
c00129ef:	83 d2 00             	adc    edx,0x0
c00129f2:	0f ac d0 0c          	shrd   eax,edx,0xc
c00129f6:	50                   	push   eax
c00129f7:	ff 35 30 05 02 c0    	push   DWORD PTR ds:0xc0020530
c00129fd:	e8 98 6f ff ff       	call   c000999a <VAS::allocatePages(int, int)>
c0012a02:	59                   	pop    ecx
c0012a03:	89 c3                	mov    ebx,eax
c0012a05:	5d                   	pop    ebp
c0012a06:	50                   	push   eax
c0012a07:	68 16 d2 01 c0       	push   0xc001d216
c0012a0c:	e8 43 7a ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0012a11:	89 34 24             	mov    DWORD PTR [esp],esi
c0012a14:	e8 27 db fe ff       	call   c0000540 <strlen>
c0012a19:	8b 2d 20 2f 02 c0    	mov    ebp,DWORD PTR ds:0xc0022f20
c0012a1f:	40                   	inc    eax
c0012a20:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a23:	e8 91 4d ff ff       	call   c00077b9 <malloc>
c0012a28:	89 04 ad 40 33 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdccc0],eax
c0012a2f:	58                   	pop    eax
c0012a30:	a1 20 2f 02 c0       	mov    eax,ds:0xc0022f20
c0012a35:	5a                   	pop    edx
c0012a36:	56                   	push   esi
c0012a37:	ff 34 85 40 33 02 c0 	push   DWORD PTR [eax*4-0x3ffdccc0]
c0012a3e:	e8 bd db fe ff       	call   c0000600 <strcpy>
c0012a43:	a1 20 2f 02 c0       	mov    eax,ds:0xc0022f20
c0012a48:	8d 50 01             	lea    edx,[eax+0x1]
c0012a4b:	89 1c 85 40 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcec0],ebx
c0012a52:	89 15 20 2f 02 c0    	mov    DWORD PTR ds:0xc0022f20,edx
c0012a58:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012a5c:	83 c4 0c             	add    esp,0xc
c0012a5f:	89 14 85 40 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd0c0],edx
c0012a66:	6a 01                	push   0x1
c0012a68:	53                   	push   ebx
c0012a69:	56                   	push   esi
c0012a6a:	e8 c2 f6 ff ff       	call   c0012131 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012a6f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012a73:	83 c4 10             	add    esp,0x10
c0012a76:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012a7b:	0f 85 89 00 00 00    	jne    c0012b0a <Thr::loadDLL(char const*, bool)+0x220>
c0012a81:	89 f8                	mov    eax,edi
c0012a83:	84 c0                	test   al,al
c0012a85:	74 73                	je     c0012afa <Thr::loadDLL(char const*, bool)+0x210>
c0012a87:	83 ec 0c             	sub    esp,0xc
c0012a8a:	68 60 e4 01 c0       	push   0xc001e460
c0012a8f:	e8 37 d6 ff ff       	call   c00100cb <KePanic(char const*)>
c0012a94:	83 c4 10             	add    esp,0x10
c0012a97:	eb 61                	jmp    c0012afa <Thr::loadDLL(char const*, bool)+0x210>
c0012a99:	50                   	push   eax
c0012a9a:	50                   	push   eax
c0012a9b:	89 e8                	mov    eax,ebp
c0012a9d:	c1 e0 0c             	shl    eax,0xc
c0012aa0:	01 d8                	add    eax,ebx
c0012aa2:	50                   	push   eax
c0012aa3:	ff 35 30 05 02 c0    	push   DWORD PTR ds:0xc0020530
c0012aa9:	e8 64 6a ff ff       	call   c0009512 <VAS::getPageTableEntry(unsigned long)>
c0012aae:	83 c4 10             	add    esp,0x10
c0012ab1:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ab3:	a8 60                	test   al,0x60
c0012ab5:	75 11                	jne    c0012ac8 <Thr::loadDLL(char const*, bool)+0x1de>
c0012ab7:	83 ec 0c             	sub    esp,0xc
c0012aba:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012abf:	50                   	push   eax
c0012ac0:	e8 6e 4f ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0012ac5:	83 c4 10             	add    esp,0x10
c0012ac8:	45                   	inc    ebp
c0012ac9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012acd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012ad1:	05 ff 0f 00 00       	add    eax,0xfff
c0012ad6:	bf 00 00 00 00       	mov    edi,0x0
c0012adb:	83 d2 00             	adc    edx,0x0
c0012ade:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012ae2:	c1 ea 0c             	shr    edx,0xc
c0012ae5:	39 c5                	cmp    ebp,eax
c0012ae7:	89 d1                	mov    ecx,edx
c0012ae9:	89 f8                	mov    eax,edi
c0012aeb:	19 c8                	sbb    eax,ecx
c0012aed:	72 aa                	jb     c0012a99 <Thr::loadDLL(char const*, bool)+0x1af>
c0012aef:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012af4:	75 18                	jne    c0012b0e <Thr::loadDLL(char const*, bool)+0x224>
c0012af6:	31 db                	xor    ebx,ebx
c0012af8:	eb 14                	jmp    c0012b0e <Thr::loadDLL(char const*, bool)+0x224>
c0012afa:	83 ec 0c             	sub    esp,0xc
c0012afd:	68 7f e4 01 c0       	push   0xc001e47f
c0012b02:	e8 c4 d5 ff ff       	call   c00100cb <KePanic(char const*)>
c0012b07:	83 c4 10             	add    esp,0x10
c0012b0a:	31 ed                	xor    ebp,ebp
c0012b0c:	eb bb                	jmp    c0012ac9 <Thr::loadDLL(char const*, bool)+0x1df>
c0012b0e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012b14:	89 d8                	mov    eax,ebx
c0012b16:	5b                   	pop    ebx
c0012b17:	5e                   	pop    esi
c0012b18:	5f                   	pop    edi
c0012b19:	5d                   	pop    ebp
c0012b1a:	c3                   	ret    

c0012b1b <Thr::executeDLL(unsigned long, void*)>:
c0012b1b:	56                   	push   esi
c0012b1c:	53                   	push   ebx
c0012b1d:	52                   	push   edx
c0012b1e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012b22:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012b26:	85 db                	test   ebx,ebx
c0012b28:	75 10                	jne    c0012b3a <Thr::executeDLL(unsigned long, void*)+0x1f>
c0012b2a:	83 ec 0c             	sub    esp,0xc
c0012b2d:	68 9b e4 01 c0       	push   0xc001e49b
c0012b32:	e8 94 d5 ff ff       	call   c00100cb <KePanic(char const*)>
c0012b37:	83 c4 10             	add    esp,0x10
c0012b3a:	50                   	push   eax
c0012b3b:	50                   	push   eax
c0012b3c:	53                   	push   ebx
c0012b3d:	68 c5 e4 01 c0       	push   0xc001e4c5
c0012b42:	e8 0d 79 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0012b47:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0012b4b:	89 d8                	mov    eax,ebx
c0012b4d:	83 c4 14             	add    esp,0x14
c0012b50:	5b                   	pop    ebx
c0012b51:	5e                   	pop    esi
c0012b52:	ff e0                	jmp    eax

c0012b54 <userModeEntryPoint(void*)>:
c0012b54:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0012b59:	48                   	dec    eax
c0012b5a:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c0012b5f:	75 03                	jne    c0012b64 <userModeEntryPoint(void*)+0x10>
c0012b61:	fb                   	sti    
c0012b62:	66 90                	xchg   ax,ax
c0012b64:	fb                   	sti    
c0012b65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b6a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012b6d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0012b73:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012b77:	e9 c3 d6 fe ff       	jmp    c000023f <goToUsermode>

c0012b7c <changeTSS>:
c0012b7c:	83 ec 14             	sub    esp,0x14
c0012b7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b84:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0012b87:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0012b8c:	c1 e2 15             	shl    edx,0x15
c0012b8f:	29 d0                	sub    eax,edx
c0012b91:	50                   	push   eax
c0012b92:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c0012b97:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012b9d:	05 7c 11 00 00       	add    eax,0x117c
c0012ba2:	50                   	push   eax
c0012ba3:	e8 ac 5f ff ff       	call   c0008b54 <TSS::setESP(unsigned long)>
c0012ba8:	83 c4 1c             	add    esp,0x1c
c0012bab:	c3                   	ret    

c0012bac <switchToThread(ThreadControlBlock*)>:
c0012bac:	57                   	push   edi
c0012bad:	a1 e4 36 02 c0       	mov    eax,ds:0xc00236e4
c0012bb2:	56                   	push   esi
c0012bb3:	85 c0                	test   eax,eax
c0012bb5:	53                   	push   ebx
c0012bb6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012bba:	0f 85 90 00 00 00    	jne    c0012c50 <switchToThread(ThreadControlBlock*)+0xa4>
c0012bc0:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0012bc3:	80 fa ff             	cmp    dl,0xff
c0012bc6:	0f 84 80 00 00 00    	je     c0012c4c <switchToThread(ThreadControlBlock*)+0xa0>
c0012bcc:	81 e2 ff 00 00 00    	and    edx,0xff
c0012bd2:	b8 00 04 00 00       	mov    eax,0x400
c0012bd7:	29 d0                	sub    eax,edx
c0012bd9:	d1 f8                	sar    eax,1
c0012bdb:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0012bde:	66 90                	xchg   ax,ax
c0012be0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0012be3:	e8 e5 25 00 00       	call   c00151cd <HalQueryPerformanceCounter()>
c0012be8:	a3 28 37 02 c0       	mov    ds:0xc0023728,eax
c0012bed:	89 15 2c 37 02 c0    	mov    DWORD PTR ds:0xc002372c,edx
c0012bf3:	89 c6                	mov    esi,eax
c0012bf5:	89 d7                	mov    edi,edx
c0012bf7:	2b 35 18 37 02 c0    	sub    esi,DWORD PTR ds:0xc0023718
c0012bfd:	a3 18 37 02 c0       	mov    ds:0xc0023718,eax
c0012c02:	1b 3d 1c 37 02 c0    	sbb    edi,DWORD PTR ds:0xc002371c
c0012c08:	89 35 20 37 02 c0    	mov    DWORD PTR ds:0xc0023720,esi
c0012c0e:	89 3d 24 37 02 c0    	mov    DWORD PTR ds:0xc0023724,edi
c0012c14:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012c1a:	89 15 1c 37 02 c0    	mov    DWORD PTR ds:0xc002371c,edx
c0012c20:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0012c23:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0012c26:	01 c6                	add    esi,eax
c0012c28:	11 d7                	adc    edi,edx
c0012c2a:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0012c2d:	83 ec 0c             	sub    esp,0xc
c0012c30:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0012c33:	53                   	push   ebx
c0012c34:	e8 3e d6 fe ff       	call   c0000277 <switchToThreadASM>
c0012c39:	0f 20 c0             	mov    eax,cr0
c0012c3c:	83 c8 08             	or     eax,0x8
c0012c3f:	0f 22 c0             	mov    cr0,eax
c0012c42:	83 c4 10             	add    esp,0x10
c0012c45:	5b                   	pop    ebx
c0012c46:	5e                   	pop    esi
c0012c47:	5f                   	pop    edi
c0012c48:	c3                   	ret    
c0012c49:	8d 76 00             	lea    esi,[esi+0x0]
c0012c4c:	31 c0                	xor    eax,eax
c0012c4e:	eb 90                	jmp    c0012be0 <switchToThread(ThreadControlBlock*)+0x34>
c0012c50:	5b                   	pop    ebx
c0012c51:	c7 05 e0 36 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00236e0,0x1
c0012c5b:	5e                   	pop    esi
c0012c5c:	5f                   	pop    edi
c0012c5d:	c3                   	ret    
c0012c5e:	66 90                	xchg   ax,ax

c0012c60 <Process::addArgs(char**)>:
c0012c60:	57                   	push   edi
c0012c61:	56                   	push   esi
c0012c62:	53                   	push   ebx
c0012c63:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012c67:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012c6b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0012c75:	85 ff                	test   edi,edi
c0012c77:	74 43                	je     c0012cbc <Process::addArgs(char**)+0x5c>
c0012c79:	8b 07                	mov    eax,DWORD PTR [edi]
c0012c7b:	85 c0                	test   eax,eax
c0012c7d:	74 3d                	je     c0012cbc <Process::addArgs(char**)+0x5c>
c0012c7f:	31 db                	xor    ebx,ebx
c0012c81:	8d 76 00             	lea    esi,[esi+0x0]
c0012c84:	83 ec 0c             	sub    esp,0xc
c0012c87:	50                   	push   eax
c0012c88:	e8 b3 d8 fe ff       	call   c0000540 <strlen>
c0012c8d:	40                   	inc    eax
c0012c8e:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c91:	e8 23 4b ff ff       	call   c00077b9 <malloc>
c0012c96:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0012c9d:	5a                   	pop    edx
c0012c9e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0012ca1:	59                   	pop    ecx
c0012ca2:	43                   	inc    ebx
c0012ca3:	52                   	push   edx
c0012ca4:	50                   	push   eax
c0012ca5:	e8 56 d9 fe ff       	call   c0000600 <strcpy>
c0012caa:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0012cb0:	83 c4 10             	add    esp,0x10
c0012cb3:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0012cb6:	85 c0                	test   eax,eax
c0012cb8:	75 ca                	jne    c0012c84 <Process::addArgs(char**)+0x24>
c0012cba:	66 90                	xchg   ax,ax
c0012cbc:	5b                   	pop    ebx
c0012cbd:	5e                   	pop    esi
c0012cbe:	5f                   	pop    edi
c0012cbf:	c3                   	ret    

c0012cc0 <Process::Process(char const*, Process*, char**)>:
c0012cc0:	56                   	push   esi
c0012cc1:	53                   	push   ebx
c0012cc2:	83 ec 14             	sub    esp,0x14
c0012cc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012cc9:	05 0c 02 00 00       	add    eax,0x20c
c0012cce:	bb 07 00 00 00       	mov    ebx,0x7
c0012cd3:	89 c6                	mov    esi,eax
c0012cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0012cd8:	85 db                	test   ebx,ebx
c0012cda:	78 14                	js     c0012cf0 <Process::Process(char const*, Process*, char**)+0x30>
c0012cdc:	83 ec 0c             	sub    esp,0xc
c0012cdf:	56                   	push   esi
c0012ce0:	e8 07 98 00 00       	call   c001c4ec <ThreadControlBlock::ThreadControlBlock()>
c0012ce5:	83 c4 10             	add    esp,0x10
c0012ce8:	83 c6 5f             	add    esi,0x5f
c0012ceb:	4b                   	dec    ebx
c0012cec:	eb ea                	jmp    c0012cd8 <Process::Process(char const*, Process*, char**)+0x18>
c0012cee:	66 90                	xchg   ax,ax
c0012cf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012cf4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0012cfb:	83 ec 0c             	sub    esp,0xc
c0012cfe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012d02:	e8 b9 d1 ff ff       	call   c000fec0 <Krnl::newProcessEnv(Process*)>
c0012d07:	83 c4 10             	add    esp,0x10
c0012d0a:	89 c2                	mov    edx,eax
c0012d0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d10:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0012d16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d1a:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0012d23:	a1 08 f4 01 c0       	mov    eax,ds:0xc001f408
c0012d28:	8d 50 01             	lea    edx,[eax+0x1]
c0012d2b:	89 15 08 f4 01 c0    	mov    DWORD PTR ds:0xc001f408,edx
c0012d31:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012d35:	89 02                	mov    DWORD PTR [edx],eax
c0012d37:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0012d3f:	83 ec 0c             	sub    esp,0xc
c0012d42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d46:	e8 6e 4a ff ff       	call   c00077b9 <malloc>
c0012d4b:	83 c4 10             	add    esp,0x10
c0012d4e:	89 c3                	mov    ebx,eax
c0012d50:	83 ec 08             	sub    esp,0x8
c0012d53:	6a 00                	push   0x0
c0012d55:	53                   	push   ebx
c0012d56:	e8 e9 6f ff ff       	call   c0009d44 <VAS::VAS(bool)>
c0012d5b:	83 c4 10             	add    esp,0x10
c0012d5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d62:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0012d68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d6c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0012d76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d7a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012d7e:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0012d84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d88:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012d8e:	85 c0                	test   eax,eax
c0012d90:	74 42                	je     c0012dd4 <Process::Process(char const*, Process*, char**)+0x114>
c0012d92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d96:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012d9c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0012da2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012da6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0012dac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012db0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012db6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012dbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012dc0:	05 0c 01 00 00       	add    eax,0x10c
c0012dc5:	83 ec 08             	sub    esp,0x8
c0012dc8:	52                   	push   edx
c0012dc9:	50                   	push   eax
c0012dca:	e8 31 d8 fe ff       	call   c0000600 <strcpy>
c0012dcf:	83 c4 10             	add    esp,0x10
c0012dd2:	eb 64                	jmp    c0012e38 <Process::Process(char const*, Process*, char**)+0x178>
c0012dd4:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c0012ddc:	83 ec 0c             	sub    esp,0xc
c0012ddf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012de3:	e8 d1 49 ff ff       	call   c00077b9 <malloc>
c0012de8:	83 c4 10             	add    esp,0x10
c0012deb:	89 c3                	mov    ebx,eax
c0012ded:	83 ec 08             	sub    esp,0x8
c0012df0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012df4:	53                   	push   ebx
c0012df5:	e8 00 5b ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0012dfa:	83 c4 10             	add    esp,0x10
c0012dfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e01:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0012e07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e0b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0012e11:	83 ec 0c             	sub    esp,0xc
c0012e14:	50                   	push   eax
c0012e15:	e8 80 53 ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c0012e1a:	83 c4 10             	add    esp,0x10
c0012e1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e21:	05 0c 01 00 00       	add    eax,0x10c
c0012e26:	83 ec 08             	sub    esp,0x8
c0012e29:	68 e4 e4 01 c0       	push   0xc001e4e4
c0012e2e:	50                   	push   eax
c0012e2f:	e8 cc d7 fe ff       	call   c0000600 <strcpy>
c0012e34:	83 c4 10             	add    esp,0x10
c0012e37:	90                   	nop
c0012e38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e3c:	83 c0 0c             	add    eax,0xc
c0012e3f:	83 ec 08             	sub    esp,0x8
c0012e42:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e46:	50                   	push   eax
c0012e47:	e8 b4 d7 fe ff       	call   c0000600 <strcpy>
c0012e4c:	83 c4 10             	add    esp,0x10
c0012e4f:	83 ec 08             	sub    esp,0x8
c0012e52:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012e56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e5a:	e8 01 fe ff ff       	call   c0012c60 <Process::addArgs(char**)>
c0012e5f:	83 c4 10             	add    esp,0x10
c0012e62:	83 ec 08             	sub    esp,0x8
c0012e65:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e6d:	e8 89 ed ff ff       	call   c0011bfb <Thr::loadProgramIntoMemory(Process*, char const*)>
c0012e72:	83 c4 10             	add    esp,0x10
c0012e75:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012e79:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012e7d:	83 f0 01             	xor    eax,0x1
c0012e80:	88 c2                	mov    dl,al
c0012e82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e86:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0012e8c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012e90:	25 ff 00 00 00       	and    eax,0xff
c0012e95:	83 ec 08             	sub    esp,0x8
c0012e98:	50                   	push   eax
c0012e99:	68 3c e5 01 c0       	push   0xc001e53c
c0012e9e:	e8 b1 75 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0012ea3:	83 c4 10             	add    esp,0x10
c0012ea6:	90                   	nop
c0012ea7:	83 c4 14             	add    esp,0x14
c0012eaa:	5b                   	pop    ebx
c0012eab:	5e                   	pop    esi
c0012eac:	c3                   	ret    
c0012ead:	90                   	nop
c0012eae:	66 90                	xchg   ax,ax

c0012eb0 <Process::Process(bool, char const*, Process*, char**)>:
c0012eb0:	56                   	push   esi
c0012eb1:	53                   	push   ebx
c0012eb2:	83 ec 24             	sub    esp,0x24
c0012eb5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012eb9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012ebd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ec1:	05 0c 02 00 00       	add    eax,0x20c
c0012ec6:	bb 07 00 00 00       	mov    ebx,0x7
c0012ecb:	89 c6                	mov    esi,eax
c0012ecd:	8d 76 00             	lea    esi,[esi+0x0]
c0012ed0:	85 db                	test   ebx,ebx
c0012ed2:	78 14                	js     c0012ee8 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0012ed4:	83 ec 0c             	sub    esp,0xc
c0012ed7:	56                   	push   esi
c0012ed8:	e8 0f 96 00 00       	call   c001c4ec <ThreadControlBlock::ThreadControlBlock()>
c0012edd:	83 c4 10             	add    esp,0x10
c0012ee0:	83 c6 5f             	add    esi,0x5f
c0012ee3:	4b                   	dec    ebx
c0012ee4:	eb ea                	jmp    c0012ed0 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0012ee6:	66 90                	xchg   ax,ax
c0012ee8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012eec:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0012ef3:	83 ec 0c             	sub    esp,0xc
c0012ef6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012efa:	e8 c1 cf ff ff       	call   c000fec0 <Krnl::newProcessEnv(Process*)>
c0012eff:	83 c4 10             	add    esp,0x10
c0012f02:	89 c2                	mov    edx,eax
c0012f04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f08:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0012f0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f12:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0012f1b:	a1 08 f4 01 c0       	mov    eax,ds:0xc001f408
c0012f20:	8d 50 01             	lea    edx,[eax+0x1]
c0012f23:	89 15 08 f4 01 c0    	mov    DWORD PTR ds:0xc001f408,edx
c0012f29:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012f2d:	89 02                	mov    DWORD PTR [edx],eax
c0012f2f:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0012f37:	83 ec 0c             	sub    esp,0xc
c0012f3a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012f3e:	e8 76 48 ff ff       	call   c00077b9 <malloc>
c0012f43:	83 c4 10             	add    esp,0x10
c0012f46:	89 c3                	mov    ebx,eax
c0012f48:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0012f4c:	25 ff 00 00 00       	and    eax,0xff
c0012f51:	83 ec 08             	sub    esp,0x8
c0012f54:	50                   	push   eax
c0012f55:	53                   	push   ebx
c0012f56:	e8 e9 6d ff ff       	call   c0009d44 <VAS::VAS(bool)>
c0012f5b:	83 c4 10             	add    esp,0x10
c0012f5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f62:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0012f68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f6c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0012f76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f7a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012f7e:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0012f84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f88:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012f8e:	85 c0                	test   eax,eax
c0012f90:	74 42                	je     c0012fd4 <Process::Process(bool, char const*, Process*, char**)+0x124>
c0012f92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f96:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012f9c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0012fa2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fa6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0012fac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fb0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012fb6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012fbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fc0:	05 0c 01 00 00       	add    eax,0x10c
c0012fc5:	83 ec 08             	sub    esp,0x8
c0012fc8:	52                   	push   edx
c0012fc9:	50                   	push   eax
c0012fca:	e8 31 d6 fe ff       	call   c0000600 <strcpy>
c0012fcf:	83 c4 10             	add    esp,0x10
c0012fd2:	eb 64                	jmp    c0013038 <Process::Process(bool, char const*, Process*, char**)+0x188>
c0012fd4:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c0012fdc:	83 ec 0c             	sub    esp,0xc
c0012fdf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012fe3:	e8 d1 47 ff ff       	call   c00077b9 <malloc>
c0012fe8:	83 c4 10             	add    esp,0x10
c0012feb:	89 c3                	mov    ebx,eax
c0012fed:	83 ec 08             	sub    esp,0x8
c0012ff0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012ff4:	53                   	push   ebx
c0012ff5:	e8 00 59 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0012ffa:	83 c4 10             	add    esp,0x10
c0012ffd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013001:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0013007:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001300b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013011:	83 ec 0c             	sub    esp,0xc
c0013014:	50                   	push   eax
c0013015:	e8 80 51 ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c001301a:	83 c4 10             	add    esp,0x10
c001301d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013021:	05 0c 01 00 00       	add    eax,0x10c
c0013026:	83 ec 08             	sub    esp,0x8
c0013029:	68 e4 e4 01 c0       	push   0xc001e4e4
c001302e:	50                   	push   eax
c001302f:	e8 cc d5 fe ff       	call   c0000600 <strcpy>
c0013034:	83 c4 10             	add    esp,0x10
c0013037:	90                   	nop
c0013038:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001303c:	83 c0 0c             	add    eax,0xc
c001303f:	83 ec 08             	sub    esp,0x8
c0013042:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013046:	50                   	push   eax
c0013047:	e8 b4 d5 fe ff       	call   c0000600 <strcpy>
c001304c:	83 c4 10             	add    esp,0x10
c001304f:	83 ec 08             	sub    esp,0x8
c0013052:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0013056:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001305a:	e8 01 fc ff ff       	call   c0012c60 <Process::addArgs(char**)>
c001305f:	83 c4 10             	add    esp,0x10
c0013062:	90                   	nop
c0013063:	83 c4 24             	add    esp,0x24
c0013066:	5b                   	pop    ebx
c0013067:	5e                   	pop    esi
c0013068:	c3                   	ret    
c0013069:	8d 76 00             	lea    esi,[esi+0x0]

c001306c <taskStartupFunction>:
c001306c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013071:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0013074:	c3                   	ret    
c0013075:	90                   	nop
c0013076:	66 90                	xchg   ax,ax

c0013078 <Semaphore::Semaphore(int)>:
c0013078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001307c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013080:	89 10                	mov    DWORD PTR [eax],edx
c0013082:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013086:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001308d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013091:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013098:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001309c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00130a3:	90                   	nop
c00130a4:	c3                   	ret    
c00130a5:	90                   	nop
c00130a6:	66 90                	xchg   ax,ax

c00130a8 <Mutex::Mutex()>:
c00130a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130ac:	6a 01                	push   0x1
c00130ae:	50                   	push   eax
c00130af:	e8 c4 ff ff ff       	call   c0013078 <Semaphore::Semaphore(int)>
c00130b4:	83 c4 08             	add    esp,0x8
c00130b7:	90                   	nop
c00130b8:	c3                   	ret    
c00130b9:	90                   	nop
c00130ba:	66 90                	xchg   ax,ax

c00130bc <Process::createThread(void (*)(void*), void*, int)>:
c00130bc:	57                   	push   edi
c00130bd:	31 c9                	xor    ecx,ecx
c00130bf:	56                   	push   esi
c00130c0:	53                   	push   ebx
c00130c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00130c5:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00130cc:	89 f2                	mov    edx,esi
c00130ce:	66 90                	xchg   ax,ax
c00130d0:	31 c0                	xor    eax,eax
c00130d2:	66 89 d0             	mov    ax,dx
c00130d5:	83 e2 01             	and    edx,0x1
c00130d8:	74 12                	je     c00130ec <Process::createThread(void (*)(void*), void*, int)+0x30>
c00130da:	d1 f8                	sar    eax,1
c00130dc:	41                   	inc    ecx
c00130dd:	89 c2                	mov    edx,eax
c00130df:	83 f9 10             	cmp    ecx,0x10
c00130e2:	75 ec                	jne    c00130d0 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00130e4:	31 db                	xor    ebx,ebx
c00130e6:	89 d8                	mov    eax,ebx
c00130e8:	5b                   	pop    ebx
c00130e9:	5e                   	pop    esi
c00130ea:	5f                   	pop    edi
c00130eb:	c3                   	ret    
c00130ec:	b8 01 00 00 00       	mov    eax,0x1
c00130f1:	d3 e0                	shl    eax,cl
c00130f3:	09 c6                	or     esi,eax
c00130f5:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00130f8:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00130ff:	01 c0                	add    eax,eax
c0013101:	01 c8                	add    eax,ecx
c0013103:	8d 04 80             	lea    eax,[eax+eax*4]
c0013106:	01 d8                	add    eax,ebx
c0013108:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001310f:	75 0b                	jne    c001311c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0013111:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c001311b:	90                   	nop
c001311c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013122:	83 ec 08             	sub    esp,0x8
c0013125:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013128:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001312b:	01 c0                	add    eax,eax
c001312d:	01 c8                	add    eax,ecx
c001312f:	8d 3c 80             	lea    edi,[eax+eax*4]
c0013132:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0013135:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001313b:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0013141:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013145:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001314b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0013151:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0013158:	89 ca                	mov    edx,ecx
c001315a:	f7 da                	neg    edx
c001315c:	c1 e2 15             	shl    edx,0x15
c001315f:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0013165:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001316b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001316f:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0013179:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c001317f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013183:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0013189:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0013193:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001319d:	53                   	push   ebx
c001319e:	68 04 37 02 c0       	push   0xc0023704
c00131a3:	e8 e4 90 00 00       	call   c001c28c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00131a8:	83 c4 10             	add    esp,0x10
c00131ab:	89 d8                	mov    eax,ebx
c00131ad:	5b                   	pop    ebx
c00131ae:	5e                   	pop    esi
c00131af:	5f                   	pop    edi
c00131b0:	c3                   	ret    
c00131b1:	90                   	nop
c00131b2:	66 90                	xchg   ax,ax

c00131b4 <Process::createUserThread()>:
c00131b4:	83 ec 0c             	sub    esp,0xc
c00131b7:	68 80 00 00 00       	push   0x80
c00131bc:	6a 00                	push   0x0
c00131be:	68 54 2b 01 c0       	push   0xc0012b54
c00131c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131c7:	50                   	push   eax
c00131c8:	e8 ef fe ff ff       	call   c00130bc <Process::createThread(void (*)(void*), void*, int)>
c00131cd:	83 c4 1c             	add    esp,0x1c
c00131d0:	c3                   	ret    
c00131d1:	8d 76 00             	lea    esi,[esi+0x0]

c00131d4 <setupMultitasking(void (*)())>:
c00131d4:	56                   	push   esi
c00131d5:	53                   	push   ebx
c00131d6:	53                   	push   ebx
c00131d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00131db:	eb 13                	jmp    c00131f0 <setupMultitasking(void (*)())+0x1c>
c00131dd:	8d 76 00             	lea    esi,[esi+0x0]
c00131e0:	83 ec 0c             	sub    esp,0xc
c00131e3:	68 04 37 02 c0       	push   0xc0023704
c00131e8:	e8 e7 8f 00 00       	call   c001c1d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00131ed:	83 c4 10             	add    esp,0x10
c00131f0:	83 ec 0c             	sub    esp,0xc
c00131f3:	68 04 37 02 c0       	push   0xc0023704
c00131f8:	e8 b3 8f 00 00       	call   c001c1b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00131fd:	83 c4 10             	add    esp,0x10
c0013200:	84 c0                	test   al,al
c0013202:	74 dc                	je     c00131e0 <setupMultitasking(void (*)())+0xc>
c0013204:	83 ec 0c             	sub    esp,0xc
c0013207:	68 1f 07 00 00       	push   0x71f
c001320c:	e8 a8 45 ff ff       	call   c00077b9 <malloc>
c0013211:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0013218:	89 c3                	mov    ebx,eax
c001321a:	6a 00                	push   0x0
c001321c:	68 e8 e4 01 c0       	push   0xc001e4e8
c0013221:	6a 01                	push   0x1
c0013223:	50                   	push   eax
c0013224:	e8 87 fc ff ff       	call   c0012eb0 <Process::Process(bool, char const*, Process*, char**)>
c0013229:	83 c4 14             	add    esp,0x14
c001322c:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0013232:	89 1d 10 37 02 c0    	mov    DWORD PTR ds:0xc0023710,ebx
c0013238:	50                   	push   eax
c0013239:	e8 b9 51 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c001323e:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0013246:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0013250:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013256:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013259:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0013263:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0013269:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001326f:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0013279:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0013283:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001328d:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0013293:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0013299:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00132a3:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00132a9:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00132b3:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00132b9:	5a                   	pop    edx
c00132ba:	59                   	pop    ecx
c00132bb:	68 e4 e4 01 c0       	push   0xc001e4e4
c00132c0:	50                   	push   eax
c00132c1:	e8 3a d3 fe ff       	call   c0000600 <strcpy>
c00132c6:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00132cd:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00132d1:	83 c4 14             	add    esp,0x14
c00132d4:	5b                   	pop    ebx
c00132d5:	5e                   	pop    esi
c00132d6:	e9 8e cf fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00132db:	90                   	nop

c00132dc <schedule()>:
c00132dc:	8b 15 e4 36 02 c0    	mov    edx,DWORD PTR ds:0xc00236e4
c00132e2:	85 d2                	test   edx,edx
c00132e4:	74 0e                	je     c00132f4 <schedule()+0x18>
c00132e6:	c7 05 e0 36 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00236e0,0x1
c00132f0:	c3                   	ret    
c00132f1:	8d 76 00             	lea    esi,[esi+0x0]
c00132f4:	53                   	push   ebx
c00132f5:	83 ec 14             	sub    esp,0x14
c00132f8:	68 04 37 02 c0       	push   0xc0023704
c00132fd:	e8 ae 8e 00 00       	call   c001c1b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013302:	83 c4 10             	add    esp,0x10
c0013305:	84 c0                	test   al,al
c0013307:	75 3b                	jne    c0013344 <schedule()+0x68>
c0013309:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001330e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0013311:	4a                   	dec    edx
c0013312:	74 38                	je     c001334c <schedule()+0x70>
c0013314:	83 ec 0c             	sub    esp,0xc
c0013317:	68 04 37 02 c0       	push   0xc0023704
c001331c:	e8 ab 8e 00 00       	call   c001c1cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013321:	c7 04 24 04 37 02 c0 	mov    DWORD PTR [esp],0xc0023704
c0013328:	89 c3                	mov    ebx,eax
c001332a:	e8 a5 8e 00 00       	call   c001c1d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001332f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0013336:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013339:	e8 6e f8 ff ff       	call   c0012bac <switchToThread(ThreadControlBlock*)>
c001333e:	83 c4 10             	add    esp,0x10
c0013341:	8d 76 00             	lea    esi,[esi+0x0]
c0013344:	83 c4 08             	add    esp,0x8
c0013347:	5b                   	pop    ebx
c0013348:	c3                   	ret    
c0013349:	8d 76 00             	lea    esi,[esi+0x0]
c001334c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0013353:	83 ec 08             	sub    esp,0x8
c0013356:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001335b:	50                   	push   eax
c001335c:	68 04 37 02 c0       	push   0xc0023704
c0013361:	e8 26 8f 00 00       	call   c001c28c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013366:	83 c4 10             	add    esp,0x10
c0013369:	eb a9                	jmp    c0013314 <schedule()+0x38>
c001336b:	90                   	nop

c001336c <Semaphore::tryAcquire()>:
c001336c:	53                   	push   ebx
c001336d:	83 ec 08             	sub    esp,0x8
c0013370:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013374:	fa                   	cli    
c0013375:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c001337a:	8d 50 01             	lea    edx,[eax+0x1]
c001337d:	89 15 e8 36 02 c0    	mov    DWORD PTR ds:0xc00236e8,edx
c0013383:	8b 15 e4 36 02 c0    	mov    edx,DWORD PTR ds:0xc00236e4
c0013389:	8d 5a 01             	lea    ebx,[edx+0x1]
c001338c:	89 1d e4 36 02 c0    	mov    DWORD PTR ds:0xc00236e4,ebx
c0013392:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0013395:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0013397:	7c 33                	jl     c00133cc <Semaphore::tryAcquire()+0x60>
c0013399:	89 15 e4 36 02 c0    	mov    DWORD PTR ds:0xc00236e4,edx
c001339f:	85 d2                	test   edx,edx
c00133a1:	75 0d                	jne    c00133b0 <Semaphore::tryAcquire()+0x44>
c00133a3:	8b 15 e0 36 02 c0    	mov    edx,DWORD PTR ds:0xc00236e0
c00133a9:	85 d2                	test   edx,edx
c00133ab:	75 6b                	jne    c0013418 <Semaphore::tryAcquire()+0xac>
c00133ad:	8d 76 00             	lea    esi,[esi+0x0]
c00133b0:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c00133b5:	85 c0                	test   eax,eax
c00133b7:	74 0b                	je     c00133c4 <Semaphore::tryAcquire()+0x58>
c00133b9:	8d 76 00             	lea    esi,[esi+0x0]
c00133bc:	31 c0                	xor    eax,eax
c00133be:	83 c4 08             	add    esp,0x8
c00133c1:	5b                   	pop    ebx
c00133c2:	c3                   	ret    
c00133c3:	90                   	nop
c00133c4:	fb                   	sti    
c00133c5:	83 c4 08             	add    esp,0x8
c00133c8:	5b                   	pop    ebx
c00133c9:	c3                   	ret    
c00133ca:	66 90                	xchg   ax,ax
c00133cc:	43                   	inc    ebx
c00133cd:	89 15 e4 36 02 c0    	mov    DWORD PTR ds:0xc00236e4,edx
c00133d3:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00133d6:	85 d2                	test   edx,edx
c00133d8:	75 22                	jne    c00133fc <Semaphore::tryAcquire()+0x90>
c00133da:	8b 0d e0 36 02 c0    	mov    ecx,DWORD PTR ds:0xc00236e0
c00133e0:	85 c9                	test   ecx,ecx
c00133e2:	74 18                	je     c00133fc <Semaphore::tryAcquire()+0x90>
c00133e4:	c7 05 e0 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00236e0,0x0
c00133ee:	e8 e9 fe ff ff       	call   c00132dc <schedule()>
c00133f3:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c00133f8:	48                   	dec    eax
c00133f9:	8d 76 00             	lea    esi,[esi+0x0]
c00133fc:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c0013401:	85 c0                	test   eax,eax
c0013403:	75 0b                	jne    c0013410 <Semaphore::tryAcquire()+0xa4>
c0013405:	fb                   	sti    
c0013406:	b0 01                	mov    al,0x1
c0013408:	83 c4 08             	add    esp,0x8
c001340b:	5b                   	pop    ebx
c001340c:	c3                   	ret    
c001340d:	8d 76 00             	lea    esi,[esi+0x0]
c0013410:	b0 01                	mov    al,0x1
c0013412:	83 c4 08             	add    esp,0x8
c0013415:	5b                   	pop    ebx
c0013416:	c3                   	ret    
c0013417:	90                   	nop
c0013418:	c7 05 e0 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00236e0,0x0
c0013422:	e8 b5 fe ff ff       	call   c00132dc <schedule()>
c0013427:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c001342c:	48                   	dec    eax
c001342d:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c0013432:	85 c0                	test   eax,eax
c0013434:	75 86                	jne    c00133bc <Semaphore::tryAcquire()+0x50>
c0013436:	eb 8c                	jmp    c00133c4 <Semaphore::tryAcquire()+0x58>

c0013438 <Semaphore::assertLocked(char const*)>:
c0013438:	83 ec 0c             	sub    esp,0xc
c001343b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001343f:	fa                   	cli    
c0013440:	ff 05 e8 36 02 c0    	inc    DWORD PTR ds:0xc00236e8
c0013446:	a1 e4 36 02 c0       	mov    eax,ds:0xc00236e4
c001344b:	8d 48 01             	lea    ecx,[eax+0x1]
c001344e:	89 0d e4 36 02 c0    	mov    DWORD PTR ds:0xc00236e4,ecx
c0013454:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013456:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013459:	7c 29                	jl     c0013484 <Semaphore::assertLocked(char const*)+0x4c>
c001345b:	90                   	nop
c001345c:	a3 e4 36 02 c0       	mov    ds:0xc00236e4,eax
c0013461:	85 c0                	test   eax,eax
c0013463:	75 0b                	jne    c0013470 <Semaphore::assertLocked(char const*)+0x38>
c0013465:	a1 e0 36 02 c0       	mov    eax,ds:0xc00236e0
c001346a:	85 c0                	test   eax,eax
c001346c:	75 2e                	jne    c001349c <Semaphore::assertLocked(char const*)+0x64>
c001346e:	66 90                	xchg   ax,ax
c0013470:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0013475:	48                   	dec    eax
c0013476:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c001347b:	75 03                	jne    c0013480 <Semaphore::assertLocked(char const*)+0x48>
c001347d:	fb                   	sti    
c001347e:	66 90                	xchg   ax,ax
c0013480:	83 c4 0c             	add    esp,0xc
c0013483:	c3                   	ret    
c0013484:	83 ec 0c             	sub    esp,0xc
c0013487:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001348b:	52                   	push   edx
c001348c:	e8 3a cc ff ff       	call   c00100cb <KePanic(char const*)>
c0013491:	a1 e4 36 02 c0       	mov    eax,ds:0xc00236e4
c0013496:	83 c4 10             	add    esp,0x10
c0013499:	48                   	dec    eax
c001349a:	eb c0                	jmp    c001345c <Semaphore::assertLocked(char const*)+0x24>
c001349c:	c7 05 e0 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00236e0,0x0
c00134a6:	e8 31 fe ff ff       	call   c00132dc <schedule()>
c00134ab:	eb c3                	jmp    c0013470 <Semaphore::assertLocked(char const*)+0x38>
c00134ad:	8d 76 00             	lea    esi,[esi+0x0]

c00134b0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00134b0:	83 ec 0c             	sub    esp,0xc
c00134b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00134b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134bc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00134bf:	e8 18 fe ff ff       	call   c00132dc <schedule()>
c00134c4:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c00134c9:	48                   	dec    eax
c00134ca:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c00134cf:	75 03                	jne    c00134d4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00134d1:	fb                   	sti    
c00134d2:	66 90                	xchg   ax,ax
c00134d4:	83 c4 0c             	add    esp,0xc
c00134d7:	c3                   	ret    

c00134d8 <blockTask(TaskState)>:
c00134d8:	83 ec 0c             	sub    esp,0xc
c00134db:	fa                   	cli    
c00134dc:	ff 05 e8 36 02 c0    	inc    DWORD PTR ds:0xc00236e8
c00134e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00134eb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00134ee:	e8 e9 fd ff ff       	call   c00132dc <schedule()>
c00134f3:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c00134f8:	48                   	dec    eax
c00134f9:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c00134fe:	75 04                	jne    c0013504 <blockTask(TaskState)+0x2c>
c0013500:	fb                   	sti    
c0013501:	8d 76 00             	lea    esi,[esi+0x0]
c0013504:	83 c4 0c             	add    esp,0xc
c0013507:	c3                   	ret    

c0013508 <waitTask(int, int*, int)>:
c0013508:	83 ec 18             	sub    esp,0x18
c001350b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013510:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013514:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0013517:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001351b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013520:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0013523:	6a 07                	push   0x7
c0013525:	e8 ae ff ff ff       	call   c00134d8 <blockTask(TaskState)>
c001352a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001352f:	83 c4 10             	add    esp,0x10
c0013532:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013535:	85 d2                	test   edx,edx
c0013537:	74 0b                	je     c0013544 <waitTask(int, int*, int)+0x3c>
c0013539:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c001353c:	89 02                	mov    DWORD PTR [edx],eax
c001353e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013543:	90                   	nop
c0013544:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013547:	83 c4 0c             	add    esp,0xc
c001354a:	c3                   	ret    
c001354b:	90                   	nop

c001354c <milliTenthSleepUntil(unsigned int)>:
c001354c:	83 ec 0c             	sub    esp,0xc
c001354f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013553:	39 05 0c 2a 02 c0    	cmp    DWORD PTR ds:0xc0022a0c,eax
c0013559:	76 05                	jbe    c0013560 <milliTenthSleepUntil(unsigned int)+0x14>
c001355b:	90                   	nop
c001355c:	83 c4 0c             	add    esp,0xc
c001355f:	c3                   	ret    
c0013560:	fa                   	cli    
c0013561:	ff 05 e8 36 02 c0    	inc    DWORD PTR ds:0xc00236e8
c0013567:	83 ec 08             	sub    esp,0x8
c001356a:	ff 05 e4 36 02 c0    	inc    DWORD PTR ds:0xc00236e4
c0013570:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013576:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013579:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001357f:	52                   	push   edx
c0013580:	68 f8 36 02 c0       	push   0xc00236f8
c0013585:	e8 02 8d 00 00       	call   c001c28c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001358a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013591:	e8 42 ff ff ff       	call   c00134d8 <blockTask(TaskState)>
c0013596:	a1 e4 36 02 c0       	mov    eax,ds:0xc00236e4
c001359b:	83 c4 10             	add    esp,0x10
c001359e:	48                   	dec    eax
c001359f:	a3 e4 36 02 c0       	mov    ds:0xc00236e4,eax
c00135a4:	85 c0                	test   eax,eax
c00135a6:	75 0c                	jne    c00135b4 <milliTenthSleepUntil(unsigned int)+0x68>
c00135a8:	a1 e0 36 02 c0       	mov    eax,ds:0xc00236e0
c00135ad:	85 c0                	test   eax,eax
c00135af:	75 17                	jne    c00135c8 <milliTenthSleepUntil(unsigned int)+0x7c>
c00135b1:	8d 76 00             	lea    esi,[esi+0x0]
c00135b4:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c00135b9:	48                   	dec    eax
c00135ba:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c00135bf:	75 9b                	jne    c001355c <milliTenthSleepUntil(unsigned int)+0x10>
c00135c1:	fb                   	sti    
c00135c2:	83 c4 0c             	add    esp,0xc
c00135c5:	c3                   	ret    
c00135c6:	66 90                	xchg   ax,ax
c00135c8:	c7 05 e0 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00236e0,0x0
c00135d2:	e8 05 fd ff ff       	call   c00132dc <schedule()>
c00135d7:	eb db                	jmp    c00135b4 <milliTenthSleepUntil(unsigned int)+0x68>
c00135d9:	8d 76 00             	lea    esi,[esi+0x0]

c00135dc <milliTenthSleep(unsigned int)>:
c00135dc:	a1 0c 2a 02 c0       	mov    eax,ds:0xc0022a0c
c00135e1:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00135e5:	e9 62 ff ff ff       	jmp    c001354c <milliTenthSleepUntil(unsigned int)>
c00135ea:	66 90                	xchg   ax,ax

c00135ec <sleep(unsigned int)>:
c00135ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135f0:	8d 04 80             	lea    eax,[eax+eax*4]
c00135f3:	8d 04 80             	lea    eax,[eax+eax*4]
c00135f6:	8d 04 80             	lea    eax,[eax+eax*4]
c00135f9:	8d 04 80             	lea    eax,[eax+eax*4]
c00135fc:	c1 e0 04             	shl    eax,0x4
c00135ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013603:	eb d7                	jmp    c00135dc <milliTenthSleep(unsigned int)>
c0013605:	90                   	nop
c0013606:	66 90                	xchg   ax,ax

c0013608 <Semaphore::acquire()>:
c0013608:	83 ec 0c             	sub    esp,0xc
c001360b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001360f:	fa                   	cli    
c0013610:	a1 e4 36 02 c0       	mov    eax,ds:0xc00236e4
c0013615:	ff 05 e8 36 02 c0    	inc    DWORD PTR ds:0xc00236e8
c001361b:	8d 48 01             	lea    ecx,[eax+0x1]
c001361e:	89 0d e4 36 02 c0    	mov    DWORD PTR ds:0xc00236e4,ecx
c0013624:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013627:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013629:	7d 2d                	jge    c0013658 <Semaphore::acquire()+0x50>
c001362b:	41                   	inc    ecx
c001362c:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001362f:	90                   	nop
c0013630:	a3 e4 36 02 c0       	mov    ds:0xc00236e4,eax
c0013635:	85 c0                	test   eax,eax
c0013637:	75 0b                	jne    c0013644 <Semaphore::acquire()+0x3c>
c0013639:	a1 e0 36 02 c0       	mov    eax,ds:0xc00236e0
c001363e:	85 c0                	test   eax,eax
c0013640:	75 62                	jne    c00136a4 <Semaphore::acquire()+0x9c>
c0013642:	66 90                	xchg   ax,ax
c0013644:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0013649:	48                   	dec    eax
c001364a:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c001364f:	75 03                	jne    c0013654 <Semaphore::acquire()+0x4c>
c0013651:	fb                   	sti    
c0013652:	66 90                	xchg   ax,ax
c0013654:	83 c4 0c             	add    esp,0xc
c0013657:	c3                   	ret    
c0013658:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001365d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013664:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013667:	85 c9                	test   ecx,ecx
c0013669:	74 4d                	je     c00136b8 <Semaphore::acquire()+0xb0>
c001366b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001366e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013674:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013677:	90                   	nop
c0013678:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001367d:	83 ec 0c             	sub    esp,0xc
c0013680:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013683:	68 64 e5 01 c0       	push   0xc001e564
c0013688:	e8 c7 6d ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c001368d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013694:	e8 3f fe ff ff       	call   c00134d8 <blockTask(TaskState)>
c0013699:	a1 e4 36 02 c0       	mov    eax,ds:0xc00236e4
c001369e:	83 c4 10             	add    esp,0x10
c00136a1:	48                   	dec    eax
c00136a2:	eb 8c                	jmp    c0013630 <Semaphore::acquire()+0x28>
c00136a4:	c7 05 e0 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00236e0,0x0
c00136ae:	e8 29 fc ff ff       	call   c00132dc <schedule()>
c00136b3:	eb 8f                	jmp    c0013644 <Semaphore::acquire()+0x3c>
c00136b5:	8d 76 00             	lea    esi,[esi+0x0]
c00136b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136bd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00136c0:	eb b6                	jmp    c0013678 <Semaphore::acquire()+0x70>
c00136c2:	66 90                	xchg   ax,ax

c00136c4 <taskReturned>:
c00136c4:	83 ec 18             	sub    esp,0x18
c00136c7:	68 84 e5 01 c0       	push   0xc001e584
c00136cc:	e8 fa c9 ff ff       	call   c00100cb <KePanic(char const*)>
c00136d1:	83 c4 10             	add    esp,0x10
c00136d4:	83 ec 0c             	sub    esp,0xc
c00136d7:	6a 02                	push   0x2
c00136d9:	e8 fa fd ff ff       	call   c00134d8 <blockTask(TaskState)>
c00136de:	fa                   	cli    
c00136df:	ff 05 e8 36 02 c0    	inc    DWORD PTR ds:0xc00236e8
c00136e5:	e8 f2 fb ff ff       	call   c00132dc <schedule()>
c00136ea:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c00136ef:	83 c4 10             	add    esp,0x10
c00136f2:	48                   	dec    eax
c00136f3:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c00136f8:	85 c0                	test   eax,eax
c00136fa:	75 d8                	jne    c00136d4 <taskReturned+0x10>
c00136fc:	fb                   	sti    
c00136fd:	eb d5                	jmp    c00136d4 <taskReturned+0x10>
c00136ff:	90                   	nop

c0013700 <Thr::processFromPID(int)>:
c0013700:	57                   	push   edi
c0013701:	56                   	push   esi
c0013702:	53                   	push   ebx
c0013703:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013707:	fa                   	cli    
c0013708:	ff 05 e8 36 02 c0    	inc    DWORD PTR ds:0xc00236e8
c001370e:	83 ec 0c             	sub    esp,0xc
c0013711:	68 04 37 02 c0       	push   0xc0023704
c0013716:	e8 b1 8a 00 00       	call   c001c1cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001371b:	83 c4 10             	add    esp,0x10
c001371e:	89 c7                	mov    edi,eax
c0013720:	eb 16                	jmp    c0013738 <Thr::processFromPID(int)+0x38>
c0013722:	66 90                	xchg   ax,ax
c0013724:	83 ec 0c             	sub    esp,0xc
c0013727:	68 04 37 02 c0       	push   0xc0023704
c001372c:	e8 9b 8a 00 00       	call   c001c1cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013731:	83 c4 10             	add    esp,0x10
c0013734:	39 f8                	cmp    eax,edi
c0013736:	74 4c                	je     c0013784 <Thr::processFromPID(int)+0x84>
c0013738:	83 ec 0c             	sub    esp,0xc
c001373b:	68 04 37 02 c0       	push   0xc0023704
c0013740:	e8 87 8a 00 00       	call   c001c1cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013745:	c7 04 24 04 37 02 c0 	mov    DWORD PTR [esp],0xc0023704
c001374c:	89 c3                	mov    ebx,eax
c001374e:	e8 81 8a 00 00       	call   c001c1d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013753:	58                   	pop    eax
c0013754:	5a                   	pop    edx
c0013755:	53                   	push   ebx
c0013756:	68 04 37 02 c0       	push   0xc0023704
c001375b:	e8 2c 8b 00 00       	call   c001c28c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013760:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013763:	83 c4 10             	add    esp,0x10
c0013766:	39 30                	cmp    DWORD PTR [eax],esi
c0013768:	75 ba                	jne    c0013724 <Thr::processFromPID(int)+0x24>
c001376a:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c001376f:	48                   	dec    eax
c0013770:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c0013775:	74 09                	je     c0013780 <Thr::processFromPID(int)+0x80>
c0013777:	90                   	nop
c0013778:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001377b:	5b                   	pop    ebx
c001377c:	5e                   	pop    esi
c001377d:	5f                   	pop    edi
c001377e:	c3                   	ret    
c001377f:	90                   	nop
c0013780:	fb                   	sti    
c0013781:	eb f5                	jmp    c0013778 <Thr::processFromPID(int)+0x78>
c0013783:	90                   	nop
c0013784:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0013789:	48                   	dec    eax
c001378a:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c001378f:	75 07                	jne    c0013798 <Thr::processFromPID(int)+0x98>
c0013791:	fb                   	sti    
c0013792:	5b                   	pop    ebx
c0013793:	5e                   	pop    esi
c0013794:	5f                   	pop    edi
c0013795:	c3                   	ret    
c0013796:	66 90                	xchg   ax,ax
c0013798:	5b                   	pop    ebx
c0013799:	31 c0                	xor    eax,eax
c001379b:	5e                   	pop    esi
c001379c:	5f                   	pop    edi
c001379d:	c3                   	ret    
c001379e:	66 90                	xchg   ax,ax

c00137a0 <unblockTask(ThreadControlBlock*)>:
c00137a0:	53                   	push   ebx
c00137a1:	83 ec 08             	sub    esp,0x8
c00137a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00137a8:	fa                   	cli    
c00137a9:	ff 05 e8 36 02 c0    	inc    DWORD PTR ds:0xc00236e8
c00137af:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00137b2:	85 c0                	test   eax,eax
c00137b4:	74 66                	je     c001381c <unblockTask(ThreadControlBlock*)+0x7c>
c00137b6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00137b9:	48                   	dec    eax
c00137ba:	74 38                	je     c00137f4 <unblockTask(ThreadControlBlock*)+0x54>
c00137bc:	83 ec 0c             	sub    esp,0xc
c00137bf:	68 04 37 02 c0       	push   0xc0023704
c00137c4:	e8 03 8a 00 00       	call   c001c1cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00137c9:	83 c4 10             	add    esp,0x10
c00137cc:	85 c0                	test   eax,eax
c00137ce:	75 1c                	jne    c00137ec <unblockTask(ThreadControlBlock*)+0x4c>
c00137d0:	eb 5e                	jmp    c0013830 <unblockTask(ThreadControlBlock*)+0x90>
c00137d2:	66 90                	xchg   ax,ax
c00137d4:	83 ec 08             	sub    esp,0x8
c00137d7:	50                   	push   eax
c00137d8:	68 04 37 02 c0       	push   0xc0023704
c00137dd:	e8 9a 8d 00 00       	call   c001c57c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00137e2:	83 c4 10             	add    esp,0x10
c00137e5:	85 c0                	test   eax,eax
c00137e7:	74 47                	je     c0013830 <unblockTask(ThreadControlBlock*)+0x90>
c00137e9:	8d 76 00             	lea    esi,[esi+0x0]
c00137ec:	39 c3                	cmp    ebx,eax
c00137ee:	75 e4                	jne    c00137d4 <unblockTask(ThreadControlBlock*)+0x34>
c00137f0:	eb 12                	jmp    c0013804 <unblockTask(ThreadControlBlock*)+0x64>
c00137f2:	66 90                	xchg   ax,ax
c00137f4:	83 ec 0c             	sub    esp,0xc
c00137f7:	68 06 e5 01 c0       	push   0xc001e506
c00137fc:	e8 53 6c ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0013801:	83 c4 10             	add    esp,0x10
c0013804:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0013809:	48                   	dec    eax
c001380a:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c001380f:	75 03                	jne    c0013814 <unblockTask(ThreadControlBlock*)+0x74>
c0013811:	fb                   	sti    
c0013812:	66 90                	xchg   ax,ax
c0013814:	83 c4 08             	add    esp,0x8
c0013817:	5b                   	pop    ebx
c0013818:	c3                   	ret    
c0013819:	8d 76 00             	lea    esi,[esi+0x0]
c001381c:	83 ec 0c             	sub    esp,0xc
c001381f:	68 ef e4 01 c0       	push   0xc001e4ef
c0013824:	e8 2b 6c ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0013829:	83 c4 10             	add    esp,0x10
c001382c:	eb d6                	jmp    c0013804 <unblockTask(ThreadControlBlock*)+0x64>
c001382e:	66 90                	xchg   ax,ax
c0013830:	83 ec 08             	sub    esp,0x8
c0013833:	53                   	push   ebx
c0013834:	68 04 37 02 c0       	push   0xc0023704
c0013839:	e8 4e 8a 00 00       	call   c001c28c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001383e:	83 c4 10             	add    esp,0x10
c0013841:	eb c1                	jmp    c0013804 <unblockTask(ThreadControlBlock*)+0x64>
c0013843:	90                   	nop

c0013844 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013844:	55                   	push   ebp
c0013845:	57                   	push   edi
c0013846:	56                   	push   esi
c0013847:	53                   	push   ebx
c0013848:	83 ec 1c             	sub    esp,0x1c
c001384b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001384f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013852:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013858:	85 ed                	test   ebp,ebp
c001385a:	7e 24                	jle    c0013880 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c001385c:	31 f6                	xor    esi,esi
c001385e:	66 90                	xchg   ax,ax
c0013860:	83 ec 0c             	sub    esp,0xc
c0013863:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c001386a:	46                   	inc    esi
c001386b:	57                   	push   edi
c001386c:	e8 58 3f ff ff       	call   c00077c9 <free>
c0013871:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013874:	83 c4 10             	add    esp,0x10
c0013877:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001387d:	7f e1                	jg     c0013860 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c001387f:	90                   	nop
c0013880:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001388a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001388f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013892:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013895:	d3 c0                	rol    eax,cl
c0013897:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c001389e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00138a1:	89 f7                	mov    edi,esi
c00138a3:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00138ab:	0f 85 77 01 00 00    	jne    c0013a28 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c00138b1:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00138b7:	85 ed                	test   ebp,ebp
c00138b9:	74 1d                	je     c00138d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c00138bb:	83 ec 0c             	sub    esp,0xc
c00138be:	55                   	push   ebp
c00138bf:	e8 18 c5 ff ff       	call   c000fddc <EnvVarContainer::~EnvVarContainer()>
c00138c4:	59                   	pop    ecx
c00138c5:	5e                   	pop    esi
c00138c6:	6a 0c                	push   0xc
c00138c8:	55                   	push   ebp
c00138c9:	e8 90 6a ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c00138ce:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00138d1:	83 c4 10             	add    esp,0x10
c00138d4:	89 f7                	mov    edi,esi
c00138d6:	66 90                	xchg   ax,ax
c00138d8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00138de:	85 c0                	test   eax,eax
c00138e0:	0f 84 b6 00 00 00    	je     c001399c <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c00138e6:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00138e9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00138ed:	31 c9                	xor    ecx,ecx
c00138ef:	eb 17                	jmp    c0013908 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c00138f1:	8d 76 00             	lea    esi,[esi+0x0]
c00138f4:	41                   	inc    ecx
c00138f5:	83 f9 10             	cmp    ecx,0x10
c00138f8:	0f 84 9e 00 00 00    	je     c001399c <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c00138fe:	66 90                	xchg   ax,ax
c0013900:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013906:	66 90                	xchg   ax,ax
c0013908:	31 d2                	xor    edx,edx
c001390a:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0013911:	d3 fa                	sar    edx,cl
c0013913:	83 e2 01             	and    edx,0x1
c0013916:	74 dc                	je     c00138f4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013918:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c001391b:	01 d2                	add    edx,edx
c001391d:	01 ca                	add    edx,ecx
c001391f:	8d 14 92             	lea    edx,[edx+edx*4]
c0013922:	01 d0                	add    eax,edx
c0013924:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001392a:	83 fd 07             	cmp    ebp,0x7
c001392d:	75 c5                	jne    c00138f4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001392f:	05 40 02 00 00       	add    eax,0x240
c0013934:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0013937:	83 fd ff             	cmp    ebp,0xffffffff
c001393a:	0f 8c f0 00 00 00    	jl     c0013a30 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0013940:	0f 84 ae 01 00 00    	je     c0013af4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0013946:	85 ed                	test   ebp,ebp
c0013948:	0f 84 92 01 00 00    	je     c0013ae0 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c001394e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0013950:	75 a2                	jne    c00138f4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013952:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013958:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001395c:	01 d0                	add    eax,edx
c001395e:	66 90                	xchg   ax,ax
c0013960:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013964:	83 ec 0c             	sub    esp,0xc
c0013967:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c001396d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013970:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013976:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001397d:	50                   	push   eax
c001397e:	e8 1d fe ff ff       	call   c00137a0 <unblockTask(ThreadControlBlock*)>
c0013983:	83 c4 10             	add    esp,0x10
c0013986:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013989:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001398d:	89 f7                	mov    edi,esi
c001398f:	41                   	inc    ecx
c0013990:	83 f9 10             	cmp    ecx,0x10
c0013993:	0f 85 67 ff ff ff    	jne    c0013900 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013999:	8d 76 00             	lea    esi,[esi+0x0]
c001399c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00139a2:	85 c0                	test   eax,eax
c00139a4:	74 62                	je     c0013a08 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c00139a6:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00139ac:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00139b2:	74 54                	je     c0013a08 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c00139b4:	83 ec 0c             	sub    esp,0xc
c00139b7:	68 04 37 02 c0       	push   0xc0023704
c00139bc:	e8 0b 88 00 00       	call   c001c1cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00139c1:	c7 04 24 04 37 02 c0 	mov    DWORD PTR [esp],0xc0023704
c00139c8:	89 c7                	mov    edi,eax
c00139ca:	e8 e1 87 00 00       	call   c001c1b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00139cf:	83 c4 10             	add    esp,0x10
c00139d2:	84 c0                	test   al,al
c00139d4:	0f 84 ce 00 00 00    	je     c0013aa8 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c00139da:	66 90                	xchg   ax,ax
c00139dc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00139df:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00139e5:	85 d2                	test   edx,edx
c00139e7:	74 0f                	je     c00139f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c00139e9:	83 ec 0c             	sub    esp,0xc
c00139ec:	8b 02                	mov    eax,DWORD PTR [edx]
c00139ee:	52                   	push   edx
c00139ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00139f2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00139f5:	83 c4 10             	add    esp,0x10
c00139f8:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0013a02:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0013a05:	8d 76 00             	lea    esi,[esi+0x0]
c0013a08:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0013a0e:	85 db                	test   ebx,ebx
c0013a10:	74 16                	je     c0013a28 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013a12:	83 ec 0c             	sub    esp,0xc
c0013a15:	53                   	push   ebx
c0013a16:	e8 17 5d ff ff       	call   c0009732 <VAS::~VAS()>
c0013a1b:	58                   	pop    eax
c0013a1c:	5a                   	pop    edx
c0013a1d:	6a 14                	push   0x14
c0013a1f:	53                   	push   ebx
c0013a20:	e8 39 69 ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c0013a25:	83 c4 10             	add    esp,0x10
c0013a28:	83 c4 1c             	add    esp,0x1c
c0013a2b:	5b                   	pop    ebx
c0013a2c:	5e                   	pop    esi
c0013a2d:	5f                   	pop    edi
c0013a2e:	5d                   	pop    ebp
c0013a2f:	c3                   	ret    
c0013a30:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013a34:	83 ec 0c             	sub    esp,0xc
c0013a37:	68 b8 e5 01 c0       	push   0xc001e5b8
c0013a3c:	e8 8a c6 ff ff       	call   c00100cb <KePanic(char const*)>
c0013a41:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013a44:	83 c4 10             	add    esp,0x10
c0013a47:	89 f7                	mov    edi,esi
c0013a49:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013a4d:	e9 a2 fe ff ff       	jmp    c00138f4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013a52:	66 90                	xchg   ax,ax
c0013a54:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013a5a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0013a60:	75 1e                	jne    c0013a80 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013a62:	83 ec 0c             	sub    esp,0xc
c0013a65:	68 20 e6 01 c0       	push   0xc001e620
c0013a6a:	e8 e5 69 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0013a6f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013a76:	e8 5d fa ff ff       	call   c00134d8 <blockTask(TaskState)>
c0013a7b:	83 c4 10             	add    esp,0x10
c0013a7e:	66 90                	xchg   ax,ax
c0013a80:	83 ec 08             	sub    esp,0x8
c0013a83:	56                   	push   esi
c0013a84:	68 04 37 02 c0       	push   0xc0023704
c0013a89:	e8 fe 87 00 00       	call   c001c28c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013a8e:	c7 04 24 04 37 02 c0 	mov    DWORD PTR [esp],0xc0023704
c0013a95:	e8 32 87 00 00       	call   c001c1cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013a9a:	83 c4 10             	add    esp,0x10
c0013a9d:	39 f8                	cmp    eax,edi
c0013a9f:	0f 84 37 ff ff ff    	je     c00139dc <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0013aa5:	8d 76 00             	lea    esi,[esi+0x0]
c0013aa8:	83 ec 0c             	sub    esp,0xc
c0013aab:	68 04 37 02 c0       	push   0xc0023704
c0013ab0:	e8 17 87 00 00       	call   c001c1cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ab5:	c7 04 24 04 37 02 c0 	mov    DWORD PTR [esp],0xc0023704
c0013abc:	89 c6                	mov    esi,eax
c0013abe:	e8 11 87 00 00       	call   c001c1d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013ac3:	83 c4 10             	add    esp,0x10
c0013ac6:	39 f3                	cmp    ebx,esi
c0013ac8:	74 b6                	je     c0013a80 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013aca:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0013acd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013ad0:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0013ad6:	75 a8                	jne    c0013a80 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013ad8:	e9 77 ff ff ff       	jmp    c0013a54 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0013add:	8d 76 00             	lea    esi,[esi+0x0]
c0013ae0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013ae4:	83 ec 0c             	sub    esp,0xc
c0013ae7:	68 ec e5 01 c0       	push   0xc001e5ec
c0013aec:	e9 4b ff ff ff       	jmp    c0013a3c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0013af1:	8d 76 00             	lea    esi,[esi+0x0]
c0013af4:	8b 36                	mov    esi,DWORD PTR [esi]
c0013af6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013afa:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0013afd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013b00:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0013b06:	01 d7                	add    edi,edx
c0013b08:	89 f8                	mov    eax,edi
c0013b0a:	e9 51 fe ff ff       	jmp    c0013960 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0013b0f:	90                   	nop

c0013b10 <cleanerTaskFunction(void*)>:
c0013b10:	53                   	push   ebx
c0013b11:	83 ec 08             	sub    esp,0x8
c0013b14:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0013b19:	48                   	dec    eax
c0013b1a:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c0013b1f:	75 03                	jne    c0013b24 <cleanerTaskFunction(void*)+0x14>
c0013b21:	fb                   	sti    
c0013b22:	66 90                	xchg   ax,ax
c0013b24:	fa                   	cli    
c0013b25:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0013b2a:	80 3d cc 36 02 c0 00 	cmp    BYTE PTR ds:0xc00236cc,0x0
c0013b31:	8d 50 01             	lea    edx,[eax+0x1]
c0013b34:	89 15 e8 36 02 c0    	mov    DWORD PTR ds:0xc00236e8,edx
c0013b3a:	0f 84 ac 00 00 00    	je     c0013bec <cleanerTaskFunction(void*)+0xdc>
c0013b40:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c0013b45:	85 c0                	test   eax,eax
c0013b47:	75 03                	jne    c0013b4c <cleanerTaskFunction(void*)+0x3c>
c0013b49:	fb                   	sti    
c0013b4a:	66 90                	xchg   ax,ax
c0013b4c:	c6 05 cc 36 02 c0 00 	mov    BYTE PTR ds:0xc00236cc,0x0
c0013b53:	fa                   	cli    
c0013b54:	ff 05 e8 36 02 c0    	inc    DWORD PTR ds:0xc00236e8
c0013b5a:	ff 05 e4 36 02 c0    	inc    DWORD PTR ds:0xc00236e4
c0013b60:	fa                   	cli    
c0013b61:	ff 05 e8 36 02 c0    	inc    DWORD PTR ds:0xc00236e8
c0013b67:	eb 2b                	jmp    c0013b94 <cleanerTaskFunction(void*)+0x84>
c0013b69:	8d 76 00             	lea    esi,[esi+0x0]
c0013b6c:	83 ec 0c             	sub    esp,0xc
c0013b6f:	68 ec 36 02 c0       	push   0xc00236ec
c0013b74:	e8 53 86 00 00       	call   c001c1cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013b79:	c7 04 24 ec 36 02 c0 	mov    DWORD PTR [esp],0xc00236ec
c0013b80:	89 c3                	mov    ebx,eax
c0013b82:	e8 4d 86 00 00       	call   c001c1d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013b87:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013b8a:	e8 b5 fc ff ff       	call   c0013844 <cleanupTerminatedTask(ThreadControlBlock*)>
c0013b8f:	83 c4 10             	add    esp,0x10
c0013b92:	66 90                	xchg   ax,ax
c0013b94:	83 ec 0c             	sub    esp,0xc
c0013b97:	68 ec 36 02 c0       	push   0xc00236ec
c0013b9c:	e8 0f 86 00 00       	call   c001c1b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013ba1:	83 c4 10             	add    esp,0x10
c0013ba4:	84 c0                	test   al,al
c0013ba6:	74 c4                	je     c0013b6c <cleanerTaskFunction(void*)+0x5c>
c0013ba8:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0013bad:	48                   	dec    eax
c0013bae:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c0013bb3:	75 03                	jne    c0013bb8 <cleanerTaskFunction(void*)+0xa8>
c0013bb5:	fb                   	sti    
c0013bb6:	66 90                	xchg   ax,ax
c0013bb8:	a1 e4 36 02 c0       	mov    eax,ds:0xc00236e4
c0013bbd:	48                   	dec    eax
c0013bbe:	a3 e4 36 02 c0       	mov    ds:0xc00236e4,eax
c0013bc3:	0f 85 4b ff ff ff    	jne    c0013b14 <cleanerTaskFunction(void*)+0x4>
c0013bc9:	a1 e0 36 02 c0       	mov    eax,ds:0xc00236e0
c0013bce:	85 c0                	test   eax,eax
c0013bd0:	0f 84 3e ff ff ff    	je     c0013b14 <cleanerTaskFunction(void*)+0x4>
c0013bd6:	c7 05 e0 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00236e0,0x0
c0013be0:	e8 f7 f6 ff ff       	call   c00132dc <schedule()>
c0013be5:	e9 2a ff ff ff       	jmp    c0013b14 <cleanerTaskFunction(void*)+0x4>
c0013bea:	66 90                	xchg   ax,ax
c0013bec:	83 ec 0c             	sub    esp,0xc
c0013bef:	6a 02                	push   0x2
c0013bf1:	e8 ba f8 ff ff       	call   c00134b0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013bf6:	83 c4 10             	add    esp,0x10
c0013bf9:	e9 4e ff ff ff       	jmp    c0013b4c <cleanerTaskFunction(void*)+0x3c>
c0013bfe:	66 90                	xchg   ax,ax

c0013c00 <terminateTask(int)>:
c0013c00:	83 ec 14             	sub    esp,0x14
c0013c03:	fa                   	cli    
c0013c04:	ff 05 e8 36 02 c0    	inc    DWORD PTR ds:0xc00236e8
c0013c0a:	ff 05 e4 36 02 c0    	inc    DWORD PTR ds:0xc00236e4
c0013c10:	fa                   	cli    
c0013c11:	ff 05 e8 36 02 c0    	inc    DWORD PTR ds:0xc00236e8
c0013c17:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c20:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0013c23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c28:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0013c2b:	50                   	push   eax
c0013c2c:	68 ec 36 02 c0       	push   0xc00236ec
c0013c31:	e8 56 86 00 00       	call   c001c28c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013c36:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c3b:	83 c4 10             	add    esp,0x10
c0013c3e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0013c45:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0013c4a:	85 c0                	test   eax,eax
c0013c4c:	74 5e                	je     c0013cac <terminateTask(int)+0xac>
c0013c4e:	83 ec 0c             	sub    esp,0xc
c0013c51:	c6 05 cc 36 02 c0 01 	mov    BYTE PTR ds:0xc00236cc,0x1
c0013c58:	50                   	push   eax
c0013c59:	e8 42 fb ff ff       	call   c00137a0 <unblockTask(ThreadControlBlock*)>
c0013c5e:	83 c4 10             	add    esp,0x10
c0013c61:	8d 76 00             	lea    esi,[esi+0x0]
c0013c64:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0013c69:	48                   	dec    eax
c0013c6a:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c0013c6f:	75 03                	jne    c0013c74 <terminateTask(int)+0x74>
c0013c71:	fb                   	sti    
c0013c72:	66 90                	xchg   ax,ax
c0013c74:	a1 e4 36 02 c0       	mov    eax,ds:0xc00236e4
c0013c79:	48                   	dec    eax
c0013c7a:	a3 e4 36 02 c0       	mov    ds:0xc00236e4,eax
c0013c7f:	75 0b                	jne    c0013c8c <terminateTask(int)+0x8c>
c0013c81:	83 3d e0 36 02 c0 00 	cmp    DWORD PTR ds:0xc00236e0,0x0
c0013c88:	75 36                	jne    c0013cc0 <terminateTask(int)+0xc0>
c0013c8a:	66 90                	xchg   ax,ax
c0013c8c:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0013c91:	48                   	dec    eax
c0013c92:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c0013c97:	75 03                	jne    c0013c9c <terminateTask(int)+0x9c>
c0013c99:	fb                   	sti    
c0013c9a:	66 90                	xchg   ax,ax
c0013c9c:	fa                   	cli    
c0013c9d:	ff 05 e8 36 02 c0    	inc    DWORD PTR ds:0xc00236e8
c0013ca3:	90                   	nop
c0013ca4:	e8 33 f6 ff ff       	call   c00132dc <schedule()>
c0013ca9:	eb e1                	jmp    c0013c8c <terminateTask(int)+0x8c>
c0013cab:	90                   	nop
c0013cac:	83 ec 0c             	sub    esp,0xc
c0013caf:	68 1d e5 01 c0       	push   0xc001e51d
c0013cb4:	e8 9b 67 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0013cb9:	83 c4 10             	add    esp,0x10
c0013cbc:	eb a6                	jmp    c0013c64 <terminateTask(int)+0x64>
c0013cbe:	66 90                	xchg   ax,ax
c0013cc0:	c7 05 e0 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00236e0,0x0
c0013cca:	eb d8                	jmp    c0013ca4 <terminateTask(int)+0xa4>

c0013ccc <Thr::terminateFromIRQ(int)>:
c0013ccc:	83 ec 18             	sub    esp,0x18
c0013ccf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cd3:	50                   	push   eax
c0013cd4:	e8 27 ff ff ff       	call   c0013c00 <terminateTask(int)>
c0013cd9:	90                   	nop
c0013cda:	66 90                	xchg   ax,ax

c0013cdc <Semaphore::release()>:
c0013cdc:	83 ec 0c             	sub    esp,0xc
c0013cdf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ce3:	fa                   	cli    
c0013ce4:	a1 e4 36 02 c0       	mov    eax,ds:0xc00236e4
c0013ce9:	ff 05 e8 36 02 c0    	inc    DWORD PTR ds:0xc00236e8
c0013cef:	8d 48 01             	lea    ecx,[eax+0x1]
c0013cf2:	89 0d e4 36 02 c0    	mov    DWORD PTR ds:0xc00236e4,ecx
c0013cf8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013cfb:	85 c9                	test   ecx,ecx
c0013cfd:	74 41                	je     c0013d40 <Semaphore::release()+0x64>
c0013cff:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0013d02:	83 ec 0c             	sub    esp,0xc
c0013d05:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013d08:	51                   	push   ecx
c0013d09:	e8 92 fa ff ff       	call   c00137a0 <unblockTask(ThreadControlBlock*)>
c0013d0e:	a1 e4 36 02 c0       	mov    eax,ds:0xc00236e4
c0013d13:	83 c4 10             	add    esp,0x10
c0013d16:	48                   	dec    eax
c0013d17:	90                   	nop
c0013d18:	a3 e4 36 02 c0       	mov    ds:0xc00236e4,eax
c0013d1d:	85 c0                	test   eax,eax
c0013d1f:	75 0b                	jne    c0013d2c <Semaphore::release()+0x50>
c0013d21:	a1 e0 36 02 c0       	mov    eax,ds:0xc00236e0
c0013d26:	85 c0                	test   eax,eax
c0013d28:	75 1e                	jne    c0013d48 <Semaphore::release()+0x6c>
c0013d2a:	66 90                	xchg   ax,ax
c0013d2c:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0013d31:	48                   	dec    eax
c0013d32:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c0013d37:	75 03                	jne    c0013d3c <Semaphore::release()+0x60>
c0013d39:	fb                   	sti    
c0013d3a:	66 90                	xchg   ax,ax
c0013d3c:	83 c4 0c             	add    esp,0xc
c0013d3f:	c3                   	ret    
c0013d40:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0013d43:	eb d3                	jmp    c0013d18 <Semaphore::release()+0x3c>
c0013d45:	8d 76 00             	lea    esi,[esi+0x0]
c0013d48:	c7 05 e0 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00236e0,0x0
c0013d52:	e8 85 f5 ff ff       	call   c00132dc <schedule()>
c0013d57:	eb d3                	jmp    c0013d2c <Semaphore::release()+0x50>
c0013d59:	8d 76 00             	lea    esi,[esi+0x0]

c0013d5c <__static_initialization_and_destruction_0(int, int)>:
c0013d5c:	83 ec 0c             	sub    esp,0xc
c0013d5f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0013d64:	0f 85 8e 00 00 00    	jne    c0013df8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0013d6a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0013d72:	0f 85 80 00 00 00    	jne    c0013df8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0013d78:	83 ec 0c             	sub    esp,0xc
c0013d7b:	68 04 37 02 c0       	push   0xc0023704
c0013d80:	e8 b3 87 00 00       	call   c001c538 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013d85:	83 c4 10             	add    esp,0x10
c0013d88:	83 ec 04             	sub    esp,0x4
c0013d8b:	68 d0 f0 01 c0       	push   0xc001f0d0
c0013d90:	68 04 37 02 c0       	push   0xc0023704
c0013d95:	68 e8 c4 01 c0       	push   0xc001c4e8
c0013d9a:	e8 6f 65 ff ff       	call   c000a30e <__cxa_atexit>
c0013d9f:	83 c4 10             	add    esp,0x10
c0013da2:	83 ec 0c             	sub    esp,0xc
c0013da5:	68 f8 36 02 c0       	push   0xc00236f8
c0013daa:	e8 89 87 00 00       	call   c001c538 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013daf:	83 c4 10             	add    esp,0x10
c0013db2:	83 ec 04             	sub    esp,0x4
c0013db5:	68 d0 f0 01 c0       	push   0xc001f0d0
c0013dba:	68 f8 36 02 c0       	push   0xc00236f8
c0013dbf:	68 e8 c4 01 c0       	push   0xc001c4e8
c0013dc4:	e8 45 65 ff ff       	call   c000a30e <__cxa_atexit>
c0013dc9:	83 c4 10             	add    esp,0x10
c0013dcc:	83 ec 0c             	sub    esp,0xc
c0013dcf:	68 ec 36 02 c0       	push   0xc00236ec
c0013dd4:	e8 5f 87 00 00       	call   c001c538 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013dd9:	83 c4 10             	add    esp,0x10
c0013ddc:	83 ec 04             	sub    esp,0x4
c0013ddf:	68 d0 f0 01 c0       	push   0xc001f0d0
c0013de4:	68 ec 36 02 c0       	push   0xc00236ec
c0013de9:	68 e8 c4 01 c0       	push   0xc001c4e8
c0013dee:	e8 1b 65 ff ff       	call   c000a30e <__cxa_atexit>
c0013df3:	83 c4 10             	add    esp,0x10
c0013df6:	66 90                	xchg   ax,ax
c0013df8:	90                   	nop
c0013df9:	83 c4 0c             	add    esp,0xc
c0013dfc:	c3                   	ret    
c0013dfd:	8d 76 00             	lea    esi,[esi+0x0]

c0013e00 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0013e00:	83 ec 0c             	sub    esp,0xc
c0013e03:	83 ec 08             	sub    esp,0x8
c0013e06:	68 ff ff 00 00       	push   0xffff
c0013e0b:	6a 01                	push   0x1
c0013e0d:	e8 4a ff ff ff       	call   c0013d5c <__static_initialization_and_destruction_0(int, int)>
c0013e12:	83 c4 10             	add    esp,0x10
c0013e15:	83 c4 0c             	add    esp,0xc
c0013e18:	c3                   	ret    

c0013e19 <Vm::inbv(unsigned short)>:
c0013e19:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013e1d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0013e22:	75 06                	jne    c0013e2a <Vm::inbv(unsigned short)+0x11>
c0013e24:	a0 4c 37 02 c0       	mov    al,ds:0xc002374c
c0013e29:	c3                   	ret    
c0013e2a:	ec                   	in     al,dx
c0013e2b:	c3                   	ret    

c0013e2c <Vm::outbv(unsigned short, unsigned char)>:
c0013e2c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013e30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013e34:	66 81 fa fe fe       	cmp    dx,0xfefe
c0013e39:	75 25                	jne    c0013e60 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0013e3b:	8b 0d 4c 37 02 c0    	mov    ecx,DWORD PTR ds:0xc002374c
c0013e41:	8d 51 01             	lea    edx,[ecx+0x1]
c0013e44:	88 81 60 37 02 c0    	mov    BYTE PTR [ecx-0x3ffdc8a0],al
c0013e4a:	89 15 4c 37 02 c0    	mov    DWORD PTR ds:0xc002374c,edx
c0013e50:	83 fa 20             	cmp    edx,0x20
c0013e53:	75 0c                	jne    c0013e61 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0013e55:	c7 05 4c 37 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002374c,0x1f
c0013e5f:	c3                   	ret    
c0013e60:	ee                   	out    dx,al
c0013e61:	c3                   	ret    

c0013e62 <Vm::realToLinear(unsigned short, unsigned short)>:
c0013e62:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013e67:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013e6c:	c1 e0 04             	shl    eax,0x4
c0013e6f:	01 d0                	add    eax,edx
c0013e71:	c3                   	ret    

c0013e72 <Vm::getSegment(unsigned int)>:
c0013e72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e76:	c1 e8 10             	shr    eax,0x10
c0013e79:	c3                   	ret    

c0013e7a <Vm::getOffset(unsigned int)>:
c0013e7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e7e:	c3                   	ret    

c0013e7f <Vm::mainloop2()>:
c0013e7f:	83 ec 18             	sub    esp,0x18
c0013e82:	fa                   	cli    
c0013e83:	ff 05 e8 36 02 c0    	inc    DWORD PTR ds:0xc00236e8
c0013e89:	6a 02                	push   0x2
c0013e8b:	c6 05 45 37 02 c0 01 	mov    BYTE PTR ds:0xc0023745,0x1
c0013e92:	e8 19 f6 ff ff       	call   c00134b0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013e97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e9c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0013ea0:	52                   	push   edx
c0013ea1:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0013ea5:	52                   	push   edx
c0013ea6:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0013eaa:	52                   	push   edx
c0013eab:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0013eaf:	50                   	push   eax
c0013eb0:	e8 5a c3 fe ff       	call   c000020f <goToVM86>
c0013eb5:	83 c4 2c             	add    esp,0x2c
c0013eb8:	c3                   	ret    

c0013eb9 <Vm::mainVm8086Loop(void*)>:
c0013eb9:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0013ebe:	48                   	dec    eax
c0013ebf:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c0013ec4:	75 01                	jne    c0013ec7 <Vm::mainVm8086Loop(void*)+0xe>
c0013ec6:	fb                   	sti    
c0013ec7:	eb b6                	jmp    c0013e7f <Vm::mainloop2()>

c0013ec9 <Vm::mainloop3(unsigned long)>:
c0013ec9:	83 ec 18             	sub    esp,0x18
c0013ecc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ed0:	fa                   	cli    
c0013ed1:	ff 05 e8 36 02 c0    	inc    DWORD PTR ds:0xc00236e8
c0013ed7:	6a 02                	push   0x2
c0013ed9:	c6 05 44 37 02 c0 01 	mov    BYTE PTR ds:0xc0023744,0x1
c0013ee0:	a3 40 37 02 c0       	mov    ds:0xc0023740,eax
c0013ee5:	e8 c6 f5 ff ff       	call   c00134b0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013eea:	83 c4 1c             	add    esp,0x1c
c0013eed:	eb 90                	jmp    c0013e7f <Vm::mainloop2()>

c0013eef <Vm::initialise8086()>:
c0013eef:	83 ec 0c             	sub    esp,0xc
c0013ef2:	68 80 00 00 00       	push   0x80
c0013ef7:	6a 00                	push   0x0
c0013ef9:	68 b9 3e 01 c0       	push   0xc0013eb9
c0013efe:	ff 35 10 37 02 c0    	push   DWORD PTR ds:0xc0023710
c0013f04:	e8 b3 f1 ff ff       	call   c00130bc <Process::createThread(void (*)(void*), void*, int)>
c0013f09:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0013f10:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0013f15:	68 00 01 00 00       	push   0x100
c0013f1a:	a1 10 37 02 c0       	mov    eax,ds:0xc0023710
c0013f1f:	6a 00                	push   0x0
c0013f21:	6a 00                	push   0x0
c0013f23:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013f29:	e8 62 5c ff ff       	call   c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013f2e:	83 c4 2c             	add    esp,0x2c
c0013f31:	c3                   	ret    

c0013f32 <Vm::finish8086()>:
c0013f32:	53                   	push   ebx
c0013f33:	83 ec 08             	sub    esp,0x8
c0013f36:	fa                   	cli    
c0013f37:	ff 05 e8 36 02 c0    	inc    DWORD PTR ds:0xc00236e8
c0013f3d:	80 3d 44 37 02 c0 00 	cmp    BYTE PTR ds:0xc0023744,0x0
c0013f44:	75 15                	jne    c0013f5b <Vm::finish8086()+0x29>
c0013f46:	e8 91 f3 ff ff       	call   c00132dc <schedule()>
c0013f4b:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0013f50:	48                   	dec    eax
c0013f51:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c0013f56:	75 de                	jne    c0013f36 <Vm::finish8086()+0x4>
c0013f58:	fb                   	sti    
c0013f59:	eb db                	jmp    c0013f36 <Vm::finish8086()+0x4>
c0013f5b:	83 ec 0c             	sub    esp,0xc
c0013f5e:	8b 1d 40 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023740
c0013f64:	ff 35 48 37 02 c0    	push   DWORD PTR ds:0xc0023748
c0013f6a:	c6 05 44 37 02 c0 00 	mov    BYTE PTR ds:0xc0023744,0x0
c0013f71:	e8 2a f8 ff ff       	call   c00137a0 <unblockTask(ThreadControlBlock*)>
c0013f76:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0013f7b:	83 c4 10             	add    esp,0x10
c0013f7e:	8d 50 ff             	lea    edx,[eax-0x1]
c0013f81:	89 15 e8 36 02 c0    	mov    DWORD PTR ds:0xc00236e8,edx
c0013f87:	85 d2                	test   edx,edx
c0013f89:	75 01                	jne    c0013f8c <Vm::finish8086()+0x5a>
c0013f8b:	fb                   	sti    
c0013f8c:	89 d8                	mov    eax,ebx
c0013f8e:	83 c4 08             	add    esp,0x8
c0013f91:	5b                   	pop    ebx
c0013f92:	c3                   	ret    

c0013f93 <Vm::getOutput8086(unsigned char*)>:
c0013f93:	57                   	push   edi
c0013f94:	8b 0d 4c 37 02 c0    	mov    ecx,DWORD PTR ds:0xc002374c
c0013f9a:	56                   	push   esi
c0013f9b:	be 60 37 02 c0       	mov    esi,0xc0023760
c0013fa0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013fa4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013fa6:	a1 4c 37 02 c0       	mov    eax,ds:0xc002374c
c0013fab:	5e                   	pop    esi
c0013fac:	c7 05 4c 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002374c,0x0
c0013fb6:	5f                   	pop    edi
c0013fb7:	c3                   	ret    

c0013fb8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0013fb8:	55                   	push   ebp
c0013fb9:	57                   	push   edi
c0013fba:	56                   	push   esi
c0013fbb:	53                   	push   ebx
c0013fbc:	83 ec 0c             	sub    esp,0xc
c0013fbf:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013fc3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0013fc7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0013fcb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0013fcf:	fa                   	cli    
c0013fd0:	ff 05 e8 36 02 c0    	inc    DWORD PTR ds:0xc00236e8
c0013fd6:	80 3d 45 37 02 c0 00 	cmp    BYTE PTR ds:0xc0023745,0x0
c0013fdd:	75 15                	jne    c0013ff4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0013fdf:	e8 f8 f2 ff ff       	call   c00132dc <schedule()>
c0013fe4:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0013fe9:	48                   	dec    eax
c0013fea:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c0013fef:	75 de                	jne    c0013fcf <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0013ff1:	fb                   	sti    
c0013ff2:	eb db                	jmp    c0013fcf <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0013ff4:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0013ff9:	c7 05 4c 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002374c,0x0
c0014003:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0014007:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001400b:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001400f:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014013:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014017:	0f b7 ff             	movzx  edi,di
c001401a:	0f b7 f6             	movzx  esi,si
c001401d:	50                   	push   eax
c001401e:	6a 20                	push   0x20
c0014020:	6a 00                	push   0x0
c0014022:	68 60 37 02 c0       	push   0xc0023760
c0014027:	e8 a4 c4 fe ff       	call   c00004d0 <memset>
c001402c:	5a                   	pop    edx
c001402d:	59                   	pop    ecx
c001402e:	57                   	push   edi
c001402f:	56                   	push   esi
c0014030:	e8 2d fe ff ff       	call   c0013e62 <Vm::realToLinear(unsigned short, unsigned short)>
c0014035:	83 c4 10             	add    esp,0x10
c0014038:	89 c7                	mov    edi,eax
c001403a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001403e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014042:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014044:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0014049:	c6 05 45 37 02 c0 00 	mov    BYTE PTR ds:0xc0023745,0x0
c0014050:	48                   	dec    eax
c0014051:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c0014056:	75 01                	jne    c0014059 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0014058:	fb                   	sti    
c0014059:	83 ec 0c             	sub    esp,0xc
c001405c:	ff 35 48 37 02 c0    	push   DWORD PTR ds:0xc0023748
c0014062:	e8 39 f7 ff ff       	call   c00137a0 <unblockTask(ThreadControlBlock*)>
c0014067:	83 c4 1c             	add    esp,0x1c
c001406a:	b0 01                	mov    al,0x1
c001406c:	5b                   	pop    ebx
c001406d:	5e                   	pop    esi
c001406e:	5f                   	pop    edi
c001406f:	5d                   	pop    ebp
c0014070:	c3                   	ret    

c0014071 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014071:	55                   	push   ebp
c0014072:	57                   	push   edi
c0014073:	56                   	push   esi
c0014074:	53                   	push   ebx
c0014075:	83 ec 2c             	sub    esp,0x2c
c0014078:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001407c:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0014080:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0014084:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0014088:	fa                   	cli    
c0014089:	ff 05 e8 36 02 c0    	inc    DWORD PTR ds:0xc00236e8
c001408f:	0f b6 35 45 37 02 c0 	movzx  esi,BYTE PTR ds:0xc0023745
c0014096:	89 f0                	mov    eax,esi
c0014098:	84 c0                	test   al,al
c001409a:	75 1d                	jne    c00140b9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001409c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00140a0:	e8 37 f2 ff ff       	call   c00132dc <schedule()>
c00140a5:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c00140aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00140ae:	48                   	dec    eax
c00140af:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c00140b4:	75 d2                	jne    c0014088 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00140b6:	fb                   	sti    
c00140b7:	eb cf                	jmp    c0014088 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00140b9:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c00140be:	c7 05 4c 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002374c,0x0
c00140c8:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c00140cc:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00140d0:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c00140d4:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c00140d8:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00140dc:	50                   	push   eax
c00140dd:	6a 20                	push   0x20
c00140df:	6a 00                	push   0x0
c00140e1:	68 60 37 02 c0       	push   0xc0023760
c00140e6:	e8 e5 c3 fe ff       	call   c00004d0 <memset>
c00140eb:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00140f2:	e8 c2 36 ff ff       	call   c00077b9 <malloc>
c00140f7:	83 c4 0c             	add    esp,0xc
c00140fa:	89 c3                	mov    ebx,eax
c00140fc:	ff 35 10 37 02 c0    	push   DWORD PTR ds:0xc0023710
c0014102:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0014106:	50                   	push   eax
c0014107:	e8 be 68 ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c001410c:	83 c4 10             	add    esp,0x10
c001410f:	85 db                	test   ebx,ebx
c0014111:	75 0a                	jne    c001411d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0014113:	83 ec 0c             	sub    esp,0xc
c0014116:	68 48 e6 01 c0       	push   0xc001e648
c001411b:	eb 3e                	jmp    c001415b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001411d:	50                   	push   eax
c001411e:	8d 44 24 17          	lea    eax,[esp+0x17]
c0014122:	50                   	push   eax
c0014123:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014127:	50                   	push   eax
c0014128:	53                   	push   ebx
c0014129:	e8 08 6c ff ff       	call   c000ad36 <File::stat(unsigned long long*, bool*)>
c001412e:	83 c4 10             	add    esp,0x10
c0014131:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0014136:	74 0a                	je     c0014142 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0014138:	83 ec 0c             	sub    esp,0xc
c001413b:	68 5c e6 01 c0       	push   0xc001e65c
c0014140:	eb 19                	jmp    c001415b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0014142:	51                   	push   ecx
c0014143:	51                   	push   ecx
c0014144:	6a 01                	push   0x1
c0014146:	53                   	push   ebx
c0014147:	e8 3e 69 ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c001414c:	83 c4 10             	add    esp,0x10
c001414f:	85 c0                	test   eax,eax
c0014151:	74 24                	je     c0014177 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0014153:	83 ec 0c             	sub    esp,0xc
c0014156:	68 75 e6 01 c0       	push   0xc001e675
c001415b:	e8 6b bf ff ff       	call   c00100cb <KePanic(char const*)>
c0014160:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0014165:	83 c4 10             	add    esp,0x10
c0014168:	48                   	dec    eax
c0014169:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c001416e:	85 c0                	test   eax,eax
c0014170:	75 01                	jne    c0014173 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0014172:	fb                   	sti    
c0014173:	31 f6                	xor    esi,esi
c0014175:	eb 58                	jmp    c00141cf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0014177:	0f b7 ed             	movzx  ebp,bp
c001417a:	50                   	push   eax
c001417b:	0f b7 ff             	movzx  edi,di
c001417e:	50                   	push   eax
c001417f:	55                   	push   ebp
c0014180:	57                   	push   edi
c0014181:	e8 dc fc ff ff       	call   c0013e62 <Vm::realToLinear(unsigned short, unsigned short)>
c0014186:	5a                   	pop    edx
c0014187:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014189:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001418d:	51                   	push   ecx
c001418e:	50                   	push   eax
c001418f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014193:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014197:	53                   	push   ebx
c0014198:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001419b:	83 c4 14             	add    esp,0x14
c001419e:	53                   	push   ebx
c001419f:	e8 44 69 ff ff       	call   c000aae8 <File::close()>
c00141a4:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c00141a9:	83 c4 10             	add    esp,0x10
c00141ac:	48                   	dec    eax
c00141ad:	c6 05 45 37 02 c0 00 	mov    BYTE PTR ds:0xc0023745,0x0
c00141b4:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c00141b9:	85 c0                	test   eax,eax
c00141bb:	75 01                	jne    c00141be <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c00141bd:	fb                   	sti    
c00141be:	83 ec 0c             	sub    esp,0xc
c00141c1:	ff 35 48 37 02 c0    	push   DWORD PTR ds:0xc0023748
c00141c7:	e8 d4 f5 ff ff       	call   c00137a0 <unblockTask(ThreadControlBlock*)>
c00141cc:	83 c4 10             	add    esp,0x10
c00141cf:	83 c4 2c             	add    esp,0x2c
c00141d2:	89 f0                	mov    eax,esi
c00141d4:	5b                   	pop    ebx
c00141d5:	5e                   	pop    esi
c00141d6:	5f                   	pop    edi
c00141d7:	5d                   	pop    ebp
c00141d8:	c3                   	ret    

c00141d9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00141d9:	57                   	push   edi
c00141da:	56                   	push   esi
c00141db:	53                   	push   ebx
c00141dc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00141e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141e4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00141e8:	83 e8 06             	sub    eax,0x6
c00141eb:	0f b7 c0             	movzx  eax,ax
c00141ee:	50                   	push   eax
c00141ef:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00141f4:	50                   	push   eax
c00141f5:	e8 68 fc ff ff       	call   c0013e62 <Vm::realToLinear(unsigned short, unsigned short)>
c00141fa:	5a                   	pop    edx
c00141fb:	5e                   	pop    esi
c00141fc:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00141ff:	8d 56 fa             	lea    edx,[esi-0x6]
c0014202:	81 e2 ff ff 00 00    	and    edx,0xffff
c0014208:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001420b:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001420e:	83 c2 02             	add    edx,0x2
c0014211:	66 89 10             	mov    WORD PTR [eax],dx
c0014214:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0014217:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001421b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001421e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0014222:	89 d6                	mov    esi,edx
c0014224:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001422a:	66 81 e6 ff fd       	and    si,0xfdff
c001422f:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0014233:	74 07                	je     c001423c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0014235:	89 d6                	mov    esi,edx
c0014237:	66 81 ce 00 02       	or     si,0x200
c001423c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0014240:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014245:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014249:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0014251:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0014254:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001425c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001425f:	5b                   	pop    ebx
c0014260:	5e                   	pop    esi
c0014261:	5f                   	pop    edi
c0014262:	c3                   	ret    

c0014263 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0014263:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014268:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001426d:	c1 e0 04             	shl    eax,0x4
c0014270:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0014273:	c3                   	ret    

c0014274 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0014274:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014279:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001427e:	c1 e0 04             	shl    eax,0x4
c0014281:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0014285:	c3                   	ret    

c0014286 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0014286:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001428b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014290:	c1 e0 04             	shl    eax,0x4
c0014293:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0014296:	c3                   	ret    

c0014297 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0014297:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001429c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00142a1:	c1 e0 04             	shl    eax,0x4
c00142a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00142a8:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00142ab:	c3                   	ret    

c00142ac <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00142ac:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00142b1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00142b6:	c1 e0 04             	shl    eax,0x4
c00142b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00142bd:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00142c1:	c3                   	ret    

c00142c2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00142c2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00142c7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00142cc:	c1 e0 04             	shl    eax,0x4
c00142cf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00142d3:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00142d6:	c3                   	ret    

c00142d7 <Vm::faultHandler(regs*)>:
c00142d7:	55                   	push   ebp
c00142d8:	57                   	push   edi
c00142d9:	56                   	push   esi
c00142da:	53                   	push   ebx
c00142db:	83 ec 1c             	sub    esp,0x1c
c00142de:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00142e2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00142e5:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00142e9:	0f b7 f8             	movzx  edi,ax
c00142ec:	52                   	push   edx
c00142ed:	0f b7 c0             	movzx  eax,ax
c00142f0:	50                   	push   eax
c00142f1:	e8 6c fb ff ff       	call   c0013e62 <Vm::realToLinear(unsigned short, unsigned short)>
c00142f6:	5a                   	pop    edx
c00142f7:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00142fa:	59                   	pop    ecx
c00142fb:	89 c1                	mov    ecx,eax
c00142fd:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014300:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014304:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014309:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001430d:	0f b7 c5             	movzx  eax,bp
c0014310:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014314:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0014318:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001431c:	e8 41 fb ff ff       	call   c0013e62 <Vm::realToLinear(unsigned short, unsigned short)>
c0014321:	5e                   	pop    esi
c0014322:	be 06 00 00 00       	mov    esi,0x6
c0014327:	5a                   	pop    edx
c0014328:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001432d:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0014332:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0014335:	80 fa 9d             	cmp    dl,0x9d
c0014338:	0f 84 2c 02 00 00    	je     c001456a <Vm::faultHandler(regs*)+0x293>
c001433e:	0f 87 91 00 00 00    	ja     c00143d5 <Vm::faultHandler(regs*)+0xfe>
c0014344:	80 fa 66             	cmp    dl,0x66
c0014347:	0f 84 98 01 00 00    	je     c00144e5 <Vm::faultHandler(regs*)+0x20e>
c001434d:	77 47                	ja     c0014396 <Vm::faultHandler(regs*)+0xbf>
c001434f:	80 fa 36             	cmp    dl,0x36
c0014352:	0f 84 80 01 00 00    	je     c00144d8 <Vm::faultHandler(regs*)+0x201>
c0014358:	77 1a                	ja     c0014374 <Vm::faultHandler(regs*)+0x9d>
c001435a:	80 fa 26             	cmp    dl,0x26
c001435d:	0f 84 4e 01 00 00    	je     c00144b1 <Vm::faultHandler(regs*)+0x1da>
c0014363:	80 fa 2e             	cmp    dl,0x2e
c0014366:	0f 85 e2 05 00 00    	jne    c001494e <Vm::faultHandler(regs*)+0x677>
c001436c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001436f:	31 f6                	xor    esi,esi
c0014371:	41                   	inc    ecx
c0014372:	eb be                	jmp    c0014332 <Vm::faultHandler(regs*)+0x5b>
c0014374:	80 fa 64             	cmp    dl,0x64
c0014377:	0f 84 41 01 00 00    	je     c00144be <Vm::faultHandler(regs*)+0x1e7>
c001437d:	0f 87 48 01 00 00    	ja     c00144cb <Vm::faultHandler(regs*)+0x1f4>
c0014383:	80 fa 3e             	cmp    dl,0x3e
c0014386:	0f 85 c2 05 00 00    	jne    c001494e <Vm::faultHandler(regs*)+0x677>
c001438c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001438f:	be 01 00 00 00       	mov    esi,0x1
c0014394:	eb db                	jmp    c0014371 <Vm::faultHandler(regs*)+0x9a>
c0014396:	80 fa 6d             	cmp    dl,0x6d
c0014399:	0f 84 ec 02 00 00    	je     c001468b <Vm::faultHandler(regs*)+0x3b4>
c001439f:	77 17                	ja     c00143b8 <Vm::faultHandler(regs*)+0xe1>
c00143a1:	80 fa 67             	cmp    dl,0x67
c00143a4:	0f 84 48 01 00 00    	je     c00144f2 <Vm::faultHandler(regs*)+0x21b>
c00143aa:	80 fa 6c             	cmp    dl,0x6c
c00143ad:	0f 84 69 02 00 00    	je     c001461c <Vm::faultHandler(regs*)+0x345>
c00143b3:	e9 96 05 00 00       	jmp    c001494e <Vm::faultHandler(regs*)+0x677>
c00143b8:	80 fa 6f             	cmp    dl,0x6f
c00143bb:	0f 84 f4 03 00 00    	je     c00147b5 <Vm::faultHandler(regs*)+0x4de>
c00143c1:	0f 82 59 03 00 00    	jb     c0014720 <Vm::faultHandler(regs*)+0x449>
c00143c7:	80 fa 9c             	cmp    dl,0x9c
c00143ca:	0f 84 2f 01 00 00    	je     c00144ff <Vm::faultHandler(regs*)+0x228>
c00143d0:	e9 79 05 00 00       	jmp    c001494e <Vm::faultHandler(regs*)+0x677>
c00143d5:	80 fa ec             	cmp    dl,0xec
c00143d8:	0f 84 14 05 00 00    	je     c00148f2 <Vm::faultHandler(regs*)+0x61b>
c00143de:	77 7b                	ja     c001445b <Vm::faultHandler(regs*)+0x184>
c00143e0:	80 fa e4             	cmp    dl,0xe4
c00143e3:	0f 84 93 04 00 00    	je     c001487c <Vm::faultHandler(regs*)+0x5a5>
c00143e9:	77 53                	ja     c001443e <Vm::faultHandler(regs*)+0x167>
c00143eb:	80 fa cd             	cmp    dl,0xcd
c00143ee:	0f 84 d9 01 00 00    	je     c00145cd <Vm::faultHandler(regs*)+0x2f6>
c00143f4:	80 fa cf             	cmp    dl,0xcf
c00143f7:	0f 85 51 05 00 00    	jne    c001494e <Vm::faultHandler(regs*)+0x677>
c00143fd:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014400:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0014403:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0014407:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001440a:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001440e:	81 ca 00 02 02 00    	or     edx,0x20200
c0014414:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014417:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001441b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014421:	66 c1 e8 09          	shr    ax,0x9
c0014425:	83 e0 01             	and    eax,0x1
c0014428:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001442b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001442e:	83 c0 06             	add    eax,0x6
c0014431:	25 ff ff 00 00       	and    eax,0xffff
c0014436:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014439:	e9 0c 05 00 00       	jmp    c001494a <Vm::faultHandler(regs*)+0x673>
c001443e:	80 fa e6             	cmp    dl,0xe6
c0014441:	0f 84 7f 04 00 00    	je     c00148c6 <Vm::faultHandler(regs*)+0x5ef>
c0014447:	0f 82 4b 04 00 00    	jb     c0014898 <Vm::faultHandler(regs*)+0x5c1>
c001444d:	80 fa e7             	cmp    dl,0xe7
c0014450:	0f 84 87 04 00 00    	je     c00148dd <Vm::faultHandler(regs*)+0x606>
c0014456:	e9 f3 04 00 00       	jmp    c001494e <Vm::faultHandler(regs*)+0x677>
c001445b:	80 fa ef             	cmp    dl,0xef
c001445e:	0f 84 d1 04 00 00    	je     c0014935 <Vm::faultHandler(regs*)+0x65e>
c0014464:	77 28                	ja     c001448e <Vm::faultHandler(regs*)+0x1b7>
c0014466:	80 fa ed             	cmp    dl,0xed
c0014469:	0f 84 9f 04 00 00    	je     c001490e <Vm::faultHandler(regs*)+0x637>
c001446f:	80 fa ee             	cmp    dl,0xee
c0014472:	0f 85 d6 04 00 00    	jne    c001494e <Vm::faultHandler(regs*)+0x677>
c0014478:	50                   	push   eax
c0014479:	50                   	push   eax
c001447a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001447e:	50                   	push   eax
c001447f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014483:	50                   	push   eax
c0014484:	e8 a3 f9 ff ff       	call   c0013e2c <Vm::outbv(unsigned short, unsigned char)>
c0014489:	e9 9f 04 00 00       	jmp    c001492d <Vm::faultHandler(regs*)+0x656>
c001448e:	80 fa fa             	cmp    dl,0xfa
c0014491:	0f 84 69 01 00 00    	je     c0014600 <Vm::faultHandler(regs*)+0x329>
c0014497:	80 fa fb             	cmp    dl,0xfb
c001449a:	0f 84 6e 01 00 00    	je     c001460e <Vm::faultHandler(regs*)+0x337>
c00144a0:	80 fa f3             	cmp    dl,0xf3
c00144a3:	0f 85 a5 04 00 00    	jne    c001494e <Vm::faultHandler(regs*)+0x677>
c00144a9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00144ac:	e9 c0 fe ff ff       	jmp    c0014371 <Vm::faultHandler(regs*)+0x9a>
c00144b1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00144b4:	be 02 00 00 00       	mov    esi,0x2
c00144b9:	e9 b3 fe ff ff       	jmp    c0014371 <Vm::faultHandler(regs*)+0x9a>
c00144be:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00144c1:	be 03 00 00 00       	mov    esi,0x3
c00144c6:	e9 a6 fe ff ff       	jmp    c0014371 <Vm::faultHandler(regs*)+0x9a>
c00144cb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00144ce:	be 04 00 00 00       	mov    esi,0x4
c00144d3:	e9 99 fe ff ff       	jmp    c0014371 <Vm::faultHandler(regs*)+0x9a>
c00144d8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00144db:	be 05 00 00 00       	mov    esi,0x5
c00144e0:	e9 8c fe ff ff       	jmp    c0014371 <Vm::faultHandler(regs*)+0x9a>
c00144e5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00144e8:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00144ed:	e9 7f fe ff ff       	jmp    c0014371 <Vm::faultHandler(regs*)+0x9a>
c00144f2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00144f5:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00144fa:	e9 72 fe ff ff       	jmp    c0014371 <Vm::faultHandler(regs*)+0x9a>
c00144ff:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0014502:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014506:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001450b:	74 30                	je     c001453d <Vm::faultHandler(regs*)+0x266>
c001450d:	83 e9 04             	sub    ecx,0x4
c0014510:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014516:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001451c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001451f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014522:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014528:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001452c:	0f 84 15 04 00 00    	je     c0014947 <Vm::faultHandler(regs*)+0x670>
c0014532:	80 ce 02             	or     dh,0x2
c0014535:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014538:	e9 0a 04 00 00       	jmp    c0014947 <Vm::faultHandler(regs*)+0x670>
c001453d:	83 e9 02             	sub    ecx,0x2
c0014540:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014546:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014549:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001454d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014553:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014557:	74 05                	je     c001455e <Vm::faultHandler(regs*)+0x287>
c0014559:	80 ce 02             	or     dh,0x2
c001455c:	eb 03                	jmp    c0014561 <Vm::faultHandler(regs*)+0x28a>
c001455e:	80 e6 fd             	and    dh,0xfd
c0014561:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014565:	e9 dd 03 00 00       	jmp    c0014947 <Vm::faultHandler(regs*)+0x670>
c001456a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001456f:	74 2a                	je     c001459b <Vm::faultHandler(regs*)+0x2c4>
c0014571:	8b 10                	mov    edx,DWORD PTR [eax]
c0014573:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014579:	81 ca 00 02 02 00    	or     edx,0x20200
c001457f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014582:	8b 00                	mov    eax,DWORD PTR [eax]
c0014584:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001458a:	c1 e8 09             	shr    eax,0x9
c001458d:	83 e0 01             	and    eax,0x1
c0014590:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014593:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014596:	83 c0 04             	add    eax,0x4
c0014599:	eb 25                	jmp    c00145c0 <Vm::faultHandler(regs*)+0x2e9>
c001459b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001459e:	81 ca 00 02 02 00    	or     edx,0x20200
c00145a4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00145a7:	66 8b 00             	mov    ax,WORD PTR [eax]
c00145aa:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00145b0:	66 c1 e8 09          	shr    ax,0x9
c00145b4:	83 e0 01             	and    eax,0x1
c00145b7:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00145ba:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00145bd:	83 c0 02             	add    eax,0x2
c00145c0:	25 ff ff 00 00       	and    eax,0xffff
c00145c5:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00145c8:	e9 7a 03 00 00       	jmp    c0014947 <Vm::faultHandler(regs*)+0x670>
c00145cd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00145d1:	3c ee                	cmp    al,0xee
c00145d3:	75 10                	jne    c00145e5 <Vm::faultHandler(regs*)+0x30e>
c00145d5:	83 ec 0c             	sub    esp,0xc
c00145d8:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00145db:	e8 e9 f8 ff ff       	call   c0013ec9 <Vm::mainloop3(unsigned long)>
c00145e0:	e9 4b 03 00 00       	jmp    c0014930 <Vm::faultHandler(regs*)+0x659>
c00145e5:	83 ec 0c             	sub    esp,0xc
c00145e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00145ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145f0:	51                   	push   ecx
c00145f1:	50                   	push   eax
c00145f2:	53                   	push   ebx
c00145f3:	e8 e1 fb ff ff       	call   c00141d9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00145f8:	83 c4 20             	add    esp,0x20
c00145fb:	e9 4a 03 00 00       	jmp    c001494a <Vm::faultHandler(regs*)+0x673>
c0014600:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014605:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014609:	e9 39 03 00 00       	jmp    c0014947 <Vm::faultHandler(regs*)+0x670>
c001460e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014613:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014617:	e9 2b 03 00 00       	jmp    c0014947 <Vm::faultHandler(regs*)+0x670>
c001461c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001461f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014624:	74 2b                	je     c0014651 <Vm::faultHandler(regs*)+0x37a>
c0014626:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001462d:	76 22                	jbe    c0014651 <Vm::faultHandler(regs*)+0x37a>
c001462f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014633:	50                   	push   eax
c0014634:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014638:	50                   	push   eax
c0014639:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001463d:	50                   	push   eax
c001463e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014642:	50                   	push   eax
c0014643:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014647:	50                   	push   eax
c0014648:	6a 6c                	push   0x6c
c001464a:	6a 6c                	push   0x6c
c001464c:	e9 b9 01 00 00       	jmp    c001480a <Vm::faultHandler(regs*)+0x533>
c0014651:	83 ec 0c             	sub    esp,0xc
c0014654:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014658:	0f b7 f6             	movzx  esi,si
c001465b:	50                   	push   eax
c001465c:	e8 b8 f7 ff ff       	call   c0013e19 <Vm::inbv(unsigned short)>
c0014661:	83 c4 0c             	add    esp,0xc
c0014664:	0f b6 c0             	movzx  eax,al
c0014667:	50                   	push   eax
c0014668:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001466c:	50                   	push   eax
c001466d:	56                   	push   esi
c001466e:	e8 24 fc ff ff       	call   c0014297 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014673:	83 c4 10             	add    esp,0x10
c0014676:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014679:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001467d:	74 03                	je     c0014682 <Vm::faultHandler(regs*)+0x3ab>
c001467f:	48                   	dec    eax
c0014680:	eb 01                	jmp    c0014683 <Vm::faultHandler(regs*)+0x3ac>
c0014682:	40                   	inc    eax
c0014683:	0f b7 c0             	movzx  eax,ax
c0014686:	e9 8d 00 00 00       	jmp    c0014718 <Vm::faultHandler(regs*)+0x441>
c001468b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001468e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014691:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014696:	74 29                	je     c00146c1 <Vm::faultHandler(regs*)+0x3ea>
c0014698:	3d ff ff 00 00       	cmp    eax,0xffff
c001469d:	76 22                	jbe    c00146c1 <Vm::faultHandler(regs*)+0x3ea>
c001469f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00146a3:	50                   	push   eax
c00146a4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00146a8:	50                   	push   eax
c00146a9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00146ad:	50                   	push   eax
c00146ae:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00146b2:	50                   	push   eax
c00146b3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00146b7:	50                   	push   eax
c00146b8:	6a 6d                	push   0x6d
c00146ba:	6a 6d                	push   0x6d
c00146bc:	e9 49 01 00 00       	jmp    c001480a <Vm::faultHandler(regs*)+0x533>
c00146c1:	0f b7 c8             	movzx  ecx,ax
c00146c4:	0f b7 f6             	movzx  esi,si
c00146c7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00146ca:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00146cf:	74 20                	je     c00146f1 <Vm::faultHandler(regs*)+0x41a>
c00146d1:	ed                   	in     eax,dx
c00146d2:	55                   	push   ebp
c00146d3:	50                   	push   eax
c00146d4:	51                   	push   ecx
c00146d5:	56                   	push   esi
c00146d6:	e8 e7 fb ff ff       	call   c00142c2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00146db:	83 c4 10             	add    esp,0x10
c00146de:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00146e1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00146e5:	74 05                	je     c00146ec <Vm::faultHandler(regs*)+0x415>
c00146e7:	83 e8 04             	sub    eax,0x4
c00146ea:	eb 27                	jmp    c0014713 <Vm::faultHandler(regs*)+0x43c>
c00146ec:	83 c0 04             	add    eax,0x4
c00146ef:	eb 22                	jmp    c0014713 <Vm::faultHandler(regs*)+0x43c>
c00146f1:	66 ed                	in     ax,dx
c00146f3:	0f b7 c0             	movzx  eax,ax
c00146f6:	57                   	push   edi
c00146f7:	50                   	push   eax
c00146f8:	51                   	push   ecx
c00146f9:	56                   	push   esi
c00146fa:	e8 ad fb ff ff       	call   c00142ac <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00146ff:	83 c4 10             	add    esp,0x10
c0014702:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014705:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014709:	74 05                	je     c0014710 <Vm::faultHandler(regs*)+0x439>
c001470b:	83 e8 02             	sub    eax,0x2
c001470e:	eb 03                	jmp    c0014713 <Vm::faultHandler(regs*)+0x43c>
c0014710:	83 c0 02             	add    eax,0x2
c0014713:	25 ff ff 00 00       	and    eax,0xffff
c0014718:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001471b:	e9 27 02 00 00       	jmp    c0014947 <Vm::faultHandler(regs*)+0x670>
c0014720:	8d 46 ff             	lea    eax,[esi-0x1]
c0014723:	3c 05                	cmp    al,0x5
c0014725:	77 24                	ja     c001474b <Vm::faultHandler(regs*)+0x474>
c0014727:	0f b6 c0             	movzx  eax,al
c001472a:	ff 24 85 e8 e6 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1918]
c0014731:	0f b7 fd             	movzx  edi,bp
c0014734:	eb 15                	jmp    c001474b <Vm::faultHandler(regs*)+0x474>
c0014736:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001473a:	eb 0f                	jmp    c001474b <Vm::faultHandler(regs*)+0x474>
c001473c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014740:	eb 09                	jmp    c001474b <Vm::faultHandler(regs*)+0x474>
c0014742:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014746:	eb 03                	jmp    c001474b <Vm::faultHandler(regs*)+0x474>
c0014748:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001474b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001474e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014753:	74 29                	je     c001477e <Vm::faultHandler(regs*)+0x4a7>
c0014755:	3d ff ff 00 00       	cmp    eax,0xffff
c001475a:	76 22                	jbe    c001477e <Vm::faultHandler(regs*)+0x4a7>
c001475c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014760:	50                   	push   eax
c0014761:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014765:	50                   	push   eax
c0014766:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001476a:	50                   	push   eax
c001476b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001476f:	50                   	push   eax
c0014770:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014774:	50                   	push   eax
c0014775:	6a 6e                	push   0x6e
c0014777:	6a 6e                	push   0x6e
c0014779:	e9 8c 00 00 00       	jmp    c001480a <Vm::faultHandler(regs*)+0x533>
c001477e:	0f b7 c0             	movzx  eax,ax
c0014781:	52                   	push   edx
c0014782:	52                   	push   edx
c0014783:	50                   	push   eax
c0014784:	57                   	push   edi
c0014785:	e8 d9 fa ff ff       	call   c0014263 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001478a:	59                   	pop    ecx
c001478b:	0f b6 c0             	movzx  eax,al
c001478e:	5e                   	pop    esi
c001478f:	50                   	push   eax
c0014790:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014794:	50                   	push   eax
c0014795:	e8 92 f6 ff ff       	call   c0013e2c <Vm::outbv(unsigned short, unsigned char)>
c001479a:	83 c4 10             	add    esp,0x10
c001479d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00147a0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00147a4:	74 03                	je     c00147a9 <Vm::faultHandler(regs*)+0x4d2>
c00147a6:	48                   	dec    eax
c00147a7:	eb 01                	jmp    c00147aa <Vm::faultHandler(regs*)+0x4d3>
c00147a9:	40                   	inc    eax
c00147aa:	0f b7 c0             	movzx  eax,ax
c00147ad:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00147b0:	e9 92 01 00 00       	jmp    c0014947 <Vm::faultHandler(regs*)+0x670>
c00147b5:	8d 46 ff             	lea    eax,[esi-0x1]
c00147b8:	3c 05                	cmp    al,0x5
c00147ba:	77 1f                	ja     c00147db <Vm::faultHandler(regs*)+0x504>
c00147bc:	0f b6 c0             	movzx  eax,al
c00147bf:	ff 24 85 00 e7 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1900]
c00147c6:	89 ef                	mov    edi,ebp
c00147c8:	eb 11                	jmp    c00147db <Vm::faultHandler(regs*)+0x504>
c00147ca:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00147cd:	eb 0c                	jmp    c00147db <Vm::faultHandler(regs*)+0x504>
c00147cf:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00147d2:	eb 07                	jmp    c00147db <Vm::faultHandler(regs*)+0x504>
c00147d4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00147d7:	eb 02                	jmp    c00147db <Vm::faultHandler(regs*)+0x504>
c00147d9:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00147db:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00147de:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00147e3:	74 37                	je     c001481c <Vm::faultHandler(regs*)+0x545>
c00147e5:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00147eb:	76 2f                	jbe    c001481c <Vm::faultHandler(regs*)+0x545>
c00147ed:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00147f1:	50                   	push   eax
c00147f2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00147f6:	50                   	push   eax
c00147f7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00147fb:	50                   	push   eax
c00147fc:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014800:	50                   	push   eax
c0014801:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014805:	50                   	push   eax
c0014806:	6a 6f                	push   0x6f
c0014808:	6a 6f                	push   0x6f
c001480a:	68 8e e6 01 c0       	push   0xc001e68e
c001480f:	e8 40 5c ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014814:	83 c4 20             	add    esp,0x20
c0014817:	e9 86 01 00 00       	jmp    c00149a2 <Vm::faultHandler(regs*)+0x6cb>
c001481c:	0f b7 d7             	movzx  edx,di
c001481f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014822:	0f b7 c6             	movzx  eax,si
c0014825:	81 e1 00 04 00 00    	and    ecx,0x400
c001482b:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001482e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014833:	74 1d                	je     c0014852 <Vm::faultHandler(regs*)+0x57b>
c0014835:	55                   	push   ebp
c0014836:	55                   	push   ebp
c0014837:	50                   	push   eax
c0014838:	52                   	push   edx
c0014839:	e8 48 fa ff ff       	call   c0014286 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001483e:	83 c4 10             	add    esp,0x10
c0014841:	89 fa                	mov    edx,edi
c0014843:	ef                   	out    dx,eax
c0014844:	85 c9                	test   ecx,ecx
c0014846:	74 05                	je     c001484d <Vm::faultHandler(regs*)+0x576>
c0014848:	83 ee 04             	sub    esi,0x4
c001484b:	eb 21                	jmp    c001486e <Vm::faultHandler(regs*)+0x597>
c001484d:	83 c6 04             	add    esi,0x4
c0014850:	eb 1c                	jmp    c001486e <Vm::faultHandler(regs*)+0x597>
c0014852:	55                   	push   ebp
c0014853:	55                   	push   ebp
c0014854:	50                   	push   eax
c0014855:	52                   	push   edx
c0014856:	e8 19 fa ff ff       	call   c0014274 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001485b:	83 c4 10             	add    esp,0x10
c001485e:	89 fa                	mov    edx,edi
c0014860:	66 ef                	out    dx,ax
c0014862:	85 c9                	test   ecx,ecx
c0014864:	74 05                	je     c001486b <Vm::faultHandler(regs*)+0x594>
c0014866:	83 ee 02             	sub    esi,0x2
c0014869:	eb 03                	jmp    c001486e <Vm::faultHandler(regs*)+0x597>
c001486b:	83 c6 02             	add    esi,0x2
c001486e:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014874:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014877:	e9 cb 00 00 00       	jmp    c0014947 <Vm::faultHandler(regs*)+0x670>
c001487c:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014883:	83 ec 0c             	sub    esp,0xc
c0014886:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001488a:	50                   	push   eax
c001488b:	e8 89 f5 ff ff       	call   c0013e19 <Vm::inbv(unsigned short)>
c0014890:	0f b6 c0             	movzx  eax,al
c0014893:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014896:	eb 3f                	jmp    c00148d7 <Vm::faultHandler(regs*)+0x600>
c0014898:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001489d:	74 07                	je     c00148a6 <Vm::faultHandler(regs*)+0x5cf>
c001489f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00148a3:	ed                   	in     eax,dx
c00148a4:	eb 14                	jmp    c00148ba <Vm::faultHandler(regs*)+0x5e3>
c00148a6:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00148a9:	66 31 f6             	xor    si,si
c00148ac:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00148af:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00148b3:	66 ed                	in     ax,dx
c00148b5:	0f b7 c0             	movzx  eax,ax
c00148b8:	09 f0                	or     eax,esi
c00148ba:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00148bd:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00148c1:	e9 84 00 00 00       	jmp    c001494a <Vm::faultHandler(regs*)+0x673>
c00148c6:	52                   	push   edx
c00148c7:	52                   	push   edx
c00148c8:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00148cc:	50                   	push   eax
c00148cd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00148d1:	50                   	push   eax
c00148d2:	e8 55 f5 ff ff       	call   c0013e2c <Vm::outbv(unsigned short, unsigned char)>
c00148d7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00148db:	eb 53                	jmp    c0014930 <Vm::faultHandler(regs*)+0x659>
c00148dd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00148e0:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00148e4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00148e9:	74 03                	je     c00148ee <Vm::faultHandler(regs*)+0x617>
c00148eb:	ef                   	out    dx,eax
c00148ec:	eb cf                	jmp    c00148bd <Vm::faultHandler(regs*)+0x5e6>
c00148ee:	66 ef                	out    dx,ax
c00148f0:	eb cb                	jmp    c00148bd <Vm::faultHandler(regs*)+0x5e6>
c00148f2:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00148f9:	83 ec 0c             	sub    esp,0xc
c00148fc:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014900:	50                   	push   eax
c0014901:	e8 13 f5 ff ff       	call   c0013e19 <Vm::inbv(unsigned short)>
c0014906:	0f b6 c0             	movzx  eax,al
c0014909:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001490c:	eb 1f                	jmp    c001492d <Vm::faultHandler(regs*)+0x656>
c001490e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014911:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014916:	74 03                	je     c001491b <Vm::faultHandler(regs*)+0x644>
c0014918:	ed                   	in     eax,dx
c0014919:	eb 0d                	jmp    c0014928 <Vm::faultHandler(regs*)+0x651>
c001491b:	66 ed                	in     ax,dx
c001491d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0014920:	0f b7 c0             	movzx  eax,ax
c0014923:	66 31 d2             	xor    dx,dx
c0014926:	09 d0                	or     eax,edx
c0014928:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001492b:	eb 1a                	jmp    c0014947 <Vm::faultHandler(regs*)+0x670>
c001492d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014930:	83 c4 10             	add    esp,0x10
c0014933:	eb 15                	jmp    c001494a <Vm::faultHandler(regs*)+0x673>
c0014935:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014938:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001493b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014940:	74 03                	je     c0014945 <Vm::faultHandler(regs*)+0x66e>
c0014942:	ef                   	out    dx,eax
c0014943:	eb 02                	jmp    c0014947 <Vm::faultHandler(regs*)+0x670>
c0014945:	66 ef                	out    dx,ax
c0014947:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001494a:	b0 01                	mov    al,0x1
c001494c:	eb 56                	jmp    c00149a4 <Vm::faultHandler(regs*)+0x6cd>
c001494e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014952:	50                   	push   eax
c0014953:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014957:	50                   	push   eax
c0014958:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001495c:	50                   	push   eax
c001495d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014961:	50                   	push   eax
c0014962:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014966:	50                   	push   eax
c0014967:	52                   	push   edx
c0014968:	52                   	push   edx
c0014969:	68 bb e6 01 c0       	push   0xc001e6bb
c001496e:	e8 e1 5a ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014973:	83 c4 20             	add    esp,0x20
c0014976:	83 ec 0c             	sub    esp,0xc
c0014979:	6a 60                	push   0x60
c001497b:	e8 99 f4 ff ff       	call   c0013e19 <Vm::inbv(unsigned short)>
c0014980:	83 c4 10             	add    esp,0x10
c0014983:	3c 1c                	cmp    al,0x1c
c0014985:	74 04                	je     c001498b <Vm::faultHandler(regs*)+0x6b4>
c0014987:	3c 5a                	cmp    al,0x5a
c0014989:	75 eb                	jne    c0014976 <Vm::faultHandler(regs*)+0x69f>
c001498b:	3c 5a                	cmp    al,0x5a
c001498d:	74 04                	je     c0014993 <Vm::faultHandler(regs*)+0x6bc>
c001498f:	3c 1c                	cmp    al,0x1c
c0014991:	75 0f                	jne    c00149a2 <Vm::faultHandler(regs*)+0x6cb>
c0014993:	83 ec 0c             	sub    esp,0xc
c0014996:	6a 60                	push   0x60
c0014998:	e8 7c f4 ff ff       	call   c0013e19 <Vm::inbv(unsigned short)>
c001499d:	83 c4 10             	add    esp,0x10
c00149a0:	eb e9                	jmp    c001498b <Vm::faultHandler(regs*)+0x6b4>
c00149a2:	31 c0                	xor    eax,eax
c00149a4:	83 c4 1c             	add    esp,0x1c
c00149a7:	5b                   	pop    ebx
c00149a8:	5e                   	pop    esi
c00149a9:	5f                   	pop    edi
c00149aa:	5d                   	pop    ebp
c00149ab:	c3                   	ret    

c00149ac <noCopro(unsigned long)>:
c00149ac:	c3                   	ret    

c00149ad <nmiHandler(regs*, void*)>:
c00149ad:	83 ec 0c             	sub    esp,0xc
c00149b0:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c00149b5:	83 ec 0c             	sub    esp,0xc
c00149b8:	50                   	push   eax
c00149b9:	e8 1c 26 ff ff       	call   c0006fda <Computer::handleNMI()>
c00149be:	83 c4 10             	add    esp,0x10
c00149c1:	90                   	nop
c00149c2:	83 c4 0c             	add    esp,0xc
c00149c5:	c3                   	ret    

c00149c6 <doubleFault(regs*, void*)>:
c00149c6:	55                   	push   ebp
c00149c7:	89 e5                	mov    ebp,esp
c00149c9:	83 ec 08             	sub    esp,0x8
c00149cc:	83 ec 0c             	sub    esp,0xc
c00149cf:	68 18 e7 01 c0       	push   0xc001e718
c00149d4:	e8 f2 b6 ff ff       	call   c00100cb <KePanic(char const*)>
c00149d9:	83 c4 10             	add    esp,0x10
c00149dc:	90                   	nop
c00149dd:	c9                   	leave  
c00149de:	c3                   	ret    

c00149df <displayDebugInfo(regs*)>:
c00149df:	83 ec 1c             	sub    esp,0x1c
c00149e2:	0f 20 c0             	mov    eax,cr0
c00149e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00149e9:	0f 20 d0             	mov    eax,cr2
c00149ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00149f0:	0f 20 d8             	mov    eax,cr3
c00149f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00149f7:	0f 20 e0             	mov    eax,cr4
c00149fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00149fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a01:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014a04:	83 ec 08             	sub    esp,0x8
c0014a07:	50                   	push   eax
c0014a08:	68 34 e7 01 c0       	push   0xc001e734
c0014a0d:	e8 42 5a ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014a12:	83 c4 10             	add    esp,0x10
c0014a15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a19:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014a1c:	83 ec 08             	sub    esp,0x8
c0014a1f:	50                   	push   eax
c0014a20:	68 25 e7 01 c0       	push   0xc001e725
c0014a25:	e8 2a 5a ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014a2a:	83 c4 10             	add    esp,0x10
c0014a2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a31:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014a34:	83 ec 08             	sub    esp,0x8
c0014a37:	50                   	push   eax
c0014a38:	68 30 e7 01 c0       	push   0xc001e730
c0014a3d:	e8 12 5a ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014a42:	83 c4 10             	add    esp,0x10
c0014a45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a49:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a4c:	83 ec 08             	sub    esp,0x8
c0014a4f:	50                   	push   eax
c0014a50:	68 3f e7 01 c0       	push   0xc001e73f
c0014a55:	e8 fa 59 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014a5a:	83 c4 10             	add    esp,0x10
c0014a5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a61:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0014a64:	83 ec 08             	sub    esp,0x8
c0014a67:	50                   	push   eax
c0014a68:	68 4a e7 01 c0       	push   0xc001e74a
c0014a6d:	e8 e2 59 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014a72:	83 c4 10             	add    esp,0x10
c0014a75:	83 ec 08             	sub    esp,0x8
c0014a78:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014a7c:	68 55 e7 01 c0       	push   0xc001e755
c0014a81:	e8 ce 59 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014a86:	83 c4 10             	add    esp,0x10
c0014a89:	83 ec 08             	sub    esp,0x8
c0014a8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014a90:	68 60 e7 01 c0       	push   0xc001e760
c0014a95:	e8 ba 59 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014a9a:	83 c4 10             	add    esp,0x10
c0014a9d:	a1 10 37 02 c0       	mov    eax,ds:0xc0023710
c0014aa2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014aa8:	83 ec 0c             	sub    esp,0xc
c0014aab:	50                   	push   eax
c0014aac:	e8 46 39 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0014ab1:	83 c4 10             	add    esp,0x10
c0014ab4:	a1 10 37 02 c0       	mov    eax,ds:0xc0023710
c0014ab9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014abf:	83 ec 08             	sub    esp,0x8
c0014ac2:	68 6b e7 01 c0       	push   0xc001e76b
c0014ac7:	50                   	push   eax
c0014ac8:	e8 69 3c ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014acd:	83 c4 10             	add    esp,0x10
c0014ad0:	a1 10 37 02 c0       	mov    eax,ds:0xc0023710
c0014ad5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014adb:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0014ae0:	8b 12                	mov    edx,DWORD PTR [edx]
c0014ae2:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014ae5:	83 c2 0c             	add    edx,0xc
c0014ae8:	83 ec 08             	sub    esp,0x8
c0014aeb:	52                   	push   edx
c0014aec:	50                   	push   eax
c0014aed:	e8 44 3c ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014af2:	83 c4 10             	add    esp,0x10
c0014af5:	a1 10 37 02 c0       	mov    eax,ds:0xc0023710
c0014afa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b00:	83 ec 08             	sub    esp,0x8
c0014b03:	68 74 e7 01 c0       	push   0xc001e774
c0014b08:	50                   	push   eax
c0014b09:	e8 28 3c ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014b0e:	83 c4 10             	add    esp,0x10
c0014b11:	a1 10 37 02 c0       	mov    eax,ds:0xc0023710
c0014b16:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b1c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014b20:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0014b23:	83 ec 08             	sub    esp,0x8
c0014b26:	52                   	push   edx
c0014b27:	50                   	push   eax
c0014b28:	e8 c3 3b ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014b2d:	83 c4 10             	add    esp,0x10
c0014b30:	a1 10 37 02 c0       	mov    eax,ds:0xc0023710
c0014b35:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b3b:	83 ec 08             	sub    esp,0x8
c0014b3e:	68 7c e7 01 c0       	push   0xc001e77c
c0014b43:	50                   	push   eax
c0014b44:	e8 ed 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014b49:	83 c4 10             	add    esp,0x10
c0014b4c:	a1 10 37 02 c0       	mov    eax,ds:0xc0023710
c0014b51:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b57:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014b5b:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0014b5e:	83 ec 08             	sub    esp,0x8
c0014b61:	52                   	push   edx
c0014b62:	50                   	push   eax
c0014b63:	e8 88 3b ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014b68:	83 c4 10             	add    esp,0x10
c0014b6b:	a1 10 37 02 c0       	mov    eax,ds:0xc0023710
c0014b70:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b76:	83 ec 08             	sub    esp,0x8
c0014b79:	68 84 e7 01 c0       	push   0xc001e784
c0014b7e:	50                   	push   eax
c0014b7f:	e8 b2 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014b84:	83 c4 10             	add    esp,0x10
c0014b87:	a1 10 37 02 c0       	mov    eax,ds:0xc0023710
c0014b8c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b92:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014b96:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0014b99:	83 ec 08             	sub    esp,0x8
c0014b9c:	52                   	push   edx
c0014b9d:	50                   	push   eax
c0014b9e:	e8 4d 3b ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014ba3:	83 c4 10             	add    esp,0x10
c0014ba6:	a1 10 37 02 c0       	mov    eax,ds:0xc0023710
c0014bab:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014bb1:	83 ec 08             	sub    esp,0x8
c0014bb4:	68 8c e7 01 c0       	push   0xc001e78c
c0014bb9:	50                   	push   eax
c0014bba:	e8 77 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014bbf:	83 c4 10             	add    esp,0x10
c0014bc2:	a1 10 37 02 c0       	mov    eax,ds:0xc0023710
c0014bc7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014bcd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014bd1:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014bd4:	83 ec 08             	sub    esp,0x8
c0014bd7:	52                   	push   edx
c0014bd8:	50                   	push   eax
c0014bd9:	e8 12 3b ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014bde:	83 c4 10             	add    esp,0x10
c0014be1:	a1 10 37 02 c0       	mov    eax,ds:0xc0023710
c0014be6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014bec:	83 ec 08             	sub    esp,0x8
c0014bef:	68 94 e7 01 c0       	push   0xc001e794
c0014bf4:	50                   	push   eax
c0014bf5:	e8 3c 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014bfa:	83 c4 10             	add    esp,0x10
c0014bfd:	a1 10 37 02 c0       	mov    eax,ds:0xc0023710
c0014c02:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c08:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014c0c:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0014c0f:	83 ec 08             	sub    esp,0x8
c0014c12:	52                   	push   edx
c0014c13:	50                   	push   eax
c0014c14:	e8 d7 3a ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014c19:	83 c4 10             	add    esp,0x10
c0014c1c:	a1 10 37 02 c0       	mov    eax,ds:0xc0023710
c0014c21:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c27:	83 ec 08             	sub    esp,0x8
c0014c2a:	68 9c e7 01 c0       	push   0xc001e79c
c0014c2f:	50                   	push   eax
c0014c30:	e8 01 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014c35:	83 c4 10             	add    esp,0x10
c0014c38:	a1 10 37 02 c0       	mov    eax,ds:0xc0023710
c0014c3d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c43:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014c47:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0014c4a:	83 ec 08             	sub    esp,0x8
c0014c4d:	52                   	push   edx
c0014c4e:	50                   	push   eax
c0014c4f:	e8 9c 3a ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014c54:	83 c4 10             	add    esp,0x10
c0014c57:	a1 10 37 02 c0       	mov    eax,ds:0xc0023710
c0014c5c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c62:	83 ec 08             	sub    esp,0x8
c0014c65:	68 a4 e7 01 c0       	push   0xc001e7a4
c0014c6a:	50                   	push   eax
c0014c6b:	e8 c6 3a ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014c70:	83 c4 10             	add    esp,0x10
c0014c73:	a1 10 37 02 c0       	mov    eax,ds:0xc0023710
c0014c78:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c7e:	83 ec 08             	sub    esp,0x8
c0014c81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014c85:	50                   	push   eax
c0014c86:	e8 65 3a ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014c8b:	83 c4 10             	add    esp,0x10
c0014c8e:	a1 10 37 02 c0       	mov    eax,ds:0xc0023710
c0014c93:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c99:	83 ec 08             	sub    esp,0x8
c0014c9c:	68 ad e7 01 c0       	push   0xc001e7ad
c0014ca1:	50                   	push   eax
c0014ca2:	e8 8f 3a ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014ca7:	83 c4 10             	add    esp,0x10
c0014caa:	a1 10 37 02 c0       	mov    eax,ds:0xc0023710
c0014caf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014cb5:	83 ec 08             	sub    esp,0x8
c0014cb8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014cbc:	50                   	push   eax
c0014cbd:	e8 2e 3a ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014cc2:	83 c4 10             	add    esp,0x10
c0014cc5:	a1 10 37 02 c0       	mov    eax,ds:0xc0023710
c0014cca:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014cd0:	83 ec 08             	sub    esp,0x8
c0014cd3:	68 b5 e7 01 c0       	push   0xc001e7b5
c0014cd8:	50                   	push   eax
c0014cd9:	e8 58 3a ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014cde:	83 c4 10             	add    esp,0x10
c0014ce1:	a1 10 37 02 c0       	mov    eax,ds:0xc0023710
c0014ce6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014cec:	83 ec 08             	sub    esp,0x8
c0014cef:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014cf3:	50                   	push   eax
c0014cf4:	e8 f7 39 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014cf9:	83 c4 10             	add    esp,0x10
c0014cfc:	fa                   	cli    
c0014cfd:	f4                   	hlt    
c0014cfe:	eb fe                	jmp    c0014cfe <displayDebugInfo(regs*)+0x31f>

c0014d00 <HalSystemIdle()>:
c0014d00:	56                   	push   esi
c0014d01:	53                   	push   ebx
c0014d02:	83 ec 14             	sub    esp,0x14
c0014d05:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c0014d0a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014d10:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0014d16:	83 e0 04             	and    eax,0x4
c0014d19:	84 c0                	test   al,al
c0014d1b:	0f 95 c0             	setne  al
c0014d1e:	84 c0                	test   al,al
c0014d20:	74 4c                	je     c0014d6e <HalSystemIdle()+0x6e>
c0014d22:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c0014d27:	83 ec 08             	sub    esp,0x8
c0014d2a:	68 e1 00 00 00       	push   0xe1
c0014d2f:	50                   	push   eax
c0014d30:	e8 bd 20 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c0014d35:	83 c4 10             	add    esp,0x10
c0014d38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014d3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014d40:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c0014d45:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d49:	83 e2 02             	and    edx,0x2
c0014d4c:	89 d3                	mov    ebx,edx
c0014d4e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d52:	83 e2 00             	and    edx,0x0
c0014d55:	89 d6                	mov    esi,edx
c0014d57:	56                   	push   esi
c0014d58:	53                   	push   ebx
c0014d59:	68 e1 00 00 00       	push   0xe1
c0014d5e:	50                   	push   eax
c0014d5f:	e8 ba 20 ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c0014d64:	83 c4 10             	add    esp,0x10
c0014d67:	e8 28 b4 fe ff       	call   c0000194 <doTPAUSE>
c0014d6c:	eb 01                	jmp    c0014d6f <HalSystemIdle()+0x6f>
c0014d6e:	f4                   	hlt    
c0014d6f:	90                   	nop
c0014d70:	83 c4 14             	add    esp,0x14
c0014d73:	5b                   	pop    ebx
c0014d74:	5e                   	pop    esi
c0014d75:	c3                   	ret    

c0014d76 <displayProgramFault(char const*)>:
c0014d76:	83 ec 0c             	sub    esp,0xc
c0014d79:	83 ec 0c             	sub    esp,0xc
c0014d7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d80:	e8 cf 56 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014d85:	83 c4 10             	add    esp,0x10
c0014d88:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014d8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d8f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014d92:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d98:	85 c0                	test   eax,eax
c0014d9a:	74 21                	je     c0014dbd <displayProgramFault(char const*)+0x47>
c0014d9c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014da1:	8b 00                	mov    eax,DWORD PTR [eax]
c0014da3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014da6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014dac:	6a 04                	push   0x4
c0014dae:	6a 0f                	push   0xf
c0014db0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014db4:	50                   	push   eax
c0014db5:	e8 ee 39 ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014dba:	83 c4 10             	add    esp,0x10
c0014dbd:	90                   	nop
c0014dbe:	83 c4 0c             	add    esp,0xc
c0014dc1:	c3                   	ret    

c0014dc2 <gpFault(regs*, void*)>:
c0014dc2:	83 ec 1c             	sub    esp,0x1c
c0014dc5:	c7 05 90 37 02 c0 d7 42 01 c0 	mov    DWORD PTR ds:0xc0023790,0xc00142d7
c0014dcf:	a1 90 37 02 c0       	mov    eax,ds:0xc0023790
c0014dd4:	85 c0                	test   eax,eax
c0014dd6:	74 1c                	je     c0014df4 <gpFault(regs*, void*)+0x32>
c0014dd8:	a1 90 37 02 c0       	mov    eax,ds:0xc0023790
c0014ddd:	83 ec 0c             	sub    esp,0xc
c0014de0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014de4:	ff d0                	call   eax
c0014de6:	83 c4 10             	add    esp,0x10
c0014de9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014ded:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0014df2:	75 2e                	jne    c0014e22 <gpFault(regs*, void*)+0x60>
c0014df4:	83 ec 0c             	sub    esp,0xc
c0014df7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014dfb:	e8 df fb ff ff       	call   c00149df <displayDebugInfo(regs*)>
c0014e00:	83 c4 10             	add    esp,0x10
c0014e03:	83 ec 0c             	sub    esp,0xc
c0014e06:	68 bd e7 01 c0       	push   0xc001e7bd
c0014e0b:	e8 66 ff ff ff       	call   c0014d76 <displayProgramFault(char const*)>
c0014e10:	83 c4 10             	add    esp,0x10
c0014e13:	83 ec 0c             	sub    esp,0xc
c0014e16:	6a 00                	push   0x0
c0014e18:	e8 af ee ff ff       	call   c0013ccc <Thr::terminateFromIRQ(int)>
c0014e1d:	83 c4 10             	add    esp,0x10
c0014e20:	eb 01                	jmp    c0014e23 <gpFault(regs*, void*)+0x61>
c0014e22:	90                   	nop
c0014e23:	83 c4 1c             	add    esp,0x1c
c0014e26:	c3                   	ret    

c0014e27 <pgFault(regs*, void*)>:
c0014e27:	83 ec 1c             	sub    esp,0x1c
c0014e2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e2e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014e31:	0f 20 d0             	mov    eax,cr2
c0014e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014e38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014e3c:	83 ec 04             	sub    esp,0x4
c0014e3f:	52                   	push   edx
c0014e40:	50                   	push   eax
c0014e41:	68 9c e8 01 c0       	push   0xc001e89c
c0014e46:	e8 09 56 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014e4b:	83 c4 10             	add    esp,0x10
c0014e4e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014e53:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e55:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e58:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0014e5e:	0f 20 d2             	mov    edx,cr2
c0014e61:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014e65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014e69:	83 ec 08             	sub    esp,0x8
c0014e6c:	52                   	push   edx
c0014e6d:	50                   	push   eax
c0014e6e:	e8 13 52 ff ff       	call   c000a086 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014e73:	83 c4 10             	add    esp,0x10
c0014e76:	84 c0                	test   al,al
c0014e78:	75 2e                	jne    c0014ea8 <pgFault(regs*, void*)+0x81>
c0014e7a:	83 ec 0c             	sub    esp,0xc
c0014e7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014e81:	e8 59 fb ff ff       	call   c00149df <displayDebugInfo(regs*)>
c0014e86:	83 c4 10             	add    esp,0x10
c0014e89:	83 ec 0c             	sub    esp,0xc
c0014e8c:	68 d6 e7 01 c0       	push   0xc001e7d6
c0014e91:	e8 e0 fe ff ff       	call   c0014d76 <displayProgramFault(char const*)>
c0014e96:	83 c4 10             	add    esp,0x10
c0014e99:	83 ec 0c             	sub    esp,0xc
c0014e9c:	6a 00                	push   0x0
c0014e9e:	e8 29 ee ff ff       	call   c0013ccc <Thr::terminateFromIRQ(int)>
c0014ea3:	83 c4 10             	add    esp,0x10
c0014ea6:	eb 01                	jmp    c0014ea9 <pgFault(regs*, void*)+0x82>
c0014ea8:	90                   	nop
c0014ea9:	83 c4 1c             	add    esp,0x1c
c0014eac:	c3                   	ret    

c0014ead <otherISRHandler(regs*, void*)>:
c0014ead:	83 ec 0c             	sub    esp,0xc
c0014eb0:	83 ec 0c             	sub    esp,0xc
c0014eb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014eb7:	e8 23 fb ff ff       	call   c00149df <displayDebugInfo(regs*)>
c0014ebc:	83 c4 10             	add    esp,0x10
c0014ebf:	83 ec 0c             	sub    esp,0xc
c0014ec2:	68 c4 e8 01 c0       	push   0xc001e8c4
c0014ec7:	e8 aa fe ff ff       	call   c0014d76 <displayProgramFault(char const*)>
c0014ecc:	83 c4 10             	add    esp,0x10
c0014ecf:	83 ec 0c             	sub    esp,0xc
c0014ed2:	6a 00                	push   0x0
c0014ed4:	e8 f3 ed ff ff       	call   c0013ccc <Thr::terminateFromIRQ(int)>
c0014ed9:	83 c4 10             	add    esp,0x10
c0014edc:	90                   	nop
c0014edd:	83 c4 0c             	add    esp,0xc
c0014ee0:	c3                   	ret    

c0014ee1 <opcodeFault(regs*, void*)>:
c0014ee1:	55                   	push   ebp
c0014ee2:	89 e5                	mov    ebp,esp
c0014ee4:	83 ec 08             	sub    esp,0x8
c0014ee7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eea:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014eed:	83 ec 08             	sub    esp,0x8
c0014ef0:	50                   	push   eax
c0014ef1:	68 e1 e7 01 c0       	push   0xc001e7e1
c0014ef6:	e8 59 55 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014efb:	83 c4 10             	add    esp,0x10
c0014efe:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c0014f03:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014f09:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0014f0f:	84 c0                	test   al,al
c0014f11:	74 21                	je     c0014f34 <opcodeFault(regs*, void*)+0x53>
c0014f13:	83 ec 0c             	sub    esp,0xc
c0014f16:	68 ec e8 01 c0       	push   0xc001e8ec
c0014f1b:	e8 34 55 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014f20:	83 c4 10             	add    esp,0x10
c0014f23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f26:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f29:	8d 50 19             	lea    edx,[eax+0x19]
c0014f2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f2f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f32:	eb 2b                	jmp    c0014f5f <opcodeFault(regs*, void*)+0x7e>
c0014f34:	83 ec 0c             	sub    esp,0xc
c0014f37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014f3a:	e8 a0 fa ff ff       	call   c00149df <displayDebugInfo(regs*)>
c0014f3f:	83 c4 10             	add    esp,0x10
c0014f42:	83 ec 0c             	sub    esp,0xc
c0014f45:	68 ef e7 01 c0       	push   0xc001e7ef
c0014f4a:	e8 27 fe ff ff       	call   c0014d76 <displayProgramFault(char const*)>
c0014f4f:	83 c4 10             	add    esp,0x10
c0014f52:	83 ec 0c             	sub    esp,0xc
c0014f55:	6a 00                	push   0x0
c0014f57:	e8 70 ed ff ff       	call   c0013ccc <Thr::terminateFromIRQ(int)>
c0014f5c:	83 c4 10             	add    esp,0x10
c0014f5f:	c9                   	leave  
c0014f60:	c3                   	ret    

c0014f61 <i386SaveCoprocessor(void*)>:
c0014f61:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f65:	83 c0 3f             	add    eax,0x3f
c0014f68:	83 e0 c0             	and    eax,0xffffffc0
c0014f6b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014f6f:	ff 25 8c 37 02 c0    	jmp    DWORD PTR ds:0xc002378c

c0014f75 <i386LoadCoprocessor(void*)>:
c0014f75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f79:	83 c0 3f             	add    eax,0x3f
c0014f7c:	83 e0 c0             	and    eax,0xffffffc0
c0014f7f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014f83:	ff 25 88 37 02 c0    	jmp    DWORD PTR ds:0xc0023788

c0014f89 <x87EmulHandler(regs*, void*)>:
c0014f89:	53                   	push   ebx
c0014f8a:	83 ec 08             	sub    esp,0x8
c0014f8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f92:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0014f96:	74 10                	je     c0014fa8 <x87EmulHandler(regs*, void*)+0x1f>
c0014f98:	83 ec 0c             	sub    esp,0xc
c0014f9b:	68 fc e7 01 c0       	push   0xc001e7fc
c0014fa0:	e8 26 b1 ff ff       	call   c00100cb <KePanic(char const*)>
c0014fa5:	83 c4 10             	add    esp,0x10
c0014fa8:	0f 20 c0             	mov    eax,cr0
c0014fab:	a8 08                	test   al,0x8
c0014fad:	74 59                	je     c0015008 <x87EmulHandler(regs*, void*)+0x7f>
c0014faf:	0f 06                	clts   
c0014fb1:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c0014fb6:	85 c0                	test   eax,eax
c0014fb8:	74 0e                	je     c0014fc8 <x87EmulHandler(regs*, void*)+0x3f>
c0014fba:	83 ec 0c             	sub    esp,0xc
c0014fbd:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0014fc0:	e8 9c ff ff ff       	call   c0014f61 <i386SaveCoprocessor(void*)>
c0014fc5:	83 c4 10             	add    esp,0x10
c0014fc8:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0014fce:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0014fd2:	75 12                	jne    c0014fe6 <x87EmulHandler(regs*, void*)+0x5d>
c0014fd4:	83 ec 0c             	sub    esp,0xc
c0014fd7:	68 40 02 00 00       	push   0x240
c0014fdc:	e8 d8 27 ff ff       	call   c00077b9 <malloc>
c0014fe1:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0014fe4:	eb 10                	jmp    c0014ff6 <x87EmulHandler(regs*, void*)+0x6d>
c0014fe6:	83 ec 0c             	sub    esp,0xc
c0014fe9:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c0014fee:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0014ff1:	e8 7f ff ff ff       	call   c0014f75 <i386LoadCoprocessor(void*)>
c0014ff6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ffb:	83 c4 10             	add    esp,0x10
c0014ffe:	a3 84 37 02 c0       	mov    ds:0xc0023784,eax
c0015003:	83 c4 08             	add    esp,0x8
c0015006:	5b                   	pop    ebx
c0015007:	c3                   	ret    
c0015008:	83 ec 0c             	sub    esp,0xc
c001500b:	68 10 e8 01 c0       	push   0xc001e810
c0015010:	e8 3f 54 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0015015:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001501d:	83 c4 18             	add    esp,0x18
c0015020:	5b                   	pop    ebx
c0015021:	e9 a6 ec ff ff       	jmp    c0013ccc <Thr::terminateFromIRQ(int)>

c0015026 <HalInitialiseCoprocessor()>:
c0015026:	83 ec 10             	sub    esp,0x10
c0015029:	c7 05 84 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023784,0x0
c0015033:	6a 00                	push   0x0
c0015035:	68 89 4f 01 c0       	push   0xc0014f89
c001503a:	6a 07                	push   0x7
c001503c:	e8 87 6d ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015041:	e8 9a 65 00 00       	call   c001b5e0 <avxDetect>
c0015046:	83 c4 10             	add    esp,0x10
c0015049:	85 c0                	test   eax,eax
c001504b:	74 1c                	je     c0015069 <HalInitialiseCoprocessor()+0x43>
c001504d:	c7 05 8c 37 02 c0 0a b6 01 c0 	mov    DWORD PTR ds:0xc002378c,0xc001b60a
c0015057:	c7 05 88 37 02 c0 1b b6 01 c0 	mov    DWORD PTR ds:0xc0023788,0xc001b61b
c0015061:	83 c4 0c             	add    esp,0xc
c0015064:	e9 c3 65 00 00       	jmp    c001b62c <avxInit>
c0015069:	e8 f2 67 00 00       	call   c001b860 <absolutelyNoChanceInHell>
c001506e:	85 c0                	test   eax,eax
c0015070:	74 1c                	je     c001508e <HalInitialiseCoprocessor()+0x68>
c0015072:	c7 05 8c 37 02 c0 78 b8 01 c0 	mov    DWORD PTR ds:0xc002378c,0xc001b878
c001507c:	c7 05 88 37 02 c0 80 b8 01 c0 	mov    DWORD PTR ds:0xc0023788,0xc001b880
c0015086:	83 c4 0c             	add    esp,0xc
c0015089:	e9 fa 67 00 00       	jmp    c001b888 <sseInit>
c001508e:	e8 13 68 00 00       	call   c001b8a6 <x87Detect>
c0015093:	85 c0                	test   eax,eax
c0015095:	74 1c                	je     c00150b3 <HalInitialiseCoprocessor()+0x8d>
c0015097:	c7 05 8c 37 02 c0 c1 b8 01 c0 	mov    DWORD PTR ds:0xc002378c,0xc001b8c1
c00150a1:	c7 05 88 37 02 c0 c8 b8 01 c0 	mov    DWORD PTR ds:0xc0023788,0xc001b8c8
c00150ab:	83 c4 0c             	add    esp,0xc
c00150ae:	e9 1c 68 00 00       	jmp    c001b8cf <x87Init>
c00150b3:	c7 05 8c 37 02 c0 ac 49 01 c0 	mov    DWORD PTR ds:0xc002378c,0xc00149ac
c00150bd:	c7 05 88 37 02 c0 ac 49 01 c0 	mov    DWORD PTR ds:0xc0023788,0xc00149ac
c00150c7:	0f 20 c0             	mov    eax,cr0
c00150ca:	83 c8 04             	or     eax,0x4
c00150cd:	0f 22 c0             	mov    cr0,eax
c00150d0:	83 c4 0c             	add    esp,0xc
c00150d3:	c3                   	ret    

c00150d4 <HalPanic(char const*)>:
c00150d4:	53                   	push   ebx
c00150d5:	83 ec 10             	sub    esp,0x10
c00150d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00150dc:	fa                   	cli    
c00150dd:	53                   	push   ebx
c00150de:	68 26 e8 01 c0       	push   0xc001e826
c00150e3:	e8 6c 53 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c00150e8:	83 c4 0c             	add    esp,0xc
c00150eb:	6a 01                	push   0x1
c00150ed:	6a 0f                	push   0xf
c00150ef:	ff 35 84 04 02 c0    	push   DWORD PTR ds:0xc0020484
c00150f5:	e8 50 31 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00150fa:	58                   	pop    eax
c00150fb:	ff 35 84 04 02 c0    	push   DWORD PTR ds:0xc0020484
c0015101:	e8 3c 33 ff ff       	call   c0008442 <VgaText::clearScreen()>
c0015106:	5a                   	pop    edx
c0015107:	59                   	pop    ecx
c0015108:	68 8e e8 01 c0       	push   0xc001e88e
c001510d:	ff 35 84 04 02 c0    	push   DWORD PTR ds:0xc0020484
c0015113:	e8 6a 31 ff ff       	call   c0008282 <VgaText::setTitle(char*)>
c0015118:	83 c4 0c             	add    esp,0xc
c001511b:	6a 01                	push   0x1
c001511d:	6a 0f                	push   0xf
c001511f:	ff 35 84 04 02 c0    	push   DWORD PTR ds:0xc0020484
c0015125:	e8 20 31 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001512a:	58                   	pop    eax
c001512b:	5a                   	pop    edx
c001512c:	68 3f e8 01 c0       	push   0xc001e83f
c0015131:	ff 35 84 04 02 c0    	push   DWORD PTR ds:0xc0020484
c0015137:	e8 fa 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001513c:	83 c4 0c             	add    esp,0xc
c001513f:	6a 0f                	push   0xf
c0015141:	6a 01                	push   0x1
c0015143:	ff 35 84 04 02 c0    	push   DWORD PTR ds:0xc0020484
c0015149:	e8 fc 30 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001514e:	59                   	pop    ecx
c001514f:	58                   	pop    eax
c0015150:	68 48 e8 01 c0       	push   0xc001e848
c0015155:	ff 35 84 04 02 c0    	push   DWORD PTR ds:0xc0020484
c001515b:	e8 d6 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015160:	83 c4 0c             	add    esp,0xc
c0015163:	6a 01                	push   0x1
c0015165:	6a 0f                	push   0xf
c0015167:	ff 35 84 04 02 c0    	push   DWORD PTR ds:0xc0020484
c001516d:	e8 d8 30 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015172:	58                   	pop    eax
c0015173:	5a                   	pop    edx
c0015174:	68 8c e8 01 c0       	push   0xc001e88c
c0015179:	ff 35 84 04 02 c0    	push   DWORD PTR ds:0xc0020484
c001517f:	e8 b2 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015184:	59                   	pop    ecx
c0015185:	58                   	pop    eax
c0015186:	68 55 e8 01 c0       	push   0xc001e855
c001518b:	ff 35 84 04 02 c0    	push   DWORD PTR ds:0xc0020484
c0015191:	e8 a0 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015196:	58                   	pop    eax
c0015197:	5a                   	pop    edx
c0015198:	68 8f e8 01 c0       	push   0xc001e88f
c001519d:	ff 35 84 04 02 c0    	push   DWORD PTR ds:0xc0020484
c00151a3:	e8 8e 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151a8:	59                   	pop    ecx
c00151a9:	58                   	pop    eax
c00151aa:	53                   	push   ebx
c00151ab:	ff 35 84 04 02 c0    	push   DWORD PTR ds:0xc0020484
c00151b1:	e8 80 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151b6:	58                   	pop    eax
c00151b7:	5a                   	pop    edx
c00151b8:	68 8c e8 01 c0       	push   0xc001e88c
c00151bd:	ff 35 84 04 02 c0    	push   DWORD PTR ds:0xc0020484
c00151c3:	e8 6e 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151c8:	83 c4 10             	add    esp,0x10
c00151cb:	eb fe                	jmp    c00151cb <HalPanic(char const*)+0xf7>

c00151cd <HalQueryPerformanceCounter()>:
c00151cd:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c00151d2:	31 d2                	xor    edx,edx
c00151d4:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00151da:	31 c0                	xor    eax,eax
c00151dc:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00151e3:	74 02                	je     c00151e7 <HalQueryPerformanceCounter()+0x1a>
c00151e5:	0f 31                	rdtsc  
c00151e7:	c3                   	ret    

c00151e8 <HalInitialise()>:
c00151e8:	53                   	push   ebx
c00151e9:	83 ec 08             	sub    esp,0x8
c00151ec:	e8 0a 6e ff ff       	call   c000bffb <setupINTS()>
c00151f1:	80 3d 00 2d 02 c0 00 	cmp    BYTE PTR ds:0xc0022d00,0x0
c00151f8:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c00151fd:	75 07                	jne    c0015206 <HalInitialise()+0x1e>
c00151ff:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0015206:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001520c:	83 e0 01             	and    eax,0x1
c001520f:	a2 80 37 02 c0       	mov    ds:0xc0023780,al
c0015214:	e8 a7 02 00 00       	call   c00154c0 <picOpen()>
c0015219:	80 3d 80 37 02 c0 00 	cmp    BYTE PTR ds:0xc0023780,0x0
c0015220:	74 0a                	je     c001522c <HalInitialise()+0x44>
c0015222:	e8 e1 01 00 00       	call   c0015408 <picDisable()>
c0015227:	e8 26 5d 00 00       	call   c001af52 <apicOpen()>
c001522c:	bb 0f 00 00 00       	mov    ebx,0xf
c0015231:	50                   	push   eax
c0015232:	6a 00                	push   0x0
c0015234:	68 ad 4e 01 c0       	push   0xc0014ead
c0015239:	6a 00                	push   0x0
c001523b:	e8 88 6b ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015240:	83 c4 0c             	add    esp,0xc
c0015243:	6a 00                	push   0x0
c0015245:	68 ad 4e 01 c0       	push   0xc0014ead
c001524a:	6a 01                	push   0x1
c001524c:	e8 77 6b ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015251:	83 c4 0c             	add    esp,0xc
c0015254:	6a 00                	push   0x0
c0015256:	68 ad 49 01 c0       	push   0xc00149ad
c001525b:	6a 02                	push   0x2
c001525d:	e8 66 6b ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015262:	83 c4 0c             	add    esp,0xc
c0015265:	6a 00                	push   0x0
c0015267:	68 ad 4e 01 c0       	push   0xc0014ead
c001526c:	6a 03                	push   0x3
c001526e:	e8 55 6b ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015273:	83 c4 0c             	add    esp,0xc
c0015276:	6a 00                	push   0x0
c0015278:	68 ad 4e 01 c0       	push   0xc0014ead
c001527d:	6a 04                	push   0x4
c001527f:	e8 44 6b ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015284:	83 c4 0c             	add    esp,0xc
c0015287:	6a 00                	push   0x0
c0015289:	68 ad 4e 01 c0       	push   0xc0014ead
c001528e:	6a 05                	push   0x5
c0015290:	e8 33 6b ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015295:	83 c4 0c             	add    esp,0xc
c0015298:	6a 00                	push   0x0
c001529a:	68 e1 4e 01 c0       	push   0xc0014ee1
c001529f:	6a 06                	push   0x6
c00152a1:	e8 22 6b ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152a6:	83 c4 0c             	add    esp,0xc
c00152a9:	6a 00                	push   0x0
c00152ab:	68 c6 49 01 c0       	push   0xc00149c6
c00152b0:	6a 08                	push   0x8
c00152b2:	e8 11 6b ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152b7:	83 c4 0c             	add    esp,0xc
c00152ba:	6a 00                	push   0x0
c00152bc:	68 ad 4e 01 c0       	push   0xc0014ead
c00152c1:	6a 09                	push   0x9
c00152c3:	e8 00 6b ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152c8:	83 c4 0c             	add    esp,0xc
c00152cb:	6a 00                	push   0x0
c00152cd:	68 ad 4e 01 c0       	push   0xc0014ead
c00152d2:	6a 0a                	push   0xa
c00152d4:	e8 ef 6a ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152d9:	83 c4 0c             	add    esp,0xc
c00152dc:	6a 00                	push   0x0
c00152de:	68 ad 4e 01 c0       	push   0xc0014ead
c00152e3:	6a 0b                	push   0xb
c00152e5:	e8 de 6a ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152ea:	83 c4 0c             	add    esp,0xc
c00152ed:	6a 00                	push   0x0
c00152ef:	68 c2 4d 01 c0       	push   0xc0014dc2
c00152f4:	6a 0d                	push   0xd
c00152f6:	e8 cd 6a ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152fb:	83 c4 0c             	add    esp,0xc
c00152fe:	6a 00                	push   0x0
c0015300:	68 27 4e 01 c0       	push   0xc0014e27
c0015305:	6a 0e                	push   0xe
c0015307:	e8 bc 6a ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001530c:	83 c4 10             	add    esp,0x10
c001530f:	50                   	push   eax
c0015310:	6a 00                	push   0x0
c0015312:	68 ad 4e 01 c0       	push   0xc0014ead
c0015317:	53                   	push   ebx
c0015318:	43                   	inc    ebx
c0015319:	e8 aa 6a ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001531e:	83 c4 10             	add    esp,0x10
c0015321:	83 fb 1e             	cmp    ebx,0x1e
c0015324:	75 e9                	jne    c001530f <HalInitialise()+0x127>
c0015326:	50                   	push   eax
c0015327:	6a 00                	push   0x0
c0015329:	68 ab 0f 01 c0       	push   0xc0010fab
c001532e:	6a 60                	push   0x60
c0015330:	e8 93 6a ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015335:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c001533a:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0015344:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001534b:	e8 69 24 ff ff       	call   c00077b9 <malloc>
c0015350:	89 04 24             	mov    DWORD PTR [esp],eax
c0015353:	89 c3                	mov    ebx,eax
c0015355:	e8 2e 09 00 00       	call   c0015c88 <RTC::RTC()>
c001535a:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0015364:	5a                   	pop    edx
c0015365:	59                   	pop    ecx
c0015366:	53                   	push   ebx
c0015367:	ff 35 38 04 02 c0    	push   DWORD PTR ds:0xc0020438
c001536d:	e8 22 65 ff ff       	call   c000b894 <Device::addChild(Device*)>
c0015372:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015374:	6a 00                	push   0x0
c0015376:	6a 00                	push   0x0
c0015378:	6a 00                	push   0x0
c001537a:	53                   	push   ebx
c001537b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001537e:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c0015383:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0015389:	83 c4 28             	add    esp,0x28
c001538c:	5b                   	pop    ebx
c001538d:	c3                   	ret    

c001538e <HalMakeBeep(int)>:
c001538e:	53                   	push   ebx
c001538f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015393:	85 db                	test   ebx,ebx
c0015395:	75 07                	jne    c001539e <HalMakeBeep(int)+0x10>
c0015397:	e4 61                	in     al,0x61
c0015399:	83 e0 fc             	and    eax,0xfffffffc
c001539c:	eb 26                	jmp    c00153c4 <HalMakeBeep(int)+0x36>
c001539e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00153a3:	99                   	cdq    
c00153a4:	f7 fb                	idiv   ebx
c00153a6:	89 c1                	mov    ecx,eax
c00153a8:	b0 b6                	mov    al,0xb6
c00153aa:	e6 43                	out    0x43,al
c00153ac:	88 c8                	mov    al,cl
c00153ae:	e6 42                	out    0x42,al
c00153b0:	89 c8                	mov    eax,ecx
c00153b2:	c1 e8 08             	shr    eax,0x8
c00153b5:	e6 42                	out    0x42,al
c00153b7:	e4 61                	in     al,0x61
c00153b9:	88 c2                	mov    dl,al
c00153bb:	83 ca 03             	or     edx,0x3
c00153be:	38 c2                	cmp    dl,al
c00153c0:	74 04                	je     c00153c6 <HalMakeBeep(int)+0x38>
c00153c2:	88 d0                	mov    al,dl
c00153c4:	e6 61                	out    0x61,al
c00153c6:	5b                   	pop    ebx
c00153c7:	c3                   	ret    

c00153c8 <HalGetRand()>:
c00153c8:	31 c0                	xor    eax,eax
c00153ca:	c3                   	ret    

c00153cb <HalEndOfInterrupt(int)>:
c00153cb:	80 3d 80 37 02 c0 00 	cmp    BYTE PTR ds:0xc0023780,0x0
c00153d2:	74 23                	je     c00153f7 <HalEndOfInterrupt(int)+0x2c>
c00153d4:	83 ec 14             	sub    esp,0x14
c00153d7:	6a 1b                	push   0x1b
c00153d9:	ff 35 38 04 02 c0    	push   DWORD PTR ds:0xc0020438
c00153df:	e8 0e 1a ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c00153e4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00153e9:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00153f3:	83 c4 1c             	add    esp,0x1c
c00153f6:	c3                   	ret    
c00153f7:	e9 54 02 00 00       	jmp    c0015650 <picEOI(int)>

c00153fc <HalRestart()>:
c00153fc:	c3                   	ret    

c00153fd <HalShutdown()>:
c00153fd:	c3                   	ret    

c00153fe <HalSleep()>:
c00153fe:	c3                   	ret    
c00153ff:	90                   	nop

c0015400 <picIoWait()>:
c0015400:	eb 00                	jmp    c0015402 <picIoWait()+0x2>
c0015402:	eb 00                	jmp    c0015404 <picIoWait()+0x4>
c0015404:	90                   	nop
c0015405:	c3                   	ret    
c0015406:	66 90                	xchg   ax,ax

c0015408 <picDisable()>:
c0015408:	83 ec 10             	sub    esp,0x10
c001540b:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0015412:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0015417:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001541b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015420:	ee                   	out    dx,al
c0015421:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0015428:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001542d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015431:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0015436:	ee                   	out    dx,al
c0015437:	90                   	nop
c0015438:	83 c4 10             	add    esp,0x10
c001543b:	c3                   	ret    

c001543c <picGetIRQReg(int)>:
c001543c:	83 ec 10             	sub    esp,0x10
c001543f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015443:	25 ff 00 00 00       	and    eax,0xff
c0015448:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001544f:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015453:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015457:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001545c:	ee                   	out    dx,al
c001545d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015461:	25 ff 00 00 00       	and    eax,0xff
c0015466:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001546d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015471:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015475:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001547a:	ee                   	out    dx,al
c001547b:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0015482:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0015487:	89 c2                	mov    edx,eax
c0015489:	ec                   	in     al,dx
c001548a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001548e:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015492:	25 ff 00 00 00       	and    eax,0xff
c0015497:	c1 e0 08             	shl    eax,0x8
c001549a:	89 c1                	mov    ecx,eax
c001549c:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00154a3:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00154a8:	89 c2                	mov    edx,eax
c00154aa:	ec                   	in     al,dx
c00154ab:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00154af:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00154b3:	25 ff 00 00 00       	and    eax,0xff
c00154b8:	09 c8                	or     eax,ecx
c00154ba:	83 c4 10             	add    esp,0x10
c00154bd:	c3                   	ret    
c00154be:	66 90                	xchg   ax,ax

c00154c0 <picOpen()>:
c00154c0:	83 ec 50             	sub    esp,0x50
c00154c3:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00154ca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00154cf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00154d3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00154d7:	ee                   	out    dx,al
c00154d8:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00154df:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00154e4:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00154e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00154ec:	ee                   	out    dx,al
c00154ed:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00154f5:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00154fd:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0015504:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015508:	89 c2                	mov    edx,eax
c001550a:	ec                   	in     al,dx
c001550b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001550f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015513:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0015517:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001551e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015522:	89 c2                	mov    edx,eax
c0015524:	ec                   	in     al,dx
c0015525:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015529:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001552d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0015531:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015538:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001553d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015541:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015545:	ee                   	out    dx,al
c0015546:	e8 b5 fe ff ff       	call   c0015400 <picIoWait()>
c001554b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015552:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015557:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001555b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001555f:	ee                   	out    dx,al
c0015560:	e8 9b fe ff ff       	call   c0015400 <picIoWait()>
c0015565:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015569:	25 ff 00 00 00       	and    eax,0xff
c001556e:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015575:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015579:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001557d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015581:	ee                   	out    dx,al
c0015582:	e8 79 fe ff ff       	call   c0015400 <picIoWait()>
c0015587:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001558b:	25 ff 00 00 00       	and    eax,0xff
c0015590:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015597:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001559b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001559f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00155a3:	ee                   	out    dx,al
c00155a4:	e8 57 fe ff ff       	call   c0015400 <picIoWait()>
c00155a9:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00155b0:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00155b5:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00155b9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00155bd:	ee                   	out    dx,al
c00155be:	e8 3d fe ff ff       	call   c0015400 <picIoWait()>
c00155c3:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00155ca:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00155cf:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00155d3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00155d7:	ee                   	out    dx,al
c00155d8:	e8 23 fe ff ff       	call   c0015400 <picIoWait()>
c00155dd:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00155e4:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00155e9:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00155ed:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00155f1:	ee                   	out    dx,al
c00155f2:	e8 09 fe ff ff       	call   c0015400 <picIoWait()>
c00155f7:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00155fe:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015603:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015607:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001560b:	ee                   	out    dx,al
c001560c:	e8 ef fd ff ff       	call   c0015400 <picIoWait()>
c0015611:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015615:	25 ff 00 00 00       	and    eax,0xff
c001561a:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015621:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015625:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015629:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001562d:	ee                   	out    dx,al
c001562e:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015632:	25 ff 00 00 00       	and    eax,0xff
c0015637:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001563e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015642:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015646:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001564a:	ee                   	out    dx,al
c001564b:	90                   	nop
c001564c:	83 c4 50             	add    esp,0x50
c001564f:	c3                   	ret    

c0015650 <picEOI(int)>:
c0015650:	83 ec 10             	sub    esp,0x10
c0015653:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015658:	75 22                	jne    c001567c <picEOI(int)+0x2c>
c001565a:	6a 0b                	push   0xb
c001565c:	e8 db fd ff ff       	call   c001543c <picGetIRQReg(int)>
c0015661:	83 c4 04             	add    esp,0x4
c0015664:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015669:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001566e:	25 ff ff 00 00       	and    eax,0xffff
c0015673:	25 80 00 00 00       	and    eax,0x80
c0015678:	74 72                	je     c00156ec <picEOI(int)+0x9c>
c001567a:	66 90                	xchg   ax,ax
c001567c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015681:	75 31                	jne    c00156b4 <picEOI(int)+0x64>
c0015683:	6a 0b                	push   0xb
c0015685:	e8 b2 fd ff ff       	call   c001543c <picGetIRQReg(int)>
c001568a:	83 c4 04             	add    esp,0x4
c001568d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015692:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015696:	66 85 c0             	test   ax,ax
c0015699:	78 19                	js     c00156b4 <picEOI(int)+0x64>
c001569b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00156a2:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00156a7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00156ab:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00156b0:	ee                   	out    dx,al
c00156b1:	eb 3d                	jmp    c00156f0 <picEOI(int)+0xa0>
c00156b3:	90                   	nop
c00156b4:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00156b9:	7e 19                	jle    c00156d4 <picEOI(int)+0x84>
c00156bb:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00156c2:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00156c7:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00156cb:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00156d0:	ee                   	out    dx,al
c00156d1:	8d 76 00             	lea    esi,[esi+0x0]
c00156d4:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00156db:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00156e0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00156e4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00156e9:	ee                   	out    dx,al
c00156ea:	eb 04                	jmp    c00156f0 <picEOI(int)+0xa0>
c00156ec:	90                   	nop
c00156ed:	8d 76 00             	lea    esi,[esi+0x0]
c00156f0:	83 c4 10             	add    esp,0x10
c00156f3:	c3                   	ret    

c00156f4 <RTC::open(int, int, void*)>:
c00156f4:	31 c0                	xor    eax,eax
c00156f6:	c3                   	ret    
c00156f7:	90                   	nop

c00156f8 <RTC::close(int, int, void*)>:
c00156f8:	31 c0                	xor    eax,eax
c00156fa:	c3                   	ret    
c00156fb:	90                   	nop

c00156fc <RTC::timeInSecondsUTC()>:
c00156fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015700:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015706:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001570c:	c3                   	ret    
c001570d:	90                   	nop

c001570e <RTC::timeInDatetimeUTC()>:
c001570e:	53                   	push   ebx
c001570f:	83 ec 14             	sub    esp,0x14
c0015712:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015716:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001571a:	8b 10                	mov    edx,DWORD PTR [eax]
c001571c:	50                   	push   eax
c001571d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015720:	83 c4 0c             	add    esp,0xc
c0015723:	52                   	push   edx
c0015724:	50                   	push   eax
c0015725:	53                   	push   ebx
c0015726:	e8 dd 5e ff ff       	call   c000b608 <secondsToDatetime(unsigned long long)>
c001572b:	89 d8                	mov    eax,ebx
c001572d:	83 c4 14             	add    esp,0x14
c0015730:	5b                   	pop    ebx
c0015731:	c2 04 00             	ret    0x4

c0015734 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015734:	56                   	push   esi
c0015735:	53                   	push   ebx
c0015736:	83 ec 14             	sub    esp,0x14
c0015739:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001573d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001573f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015742:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015746:	52                   	push   edx
c0015747:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001574b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001574f:	50                   	push   eax
c0015750:	e8 b3 5e ff ff       	call   c000b608 <secondsToDatetime(unsigned long long)>
c0015755:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015759:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001575d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015761:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015765:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015769:	89 f0                	mov    eax,esi
c001576b:	83 c4 20             	add    esp,0x20
c001576e:	5b                   	pop    ebx
c001576f:	5e                   	pop    esi
c0015770:	ff e0                	jmp    eax

c0015772 <RTC::~RTC()>:
c0015772:	83 ec 0c             	sub    esp,0xc
c0015775:	ba 2c e9 01 c0       	mov    edx,0xc001e92c
c001577a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001577e:	89 10                	mov    DWORD PTR [eax],edx
c0015780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015784:	83 ec 0c             	sub    esp,0xc
c0015787:	50                   	push   eax
c0015788:	e8 ff 5b ff ff       	call   c000b38c <Clock::~Clock()>
c001578d:	83 c4 10             	add    esp,0x10
c0015790:	90                   	nop
c0015791:	83 c4 0c             	add    esp,0xc
c0015794:	c3                   	ret    
c0015795:	90                   	nop

c0015796 <RTC::~RTC()>:
c0015796:	83 ec 0c             	sub    esp,0xc
c0015799:	83 ec 0c             	sub    esp,0xc
c001579c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00157a0:	e8 cd ff ff ff       	call   c0015772 <RTC::~RTC()>
c00157a5:	83 c4 10             	add    esp,0x10
c00157a8:	83 ec 08             	sub    esp,0x8
c00157ab:	68 60 01 00 00       	push   0x160
c00157b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00157b4:	e8 a5 4b ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c00157b9:	83 c4 10             	add    esp,0x10
c00157bc:	83 c4 0c             	add    esp,0xc
c00157bf:	c3                   	ret    

c00157c0 <RTC::get_update_in_progress_flag()>:
c00157c0:	83 ec 14             	sub    esp,0x14
c00157c3:	6a 0a                	push   0xa
c00157c5:	ff 35 38 04 02 c0    	push   DWORD PTR ds:0xc0020438
c00157cb:	e8 d6 16 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00157d0:	83 c4 1c             	add    esp,0x1c
c00157d3:	c0 e8 07             	shr    al,0x7
c00157d6:	c3                   	ret    
c00157d7:	90                   	nop

c00157d8 <RTC::completeRTCRefresh()>:
c00157d8:	55                   	push   ebp
c00157d9:	57                   	push   edi
c00157da:	56                   	push   esi
c00157db:	53                   	push   ebx
c00157dc:	83 ec 2c             	sub    esp,0x2c
c00157df:	8b 1d 0c 2a 02 c0    	mov    ebx,DWORD PTR ds:0xc0022a0c
c00157e5:	83 ec 0c             	sub    esp,0xc
c00157e8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00157ec:	e8 cf ff ff ff       	call   c00157c0 <RTC::get_update_in_progress_flag()>
c00157f1:	83 c4 10             	add    esp,0x10
c00157f4:	84 c0                	test   al,al
c00157f6:	74 0e                	je     c0015806 <RTC::completeRTCRefresh()+0x2e>
c00157f8:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00157fe:	3b 05 0c 2a 02 c0    	cmp    eax,DWORD PTR ds:0xc0022a0c
c0015804:	73 df                	jae    c00157e5 <RTC::completeRTCRefresh()+0xd>
c0015806:	55                   	push   ebp
c0015807:	55                   	push   ebp
c0015808:	6a 00                	push   0x0
c001580a:	ff 35 38 04 02 c0    	push   DWORD PTR ds:0xc0020438
c0015810:	e8 91 16 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015815:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015819:	58                   	pop    eax
c001581a:	5a                   	pop    edx
c001581b:	6a 02                	push   0x2
c001581d:	ff 35 38 04 02 c0    	push   DWORD PTR ds:0xc0020438
c0015823:	e8 7e 16 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015828:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001582c:	59                   	pop    ecx
c001582d:	5b                   	pop    ebx
c001582e:	6a 04                	push   0x4
c0015830:	ff 35 38 04 02 c0    	push   DWORD PTR ds:0xc0020438
c0015836:	e8 6b 16 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c001583b:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001583f:	5e                   	pop    esi
c0015840:	5f                   	pop    edi
c0015841:	6a 07                	push   0x7
c0015843:	ff 35 38 04 02 c0    	push   DWORD PTR ds:0xc0020438
c0015849:	e8 58 16 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c001584e:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015852:	5d                   	pop    ebp
c0015853:	58                   	pop    eax
c0015854:	6a 08                	push   0x8
c0015856:	ff 35 38 04 02 c0    	push   DWORD PTR ds:0xc0020438
c001585c:	e8 45 16 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015861:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015865:	58                   	pop    eax
c0015866:	5a                   	pop    edx
c0015867:	6a 09                	push   0x9
c0015869:	ff 35 38 04 02 c0    	push   DWORD PTR ds:0xc0020438
c001586f:	e8 32 16 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015874:	83 c4 10             	add    esp,0x10
c0015877:	0f b6 e8             	movzx  ebp,al
c001587a:	8b 1d 0c 2a 02 c0    	mov    ebx,DWORD PTR ds:0xc0022a0c
c0015880:	83 ec 0c             	sub    esp,0xc
c0015883:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015887:	e8 34 ff ff ff       	call   c00157c0 <RTC::get_update_in_progress_flag()>
c001588c:	83 c4 10             	add    esp,0x10
c001588f:	84 c0                	test   al,al
c0015891:	74 0e                	je     c00158a1 <RTC::completeRTCRefresh()+0xc9>
c0015893:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015899:	3b 05 0c 2a 02 c0    	cmp    eax,DWORD PTR ds:0xc0022a0c
c001589f:	73 df                	jae    c0015880 <RTC::completeRTCRefresh()+0xa8>
c00158a1:	50                   	push   eax
c00158a2:	50                   	push   eax
c00158a3:	6a 00                	push   0x0
c00158a5:	ff 35 38 04 02 c0    	push   DWORD PTR ds:0xc0020438
c00158ab:	e8 f6 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00158b0:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c00158b4:	58                   	pop    eax
c00158b5:	5a                   	pop    edx
c00158b6:	6a 02                	push   0x2
c00158b8:	ff 35 38 04 02 c0    	push   DWORD PTR ds:0xc0020438
c00158be:	e8 e3 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00158c3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00158c7:	59                   	pop    ecx
c00158c8:	5b                   	pop    ebx
c00158c9:	6a 04                	push   0x4
c00158cb:	ff 35 38 04 02 c0    	push   DWORD PTR ds:0xc0020438
c00158d1:	e8 d0 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00158d6:	5e                   	pop    esi
c00158d7:	88 c3                	mov    bl,al
c00158d9:	5f                   	pop    edi
c00158da:	6a 07                	push   0x7
c00158dc:	ff 35 38 04 02 c0    	push   DWORD PTR ds:0xc0020438
c00158e2:	e8 bf 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00158e7:	89 c6                	mov    esi,eax
c00158e9:	58                   	pop    eax
c00158ea:	5a                   	pop    edx
c00158eb:	6a 08                	push   0x8
c00158ed:	ff 35 38 04 02 c0    	push   DWORD PTR ds:0xc0020438
c00158f3:	e8 ae 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00158f8:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00158fc:	59                   	pop    ecx
c00158fd:	5f                   	pop    edi
c00158fe:	6a 09                	push   0x9
c0015900:	ff 35 38 04 02 c0    	push   DWORD PTR ds:0xc0020438
c0015906:	e8 9b 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c001590b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001590f:	0f b6 f8             	movzx  edi,al
c0015912:	83 c4 10             	add    esp,0x10
c0015915:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015919:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001591d:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015921:	89 f1                	mov    ecx,esi
c0015923:	0f 94 c0             	sete   al
c0015926:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c001592a:	0f 94 c2             	sete   dl
c001592d:	21 d0                	and    eax,edx
c001592f:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015933:	0f 94 c2             	sete   dl
c0015936:	21 c2                	and    edx,eax
c0015938:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c001593c:	0f 94 c0             	sete   al
c001593f:	21 d0                	and    eax,edx
c0015941:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015945:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015949:	0f 94 c1             	sete   cl
c001594c:	84 c8                	test   al,cl
c001594e:	75 29                	jne    c0015979 <RTC::completeRTCRefresh()+0x1a1>
c0015950:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015954:	89 fd                	mov    ebp,edi
c0015956:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001595a:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c001595e:	89 f0                	mov    eax,esi
c0015960:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015964:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015968:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001596c:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015970:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015974:	e9 01 ff ff ff       	jmp    c001587a <RTC::completeRTCRefresh()+0xa2>
c0015979:	39 fd                	cmp    ebp,edi
c001597b:	75 d3                	jne    c0015950 <RTC::completeRTCRefresh()+0x178>
c001597d:	55                   	push   ebp
c001597e:	55                   	push   ebp
c001597f:	6a 0b                	push   0xb
c0015981:	ff 35 38 04 02 c0    	push   DWORD PTR ds:0xc0020438
c0015987:	e8 1a 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c001598c:	83 c4 10             	add    esp,0x10
c001598f:	89 c5                	mov    ebp,eax
c0015991:	a8 04                	test   al,0x4
c0015993:	75 78                	jne    c0015a0d <RTC::completeRTCRefresh()+0x235>
c0015995:	b1 0a                	mov    cl,0xa
c0015997:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c001599b:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001599f:	83 e2 0f             	and    edx,0xf
c00159a2:	c0 e8 04             	shr    al,0x4
c00159a5:	c1 ef 04             	shr    edi,0x4
c00159a8:	f6 e1                	mul    cl
c00159aa:	6b ff 0a             	imul   edi,edi,0xa
c00159ad:	01 d0                	add    eax,edx
c00159af:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00159b3:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00159b7:	83 e2 0f             	and    edx,0xf
c00159ba:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00159be:	c0 e8 04             	shr    al,0x4
c00159c1:	f6 e1                	mul    cl
c00159c3:	01 d0                	add    eax,edx
c00159c5:	88 da                	mov    dl,bl
c00159c7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00159cb:	83 e2 0f             	and    edx,0xf
c00159ce:	88 d8                	mov    al,bl
c00159d0:	83 e3 80             	and    ebx,0xffffff80
c00159d3:	c0 e8 04             	shr    al,0x4
c00159d6:	83 e0 07             	and    eax,0x7
c00159d9:	f6 e1                	mul    cl
c00159db:	01 d0                	add    eax,edx
c00159dd:	89 f2                	mov    edx,esi
c00159df:	09 c3                	or     ebx,eax
c00159e1:	83 e2 0f             	and    edx,0xf
c00159e4:	89 f0                	mov    eax,esi
c00159e6:	c0 e8 04             	shr    al,0x4
c00159e9:	f6 e1                	mul    cl
c00159eb:	8d 34 02             	lea    esi,[edx+eax*1]
c00159ee:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c00159f2:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00159f6:	83 e2 0f             	and    edx,0xf
c00159f9:	c0 e8 04             	shr    al,0x4
c00159fc:	f6 e1                	mul    cl
c00159fe:	01 d0                	add    eax,edx
c0015a00:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0015a04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a08:	83 e0 0f             	and    eax,0xf
c0015a0b:	01 c7                	add    edi,eax
c0015a0d:	83 e5 02             	and    ebp,0x2
c0015a10:	75 14                	jne    c0015a26 <RTC::completeRTCRefresh()+0x24e>
c0015a12:	84 db                	test   bl,bl
c0015a14:	79 10                	jns    c0015a26 <RTC::completeRTCRefresh()+0x24e>
c0015a16:	83 e3 7f             	and    ebx,0x7f
c0015a19:	b9 18 00 00 00       	mov    ecx,0x18
c0015a1e:	8d 43 0c             	lea    eax,[ebx+0xc]
c0015a21:	99                   	cdq    
c0015a22:	f7 f9                	idiv   ecx
c0015a24:	88 d3                	mov    bl,dl
c0015a26:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0015a2c:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0015a32:	77 06                	ja     c0015a3a <RTC::completeRTCRefresh()+0x262>
c0015a34:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0015a3a:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0015a3f:	31 d2                	xor    edx,edx
c0015a41:	c1 e1 10             	shl    ecx,0x10
c0015a44:	89 d7                	mov    edi,edx
c0015a46:	c1 e5 10             	shl    ebp,0x10
c0015a49:	31 c0                	xor    eax,eax
c0015a4b:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0015a51:	09 cf                	or     edi,ecx
c0015a53:	89 fa                	mov    edx,edi
c0015a55:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0015a59:	88 da                	mov    dl,bl
c0015a5b:	89 f3                	mov    ebx,esi
c0015a5d:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0015a61:	88 d8                	mov    al,bl
c0015a63:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0015a67:	0f b7 c8             	movzx  ecx,ax
c0015a6a:	09 e9                	or     ecx,ebp
c0015a6c:	89 c8                	mov    eax,ecx
c0015a6e:	51                   	push   ecx
c0015a6f:	51                   	push   ecx
c0015a70:	52                   	push   edx
c0015a71:	50                   	push   eax
c0015a72:	e8 04 5a ff ff       	call   c000b47b <datetimeToSeconds(datetime_t)>
c0015a77:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0015a7b:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0015a81:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0015a87:	83 c4 3c             	add    esp,0x3c
c0015a8a:	5b                   	pop    ebx
c0015a8b:	5e                   	pop    esi
c0015a8c:	5f                   	pop    edi
c0015a8d:	5d                   	pop    ebp
c0015a8e:	c3                   	ret    
c0015a8f:	90                   	nop

c0015a90 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0015a90:	55                   	push   ebp
c0015a91:	57                   	push   edi
c0015a92:	56                   	push   esi
c0015a93:	53                   	push   ebx
c0015a94:	83 ec 30             	sub    esp,0x30
c0015a97:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015a9b:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0015a9f:	6a 00                	push   0x0
c0015aa1:	6a 00                	push   0x0
c0015aa3:	ff 35 38 04 02 c0    	push   DWORD PTR ds:0xc0020438
c0015aa9:	e8 0e 15 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015aae:	83 c4 0c             	add    esp,0xc
c0015ab1:	6a 00                	push   0x0
c0015ab3:	6a 02                	push   0x2
c0015ab5:	ff 35 38 04 02 c0    	push   DWORD PTR ds:0xc0020438
c0015abb:	e8 fc 14 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015ac0:	31 d2                	xor    edx,edx
c0015ac2:	89 f9                	mov    ecx,edi
c0015ac4:	89 f8                	mov    eax,edi
c0015ac6:	c1 e9 10             	shr    ecx,0x10
c0015ac9:	0f b6 c4             	movzx  eax,ah
c0015acc:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0015ad0:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0015ad4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015ad8:	b9 64 00 00 00       	mov    ecx,0x64
c0015add:	89 f0                	mov    eax,esi
c0015adf:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0015ae3:	89 f0                	mov    eax,esi
c0015ae5:	0f b6 c4             	movzx  eax,ah
c0015ae8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015aec:	89 f0                	mov    eax,esi
c0015aee:	c1 e8 10             	shr    eax,0x10
c0015af1:	66 f7 f1             	div    cx
c0015af4:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0015af9:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0015afe:	59                   	pop    ecx
c0015aff:	5b                   	pop    ebx
c0015b00:	89 fb                	mov    ebx,edi
c0015b02:	6a 0b                	push   0xb
c0015b04:	ff 35 38 04 02 c0    	push   DWORD PTR ds:0xc0020438
c0015b0a:	e8 97 13 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015b0f:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0015b13:	83 c4 10             	add    esp,0x10
c0015b16:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0015b1b:	75 74                	jne    c0015b91 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0015b1d:	b2 0a                	mov    dl,0xa
c0015b1f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015b23:	0f b6 c1             	movzx  eax,cl
c0015b26:	f6 f2                	div    dl
c0015b28:	88 c3                	mov    bl,al
c0015b2a:	88 e0                	mov    al,ah
c0015b2c:	c1 e3 04             	shl    ebx,0x4
c0015b2f:	09 c3                	or     ebx,eax
c0015b31:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015b36:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0015b3a:	f6 f2                	div    dl
c0015b3c:	88 c1                	mov    cl,al
c0015b3e:	88 e0                	mov    al,ah
c0015b40:	c1 e1 04             	shl    ecx,0x4
c0015b43:	09 c1                	or     ecx,eax
c0015b45:	89 f8                	mov    eax,edi
c0015b47:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0015b4b:	0f b6 c0             	movzx  eax,al
c0015b4e:	f6 f2                	div    dl
c0015b50:	88 c3                	mov    bl,al
c0015b52:	88 e0                	mov    al,ah
c0015b54:	c1 e3 04             	shl    ebx,0x4
c0015b57:	09 c3                	or     ebx,eax
c0015b59:	89 f0                	mov    eax,esi
c0015b5b:	0f b6 c0             	movzx  eax,al
c0015b5e:	f6 f2                	div    dl
c0015b60:	88 c1                	mov    cl,al
c0015b62:	88 e0                	mov    al,ah
c0015b64:	c1 e1 04             	shl    ecx,0x4
c0015b67:	09 c1                	or     ecx,eax
c0015b69:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015b6e:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0015b72:	f6 f2                	div    dl
c0015b74:	88 c1                	mov    cl,al
c0015b76:	88 e0                	mov    al,ah
c0015b78:	c1 e1 04             	shl    ecx,0x4
c0015b7b:	09 c1                	or     ecx,eax
c0015b7d:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c0015b82:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0015b86:	f6 f2                	div    dl
c0015b88:	89 c5                	mov    ebp,eax
c0015b8a:	88 e0                	mov    al,ah
c0015b8c:	c1 e5 04             	shl    ebp,0x4
c0015b8f:	09 c5                	or     ebp,eax
c0015b91:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c0015b96:	75 17                	jne    c0015baf <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015b98:	80 fb 0b             	cmp    bl,0xb
c0015b9b:	76 0c                	jbe    c0015ba9 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0015b9d:	80 eb 0c             	sub    bl,0xc
c0015ba0:	75 02                	jne    c0015ba4 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0015ba2:	b3 0c                	mov    bl,0xc
c0015ba4:	83 cb 80             	or     ebx,0xffffff80
c0015ba7:	eb 06                	jmp    c0015baf <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015ba9:	84 db                	test   bl,bl
c0015bab:	75 02                	jne    c0015baf <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015bad:	b3 0c                	mov    bl,0xc
c0015baf:	0f b6 db             	movzx  ebx,bl
c0015bb2:	50                   	push   eax
c0015bb3:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0015bb8:	50                   	push   eax
c0015bb9:	6a 00                	push   0x0
c0015bbb:	ff 35 38 04 02 c0    	push   DWORD PTR ds:0xc0020438
c0015bc1:	e8 f6 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015bc6:	83 c4 0c             	add    esp,0xc
c0015bc9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015bce:	50                   	push   eax
c0015bcf:	6a 02                	push   0x2
c0015bd1:	ff 35 38 04 02 c0    	push   DWORD PTR ds:0xc0020438
c0015bd7:	e8 e0 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015bdc:	83 c4 0c             	add    esp,0xc
c0015bdf:	53                   	push   ebx
c0015be0:	6a 04                	push   0x4
c0015be2:	ff 35 38 04 02 c0    	push   DWORD PTR ds:0xc0020438
c0015be8:	e8 cf 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015bed:	83 c4 0c             	add    esp,0xc
c0015bf0:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0015bf5:	50                   	push   eax
c0015bf6:	6a 07                	push   0x7
c0015bf8:	ff 35 38 04 02 c0    	push   DWORD PTR ds:0xc0020438
c0015bfe:	e8 b9 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c03:	83 c4 0c             	add    esp,0xc
c0015c06:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0015c0b:	50                   	push   eax
c0015c0c:	6a 08                	push   0x8
c0015c0e:	ff 35 38 04 02 c0    	push   DWORD PTR ds:0xc0020438
c0015c14:	e8 a3 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c19:	83 c4 0c             	add    esp,0xc
c0015c1c:	89 e8                	mov    eax,ebp
c0015c1e:	0f b6 e8             	movzx  ebp,al
c0015c21:	55                   	push   ebp
c0015c22:	6a 09                	push   0x9
c0015c24:	ff 35 38 04 02 c0    	push   DWORD PTR ds:0xc0020438
c0015c2a:	e8 8d 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c2f:	5a                   	pop    edx
c0015c30:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015c34:	e8 9f fb ff ff       	call   c00157d8 <RTC::completeRTCRefresh()>
c0015c39:	83 c4 3c             	add    esp,0x3c
c0015c3c:	b0 01                	mov    al,0x1
c0015c3e:	5b                   	pop    ebx
c0015c3f:	5e                   	pop    esi
c0015c40:	5f                   	pop    edi
c0015c41:	5d                   	pop    ebp
c0015c42:	c3                   	ret    

c0015c43 <rtcIRQHandler(regs*, void*)>:
c0015c43:	53                   	push   ebx
c0015c44:	83 ec 10             	sub    esp,0x10
c0015c47:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015c4b:	6a 0c                	push   0xc
c0015c4d:	ff 35 38 04 02 c0    	push   DWORD PTR ds:0xc0020438
c0015c53:	e8 4e 12 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015c58:	83 c4 10             	add    esp,0x10
c0015c5b:	84 c0                	test   al,al
c0015c5d:	79 24                	jns    c0015c83 <rtcIRQHandler(regs*, void*)+0x40>
c0015c5f:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0015c66:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0015c6d:	66 ff 05 94 37 02 c0 	inc    WORD PTR ds:0xc0023794
c0015c74:	75 0d                	jne    c0015c83 <rtcIRQHandler(regs*, void*)+0x40>
c0015c76:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0015c7a:	83 c4 08             	add    esp,0x8
c0015c7d:	5b                   	pop    ebx
c0015c7e:	e9 55 fb ff ff       	jmp    c00157d8 <RTC::completeRTCRefresh()>
c0015c83:	83 c4 08             	add    esp,0x8
c0015c86:	5b                   	pop    ebx
c0015c87:	c3                   	ret    

c0015c88 <RTC::RTC()>:
c0015c88:	83 ec 1c             	sub    esp,0x1c
c0015c8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c8f:	83 ec 08             	sub    esp,0x8
c0015c92:	68 0f e9 01 c0       	push   0xc001e90f
c0015c97:	50                   	push   eax
c0015c98:	e8 b9 56 ff ff       	call   c000b356 <Clock::Clock(char const*)>
c0015c9d:	83 c4 10             	add    esp,0x10
c0015ca0:	ba 2c e9 01 c0       	mov    edx,0xc001e92c
c0015ca5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ca9:	89 10                	mov    DWORD PTR [eax],edx
c0015cab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015caf:	83 ec 0c             	sub    esp,0xc
c0015cb2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015cb6:	6a 01                	push   0x1
c0015cb8:	68 43 5c 01 c0       	push   0xc0015c43
c0015cbd:	6a 08                	push   0x8
c0015cbf:	50                   	push   eax
c0015cc0:	e8 7b 5b ff ff       	call   c000b840 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0015cc5:	83 c4 20             	add    esp,0x20
c0015cc8:	89 c2                	mov    edx,eax
c0015cca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cce:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0015cd4:	fa                   	cli    
c0015cd5:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0015cda:	40                   	inc    eax
c0015cdb:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c0015ce0:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c0015ce5:	83 ec 08             	sub    esp,0x8
c0015ce8:	6a 0b                	push   0xb
c0015cea:	50                   	push   eax
c0015ceb:	e8 b6 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015cf0:	83 c4 10             	add    esp,0x10
c0015cf3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015cf7:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c0015cfc:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0015d00:	83 ca 10             	or     edx,0x10
c0015d03:	81 e2 ff 00 00 00    	and    edx,0xff
c0015d09:	83 ec 04             	sub    esp,0x4
c0015d0c:	52                   	push   edx
c0015d0d:	6a 0b                	push   0xb
c0015d0f:	50                   	push   eax
c0015d10:	e8 a7 12 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015d15:	83 c4 10             	add    esp,0x10
c0015d18:	83 ec 0c             	sub    esp,0xc
c0015d1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d1f:	e8 b4 fa ff ff       	call   c00157d8 <RTC::completeRTCRefresh()>
c0015d24:	83 c4 10             	add    esp,0x10
c0015d27:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0015d2c:	48                   	dec    eax
c0015d2d:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c0015d32:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0015d37:	85 c0                	test   eax,eax
c0015d39:	75 01                	jne    c0015d3c <RTC::RTC()+0xb4>
c0015d3b:	fb                   	sti    
c0015d3c:	90                   	nop
c0015d3d:	83 c4 1c             	add    esp,0x1c
c0015d40:	c3                   	ret    
c0015d41:	66 90                	xchg   ax,ax
c0015d43:	90                   	nop

c0015d44 <HalConsoleScroll(int, int)>:
c0015d44:	83 ec 10             	sub    esp,0x10
c0015d47:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0015d4f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0015d57:	90                   	nop
c0015d58:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0015d5d:	0f 8f e1 00 00 00    	jg     c0015e44 <HalConsoleScroll(int, int)+0x100>
c0015d63:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015d6b:	90                   	nop
c0015d6c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0015d74:	0f 8f be 00 00 00    	jg     c0015e38 <HalConsoleScroll(int, int)+0xf4>
c0015d7a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015d7e:	89 d0                	mov    eax,edx
c0015d80:	c1 e0 02             	shl    eax,0x2
c0015d83:	01 d0                	add    eax,edx
c0015d85:	c1 e0 05             	shl    eax,0x5
c0015d88:	89 c2                	mov    edx,eax
c0015d8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015d8e:	01 d0                	add    eax,edx
c0015d90:	89 c2                	mov    edx,eax
c0015d92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d96:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0015d99:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015d9d:	89 d0                	mov    eax,edx
c0015d9f:	c1 e0 02             	shl    eax,0x2
c0015da2:	01 d0                	add    eax,edx
c0015da4:	c1 e0 05             	shl    eax,0x5
c0015da7:	89 c2                	mov    edx,eax
c0015da9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015dad:	01 d0                	add    eax,edx
c0015daf:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0015db5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015db9:	01 c2                	add    edx,eax
c0015dbb:	8a 01                	mov    al,BYTE PTR [ecx]
c0015dbd:	88 02                	mov    BYTE PTR [edx],al
c0015dbf:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0015dc4:	75 66                	jne    c0015e2c <HalConsoleScroll(int, int)+0xe8>
c0015dc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015dca:	83 e0 01             	and    eax,0x1
c0015dcd:	74 39                	je     c0015e08 <HalConsoleScroll(int, int)+0xc4>
c0015dcf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015dd3:	83 e0 0f             	and    eax,0xf
c0015dd6:	88 c2                	mov    dl,al
c0015dd8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015ddc:	c1 e0 04             	shl    eax,0x4
c0015ddf:	88 d1                	mov    cl,dl
c0015de1:	09 c1                	or     ecx,eax
c0015de3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015de7:	89 d0                	mov    eax,edx
c0015de9:	c1 e0 02             	shl    eax,0x2
c0015dec:	01 d0                	add    eax,edx
c0015dee:	c1 e0 05             	shl    eax,0x5
c0015df1:	89 c2                	mov    edx,eax
c0015df3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015df7:	01 d0                	add    eax,edx
c0015df9:	89 c2                	mov    edx,eax
c0015dfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dff:	01 d0                	add    eax,edx
c0015e01:	88 ca                	mov    dl,cl
c0015e03:	88 10                	mov    BYTE PTR [eax],dl
c0015e05:	eb 25                	jmp    c0015e2c <HalConsoleScroll(int, int)+0xe8>
c0015e07:	90                   	nop
c0015e08:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e0c:	89 d0                	mov    eax,edx
c0015e0e:	c1 e0 02             	shl    eax,0x2
c0015e11:	01 d0                	add    eax,edx
c0015e13:	c1 e0 05             	shl    eax,0x5
c0015e16:	89 c2                	mov    edx,eax
c0015e18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e1c:	01 d0                	add    eax,edx
c0015e1e:	89 c2                	mov    edx,eax
c0015e20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e24:	01 d0                	add    eax,edx
c0015e26:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0015e29:	8d 76 00             	lea    esi,[esi+0x0]
c0015e2c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0015e30:	e9 37 ff ff ff       	jmp    c0015d6c <HalConsoleScroll(int, int)+0x28>
c0015e35:	8d 76 00             	lea    esi,[esi+0x0]
c0015e38:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0015e3c:	e9 17 ff ff ff       	jmp    c0015d58 <HalConsoleScroll(int, int)+0x14>
c0015e41:	8d 76 00             	lea    esi,[esi+0x0]
c0015e44:	90                   	nop
c0015e45:	83 c4 10             	add    esp,0x10
c0015e48:	c3                   	ret    
c0015e49:	8d 76 00             	lea    esi,[esi+0x0]

c0015e4c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0015e4c:	83 ec 14             	sub    esp,0x14
c0015e4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015e53:	88 04 24             	mov    BYTE PTR [esp],al
c0015e56:	8a 04 24             	mov    al,BYTE PTR [esp]
c0015e59:	25 ff 00 00 00       	and    eax,0xff
c0015e5e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015e62:	89 d1                	mov    ecx,edx
c0015e64:	83 e1 0f             	and    ecx,0xf
c0015e67:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015e6b:	c1 e2 04             	shl    edx,0x4
c0015e6e:	81 e2 ff 00 00 00    	and    edx,0xff
c0015e74:	09 ca                	or     edx,ecx
c0015e76:	c1 e2 08             	shl    edx,0x8
c0015e79:	09 d0                	or     eax,edx
c0015e7b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0015e80:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0015e88:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015e8c:	89 d0                	mov    eax,edx
c0015e8e:	c1 e0 02             	shl    eax,0x2
c0015e91:	01 d0                	add    eax,edx
c0015e93:	c1 e0 04             	shl    eax,0x4
c0015e96:	89 c2                	mov    edx,eax
c0015e98:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015e9c:	01 d0                	add    eax,edx
c0015e9e:	01 c0                	add    eax,eax
c0015ea0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0015ea4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ea8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0015ead:	66 89 02             	mov    WORD PTR [edx],ax
c0015eb0:	90                   	nop
c0015eb1:	83 c4 14             	add    esp,0x14
c0015eb4:	c3                   	ret    
c0015eb5:	8d 76 00             	lea    esi,[esi+0x0]

c0015eb8 <HalConsoleCursorUpdate(int, int)>:
c0015eb8:	83 ec 20             	sub    esp,0x20
c0015ebb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015ebf:	89 c2                	mov    edx,eax
c0015ec1:	89 d0                	mov    eax,edx
c0015ec3:	c1 e0 02             	shl    eax,0x2
c0015ec6:	01 d0                	add    eax,edx
c0015ec8:	c1 e0 04             	shl    eax,0x4
c0015ecb:	89 c2                	mov    edx,eax
c0015ecd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015ed1:	01 d0                	add    eax,edx
c0015ed3:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0015ed8:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0015edf:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0015ee4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015ee8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015eec:	ee                   	out    dx,al
c0015eed:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0015ef2:	25 ff 00 00 00       	and    eax,0xff
c0015ef7:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0015efe:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0015f02:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015f06:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015f0a:	ee                   	out    dx,al
c0015f0b:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0015f12:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0015f17:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015f1b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015f1f:	ee                   	out    dx,al
c0015f20:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0015f25:	66 c1 e8 08          	shr    ax,0x8
c0015f29:	25 ff 00 00 00       	and    eax,0xff
c0015f2e:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0015f35:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015f39:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015f3d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015f41:	ee                   	out    dx,al
c0015f42:	90                   	nop
c0015f43:	83 c4 20             	add    esp,0x20
c0015f46:	c3                   	ret    
c0015f47:	90                   	nop

c0015f48 <FAT::getName()>:
c0015f48:	b8 60 e9 01 c0       	mov    eax,0xc001e960
c0015f4d:	c3                   	ret    
c0015f4e:	66 90                	xchg   ax,ax

c0015f50 <FAT::tell(void*, unsigned long long*)>:
c0015f50:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0015f55:	75 09                	jne    c0015f60 <FAT::tell(void*, unsigned long long*)+0x10>
c0015f57:	b8 04 00 00 00       	mov    eax,0x4
c0015f5c:	c3                   	ret    
c0015f5d:	8d 76 00             	lea    esi,[esi+0x0]
c0015f60:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015f65:	75 09                	jne    c0015f70 <FAT::tell(void*, unsigned long long*)+0x20>
c0015f67:	b8 04 00 00 00       	mov    eax,0x4
c0015f6c:	c3                   	ret    
c0015f6d:	8d 76 00             	lea    esi,[esi+0x0]
c0015f70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f74:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015f77:	ba 00 00 00 00       	mov    edx,0x0
c0015f7c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015f80:	89 01                	mov    DWORD PTR [ecx],eax
c0015f82:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015f85:	b8 00 00 00 00       	mov    eax,0x0
c0015f8a:	c3                   	ret    
c0015f8b:	90                   	nop

c0015f8c <FAT::stat(void*, unsigned long long*)>:
c0015f8c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0015f91:	75 09                	jne    c0015f9c <FAT::stat(void*, unsigned long long*)+0x10>
c0015f93:	b8 04 00 00 00       	mov    eax,0x4
c0015f98:	c3                   	ret    
c0015f99:	8d 76 00             	lea    esi,[esi+0x0]
c0015f9c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015fa1:	75 09                	jne    c0015fac <FAT::stat(void*, unsigned long long*)+0x20>
c0015fa3:	b8 04 00 00 00       	mov    eax,0x4
c0015fa8:	c3                   	ret    
c0015fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0015fac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015fb0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0015fb3:	ba 00 00 00 00       	mov    edx,0x0
c0015fb8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015fbc:	89 01                	mov    DWORD PTR [ecx],eax
c0015fbe:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015fc1:	b8 00 00 00 00       	mov    eax,0x0
c0015fc6:	c3                   	ret    
c0015fc7:	90                   	nop

c0015fc8 <FAT::~FAT()>:
c0015fc8:	83 ec 0c             	sub    esp,0xc
c0015fcb:	ba ac e9 01 c0       	mov    edx,0xc001e9ac
c0015fd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fd4:	89 10                	mov    DWORD PTR [eax],edx
c0015fd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fda:	83 ec 0c             	sub    esp,0xc
c0015fdd:	50                   	push   eax
c0015fde:	e8 b7 47 ff ff       	call   c000a79a <Filesystem::~Filesystem()>
c0015fe3:	83 c4 10             	add    esp,0x10
c0015fe6:	90                   	nop
c0015fe7:	83 c4 0c             	add    esp,0xc
c0015fea:	c3                   	ret    
c0015feb:	90                   	nop

c0015fec <FAT::~FAT()>:
c0015fec:	83 ec 0c             	sub    esp,0xc
c0015fef:	83 ec 0c             	sub    esp,0xc
c0015ff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ff6:	e8 cd ff ff ff       	call   c0015fc8 <FAT::~FAT()>
c0015ffb:	83 c4 10             	add    esp,0x10
c0015ffe:	83 ec 08             	sub    esp,0x8
c0016001:	6a 08                	push   0x8
c0016003:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016007:	e8 52 43 ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001600c:	83 c4 10             	add    esp,0x10
c001600f:	83 c4 0c             	add    esp,0xc
c0016012:	c3                   	ret    
c0016013:	90                   	nop

c0016014 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0016014:	83 ec 1c             	sub    esp,0x1c
c0016017:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001601e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0016023:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016027:	8b 04 85 c0 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc840]
c001602e:	83 f8 ff             	cmp    eax,0xffffffff
c0016031:	75 35                	jne    c0016068 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0016033:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016037:	88 c2                	mov    dl,al
c0016039:	a1 a0 37 02 c0       	mov    eax,ds:0xc00237a0
c001603e:	01 d0                	add    eax,edx
c0016040:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016044:	8b 15 a0 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237a0
c001604a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001604e:	89 14 85 c0 37 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc840],edx
c0016055:	a1 a0 37 02 c0       	mov    eax,ds:0xc00237a0
c001605a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001605e:	89 14 85 40 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7c0],edx
c0016065:	eb 19                	jmp    c0016080 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0016067:	90                   	nop
c0016068:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001606c:	88 c2                	mov    dl,al
c001606e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016072:	8b 04 85 c0 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc840]
c0016079:	01 d0                	add    eax,edx
c001607b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001607f:	90                   	nop
c0016080:	83 ec 04             	sub    esp,0x4
c0016083:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016087:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001608b:	8d 44 24 15          	lea    eax,[esp+0x15]
c001608f:	50                   	push   eax
c0016090:	e8 bf ed fe ff       	call   c0004e54 <f_getlabel>
c0016095:	83 c4 10             	add    esp,0x10
c0016098:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001609c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00160a1:	75 09                	jne    c00160ac <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00160a3:	b8 00 00 00 00       	mov    eax,0x0
c00160a8:	eb 0a                	jmp    c00160b4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00160aa:	66 90                	xchg   ax,ax
c00160ac:	b8 01 00 00 00       	mov    eax,0x1
c00160b1:	8d 76 00             	lea    esi,[esi+0x0]
c00160b4:	83 c4 1c             	add    esp,0x1c
c00160b7:	c3                   	ret    

c00160b8 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00160b8:	57                   	push   edi
c00160b9:	83 ec 58             	sub    esp,0x58
c00160bc:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00160c4:	8d 54 24 10          	lea    edx,[esp+0x10]
c00160c8:	b8 00 00 00 00       	mov    eax,0x0
c00160cd:	b9 0f 00 00 00       	mov    ecx,0xf
c00160d2:	fc                   	cld    
c00160d3:	89 d7                	mov    edi,edx
c00160d5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00160d7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00160db:	8b 04 85 c0 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc840]
c00160e2:	83 f8 ff             	cmp    eax,0xffffffff
c00160e5:	75 35                	jne    c001611c <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c00160e7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00160eb:	88 c2                	mov    dl,al
c00160ed:	a1 a0 37 02 c0       	mov    eax,ds:0xc00237a0
c00160f2:	01 d0                	add    eax,edx
c00160f4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00160f8:	8b 15 a0 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237a0
c00160fe:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016102:	89 14 85 c0 37 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc840],edx
c0016109:	a1 a0 37 02 c0       	mov    eax,ds:0xc00237a0
c001610e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0016112:	89 14 85 40 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7c0],edx
c0016119:	eb 19                	jmp    c0016134 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001611b:	90                   	nop
c001611c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016120:	88 c2                	mov    dl,al
c0016122:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016126:	8b 04 85 c0 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc840]
c001612d:	01 d0                	add    eax,edx
c001612f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016133:	90                   	nop
c0016134:	83 ec 08             	sub    esp,0x8
c0016137:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001613b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001613f:	50                   	push   eax
c0016140:	e8 7b a6 fe ff       	call   c00007c0 <strcat>
c0016145:	83 c4 10             	add    esp,0x10
c0016148:	83 ec 0c             	sub    esp,0xc
c001614b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001614f:	50                   	push   eax
c0016150:	e8 50 ee fe ff       	call   c0004fa5 <f_setlabel>
c0016155:	83 c4 10             	add    esp,0x10
c0016158:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001615c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0016161:	75 09                	jne    c001616c <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0016163:	b8 00 00 00 00       	mov    eax,0x0
c0016168:	eb 0a                	jmp    c0016174 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001616a:	66 90                	xchg   ax,ax
c001616c:	b8 01 00 00 00       	mov    eax,0x1
c0016171:	8d 76 00             	lea    esi,[esi+0x0]
c0016174:	83 c4 58             	add    esp,0x58
c0016177:	5f                   	pop    edi
c0016178:	c3                   	ret    
c0016179:	90                   	nop
c001617a:	66 90                	xchg   ax,ax

c001617c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001617c:	83 ec 2c             	sub    esp,0x2c
c001617f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0016187:	83 ec 08             	sub    esp,0x8
c001618a:	68 84 e9 01 c0       	push   0xc001e984
c001618f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016193:	e8 48 a5 fe ff       	call   c00006e0 <strcmp>
c0016198:	83 c4 10             	add    esp,0x10
c001619b:	85 c0                	test   eax,eax
c001619d:	0f 94 c0             	sete   al
c00161a0:	84 c0                	test   al,al
c00161a2:	74 10                	je     c00161b4 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00161a4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00161ac:	e9 b3 00 00 00       	jmp    c0016264 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00161b1:	8d 76 00             	lea    esi,[esi+0x0]
c00161b4:	83 ec 08             	sub    esp,0x8
c00161b7:	68 76 e9 01 c0       	push   0xc001e976
c00161bc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00161c0:	e8 1b a5 fe ff       	call   c00006e0 <strcmp>
c00161c5:	83 c4 10             	add    esp,0x10
c00161c8:	85 c0                	test   eax,eax
c00161ca:	0f 94 c0             	sete   al
c00161cd:	84 c0                	test   al,al
c00161cf:	74 0f                	je     c00161e0 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c00161d1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00161d9:	e9 86 00 00 00       	jmp    c0016264 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00161de:	66 90                	xchg   ax,ax
c00161e0:	83 ec 08             	sub    esp,0x8
c00161e3:	68 7c e9 01 c0       	push   0xc001e97c
c00161e8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00161ec:	e8 ef a4 fe ff       	call   c00006e0 <strcmp>
c00161f1:	83 c4 10             	add    esp,0x10
c00161f4:	85 c0                	test   eax,eax
c00161f6:	0f 94 c0             	sete   al
c00161f9:	84 c0                	test   al,al
c00161fb:	74 0b                	je     c0016208 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c00161fd:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016205:	eb 5d                	jmp    c0016264 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016207:	90                   	nop
c0016208:	83 ec 08             	sub    esp,0x8
c001620b:	68 dc c9 01 c0       	push   0xc001c9dc
c0016210:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016214:	e8 c7 a4 fe ff       	call   c00006e0 <strcmp>
c0016219:	83 c4 10             	add    esp,0x10
c001621c:	85 c0                	test   eax,eax
c001621e:	0f 94 c0             	sete   al
c0016221:	84 c0                	test   al,al
c0016223:	74 0b                	je     c0016230 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0016225:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001622d:	eb 35                	jmp    c0016264 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001622f:	90                   	nop
c0016230:	83 ec 08             	sub    esp,0x8
c0016233:	68 82 e9 01 c0       	push   0xc001e982
c0016238:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001623c:	e8 9f a4 fe ff       	call   c00006e0 <strcmp>
c0016241:	83 c4 10             	add    esp,0x10
c0016244:	85 c0                	test   eax,eax
c0016246:	0f 94 c0             	sete   al
c0016249:	84 c0                	test   al,al
c001624b:	74 0b                	je     c0016258 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001624d:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0016255:	eb 0d                	jmp    c0016264 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016257:	90                   	nop
c0016258:	b8 08 00 00 00       	mov    eax,0x8
c001625d:	e9 ea 00 00 00       	jmp    c001634c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016262:	66 90                	xchg   ax,ax
c0016264:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001626b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0016270:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016274:	8b 04 85 c0 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc840]
c001627b:	83 f8 ff             	cmp    eax,0xffffffff
c001627e:	75 34                	jne    c00162b4 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c0016280:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016284:	88 c2                	mov    dl,al
c0016286:	a1 a0 37 02 c0       	mov    eax,ds:0xc00237a0
c001628b:	01 d0                	add    eax,edx
c001628d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016291:	8b 15 a0 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237a0
c0016297:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001629b:	89 14 85 c0 37 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc840],edx
c00162a2:	a1 a0 37 02 c0       	mov    eax,ds:0xc00237a0
c00162a7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00162ab:	89 14 85 40 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7c0],edx
c00162b2:	eb 18                	jmp    c00162cc <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c00162b4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00162b8:	88 c2                	mov    dl,al
c00162ba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00162be:	8b 04 85 c0 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc840]
c00162c5:	01 d0                	add    eax,edx
c00162c7:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00162cb:	90                   	nop
c00162cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162d0:	88 04 24             	mov    BYTE PTR [esp],al
c00162d3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00162d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00162db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00162e3:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00162e8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00162f0:	83 ec 0c             	sub    esp,0xc
c00162f3:	68 00 20 00 00       	push   0x2000
c00162f8:	e8 bc 14 ff ff       	call   c00077b9 <malloc>
c00162fd:	83 c4 10             	add    esp,0x10
c0016300:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016304:	68 00 20 00 00       	push   0x2000
c0016309:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001630d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016311:	50                   	push   eax
c0016312:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0016316:	50                   	push   eax
c0016317:	e8 79 ef fe ff       	call   c0005295 <f_mkfs>
c001631c:	83 c4 10             	add    esp,0x10
c001631f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016323:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016328:	75 0a                	jne    c0016334 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001632a:	b8 00 00 00 00       	mov    eax,0x0
c001632f:	eb 1b                	jmp    c001634c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016331:	8d 76 00             	lea    esi,[esi+0x0]
c0016334:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0016339:	75 09                	jne    c0016344 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001633b:	b8 09 00 00 00       	mov    eax,0x9
c0016340:	eb 0a                	jmp    c001634c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016342:	66 90                	xchg   ax,ax
c0016344:	b8 01 00 00 00       	mov    eax,0x1
c0016349:	8d 76 00             	lea    esi,[esi+0x0]
c001634c:	83 c4 2c             	add    esp,0x2c
c001634f:	c3                   	ret    

c0016350 <FAT::tryMount(LogicalDisk*, int)>:
c0016350:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0016356:	a1 a0 37 02 c0       	mov    eax,ds:0xc00237a0
c001635b:	83 f8 14             	cmp    eax,0x14
c001635e:	75 18                	jne    c0016378 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0016360:	83 ec 0c             	sub    esp,0xc
c0016363:	68 88 e9 01 c0       	push   0xc001e988
c0016368:	e8 5e 9d ff ff       	call   c00100cb <KePanic(char const*)>
c001636d:	83 c4 10             	add    esp,0x10
c0016370:	b0 00                	mov    al,0x0
c0016372:	e9 e9 01 00 00       	jmp    c0016560 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016377:	90                   	nop
c0016378:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001637f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016385:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001638b:	3d 00 02 00 00       	cmp    eax,0x200
c0016390:	74 0a                	je     c001639c <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0016392:	b0 00                	mov    al,0x0
c0016394:	e9 c7 01 00 00       	jmp    c0016560 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016399:	8d 76 00             	lea    esi,[esi+0x0]
c001639c:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00163a4:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00163ab:	8b 04 85 c0 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc840]
c00163b2:	83 f8 ff             	cmp    eax,0xffffffff
c00163b5:	74 09                	je     c00163c0 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00163b7:	b0 01                	mov    al,0x1
c00163b9:	e9 a2 01 00 00       	jmp    c0016560 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00163be:	66 90                	xchg   ax,ax
c00163c0:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00163ca:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00163d2:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00163d9:	88 c2                	mov    dl,al
c00163db:	a1 a0 37 02 c0       	mov    eax,ds:0xc00237a0
c00163e0:	01 d0                	add    eax,edx
c00163e2:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00163e9:	8b 15 a0 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237a0
c00163ef:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00163f6:	89 14 85 c0 37 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc840],edx
c00163fd:	a1 a0 37 02 c0       	mov    eax,ds:0xc00237a0
c0016402:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0016409:	89 14 85 40 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7c0],edx
c0016410:	83 ec 0c             	sub    esp,0xc
c0016413:	68 34 02 00 00       	push   0x234
c0016418:	e8 9c 13 ff ff       	call   c00077b9 <malloc>
c001641d:	83 c4 10             	add    esp,0x10
c0016420:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0016427:	83 ec 04             	sub    esp,0x4
c001642a:	6a 00                	push   0x0
c001642c:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016433:	50                   	push   eax
c0016434:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001643b:	e8 7b d6 fe ff       	call   c0003abb <f_mount>
c0016440:	83 c4 10             	add    esp,0x10
c0016443:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001644a:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0016452:	74 1c                	je     c0016470 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0016454:	83 ec 0c             	sub    esp,0xc
c0016457:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001645e:	e8 76 13 ff ff       	call   c00077d9 <rfree>
c0016463:	83 c4 10             	add    esp,0x10
c0016466:	b0 00                	mov    al,0x0
c0016468:	e9 f3 00 00 00       	jmp    c0016560 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001646d:	8d 76 00             	lea    esi,[esi+0x0]
c0016470:	83 ec 04             	sub    esp,0x4
c0016473:	68 00 01 00 00       	push   0x100
c0016478:	6a 00                	push   0x0
c001647a:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016481:	50                   	push   eax
c0016482:	e8 49 a0 fe ff       	call   c00004d0 <memset>
c0016487:	83 c4 10             	add    esp,0x10
c001648a:	83 ec 08             	sub    esp,0x8
c001648d:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016494:	50                   	push   eax
c0016495:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001649c:	50                   	push   eax
c001649d:	e8 1e a3 fe ff       	call   c00007c0 <strcat>
c00164a2:	83 c4 10             	add    esp,0x10
c00164a5:	83 ec 08             	sub    esp,0x8
c00164a8:	68 96 e9 01 c0       	push   0xc001e996
c00164ad:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00164b4:	50                   	push   eax
c00164b5:	e8 06 a3 fe ff       	call   c00007c0 <strcat>
c00164ba:	83 c4 10             	add    esp,0x10
c00164bd:	83 ec 04             	sub    esp,0x4
c00164c0:	6a 01                	push   0x1
c00164c2:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00164c9:	50                   	push   eax
c00164ca:	8d 44 24 14          	lea    eax,[esp+0x14]
c00164ce:	50                   	push   eax
c00164cf:	e8 49 d6 fe ff       	call   c0003b1d <f_open>
c00164d4:	83 c4 10             	add    esp,0x10
c00164d7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00164de:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00164e5:	85 c0                	test   eax,eax
c00164e7:	74 0b                	je     c00164f4 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00164e9:	78 31                	js     c001651c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00164eb:	83 e8 04             	sub    eax,0x4
c00164ee:	83 f8 01             	cmp    eax,0x1
c00164f1:	77 29                	ja     c001651c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00164f3:	90                   	nop
c00164f4:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00164fc:	83 ec 0c             	sub    esp,0xc
c00164ff:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016503:	50                   	push   eax
c0016504:	e8 c7 dd fe ff       	call   c00042d0 <f_close>
c0016509:	83 c4 10             	add    esp,0x10
c001650c:	90                   	nop
c001650d:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0016515:	74 41                	je     c0016558 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0016517:	eb 33                	jmp    c001654c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0016519:	8d 76 00             	lea    esi,[esi+0x0]
c001651c:	83 ec 0c             	sub    esp,0xc
c001651f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016526:	e8 ae 12 ff ff       	call   c00077d9 <rfree>
c001652b:	83 c4 10             	add    esp,0x10
c001652e:	83 ec 04             	sub    esp,0x4
c0016531:	6a 00                	push   0x0
c0016533:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001653a:	50                   	push   eax
c001653b:	6a 00                	push   0x0
c001653d:	e8 79 d5 fe ff       	call   c0003abb <f_mount>
c0016542:	83 c4 10             	add    esp,0x10
c0016545:	b0 00                	mov    al,0x0
c0016547:	eb 17                	jmp    c0016560 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016549:	8d 76 00             	lea    esi,[esi+0x0]
c001654c:	a1 a0 37 02 c0       	mov    eax,ds:0xc00237a0
c0016551:	40                   	inc    eax
c0016552:	a3 a0 37 02 c0       	mov    ds:0xc00237a0,eax
c0016557:	90                   	nop
c0016558:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001655f:	90                   	nop
c0016560:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016566:	c3                   	ret    
c0016567:	90                   	nop

c0016568 <FAT::allocateSwapfile(char const*, int)>:
c0016568:	55                   	push   ebp
c0016569:	57                   	push   edi
c001656a:	56                   	push   esi
c001656b:	53                   	push   ebx
c001656c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016572:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001657d:	83 ec 0c             	sub    esp,0xc
c0016580:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016587:	e8 2d 12 ff ff       	call   c00077b9 <malloc>
c001658c:	83 c4 10             	add    esp,0x10
c001658f:	89 c7                	mov    edi,eax
c0016591:	a1 10 37 02 c0       	mov    eax,ds:0xc0023710
c0016596:	83 ec 04             	sub    esp,0x4
c0016599:	50                   	push   eax
c001659a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00165a1:	57                   	push   edi
c00165a2:	e8 23 44 ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c00165a7:	83 c4 10             	add    esp,0x10
c00165aa:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00165b1:	83 ec 04             	sub    esp,0x4
c00165b4:	8d 44 24 13          	lea    eax,[esp+0x13]
c00165b8:	50                   	push   eax
c00165b9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00165bd:	50                   	push   eax
c00165be:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00165c5:	e8 6c 47 ff ff       	call   c000ad36 <File::stat(unsigned long long*, bool*)>
c00165ca:	83 c4 10             	add    esp,0x10
c00165cd:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00165d4:	c1 e0 14             	shl    eax,0x14
c00165d7:	89 c7                	mov    edi,eax
c00165d9:	89 c5                	mov    ebp,eax
c00165db:	c1 fd 1f             	sar    ebp,0x1f
c00165de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00165e6:	89 f9                	mov    ecx,edi
c00165e8:	31 c1                	xor    ecx,eax
c00165ea:	89 cb                	mov    ebx,ecx
c00165ec:	89 e9                	mov    ecx,ebp
c00165ee:	31 d1                	xor    ecx,edx
c00165f0:	89 ce                	mov    esi,ecx
c00165f2:	89 f0                	mov    eax,esi
c00165f4:	09 d8                	or     eax,ebx
c00165f6:	0f 84 9c 00 00 00    	je     c0016698 <FAT::allocateSwapfile(char const*, int)+0x130>
c00165fc:	83 ec 0c             	sub    esp,0xc
c00165ff:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016606:	e8 f7 45 ff ff       	call   c000ac02 <File::unlink()>
c001660b:	83 c4 10             	add    esp,0x10
c001660e:	83 ec 08             	sub    esp,0x8
c0016611:	6a 12                	push   0x12
c0016613:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001661a:	e8 6b 44 ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c001661f:	83 c4 10             	add    esp,0x10
c0016622:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016629:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001662f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016636:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001663d:	c1 e0 14             	shl    eax,0x14
c0016640:	83 ec 04             	sub    esp,0x4
c0016643:	6a 01                	push   0x1
c0016645:	50                   	push   eax
c0016646:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001664d:	e8 e3 ea fe ff       	call   c0005135 <f_expand>
c0016652:	83 c4 10             	add    esp,0x10
c0016655:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001665c:	8b 00                	mov    eax,DWORD PTR [eax]
c001665e:	83 c0 10             	add    eax,0x10
c0016661:	8b 00                	mov    eax,DWORD PTR [eax]
c0016663:	83 ec 0c             	sub    esp,0xc
c0016666:	8d 54 24 24          	lea    edx,[esp+0x24]
c001666a:	52                   	push   edx
c001666b:	8d 54 24 30          	lea    edx,[esp+0x30]
c001666f:	52                   	push   edx
c0016670:	6a 00                	push   0x0
c0016672:	68 00 04 00 00       	push   0x400
c0016677:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001667e:	ff d0                	call   eax
c0016680:	83 c4 20             	add    esp,0x20
c0016683:	83 ec 0c             	sub    esp,0xc
c0016686:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001668d:	e8 56 44 ff ff       	call   c000aae8 <File::close()>
c0016692:	83 c4 10             	add    esp,0x10
c0016695:	8d 76 00             	lea    esi,[esi+0x0]
c0016698:	83 ec 08             	sub    esp,0x8
c001669b:	6a 01                	push   0x1
c001669d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00166a4:	e8 e1 43 ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c00166a9:	83 c4 10             	add    esp,0x10
c00166ac:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00166b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00166b5:	83 c0 0c             	add    eax,0xc
c00166b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00166ba:	83 ec 0c             	sub    esp,0xc
c00166bd:	8d 54 24 24          	lea    edx,[esp+0x24]
c00166c1:	52                   	push   edx
c00166c2:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00166c6:	52                   	push   edx
c00166c7:	6a 00                	push   0x0
c00166c9:	6a 04                	push   0x4
c00166cb:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00166d2:	ff d0                	call   eax
c00166d4:	83 c4 20             	add    esp,0x20
c00166d7:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00166de:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00166e4:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00166eb:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00166f2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00166f5:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00166fc:	83 ec 0c             	sub    esp,0xc
c00166ff:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016706:	e8 dd 43 ff ff       	call   c000aae8 <File::close()>
c001670b:	83 c4 10             	add    esp,0x10
c001670e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016715:	ba 00 00 00 00       	mov    edx,0x0
c001671a:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016720:	5b                   	pop    ebx
c0016721:	5e                   	pop    esi
c0016722:	5f                   	pop    edi
c0016723:	5d                   	pop    ebp
c0016724:	c3                   	ret    
c0016725:	90                   	nop
c0016726:	66 90                	xchg   ax,ax

c0016728 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016728:	57                   	push   edi
c0016729:	56                   	push   esi
c001672a:	53                   	push   ebx
c001672b:	81 ec 50 02 00 00    	sub    esp,0x250
c0016731:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016739:	74 0d                	je     c0016748 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001673b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016743:	75 0f                	jne    c0016754 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016745:	8d 76 00             	lea    esi,[esi+0x0]
c0016748:	b8 04 00 00 00       	mov    eax,0x4
c001674d:	e9 36 01 00 00       	jmp    c0016888 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016752:	66 90                	xchg   ax,ax
c0016754:	83 ec 08             	sub    esp,0x8
c0016757:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001675e:	50                   	push   eax
c001675f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016766:	e8 28 de fe ff       	call   c0004593 <f_readdir>
c001676b:	83 c4 10             	add    esp,0x10
c001676e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016775:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001677c:	83 ec 0c             	sub    esp,0xc
c001677f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016786:	83 c0 16             	add    eax,0x16
c0016789:	50                   	push   eax
c001678a:	e8 b1 9d fe ff       	call   c0000540 <strlen>
c001678f:	83 c4 10             	add    esp,0x10
c0016792:	ba 00 00 00 00       	mov    edx,0x0
c0016797:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001679b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001679f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00167a6:	25 ff 00 00 00       	and    eax,0xff
c00167ab:	83 e0 10             	and    eax,0x10
c00167ae:	74 08                	je     c00167b8 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00167b0:	b8 02 00 00 00       	mov    eax,0x2
c00167b5:	eb 09                	jmp    c00167c0 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00167b7:	90                   	nop
c00167b8:	b8 01 00 00 00       	mov    eax,0x1
c00167bd:	8d 76 00             	lea    esi,[esi+0x0]
c00167c0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00167c4:	83 ec 08             	sub    esp,0x8
c00167c7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00167ce:	83 c0 16             	add    eax,0x16
c00167d1:	50                   	push   eax
c00167d2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00167d6:	83 c0 10             	add    eax,0x10
c00167d9:	50                   	push   eax
c00167da:	e8 21 9e fe ff       	call   c0000600 <strcpy>
c00167df:	83 c4 10             	add    esp,0x10
c00167e2:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00167e9:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00167f0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00167f4:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00167fb:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016802:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016809:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016810:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016817:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001681e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016825:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001682c:	89 c6                	mov    esi,eax
c001682e:	89 d7                	mov    edi,edx
c0016830:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016832:	89 c8                	mov    eax,ecx
c0016834:	89 fa                	mov    edx,edi
c0016836:	89 f3                	mov    ebx,esi
c0016838:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001683f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016846:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001684d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016854:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001685a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016861:	84 c0                	test   al,al
c0016863:	75 07                	jne    c001686c <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016865:	b8 07 00 00 00       	mov    eax,0x7
c001686a:	eb 1c                	jmp    c0016888 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001686c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016873:	85 c0                	test   eax,eax
c0016875:	75 09                	jne    c0016880 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016877:	b8 00 00 00 00       	mov    eax,0x0
c001687c:	eb 0a                	jmp    c0016888 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001687e:	66 90                	xchg   ax,ax
c0016880:	b8 01 00 00 00       	mov    eax,0x1
c0016885:	8d 76 00             	lea    esi,[esi+0x0]
c0016888:	81 c4 50 02 00 00    	add    esp,0x250
c001688e:	5b                   	pop    ebx
c001688f:	5e                   	pop    esi
c0016890:	5f                   	pop    edi
c0016891:	c3                   	ret    
c0016892:	66 90                	xchg   ax,ax

c0016894 <FAT::read(void*, unsigned long, void*, int*)>:
c0016894:	83 ec 1c             	sub    esp,0x1c
c0016897:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001689c:	74 0a                	je     c00168a8 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001689e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00168a3:	75 0b                	jne    c00168b0 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00168a5:	8d 76 00             	lea    esi,[esi+0x0]
c00168a8:	b8 04 00 00 00       	mov    eax,0x4
c00168ad:	eb 41                	jmp    c00168f0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00168af:	90                   	nop
c00168b0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00168b4:	50                   	push   eax
c00168b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00168b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00168bd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00168c1:	e8 22 d5 fe ff       	call   c0003de8 <f_read>
c00168c6:	83 c4 10             	add    esp,0x10
c00168c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00168cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00168d1:	89 c2                	mov    edx,eax
c00168d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00168d7:	89 10                	mov    DWORD PTR [eax],edx
c00168d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00168dd:	85 c0                	test   eax,eax
c00168df:	75 07                	jne    c00168e8 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00168e1:	b8 00 00 00 00       	mov    eax,0x0
c00168e6:	eb 08                	jmp    c00168f0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00168e8:	b8 01 00 00 00       	mov    eax,0x1
c00168ed:	8d 76 00             	lea    esi,[esi+0x0]
c00168f0:	83 c4 1c             	add    esp,0x1c
c00168f3:	c3                   	ret    

c00168f4 <FAT::write(void*, unsigned long, void*, int*)>:
c00168f4:	83 ec 1c             	sub    esp,0x1c
c00168f7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00168fc:	74 0a                	je     c0016908 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00168fe:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016903:	75 0b                	jne    c0016910 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016905:	8d 76 00             	lea    esi,[esi+0x0]
c0016908:	b8 04 00 00 00       	mov    eax,0x4
c001690d:	eb 41                	jmp    c0016950 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001690f:	90                   	nop
c0016910:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016914:	50                   	push   eax
c0016915:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016919:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001691d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016921:	e8 c1 d6 fe ff       	call   c0003fe7 <f_write>
c0016926:	83 c4 10             	add    esp,0x10
c0016929:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001692d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016931:	89 c2                	mov    edx,eax
c0016933:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016937:	89 10                	mov    DWORD PTR [eax],edx
c0016939:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001693d:	85 c0                	test   eax,eax
c001693f:	75 07                	jne    c0016948 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016941:	b8 00 00 00 00       	mov    eax,0x0
c0016946:	eb 08                	jmp    c0016950 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016948:	b8 01 00 00 00       	mov    eax,0x1
c001694d:	8d 76 00             	lea    esi,[esi+0x0]
c0016950:	83 c4 1c             	add    esp,0x1c
c0016953:	c3                   	ret    

c0016954 <FAT::close(void*)>:
c0016954:	83 ec 1c             	sub    esp,0x1c
c0016957:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001695c:	75 0a                	jne    c0016968 <FAT::close(void*)+0x14>
c001695e:	b8 04 00 00 00       	mov    eax,0x4
c0016963:	eb 3f                	jmp    c00169a4 <FAT::close(void*)+0x50>
c0016965:	8d 76 00             	lea    esi,[esi+0x0]
c0016968:	83 ec 0c             	sub    esp,0xc
c001696b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001696f:	e8 5c d9 fe ff       	call   c00042d0 <f_close>
c0016974:	83 c4 10             	add    esp,0x10
c0016977:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001697b:	83 ec 0c             	sub    esp,0xc
c001697e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016982:	e8 42 0e ff ff       	call   c00077c9 <free>
c0016987:	83 c4 10             	add    esp,0x10
c001698a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001698e:	85 c0                	test   eax,eax
c0016990:	75 0a                	jne    c001699c <FAT::close(void*)+0x48>
c0016992:	b8 00 00 00 00       	mov    eax,0x0
c0016997:	eb 0b                	jmp    c00169a4 <FAT::close(void*)+0x50>
c0016999:	8d 76 00             	lea    esi,[esi+0x0]
c001699c:	b8 01 00 00 00       	mov    eax,0x1
c00169a1:	8d 76 00             	lea    esi,[esi+0x0]
c00169a4:	83 c4 1c             	add    esp,0x1c
c00169a7:	c3                   	ret    

c00169a8 <FAT::closeDir(void*)>:
c00169a8:	83 ec 1c             	sub    esp,0x1c
c00169ab:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00169b0:	75 0a                	jne    c00169bc <FAT::closeDir(void*)+0x14>
c00169b2:	b8 04 00 00 00       	mov    eax,0x4
c00169b7:	eb 3f                	jmp    c00169f8 <FAT::closeDir(void*)+0x50>
c00169b9:	8d 76 00             	lea    esi,[esi+0x0]
c00169bc:	83 ec 0c             	sub    esp,0xc
c00169bf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00169c3:	e8 a9 db fe ff       	call   c0004571 <f_closedir>
c00169c8:	83 c4 10             	add    esp,0x10
c00169cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00169cf:	83 ec 0c             	sub    esp,0xc
c00169d2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00169d6:	e8 ee 0d ff ff       	call   c00077c9 <free>
c00169db:	83 c4 10             	add    esp,0x10
c00169de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169e2:	85 c0                	test   eax,eax
c00169e4:	75 0a                	jne    c00169f0 <FAT::closeDir(void*)+0x48>
c00169e6:	b8 00 00 00 00       	mov    eax,0x0
c00169eb:	eb 0b                	jmp    c00169f8 <FAT::closeDir(void*)+0x50>
c00169ed:	8d 76 00             	lea    esi,[esi+0x0]
c00169f0:	b8 01 00 00 00       	mov    eax,0x1
c00169f5:	8d 76 00             	lea    esi,[esi+0x0]
c00169f8:	83 c4 1c             	add    esp,0x1c
c00169fb:	c3                   	ret    

c00169fc <FAT::seek(void*, unsigned long long)>:
c00169fc:	83 ec 2c             	sub    esp,0x2c
c00169ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016a03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016a07:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016a0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a0f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0016a14:	75 0a                	jne    c0016a20 <FAT::seek(void*, unsigned long long)+0x24>
c0016a16:	b8 04 00 00 00       	mov    eax,0x4
c0016a1b:	eb 33                	jmp    c0016a50 <FAT::seek(void*, unsigned long long)+0x54>
c0016a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0016a20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016a24:	83 ec 08             	sub    esp,0x8
c0016a27:	50                   	push   eax
c0016a28:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016a2c:	e8 ce d8 fe ff       	call   c00042ff <f_lseek>
c0016a31:	83 c4 10             	add    esp,0x10
c0016a34:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016a38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016a3c:	85 c0                	test   eax,eax
c0016a3e:	75 08                	jne    c0016a48 <FAT::seek(void*, unsigned long long)+0x4c>
c0016a40:	b8 00 00 00 00       	mov    eax,0x0
c0016a45:	eb 09                	jmp    c0016a50 <FAT::seek(void*, unsigned long long)+0x54>
c0016a47:	90                   	nop
c0016a48:	b8 01 00 00 00       	mov    eax,0x1
c0016a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0016a50:	83 c4 2c             	add    esp,0x2c
c0016a53:	c3                   	ret    

c0016a54 <fatWrapperReadDisk>:
c0016a54:	53                   	push   ebx
c0016a55:	83 ec 18             	sub    esp,0x18
c0016a58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a5c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016a60:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016a64:	25 ff 00 00 00       	and    eax,0xff
c0016a69:	8b 0c 85 a0 29 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd660]
c0016a70:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016a74:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016a78:	ba 00 00 00 00       	mov    edx,0x0
c0016a7d:	83 ec 0c             	sub    esp,0xc
c0016a80:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016a84:	53                   	push   ebx
c0016a85:	52                   	push   edx
c0016a86:	50                   	push   eax
c0016a87:	51                   	push   ecx
c0016a88:	e8 c1 60 ff ff       	call   c000cb4e <LogicalDisk::read(unsigned long long, int, void*)>
c0016a8d:	83 c4 20             	add    esp,0x20
c0016a90:	83 c4 18             	add    esp,0x18
c0016a93:	5b                   	pop    ebx
c0016a94:	c3                   	ret    
c0016a95:	8d 76 00             	lea    esi,[esi+0x0]

c0016a98 <fatWrapperWriteDisk>:
c0016a98:	53                   	push   ebx
c0016a99:	83 ec 18             	sub    esp,0x18
c0016a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016aa0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016aa4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016aa8:	25 ff 00 00 00       	and    eax,0xff
c0016aad:	8b 0c 85 a0 29 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd660]
c0016ab4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016ab8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016abc:	ba 00 00 00 00       	mov    edx,0x0
c0016ac1:	83 ec 0c             	sub    esp,0xc
c0016ac4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ac8:	53                   	push   ebx
c0016ac9:	52                   	push   edx
c0016aca:	50                   	push   eax
c0016acb:	51                   	push   ecx
c0016acc:	e8 e9 60 ff ff       	call   c000cbba <LogicalDisk::write(unsigned long long, int, void*)>
c0016ad1:	83 c4 20             	add    esp,0x20
c0016ad4:	83 c4 18             	add    esp,0x18
c0016ad7:	5b                   	pop    ebx
c0016ad8:	c3                   	ret    
c0016ad9:	8d 76 00             	lea    esi,[esi+0x0]

c0016adc <fatWrapperIoctl>:
c0016adc:	53                   	push   ebx
c0016add:	83 ec 28             	sub    esp,0x28
c0016ae0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016ae4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ae8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0016aec:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016af0:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0016af5:	75 35                	jne    c0016b2c <fatWrapperIoctl+0x50>
c0016af7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016afb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016aff:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016b03:	25 ff 00 00 00       	and    eax,0xff
c0016b08:	8b 04 85 a0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd660]
c0016b0f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016b15:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016b1b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016b1f:	66 89 02             	mov    WORD PTR [edx],ax
c0016b22:	b8 00 00 00 00       	mov    eax,0x0
c0016b27:	e9 c4 00 00 00       	jmp    c0016bf0 <fatWrapperIoctl+0x114>
c0016b2c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0016b31:	75 75                	jne    c0016ba8 <fatWrapperIoctl+0xcc>
c0016b33:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b3b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016b3f:	25 ff 00 00 00       	and    eax,0xff
c0016b44:	8b 04 85 a0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd660]
c0016b4b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016b51:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0016b57:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0016b5d:	89 c8                	mov    eax,ecx
c0016b5f:	89 da                	mov    edx,ebx
c0016b61:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b65:	c1 e0 0a             	shl    eax,0xa
c0016b68:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016b6c:	81 e1 ff 00 00 00    	and    ecx,0xff
c0016b72:	8b 0c 8d a0 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd660]
c0016b79:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0016b7f:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0016b85:	89 cb                	mov    ebx,ecx
c0016b87:	c1 fb 1f             	sar    ebx,0x1f
c0016b8a:	53                   	push   ebx
c0016b8b:	51                   	push   ecx
c0016b8c:	52                   	push   edx
c0016b8d:	50                   	push   eax
c0016b8e:	e8 4d 50 00 00       	call   c001bbe0 <__udivdi3>
c0016b93:	83 c4 10             	add    esp,0x10
c0016b96:	89 c2                	mov    edx,eax
c0016b98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016b9c:	89 10                	mov    DWORD PTR [eax],edx
c0016b9e:	b8 00 00 00 00       	mov    eax,0x0
c0016ba3:	eb 4b                	jmp    c0016bf0 <fatWrapperIoctl+0x114>
c0016ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ba8:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0016bad:	75 09                	jne    c0016bb8 <fatWrapperIoctl+0xdc>
c0016baf:	b8 00 00 00 00       	mov    eax,0x0
c0016bb4:	eb 3a                	jmp    c0016bf0 <fatWrapperIoctl+0x114>
c0016bb6:	66 90                	xchg   ax,ax
c0016bb8:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0016bbd:	75 19                	jne    c0016bd8 <fatWrapperIoctl+0xfc>
c0016bbf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016bc3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016bc7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016bcb:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0016bd1:	b8 00 00 00 00       	mov    eax,0x0
c0016bd6:	eb 18                	jmp    c0016bf0 <fatWrapperIoctl+0x114>
c0016bd8:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0016bdd:	75 09                	jne    c0016be8 <fatWrapperIoctl+0x10c>
c0016bdf:	b8 00 00 00 00       	mov    eax,0x0
c0016be4:	eb 0a                	jmp    c0016bf0 <fatWrapperIoctl+0x114>
c0016be6:	66 90                	xchg   ax,ax
c0016be8:	b8 04 00 00 00       	mov    eax,0x4
c0016bed:	8d 76 00             	lea    esi,[esi+0x0]
c0016bf0:	83 c4 28             	add    esp,0x28
c0016bf3:	5b                   	pop    ebx
c0016bf4:	c3                   	ret    
c0016bf5:	90                   	nop
c0016bf6:	66 90                	xchg   ax,ax

c0016bf8 <FAT::FAT()>:
c0016bf8:	83 ec 1c             	sub    esp,0x1c
c0016bfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bff:	83 ec 0c             	sub    esp,0xc
c0016c02:	50                   	push   eax
c0016c03:	e8 6e 3b ff ff       	call   c000a776 <Filesystem::Filesystem()>
c0016c08:	83 c4 10             	add    esp,0x10
c0016c0b:	ba ac e9 01 c0       	mov    edx,0xc001e9ac
c0016c10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c14:	89 10                	mov    DWORD PTR [eax],edx
c0016c16:	c7 05 a0 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237a0,0x0
c0016c20:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016c28:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0016c2d:	7f 15                	jg     c0016c44 <FAT::FAT()+0x4c>
c0016c2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016c33:	c7 04 85 c0 37 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdc840],0xffffffff
c0016c3e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016c42:	eb e4                	jmp    c0016c28 <FAT::FAT()+0x30>
c0016c44:	90                   	nop
c0016c45:	83 c4 1c             	add    esp,0x1c
c0016c48:	c3                   	ret    
c0016c49:	90                   	nop
c0016c4a:	66 90                	xchg   ax,ax

c0016c4c <FAT::fixFilepath(char*)>:
c0016c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c50:	8a 00                	mov    al,BYTE PTR [eax]
c0016c52:	3c 40                	cmp    al,0x40
c0016c54:	7e 2e                	jle    c0016c84 <FAT::fixFilepath(char*)+0x38>
c0016c56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c5a:	8a 00                	mov    al,BYTE PTR [eax]
c0016c5c:	83 e8 41             	sub    eax,0x41
c0016c5f:	88 c2                	mov    dl,al
c0016c61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c65:	88 10                	mov    BYTE PTR [eax],dl
c0016c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c6b:	8a 00                	mov    al,BYTE PTR [eax]
c0016c6d:	0f be c0             	movsx  eax,al
c0016c70:	8b 04 85 c0 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc840]
c0016c77:	83 c0 30             	add    eax,0x30
c0016c7a:	88 c2                	mov    dl,al
c0016c7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c80:	88 10                	mov    BYTE PTR [eax],dl
c0016c82:	66 90                	xchg   ax,ax
c0016c84:	90                   	nop
c0016c85:	c3                   	ret    
c0016c86:	66 90                	xchg   ax,ax

c0016c88 <FAT::open(char const*, void**, FileOpenMode)>:
c0016c88:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016c8e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016c96:	74 0c                	je     c0016ca4 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0016c98:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0016ca0:	75 0e                	jne    c0016cb0 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0016ca2:	66 90                	xchg   ax,ax
c0016ca4:	b8 04 00 00 00       	mov    eax,0x4
c0016ca9:	e9 0a 01 00 00       	jmp    c0016db8 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0016cae:	66 90                	xchg   ax,ax
c0016cb0:	83 ec 08             	sub    esp,0x8
c0016cb3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016cba:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016cbe:	50                   	push   eax
c0016cbf:	e8 3c 99 fe ff       	call   c0000600 <strcpy>
c0016cc4:	83 c4 10             	add    esp,0x10
c0016cc7:	83 ec 08             	sub    esp,0x8
c0016cca:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016cce:	50                   	push   eax
c0016ccf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016cd6:	e8 71 ff ff ff       	call   c0016c4c <FAT::fixFilepath(char*)>
c0016cdb:	83 c4 10             	add    esp,0x10
c0016cde:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0016ce6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016ced:	83 e0 01             	and    eax,0x1
c0016cf0:	74 0a                	je     c0016cfc <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0016cf2:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0016cfa:	66 90                	xchg   ax,ax
c0016cfc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016d03:	83 e0 04             	and    eax,0x4
c0016d06:	74 10                	je     c0016d18 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0016d08:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0016d10:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0016d18:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016d1f:	83 e0 02             	and    eax,0x2
c0016d22:	74 08                	je     c0016d2c <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0016d24:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0016d2c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016d33:	83 e0 08             	and    eax,0x8
c0016d36:	74 08                	je     c0016d40 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0016d38:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0016d40:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016d47:	83 e0 10             	and    eax,0x10
c0016d4a:	74 08                	je     c0016d54 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0016d4c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0016d54:	83 ec 0c             	sub    esp,0xc
c0016d57:	68 28 02 00 00       	push   0x228
c0016d5c:	e8 58 0a ff ff       	call   c00077b9 <malloc>
c0016d61:	83 c4 10             	add    esp,0x10
c0016d64:	89 c2                	mov    edx,eax
c0016d66:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016d6d:	89 10                	mov    DWORD PTR [eax],edx
c0016d6f:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0016d76:	31 d2                	xor    edx,edx
c0016d78:	88 c2                	mov    dl,al
c0016d7a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016d81:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d83:	83 ec 04             	sub    esp,0x4
c0016d86:	52                   	push   edx
c0016d87:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016d8b:	52                   	push   edx
c0016d8c:	50                   	push   eax
c0016d8d:	e8 8b cd fe ff       	call   c0003b1d <f_open>
c0016d92:	83 c4 10             	add    esp,0x10
c0016d95:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0016d9c:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0016da4:	74 0a                	je     c0016db0 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c0016da6:	b8 01 00 00 00       	mov    eax,0x1
c0016dab:	eb 0b                	jmp    c0016db8 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0016dad:	8d 76 00             	lea    esi,[esi+0x0]
c0016db0:	b8 00 00 00 00       	mov    eax,0x0
c0016db5:	8d 76 00             	lea    esi,[esi+0x0]
c0016db8:	81 c4 1c 01 00 00    	add    esp,0x11c
c0016dbe:	c3                   	ret    
c0016dbf:	90                   	nop

c0016dc0 <FAT::openDir(char const*, void**)>:
c0016dc0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016dc6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016dce:	74 0c                	je     c0016ddc <FAT::openDir(char const*, void**)+0x1c>
c0016dd0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0016dd8:	75 0e                	jne    c0016de8 <FAT::openDir(char const*, void**)+0x28>
c0016dda:	66 90                	xchg   ax,ax
c0016ddc:	b8 04 00 00 00       	mov    eax,0x4
c0016de1:	e9 82 00 00 00       	jmp    c0016e68 <FAT::openDir(char const*, void**)+0xa8>
c0016de6:	66 90                	xchg   ax,ax
c0016de8:	83 ec 08             	sub    esp,0x8
c0016deb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016df2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016df6:	50                   	push   eax
c0016df7:	e8 04 98 fe ff       	call   c0000600 <strcpy>
c0016dfc:	83 c4 10             	add    esp,0x10
c0016dff:	83 ec 08             	sub    esp,0x8
c0016e02:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016e06:	50                   	push   eax
c0016e07:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016e0e:	e8 39 fe ff ff       	call   c0016c4c <FAT::fixFilepath(char*)>
c0016e13:	83 c4 10             	add    esp,0x10
c0016e16:	83 ec 0c             	sub    esp,0xc
c0016e19:	6a 30                	push   0x30
c0016e1b:	e8 99 09 ff ff       	call   c00077b9 <malloc>
c0016e20:	83 c4 10             	add    esp,0x10
c0016e23:	89 c2                	mov    edx,eax
c0016e25:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016e2c:	89 10                	mov    DWORD PTR [eax],edx
c0016e2e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016e35:	8b 00                	mov    eax,DWORD PTR [eax]
c0016e37:	83 ec 08             	sub    esp,0x8
c0016e3a:	8d 54 24 14          	lea    edx,[esp+0x14]
c0016e3e:	52                   	push   edx
c0016e3f:	50                   	push   eax
c0016e40:	e8 61 d6 fe ff       	call   c00044a6 <f_opendir>
c0016e45:	83 c4 10             	add    esp,0x10
c0016e48:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0016e4f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0016e57:	74 07                	je     c0016e60 <FAT::openDir(char const*, void**)+0xa0>
c0016e59:	b8 01 00 00 00       	mov    eax,0x1
c0016e5e:	eb 08                	jmp    c0016e68 <FAT::openDir(char const*, void**)+0xa8>
c0016e60:	b8 00 00 00 00       	mov    eax,0x0
c0016e65:	8d 76 00             	lea    esi,[esi+0x0]
c0016e68:	81 c4 1c 01 00 00    	add    esp,0x11c
c0016e6e:	c3                   	ret    
c0016e6f:	90                   	nop

c0016e70 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0016e70:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0016e76:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0016e7e:	75 0c                	jne    c0016e8c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0016e80:	b8 04 00 00 00       	mov    eax,0x4
c0016e85:	e9 d6 00 00 00       	jmp    c0016f60 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016e8a:	66 90                	xchg   ax,ax
c0016e8c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0016e94:	75 0a                	jne    c0016ea0 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0016e96:	b8 04 00 00 00       	mov    eax,0x4
c0016e9b:	e9 c0 00 00 00       	jmp    c0016f60 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016ea0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0016ea8:	75 0a                	jne    c0016eb4 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0016eaa:	b8 04 00 00 00       	mov    eax,0x4
c0016eaf:	e9 ac 00 00 00       	jmp    c0016f60 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016eb4:	83 ec 08             	sub    esp,0x8
c0016eb7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0016ebe:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0016ec5:	50                   	push   eax
c0016ec6:	e8 35 97 fe ff       	call   c0000600 <strcpy>
c0016ecb:	83 c4 10             	add    esp,0x10
c0016ece:	83 ec 08             	sub    esp,0x8
c0016ed1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016ed8:	50                   	push   eax
c0016ed9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0016ee0:	e8 67 fd ff ff       	call   c0016c4c <FAT::fixFilepath(char*)>
c0016ee5:	83 c4 10             	add    esp,0x10
c0016ee8:	83 ec 08             	sub    esp,0x8
c0016eeb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016eef:	50                   	push   eax
c0016ef0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0016ef7:	50                   	push   eax
c0016ef8:	e8 28 d7 fe ff       	call   c0004625 <f_stat>
c0016efd:	83 c4 10             	add    esp,0x10
c0016f00:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0016f07:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0016f0e:	85 c0                	test   eax,eax
c0016f10:	74 0a                	je     c0016f1c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0016f12:	83 f8 04             	cmp    eax,0x4
c0016f15:	74 39                	je     c0016f50 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0016f17:	eb 3f                	jmp    c0016f58 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0016f19:	8d 76 00             	lea    esi,[esi+0x0]
c0016f1c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016f20:	25 ff 00 00 00       	and    eax,0xff
c0016f25:	83 e0 10             	and    eax,0x10
c0016f28:	0f 95 c2             	setne  dl
c0016f2b:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0016f32:	88 10                	mov    BYTE PTR [eax],dl
c0016f34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f38:	ba 00 00 00 00       	mov    edx,0x0
c0016f3d:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0016f44:	89 01                	mov    DWORD PTR [ecx],eax
c0016f46:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016f49:	b8 00 00 00 00       	mov    eax,0x0
c0016f4e:	eb 10                	jmp    c0016f60 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016f50:	b8 02 00 00 00       	mov    eax,0x2
c0016f55:	eb 09                	jmp    c0016f60 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016f57:	90                   	nop
c0016f58:	b8 01 00 00 00       	mov    eax,0x1
c0016f5d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f60:	81 c4 2c 02 00 00    	add    esp,0x22c
c0016f66:	c3                   	ret    
c0016f67:	90                   	nop

c0016f68 <FAT::unlink(char const*)>:
c0016f68:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016f6e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016f76:	75 08                	jne    c0016f80 <FAT::unlink(char const*)+0x18>
c0016f78:	b8 04 00 00 00       	mov    eax,0x4
c0016f7d:	eb 61                	jmp    c0016fe0 <FAT::unlink(char const*)+0x78>
c0016f7f:	90                   	nop
c0016f80:	83 ec 08             	sub    esp,0x8
c0016f83:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016f8a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016f8e:	50                   	push   eax
c0016f8f:	e8 6c 96 fe ff       	call   c0000600 <strcpy>
c0016f94:	83 c4 10             	add    esp,0x10
c0016f97:	83 ec 08             	sub    esp,0x8
c0016f9a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016f9e:	50                   	push   eax
c0016f9f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016fa6:	e8 a1 fc ff ff       	call   c0016c4c <FAT::fixFilepath(char*)>
c0016fab:	83 c4 10             	add    esp,0x10
c0016fae:	83 ec 0c             	sub    esp,0xc
c0016fb1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016fb5:	50                   	push   eax
c0016fb6:	e8 cf d8 fe ff       	call   c000488a <f_unlink>
c0016fbb:	83 c4 10             	add    esp,0x10
c0016fbe:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0016fc5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0016fcc:	85 c0                	test   eax,eax
c0016fce:	75 08                	jne    c0016fd8 <FAT::unlink(char const*)+0x70>
c0016fd0:	b8 00 00 00 00       	mov    eax,0x0
c0016fd5:	eb 09                	jmp    c0016fe0 <FAT::unlink(char const*)+0x78>
c0016fd7:	90                   	nop
c0016fd8:	b8 01 00 00 00       	mov    eax,0x1
c0016fdd:	8d 76 00             	lea    esi,[esi+0x0]
c0016fe0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0016fe6:	c3                   	ret    
c0016fe7:	90                   	nop

c0016fe8 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0016fe8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0016fee:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0016ff5:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0016ffc:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017000:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017004:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001700c:	75 0a                	jne    c0017018 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001700e:	b8 04 00 00 00       	mov    eax,0x4
c0017013:	e9 54 01 00 00       	jmp    c001716c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017018:	83 ec 08             	sub    esp,0x8
c001701b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0017022:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017026:	50                   	push   eax
c0017027:	e8 d4 95 fe ff       	call   c0000600 <strcpy>
c001702c:	83 c4 10             	add    esp,0x10
c001702f:	83 ec 08             	sub    esp,0x8
c0017032:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017036:	50                   	push   eax
c0017037:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001703e:	e8 09 fc ff ff       	call   c0016c4c <FAT::fixFilepath(char*)>
c0017043:	83 c4 10             	add    esp,0x10
c0017046:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001704e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0017056:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001705a:	25 ff 00 00 00       	and    eax,0xff
c001705f:	83 e0 01             	and    eax,0x1
c0017062:	74 08                	je     c001706c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c0017064:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001706c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017070:	25 ff 00 00 00       	and    eax,0xff
c0017075:	83 e0 02             	and    eax,0x2
c0017078:	74 0a                	je     c0017084 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c001707a:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0017082:	66 90                	xchg   ax,ax
c0017084:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017088:	25 ff 00 00 00       	and    eax,0xff
c001708d:	83 e0 04             	and    eax,0x4
c0017090:	74 0a                	je     c001709c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c0017092:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001709a:	66 90                	xchg   ax,ax
c001709c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00170a0:	25 ff 00 00 00       	and    eax,0xff
c00170a5:	83 e0 08             	and    eax,0x8
c00170a8:	74 0a                	je     c00170b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c00170aa:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00170b2:	66 90                	xchg   ax,ax
c00170b4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170b8:	25 ff 00 00 00       	and    eax,0xff
c00170bd:	83 e0 01             	and    eax,0x1
c00170c0:	74 0a                	je     c00170cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c00170c2:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00170ca:	66 90                	xchg   ax,ax
c00170cc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170d0:	25 ff 00 00 00       	and    eax,0xff
c00170d5:	83 e0 02             	and    eax,0x2
c00170d8:	74 0a                	je     c00170e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c00170da:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00170e2:	66 90                	xchg   ax,ax
c00170e4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170e8:	25 ff 00 00 00       	and    eax,0xff
c00170ed:	83 e0 04             	and    eax,0x4
c00170f0:	74 0a                	je     c00170fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c00170f2:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00170fa:	66 90                	xchg   ax,ax
c00170fc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017100:	25 ff 00 00 00       	and    eax,0xff
c0017105:	83 e0 08             	and    eax,0x8
c0017108:	74 0a                	je     c0017114 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c001710a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0017112:	66 90                	xchg   ax,ax
c0017114:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001711b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0017122:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0017129:	31 d2                	xor    edx,edx
c001712b:	88 c2                	mov    dl,al
c001712d:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017134:	25 ff 00 00 00       	and    eax,0xff
c0017139:	83 ec 04             	sub    esp,0x4
c001713c:	52                   	push   edx
c001713d:	50                   	push   eax
c001713e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017142:	50                   	push   eax
c0017143:	e8 b5 db fe ff       	call   c0004cfd <f_chmod>
c0017148:	83 c4 10             	add    esp,0x10
c001714b:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0017152:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0017159:	85 c0                	test   eax,eax
c001715b:	75 07                	jne    c0017164 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c001715d:	b8 00 00 00 00       	mov    eax,0x0
c0017162:	eb 08                	jmp    c001716c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017164:	b8 01 00 00 00       	mov    eax,0x1
c0017169:	8d 76 00             	lea    esi,[esi+0x0]
c001716c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017172:	c3                   	ret    
c0017173:	90                   	nop

c0017174 <FAT::rename(char const*, char const*)>:
c0017174:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001717a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0017182:	74 0c                	je     c0017190 <FAT::rename(char const*, char const*)+0x1c>
c0017184:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001718c:	75 0e                	jne    c001719c <FAT::rename(char const*, char const*)+0x28>
c001718e:	66 90                	xchg   ax,ax
c0017190:	b8 04 00 00 00       	mov    eax,0x4
c0017195:	e9 9e 00 00 00       	jmp    c0017238 <FAT::rename(char const*, char const*)+0xc4>
c001719a:	66 90                	xchg   ax,ax
c001719c:	83 ec 08             	sub    esp,0x8
c001719f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00171a6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00171ad:	50                   	push   eax
c00171ae:	e8 4d 94 fe ff       	call   c0000600 <strcpy>
c00171b3:	83 c4 10             	add    esp,0x10
c00171b6:	83 ec 08             	sub    esp,0x8
c00171b9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00171c0:	50                   	push   eax
c00171c1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00171c8:	e8 7f fa ff ff       	call   c0016c4c <FAT::fixFilepath(char*)>
c00171cd:	83 c4 10             	add    esp,0x10
c00171d0:	83 ec 08             	sub    esp,0x8
c00171d3:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00171da:	8d 44 24 18          	lea    eax,[esp+0x18]
c00171de:	50                   	push   eax
c00171df:	e8 1c 94 fe ff       	call   c0000600 <strcpy>
c00171e4:	83 c4 10             	add    esp,0x10
c00171e7:	83 ec 08             	sub    esp,0x8
c00171ea:	8d 44 24 14          	lea    eax,[esp+0x14]
c00171ee:	50                   	push   eax
c00171ef:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00171f6:	e8 51 fa ff ff       	call   c0016c4c <FAT::fixFilepath(char*)>
c00171fb:	83 c4 10             	add    esp,0x10
c00171fe:	83 ec 08             	sub    esp,0x8
c0017201:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017205:	50                   	push   eax
c0017206:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001720d:	50                   	push   eax
c001720e:	e8 34 d9 fe ff       	call   c0004b47 <f_rename>
c0017213:	83 c4 10             	add    esp,0x10
c0017216:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001721d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0017224:	85 c0                	test   eax,eax
c0017226:	75 08                	jne    c0017230 <FAT::rename(char const*, char const*)+0xbc>
c0017228:	b8 00 00 00 00       	mov    eax,0x0
c001722d:	eb 09                	jmp    c0017238 <FAT::rename(char const*, char const*)+0xc4>
c001722f:	90                   	nop
c0017230:	b8 01 00 00 00       	mov    eax,0x1
c0017235:	8d 76 00             	lea    esi,[esi+0x0]
c0017238:	81 c4 1c 02 00 00    	add    esp,0x21c
c001723e:	c3                   	ret    
c001723f:	90                   	nop

c0017240 <FAT::mkdir(char const*)>:
c0017240:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017246:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001724e:	75 08                	jne    c0017258 <FAT::mkdir(char const*)+0x18>
c0017250:	b8 04 00 00 00       	mov    eax,0x4
c0017255:	eb 61                	jmp    c00172b8 <FAT::mkdir(char const*)+0x78>
c0017257:	90                   	nop
c0017258:	83 ec 08             	sub    esp,0x8
c001725b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017262:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017266:	50                   	push   eax
c0017267:	e8 94 93 fe ff       	call   c0000600 <strcpy>
c001726c:	83 c4 10             	add    esp,0x10
c001726f:	83 ec 08             	sub    esp,0x8
c0017272:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017276:	50                   	push   eax
c0017277:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001727e:	e8 c9 f9 ff ff       	call   c0016c4c <FAT::fixFilepath(char*)>
c0017283:	83 c4 10             	add    esp,0x10
c0017286:	83 ec 0c             	sub    esp,0xc
c0017289:	8d 44 24 18          	lea    eax,[esp+0x18]
c001728d:	50                   	push   eax
c001728e:	e8 19 d7 fe ff       	call   c00049ac <f_mkdir>
c0017293:	83 c4 10             	add    esp,0x10
c0017296:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001729d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00172a4:	85 c0                	test   eax,eax
c00172a6:	75 08                	jne    c00172b0 <FAT::mkdir(char const*)+0x70>
c00172a8:	b8 00 00 00 00       	mov    eax,0x0
c00172ad:	eb 09                	jmp    c00172b8 <FAT::mkdir(char const*)+0x78>
c00172af:	90                   	nop
c00172b0:	b8 01 00 00 00       	mov    eax,0x1
c00172b5:	8d 76 00             	lea    esi,[esi+0x0]
c00172b8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00172be:	c3                   	ret    
c00172bf:	90                   	nop

c00172c0 <FAT::exists(char const*)>:
c00172c0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00172c6:	83 ec 08             	sub    esp,0x8
c00172c9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00172d0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00172d4:	50                   	push   eax
c00172d5:	e8 26 93 fe ff       	call   c0000600 <strcpy>
c00172da:	83 c4 10             	add    esp,0x10
c00172dd:	83 ec 08             	sub    esp,0x8
c00172e0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00172e4:	50                   	push   eax
c00172e5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00172ec:	e8 5b f9 ff ff       	call   c0016c4c <FAT::fixFilepath(char*)>
c00172f1:	83 c4 10             	add    esp,0x10
c00172f4:	83 ec 08             	sub    esp,0x8
c00172f7:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00172fe:	50                   	push   eax
c00172ff:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017303:	50                   	push   eax
c0017304:	e8 1c d3 fe ff       	call   c0004625 <f_stat>
c0017309:	83 c4 10             	add    esp,0x10
c001730c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0017313:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001731a:	85 c0                	test   eax,eax
c001731c:	75 06                	jne    c0017324 <FAT::exists(char const*)+0x64>
c001731e:	b0 01                	mov    al,0x1
c0017320:	eb 06                	jmp    c0017328 <FAT::exists(char const*)+0x68>
c0017322:	66 90                	xchg   ax,ax
c0017324:	b0 00                	mov    al,0x0
c0017326:	66 90                	xchg   ax,ax
c0017328:	81 c4 2c 02 00 00    	add    esp,0x22c
c001732e:	c3                   	ret    
c001732f:	90                   	nop

c0017330 <isoReadDiscSectorHelper>:
c0017330:	83 ec 2c             	sub    esp,0x2c
c0017333:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017337:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001733b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0017340:	83 e8 41             	sub    eax,0x41
c0017343:	8b 0c 85 a0 29 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd660]
c001734a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001734e:	ba 00 00 00 00       	mov    edx,0x0
c0017353:	83 ec 0c             	sub    esp,0xc
c0017356:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001735a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001735e:	52                   	push   edx
c001735f:	50                   	push   eax
c0017360:	51                   	push   ecx
c0017361:	e8 e8 57 ff ff       	call   c000cb4e <LogicalDisk::read(unsigned long long, int, void*)>
c0017366:	83 c4 20             	add    esp,0x20
c0017369:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001736d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017372:	74 0c                	je     c0017380 <isoReadDiscSectorHelper+0x50>
c0017374:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017378:	c1 e0 0b             	shl    eax,0xb
c001737b:	eb 0b                	jmp    c0017388 <isoReadDiscSectorHelper+0x58>
c001737d:	8d 76 00             	lea    esi,[esi+0x0]
c0017380:	b8 00 00 00 00       	mov    eax,0x0
c0017385:	8d 76 00             	lea    esi,[esi+0x0]
c0017388:	83 c4 2c             	add    esp,0x2c
c001738b:	c3                   	ret    

c001738c <iso_kprintf>:
c001738c:	83 ec 0c             	sub    esp,0xc
c001738f:	a1 84 04 02 c0       	mov    eax,ds:0xc0020484
c0017394:	83 ec 08             	sub    esp,0x8
c0017397:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001739b:	50                   	push   eax
c001739c:	e8 95 13 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00173a1:	83 c4 10             	add    esp,0x10
c00173a4:	90                   	nop
c00173a5:	83 c4 0c             	add    esp,0xc
c00173a8:	c3                   	ret    
c00173a9:	8d 76 00             	lea    esi,[esi+0x0]

c00173ac <iso_kprintfd>:
c00173ac:	83 ec 0c             	sub    esp,0xc
c00173af:	a1 84 04 02 c0       	mov    eax,ds:0xc0020484
c00173b4:	83 ec 08             	sub    esp,0x8
c00173b7:	68 0c ea 01 c0       	push   0xc001ea0c
c00173bc:	50                   	push   eax
c00173bd:	e8 74 13 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00173c2:	83 c4 10             	add    esp,0x10
c00173c5:	a1 84 04 02 c0       	mov    eax,ds:0xc0020484
c00173ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00173ce:	83 ec 08             	sub    esp,0x8
c00173d1:	52                   	push   edx
c00173d2:	50                   	push   eax
c00173d3:	e8 18 13 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00173d8:	83 c4 10             	add    esp,0x10
c00173db:	a1 84 04 02 c0       	mov    eax,ds:0xc0020484
c00173e0:	83 ec 08             	sub    esp,0x8
c00173e3:	68 8d e8 01 c0       	push   0xc001e88d
c00173e8:	50                   	push   eax
c00173e9:	e8 48 13 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00173ee:	83 c4 10             	add    esp,0x10
c00173f1:	90                   	nop
c00173f2:	83 c4 0c             	add    esp,0xc
c00173f5:	c3                   	ret    

c00173f6 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00173f6:	b8 08 00 00 00       	mov    eax,0x8
c00173fb:	c3                   	ret    

c00173fc <ISO9660::getName()>:
c00173fc:	b8 0f ea 01 c0       	mov    eax,0xc001ea0f
c0017401:	c3                   	ret    

c0017402 <ISO9660::closeDir(void*)>:
c0017402:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017406:	8b 00                	mov    eax,DWORD PTR [eax]
c0017408:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001740b:	90                   	nop

c001740c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001740c:	b8 01 00 00 00       	mov    eax,0x1
c0017411:	c3                   	ret    

c0017412 <ISO9660::unlink(char const*)>:
c0017412:	b8 01 00 00 00       	mov    eax,0x1
c0017417:	c3                   	ret    

c0017418 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0017418:	b8 03 00 00 00       	mov    eax,0x3
c001741d:	c3                   	ret    

c001741e <ISO9660::rename(char const*, char const*)>:
c001741e:	b8 01 00 00 00       	mov    eax,0x1
c0017423:	c3                   	ret    

c0017424 <ISO9660::mkdir(char const*)>:
c0017424:	b8 01 00 00 00       	mov    eax,0x1
c0017429:	c3                   	ret    

c001742a <ISO9660::~ISO9660()>:
c001742a:	83 ec 0c             	sub    esp,0xc
c001742d:	ba 60 ea 01 c0       	mov    edx,0xc001ea60
c0017432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017436:	89 10                	mov    DWORD PTR [eax],edx
c0017438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001743c:	83 ec 0c             	sub    esp,0xc
c001743f:	50                   	push   eax
c0017440:	e8 55 33 ff ff       	call   c000a79a <Filesystem::~Filesystem()>
c0017445:	83 c4 10             	add    esp,0x10
c0017448:	90                   	nop
c0017449:	83 c4 0c             	add    esp,0xc
c001744c:	c3                   	ret    
c001744d:	90                   	nop

c001744e <ISO9660::~ISO9660()>:
c001744e:	83 ec 0c             	sub    esp,0xc
c0017451:	83 ec 0c             	sub    esp,0xc
c0017454:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017458:	e8 cd ff ff ff       	call   c001742a <ISO9660::~ISO9660()>
c001745d:	83 c4 10             	add    esp,0x10
c0017460:	83 ec 08             	sub    esp,0x8
c0017463:	6a 08                	push   0x8
c0017465:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017469:	e8 f0 2e ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001746e:	83 c4 10             	add    esp,0x10
c0017471:	83 c4 0c             	add    esp,0xc
c0017474:	c3                   	ret    
c0017475:	90                   	nop

c0017476 <ISO9660::exists(char const*)>:
c0017476:	83 ec 18             	sub    esp,0x18
c0017479:	68 2a ea 01 c0       	push   0xc001ea2a
c001747e:	e8 48 8c ff ff       	call   c00100cb <KePanic(char const*)>
c0017483:	31 c0                	xor    eax,eax
c0017485:	83 c4 1c             	add    esp,0x1c
c0017488:	c3                   	ret    
c0017489:	90                   	nop

c001748a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001748a:	56                   	push   esi
c001748b:	53                   	push   ebx
c001748c:	50                   	push   eax
c001748d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017491:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017495:	85 db                	test   ebx,ebx
c0017497:	0f 84 82 00 00 00    	je     c001751f <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c001749d:	85 f6                	test   esi,esi
c001749f:	74 7e                	je     c001751f <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c00174a1:	ba 03 00 00 00       	mov    edx,0x3
c00174a6:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c00174ab:	75 77                	jne    c0017524 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c00174ad:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00174b0:	3a 05 a0 38 02 c0    	cmp    al,BYTE PTR ds:0xc00238a0
c00174b6:	74 34                	je     c00174ec <ISO9660::open(char const*, void**, FileOpenMode)+0x62>
c00174b8:	83 ec 0c             	sub    esp,0xc
c00174bb:	50                   	push   eax
c00174bc:	e8 fe f2 fe ff       	call   c00067bf <init_percd>
c00174c1:	83 c4 10             	add    esp,0x10
c00174c4:	ba 0b 00 00 00       	mov    edx,0xb
c00174c9:	40                   	inc    eax
c00174ca:	74 58                	je     c0017524 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c00174cc:	80 3d a0 38 02 c0 00 	cmp    BYTE PTR ds:0xc00238a0,0x0
c00174d3:	74 10                	je     c00174e5 <ISO9660::open(char const*, void**, FileOpenMode)+0x5b>
c00174d5:	83 ec 0c             	sub    esp,0xc
c00174d8:	68 48 ea 01 c0       	push   0xc001ea48
c00174dd:	e8 e9 8b ff ff       	call   c00100cb <KePanic(char const*)>
c00174e2:	83 c4 10             	add    esp,0x10
c00174e5:	8a 03                	mov    al,BYTE PTR [ebx]
c00174e7:	a2 a0 38 02 c0       	mov    ds:0xc00238a0,al
c00174ec:	83 ec 0c             	sub    esp,0xc
c00174ef:	0f be 05 a0 38 02 c0 	movsx  eax,BYTE PTR ds:0xc00238a0
c00174f6:	83 c3 03             	add    ebx,0x3
c00174f9:	50                   	push   eax
c00174fa:	e8 c0 f2 fe ff       	call   c00067bf <init_percd>
c00174ff:	59                   	pop    ecx
c0017500:	58                   	pop    eax
c0017501:	6a 00                	push   0x0
c0017503:	53                   	push   ebx
c0017504:	e8 f4 ed fe ff       	call   c00062fd <iso_open>
c0017509:	83 c4 10             	add    esp,0x10
c001750c:	ba 01 00 00 00       	mov    edx,0x1
c0017511:	83 f8 ff             	cmp    eax,0xffffffff
c0017514:	74 0e                	je     c0017524 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017516:	83 c0 64             	add    eax,0x64
c0017519:	31 d2                	xor    edx,edx
c001751b:	89 06                	mov    DWORD PTR [esi],eax
c001751d:	eb 05                	jmp    c0017524 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c001751f:	ba 04 00 00 00       	mov    edx,0x4
c0017524:	89 d0                	mov    eax,edx
c0017526:	5a                   	pop    edx
c0017527:	5b                   	pop    ebx
c0017528:	5e                   	pop    esi
c0017529:	c3                   	ret    

c001752a <ISO9660::openDir(char const*, void**)>:
c001752a:	56                   	push   esi
c001752b:	53                   	push   ebx
c001752c:	50                   	push   eax
c001752d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017531:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017535:	85 db                	test   ebx,ebx
c0017537:	74 76                	je     c00175af <ISO9660::openDir(char const*, void**)+0x85>
c0017539:	85 f6                	test   esi,esi
c001753b:	74 72                	je     c00175af <ISO9660::openDir(char const*, void**)+0x85>
c001753d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017540:	3a 05 a0 38 02 c0    	cmp    al,BYTE PTR ds:0xc00238a0
c0017546:	74 34                	je     c001757c <ISO9660::openDir(char const*, void**)+0x52>
c0017548:	83 ec 0c             	sub    esp,0xc
c001754b:	50                   	push   eax
c001754c:	e8 6e f2 fe ff       	call   c00067bf <init_percd>
c0017551:	83 c4 10             	add    esp,0x10
c0017554:	ba 0b 00 00 00       	mov    edx,0xb
c0017559:	40                   	inc    eax
c001755a:	74 58                	je     c00175b4 <ISO9660::openDir(char const*, void**)+0x8a>
c001755c:	80 3d a0 38 02 c0 00 	cmp    BYTE PTR ds:0xc00238a0,0x0
c0017563:	74 10                	je     c0017575 <ISO9660::openDir(char const*, void**)+0x4b>
c0017565:	83 ec 0c             	sub    esp,0xc
c0017568:	68 48 ea 01 c0       	push   0xc001ea48
c001756d:	e8 59 8b ff ff       	call   c00100cb <KePanic(char const*)>
c0017572:	83 c4 10             	add    esp,0x10
c0017575:	8a 03                	mov    al,BYTE PTR [ebx]
c0017577:	a2 a0 38 02 c0       	mov    ds:0xc00238a0,al
c001757c:	83 ec 0c             	sub    esp,0xc
c001757f:	0f be 05 a0 38 02 c0 	movsx  eax,BYTE PTR ds:0xc00238a0
c0017586:	83 c3 03             	add    ebx,0x3
c0017589:	50                   	push   eax
c001758a:	e8 30 f2 fe ff       	call   c00067bf <init_percd>
c001758f:	59                   	pop    ecx
c0017590:	58                   	pop    eax
c0017591:	6a 01                	push   0x1
c0017593:	53                   	push   ebx
c0017594:	e8 64 ed fe ff       	call   c00062fd <iso_open>
c0017599:	83 c4 10             	add    esp,0x10
c001759c:	ba 01 00 00 00       	mov    edx,0x1
c00175a1:	83 f8 ff             	cmp    eax,0xffffffff
c00175a4:	74 0e                	je     c00175b4 <ISO9660::openDir(char const*, void**)+0x8a>
c00175a6:	83 c0 64             	add    eax,0x64
c00175a9:	31 d2                	xor    edx,edx
c00175ab:	89 06                	mov    DWORD PTR [esi],eax
c00175ad:	eb 05                	jmp    c00175b4 <ISO9660::openDir(char const*, void**)+0x8a>
c00175af:	ba 04 00 00 00       	mov    edx,0x4
c00175b4:	89 d0                	mov    eax,edx
c00175b6:	5a                   	pop    edx
c00175b7:	5b                   	pop    ebx
c00175b8:	5e                   	pop    esi
c00175b9:	c3                   	ret    

c00175ba <ISO9660::read(void*, unsigned long, void*, int*)>:
c00175ba:	53                   	push   ebx
c00175bb:	83 ec 08             	sub    esp,0x8
c00175be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00175c2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00175c6:	85 c0                	test   eax,eax
c00175c8:	74 25                	je     c00175ef <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c00175ca:	85 db                	test   ebx,ebx
c00175cc:	74 21                	je     c00175ef <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c00175ce:	83 e8 64             	sub    eax,0x64
c00175d1:	52                   	push   edx
c00175d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00175da:	50                   	push   eax
c00175db:	e8 c5 ed fe ff       	call   c00063a5 <iso_read>
c00175e0:	83 c4 10             	add    esp,0x10
c00175e3:	89 03                	mov    DWORD PTR [ebx],eax
c00175e5:	09 d0                	or     eax,edx
c00175e7:	0f 94 c0             	sete   al
c00175ea:	0f b6 c0             	movzx  eax,al
c00175ed:	eb 05                	jmp    c00175f4 <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c00175ef:	b8 04 00 00 00       	mov    eax,0x4
c00175f4:	83 c4 08             	add    esp,0x8
c00175f7:	5b                   	pop    ebx
c00175f8:	c3                   	ret    
c00175f9:	90                   	nop

c00175fa <ISO9660::seek(void*, unsigned long long)>:
c00175fa:	57                   	push   edi
c00175fb:	56                   	push   esi
c00175fc:	b8 04 00 00 00       	mov    eax,0x4
c0017601:	51                   	push   ecx
c0017602:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017606:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001760a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001760e:	85 d2                	test   edx,edx
c0017610:	74 1c                	je     c001762e <ISO9660::seek(void*, unsigned long long)+0x34>
c0017612:	6a 00                	push   0x0
c0017614:	83 ea 64             	sub    edx,0x64
c0017617:	57                   	push   edi
c0017618:	56                   	push   esi
c0017619:	52                   	push   edx
c001761a:	e8 9c ee fe ff       	call   c00064bb <iso_seek>
c001761f:	83 c4 10             	add    esp,0x10
c0017622:	31 f0                	xor    eax,esi
c0017624:	31 fa                	xor    edx,edi
c0017626:	09 d0                	or     eax,edx
c0017628:	0f 95 c0             	setne  al
c001762b:	0f b6 c0             	movzx  eax,al
c001762e:	5a                   	pop    edx
c001762f:	5e                   	pop    esi
c0017630:	5f                   	pop    edi
c0017631:	c3                   	ret    

c0017632 <ISO9660::tell(void*, unsigned long long*)>:
c0017632:	53                   	push   ebx
c0017633:	83 ec 08             	sub    esp,0x8
c0017636:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001763a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001763e:	85 c0                	test   eax,eax
c0017640:	74 1c                	je     c001765e <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017642:	85 db                	test   ebx,ebx
c0017644:	74 18                	je     c001765e <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017646:	83 ec 0c             	sub    esp,0xc
c0017649:	83 e8 64             	sub    eax,0x64
c001764c:	50                   	push   eax
c001764d:	e8 ed ee fe ff       	call   c000653f <iso_tell>
c0017652:	83 c4 10             	add    esp,0x10
c0017655:	89 03                	mov    DWORD PTR [ebx],eax
c0017657:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001765a:	31 c0                	xor    eax,eax
c001765c:	eb 05                	jmp    c0017663 <ISO9660::tell(void*, unsigned long long*)+0x31>
c001765e:	b8 04 00 00 00       	mov    eax,0x4
c0017663:	83 c4 08             	add    esp,0x8
c0017666:	5b                   	pop    ebx
c0017667:	c3                   	ret    

c0017668 <ISO9660::stat(void*, unsigned long long*)>:
c0017668:	53                   	push   ebx
c0017669:	83 ec 08             	sub    esp,0x8
c001766c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017670:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017674:	85 c0                	test   eax,eax
c0017676:	74 20                	je     c0017698 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017678:	85 db                	test   ebx,ebx
c001767a:	74 1c                	je     c0017698 <ISO9660::stat(void*, unsigned long long*)+0x30>
c001767c:	83 ec 0c             	sub    esp,0xc
c001767f:	83 e8 64             	sub    eax,0x64
c0017682:	50                   	push   eax
c0017683:	e8 e8 ee fe ff       	call   c0006570 <iso_total>
c0017688:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001768f:	89 03                	mov    DWORD PTR [ebx],eax
c0017691:	83 c4 10             	add    esp,0x10
c0017694:	31 c0                	xor    eax,eax
c0017696:	eb 05                	jmp    c001769d <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017698:	b8 04 00 00 00       	mov    eax,0x4
c001769d:	83 c4 08             	add    esp,0x8
c00176a0:	5b                   	pop    ebx
c00176a1:	c3                   	ret    

c00176a2 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00176a2:	55                   	push   ebp
c00176a3:	57                   	push   edi
c00176a4:	56                   	push   esi
c00176a5:	53                   	push   ebx
c00176a6:	83 ec 0c             	sub    esp,0xc
c00176a9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00176ad:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00176b1:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00176b5:	85 ff                	test   edi,edi
c00176b7:	0f 94 c2             	sete   dl
c00176ba:	85 f6                	test   esi,esi
c00176bc:	0f 94 c0             	sete   al
c00176bf:	08 c2                	or     dl,al
c00176c1:	0f 85 9e 00 00 00    	jne    c0017765 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c00176c7:	85 db                	test   ebx,ebx
c00176c9:	0f 84 96 00 00 00    	je     c0017765 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c00176cf:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00176d2:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00176d8:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c00176df:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00176e2:	3a 05 a0 38 02 c0    	cmp    al,BYTE PTR ds:0xc00238a0
c00176e8:	74 34                	je     c001771e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x7c>
c00176ea:	83 ec 0c             	sub    esp,0xc
c00176ed:	50                   	push   eax
c00176ee:	e8 cc f0 fe ff       	call   c00067bf <init_percd>
c00176f3:	83 c4 10             	add    esp,0x10
c00176f6:	ba 0b 00 00 00       	mov    edx,0xb
c00176fb:	40                   	inc    eax
c00176fc:	74 6c                	je     c001776a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c00176fe:	80 3d a0 38 02 c0 00 	cmp    BYTE PTR ds:0xc00238a0,0x0
c0017705:	74 10                	je     c0017717 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x75>
c0017707:	83 ec 0c             	sub    esp,0xc
c001770a:	68 48 ea 01 c0       	push   0xc001ea48
c001770f:	e8 b7 89 ff ff       	call   c00100cb <KePanic(char const*)>
c0017714:	83 c4 10             	add    esp,0x10
c0017717:	8a 03                	mov    al,BYTE PTR [ebx]
c0017719:	a2 a0 38 02 c0       	mov    ds:0xc00238a0,al
c001771e:	83 c3 03             	add    ebx,0x3
c0017721:	52                   	push   edx
c0017722:	52                   	push   edx
c0017723:	6a 00                	push   0x0
c0017725:	53                   	push   ebx
c0017726:	e8 d2 eb fe ff       	call   c00062fd <iso_open>
c001772b:	83 c4 10             	add    esp,0x10
c001772e:	89 c5                	mov    ebp,eax
c0017730:	83 f8 ff             	cmp    eax,0xffffffff
c0017733:	75 0f                	jne    c0017744 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa2>
c0017735:	50                   	push   eax
c0017736:	50                   	push   eax
c0017737:	6a 01                	push   0x1
c0017739:	53                   	push   ebx
c001773a:	e8 be eb fe ff       	call   c00062fd <iso_open>
c001773f:	c6 07 01             	mov    BYTE PTR [edi],0x1
c0017742:	eb 1a                	jmp    c001775e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xbc>
c0017744:	83 ec 0c             	sub    esp,0xc
c0017747:	50                   	push   eax
c0017748:	e8 23 ee fe ff       	call   c0006570 <iso_total>
c001774d:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017754:	89 06                	mov    DWORD PTR [esi],eax
c0017756:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017759:	e8 29 ec fe ff       	call   c0006387 <iso_close>
c001775e:	83 c4 10             	add    esp,0x10
c0017761:	31 d2                	xor    edx,edx
c0017763:	eb 05                	jmp    c001776a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017765:	ba 04 00 00 00       	mov    edx,0x4
c001776a:	83 c4 0c             	add    esp,0xc
c001776d:	89 d0                	mov    eax,edx
c001776f:	5b                   	pop    ebx
c0017770:	5e                   	pop    esi
c0017771:	5f                   	pop    edi
c0017772:	5d                   	pop    ebp
c0017773:	c3                   	ret    

c0017774 <ISO9660::close(void*)>:
c0017774:	83 ec 0c             	sub    esp,0xc
c0017777:	b8 04 00 00 00       	mov    eax,0x4
c001777c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017780:	85 d2                	test   edx,edx
c0017782:	74 11                	je     c0017795 <ISO9660::close(void*)+0x21>
c0017784:	83 ec 0c             	sub    esp,0xc
c0017787:	83 ea 64             	sub    edx,0x64
c001778a:	52                   	push   edx
c001778b:	e8 f7 eb fe ff       	call   c0006387 <iso_close>
c0017790:	83 c4 10             	add    esp,0x10
c0017793:	31 c0                	xor    eax,eax
c0017795:	83 c4 0c             	add    esp,0xc
c0017798:	c3                   	ret    
c0017799:	90                   	nop

c001779a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001779a:	55                   	push   ebp
c001779b:	57                   	push   edi
c001779c:	56                   	push   esi
c001779d:	53                   	push   ebx
c001779e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00177a4:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c00177ab:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00177b2:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00177b9:	85 c0                	test   eax,eax
c00177bb:	0f 84 96 00 00 00    	je     c0017857 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c00177c1:	85 db                	test   ebx,ebx
c00177c3:	0f 84 8e 00 00 00    	je     c0017857 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c00177c9:	83 ec 0c             	sub    esp,0xc
c00177cc:	83 e8 64             	sub    eax,0x64
c00177cf:	50                   	push   eax
c00177d0:	e8 ec ed fe ff       	call   c00065c1 <iso_readdir>
c00177d5:	83 c4 10             	add    esp,0x10
c00177d8:	89 c6                	mov    esi,eax
c00177da:	85 c0                	test   eax,eax
c00177dc:	75 18                	jne    c00177f6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c00177de:	52                   	push   edx
c00177df:	68 10 01 00 00       	push   0x110
c00177e4:	6a 00                	push   0x0
c00177e6:	57                   	push   edi
c00177e7:	e8 e4 8c fe ff       	call   c00004d0 <memset>
c00177ec:	83 c4 10             	add    esp,0x10
c00177ef:	b8 01 00 00 00       	mov    eax,0x1
c00177f4:	eb 66                	jmp    c001785c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c00177f6:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00177fc:	8d 68 08             	lea    ebp,[eax+0x8]
c00177ff:	83 ec 0c             	sub    esp,0xc
c0017802:	55                   	push   ebp
c0017803:	e8 38 8d fe ff       	call   c0000540 <strlen>
c0017808:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017810:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017814:	83 c4 10             	add    esp,0x10
c0017817:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001781b:	75 0a                	jne    c0017827 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c001781d:	b8 02 00 00 00       	mov    eax,0x2
c0017822:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017825:	74 05                	je     c001782c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0017827:	b8 01 00 00 00       	mov    eax,0x1
c001782c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017830:	50                   	push   eax
c0017831:	50                   	push   eax
c0017832:	55                   	push   ebp
c0017833:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017837:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001783b:	50                   	push   eax
c001783c:	e8 bf 8d fe ff       	call   c0000600 <strcpy>
c0017841:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017848:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001784a:	31 c0                	xor    eax,eax
c001784c:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0017852:	83 c4 10             	add    esp,0x10
c0017855:	eb 05                	jmp    c001785c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017857:	b8 04 00 00 00       	mov    eax,0x4
c001785c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017862:	5b                   	pop    ebx
c0017863:	5e                   	pop    esi
c0017864:	5f                   	pop    edi
c0017865:	5d                   	pop    ebp
c0017866:	c3                   	ret    

c0017867 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017867:	57                   	push   edi
c0017868:	56                   	push   esi
c0017869:	53                   	push   ebx
c001786a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001786e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017872:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017876:	39 35 a4 38 02 c0    	cmp    DWORD PTR ds:0xc00238a4,esi
c001787c:	75 08                	jne    c0017886 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001787e:	38 1d 0c f4 01 c0    	cmp    BYTE PTR ds:0xc001f40c,bl
c0017884:	74 4a                	je     c00178d0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017886:	83 ec 0c             	sub    esp,0xc
c0017889:	31 d2                	xor    edx,edx
c001788b:	68 c0 38 02 c0       	push   0xc00238c0
c0017890:	0f be c3             	movsx  eax,bl
c0017893:	6a 01                	push   0x1
c0017895:	52                   	push   edx
c0017896:	56                   	push   esi
c0017897:	ff 34 85 9c 28 02 c0 	push   DWORD PTR [eax*4-0x3ffdd764]
c001789e:	e8 ab 52 ff ff       	call   c000cb4e <LogicalDisk::read(unsigned long long, int, void*)>
c00178a3:	83 c4 20             	add    esp,0x20
c00178a6:	85 c0                	test   eax,eax
c00178a8:	75 0e                	jne    c00178b8 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c00178aa:	89 35 a4 38 02 c0    	mov    DWORD PTR ds:0xc00238a4,esi
c00178b0:	88 1d 0c f4 01 c0    	mov    BYTE PTR ds:0xc001f40c,bl
c00178b6:	eb 18                	jmp    c00178d0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c00178b8:	50                   	push   eax
c00178b9:	68 00 08 00 00       	push   0x800
c00178be:	6a 00                	push   0x0
c00178c0:	57                   	push   edi
c00178c1:	e8 0a 8c fe ff       	call   c00004d0 <memset>
c00178c6:	83 c4 10             	add    esp,0x10
c00178c9:	b8 01 00 00 00       	mov    eax,0x1
c00178ce:	eb 0e                	jmp    c00178de <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c00178d0:	be c0 38 02 c0       	mov    esi,0xc00238c0
c00178d5:	b9 00 08 00 00       	mov    ecx,0x800
c00178da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00178dc:	31 c0                	xor    eax,eax
c00178de:	5b                   	pop    ebx
c00178df:	5e                   	pop    esi
c00178e0:	5f                   	pop    edi
c00178e1:	c3                   	ret    

c00178e2 <ISO9660::tryMount(LogicalDisk*, int)>:
c00178e2:	53                   	push   ebx
c00178e3:	81 ec 0c 08 00 00    	sub    esp,0x80c
c00178e9:	c7 05 a4 38 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc00238a4,0xdeadbeef
c00178f3:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00178fa:	8d 58 41             	lea    ebx,[eax+0x41]
c00178fd:	0f be db             	movsx  ebx,bl
c0017900:	53                   	push   ebx
c0017901:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017905:	50                   	push   eax
c0017906:	6a 10                	push   0x10
c0017908:	e8 5a ff ff ff       	call   c0017867 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001790d:	83 c4 10             	add    esp,0x10
c0017910:	31 d2                	xor    edx,edx
c0017912:	85 c0                	test   eax,eax
c0017914:	75 33                	jne    c0017949 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017916:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001791b:	75 2c                	jne    c0017949 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001791d:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017922:	75 25                	jne    c0017949 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017924:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017929:	75 1e                	jne    c0017949 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001792b:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017930:	75 17                	jne    c0017949 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017932:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017937:	75 10                	jne    c0017949 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017939:	83 ec 0c             	sub    esp,0xc
c001793c:	53                   	push   ebx
c001793d:	e8 7d ee fe ff       	call   c00067bf <init_percd>
c0017942:	83 c4 10             	add    esp,0x10
c0017945:	40                   	inc    eax
c0017946:	0f 95 c2             	setne  dl
c0017949:	88 d0                	mov    al,dl
c001794b:	81 c4 08 08 00 00    	add    esp,0x808
c0017951:	5b                   	pop    ebx
c0017952:	c3                   	ret    
c0017953:	90                   	nop

c0017954 <ISO9660::ISO9660()>:
c0017954:	83 ec 0c             	sub    esp,0xc
c0017957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001795b:	83 ec 0c             	sub    esp,0xc
c001795e:	50                   	push   eax
c001795f:	e8 12 2e ff ff       	call   c000a776 <Filesystem::Filesystem()>
c0017964:	83 c4 10             	add    esp,0x10
c0017967:	ba 60 ea 01 c0       	mov    edx,0xc001ea60
c001796c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017970:	89 10                	mov    DWORD PTR [eax],edx
c0017972:	e8 4a ef fe ff       	call   c00068c1 <fs_iso9660_init>
c0017977:	90                   	nop
c0017978:	83 c4 0c             	add    esp,0xc
c001797b:	c3                   	ret    

c001797c <SoundCard::beginPlayback()>:
c001797c:	c7 44 24 04 c0 ea 01 c0 	mov    DWORD PTR [esp+0x4],0xc001eac0
c0017984:	e9 42 87 ff ff       	jmp    c00100cb <KePanic(char const*)>
c0017989:	90                   	nop

c001798a <SoundCard::stopPlayback()>:
c001798a:	c7 44 24 04 c0 ea 01 c0 	mov    DWORD PTR [esp+0x4],0xc001eac0
c0017992:	e9 34 87 ff ff       	jmp    c00100cb <KePanic(char const*)>
c0017997:	90                   	nop

c0017998 <SoundCard::SoundCard(char const*)>:
c0017998:	83 ec 1c             	sub    esp,0x1c
c001799b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001799f:	83 ec 08             	sub    esp,0x8
c00179a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179a6:	50                   	push   eax
c00179a7:	e8 80 40 ff ff       	call   c000ba2c <Device::Device(char const*)>
c00179ac:	83 c4 10             	add    esp,0x10
c00179af:	ba 0c eb 01 c0       	mov    edx,0xc001eb0c
c00179b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179b8:	89 10                	mov    DWORD PTR [eax],edx
c00179ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179be:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c00179c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179c9:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c00179d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179d7:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c00179e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179e5:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c00179ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179f3:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00179fd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017a05:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017a0a:	7f 19                	jg     c0017a25 <SoundCard::SoundCard(char const*)+0x8d>
c0017a0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a10:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017a14:	83 c2 54             	add    edx,0x54
c0017a17:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017a1f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017a23:	eb e0                	jmp    c0017a05 <SoundCard::SoundCard(char const*)+0x6d>
c0017a25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a29:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017a30:	90                   	nop
c0017a31:	83 c4 1c             	add    esp,0x1c
c0017a34:	c3                   	ret    
c0017a35:	90                   	nop

c0017a36 <SoundCard::~SoundCard()>:
c0017a36:	83 ec 0c             	sub    esp,0xc
c0017a39:	ba 0c eb 01 c0       	mov    edx,0xc001eb0c
c0017a3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a42:	89 10                	mov    DWORD PTR [eax],edx
c0017a44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a48:	83 ec 0c             	sub    esp,0xc
c0017a4b:	50                   	push   eax
c0017a4c:	e8 45 3d ff ff       	call   c000b796 <Device::~Device()>
c0017a51:	83 c4 10             	add    esp,0x10
c0017a54:	90                   	nop
c0017a55:	83 c4 0c             	add    esp,0xc
c0017a58:	c3                   	ret    
c0017a59:	90                   	nop

c0017a5a <SoundCard::~SoundCard()>:
c0017a5a:	83 ec 0c             	sub    esp,0xc
c0017a5d:	83 ec 0c             	sub    esp,0xc
c0017a60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a64:	e8 cd ff ff ff       	call   c0017a36 <SoundCard::~SoundCard()>
c0017a69:	83 c4 10             	add    esp,0x10
c0017a6c:	83 ec 08             	sub    esp,0x8
c0017a6f:	68 e8 01 00 00       	push   0x1e8
c0017a74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a78:	e8 e1 28 ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c0017a7d:	83 c4 10             	add    esp,0x10
c0017a80:	83 c4 0c             	add    esp,0xc
c0017a83:	c3                   	ret    

c0017a84 <SoundCard::configureRates(int, int, int)>:
c0017a84:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017a88:	31 c0                	xor    eax,eax
c0017a8a:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0017a91:	75 20                	jne    c0017ab3 <SoundCard::configureRates(int, int, int)+0x2f>
c0017a93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017a97:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0017a9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017aa1:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0017aa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017aab:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0017ab1:	b0 01                	mov    al,0x1
c0017ab3:	c3                   	ret    

c0017ab4 <SoundCard::getSamples16(int, short*)>:
c0017ab4:	55                   	push   ebp
c0017ab5:	57                   	push   edi
c0017ab6:	31 ff                	xor    edi,edi
c0017ab8:	56                   	push   esi
c0017ab9:	53                   	push   ebx
c0017aba:	31 db                	xor    ebx,ebx
c0017abc:	83 ec 10             	sub    esp,0x10
c0017abf:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017ac3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017ac7:	8d 04 36             	lea    eax,[esi+esi*1]
c0017aca:	50                   	push   eax
c0017acb:	6a 00                	push   0x0
c0017acd:	55                   	push   ebp
c0017ace:	e8 fd 89 fe ff       	call   c00004d0 <memset>
c0017ad3:	83 c4 10             	add    esp,0x10
c0017ad6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ada:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0017ae1:	85 c0                	test   eax,eax
c0017ae3:	74 1b                	je     c0017b00 <SoundCard::getSamples16(int, short*)+0x4c>
c0017ae5:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017ae9:	75 15                	jne    c0017b00 <SoundCard::getSamples16(int, short*)+0x4c>
c0017aeb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017aef:	55                   	push   ebp
c0017af0:	56                   	push   esi
c0017af1:	50                   	push   eax
c0017af2:	e8 ed 02 00 00       	call   c0017de4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0017af7:	83 c4 10             	add    esp,0x10
c0017afa:	39 c7                	cmp    edi,eax
c0017afc:	7d 02                	jge    c0017b00 <SoundCard::getSamples16(int, short*)+0x4c>
c0017afe:	89 c7                	mov    edi,eax
c0017b00:	43                   	inc    ebx
c0017b01:	83 fb 20             	cmp    ebx,0x20
c0017b04:	75 d0                	jne    c0017ad6 <SoundCard::getSamples16(int, short*)+0x22>
c0017b06:	83 c4 0c             	add    esp,0xc
c0017b09:	89 f8                	mov    eax,edi
c0017b0b:	5b                   	pop    ebx
c0017b0c:	5e                   	pop    esi
c0017b0d:	5f                   	pop    edi
c0017b0e:	5d                   	pop    ebp
c0017b0f:	c3                   	ret    

c0017b10 <SoundCard::getSamples32(int, int*)>:
c0017b10:	55                   	push   ebp
c0017b11:	57                   	push   edi
c0017b12:	31 ff                	xor    edi,edi
c0017b14:	56                   	push   esi
c0017b15:	31 f6                	xor    esi,esi
c0017b17:	53                   	push   ebx
c0017b18:	83 ec 10             	sub    esp,0x10
c0017b1b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b1f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017b23:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017b27:	c1 e0 02             	shl    eax,0x2
c0017b2a:	50                   	push   eax
c0017b2b:	6a 00                	push   0x0
c0017b2d:	55                   	push   ebp
c0017b2e:	e8 9d 89 fe ff       	call   c00004d0 <memset>
c0017b33:	83 c4 10             	add    esp,0x10
c0017b36:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0017b3d:	85 c0                	test   eax,eax
c0017b3f:	74 1b                	je     c0017b5c <SoundCard::getSamples32(int, int*)+0x4c>
c0017b41:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017b45:	75 15                	jne    c0017b5c <SoundCard::getSamples32(int, int*)+0x4c>
c0017b47:	53                   	push   ebx
c0017b48:	55                   	push   ebp
c0017b49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b4d:	50                   	push   eax
c0017b4e:	e8 55 03 00 00       	call   c0017ea8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0017b53:	83 c4 10             	add    esp,0x10
c0017b56:	39 c6                	cmp    esi,eax
c0017b58:	7d 02                	jge    c0017b5c <SoundCard::getSamples32(int, int*)+0x4c>
c0017b5a:	89 c6                	mov    esi,eax
c0017b5c:	47                   	inc    edi
c0017b5d:	83 ff 20             	cmp    edi,0x20
c0017b60:	75 d4                	jne    c0017b36 <SoundCard::getSamples32(int, int*)+0x26>
c0017b62:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0017b68:	85 f6                	test   esi,esi
c0017b6a:	75 0f                	jne    c0017b7b <SoundCard::getSamples32(int, int*)+0x6b>
c0017b6c:	84 c0                	test   al,al
c0017b6e:	74 1b                	je     c0017b8b <SoundCard::getSamples32(int, int*)+0x7b>
c0017b70:	83 ec 0c             	sub    esp,0xc
c0017b73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017b75:	53                   	push   ebx
c0017b76:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0017b79:	eb 0d                	jmp    c0017b88 <SoundCard::getSamples32(int, int*)+0x78>
c0017b7b:	84 c0                	test   al,al
c0017b7d:	75 0c                	jne    c0017b8b <SoundCard::getSamples32(int, int*)+0x7b>
c0017b7f:	83 ec 0c             	sub    esp,0xc
c0017b82:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017b84:	53                   	push   ebx
c0017b85:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017b88:	83 c4 10             	add    esp,0x10
c0017b8b:	83 c4 0c             	add    esp,0xc
c0017b8e:	89 f0                	mov    eax,esi
c0017b90:	5b                   	pop    ebx
c0017b91:	5e                   	pop    esi
c0017b92:	5f                   	pop    edi
c0017b93:	5d                   	pop    ebp
c0017b94:	c3                   	ret    
c0017b95:	90                   	nop

c0017b96 <SoundCard::addChannel(SoundPort*)>:
c0017b96:	83 ec 0c             	sub    esp,0xc
c0017b99:	31 c0                	xor    eax,eax
c0017b9b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017b9f:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0017ba7:	74 1b                	je     c0017bc4 <SoundCard::addChannel(SoundPort*)+0x2e>
c0017ba9:	40                   	inc    eax
c0017baa:	83 f8 20             	cmp    eax,0x20
c0017bad:	75 f0                	jne    c0017b9f <SoundCard::addChannel(SoundPort*)+0x9>
c0017baf:	83 ec 0c             	sub    esp,0xc
c0017bb2:	68 e5 ea 01 c0       	push   0xc001eae5
c0017bb7:	e8 0f 85 ff ff       	call   c00100cb <KePanic(char const*)>
c0017bbc:	83 c4 10             	add    esp,0x10
c0017bbf:	83 c8 ff             	or     eax,0xffffffff
c0017bc2:	eb 0b                	jmp    c0017bcf <SoundCard::addChannel(SoundPort*)+0x39>
c0017bc4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017bc8:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0017bcf:	83 c4 0c             	add    esp,0xc
c0017bd2:	c3                   	ret    
c0017bd3:	90                   	nop

c0017bd4 <SoundCard::removeChannel(int)>:
c0017bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017bd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017bdc:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0017be7:	c3                   	ret    

c0017be8 <SoundPort::SoundPort(int, int, int, int)>:
c0017be8:	83 ec 0c             	sub    esp,0xc
c0017beb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bef:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017bf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bfa:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0017bfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c02:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c06:	89 10                	mov    DWORD PTR [eax],edx
c0017c08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c0c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017c10:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017c13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c17:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c1b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017c1e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0017c23:	75 13                	jne    c0017c38 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0017c25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c29:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c2b:	05 a0 0f 00 00       	add    eax,0xfa0
c0017c30:	01 c0                	add    eax,eax
c0017c32:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017c36:	66 90                	xchg   ax,ax
c0017c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c3c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c40:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0017c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c47:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0017c4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c52:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017c55:	c1 e0 02             	shl    eax,0x2
c0017c58:	83 ec 0c             	sub    esp,0xc
c0017c5b:	50                   	push   eax
c0017c5c:	e8 58 fb fe ff       	call   c00077b9 <malloc>
c0017c61:	83 c4 10             	add    esp,0x10
c0017c64:	89 c2                	mov    edx,eax
c0017c66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c6a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017c6d:	90                   	nop
c0017c6e:	83 c4 0c             	add    esp,0xc
c0017c71:	c3                   	ret    
c0017c72:	66 90                	xchg   ax,ax

c0017c74 <SoundPort::~SoundPort()>:
c0017c74:	83 ec 0c             	sub    esp,0xc
c0017c77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c7b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017c7e:	85 c0                	test   eax,eax
c0017c80:	74 1e                	je     c0017ca0 <SoundPort::~SoundPort()+0x2c>
c0017c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c86:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017c89:	83 ec 0c             	sub    esp,0xc
c0017c8c:	50                   	push   eax
c0017c8d:	e8 37 fb fe ff       	call   c00077c9 <free>
c0017c92:	83 c4 10             	add    esp,0x10
c0017c95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c99:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017ca0:	90                   	nop
c0017ca1:	83 c4 0c             	add    esp,0xc
c0017ca4:	c3                   	ret    
c0017ca5:	90                   	nop
c0017ca6:	66 90                	xchg   ax,ax

c0017ca8 <SoundPort::unpause()>:
c0017ca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cac:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0017cb0:	c3                   	ret    
c0017cb1:	90                   	nop
c0017cb2:	66 90                	xchg   ax,ax

c0017cb4 <SoundPort::pause()>:
c0017cb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cb8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0017cbc:	c3                   	ret    
c0017cbd:	90                   	nop
c0017cbe:	66 90                	xchg   ax,ax

c0017cc0 <SoundPort::getBufferUsed()>:
c0017cc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cc4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017cc7:	c3                   	ret    

c0017cc8 <SoundPort::getBufferSize()>:
c0017cc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ccc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017ccf:	c3                   	ret    

c0017cd0 <SoundPort::buffer16(short*, int)>:
c0017cd0:	55                   	push   ebp
c0017cd1:	57                   	push   edi
c0017cd2:	56                   	push   esi
c0017cd3:	53                   	push   ebx
c0017cd4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017cd8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0017cdc:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0017cdf:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0017ce2:	74 68                	je     c0017d4c <SoundPort::buffer16(short*, int)+0x7c>
c0017ce4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017ce8:	85 c9                	test   ecx,ecx
c0017cea:	7e 60                	jle    c0017d4c <SoundPort::buffer16(short*, int)+0x7c>
c0017cec:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0017cf0:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0017cf3:	c1 e1 0f             	shl    ecx,0xf
c0017cf6:	8d 70 01             	lea    esi,[eax+0x1]
c0017cf9:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0017cfc:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0017cff:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017d02:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017d05:	74 4d                	je     c0017d54 <SoundPort::buffer16(short*, int)+0x84>
c0017d07:	31 f6                	xor    esi,esi
c0017d09:	eb 21                	jmp    c0017d2c <SoundPort::buffer16(short*, int)+0x5c>
c0017d0b:	90                   	nop
c0017d0c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0017d11:	8d 79 01             	lea    edi,[ecx+0x1]
c0017d14:	c1 e3 0f             	shl    ebx,0xf
c0017d17:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0017d1a:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0017d1d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0017d20:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017d23:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017d26:	74 1c                	je     c0017d44 <SoundPort::buffer16(short*, int)+0x74>
c0017d28:	89 c6                	mov    esi,eax
c0017d2a:	66 90                	xchg   ax,ax
c0017d2c:	8d 46 01             	lea    eax,[esi+0x1]
c0017d2f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0017d33:	75 d7                	jne    c0017d0c <SoundPort::buffer16(short*, int)+0x3c>
c0017d35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d39:	8d 76 00             	lea    esi,[esi+0x0]
c0017d3c:	5b                   	pop    ebx
c0017d3d:	5e                   	pop    esi
c0017d3e:	5f                   	pop    edi
c0017d3f:	5d                   	pop    ebp
c0017d40:	c3                   	ret    
c0017d41:	8d 76 00             	lea    esi,[esi+0x0]
c0017d44:	5b                   	pop    ebx
c0017d45:	8d 46 02             	lea    eax,[esi+0x2]
c0017d48:	5e                   	pop    esi
c0017d49:	5f                   	pop    edi
c0017d4a:	5d                   	pop    ebp
c0017d4b:	c3                   	ret    
c0017d4c:	5b                   	pop    ebx
c0017d4d:	31 c0                	xor    eax,eax
c0017d4f:	5e                   	pop    esi
c0017d50:	5f                   	pop    edi
c0017d51:	5d                   	pop    ebp
c0017d52:	c3                   	ret    
c0017d53:	90                   	nop
c0017d54:	b8 01 00 00 00       	mov    eax,0x1
c0017d59:	eb e1                	jmp    c0017d3c <SoundPort::buffer16(short*, int)+0x6c>
c0017d5b:	90                   	nop

c0017d5c <SoundPort::buffer32(int*, int)>:
c0017d5c:	55                   	push   ebp
c0017d5d:	57                   	push   edi
c0017d5e:	56                   	push   esi
c0017d5f:	53                   	push   ebx
c0017d60:	51                   	push   ecx
c0017d61:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017d65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d69:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017d6c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017d70:	89 04 24             	mov    DWORD PTR [esp],eax
c0017d73:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017d76:	74 5c                	je     c0017dd4 <SoundPort::buffer32(int*, int)+0x78>
c0017d78:	85 c0                	test   eax,eax
c0017d7a:	7e 58                	jle    c0017dd4 <SoundPort::buffer32(int*, int)+0x78>
c0017d7c:	8d 71 01             	lea    esi,[ecx+0x1]
c0017d7f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0017d82:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0017d85:	8b 37                	mov    esi,DWORD PTR [edi]
c0017d87:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0017d8a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017d8d:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017d90:	74 4a                	je     c0017ddc <SoundPort::buffer32(int*, int)+0x80>
c0017d92:	31 f6                	xor    esi,esi
c0017d94:	eb 1e                	jmp    c0017db4 <SoundPort::buffer32(int*, int)+0x58>
c0017d96:	66 90                	xchg   ax,ax
c0017d98:	8d 69 01             	lea    ebp,[ecx+0x1]
c0017d9b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0017d9e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0017da1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0017da4:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0017da8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017dab:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017dae:	74 18                	je     c0017dc8 <SoundPort::buffer32(int*, int)+0x6c>
c0017db0:	89 de                	mov    esi,ebx
c0017db2:	66 90                	xchg   ax,ax
c0017db4:	8d 5e 01             	lea    ebx,[esi+0x1]
c0017db7:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0017dba:	75 dc                	jne    c0017d98 <SoundPort::buffer32(int*, int)+0x3c>
c0017dbc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017dbf:	90                   	nop
c0017dc0:	5a                   	pop    edx
c0017dc1:	5b                   	pop    ebx
c0017dc2:	5e                   	pop    esi
c0017dc3:	5f                   	pop    edi
c0017dc4:	5d                   	pop    ebp
c0017dc5:	c3                   	ret    
c0017dc6:	66 90                	xchg   ax,ax
c0017dc8:	5a                   	pop    edx
c0017dc9:	8d 46 02             	lea    eax,[esi+0x2]
c0017dcc:	5b                   	pop    ebx
c0017dcd:	5e                   	pop    esi
c0017dce:	5f                   	pop    edi
c0017dcf:	5d                   	pop    ebp
c0017dd0:	c3                   	ret    
c0017dd1:	8d 76 00             	lea    esi,[esi+0x0]
c0017dd4:	5a                   	pop    edx
c0017dd5:	31 c0                	xor    eax,eax
c0017dd7:	5b                   	pop    ebx
c0017dd8:	5e                   	pop    esi
c0017dd9:	5f                   	pop    edi
c0017dda:	5d                   	pop    ebp
c0017ddb:	c3                   	ret    
c0017ddc:	b8 01 00 00 00       	mov    eax,0x1
c0017de1:	eb dd                	jmp    c0017dc0 <SoundPort::buffer32(int*, int)+0x64>
c0017de3:	90                   	nop

c0017de4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0017de4:	57                   	push   edi
c0017de5:	56                   	push   esi
c0017de6:	53                   	push   ebx
c0017de7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017deb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0017def:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0017df5:	39 03                	cmp    DWORD PTR [ebx],eax
c0017df7:	74 13                	je     c0017e0c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0017df9:	83 ec 0c             	sub    esp,0xc
c0017dfc:	68 38 eb 01 c0       	push   0xc001eb38
c0017e01:	e8 c5 82 ff ff       	call   c00100cb <KePanic(char const*)>
c0017e06:	83 c4 10             	add    esp,0x10
c0017e09:	8d 76 00             	lea    esi,[esi+0x0]
c0017e0c:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0017e12:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0017e15:	74 11                	je     c0017e28 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0017e17:	83 ec 0c             	sub    esp,0xc
c0017e1a:	68 77 eb 01 c0       	push   0xc001eb77
c0017e1f:	e8 a7 82 ff ff       	call   c00100cb <KePanic(char const*)>
c0017e24:	83 c4 10             	add    esp,0x10
c0017e27:	90                   	nop
c0017e28:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0017e2e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0017e31:	74 11                	je     c0017e44 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0017e33:	83 ec 0c             	sub    esp,0xc
c0017e36:	68 77 eb 01 c0       	push   0xc001eb77
c0017e3b:	e8 8b 82 ff ff       	call   c00100cb <KePanic(char const*)>
c0017e40:	83 c4 10             	add    esp,0x10
c0017e43:	90                   	nop
c0017e44:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017e47:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0017e4b:	7e 07                	jle    c0017e54 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0017e4d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017e51:	8d 76 00             	lea    esi,[esi+0x0]
c0017e54:	85 f6                	test   esi,esi
c0017e56:	7e 2c                	jle    c0017e84 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0017e58:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e5c:	8d 3c 36             	lea    edi,[esi+esi*1]
c0017e5f:	31 c9                	xor    ecx,ecx
c0017e61:	01 d7                	add    edi,edx
c0017e63:	90                   	nop
c0017e64:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0017e67:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0017e6a:	85 c0                	test   eax,eax
c0017e6c:	79 06                	jns    c0017e74 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0017e6e:	05 ff 7f 00 00       	add    eax,0x7fff
c0017e73:	90                   	nop
c0017e74:	c1 f8 0f             	sar    eax,0xf
c0017e77:	83 c1 04             	add    ecx,0x4
c0017e7a:	66 01 02             	add    WORD PTR [edx],ax
c0017e7d:	83 c2 02             	add    edx,0x2
c0017e80:	39 d7                	cmp    edi,edx
c0017e82:	75 e0                	jne    c0017e64 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0017e84:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0017e87:	50                   	push   eax
c0017e88:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017e8b:	29 f0                	sub    eax,esi
c0017e8d:	c1 e0 02             	shl    eax,0x2
c0017e90:	50                   	push   eax
c0017e91:	8d 04 b2             	lea    eax,[edx+esi*4]
c0017e94:	50                   	push   eax
c0017e95:	52                   	push   edx
c0017e96:	e8 45 85 fe ff       	call   c00003e0 <memmove>
c0017e9b:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c0017e9e:	83 c4 10             	add    esp,0x10
c0017ea1:	89 f0                	mov    eax,esi
c0017ea3:	5b                   	pop    ebx
c0017ea4:	5e                   	pop    esi
c0017ea5:	5f                   	pop    edi
c0017ea6:	c3                   	ret    
c0017ea7:	90                   	nop

c0017ea8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0017ea8:	57                   	push   edi
c0017ea9:	56                   	push   esi
c0017eaa:	53                   	push   ebx
c0017eab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017eaf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017eb3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017eb7:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0017ebd:	39 06                	cmp    DWORD PTR [esi],eax
c0017ebf:	74 13                	je     c0017ed4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0017ec1:	83 ec 0c             	sub    esp,0xc
c0017ec4:	68 58 eb 01 c0       	push   0xc001eb58
c0017ec9:	e8 fd 81 ff ff       	call   c00100cb <KePanic(char const*)>
c0017ece:	83 c4 10             	add    esp,0x10
c0017ed1:	8d 76 00             	lea    esi,[esi+0x0]
c0017ed4:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0017eda:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0017edd:	74 11                	je     c0017ef0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0017edf:	83 ec 0c             	sub    esp,0xc
c0017ee2:	68 93 eb 01 c0       	push   0xc001eb93
c0017ee7:	e8 df 81 ff ff       	call   c00100cb <KePanic(char const*)>
c0017eec:	83 c4 10             	add    esp,0x10
c0017eef:	90                   	nop
c0017ef0:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0017ef6:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0017ef9:	74 11                	je     c0017f0c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0017efb:	83 ec 0c             	sub    esp,0xc
c0017efe:	68 93 eb 01 c0       	push   0xc001eb93
c0017f03:	e8 c3 81 ff ff       	call   c00100cb <KePanic(char const*)>
c0017f08:	83 c4 10             	add    esp,0x10
c0017f0b:	90                   	nop
c0017f0c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0017f0f:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c0017f13:	7e 07                	jle    c0017f1c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0017f15:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017f19:	8d 76 00             	lea    esi,[esi+0x0]
c0017f1c:	85 ff                	test   edi,edi
c0017f1e:	7e 1c                	jle    c0017f3c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0017f20:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0017f27:	31 c0                	xor    eax,eax
c0017f29:	8d 76 00             	lea    esi,[esi+0x0]
c0017f2c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0017f2f:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0017f32:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0017f35:	83 c0 04             	add    eax,0x4
c0017f38:	39 c1                	cmp    ecx,eax
c0017f3a:	75 f0                	jne    c0017f2c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0017f3c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0017f3f:	50                   	push   eax
c0017f40:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017f43:	29 f8                	sub    eax,edi
c0017f45:	c1 e0 02             	shl    eax,0x2
c0017f48:	50                   	push   eax
c0017f49:	8d 04 ba             	lea    eax,[edx+edi*4]
c0017f4c:	50                   	push   eax
c0017f4d:	52                   	push   edx
c0017f4e:	e8 8d 84 fe ff       	call   c00003e0 <memmove>
c0017f53:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c0017f56:	83 c4 10             	add    esp,0x10
c0017f59:	89 f8                	mov    eax,edi
c0017f5b:	5b                   	pop    ebx
c0017f5c:	5e                   	pop    esi
c0017f5d:	5f                   	pop    edi
c0017f5e:	c3                   	ret    
c0017f5f:	90                   	nop

c0017f60 <PCI::open(int, int, void*)>:
c0017f60:	83 ec 18             	sub    esp,0x18
c0017f63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017f67:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017f6b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0017f71:	8b 10                	mov    edx,DWORD PTR [eax]
c0017f73:	50                   	push   eax
c0017f74:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0017f77:	31 c0                	xor    eax,eax
c0017f79:	83 c4 1c             	add    esp,0x1c
c0017f7c:	c3                   	ret    
c0017f7d:	90                   	nop

c0017f7e <PCI::close(int, int, void*)>:
c0017f7e:	31 c0                	xor    eax,eax
c0017f80:	c3                   	ret    
c0017f81:	90                   	nop

c0017f82 <PCI::PCI()>:
c0017f82:	83 ec 0c             	sub    esp,0xc
c0017f85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f89:	83 ec 08             	sub    esp,0x8
c0017f8c:	68 af eb 01 c0       	push   0xc001ebaf
c0017f91:	50                   	push   eax
c0017f92:	e8 51 32 ff ff       	call   c000b1e8 <Bus::Bus(char const*)>
c0017f97:	83 c4 10             	add    esp,0x10
c0017f9a:	ba 58 ec 01 c0       	mov    edx,0xc001ec58
c0017f9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fa3:	89 10                	mov    DWORD PTR [eax],edx
c0017fa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fa9:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0017fb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fb7:	a3 c0 40 02 c0       	mov    ds:0xc00240c0,eax
c0017fbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fc0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0017fc6:	31 d2                	xor    edx,edx
c0017fc8:	88 c2                	mov    dl,al
c0017fca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fce:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0017fd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fd9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0017fdf:	31 d2                	xor    edx,edx
c0017fe1:	88 c2                	mov    dl,al
c0017fe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fe7:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0017fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ff0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0017ff6:	8d 50 01             	lea    edx,[eax+0x1]
c0017ff9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017ffd:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0018003:	31 d2                	xor    edx,edx
c0018005:	88 c2                	mov    dl,al
c0018007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001800b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001800f:	83 c9 c0             	or     ecx,0xffffffc0
c0018012:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0018016:	90                   	nop
c0018017:	83 c4 0c             	add    esp,0xc
c001801a:	c3                   	ret    
c001801b:	90                   	nop

c001801c <PCI::readBAR8(unsigned int, int)>:
c001801c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018020:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018024:	f6 c2 01             	test   dl,0x1
c0018027:	74 07                	je     c0018030 <PCI::readBAR8(unsigned int, int)+0x14>
c0018029:	83 e2 fc             	and    edx,0xfffffffc
c001802c:	01 c2                	add    edx,eax
c001802e:	ec                   	in     al,dx
c001802f:	c3                   	ret    
c0018030:	83 e2 f0             	and    edx,0xfffffff0
c0018033:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0018036:	c3                   	ret    
c0018037:	90                   	nop

c0018038 <PCI::readBAR16(unsigned int, int)>:
c0018038:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001803c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018040:	f6 c2 01             	test   dl,0x1
c0018043:	74 08                	je     c001804d <PCI::readBAR16(unsigned int, int)+0x15>
c0018045:	83 e2 fc             	and    edx,0xfffffffc
c0018048:	01 c2                	add    edx,eax
c001804a:	66 ed                	in     ax,dx
c001804c:	c3                   	ret    
c001804d:	83 e2 f0             	and    edx,0xfffffff0
c0018050:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0018054:	c3                   	ret    
c0018055:	90                   	nop

c0018056 <PCI::readBAR32(unsigned int, int)>:
c0018056:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001805a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001805e:	f6 c2 01             	test   dl,0x1
c0018061:	74 07                	je     c001806a <PCI::readBAR32(unsigned int, int)+0x14>
c0018063:	83 e2 fc             	and    edx,0xfffffffc
c0018066:	01 c2                	add    edx,eax
c0018068:	ed                   	in     eax,dx
c0018069:	c3                   	ret    
c001806a:	83 e2 f0             	and    edx,0xfffffff0
c001806d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0018070:	c3                   	ret    
c0018071:	90                   	nop

c0018072 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0018072:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018076:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001807a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001807e:	f6 c2 01             	test   dl,0x1
c0018081:	74 07                	je     c001808a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0018083:	83 e2 fc             	and    edx,0xfffffffc
c0018086:	01 ca                	add    edx,ecx
c0018088:	ee                   	out    dx,al
c0018089:	c3                   	ret    
c001808a:	83 e2 f0             	and    edx,0xfffffff0
c001808d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0018090:	c3                   	ret    
c0018091:	90                   	nop

c0018092 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0018092:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018096:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001809a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001809e:	f6 c2 01             	test   dl,0x1
c00180a1:	74 08                	je     c00180ab <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00180a3:	83 e2 fc             	and    edx,0xfffffffc
c00180a6:	01 ca                	add    edx,ecx
c00180a8:	66 ef                	out    dx,ax
c00180aa:	c3                   	ret    
c00180ab:	83 e2 f0             	and    edx,0xfffffff0
c00180ae:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00180b2:	c3                   	ret    
c00180b3:	90                   	nop

c00180b4 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00180b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00180b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00180c0:	f6 c2 01             	test   dl,0x1
c00180c3:	74 07                	je     c00180cc <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00180c5:	83 e2 fc             	and    edx,0xfffffffc
c00180c8:	01 ca                	add    edx,ecx
c00180ca:	ef                   	out    dx,eax
c00180cb:	c3                   	ret    
c00180cc:	83 e2 f0             	and    edx,0xfffffff0
c00180cf:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00180d2:	c3                   	ret    
c00180d3:	90                   	nop

c00180d4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00180d4:	55                   	push   ebp
c00180d5:	57                   	push   edi
c00180d6:	56                   	push   esi
c00180d7:	53                   	push   ebx
c00180d8:	83 ec 0c             	sub    esp,0xc
c00180db:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00180df:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00180e3:	89 f0                	mov    eax,esi
c00180e5:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00180e9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00180ed:	3c 07                	cmp    al,0x7
c00180ef:	76 10                	jbe    c0018101 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00180f1:	83 ec 0c             	sub    esp,0xc
c00180f4:	68 b7 eb 01 c0       	push   0xc001ebb7
c00180f9:	e8 cd 7f ff ff       	call   c00100cb <KePanic(char const*)>
c00180fe:	83 c4 10             	add    esp,0x10
c0018101:	80 fb 0f             	cmp    bl,0xf
c0018104:	76 10                	jbe    c0018116 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0018106:	83 ec 0c             	sub    esp,0xc
c0018109:	68 e7 eb 01 c0       	push   0xc001ebe7
c001810e:	e8 b8 7f ff ff       	call   c00100cb <KePanic(char const*)>
c0018113:	83 c4 10             	add    esp,0x10
c0018116:	8d 04 36             	lea    eax,[esi+esi*1]
c0018119:	ba f8 0c 00 00       	mov    edx,0xcf8
c001811e:	83 c8 f0             	or     eax,0xfffffff0
c0018121:	ee                   	out    dx,al
c0018122:	ba fa 0c 00 00       	mov    edx,0xcfa
c0018127:	89 e8                	mov    eax,ebp
c0018129:	ee                   	out    dx,al
c001812a:	83 c4 0c             	add    esp,0xc
c001812d:	89 d8                	mov    eax,ebx
c001812f:	66 81 e7 fc 00       	and    di,0xfc
c0018134:	5b                   	pop    ebx
c0018135:	c1 e0 08             	shl    eax,0x8
c0018138:	5e                   	pop    esi
c0018139:	09 f8                	or     eax,edi
c001813b:	5f                   	pop    edi
c001813c:	66 0d 00 c0          	or     ax,0xc000
c0018140:	5d                   	pop    ebp
c0018141:	c3                   	ret    

c0018142 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018142:	57                   	push   edi
c0018143:	56                   	push   esi
c0018144:	53                   	push   ebx
c0018145:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018149:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001814d:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0018153:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018157:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001815b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001815f:	83 ff 01             	cmp    edi,0x1
c0018162:	75 3e                	jne    c00181a2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0018164:	89 de                	mov    esi,ebx
c0018166:	0f b6 c0             	movzx  eax,al
c0018169:	81 e6 fc 00 00 00    	and    esi,0xfc
c001816f:	c1 e0 10             	shl    eax,0x10
c0018172:	0f b6 c9             	movzx  ecx,cl
c0018175:	09 f0                	or     eax,esi
c0018177:	c1 e1 08             	shl    ecx,0x8
c001817a:	0f b6 d2             	movzx  edx,dl
c001817d:	09 c8                	or     eax,ecx
c001817f:	c1 e2 0b             	shl    edx,0xb
c0018182:	09 d0                	or     eax,edx
c0018184:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018189:	0d 00 00 00 80       	or     eax,0x80000000
c001818e:	ef                   	out    dx,eax
c001818f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018194:	ed                   	in     eax,dx
c0018195:	83 e3 02             	and    ebx,0x2
c0018198:	0f b6 cb             	movzx  ecx,bl
c001819b:	c1 e1 03             	shl    ecx,0x3
c001819e:	d3 e8                	shr    eax,cl
c00181a0:	eb 43                	jmp    c00181e5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00181a2:	83 ff 02             	cmp    edi,0x2
c00181a5:	75 2c                	jne    c00181d3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c00181a7:	83 ec 0c             	sub    esp,0xc
c00181aa:	0f b6 c9             	movzx  ecx,cl
c00181ad:	0f b6 d2             	movzx  edx,dl
c00181b0:	0f b6 fb             	movzx  edi,bl
c00181b3:	0f b6 c0             	movzx  eax,al
c00181b6:	57                   	push   edi
c00181b7:	51                   	push   ecx
c00181b8:	52                   	push   edx
c00181b9:	50                   	push   eax
c00181ba:	56                   	push   esi
c00181bb:	e8 14 ff ff ff       	call   c00180d4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00181c0:	89 c2                	mov    edx,eax
c00181c2:	ed                   	in     eax,dx
c00181c3:	83 e3 02             	and    ebx,0x2
c00181c6:	83 c4 20             	add    esp,0x20
c00181c9:	0f b6 cb             	movzx  ecx,bl
c00181cc:	c1 e1 03             	shl    ecx,0x3
c00181cf:	d3 e8                	shr    eax,cl
c00181d1:	eb 12                	jmp    c00181e5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00181d3:	83 ec 0c             	sub    esp,0xc
c00181d6:	68 17 ec 01 c0       	push   0xc001ec17
c00181db:	e8 eb 7e ff ff       	call   c00100cb <KePanic(char const*)>
c00181e0:	83 c4 10             	add    esp,0x10
c00181e3:	31 c0                	xor    eax,eax
c00181e5:	5b                   	pop    ebx
c00181e6:	5e                   	pop    esi
c00181e7:	5f                   	pop    edi
c00181e8:	c3                   	ret    
c00181e9:	90                   	nop

c00181ea <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00181ea:	83 ec 18             	sub    esp,0x18
c00181ed:	6a 00                	push   0x0
c00181ef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00181f4:	50                   	push   eax
c00181f5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00181fa:	50                   	push   eax
c00181fb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018200:	50                   	push   eax
c0018201:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018205:	e8 38 ff ff ff       	call   c0018142 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001820a:	83 c4 2c             	add    esp,0x2c
c001820d:	c3                   	ret    

c001820e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001820e:	83 ec 18             	sub    esp,0x18
c0018211:	6a 0e                	push   0xe
c0018213:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018218:	50                   	push   eax
c0018219:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001821e:	50                   	push   eax
c001821f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018224:	50                   	push   eax
c0018225:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018229:	e8 14 ff ff ff       	call   c0018142 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001822e:	83 c4 2c             	add    esp,0x2c
c0018231:	0f b6 c0             	movzx  eax,al
c0018234:	c3                   	ret    
c0018235:	90                   	nop

c0018236 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0018236:	55                   	push   ebp
c0018237:	57                   	push   edi
c0018238:	56                   	push   esi
c0018239:	53                   	push   ebx
c001823a:	83 ec 18             	sub    esp,0x18
c001823d:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0018242:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0018247:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001824c:	6a 0a                	push   0xa
c001824e:	56                   	push   esi
c001824f:	55                   	push   ebp
c0018250:	57                   	push   edi
c0018251:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018255:	e8 e8 fe ff ff       	call   c0018142 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001825a:	83 c4 14             	add    esp,0x14
c001825d:	89 c3                	mov    ebx,eax
c001825f:	6a 0a                	push   0xa
c0018261:	0f b6 db             	movzx  ebx,bl
c0018264:	56                   	push   esi
c0018265:	55                   	push   ebp
c0018266:	57                   	push   edi
c0018267:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001826b:	e8 d2 fe ff ff       	call   c0018142 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018270:	83 c4 2c             	add    esp,0x2c
c0018273:	25 00 ff 00 00       	and    eax,0xff00
c0018278:	09 d8                	or     eax,ebx
c001827a:	5b                   	pop    ebx
c001827b:	5e                   	pop    esi
c001827c:	5f                   	pop    edi
c001827d:	5d                   	pop    ebp
c001827e:	c3                   	ret    
c001827f:	90                   	nop

c0018280 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0018280:	83 ec 18             	sub    esp,0x18
c0018283:	6a 08                	push   0x8
c0018285:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001828a:	50                   	push   eax
c001828b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018290:	50                   	push   eax
c0018291:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018296:	50                   	push   eax
c0018297:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001829b:	e8 a2 fe ff ff       	call   c0018142 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00182a0:	83 c4 2c             	add    esp,0x2c
c00182a3:	0f b6 c4             	movzx  eax,ah
c00182a6:	c3                   	ret    
c00182a7:	90                   	nop

c00182a8 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00182a8:	83 ec 18             	sub    esp,0x18
c00182ab:	6a 08                	push   0x8
c00182ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182b2:	50                   	push   eax
c00182b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182b8:	50                   	push   eax
c00182b9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182be:	50                   	push   eax
c00182bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182c3:	e8 7a fe ff ff       	call   c0018142 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00182c8:	83 c4 2c             	add    esp,0x2c
c00182cb:	c3                   	ret    

c00182cc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00182cc:	83 ec 18             	sub    esp,0x18
c00182cf:	6a 3c                	push   0x3c
c00182d1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182d6:	50                   	push   eax
c00182d7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182dc:	50                   	push   eax
c00182dd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182e2:	50                   	push   eax
c00182e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182e7:	e8 56 fe ff ff       	call   c0018142 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00182ec:	83 c4 2c             	add    esp,0x2c
c00182ef:	c3                   	ret    

c00182f0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00182f0:	83 ec 18             	sub    esp,0x18
c00182f3:	6a 18                	push   0x18
c00182f5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182fa:	50                   	push   eax
c00182fb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018300:	50                   	push   eax
c0018301:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018306:	50                   	push   eax
c0018307:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001830b:	e8 32 fe ff ff       	call   c0018142 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018310:	83 c4 2c             	add    esp,0x2c
c0018313:	0f b6 c4             	movzx  eax,ah
c0018316:	c3                   	ret    
c0018317:	90                   	nop

c0018318 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018318:	55                   	push   ebp
c0018319:	57                   	push   edi
c001831a:	56                   	push   esi
c001831b:	53                   	push   ebx
c001831c:	83 ec 28             	sub    esp,0x28
c001831f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0018323:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0018328:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001832d:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0018332:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0018339:	8d 43 12             	lea    eax,[ebx+0x12]
c001833c:	83 c3 10             	add    ebx,0x10
c001833f:	0f b6 c0             	movzx  eax,al
c0018342:	0f b6 db             	movzx  ebx,bl
c0018345:	50                   	push   eax
c0018346:	51                   	push   ecx
c0018347:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001834b:	57                   	push   edi
c001834c:	55                   	push   ebp
c001834d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018351:	e8 ec fd ff ff       	call   c0018142 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018356:	83 c4 14             	add    esp,0x14
c0018359:	89 c6                	mov    esi,eax
c001835b:	53                   	push   ebx
c001835c:	c1 e6 10             	shl    esi,0x10
c001835f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018363:	51                   	push   ecx
c0018364:	57                   	push   edi
c0018365:	55                   	push   ebp
c0018366:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001836a:	e8 d3 fd ff ff       	call   c0018142 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001836f:	83 c4 3c             	add    esp,0x3c
c0018372:	0f b7 c0             	movzx  eax,ax
c0018375:	5b                   	pop    ebx
c0018376:	09 f0                	or     eax,esi
c0018378:	5e                   	pop    esi
c0018379:	5f                   	pop    edi
c001837a:	5d                   	pop    ebp
c001837b:	c3                   	ret    

c001837c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001837c:	55                   	push   ebp
c001837d:	57                   	push   edi
c001837e:	56                   	push   esi
c001837f:	53                   	push   ebx
c0018380:	83 ec 0c             	sub    esp,0xc
c0018383:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018387:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001838b:	89 f5                	mov    ebp,esi
c001838d:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0018393:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018397:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001839b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001839f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00183a3:	83 f9 01             	cmp    ecx,0x1
c00183a6:	75 5d                	jne    c0018405 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c00183a8:	0f b6 c8             	movzx  ecx,al
c00183ab:	0f b6 d2             	movzx  edx,dl
c00183ae:	c1 e1 10             	shl    ecx,0x10
c00183b1:	c1 e2 0b             	shl    edx,0xb
c00183b4:	89 f0                	mov    eax,esi
c00183b6:	25 fc 00 00 00       	and    eax,0xfc
c00183bb:	09 c1                	or     ecx,eax
c00183bd:	89 e8                	mov    eax,ebp
c00183bf:	0f b6 c0             	movzx  eax,al
c00183c2:	c1 e0 08             	shl    eax,0x8
c00183c5:	09 c1                	or     ecx,eax
c00183c7:	09 d1                	or     ecx,edx
c00183c9:	ba f8 0c 00 00       	mov    edx,0xcf8
c00183ce:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00183d4:	89 c8                	mov    eax,ecx
c00183d6:	ef                   	out    dx,eax
c00183d7:	ba fc 0c 00 00       	mov    edx,0xcfc
c00183dc:	ed                   	in     eax,dx
c00183dd:	0f b7 db             	movzx  ebx,bx
c00183e0:	83 e6 02             	and    esi,0x2
c00183e3:	74 0a                	je     c00183ef <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00183e5:	0f b7 d0             	movzx  edx,ax
c00183e8:	c1 e3 10             	shl    ebx,0x10
c00183eb:	09 d3                	or     ebx,edx
c00183ed:	eb 05                	jmp    c00183f4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00183ef:	66 31 c0             	xor    ax,ax
c00183f2:	09 c3                	or     ebx,eax
c00183f4:	ba f8 0c 00 00       	mov    edx,0xcf8
c00183f9:	89 c8                	mov    eax,ecx
c00183fb:	ef                   	out    dx,eax
c00183fc:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018401:	89 d8                	mov    eax,ebx
c0018403:	eb 41                	jmp    c0018446 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018405:	83 f9 02             	cmp    ecx,0x2
c0018408:	75 45                	jne    c001844f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001840a:	83 ec 0c             	sub    esp,0xc
c001840d:	0f b6 d2             	movzx  edx,dl
c0018410:	89 f1                	mov    ecx,esi
c0018412:	0f b6 c0             	movzx  eax,al
c0018415:	0f b6 f1             	movzx  esi,cl
c0018418:	89 e9                	mov    ecx,ebp
c001841a:	56                   	push   esi
c001841b:	0f b6 c9             	movzx  ecx,cl
c001841e:	51                   	push   ecx
c001841f:	52                   	push   edx
c0018420:	50                   	push   eax
c0018421:	57                   	push   edi
c0018422:	e8 ad fc ff ff       	call   c00180d4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018427:	89 c2                	mov    edx,eax
c0018429:	ed                   	in     eax,dx
c001842a:	83 c4 20             	add    esp,0x20
c001842d:	0f b7 db             	movzx  ebx,bx
c0018430:	f6 c2 02             	test   dl,0x2
c0018433:	74 0c                	je     c0018441 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0018435:	0f b7 c8             	movzx  ecx,ax
c0018438:	89 d8                	mov    eax,ebx
c001843a:	c1 e0 10             	shl    eax,0x10
c001843d:	09 c8                	or     eax,ecx
c001843f:	eb 05                	jmp    c0018446 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018441:	66 31 c0             	xor    ax,ax
c0018444:	09 d8                	or     eax,ebx
c0018446:	ef                   	out    dx,eax
c0018447:	83 c4 0c             	add    esp,0xc
c001844a:	5b                   	pop    ebx
c001844b:	5e                   	pop    esi
c001844c:	5f                   	pop    edi
c001844d:	5d                   	pop    ebp
c001844e:	c3                   	ret    
c001844f:	c7 44 24 20 17 ec 01 c0 	mov    DWORD PTR [esp+0x20],0xc001ec17
c0018457:	83 c4 0c             	add    esp,0xc
c001845a:	5b                   	pop    ebx
c001845b:	5e                   	pop    esi
c001845c:	5f                   	pop    edi
c001845d:	5d                   	pop    ebp
c001845e:	e9 68 7c ff ff       	jmp    c00100cb <KePanic(char const*)>
c0018463:	90                   	nop

c0018464 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0018464:	55                   	push   ebp
c0018465:	57                   	push   edi
c0018466:	56                   	push   esi
c0018467:	53                   	push   ebx
c0018468:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001846e:	80 3d cc 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240cc,0x0
c0018475:	0f 85 84 00 00 00    	jne    c00184ff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c001847b:	83 ec 0c             	sub    esp,0xc
c001847e:	68 14 01 00 00       	push   0x114
c0018483:	e8 31 f3 fe ff       	call   c00077b9 <malloc>
c0018488:	83 c4 0c             	add    esp,0xc
c001848b:	89 c3                	mov    ebx,eax
c001848d:	ff 35 10 37 02 c0    	push   DWORD PTR ds:0xc0023710
c0018493:	68 1d ec 01 c0       	push   0xc001ec1d
c0018498:	50                   	push   eax
c0018499:	e8 2c 25 ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c001849e:	5a                   	pop    edx
c001849f:	59                   	pop    ecx
c00184a0:	6a 01                	push   0x1
c00184a2:	53                   	push   ebx
c00184a3:	e8 e2 25 ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c00184a8:	83 c4 0c             	add    esp,0xc
c00184ab:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00184af:	50                   	push   eax
c00184b0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00184b4:	50                   	push   eax
c00184b5:	53                   	push   ebx
c00184b6:	e8 7b 28 ff ff       	call   c000ad36 <File::stat(unsigned long long*, bool*)>
c00184bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184bf:	40                   	inc    eax
c00184c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00184c3:	e8 f1 f2 fe ff       	call   c00077b9 <malloc>
c00184c8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00184cc:	a3 c8 40 02 c0       	mov    ds:0xc00240c8,eax
c00184d1:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c00184d5:	5e                   	pop    esi
c00184d6:	8b 13                	mov    edx,DWORD PTR [ebx]
c00184d8:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00184dc:	51                   	push   ecx
c00184dd:	50                   	push   eax
c00184de:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00184e2:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00184e6:	53                   	push   ebx
c00184e7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00184ea:	83 c4 14             	add    esp,0x14
c00184ed:	53                   	push   ebx
c00184ee:	e8 f5 25 ff ff       	call   c000aae8 <File::close()>
c00184f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184f7:	83 c4 10             	add    esp,0x10
c00184fa:	a3 c4 40 02 c0       	mov    ds:0xc00240c4,eax
c00184ff:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c0018504:	8b 15 c8 40 02 c0    	mov    edx,DWORD PTR ds:0xc00240c8
c001850a:	89 04 24             	mov    DWORD PTR [esp],eax
c001850d:	31 ff                	xor    edi,edi
c001850f:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018517:	31 f6                	xor    esi,esi
c0018519:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001851e:	31 db                	xor    ebx,ebx
c0018520:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018528:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001852d:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018534:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018538:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c001853f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018543:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018546:	0f 8e 6b 01 00 00    	jle    c00186b7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c001854c:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001854f:	d4 40                	aam    0x40
c0018551:	d5 39                	aad    0x39
c0018553:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018557:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c001855b:	d4 40                	aam    0x40
c001855d:	d5 39                	aad    0x39
c001855f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018563:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018567:	d4 40                	aam    0x40
c0018569:	d5 39                	aad    0x39
c001856b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001856f:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018573:	d4 40                	aam    0x40
c0018575:	d5 39                	aad    0x39
c0018577:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001857b:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c001857f:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018583:	3c 56                	cmp    al,0x56
c0018585:	74 45                	je     c00185cc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018587:	d4 40                	aam    0x40
c0018589:	d5 39                	aad    0x39
c001858b:	8d 48 d0             	lea    ecx,[eax-0x30]
c001858e:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018592:	0f b6 c9             	movzx  ecx,cl
c0018595:	c1 e1 04             	shl    ecx,0x4
c0018598:	d4 40                	aam    0x40
c001859a:	d5 39                	aad    0x39
c001859c:	8d 58 d0             	lea    ebx,[eax-0x30]
c001859f:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c00185a3:	0f b6 db             	movzx  ebx,bl
c00185a6:	09 cb                	or     ebx,ecx
c00185a8:	c1 e3 04             	shl    ebx,0x4
c00185ab:	d4 40                	aam    0x40
c00185ad:	d5 39                	aad    0x39
c00185af:	8d 48 d0             	lea    ecx,[eax-0x30]
c00185b2:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c00185b6:	0f b6 c9             	movzx  ecx,cl
c00185b9:	09 cb                	or     ebx,ecx
c00185bb:	c1 e3 04             	shl    ebx,0x4
c00185be:	89 d9                	mov    ecx,ebx
c00185c0:	d4 40                	aam    0x40
c00185c2:	d5 39                	aad    0x39
c00185c4:	8d 58 d0             	lea    ebx,[eax-0x30]
c00185c7:	0f b6 db             	movzx  ebx,bl
c00185ca:	09 cb                	or     ebx,ecx
c00185cc:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c00185d0:	80 f9 44             	cmp    cl,0x44
c00185d3:	74 47                	je     c001861c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c00185d5:	88 c8                	mov    al,cl
c00185d7:	d4 40                	aam    0x40
c00185d9:	d5 39                	aad    0x39
c00185db:	83 e8 30             	sub    eax,0x30
c00185de:	0f b6 e8             	movzx  ebp,al
c00185e1:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c00185e5:	c1 e5 04             	shl    ebp,0x4
c00185e8:	d4 40                	aam    0x40
c00185ea:	d5 39                	aad    0x39
c00185ec:	83 e8 30             	sub    eax,0x30
c00185ef:	0f b6 f0             	movzx  esi,al
c00185f2:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c00185f6:	09 ee                	or     esi,ebp
c00185f8:	c1 e6 04             	shl    esi,0x4
c00185fb:	d4 40                	aam    0x40
c00185fd:	d5 39                	aad    0x39
c00185ff:	83 e8 30             	sub    eax,0x30
c0018602:	0f b6 e8             	movzx  ebp,al
c0018605:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018609:	09 ee                	or     esi,ebp
c001860b:	c1 e6 04             	shl    esi,0x4
c001860e:	89 f5                	mov    ebp,esi
c0018610:	d4 40                	aam    0x40
c0018612:	d5 39                	aad    0x39
c0018614:	83 e8 30             	sub    eax,0x30
c0018617:	0f b6 f0             	movzx  esi,al
c001861a:	09 ee                	or     esi,ebp
c001861c:	83 c7 10             	add    edi,0x10
c001861f:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018623:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018626:	3c 0a                	cmp    al,0xa
c0018628:	74 09                	je     c0018633 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c001862a:	45                   	inc    ebp
c001862b:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001862e:	75 16                	jne    c0018646 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018630:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018633:	3c 0a                	cmp    al,0xa
c0018635:	0f 94 c0             	sete   al
c0018638:	0f b6 c0             	movzx  eax,al
c001863b:	01 c7                	add    edi,eax
c001863d:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018642:	75 0c                	jne    c0018650 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018644:	eb 15                	jmp    c001865b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018646:	47                   	inc    edi
c0018647:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c001864a:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001864e:	eb d3                	jmp    c0018623 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018650:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018655:	0f 85 e8 fe ff ff    	jne    c0018543 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001865b:	80 f9 44             	cmp    cl,0x44
c001865e:	74 0b                	je     c001866b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018660:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018665:	0f 85 d8 fe ff ff    	jne    c0018543 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001866b:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001866f:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018673:	c1 e1 04             	shl    ecx,0x4
c0018676:	83 e8 30             	sub    eax,0x30
c0018679:	09 c8                	or     eax,ecx
c001867b:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c001867f:	0f 85 be fe ff ff    	jne    c0018543 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018685:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018689:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001868d:	c1 e1 04             	shl    ecx,0x4
c0018690:	83 e8 30             	sub    eax,0x30
c0018693:	09 c8                	or     eax,ecx
c0018695:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018699:	0f 85 a4 fe ff ff    	jne    c0018543 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001869f:	50                   	push   eax
c00186a0:	50                   	push   eax
c00186a1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00186a5:	50                   	push   eax
c00186a6:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c00186ad:	e8 4e 7f fe ff       	call   c0000600 <strcpy>
c00186b2:	83 c4 10             	add    esp,0x10
c00186b5:	eb 15                	jmp    c00186cc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c00186b7:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00186be:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c00186c9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00186cc:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00186d3:	81 c4 2c 01 00 00    	add    esp,0x12c
c00186d9:	5b                   	pop    ebx
c00186da:	5e                   	pop    esi
c00186db:	5f                   	pop    edi
c00186dc:	5d                   	pop    ebp
c00186dd:	c3                   	ret    

c00186de <PCI::checkBus(unsigned char)>:
c00186de:	56                   	push   esi
c00186df:	53                   	push   ebx
c00186e0:	31 f6                	xor    esi,esi
c00186e2:	51                   	push   ecx
c00186e3:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c00186e7:	0f b6 c3             	movzx  eax,bl
c00186ea:	52                   	push   edx
c00186eb:	56                   	push   esi
c00186ec:	46                   	inc    esi
c00186ed:	50                   	push   eax
c00186ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00186f2:	e8 f3 02 00 00       	call   c00189ea <PCI::checkDevice(unsigned char, unsigned char)>
c00186f7:	83 c4 10             	add    esp,0x10
c00186fa:	83 fe 20             	cmp    esi,0x20
c00186fd:	75 e8                	jne    c00186e7 <PCI::checkBus(unsigned char)+0x9>
c00186ff:	58                   	pop    eax
c0018700:	5b                   	pop    ebx
c0018701:	5e                   	pop    esi
c0018702:	c3                   	ret    
c0018703:	90                   	nop

c0018704 <PCI::foundDevice(PCIDeviceInfo)>:
c0018704:	55                   	push   ebp
c0018705:	57                   	push   edi
c0018706:	56                   	push   esi
c0018707:	53                   	push   ebx
c0018708:	83 ec 1c             	sub    esp,0x1c
c001870b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001870f:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018715:	0f 84 52 01 00 00    	je     c001886d <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001871b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001871f:	66 81 f9 06 04       	cmp    cx,0x406
c0018724:	75 2c                	jne    c0018752 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018726:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001872b:	50                   	push   eax
c001872c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018731:	50                   	push   eax
c0018732:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018737:	50                   	push   eax
c0018738:	56                   	push   esi
c0018739:	e8 b2 fb ff ff       	call   c00182f0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001873e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018742:	0f b6 c0             	movzx  eax,al
c0018745:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018749:	83 c4 2c             	add    esp,0x2c
c001874c:	5b                   	pop    ebx
c001874d:	5e                   	pop    esi
c001874e:	5f                   	pop    edi
c001874f:	5d                   	pop    ebp
c0018750:	eb 8c                	jmp    c00186de <PCI::checkBus(unsigned char)>
c0018752:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018756:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001875c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018760:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018764:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018768:	88 d3                	mov    bl,dl
c001876a:	85 c0                	test   eax,eax
c001876c:	74 33                	je     c00187a1 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001876e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018771:	85 d2                	test   edx,edx
c0018773:	74 28                	je     c001879d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018775:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001877b:	31 ef                	xor    edi,ebp
c001877d:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018783:	75 18                	jne    c001879d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018785:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018789:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001878f:	75 0c                	jne    c001879d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018791:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018797:	0f 84 d0 00 00 00    	je     c001886d <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001879d:	8b 00                	mov    eax,DWORD PTR [eax]
c001879f:	eb c9                	jmp    c001876a <PCI::foundDevice(PCIDeviceInfo)+0x66>
c00187a1:	66 81 f9 01 06       	cmp    cx,0x601
c00187a6:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00187aa:	75 19                	jne    c00187c5 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c00187ac:	83 ec 0c             	sub    esp,0xc
c00187af:	68 64 01 00 00       	push   0x164
c00187b4:	e8 00 f0 fe ff       	call   c00077b9 <malloc>
c00187b9:	89 c5                	mov    ebp,eax
c00187bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00187be:	e8 47 0e 00 00       	call   c001960a <SATABus::SATABus()>
c00187c3:	eb 1e                	jmp    c00187e3 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c00187c5:	66 81 f9 01 01       	cmp    cx,0x101
c00187ca:	75 60                	jne    c001882c <PCI::foundDevice(PCIDeviceInfo)+0x128>
c00187cc:	83 ec 0c             	sub    esp,0xc
c00187cf:	68 70 02 00 00       	push   0x270
c00187d4:	e8 e0 ef fe ff       	call   c00077b9 <malloc>
c00187d9:	89 c5                	mov    ebp,eax
c00187db:	89 04 24             	mov    DWORD PTR [esp],eax
c00187de:	e8 cb 02 00 00       	call   c0018aae <IDE::IDE()>
c00187e3:	58                   	pop    eax
c00187e4:	5a                   	pop    edx
c00187e5:	55                   	push   ebp
c00187e6:	56                   	push   esi
c00187e7:	e8 a8 30 ff ff       	call   c000b894 <Device::addChild(Device*)>
c00187ec:	83 ec 1c             	sub    esp,0x1c
c00187ef:	b9 09 00 00 00       	mov    ecx,0x9
c00187f4:	fc                   	cld    
c00187f5:	89 e7                	mov    edi,esp
c00187f7:	89 de                	mov    esi,ebx
c00187f9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00187fb:	55                   	push   ebp
c00187fc:	e8 d9 2f ff ff       	call   c000b7da <Device::preOpenPCI(PCIDeviceInfo)>
c0018801:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018804:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018808:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018810:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018818:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018820:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018823:	83 c4 4c             	add    esp,0x4c
c0018826:	5b                   	pop    ebx
c0018827:	5e                   	pop    esi
c0018828:	5f                   	pop    edi
c0018829:	5d                   	pop    ebp
c001882a:	ff e0                	jmp    eax
c001882c:	83 ec 0c             	sub    esp,0xc
c001882f:	68 58 01 00 00       	push   0x158
c0018834:	e8 80 ef fe ff       	call   c00077b9 <malloc>
c0018839:	89 c5                	mov    ebp,eax
c001883b:	58                   	pop    eax
c001883c:	5a                   	pop    edx
c001883d:	68 36 ec 01 c0       	push   0xc001ec36
c0018842:	55                   	push   ebp
c0018843:	e8 ea 32 ff ff       	call   c000bb32 <DriverlessDevice::DriverlessDevice(char const*)>
c0018848:	59                   	pop    ecx
c0018849:	5f                   	pop    edi
c001884a:	55                   	push   ebp
c001884b:	56                   	push   esi
c001884c:	e8 43 30 ff ff       	call   c000b894 <Device::addChild(Device*)>
c0018851:	b9 09 00 00 00       	mov    ecx,0x9
c0018856:	fc                   	cld    
c0018857:	89 df                	mov    edi,ebx
c0018859:	89 de                	mov    esi,ebx
c001885b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001885d:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018861:	83 c4 2c             	add    esp,0x2c
c0018864:	5b                   	pop    ebx
c0018865:	5e                   	pop    esi
c0018866:	5f                   	pop    edi
c0018867:	5d                   	pop    ebp
c0018868:	e9 6d 2f ff ff       	jmp    c000b7da <Device::preOpenPCI(PCIDeviceInfo)>
c001886d:	83 c4 1c             	add    esp,0x1c
c0018870:	5b                   	pop    ebx
c0018871:	5e                   	pop    esi
c0018872:	5f                   	pop    edi
c0018873:	5d                   	pop    ebp
c0018874:	c3                   	ret    
c0018875:	90                   	nop

c0018876 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018876:	55                   	push   ebp
c0018877:	57                   	push   edi
c0018878:	56                   	push   esi
c0018879:	53                   	push   ebx
c001887a:	83 ec 68             	sub    esp,0x68
c001887d:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018881:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018888:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001888c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018893:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018898:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001889c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00188a3:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c00188a8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00188ac:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00188b1:	6a 0c                	push   0xc
c00188b3:	57                   	push   edi
c00188b4:	53                   	push   ebx
c00188b5:	56                   	push   esi
c00188b6:	55                   	push   ebp
c00188b7:	e8 86 f8 ff ff       	call   c0018142 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188bc:	83 c4 20             	add    esp,0x20
c00188bf:	57                   	push   edi
c00188c0:	53                   	push   ebx
c00188c1:	56                   	push   esi
c00188c2:	55                   	push   ebp
c00188c3:	e8 6e f9 ff ff       	call   c0018236 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c00188c8:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c00188cd:	57                   	push   edi
c00188ce:	53                   	push   ebx
c00188cf:	56                   	push   esi
c00188d0:	55                   	push   ebp
c00188d1:	e8 f6 f9 ff ff       	call   c00182cc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c00188d6:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00188da:	83 c4 14             	add    esp,0x14
c00188dd:	6a 3c                	push   0x3c
c00188df:	57                   	push   edi
c00188e0:	53                   	push   ebx
c00188e1:	56                   	push   esi
c00188e2:	55                   	push   ebp
c00188e3:	e8 5a f8 ff ff       	call   c0018142 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188e8:	0f b6 c4             	movzx  eax,ah
c00188eb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00188ef:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c00188f3:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c00188f7:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c00188fc:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018902:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018908:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001890c:	83 c4 20             	add    esp,0x20
c001890f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018914:	74 30                	je     c0018946 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018916:	31 c0                	xor    eax,eax
c0018918:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001891c:	7e 28                	jle    c0018946 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001891e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018926:	39 cb                	cmp    ebx,ecx
c0018928:	75 19                	jne    c0018943 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001892a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018932:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018936:	75 0b                	jne    c0018943 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018938:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001893f:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018943:	40                   	inc    eax
c0018944:	eb d2                	jmp    c0018918 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018946:	31 d2                	xor    edx,edx
c0018948:	83 ec 0c             	sub    esp,0xc
c001894b:	57                   	push   edi
c001894c:	53                   	push   ebx
c001894d:	56                   	push   esi
c001894e:	52                   	push   edx
c001894f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018953:	55                   	push   ebp
c0018954:	e8 bf f9 ff ff       	call   c0018318 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018959:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001895d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018961:	42                   	inc    edx
c0018962:	83 c4 20             	add    esp,0x20
c0018965:	83 fa 06             	cmp    edx,0x6
c0018968:	75 de                	jne    c0018948 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001896a:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001896f:	83 ec 0c             	sub    esp,0xc
c0018972:	86 e0                	xchg   al,ah
c0018974:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018979:	6a 02                	push   0x2
c001897b:	57                   	push   edi
c001897c:	53                   	push   ebx
c001897d:	56                   	push   esi
c001897e:	55                   	push   ebp
c001897f:	e8 be f7 ff ff       	call   c0018142 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018984:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018989:	83 c4 20             	add    esp,0x20
c001898c:	57                   	push   edi
c001898d:	53                   	push   ebx
c001898e:	56                   	push   esi
c001898f:	55                   	push   ebp
c0018990:	e8 eb f8 ff ff       	call   c0018280 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018995:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018999:	57                   	push   edi
c001899a:	53                   	push   ebx
c001899b:	56                   	push   esi
c001899c:	55                   	push   ebp
c001899d:	e8 48 f8 ff ff       	call   c00181ea <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00189a2:	b9 09 00 00 00       	mov    ecx,0x9
c00189a7:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c00189ac:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c00189b0:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c00189b4:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c00189b8:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c00189bc:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c00189c0:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c00189c4:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c00189c8:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c00189cc:	83 ec 0c             	sub    esp,0xc
c00189cf:	fc                   	cld    
c00189d0:	89 e7                	mov    edi,esp
c00189d2:	8d 74 24 58          	lea    esi,[esp+0x58]
c00189d6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00189d8:	55                   	push   ebp
c00189d9:	e8 26 fd ff ff       	call   c0018704 <PCI::foundDevice(PCIDeviceInfo)>
c00189de:	81 c4 8c 00 00 00    	add    esp,0x8c
c00189e4:	5b                   	pop    ebx
c00189e5:	5e                   	pop    esi
c00189e6:	5f                   	pop    edi
c00189e7:	5d                   	pop    ebp
c00189e8:	c3                   	ret    
c00189e9:	90                   	nop

c00189ea <PCI::checkDevice(unsigned char, unsigned char)>:
c00189ea:	55                   	push   ebp
c00189eb:	57                   	push   edi
c00189ec:	56                   	push   esi
c00189ed:	53                   	push   ebx
c00189ee:	83 ec 0c             	sub    esp,0xc
c00189f1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00189f5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00189fa:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00189ff:	6a 00                	push   0x0
c0018a01:	56                   	push   esi
c0018a02:	57                   	push   edi
c0018a03:	55                   	push   ebp
c0018a04:	e8 e1 f7 ff ff       	call   c00181ea <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018a09:	6a 00                	push   0x0
c0018a0b:	56                   	push   esi
c0018a0c:	57                   	push   edi
c0018a0d:	55                   	push   ebp
c0018a0e:	e8 63 fe ff ff       	call   c0018876 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018a13:	83 c4 20             	add    esp,0x20
c0018a16:	6a 00                	push   0x0
c0018a18:	56                   	push   esi
c0018a19:	57                   	push   edi
c0018a1a:	55                   	push   ebp
c0018a1b:	e8 ee f7 ff ff       	call   c001820e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018a20:	83 c4 10             	add    esp,0x10
c0018a23:	84 c0                	test   al,al
c0018a25:	79 27                	jns    c0018a4e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018a27:	bb 01 00 00 00       	mov    ebx,0x1
c0018a2c:	53                   	push   ebx
c0018a2d:	56                   	push   esi
c0018a2e:	57                   	push   edi
c0018a2f:	55                   	push   ebp
c0018a30:	e8 b5 f7 ff ff       	call   c00181ea <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018a35:	83 c4 10             	add    esp,0x10
c0018a38:	66 40                	inc    ax
c0018a3a:	74 0c                	je     c0018a48 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018a3c:	53                   	push   ebx
c0018a3d:	56                   	push   esi
c0018a3e:	57                   	push   edi
c0018a3f:	55                   	push   ebp
c0018a40:	e8 31 fe ff ff       	call   c0018876 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018a45:	83 c4 10             	add    esp,0x10
c0018a48:	43                   	inc    ebx
c0018a49:	83 fb 08             	cmp    ebx,0x8
c0018a4c:	75 de                	jne    c0018a2c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0018a4e:	83 c4 0c             	add    esp,0xc
c0018a51:	5b                   	pop    ebx
c0018a52:	5e                   	pop    esi
c0018a53:	5f                   	pop    edi
c0018a54:	5d                   	pop    ebp
c0018a55:	c3                   	ret    

c0018a56 <PCI::detect()>:
c0018a56:	56                   	push   esi
c0018a57:	53                   	push   ebx
c0018a58:	53                   	push   ebx
c0018a59:	31 db                	xor    ebx,ebx
c0018a5b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018a5f:	6a 00                	push   0x0
c0018a61:	6a 00                	push   0x0
c0018a63:	6a 00                	push   0x0
c0018a65:	56                   	push   esi
c0018a66:	e8 a3 f7 ff ff       	call   c001820e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018a6b:	83 c4 10             	add    esp,0x10
c0018a6e:	a8 80                	test   al,0x80
c0018a70:	75 21                	jne    c0018a93 <PCI::detect()+0x3d>
c0018a72:	51                   	push   ecx
c0018a73:	51                   	push   ecx
c0018a74:	6a 00                	push   0x0
c0018a76:	56                   	push   esi
c0018a77:	e8 62 fc ff ff       	call   c00186de <PCI::checkBus(unsigned char)>
c0018a7c:	83 c4 10             	add    esp,0x10
c0018a7f:	eb 24                	jmp    c0018aa5 <PCI::detect()+0x4f>
c0018a81:	52                   	push   edx
c0018a82:	52                   	push   edx
c0018a83:	53                   	push   ebx
c0018a84:	43                   	inc    ebx
c0018a85:	56                   	push   esi
c0018a86:	e8 53 fc ff ff       	call   c00186de <PCI::checkBus(unsigned char)>
c0018a8b:	83 c4 10             	add    esp,0x10
c0018a8e:	83 fb 08             	cmp    ebx,0x8
c0018a91:	74 12                	je     c0018aa5 <PCI::detect()+0x4f>
c0018a93:	53                   	push   ebx
c0018a94:	6a 00                	push   0x0
c0018a96:	6a 00                	push   0x0
c0018a98:	56                   	push   esi
c0018a99:	e8 4c f7 ff ff       	call   c00181ea <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018a9e:	83 c4 10             	add    esp,0x10
c0018aa1:	66 40                	inc    ax
c0018aa3:	74 dc                	je     c0018a81 <PCI::detect()+0x2b>
c0018aa5:	58                   	pop    eax
c0018aa6:	5b                   	pop    ebx
c0018aa7:	5e                   	pop    esi
c0018aa8:	c3                   	ret    
c0018aa9:	90                   	nop

c0018aaa <IDE::close(int, int, void*)>:
c0018aaa:	83 c8 ff             	or     eax,0xffffffff
c0018aad:	c3                   	ret    

c0018aae <IDE::IDE()>:
c0018aae:	83 ec 0c             	sub    esp,0xc
c0018ab1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ab5:	83 ec 08             	sub    esp,0x8
c0018ab8:	68 7c ec 01 c0       	push   0xc001ec7c
c0018abd:	50                   	push   eax
c0018abe:	e8 15 31 ff ff       	call   c000bbd8 <HardDiskController::HardDiskController(char const*)>
c0018ac3:	83 c4 10             	add    esp,0x10
c0018ac6:	ba 0c ed 01 c0       	mov    edx,0xc001ed0c
c0018acb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018acf:	89 10                	mov    DWORD PTR [eax],edx
c0018ad1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ad5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018adc:	90                   	nop
c0018add:	83 c4 0c             	add    esp,0xc
c0018ae0:	c3                   	ret    
c0018ae1:	90                   	nop

c0018ae2 <IDE::prepareInterrupt(unsigned char)>:
c0018ae2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018ae7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018aeb:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0018af3:	c3                   	ret    

c0018af4 <selectDrive(unsigned char, unsigned char)>:
c0018af4:	c3                   	ret    
c0018af5:	90                   	nop

c0018af6 <IDE::getBase(unsigned char)>:
c0018af6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0018afb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018aff:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0018b07:	c3                   	ret    

c0018b08 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0018b08:	55                   	push   ebp
c0018b09:	57                   	push   edi
c0018b0a:	56                   	push   esi
c0018b0b:	53                   	push   ebx
c0018b0c:	83 ec 1c             	sub    esp,0x1c
c0018b0f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018b13:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018b17:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0018b1a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018b22:	80 f9 03             	cmp    cl,0x3
c0018b25:	77 51                	ja     c0018b78 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0018b27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018b2b:	0f b6 f2             	movzx  esi,dl
c0018b2e:	0f b6 db             	movzx  ebx,bl
c0018b31:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018b34:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0018b38:	83 ca 80             	or     edx,0xffffff80
c0018b3b:	0f b6 d2             	movzx  edx,dl
c0018b3e:	52                   	push   edx
c0018b3f:	6a 0c                	push   0xc
c0018b41:	56                   	push   esi
c0018b42:	57                   	push   edi
c0018b43:	e8 c0 ff ff ff       	call   c0018b08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018b48:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0018b4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018b51:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0018b55:	ee                   	out    dx,al
c0018b56:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0018b5b:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0018b5f:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0018b63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018b67:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0018b6f:	83 c4 2c             	add    esp,0x2c
c0018b72:	5b                   	pop    ebx
c0018b73:	5e                   	pop    esi
c0018b74:	5f                   	pop    edi
c0018b75:	5d                   	pop    ebp
c0018b76:	eb 90                	jmp    c0018b08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018b78:	80 fb 07             	cmp    bl,0x7
c0018b7b:	77 12                	ja     c0018b8f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0018b7d:	0f b6 d2             	movzx  edx,dl
c0018b80:	0f b6 db             	movzx  ebx,bl
c0018b83:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0018b8b:	89 da                	mov    edx,ebx
c0018b8d:	eb 2f                	jmp    c0018bbe <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0018b8f:	80 fb 0d             	cmp    bl,0xd
c0018b92:	77 13                	ja     c0018ba7 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0018b94:	0f b6 d2             	movzx  edx,dl
c0018b97:	0f b6 db             	movzx  ebx,bl
c0018b9a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0018ba1:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0018ba5:	eb 17                	jmp    c0018bbe <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0018ba7:	80 fb 15             	cmp    bl,0x15
c0018baa:	77 13                	ja     c0018bbf <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0018bac:	0f b6 d2             	movzx  edx,dl
c0018baf:	0f b6 db             	movzx  ebx,bl
c0018bb2:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0018bba:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0018bbe:	ee                   	out    dx,al
c0018bbf:	83 c4 1c             	add    esp,0x1c
c0018bc2:	5b                   	pop    ebx
c0018bc3:	5e                   	pop    esi
c0018bc4:	5f                   	pop    edi
c0018bc5:	5d                   	pop    ebp
c0018bc6:	c3                   	ret    
c0018bc7:	90                   	nop

c0018bc8 <IDE::read(unsigned char, unsigned char)>:
c0018bc8:	55                   	push   ebp
c0018bc9:	57                   	push   edi
c0018bca:	56                   	push   esi
c0018bcb:	53                   	push   ebx
c0018bcc:	83 ec 1c             	sub    esp,0x1c
c0018bcf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018bd3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018bd7:	8d 43 f8             	lea    eax,[ebx-0x8]
c0018bda:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018bde:	3c 03                	cmp    al,0x3
c0018be0:	77 43                	ja     c0018c25 <IDE::read(unsigned char, unsigned char)+0x5d>
c0018be2:	0f b6 f2             	movzx  esi,dl
c0018be5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018be8:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0018bec:	83 c8 80             	or     eax,0xffffff80
c0018bef:	0f b6 c0             	movzx  eax,al
c0018bf2:	50                   	push   eax
c0018bf3:	6a 0c                	push   0xc
c0018bf5:	56                   	push   esi
c0018bf6:	57                   	push   edi
c0018bf7:	e8 0c ff ff ff       	call   c0018b08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018bfc:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0018c01:	0f b6 c3             	movzx  eax,bl
c0018c04:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0018c08:	ec                   	in     al,dx
c0018c09:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0018c0d:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0018c12:	52                   	push   edx
c0018c13:	6a 0c                	push   0xc
c0018c15:	56                   	push   esi
c0018c16:	57                   	push   edi
c0018c17:	e8 ec fe ff ff       	call   c0018b08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018c1c:	83 c4 20             	add    esp,0x20
c0018c1f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018c23:	eb 49                	jmp    c0018c6e <IDE::read(unsigned char, unsigned char)+0xa6>
c0018c25:	80 fb 07             	cmp    bl,0x7
c0018c28:	77 12                	ja     c0018c3c <IDE::read(unsigned char, unsigned char)+0x74>
c0018c2a:	0f b6 d2             	movzx  edx,dl
c0018c2d:	0f b6 c3             	movzx  eax,bl
c0018c30:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0018c38:	89 c2                	mov    edx,eax
c0018c3a:	eb 31                	jmp    c0018c6d <IDE::read(unsigned char, unsigned char)+0xa5>
c0018c3c:	80 fb 0d             	cmp    bl,0xd
c0018c3f:	77 13                	ja     c0018c54 <IDE::read(unsigned char, unsigned char)+0x8c>
c0018c41:	0f b6 d2             	movzx  edx,dl
c0018c44:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0018c4b:	0f b6 d3             	movzx  edx,bl
c0018c4e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0018c52:	eb 19                	jmp    c0018c6d <IDE::read(unsigned char, unsigned char)+0xa5>
c0018c54:	31 c0                	xor    eax,eax
c0018c56:	80 fb 15             	cmp    bl,0x15
c0018c59:	77 13                	ja     c0018c6e <IDE::read(unsigned char, unsigned char)+0xa6>
c0018c5b:	0f b6 d2             	movzx  edx,dl
c0018c5e:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0018c66:	0f b6 d3             	movzx  edx,bl
c0018c69:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0018c6d:	ec                   	in     al,dx
c0018c6e:	83 c4 1c             	add    esp,0x1c
c0018c71:	5b                   	pop    ebx
c0018c72:	5e                   	pop    esi
c0018c73:	5f                   	pop    edi
c0018c74:	5d                   	pop    ebp
c0018c75:	c3                   	ret    

c0018c76 <IDE::waitInterrupt(unsigned char)>:
c0018c76:	57                   	push   edi
c0018c77:	56                   	push   esi
c0018c78:	31 f6                	xor    esi,esi
c0018c7a:	53                   	push   ebx
c0018c7b:	83 ec 10             	sub    esp,0x10
c0018c7e:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0018c82:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018c86:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018c8a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018c8f:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c0018c96:	84 db                	test   bl,bl
c0018c98:	75 33                	jne    c0018ccd <IDE::waitInterrupt(unsigned char)+0x57>
c0018c9a:	52                   	push   edx
c0018c9b:	6a 0c                	push   0xc
c0018c9d:	50                   	push   eax
c0018c9e:	57                   	push   edi
c0018c9f:	e8 24 ff ff ff       	call   c0018bc8 <IDE::read(unsigned char, unsigned char)>
c0018ca4:	83 c4 10             	add    esp,0x10
c0018ca7:	a8 01                	test   al,0x1
c0018ca9:	75 2a                	jne    c0018cd5 <IDE::waitInterrupt(unsigned char)+0x5f>
c0018cab:	f7 c6 04 00 00 00    	test   esi,0x4
c0018cb1:	75 12                	jne    c0018cc5 <IDE::waitInterrupt(unsigned char)+0x4f>
c0018cb3:	83 fe 32             	cmp    esi,0x32
c0018cb6:	7e 0d                	jle    c0018cc5 <IDE::waitInterrupt(unsigned char)+0x4f>
c0018cb8:	83 ec 0c             	sub    esp,0xc
c0018cbb:	6a 64                	push   0x64
c0018cbd:	e8 1a a9 ff ff       	call   c00135dc <milliTenthSleep(unsigned int)>
c0018cc2:	83 c4 10             	add    esp,0x10
c0018cc5:	83 fe 3c             	cmp    esi,0x3c
c0018cc8:	74 0b                	je     c0018cd5 <IDE::waitInterrupt(unsigned char)+0x5f>
c0018cca:	46                   	inc    esi
c0018ccb:	eb bd                	jmp    c0018c8a <IDE::waitInterrupt(unsigned char)+0x14>
c0018ccd:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c0018cd5:	83 c4 10             	add    esp,0x10
c0018cd8:	88 d8                	mov    al,bl
c0018cda:	5b                   	pop    ebx
c0018cdb:	5e                   	pop    esi
c0018cdc:	5f                   	pop    edi
c0018cdd:	c3                   	ret    

c0018cde <ideChannel0IRQHandler(regs*, void*)>:
c0018cde:	83 ec 10             	sub    esp,0x10
c0018ce1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018ce5:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0018cec:	6a 07                	push   0x7
c0018cee:	6a 00                	push   0x0
c0018cf0:	50                   	push   eax
c0018cf1:	e8 d2 fe ff ff       	call   c0018bc8 <IDE::read(unsigned char, unsigned char)>
c0018cf6:	83 c4 1c             	add    esp,0x1c
c0018cf9:	c3                   	ret    

c0018cfa <ideChannel1IRQHandler(regs*, void*)>:
c0018cfa:	83 ec 10             	sub    esp,0x10
c0018cfd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d01:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0018d08:	6a 07                	push   0x7
c0018d0a:	6a 01                	push   0x1
c0018d0c:	50                   	push   eax
c0018d0d:	e8 b6 fe ff ff       	call   c0018bc8 <IDE::read(unsigned char, unsigned char)>
c0018d12:	83 c4 1c             	add    esp,0x1c
c0018d15:	c3                   	ret    

c0018d16 <IDE::enableIRQs(unsigned char, bool)>:
c0018d16:	57                   	push   edi
c0018d17:	56                   	push   esi
c0018d18:	be 04 00 00 00       	mov    esi,0x4
c0018d1d:	53                   	push   ebx
c0018d1e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0018d23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018d27:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0018d2c:	0f 94 c0             	sete   al
c0018d2f:	01 c0                	add    eax,eax
c0018d31:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0018d38:	0f b6 c0             	movzx  eax,al
c0018d3b:	50                   	push   eax
c0018d3c:	6a 0c                	push   0xc
c0018d3e:	57                   	push   edi
c0018d3f:	53                   	push   ebx
c0018d40:	e8 c3 fd ff ff       	call   c0018b08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018d45:	83 c4 10             	add    esp,0x10
c0018d48:	50                   	push   eax
c0018d49:	6a 0c                	push   0xc
c0018d4b:	57                   	push   edi
c0018d4c:	53                   	push   ebx
c0018d4d:	e8 76 fe ff ff       	call   c0018bc8 <IDE::read(unsigned char, unsigned char)>
c0018d52:	83 c4 10             	add    esp,0x10
c0018d55:	4e                   	dec    esi
c0018d56:	75 f0                	jne    c0018d48 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0018d58:	5b                   	pop    ebx
c0018d59:	5e                   	pop    esi
c0018d5a:	5f                   	pop    edi
c0018d5b:	c3                   	ret    

c0018d5c <IDE::open(int, int, void*)>:
c0018d5c:	55                   	push   ebp
c0018d5d:	57                   	push   edi
c0018d5e:	56                   	push   esi
c0018d5f:	53                   	push   ebx
c0018d60:	83 ec 1c             	sub    esp,0x1c
c0018d63:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018d67:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0018d70:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0018d79:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0018d80:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0018d87:	0f 85 b0 02 00 00    	jne    c001903d <IDE::open(int, int, void*)+0x2e1>
c0018d8d:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0018d93:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0018d97:	83 e0 7f             	and    eax,0x7f
c0018d9a:	3c 05                	cmp    al,0x5
c0018d9c:	74 04                	je     c0018da2 <IDE::open(int, int, void*)+0x46>
c0018d9e:	3c 0f                	cmp    al,0xf
c0018da0:	75 32                	jne    c0018dd4 <IDE::open(int, int, void*)+0x78>
c0018da2:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0018da8:	83 e0 fc             	and    eax,0xfffffffc
c0018dab:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0018db2:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0018db8:	83 e0 fc             	and    eax,0xfffffffc
c0018dbb:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0018dc2:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0018dc8:	83 e0 fc             	and    eax,0xfffffffc
c0018dcb:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018dd2:	eb 14                	jmp    c0018de8 <IDE::open(int, int, void*)+0x8c>
c0018dd4:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0018dde:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0018de8:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0018def:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0018df6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018dfa:	89 c6                	mov    esi,eax
c0018dfc:	bf f8 0c 00 00       	mov    edi,0xcf8
c0018e01:	c1 e6 10             	shl    esi,0x10
c0018e04:	89 e8                	mov    eax,ebp
c0018e06:	89 fa                	mov    edx,edi
c0018e08:	c1 e0 0b             	shl    eax,0xb
c0018e0b:	09 f0                	or     eax,esi
c0018e0d:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0018e14:	c1 e6 08             	shl    esi,0x8
c0018e17:	09 c6                	or     esi,eax
c0018e19:	89 f0                	mov    eax,esi
c0018e1b:	0d 08 00 00 80       	or     eax,0x80000008
c0018e20:	ef                   	out    dx,eax
c0018e21:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0018e26:	89 ca                	mov    edx,ecx
c0018e28:	ed                   	in     eax,dx
c0018e29:	c1 e8 10             	shr    eax,0x10
c0018e2c:	3d ff ff 00 00       	cmp    eax,0xffff
c0018e31:	0f 84 f5 00 00 00    	je     c0018f2c <IDE::open(int, int, void*)+0x1d0>
c0018e37:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0018e3d:	89 fa                	mov    edx,edi
c0018e3f:	89 f0                	mov    eax,esi
c0018e41:	ef                   	out    dx,eax
c0018e42:	b0 fe                	mov    al,0xfe
c0018e44:	89 ca                	mov    edx,ecx
c0018e46:	ee                   	out    dx,al
c0018e47:	89 f0                	mov    eax,esi
c0018e49:	89 fa                	mov    edx,edi
c0018e4b:	ef                   	out    dx,eax
c0018e4c:	89 ca                	mov    edx,ecx
c0018e4e:	ed                   	in     eax,dx
c0018e4f:	3c fe                	cmp    al,0xfe
c0018e51:	0f 85 a9 00 00 00    	jne    c0018f00 <IDE::open(int, int, void*)+0x1a4>
c0018e57:	8b 15 38 04 02 c0    	mov    edx,DWORD PTR ds:0xc0020438
c0018e5d:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c0018e64:	74 33                	je     c0018e99 <IDE::open(int, int, void*)+0x13d>
c0018e66:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0018e6c:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0018e70:	40                   	inc    eax
c0018e71:	83 ec 0c             	sub    esp,0xc
c0018e74:	0f b6 c0             	movzx  eax,al
c0018e77:	50                   	push   eax
c0018e78:	55                   	push   ebp
c0018e79:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018e7d:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c0018e83:	51                   	push   ecx
c0018e84:	e8 5b 57 ff ff       	call   c000e5e4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0018e89:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0018e8e:	83 c4 1c             	add    esp,0x1c
c0018e91:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0018e97:	eb 0a                	jmp    c0018ea3 <IDE::open(int, int, void*)+0x147>
c0018e99:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0018ea3:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0018eaa:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0018eb1:	c1 e1 10             	shl    ecx,0x10
c0018eb4:	c1 e0 08             	shl    eax,0x8
c0018eb7:	bf f8 0c 00 00       	mov    edi,0xcf8
c0018ebc:	09 c1                	or     ecx,eax
c0018ebe:	89 fa                	mov    edx,edi
c0018ec0:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0018ec7:	c1 e0 0b             	shl    eax,0xb
c0018eca:	09 c1                	or     ecx,eax
c0018ecc:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0018ed2:	89 c8                	mov    eax,ecx
c0018ed4:	ef                   	out    dx,eax
c0018ed5:	be fc 0c 00 00       	mov    esi,0xcfc
c0018eda:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0018ee0:	89 f2                	mov    edx,esi
c0018ee2:	ee                   	out    dx,al
c0018ee3:	89 c8                	mov    eax,ecx
c0018ee5:	89 fa                	mov    edx,edi
c0018ee7:	ef                   	out    dx,eax
c0018ee8:	89 f2                	mov    edx,esi
c0018eea:	ed                   	in     eax,dx
c0018eeb:	0f b6 c0             	movzx  eax,al
c0018eee:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0018ef4:	74 46                	je     c0018f3c <IDE::open(int, int, void*)+0x1e0>
c0018ef6:	83 ec 0c             	sub    esp,0xc
c0018ef9:	68 94 ec 01 c0       	push   0xc001ec94
c0018efe:	eb 34                	jmp    c0018f34 <IDE::open(int, int, void*)+0x1d8>
c0018f00:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0018f09:	75 17                	jne    c0018f22 <IDE::open(int, int, void*)+0x1c6>
c0018f0b:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0018f10:	74 07                	je     c0018f19 <IDE::open(int, int, void*)+0x1bd>
c0018f12:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0018f17:	75 09                	jne    c0018f22 <IDE::open(int, int, void*)+0x1c6>
c0018f19:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0018f20:	eb 1a                	jmp    c0018f3c <IDE::open(int, int, void*)+0x1e0>
c0018f22:	83 ec 0c             	sub    esp,0xc
c0018f25:	68 9c ec 01 c0       	push   0xc001ec9c
c0018f2a:	eb 08                	jmp    c0018f34 <IDE::open(int, int, void*)+0x1d8>
c0018f2c:	83 ec 0c             	sub    esp,0xc
c0018f2f:	68 cd ec 01 c0       	push   0xc001eccd
c0018f34:	e8 92 71 ff ff       	call   c00100cb <KePanic(char const*)>
c0018f39:	83 c4 10             	add    esp,0x10
c0018f3c:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0018f43:	79 1a                	jns    c0018f5f <IDE::open(int, int, void*)+0x203>
c0018f45:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0018f4b:	83 e0 fc             	and    eax,0xfffffffc
c0018f4e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0018f55:	83 c0 08             	add    eax,0x8
c0018f58:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0018f5f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f65:	89 c2                	mov    edx,eax
c0018f67:	83 e2 0f             	and    edx,0xf
c0018f6a:	66 83 fa 08          	cmp    dx,0x8
c0018f6e:	75 0a                	jne    c0018f7a <IDE::open(int, int, void*)+0x21e>
c0018f70:	83 e8 02             	sub    eax,0x2
c0018f73:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018f7a:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0018f80:	89 c2                	mov    edx,eax
c0018f82:	83 e2 0f             	and    edx,0xf
c0018f85:	66 83 fa 08          	cmp    dx,0x8
c0018f89:	75 0a                	jne    c0018f95 <IDE::open(int, int, void*)+0x239>
c0018f8b:	83 e8 02             	sub    eax,0x2
c0018f8e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0018f95:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018f9c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0018fa3:	89 d0                	mov    eax,edx
c0018fa5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018fa8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0018fac:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0018fb0:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018fb3:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018fb8:	0f b6 c9             	movzx  ecx,cl
c0018fbb:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0018fc2:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0018fc5:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0018fc9:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0018fcd:	8d 50 02             	lea    edx,[eax+0x2]
c0018fd0:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0018fd5:	0f b6 d2             	movzx  edx,dl
c0018fd8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0018fde:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018fe1:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0018fe5:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0018fe9:	8d 48 03             	lea    ecx,[eax+0x3]
c0018fec:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018ff1:	0f b6 c9             	movzx  ecx,cl
c0018ff4:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0018ffa:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0018ffd:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019001:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0019005:	8d 50 04             	lea    edx,[eax+0x4]
c0019008:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001900e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0019013:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001901a:	66 85 f6             	test   si,si
c001901d:	74 5b                	je     c001907a <IDE::open(int, int, void*)+0x31e>
c001901f:	0f b6 d2             	movzx  edx,dl
c0019022:	83 c0 05             	add    eax,0x5
c0019025:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019028:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001902c:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0019030:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019036:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001903b:	eb 3d                	jmp    c001907a <IDE::open(int, int, void*)+0x31e>
c001903d:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0019043:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001904a:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0019051:	66 05 06 02          	add    ax,0x206
c0019055:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001905c:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0019063:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001906a:	66 05 06 02          	add    ax,0x206
c001906e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019075:	e9 e5 fe ff ff       	jmp    c0018f5f <IDE::open(int, int, void*)+0x203>
c001907a:	50                   	push   eax
c001907b:	50                   	push   eax
c001907c:	6a 00                	push   0x0
c001907e:	53                   	push   ebx
c001907f:	e8 5e fa ff ff       	call   c0018ae2 <IDE::prepareInterrupt(unsigned char)>
c0019084:	5a                   	pop    edx
c0019085:	59                   	pop    ecx
c0019086:	6a 01                	push   0x1
c0019088:	53                   	push   ebx
c0019089:	e8 54 fa ff ff       	call   c0018ae2 <IDE::prepareInterrupt(unsigned char)>
c001908e:	83 c4 0c             	add    esp,0xc
c0019091:	6a 00                	push   0x0
c0019093:	6a 00                	push   0x0
c0019095:	53                   	push   ebx
c0019096:	e8 7b fc ff ff       	call   c0018d16 <IDE::enableIRQs(unsigned char, bool)>
c001909b:	83 c4 0c             	add    esp,0xc
c001909e:	6a 00                	push   0x0
c00190a0:	6a 01                	push   0x1
c00190a2:	53                   	push   ebx
c00190a3:	e8 6e fc ff ff       	call   c0018d16 <IDE::enableIRQs(unsigned char, bool)>
c00190a8:	83 c4 10             	add    esp,0x10
c00190ab:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00190b2:	74 34                	je     c00190e8 <IDE::open(int, int, void*)+0x38c>
c00190b4:	83 ec 0c             	sub    esp,0xc
c00190b7:	53                   	push   ebx
c00190b8:	6a 01                	push   0x1
c00190ba:	68 de 8c 01 c0       	push   0xc0018cde
c00190bf:	6a 0e                	push   0xe
c00190c1:	53                   	push   ebx
c00190c2:	e8 79 27 ff ff       	call   c000b840 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00190c7:	83 c4 14             	add    esp,0x14
c00190ca:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00190d0:	53                   	push   ebx
c00190d1:	6a 01                	push   0x1
c00190d3:	68 fa 8c 01 c0       	push   0xc0018cfa
c00190d8:	6a 0f                	push   0xf
c00190da:	53                   	push   ebx
c00190db:	e8 60 27 ff ff       	call   c000b840 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00190e0:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00190e6:	eb 38                	jmp    c0019120 <IDE::open(int, int, void*)+0x3c4>
c00190e8:	83 ec 0c             	sub    esp,0xc
c00190eb:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00190f5:	53                   	push   ebx
c00190f6:	6a 00                	push   0x0
c00190f8:	68 de 8c 01 c0       	push   0xc0018cde
c00190fd:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0019103:	53                   	push   ebx
c0019104:	e8 37 27 ff ff       	call   c000b840 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019109:	83 c4 14             	add    esp,0x14
c001910c:	53                   	push   ebx
c001910d:	6a 00                	push   0x0
c001910f:	68 fa 8c 01 c0       	push   0xc0018cfa
c0019114:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001911a:	53                   	push   ebx
c001911b:	e8 20 27 ff ff       	call   c000b840 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019120:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019122:	83 c4 20             	add    esp,0x20
c0019125:	83 ec 0c             	sub    esp,0xc
c0019128:	53                   	push   ebx
c0019129:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001912c:	83 c4 0c             	add    esp,0xc
c001912f:	6a 07                	push   0x7
c0019131:	6a 00                	push   0x0
c0019133:	53                   	push   ebx
c0019134:	e8 8f fa ff ff       	call   c0018bc8 <IDE::read(unsigned char, unsigned char)>
c0019139:	83 c4 0c             	add    esp,0xc
c001913c:	6a 07                	push   0x7
c001913e:	6a 01                	push   0x1
c0019140:	53                   	push   ebx
c0019141:	e8 82 fa ff ff       	call   c0018bc8 <IDE::read(unsigned char, unsigned char)>
c0019146:	83 c4 0c             	add    esp,0xc
c0019149:	6a 01                	push   0x1
c001914b:	6a 00                	push   0x0
c001914d:	53                   	push   ebx
c001914e:	e8 c3 fb ff ff       	call   c0018d16 <IDE::enableIRQs(unsigned char, bool)>
c0019153:	83 c4 0c             	add    esp,0xc
c0019156:	6a 01                	push   0x1
c0019158:	6a 01                	push   0x1
c001915a:	53                   	push   ebx
c001915b:	e8 b6 fb ff ff       	call   c0018d16 <IDE::enableIRQs(unsigned char, bool)>
c0019160:	83 c4 2c             	add    esp,0x2c
c0019163:	31 c0                	xor    eax,eax
c0019165:	5b                   	pop    ebx
c0019166:	5e                   	pop    esi
c0019167:	5f                   	pop    edi
c0019168:	5d                   	pop    ebp
c0019169:	c3                   	ret    

c001916a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001916a:	55                   	push   ebp
c001916b:	57                   	push   edi
c001916c:	56                   	push   esi
c001916d:	53                   	push   ebx
c001916e:	83 ec 1c             	sub    esp,0x1c
c0019171:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019175:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019179:	8d 50 f8             	lea    edx,[eax-0x8]
c001917c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019180:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0019184:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019188:	80 fa 03             	cmp    dl,0x3
c001918b:	77 5d                	ja     c00191ea <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001918d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019191:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019195:	0f b6 db             	movzx  ebx,bl
c0019198:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001919b:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001919f:	83 ca 80             	or     edx,0xffffff80
c00191a2:	0f b6 d2             	movzx  edx,dl
c00191a5:	52                   	push   edx
c00191a6:	6a 0c                	push   0xc
c00191a8:	53                   	push   ebx
c00191a9:	56                   	push   esi
c00191aa:	e8 59 f9 ff ff       	call   c0018b08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00191af:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00191b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00191b8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00191bc:	0f b6 c0             	movzx  eax,al
c00191bf:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00191c3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00191c5:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00191ca:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00191ce:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00191d2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00191d6:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00191de:	83 c4 2c             	add    esp,0x2c
c00191e1:	5b                   	pop    ebx
c00191e2:	5e                   	pop    esi
c00191e3:	5f                   	pop    edi
c00191e4:	5d                   	pop    ebp
c00191e5:	e9 1e f9 ff ff       	jmp    c0018b08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00191ea:	3c 07                	cmp    al,0x7
c00191ec:	77 10                	ja     c00191fe <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00191ee:	0f b6 db             	movzx  ebx,bl
c00191f1:	0f b6 d0             	movzx  edx,al
c00191f4:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00191fc:	eb 2d                	jmp    c001922b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00191fe:	3c 0d                	cmp    al,0xd
c0019200:	77 13                	ja     c0019215 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0019202:	0f b6 db             	movzx  ebx,bl
c0019205:	0f b6 c0             	movzx  eax,al
c0019208:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001920f:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0019213:	eb 16                	jmp    c001922b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019215:	3c 15                	cmp    al,0x15
c0019217:	77 14                	ja     c001922d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0019219:	0f b6 db             	movzx  ebx,bl
c001921c:	0f b6 c0             	movzx  eax,al
c001921f:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0019227:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001922b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001922d:	83 c4 1c             	add    esp,0x1c
c0019230:	5b                   	pop    ebx
c0019231:	5e                   	pop    esi
c0019232:	5f                   	pop    edi
c0019233:	5d                   	pop    ebp
c0019234:	c3                   	ret    
c0019235:	90                   	nop

c0019236 <IDE::detect()>:
c0019236:	55                   	push   ebp
c0019237:	57                   	push   edi
c0019238:	56                   	push   esi
c0019239:	53                   	push   ebx
c001923a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019240:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0019247:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001924e:	0f 85 97 02 00 00    	jne    c00194eb <IDE::detect()+0x2b5>
c0019254:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001925b:	31 f6                	xor    esi,esi
c001925d:	31 ed                	xor    ebp,ebp
c001925f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019267:	89 e8                	mov    eax,ebp
c0019269:	c1 e0 06             	shl    eax,0x6
c001926c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0019274:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019278:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001927c:	c1 e0 04             	shl    eax,0x4
c001927f:	83 c8 a0             	or     eax,0xffffffa0
c0019282:	0f b6 c0             	movzx  eax,al
c0019285:	50                   	push   eax
c0019286:	6a 06                	push   0x6
c0019288:	56                   	push   esi
c0019289:	53                   	push   ebx
c001928a:	e8 79 f8 ff ff       	call   c0018b08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001928f:	83 c4 0c             	add    esp,0xc
c0019292:	6a 0c                	push   0xc
c0019294:	56                   	push   esi
c0019295:	53                   	push   ebx
c0019296:	e8 2d f9 ff ff       	call   c0018bc8 <IDE::read(unsigned char, unsigned char)>
c001929b:	83 c4 0c             	add    esp,0xc
c001929e:	6a 0c                	push   0xc
c00192a0:	56                   	push   esi
c00192a1:	53                   	push   ebx
c00192a2:	e8 21 f9 ff ff       	call   c0018bc8 <IDE::read(unsigned char, unsigned char)>
c00192a7:	83 c4 0c             	add    esp,0xc
c00192aa:	6a 0c                	push   0xc
c00192ac:	56                   	push   esi
c00192ad:	53                   	push   ebx
c00192ae:	e8 15 f9 ff ff       	call   c0018bc8 <IDE::read(unsigned char, unsigned char)>
c00192b3:	83 c4 0c             	add    esp,0xc
c00192b6:	6a 0c                	push   0xc
c00192b8:	56                   	push   esi
c00192b9:	53                   	push   ebx
c00192ba:	e8 09 f9 ff ff       	call   c0018bc8 <IDE::read(unsigned char, unsigned char)>
c00192bf:	68 ec 00 00 00       	push   0xec
c00192c4:	6a 07                	push   0x7
c00192c6:	56                   	push   esi
c00192c7:	53                   	push   ebx
c00192c8:	e8 3b f8 ff ff       	call   c0018b08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00192cd:	83 c4 1c             	add    esp,0x1c
c00192d0:	6a 0c                	push   0xc
c00192d2:	56                   	push   esi
c00192d3:	53                   	push   ebx
c00192d4:	e8 ef f8 ff ff       	call   c0018bc8 <IDE::read(unsigned char, unsigned char)>
c00192d9:	83 c4 0c             	add    esp,0xc
c00192dc:	6a 0c                	push   0xc
c00192de:	56                   	push   esi
c00192df:	53                   	push   ebx
c00192e0:	e8 e3 f8 ff ff       	call   c0018bc8 <IDE::read(unsigned char, unsigned char)>
c00192e5:	83 c4 0c             	add    esp,0xc
c00192e8:	6a 0c                	push   0xc
c00192ea:	56                   	push   esi
c00192eb:	53                   	push   ebx
c00192ec:	e8 d7 f8 ff ff       	call   c0018bc8 <IDE::read(unsigned char, unsigned char)>
c00192f1:	83 c4 0c             	add    esp,0xc
c00192f4:	6a 0c                	push   0xc
c00192f6:	56                   	push   esi
c00192f7:	53                   	push   ebx
c00192f8:	e8 cb f8 ff ff       	call   c0018bc8 <IDE::read(unsigned char, unsigned char)>
c00192fd:	83 c4 0c             	add    esp,0xc
c0019300:	6a 0c                	push   0xc
c0019302:	56                   	push   esi
c0019303:	53                   	push   ebx
c0019304:	e8 bf f8 ff ff       	call   c0018bc8 <IDE::read(unsigned char, unsigned char)>
c0019309:	83 c4 10             	add    esp,0x10
c001930c:	84 c0                	test   al,al
c001930e:	0f 84 5f 01 00 00    	je     c0019473 <IDE::detect()+0x23d>
c0019314:	31 ff                	xor    edi,edi
c0019316:	50                   	push   eax
c0019317:	6a 0c                	push   0xc
c0019319:	56                   	push   esi
c001931a:	53                   	push   ebx
c001931b:	e8 a8 f8 ff ff       	call   c0018bc8 <IDE::read(unsigned char, unsigned char)>
c0019320:	83 c4 10             	add    esp,0x10
c0019323:	a8 01                	test   al,0x1
c0019325:	0f 85 69 01 00 00    	jne    c0019494 <IDE::detect()+0x25e>
c001932b:	84 c0                	test   al,al
c001932d:	78 04                	js     c0019333 <IDE::detect()+0xfd>
c001932f:	a8 08                	test   al,0x8
c0019331:	75 23                	jne    c0019356 <IDE::detect()+0x120>
c0019333:	47                   	inc    edi
c0019334:	81 ff 17 01 00 00    	cmp    edi,0x117
c001933a:	7e da                	jle    c0019316 <IDE::detect()+0xe0>
c001933c:	83 ec 0c             	sub    esp,0xc
c001933f:	6a 32                	push   0x32
c0019341:	e8 96 a2 ff ff       	call   c00135dc <milliTenthSleep(unsigned int)>
c0019346:	83 c4 10             	add    esp,0x10
c0019349:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001934f:	75 c5                	jne    c0019316 <IDE::detect()+0xe0>
c0019351:	e9 3e 01 00 00       	jmp    c0019494 <IDE::detect()+0x25e>
c0019356:	31 c9                	xor    ecx,ecx
c0019358:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001935c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019360:	83 ec 0c             	sub    esp,0xc
c0019363:	68 80 00 00 00       	push   0x80
c0019368:	57                   	push   edi
c0019369:	6a 00                	push   0x0
c001936b:	56                   	push   esi
c001936c:	53                   	push   ebx
c001936d:	e8 f8 fd ff ff       	call   c001916a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0019372:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0019377:	89 e8                	mov    eax,ebp
c0019379:	89 d1                	mov    ecx,edx
c001937b:	c1 e0 06             	shl    eax,0x6
c001937e:	01 d8                	add    eax,ebx
c0019380:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0019387:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001938e:	89 f2                	mov    edx,esi
c0019390:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0019396:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001939a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00193a0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00193a4:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00193ab:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00193b3:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00193ba:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00193c2:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00193c8:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00193cf:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00193d5:	8d 54 24 58          	lea    edx,[esp+0x58]
c00193d9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00193dd:	83 c4 20             	add    esp,0x20
c00193e0:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00193e3:	83 c0 02             	add    eax,0x2
c00193e6:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00193ec:	83 c7 02             	add    edi,0x2
c00193ef:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00193f2:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00193f8:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00193fc:	75 e2                	jne    c00193e0 <IDE::detect()+0x1aa>
c00193fe:	89 e8                	mov    eax,ebp
c0019400:	c1 e0 06             	shl    eax,0x6
c0019403:	01 d8                	add    eax,ebx
c0019405:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001940b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0019412:	66 c1 ea 09          	shr    dx,0x9
c0019416:	83 e2 01             	and    edx,0x1
c0019419:	84 c9                	test   cl,cl
c001941b:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0019421:	75 22                	jne    c0019445 <IDE::detect()+0x20f>
c0019423:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001942a:	74 46                	je     c0019472 <IDE::detect()+0x23c>
c001942c:	83 ec 0c             	sub    esp,0xc
c001942f:	68 7c 01 00 00       	push   0x17c
c0019434:	e8 80 e3 fe ff       	call   c00077b9 <malloc>
c0019439:	89 c7                	mov    edi,eax
c001943b:	89 04 24             	mov    DWORD PTR [esp],eax
c001943e:	e8 11 05 00 00       	call   c0019954 <ATA::ATA()>
c0019443:	eb 17                	jmp    c001945c <IDE::detect()+0x226>
c0019445:	83 ec 0c             	sub    esp,0xc
c0019448:	68 84 01 00 00       	push   0x184
c001944d:	e8 67 e3 fe ff       	call   c00077b9 <malloc>
c0019452:	89 c7                	mov    edi,eax
c0019454:	89 04 24             	mov    DWORD PTR [esp],eax
c0019457:	e8 f0 0a 00 00       	call   c0019f4c <ATAPI::ATAPI()>
c001945c:	5a                   	pop    edx
c001945d:	59                   	pop    ecx
c001945e:	57                   	push   edi
c001945f:	53                   	push   ebx
c0019460:	e8 2f 24 ff ff       	call   c000b894 <Device::addChild(Device*)>
c0019465:	8b 07                	mov    eax,DWORD PTR [edi]
c0019467:	53                   	push   ebx
c0019468:	55                   	push   ebp
c0019469:	6a 00                	push   0x0
c001946b:	57                   	push   edi
c001946c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001946f:	83 c4 20             	add    esp,0x20
c0019472:	45                   	inc    ebp
c0019473:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019478:	74 0d                	je     c0019487 <IDE::detect()+0x251>
c001947a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0019482:	e9 e0 fd ff ff       	jmp    c0019267 <IDE::detect()+0x31>
c0019487:	4e                   	dec    esi
c0019488:	74 61                	je     c00194eb <IDE::detect()+0x2b5>
c001948a:	be 01 00 00 00       	mov    esi,0x1
c001948f:	e9 cb fd ff ff       	jmp    c001925f <IDE::detect()+0x29>
c0019494:	50                   	push   eax
c0019495:	6a 04                	push   0x4
c0019497:	56                   	push   esi
c0019498:	53                   	push   ebx
c0019499:	e8 2a f7 ff ff       	call   c0018bc8 <IDE::read(unsigned char, unsigned char)>
c001949e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00194a2:	83 c4 0c             	add    esp,0xc
c00194a5:	6a 05                	push   0x5
c00194a7:	56                   	push   esi
c00194a8:	53                   	push   ebx
c00194a9:	e8 1a f7 ff ff       	call   c0018bc8 <IDE::read(unsigned char, unsigned char)>
c00194ae:	83 c4 10             	add    esp,0x10
c00194b1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00194b5:	80 fa 14             	cmp    dl,0x14
c00194b8:	75 04                	jne    c00194be <IDE::detect()+0x288>
c00194ba:	3c eb                	cmp    al,0xeb
c00194bc:	eb 07                	jmp    c00194c5 <IDE::detect()+0x28f>
c00194be:	3c 96                	cmp    al,0x96
c00194c0:	75 b1                	jne    c0019473 <IDE::detect()+0x23d>
c00194c2:	80 fa 69             	cmp    dl,0x69
c00194c5:	75 ac                	jne    c0019473 <IDE::detect()+0x23d>
c00194c7:	68 a1 00 00 00       	push   0xa1
c00194cc:	6a 07                	push   0x7
c00194ce:	56                   	push   esi
c00194cf:	53                   	push   ebx
c00194d0:	e8 33 f6 ff ff       	call   c0018b08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00194d5:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c00194dc:	e8 fb a0 ff ff       	call   c00135dc <milliTenthSleep(unsigned int)>
c00194e1:	83 c4 10             	add    esp,0x10
c00194e4:	b1 01                	mov    cl,0x1
c00194e6:	e9 6d fe ff ff       	jmp    c0019358 <IDE::detect()+0x122>
c00194eb:	81 c4 1c 02 00 00    	add    esp,0x21c
c00194f1:	5b                   	pop    ebx
c00194f2:	5e                   	pop    esi
c00194f3:	5f                   	pop    edi
c00194f4:	5d                   	pop    ebp
c00194f5:	c3                   	ret    

c00194f6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00194f6:	55                   	push   ebp
c00194f7:	57                   	push   edi
c00194f8:	56                   	push   esi
c00194f9:	53                   	push   ebx
c00194fa:	83 ec 1c             	sub    esp,0x1c
c00194fd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019501:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019505:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019509:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001950d:	88 c3                	mov    bl,al
c001950f:	84 c0                	test   al,al
c0019511:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019515:	0f 84 81 00 00 00    	je     c001959c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001951b:	83 ec 0c             	sub    esp,0xc
c001951e:	68 f7 ec 01 c0       	push   0xc001ecf7
c0019523:	e8 2c 0f ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0019528:	83 c4 10             	add    esp,0x10
c001952b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001952f:	3c 01                	cmp    al,0x1
c0019531:	74 63                	je     c0019596 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0019533:	3c 02                	cmp    al,0x2
c0019535:	75 53                	jne    c001958a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019537:	01 f6                	add    esi,esi
c0019539:	09 ee                	or     esi,ebp
c001953b:	50                   	push   eax
c001953c:	89 f0                	mov    eax,esi
c001953e:	6a 01                	push   0x1
c0019540:	0f b6 f0             	movzx  esi,al
c0019543:	c1 e6 06             	shl    esi,0x6
c0019546:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001954e:	50                   	push   eax
c001954f:	57                   	push   edi
c0019550:	e8 73 f6 ff ff       	call   c0018bc8 <IDE::read(unsigned char, unsigned char)>
c0019555:	83 c4 10             	add    esp,0x10
c0019558:	a8 01                	test   al,0x1
c001955a:	74 02                	je     c001955e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001955c:	b3 07                	mov    bl,0x7
c001955e:	a8 02                	test   al,0x2
c0019560:	74 02                	je     c0019564 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019562:	b3 03                	mov    bl,0x3
c0019564:	a8 04                	test   al,0x4
c0019566:	74 02                	je     c001956a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019568:	b3 14                	mov    bl,0x14
c001956a:	a8 08                	test   al,0x8
c001956c:	74 02                	je     c0019570 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001956e:	b3 03                	mov    bl,0x3
c0019570:	a8 10                	test   al,0x10
c0019572:	74 02                	je     c0019576 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019574:	b3 15                	mov    bl,0x15
c0019576:	a8 20                	test   al,0x20
c0019578:	74 02                	je     c001957c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001957a:	b3 03                	mov    bl,0x3
c001957c:	a8 40                	test   al,0x40
c001957e:	74 02                	je     c0019582 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019580:	b3 16                	mov    bl,0x16
c0019582:	84 c0                	test   al,al
c0019584:	79 16                	jns    c001959c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019586:	b3 0d                	mov    bl,0xd
c0019588:	eb 12                	jmp    c001959c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001958a:	3c 03                	cmp    al,0x3
c001958c:	74 0c                	je     c001959a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001958e:	3c 04                	cmp    al,0x4
c0019590:	75 0a                	jne    c001959c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019592:	b3 08                	mov    bl,0x8
c0019594:	eb 06                	jmp    c001959c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019596:	b3 13                	mov    bl,0x13
c0019598:	eb 02                	jmp    c001959c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001959a:	b3 17                	mov    bl,0x17
c001959c:	83 c4 1c             	add    esp,0x1c
c001959f:	88 d8                	mov    al,bl
c00195a1:	5b                   	pop    ebx
c00195a2:	5e                   	pop    esi
c00195a3:	5f                   	pop    edi
c00195a4:	5d                   	pop    ebp
c00195a5:	c3                   	ret    

c00195a6 <IDE::polling(unsigned char, unsigned int)>:
c00195a6:	55                   	push   ebp
c00195a7:	bd 04 00 00 00       	mov    ebp,0x4
c00195ac:	57                   	push   edi
c00195ad:	56                   	push   esi
c00195ae:	53                   	push   ebx
c00195af:	83 ec 0c             	sub    esp,0xc
c00195b2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00195b6:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c00195ba:	0f b6 f3             	movzx  esi,bl
c00195bd:	52                   	push   edx
c00195be:	6a 0c                	push   0xc
c00195c0:	56                   	push   esi
c00195c1:	57                   	push   edi
c00195c2:	e8 01 f6 ff ff       	call   c0018bc8 <IDE::read(unsigned char, unsigned char)>
c00195c7:	83 c4 10             	add    esp,0x10
c00195ca:	4d                   	dec    ebp
c00195cb:	75 ed                	jne    c00195ba <IDE::polling(unsigned char, unsigned int)+0x14>
c00195cd:	bb a0 86 01 00       	mov    ebx,0x186a0
c00195d2:	50                   	push   eax
c00195d3:	6a 0c                	push   0xc
c00195d5:	56                   	push   esi
c00195d6:	57                   	push   edi
c00195d7:	e8 ec f5 ff ff       	call   c0018bc8 <IDE::read(unsigned char, unsigned char)>
c00195dc:	83 c4 10             	add    esp,0x10
c00195df:	a8 01                	test   al,0x1
c00195e1:	75 17                	jne    c00195fa <IDE::polling(unsigned char, unsigned int)+0x54>
c00195e3:	a8 20                	test   al,0x20
c00195e5:	75 0f                	jne    c00195f6 <IDE::polling(unsigned char, unsigned int)+0x50>
c00195e7:	4b                   	dec    ebx
c00195e8:	74 10                	je     c00195fa <IDE::polling(unsigned char, unsigned int)+0x54>
c00195ea:	84 c0                	test   al,al
c00195ec:	78 e4                	js     c00195d2 <IDE::polling(unsigned char, unsigned int)+0x2c>
c00195ee:	a8 08                	test   al,0x8
c00195f0:	74 e0                	je     c00195d2 <IDE::polling(unsigned char, unsigned int)+0x2c>
c00195f2:	31 c0                	xor    eax,eax
c00195f4:	eb 06                	jmp    c00195fc <IDE::polling(unsigned char, unsigned int)+0x56>
c00195f6:	b0 01                	mov    al,0x1
c00195f8:	eb 02                	jmp    c00195fc <IDE::polling(unsigned char, unsigned int)+0x56>
c00195fa:	b0 02                	mov    al,0x2
c00195fc:	83 c4 0c             	add    esp,0xc
c00195ff:	5b                   	pop    ebx
c0019600:	5e                   	pop    esi
c0019601:	5f                   	pop    edi
c0019602:	5d                   	pop    ebp
c0019603:	c3                   	ret    

c0019604 <SATABus::close(int, int, void*)>:
c0019604:	31 c0                	xor    eax,eax
c0019606:	c3                   	ret    
c0019607:	90                   	nop

c0019608 <SATABus::detect()>:
c0019608:	c3                   	ret    
c0019609:	90                   	nop

c001960a <SATABus::SATABus()>:
c001960a:	83 ec 0c             	sub    esp,0xc
c001960d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019611:	83 ec 08             	sub    esp,0x8
c0019614:	68 30 ed 01 c0       	push   0xc001ed30
c0019619:	50                   	push   eax
c001961a:	e8 b9 25 ff ff       	call   c000bbd8 <HardDiskController::HardDiskController(char const*)>
c001961f:	83 c4 10             	add    esp,0x10
c0019622:	ba 5c ed 01 c0       	mov    edx,0xc001ed5c
c0019627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001962b:	89 10                	mov    DWORD PTR [eax],edx
c001962d:	83 ec 0c             	sub    esp,0xc
c0019630:	6a 50                	push   0x50
c0019632:	e8 1c e5 fe ff       	call   c0007b53 <Phys::allocateContiguousPages(int)>
c0019637:	83 c4 10             	add    esp,0x10
c001963a:	89 c2                	mov    edx,eax
c001963c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019640:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019646:	83 ec 0c             	sub    esp,0xc
c0019649:	6a 50                	push   0x50
c001964b:	e8 b1 fb fe ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c0019650:	83 c4 10             	add    esp,0x10
c0019653:	89 c2                	mov    edx,eax
c0019655:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019659:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001965f:	a1 30 05 02 c0       	mov    eax,ds:0xc0020530
c0019664:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019668:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001966e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019672:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019678:	83 ec 0c             	sub    esp,0xc
c001967b:	6a 03                	push   0x3
c001967d:	6a 50                	push   0x50
c001967f:	51                   	push   ecx
c0019680:	52                   	push   edx
c0019681:	50                   	push   eax
c0019682:	e8 09 05 ff ff       	call   c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019687:	83 c4 20             	add    esp,0x20
c001968a:	90                   	nop
c001968b:	83 c4 0c             	add    esp,0xc
c001968e:	c3                   	ret    
c001968f:	90                   	nop

c0019690 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019690:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019694:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019697:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001969a:	09 c2                	or     edx,eax
c001969c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196a0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00196a6:	8b 08                	mov    ecx,DWORD PTR [eax]
c00196a8:	31 c0                	xor    eax,eax
c00196aa:	c1 e9 08             	shr    ecx,0x8
c00196ad:	83 e1 0f             	and    ecx,0xf
c00196b0:	39 c8                	cmp    eax,ecx
c00196b2:	74 0a                	je     c00196be <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c00196b4:	f6 c2 01             	test   dl,0x1
c00196b7:	74 08                	je     c00196c1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c00196b9:	d1 ea                	shr    edx,1
c00196bb:	40                   	inc    eax
c00196bc:	eb f2                	jmp    c00196b0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c00196be:	83 c8 ff             	or     eax,0xffffffff
c00196c1:	c3                   	ret    

c00196c2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c00196c2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00196c6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00196c9:	89 c2                	mov    edx,eax
c00196cb:	c1 ea 08             	shr    edx,0x8
c00196ce:	83 e2 0f             	and    edx,0xf
c00196d1:	fe ca                	dec    dl
c00196d3:	75 31                	jne    c0019706 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00196d5:	83 e0 0f             	and    eax,0xf
c00196d8:	3c 03                	cmp    al,0x3
c00196da:	75 2a                	jne    c0019706 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00196dc:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c00196df:	b8 02 00 00 00       	mov    eax,0x2
c00196e4:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c00196ea:	74 1c                	je     c0019708 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00196ec:	b8 04 00 00 00       	mov    eax,0x4
c00196f1:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c00196f7:	74 0f                	je     c0019708 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00196f9:	31 c0                	xor    eax,eax
c00196fb:	83 fa 03             	cmp    edx,0x3
c00196fe:	0f 94 c0             	sete   al
c0019701:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019705:	c3                   	ret    
c0019706:	31 c0                	xor    eax,eax
c0019708:	c3                   	ret    
c0019709:	90                   	nop

c001970a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001970a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001970e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019711:	0f ba e2 0f          	bt     edx,0xf
c0019715:	72 f7                	jb     c001970e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019717:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001971a:	83 ca 10             	or     edx,0x10
c001971d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019720:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019723:	83 ca 01             	or     edx,0x1
c0019726:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019729:	c3                   	ret    

c001972a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001972a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001972e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019731:	83 e2 fe             	and    edx,0xfffffffe
c0019734:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019737:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001973a:	83 e2 ef             	and    edx,0xffffffef
c001973d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019740:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019743:	0f ba e2 0e          	bt     edx,0xe
c0019747:	72 f7                	jb     c0019740 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019749:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001974c:	0f ba e2 0f          	bt     edx,0xf
c0019750:	72 ee                	jb     c0019740 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019752:	c3                   	ret    
c0019753:	90                   	nop

c0019754 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019754:	55                   	push   ebp
c0019755:	57                   	push   edi
c0019756:	56                   	push   esi
c0019757:	53                   	push   ebx
c0019758:	83 ec 1c             	sub    esp,0x1c
c001975b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001975f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019763:	53                   	push   ebx
c0019764:	56                   	push   esi
c0019765:	e8 c0 ff ff ff       	call   c001972a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001976a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001976e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019774:	83 ec 0c             	sub    esp,0xc
c0019777:	c1 e5 0a             	shl    ebp,0xa
c001977a:	01 e8                	add    eax,ebp
c001977c:	89 03                	mov    DWORD PTR [ebx],eax
c001977e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019780:	68 00 04 00 00       	push   0x400
c0019785:	6a 00                	push   0x0
c0019787:	50                   	push   eax
c0019788:	e8 43 6d fe ff       	call   c00004d0 <memset>
c001978d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019793:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019797:	01 e8                	add    eax,ebp
c0019799:	83 c4 1c             	add    esp,0x1c
c001979c:	89 03                	mov    DWORD PTR [ebx],eax
c001979e:	c1 e2 08             	shl    edx,0x8
c00197a1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00197a8:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c00197ae:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00197b4:	01 f8                	add    eax,edi
c00197b6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00197b9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00197bc:	68 00 01 00 00       	push   0x100
c00197c1:	6a 00                	push   0x0
c00197c3:	50                   	push   eax
c00197c4:	e8 07 6d fe ff       	call   c00004d0 <memset>
c00197c9:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c00197cf:	01 fa                	add    edx,edi
c00197d1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00197d5:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00197d8:	c1 e7 0d             	shl    edi,0xd
c00197db:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00197e2:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c00197e8:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c00197ee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00197f2:	31 ff                	xor    edi,edi
c00197f4:	83 c4 10             	add    esp,0x10
c00197f7:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c00197fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019801:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019807:	83 c5 20             	add    ebp,0x20
c001980a:	01 f8                	add    eax,edi
c001980c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001980f:	52                   	push   edx
c0019810:	68 00 01 00 00       	push   0x100
c0019815:	6a 00                	push   0x0
c0019817:	50                   	push   eax
c0019818:	e8 b3 6c fe ff       	call   c00004d0 <memset>
c001981d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019821:	83 c4 10             	add    esp,0x10
c0019824:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001982a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019831:	01 f8                	add    eax,edi
c0019833:	81 c7 00 01 00 00    	add    edi,0x100
c0019839:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001983c:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019842:	75 b3                	jne    c00197f7 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019844:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001984b:	50                   	push   eax
c001984c:	50                   	push   eax
c001984d:	53                   	push   ebx
c001984e:	56                   	push   esi
c001984f:	e8 b6 fe ff ff       	call   c001970a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019854:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001985b:	83 c4 2c             	add    esp,0x2c
c001985e:	5b                   	pop    ebx
c001985f:	5e                   	pop    esi
c0019860:	5f                   	pop    edi
c0019861:	5d                   	pop    ebp
c0019862:	c3                   	ret    
c0019863:	90                   	nop

c0019864 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019864:	55                   	push   ebp
c0019865:	57                   	push   edi
c0019866:	56                   	push   esi
c0019867:	53                   	push   ebx
c0019868:	31 db                	xor    ebx,ebx
c001986a:	83 ec 0c             	sub    esp,0xc
c001986d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019871:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019875:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019878:	f7 c7 01 00 00 00    	test   edi,0x1
c001987e:	74 7a                	je     c00198fa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019880:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019884:	89 d8                	mov    eax,ebx
c0019886:	c1 e0 07             	shl    eax,0x7
c0019889:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019890:	55                   	push   ebp
c0019891:	56                   	push   esi
c0019892:	e8 2b fe ff ff       	call   c00196c2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019897:	5a                   	pop    edx
c0019898:	83 f8 01             	cmp    eax,0x1
c001989b:	59                   	pop    ecx
c001989c:	75 21                	jne    c00198bf <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001989e:	50                   	push   eax
c001989f:	53                   	push   ebx
c00198a0:	55                   	push   ebp
c00198a1:	56                   	push   esi
c00198a2:	e8 ad fe ff ff       	call   c0019754 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00198a7:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00198ae:	e8 06 df fe ff       	call   c00077b9 <malloc>
c00198b3:	89 c5                	mov    ebp,eax
c00198b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00198b8:	e8 43 0d 00 00       	call   c001a600 <SATA::SATA()>
c00198bd:	eb 24                	jmp    c00198e3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c00198bf:	83 f8 04             	cmp    eax,0x4
c00198c2:	75 36                	jne    c00198fa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c00198c4:	51                   	push   ecx
c00198c5:	53                   	push   ebx
c00198c6:	55                   	push   ebp
c00198c7:	56                   	push   esi
c00198c8:	e8 87 fe ff ff       	call   c0019754 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00198cd:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c00198d4:	e8 e0 de fe ff       	call   c00077b9 <malloc>
c00198d9:	89 c5                	mov    ebp,eax
c00198db:	89 04 24             	mov    DWORD PTR [esp],eax
c00198de:	e8 79 10 00 00       	call   c001a95c <SATAPI::SATAPI()>
c00198e3:	58                   	pop    eax
c00198e4:	5a                   	pop    edx
c00198e5:	55                   	push   ebp
c00198e6:	56                   	push   esi
c00198e7:	e8 a8 1f ff ff       	call   c000b894 <Device::addChild(Device*)>
c00198ec:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00198ef:	56                   	push   esi
c00198f0:	6a 00                	push   0x0
c00198f2:	53                   	push   ebx
c00198f3:	55                   	push   ebp
c00198f4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00198f7:	83 c4 20             	add    esp,0x20
c00198fa:	d1 ef                	shr    edi,1
c00198fc:	43                   	inc    ebx
c00198fd:	83 fb 20             	cmp    ebx,0x20
c0019900:	0f 85 72 ff ff ff    	jne    c0019878 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019906:	83 c4 0c             	add    esp,0xc
c0019909:	5b                   	pop    ebx
c001990a:	5e                   	pop    esi
c001990b:	5f                   	pop    edi
c001990c:	5d                   	pop    ebp
c001990d:	c3                   	ret    

c001990e <SATABus::open(int, int, void*)>:
c001990e:	83 ec 14             	sub    esp,0x14
c0019911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019915:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001991b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019921:	52                   	push   edx
c0019922:	50                   	push   eax
c0019923:	e8 3c ff ff ff       	call   c0019864 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019928:	31 c0                	xor    eax,eax
c001992a:	83 c4 1c             	add    esp,0x1c
c001992d:	c3                   	ret    

c001992e <ATA::close(int, int, void*)>:
c001992e:	83 ec 0c             	sub    esp,0xc
c0019931:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019935:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001993b:	85 c0                	test   eax,eax
c001993d:	74 0c                	je     c001994b <ATA::close(int, int, void*)+0x1d>
c001993f:	83 ec 0c             	sub    esp,0xc
c0019942:	8b 10                	mov    edx,DWORD PTR [eax]
c0019944:	50                   	push   eax
c0019945:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019948:	83 c4 10             	add    esp,0x10
c001994b:	31 c0                	xor    eax,eax
c001994d:	83 c4 0c             	add    esp,0xc
c0019950:	c3                   	ret    
c0019951:	90                   	nop

c0019952 <ATA::powerSaving(PowerSavingLevel)>:
c0019952:	c3                   	ret    
c0019953:	90                   	nop

c0019954 <ATA::ATA()>:
c0019954:	83 ec 0c             	sub    esp,0xc
c0019957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001995b:	83 ec 04             	sub    esp,0x4
c001995e:	68 00 02 00 00       	push   0x200
c0019963:	68 29 ee 01 c0       	push   0xc001ee29
c0019968:	50                   	push   eax
c0019969:	e8 f4 22 ff ff       	call   c000bc62 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001996e:	83 c4 10             	add    esp,0x10
c0019971:	ba 9c ed 01 c0       	mov    edx,0xc001ed9c
c0019976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001997a:	89 10                	mov    DWORD PTR [eax],edx
c001997c:	90                   	nop
c001997d:	83 c4 0c             	add    esp,0xc
c0019980:	c3                   	ret    
c0019981:	90                   	nop

c0019982 <ATA::flush(bool)>:
c0019982:	53                   	push   ebx
c0019983:	83 ec 08             	sub    esp,0x8
c0019986:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001998b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001998f:	19 c0                	sbb    eax,eax
c0019991:	83 e0 fd             	and    eax,0xfffffffd
c0019994:	05 ea 00 00 00       	add    eax,0xea
c0019999:	50                   	push   eax
c001999a:	6a 07                	push   0x7
c001999c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00199a3:	50                   	push   eax
c00199a4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00199aa:	e8 59 f1 ff ff       	call   c0018b08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00199af:	83 c4 0c             	add    esp,0xc
c00199b2:	6a 00                	push   0x0
c00199b4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00199bb:	50                   	push   eax
c00199bc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00199c2:	e8 df fb ff ff       	call   c00195a6 <IDE::polling(unsigned char, unsigned int)>
c00199c7:	83 c4 18             	add    esp,0x18
c00199ca:	5b                   	pop    ebx
c00199cb:	c3                   	ret    

c00199cc <ATA::readyForCommand()>:
c00199cc:	56                   	push   esi
c00199cd:	53                   	push   ebx
c00199ce:	53                   	push   ebx
c00199cf:	31 db                	xor    ebx,ebx
c00199d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00199d5:	51                   	push   ecx
c00199d6:	6a 0c                	push   0xc
c00199d8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00199df:	50                   	push   eax
c00199e0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00199e6:	e8 dd f1 ff ff       	call   c0018bc8 <IDE::read(unsigned char, unsigned char)>
c00199eb:	83 c4 10             	add    esp,0x10
c00199ee:	a8 88                	test   al,0x88
c00199f0:	74 1f                	je     c0019a11 <ATA::readyForCommand()+0x45>
c00199f2:	43                   	inc    ebx
c00199f3:	83 fb 63             	cmp    ebx,0x63
c00199f6:	7e dd                	jle    c00199d5 <ATA::readyForCommand()+0x9>
c00199f8:	83 ec 0c             	sub    esp,0xc
c00199fb:	6a 0a                	push   0xa
c00199fd:	e8 da 9b ff ff       	call   c00135dc <milliTenthSleep(unsigned int)>
c0019a02:	83 c4 10             	add    esp,0x10
c0019a05:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019a0b:	75 c8                	jne    c00199d5 <ATA::readyForCommand()+0x9>
c0019a0d:	31 c0                	xor    eax,eax
c0019a0f:	eb 02                	jmp    c0019a13 <ATA::readyForCommand()+0x47>
c0019a11:	b0 01                	mov    al,0x1
c0019a13:	5a                   	pop    edx
c0019a14:	5b                   	pop    ebx
c0019a15:	5e                   	pop    esi
c0019a16:	c3                   	ret    
c0019a17:	90                   	nop

c0019a18 <ATA::access(unsigned long long, int, void*, bool)>:
c0019a18:	55                   	push   ebp
c0019a19:	57                   	push   edi
c0019a1a:	56                   	push   esi
c0019a1b:	53                   	push   ebx
c0019a1c:	83 ec 2c             	sub    esp,0x2c
c0019a1f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019a23:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019a27:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019a2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019a2f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019a33:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019a37:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019a3b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019a41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019a45:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019a4b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019a4f:	c1 e0 06             	shl    eax,0x6
c0019a52:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0019a5a:	74 5d                	je     c0019ab9 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0019a5c:	89 fa                	mov    edx,edi
c0019a5e:	89 f0                	mov    eax,esi
c0019a60:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0019a64:	c1 ea 1c             	shr    edx,0x1c
c0019a67:	89 d1                	mov    ecx,edx
c0019a69:	09 c1                	or     ecx,eax
c0019a6b:	74 25                	je     c0019a92 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0019a6d:	31 ed                	xor    ebp,ebp
c0019a6f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0019a76:	89 fa                	mov    edx,edi
c0019a78:	89 f0                	mov    eax,esi
c0019a7a:	0f ad d0             	shrd   eax,edx,cl
c0019a7d:	d3 ea                	shr    edx,cl
c0019a7f:	f6 c1 20             	test   cl,0x20
c0019a82:	74 02                	je     c0019a86 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0019a84:	89 d0                	mov    eax,edx
c0019a86:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0019a8a:	45                   	inc    ebp
c0019a8b:	83 fd 06             	cmp    ebp,0x6
c0019a8e:	75 df                	jne    c0019a6f <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0019a90:	eb 76                	jmp    c0019b08 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0019a92:	89 f0                	mov    eax,esi
c0019a94:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0019a99:	89 fa                	mov    edx,edi
c0019a9b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019aa2:	0f ac d0 10          	shrd   eax,edx,0x10
c0019aa6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019aab:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019aaf:	c1 ee 18             	shr    esi,0x18
c0019ab2:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0019ab7:	eb 56                	jmp    c0019b0f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019ab9:	6a 00                	push   0x0
c0019abb:	6a 3f                	push   0x3f
c0019abd:	57                   	push   edi
c0019abe:	56                   	push   esi
c0019abf:	e8 1c 22 00 00       	call   c001bce0 <__umoddi3>
c0019ac4:	83 c4 10             	add    esp,0x10
c0019ac7:	40                   	inc    eax
c0019ac8:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0019acc:	6a 00                	push   0x0
c0019ace:	68 f0 03 00 00       	push   0x3f0
c0019ad3:	57                   	push   edi
c0019ad4:	56                   	push   esi
c0019ad5:	e8 06 21 00 00       	call   c001bbe0 <__udivdi3>
c0019ada:	83 c4 10             	add    esp,0x10
c0019add:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0019ae2:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019ae9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019aee:	6a 00                	push   0x0
c0019af0:	6a 3f                	push   0x3f
c0019af2:	57                   	push   edi
c0019af3:	56                   	push   esi
c0019af4:	e8 e7 20 00 00       	call   c001bbe0 <__udivdi3>
c0019af9:	83 c4 10             	add    esp,0x10
c0019afc:	89 c6                	mov    esi,eax
c0019afe:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0019b03:	83 e6 0f             	and    esi,0xf
c0019b06:	eb 07                	jmp    c0019b0f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019b08:	31 f6                	xor    esi,esi
c0019b0a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0019b0f:	bf 01 00 00 00       	mov    edi,0x1
c0019b14:	50                   	push   eax
c0019b15:	6a 00                	push   0x0
c0019b17:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019b1e:	50                   	push   eax
c0019b1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019b23:	e8 ee f1 ff ff       	call   c0018d16 <IDE::enableIRQs(unsigned char, bool)>
c0019b28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b2b:	e8 9c fe ff ff       	call   c00199cc <ATA::readyForCommand()>
c0019b30:	83 c4 10             	add    esp,0x10
c0019b33:	84 c0                	test   al,al
c0019b35:	0f 84 4e 02 00 00    	je     c0019d89 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c0019b3b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0019b41:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0019b47:	c1 e0 04             	shl    eax,0x4
c0019b4a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0019b51:	09 c6                	or     esi,eax
c0019b53:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0019b58:	75 05                	jne    c0019b5f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0019b5a:	83 ce a0             	or     esi,0xffffffa0
c0019b5d:	eb 03                	jmp    c0019b62 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0019b5f:	83 ce e0             	or     esi,0xffffffe0
c0019b62:	89 f0                	mov    eax,esi
c0019b64:	0f b6 f0             	movzx  esi,al
c0019b67:	56                   	push   esi
c0019b68:	6a 06                	push   0x6
c0019b6a:	51                   	push   ecx
c0019b6b:	52                   	push   edx
c0019b6c:	e8 97 ef ff ff       	call   c0018b08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019b71:	83 c4 10             	add    esp,0x10
c0019b74:	6a 00                	push   0x0
c0019b76:	6a 01                	push   0x1
c0019b78:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019b7f:	50                   	push   eax
c0019b80:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019b86:	e8 7d ef ff ff       	call   c0018b08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019b8b:	83 c4 10             	add    esp,0x10
c0019b8e:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0019b93:	75 6e                	jne    c0019c03 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0019b95:	6a 00                	push   0x0
c0019b97:	6a 08                	push   0x8
c0019b99:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019ba0:	50                   	push   eax
c0019ba1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019ba7:	e8 5c ef ff ff       	call   c0018b08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019bac:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0019bb1:	50                   	push   eax
c0019bb2:	6a 09                	push   0x9
c0019bb4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019bbb:	50                   	push   eax
c0019bbc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019bc2:	e8 41 ef ff ff       	call   c0018b08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019bc7:	83 c4 20             	add    esp,0x20
c0019bca:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0019bcf:	50                   	push   eax
c0019bd0:	6a 0a                	push   0xa
c0019bd2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019bd9:	50                   	push   eax
c0019bda:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019be0:	e8 23 ef ff ff       	call   c0018b08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019be5:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0019bea:	50                   	push   eax
c0019beb:	6a 0b                	push   0xb
c0019bed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019bf4:	50                   	push   eax
c0019bf5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019bfb:	e8 08 ef ff ff       	call   c0018b08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c00:	83 c4 20             	add    esp,0x20
c0019c03:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0019c08:	50                   	push   eax
c0019c09:	6a 02                	push   0x2
c0019c0b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c12:	50                   	push   eax
c0019c13:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c19:	e8 ea ee ff ff       	call   c0018b08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c1e:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0019c23:	50                   	push   eax
c0019c24:	6a 03                	push   0x3
c0019c26:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c2d:	50                   	push   eax
c0019c2e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c34:	e8 cf ee ff ff       	call   c0018b08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c39:	83 c4 20             	add    esp,0x20
c0019c3c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0019c41:	50                   	push   eax
c0019c42:	6a 04                	push   0x4
c0019c44:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c4b:	50                   	push   eax
c0019c4c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c52:	e8 b1 ee ff ff       	call   c0018b08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c57:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c5c:	50                   	push   eax
c0019c5d:	6a 05                	push   0x5
c0019c5f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c66:	50                   	push   eax
c0019c67:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c6d:	e8 96 ee ff ff       	call   c0018b08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c72:	83 c4 20             	add    esp,0x20
c0019c75:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0019c7a:	0f 94 c0             	sete   al
c0019c7d:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0019c82:	74 09                	je     c0019c8d <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0019c84:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0019c8b:	eb 07                	jmp    c0019c94 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0019c8d:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0019c94:	0f b6 c0             	movzx  eax,al
c0019c97:	50                   	push   eax
c0019c98:	6a 07                	push   0x7
c0019c9a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019ca1:	50                   	push   eax
c0019ca2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019ca8:	e8 5b ee ff ff       	call   c0018b08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019cad:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0019cb1:	83 c4 10             	add    esp,0x10
c0019cb4:	85 f6                	test   esi,esi
c0019cb6:	0f 84 ae 00 00 00    	je     c0019d6a <ATA::access(unsigned long long, int, void*, bool)+0x352>
c0019cbc:	50                   	push   eax
c0019cbd:	6a 01                	push   0x1
c0019cbf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019cc6:	50                   	push   eax
c0019cc7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019ccd:	e8 d4 f8 ff ff       	call   c00195a6 <IDE::polling(unsigned char, unsigned int)>
c0019cd2:	83 c4 10             	add    esp,0x10
c0019cd5:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0019cdb:	84 c0                	test   al,al
c0019cdd:	74 20                	je     c0019cff <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c0019cdf:	0f b6 f8             	movzx  edi,al
c0019ce2:	0f b6 d2             	movzx  edx,dl
c0019ce5:	57                   	push   edi
c0019ce6:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0019ced:	50                   	push   eax
c0019cee:	52                   	push   edx
c0019cef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019cf5:	e8 fc f7 ff ff       	call   c00194f6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0019cfa:	e9 87 00 00 00       	jmp    c0019d86 <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c0019cff:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0019d04:	74 33                	je     c0019d39 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c0019d06:	31 ed                	xor    ebp,ebp
c0019d08:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0019d0c:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0019d10:	50                   	push   eax
c0019d11:	50                   	push   eax
c0019d12:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019d19:	50                   	push   eax
c0019d1a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d20:	e8 d1 ed ff ff       	call   c0018af6 <IDE::getBase(unsigned char)>
c0019d25:	89 c2                	mov    edx,eax
c0019d27:	89 f8                	mov    eax,edi
c0019d29:	66 ef                	out    dx,ax
c0019d2b:	45                   	inc    ebp
c0019d2c:	83 c4 10             	add    esp,0x10
c0019d2f:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0019d35:	75 d1                	jne    c0019d08 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c0019d37:	eb 23                	jmp    c0019d5c <ATA::access(unsigned long long, int, void*, bool)+0x344>
c0019d39:	0f b6 d2             	movzx  edx,dl
c0019d3c:	51                   	push   ecx
c0019d3d:	51                   	push   ecx
c0019d3e:	52                   	push   edx
c0019d3f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d45:	e8 ac ed ff ff       	call   c0018af6 <IDE::getBase(unsigned char)>
c0019d4a:	b9 00 01 00 00       	mov    ecx,0x100
c0019d4f:	89 c2                	mov    edx,eax
c0019d51:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0019d55:	fc                   	cld    
c0019d56:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0019d59:	83 c4 10             	add    esp,0x10
c0019d5c:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0019d64:	4e                   	dec    esi
c0019d65:	e9 4a ff ff ff       	jmp    c0019cb4 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0019d6a:	31 ff                	xor    edi,edi
c0019d6c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0019d71:	74 16                	je     c0019d89 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c0019d73:	50                   	push   eax
c0019d74:	50                   	push   eax
c0019d75:	31 c0                	xor    eax,eax
c0019d77:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0019d7c:	0f 94 c0             	sete   al
c0019d7f:	50                   	push   eax
c0019d80:	53                   	push   ebx
c0019d81:	e8 fc fb ff ff       	call   c0019982 <ATA::flush(bool)>
c0019d86:	83 c4 10             	add    esp,0x10
c0019d89:	83 c4 2c             	add    esp,0x2c
c0019d8c:	89 f8                	mov    eax,edi
c0019d8e:	5b                   	pop    ebx
c0019d8f:	5e                   	pop    esi
c0019d90:	5f                   	pop    edi
c0019d91:	5d                   	pop    ebp
c0019d92:	c3                   	ret    
c0019d93:	90                   	nop

c0019d94 <ATA::read(unsigned long long, int, void*)>:
c0019d94:	57                   	push   edi
c0019d95:	b8 04 00 00 00       	mov    eax,0x4
c0019d9a:	56                   	push   esi
c0019d9b:	53                   	push   ebx
c0019d9c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019da0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019da4:	8d 7a ff             	lea    edi,[edx-0x1]
c0019da7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019dab:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019daf:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0019db5:	77 25                	ja     c0019ddc <ATA::read(unsigned long long, int, void*)+0x48>
c0019db7:	b8 06 00 00 00       	mov    eax,0x6
c0019dbc:	85 f6                	test   esi,esi
c0019dbe:	74 1c                	je     c0019ddc <ATA::read(unsigned long long, int, void*)+0x48>
c0019dc0:	50                   	push   eax
c0019dc1:	50                   	push   eax
c0019dc2:	6a 00                	push   0x0
c0019dc4:	56                   	push   esi
c0019dc5:	52                   	push   edx
c0019dc6:	53                   	push   ebx
c0019dc7:	51                   	push   ecx
c0019dc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019dcc:	e8 47 fc ff ff       	call   c0019a18 <ATA::access(unsigned long long, int, void*, bool)>
c0019dd1:	83 c4 20             	add    esp,0x20
c0019dd4:	85 c0                	test   eax,eax
c0019dd6:	0f 95 c0             	setne  al
c0019dd9:	0f b6 c0             	movzx  eax,al
c0019ddc:	5b                   	pop    ebx
c0019ddd:	5e                   	pop    esi
c0019dde:	5f                   	pop    edi
c0019ddf:	c3                   	ret    

c0019de0 <ATA::write(unsigned long long, int, void*)>:
c0019de0:	57                   	push   edi
c0019de1:	b8 04 00 00 00       	mov    eax,0x4
c0019de6:	56                   	push   esi
c0019de7:	53                   	push   ebx
c0019de8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019dec:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019df0:	8d 7a ff             	lea    edi,[edx-0x1]
c0019df3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019df7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019dfb:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0019e01:	77 25                	ja     c0019e28 <ATA::write(unsigned long long, int, void*)+0x48>
c0019e03:	b8 06 00 00 00       	mov    eax,0x6
c0019e08:	85 f6                	test   esi,esi
c0019e0a:	74 1c                	je     c0019e28 <ATA::write(unsigned long long, int, void*)+0x48>
c0019e0c:	50                   	push   eax
c0019e0d:	50                   	push   eax
c0019e0e:	6a 01                	push   0x1
c0019e10:	56                   	push   esi
c0019e11:	52                   	push   edx
c0019e12:	53                   	push   ebx
c0019e13:	51                   	push   ecx
c0019e14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019e18:	e8 fb fb ff ff       	call   c0019a18 <ATA::access(unsigned long long, int, void*, bool)>
c0019e1d:	83 c4 20             	add    esp,0x20
c0019e20:	85 c0                	test   eax,eax
c0019e22:	0f 95 c0             	setne  al
c0019e25:	0f b6 c0             	movzx  eax,al
c0019e28:	5b                   	pop    ebx
c0019e29:	5e                   	pop    esi
c0019e2a:	5f                   	pop    edi
c0019e2b:	c3                   	ret    

c0019e2c <ATA::detectCHS()>:
c0019e2c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019e30:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0019e36:	c1 e0 06             	shl    eax,0x6
c0019e39:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0019e3f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0019e49:	c7 44 24 04 80 ed 01 c0 	mov    DWORD PTR [esp+0x4],0xc001ed80
c0019e51:	e9 75 62 ff ff       	jmp    c00100cb <KePanic(char const*)>

c0019e56 <ATA::open(int, int, void*)>:
c0019e56:	53                   	push   ebx
c0019e57:	83 ec 08             	sub    esp,0x8
c0019e5a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e5e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019e62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019e66:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0019e6c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0019e72:	c1 e0 06             	shl    eax,0x6
c0019e75:	01 d0                	add    eax,edx
c0019e77:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0019e7e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0019e84:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0019e8b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0019e95:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0019e9b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0019ea2:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0019ea9:	75 0c                	jne    c0019eb7 <ATA::open(int, int, void*)+0x61>
c0019eab:	83 ec 0c             	sub    esp,0xc
c0019eae:	53                   	push   ebx
c0019eaf:	e8 78 ff ff ff       	call   c0019e2c <ATA::detectCHS()>
c0019eb4:	83 c4 10             	add    esp,0x10
c0019eb7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0019ebd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019ec3:	c1 e0 06             	shl    eax,0x6
c0019ec6:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0019ecd:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0019ed7:	d1 e8                	shr    eax,1
c0019ed9:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0019edf:	6a 04                	push   0x4
c0019ee1:	6a 0c                	push   0xc
c0019ee3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019eea:	50                   	push   eax
c0019eeb:	52                   	push   edx
c0019eec:	e8 17 ec ff ff       	call   c0018b08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019ef1:	90                   	nop
c0019ef2:	90                   	nop
c0019ef3:	6a 00                	push   0x0
c0019ef5:	6a 0c                	push   0xc
c0019ef7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019efe:	50                   	push   eax
c0019eff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f05:	e8 fe eb ff ff       	call   c0018b08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019f0a:	83 c4 14             	add    esp,0x14
c0019f0d:	53                   	push   ebx
c0019f0e:	e8 b7 1d ff ff       	call   c000bcca <PhysicalDisk::startCache()>
c0019f13:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f16:	e8 3b 2e ff ff       	call   c000cd56 <createPartitionsForDisk(PhysicalDisk*)>
c0019f1b:	31 c0                	xor    eax,eax
c0019f1d:	83 c4 18             	add    esp,0x18
c0019f20:	5b                   	pop    ebx
c0019f21:	c3                   	ret    

c0019f22 <ATAPI::write(unsigned long long, int, void*)>:
c0019f22:	b8 03 00 00 00       	mov    eax,0x3
c0019f27:	c3                   	ret    

c0019f28 <ATAPI::close(int, int, void*)>:
c0019f28:	83 ec 0c             	sub    esp,0xc
c0019f2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f2f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019f35:	85 c0                	test   eax,eax
c0019f37:	74 0c                	je     c0019f45 <ATAPI::close(int, int, void*)+0x1d>
c0019f39:	83 ec 0c             	sub    esp,0xc
c0019f3c:	8b 10                	mov    edx,DWORD PTR [eax]
c0019f3e:	50                   	push   eax
c0019f3f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019f42:	83 c4 10             	add    esp,0x10
c0019f45:	31 c0                	xor    eax,eax
c0019f47:	83 c4 0c             	add    esp,0xc
c0019f4a:	c3                   	ret    
c0019f4b:	90                   	nop

c0019f4c <ATAPI::ATAPI()>:
c0019f4c:	83 ec 0c             	sub    esp,0xc
c0019f4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f53:	83 ec 04             	sub    esp,0x4
c0019f56:	68 00 08 00 00       	push   0x800
c0019f5b:	68 c9 ee 01 c0       	push   0xc001eec9
c0019f60:	50                   	push   eax
c0019f61:	e8 fc 1c ff ff       	call   c000bc62 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019f66:	83 c4 10             	add    esp,0x10
c0019f69:	ba e4 ed 01 c0       	mov    edx,0xc001ede4
c0019f6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f72:	89 10                	mov    DWORD PTR [eax],edx
c0019f74:	90                   	nop
c0019f75:	83 c4 0c             	add    esp,0xc
c0019f78:	c3                   	ret    
c0019f79:	90                   	nop

c0019f7a <ATAPI::readyForCommand()>:
c0019f7a:	56                   	push   esi
c0019f7b:	53                   	push   ebx
c0019f7c:	53                   	push   ebx
c0019f7d:	31 db                	xor    ebx,ebx
c0019f7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019f83:	51                   	push   ecx
c0019f84:	6a 0c                	push   0xc
c0019f86:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019f8d:	50                   	push   eax
c0019f8e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019f94:	e8 2f ec ff ff       	call   c0018bc8 <IDE::read(unsigned char, unsigned char)>
c0019f99:	83 c4 10             	add    esp,0x10
c0019f9c:	a8 88                	test   al,0x88
c0019f9e:	74 25                	je     c0019fc5 <ATAPI::readyForCommand()+0x4b>
c0019fa0:	43                   	inc    ebx
c0019fa1:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c0019fa7:	7e da                	jle    c0019f83 <ATAPI::readyForCommand()+0x9>
c0019fa9:	83 ec 0c             	sub    esp,0xc
c0019fac:	68 5e 01 00 00       	push   0x15e
c0019fb1:	e8 26 96 ff ff       	call   c00135dc <milliTenthSleep(unsigned int)>
c0019fb6:	83 c4 10             	add    esp,0x10
c0019fb9:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c0019fbf:	75 c2                	jne    c0019f83 <ATAPI::readyForCommand()+0x9>
c0019fc1:	31 c0                	xor    eax,eax
c0019fc3:	eb 02                	jmp    c0019fc7 <ATAPI::readyForCommand()+0x4d>
c0019fc5:	b0 01                	mov    al,0x1
c0019fc7:	5a                   	pop    edx
c0019fc8:	5b                   	pop    ebx
c0019fc9:	5e                   	pop    esi
c0019fca:	c3                   	ret    
c0019fcb:	90                   	nop

c0019fcc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0019fcc:	55                   	push   ebp
c0019fcd:	57                   	push   edi
c0019fce:	56                   	push   esi
c0019fcf:	53                   	push   ebx
c0019fd0:	83 ec 20             	sub    esp,0x20
c0019fd3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0019fd7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0019fdb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0019fdf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019fe3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0019fe7:	6a 01                	push   0x1
c0019fe9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019ff0:	50                   	push   eax
c0019ff1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019ff7:	e8 1a ed ff ff       	call   c0018d16 <IDE::enableIRQs(unsigned char, bool)>
c0019ffc:	5e                   	pop    esi
c0019ffd:	58                   	pop    eax
c0019ffe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a005:	50                   	push   eax
c001a006:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a00c:	e8 d1 ea ff ff       	call   c0018ae2 <IDE::prepareInterrupt(unsigned char)>
c001a011:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a014:	e8 61 ff ff ff       	call   c0019f7a <ATAPI::readyForCommand()>
c001a019:	83 c4 10             	add    esp,0x10
c001a01c:	84 c0                	test   al,al
c001a01e:	75 0a                	jne    c001a02a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a020:	bb 01 00 00 00       	mov    ebx,0x1
c001a025:	e9 57 02 00 00       	jmp    c001a281 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a02a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a030:	c1 e0 04             	shl    eax,0x4
c001a033:	0f b6 c0             	movzx  eax,al
c001a036:	50                   	push   eax
c001a037:	6a 06                	push   0x6
c001a039:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a040:	50                   	push   eax
c001a041:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a047:	e8 bc ea ff ff       	call   c0018b08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a04c:	6a 00                	push   0x0
c001a04e:	6a 01                	push   0x1
c001a050:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a057:	50                   	push   eax
c001a058:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a05e:	e8 a5 ea ff ff       	call   c0018b08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a063:	83 c4 20             	add    esp,0x20
c001a066:	0f b6 c3             	movzx  eax,bl
c001a069:	0f b6 df             	movzx  ebx,bh
c001a06c:	50                   	push   eax
c001a06d:	6a 04                	push   0x4
c001a06f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a076:	50                   	push   eax
c001a077:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a07d:	e8 86 ea ff ff       	call   c0018b08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a082:	53                   	push   ebx
c001a083:	6a 05                	push   0x5
c001a085:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a08c:	50                   	push   eax
c001a08d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a093:	e8 70 ea ff ff       	call   c0018b08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a098:	83 c4 20             	add    esp,0x20
c001a09b:	68 a0 00 00 00       	push   0xa0
c001a0a0:	6a 07                	push   0x7
c001a0a2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a0a9:	50                   	push   eax
c001a0aa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a0b0:	e8 53 ea ff ff       	call   c0018b08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0b5:	83 c4 0c             	add    esp,0xc
c001a0b8:	6a 01                	push   0x1
c001a0ba:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a0c1:	50                   	push   eax
c001a0c2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a0c8:	e8 d9 f4 ff ff       	call   c00195a6 <IDE::polling(unsigned char, unsigned int)>
c001a0cd:	83 c4 10             	add    esp,0x10
c001a0d0:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a0d6:	84 c0                	test   al,al
c001a0d8:	74 23                	je     c001a0fd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a0da:	0f b6 d8             	movzx  ebx,al
c001a0dd:	0f b6 d2             	movzx  edx,dl
c001a0e0:	53                   	push   ebx
c001a0e1:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a0e8:	50                   	push   eax
c001a0e9:	52                   	push   edx
c001a0ea:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a0f0:	e8 01 f4 ff ff       	call   c00194f6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a0f5:	83 c4 10             	add    esp,0x10
c001a0f8:	e9 84 01 00 00       	jmp    c001a281 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a0fd:	0f b6 d2             	movzx  edx,dl
c001a100:	53                   	push   ebx
c001a101:	53                   	push   ebx
c001a102:	52                   	push   edx
c001a103:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a109:	e8 e8 e9 ff ff       	call   c0018af6 <IDE::getBase(unsigned char)>
c001a10e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a112:	b9 06 00 00 00       	mov    ecx,0x6
c001a117:	89 c2                	mov    edx,eax
c001a119:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a11c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a120:	83 c4 10             	add    esp,0x10
c001a123:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a129:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a130:	85 db                	test   ebx,ebx
c001a132:	0f 84 ec 00 00 00    	je     c001a224 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a138:	51                   	push   ecx
c001a139:	51                   	push   ecx
c001a13a:	52                   	push   edx
c001a13b:	50                   	push   eax
c001a13c:	e8 35 eb ff ff       	call   c0018c76 <IDE::waitInterrupt(unsigned char)>
c001a141:	83 c4 10             	add    esp,0x10
c001a144:	84 c0                	test   al,al
c001a146:	0f 84 d4 fe ff ff    	je     c001a020 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a14c:	56                   	push   esi
c001a14d:	56                   	push   esi
c001a14e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a155:	50                   	push   eax
c001a156:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a15c:	e8 81 e9 ff ff       	call   c0018ae2 <IDE::prepareInterrupt(unsigned char)>
c001a161:	83 c4 0c             	add    esp,0xc
c001a164:	6a 04                	push   0x4
c001a166:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a16d:	50                   	push   eax
c001a16e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a174:	e8 4f ea ff ff       	call   c0018bc8 <IDE::read(unsigned char, unsigned char)>
c001a179:	83 c4 0c             	add    esp,0xc
c001a17c:	89 c6                	mov    esi,eax
c001a17e:	6a 05                	push   0x5
c001a180:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a187:	50                   	push   eax
c001a188:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a18e:	e8 35 ea ff ff       	call   c0018bc8 <IDE::read(unsigned char, unsigned char)>
c001a193:	89 f1                	mov    ecx,esi
c001a195:	0f b6 c0             	movzx  eax,al
c001a198:	0f b6 f1             	movzx  esi,cl
c001a19b:	c1 e0 08             	shl    eax,0x8
c001a19e:	09 c6                	or     esi,eax
c001a1a0:	d1 fe                	sar    esi,1
c001a1a2:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a1a6:	83 c4 10             	add    esp,0x10
c001a1a9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a1ae:	74 41                	je     c001a1f1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a1b0:	31 c9                	xor    ecx,ecx
c001a1b2:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a1b8:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a1bf:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a1c3:	75 0a                	jne    c001a1cf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a1c5:	01 c9                	add    ecx,ecx
c001a1c7:	01 cd                	add    ebp,ecx
c001a1c9:	4b                   	dec    ebx
c001a1ca:	e9 54 ff ff ff       	jmp    c001a123 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a1cf:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a1d4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a1d8:	51                   	push   ecx
c001a1d9:	51                   	push   ecx
c001a1da:	52                   	push   edx
c001a1db:	50                   	push   eax
c001a1dc:	e8 15 e9 ff ff       	call   c0018af6 <IDE::getBase(unsigned char)>
c001a1e1:	89 c2                	mov    edx,eax
c001a1e3:	89 f0                	mov    eax,esi
c001a1e5:	66 ef                	out    dx,ax
c001a1e7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a1eb:	83 c4 10             	add    esp,0x10
c001a1ee:	41                   	inc    ecx
c001a1ef:	eb c1                	jmp    c001a1b2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a1f1:	31 f6                	xor    esi,esi
c001a1f3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a1f9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a200:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a204:	75 06                	jne    c001a20c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a206:	01 f6                	add    esi,esi
c001a208:	01 f5                	add    ebp,esi
c001a20a:	eb bd                	jmp    c001a1c9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a20c:	51                   	push   ecx
c001a20d:	51                   	push   ecx
c001a20e:	52                   	push   edx
c001a20f:	50                   	push   eax
c001a210:	e8 e1 e8 ff ff       	call   c0018af6 <IDE::getBase(unsigned char)>
c001a215:	89 c2                	mov    edx,eax
c001a217:	66 ed                	in     ax,dx
c001a219:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a21e:	83 c4 10             	add    esp,0x10
c001a221:	46                   	inc    esi
c001a222:	eb cf                	jmp    c001a1f3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a224:	51                   	push   ecx
c001a225:	51                   	push   ecx
c001a226:	52                   	push   edx
c001a227:	50                   	push   eax
c001a228:	e8 49 ea ff ff       	call   c0018c76 <IDE::waitInterrupt(unsigned char)>
c001a22d:	83 c4 10             	add    esp,0x10
c001a230:	84 c0                	test   al,al
c001a232:	0f 84 e8 fd ff ff    	je     c001a020 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a238:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a23d:	52                   	push   edx
c001a23e:	52                   	push   edx
c001a23f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a246:	50                   	push   eax
c001a247:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a24d:	e8 90 e8 ff ff       	call   c0018ae2 <IDE::prepareInterrupt(unsigned char)>
c001a252:	83 c4 10             	add    esp,0x10
c001a255:	50                   	push   eax
c001a256:	50                   	push   eax
c001a257:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a25e:	50                   	push   eax
c001a25f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a265:	e8 8c e8 ff ff       	call   c0018af6 <IDE::getBase(unsigned char)>
c001a26a:	8d 50 07             	lea    edx,[eax+0x7]
c001a26d:	ec                   	in     al,dx
c001a26e:	83 c4 10             	add    esp,0x10
c001a271:	a8 88                	test   al,0x88
c001a273:	74 0a                	je     c001a27f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a275:	4b                   	dec    ebx
c001a276:	75 dd                	jne    c001a255 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a278:	bb 02 00 00 00       	mov    ebx,0x2
c001a27d:	eb 02                	jmp    c001a281 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a27f:	31 db                	xor    ebx,ebx
c001a281:	83 c4 1c             	add    esp,0x1c
c001a284:	89 d8                	mov    eax,ebx
c001a286:	5b                   	pop    ebx
c001a287:	5e                   	pop    esi
c001a288:	5f                   	pop    edi
c001a289:	5d                   	pop    ebp
c001a28a:	c3                   	ret    
c001a28b:	90                   	nop

c001a28c <ATAPI::diskRemoved()>:
c001a28c:	53                   	push   ebx
c001a28d:	83 ec 14             	sub    esp,0x14
c001a290:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a294:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a29b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a2a1:	e8 2e 28 ff ff       	call   c000cad4 <LogicalDisk::unmount()>
c001a2a6:	58                   	pop    eax
c001a2a7:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a2ad:	e8 6a 31 ff ff       	call   c000d41c <VCache::writeWriteBuffer()>
c001a2b2:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a2b8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a2bc:	83 c4 18             	add    esp,0x18
c001a2bf:	5b                   	pop    ebx
c001a2c0:	e9 47 31 ff ff       	jmp    c000d40c <VCache::invalidateReadBuffer()>
c001a2c5:	90                   	nop

c001a2c6 <ATAPI::eject()>:
c001a2c6:	57                   	push   edi
c001a2c7:	b9 03 00 00 00       	mov    ecx,0x3
c001a2cc:	53                   	push   ebx
c001a2cd:	83 ec 14             	sub    esp,0x14
c001a2d0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a2d4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a2d8:	fc                   	cld    
c001a2d9:	31 c0                	xor    eax,eax
c001a2db:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a2dd:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a2e2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a2e7:	50                   	push   eax
c001a2e8:	50                   	push   eax
c001a2e9:	6a 00                	push   0x0
c001a2eb:	6a 00                	push   0x0
c001a2ed:	6a 00                	push   0x0
c001a2ef:	6a 02                	push   0x2
c001a2f1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a2f5:	50                   	push   eax
c001a2f6:	53                   	push   ebx
c001a2f7:	e8 d0 fc ff ff       	call   c0019fcc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a2fc:	83 c4 14             	add    esp,0x14
c001a2ff:	53                   	push   ebx
c001a300:	e8 87 ff ff ff       	call   c001a28c <ATAPI::diskRemoved()>
c001a305:	83 c4 24             	add    esp,0x24
c001a308:	31 c0                	xor    eax,eax
c001a30a:	5b                   	pop    ebx
c001a30b:	5f                   	pop    edi
c001a30c:	c3                   	ret    
c001a30d:	90                   	nop

c001a30e <ATAPI::diskInserted()>:
c001a30e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a312:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a319:	c3                   	ret    

c001a31a <ATAPI::detectMedia()>:
c001a31a:	56                   	push   esi
c001a31b:	53                   	push   ebx
c001a31c:	83 ec 28             	sub    esp,0x28
c001a31f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a323:	6a 0c                	push   0xc
c001a325:	6a 00                	push   0x0
c001a327:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a32b:	56                   	push   esi
c001a32c:	e8 9f 61 fe ff       	call   c00004d0 <memset>
c001a331:	58                   	pop    eax
c001a332:	5a                   	pop    edx
c001a333:	6a 00                	push   0x0
c001a335:	6a 00                	push   0x0
c001a337:	6a 00                	push   0x0
c001a339:	6a 00                	push   0x0
c001a33b:	56                   	push   esi
c001a33c:	53                   	push   ebx
c001a33d:	e8 8a fc ff ff       	call   c0019fcc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a342:	83 c4 1c             	add    esp,0x1c
c001a345:	6a 0c                	push   0xc
c001a347:	6a 00                	push   0x0
c001a349:	56                   	push   esi
c001a34a:	e8 81 61 fe ff       	call   c00004d0 <memset>
c001a34f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a354:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a359:	59                   	pop    ecx
c001a35a:	58                   	pop    eax
c001a35b:	6a 01                	push   0x1
c001a35d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a361:	50                   	push   eax
c001a362:	6a 00                	push   0x0
c001a364:	6a 12                	push   0x12
c001a366:	56                   	push   esi
c001a367:	53                   	push   ebx
c001a368:	e8 5f fc ff ff       	call   c0019fcc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a36d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a371:	83 c4 20             	add    esp,0x20
c001a374:	83 e0 7f             	and    eax,0x7f
c001a377:	3c 70                	cmp    al,0x70
c001a379:	74 15                	je     c001a390 <ATAPI::detectMedia()+0x76>
c001a37b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a382:	75 0c                	jne    c001a390 <ATAPI::detectMedia()+0x76>
c001a384:	83 ec 0c             	sub    esp,0xc
c001a387:	53                   	push   ebx
c001a388:	e8 81 ff ff ff       	call   c001a30e <ATAPI::diskInserted()>
c001a38d:	83 c4 10             	add    esp,0x10
c001a390:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a394:	83 e0 0f             	and    eax,0xf
c001a397:	3c 02                	cmp    al,0x2
c001a399:	75 1b                	jne    c001a3b6 <ATAPI::detectMedia()+0x9c>
c001a39b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a3a0:	75 2d                	jne    c001a3cf <ATAPI::detectMedia()+0xb5>
c001a3a2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a3a9:	74 24                	je     c001a3cf <ATAPI::detectMedia()+0xb5>
c001a3ab:	83 ec 0c             	sub    esp,0xc
c001a3ae:	53                   	push   ebx
c001a3af:	e8 d8 fe ff ff       	call   c001a28c <ATAPI::diskRemoved()>
c001a3b4:	eb 16                	jmp    c001a3cc <ATAPI::detectMedia()+0xb2>
c001a3b6:	84 c0                	test   al,al
c001a3b8:	75 15                	jne    c001a3cf <ATAPI::detectMedia()+0xb5>
c001a3ba:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a3c1:	75 0c                	jne    c001a3cf <ATAPI::detectMedia()+0xb5>
c001a3c3:	83 ec 0c             	sub    esp,0xc
c001a3c6:	53                   	push   ebx
c001a3c7:	e8 42 ff ff ff       	call   c001a30e <ATAPI::diskInserted()>
c001a3cc:	83 c4 10             	add    esp,0x10
c001a3cf:	83 c4 24             	add    esp,0x24
c001a3d2:	5b                   	pop    ebx
c001a3d3:	5e                   	pop    esi
c001a3d4:	c3                   	ret    
c001a3d5:	90                   	nop

c001a3d6 <ATAPI::open(int, int, void*)>:
c001a3d6:	56                   	push   esi
c001a3d7:	53                   	push   ebx
c001a3d8:	50                   	push   eax
c001a3d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a3dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a3e1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a3e5:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a3eb:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a3f1:	c1 e0 06             	shl    eax,0x6
c001a3f4:	01 d0                	add    eax,edx
c001a3f6:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001a3fd:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001a403:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001a40a:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a414:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a41a:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a421:	6a 04                	push   0x4
c001a423:	6a 0c                	push   0xc
c001a425:	51                   	push   ecx
c001a426:	52                   	push   edx
c001a427:	e8 dc e6 ff ff       	call   c0018b08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a42c:	90                   	nop
c001a42d:	90                   	nop
c001a42e:	6a 00                	push   0x0
c001a430:	6a 0c                	push   0xc
c001a432:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a439:	50                   	push   eax
c001a43a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a440:	e8 c3 e6 ff ff       	call   c0018b08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a445:	83 c4 14             	add    esp,0x14
c001a448:	68 74 01 00 00       	push   0x174
c001a44d:	e8 67 d3 fe ff       	call   c00077b9 <malloc>
c001a452:	83 c4 0c             	add    esp,0xc
c001a455:	89 c6                	mov    esi,eax
c001a457:	6a 00                	push   0x0
c001a459:	68 ff ff ff 7f       	push   0x7fffffff
c001a45e:	6a 00                	push   0x0
c001a460:	6a 00                	push   0x0
c001a462:	53                   	push   ebx
c001a463:	68 80 ef 01 c0       	push   0xc001ef80
c001a468:	50                   	push   eax
c001a469:	e8 b2 24 ff ff       	call   c000c920 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a46e:	83 c4 14             	add    esp,0x14
c001a471:	56                   	push   esi
c001a472:	e8 5f 25 ff ff       	call   c000c9d6 <LogicalDisk::assignDriveLetter()>
c001a477:	5a                   	pop    edx
c001a478:	0f be c0             	movsx  eax,al
c001a47b:	59                   	pop    ecx
c001a47c:	50                   	push   eax
c001a47d:	68 cc ed 01 c0       	push   0xc001edcc
c001a482:	e8 cd ff fe ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c001a487:	58                   	pop    eax
c001a488:	5a                   	pop    edx
c001a489:	56                   	push   esi
c001a48a:	53                   	push   ebx
c001a48b:	e8 04 14 ff ff       	call   c000b894 <Device::addChild(Device*)>
c001a490:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001a496:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a499:	e8 2c 18 ff ff       	call   c000bcca <PhysicalDisk::startCache()>
c001a49e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a4a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a4a8:	e8 6d fe ff ff       	call   c001a31a <ATAPI::detectMedia()>
c001a4ad:	83 c4 14             	add    esp,0x14
c001a4b0:	31 c0                	xor    eax,eax
c001a4b2:	5b                   	pop    ebx
c001a4b3:	5e                   	pop    esi
c001a4b4:	c3                   	ret    
c001a4b5:	90                   	nop

c001a4b6 <ATAPI::read(unsigned long long, int, void*)>:
c001a4b6:	55                   	push   ebp
c001a4b7:	57                   	push   edi
c001a4b8:	56                   	push   esi
c001a4b9:	53                   	push   ebx
c001a4ba:	83 ec 1c             	sub    esp,0x1c
c001a4bd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a4c1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a4c5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a4c9:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a4d0:	74 3c                	je     c001a50e <ATAPI::read(unsigned long long, int, void*)+0x58>
c001a4d2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a4d6:	b9 03 00 00 00       	mov    ecx,0x3
c001a4db:	fc                   	cld    
c001a4dc:	31 c0                	xor    eax,eax
c001a4de:	0f ce                	bswap  esi
c001a4e0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a4e2:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001a4e7:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001a4eb:	89 e8                	mov    eax,ebp
c001a4ed:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001a4f1:	50                   	push   eax
c001a4f2:	50                   	push   eax
c001a4f3:	55                   	push   ebp
c001a4f4:	c1 e5 0b             	shl    ebp,0xb
c001a4f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a4fb:	6a 00                	push   0x0
c001a4fd:	55                   	push   ebp
c001a4fe:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a502:	50                   	push   eax
c001a503:	53                   	push   ebx
c001a504:	e8 c3 fa ff ff       	call   c0019fcc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a509:	83 c4 20             	add    esp,0x20
c001a50c:	eb 1a                	jmp    c001a528 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001a50e:	83 ec 0c             	sub    esp,0xc
c001a511:	53                   	push   ebx
c001a512:	e8 03 fe ff ff       	call   c001a31a <ATAPI::detectMedia()>
c001a517:	83 c4 10             	add    esp,0x10
c001a51a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a521:	75 af                	jne    c001a4d2 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001a523:	b8 02 00 00 00       	mov    eax,0x2
c001a528:	83 c4 1c             	add    esp,0x1c
c001a52b:	5b                   	pop    ebx
c001a52c:	5e                   	pop    esi
c001a52d:	5f                   	pop    edi
c001a52e:	5d                   	pop    ebp
c001a52f:	c3                   	ret    

c001a530 <SATA::close(int, int, void*)>:
c001a530:	83 ec 0c             	sub    esp,0xc
c001a533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a537:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a53d:	85 c0                	test   eax,eax
c001a53f:	74 0c                	je     c001a54d <SATA::close(int, int, void*)+0x1d>
c001a541:	83 ec 0c             	sub    esp,0xc
c001a544:	8b 10                	mov    edx,DWORD PTR [eax]
c001a546:	50                   	push   eax
c001a547:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a54a:	83 c4 10             	add    esp,0x10
c001a54d:	31 c0                	xor    eax,eax
c001a54f:	83 c4 0c             	add    esp,0xc
c001a552:	c3                   	ret    
c001a553:	90                   	nop

c001a554 <SATA::powerSaving(PowerSavingLevel)>:
c001a554:	c3                   	ret    
c001a555:	90                   	nop

c001a556 <SATA::open(int, int, void*)>:
c001a556:	56                   	push   esi
c001a557:	53                   	push   ebx
c001a558:	50                   	push   eax
c001a559:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a55d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a561:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a56b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001a571:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001a57b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a57f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a589:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001a58f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a596:	e8 fa d4 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001a59b:	89 c6                	mov    esi,eax
c001a59d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a5a3:	81 c6 00 10 00 00    	add    esi,0x1000
c001a5a9:	e8 e7 d4 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001a5ae:	39 c6                	cmp    esi,eax
c001a5b0:	74 10                	je     c001a5c2 <SATA::open(int, int, void*)+0x6c>
c001a5b2:	83 ec 0c             	sub    esp,0xc
c001a5b5:	68 14 ee 01 c0       	push   0xc001ee14
c001a5ba:	e8 0c 5b ff ff       	call   c00100cb <KePanic(char const*)>
c001a5bf:	83 c4 10             	add    esp,0x10
c001a5c2:	83 ec 0c             	sub    esp,0xc
c001a5c5:	6a 02                	push   0x2
c001a5c7:	e8 35 ec fe ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c001a5cc:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a5d2:	6a 03                	push   0x3
c001a5d4:	50                   	push   eax
c001a5d5:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001a5db:	ff 35 30 05 02 c0    	push   DWORD PTR ds:0xc0020530
c001a5e1:	e8 b0 f2 fe ff       	call   c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>
c001a5e6:	83 c4 14             	add    esp,0x14
c001a5e9:	53                   	push   ebx
c001a5ea:	e8 db 16 ff ff       	call   c000bcca <PhysicalDisk::startCache()>
c001a5ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a5f2:	e8 5f 27 ff ff       	call   c000cd56 <createPartitionsForDisk(PhysicalDisk*)>
c001a5f7:	83 c4 14             	add    esp,0x14
c001a5fa:	31 c0                	xor    eax,eax
c001a5fc:	5b                   	pop    ebx
c001a5fd:	5e                   	pop    esi
c001a5fe:	c3                   	ret    
c001a5ff:	90                   	nop

c001a600 <SATA::SATA()>:
c001a600:	83 ec 0c             	sub    esp,0xc
c001a603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a607:	83 ec 04             	sub    esp,0x4
c001a60a:	68 00 02 00 00       	push   0x200
c001a60f:	68 28 ee 01 c0       	push   0xc001ee28
c001a614:	50                   	push   eax
c001a615:	e8 48 16 ff ff       	call   c000bc62 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a61a:	83 c4 10             	add    esp,0x10
c001a61d:	ba 98 ee 01 c0       	mov    edx,0xc001ee98
c001a622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a626:	89 10                	mov    DWORD PTR [eax],edx
c001a628:	90                   	nop
c001a629:	83 c4 0c             	add    esp,0xc
c001a62c:	c3                   	ret    
c001a62d:	90                   	nop

c001a62e <SATA::access(unsigned long long, int, void*, bool)>:
c001a62e:	55                   	push   ebp
c001a62f:	57                   	push   edi
c001a630:	56                   	push   esi
c001a631:	53                   	push   ebx
c001a632:	83 ec 2c             	sub    esp,0x2c
c001a635:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001a639:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001a63d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a641:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a645:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a649:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001a64e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a652:	7e 10                	jle    c001a664 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001a654:	83 ec 0c             	sub    esp,0xc
c001a657:	68 38 ee 01 c0       	push   0xc001ee38
c001a65c:	e8 6a 5a ff ff       	call   c00100cb <KePanic(char const*)>
c001a661:	83 c4 10             	add    esp,0x10
c001a664:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a66a:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001a670:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001a676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a67a:	89 d0                	mov    eax,edx
c001a67c:	c1 e0 07             	shl    eax,0x7
c001a67f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001a683:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001a68d:	51                   	push   ecx
c001a68e:	8d 42 02             	lea    eax,[edx+0x2]
c001a691:	51                   	push   ecx
c001a692:	c1 e0 07             	shl    eax,0x7
c001a695:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a699:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a69d:	50                   	push   eax
c001a69e:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001a6a4:	e8 e7 ef ff ff       	call   c0019690 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001a6a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a6ad:	83 c4 10             	add    esp,0x10
c001a6b0:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001a6b5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a6b9:	0f 84 4f 01 00 00    	je     c001a80e <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001a6bf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a6c3:	c1 e0 09             	shl    eax,0x9
c001a6c6:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001a6cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a6cf:	74 0e                	je     c001a6df <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001a6d1:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001a6d7:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001a6db:	89 c1                	mov    ecx,eax
c001a6dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a6df:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a6e3:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a6e9:	8d 42 02             	lea    eax,[edx+0x2]
c001a6ec:	c1 e0 07             	shl    eax,0x7
c001a6ef:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001a6f3:	8b 00                	mov    eax,DWORD PTR [eax]
c001a6f5:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001a6fb:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001a701:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a705:	c1 e1 05             	shl    ecx,0x5
c001a708:	01 c8                	add    eax,ecx
c001a70a:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a70e:	83 e1 01             	and    ecx,0x1
c001a711:	89 ce                	mov    esi,ecx
c001a713:	8a 08                	mov    cl,BYTE PTR [eax]
c001a715:	c1 e6 06             	shl    esi,0x6
c001a718:	83 e1 bf             	and    ecx,0xffffffbf
c001a71b:	09 f1                	or     ecx,esi
c001a71d:	88 08                	mov    BYTE PTR [eax],cl
c001a71f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a721:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001a727:	81 c9 05 00 01 00    	or     ecx,0x10005
c001a72d:	89 08                	mov    DWORD PTR [eax],ecx
c001a72f:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a735:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001a73b:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001a741:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001a744:	50                   	push   eax
c001a745:	68 90 00 00 00       	push   0x90
c001a74a:	6a 00                	push   0x0
c001a74c:	56                   	push   esi
c001a74d:	e8 7e 5d fe ff       	call   c00004d0 <memset>
c001a752:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a758:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001a75c:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001a762:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001a766:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a76a:	83 c4 10             	add    esp,0x10
c001a76d:	48                   	dec    eax
c001a76e:	25 ff ff 3f 00       	and    eax,0x3fffff
c001a773:	89 c1                	mov    ecx,eax
c001a775:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001a77b:	25 00 00 c0 ff       	and    eax,0xffc00000
c001a780:	09 c8                	or     eax,ecx
c001a782:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001a788:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a78b:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001a792:	66 25 00 7f          	and    ax,0x7f00
c001a796:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a79a:	66 0d 27 80          	or     ax,0x8027
c001a79e:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001a7a3:	66 89 06             	mov    WORD PTR [esi],ax
c001a7a6:	19 c0                	sbb    eax,eax
c001a7a8:	83 e0 f0             	and    eax,0xfffffff0
c001a7ab:	83 c0 35             	add    eax,0x35
c001a7ae:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001a7b1:	89 e8                	mov    eax,ebp
c001a7b3:	c1 e8 10             	shr    eax,0x10
c001a7b6:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001a7b9:	89 e8                	mov    eax,ebp
c001a7bb:	c1 e8 18             	shr    eax,0x18
c001a7be:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001a7c1:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001a7c5:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001a7c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a7cc:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001a7cf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a7d3:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001a7d7:	89 d6                	mov    esi,edx
c001a7d9:	31 c0                	xor    eax,eax
c001a7db:	c1 e6 07             	shl    esi,0x7
c001a7de:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001a7e2:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001a7e8:	80 e1 88             	and    cl,0x88
c001a7eb:	74 0a                	je     c001a7f7 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001a7ed:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a7f2:	74 0a                	je     c001a7fe <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001a7f4:	40                   	inc    eax
c001a7f5:	eb eb                	jmp    c001a7e2 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001a7f7:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a7fc:	75 17                	jne    c001a815 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001a7fe:	83 ec 0c             	sub    esp,0xc
c001a801:	68 71 ee 01 c0       	push   0xc001ee71
c001a806:	e8 49 fc fe ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c001a80b:	83 c4 10             	add    esp,0x10
c001a80e:	b8 01 00 00 00       	mov    eax,0x1
c001a813:	eb 5d                	jmp    c001a872 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001a815:	b8 01 00 00 00       	mov    eax,0x1
c001a81a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001a81e:	c1 e2 07             	shl    edx,0x7
c001a821:	d3 e0                	shl    eax,cl
c001a823:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001a827:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001a82d:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001a833:	85 c8                	test   eax,ecx
c001a835:	74 16                	je     c001a84d <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001a837:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001a83d:	0f ba e1 1e          	bt     ecx,0x1e
c001a841:	73 ea                	jae    c001a82d <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001a843:	83 ec 0c             	sub    esp,0xc
c001a846:	68 7f ee 01 c0       	push   0xc001ee7f
c001a84b:	eb b9                	jmp    c001a806 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001a84d:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001a853:	0f ba e0 1e          	bt     eax,0x1e
c001a857:	72 b5                	jb     c001a80e <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001a859:	31 c0                	xor    eax,eax
c001a85b:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001a860:	75 10                	jne    c001a872 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001a862:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001a868:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001a86c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a870:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a872:	83 c4 2c             	add    esp,0x2c
c001a875:	5b                   	pop    ebx
c001a876:	5e                   	pop    esi
c001a877:	5f                   	pop    edi
c001a878:	5d                   	pop    ebp
c001a879:	c3                   	ret    

c001a87a <SATA::read(unsigned long long, int, void*)>:
c001a87a:	57                   	push   edi
c001a87b:	b8 04 00 00 00       	mov    eax,0x4
c001a880:	56                   	push   esi
c001a881:	53                   	push   ebx
c001a882:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a886:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a88a:	8d 7a ff             	lea    edi,[edx-0x1]
c001a88d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a891:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a895:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a89b:	77 25                	ja     c001a8c2 <SATA::read(unsigned long long, int, void*)+0x48>
c001a89d:	b8 06 00 00 00       	mov    eax,0x6
c001a8a2:	85 f6                	test   esi,esi
c001a8a4:	74 1c                	je     c001a8c2 <SATA::read(unsigned long long, int, void*)+0x48>
c001a8a6:	50                   	push   eax
c001a8a7:	50                   	push   eax
c001a8a8:	6a 00                	push   0x0
c001a8aa:	56                   	push   esi
c001a8ab:	52                   	push   edx
c001a8ac:	53                   	push   ebx
c001a8ad:	51                   	push   ecx
c001a8ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a8b2:	e8 77 fd ff ff       	call   c001a62e <SATA::access(unsigned long long, int, void*, bool)>
c001a8b7:	83 c4 20             	add    esp,0x20
c001a8ba:	85 c0                	test   eax,eax
c001a8bc:	0f 95 c0             	setne  al
c001a8bf:	0f b6 c0             	movzx  eax,al
c001a8c2:	5b                   	pop    ebx
c001a8c3:	5e                   	pop    esi
c001a8c4:	5f                   	pop    edi
c001a8c5:	c3                   	ret    

c001a8c6 <SATA::write(unsigned long long, int, void*)>:
c001a8c6:	55                   	push   ebp
c001a8c7:	b8 04 00 00 00       	mov    eax,0x4
c001a8cc:	57                   	push   edi
c001a8cd:	56                   	push   esi
c001a8ce:	53                   	push   ebx
c001a8cf:	83 ec 0c             	sub    esp,0xc
c001a8d2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a8d6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a8da:	8d 73 ff             	lea    esi,[ebx-0x1]
c001a8dd:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001a8e1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001a8e5:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a8eb:	77 3d                	ja     c001a92a <SATA::write(unsigned long long, int, void*)+0x64>
c001a8ed:	b8 06 00 00 00       	mov    eax,0x6
c001a8f2:	85 ed                	test   ebp,ebp
c001a8f4:	74 34                	je     c001a92a <SATA::write(unsigned long long, int, void*)+0x64>
c001a8f6:	c1 e3 09             	shl    ebx,0x9
c001a8f9:	01 eb                	add    ebx,ebp
c001a8fb:	89 d6                	mov    esi,edx
c001a8fd:	89 cf                	mov    edi,ecx
c001a8ff:	83 c6 01             	add    esi,0x1
c001a902:	83 d7 00             	adc    edi,0x0
c001a905:	50                   	push   eax
c001a906:	50                   	push   eax
c001a907:	6a 01                	push   0x1
c001a909:	55                   	push   ebp
c001a90a:	81 c5 00 02 00 00    	add    ebp,0x200
c001a910:	6a 01                	push   0x1
c001a912:	51                   	push   ecx
c001a913:	52                   	push   edx
c001a914:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a918:	e8 11 fd ff ff       	call   c001a62e <SATA::access(unsigned long long, int, void*, bool)>
c001a91d:	83 c4 20             	add    esp,0x20
c001a920:	89 f2                	mov    edx,esi
c001a922:	89 f9                	mov    ecx,edi
c001a924:	39 dd                	cmp    ebp,ebx
c001a926:	75 d3                	jne    c001a8fb <SATA::write(unsigned long long, int, void*)+0x35>
c001a928:	31 c0                	xor    eax,eax
c001a92a:	83 c4 0c             	add    esp,0xc
c001a92d:	5b                   	pop    ebx
c001a92e:	5e                   	pop    esi
c001a92f:	5f                   	pop    edi
c001a930:	5d                   	pop    ebp
c001a931:	c3                   	ret    

c001a932 <SATAPI::write(unsigned long long, int, void*)>:
c001a932:	b8 03 00 00 00       	mov    eax,0x3
c001a937:	c3                   	ret    

c001a938 <SATAPI::close(int, int, void*)>:
c001a938:	83 ec 0c             	sub    esp,0xc
c001a93b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a93f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a945:	85 c0                	test   eax,eax
c001a947:	74 0c                	je     c001a955 <SATAPI::close(int, int, void*)+0x1d>
c001a949:	83 ec 0c             	sub    esp,0xc
c001a94c:	8b 10                	mov    edx,DWORD PTR [eax]
c001a94e:	50                   	push   eax
c001a94f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a952:	83 c4 10             	add    esp,0x10
c001a955:	31 c0                	xor    eax,eax
c001a957:	83 c4 0c             	add    esp,0xc
c001a95a:	c3                   	ret    
c001a95b:	90                   	nop

c001a95c <SATAPI::SATAPI()>:
c001a95c:	83 ec 0c             	sub    esp,0xc
c001a95f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a963:	83 ec 04             	sub    esp,0x4
c001a966:	68 00 08 00 00       	push   0x800
c001a96b:	68 c8 ee 01 c0       	push   0xc001eec8
c001a970:	50                   	push   eax
c001a971:	e8 ec 12 ff ff       	call   c000bc62 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a976:	83 c4 10             	add    esp,0x10
c001a979:	ba d0 ef 01 c0       	mov    edx,0xc001efd0
c001a97e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a982:	89 10                	mov    DWORD PTR [eax],edx
c001a984:	90                   	nop
c001a985:	83 c4 0c             	add    esp,0xc
c001a988:	c3                   	ret    
c001a989:	90                   	nop

c001a98a <SATAPI::diskRemoved()>:
c001a98a:	c3                   	ret    
c001a98b:	90                   	nop

c001a98c <SATAPI::diskInserted()>:
c001a98c:	83 ec 18             	sub    esp,0x18
c001a98f:	68 d4 ee 01 c0       	push   0xc001eed4
c001a994:	e8 bb fa fe ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c001a999:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a99d:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001a9a4:	83 c4 1c             	add    esp,0x1c
c001a9a7:	c3                   	ret    

c001a9a8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001a9a8:	55                   	push   ebp
c001a9a9:	57                   	push   edi
c001a9aa:	56                   	push   esi
c001a9ab:	53                   	push   ebx
c001a9ac:	83 ec 38             	sub    esp,0x38
c001a9af:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001a9b3:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a9b7:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001a9bb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a9bf:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001a9c3:	68 ec ee 01 c0       	push   0xc001eeec
c001a9c8:	e8 87 fa fe ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c001a9cd:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001a9d3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001a9d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a9dd:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001a9e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a9e7:	83 c0 02             	add    eax,0x2
c001a9ea:	c1 e0 07             	shl    eax,0x7
c001a9ed:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001a9f1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a9f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a9f9:	c1 e0 07             	shl    eax,0x7
c001a9fc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001aa00:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aa04:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001aa0e:	58                   	pop    eax
c001aa0f:	5a                   	pop    edx
c001aa10:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001aa14:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001aa1a:	e8 71 ec ff ff       	call   c0019690 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001aa1f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aa23:	83 c4 10             	add    esp,0x10
c001aa26:	b8 01 00 00 00       	mov    eax,0x1
c001aa2b:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001aa30:	0f 84 49 02 00 00    	je     c001ac7f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001aa36:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001aa3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa40:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa42:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001aa48:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001aa4e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001aa52:	c1 e1 05             	shl    ecx,0x5
c001aa55:	01 c8                	add    eax,ecx
c001aa57:	8b 08                	mov    ecx,DWORD PTR [eax]
c001aa59:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001aa5f:	81 c9 25 00 01 00    	or     ecx,0x10025
c001aa65:	89 08                	mov    DWORD PTR [eax],ecx
c001aa67:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001aa6d:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001aa73:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001aa79:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001aa7c:	8d 7b 40             	lea    edi,[ebx+0x40]
c001aa7f:	50                   	push   eax
c001aa80:	68 90 00 00 00       	push   0x90
c001aa85:	6a 00                	push   0x0
c001aa87:	53                   	push   ebx
c001aa88:	e8 43 5a fe ff       	call   c00004d0 <memset>
c001aa8d:	b9 0c 00 00 00       	mov    ecx,0xc
c001aa92:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001aa96:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa98:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001aa9e:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001aaa2:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001aaa8:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001aaac:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001aab0:	48                   	dec    eax
c001aab1:	25 ff ff 3f 00       	and    eax,0x3fffff
c001aab6:	89 c1                	mov    ecx,eax
c001aab8:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001aabe:	25 00 00 c0 ff       	and    eax,0xffc00000
c001aac3:	09 c8                	or     eax,ecx
c001aac5:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001aacb:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001aace:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001aad5:	66 25 00 7f          	and    ax,0x7f00
c001aad9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001aadd:	66 0d 27 80          	or     ax,0x8027
c001aae1:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001aae5:	66 89 03             	mov    WORD PTR [ebx],ax
c001aae8:	89 d0                	mov    eax,edx
c001aaea:	c1 ea 18             	shr    edx,0x18
c001aaed:	c1 e8 10             	shr    eax,0x10
c001aaf0:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001aaf3:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001aaf6:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001aafa:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001aafd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ab01:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001ab04:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ab08:	83 c4 10             	add    esp,0x10
c001ab0b:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001ab0f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ab13:	31 c0                	xor    eax,eax
c001ab15:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001ab1b:	80 e1 88             	and    cl,0x88
c001ab1e:	74 0a                	je     c001ab2a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x182>
c001ab20:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ab25:	74 0a                	je     c001ab31 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x189>
c001ab27:	40                   	inc    eax
c001ab28:	eb eb                	jmp    c001ab15 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16d>
c001ab2a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ab2f:	75 43                	jne    c001ab74 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cc>
c001ab31:	83 ec 0c             	sub    esp,0xc
c001ab34:	68 06 ef 01 c0       	push   0xc001ef06
c001ab39:	e8 16 f9 fe ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c001ab3e:	58                   	pop    eax
c001ab3f:	5a                   	pop    edx
c001ab40:	68 1b ef 01 c0       	push   0xc001ef1b
c001ab45:	ff 35 84 04 02 c0    	push   DWORD PTR ds:0xc0020484
c001ab4b:	e8 e6 db fe ff       	call   c0008736 <VgaText::puts(char const*)>
c001ab50:	59                   	pop    ecx
c001ab51:	5b                   	pop    ebx
c001ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ab56:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001ab5c:	e8 c9 eb ff ff       	call   c001972a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001ab61:	5e                   	pop    esi
c001ab62:	5f                   	pop    edi
c001ab63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ab67:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001ab6d:	e8 98 eb ff ff       	call   c001970a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001ab72:	eb 48                	jmp    c001abbc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x214>
c001ab74:	be 01 00 00 00       	mov    esi,0x1
c001ab79:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ab7d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ab81:	d3 e6                	shl    esi,cl
c001ab83:	c1 e7 07             	shl    edi,0x7
c001ab86:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001ab8c:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001ab91:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001ab95:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001ab9b:	85 c6                	test   esi,eax
c001ab9d:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001aba3:	0f 84 a3 00 00 00    	je     c001ac4c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a4>
c001aba9:	0f ba e0 1e          	bt     eax,0x1e
c001abad:	73 1a                	jae    c001abc9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x221>
c001abaf:	83 ec 0c             	sub    esp,0xc
c001abb2:	68 2d ef 01 c0       	push   0xc001ef2d
c001abb7:	e8 98 f8 fe ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c001abbc:	83 c4 10             	add    esp,0x10
c001abbf:	b8 01 00 00 00       	mov    eax,0x1
c001abc4:	e9 b6 00 00 00       	jmp    c001ac7f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001abc9:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001abcf:	83 f8 0d             	cmp    eax,0xd
c001abd2:	77 0a                	ja     c001abde <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c001abd4:	83 ec 0c             	sub    esp,0xc
c001abd7:	68 c8 00 00 00       	push   0xc8
c001abdc:	eb 28                	jmp    c001ac06 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001abde:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001abe4:	83 f8 0d             	cmp    eax,0xd
c001abe7:	77 0a                	ja     c001abf3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c001abe9:	83 ec 0c             	sub    esp,0xc
c001abec:	68 58 02 00 00       	push   0x258
c001abf1:	eb 13                	jmp    c001ac06 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001abf3:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001abf9:	83 f8 06             	cmp    eax,0x6
c001abfc:	77 10                	ja     c001ac0e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001abfe:	83 ec 0c             	sub    esp,0xc
c001ac01:	68 dc 05 00 00       	push   0x5dc
c001ac06:	e8 d1 89 ff ff       	call   c00135dc <milliTenthSleep(unsigned int)>
c001ac0b:	83 c4 10             	add    esp,0x10
c001ac0e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001ac12:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001ac15:	75 06                	jne    c001ac1d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x275>
c001ac17:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001ac1b:	74 15                	je     c001ac32 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001ac1d:	83 fb 06             	cmp    ebx,0x6
c001ac20:	77 10                	ja     c001ac32 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001ac22:	83 ec 0c             	sub    esp,0xc
c001ac25:	68 c4 09 00 00       	push   0x9c4
c001ac2a:	e8 ad 89 ff ff       	call   c00135dc <milliTenthSleep(unsigned int)>
c001ac2f:	83 c4 10             	add    esp,0x10
c001ac32:	43                   	inc    ebx
c001ac33:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001ac39:	0f 85 56 ff ff ff    	jne    c001ab95 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ed>
c001ac3f:	83 ec 0c             	sub    esp,0xc
c001ac42:	68 40 ef 01 c0       	push   0xc001ef40
c001ac47:	e9 6b ff ff ff       	jmp    c001abb7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001ac4c:	0f ba e0 1e          	bt     eax,0x1e
c001ac50:	73 0d                	jae    c001ac5f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b7>
c001ac52:	83 ec 0c             	sub    esp,0xc
c001ac55:	68 54 ef 01 c0       	push   0xc001ef54
c001ac5a:	e9 58 ff ff ff       	jmp    c001abb7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001ac5f:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001ac64:	74 17                	je     c001ac7d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001ac66:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001ac6b:	74 10                	je     c001ac7d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001ac6d:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001ac73:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001ac77:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001ac7b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ac7d:	31 c0                	xor    eax,eax
c001ac7f:	83 c4 2c             	add    esp,0x2c
c001ac82:	5b                   	pop    ebx
c001ac83:	5e                   	pop    esi
c001ac84:	5f                   	pop    edi
c001ac85:	5d                   	pop    ebp
c001ac86:	c3                   	ret    
c001ac87:	90                   	nop

c001ac88 <SATAPI::eject()>:
c001ac88:	57                   	push   edi
c001ac89:	b9 03 00 00 00       	mov    ecx,0x3
c001ac8e:	83 ec 18             	sub    esp,0x18
c001ac91:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ac95:	fc                   	cld    
c001ac96:	31 c0                	xor    eax,eax
c001ac98:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ac9a:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ac9f:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001aca4:	50                   	push   eax
c001aca5:	6a 00                	push   0x0
c001aca7:	6a 00                	push   0x0
c001aca9:	6a 00                	push   0x0
c001acab:	6a 00                	push   0x0
c001acad:	6a 02                	push   0x2
c001acaf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001acb3:	50                   	push   eax
c001acb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001acb8:	e8 eb fc ff ff       	call   c001a9a8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001acbd:	31 c0                	xor    eax,eax
c001acbf:	83 c4 38             	add    esp,0x38
c001acc2:	5f                   	pop    edi
c001acc3:	c3                   	ret    

c001acc4 <SATAPI::detectMedia()>:
c001acc4:	53                   	push   ebx
c001acc5:	83 ec 14             	sub    esp,0x14
c001acc8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001accc:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001acd2:	e8 45 27 ff ff       	call   c000d41c <VCache::writeWriteBuffer()>
c001acd7:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001acdd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ace1:	83 c4 18             	add    esp,0x18
c001ace4:	5b                   	pop    ebx
c001ace5:	e9 22 27 ff ff       	jmp    c000d40c <VCache::invalidateReadBuffer()>

c001acea <SATAPI::open(int, int, void*)>:
c001acea:	56                   	push   esi
c001aceb:	53                   	push   ebx
c001acec:	51                   	push   ecx
c001aced:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001acf1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001acf5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001acff:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ad05:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ad0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad13:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001ad1d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ad23:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001ad2a:	e8 66 cd fe ff       	call   c0007a95 <Phys::allocatePage()>
c001ad2f:	89 c6                	mov    esi,eax
c001ad31:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001ad37:	81 c6 00 10 00 00    	add    esi,0x1000
c001ad3d:	e8 53 cd fe ff       	call   c0007a95 <Phys::allocatePage()>
c001ad42:	39 c6                	cmp    esi,eax
c001ad44:	74 10                	je     c001ad56 <SATAPI::open(int, int, void*)+0x6c>
c001ad46:	83 ec 0c             	sub    esp,0xc
c001ad49:	68 69 ef 01 c0       	push   0xc001ef69
c001ad4e:	e8 78 53 ff ff       	call   c00100cb <KePanic(char const*)>
c001ad53:	83 c4 10             	add    esp,0x10
c001ad56:	83 ec 0c             	sub    esp,0xc
c001ad59:	6a 02                	push   0x2
c001ad5b:	e8 a1 e4 fe ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c001ad60:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001ad66:	6a 03                	push   0x3
c001ad68:	50                   	push   eax
c001ad69:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001ad6f:	ff 35 30 05 02 c0    	push   DWORD PTR ds:0xc0020530
c001ad75:	e8 1c eb fe ff       	call   c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ad7a:	83 c4 14             	add    esp,0x14
c001ad7d:	68 74 01 00 00       	push   0x174
c001ad82:	e8 32 ca fe ff       	call   c00077b9 <malloc>
c001ad87:	83 c4 0c             	add    esp,0xc
c001ad8a:	89 c6                	mov    esi,eax
c001ad8c:	6a 00                	push   0x0
c001ad8e:	68 ff ff ff 7f       	push   0x7fffffff
c001ad93:	6a 00                	push   0x0
c001ad95:	6a 00                	push   0x0
c001ad97:	53                   	push   ebx
c001ad98:	68 7f ef 01 c0       	push   0xc001ef7f
c001ad9d:	50                   	push   eax
c001ad9e:	e8 7d 1b ff ff       	call   c000c920 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001ada3:	83 c4 14             	add    esp,0x14
c001ada6:	56                   	push   esi
c001ada7:	e8 2a 1c ff ff       	call   c000c9d6 <LogicalDisk::assignDriveLetter()>
c001adac:	5a                   	pop    edx
c001adad:	0f be c0             	movsx  eax,al
c001adb0:	59                   	pop    ecx
c001adb1:	50                   	push   eax
c001adb2:	68 cc ed 01 c0       	push   0xc001edcc
c001adb7:	e8 98 f6 fe ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c001adbc:	58                   	pop    eax
c001adbd:	5a                   	pop    edx
c001adbe:	56                   	push   esi
c001adbf:	53                   	push   ebx
c001adc0:	e8 cf 0a ff ff       	call   c000b894 <Device::addChild(Device*)>
c001adc5:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001adcb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001adce:	e8 f7 0e ff ff       	call   c000bcca <PhysicalDisk::startCache()>
c001add3:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001adda:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001addd:	e8 e2 fe ff ff       	call   c001acc4 <SATAPI::detectMedia()>
c001ade2:	83 c4 14             	add    esp,0x14
c001ade5:	31 c0                	xor    eax,eax
c001ade7:	5b                   	pop    ebx
c001ade8:	5e                   	pop    esi
c001ade9:	c3                   	ret    

c001adea <SATAPI::read(unsigned long long, int, void*)>:
c001adea:	57                   	push   edi
c001adeb:	56                   	push   esi
c001adec:	53                   	push   ebx
c001aded:	83 ec 3c             	sub    esp,0x3c
c001adf0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001adf4:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001adf8:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001adfc:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001ae00:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ae04:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001ae08:	68 8d ef 01 c0       	push   0xc001ef8d
c001ae0d:	e8 42 f6 fe ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c001ae12:	83 c4 10             	add    esp,0x10
c001ae15:	83 fe 04             	cmp    esi,0x4
c001ae18:	7e 10                	jle    c001ae2a <SATAPI::read(unsigned long long, int, void*)+0x40>
c001ae1a:	83 ec 0c             	sub    esp,0xc
c001ae1d:	68 9e ef 01 c0       	push   0xc001ef9e
c001ae22:	e8 a4 52 ff ff       	call   c00100cb <KePanic(char const*)>
c001ae27:	83 c4 10             	add    esp,0x10
c001ae2a:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001ae30:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001ae36:	51                   	push   ecx
c001ae37:	50                   	push   eax
c001ae38:	83 c0 02             	add    eax,0x2
c001ae3b:	c1 e0 07             	shl    eax,0x7
c001ae3e:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001ae44:	50                   	push   eax
c001ae45:	52                   	push   edx
c001ae46:	e8 09 e9 ff ff       	call   c0019754 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ae4b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001ae4f:	b9 03 00 00 00       	mov    ecx,0x3
c001ae54:	fc                   	cld    
c001ae55:	31 c0                	xor    eax,eax
c001ae57:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ae59:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001ae5e:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001ae63:	83 c4 0c             	add    esp,0xc
c001ae66:	6a 00                	push   0x0
c001ae68:	6a 00                	push   0x0
c001ae6a:	6a 00                	push   0x0
c001ae6c:	6a 00                	push   0x0
c001ae6e:	6a 02                	push   0x2
c001ae70:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ae74:	50                   	push   eax
c001ae75:	53                   	push   ebx
c001ae76:	e8 2d fb ff ff       	call   c001a9a8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ae7b:	83 c4 20             	add    esp,0x20
c001ae7e:	85 c0                	test   eax,eax
c001ae80:	75 44                	jne    c001aec6 <SATAPI::read(unsigned long long, int, void*)+0xdc>
c001ae82:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001ae86:	b9 03 00 00 00       	mov    ecx,0x3
c001ae8b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ae8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae91:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001ae96:	0f c8                	bswap  eax
c001ae98:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001ae9c:	89 f0                	mov    eax,esi
c001ae9e:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001aea2:	50                   	push   eax
c001aea3:	56                   	push   esi
c001aea4:	c1 e6 0b             	shl    esi,0xb
c001aea7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001aeab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001aeaf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001aeb3:	56                   	push   esi
c001aeb4:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001aeb8:	50                   	push   eax
c001aeb9:	53                   	push   ebx
c001aeba:	e8 e9 fa ff ff       	call   c001a9a8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001aebf:	83 c4 20             	add    esp,0x20
c001aec2:	85 c0                	test   eax,eax
c001aec4:	74 14                	je     c001aeda <SATAPI::read(unsigned long long, int, void*)+0xf0>
c001aec6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aeca:	83 ec 0c             	sub    esp,0xc
c001aecd:	53                   	push   ebx
c001aece:	e8 f1 fd ff ff       	call   c001acc4 <SATAPI::detectMedia()>
c001aed3:	83 c4 10             	add    esp,0x10
c001aed6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aeda:	83 c4 30             	add    esp,0x30
c001aedd:	5b                   	pop    ebx
c001aede:	5e                   	pop    esi
c001aedf:	5f                   	pop    edi
c001aee0:	c3                   	ret    
c001aee1:	90                   	nop

c001aee2 <IOAPIC::close(int, int, void*)>:
c001aee2:	b8 00 00 00 00       	mov    eax,0x0
c001aee7:	c3                   	ret    

c001aee8 <apicGetBase()>:
c001aee8:	55                   	push   ebp
c001aee9:	89 e5                	mov    ebp,esp
c001aeeb:	83 ec 18             	sub    esp,0x18
c001aeee:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c001aef3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001aef9:	83 e0 08             	and    eax,0x8
c001aefc:	84 c0                	test   al,al
c001aefe:	75 07                	jne    c001af07 <apicGetBase()+0x1f>
c001af00:	b8 00 00 00 00       	mov    eax,0x0
c001af05:	eb 21                	jmp    c001af28 <apicGetBase()+0x40>
c001af07:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c001af0c:	83 ec 08             	sub    esp,0x8
c001af0f:	6a 1b                	push   0x1b
c001af11:	50                   	push   eax
c001af12:	e8 db be fe ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001af17:	83 c4 10             	add    esp,0x10
c001af1a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001af1d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001af20:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001af23:	25 00 00 ff ff       	and    eax,0xffff0000
c001af28:	c9                   	leave  
c001af29:	c3                   	ret    

c001af2a <IOAPIC::IOAPIC()>:
c001af2a:	83 ec 0c             	sub    esp,0xc
c001af2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af31:	83 ec 08             	sub    esp,0x8
c001af34:	68 00 f0 01 c0       	push   0xc001f000
c001af39:	50                   	push   eax
c001af3a:	e8 ed 0a ff ff       	call   c000ba2c <Device::Device(char const*)>
c001af3f:	83 c4 10             	add    esp,0x10
c001af42:	ba 10 f0 01 c0       	mov    edx,0xc001f010
c001af47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af4b:	89 10                	mov    DWORD PTR [eax],edx
c001af4d:	90                   	nop
c001af4e:	83 c4 0c             	add    esp,0xc
c001af51:	c3                   	ret    

c001af52 <apicOpen()>:
c001af52:	55                   	push   ebp
c001af53:	89 e5                	mov    ebp,esp
c001af55:	53                   	push   ebx
c001af56:	83 ec 34             	sub    esp,0x34
c001af59:	a0 20 41 02 c0       	mov    al,ds:0xc0024120
c001af5e:	83 f0 01             	xor    eax,0x1
c001af61:	84 c0                	test   al,al
c001af63:	0f 84 9d 00 00 00    	je     c001b006 <apicOpen()+0xb4>
c001af69:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001af6d:	a0 00 2d 02 c0       	mov    al,ds:0xc0022d00
c001af72:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001af75:	0f 83 84 00 00 00    	jae    c001afff <apicOpen()+0xad>
c001af7b:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001af82:	83 ec 0c             	sub    esp,0xc
c001af85:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001af88:	e8 2c c8 fe ff       	call   c00077b9 <malloc>
c001af8d:	83 c4 10             	add    esp,0x10
c001af90:	89 c3                	mov    ebx,eax
c001af92:	83 ec 0c             	sub    esp,0xc
c001af95:	53                   	push   ebx
c001af96:	e8 8f ff ff ff       	call   c001af2a <IOAPIC::IOAPIC()>
c001af9b:	83 c4 10             	add    esp,0x10
c001af9e:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001afa1:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001afa4:	25 ff 00 00 00       	and    eax,0xff
c001afa9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001afac:	89 14 85 00 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf00],edx
c001afb3:	a1 e0 40 02 c0       	mov    eax,ds:0xc00240e0
c001afb8:	40                   	inc    eax
c001afb9:	a3 e0 40 02 c0       	mov    ds:0xc00240e0,eax
c001afbe:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c001afc3:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001afc9:	83 ec 08             	sub    esp,0x8
c001afcc:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001afcf:	50                   	push   eax
c001afd0:	e8 bf 08 ff ff       	call   c000b894 <Device::addChild(Device*)>
c001afd5:	83 c4 10             	add    esp,0x10
c001afd8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001afdb:	8b 00                	mov    eax,DWORD PTR [eax]
c001afdd:	83 c0 08             	add    eax,0x8
c001afe0:	8b 10                	mov    edx,DWORD PTR [eax]
c001afe2:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001afe5:	25 ff 00 00 00       	and    eax,0xff
c001afea:	6a 00                	push   0x0
c001afec:	6a 00                	push   0x0
c001afee:	50                   	push   eax
c001afef:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001aff2:	ff d2                	call   edx
c001aff4:	83 c4 10             	add    esp,0x10
c001aff7:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001affa:	e9 6e ff ff ff       	jmp    c001af6d <apicOpen()+0x1b>
c001afff:	c6 05 20 41 02 c0 01 	mov    BYTE PTR ds:0xc0024120,0x1
c001b006:	e8 dd fe ff ff       	call   c001aee8 <apicGetBase()>
c001b00b:	05 f0 00 00 00       	add    eax,0xf0
c001b010:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b013:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b016:	8b 00                	mov    eax,DWORD PTR [eax]
c001b018:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b01b:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b022:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b029:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b02c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b02f:	89 10                	mov    DWORD PTR [eax],edx
c001b031:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b038:	a1 50 2c 02 c0       	mov    eax,ds:0xc0022c50
c001b03d:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b040:	7d 70                	jge    c001b0b2 <apicOpen()+0x160>
c001b042:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b045:	8b 04 85 60 2c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd3a0]
c001b04c:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b04f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b052:	8b 04 85 60 2c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd3a0]
c001b059:	c1 e8 08             	shr    eax,0x8
c001b05c:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b060:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b063:	8b 04 85 60 2c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd3a0]
c001b06a:	c1 e8 18             	shr    eax,0x18
c001b06d:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b070:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b074:	75 37                	jne    c001b0ad <apicOpen()+0x15b>
c001b076:	e8 6d fe ff ff       	call   c001aee8 <apicGetBase()>
c001b07b:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b07f:	75 07                	jne    c001b088 <apicOpen()+0x136>
c001b081:	ba 60 03 00 00       	mov    edx,0x360
c001b086:	eb 05                	jmp    c001b08d <apicOpen()+0x13b>
c001b088:	ba 50 03 00 00       	mov    edx,0x350
c001b08d:	01 d0                	add    eax,edx
c001b08f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b092:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b095:	8b 00                	mov    eax,DWORD PTR [eax]
c001b097:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b09a:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b0a1:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b0a5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b0a8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b0ab:	89 10                	mov    DWORD PTR [eax],edx
c001b0ad:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b0b0:	eb 86                	jmp    c001b038 <apicOpen()+0xe6>
c001b0b2:	90                   	nop
c001b0b3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b0b6:	c9                   	leave  
c001b0b7:	c3                   	ret    

c001b0b8 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b0b8:	55                   	push   ebp
c001b0b9:	89 e5                	mov    ebp,esp
c001b0bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b0be:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b0c4:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b0c7:	72 1d                	jb     c001b0e6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b0c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b0cc:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b0d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b0d5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b0db:	01 d0                	add    eax,edx
c001b0dd:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b0e0:	73 04                	jae    c001b0e6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b0e2:	b0 01                	mov    al,0x1
c001b0e4:	eb 02                	jmp    c001b0e8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b0e6:	b0 00                	mov    al,0x0
c001b0e8:	5d                   	pop    ebp
c001b0e9:	c3                   	ret    

c001b0ea <IOAPIC::read(int)>:
c001b0ea:	55                   	push   ebp
c001b0eb:	89 e5                	mov    ebp,esp
c001b0ed:	83 ec 10             	sub    esp,0x10
c001b0f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b0f3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b0f9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b0fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b0ff:	31 d2                	xor    edx,edx
c001b101:	88 c2                	mov    dl,al
c001b103:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b106:	89 10                	mov    DWORD PTR [eax],edx
c001b108:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b10b:	83 c0 10             	add    eax,0x10
c001b10e:	8b 00                	mov    eax,DWORD PTR [eax]
c001b110:	c9                   	leave  
c001b111:	c3                   	ret    

c001b112 <IOAPIC::open(int, int, void*)>:
c001b112:	55                   	push   ebp
c001b113:	89 e5                	mov    ebp,esp
c001b115:	57                   	push   edi
c001b116:	56                   	push   esi
c001b117:	53                   	push   ebx
c001b118:	83 ec 04             	sub    esp,0x4
c001b11b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b11e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b121:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b127:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b12a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b130:	8b 14 85 40 2d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd2c0]
c001b137:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b13a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b140:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b143:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b149:	8b 14 85 c0 2d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd240]
c001b150:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b153:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b159:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b15c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b162:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b165:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b16b:	89 c6                	mov    esi,eax
c001b16d:	81 e6 ff 00 00 00    	and    esi,0xff
c001b173:	89 d0                	mov    eax,edx
c001b175:	ba 00 00 00 00       	mov    edx,0x0
c001b17a:	89 c7                	mov    edi,eax
c001b17c:	83 e7 ff             	and    edi,0xffffffff
c001b17f:	89 f9                	mov    ecx,edi
c001b181:	89 d0                	mov    eax,edx
c001b183:	25 ff 00 00 00       	and    eax,0xff
c001b188:	89 c3                	mov    ebx,eax
c001b18a:	89 c8                	mov    eax,ecx
c001b18c:	89 da                	mov    edx,ebx
c001b18e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b191:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b194:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b198:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b19c:	83 e0 00             	and    eax,0x0
c001b19f:	09 d0                	or     eax,edx
c001b1a1:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b1a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1a8:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b1ae:	8d 50 01             	lea    edx,[eax+0x1]
c001b1b1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b1b4:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b1ba:	31 d2                	xor    edx,edx
c001b1bc:	88 c2                	mov    dl,al
c001b1be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1c1:	83 c2 08             	add    edx,0x8
c001b1c4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b1c8:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b1ce:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b1d4:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b1d8:	6a 01                	push   0x1
c001b1da:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b1dd:	e8 08 ff ff ff       	call   c001b0ea <IOAPIC::read(int)>
c001b1e2:	83 c4 08             	add    esp,0x8
c001b1e5:	c1 f8 10             	sar    eax,0x10
c001b1e8:	25 ff 00 00 00       	and    eax,0xff
c001b1ed:	8d 50 01             	lea    edx,[eax+0x1]
c001b1f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1f3:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b1f9:	b8 00 00 00 00       	mov    eax,0x0
c001b1fe:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b201:	5b                   	pop    ebx
c001b202:	5e                   	pop    esi
c001b203:	5f                   	pop    edi
c001b204:	5d                   	pop    ebp
c001b205:	c3                   	ret    

c001b206 <IOAPIC::write(int, int)>:
c001b206:	55                   	push   ebp
c001b207:	89 e5                	mov    ebp,esp
c001b209:	83 ec 10             	sub    esp,0x10
c001b20c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b20f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b215:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b218:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b21b:	31 d2                	xor    edx,edx
c001b21d:	88 c2                	mov    dl,al
c001b21f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b222:	89 10                	mov    DWORD PTR [eax],edx
c001b224:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b227:	8d 50 10             	lea    edx,[eax+0x10]
c001b22a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b22d:	89 02                	mov    DWORD PTR [edx],eax
c001b22f:	90                   	nop
c001b230:	c9                   	leave  
c001b231:	c3                   	ret    

c001b232 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b232:	55                   	push   ebp
c001b233:	89 e5                	mov    ebp,esp
c001b235:	53                   	push   ebx
c001b236:	83 ec 2c             	sub    esp,0x2c
c001b239:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b23c:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b23f:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b242:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b245:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b248:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b24b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b24e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b251:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b254:	88 d8                	mov    al,bl
c001b256:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b259:	88 c8                	mov    al,cl
c001b25b:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b25e:	88 d0                	mov    al,dl
c001b260:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b263:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b266:	25 ff 00 00 00       	and    eax,0xff
c001b26b:	83 c0 08             	add    eax,0x8
c001b26e:	01 c0                	add    eax,eax
c001b270:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b273:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b276:	25 ff 00 00 00       	and    eax,0xff
c001b27b:	83 c0 08             	add    eax,0x8
c001b27e:	01 c0                	add    eax,eax
c001b280:	40                   	inc    eax
c001b281:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b284:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b287:	50                   	push   eax
c001b288:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b28b:	e8 5a fe ff ff       	call   c001b0ea <IOAPIC::read(int)>
c001b290:	83 c4 08             	add    esp,0x8
c001b293:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b296:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b29d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b2a0:	c1 e0 18             	shl    eax,0x18
c001b2a3:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b2a6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b2a9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b2ac:	52                   	push   edx
c001b2ad:	50                   	push   eax
c001b2ae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b2b1:	e8 50 ff ff ff       	call   c001b206 <IOAPIC::write(int, int)>
c001b2b6:	83 c4 0c             	add    esp,0xc
c001b2b9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b2bc:	50                   	push   eax
c001b2bd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b2c0:	e8 25 fe ff ff       	call   c001b0ea <IOAPIC::read(int)>
c001b2c5:	83 c4 08             	add    esp,0x8
c001b2c8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b2cb:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b2d2:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b2d9:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b2e0:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b2e4:	74 09                	je     c001b2ef <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b2e6:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b2ed:	eb 07                	jmp    c001b2f6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b2ef:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b2f6:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b2fa:	74 09                	je     c001b305 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b2fc:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b303:	eb 07                	jmp    c001b30c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b305:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b30c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b313:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b316:	25 ff 00 00 00       	and    eax,0xff
c001b31b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b31e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b321:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b324:	52                   	push   edx
c001b325:	50                   	push   eax
c001b326:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b329:	e8 d8 fe ff ff       	call   c001b206 <IOAPIC::write(int, int)>
c001b32e:	83 c4 0c             	add    esp,0xc
c001b331:	90                   	nop
c001b332:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b335:	c9                   	leave  
c001b336:	c3                   	ret    
c001b337:	90                   	nop

c001b338 <APICTimer::close(int, int, void*)>:
c001b338:	b8 00 00 00 00       	mov    eax,0x0
c001b33d:	c3                   	ret    
c001b33e:	66 90                	xchg   ax,ax

c001b340 <apicTimerHandler(regs*, void*)>:
c001b340:	83 ec 0c             	sub    esp,0xc
c001b343:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b347:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b349:	b8 10 27 00 00       	mov    eax,0x2710
c001b34e:	ba 00 00 00 00       	mov    edx,0x0
c001b353:	f7 f1                	div    ecx
c001b355:	83 ec 0c             	sub    esp,0xc
c001b358:	50                   	push   eax
c001b359:	e8 de 1d ff ff       	call   c000d13c <timerHandler(unsigned int)>
c001b35e:	83 c4 10             	add    esp,0x10
c001b361:	90                   	nop
c001b362:	83 c4 0c             	add    esp,0xc
c001b365:	c3                   	ret    
c001b366:	66 90                	xchg   ax,ax

c001b368 <APICTimer::open(int, int, void*)>:
c001b368:	83 ec 0c             	sub    esp,0xc
c001b36b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b36f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b371:	83 c0 24             	add    eax,0x24
c001b374:	8b 00                	mov    eax,DWORD PTR [eax]
c001b376:	83 ec 08             	sub    esp,0x8
c001b379:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b37d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b381:	ff d0                	call   eax
c001b383:	83 c4 10             	add    esp,0x10
c001b386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b38a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b38e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b398:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b39c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b3a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b3a6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b3ac:	83 ec 0c             	sub    esp,0xc
c001b3af:	51                   	push   ecx
c001b3b0:	6a 01                	push   0x1
c001b3b2:	68 40 b3 01 c0       	push   0xc001b340
c001b3b7:	52                   	push   edx
c001b3b8:	50                   	push   eax
c001b3b9:	e8 82 04 ff ff       	call   c000b840 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b3be:	83 c4 20             	add    esp,0x20
c001b3c1:	89 c2                	mov    edx,eax
c001b3c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3c7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b3cd:	b8 00 00 00 00       	mov    eax,0x0
c001b3d2:	83 c4 0c             	add    esp,0xc
c001b3d5:	c3                   	ret    
c001b3d6:	66 90                	xchg   ax,ax

c001b3d8 <APICTimer::write(int)>:
c001b3d8:	83 ec 0c             	sub    esp,0xc
c001b3db:	83 ec 0c             	sub    esp,0xc
c001b3de:	68 34 f0 01 c0       	push   0xc001f034
c001b3e3:	e8 e3 4c ff ff       	call   c00100cb <KePanic(char const*)>
c001b3e8:	83 c4 10             	add    esp,0x10
c001b3eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3ef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b3f3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b3f9:	90                   	nop
c001b3fa:	83 c4 0c             	add    esp,0xc
c001b3fd:	c3                   	ret    
c001b3fe:	66 90                	xchg   ax,ax

c001b400 <APICTimer::APICTimer()>:
c001b400:	83 ec 0c             	sub    esp,0xc
c001b403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b407:	83 ec 08             	sub    esp,0x8
c001b40a:	68 44 f0 01 c0       	push   0xc001f044
c001b40f:	50                   	push   eax
c001b410:	e8 5b 1c ff ff       	call   c000d070 <Timer::Timer(char const*)>
c001b415:	83 c4 10             	add    esp,0x10
c001b418:	ba 58 f0 01 c0       	mov    edx,0xc001f058
c001b41d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b421:	89 10                	mov    DWORD PTR [eax],edx
c001b423:	90                   	nop
c001b424:	83 c4 0c             	add    esp,0xc
c001b427:	c3                   	ret    

c001b428 <PIT::write(int)>:
c001b428:	83 ec 10             	sub    esp,0x10
c001b42b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b42f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b433:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b439:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b43d:	a3 24 41 02 c0       	mov    ds:0xc0024124,eax
c001b442:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b447:	99                   	cdq    
c001b448:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001b44c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b450:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001b457:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001b45c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b460:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b465:	ee                   	out    dx,al
c001b466:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b46a:	25 ff 00 00 00       	and    eax,0xff
c001b46f:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001b476:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b47a:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b47e:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b483:	ee                   	out    dx,al
c001b484:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b488:	c1 f8 08             	sar    eax,0x8
c001b48b:	25 ff 00 00 00       	and    eax,0xff
c001b490:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001b497:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b49b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b49f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b4a4:	ee                   	out    dx,al
c001b4a5:	90                   	nop
c001b4a6:	83 c4 10             	add    esp,0x10
c001b4a9:	c3                   	ret    
c001b4aa:	66 90                	xchg   ax,ax

c001b4ac <pitHandler(regs*, void*)>:
c001b4ac:	83 ec 0c             	sub    esp,0xc
c001b4af:	8b 0d 24 41 02 c0    	mov    ecx,DWORD PTR ds:0xc0024124
c001b4b5:	b8 10 27 00 00       	mov    eax,0x2710
c001b4ba:	99                   	cdq    
c001b4bb:	f7 f9                	idiv   ecx
c001b4bd:	83 ec 0c             	sub    esp,0xc
c001b4c0:	50                   	push   eax
c001b4c1:	e8 76 1c ff ff       	call   c000d13c <timerHandler(unsigned int)>
c001b4c6:	83 c4 10             	add    esp,0x10
c001b4c9:	90                   	nop
c001b4ca:	83 c4 0c             	add    esp,0xc
c001b4cd:	c3                   	ret    
c001b4ce:	66 90                	xchg   ax,ax

c001b4d0 <PIT::open(int, int, void*)>:
c001b4d0:	83 ec 0c             	sub    esp,0xc
c001b4d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4d7:	8b 00                	mov    eax,DWORD PTR [eax]
c001b4d9:	83 c0 24             	add    eax,0x24
c001b4dc:	8b 00                	mov    eax,DWORD PTR [eax]
c001b4de:	83 ec 08             	sub    esp,0x8
c001b4e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b4e9:	ff d0                	call   eax
c001b4eb:	83 c4 10             	add    esp,0x10
c001b4ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4f2:	83 ec 0c             	sub    esp,0xc
c001b4f5:	6a 00                	push   0x0
c001b4f7:	6a 01                	push   0x1
c001b4f9:	68 ac b4 01 c0       	push   0xc001b4ac
c001b4fe:	6a 00                	push   0x0
c001b500:	50                   	push   eax
c001b501:	e8 3a 03 ff ff       	call   c000b840 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b506:	83 c4 20             	add    esp,0x20
c001b509:	89 c2                	mov    edx,eax
c001b50b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b50f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b515:	b8 00 00 00 00       	mov    eax,0x0
c001b51a:	83 c4 0c             	add    esp,0xc
c001b51d:	c3                   	ret    
c001b51e:	66 90                	xchg   ax,ax

c001b520 <PIT::close(int, int, void*)>:
c001b520:	83 ec 0c             	sub    esp,0xc
c001b523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b527:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b531:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b535:	6a 01                	push   0x1
c001b537:	68 ac b4 01 c0       	push   0xc001b4ac
c001b53c:	6a 00                	push   0x0
c001b53e:	50                   	push   eax
c001b53f:	e8 32 03 ff ff       	call   c000b876 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001b544:	83 c4 10             	add    esp,0x10
c001b547:	b8 00 00 00 00       	mov    eax,0x0
c001b54c:	83 c4 0c             	add    esp,0xc
c001b54f:	c3                   	ret    

c001b550 <PIT::PIT()>:
c001b550:	83 ec 0c             	sub    esp,0xc
c001b553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b557:	83 ec 08             	sub    esp,0x8
c001b55a:	68 80 f0 01 c0       	push   0xc001f080
c001b55f:	50                   	push   eax
c001b560:	e8 0b 1b ff ff       	call   c000d070 <Timer::Timer(char const*)>
c001b565:	83 c4 10             	add    esp,0x10
c001b568:	ba a8 f0 01 c0       	mov    edx,0xc001f0a8
c001b56d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b571:	89 10                	mov    DWORD PTR [eax],edx
c001b573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b577:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b57d:	31 d2                	xor    edx,edx
c001b57f:	88 c2                	mov    dl,al
c001b581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b585:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001b58c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b590:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b596:	31 d2                	xor    edx,edx
c001b598:	88 c2                	mov    dl,al
c001b59a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b59e:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001b5a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5a7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b5ad:	8d 50 01             	lea    edx,[eax+0x1]
c001b5b0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b5b4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001b5ba:	31 d2                	xor    edx,edx
c001b5bc:	88 c2                	mov    dl,al
c001b5be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5c2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b5c6:	83 e1 3f             	and    ecx,0x3f
c001b5c9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b5cd:	90                   	nop
c001b5ce:	83 c4 0c             	add    esp,0xc
c001b5d1:	c3                   	ret    
c001b5d2:	66 90                	xchg   ax,ax
c001b5d4:	66 90                	xchg   ax,ax
c001b5d6:	66 90                	xchg   ax,ax
c001b5d8:	66 90                	xchg   ax,ax
c001b5da:	66 90                	xchg   ax,ax
c001b5dc:	66 90                	xchg   ax,ax
c001b5de:	66 90                	xchg   ax,ax

c001b5e0 <avxDetect>:
c001b5e0:	b8 01 00 00 00       	mov    eax,0x1
c001b5e5:	0f a2                	cpuid  
c001b5e7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001b5ed:	74 15                	je     c001b604 <avxDetect.noAVX>
c001b5ef:	b8 01 00 00 00       	mov    eax,0x1
c001b5f4:	0f a2                	cpuid  
c001b5f6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001b5fc:	74 06                	je     c001b604 <avxDetect.noAVX>
c001b5fe:	b8 01 00 00 00       	mov    eax,0x1
c001b603:	c3                   	ret    

c001b604 <avxDetect.noAVX>:
c001b604:	b8 00 00 00 00       	mov    eax,0x0
c001b609:	c3                   	ret    

c001b60a <avxSave>:
c001b60a:	53                   	push   ebx
c001b60b:	52                   	push   edx
c001b60c:	31 c0                	xor    eax,eax
c001b60e:	48                   	dec    eax
c001b60f:	89 c2                	mov    edx,eax
c001b611:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b615:	0f ae 23             	xsave  [ebx]
c001b618:	5a                   	pop    edx
c001b619:	5b                   	pop    ebx
c001b61a:	c3                   	ret    

c001b61b <avxLoad>:
c001b61b:	53                   	push   ebx
c001b61c:	52                   	push   edx
c001b61d:	31 c0                	xor    eax,eax
c001b61f:	48                   	dec    eax
c001b620:	89 c2                	mov    edx,eax
c001b622:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b626:	0f ae 2b             	xrstor [ebx]
c001b629:	5a                   	pop    edx
c001b62a:	5b                   	pop    ebx
c001b62b:	c3                   	ret    

c001b62c <avxInit>:
c001b62c:	e8 57 02 00 00       	call   c001b888 <sseInit>
c001b631:	50                   	push   eax
c001b632:	51                   	push   ecx
c001b633:	0f 20 e0             	mov    eax,cr4
c001b636:	0d 00 00 04 00       	or     eax,0x40000
c001b63b:	0f 22 e0             	mov    cr4,eax
c001b63e:	31 c9                	xor    ecx,ecx
c001b640:	0f 01 d0             	xgetbv 
c001b643:	0d 07 00 00 00       	or     eax,0x7
c001b648:	0f 01 d1             	xsetbv 
c001b64b:	59                   	pop    ecx
c001b64c:	58                   	pop    eax
c001b64d:	c3                   	ret    

c001b64e <avxClose>:
c001b64e:	c3                   	ret    

c001b64f <wouldSheSayYes>:
c001b64f:	c3                   	ret    
c001b650:	49                   	dec    ecx
c001b651:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001b655:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001b659:	75 20                	jne    c001b67b <isr0+0xb>
c001b65b:	4e                   	dec    esi
c001b65c:	79 61                	jns    c001b6bf <isr7+0x3>
c001b65e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001b663:	66 90                	xchg   ax,ax
c001b665:	66 90                	xchg   ax,ax
c001b667:	66 90                	xchg   ax,ax
c001b669:	66 90                	xchg   ax,ax
c001b66b:	66 90                	xchg   ax,ax
c001b66d:	66 90                	xchg   ax,ax
c001b66f:	90                   	nop

c001b670 <isr0>:
c001b670:	fa                   	cli    
c001b671:	68 00 00 00 00       	push   0x0
c001b676:	68 00 00 00 00       	push   0x0
c001b67b:	e9 44 01 00 00       	jmp    c001b7c4 <int_common_stub>

c001b680 <isr1>:
c001b680:	fa                   	cli    
c001b681:	6a 00                	push   0x0
c001b683:	6a 01                	push   0x1
c001b685:	e9 3a 01 00 00       	jmp    c001b7c4 <int_common_stub>

c001b68a <isr2>:
c001b68a:	fa                   	cli    
c001b68b:	6a 00                	push   0x0
c001b68d:	6a 02                	push   0x2
c001b68f:	e9 30 01 00 00       	jmp    c001b7c4 <int_common_stub>

c001b694 <isr3>:
c001b694:	fa                   	cli    
c001b695:	6a 00                	push   0x0
c001b697:	6a 03                	push   0x3
c001b699:	e9 26 01 00 00       	jmp    c001b7c4 <int_common_stub>

c001b69e <isr4>:
c001b69e:	fa                   	cli    
c001b69f:	6a 00                	push   0x0
c001b6a1:	6a 04                	push   0x4
c001b6a3:	e9 1c 01 00 00       	jmp    c001b7c4 <int_common_stub>

c001b6a8 <isr5>:
c001b6a8:	fa                   	cli    
c001b6a9:	6a 00                	push   0x0
c001b6ab:	6a 05                	push   0x5
c001b6ad:	e9 12 01 00 00       	jmp    c001b7c4 <int_common_stub>

c001b6b2 <isr6>:
c001b6b2:	fa                   	cli    
c001b6b3:	6a 00                	push   0x0
c001b6b5:	6a 06                	push   0x6
c001b6b7:	e9 08 01 00 00       	jmp    c001b7c4 <int_common_stub>

c001b6bc <isr7>:
c001b6bc:	fa                   	cli    
c001b6bd:	6a 00                	push   0x0
c001b6bf:	6a 07                	push   0x7
c001b6c1:	e9 fe 00 00 00       	jmp    c001b7c4 <int_common_stub>

c001b6c6 <isr8>:
c001b6c6:	fa                   	cli    
c001b6c7:	6a 08                	push   0x8
c001b6c9:	e9 f6 00 00 00       	jmp    c001b7c4 <int_common_stub>

c001b6ce <isr9>:
c001b6ce:	fa                   	cli    
c001b6cf:	6a 00                	push   0x0
c001b6d1:	6a 09                	push   0x9
c001b6d3:	e9 ec 00 00 00       	jmp    c001b7c4 <int_common_stub>

c001b6d8 <isr10>:
c001b6d8:	fa                   	cli    
c001b6d9:	6a 0a                	push   0xa
c001b6db:	e9 e4 00 00 00       	jmp    c001b7c4 <int_common_stub>

c001b6e0 <isr11>:
c001b6e0:	fa                   	cli    
c001b6e1:	6a 0b                	push   0xb
c001b6e3:	e9 dc 00 00 00       	jmp    c001b7c4 <int_common_stub>

c001b6e8 <isr12>:
c001b6e8:	fa                   	cli    
c001b6e9:	6a 0c                	push   0xc
c001b6eb:	e9 d4 00 00 00       	jmp    c001b7c4 <int_common_stub>

c001b6f0 <isr13>:
c001b6f0:	fa                   	cli    
c001b6f1:	6a 0d                	push   0xd
c001b6f3:	e9 cc 00 00 00       	jmp    c001b7c4 <int_common_stub>

c001b6f8 <isr14>:
c001b6f8:	fa                   	cli    
c001b6f9:	6a 0e                	push   0xe
c001b6fb:	e9 c4 00 00 00       	jmp    c001b7c4 <int_common_stub>

c001b700 <isr15>:
c001b700:	fa                   	cli    
c001b701:	6a 00                	push   0x0
c001b703:	6a 0f                	push   0xf
c001b705:	e9 ba 00 00 00       	jmp    c001b7c4 <int_common_stub>

c001b70a <isr16>:
c001b70a:	fa                   	cli    
c001b70b:	6a 00                	push   0x0
c001b70d:	6a 10                	push   0x10
c001b70f:	e9 b0 00 00 00       	jmp    c001b7c4 <int_common_stub>

c001b714 <isr17>:
c001b714:	fa                   	cli    
c001b715:	6a 00                	push   0x0
c001b717:	6a 11                	push   0x11
c001b719:	e9 a6 00 00 00       	jmp    c001b7c4 <int_common_stub>

c001b71e <isr18>:
c001b71e:	fa                   	cli    
c001b71f:	6a 00                	push   0x0
c001b721:	6a 12                	push   0x12
c001b723:	e9 9c 00 00 00       	jmp    c001b7c4 <int_common_stub>

c001b728 <irq3>:
c001b728:	fa                   	cli    
c001b729:	6a 00                	push   0x0
c001b72b:	6a 23                	push   0x23
c001b72d:	e9 92 00 00 00       	jmp    c001b7c4 <int_common_stub>

c001b732 <irq4>:
c001b732:	fa                   	cli    
c001b733:	6a 00                	push   0x0
c001b735:	6a 24                	push   0x24
c001b737:	e9 88 00 00 00       	jmp    c001b7c4 <int_common_stub>

c001b73c <irq5>:
c001b73c:	fa                   	cli    
c001b73d:	6a 00                	push   0x0
c001b73f:	6a 25                	push   0x25
c001b741:	e9 7e 00 00 00       	jmp    c001b7c4 <int_common_stub>

c001b746 <irq6>:
c001b746:	fa                   	cli    
c001b747:	6a 00                	push   0x0
c001b749:	6a 26                	push   0x26
c001b74b:	e9 74 00 00 00       	jmp    c001b7c4 <int_common_stub>

c001b750 <irq7>:
c001b750:	fa                   	cli    
c001b751:	6a 00                	push   0x0
c001b753:	6a 27                	push   0x27
c001b755:	e9 6a 00 00 00       	jmp    c001b7c4 <int_common_stub>

c001b75a <irq8>:
c001b75a:	fa                   	cli    
c001b75b:	6a 00                	push   0x0
c001b75d:	6a 28                	push   0x28
c001b75f:	e9 60 00 00 00       	jmp    c001b7c4 <int_common_stub>

c001b764 <irq9>:
c001b764:	fa                   	cli    
c001b765:	6a 00                	push   0x0
c001b767:	6a 29                	push   0x29
c001b769:	e9 56 00 00 00       	jmp    c001b7c4 <int_common_stub>

c001b76e <irq10>:
c001b76e:	fa                   	cli    
c001b76f:	6a 00                	push   0x0
c001b771:	6a 2a                	push   0x2a
c001b773:	e9 4c 00 00 00       	jmp    c001b7c4 <int_common_stub>

c001b778 <irq11>:
c001b778:	fa                   	cli    
c001b779:	6a 00                	push   0x0
c001b77b:	6a 2b                	push   0x2b
c001b77d:	e9 42 00 00 00       	jmp    c001b7c4 <int_common_stub>

c001b782 <irq12>:
c001b782:	fa                   	cli    
c001b783:	6a 00                	push   0x0
c001b785:	6a 2c                	push   0x2c
c001b787:	e9 38 00 00 00       	jmp    c001b7c4 <int_common_stub>

c001b78c <irq13>:
c001b78c:	fa                   	cli    
c001b78d:	6a 00                	push   0x0
c001b78f:	6a 2d                	push   0x2d
c001b791:	e9 2e 00 00 00       	jmp    c001b7c4 <int_common_stub>

c001b796 <irq14>:
c001b796:	fa                   	cli    
c001b797:	6a 00                	push   0x0
c001b799:	6a 2e                	push   0x2e
c001b79b:	e9 24 00 00 00       	jmp    c001b7c4 <int_common_stub>

c001b7a0 <irq15>:
c001b7a0:	fa                   	cli    
c001b7a1:	6a 00                	push   0x0
c001b7a3:	6a 2f                	push   0x2f
c001b7a5:	e9 1a 00 00 00       	jmp    c001b7c4 <int_common_stub>

c001b7aa <irq1>:
c001b7aa:	fa                   	cli    
c001b7ab:	6a 00                	push   0x0
c001b7ad:	6a 21                	push   0x21
c001b7af:	eb 13                	jmp    c001b7c4 <int_common_stub>

c001b7b1 <irq2>:
c001b7b1:	fa                   	cli    
c001b7b2:	6a 00                	push   0x0
c001b7b4:	6a 22                	push   0x22
c001b7b6:	eb 0c                	jmp    c001b7c4 <int_common_stub>

c001b7b8 <isr96>:
c001b7b8:	6a 00                	push   0x0
c001b7ba:	6a 60                	push   0x60
c001b7bc:	fb                   	sti    
c001b7bd:	eb 05                	jmp    c001b7c4 <int_common_stub>

c001b7bf <irq0>:
c001b7bf:	fa                   	cli    
c001b7c0:	6a 00                	push   0x0
c001b7c2:	6a 20                	push   0x20

c001b7c4 <int_common_stub>:
c001b7c4:	60                   	pusha  
c001b7c5:	1e                   	push   ds
c001b7c6:	06                   	push   es
c001b7c7:	0f a0                	push   fs
c001b7c9:	0f a8                	push   gs
c001b7cb:	66 b8 10 00          	mov    ax,0x10
c001b7cf:	66 8e d8             	mov    ds,ax
c001b7d2:	66 8e c0             	mov    es,ax
c001b7d5:	66 8e e0             	mov    fs,ax
c001b7d8:	66 8e e8             	mov    gs,ax
c001b7db:	54                   	push   esp
c001b7dc:	fc                   	cld    
c001b7dd:	e8 5e 05 ff ff       	call   c000bd40 <int_handler>
c001b7e2:	81 c4 04 00 00 00    	add    esp,0x4
c001b7e8:	0f a9                	pop    gs
c001b7ea:	0f a1                	pop    fs
c001b7ec:	07                   	pop    es
c001b7ed:	1f                   	pop    ds
c001b7ee:	61                   	popa   
c001b7ef:	81 c4 08 00 00 00    	add    esp,0x8
c001b7f5:	cf                   	iret   

c001b7f6 <irq16>:
c001b7f6:	fa                   	cli    
c001b7f7:	6a 00                	push   0x0
c001b7f9:	6a 30                	push   0x30
c001b7fb:	e9 c4 ff ff ff       	jmp    c001b7c4 <int_common_stub>

c001b800 <irq17>:
c001b800:	fa                   	cli    
c001b801:	6a 00                	push   0x0
c001b803:	6a 31                	push   0x31
c001b805:	e9 ba ff ff ff       	jmp    c001b7c4 <int_common_stub>

c001b80a <irq18>:
c001b80a:	fa                   	cli    
c001b80b:	6a 00                	push   0x0
c001b80d:	6a 32                	push   0x32
c001b80f:	e9 b0 ff ff ff       	jmp    c001b7c4 <int_common_stub>

c001b814 <irq19>:
c001b814:	fa                   	cli    
c001b815:	6a 00                	push   0x0
c001b817:	6a 33                	push   0x33
c001b819:	e9 a6 ff ff ff       	jmp    c001b7c4 <int_common_stub>

c001b81e <irq20>:
c001b81e:	fa                   	cli    
c001b81f:	6a 00                	push   0x0
c001b821:	6a 34                	push   0x34
c001b823:	e9 9c ff ff ff       	jmp    c001b7c4 <int_common_stub>

c001b828 <irq21>:
c001b828:	fa                   	cli    
c001b829:	6a 00                	push   0x0
c001b82b:	6a 35                	push   0x35
c001b82d:	e9 92 ff ff ff       	jmp    c001b7c4 <int_common_stub>

c001b832 <irq22>:
c001b832:	fa                   	cli    
c001b833:	6a 00                	push   0x0
c001b835:	6a 36                	push   0x36
c001b837:	e9 88 ff ff ff       	jmp    c001b7c4 <int_common_stub>

c001b83c <irq23>:
c001b83c:	fa                   	cli    
c001b83d:	6a 00                	push   0x0
c001b83f:	6a 37                	push   0x37
c001b841:	e9 7e ff ff ff       	jmp    c001b7c4 <int_common_stub>
c001b846:	66 90                	xchg   ax,ax
c001b848:	66 90                	xchg   ax,ax
c001b84a:	66 90                	xchg   ax,ax
c001b84c:	66 90                	xchg   ax,ax
c001b84e:	66 90                	xchg   ax,ax

c001b850 <i386GetRDRAND>:
c001b850:	b9 64 00 00 00       	mov    ecx,0x64

c001b855 <retry>:
c001b855:	0f c7 f0             	rdrand eax
c001b858:	72 05                	jb     c001b85f <retry.done>
c001b85a:	e2 f9                	loop   c001b855 <retry>

c001b85c <retry.fail>:
c001b85c:	31 c0                	xor    eax,eax
c001b85e:	c3                   	ret    

c001b85f <retry.done>:
c001b85f:	c3                   	ret    

c001b860 <absolutelyNoChanceInHell>:
c001b860:	b8 01 00 00 00       	mov    eax,0x1
c001b865:	0f a2                	cpuid  
c001b867:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001b86d:	74 06                	je     c001b875 <sseDetect.noSSE>
c001b86f:	b8 01 00 00 00       	mov    eax,0x1
c001b874:	c3                   	ret    

c001b875 <sseDetect.noSSE>:
c001b875:	31 c0                	xor    eax,eax
c001b877:	c3                   	ret    

c001b878 <sseSave>:
c001b878:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b87c:	0f ae 00             	fxsave [eax]
c001b87f:	c3                   	ret    

c001b880 <sseLoad>:
c001b880:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b884:	0f ae 08             	fxrstor [eax]
c001b887:	c3                   	ret    

c001b888 <sseInit>:
c001b888:	e8 42 00 00 00       	call   c001b8cf <x87Init>
c001b88d:	0f 20 e0             	mov    eax,cr4
c001b890:	66 0d 00 06          	or     ax,0x600
c001b894:	0f 22 e0             	mov    cr4,eax
c001b897:	c3                   	ret    

c001b898 <sseClose>:
c001b898:	c3                   	ret    
c001b899:	66 90                	xchg   ax,ax
c001b89b:	66 90                	xchg   ax,ax
c001b89d:	66 90                	xchg   ax,ax
c001b89f:	90                   	nop

c001b8a0 <value_37F>:
c001b8a0:	7f 03                	jg     c001b8a5 <value_37A+0x1>

c001b8a2 <value_37E>:
c001b8a2:	7e 03                	jle    c001b8a7 <x87Detect+0x1>

c001b8a4 <value_37A>:
c001b8a4:	7a 03                	jp     c001b8a9 <x87Detect+0x3>

c001b8a6 <x87Detect>:
c001b8a6:	b8 01 00 00 00       	mov    eax,0x1
c001b8ab:	0f a2                	cpuid  
c001b8ad:	f7 c2 01 00 00 00    	test   edx,0x1
c001b8b3:	74 06                	je     c001b8bb <x87Detect.nox87>
c001b8b5:	b8 01 00 00 00       	mov    eax,0x1
c001b8ba:	c3                   	ret    

c001b8bb <x87Detect.nox87>:
c001b8bb:	b8 00 00 00 00       	mov    eax,0x0
c001b8c0:	c3                   	ret    

c001b8c1 <x87Save>:
c001b8c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8c5:	dd 30                	fnsave [eax]
c001b8c7:	c3                   	ret    

c001b8c8 <x87Load>:
c001b8c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8cc:	dd 20                	frstor [eax]
c001b8ce:	c3                   	ret    

c001b8cf <x87Init>:
c001b8cf:	0f 20 c0             	mov    eax,cr0
c001b8d2:	66 25 fb ff          	and    ax,0xfffb
c001b8d6:	66 0d 22 00          	or     ax,0x22
c001b8da:	0f 22 c0             	mov    cr0,eax
c001b8dd:	db e3                	fninit 
c001b8df:	0f 06                	clts   
c001b8e1:	d9 2d a4 b8 01 c0    	fldcw  WORD PTR ds:0xc001b8a4
c001b8e7:	c3                   	ret    

c001b8e8 <x87Close>:
c001b8e8:	c3                   	ret    
c001b8e9:	66 90                	xchg   ax,ax
c001b8eb:	90                   	nop

c001b8ec <__do_global_ctors_aux>:
c001b8ec:	a1 9c c8 01 c0       	mov    eax,ds:0xc001c89c
c001b8f1:	83 f8 ff             	cmp    eax,0xffffffff
c001b8f4:	74 1a                	je     c001b910 <__do_global_ctors_aux+0x24>
c001b8f6:	55                   	push   ebp
c001b8f7:	89 e5                	mov    ebp,esp
c001b8f9:	53                   	push   ebx
c001b8fa:	52                   	push   edx
c001b8fb:	bb 9c c8 01 c0       	mov    ebx,0xc001c89c
c001b900:	ff d0                	call   eax
c001b902:	83 eb 04             	sub    ebx,0x4
c001b905:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b907:	83 f8 ff             	cmp    eax,0xffffffff
c001b90a:	75 f4                	jne    c001b900 <__do_global_ctors_aux+0x14>
c001b90c:	58                   	pop    eax
c001b90d:	5b                   	pop    ebx
c001b90e:	5d                   	pop    ebp
c001b90f:	c3                   	ret    
c001b910:	c3                   	ret    
c001b911:	66 90                	xchg   ax,ax
c001b913:	90                   	nop

c001b914 <__divdi3>:
c001b914:	55                   	push   ebp
c001b915:	57                   	push   edi
c001b916:	56                   	push   esi
c001b917:	53                   	push   ebx
c001b918:	83 ec 1c             	sub    esp,0x1c
c001b91b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b91f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b923:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001b926:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001b92a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b92e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b932:	85 db                	test   ebx,ebx
c001b934:	0f 88 8e 00 00 00    	js     c001b9c8 <__divdi3+0xb4>
c001b93a:	89 dd                	mov    ebp,ebx
c001b93c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b944:	89 d3                	mov    ebx,edx
c001b946:	85 d2                	test   edx,edx
c001b948:	79 0d                	jns    c001b957 <__divdi3+0x43>
c001b94a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001b94e:	f7 d8                	neg    eax
c001b950:	83 d2 00             	adc    edx,0x0
c001b953:	f7 da                	neg    edx
c001b955:	89 d3                	mov    ebx,edx
c001b957:	89 c7                	mov    edi,eax
c001b959:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b95c:	85 db                	test   ebx,ebx
c001b95e:	75 48                	jne    c001b9a8 <__divdi3+0x94>
c001b960:	39 ef                	cmp    edi,ebp
c001b962:	76 24                	jbe    c001b988 <__divdi3+0x74>
c001b964:	89 ea                	mov    edx,ebp
c001b966:	f7 f7                	div    edi
c001b968:	89 c1                	mov    ecx,eax
c001b96a:	31 f6                	xor    esi,esi
c001b96c:	89 c8                	mov    eax,ecx
c001b96e:	89 f2                	mov    edx,esi
c001b970:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b974:	85 c9                	test   ecx,ecx
c001b976:	74 07                	je     c001b97f <__divdi3+0x6b>
c001b978:	f7 d8                	neg    eax
c001b97a:	83 d2 00             	adc    edx,0x0
c001b97d:	f7 da                	neg    edx
c001b97f:	83 c4 1c             	add    esp,0x1c
c001b982:	5b                   	pop    ebx
c001b983:	5e                   	pop    esi
c001b984:	5f                   	pop    edi
c001b985:	5d                   	pop    ebp
c001b986:	c3                   	ret    
c001b987:	90                   	nop
c001b988:	85 ff                	test   edi,edi
c001b98a:	75 0b                	jne    c001b997 <__divdi3+0x83>
c001b98c:	b8 01 00 00 00       	mov    eax,0x1
c001b991:	31 d2                	xor    edx,edx
c001b993:	f7 f3                	div    ebx
c001b995:	89 c7                	mov    edi,eax
c001b997:	31 d2                	xor    edx,edx
c001b999:	89 e8                	mov    eax,ebp
c001b99b:	f7 f7                	div    edi
c001b99d:	89 c6                	mov    esi,eax
c001b99f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b9a2:	f7 f7                	div    edi
c001b9a4:	89 c1                	mov    ecx,eax
c001b9a6:	eb c4                	jmp    c001b96c <__divdi3+0x58>
c001b9a8:	39 eb                	cmp    ebx,ebp
c001b9aa:	77 3c                	ja     c001b9e8 <__divdi3+0xd4>
c001b9ac:	0f bd f3             	bsr    esi,ebx
c001b9af:	83 f6 1f             	xor    esi,0x1f
c001b9b2:	75 40                	jne    c001b9f4 <__divdi3+0xe0>
c001b9b4:	39 eb                	cmp    ebx,ebp
c001b9b6:	72 09                	jb     c001b9c1 <__divdi3+0xad>
c001b9b8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001b9bb:	0f 87 97 00 00 00    	ja     c001ba58 <__divdi3+0x144>
c001b9c1:	b9 01 00 00 00       	mov    ecx,0x1
c001b9c6:	eb a4                	jmp    c001b96c <__divdi3+0x58>
c001b9c8:	f7 d9                	neg    ecx
c001b9ca:	83 d3 00             	adc    ebx,0x0
c001b9cd:	f7 db                	neg    ebx
c001b9cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001b9d2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001b9d6:	89 dd                	mov    ebp,ebx
c001b9d8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001b9e0:	e9 5f ff ff ff       	jmp    c001b944 <__divdi3+0x30>
c001b9e5:	8d 76 00             	lea    esi,[esi+0x0]
c001b9e8:	31 f6                	xor    esi,esi
c001b9ea:	31 c9                	xor    ecx,ecx
c001b9ec:	e9 7b ff ff ff       	jmp    c001b96c <__divdi3+0x58>
c001b9f1:	8d 76 00             	lea    esi,[esi+0x0]
c001b9f4:	b8 20 00 00 00       	mov    eax,0x20
c001b9f9:	29 f0                	sub    eax,esi
c001b9fb:	89 f1                	mov    ecx,esi
c001b9fd:	d3 e3                	shl    ebx,cl
c001b9ff:	89 fa                	mov    edx,edi
c001ba01:	88 c1                	mov    cl,al
c001ba03:	d3 ea                	shr    edx,cl
c001ba05:	09 da                	or     edx,ebx
c001ba07:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ba0b:	89 f1                	mov    ecx,esi
c001ba0d:	d3 e7                	shl    edi,cl
c001ba0f:	89 eb                	mov    ebx,ebp
c001ba11:	88 c1                	mov    cl,al
c001ba13:	d3 eb                	shr    ebx,cl
c001ba15:	89 f1                	mov    ecx,esi
c001ba17:	d3 e5                	shl    ebp,cl
c001ba19:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001ba1c:	88 c1                	mov    cl,al
c001ba1e:	d3 ea                	shr    edx,cl
c001ba20:	09 d5                	or     ebp,edx
c001ba22:	89 e8                	mov    eax,ebp
c001ba24:	89 da                	mov    edx,ebx
c001ba26:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001ba2a:	89 d3                	mov    ebx,edx
c001ba2c:	89 c5                	mov    ebp,eax
c001ba2e:	f7 e7                	mul    edi
c001ba30:	39 d3                	cmp    ebx,edx
c001ba32:	72 18                	jb     c001ba4c <__divdi3+0x138>
c001ba34:	74 0a                	je     c001ba40 <__divdi3+0x12c>
c001ba36:	89 e9                	mov    ecx,ebp
c001ba38:	31 f6                	xor    esi,esi
c001ba3a:	e9 2d ff ff ff       	jmp    c001b96c <__divdi3+0x58>
c001ba3f:	90                   	nop
c001ba40:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001ba43:	89 f1                	mov    ecx,esi
c001ba45:	d3 e7                	shl    edi,cl
c001ba47:	39 c7                	cmp    edi,eax
c001ba49:	73 eb                	jae    c001ba36 <__divdi3+0x122>
c001ba4b:	90                   	nop
c001ba4c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001ba4f:	31 f6                	xor    esi,esi
c001ba51:	e9 16 ff ff ff       	jmp    c001b96c <__divdi3+0x58>
c001ba56:	66 90                	xchg   ax,ax
c001ba58:	31 c9                	xor    ecx,ecx
c001ba5a:	e9 0d ff ff ff       	jmp    c001b96c <__divdi3+0x58>
c001ba5f:	90                   	nop

c001ba60 <__moddi3>:
c001ba60:	55                   	push   ebp
c001ba61:	57                   	push   edi
c001ba62:	56                   	push   esi
c001ba63:	53                   	push   ebx
c001ba64:	83 ec 2c             	sub    esp,0x2c
c001ba67:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ba6b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001ba6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ba73:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001ba77:	85 db                	test   ebx,ebx
c001ba79:	0f 88 85 00 00 00    	js     c001bb04 <__moddi3+0xa4>
c001ba7f:	89 de                	mov    esi,ebx
c001ba81:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ba89:	89 d7                	mov    edi,edx
c001ba8b:	85 d2                	test   edx,edx
c001ba8d:	79 09                	jns    c001ba98 <__moddi3+0x38>
c001ba8f:	f7 d8                	neg    eax
c001ba91:	83 d2 00             	adc    edx,0x0
c001ba94:	f7 da                	neg    edx
c001ba96:	89 d7                	mov    edi,edx
c001ba98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba9c:	89 cd                	mov    ebp,ecx
c001ba9e:	85 ff                	test   edi,edi
c001baa0:	75 52                	jne    c001baf4 <__moddi3+0x94>
c001baa2:	89 c3                	mov    ebx,eax
c001baa4:	39 f0                	cmp    eax,esi
c001baa6:	76 24                	jbe    c001bacc <__moddi3+0x6c>
c001baa8:	89 c8                	mov    eax,ecx
c001baaa:	89 f2                	mov    edx,esi
c001baac:	f7 f3                	div    ebx
c001baae:	89 d6                	mov    esi,edx
c001bab0:	89 f0                	mov    eax,esi
c001bab2:	31 d2                	xor    edx,edx
c001bab4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bab8:	85 c9                	test   ecx,ecx
c001baba:	74 07                	je     c001bac3 <__moddi3+0x63>
c001babc:	f7 d8                	neg    eax
c001babe:	83 d2 00             	adc    edx,0x0
c001bac1:	f7 da                	neg    edx
c001bac3:	83 c4 2c             	add    esp,0x2c
c001bac6:	5b                   	pop    ebx
c001bac7:	5e                   	pop    esi
c001bac8:	5f                   	pop    edi
c001bac9:	5d                   	pop    ebp
c001baca:	c3                   	ret    
c001bacb:	90                   	nop
c001bacc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bad0:	85 db                	test   ebx,ebx
c001bad2:	75 0d                	jne    c001bae1 <__moddi3+0x81>
c001bad4:	b8 01 00 00 00       	mov    eax,0x1
c001bad9:	31 d2                	xor    edx,edx
c001badb:	f7 f7                	div    edi
c001badd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bae1:	89 f0                	mov    eax,esi
c001bae3:	31 d2                	xor    edx,edx
c001bae5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bae9:	f7 f7                	div    edi
c001baeb:	89 e8                	mov    eax,ebp
c001baed:	f7 f7                	div    edi
c001baef:	89 d6                	mov    esi,edx
c001baf1:	eb bd                	jmp    c001bab0 <__moddi3+0x50>
c001baf3:	90                   	nop
c001baf4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001baf8:	39 f7                	cmp    edi,esi
c001bafa:	76 20                	jbe    c001bb1c <__moddi3+0xbc>
c001bafc:	89 c8                	mov    eax,ecx
c001bafe:	89 f2                	mov    edx,esi
c001bb00:	eb b2                	jmp    c001bab4 <__moddi3+0x54>
c001bb02:	66 90                	xchg   ax,ax
c001bb04:	f7 d9                	neg    ecx
c001bb06:	83 d3 00             	adc    ebx,0x0
c001bb09:	f7 db                	neg    ebx
c001bb0b:	89 de                	mov    esi,ebx
c001bb0d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001bb15:	e9 6f ff ff ff       	jmp    c001ba89 <__moddi3+0x29>
c001bb1a:	66 90                	xchg   ax,ax
c001bb1c:	0f bd c7             	bsr    eax,edi
c001bb1f:	83 f0 1f             	xor    eax,0x1f
c001bb22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bb26:	75 24                	jne    c001bb4c <__moddi3+0xec>
c001bb28:	39 f7                	cmp    edi,esi
c001bb2a:	72 06                	jb     c001bb32 <__moddi3+0xd2>
c001bb2c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001bb30:	77 0c                	ja     c001bb3e <__moddi3+0xde>
c001bb32:	89 e9                	mov    ecx,ebp
c001bb34:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001bb38:	19 fe                	sbb    esi,edi
c001bb3a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001bb3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bb42:	89 f2                	mov    edx,esi
c001bb44:	e9 6b ff ff ff       	jmp    c001bab4 <__moddi3+0x54>
c001bb49:	8d 76 00             	lea    esi,[esi+0x0]
c001bb4c:	b8 20 00 00 00       	mov    eax,0x20
c001bb51:	89 c2                	mov    edx,eax
c001bb53:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001bb57:	29 da                	sub    edx,ebx
c001bb59:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001bb5d:	88 d9                	mov    cl,bl
c001bb5f:	d3 e7                	shl    edi,cl
c001bb61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb65:	88 d1                	mov    cl,dl
c001bb67:	d3 e8                	shr    eax,cl
c001bb69:	09 c7                	or     edi,eax
c001bb6b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001bb6f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bb73:	89 d8                	mov    eax,ebx
c001bb75:	88 d9                	mov    cl,bl
c001bb77:	d3 e7                	shl    edi,cl
c001bb79:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bb7d:	89 f3                	mov    ebx,esi
c001bb7f:	88 d1                	mov    cl,dl
c001bb81:	d3 eb                	shr    ebx,cl
c001bb83:	89 c7                	mov    edi,eax
c001bb85:	88 c1                	mov    cl,al
c001bb87:	d3 e6                	shl    esi,cl
c001bb89:	89 e8                	mov    eax,ebp
c001bb8b:	88 d1                	mov    cl,dl
c001bb8d:	d3 e8                	shr    eax,cl
c001bb8f:	09 f0                	or     eax,esi
c001bb91:	89 f9                	mov    ecx,edi
c001bb93:	d3 e5                	shl    ebp,cl
c001bb95:	89 da                	mov    edx,ebx
c001bb97:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001bb9b:	89 d3                	mov    ebx,edx
c001bb9d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001bba1:	89 c6                	mov    esi,eax
c001bba3:	89 d1                	mov    ecx,edx
c001bba5:	39 d3                	cmp    ebx,edx
c001bba7:	72 27                	jb     c001bbd0 <__moddi3+0x170>
c001bba9:	74 21                	je     c001bbcc <__moddi3+0x16c>
c001bbab:	29 f5                	sub    ebp,esi
c001bbad:	19 cb                	sbb    ebx,ecx
c001bbaf:	89 de                	mov    esi,ebx
c001bbb1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001bbb5:	d3 e6                	shl    esi,cl
c001bbb7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bbbb:	89 f9                	mov    ecx,edi
c001bbbd:	d3 ed                	shr    ebp,cl
c001bbbf:	09 ee                	or     esi,ebp
c001bbc1:	89 f0                	mov    eax,esi
c001bbc3:	d3 eb                	shr    ebx,cl
c001bbc5:	89 da                	mov    edx,ebx
c001bbc7:	e9 e8 fe ff ff       	jmp    c001bab4 <__moddi3+0x54>
c001bbcc:	39 c5                	cmp    ebp,eax
c001bbce:	73 db                	jae    c001bbab <__moddi3+0x14b>
c001bbd0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001bbd4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001bbd8:	89 d1                	mov    ecx,edx
c001bbda:	89 c6                	mov    esi,eax
c001bbdc:	eb cd                	jmp    c001bbab <__moddi3+0x14b>
c001bbde:	66 90                	xchg   ax,ax

c001bbe0 <__udivdi3>:
c001bbe0:	55                   	push   ebp
c001bbe1:	57                   	push   edi
c001bbe2:	56                   	push   esi
c001bbe3:	53                   	push   ebx
c001bbe4:	83 ec 1c             	sub    esp,0x1c
c001bbe7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001bbeb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001bbef:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001bbf3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bbf7:	85 d2                	test   edx,edx
c001bbf9:	75 41                	jne    c001bc3c <__udivdi3+0x5c>
c001bbfb:	39 f7                	cmp    edi,esi
c001bbfd:	76 15                	jbe    c001bc14 <__udivdi3+0x34>
c001bbff:	89 e8                	mov    eax,ebp
c001bc01:	89 f2                	mov    edx,esi
c001bc03:	f7 f7                	div    edi
c001bc05:	31 db                	xor    ebx,ebx
c001bc07:	89 da                	mov    edx,ebx
c001bc09:	83 c4 1c             	add    esp,0x1c
c001bc0c:	5b                   	pop    ebx
c001bc0d:	5e                   	pop    esi
c001bc0e:	5f                   	pop    edi
c001bc0f:	5d                   	pop    ebp
c001bc10:	c3                   	ret    
c001bc11:	8d 76 00             	lea    esi,[esi+0x0]
c001bc14:	89 f9                	mov    ecx,edi
c001bc16:	85 ff                	test   edi,edi
c001bc18:	75 0b                	jne    c001bc25 <__udivdi3+0x45>
c001bc1a:	b8 01 00 00 00       	mov    eax,0x1
c001bc1f:	31 d2                	xor    edx,edx
c001bc21:	f7 f7                	div    edi
c001bc23:	89 c1                	mov    ecx,eax
c001bc25:	31 d2                	xor    edx,edx
c001bc27:	89 f0                	mov    eax,esi
c001bc29:	f7 f1                	div    ecx
c001bc2b:	89 c3                	mov    ebx,eax
c001bc2d:	89 e8                	mov    eax,ebp
c001bc2f:	f7 f1                	div    ecx
c001bc31:	89 da                	mov    edx,ebx
c001bc33:	83 c4 1c             	add    esp,0x1c
c001bc36:	5b                   	pop    ebx
c001bc37:	5e                   	pop    esi
c001bc38:	5f                   	pop    edi
c001bc39:	5d                   	pop    ebp
c001bc3a:	c3                   	ret    
c001bc3b:	90                   	nop
c001bc3c:	39 f2                	cmp    edx,esi
c001bc3e:	77 1c                	ja     c001bc5c <__udivdi3+0x7c>
c001bc40:	0f bd da             	bsr    ebx,edx
c001bc43:	83 f3 1f             	xor    ebx,0x1f
c001bc46:	75 24                	jne    c001bc6c <__udivdi3+0x8c>
c001bc48:	39 f2                	cmp    edx,esi
c001bc4a:	72 08                	jb     c001bc54 <__udivdi3+0x74>
c001bc4c:	39 ef                	cmp    edi,ebp
c001bc4e:	0f 87 84 00 00 00    	ja     c001bcd8 <__udivdi3+0xf8>
c001bc54:	b8 01 00 00 00       	mov    eax,0x1
c001bc59:	eb ac                	jmp    c001bc07 <__udivdi3+0x27>
c001bc5b:	90                   	nop
c001bc5c:	31 db                	xor    ebx,ebx
c001bc5e:	31 c0                	xor    eax,eax
c001bc60:	89 da                	mov    edx,ebx
c001bc62:	83 c4 1c             	add    esp,0x1c
c001bc65:	5b                   	pop    ebx
c001bc66:	5e                   	pop    esi
c001bc67:	5f                   	pop    edi
c001bc68:	5d                   	pop    ebp
c001bc69:	c3                   	ret    
c001bc6a:	66 90                	xchg   ax,ax
c001bc6c:	b8 20 00 00 00       	mov    eax,0x20
c001bc71:	29 d8                	sub    eax,ebx
c001bc73:	88 d9                	mov    cl,bl
c001bc75:	d3 e2                	shl    edx,cl
c001bc77:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001bc7b:	89 fa                	mov    edx,edi
c001bc7d:	88 c1                	mov    cl,al
c001bc7f:	d3 ea                	shr    edx,cl
c001bc81:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bc85:	09 d1                	or     ecx,edx
c001bc87:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001bc8b:	88 d9                	mov    cl,bl
c001bc8d:	d3 e7                	shl    edi,cl
c001bc8f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bc93:	89 f7                	mov    edi,esi
c001bc95:	88 c1                	mov    cl,al
c001bc97:	d3 ef                	shr    edi,cl
c001bc99:	88 d9                	mov    cl,bl
c001bc9b:	d3 e6                	shl    esi,cl
c001bc9d:	89 ea                	mov    edx,ebp
c001bc9f:	88 c1                	mov    cl,al
c001bca1:	d3 ea                	shr    edx,cl
c001bca3:	09 d6                	or     esi,edx
c001bca5:	89 f0                	mov    eax,esi
c001bca7:	89 fa                	mov    edx,edi
c001bca9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001bcad:	89 d7                	mov    edi,edx
c001bcaf:	89 c6                	mov    esi,eax
c001bcb1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001bcb5:	39 d7                	cmp    edi,edx
c001bcb7:	72 13                	jb     c001bccc <__udivdi3+0xec>
c001bcb9:	74 09                	je     c001bcc4 <__udivdi3+0xe4>
c001bcbb:	89 f0                	mov    eax,esi
c001bcbd:	31 db                	xor    ebx,ebx
c001bcbf:	e9 43 ff ff ff       	jmp    c001bc07 <__udivdi3+0x27>
c001bcc4:	88 d9                	mov    cl,bl
c001bcc6:	d3 e5                	shl    ebp,cl
c001bcc8:	39 c5                	cmp    ebp,eax
c001bcca:	73 ef                	jae    c001bcbb <__udivdi3+0xdb>
c001bccc:	8d 46 ff             	lea    eax,[esi-0x1]
c001bccf:	31 db                	xor    ebx,ebx
c001bcd1:	e9 31 ff ff ff       	jmp    c001bc07 <__udivdi3+0x27>
c001bcd6:	66 90                	xchg   ax,ax
c001bcd8:	31 c0                	xor    eax,eax
c001bcda:	e9 28 ff ff ff       	jmp    c001bc07 <__udivdi3+0x27>
c001bcdf:	90                   	nop

c001bce0 <__umoddi3>:
c001bce0:	55                   	push   ebp
c001bce1:	57                   	push   edi
c001bce2:	56                   	push   esi
c001bce3:	53                   	push   ebx
c001bce4:	83 ec 1c             	sub    esp,0x1c
c001bce7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bceb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bcef:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001bcf3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bcf7:	89 da                	mov    edx,ebx
c001bcf9:	85 c0                	test   eax,eax
c001bcfb:	75 37                	jne    c001bd34 <__umoddi3+0x54>
c001bcfd:	39 df                	cmp    edi,ebx
c001bcff:	76 13                	jbe    c001bd14 <__umoddi3+0x34>
c001bd01:	89 f0                	mov    eax,esi
c001bd03:	f7 f7                	div    edi
c001bd05:	89 d0                	mov    eax,edx
c001bd07:	31 d2                	xor    edx,edx
c001bd09:	83 c4 1c             	add    esp,0x1c
c001bd0c:	5b                   	pop    ebx
c001bd0d:	5e                   	pop    esi
c001bd0e:	5f                   	pop    edi
c001bd0f:	5d                   	pop    ebp
c001bd10:	c3                   	ret    
c001bd11:	8d 76 00             	lea    esi,[esi+0x0]
c001bd14:	89 fd                	mov    ebp,edi
c001bd16:	85 ff                	test   edi,edi
c001bd18:	75 0b                	jne    c001bd25 <__umoddi3+0x45>
c001bd1a:	b8 01 00 00 00       	mov    eax,0x1
c001bd1f:	31 d2                	xor    edx,edx
c001bd21:	f7 f7                	div    edi
c001bd23:	89 c5                	mov    ebp,eax
c001bd25:	89 d8                	mov    eax,ebx
c001bd27:	31 d2                	xor    edx,edx
c001bd29:	f7 f5                	div    ebp
c001bd2b:	89 f0                	mov    eax,esi
c001bd2d:	f7 f5                	div    ebp
c001bd2f:	89 d0                	mov    eax,edx
c001bd31:	eb d4                	jmp    c001bd07 <__umoddi3+0x27>
c001bd33:	90                   	nop
c001bd34:	89 f1                	mov    ecx,esi
c001bd36:	39 d8                	cmp    eax,ebx
c001bd38:	76 0a                	jbe    c001bd44 <__umoddi3+0x64>
c001bd3a:	89 f0                	mov    eax,esi
c001bd3c:	83 c4 1c             	add    esp,0x1c
c001bd3f:	5b                   	pop    ebx
c001bd40:	5e                   	pop    esi
c001bd41:	5f                   	pop    edi
c001bd42:	5d                   	pop    ebp
c001bd43:	c3                   	ret    
c001bd44:	0f bd e8             	bsr    ebp,eax
c001bd47:	83 f5 1f             	xor    ebp,0x1f
c001bd4a:	75 1c                	jne    c001bd68 <__umoddi3+0x88>
c001bd4c:	39 d8                	cmp    eax,ebx
c001bd4e:	72 04                	jb     c001bd54 <__umoddi3+0x74>
c001bd50:	39 f7                	cmp    edi,esi
c001bd52:	77 08                	ja     c001bd5c <__umoddi3+0x7c>
c001bd54:	89 da                	mov    edx,ebx
c001bd56:	29 fe                	sub    esi,edi
c001bd58:	19 c2                	sbb    edx,eax
c001bd5a:	89 f1                	mov    ecx,esi
c001bd5c:	89 c8                	mov    eax,ecx
c001bd5e:	83 c4 1c             	add    esp,0x1c
c001bd61:	5b                   	pop    ebx
c001bd62:	5e                   	pop    esi
c001bd63:	5f                   	pop    edi
c001bd64:	5d                   	pop    ebp
c001bd65:	c3                   	ret    
c001bd66:	66 90                	xchg   ax,ax
c001bd68:	ba 20 00 00 00       	mov    edx,0x20
c001bd6d:	29 ea                	sub    edx,ebp
c001bd6f:	89 e9                	mov    ecx,ebp
c001bd71:	d3 e0                	shl    eax,cl
c001bd73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bd77:	89 f8                	mov    eax,edi
c001bd79:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bd7d:	88 d1                	mov    cl,dl
c001bd7f:	d3 e8                	shr    eax,cl
c001bd81:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bd85:	09 c1                	or     ecx,eax
c001bd87:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001bd8b:	89 e9                	mov    ecx,ebp
c001bd8d:	d3 e7                	shl    edi,cl
c001bd8f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bd93:	89 d8                	mov    eax,ebx
c001bd95:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bd99:	88 d1                	mov    cl,dl
c001bd9b:	d3 e8                	shr    eax,cl
c001bd9d:	89 c7                	mov    edi,eax
c001bd9f:	89 e9                	mov    ecx,ebp
c001bda1:	d3 e3                	shl    ebx,cl
c001bda3:	89 f0                	mov    eax,esi
c001bda5:	88 d1                	mov    cl,dl
c001bda7:	d3 e8                	shr    eax,cl
c001bda9:	09 d8                	or     eax,ebx
c001bdab:	89 e9                	mov    ecx,ebp
c001bdad:	d3 e6                	shl    esi,cl
c001bdaf:	89 f3                	mov    ebx,esi
c001bdb1:	89 fa                	mov    edx,edi
c001bdb3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001bdb7:	89 d1                	mov    ecx,edx
c001bdb9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001bdbd:	89 c6                	mov    esi,eax
c001bdbf:	89 d7                	mov    edi,edx
c001bdc1:	39 d1                	cmp    ecx,edx
c001bdc3:	72 27                	jb     c001bdec <__umoddi3+0x10c>
c001bdc5:	74 21                	je     c001bde8 <__umoddi3+0x108>
c001bdc7:	89 ca                	mov    edx,ecx
c001bdc9:	29 f3                	sub    ebx,esi
c001bdcb:	19 fa                	sbb    edx,edi
c001bdcd:	89 d0                	mov    eax,edx
c001bdcf:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001bdd3:	d3 e0                	shl    eax,cl
c001bdd5:	89 e9                	mov    ecx,ebp
c001bdd7:	d3 eb                	shr    ebx,cl
c001bdd9:	09 d8                	or     eax,ebx
c001bddb:	d3 ea                	shr    edx,cl
c001bddd:	83 c4 1c             	add    esp,0x1c
c001bde0:	5b                   	pop    ebx
c001bde1:	5e                   	pop    esi
c001bde2:	5f                   	pop    edi
c001bde3:	5d                   	pop    ebp
c001bde4:	c3                   	ret    
c001bde5:	8d 76 00             	lea    esi,[esi+0x0]
c001bde8:	39 c3                	cmp    ebx,eax
c001bdea:	73 db                	jae    c001bdc7 <__umoddi3+0xe7>
c001bdec:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001bdf0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001bdf4:	89 d7                	mov    edi,edx
c001bdf6:	89 c6                	mov    esi,eax
c001bdf8:	eb cd                	jmp    c001bdc7 <__umoddi3+0xe7>

Disassembly of section .init:

c001bdfa <_init>:
c001bdfa:	55                   	push   ebp
c001bdfb:	89 e5                	mov    ebp,esp
c001bdfd:	e8 f2 42 fe ff       	call   c00000f4 <frame_dummy>
c001be02:	e8 e5 fa ff ff       	call   c001b8ec <__do_global_ctors_aux>
c001be07:	5d                   	pop    ebp
c001be08:	c3                   	ret    

Disassembly of section .fini:

c001be09 <_fini>:
c001be09:	55                   	push   ebp
c001be0a:	89 e5                	mov    ebp,esp
c001be0c:	e8 73 42 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001be11:	5d                   	pop    ebp
c001be12:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001be14 <Computer::~Computer()>:
c001be14:	83 ec 0c             	sub    esp,0xc
c001be17:	ba d8 d0 01 c0       	mov    edx,0xc001d0d8
c001be1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be20:	89 10                	mov    DWORD PTR [eax],edx
c001be22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be26:	83 ec 0c             	sub    esp,0xc
c001be29:	50                   	push   eax
c001be2a:	e8 67 f9 fe ff       	call   c000b796 <Device::~Device()>
c001be2f:	83 c4 10             	add    esp,0x10
c001be32:	90                   	nop
c001be33:	83 c4 0c             	add    esp,0xc
c001be36:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001be38 <Computer::~Computer()>:
c001be38:	83 ec 0c             	sub    esp,0xc
c001be3b:	83 ec 0c             	sub    esp,0xc
c001be3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be42:	e8 cd ff ff ff       	call   c001be14 <Computer::~Computer()>
c001be47:	83 c4 10             	add    esp,0x10
c001be4a:	83 ec 08             	sub    esp,0x8
c001be4d:	68 70 01 00 00       	push   0x170
c001be52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be56:	e8 03 e5 fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001be5b:	83 c4 10             	add    esp,0x10
c001be5e:	83 c4 0c             	add    esp,0xc
c001be61:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001be62 <idleCommon()>:
c001be62:	83 ec 0c             	sub    esp,0xc
c001be65:	fa                   	cli    
c001be66:	ff 05 e8 36 02 c0    	inc    DWORD PTR ds:0xc00236e8
c001be6c:	e8 6b 74 ff ff       	call   c00132dc <schedule()>
c001be71:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c001be76:	48                   	dec    eax
c001be77:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c001be7c:	75 01                	jne    c001be7f <idleCommon()+0x1d>
c001be7e:	fb                   	sti    
c001be7f:	83 c4 0c             	add    esp,0xc
c001be82:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001be84 <LinkedList<UnixFile>::~LinkedList()>:
c001be84:	90                   	nop
c001be85:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001be86 <LinkedList<UnixFile>::LinkedList()>:
c001be86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be8a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001be90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be94:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001be9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be9f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001beaa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001beb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001beb4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bebb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bebf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bec6:	90                   	nop
c001bec7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001bec8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001bec8:	83 ec 0c             	sub    esp,0xc
c001becb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001bed0:	75 10                	jne    c001bee2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001bed2:	83 ec 0c             	sub    esp,0xc
c001bed5:	68 2c d3 01 c0       	push   0xc001d32c
c001beda:	e8 ec 41 ff ff       	call   c00100cb <KePanic(char const*)>
c001bedf:	83 c4 10             	add    esp,0x10
c001bee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bee6:	8b 00                	mov    eax,DWORD PTR [eax]
c001bee8:	85 c0                	test   eax,eax
c001beea:	74 34                	je     c001bf20 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001beec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bef0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bef3:	85 c0                	test   eax,eax
c001bef5:	74 29                	je     c001bf20 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001bef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001befb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001befe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bf02:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bf05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf09:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bf0d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bf10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bf17:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bf1e:	eb 65                	jmp    c001bf85 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001bf20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf24:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf26:	85 c0                	test   eax,eax
c001bf28:	75 4b                	jne    c001bf75 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001bf2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bf31:	85 c0                	test   eax,eax
c001bf33:	75 40                	jne    c001bf75 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001bf35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf39:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bf3d:	89 10                	mov    DWORD PTR [eax],edx
c001bf3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf43:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bf47:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bf4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bf51:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bf58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf5c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bf5f:	85 c0                	test   eax,eax
c001bf61:	74 22                	je     c001bf85 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001bf63:	83 ec 0c             	sub    esp,0xc
c001bf66:	68 4e d3 01 c0       	push   0xc001d34e
c001bf6b:	e8 5b 41 ff ff       	call   c00100cb <KePanic(char const*)>
c001bf70:	83 c4 10             	add    esp,0x10
c001bf73:	eb 10                	jmp    c001bf85 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001bf75:	83 ec 0c             	sub    esp,0xc
c001bf78:	68 58 d3 01 c0       	push   0xc001d358
c001bf7d:	e8 49 41 ff ff       	call   c00100cb <KePanic(char const*)>
c001bf82:	83 c4 10             	add    esp,0x10
c001bf85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf89:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bf8c:	8d 50 01             	lea    edx,[eax+0x1]
c001bf8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf93:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bf96:	90                   	nop
c001bf97:	83 c4 0c             	add    esp,0xc
c001bf9a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001bf9c <LinkedList<UnixFile>::getFirstElement()>:
c001bf9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bfa0:	8b 00                	mov    eax,DWORD PTR [eax]
c001bfa2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001bfa4 <LinkedList<UnixFile>::removeFirst()>:
c001bfa4:	83 ec 0c             	sub    esp,0xc
c001bfa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfab:	8b 00                	mov    eax,DWORD PTR [eax]
c001bfad:	85 c0                	test   eax,eax
c001bfaf:	75 12                	jne    c001bfc3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001bfb1:	83 ec 0c             	sub    esp,0xc
c001bfb4:	68 64 d3 01 c0       	push   0xc001d364
c001bfb9:	e8 0d 41 ff ff       	call   c00100cb <KePanic(char const*)>
c001bfbe:	83 c4 10             	add    esp,0x10
c001bfc1:	eb 7e                	jmp    c001c041 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001bfc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfc7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bfca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bfcd:	85 c0                	test   eax,eax
c001bfcf:	74 10                	je     c001bfe1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001bfd1:	83 ec 0c             	sub    esp,0xc
c001bfd4:	68 af d3 01 c0       	push   0xc001d3af
c001bfd9:	e8 ed 40 ff ff       	call   c00100cb <KePanic(char const*)>
c001bfde:	83 c4 10             	add    esp,0x10
c001bfe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfe5:	8b 00                	mov    eax,DWORD PTR [eax]
c001bfe7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bfea:	85 c0                	test   eax,eax
c001bfec:	75 33                	jne    c001c021 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001bfee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bff2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bffc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c007:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c00a:	83 f8 01             	cmp    eax,0x1
c001c00d:	74 21                	je     c001c030 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c00f:	83 ec 0c             	sub    esp,0xc
c001c012:	68 88 d3 01 c0       	push   0xc001d388
c001c017:	e8 af 40 ff ff       	call   c00100cb <KePanic(char const*)>
c001c01c:	83 c4 10             	add    esp,0x10
c001c01f:	eb 0f                	jmp    c001c030 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c025:	8b 00                	mov    eax,DWORD PTR [eax]
c001c027:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c02a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c02e:	89 10                	mov    DWORD PTR [eax],edx
c001c030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c034:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c037:	8d 50 ff             	lea    edx,[eax-0x1]
c001c03a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c03e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c041:	83 c4 0c             	add    esp,0xc
c001c044:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c046 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c046:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c04a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c04d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c04e <DriverlessDevice::~DriverlessDevice()>:
c001c04e:	ba fc d9 01 c0       	mov    edx,0xc001d9fc
c001c053:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c057:	89 10                	mov    DWORD PTR [eax],edx
c001c059:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c05d:	50                   	push   eax
c001c05e:	e8 33 f7 fe ff       	call   c000b796 <Device::~Device()>
c001c063:	83 c4 04             	add    esp,0x4
c001c066:	90                   	nop
c001c067:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c068 <DriverlessDevice::~DriverlessDevice()>:
c001c068:	83 ec 0c             	sub    esp,0xc
c001c06b:	83 ec 0c             	sub    esp,0xc
c001c06e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c072:	e8 d7 ff ff ff       	call   c001c04e <DriverlessDevice::~DriverlessDevice()>
c001c077:	83 c4 10             	add    esp,0x10
c001c07a:	83 ec 08             	sub    esp,0x8
c001c07d:	68 58 01 00 00       	push   0x158
c001c082:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c086:	e8 d3 e2 fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c08b:	83 c4 10             	add    esp,0x10
c001c08e:	83 c4 0c             	add    esp,0xc
c001c091:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c092 <LinkedList<Device>::addElement(Device*)>:
c001c092:	83 ec 0c             	sub    esp,0xc
c001c095:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c09a:	75 10                	jne    c001c0ac <LinkedList<Device>::addElement(Device*)+0x1a>
c001c09c:	83 ec 0c             	sub    esp,0xc
c001c09f:	68 2c d3 01 c0       	push   0xc001d32c
c001c0a4:	e8 22 40 ff ff       	call   c00100cb <KePanic(char const*)>
c001c0a9:	83 c4 10             	add    esp,0x10
c001c0ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c0b2:	85 c0                	test   eax,eax
c001c0b4:	74 3a                	je     c001c0f0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c0b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c0bd:	85 c0                	test   eax,eax
c001c0bf:	74 2f                	je     c001c0f0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c0c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c0c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c0cc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c0d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c0da:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c0dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c0e4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c0ee:	eb 68                	jmp    c001c158 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c0f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c0f6:	85 c0                	test   eax,eax
c001c0f8:	75 4e                	jne    c001c148 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c0fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c101:	85 c0                	test   eax,eax
c001c103:	75 43                	jne    c001c148 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c105:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c109:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c10d:	89 10                	mov    DWORD PTR [eax],edx
c001c10f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c113:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c117:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c11a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c11e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c121:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c12b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c12f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c132:	85 c0                	test   eax,eax
c001c134:	74 22                	je     c001c158 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c136:	83 ec 0c             	sub    esp,0xc
c001c139:	68 4e d3 01 c0       	push   0xc001d34e
c001c13e:	e8 88 3f ff ff       	call   c00100cb <KePanic(char const*)>
c001c143:	83 c4 10             	add    esp,0x10
c001c146:	eb 10                	jmp    c001c158 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c148:	83 ec 0c             	sub    esp,0xc
c001c14b:	68 58 d3 01 c0       	push   0xc001d358
c001c150:	e8 76 3f ff ff       	call   c00100cb <KePanic(char const*)>
c001c155:	83 c4 10             	add    esp,0x10
c001c158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c15c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c15f:	8d 50 01             	lea    edx,[eax+0x1]
c001c162:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c166:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c169:	90                   	nop
c001c16a:	83 c4 0c             	add    esp,0xc
c001c16d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c16e <LinkedList<Device>::LinkedList()>:
c001c16e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c172:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c178:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c17c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c183:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c187:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c18e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c192:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c198:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c19c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c1a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1a7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c1ae:	90                   	nop
c001c1af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c1b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c1b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1b4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c1b6:	85 c0                	test   eax,eax
c001c1b8:	75 0e                	jne    c001c1c8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c1ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c1c1:	85 c0                	test   eax,eax
c001c1c3:	75 03                	jne    c001c1c8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c1c5:	b0 01                	mov    al,0x1
c001c1c7:	c3                   	ret    
c001c1c8:	b0 00                	mov    al,0x0
c001c1ca:	90                   	nop
c001c1cb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c1cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c1cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c1d2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c1d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c1d4:	83 ec 0c             	sub    esp,0xc
c001c1d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1db:	8b 00                	mov    eax,DWORD PTR [eax]
c001c1dd:	85 c0                	test   eax,eax
c001c1df:	75 17                	jne    c001c1f8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c1e1:	83 ec 0c             	sub    esp,0xc
c001c1e4:	68 64 d3 01 c0       	push   0xc001d364
c001c1e9:	e8 dd 3e ff ff       	call   c00100cb <KePanic(char const*)>
c001c1ee:	83 c4 10             	add    esp,0x10
c001c1f1:	e9 92 00 00 00       	jmp    c001c288 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c1f6:	66 90                	xchg   ax,ax
c001c1f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c1ff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c202:	85 c0                	test   eax,eax
c001c204:	0f 95 c0             	setne  al
c001c207:	84 c0                	test   al,al
c001c209:	74 11                	je     c001c21c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c20b:	83 ec 0c             	sub    esp,0xc
c001c20e:	68 af d3 01 c0       	push   0xc001d3af
c001c213:	e8 b3 3e ff ff       	call   c00100cb <KePanic(char const*)>
c001c218:	83 c4 10             	add    esp,0x10
c001c21b:	90                   	nop
c001c21c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c220:	8b 00                	mov    eax,DWORD PTR [eax]
c001c222:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c225:	85 c0                	test   eax,eax
c001c227:	0f 94 c0             	sete   al
c001c22a:	84 c0                	test   al,al
c001c22c:	74 36                	je     c001c264 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c22e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c232:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c23c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c247:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c24a:	83 f8 01             	cmp    eax,0x1
c001c24d:	74 25                	je     c001c274 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c24f:	83 ec 0c             	sub    esp,0xc
c001c252:	68 88 d3 01 c0       	push   0xc001d388
c001c257:	e8 6f 3e ff ff       	call   c00100cb <KePanic(char const*)>
c001c25c:	83 c4 10             	add    esp,0x10
c001c25f:	eb 13                	jmp    c001c274 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c261:	8d 76 00             	lea    esi,[esi+0x0]
c001c264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c268:	8b 00                	mov    eax,DWORD PTR [eax]
c001c26a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c26d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c271:	89 10                	mov    DWORD PTR [eax],edx
c001c273:	90                   	nop
c001c274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c278:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c27b:	8d 50 ff             	lea    edx,[eax-0x1]
c001c27e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c282:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c285:	8d 76 00             	lea    esi,[esi+0x0]
c001c288:	83 c4 0c             	add    esp,0xc
c001c28b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c28c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c28c:	83 ec 0c             	sub    esp,0xc
c001c28f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c294:	75 12                	jne    c001c2a8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c296:	83 ec 0c             	sub    esp,0xc
c001c299:	68 2c d3 01 c0       	push   0xc001d32c
c001c29e:	e8 28 3e ff ff       	call   c00100cb <KePanic(char const*)>
c001c2a3:	83 c4 10             	add    esp,0x10
c001c2a6:	66 90                	xchg   ax,ax
c001c2a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2ac:	8b 00                	mov    eax,DWORD PTR [eax]
c001c2ae:	85 c0                	test   eax,eax
c001c2b0:	74 36                	je     c001c2e8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c2b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c2b9:	85 c0                	test   eax,eax
c001c2bb:	74 2b                	je     c001c2e8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c2bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c2c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c2c8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c2cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2cf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c2d3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c2d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c2dd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c2e4:	eb 6a                	jmp    c001c350 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c2e6:	66 90                	xchg   ax,ax
c001c2e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2ec:	8b 00                	mov    eax,DWORD PTR [eax]
c001c2ee:	85 c0                	test   eax,eax
c001c2f0:	75 4e                	jne    c001c340 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c2f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c2f9:	85 c0                	test   eax,eax
c001c2fb:	75 43                	jne    c001c340 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c2fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c301:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c305:	89 10                	mov    DWORD PTR [eax],edx
c001c307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c30b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c30f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c316:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c319:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c324:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c327:	85 c0                	test   eax,eax
c001c329:	74 25                	je     c001c350 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c32b:	83 ec 0c             	sub    esp,0xc
c001c32e:	68 4e d3 01 c0       	push   0xc001d34e
c001c333:	e8 93 3d ff ff       	call   c00100cb <KePanic(char const*)>
c001c338:	83 c4 10             	add    esp,0x10
c001c33b:	eb 13                	jmp    c001c350 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c33d:	8d 76 00             	lea    esi,[esi+0x0]
c001c340:	83 ec 0c             	sub    esp,0xc
c001c343:	68 58 d3 01 c0       	push   0xc001d358
c001c348:	e8 7e 3d ff ff       	call   c00100cb <KePanic(char const*)>
c001c34d:	83 c4 10             	add    esp,0x10
c001c350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c354:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c357:	8d 50 01             	lea    edx,[eax+0x1]
c001c35a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c35e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c361:	90                   	nop
c001c362:	83 c4 0c             	add    esp,0xc
c001c365:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c368 <ACPI::~ACPI()>:
c001c368:	83 ec 0c             	sub    esp,0xc
c001c36b:	ba 64 df 01 c0       	mov    edx,0xc001df64
c001c370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c374:	89 10                	mov    DWORD PTR [eax],edx
c001c376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c37a:	83 ec 0c             	sub    esp,0xc
c001c37d:	50                   	push   eax
c001c37e:	e8 13 f4 fe ff       	call   c000b796 <Device::~Device()>
c001c383:	83 c4 10             	add    esp,0x10
c001c386:	90                   	nop
c001c387:	83 c4 0c             	add    esp,0xc
c001c38a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c38c <ACPI::~ACPI()>:
c001c38c:	83 ec 0c             	sub    esp,0xc
c001c38f:	83 ec 0c             	sub    esp,0xc
c001c392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c396:	e8 cd ff ff ff       	call   c001c368 <ACPI::~ACPI()>
c001c39b:	83 c4 10             	add    esp,0x10
c001c39e:	83 ec 08             	sub    esp,0x8
c001c3a1:	68 64 12 00 00       	push   0x1264
c001c3a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3aa:	e8 af df fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c3af:	83 c4 10             	add    esp,0x10
c001c3b2:	83 c4 0c             	add    esp,0xc
c001c3b5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c3b8 <LinkedList<Device>::~LinkedList()>:
c001c3b8:	90                   	nop
c001c3b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c3bc <LinkedList<Device>::isEmpty()>:
c001c3bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c3c2:	85 c0                	test   eax,eax
c001c3c4:	75 0e                	jne    c001c3d4 <LinkedList<Device>::isEmpty()+0x18>
c001c3c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c3cd:	85 c0                	test   eax,eax
c001c3cf:	75 03                	jne    c001c3d4 <LinkedList<Device>::isEmpty()+0x18>
c001c3d1:	b0 01                	mov    al,0x1
c001c3d3:	c3                   	ret    
c001c3d4:	b0 00                	mov    al,0x0
c001c3d6:	90                   	nop
c001c3d7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001c3d8 <LinkedList<Device>::getFirstElement()>:
c001c3d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3dc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c3de:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001c3e0 <LinkedList<Device>::removeFirst()>:
c001c3e0:	83 ec 0c             	sub    esp,0xc
c001c3e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3e7:	8b 00                	mov    eax,DWORD PTR [eax]
c001c3e9:	85 c0                	test   eax,eax
c001c3eb:	75 17                	jne    c001c404 <LinkedList<Device>::removeFirst()+0x24>
c001c3ed:	83 ec 0c             	sub    esp,0xc
c001c3f0:	68 64 d3 01 c0       	push   0xc001d364
c001c3f5:	e8 d1 3c ff ff       	call   c00100cb <KePanic(char const*)>
c001c3fa:	83 c4 10             	add    esp,0x10
c001c3fd:	e9 92 00 00 00       	jmp    c001c494 <LinkedList<Device>::removeFirst()+0xb4>
c001c402:	66 90                	xchg   ax,ax
c001c404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c408:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c40b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c411:	85 c0                	test   eax,eax
c001c413:	74 13                	je     c001c428 <LinkedList<Device>::removeFirst()+0x48>
c001c415:	83 ec 0c             	sub    esp,0xc
c001c418:	68 af d3 01 c0       	push   0xc001d3af
c001c41d:	e8 a9 3c ff ff       	call   c00100cb <KePanic(char const*)>
c001c422:	83 c4 10             	add    esp,0x10
c001c425:	8d 76 00             	lea    esi,[esi+0x0]
c001c428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c42c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c42e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c434:	85 c0                	test   eax,eax
c001c436:	75 34                	jne    c001c46c <LinkedList<Device>::removeFirst()+0x8c>
c001c438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c43c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c446:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c44d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c451:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c454:	83 f8 01             	cmp    eax,0x1
c001c457:	74 27                	je     c001c480 <LinkedList<Device>::removeFirst()+0xa0>
c001c459:	83 ec 0c             	sub    esp,0xc
c001c45c:	68 88 d3 01 c0       	push   0xc001d388
c001c461:	e8 65 3c ff ff       	call   c00100cb <KePanic(char const*)>
c001c466:	83 c4 10             	add    esp,0x10
c001c469:	eb 15                	jmp    c001c480 <LinkedList<Device>::removeFirst()+0xa0>
c001c46b:	90                   	nop
c001c46c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c470:	8b 00                	mov    eax,DWORD PTR [eax]
c001c472:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001c478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c47c:	89 10                	mov    DWORD PTR [eax],edx
c001c47e:	66 90                	xchg   ax,ax
c001c480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c484:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c487:	8d 50 ff             	lea    edx,[eax-0x1]
c001c48a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c48e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c491:	8d 76 00             	lea    esi,[esi+0x0]
c001c494:	83 c4 0c             	add    esp,0xc
c001c497:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001c498 <CPU::~CPU()>:
c001c498:	83 ec 0c             	sub    esp,0xc
c001c49b:	ba 00 e1 01 c0       	mov    edx,0xc001e100
c001c4a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4a4:	89 10                	mov    DWORD PTR [eax],edx
c001c4a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4aa:	83 ec 0c             	sub    esp,0xc
c001c4ad:	50                   	push   eax
c001c4ae:	e8 e3 f2 fe ff       	call   c000b796 <Device::~Device()>
c001c4b3:	83 c4 10             	add    esp,0x10
c001c4b6:	90                   	nop
c001c4b7:	83 c4 0c             	add    esp,0xc
c001c4ba:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001c4bc <CPU::~CPU()>:
c001c4bc:	83 ec 0c             	sub    esp,0xc
c001c4bf:	83 ec 0c             	sub    esp,0xc
c001c4c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4c6:	e8 cd ff ff ff       	call   c001c498 <CPU::~CPU()>
c001c4cb:	83 c4 10             	add    esp,0x10
c001c4ce:	83 ec 08             	sub    esp,0x8
c001c4d1:	68 94 11 00 00       	push   0x1194
c001c4d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4da:	e8 7f de fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c4df:	83 c4 10             	add    esp,0x10
c001c4e2:	83 c4 0c             	add    esp,0xc
c001c4e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001c4e8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001c4e8:	90                   	nop
c001c4e9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001c4ec <ThreadControlBlock::ThreadControlBlock()>:
c001c4ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4f0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c4f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4fb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001c502:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c506:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001c50d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c511:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001c518:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c51c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001c523:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c527:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001c52b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c52f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001c533:	90                   	nop
c001c534:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001c538 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001c538:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c53c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c546:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c54d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c551:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c55c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c562:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c566:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c56d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c571:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c578:	90                   	nop
c001c579:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001c57c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001c57c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c580:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c583:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001c584 <PCI::~PCI()>:
c001c584:	83 ec 0c             	sub    esp,0xc
c001c587:	ba 58 ec 01 c0       	mov    edx,0xc001ec58
c001c58c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c590:	89 10                	mov    DWORD PTR [eax],edx
c001c592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c596:	83 ec 0c             	sub    esp,0xc
c001c599:	50                   	push   eax
c001c59a:	e8 81 ec fe ff       	call   c000b220 <Bus::~Bus()>
c001c59f:	83 c4 10             	add    esp,0x10
c001c5a2:	90                   	nop
c001c5a3:	83 c4 0c             	add    esp,0xc
c001c5a6:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001c5a8 <PCI::~PCI()>:
c001c5a8:	83 ec 0c             	sub    esp,0xc
c001c5ab:	83 ec 0c             	sub    esp,0xc
c001c5ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5b2:	e8 cd ff ff ff       	call   c001c584 <PCI::~PCI()>
c001c5b7:	83 c4 10             	add    esp,0x10
c001c5ba:	83 ec 08             	sub    esp,0x8
c001c5bd:	68 5c 01 00 00       	push   0x15c
c001c5c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5c6:	e8 93 dd fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c5cb:	83 c4 10             	add    esp,0x10
c001c5ce:	83 c4 0c             	add    esp,0xc
c001c5d1:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001c5d2 <IDE::~IDE()>:
c001c5d2:	83 ec 0c             	sub    esp,0xc
c001c5d5:	ba 0c ed 01 c0       	mov    edx,0xc001ed0c
c001c5da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5de:	89 10                	mov    DWORD PTR [eax],edx
c001c5e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5e4:	83 ec 0c             	sub    esp,0xc
c001c5e7:	50                   	push   eax
c001c5e8:	e8 23 f6 fe ff       	call   c000bc10 <HardDiskController::~HardDiskController()>
c001c5ed:	83 c4 10             	add    esp,0x10
c001c5f0:	90                   	nop
c001c5f1:	83 c4 0c             	add    esp,0xc
c001c5f4:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001c5f6 <IDE::~IDE()>:
c001c5f6:	83 ec 0c             	sub    esp,0xc
c001c5f9:	83 ec 0c             	sub    esp,0xc
c001c5fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c600:	e8 cd ff ff ff       	call   c001c5d2 <IDE::~IDE()>
c001c605:	83 c4 10             	add    esp,0x10
c001c608:	83 ec 08             	sub    esp,0x8
c001c60b:	68 70 02 00 00       	push   0x270
c001c610:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c614:	e8 45 dd fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c619:	83 c4 10             	add    esp,0x10
c001c61c:	83 c4 0c             	add    esp,0xc
c001c61f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001c620 <SATABus::~SATABus()>:
c001c620:	83 ec 0c             	sub    esp,0xc
c001c623:	ba 5c ed 01 c0       	mov    edx,0xc001ed5c
c001c628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c62c:	89 10                	mov    DWORD PTR [eax],edx
c001c62e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c632:	83 ec 0c             	sub    esp,0xc
c001c635:	50                   	push   eax
c001c636:	e8 d5 f5 fe ff       	call   c000bc10 <HardDiskController::~HardDiskController()>
c001c63b:	83 c4 10             	add    esp,0x10
c001c63e:	90                   	nop
c001c63f:	83 c4 0c             	add    esp,0xc
c001c642:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001c644 <SATABus::~SATABus()>:
c001c644:	83 ec 0c             	sub    esp,0xc
c001c647:	83 ec 0c             	sub    esp,0xc
c001c64a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c64e:	e8 cd ff ff ff       	call   c001c620 <SATABus::~SATABus()>
c001c653:	83 c4 10             	add    esp,0x10
c001c656:	83 ec 08             	sub    esp,0x8
c001c659:	68 64 01 00 00       	push   0x164
c001c65e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c662:	e8 f7 dc fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c667:	83 c4 10             	add    esp,0x10
c001c66a:	83 c4 0c             	add    esp,0xc
c001c66d:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001c66e <ATA::~ATA()>:
c001c66e:	83 ec 0c             	sub    esp,0xc
c001c671:	ba 9c ed 01 c0       	mov    edx,0xc001ed9c
c001c676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c67a:	89 10                	mov    DWORD PTR [eax],edx
c001c67c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c680:	83 ec 0c             	sub    esp,0xc
c001c683:	50                   	push   eax
c001c684:	e8 69 f6 fe ff       	call   c000bcf2 <PhysicalDisk::~PhysicalDisk()>
c001c689:	83 c4 10             	add    esp,0x10
c001c68c:	90                   	nop
c001c68d:	83 c4 0c             	add    esp,0xc
c001c690:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001c692 <ATA::~ATA()>:
c001c692:	83 ec 0c             	sub    esp,0xc
c001c695:	83 ec 0c             	sub    esp,0xc
c001c698:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c69c:	e8 cd ff ff ff       	call   c001c66e <ATA::~ATA()>
c001c6a1:	83 c4 10             	add    esp,0x10
c001c6a4:	83 ec 08             	sub    esp,0x8
c001c6a7:	68 7c 01 00 00       	push   0x17c
c001c6ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6b0:	e8 a9 dc fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c6b5:	83 c4 10             	add    esp,0x10
c001c6b8:	83 c4 0c             	add    esp,0xc
c001c6bb:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001c6bc <ATAPI::~ATAPI()>:
c001c6bc:	83 ec 0c             	sub    esp,0xc
c001c6bf:	ba e4 ed 01 c0       	mov    edx,0xc001ede4
c001c6c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6c8:	89 10                	mov    DWORD PTR [eax],edx
c001c6ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6ce:	83 ec 0c             	sub    esp,0xc
c001c6d1:	50                   	push   eax
c001c6d2:	e8 1b f6 fe ff       	call   c000bcf2 <PhysicalDisk::~PhysicalDisk()>
c001c6d7:	83 c4 10             	add    esp,0x10
c001c6da:	90                   	nop
c001c6db:	83 c4 0c             	add    esp,0xc
c001c6de:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001c6e0 <ATAPI::~ATAPI()>:
c001c6e0:	83 ec 0c             	sub    esp,0xc
c001c6e3:	83 ec 0c             	sub    esp,0xc
c001c6e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6ea:	e8 cd ff ff ff       	call   c001c6bc <ATAPI::~ATAPI()>
c001c6ef:	83 c4 10             	add    esp,0x10
c001c6f2:	83 ec 08             	sub    esp,0x8
c001c6f5:	68 84 01 00 00       	push   0x184
c001c6fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6fe:	e8 5b dc fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c703:	83 c4 10             	add    esp,0x10
c001c706:	83 c4 0c             	add    esp,0xc
c001c709:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001c70a <SATA::~SATA()>:
c001c70a:	83 ec 0c             	sub    esp,0xc
c001c70d:	ba 98 ee 01 c0       	mov    edx,0xc001ee98
c001c712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c716:	89 10                	mov    DWORD PTR [eax],edx
c001c718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c71c:	83 ec 0c             	sub    esp,0xc
c001c71f:	50                   	push   eax
c001c720:	e8 cd f5 fe ff       	call   c000bcf2 <PhysicalDisk::~PhysicalDisk()>
c001c725:	83 c4 10             	add    esp,0x10
c001c728:	90                   	nop
c001c729:	83 c4 0c             	add    esp,0xc
c001c72c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001c72e <SATA::~SATA()>:
c001c72e:	83 ec 0c             	sub    esp,0xc
c001c731:	83 ec 0c             	sub    esp,0xc
c001c734:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c738:	e8 cd ff ff ff       	call   c001c70a <SATA::~SATA()>
c001c73d:	83 c4 10             	add    esp,0x10
c001c740:	83 ec 08             	sub    esp,0x8
c001c743:	68 7c 01 00 00       	push   0x17c
c001c748:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c74c:	e8 0d dc fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c751:	83 c4 10             	add    esp,0x10
c001c754:	83 c4 0c             	add    esp,0xc
c001c757:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001c758 <SATAPI::~SATAPI()>:
c001c758:	83 ec 0c             	sub    esp,0xc
c001c75b:	ba d0 ef 01 c0       	mov    edx,0xc001efd0
c001c760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c764:	89 10                	mov    DWORD PTR [eax],edx
c001c766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c76a:	83 ec 0c             	sub    esp,0xc
c001c76d:	50                   	push   eax
c001c76e:	e8 7f f5 fe ff       	call   c000bcf2 <PhysicalDisk::~PhysicalDisk()>
c001c773:	83 c4 10             	add    esp,0x10
c001c776:	90                   	nop
c001c777:	83 c4 0c             	add    esp,0xc
c001c77a:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001c77c <SATAPI::~SATAPI()>:
c001c77c:	83 ec 0c             	sub    esp,0xc
c001c77f:	83 ec 0c             	sub    esp,0xc
c001c782:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c786:	e8 cd ff ff ff       	call   c001c758 <SATAPI::~SATAPI()>
c001c78b:	83 c4 10             	add    esp,0x10
c001c78e:	83 ec 08             	sub    esp,0x8
c001c791:	68 84 01 00 00       	push   0x184
c001c796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c79a:	e8 bf db fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c79f:	83 c4 10             	add    esp,0x10
c001c7a2:	83 c4 0c             	add    esp,0xc
c001c7a5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001c7a6 <IOAPIC::~IOAPIC()>:
c001c7a6:	83 ec 0c             	sub    esp,0xc
c001c7a9:	ba 10 f0 01 c0       	mov    edx,0xc001f010
c001c7ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7b2:	89 10                	mov    DWORD PTR [eax],edx
c001c7b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7b8:	83 ec 0c             	sub    esp,0xc
c001c7bb:	50                   	push   eax
c001c7bc:	e8 d5 ef fe ff       	call   c000b796 <Device::~Device()>
c001c7c1:	83 c4 10             	add    esp,0x10
c001c7c4:	90                   	nop
c001c7c5:	83 c4 0c             	add    esp,0xc
c001c7c8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001c7ca <IOAPIC::~IOAPIC()>:
c001c7ca:	83 ec 0c             	sub    esp,0xc
c001c7cd:	83 ec 0c             	sub    esp,0xc
c001c7d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7d4:	e8 cd ff ff ff       	call   c001c7a6 <IOAPIC::~IOAPIC()>
c001c7d9:	83 c4 10             	add    esp,0x10
c001c7dc:	83 ec 08             	sub    esp,0x8
c001c7df:	68 68 01 00 00       	push   0x168
c001c7e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7e8:	e8 71 db fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c7ed:	83 c4 10             	add    esp,0x10
c001c7f0:	83 c4 0c             	add    esp,0xc
c001c7f3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001c7f4 <APICTimer::~APICTimer()>:
c001c7f4:	83 ec 0c             	sub    esp,0xc
c001c7f7:	ba 58 f0 01 c0       	mov    edx,0xc001f058
c001c7fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c800:	89 10                	mov    DWORD PTR [eax],edx
c001c802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c806:	83 ec 0c             	sub    esp,0xc
c001c809:	50                   	push   eax
c001c80a:	e8 99 08 ff ff       	call   c000d0a8 <Timer::~Timer()>
c001c80f:	83 c4 10             	add    esp,0x10
c001c812:	90                   	nop
c001c813:	83 c4 0c             	add    esp,0xc
c001c816:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001c818 <APICTimer::~APICTimer()>:
c001c818:	83 ec 0c             	sub    esp,0xc
c001c81b:	83 ec 0c             	sub    esp,0xc
c001c81e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c822:	e8 cd ff ff ff       	call   c001c7f4 <APICTimer::~APICTimer()>
c001c827:	83 c4 10             	add    esp,0x10
c001c82a:	83 ec 08             	sub    esp,0x8
c001c82d:	68 60 01 00 00       	push   0x160
c001c832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c836:	e8 23 db fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c83b:	83 c4 10             	add    esp,0x10
c001c83e:	83 c4 0c             	add    esp,0xc
c001c841:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001c844 <PIT::~PIT()>:
c001c844:	83 ec 0c             	sub    esp,0xc
c001c847:	ba a8 f0 01 c0       	mov    edx,0xc001f0a8
c001c84c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c850:	89 10                	mov    DWORD PTR [eax],edx
c001c852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c856:	83 ec 0c             	sub    esp,0xc
c001c859:	50                   	push   eax
c001c85a:	e8 49 08 ff ff       	call   c000d0a8 <Timer::~Timer()>
c001c85f:	83 c4 10             	add    esp,0x10
c001c862:	90                   	nop
c001c863:	83 c4 0c             	add    esp,0xc
c001c866:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001c868 <PIT::~PIT()>:
c001c868:	83 ec 0c             	sub    esp,0xc
c001c86b:	83 ec 0c             	sub    esp,0xc
c001c86e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c872:	e8 cd ff ff ff       	call   c001c844 <PIT::~PIT()>
c001c877:	83 c4 10             	add    esp,0x10
c001c87a:	83 ec 08             	sub    esp,0x8
c001c87d:	68 5c 01 00 00       	push   0x15c
c001c882:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c886:	e8 d3 da fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c88b:	83 c4 10             	add    esp,0x10
c001c88e:	83 c4 0c             	add    esp,0xc
c001c891:	c3                   	ret    
