
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f8 63 01 00       	call   c0016418 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 44 47 03 c0       	mov    eax,0xc0034744
c0000025:	3d 44 47 03 c0       	cmp    eax,0xc0034744
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 44 47 03 c0       	push   0xc0034744
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 44 47 03 c0       	mov    eax,0xc0034744
c0000051:	2d 44 47 03 c0       	sub    eax,0xc0034744
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 44 47 03 c0       	push   0xc0034744
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d a0 68 03 c0 00 	cmp    BYTE PTR ds:0xc00368a0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 2c f3 02 c0       	mov    ebx,0xc002f32c
c0000097:	81 eb 28 f3 02 c0    	sub    ebx,0xc002f328
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 28 f3 02 c0       	mov    esi,0xc002f328
c00000a6:	a1 a4 68 03 c0       	mov    eax,ds:0xc00368a4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 a4 68 03 c0       	mov    ds:0xc00368a4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 a4 68 03 c0       	mov    eax,ds:0xc00368a4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 44 47 03 c0       	push   0xc0034744
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 a0 68 03 c0 01 	mov    BYTE PTR ds:0xc00368a0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 a8 68 03 c0       	push   0xc00368a8
c0000108:	68 44 47 03 c0       	push   0xc0034744
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 df 47 02 00       	call   c0024a8c <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 10 8d 01 00       	call   c0018fd5 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 bd 47 02 00       	call   c0024a8c <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 ca 4c 02 00       	call   c0024fb8 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 6d 51 02 00       	call   c0025464 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c4 a9 03 c0 	lgdtd  ds:0xc003a9c4
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 b7 fe 01 00       	jmp    c0020236 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 c0 68 03 c0       	mov    ds:0xc00368c0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 c0 68 03 c0    	mov    DWORD PTR ds:0xc00368c0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d c0 68 03 c0    	mov    ebx,DWORD PTR ds:0xc00368c0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 40 f3 02 c0 02 	test   BYTE PTR [edx-0x3ffd0cc0],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 40 f3 02 c0 01 	test   BYTE PTR [edx-0x3ffd0cc0],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 40 f3 02 c0 08 	test   BYTE PTR [edx-0x3ffd0cc0],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 40 f3 02 c0 04 	test   BYTE PTR [ecx-0x3ffd0cc0],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 40 f3 02 c0 01 	test   BYTE PTR [edx-0x3ffd0cc0],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <LWIP_PLATFORM_HTONS>:
c0000be8:	83 ec 04             	sub    esp,0x4
c0000beb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000bef:	66 89 04 24          	mov    WORD PTR [esp],ax
c0000bf3:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000bf7:	c1 e8 08             	shr    eax,0x8
c0000bfa:	89 c2                	mov    edx,eax
c0000bfc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000c00:	c1 e0 08             	shl    eax,0x8
c0000c03:	09 d0                	or     eax,edx
c0000c05:	83 c4 04             	add    esp,0x4
c0000c08:	c3                   	ret    
c0000c09:	8d 76 00             	lea    esi,[esi+0x0]

c0000c0c <LWIP_PLATFORM_HTONL>:
c0000c0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c10:	c1 e8 18             	shr    eax,0x18
c0000c13:	89 c2                	mov    edx,eax
c0000c15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c19:	c1 e8 08             	shr    eax,0x8
c0000c1c:	25 00 ff 00 00       	and    eax,0xff00
c0000c21:	09 c2                	or     edx,eax
c0000c23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c27:	c1 e0 08             	shl    eax,0x8
c0000c2a:	25 00 00 ff 00       	and    eax,0xff0000
c0000c2f:	09 c2                	or     edx,eax
c0000c31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c35:	c1 e0 18             	shl    eax,0x18
c0000c38:	09 d0                	or     eax,edx
c0000c3a:	c3                   	ret    
c0000c3b:	90                   	nop

c0000c3c <lwip_socket_init>:
c0000c3c:	83 ec 0c             	sub    esp,0xc
c0000c3f:	83 ec 0c             	sub    esp,0xc
c0000c42:	68 41 f4 02 c0       	push   0xc002f441
c0000c47:	e8 28 11 02 00       	call   c0021d74 <KeCPanic>
c0000c4c:	83 c4 10             	add    esp,0x10
c0000c4f:	90                   	nop
c0000c50:	83 c4 0c             	add    esp,0xc
c0000c53:	c3                   	ret    

c0000c54 <tcpip_callback_with_block>:
c0000c54:	83 ec 0c             	sub    esp,0xc
c0000c57:	83 ec 0c             	sub    esp,0xc
c0000c5a:	68 52 f4 02 c0       	push   0xc002f452
c0000c5f:	e8 10 11 02 00       	call   c0021d74 <KeCPanic>
c0000c64:	83 c4 10             	add    esp,0x10
c0000c67:	90                   	nop
c0000c68:	83 c4 0c             	add    esp,0xc
c0000c6b:	c3                   	ret    

c0000c6c <sys_sem_new>:
c0000c6c:	83 ec 1c             	sub    esp,0x1c
c0000c6f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000c73:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0000c77:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0000c7c:	83 ec 08             	sub    esp,0x8
c0000c7f:	50                   	push   eax
c0000c80:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0000c84:	e8 2b 10 02 00       	call   c0021cb4 <KeNetCreateSemaphore>
c0000c89:	83 c4 10             	add    esp,0x10
c0000c8c:	b0 00                	mov    al,0x0
c0000c8e:	83 c4 1c             	add    esp,0x1c
c0000c91:	c3                   	ret    
c0000c92:	66 90                	xchg   ax,ax

c0000c94 <sys_sem_free>:
c0000c94:	83 ec 0c             	sub    esp,0xc
c0000c97:	83 ec 0c             	sub    esp,0xc
c0000c9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000c9e:	e8 55 10 02 00       	call   c0021cf8 <KeNetFreeSemaphore>
c0000ca3:	83 c4 10             	add    esp,0x10
c0000ca6:	90                   	nop
c0000ca7:	83 c4 0c             	add    esp,0xc
c0000caa:	c3                   	ret    
c0000cab:	90                   	nop

c0000cac <sys_sem_signal>:
c0000cac:	83 ec 0c             	sub    esp,0xc
c0000caf:	83 ec 0c             	sub    esp,0xc
c0000cb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000cb6:	e8 59 10 02 00       	call   c0021d14 <KeNetSignalSemaphore>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	90                   	nop
c0000cbf:	83 c4 0c             	add    esp,0xc
c0000cc2:	c3                   	ret    
c0000cc3:	90                   	nop

c0000cc4 <sys_arch_sem_wait>:
c0000cc4:	83 ec 0c             	sub    esp,0xc
c0000cc7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000ccb:	83 ec 08             	sub    esp,0x8
c0000cce:	50                   	push   eax
c0000ccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000cd3:	e8 58 10 02 00       	call   c0021d30 <KeNetWaitSemaphore>
c0000cd8:	83 c4 10             	add    esp,0x10
c0000cdb:	83 c4 0c             	add    esp,0xc
c0000cde:	c3                   	ret    
c0000cdf:	90                   	nop

c0000ce0 <sys_mbox_new>:
c0000ce0:	83 ec 0c             	sub    esp,0xc
c0000ce3:	83 ec 0c             	sub    esp,0xc
c0000ce6:	68 6c f4 02 c0       	push   0xc002f46c
c0000ceb:	e8 84 10 02 00       	call   c0021d74 <KeCPanic>
c0000cf0:	83 c4 10             	add    esp,0x10
c0000cf3:	b0 00                	mov    al,0x0
c0000cf5:	83 c4 0c             	add    esp,0xc
c0000cf8:	c3                   	ret    
c0000cf9:	8d 76 00             	lea    esi,[esi+0x0]

c0000cfc <sys_mbox_free>:
c0000cfc:	83 ec 0c             	sub    esp,0xc
c0000cff:	83 ec 0c             	sub    esp,0xc
c0000d02:	68 79 f4 02 c0       	push   0xc002f479
c0000d07:	e8 68 10 02 00       	call   c0021d74 <KeCPanic>
c0000d0c:	83 c4 10             	add    esp,0x10
c0000d0f:	90                   	nop
c0000d10:	83 c4 0c             	add    esp,0xc
c0000d13:	c3                   	ret    

c0000d14 <sys_mbox_post>:
c0000d14:	83 ec 0c             	sub    esp,0xc
c0000d17:	83 ec 0c             	sub    esp,0xc
c0000d1a:	68 87 f4 02 c0       	push   0xc002f487
c0000d1f:	e8 50 10 02 00       	call   c0021d74 <KeCPanic>
c0000d24:	83 c4 10             	add    esp,0x10
c0000d27:	90                   	nop
c0000d28:	83 c4 0c             	add    esp,0xc
c0000d2b:	c3                   	ret    

c0000d2c <sys_arch_mbox_fetch>:
c0000d2c:	83 ec 0c             	sub    esp,0xc
c0000d2f:	83 ec 0c             	sub    esp,0xc
c0000d32:	68 95 f4 02 c0       	push   0xc002f495
c0000d37:	e8 38 10 02 00       	call   c0021d74 <KeCPanic>
c0000d3c:	83 c4 10             	add    esp,0x10
c0000d3f:	b8 00 00 00 00       	mov    eax,0x0
c0000d44:	83 c4 0c             	add    esp,0xc
c0000d47:	c3                   	ret    

c0000d48 <sys_arch_mbox_tryfetch>:
c0000d48:	83 ec 0c             	sub    esp,0xc
c0000d4b:	83 ec 0c             	sub    esp,0xc
c0000d4e:	68 a9 f4 02 c0       	push   0xc002f4a9
c0000d53:	e8 1c 10 02 00       	call   c0021d74 <KeCPanic>
c0000d58:	83 c4 10             	add    esp,0x10
c0000d5b:	b8 00 00 00 00       	mov    eax,0x0
c0000d60:	83 c4 0c             	add    esp,0xc
c0000d63:	c3                   	ret    

c0000d64 <sys_mbox_trypost>:
c0000d64:	83 ec 0c             	sub    esp,0xc
c0000d67:	83 ec 0c             	sub    esp,0xc
c0000d6a:	68 c0 f4 02 c0       	push   0xc002f4c0
c0000d6f:	e8 00 10 02 00       	call   c0021d74 <KeCPanic>
c0000d74:	83 c4 10             	add    esp,0x10
c0000d77:	90                   	nop
c0000d78:	83 c4 0c             	add    esp,0xc
c0000d7b:	c3                   	ret    

c0000d7c <sys_thread_new>:
c0000d7c:	83 ec 0c             	sub    esp,0xc
c0000d7f:	83 ec 08             	sub    esp,0x8
c0000d82:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0000d86:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0000d8a:	e8 c1 0f 02 00       	call   c0021d50 <KeNetCreateThread>
c0000d8f:	83 c4 10             	add    esp,0x10
c0000d92:	b8 00 00 00 00       	mov    eax,0x0
c0000d97:	83 c4 0c             	add    esp,0xc
c0000d9a:	c3                   	ret    
c0000d9b:	90                   	nop

c0000d9c <sys_init>:
c0000d9c:	90                   	nop
c0000d9d:	c3                   	ret    

c0000d9e <largebin_index>:
c0000d9e:	89 c2                	mov    edx,eax
c0000da0:	c1 ea 08             	shr    edx,0x8
c0000da3:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000da9:	77 10                	ja     c0000dbb <largebin_index+0x1d>
c0000dab:	0f bd d2             	bsr    edx,edx
c0000dae:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000db1:	d3 e8                	shr    eax,cl
c0000db3:	83 e0 03             	and    eax,0x3
c0000db6:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000dba:	c3                   	ret    
c0000dbb:	b8 5f 00 00 00       	mov    eax,0x5f
c0000dc0:	c3                   	ret    

c0000dc1 <malloc_init_state>:
c0000dc1:	53                   	push   ebx
c0000dc2:	8d 50 34             	lea    edx,[eax+0x34]
c0000dc5:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000dcb:	89 d1                	mov    ecx,edx
c0000dcd:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000dd0:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000dd3:	83 c2 08             	add    edx,0x8
c0000dd6:	39 da                	cmp    edx,ebx
c0000dd8:	75 f3                	jne    c0000dcd <malloc_init_state+0xc>
c0000dda:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ddc:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000de6:	83 e2 03             	and    edx,0x3
c0000de9:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000df3:	83 ca 48             	or     edx,0x48
c0000df6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000e00:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000e0a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000e11:	89 10                	mov    DWORD PTR [eax],edx
c0000e13:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000e16:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000e20:	5b                   	pop    ebx
c0000e21:	c3                   	ret    

c0000e22 <malloc_consolidate>:
c0000e22:	8b 10                	mov    edx,DWORD PTR [eax]
c0000e24:	85 d2                	test   edx,edx
c0000e26:	0f 84 d8 00 00 00    	je     c0000f04 <malloc_consolidate+0xe2>
c0000e2c:	55                   	push   ebp
c0000e2d:	83 e2 fd             	and    edx,0xfffffffd
c0000e30:	57                   	push   edi
c0000e31:	89 c5                	mov    ebp,eax
c0000e33:	56                   	push   esi
c0000e34:	8d 78 34             	lea    edi,[eax+0x34]
c0000e37:	53                   	push   ebx
c0000e38:	83 ec 10             	sub    esp,0x10
c0000e3b:	89 10                	mov    DWORD PTR [eax],edx
c0000e3d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000e41:	c1 ea 03             	shr    edx,0x3
c0000e44:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000e48:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000e4c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000e4f:	85 d2                	test   edx,edx
c0000e51:	0f 84 98 00 00 00    	je     c0000eef <malloc_consolidate+0xcd>
c0000e57:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000e5e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000e61:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000e64:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000e68:	89 f9                	mov    ecx,edi
c0000e6a:	83 e1 fe             	and    ecx,0xfffffffe
c0000e6d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000e70:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000e73:	83 e3 fc             	and    ebx,0xfffffffc
c0000e76:	83 e7 01             	and    edi,0x1
c0000e79:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000e7c:	75 14                	jne    c0000e92 <malloc_consolidate+0x70>
c0000e7e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000e80:	29 fa                	sub    edx,edi
c0000e82:	01 f9                	add    ecx,edi
c0000e84:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e87:	89 fb                	mov    ebx,edi
c0000e89:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000e8c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000e8f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000e92:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000e95:	74 40                	je     c0000ed7 <malloc_consolidate+0xb5>
c0000e97:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000e9a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000e9d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ea1:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000ea4:	83 e7 01             	and    edi,0x1
c0000ea7:	75 0e                	jne    c0000eb7 <malloc_consolidate+0x95>
c0000ea9:	01 d9                	add    ecx,ebx
c0000eab:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000eae:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000eb1:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000eb4:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000eb7:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000eba:	89 ce                	mov    esi,ecx
c0000ebc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000ebf:	83 ce 01             	or     esi,0x1
c0000ec2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000ec5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000ec8:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000ecb:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000ecf:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ed2:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ed5:	eb 0c                	jmp    c0000ee3 <malloc_consolidate+0xc1>
c0000ed7:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000eda:	83 c9 01             	or     ecx,0x1
c0000edd:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ee0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ee3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ee7:	85 d2                	test   edx,edx
c0000ee9:	0f 85 6f ff ff ff    	jne    c0000e5e <malloc_consolidate+0x3c>
c0000eef:	83 c5 04             	add    ebp,0x4
c0000ef2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ef6:	0f 85 50 ff ff ff    	jne    c0000e4c <malloc_consolidate+0x2a>
c0000efc:	83 c4 10             	add    esp,0x10
c0000eff:	5b                   	pop    ebx
c0000f00:	5e                   	pop    esi
c0000f01:	5f                   	pop    edi
c0000f02:	5d                   	pop    ebp
c0000f03:	c3                   	ret    
c0000f04:	e9 b8 fe ff ff       	jmp    c0000dc1 <malloc_init_state>

c0000f09 <dlfree>:
c0000f09:	57                   	push   edi
c0000f0a:	56                   	push   esi
c0000f0b:	53                   	push   ebx
c0000f0c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000f10:	85 db                	test   ebx,ebx
c0000f12:	0f 84 e2 00 00 00    	je     c0000ffa <dlfree+0xf1>
c0000f18:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000f1b:	8b 0d e0 68 03 c0    	mov    ecx,DWORD PTR ds:0xc00368e0
c0000f21:	89 f0                	mov    eax,esi
c0000f23:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000f26:	83 e0 fc             	and    eax,0xfffffffc
c0000f29:	39 c1                	cmp    ecx,eax
c0000f2b:	72 24                	jb     c0000f51 <dlfree+0x48>
c0000f2d:	83 c9 03             	or     ecx,0x3
c0000f30:	c1 e8 03             	shr    eax,0x3
c0000f33:	89 0d e0 68 03 c0    	mov    DWORD PTR ds:0xc00368e0,ecx
c0000f39:	83 e8 02             	sub    eax,0x2
c0000f3c:	8b 0c 85 e4 68 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc971c]
c0000f43:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000f45:	89 14 85 e4 68 03 c0 	mov    DWORD PTR [eax*4-0x3ffc971c],edx
c0000f4c:	e9 a9 00 00 00       	jmp    c0000ffa <dlfree+0xf1>
c0000f51:	83 e6 02             	and    esi,0x2
c0000f54:	0f 85 a0 00 00 00    	jne    c0000ffa <dlfree+0xf1>
c0000f5a:	83 c9 01             	or     ecx,0x1
c0000f5d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000f60:	89 0d e0 68 03 c0    	mov    DWORD PTR ds:0xc00368e0,ecx
c0000f66:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000f69:	83 e1 fc             	and    ecx,0xfffffffc
c0000f6c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000f70:	75 13                	jne    c0000f85 <dlfree+0x7c>
c0000f72:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000f75:	29 da                	sub    edx,ebx
c0000f77:	01 d8                	add    eax,ebx
c0000f79:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000f7c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000f7f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000f82:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000f85:	39 35 0c 69 03 c0    	cmp    DWORD PTR ds:0xc003690c,esi
c0000f8b:	74 40                	je     c0000fcd <dlfree+0xc4>
c0000f8d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000f91:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000f94:	80 e3 01             	and    bl,0x1
c0000f97:	75 0e                	jne    c0000fa7 <dlfree+0x9e>
c0000f99:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000f9c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000f9f:	01 c8                	add    eax,ecx
c0000fa1:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000fa4:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000fa7:	8b 0d 1c 69 03 c0    	mov    ecx,DWORD PTR ds:0xc003691c
c0000fad:	c7 42 0c 14 69 03 c0 	mov    DWORD PTR [edx+0xc],0xc0036914
c0000fb4:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000fb7:	89 15 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,edx
c0000fbd:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000fc0:	89 c1                	mov    ecx,eax
c0000fc2:	83 c9 01             	or     ecx,0x1
c0000fc5:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000fc8:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000fcb:	eb 10                	jmp    c0000fdd <dlfree+0xd4>
c0000fcd:	01 c8                	add    eax,ecx
c0000fcf:	89 c1                	mov    ecx,eax
c0000fd1:	83 c9 01             	or     ecx,0x1
c0000fd4:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000fd7:	89 15 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,edx
c0000fdd:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000fe2:	76 16                	jbe    c0000ffa <dlfree+0xf1>
c0000fe4:	f6 05 e0 68 03 c0 02 	test   BYTE PTR ds:0xc00368e0,0x2
c0000feb:	74 0d                	je     c0000ffa <dlfree+0xf1>
c0000fed:	5b                   	pop    ebx
c0000fee:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0000ff3:	5e                   	pop    esi
c0000ff4:	5f                   	pop    edi
c0000ff5:	e9 28 fe ff ff       	jmp    c0000e22 <malloc_consolidate>
c0000ffa:	5b                   	pop    ebx
c0000ffb:	5e                   	pop    esi
c0000ffc:	5f                   	pop    edi
c0000ffd:	c3                   	ret    

c0000ffe <sYSMALLOc>:
c0000ffe:	55                   	push   ebp
c0000fff:	57                   	push   edi
c0001000:	56                   	push   esi
c0001001:	53                   	push   ebx
c0001002:	89 d3                	mov    ebx,edx
c0001004:	83 ec 2c             	sub    esp,0x2c
c0001007:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000100b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0001011:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0001014:	8d 42 ff             	lea    eax,[edx-0x1]
c0001017:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000101b:	74 1f                	je     c000103c <sYSMALLOc+0x3e>
c000101d:	89 d8                	mov    eax,ebx
c000101f:	e8 fe fd ff ff       	call   c0000e22 <malloc_consolidate>
c0001024:	83 ec 0c             	sub    esp,0xc
c0001027:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000102b:	83 e8 07             	sub    eax,0x7
c000102e:	50                   	push   eax
c000102f:	e8 2d 02 00 00       	call   c0001261 <dlmalloc>
c0001034:	83 c4 10             	add    esp,0x10
c0001037:	e9 1d 02 00 00       	jmp    c0001259 <sYSMALLOc+0x25b>
c000103c:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c000103f:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0001045:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0001048:	83 e0 fc             	and    eax,0xfffffffc
c000104b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000104f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001053:	83 c0 10             	add    eax,0x10
c0001056:	01 c1                	add    ecx,eax
c0001058:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000105c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0001063:	74 04                	je     c0001069 <sYSMALLOc+0x6b>
c0001065:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0001069:	f7 da                	neg    edx
c000106b:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c000106f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001073:	21 d1                	and    ecx,edx
c0001075:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0001079:	7f 07                	jg     c0001082 <sYSMALLOc+0x84>
c000107b:	31 c0                	xor    eax,eax
c000107d:	e9 d7 01 00 00       	jmp    c0001259 <sYSMALLOc+0x25b>
c0001082:	83 ec 0c             	sub    esp,0xc
c0001085:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0001089:	e8 02 52 01 00       	call   c0016290 <sbrk>
c000108e:	83 c4 10             	add    esp,0x10
c0001091:	89 c6                	mov    esi,eax
c0001093:	83 f8 ff             	cmp    eax,0xffffffff
c0001096:	74 e3                	je     c000107b <sYSMALLOc+0x7d>
c0001098:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000109c:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000109f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00010a3:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c00010a9:	39 f1                	cmp    ecx,esi
c00010ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00010af:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c00010b5:	75 13                	jne    c00010ca <sYSMALLOc+0xcc>
c00010b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00010bb:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00010bf:	83 c8 01             	or     eax,0x1
c00010c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00010c5:	e9 37 01 00 00       	jmp    c0001201 <sYSMALLOc+0x203>
c00010ca:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010d0:	89 d5                	mov    ebp,edx
c00010d2:	83 e5 01             	and    ebp,0x1
c00010d5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00010da:	0f 95 c0             	setne  al
c00010dd:	21 e8                	and    eax,ebp
c00010df:	39 f1                	cmp    ecx,esi
c00010e1:	76 12                	jbe    c00010f5 <sYSMALLOc+0xf7>
c00010e3:	85 c0                	test   eax,eax
c00010e5:	74 0e                	je     c00010f5 <sYSMALLOc+0xf7>
c00010e7:	83 e2 fe             	and    edx,0xfffffffe
c00010ea:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c00010f0:	e9 82 00 00 00       	jmp    c0001177 <sYSMALLOc+0x179>
c00010f5:	85 ed                	test   ebp,ebp
c00010f7:	74 7e                	je     c0001177 <sYSMALLOc+0x179>
c00010f9:	85 c0                	test   eax,eax
c00010fb:	74 0e                	je     c000110b <sYSMALLOc+0x10d>
c00010fd:	89 f0                	mov    eax,esi
c00010ff:	29 c8                	sub    eax,ecx
c0001101:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0001105:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c000110b:	89 f2                	mov    edx,esi
c000110d:	83 e2 07             	and    edx,0x7
c0001110:	74 0c                	je     c000111e <sYSMALLOc+0x120>
c0001112:	b8 08 00 00 00       	mov    eax,0x8
c0001117:	29 d0                	sub    eax,edx
c0001119:	8d 2c 06             	lea    ebp,[esi+eax*1]
c000111c:	eb 04                	jmp    c0001122 <sYSMALLOc+0x124>
c000111e:	89 f5                	mov    ebp,esi
c0001120:	31 c0                	xor    eax,eax
c0001122:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0001126:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000112a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000112e:	01 c1                	add    ecx,eax
c0001130:	83 ec 0c             	sub    esp,0xc
c0001133:	01 f1                	add    ecx,esi
c0001135:	01 ca                	add    edx,ecx
c0001137:	29 c8                	sub    eax,ecx
c0001139:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c000113d:	01 c2                	add    edx,eax
c000113f:	52                   	push   edx
c0001140:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0001144:	e8 47 51 01 00       	call   c0016290 <sbrk>
c0001149:	83 c4 10             	add    esp,0x10
c000114c:	83 f8 ff             	cmp    eax,0xffffffff
c000114f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001153:	75 0f                	jne    c0001164 <sYSMALLOc+0x166>
c0001155:	83 ec 0c             	sub    esp,0xc
c0001158:	6a 00                	push   0x0
c000115a:	e8 31 51 01 00       	call   c0016290 <sbrk>
c000115f:	83 c4 10             	add    esp,0x10
c0001162:	eb 30                	jmp    c0001194 <sYSMALLOc+0x196>
c0001164:	39 c6                	cmp    esi,eax
c0001166:	76 33                	jbe    c000119b <sYSMALLOc+0x19d>
c0001168:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000116c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001173:	01 f0                	add    eax,esi
c0001175:	eb 1d                	jmp    c0001194 <sYSMALLOc+0x196>
c0001177:	83 ec 0c             	sub    esp,0xc
c000117a:	89 f5                	mov    ebp,esi
c000117c:	6a 00                	push   0x0
c000117e:	e8 0d 51 01 00       	call   c0016290 <sbrk>
c0001183:	89 c2                	mov    edx,eax
c0001185:	29 f2                	sub    edx,esi
c0001187:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c000118b:	83 c4 10             	add    esp,0x10
c000118e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001194:	31 d2                	xor    edx,edx
c0001196:	83 f8 ff             	cmp    eax,0xffffffff
c0001199:	74 66                	je     c0001201 <sYSMALLOc+0x203>
c000119b:	29 e8                	sub    eax,ebp
c000119d:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c00011a0:	01 d0                	add    eax,edx
c00011a2:	83 c8 01             	or     eax,0x1
c00011a5:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00011a8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00011ae:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00011b3:	74 4c                	je     c0001201 <sYSMALLOc+0x203>
c00011b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011b9:	83 e8 0c             	sub    eax,0xc
c00011bc:	83 e0 f8             	and    eax,0xfffffff8
c00011bf:	89 c2                	mov    edx,eax
c00011c1:	83 ca 01             	or     edx,0x1
c00011c4:	83 f8 0f             	cmp    eax,0xf
c00011c7:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c00011ca:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c00011d2:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c00011da:	76 25                	jbe    c0001201 <sYSMALLOc+0x203>
c00011dc:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00011e2:	83 ec 0c             	sub    esp,0xc
c00011e5:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011ef:	83 c7 08             	add    edi,0x8
c00011f2:	57                   	push   edi
c00011f3:	e8 11 fd ff ff       	call   c0000f09 <dlfree>
c00011f8:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00011fe:	83 c4 10             	add    esp,0x10
c0001201:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001207:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000120d:	73 06                	jae    c0001215 <sYSMALLOc+0x217>
c000120f:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001215:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000121b:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001221:	73 06                	jae    c0001229 <sYSMALLOc+0x22b>
c0001223:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001229:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000122c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000122f:	83 e2 fc             	and    edx,0xfffffffc
c0001232:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001236:	0f 82 3f fe ff ff    	jb     c000107b <sYSMALLOc+0x7d>
c000123c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001240:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001243:	29 fa                	sub    edx,edi
c0001245:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001248:	83 ca 01             	or     edx,0x1
c000124b:	89 fb                	mov    ebx,edi
c000124d:	83 c0 08             	add    eax,0x8
c0001250:	83 cb 01             	or     ebx,0x1
c0001253:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001256:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001259:	83 c4 2c             	add    esp,0x2c
c000125c:	5b                   	pop    ebx
c000125d:	5e                   	pop    esi
c000125e:	5f                   	pop    edi
c000125f:	5d                   	pop    ebp
c0001260:	c3                   	ret    

c0001261 <dlmalloc>:
c0001261:	55                   	push   ebp
c0001262:	57                   	push   edi
c0001263:	56                   	push   esi
c0001264:	53                   	push   ebx
c0001265:	83 ec 1c             	sub    esp,0x1c
c0001268:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000126c:	83 f8 df             	cmp    eax,0xffffffdf
c000126f:	0f 87 70 03 00 00    	ja     c00015e5 <dlmalloc+0x384>
c0001275:	83 c0 0b             	add    eax,0xb
c0001278:	be 10 00 00 00       	mov    esi,0x10
c000127d:	83 f8 0f             	cmp    eax,0xf
c0001280:	76 05                	jbe    c0001287 <dlmalloc+0x26>
c0001282:	83 e0 f8             	and    eax,0xfffffff8
c0001285:	89 c6                	mov    esi,eax
c0001287:	8b 3d e0 68 03 c0    	mov    edi,DWORD PTR ds:0xc00368e0
c000128d:	f7 c7 01 00 00 00    	test   edi,0x1
c0001293:	75 17                	jne    c00012ac <dlmalloc+0x4b>
c0001295:	85 ff                	test   edi,edi
c0001297:	0f 85 05 03 00 00    	jne    c00015a2 <dlmalloc+0x341>
c000129d:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c00012a2:	e8 7b fb ff ff       	call   c0000e22 <malloc_consolidate>
c00012a7:	e9 f6 02 00 00       	jmp    c00015a2 <dlmalloc+0x341>
c00012ac:	39 f7                	cmp    edi,esi
c00012ae:	72 1f                	jb     c00012cf <dlmalloc+0x6e>
c00012b0:	89 f2                	mov    edx,esi
c00012b2:	c1 ea 03             	shr    edx,0x3
c00012b5:	83 ea 02             	sub    edx,0x2
c00012b8:	8b 04 95 e4 68 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc971c]
c00012bf:	85 c0                	test   eax,eax
c00012c1:	74 0c                	je     c00012cf <dlmalloc+0x6e>
c00012c3:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00012c6:	89 0c 95 e4 68 03 c0 	mov    DWORD PTR [edx*4-0x3ffc971c],ecx
c00012cd:	eb 30                	jmp    c00012ff <dlmalloc+0x9e>
c00012cf:	89 f0                	mov    eax,esi
c00012d1:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d7:	77 2e                	ja     c0001307 <dlmalloc+0xa6>
c00012d9:	c1 e8 03             	shr    eax,0x3
c00012dc:	8d 14 c5 14 69 03 c0 	lea    edx,[eax*8-0x3ffc96ec]
c00012e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012e7:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012ea:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012ed:	39 c3                	cmp    ebx,eax
c00012ef:	74 2e                	je     c000131f <dlmalloc+0xbe>
c00012f1:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012f4:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012f9:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012fc:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012ff:	83 c0 08             	add    eax,0x8
c0001302:	e9 e0 02 00 00       	jmp    c00015e7 <dlmalloc+0x386>
c0001307:	e8 92 fa ff ff       	call   c0000d9e <largebin_index>
c000130c:	83 e7 02             	and    edi,0x2
c000130f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001313:	74 0a                	je     c000131f <dlmalloc+0xbe>
c0001315:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c000131a:	e8 03 fb ff ff       	call   c0000e22 <malloc_consolidate>
c000131f:	8d 46 10             	lea    eax,[esi+0x10]
c0001322:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001326:	8b 1d 20 69 03 c0    	mov    ebx,DWORD PTR ds:0xc0036920
c000132c:	81 fb 14 69 03 c0    	cmp    ebx,0xc0036914
c0001332:	0f 84 13 01 00 00    	je     c000144b <dlmalloc+0x1ea>
c0001338:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000133b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000133e:	83 e7 fc             	and    edi,0xfffffffc
c0001341:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001347:	77 4c                	ja     c0001395 <dlmalloc+0x134>
c0001349:	3d 14 69 03 c0       	cmp    eax,0xc0036914
c000134e:	75 45                	jne    c0001395 <dlmalloc+0x134>
c0001350:	39 1d 10 69 03 c0    	cmp    DWORD PTR ds:0xc0036910,ebx
c0001356:	75 3d                	jne    c0001395 <dlmalloc+0x134>
c0001358:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000135c:	73 37                	jae    c0001395 <dlmalloc+0x134>
c000135e:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001361:	89 fa                	mov    edx,edi
c0001363:	a3 1c 69 03 c0       	mov    ds:0xc003691c,eax
c0001368:	a3 20 69 03 c0       	mov    ds:0xc0036920,eax
c000136d:	a3 10 69 03 c0       	mov    ds:0xc0036910,eax
c0001372:	29 f2                	sub    edx,esi
c0001374:	c7 40 08 14 69 03 c0 	mov    DWORD PTR [eax+0x8],0xc0036914
c000137b:	c7 40 0c 14 69 03 c0 	mov    DWORD PTR [eax+0xc],0xc0036914
c0001382:	83 ce 01             	or     esi,0x1
c0001385:	89 d1                	mov    ecx,edx
c0001387:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000138a:	83 c9 01             	or     ecx,0x1
c000138d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001390:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001393:	eb 15                	jmp    c00013aa <dlmalloc+0x149>
c0001395:	a3 20 69 03 c0       	mov    ds:0xc0036920,eax
c000139a:	39 fe                	cmp    esi,edi
c000139c:	c7 40 08 14 69 03 c0 	mov    DWORD PTR [eax+0x8],0xc0036914
c00013a3:	75 0d                	jne    c00013b2 <dlmalloc+0x151>
c00013a5:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00013aa:	8d 43 08             	lea    eax,[ebx+0x8]
c00013ad:	e9 35 02 00 00       	jmp    c00015e7 <dlmalloc+0x386>
c00013b2:	89 f8                	mov    eax,edi
c00013b4:	81 ff ff 00 00 00    	cmp    edi,0xff
c00013ba:	77 19                	ja     c00013d5 <dlmalloc+0x174>
c00013bc:	c1 e8 03             	shr    eax,0x3
c00013bf:	8d 14 00             	lea    edx,[eax+eax*1]
c00013c2:	83 c2 0d             	add    edx,0xd
c00013c5:	8d 2c 95 d8 68 03 c0 	lea    ebp,[edx*4-0x3ffc9728]
c00013cc:	8b 14 95 e0 68 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9720]
c00013d3:	eb 46                	jmp    c000141b <dlmalloc+0x1ba>
c00013d5:	e8 c4 f9 ff ff       	call   c0000d9e <largebin_index>
c00013da:	8d 14 00             	lea    edx,[eax+eax*1]
c00013dd:	83 c2 0d             	add    edx,0xd
c00013e0:	8d 0c 95 e0 68 03 c0 	lea    ecx,[edx*4-0x3ffc9720]
c00013e7:	8b 14 95 e0 68 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9720]
c00013ee:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013f1:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013f5:	89 d5                	mov    ebp,edx
c00013f7:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013fb:	74 1e                	je     c000141b <dlmalloc+0x1ba>
c00013fd:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001400:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001403:	77 12                	ja     c0001417 <dlmalloc+0x1b6>
c0001405:	83 cf 01             	or     edi,0x1
c0001408:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000140b:	76 05                	jbe    c0001412 <dlmalloc+0x1b1>
c000140d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001410:	eb f6                	jmp    c0001408 <dlmalloc+0x1a7>
c0001412:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001415:	eb 04                	jmp    c000141b <dlmalloc+0x1ba>
c0001417:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000141b:	89 c7                	mov    edi,eax
c000141d:	88 c1                	mov    cl,al
c000141f:	c1 ff 05             	sar    edi,0x5
c0001422:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001426:	bf 01 00 00 00       	mov    edi,0x1
c000142b:	d3 e7                	shl    edi,cl
c000142d:	89 f8                	mov    eax,edi
c000142f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001433:	09 04 bd 14 6c 03 c0 	or     DWORD PTR [edi*4-0x3ffc93ec],eax
c000143a:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c000143d:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001440:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001443:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001446:	e9 db fe ff ff       	jmp    c0001326 <dlmalloc+0xc5>
c000144b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001451:	76 78                	jbe    c00014cb <dlmalloc+0x26a>
c0001453:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001457:	8d 04 c5 14 69 03 c0 	lea    eax,[eax*8-0x3ffc96ec]
c000145e:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001461:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001464:	39 ca                	cmp    edx,ecx
c0001466:	74 63                	je     c00014cb <dlmalloc+0x26a>
c0001468:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000146b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000146e:	83 e3 fc             	and    ebx,0xfffffffc
c0001471:	39 de                	cmp    esi,ebx
c0001473:	77 52                	ja     c00014c7 <dlmalloc+0x266>
c0001475:	89 df                	mov    edi,ebx
c0001477:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000147a:	29 f7                	sub    edi,esi
c000147c:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000147f:	01 d3                	add    ebx,edx
c0001481:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001484:	83 ff 0f             	cmp    edi,0xf
c0001487:	8d 42 08             	lea    eax,[edx+0x8]
c000148a:	77 09                	ja     c0001495 <dlmalloc+0x234>
c000148c:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001490:	e9 52 01 00 00       	jmp    c00015e7 <dlmalloc+0x386>
c0001495:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001498:	83 ce 01             	or     esi,0x1
c000149b:	89 0d 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,ecx
c00014a1:	89 0d 20 69 03 c0    	mov    DWORD PTR ds:0xc0036920,ecx
c00014a7:	c7 41 08 14 69 03 c0 	mov    DWORD PTR [ecx+0x8],0xc0036914
c00014ae:	c7 41 0c 14 69 03 c0 	mov    DWORD PTR [ecx+0xc],0xc0036914
c00014b5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c00014b8:	89 fa                	mov    edx,edi
c00014ba:	83 ca 01             	or     edx,0x1
c00014bd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014c0:	89 3b                	mov    DWORD PTR [ebx],edi
c00014c2:	e9 20 01 00 00       	jmp    c00015e7 <dlmalloc+0x386>
c00014c7:	89 c2                	mov    edx,eax
c00014c9:	eb 99                	jmp    c0001464 <dlmalloc+0x203>
c00014cb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00014cf:	b8 01 00 00 00       	mov    eax,0x1
c00014d4:	41                   	inc    ecx
c00014d5:	89 cb                	mov    ebx,ecx
c00014d7:	8d 14 cd 0c 69 03 c0 	lea    edx,[ecx*8-0x3ffc96f4]
c00014de:	c1 eb 05             	shr    ebx,0x5
c00014e1:	d3 e0                	shl    eax,cl
c00014e3:	8b 3c 9d 14 6c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc93ec]
c00014ea:	39 f8                	cmp    eax,edi
c00014ec:	77 04                	ja     c00014f2 <dlmalloc+0x291>
c00014ee:	85 c0                	test   eax,eax
c00014f0:	75 26                	jne    c0001518 <dlmalloc+0x2b7>
c00014f2:	43                   	inc    ebx
c00014f3:	83 fb 02             	cmp    ebx,0x2
c00014f6:	0f 87 a6 00 00 00    	ja     c00015a2 <dlmalloc+0x341>
c00014fc:	8b 3c 9d 14 6c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc93ec]
c0001503:	85 ff                	test   edi,edi
c0001505:	74 eb                	je     c00014f2 <dlmalloc+0x291>
c0001507:	89 d8                	mov    eax,ebx
c0001509:	c1 e0 06             	shl    eax,0x6
c000150c:	8d 14 85 0c 69 03 c0 	lea    edx,[eax*4-0x3ffc96f4]
c0001513:	b8 01 00 00 00       	mov    eax,0x1
c0001518:	85 f8                	test   eax,edi
c000151a:	75 07                	jne    c0001523 <dlmalloc+0x2c2>
c000151c:	83 c2 08             	add    edx,0x8
c000151f:	01 c0                	add    eax,eax
c0001521:	eb f5                	jmp    c0001518 <dlmalloc+0x2b7>
c0001523:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001526:	39 ca                	cmp    edx,ecx
c0001528:	75 14                	jne    c000153e <dlmalloc+0x2dd>
c000152a:	89 c1                	mov    ecx,eax
c000152c:	83 c2 08             	add    edx,0x8
c000152f:	f7 d1                	not    ecx
c0001531:	01 c0                	add    eax,eax
c0001533:	21 cf                	and    edi,ecx
c0001535:	89 3c 9d 14 6c 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc93ec],edi
c000153c:	eb ac                	jmp    c00014ea <dlmalloc+0x289>
c000153e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001541:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001544:	83 e0 fc             	and    eax,0xfffffffc
c0001547:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000154a:	89 c3                	mov    ebx,eax
c000154c:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000154f:	29 f3                	sub    ebx,esi
c0001551:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001554:	83 fb 0f             	cmp    ebx,0xf
c0001557:	8d 41 08             	lea    eax,[ecx+0x8]
c000155a:	77 09                	ja     c0001565 <dlmalloc+0x304>
c000155c:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001560:	e9 82 00 00 00       	jmp    c00015e7 <dlmalloc+0x386>
c0001565:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001568:	81 fe ff 00 00 00    	cmp    esi,0xff
c000156e:	89 3d 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,edi
c0001574:	89 3d 20 69 03 c0    	mov    DWORD PTR ds:0xc0036920,edi
c000157a:	c7 47 08 14 69 03 c0 	mov    DWORD PTR [edi+0x8],0xc0036914
c0001581:	c7 47 0c 14 69 03 c0 	mov    DWORD PTR [edi+0xc],0xc0036914
c0001588:	77 06                	ja     c0001590 <dlmalloc+0x32f>
c000158a:	89 3d 10 69 03 c0    	mov    DWORD PTR ds:0xc0036910,edi
c0001590:	83 ce 01             	or     esi,0x1
c0001593:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001596:	89 d9                	mov    ecx,ebx
c0001598:	83 c9 01             	or     ecx,0x1
c000159b:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000159e:	89 1a                	mov    DWORD PTR [edx],ebx
c00015a0:	eb 45                	jmp    c00015e7 <dlmalloc+0x386>
c00015a2:	a1 0c 69 03 c0       	mov    eax,ds:0xc003690c
c00015a7:	8d 4e 10             	lea    ecx,[esi+0x10]
c00015aa:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00015ad:	83 e2 fc             	and    edx,0xfffffffc
c00015b0:	39 d1                	cmp    ecx,edx
c00015b2:	77 1e                	ja     c00015d2 <dlmalloc+0x371>
c00015b4:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00015b7:	89 f3                	mov    ebx,esi
c00015b9:	89 0d 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,ecx
c00015bf:	83 cb 01             	or     ebx,0x1
c00015c2:	29 f2                	sub    edx,esi
c00015c4:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c7:	83 ca 01             	or     edx,0x1
c00015ca:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00015cd:	e9 2d fd ff ff       	jmp    c00012ff <dlmalloc+0x9e>
c00015d2:	83 c4 1c             	add    esp,0x1c
c00015d5:	89 f0                	mov    eax,esi
c00015d7:	5b                   	pop    ebx
c00015d8:	ba e0 68 03 c0       	mov    edx,0xc00368e0
c00015dd:	5e                   	pop    esi
c00015de:	5f                   	pop    edi
c00015df:	5d                   	pop    ebp
c00015e0:	e9 19 fa ff ff       	jmp    c0000ffe <sYSMALLOc>
c00015e5:	31 c0                	xor    eax,eax
c00015e7:	83 c4 1c             	add    esp,0x1c
c00015ea:	5b                   	pop    ebx
c00015eb:	5e                   	pop    esi
c00015ec:	5f                   	pop    edi
c00015ed:	5d                   	pop    ebp
c00015ee:	c3                   	ret    

c00015ef <iALLOc>:
c00015ef:	55                   	push   ebp
c00015f0:	89 c5                	mov    ebp,eax
c00015f2:	57                   	push   edi
c00015f3:	56                   	push   esi
c00015f4:	53                   	push   ebx
c00015f5:	83 ec 2c             	sub    esp,0x2c
c00015f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015fc:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001600:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001604:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c000160b:	75 12                	jne    c000161f <iALLOc+0x30>
c000160d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001611:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001616:	e8 07 f8 ff ff       	call   c0000e22 <malloc_consolidate>
c000161b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000161f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001624:	74 12                	je     c0001638 <iALLOc+0x49>
c0001626:	85 ed                	test   ebp,ebp
c0001628:	0f 84 64 01 00 00    	je     c0001792 <iALLOc+0x1a3>
c000162e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001636:	eb 33                	jmp    c000166b <iALLOc+0x7c>
c0001638:	85 ed                	test   ebp,ebp
c000163a:	75 14                	jne    c0001650 <iALLOc+0x61>
c000163c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001644:	83 c4 2c             	add    esp,0x2c
c0001647:	5b                   	pop    ebx
c0001648:	5e                   	pop    esi
c0001649:	5f                   	pop    edi
c000164a:	5d                   	pop    ebp
c000164b:	e9 11 fc ff ff       	jmp    c0001261 <dlmalloc>
c0001650:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001657:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000165f:	83 f8 0f             	cmp    eax,0xf
c0001662:	76 07                	jbe    c000166b <iALLOc+0x7c>
c0001664:	83 e0 f8             	and    eax,0xfffffff8
c0001667:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000166b:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001670:	75 09                	jne    c000167b <iALLOc+0x8c>
c0001672:	89 d0                	mov    eax,edx
c0001674:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001677:	31 f6                	xor    esi,esi
c0001679:	eb 3b                	jmp    c00016b6 <iALLOc+0xc7>
c000167b:	8b 02                	mov    eax,DWORD PTR [edx]
c000167d:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001685:	83 c0 0b             	add    eax,0xb
c0001688:	83 f8 0f             	cmp    eax,0xf
c000168b:	76 07                	jbe    c0001694 <iALLOc+0xa5>
c000168d:	83 e0 f8             	and    eax,0xfffffff8
c0001690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001694:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001698:	0f af f5             	imul   esi,ebp
c000169b:	eb 25                	jmp    c00016c2 <iALLOc+0xd3>
c000169d:	8b 18                	mov    ebx,DWORD PTR [eax]
c000169f:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00016a2:	bb 10 00 00 00       	mov    ebx,0x10
c00016a7:	83 f9 0f             	cmp    ecx,0xf
c00016aa:	76 05                	jbe    c00016b1 <iALLOc+0xc2>
c00016ac:	83 e1 f8             	and    ecx,0xfffffff8
c00016af:	89 cb                	mov    ebx,ecx
c00016b1:	01 de                	add    esi,ebx
c00016b3:	83 c0 04             	add    eax,0x4
c00016b6:	39 c7                	cmp    edi,eax
c00016b8:	75 e3                	jne    c000169d <iALLOc+0xae>
c00016ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00016c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00016c6:	8b 1d 34 6c 03 c0    	mov    ebx,DWORD PTR ds:0xc0036c34
c00016cc:	83 ec 0c             	sub    esp,0xc
c00016cf:	c7 05 34 6c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036c34,0x0
c00016d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016dd:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00016e1:	50                   	push   eax
c00016e2:	e8 7a fb ff ff       	call   c0001261 <dlmalloc>
c00016e7:	83 c4 10             	add    esp,0x10
c00016ea:	89 1d 34 6c 03 c0    	mov    DWORD PTR ds:0xc0036c34,ebx
c00016f0:	85 c0                	test   eax,eax
c00016f2:	0f 84 92 00 00 00    	je     c000178a <iALLOc+0x19b>
c00016f8:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016fb:	8d 78 f8             	lea    edi,[eax-0x8]
c00016fe:	83 e3 fc             	and    ebx,0xfffffffc
c0001701:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001705:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000170a:	74 1e                	je     c000172a <iALLOc+0x13b>
c000170c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001710:	89 d9                	mov    ecx,ebx
c0001712:	52                   	push   edx
c0001713:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001717:	83 e9 04             	sub    ecx,0x4
c000171a:	51                   	push   ecx
c000171b:	6a 00                	push   0x0
c000171d:	50                   	push   eax
c000171e:	e8 cd ed ff ff       	call   c00004f0 <memset>
c0001723:	83 c4 10             	add    esp,0x10
c0001726:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000172a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000172f:	75 14                	jne    c0001745 <iALLOc+0x156>
c0001731:	8d 04 37             	lea    eax,[edi+esi*1]
c0001734:	29 f3                	sub    ebx,esi
c0001736:	8d 48 08             	lea    ecx,[eax+0x8]
c0001739:	83 cb 01             	or     ebx,0x1
c000173c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001740:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001743:	89 f3                	mov    ebx,esi
c0001745:	31 c0                	xor    eax,eax
c0001747:	4d                   	dec    ebp
c0001748:	8d 4f 08             	lea    ecx,[edi+0x8]
c000174b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000174f:	39 c5                	cmp    ebp,eax
c0001751:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001754:	74 2c                	je     c0001782 <iALLOc+0x193>
c0001756:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000175a:	85 c9                	test   ecx,ecx
c000175c:	75 15                	jne    c0001773 <iALLOc+0x184>
c000175e:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001761:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001764:	b9 10 00 00 00       	mov    ecx,0x10
c0001769:	83 fe 0f             	cmp    esi,0xf
c000176c:	76 05                	jbe    c0001773 <iALLOc+0x184>
c000176e:	83 e6 f8             	and    esi,0xfffffff8
c0001771:	89 f1                	mov    ecx,esi
c0001773:	89 ce                	mov    esi,ecx
c0001775:	29 cb                	sub    ebx,ecx
c0001777:	83 ce 01             	or     esi,0x1
c000177a:	40                   	inc    eax
c000177b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000177e:	01 cf                	add    edi,ecx
c0001780:	eb c6                	jmp    c0001748 <iALLOc+0x159>
c0001782:	83 cb 01             	or     ebx,0x1
c0001785:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001788:	eb 08                	jmp    c0001792 <iALLOc+0x1a3>
c000178a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001792:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001796:	83 c4 2c             	add    esp,0x2c
c0001799:	5b                   	pop    ebx
c000179a:	5e                   	pop    esi
c000179b:	5f                   	pop    edi
c000179c:	5d                   	pop    ebp
c000179d:	c3                   	ret    

c000179e <dlrealloc>:
c000179e:	55                   	push   ebp
c000179f:	57                   	push   edi
c00017a0:	56                   	push   esi
c00017a1:	53                   	push   ebx
c00017a2:	83 ec 1c             	sub    esp,0x1c
c00017a5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00017a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00017ad:	85 db                	test   ebx,ebx
c00017af:	75 10                	jne    c00017c1 <dlrealloc+0x23>
c00017b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00017b5:	83 c4 1c             	add    esp,0x1c
c00017b8:	5b                   	pop    ebx
c00017b9:	5e                   	pop    esi
c00017ba:	5f                   	pop    edi
c00017bb:	5d                   	pop    ebp
c00017bc:	e9 a0 fa ff ff       	jmp    c0001261 <dlmalloc>
c00017c1:	83 f8 df             	cmp    eax,0xffffffdf
c00017c4:	76 07                	jbe    c00017cd <dlrealloc+0x2f>
c00017c6:	31 db                	xor    ebx,ebx
c00017c8:	e9 6a 01 00 00       	jmp    c0001937 <dlrealloc+0x199>
c00017cd:	83 c0 0b             	add    eax,0xb
c00017d0:	bd 10 00 00 00       	mov    ebp,0x10
c00017d5:	83 f8 0f             	cmp    eax,0xf
c00017d8:	76 05                	jbe    c00017df <dlrealloc+0x41>
c00017da:	83 e0 f8             	and    eax,0xfffffff8
c00017dd:	89 c5                	mov    ebp,eax
c00017df:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00017e2:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017e5:	89 c6                	mov    esi,eax
c00017e7:	83 e6 fc             	and    esi,0xfffffffc
c00017ea:	a8 02                	test   al,0x2
c00017ec:	75 d8                	jne    c00017c6 <dlrealloc+0x28>
c00017ee:	39 f5                	cmp    ebp,esi
c00017f0:	0f 86 04 01 00 00    	jbe    c00018fa <dlrealloc+0x15c>
c00017f6:	8d 14 37             	lea    edx,[edi+esi*1]
c00017f9:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00017fc:	39 15 0c 69 03 c0    	cmp    DWORD PTR ds:0xc003690c,edx
c0001802:	75 33                	jne    c0001837 <dlrealloc+0x99>
c0001804:	83 e1 fc             	and    ecx,0xfffffffc
c0001807:	01 f1                	add    ecx,esi
c0001809:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000180d:	8d 4d 10             	lea    ecx,[ebp+0x10]
c0001810:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0001814:	77 49                	ja     c000185f <dlrealloc+0xc1>
c0001816:	01 ef                	add    edi,ebp
c0001818:	83 e0 01             	and    eax,0x1
c000181b:	09 e8                	or     eax,ebp
c000181d:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001820:	89 3d 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,edi
c0001826:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000182a:	29 e8                	sub    eax,ebp
c000182c:	83 c8 01             	or     eax,0x1
c000182f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001832:	e9 00 01 00 00       	jmp    c0001937 <dlrealloc+0x199>
c0001837:	89 c8                	mov    eax,ecx
c0001839:	83 e0 fe             	and    eax,0xfffffffe
c000183c:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001841:	75 1c                	jne    c000185f <dlrealloc+0xc1>
c0001843:	83 e1 fc             	and    ecx,0xfffffffc
c0001846:	01 f1                	add    ecx,esi
c0001848:	39 cd                	cmp    ebp,ecx
c000184a:	77 13                	ja     c000185f <dlrealloc+0xc1>
c000184c:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c000184f:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001852:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001855:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001858:	89 ce                	mov    esi,ecx
c000185a:	e9 9b 00 00 00       	jmp    c00018fa <dlrealloc+0x15c>
c000185f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001863:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001866:	83 ec 0c             	sub    esp,0xc
c0001869:	50                   	push   eax
c000186a:	e8 f2 f9 ff ff       	call   c0001261 <dlmalloc>
c000186f:	83 c4 10             	add    esp,0x10
c0001872:	85 c0                	test   eax,eax
c0001874:	0f 84 4c ff ff ff    	je     c00017c6 <dlrealloc+0x28>
c000187a:	8d 48 f8             	lea    ecx,[eax-0x8]
c000187d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001881:	39 ca                	cmp    edx,ecx
c0001883:	75 0a                	jne    c000188f <dlrealloc+0xf1>
c0001885:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001888:	83 e0 fc             	and    eax,0xfffffffc
c000188b:	01 c6                	add    esi,eax
c000188d:	eb 6b                	jmp    c00018fa <dlrealloc+0x15c>
c000188f:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001892:	83 f9 27             	cmp    ecx,0x27
c0001895:	76 08                	jbe    c000189f <dlrealloc+0x101>
c0001897:	89 de                	mov    esi,ebx
c0001899:	89 c7                	mov    edi,eax
c000189b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000189d:	eb 43                	jmp    c00018e2 <dlrealloc+0x144>
c000189f:	8b 13                	mov    edx,DWORD PTR [ebx]
c00018a1:	83 f9 13             	cmp    ecx,0x13
c00018a4:	89 10                	mov    DWORD PTR [eax],edx
c00018a6:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00018a9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00018ac:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00018af:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00018b2:	76 2e                	jbe    c00018e2 <dlrealloc+0x144>
c00018b4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00018b7:	83 f9 1b             	cmp    ecx,0x1b
c00018ba:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00018bd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00018c0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00018c3:	76 1d                	jbe    c00018e2 <dlrealloc+0x144>
c00018c5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00018c8:	83 f9 23             	cmp    ecx,0x23
c00018cb:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00018ce:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00018d1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00018d4:	76 0c                	jbe    c00018e2 <dlrealloc+0x144>
c00018d6:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00018d9:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00018dc:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00018df:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00018e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018e6:	83 ec 0c             	sub    esp,0xc
c00018e9:	53                   	push   ebx
c00018ea:	e8 1a f6 ff ff       	call   c0000f09 <dlfree>
c00018ef:	83 c4 10             	add    esp,0x10
c00018f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018f6:	89 c3                	mov    ebx,eax
c00018f8:	eb 3d                	jmp    c0001937 <dlrealloc+0x199>
c00018fa:	89 f2                	mov    edx,esi
c00018fc:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018ff:	29 ea                	sub    edx,ebp
c0001901:	83 e1 01             	and    ecx,0x1
c0001904:	8d 04 37             	lea    eax,[edi+esi*1]
c0001907:	83 fa 0f             	cmp    edx,0xf
c000190a:	77 0b                	ja     c0001917 <dlrealloc+0x179>
c000190c:	09 ce                	or     esi,ecx
c000190e:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001911:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001915:	eb 20                	jmp    c0001937 <dlrealloc+0x199>
c0001917:	01 ef                	add    edi,ebp
c0001919:	83 ec 0c             	sub    esp,0xc
c000191c:	09 cd                	or     ebp,ecx
c000191e:	83 ca 01             	or     edx,0x1
c0001921:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c0001924:	83 c7 08             	add    edi,0x8
c0001927:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c000192a:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000192e:	57                   	push   edi
c000192f:	e8 d5 f5 ff ff       	call   c0000f09 <dlfree>
c0001934:	83 c4 10             	add    esp,0x10
c0001937:	83 c4 1c             	add    esp,0x1c
c000193a:	89 d8                	mov    eax,ebx
c000193c:	5b                   	pop    ebx
c000193d:	5e                   	pop    esi
c000193e:	5f                   	pop    edi
c000193f:	5d                   	pop    ebp
c0001940:	c3                   	ret    

c0001941 <dlmemalign>:
c0001941:	55                   	push   ebp
c0001942:	57                   	push   edi
c0001943:	56                   	push   esi
c0001944:	53                   	push   ebx
c0001945:	83 ec 0c             	sub    esp,0xc
c0001948:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000194c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001950:	83 fa 08             	cmp    edx,0x8
c0001953:	77 10                	ja     c0001965 <dlmemalign+0x24>
c0001955:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001959:	83 c4 0c             	add    esp,0xc
c000195c:	5b                   	pop    ebx
c000195d:	5e                   	pop    esi
c000195e:	5f                   	pop    edi
c000195f:	5d                   	pop    ebp
c0001960:	e9 fc f8 ff ff       	jmp    c0001261 <dlmalloc>
c0001965:	bf 10 00 00 00       	mov    edi,0x10
c000196a:	83 fa 0f             	cmp    edx,0xf
c000196d:	76 13                	jbe    c0001982 <dlmemalign+0x41>
c000196f:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001972:	85 d1                	test   ecx,edx
c0001974:	75 04                	jne    c000197a <dlmemalign+0x39>
c0001976:	89 d7                	mov    edi,edx
c0001978:	eb 08                	jmp    c0001982 <dlmemalign+0x41>
c000197a:	39 d7                	cmp    edi,edx
c000197c:	73 04                	jae    c0001982 <dlmemalign+0x41>
c000197e:	01 ff                	add    edi,edi
c0001980:	eb f8                	jmp    c000197a <dlmemalign+0x39>
c0001982:	83 f8 df             	cmp    eax,0xffffffdf
c0001985:	76 07                	jbe    c000198e <dlmemalign+0x4d>
c0001987:	31 c0                	xor    eax,eax
c0001989:	e9 ce 00 00 00       	jmp    c0001a5c <dlmemalign+0x11b>
c000198e:	83 c0 0b             	add    eax,0xb
c0001991:	bd 10 00 00 00       	mov    ebp,0x10
c0001996:	83 f8 0f             	cmp    eax,0xf
c0001999:	76 05                	jbe    c00019a0 <dlmemalign+0x5f>
c000199b:	83 e0 f8             	and    eax,0xfffffff8
c000199e:	89 c5                	mov    ebp,eax
c00019a0:	83 ec 0c             	sub    esp,0xc
c00019a3:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00019a7:	50                   	push   eax
c00019a8:	e8 b4 f8 ff ff       	call   c0001261 <dlmalloc>
c00019ad:	83 c4 10             	add    esp,0x10
c00019b0:	89 c1                	mov    ecx,eax
c00019b2:	85 c0                	test   eax,eax
c00019b4:	74 d1                	je     c0001987 <dlmemalign+0x46>
c00019b6:	31 d2                	xor    edx,edx
c00019b8:	8d 70 f8             	lea    esi,[eax-0x8]
c00019bb:	f7 f7                	div    edi
c00019bd:	85 d2                	test   edx,edx
c00019bf:	74 62                	je     c0001a23 <dlmemalign+0xe2>
c00019c1:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019c5:	89 f8                	mov    eax,edi
c00019c7:	f7 d8                	neg    eax
c00019c9:	21 c3                	and    ebx,eax
c00019cb:	83 eb 08             	sub    ebx,0x8
c00019ce:	89 d8                	mov    eax,ebx
c00019d0:	29 f0                	sub    eax,esi
c00019d2:	83 f8 0f             	cmp    eax,0xf
c00019d5:	77 02                	ja     c00019d9 <dlmemalign+0x98>
c00019d7:	01 fb                	add    ebx,edi
c00019d9:	89 d8                	mov    eax,ebx
c00019db:	29 f0                	sub    eax,esi
c00019dd:	89 c6                	mov    esi,eax
c00019df:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00019e2:	89 c2                	mov    edx,eax
c00019e4:	83 e2 fc             	and    edx,0xfffffffc
c00019e7:	29 f2                	sub    edx,esi
c00019e9:	a8 02                	test   al,0x2
c00019eb:	74 10                	je     c00019fd <dlmemalign+0xbc>
c00019ed:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00019f0:	83 ca 02             	or     edx,0x2
c00019f3:	8d 43 08             	lea    eax,[ebx+0x8]
c00019f6:	89 33                	mov    DWORD PTR [ebx],esi
c00019f8:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00019fb:	eb 5f                	jmp    c0001a5c <dlmemalign+0x11b>
c00019fd:	83 ec 0c             	sub    esp,0xc
c0001a00:	89 d0                	mov    eax,edx
c0001a02:	83 c8 01             	or     eax,0x1
c0001a05:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001a08:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a0d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a10:	83 e0 01             	and    eax,0x1
c0001a13:	09 f0                	or     eax,esi
c0001a15:	89 de                	mov    esi,ebx
c0001a17:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a1a:	51                   	push   ecx
c0001a1b:	e8 e9 f4 ff ff       	call   c0000f09 <dlfree>
c0001a20:	83 c4 10             	add    esp,0x10
c0001a23:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a26:	a8 02                	test   al,0x2
c0001a28:	75 2f                	jne    c0001a59 <dlmemalign+0x118>
c0001a2a:	83 e0 fc             	and    eax,0xfffffffc
c0001a2d:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a30:	39 c2                	cmp    edx,eax
c0001a32:	73 25                	jae    c0001a59 <dlmemalign+0x118>
c0001a34:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a37:	83 ec 0c             	sub    esp,0xc
c0001a3a:	29 e8                	sub    eax,ebp
c0001a3c:	83 c2 08             	add    edx,0x8
c0001a3f:	83 c8 01             	or     eax,0x1
c0001a42:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001a45:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a48:	83 e0 01             	and    eax,0x1
c0001a4b:	09 c5                	or     ebp,eax
c0001a4d:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a50:	52                   	push   edx
c0001a51:	e8 b3 f4 ff ff       	call   c0000f09 <dlfree>
c0001a56:	83 c4 10             	add    esp,0x10
c0001a59:	8d 46 08             	lea    eax,[esi+0x8]
c0001a5c:	83 c4 0c             	add    esp,0xc
c0001a5f:	5b                   	pop    ebx
c0001a60:	5e                   	pop    esi
c0001a61:	5f                   	pop    edi
c0001a62:	5d                   	pop    ebp
c0001a63:	c3                   	ret    

c0001a64 <dlcalloc>:
c0001a64:	53                   	push   ebx
c0001a65:	83 ec 14             	sub    esp,0x14
c0001a68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a6c:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a71:	50                   	push   eax
c0001a72:	e8 ea f7 ff ff       	call   c0001261 <dlmalloc>
c0001a77:	83 c4 10             	add    esp,0x10
c0001a7a:	89 c3                	mov    ebx,eax
c0001a7c:	85 c0                	test   eax,eax
c0001a7e:	74 77                	je     c0001af7 <dlcalloc+0x93>
c0001a80:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001a83:	89 d0                	mov    eax,edx
c0001a85:	83 e0 fc             	and    eax,0xfffffffc
c0001a88:	80 e2 02             	and    dl,0x2
c0001a8b:	75 5a                	jne    c0001ae7 <dlcalloc+0x83>
c0001a8d:	83 e8 04             	sub    eax,0x4
c0001a90:	83 f8 27             	cmp    eax,0x27
c0001a93:	76 03                	jbe    c0001a98 <dlcalloc+0x34>
c0001a95:	51                   	push   ecx
c0001a96:	eb 53                	jmp    c0001aeb <dlcalloc+0x87>
c0001a98:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001a9e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001aa5:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001aac:	83 f8 13             	cmp    eax,0x13
c0001aaf:	76 46                	jbe    c0001af7 <dlcalloc+0x93>
c0001ab1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ab8:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001abf:	83 f8 1b             	cmp    eax,0x1b
c0001ac2:	76 33                	jbe    c0001af7 <dlcalloc+0x93>
c0001ac4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001acb:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001ad2:	83 f8 23             	cmp    eax,0x23
c0001ad5:	76 20                	jbe    c0001af7 <dlcalloc+0x93>
c0001ad7:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001ade:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001ae5:	eb 10                	jmp    c0001af7 <dlcalloc+0x93>
c0001ae7:	83 e8 08             	sub    eax,0x8
c0001aea:	52                   	push   edx
c0001aeb:	50                   	push   eax
c0001aec:	6a 00                	push   0x0
c0001aee:	53                   	push   ebx
c0001aef:	e8 fc e9 ff ff       	call   c00004f0 <memset>
c0001af4:	83 c4 10             	add    esp,0x10
c0001af7:	89 d8                	mov    eax,ebx
c0001af9:	83 c4 08             	add    esp,0x8
c0001afc:	5b                   	pop    ebx
c0001afd:	c3                   	ret    

c0001afe <dlcfree>:
c0001afe:	e9 06 f4 ff ff       	jmp    c0000f09 <dlfree>

c0001b03 <dlindependent_calloc>:
c0001b03:	83 ec 28             	sub    esp,0x28
c0001b06:	b9 03 00 00 00       	mov    ecx,0x3
c0001b0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001b13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b17:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b1f:	e8 cb fa ff ff       	call   c00015ef <iALLOc>
c0001b24:	83 c4 2c             	add    esp,0x2c
c0001b27:	c3                   	ret    

c0001b28 <dlindependent_comalloc>:
c0001b28:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b30:	31 c9                	xor    ecx,ecx
c0001b32:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b3a:	e9 b0 fa ff ff       	jmp    c00015ef <iALLOc>

c0001b3f <dlvalloc>:
c0001b3f:	83 ec 0c             	sub    esp,0xc
c0001b42:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001b49:	75 0a                	jne    c0001b55 <dlvalloc+0x16>
c0001b4b:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001b50:	e8 cd f2 ff ff       	call   c0000e22 <malloc_consolidate>
c0001b55:	50                   	push   eax
c0001b56:	50                   	push   eax
c0001b57:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b5b:	ff 35 3c 6c 03 c0    	push   DWORD PTR ds:0xc0036c3c
c0001b61:	e8 db fd ff ff       	call   c0001941 <dlmemalign>
c0001b66:	83 c4 1c             	add    esp,0x1c
c0001b69:	c3                   	ret    

c0001b6a <dlpvalloc>:
c0001b6a:	83 ec 0c             	sub    esp,0xc
c0001b6d:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001b74:	75 0a                	jne    c0001b80 <dlpvalloc+0x16>
c0001b76:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001b7b:	e8 a2 f2 ff ff       	call   c0000e22 <malloc_consolidate>
c0001b80:	a1 3c 6c 03 c0       	mov    eax,ds:0xc0036c3c
c0001b85:	89 c1                	mov    ecx,eax
c0001b87:	52                   	push   edx
c0001b88:	f7 d9                	neg    ecx
c0001b8a:	52                   	push   edx
c0001b8b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001b8f:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001b93:	21 ca                	and    edx,ecx
c0001b95:	52                   	push   edx
c0001b96:	50                   	push   eax
c0001b97:	e8 a5 fd ff ff       	call   c0001941 <dlmemalign>
c0001b9c:	83 c4 1c             	add    esp,0x1c
c0001b9f:	c3                   	ret    

c0001ba0 <dlmalloc_trim>:
c0001ba0:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001ba5:	e8 78 f2 ff ff       	call   c0000e22 <malloc_consolidate>
c0001baa:	31 c0                	xor    eax,eax
c0001bac:	c3                   	ret    

c0001bad <dlmalloc_usable_size>:
c0001bad:	53                   	push   ebx
c0001bae:	31 c0                	xor    eax,eax
c0001bb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001bb4:	85 c9                	test   ecx,ecx
c0001bb6:	74 24                	je     c0001bdc <dlmalloc_usable_size+0x2f>
c0001bb8:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001bbb:	f6 c2 02             	test   dl,0x2
c0001bbe:	74 08                	je     c0001bc8 <dlmalloc_usable_size+0x1b>
c0001bc0:	83 e2 fc             	and    edx,0xfffffffc
c0001bc3:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bc6:	eb 14                	jmp    c0001bdc <dlmalloc_usable_size+0x2f>
c0001bc8:	89 d3                	mov    ebx,edx
c0001bca:	31 c0                	xor    eax,eax
c0001bcc:	83 e3 fe             	and    ebx,0xfffffffe
c0001bcf:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bd4:	74 06                	je     c0001bdc <dlmalloc_usable_size+0x2f>
c0001bd6:	83 e2 fc             	and    edx,0xfffffffc
c0001bd9:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bdc:	5b                   	pop    ebx
c0001bdd:	c3                   	ret    

c0001bde <dlmallinfo>:
c0001bde:	55                   	push   ebp
c0001bdf:	57                   	push   edi
c0001be0:	56                   	push   esi
c0001be1:	53                   	push   ebx
c0001be2:	83 ec 08             	sub    esp,0x8
c0001be5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001be9:	83 3d 0c 69 03 c0 00 	cmp    DWORD PTR ds:0xc003690c,0x0
c0001bf0:	75 0a                	jne    c0001bfc <dlmallinfo+0x1e>
c0001bf2:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001bf7:	e8 26 f2 ff ff       	call   c0000e22 <malloc_consolidate>
c0001bfc:	a1 0c 69 03 c0       	mov    eax,ds:0xc003690c
c0001c01:	31 ed                	xor    ebp,ebp
c0001c03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001c06:	31 c9                	xor    ecx,ecx
c0001c08:	83 e0 fc             	and    eax,0xfffffffc
c0001c0b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c0f:	31 c0                	xor    eax,eax
c0001c11:	8b 14 85 e4 68 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc971c]
c0001c18:	85 d2                	test   edx,edx
c0001c1a:	74 0e                	je     c0001c2a <dlmallinfo+0x4c>
c0001c1c:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c1f:	45                   	inc    ebp
c0001c20:	83 e6 fc             	and    esi,0xfffffffc
c0001c23:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c26:	01 f1                	add    ecx,esi
c0001c28:	eb ee                	jmp    c0001c18 <dlmallinfo+0x3a>
c0001c2a:	40                   	inc    eax
c0001c2b:	83 f8 0a             	cmp    eax,0xa
c0001c2e:	75 e1                	jne    c0001c11 <dlmallinfo+0x33>
c0001c30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c34:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c3b:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c3e:	b8 14 69 03 c0       	mov    eax,0xc0036914
c0001c43:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c46:	39 f0                	cmp    eax,esi
c0001c48:	74 10                	je     c0001c5a <dlmallinfo+0x7c>
c0001c4a:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c4d:	ff 04 24             	inc    DWORD PTR [esp]
c0001c50:	83 e7 fc             	and    edi,0xfffffffc
c0001c53:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c56:	01 fa                	add    edx,edi
c0001c58:	eb ec                	jmp    c0001c46 <dlmallinfo+0x68>
c0001c5a:	83 c0 08             	add    eax,0x8
c0001c5d:	3d 0c 6c 03 c0       	cmp    eax,0xc0036c0c
c0001c62:	75 df                	jne    c0001c43 <dlmallinfo+0x65>
c0001c64:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c67:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c6a:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c6d:	a1 48 6c 03 c0       	mov    eax,ds:0xc0036c48
c0001c72:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c75:	89 03                	mov    DWORD PTR [ebx],eax
c0001c77:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001c7a:	8b 35 30 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c30
c0001c80:	29 d0                	sub    eax,edx
c0001c82:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c85:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001c88:	8b 35 44 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c44
c0001c8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c92:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001c95:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001c98:	8b 35 54 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c54
c0001c9e:	89 d8                	mov    eax,ebx
c0001ca0:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001ca3:	83 c4 08             	add    esp,0x8
c0001ca6:	5b                   	pop    ebx
c0001ca7:	5e                   	pop    esi
c0001ca8:	5f                   	pop    edi
c0001ca9:	5d                   	pop    ebp
c0001caa:	c2 04 00             	ret    0x4

c0001cad <dlmalloc_stats>:
c0001cad:	83 ec 30             	sub    esp,0x30
c0001cb0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001cb4:	50                   	push   eax
c0001cb5:	e8 24 ff ff ff       	call   c0001bde <dlmallinfo>
c0001cba:	83 c4 30             	add    esp,0x30
c0001cbd:	c3                   	ret    

c0001cbe <dlmallopt>:
c0001cbe:	56                   	push   esi
c0001cbf:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001cc4:	53                   	push   ebx
c0001cc5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001cc9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001ccd:	e8 50 f1 ff ff       	call   c0000e22 <malloc_consolidate>
c0001cd2:	8d 46 04             	lea    eax,[esi+0x4]
c0001cd5:	83 f8 05             	cmp    eax,0x5
c0001cd8:	77 67                	ja     c0001d41 <dlmallopt+0x83>
c0001cda:	ff 24 85 d4 f4 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd0b2c]
c0001ce1:	83 fb 50             	cmp    ebx,0x50
c0001ce4:	77 5b                	ja     c0001d41 <dlmallopt+0x83>
c0001ce6:	ba 08 00 00 00       	mov    edx,0x8
c0001ceb:	85 db                	test   ebx,ebx
c0001ced:	74 12                	je     c0001d01 <dlmallopt+0x43>
c0001cef:	83 c3 0b             	add    ebx,0xb
c0001cf2:	ba 10 00 00 00       	mov    edx,0x10
c0001cf7:	83 fb 0f             	cmp    ebx,0xf
c0001cfa:	76 05                	jbe    c0001d01 <dlmallopt+0x43>
c0001cfc:	89 da                	mov    edx,ebx
c0001cfe:	83 e2 f8             	and    edx,0xfffffff8
c0001d01:	a1 e0 68 03 c0       	mov    eax,ds:0xc00368e0
c0001d06:	83 e0 03             	and    eax,0x3
c0001d09:	09 d0                	or     eax,edx
c0001d0b:	a3 e0 68 03 c0       	mov    ds:0xc00368e0,eax
c0001d10:	eb 31                	jmp    c0001d43 <dlmallopt+0x85>
c0001d12:	89 1d 24 6c 03 c0    	mov    DWORD PTR ds:0xc0036c24,ebx
c0001d18:	eb 06                	jmp    c0001d20 <dlmallopt+0x62>
c0001d1a:	89 1d 28 6c 03 c0    	mov    DWORD PTR ds:0xc0036c28,ebx
c0001d20:	be 01 00 00 00       	mov    esi,0x1
c0001d25:	eb 1c                	jmp    c0001d43 <dlmallopt+0x85>
c0001d27:	89 1d 2c 6c 03 c0    	mov    DWORD PTR ds:0xc0036c2c,ebx
c0001d2d:	eb f1                	jmp    c0001d20 <dlmallopt+0x62>
c0001d2f:	31 f6                	xor    esi,esi
c0001d31:	85 db                	test   ebx,ebx
c0001d33:	75 0e                	jne    c0001d43 <dlmallopt+0x85>
c0001d35:	c7 05 34 6c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036c34,0x0
c0001d3f:	eb df                	jmp    c0001d20 <dlmallopt+0x62>
c0001d41:	31 f6                	xor    esi,esi
c0001d43:	89 f0                	mov    eax,esi
c0001d45:	5b                   	pop    ebx
c0001d46:	5e                   	pop    esi
c0001d47:	c3                   	ret    

c0001d48 <isblank>:
c0001d48:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d4d:	74 09                	je     c0001d58 <isblank+0x10>
c0001d4f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d54:	75 0a                	jne    c0001d60 <isblank+0x18>
c0001d56:	66 90                	xchg   ax,ax
c0001d58:	b8 01 00 00 00       	mov    eax,0x1
c0001d5d:	c3                   	ret    
c0001d5e:	66 90                	xchg   ax,ax
c0001d60:	b8 00 00 00 00       	mov    eax,0x0
c0001d65:	c3                   	ret    
c0001d66:	66 90                	xchg   ax,ax

c0001d68 <iscntrl>:
c0001d68:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d6d:	7e 09                	jle    c0001d78 <iscntrl+0x10>
c0001d6f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d74:	75 0a                	jne    c0001d80 <iscntrl+0x18>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    
c0001d86:	66 90                	xchg   ax,ax

c0001d88 <isdigit>:
c0001d88:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d8d:	7e 0d                	jle    c0001d9c <isdigit+0x14>
c0001d8f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001d94:	7f 06                	jg     c0001d9c <isdigit+0x14>
c0001d96:	b8 01 00 00 00       	mov    eax,0x1
c0001d9b:	c3                   	ret    
c0001d9c:	b8 00 00 00 00       	mov    eax,0x0
c0001da1:	c3                   	ret    
c0001da2:	66 90                	xchg   ax,ax

c0001da4 <islower>:
c0001da4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da9:	7e 0d                	jle    c0001db8 <islower+0x14>
c0001dab:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001db0:	7f 06                	jg     c0001db8 <islower+0x14>
c0001db2:	b8 01 00 00 00       	mov    eax,0x1
c0001db7:	c3                   	ret    
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    
c0001dbe:	66 90                	xchg   ax,ax

c0001dc0 <isspace>:
c0001dc0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001dc5:	7c 19                	jl     c0001de0 <isspace+0x20>
c0001dc7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001dcc:	7e 0a                	jle    c0001dd8 <isspace+0x18>
c0001dce:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001dd3:	75 0b                	jne    c0001de0 <isspace+0x20>
c0001dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0001dd8:	b8 01 00 00 00       	mov    eax,0x1
c0001ddd:	c3                   	ret    
c0001dde:	66 90                	xchg   ax,ax
c0001de0:	b8 00 00 00 00       	mov    eax,0x0
c0001de5:	c3                   	ret    
c0001de6:	66 90                	xchg   ax,ax

c0001de8 <isupper>:
c0001de8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ded:	7e 0d                	jle    c0001dfc <isupper+0x14>
c0001def:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001df4:	7f 06                	jg     c0001dfc <isupper+0x14>
c0001df6:	b8 01 00 00 00       	mov    eax,0x1
c0001dfb:	c3                   	ret    
c0001dfc:	b8 00 00 00 00       	mov    eax,0x0
c0001e01:	c3                   	ret    
c0001e02:	66 90                	xchg   ax,ax

c0001e04 <isalpha>:
c0001e04:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e08:	e8 db ff ff ff       	call   c0001de8 <isupper>
c0001e0d:	83 c4 04             	add    esp,0x4
c0001e10:	85 c0                	test   eax,eax
c0001e12:	75 10                	jne    c0001e24 <isalpha+0x20>
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 87 ff ff ff       	call   c0001da4 <islower>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	74 08                	je     c0001e2c <isalpha+0x28>
c0001e24:	b8 01 00 00 00       	mov    eax,0x1
c0001e29:	c3                   	ret    
c0001e2a:	66 90                	xchg   ax,ax
c0001e2c:	b8 00 00 00 00       	mov    eax,0x0
c0001e31:	c3                   	ret    
c0001e32:	66 90                	xchg   ax,ax

c0001e34 <isalnum>:
c0001e34:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e38:	e8 c7 ff ff ff       	call   c0001e04 <isalpha>
c0001e3d:	83 c4 04             	add    esp,0x4
c0001e40:	85 c0                	test   eax,eax
c0001e42:	75 10                	jne    c0001e54 <isalnum+0x20>
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 3b ff ff ff       	call   c0001d88 <isdigit>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	74 08                	je     c0001e5c <isalnum+0x28>
c0001e54:	b8 01 00 00 00       	mov    eax,0x1
c0001e59:	c3                   	ret    
c0001e5a:	66 90                	xchg   ax,ax
c0001e5c:	b8 00 00 00 00       	mov    eax,0x0
c0001e61:	c3                   	ret    
c0001e62:	66 90                	xchg   ax,ax

c0001e64 <ispunct>:
c0001e64:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e68:	e8 c7 ff ff ff       	call   c0001e34 <isalnum>
c0001e6d:	83 c4 04             	add    esp,0x4
c0001e70:	85 c0                	test   eax,eax
c0001e72:	75 28                	jne    c0001e9c <ispunct+0x38>
c0001e74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e78:	e8 43 ff ff ff       	call   c0001dc0 <isspace>
c0001e7d:	83 c4 04             	add    esp,0x4
c0001e80:	85 c0                	test   eax,eax
c0001e82:	75 18                	jne    c0001e9c <ispunct+0x38>
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 db fe ff ff       	call   c0001d68 <iscntrl>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 08                	jne    c0001e9c <ispunct+0x38>
c0001e94:	b8 01 00 00 00       	mov    eax,0x1
c0001e99:	c3                   	ret    
c0001e9a:	66 90                	xchg   ax,ax
c0001e9c:	b8 00 00 00 00       	mov    eax,0x0
c0001ea1:	c3                   	ret    
c0001ea2:	66 90                	xchg   ax,ax

c0001ea4 <isgraph>:
c0001ea4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ea8:	e8 87 ff ff ff       	call   c0001e34 <isalnum>
c0001ead:	83 c4 04             	add    esp,0x4
c0001eb0:	85 c0                	test   eax,eax
c0001eb2:	75 10                	jne    c0001ec4 <isgraph+0x20>
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 a7 ff ff ff       	call   c0001e64 <ispunct>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	74 08                	je     c0001ecc <isgraph+0x28>
c0001ec4:	b8 01 00 00 00       	mov    eax,0x1
c0001ec9:	c3                   	ret    
c0001eca:	66 90                	xchg   ax,ax
c0001ecc:	b8 00 00 00 00       	mov    eax,0x0
c0001ed1:	c3                   	ret    
c0001ed2:	66 90                	xchg   ax,ax

c0001ed4 <isprint>:
c0001ed4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ed8:	e8 c7 ff ff ff       	call   c0001ea4 <isgraph>
c0001edd:	83 c4 04             	add    esp,0x4
c0001ee0:	85 c0                	test   eax,eax
c0001ee2:	75 08                	jne    c0001eec <isprint+0x18>
c0001ee4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ee9:	75 09                	jne    c0001ef4 <isprint+0x20>
c0001eeb:	90                   	nop
c0001eec:	b8 01 00 00 00       	mov    eax,0x1
c0001ef1:	c3                   	ret    
c0001ef2:	66 90                	xchg   ax,ax
c0001ef4:	b8 00 00 00 00       	mov    eax,0x0
c0001ef9:	c3                   	ret    
c0001efa:	66 90                	xchg   ax,ax

c0001efc <isxdigit>:
c0001efc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001f00:	e8 83 fe ff ff       	call   c0001d88 <isdigit>
c0001f05:	83 c4 04             	add    esp,0x4
c0001f08:	85 c0                	test   eax,eax
c0001f0a:	75 20                	jne    c0001f2c <isxdigit+0x30>
c0001f0c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001f11:	7e 09                	jle    c0001f1c <isxdigit+0x20>
c0001f13:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001f18:	7e 12                	jle    c0001f2c <isxdigit+0x30>
c0001f1a:	66 90                	xchg   ax,ax
c0001f1c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f21:	7e 11                	jle    c0001f34 <isxdigit+0x38>
c0001f23:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f28:	7f 0a                	jg     c0001f34 <isxdigit+0x38>
c0001f2a:	66 90                	xchg   ax,ax
c0001f2c:	b8 01 00 00 00       	mov    eax,0x1
c0001f31:	c3                   	ret    
c0001f32:	66 90                	xchg   ax,ax
c0001f34:	b8 00 00 00 00       	mov    eax,0x0
c0001f39:	c3                   	ret    

c0001f3a <disk_status>:
c0001f3a:	31 c0                	xor    eax,eax
c0001f3c:	c3                   	ret    

c0001f3d <disk_initialize>:
c0001f3d:	31 c0                	xor    eax,eax
c0001f3f:	c3                   	ret    

c0001f40 <disk_read>:
c0001f40:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f45:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0001f4d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f51:	e9 2a 6a 02 00       	jmp    c0028980 <fatWrapperReadDisk>

c0001f56 <disk_write>:
c0001f56:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f5b:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0001f63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f67:	e9 54 6a 02 00       	jmp    c00289c0 <fatWrapperWriteDisk>

c0001f6c <disk_ioctl>:
c0001f6c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001f71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001f75:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f7a:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0001f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f86:	e9 75 6a 02 00       	jmp    c0028a00 <fatWrapperIoctl>

c0001f8b <ld_word>:
c0001f8b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001f8f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001f92:	c1 e2 08             	shl    edx,0x8
c0001f95:	09 d0                	or     eax,edx
c0001f97:	c3                   	ret    

c0001f98 <ld_dword>:
c0001f98:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001f9c:	89 d1                	mov    ecx,edx
c0001f9e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fa2:	c1 e1 08             	shl    ecx,0x8
c0001fa5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fa8:	09 ca                	or     edx,ecx
c0001faa:	c1 e2 08             	shl    edx,0x8
c0001fad:	09 d0                	or     eax,edx
c0001faf:	c3                   	ret    

c0001fb0 <st_word>:
c0001fb0:	66 89 10             	mov    WORD PTR [eax],dx
c0001fb3:	c3                   	ret    

c0001fb4 <st_dword>:
c0001fb4:	89 10                	mov    DWORD PTR [eax],edx
c0001fb6:	c3                   	ret    

c0001fb7 <mem_cpy>:
c0001fb7:	85 c9                	test   ecx,ecx
c0001fb9:	74 10                	je     c0001fcb <mem_cpy+0x14>
c0001fbb:	57                   	push   edi
c0001fbc:	01 c1                	add    ecx,eax
c0001fbe:	56                   	push   esi
c0001fbf:	89 c7                	mov    edi,eax
c0001fc1:	89 d6                	mov    esi,edx
c0001fc3:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001fc4:	39 f9                	cmp    ecx,edi
c0001fc6:	75 fb                	jne    c0001fc3 <mem_cpy+0xc>
c0001fc8:	5e                   	pop    esi
c0001fc9:	5f                   	pop    edi
c0001fca:	c3                   	ret    
c0001fcb:	c3                   	ret    

c0001fcc <mem_set>:
c0001fcc:	01 c1                	add    ecx,eax
c0001fce:	40                   	inc    eax
c0001fcf:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001fd2:	39 c8                	cmp    eax,ecx
c0001fd4:	75 f8                	jne    c0001fce <mem_set+0x2>
c0001fd6:	c3                   	ret    

c0001fd7 <mem_cmp>:
c0001fd7:	57                   	push   edi
c0001fd8:	56                   	push   esi
c0001fd9:	89 c6                	mov    esi,eax
c0001fdb:	53                   	push   ebx
c0001fdc:	46                   	inc    esi
c0001fdd:	42                   	inc    edx
c0001fde:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001fe2:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001fe6:	29 fb                	sub    ebx,edi
c0001fe8:	89 cf                	mov    edi,ecx
c0001fea:	29 f7                	sub    edi,esi
c0001fec:	01 c7                	add    edi,eax
c0001fee:	74 04                	je     c0001ff4 <mem_cmp+0x1d>
c0001ff0:	85 db                	test   ebx,ebx
c0001ff2:	74 e8                	je     c0001fdc <mem_cmp+0x5>
c0001ff4:	89 d8                	mov    eax,ebx
c0001ff6:	5b                   	pop    ebx
c0001ff7:	5e                   	pop    esi
c0001ff8:	5f                   	pop    edi
c0001ff9:	c3                   	ret    

c0001ffa <chk_chr>:
c0001ffa:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001ffd:	85 c9                	test   ecx,ecx
c0001fff:	74 07                	je     c0002008 <chk_chr+0xe>
c0002001:	39 d1                	cmp    ecx,edx
c0002003:	74 03                	je     c0002008 <chk_chr+0xe>
c0002005:	40                   	inc    eax
c0002006:	eb f2                	jmp    c0001ffa <chk_chr>
c0002008:	89 c8                	mov    eax,ecx
c000200a:	c3                   	ret    

c000200b <dbc_1st>:
c000200b:	31 c0                	xor    eax,eax
c000200d:	c3                   	ret    

c000200e <dbc_2nd>:
c000200e:	31 c0                	xor    eax,eax
c0002010:	c3                   	ret    

c0002011 <tchar2uni>:
c0002011:	57                   	push   edi
c0002012:	56                   	push   esi
c0002013:	53                   	push   ebx
c0002014:	8b 18                	mov    ebx,DWORD PTR [eax]
c0002016:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0002018:	8d 73 01             	lea    esi,[ebx+0x1]
c000201b:	f6 c1 80             	test   cl,0x80
c000201e:	75 0a                	jne    c000202a <tchar2uni+0x19>
c0002020:	0f b6 d1             	movzx  edx,cl
c0002023:	89 f3                	mov    ebx,esi
c0002025:	e9 b2 00 00 00       	jmp    c00020dc <tchar2uni+0xcb>
c000202a:	89 ca                	mov    edx,ecx
c000202c:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002032:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0002038:	89 ca                	mov    edx,ecx
c000203a:	75 0a                	jne    c0002046 <tchar2uni+0x35>
c000203c:	83 e2 1f             	and    edx,0x1f
c000203f:	b9 01 00 00 00       	mov    ecx,0x1
c0002044:	eb 37                	jmp    c000207d <tchar2uni+0x6c>
c0002046:	81 e2 f0 00 00 00    	and    edx,0xf0
c000204c:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0002052:	75 0c                	jne    c0002060 <tchar2uni+0x4f>
c0002054:	89 ca                	mov    edx,ecx
c0002056:	b9 02 00 00 00       	mov    ecx,0x2
c000205b:	83 e2 0f             	and    edx,0xf
c000205e:	eb 1d                	jmp    c000207d <tchar2uni+0x6c>
c0002060:	89 cf                	mov    edi,ecx
c0002062:	83 ca ff             	or     edx,0xffffffff
c0002065:	81 e7 f8 00 00 00    	and    edi,0xf8
c000206b:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0002071:	75 70                	jne    c00020e3 <tchar2uni+0xd2>
c0002073:	89 ca                	mov    edx,ecx
c0002075:	b9 03 00 00 00       	mov    ecx,0x3
c000207a:	83 e2 07             	and    edx,0x7
c000207d:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0002081:	46                   	inc    esi
c0002082:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0002085:	89 cf                	mov    edi,ecx
c0002087:	81 e7 c0 00 00 00    	and    edi,0xc0
c000208d:	83 c7 80             	add    edi,0xffffff80
c0002090:	75 4e                	jne    c00020e0 <tchar2uni+0xcf>
c0002092:	c1 e2 06             	shl    edx,0x6
c0002095:	83 e1 3f             	and    ecx,0x3f
c0002098:	09 ca                	or     edx,ecx
c000209a:	39 de                	cmp    esi,ebx
c000209c:	75 e3                	jne    c0002081 <tchar2uni+0x70>
c000209e:	8d 4a 80             	lea    ecx,[edx-0x80]
c00020a1:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c00020a7:	77 37                	ja     c00020e0 <tchar2uni+0xcf>
c00020a9:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c00020af:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00020b5:	76 29                	jbe    c00020e0 <tchar2uni+0xcf>
c00020b7:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00020bd:	76 1d                	jbe    c00020dc <tchar2uni+0xcb>
c00020bf:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c00020c5:	81 e2 ff 03 00 00    	and    edx,0x3ff
c00020cb:	c1 e1 06             	shl    ecx,0x6
c00020ce:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c00020d4:	09 ca                	or     edx,ecx
c00020d6:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c00020dc:	89 18                	mov    DWORD PTR [eax],ebx
c00020de:	eb 03                	jmp    c00020e3 <tchar2uni+0xd2>
c00020e0:	83 ca ff             	or     edx,0xffffffff
c00020e3:	5b                   	pop    ebx
c00020e4:	89 d0                	mov    eax,edx
c00020e6:	5e                   	pop    esi
c00020e7:	5f                   	pop    edi
c00020e8:	c3                   	ret    

c00020e9 <put_utf>:
c00020e9:	53                   	push   ebx
c00020ea:	83 f8 7f             	cmp    eax,0x7f
c00020ed:	89 c3                	mov    ebx,eax
c00020ef:	b0 00                	mov    al,0x0
c00020f1:	77 11                	ja     c0002104 <put_utf+0x1b>
c00020f3:	85 c9                	test   ecx,ecx
c00020f5:	0f 84 e5 00 00 00    	je     c00021e0 <put_utf+0xf7>
c00020fb:	88 1a                	mov    BYTE PTR [edx],bl
c00020fd:	b0 01                	mov    al,0x1
c00020ff:	e9 dc 00 00 00       	jmp    c00021e0 <put_utf+0xf7>
c0002104:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000210a:	77 23                	ja     c000212f <put_utf+0x46>
c000210c:	83 f9 01             	cmp    ecx,0x1
c000210f:	0f 86 cb 00 00 00    	jbe    c00021e0 <put_utf+0xf7>
c0002115:	89 d8                	mov    eax,ebx
c0002117:	83 e3 3f             	and    ebx,0x3f
c000211a:	c1 e8 06             	shr    eax,0x6
c000211d:	83 cb 80             	or     ebx,0xffffff80
c0002120:	83 c8 c0             	or     eax,0xffffffc0
c0002123:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0002126:	88 02                	mov    BYTE PTR [edx],al
c0002128:	b0 02                	mov    al,0x2
c000212a:	e9 b1 00 00 00       	jmp    c00021e0 <put_utf+0xf7>
c000212f:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0002135:	77 40                	ja     c0002177 <put_utf+0x8e>
c0002137:	83 f9 02             	cmp    ecx,0x2
c000213a:	0f 86 a0 00 00 00    	jbe    c00021e0 <put_utf+0xf7>
c0002140:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0002146:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000214c:	0f 86 8e 00 00 00    	jbe    c00021e0 <put_utf+0xf7>
c0002152:	89 d8                	mov    eax,ebx
c0002154:	c1 e8 0c             	shr    eax,0xc
c0002157:	83 c8 e0             	or     eax,0xffffffe0
c000215a:	88 02                	mov    BYTE PTR [edx],al
c000215c:	89 d8                	mov    eax,ebx
c000215e:	83 e3 3f             	and    ebx,0x3f
c0002161:	c1 e8 06             	shr    eax,0x6
c0002164:	83 cb 80             	or     ebx,0xffffff80
c0002167:	83 e0 3f             	and    eax,0x3f
c000216a:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c000216d:	83 c8 80             	or     eax,0xffffff80
c0002170:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002173:	b0 03                	mov    al,0x3
c0002175:	eb 69                	jmp    c00021e0 <put_utf+0xf7>
c0002177:	83 f9 03             	cmp    ecx,0x3
c000217a:	76 64                	jbe    c00021e0 <put_utf+0xf7>
c000217c:	89 d9                	mov    ecx,ebx
c000217e:	0f b7 c3             	movzx  eax,bx
c0002181:	66 31 c9             	xor    cx,cx
c0002184:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000218a:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002190:	c1 e9 06             	shr    ecx,0x6
c0002193:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002199:	77 43                	ja     c00021de <put_utf+0xf5>
c000219b:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021a1:	77 3b                	ja     c00021de <put_utf+0xf5>
c00021a3:	09 cb                	or     ebx,ecx
c00021a5:	81 c3 00 00 01 00    	add    ebx,0x10000
c00021ab:	89 d8                	mov    eax,ebx
c00021ad:	c1 e8 12             	shr    eax,0x12
c00021b0:	83 c8 f0             	or     eax,0xfffffff0
c00021b3:	88 02                	mov    BYTE PTR [edx],al
c00021b5:	89 d8                	mov    eax,ebx
c00021b7:	c1 e8 0c             	shr    eax,0xc
c00021ba:	83 e0 3f             	and    eax,0x3f
c00021bd:	83 c8 80             	or     eax,0xffffff80
c00021c0:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021c3:	89 d8                	mov    eax,ebx
c00021c5:	83 e3 3f             	and    ebx,0x3f
c00021c8:	c1 e8 06             	shr    eax,0x6
c00021cb:	83 cb 80             	or     ebx,0xffffff80
c00021ce:	83 e0 3f             	and    eax,0x3f
c00021d1:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c00021d4:	83 c8 80             	or     eax,0xffffff80
c00021d7:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c00021da:	b0 04                	mov    al,0x4
c00021dc:	eb 02                	jmp    c00021e0 <put_utf+0xf7>
c00021de:	31 c0                	xor    eax,eax
c00021e0:	5b                   	pop    ebx
c00021e1:	c3                   	ret    

c00021e2 <clst2sect>:
c00021e2:	8d 4a fe             	lea    ecx,[edx-0x2]
c00021e5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00021e8:	83 ea 02             	sub    edx,0x2
c00021eb:	39 ca                	cmp    edx,ecx
c00021ed:	76 0d                	jbe    c00021fc <clst2sect+0x1a>
c00021ef:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00021f3:	0f af d1             	imul   edx,ecx
c00021f6:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c00021f9:	89 d0                	mov    eax,edx
c00021fb:	c3                   	ret    
c00021fc:	31 c0                	xor    eax,eax
c00021fe:	c3                   	ret    

c00021ff <pick_lfn>:
c00021ff:	55                   	push   ebp
c0002200:	57                   	push   edi
c0002201:	89 c7                	mov    edi,eax
c0002203:	56                   	push   esi
c0002204:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002207:	53                   	push   ebx
c0002208:	89 d3                	mov    ebx,edx
c000220a:	e8 7c fd ff ff       	call   c0001f8b <ld_word>
c000220f:	66 85 c0             	test   ax,ax
c0002212:	74 04                	je     c0002218 <pick_lfn+0x19>
c0002214:	31 c0                	xor    eax,eax
c0002216:	eb 62                	jmp    c000227a <pick_lfn+0x7b>
c0002218:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000221b:	bd 01 00 00 00       	mov    ebp,0x1
c0002220:	83 e1 bf             	and    ecx,0xffffffbf
c0002223:	31 f6                	xor    esi,esi
c0002225:	49                   	dec    ecx
c0002226:	6b c9 0d             	imul   ecx,ecx,0xd
c0002229:	0f b6 86 20 f6 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffd09e0]
c0002230:	01 d8                	add    eax,ebx
c0002232:	e8 54 fd ff ff       	call   c0001f8b <ld_word>
c0002237:	66 85 ed             	test   bp,bp
c000223a:	74 11                	je     c000224d <pick_lfn+0x4e>
c000223c:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002242:	77 d0                	ja     c0002214 <pick_lfn+0x15>
c0002244:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002248:	89 c5                	mov    ebp,eax
c000224a:	41                   	inc    ecx
c000224b:	eb 0a                	jmp    c0002257 <pick_lfn+0x58>
c000224d:	0f b7 c0             	movzx  eax,ax
c0002250:	3d ff ff 00 00       	cmp    eax,0xffff
c0002255:	75 bd                	jne    c0002214 <pick_lfn+0x15>
c0002257:	46                   	inc    esi
c0002258:	83 fe 0d             	cmp    esi,0xd
c000225b:	75 cc                	jne    c0002229 <pick_lfn+0x2a>
c000225d:	f6 03 40             	test   BYTE PTR [ebx],0x40
c0002260:	74 13                	je     c0002275 <pick_lfn+0x76>
c0002262:	66 85 ed             	test   bp,bp
c0002265:	74 0e                	je     c0002275 <pick_lfn+0x76>
c0002267:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000226d:	77 a5                	ja     c0002214 <pick_lfn+0x15>
c000226f:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c0002275:	b8 01 00 00 00       	mov    eax,0x1
c000227a:	5b                   	pop    ebx
c000227b:	5e                   	pop    esi
c000227c:	5f                   	pop    edi
c000227d:	5d                   	pop    ebp
c000227e:	c3                   	ret    

c000227f <put_lfn>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	89 d7                	mov    edi,edx
c0002283:	56                   	push   esi
c0002284:	31 f6                	xor    esi,esi
c0002286:	53                   	push   ebx
c0002287:	83 ec 0c             	sub    esp,0xc
c000228a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000228e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0002292:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0002296:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000229c:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000229f:	8d 42 1a             	lea    eax,[edx+0x1a]
c00022a2:	31 d2                	xor    edx,edx
c00022a4:	e8 07 fd ff ff       	call   c0001fb0 <st_word>
c00022a9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00022b0:	0f b6 d9             	movzx  ebx,cl
c00022b3:	4b                   	dec    ebx
c00022b4:	6b db 0d             	imul   ebx,ebx,0xd
c00022b7:	0f b7 c6             	movzx  eax,si
c00022ba:	3d ff ff 00 00       	cmp    eax,0xffff
c00022bf:	74 09                	je     c00022ca <put_lfn+0x4b>
c00022c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00022c5:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c00022c9:	43                   	inc    ebx
c00022ca:	0f b7 ee             	movzx  ebp,si
c00022cd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00022d0:	89 ea                	mov    edx,ebp
c00022d2:	0f b6 80 20 f6 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd09e0]
c00022d9:	01 f8                	add    eax,edi
c00022db:	e8 d0 fc ff ff       	call   c0001fb0 <st_word>
c00022e0:	85 ed                	test   ebp,ebp
c00022e2:	75 05                	jne    c00022e9 <put_lfn+0x6a>
c00022e4:	be ff ff 00 00       	mov    esi,0xffff
c00022e9:	ff 04 24             	inc    DWORD PTR [esp]
c00022ec:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c00022f0:	75 c5                	jne    c00022b7 <put_lfn+0x38>
c00022f2:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00022f8:	74 0b                	je     c0002305 <put_lfn+0x86>
c00022fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00022fe:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002303:	75 07                	jne    c000230c <put_lfn+0x8d>
c0002305:	83 c9 40             	or     ecx,0x40
c0002308:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000230c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002310:	88 07                	mov    BYTE PTR [edi],al
c0002312:	83 c4 0c             	add    esp,0xc
c0002315:	5b                   	pop    ebx
c0002316:	5e                   	pop    esi
c0002317:	5f                   	pop    edi
c0002318:	5d                   	pop    ebp
c0002319:	c3                   	ret    

c000231a <gen_numname>:
c000231a:	57                   	push   edi
c000231b:	89 cf                	mov    edi,ecx
c000231d:	56                   	push   esi
c000231e:	b9 0b 00 00 00       	mov    ecx,0xb
c0002323:	53                   	push   ebx
c0002324:	89 c6                	mov    esi,eax
c0002326:	83 ec 10             	sub    esp,0x10
c0002329:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000232d:	e8 85 fc ff ff       	call   c0001fb7 <mem_cpy>
c0002332:	83 fb 05             	cmp    ebx,0x5
c0002335:	76 30                	jbe    c0002367 <gen_numname+0x4d>
c0002337:	66 8b 07             	mov    ax,WORD PTR [edi]
c000233a:	66 85 c0             	test   ax,ax
c000233d:	74 28                	je     c0002367 <gen_numname+0x4d>
c000233f:	83 c7 02             	add    edi,0x2
c0002342:	ba 10 00 00 00       	mov    edx,0x10
c0002347:	01 db                	add    ebx,ebx
c0002349:	89 c1                	mov    ecx,eax
c000234b:	c1 e0 10             	shl    eax,0x10
c000234e:	83 e1 01             	and    ecx,0x1
c0002351:	c1 e8 11             	shr    eax,0x11
c0002354:	01 cb                	add    ebx,ecx
c0002356:	0f ba e3 10          	bt     ebx,0x10
c000235a:	73 06                	jae    c0002362 <gen_numname+0x48>
c000235c:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002362:	4a                   	dec    edx
c0002363:	75 e2                	jne    c0002347 <gen_numname+0x2d>
c0002365:	eb d0                	jmp    c0002337 <gen_numname+0x1d>
c0002367:	b8 07 00 00 00       	mov    eax,0x7
c000236c:	89 d9                	mov    ecx,ebx
c000236e:	83 e1 0f             	and    ecx,0xf
c0002371:	8d 79 30             	lea    edi,[ecx+0x30]
c0002374:	89 fa                	mov    edx,edi
c0002376:	83 ff 39             	cmp    edi,0x39
c0002379:	76 03                	jbe    c000237e <gen_numname+0x64>
c000237b:	8d 51 37             	lea    edx,[ecx+0x37]
c000237e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002381:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002385:	89 da                	mov    edx,ebx
c0002387:	c1 ea 04             	shr    edx,0x4
c000238a:	83 fb 0f             	cmp    ebx,0xf
c000238d:	76 06                	jbe    c0002395 <gen_numname+0x7b>
c000238f:	89 c8                	mov    eax,ecx
c0002391:	89 d3                	mov    ebx,edx
c0002393:	eb d7                	jmp    c000236c <gen_numname+0x52>
c0002395:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000239a:	31 d2                	xor    edx,edx
c000239c:	8d 58 fe             	lea    ebx,[eax-0x2]
c000239f:	8d 04 16             	lea    eax,[esi+edx*1]
c00023a2:	39 ca                	cmp    edx,ecx
c00023a4:	73 19                	jae    c00023bf <gen_numname+0xa5>
c00023a6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00023a9:	83 f8 20             	cmp    eax,0x20
c00023ac:	74 11                	je     c00023bf <gen_numname+0xa5>
c00023ae:	e8 58 fc ff ff       	call   c000200b <dbc_1st>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	74 05                	je     c00023bc <gen_numname+0xa2>
c00023b7:	39 d3                	cmp    ebx,edx
c00023b9:	74 04                	je     c00023bf <gen_numname+0xa5>
c00023bb:	42                   	inc    edx
c00023bc:	42                   	inc    edx
c00023bd:	eb e0                	jmp    c000239f <gen_numname+0x85>
c00023bf:	b0 20                	mov    al,0x20
c00023c1:	83 f9 07             	cmp    ecx,0x7
c00023c4:	77 05                	ja     c00023cb <gen_numname+0xb1>
c00023c6:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00023ca:	41                   	inc    ecx
c00023cb:	42                   	inc    edx
c00023cc:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00023d0:	83 fa 07             	cmp    edx,0x7
c00023d3:	76 ea                	jbe    c00023bf <gen_numname+0xa5>
c00023d5:	83 c4 10             	add    esp,0x10
c00023d8:	5b                   	pop    ebx
c00023d9:	5e                   	pop    esi
c00023da:	5f                   	pop    edi
c00023db:	c3                   	ret    

c00023dc <sum_sfn>:
c00023dc:	53                   	push   ebx
c00023dd:	31 c9                	xor    ecx,ecx
c00023df:	31 db                	xor    ebx,ebx
c00023e1:	0f b6 d1             	movzx  edx,cl
c00023e4:	c1 e1 07             	shl    ecx,0x7
c00023e7:	d1 ea                	shr    edx,1
c00023e9:	09 ca                	or     edx,ecx
c00023eb:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c00023ee:	43                   	inc    ebx
c00023ef:	01 ca                	add    edx,ecx
c00023f1:	83 fb 0b             	cmp    ebx,0xb
c00023f4:	88 d1                	mov    cl,dl
c00023f6:	75 e9                	jne    c00023e1 <sum_sfn+0x5>
c00023f8:	88 d0                	mov    al,dl
c00023fa:	5b                   	pop    ebx
c00023fb:	c3                   	ret    

c00023fc <get_ldnumber>:
c00023fc:	8b 10                	mov    edx,DWORD PTR [eax]
c00023fe:	85 d2                	test   edx,edx
c0002400:	74 14                	je     c0002416 <get_ldnumber+0x1a>
c0002402:	56                   	push   esi
c0002403:	53                   	push   ebx
c0002404:	89 d3                	mov    ebx,edx
c0002406:	43                   	inc    ebx
c0002407:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000240a:	80 f9 1f             	cmp    cl,0x1f
c000240d:	76 0d                	jbe    c000241c <get_ldnumber+0x20>
c000240f:	80 f9 3a             	cmp    cl,0x3a
c0002412:	75 f2                	jne    c0002406 <get_ldnumber+0xa>
c0002414:	eb 0a                	jmp    c0002420 <get_ldnumber+0x24>
c0002416:	83 c9 ff             	or     ecx,0xffffffff
c0002419:	89 c8                	mov    eax,ecx
c000241b:	c3                   	ret    
c000241c:	31 c9                	xor    ecx,ecx
c000241e:	eb 24                	jmp    c0002444 <get_ldnumber+0x48>
c0002420:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002423:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002426:	80 f9 09             	cmp    cl,0x9
c0002429:	77 16                	ja     c0002441 <get_ldnumber+0x45>
c000242b:	83 c2 02             	add    edx,0x2
c000242e:	83 c9 ff             	or     ecx,0xffffffff
c0002431:	39 d3                	cmp    ebx,edx
c0002433:	75 0f                	jne    c0002444 <get_ldnumber+0x48>
c0002435:	89 f2                	mov    edx,esi
c0002437:	89 18                	mov    DWORD PTR [eax],ebx
c0002439:	0f be ca             	movsx  ecx,dl
c000243c:	83 e9 30             	sub    ecx,0x30
c000243f:	eb 03                	jmp    c0002444 <get_ldnumber+0x48>
c0002441:	83 c9 ff             	or     ecx,0xffffffff
c0002444:	89 c8                	mov    eax,ecx
c0002446:	5b                   	pop    ebx
c0002447:	5e                   	pop    esi
c0002448:	c3                   	ret    

c0002449 <validate>:
c0002449:	56                   	push   esi
c000244a:	53                   	push   ebx
c000244b:	89 d6                	mov    esi,edx
c000244d:	51                   	push   ecx
c000244e:	85 c0                	test   eax,eax
c0002450:	75 09                	jne    c000245b <validate+0x12>
c0002452:	b8 09 00 00 00       	mov    eax,0x9
c0002457:	31 c9                	xor    ecx,ecx
c0002459:	eb 2e                	jmp    c0002489 <validate+0x40>
c000245b:	89 c3                	mov    ebx,eax
c000245d:	8b 00                	mov    eax,DWORD PTR [eax]
c000245f:	85 c0                	test   eax,eax
c0002461:	74 ef                	je     c0002452 <validate+0x9>
c0002463:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002466:	74 ea                	je     c0002452 <validate+0x9>
c0002468:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000246b:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c000246f:	75 e1                	jne    c0002452 <validate+0x9>
c0002471:	83 ec 0c             	sub    esp,0xc
c0002474:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002478:	50                   	push   eax
c0002479:	e8 bc fa ff ff       	call   c0001f3a <disk_status>
c000247e:	83 c4 10             	add    esp,0x10
c0002481:	a8 01                	test   al,0x1
c0002483:	75 cd                	jne    c0002452 <validate+0x9>
c0002485:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002487:	31 c0                	xor    eax,eax
c0002489:	89 0e                	mov    DWORD PTR [esi],ecx
c000248b:	5a                   	pop    edx
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	c3                   	ret    

c000248f <sync_window>:
c000248f:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002493:	74 58                	je     c00024ed <sync_window+0x5e>
c0002495:	56                   	push   esi
c0002496:	53                   	push   ebx
c0002497:	8d 70 34             	lea    esi,[eax+0x34]
c000249a:	51                   	push   ecx
c000249b:	89 c3                	mov    ebx,eax
c000249d:	6a 01                	push   0x1
c000249f:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00024a2:	56                   	push   esi
c00024a3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024a7:	50                   	push   eax
c00024a8:	e8 a9 fa ff ff       	call   c0001f56 <disk_write>
c00024ad:	83 c4 10             	add    esp,0x10
c00024b0:	ba 01 00 00 00       	mov    edx,0x1
c00024b5:	85 c0                	test   eax,eax
c00024b7:	75 2e                	jne    c00024e7 <sync_window+0x58>
c00024b9:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00024bc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00024bf:	89 c1                	mov    ecx,eax
c00024c1:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00024c5:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00024c8:	39 d1                	cmp    ecx,edx
c00024ca:	73 19                	jae    c00024e5 <sync_window+0x56>
c00024cc:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00024d0:	75 13                	jne    c00024e5 <sync_window+0x56>
c00024d2:	6a 01                	push   0x1
c00024d4:	01 d0                	add    eax,edx
c00024d6:	50                   	push   eax
c00024d7:	56                   	push   esi
c00024d8:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00024dc:	50                   	push   eax
c00024dd:	e8 74 fa ff ff       	call   c0001f56 <disk_write>
c00024e2:	83 c4 10             	add    esp,0x10
c00024e5:	31 d2                	xor    edx,edx
c00024e7:	89 d0                	mov    eax,edx
c00024e9:	5a                   	pop    edx
c00024ea:	5b                   	pop    ebx
c00024eb:	5e                   	pop    esi
c00024ec:	c3                   	ret    
c00024ed:	31 d2                	xor    edx,edx
c00024ef:	89 d0                	mov    eax,edx
c00024f1:	c3                   	ret    

c00024f2 <move_window>:
c00024f2:	57                   	push   edi
c00024f3:	56                   	push   esi
c00024f4:	31 f6                	xor    esi,esi
c00024f6:	53                   	push   ebx
c00024f7:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c00024fa:	74 32                	je     c000252e <move_window+0x3c>
c00024fc:	89 c3                	mov    ebx,eax
c00024fe:	89 d7                	mov    edi,edx
c0002500:	e8 8a ff ff ff       	call   c000248f <sync_window>
c0002505:	89 c6                	mov    esi,eax
c0002507:	85 c0                	test   eax,eax
c0002509:	75 23                	jne    c000252e <move_window+0x3c>
c000250b:	6a 01                	push   0x1
c000250d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002510:	57                   	push   edi
c0002511:	50                   	push   eax
c0002512:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002516:	50                   	push   eax
c0002517:	e8 24 fa ff ff       	call   c0001f40 <disk_read>
c000251c:	83 c4 10             	add    esp,0x10
c000251f:	85 c0                	test   eax,eax
c0002521:	74 08                	je     c000252b <move_window+0x39>
c0002523:	be 01 00 00 00       	mov    esi,0x1
c0002528:	83 cf ff             	or     edi,0xffffffff
c000252b:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000252e:	89 f0                	mov    eax,esi
c0002530:	5b                   	pop    ebx
c0002531:	5e                   	pop    esi
c0002532:	5f                   	pop    edi
c0002533:	c3                   	ret    

c0002534 <check_fs>:
c0002534:	53                   	push   ebx
c0002535:	89 c3                	mov    ebx,eax
c0002537:	83 ec 08             	sub    esp,0x8
c000253a:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000253e:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002545:	e8 a8 ff ff ff       	call   c00024f2 <move_window>
c000254a:	ba 04 00 00 00       	mov    edx,0x4
c000254f:	85 c0                	test   eax,eax
c0002551:	75 68                	jne    c00025bb <check_fs+0x87>
c0002553:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002559:	e8 2d fa ff ff       	call   c0001f8b <ld_word>
c000255e:	ba 03 00 00 00       	mov    edx,0x3
c0002563:	66 3d 55 aa          	cmp    ax,0xaa55
c0002567:	75 52                	jne    c00025bb <check_fs+0x87>
c0002569:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c000256c:	8d 50 18             	lea    edx,[eax+0x18]
c000256f:	80 fa 01             	cmp    dl,0x1
c0002572:	76 09                	jbe    c000257d <check_fs+0x49>
c0002574:	ba 02 00 00 00       	mov    edx,0x2
c0002579:	3c eb                	cmp    al,0xeb
c000257b:	75 3e                	jne    c00025bb <check_fs+0x87>
c000257d:	ba 40 33 03 c0       	mov    edx,0xc0033340
c0002582:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002585:	b9 03 00 00 00       	mov    ecx,0x3
c000258a:	e8 48 fa ff ff       	call   c0001fd7 <mem_cmp>
c000258f:	31 d2                	xor    edx,edx
c0002591:	85 c0                	test   eax,eax
c0002593:	74 26                	je     c00025bb <check_fs+0x87>
c0002595:	ba ec f4 02 c0       	mov    edx,0xc002f4ec
c000259a:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00025a0:	b9 05 00 00 00       	mov    ecx,0x5
c00025a5:	e8 2d fa ff ff       	call   c0001fd7 <mem_cmp>
c00025aa:	31 d2                	xor    edx,edx
c00025ac:	85 c0                	test   eax,eax
c00025ae:	74 0b                	je     c00025bb <check_fs+0x87>
c00025b0:	31 d2                	xor    edx,edx
c00025b2:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00025b6:	0f 95 c2             	setne  dl
c00025b9:	01 d2                	add    edx,edx
c00025bb:	89 d0                	mov    eax,edx
c00025bd:	83 c4 08             	add    esp,0x8
c00025c0:	5b                   	pop    ebx
c00025c1:	c3                   	ret    

c00025c2 <find_volume>:
c00025c2:	55                   	push   ebp
c00025c3:	57                   	push   edi
c00025c4:	56                   	push   esi
c00025c5:	89 c6                	mov    esi,eax
c00025c7:	53                   	push   ebx
c00025c8:	89 d3                	mov    ebx,edx
c00025ca:	83 ec 2c             	sub    esp,0x2c
c00025cd:	31 d2                	xor    edx,edx
c00025cf:	e8 60 ff ff ff       	call   c0002534 <check_fs>
c00025d4:	83 f8 02             	cmp    eax,0x2
c00025d7:	74 06                	je     c00025df <find_volume+0x1d>
c00025d9:	77 62                	ja     c000263d <find_volume+0x7b>
c00025db:	85 db                	test   ebx,ebx
c00025dd:	74 5e                	je     c000263d <find_volume+0x7b>
c00025df:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c00025e3:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c00025e9:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c00025ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025f3:	89 cf                	mov    edi,ecx
c00025f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00025f9:	89 e8                	mov    eax,ebp
c00025fb:	83 c5 10             	add    ebp,0x10
c00025fe:	e8 95 f9 ff ff       	call   c0001f98 <ld_dword>
c0002603:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002607:	89 01                	mov    DWORD PTR [ecx],eax
c0002609:	83 c1 04             	add    ecx,0x4
c000260c:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002610:	75 e3                	jne    c00025f5 <find_volume+0x33>
c0002612:	31 ed                	xor    ebp,ebp
c0002614:	85 db                	test   ebx,ebx
c0002616:	74 03                	je     c000261b <find_volume+0x59>
c0002618:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000261b:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000261e:	b8 03 00 00 00       	mov    eax,0x3
c0002623:	85 d2                	test   edx,edx
c0002625:	74 0c                	je     c0002633 <find_volume+0x71>
c0002627:	89 f0                	mov    eax,esi
c0002629:	e8 06 ff ff ff       	call   c0002534 <check_fs>
c000262e:	83 f8 01             	cmp    eax,0x1
c0002631:	76 0a                	jbe    c000263d <find_volume+0x7b>
c0002633:	85 db                	test   ebx,ebx
c0002635:	75 06                	jne    c000263d <find_volume+0x7b>
c0002637:	45                   	inc    ebp
c0002638:	83 fd 03             	cmp    ebp,0x3
c000263b:	76 de                	jbe    c000261b <find_volume+0x59>
c000263d:	83 c4 2c             	add    esp,0x2c
c0002640:	5b                   	pop    ebx
c0002641:	5e                   	pop    esi
c0002642:	5f                   	pop    edi
c0002643:	5d                   	pop    ebp
c0002644:	c3                   	ret    

c0002645 <mount_volume>:
c0002645:	55                   	push   ebp
c0002646:	89 d5                	mov    ebp,edx
c0002648:	57                   	push   edi
c0002649:	89 cf                	mov    edi,ecx
c000264b:	56                   	push   esi
c000264c:	53                   	push   ebx
c000264d:	bb 0b 00 00 00       	mov    ebx,0xb
c0002652:	83 ec 1c             	sub    esp,0x1c
c0002655:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000265b:	e8 9c fd ff ff       	call   c00023fc <get_ldnumber>
c0002660:	85 c0                	test   eax,eax
c0002662:	0f 88 c4 02 00 00    	js     c000292c <mount_volume+0x2e7>
c0002668:	8b 34 85 80 6c 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9380]
c000266f:	89 c2                	mov    edx,eax
c0002671:	bb 0c 00 00 00       	mov    ebx,0xc
c0002676:	85 f6                	test   esi,esi
c0002678:	0f 84 ae 02 00 00    	je     c000292c <mount_volume+0x2e7>
c000267e:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c0002681:	83 e7 fe             	and    edi,0xfffffffe
c0002684:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002687:	74 3a                	je     c00026c3 <mount_volume+0x7e>
c0002689:	89 04 24             	mov    DWORD PTR [esp],eax
c000268c:	83 ec 0c             	sub    esp,0xc
c000268f:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002693:	50                   	push   eax
c0002694:	e8 a1 f8 ff ff       	call   c0001f3a <disk_status>
c0002699:	83 c4 10             	add    esp,0x10
c000269c:	a8 01                	test   al,0x1
c000269e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00026a1:	75 20                	jne    c00026c3 <mount_volume+0x7e>
c00026a3:	31 db                	xor    ebx,ebx
c00026a5:	81 e7 fe 00 00 00    	and    edi,0xfe
c00026ab:	0f 84 7b 02 00 00    	je     c000292c <mount_volume+0x2e7>
c00026b1:	a8 04                	test   al,0x4
c00026b3:	0f 84 73 02 00 00    	je     c000292c <mount_volume+0x2e7>
c00026b9:	bb 0a 00 00 00       	mov    ebx,0xa
c00026be:	e9 69 02 00 00       	jmp    c000292c <mount_volume+0x2e7>
c00026c3:	83 ec 0c             	sub    esp,0xc
c00026c6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00026c9:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c00026cc:	0f b6 c2             	movzx  eax,dl
c00026cf:	bb 03 00 00 00       	mov    ebx,0x3
c00026d4:	50                   	push   eax
c00026d5:	e8 63 f8 ff ff       	call   c0001f3d <disk_initialize>
c00026da:	83 c4 10             	add    esp,0x10
c00026dd:	a8 01                	test   al,0x1
c00026df:	0f 85 47 02 00 00    	jne    c000292c <mount_volume+0x2e7>
c00026e5:	81 e7 fe 00 00 00    	and    edi,0xfe
c00026eb:	74 04                	je     c00026f1 <mount_volume+0xac>
c00026ed:	a8 04                	test   al,0x4
c00026ef:	75 c8                	jne    c00026b9 <mount_volume+0x74>
c00026f1:	31 d2                	xor    edx,edx
c00026f3:	89 f0                	mov    eax,esi
c00026f5:	bb 01 00 00 00       	mov    ebx,0x1
c00026fa:	e8 c3 fe ff ff       	call   c00025c2 <find_volume>
c00026ff:	83 f8 04             	cmp    eax,0x4
c0002702:	0f 84 24 02 00 00    	je     c000292c <mount_volume+0x2e7>
c0002708:	83 f8 01             	cmp    eax,0x1
c000270b:	76 0a                	jbe    c0002717 <mount_volume+0xd2>
c000270d:	bb 0d 00 00 00       	mov    ebx,0xd
c0002712:	e9 15 02 00 00       	jmp    c000292c <mount_volume+0x2e7>
c0002717:	8d 46 3f             	lea    eax,[esi+0x3f]
c000271a:	e8 6c f8 ff ff       	call   c0001f8b <ld_word>
c000271f:	66 3d 00 02          	cmp    ax,0x200
c0002723:	75 e8                	jne    c000270d <mount_volume+0xc8>
c0002725:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002728:	e8 5e f8 ff ff       	call   c0001f8b <ld_word>
c000272d:	0f b7 c0             	movzx  eax,ax
c0002730:	89 04 24             	mov    DWORD PTR [esp],eax
c0002733:	85 c0                	test   eax,eax
c0002735:	75 0b                	jne    c0002742 <mount_volume+0xfd>
c0002737:	8d 46 58             	lea    eax,[esi+0x58]
c000273a:	e8 59 f8 ff ff       	call   c0001f98 <ld_dword>
c000273f:	89 04 24             	mov    DWORD PTR [esp],eax
c0002742:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002745:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002749:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000274c:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000274f:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c0002752:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002756:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0002759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000275d:	48                   	dec    eax
c000275e:	3c 01                	cmp    al,0x1
c0002760:	77 ab                	ja     c000270d <mount_volume+0xc8>
c0002762:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c0002766:	89 c3                	mov    ebx,eax
c0002768:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c000276c:	66 85 c0             	test   ax,ax
c000276f:	74 9c                	je     c000270d <mount_volume+0xc8>
c0002771:	8d 40 ff             	lea    eax,[eax-0x1]
c0002774:	85 d8                	test   eax,ebx
c0002776:	75 95                	jne    c000270d <mount_volume+0xc8>
c0002778:	8d 46 45             	lea    eax,[esi+0x45]
c000277b:	e8 0b f8 ff ff       	call   c0001f8b <ld_word>
c0002780:	89 c7                	mov    edi,eax
c0002782:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002786:	a8 0f                	test   al,0xf
c0002788:	75 83                	jne    c000270d <mount_volume+0xc8>
c000278a:	8d 46 47             	lea    eax,[esi+0x47]
c000278d:	e8 f9 f7 ff ff       	call   c0001f8b <ld_word>
c0002792:	0f b7 e8             	movzx  ebp,ax
c0002795:	85 ed                	test   ebp,ebp
c0002797:	75 0a                	jne    c00027a3 <mount_volume+0x15e>
c0002799:	8d 46 54             	lea    eax,[esi+0x54]
c000279c:	e8 f7 f7 ff ff       	call   c0001f98 <ld_dword>
c00027a1:	89 c5                	mov    ebp,eax
c00027a3:	8d 46 42             	lea    eax,[esi+0x42]
c00027a6:	e8 e0 f7 ff ff       	call   c0001f8b <ld_word>
c00027ab:	0f b7 c8             	movzx  ecx,ax
c00027ae:	85 c9                	test   ecx,ecx
c00027b0:	0f 84 57 ff ff ff    	je     c000270d <mount_volume+0xc8>
c00027b6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00027bb:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c00027bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027c3:	0f b7 c7             	movzx  eax,di
c00027c6:	c1 e8 04             	shr    eax,0x4
c00027c9:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00027cd:	01 c8                	add    eax,ecx
c00027cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027d3:	39 c5                	cmp    ebp,eax
c00027d5:	0f 82 32 ff ff ff    	jb     c000270d <mount_volume+0xc8>
c00027db:	29 c5                	sub    ebp,eax
c00027dd:	31 d2                	xor    edx,edx
c00027df:	89 e8                	mov    eax,ebp
c00027e1:	f7 f3                	div    ebx
c00027e3:	39 dd                	cmp    ebp,ebx
c00027e5:	0f 82 22 ff ff ff    	jb     c000270d <mount_volume+0xc8>
c00027eb:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027f0:	0f 87 17 ff ff ff    	ja     c000270d <mount_volume+0xc8>
c00027f6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027fb:	0f 86 1c 01 00 00    	jbe    c000291d <mount_volume+0x2d8>
c0002801:	bb 03 00 00 00       	mov    ebx,0x3
c0002806:	8d 68 02             	lea    ebp,[eax+0x2]
c0002809:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000280d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002811:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002815:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002818:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000281b:	01 c8                	add    eax,ecx
c000281d:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002820:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002823:	83 fb 03             	cmp    ebx,0x3
c0002826:	75 23                	jne    c000284b <mount_volume+0x206>
c0002828:	8d 46 5e             	lea    eax,[esi+0x5e]
c000282b:	e8 5b f7 ff ff       	call   c0001f8b <ld_word>
c0002830:	09 c7                	or     edi,eax
c0002832:	66 85 ff             	test   di,di
c0002835:	0f 85 d2 fe ff ff    	jne    c000270d <mount_volume+0xc8>
c000283b:	8d 46 60             	lea    eax,[esi+0x60]
c000283e:	c1 e5 02             	shl    ebp,0x2
c0002841:	e8 52 f7 ff ff       	call   c0001f98 <ld_dword>
c0002846:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002849:	eb 24                	jmp    c000286f <mount_volume+0x22a>
c000284b:	66 85 ff             	test   di,di
c000284e:	0f 84 b9 fe ff ff    	je     c000270d <mount_volume+0xc8>
c0002854:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002858:	83 fb 02             	cmp    ebx,0x2
c000285b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000285e:	75 04                	jne    c0002864 <mount_volume+0x21f>
c0002860:	01 ed                	add    ebp,ebp
c0002862:	eb 0b                	jmp    c000286f <mount_volume+0x22a>
c0002864:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c0002868:	83 e5 01             	and    ebp,0x1
c000286b:	d1 e8                	shr    eax,1
c000286d:	01 c5                	add    ebp,eax
c000286f:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c0002875:	c1 ed 09             	shr    ebp,0x9
c0002878:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c000287b:	0f 87 8c fe ff ff    	ja     c000270d <mount_volume+0xc8>
c0002881:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002888:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000288f:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002893:	83 fb 03             	cmp    ebx,0x3
c0002896:	75 6e                	jne    c0002906 <mount_volume+0x2c1>
c0002898:	8d 46 64             	lea    eax,[esi+0x64]
c000289b:	e8 eb f6 ff ff       	call   c0001f8b <ld_word>
c00028a0:	66 48                	dec    ax
c00028a2:	75 62                	jne    c0002906 <mount_volume+0x2c1>
c00028a4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00028a8:	89 f0                	mov    eax,esi
c00028aa:	42                   	inc    edx
c00028ab:	e8 42 fc ff ff       	call   c00024f2 <move_window>
c00028b0:	85 c0                	test   eax,eax
c00028b2:	75 52                	jne    c0002906 <mount_volume+0x2c1>
c00028b4:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00028b8:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00028be:	e8 c8 f6 ff ff       	call   c0001f8b <ld_word>
c00028c3:	66 3d 55 aa          	cmp    ax,0xaa55
c00028c7:	75 3d                	jne    c0002906 <mount_volume+0x2c1>
c00028c9:	8d 46 34             	lea    eax,[esi+0x34]
c00028cc:	e8 c7 f6 ff ff       	call   c0001f98 <ld_dword>
c00028d1:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028d6:	75 2e                	jne    c0002906 <mount_volume+0x2c1>
c00028d8:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c00028de:	e8 b5 f6 ff ff       	call   c0001f98 <ld_dword>
c00028e3:	3d 72 72 41 61       	cmp    eax,0x61417272
c00028e8:	75 1c                	jne    c0002906 <mount_volume+0x2c1>
c00028ea:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c00028f0:	e8 a3 f6 ff ff       	call   c0001f98 <ld_dword>
c00028f5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00028f8:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c00028fe:	e8 95 f6 ff ff       	call   c0001f98 <ld_dword>
c0002903:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002906:	66 a1 60 6c 03 c0    	mov    ax,ds:0xc0036c60
c000290c:	88 1e                	mov    BYTE PTR [esi],bl
c000290e:	40                   	inc    eax
c000290f:	31 db                	xor    ebx,ebx
c0002911:	66 a3 60 6c 03 c0    	mov    ds:0xc0036c60,ax
c0002917:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000291b:	eb 0f                	jmp    c000292c <mount_volume+0x2e7>
c000291d:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002922:	19 db                	sbb    ebx,ebx
c0002924:	83 c3 02             	add    ebx,0x2
c0002927:	e9 da fe ff ff       	jmp    c0002806 <mount_volume+0x1c1>
c000292c:	83 c4 1c             	add    esp,0x1c
c000292f:	89 d8                	mov    eax,ebx
c0002931:	5b                   	pop    ebx
c0002932:	5e                   	pop    esi
c0002933:	5f                   	pop    edi
c0002934:	5d                   	pop    ebp
c0002935:	c3                   	ret    

c0002936 <put_fat>:
c0002936:	55                   	push   ebp
c0002937:	bd 02 00 00 00       	mov    ebp,0x2
c000293c:	57                   	push   edi
c000293d:	56                   	push   esi
c000293e:	53                   	push   ebx
c000293f:	83 ec 1c             	sub    esp,0x1c
c0002942:	83 fa 01             	cmp    edx,0x1
c0002945:	0f 86 38 01 00 00    	jbe    c0002a83 <put_fat+0x14d>
c000294b:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000294e:	0f 86 2f 01 00 00    	jbe    c0002a83 <put_fat+0x14d>
c0002954:	89 c6                	mov    esi,eax
c0002956:	89 cf                	mov    edi,ecx
c0002958:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000295b:	89 d3                	mov    ebx,edx
c000295d:	83 f8 02             	cmp    eax,0x2
c0002960:	0f 84 b1 00 00 00    	je     c0002a17 <put_fat+0xe1>
c0002966:	83 f8 03             	cmp    eax,0x3
c0002969:	0f 84 d5 00 00 00    	je     c0002a44 <put_fat+0x10e>
c000296f:	48                   	dec    eax
c0002970:	0f 85 0d 01 00 00    	jne    c0002a83 <put_fat+0x14d>
c0002976:	89 d1                	mov    ecx,edx
c0002978:	89 f0                	mov    eax,esi
c000297a:	d1 e9                	shr    ecx,1
c000297c:	01 d1                	add    ecx,edx
c000297e:	89 ca                	mov    edx,ecx
c0002980:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002984:	c1 ea 09             	shr    edx,0x9
c0002987:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000298a:	e8 63 fb ff ff       	call   c00024f2 <move_window>
c000298f:	89 c5                	mov    ebp,eax
c0002991:	85 c0                	test   eax,eax
c0002993:	0f 85 ea 00 00 00    	jne    c0002a83 <put_fat+0x14d>
c0002999:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000299d:	8d 46 34             	lea    eax,[esi+0x34]
c00029a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029a4:	8d 41 01             	lea    eax,[ecx+0x1]
c00029a7:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00029ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029b1:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00029b5:	89 f8                	mov    eax,edi
c00029b7:	83 e3 01             	and    ebx,0x1
c00029ba:	74 11                	je     c00029cd <put_fat+0x97>
c00029bc:	8a 11                	mov    dl,BYTE PTR [ecx]
c00029be:	89 f8                	mov    eax,edi
c00029c0:	83 e2 0f             	and    edx,0xf
c00029c3:	c1 e0 04             	shl    eax,0x4
c00029c6:	25 f0 0f 00 00       	and    eax,0xff0
c00029cb:	09 d0                	or     eax,edx
c00029cd:	88 01                	mov    BYTE PTR [ecx],al
c00029cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d3:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00029d7:	c1 ea 09             	shr    edx,0x9
c00029da:	89 f0                	mov    eax,esi
c00029dc:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029df:	e8 0e fb ff ff       	call   c00024f2 <move_window>
c00029e4:	89 c5                	mov    ebp,eax
c00029e6:	85 c0                	test   eax,eax
c00029e8:	0f 85 95 00 00 00    	jne    c0002a83 <put_fat+0x14d>
c00029ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00029f2:	25 ff 01 00 00       	and    eax,0x1ff
c00029f7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029fb:	85 db                	test   ebx,ebx
c00029fd:	74 07                	je     c0002a06 <put_fat+0xd0>
c00029ff:	c1 ef 04             	shr    edi,0x4
c0002a02:	89 f9                	mov    ecx,edi
c0002a04:	eb 0d                	jmp    c0002a13 <put_fat+0xdd>
c0002a06:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a08:	c1 ef 08             	shr    edi,0x8
c0002a0b:	83 e1 f0             	and    ecx,0xfffffff0
c0002a0e:	83 e7 0f             	and    edi,0xf
c0002a11:	09 f9                	or     ecx,edi
c0002a13:	88 08                	mov    BYTE PTR [eax],cl
c0002a15:	eb 27                	jmp    c0002a3e <put_fat+0x108>
c0002a17:	c1 ea 08             	shr    edx,0x8
c0002a1a:	89 f0                	mov    eax,esi
c0002a1c:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a1f:	e8 ce fa ff ff       	call   c00024f2 <move_window>
c0002a24:	89 c5                	mov    ebp,eax
c0002a26:	85 c0                	test   eax,eax
c0002a28:	75 59                	jne    c0002a83 <put_fat+0x14d>
c0002a2a:	01 db                	add    ebx,ebx
c0002a2c:	0f b7 d7             	movzx  edx,di
c0002a2f:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002a35:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002a39:	e8 72 f5 ff ff       	call   c0001fb0 <st_word>
c0002a3e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a42:	eb 3f                	jmp    c0002a83 <put_fat+0x14d>
c0002a44:	c1 ea 07             	shr    edx,0x7
c0002a47:	89 f0                	mov    eax,esi
c0002a49:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a4c:	e8 a1 fa ff ff       	call   c00024f2 <move_window>
c0002a51:	89 c5                	mov    ebp,eax
c0002a53:	85 c0                	test   eax,eax
c0002a55:	75 2c                	jne    c0002a83 <put_fat+0x14d>
c0002a57:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002a5d:	c1 e3 02             	shl    ebx,0x2
c0002a60:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002a66:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002a6a:	89 d8                	mov    eax,ebx
c0002a6c:	e8 27 f5 ff ff       	call   c0001f98 <ld_dword>
c0002a71:	25 00 00 00 f0       	and    eax,0xf0000000
c0002a76:	09 f8                	or     eax,edi
c0002a78:	89 c2                	mov    edx,eax
c0002a7a:	89 d8                	mov    eax,ebx
c0002a7c:	e8 33 f5 ff ff       	call   c0001fb4 <st_dword>
c0002a81:	eb bb                	jmp    c0002a3e <put_fat+0x108>
c0002a83:	83 c4 1c             	add    esp,0x1c
c0002a86:	89 e8                	mov    eax,ebp
c0002a88:	5b                   	pop    ebx
c0002a89:	5e                   	pop    esi
c0002a8a:	5f                   	pop    edi
c0002a8b:	5d                   	pop    ebp
c0002a8c:	c3                   	ret    

c0002a8d <dir_clear>:
c0002a8d:	55                   	push   ebp
c0002a8e:	57                   	push   edi
c0002a8f:	56                   	push   esi
c0002a90:	89 c6                	mov    esi,eax
c0002a92:	53                   	push   ebx
c0002a93:	83 ec 1c             	sub    esp,0x1c
c0002a96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002a9a:	e8 f0 f9 ff ff       	call   c000248f <sync_window>
c0002a9f:	85 c0                	test   eax,eax
c0002aa1:	0f 85 c0 00 00 00    	jne    c0002b67 <dir_clear+0xda>
c0002aa7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002aab:	89 f0                	mov    eax,esi
c0002aad:	e8 30 f7 ff ff       	call   c00021e2 <clst2sect>
c0002ab2:	31 d2                	xor    edx,edx
c0002ab4:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002ab7:	89 c5                	mov    ebp,eax
c0002ab9:	b9 00 02 00 00       	mov    ecx,0x200
c0002abe:	8d 46 34             	lea    eax,[esi+0x34]
c0002ac1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002ac5:	e8 02 f5 ff ff       	call   c0001fcc <mem_set>
c0002aca:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002ace:	c1 e3 09             	shl    ebx,0x9
c0002ad1:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002ad7:	76 1b                	jbe    c0002af4 <dir_clear+0x67>
c0002ad9:	bb 00 80 00 00       	mov    ebx,0x8000
c0002ade:	eb 14                	jmp    c0002af4 <dir_clear+0x67>
c0002ae0:	83 ec 0c             	sub    esp,0xc
c0002ae3:	53                   	push   ebx
c0002ae4:	e8 eb 32 00 00       	call   c0005dd4 <ff_memalloc>
c0002ae9:	83 c4 10             	add    esp,0x10
c0002aec:	89 c7                	mov    edi,eax
c0002aee:	85 c0                	test   eax,eax
c0002af0:	75 7c                	jne    c0002b6e <dir_clear+0xe1>
c0002af2:	d1 eb                	shr    ebx,1
c0002af4:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002afa:	77 e4                	ja     c0002ae0 <dir_clear+0x53>
c0002afc:	31 db                	xor    ebx,ebx
c0002afe:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b02:	39 d8                	cmp    eax,ebx
c0002b04:	76 53                	jbe    c0002b59 <dir_clear+0xcc>
c0002b06:	6a 01                	push   0x1
c0002b08:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b0b:	50                   	push   eax
c0002b0c:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b14:	50                   	push   eax
c0002b15:	e8 3c f4 ff ff       	call   c0001f56 <disk_write>
c0002b1a:	83 c4 10             	add    esp,0x10
c0002b1d:	85 c0                	test   eax,eax
c0002b1f:	75 38                	jne    c0002b59 <dir_clear+0xcc>
c0002b21:	43                   	inc    ebx
c0002b22:	eb da                	jmp    c0002afe <dir_clear+0x71>
c0002b24:	52                   	push   edx
c0002b25:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b28:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b2c:	50                   	push   eax
c0002b2d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b31:	57                   	push   edi
c0002b32:	50                   	push   eax
c0002b33:	e8 1e f4 ff ff       	call   c0001f56 <disk_write>
c0002b38:	83 c4 10             	add    esp,0x10
c0002b3b:	85 c0                	test   eax,eax
c0002b3d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b41:	75 0a                	jne    c0002b4d <dir_clear+0xc0>
c0002b43:	01 d3                	add    ebx,edx
c0002b45:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b49:	39 d8                	cmp    eax,ebx
c0002b4b:	77 d7                	ja     c0002b24 <dir_clear+0x97>
c0002b4d:	83 ec 0c             	sub    esp,0xc
c0002b50:	57                   	push   edi
c0002b51:	e8 96 32 00 00       	call   c0005dec <ff_memfree>
c0002b56:	83 c4 10             	add    esp,0x10
c0002b59:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b5d:	39 d8                	cmp    eax,ebx
c0002b5f:	0f 95 c0             	setne  al
c0002b62:	0f b6 c0             	movzx  eax,al
c0002b65:	eb 19                	jmp    c0002b80 <dir_clear+0xf3>
c0002b67:	b8 01 00 00 00       	mov    eax,0x1
c0002b6c:	eb 12                	jmp    c0002b80 <dir_clear+0xf3>
c0002b6e:	89 d9                	mov    ecx,ebx
c0002b70:	31 d2                	xor    edx,edx
c0002b72:	e8 55 f4 ff ff       	call   c0001fcc <mem_set>
c0002b77:	89 da                	mov    edx,ebx
c0002b79:	31 db                	xor    ebx,ebx
c0002b7b:	c1 ea 09             	shr    edx,0x9
c0002b7e:	eb c5                	jmp    c0002b45 <dir_clear+0xb8>
c0002b80:	83 c4 1c             	add    esp,0x1c
c0002b83:	5b                   	pop    ebx
c0002b84:	5e                   	pop    esi
c0002b85:	5f                   	pop    edi
c0002b86:	5d                   	pop    ebp
c0002b87:	c3                   	ret    

c0002b88 <create_name>:
c0002b88:	55                   	push   ebp
c0002b89:	57                   	push   edi
c0002b8a:	89 d7                	mov    edi,edx
c0002b8c:	56                   	push   esi
c0002b8d:	31 f6                	xor    esi,esi
c0002b8f:	53                   	push   ebx
c0002b90:	83 ec 3c             	sub    esp,0x3c
c0002b93:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b97:	8b 02                	mov    eax,DWORD PTR [edx]
c0002b99:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ba1:	8b 00                	mov    eax,DWORD PTR [eax]
c0002ba3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002ba6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002baa:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002bae:	e8 5e f4 ff ff       	call   c0002011 <tchar2uni>
c0002bb3:	89 c3                	mov    ebx,eax
c0002bb5:	83 f8 ff             	cmp    eax,0xffffffff
c0002bb8:	75 0a                	jne    c0002bc4 <create_name+0x3c>
c0002bba:	b8 06 00 00 00       	mov    eax,0x6
c0002bbf:	e9 93 02 00 00       	jmp    c0002e57 <create_name+0x2cf>
c0002bc4:	3d ff ff 00 00       	cmp    eax,0xffff
c0002bc9:	76 0c                	jbe    c0002bd7 <create_name+0x4f>
c0002bcb:	c1 e8 10             	shr    eax,0x10
c0002bce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bd2:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002bd6:	46                   	inc    esi
c0002bd7:	0f b7 d3             	movzx  edx,bx
c0002bda:	83 fa 1f             	cmp    edx,0x1f
c0002bdd:	76 4a                	jbe    c0002c29 <create_name+0xa1>
c0002bdf:	83 fa 5c             	cmp    edx,0x5c
c0002be2:	74 30                	je     c0002c14 <create_name+0x8c>
c0002be4:	83 fa 2f             	cmp    edx,0x2f
c0002be7:	74 2b                	je     c0002c14 <create_name+0x8c>
c0002be9:	83 fa 7f             	cmp    edx,0x7f
c0002bec:	77 0e                	ja     c0002bfc <create_name+0x74>
c0002bee:	b8 f2 f4 02 c0       	mov    eax,0xc002f4f2
c0002bf3:	e8 02 f4 ff ff       	call   c0001ffa <chk_chr>
c0002bf8:	85 c0                	test   eax,eax
c0002bfa:	75 be                	jne    c0002bba <create_name+0x32>
c0002bfc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c02:	77 b6                	ja     c0002bba <create_name+0x32>
c0002c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c08:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c0c:	46                   	inc    esi
c0002c0d:	eb 9b                	jmp    c0002baa <create_name+0x22>
c0002c0f:	40                   	inc    eax
c0002c10:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c14:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c18:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c1b:	83 fa 2f             	cmp    edx,0x2f
c0002c1e:	74 ef                	je     c0002c0f <create_name+0x87>
c0002c20:	83 fa 5c             	cmp    edx,0x5c
c0002c23:	74 ea                	je     c0002c0f <create_name+0x87>
c0002c25:	31 db                	xor    ebx,ebx
c0002c27:	eb 02                	jmp    c0002c2b <create_name+0xa3>
c0002c29:	b3 04                	mov    bl,0x4
c0002c2b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c2f:	89 07                	mov    DWORD PTR [edi],eax
c0002c31:	85 f6                	test   esi,esi
c0002c33:	74 16                	je     c0002c4b <create_name+0xc3>
c0002c35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c39:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002c3e:	83 f8 20             	cmp    eax,0x20
c0002c41:	74 05                	je     c0002c48 <create_name+0xc0>
c0002c43:	83 f8 2e             	cmp    eax,0x2e
c0002c46:	75 03                	jne    c0002c4b <create_name+0xc3>
c0002c48:	4e                   	dec    esi
c0002c49:	eb e6                	jmp    c0002c31 <create_name+0xa9>
c0002c4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c4f:	31 ff                	xor    edi,edi
c0002c51:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002c57:	85 f6                	test   esi,esi
c0002c59:	0f 84 5b ff ff ff    	je     c0002bba <create_name+0x32>
c0002c5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c63:	8d 57 01             	lea    edx,[edi+0x1]
c0002c66:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c6a:	83 f8 20             	cmp    eax,0x20
c0002c6d:	75 04                	jne    c0002c73 <create_name+0xeb>
c0002c6f:	89 d7                	mov    edi,edx
c0002c71:	eb ec                	jmp    c0002c5f <create_name+0xd7>
c0002c73:	85 ff                	test   edi,edi
c0002c75:	75 05                	jne    c0002c7c <create_name+0xf4>
c0002c77:	83 f8 2e             	cmp    eax,0x2e
c0002c7a:	75 08                	jne    c0002c84 <create_name+0xfc>
c0002c7c:	83 cb 03             	or     ebx,0x3
c0002c7f:	eb 03                	jmp    c0002c84 <create_name+0xfc>
c0002c81:	4e                   	dec    esi
c0002c82:	74 0c                	je     c0002c90 <create_name+0x108>
c0002c84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c88:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002c8e:	75 f1                	jne    c0002c81 <create_name+0xf9>
c0002c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c94:	b9 0b 00 00 00       	mov    ecx,0xb
c0002c99:	83 c0 20             	add    eax,0x20
c0002c9c:	ba 20 00 00 00       	mov    edx,0x20
c0002ca1:	31 ed                	xor    ebp,ebp
c0002ca3:	e8 24 f3 ff ff       	call   c0001fcc <mem_set>
c0002ca8:	b9 08 00 00 00       	mov    ecx,0x8
c0002cad:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002cb2:	8d 47 01             	lea    eax,[edi+0x1]
c0002cb5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cbd:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002cc1:	89 c7                	mov    edi,eax
c0002cc3:	85 c0                	test   eax,eax
c0002cc5:	0f 84 25 01 00 00    	je     c0002df0 <create_name+0x268>
c0002ccb:	83 f8 20             	cmp    eax,0x20
c0002cce:	74 0f                	je     c0002cdf <create_name+0x157>
c0002cd0:	83 f8 2e             	cmp    eax,0x2e
c0002cd3:	75 13                	jne    c0002ce8 <create_name+0x160>
c0002cd5:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002cd9:	0f 84 6a 01 00 00    	je     c0002e49 <create_name+0x2c1>
c0002cdf:	83 cb 03             	or     ebx,0x3
c0002ce2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002ce6:	eb ca                	jmp    c0002cb2 <create_name+0x12a>
c0002ce8:	39 cd                	cmp    ebp,ecx
c0002cea:	73 0b                	jae    c0002cf7 <create_name+0x16f>
c0002cec:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002cf0:	75 3f                	jne    c0002d31 <create_name+0x1a9>
c0002cf2:	e9 52 01 00 00       	jmp    c0002e49 <create_name+0x2c1>
c0002cf7:	83 f9 0b             	cmp    ecx,0xb
c0002cfa:	75 0d                	jne    c0002d09 <create_name+0x181>
c0002cfc:	83 cb 03             	or     ebx,0x3
c0002cff:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d04:	e9 e7 00 00 00       	jmp    c0002df0 <create_name+0x268>
c0002d09:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d0d:	74 0d                	je     c0002d1c <create_name+0x194>
c0002d0f:	83 cb 03             	or     ebx,0x3
c0002d12:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d16:	0f 87 d4 00 00 00    	ja     c0002df0 <create_name+0x268>
c0002d1c:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d21:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002d25:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d2a:	bd 08 00 00 00       	mov    ebp,0x8
c0002d2f:	eb b1                	jmp    c0002ce2 <create_name+0x15a>
c0002d31:	83 f8 7f             	cmp    eax,0x7f
c0002d34:	76 66                	jbe    c0002d9c <create_name+0x214>
c0002d36:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d3a:	89 d9                	mov    ecx,ebx
c0002d3c:	83 c9 02             	or     ecx,0x2
c0002d3f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002d43:	52                   	push   edx
c0002d44:	52                   	push   edx
c0002d45:	68 b5 01 00 00       	push   0x1b5
c0002d4a:	50                   	push   eax
c0002d4b:	e8 b4 30 00 00       	call   c0005e04 <ff_uni2oem>
c0002d50:	83 c4 10             	add    esp,0x10
c0002d53:	89 c7                	mov    edi,eax
c0002d55:	a8 80                	test   al,0x80
c0002d57:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002d5b:	74 0c                	je     c0002d69 <create_name+0x1e1>
c0002d5d:	83 e7 7f             	and    edi,0x7f
c0002d60:	0f b6 bf a0 f5 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffd0a60]
c0002d67:	eb 2a                	jmp    c0002d93 <create_name+0x20b>
c0002d69:	0f b7 c0             	movzx  eax,ax
c0002d6c:	3d ff 00 00 00       	cmp    eax,0xff
c0002d71:	76 20                	jbe    c0002d93 <create_name+0x20b>
c0002d73:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002d76:	39 ea                	cmp    edx,ebp
c0002d78:	77 0a                	ja     c0002d84 <create_name+0x1fc>
c0002d7a:	83 cb 03             	or     ebx,0x3
c0002d7d:	89 cd                	mov    ebp,ecx
c0002d7f:	e9 5e ff ff ff       	jmp    c0002ce2 <create_name+0x15a>
c0002d84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002d88:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002d8c:	45                   	inc    ebp
c0002d8d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002d91:	eb 4d                	jmp    c0002de0 <create_name+0x258>
c0002d93:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002d97:	66 85 ff             	test   di,di
c0002d9a:	74 19                	je     c0002db5 <create_name+0x22d>
c0002d9c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002da0:	0f b7 d7             	movzx  edx,di
c0002da3:	b8 fb f4 02 c0       	mov    eax,0xc002f4fb
c0002da8:	e8 4d f2 ff ff       	call   c0001ffa <chk_chr>
c0002dad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002db1:	85 c0                	test   eax,eax
c0002db3:	74 0a                	je     c0002dbf <create_name+0x237>
c0002db5:	83 cb 03             	or     ebx,0x3
c0002db8:	bf 5f 00 00 00       	mov    edi,0x5f
c0002dbd:	eb 21                	jmp    c0002de0 <create_name+0x258>
c0002dbf:	8d 47 bf             	lea    eax,[edi-0x41]
c0002dc2:	66 83 f8 19          	cmp    ax,0x19
c0002dc6:	77 07                	ja     c0002dcf <create_name+0x247>
c0002dc8:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002dcd:	eb 11                	jmp    c0002de0 <create_name+0x258>
c0002dcf:	8d 47 9f             	lea    eax,[edi-0x61]
c0002dd2:	66 83 f8 19          	cmp    ax,0x19
c0002dd6:	77 08                	ja     c0002de0 <create_name+0x258>
c0002dd8:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002ddd:	83 ef 20             	sub    edi,0x20
c0002de0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002de4:	89 f8                	mov    eax,edi
c0002de6:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002dea:	45                   	inc    ebp
c0002deb:	e9 f2 fe ff ff       	jmp    c0002ce2 <create_name+0x15a>
c0002df0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002df4:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002df8:	75 04                	jne    c0002dfe <create_name+0x276>
c0002dfa:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002dfe:	83 f9 08             	cmp    ecx,0x8
c0002e01:	75 05                	jne    c0002e08 <create_name+0x280>
c0002e03:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e0c:	83 e0 0c             	and    eax,0xc
c0002e0f:	83 f8 0c             	cmp    eax,0xc
c0002e12:	74 0c                	je     c0002e20 <create_name+0x298>
c0002e14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e18:	83 e0 03             	and    eax,0x3
c0002e1b:	83 f8 03             	cmp    eax,0x3
c0002e1e:	75 05                	jne    c0002e25 <create_name+0x29d>
c0002e20:	83 cb 02             	or     ebx,0x2
c0002e23:	eb 19                	jmp    c0002e3e <create_name+0x2b6>
c0002e25:	f6 c3 02             	test   bl,0x2
c0002e28:	75 14                	jne    c0002e3e <create_name+0x2b6>
c0002e2a:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002e2f:	74 03                	je     c0002e34 <create_name+0x2ac>
c0002e31:	83 cb 10             	or     ebx,0x10
c0002e34:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002e39:	74 03                	je     c0002e3e <create_name+0x2b6>
c0002e3b:	83 cb 08             	or     ebx,0x8
c0002e3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e42:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002e45:	31 c0                	xor    eax,eax
c0002e47:	eb 0e                	jmp    c0002e57 <create_name+0x2cf>
c0002e49:	83 f9 0b             	cmp    ecx,0xb
c0002e4c:	0f 85 ca fe ff ff    	jne    c0002d1c <create_name+0x194>
c0002e52:	e9 a5 fe ff ff       	jmp    c0002cfc <create_name+0x174>
c0002e57:	83 c4 3c             	add    esp,0x3c
c0002e5a:	5b                   	pop    ebx
c0002e5b:	5e                   	pop    esi
c0002e5c:	5f                   	pop    edi
c0002e5d:	5d                   	pop    ebp
c0002e5e:	c3                   	ret    

c0002e5f <cmp_lfn>:
c0002e5f:	55                   	push   ebp
c0002e60:	57                   	push   edi
c0002e61:	89 d7                	mov    edi,edx
c0002e63:	56                   	push   esi
c0002e64:	53                   	push   ebx
c0002e65:	83 ec 1c             	sub    esp,0x1c
c0002e68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e6c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002e6f:	e8 17 f1 ff ff       	call   c0001f8b <ld_word>
c0002e74:	66 85 c0             	test   ax,ax
c0002e77:	74 07                	je     c0002e80 <cmp_lfn+0x21>
c0002e79:	31 c0                	xor    eax,eax
c0002e7b:	e9 a1 00 00 00       	jmp    c0002f21 <cmp_lfn+0xc2>
c0002e80:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002e82:	bd 01 00 00 00       	mov    ebp,0x1
c0002e87:	83 e3 3f             	and    ebx,0x3f
c0002e8a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002e92:	4b                   	dec    ebx
c0002e93:	6b db 0d             	imul   ebx,ebx,0xd
c0002e96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9a:	0f b6 80 20 f6 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd09e0]
c0002ea1:	01 f8                	add    eax,edi
c0002ea3:	e8 e3 f0 ff ff       	call   c0001f8b <ld_word>
c0002ea8:	66 85 ed             	test   bp,bp
c0002eab:	89 c6                	mov    esi,eax
c0002ead:	74 3c                	je     c0002eeb <cmp_lfn+0x8c>
c0002eaf:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002eb5:	77 c2                	ja     c0002e79 <cmp_lfn+0x1a>
c0002eb7:	83 ec 0c             	sub    esp,0xc
c0002eba:	0f b7 c0             	movzx  eax,ax
c0002ebd:	50                   	push   eax
c0002ebe:	e8 59 30 00 00       	call   c0005f1c <ff_wtoupper>
c0002ec3:	89 c5                	mov    ebp,eax
c0002ec5:	8d 43 01             	lea    eax,[ebx+0x1]
c0002ec8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ecc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002ed0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002ed4:	89 04 24             	mov    DWORD PTR [esp],eax
c0002ed7:	e8 40 30 00 00       	call   c0005f1c <ff_wtoupper>
c0002edc:	83 c4 10             	add    esp,0x10
c0002edf:	39 c5                	cmp    ebp,eax
c0002ee1:	75 96                	jne    c0002e79 <cmp_lfn+0x1a>
c0002ee3:	89 f5                	mov    ebp,esi
c0002ee5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002ee9:	eb 0b                	jmp    c0002ef6 <cmp_lfn+0x97>
c0002eeb:	0f b7 c8             	movzx  ecx,ax
c0002eee:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002ef4:	75 83                	jne    c0002e79 <cmp_lfn+0x1a>
c0002ef6:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002efa:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002eff:	75 95                	jne    c0002e96 <cmp_lfn+0x37>
c0002f01:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f04:	74 16                	je     c0002f1c <cmp_lfn+0xbd>
c0002f06:	66 85 ed             	test   bp,bp
c0002f09:	74 11                	je     c0002f1c <cmp_lfn+0xbd>
c0002f0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002f0f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f14:	0f 94 c0             	sete   al
c0002f17:	0f b6 c0             	movzx  eax,al
c0002f1a:	eb 05                	jmp    c0002f21 <cmp_lfn+0xc2>
c0002f1c:	b8 01 00 00 00       	mov    eax,0x1
c0002f21:	83 c4 1c             	add    esp,0x1c
c0002f24:	5b                   	pop    ebx
c0002f25:	5e                   	pop    esi
c0002f26:	5f                   	pop    edi
c0002f27:	5d                   	pop    ebp
c0002f28:	c3                   	ret    

c0002f29 <sync_fs>:
c0002f29:	56                   	push   esi
c0002f2a:	53                   	push   ebx
c0002f2b:	53                   	push   ebx
c0002f2c:	89 c3                	mov    ebx,eax
c0002f2e:	e8 5c f5 ff ff       	call   c000248f <sync_window>
c0002f33:	85 c0                	test   eax,eax
c0002f35:	0f 85 9a 00 00 00    	jne    c0002fd5 <sync_fs+0xac>
c0002f3b:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f3e:	75 7b                	jne    c0002fbb <sync_fs+0x92>
c0002f40:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002f44:	75 75                	jne    c0002fbb <sync_fs+0x92>
c0002f46:	b9 00 02 00 00       	mov    ecx,0x200
c0002f4b:	8d 73 34             	lea    esi,[ebx+0x34]
c0002f4e:	31 d2                	xor    edx,edx
c0002f50:	89 f0                	mov    eax,esi
c0002f52:	e8 75 f0 ff ff       	call   c0001fcc <mem_set>
c0002f57:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002f5d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002f62:	e8 49 f0 ff ff       	call   c0001fb0 <st_word>
c0002f67:	ba 52 52 61 41       	mov    edx,0x41615252
c0002f6c:	89 f0                	mov    eax,esi
c0002f6e:	e8 41 f0 ff ff       	call   c0001fb4 <st_dword>
c0002f73:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002f79:	ba 72 72 41 61       	mov    edx,0x61417272
c0002f7e:	e8 31 f0 ff ff       	call   c0001fb4 <st_dword>
c0002f83:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002f86:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002f8c:	e8 23 f0 ff ff       	call   c0001fb4 <st_dword>
c0002f91:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002f94:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002f9a:	e8 15 f0 ff ff       	call   c0001fb4 <st_dword>
c0002f9f:	6a 01                	push   0x1
c0002fa1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002fa4:	40                   	inc    eax
c0002fa5:	50                   	push   eax
c0002fa6:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fa9:	56                   	push   esi
c0002faa:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002fae:	50                   	push   eax
c0002faf:	e8 a2 ef ff ff       	call   c0001f56 <disk_write>
c0002fb4:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002fb8:	83 c4 10             	add    esp,0x10
c0002fbb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002fbf:	51                   	push   ecx
c0002fc0:	6a 00                	push   0x0
c0002fc2:	6a 00                	push   0x0
c0002fc4:	50                   	push   eax
c0002fc5:	e8 a2 ef ff ff       	call   c0001f6c <disk_ioctl>
c0002fca:	83 c4 10             	add    esp,0x10
c0002fcd:	85 c0                	test   eax,eax
c0002fcf:	0f 95 c0             	setne  al
c0002fd2:	0f b6 c0             	movzx  eax,al
c0002fd5:	5a                   	pop    edx
c0002fd6:	5b                   	pop    ebx
c0002fd7:	5e                   	pop    esi
c0002fd8:	c3                   	ret    

c0002fd9 <create_partition>:
c0002fd9:	55                   	push   ebp
c0002fda:	0f b6 c0             	movzx  eax,al
c0002fdd:	57                   	push   edi
c0002fde:	56                   	push   esi
c0002fdf:	53                   	push   ebx
c0002fe0:	83 ec 40             	sub    esp,0x40
c0002fe3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002fe7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002feb:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002fef:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002ff3:	50                   	push   eax
c0002ff4:	6a 01                	push   0x1
c0002ff6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002ffa:	e8 6d ef ff ff       	call   c0001f6c <disk_ioctl>
c0002fff:	83 c4 10             	add    esp,0x10
c0003002:	85 c0                	test   eax,eax
c0003004:	0f 85 6a 01 00 00    	jne    c0003174 <create_partition+0x19b>
c000300a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000300e:	b9 05 00 00 00       	mov    ecx,0x5
c0003013:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003017:	be 08 00 00 00       	mov    esi,0x8
c000301c:	89 f0                	mov    eax,esi
c000301e:	31 d2                	xor    edx,edx
c0003020:	0f b6 d8             	movzx  ebx,al
c0003023:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003027:	f7 f3                	div    ebx
c0003029:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c000302e:	76 0a                	jbe    c000303a <create_partition+0x61>
c0003030:	d1 e6                	shl    esi,1
c0003032:	49                   	dec    ecx
c0003033:	75 e7                	jne    c000301c <create_partition+0x43>
c0003035:	be ff ff ff ff       	mov    esi,0xffffffff
c000303a:	b9 00 02 00 00       	mov    ecx,0x200
c000303f:	31 d2                	xor    edx,edx
c0003041:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003045:	e8 82 ef ff ff       	call   c0001fcc <mem_set>
c000304a:	b9 64 00 00 00       	mov    ecx,0x64
c000304f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003053:	31 d2                	xor    edx,edx
c0003055:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000305d:	f7 f1                	div    ecx
c000305f:	b9 3f 00 00 00       	mov    ecx,0x3f
c0003064:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003068:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000306c:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0003072:	89 f0                	mov    eax,esi
c0003074:	0f b6 c0             	movzx  eax,al
c0003077:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000307b:	85 c9                	test   ecx,ecx
c000307d:	75 34                	jne    c00030b3 <create_partition+0xda>
c000307f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003083:	ba 55 aa 00 00       	mov    edx,0xaa55
c0003088:	05 fe 01 00 00       	add    eax,0x1fe
c000308d:	e8 1e ef ff ff       	call   c0001fb0 <st_word>
c0003092:	6a 01                	push   0x1
c0003094:	6a 00                	push   0x0
c0003096:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000309a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000309e:	e8 b3 ee ff ff       	call   c0001f56 <disk_write>
c00030a3:	83 c4 10             	add    esp,0x10
c00030a6:	85 c0                	test   eax,eax
c00030a8:	0f 95 c0             	setne  al
c00030ab:	0f b6 c0             	movzx  eax,al
c00030ae:	e9 c6 00 00 00       	jmp    c0003179 <create_partition+0x1a0>
c00030b3:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00030b7:	76 c6                	jbe    c000307f <create_partition+0xa6>
c00030b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030c1:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030c4:	83 fe 64             	cmp    esi,0x64
c00030c7:	77 0d                	ja     c00030d6 <create_partition+0xfd>
c00030c9:	74 07                	je     c00030d2 <create_partition+0xf9>
c00030cb:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c00030d0:	eb 04                	jmp    c00030d6 <create_partition+0xfd>
c00030d2:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00030d6:	31 c0                	xor    eax,eax
c00030d8:	89 f2                	mov    edx,esi
c00030da:	01 ca                	add    edx,ecx
c00030dc:	0f 92 c0             	setb   al
c00030df:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c00030e3:	77 04                	ja     c00030e9 <create_partition+0x110>
c00030e5:	85 c0                	test   eax,eax
c00030e7:	74 08                	je     c00030f1 <create_partition+0x118>
c00030e9:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00030ed:	29 ce                	sub    esi,ecx
c00030ef:	eb 04                	jmp    c00030f5 <create_partition+0x11c>
c00030f1:	85 f6                	test   esi,esi
c00030f3:	74 8a                	je     c000307f <create_partition+0xa6>
c00030f5:	89 ca                	mov    edx,ecx
c00030f7:	89 d8                	mov    eax,ebx
c00030f9:	bf 3f 00 00 00       	mov    edi,0x3f
c00030fe:	e8 b1 ee ff ff       	call   c0001fb4 <st_dword>
c0003103:	8d 43 04             	lea    eax,[ebx+0x4]
c0003106:	89 f2                	mov    edx,esi
c0003108:	83 c3 10             	add    ebx,0x10
c000310b:	e8 a4 ee ff ff       	call   c0001fb4 <st_dword>
c0003110:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003114:	31 d2                	xor    edx,edx
c0003116:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0003119:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000311d:	89 c8                	mov    eax,ecx
c000311f:	01 f1                	add    ecx,esi
c0003121:	f7 f7                	div    edi
c0003123:	89 d5                	mov    ebp,edx
c0003125:	31 d2                	xor    edx,edx
c0003127:	45                   	inc    ebp
c0003128:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000312c:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c000312f:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003132:	89 c2                	mov    edx,eax
c0003134:	8d 41 ff             	lea    eax,[ecx-0x1]
c0003137:	c1 ea 02             	shr    edx,0x2
c000313a:	83 e2 c0             	and    edx,0xffffffc0
c000313d:	09 ea                	or     edx,ebp
c000313f:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0003142:	31 d2                	xor    edx,edx
c0003144:	f7 f7                	div    edi
c0003146:	89 d6                	mov    esi,edx
c0003148:	31 d2                	xor    edx,edx
c000314a:	46                   	inc    esi
c000314b:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000314f:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0003152:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0003155:	89 c7                	mov    edi,eax
c0003157:	c1 ef 02             	shr    edi,0x2
c000315a:	83 e7 c0             	and    edi,0xffffffc0
c000315d:	09 fe                	or     esi,edi
c000315f:	89 f2                	mov    edx,esi
c0003161:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003164:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0003169:	0f 85 0c ff ff ff    	jne    c000307b <create_partition+0xa2>
c000316f:	e9 0b ff ff ff       	jmp    c000307f <create_partition+0xa6>
c0003174:	b8 01 00 00 00       	mov    eax,0x1
c0003179:	83 c4 3c             	add    esp,0x3c
c000317c:	5b                   	pop    ebx
c000317d:	5e                   	pop    esi
c000317e:	5f                   	pop    edi
c000317f:	5d                   	pop    ebp
c0003180:	c3                   	ret    

c0003181 <get_fileinfo>:
c0003181:	55                   	push   ebp
c0003182:	57                   	push   edi
c0003183:	56                   	push   esi
c0003184:	53                   	push   ebx
c0003185:	83 ec 1c             	sub    esp,0x1c
c0003188:	8b 30                	mov    esi,DWORD PTR [eax]
c000318a:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000318e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003192:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003196:	0f 84 d3 01 00 00    	je     c000336f <get_fileinfo+0x1ee>
c000319c:	89 d3                	mov    ebx,edx
c000319e:	89 c6                	mov    esi,eax
c00031a0:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031a4:	74 72                	je     c0003218 <get_fileinfo+0x97>
c00031a6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00031ae:	31 ed                	xor    ebp,ebp
c00031b0:	31 ff                	xor    edi,edi
c00031b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00031b6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00031ba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00031bd:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00031c1:	89 c2                	mov    edx,eax
c00031c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00031c7:	85 c0                	test   eax,eax
c00031c9:	74 41                	je     c000320c <get_fileinfo+0x8b>
c00031cb:	0f b7 c5             	movzx  eax,bp
c00031ce:	85 c0                	test   eax,eax
c00031d0:	75 0d                	jne    c00031df <get_fileinfo+0x5e>
c00031d2:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c00031d8:	66 81 f9 ff 07       	cmp    cx,0x7ff
c00031dd:	76 22                	jbe    c0003201 <get_fileinfo+0x80>
c00031df:	c1 e0 10             	shl    eax,0x10
c00031e2:	b9 ff 00 00 00       	mov    ecx,0xff
c00031e7:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00031eb:	29 f9                	sub    ecx,edi
c00031ed:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c00031f1:	e8 f3 ee ff ff       	call   c00020e9 <put_utf>
c00031f6:	0f b6 c0             	movzx  eax,al
c00031f9:	85 c0                	test   eax,eax
c00031fb:	74 0d                	je     c000320a <get_fileinfo+0x89>
c00031fd:	01 c7                	add    edi,eax
c00031ff:	31 d2                	xor    edx,edx
c0003201:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003206:	89 d5                	mov    ebp,edx
c0003208:	eb a8                	jmp    c00031b2 <get_fileinfo+0x31>
c000320a:	31 ff                	xor    edi,edi
c000320c:	66 85 ed             	test   bp,bp
c000320f:	74 02                	je     c0003213 <get_fileinfo+0x92>
c0003211:	31 ff                	xor    edi,edi
c0003213:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003218:	31 ff                	xor    edi,edi
c000321a:	31 c9                	xor    ecx,ecx
c000321c:	83 f9 0a             	cmp    ecx,0xa
c000321f:	0f 87 ac 00 00 00    	ja     c00032d1 <get_fileinfo+0x150>
c0003225:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003228:	8d 69 01             	lea    ebp,[ecx+0x1]
c000322b:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000322f:	89 c2                	mov    edx,eax
c0003231:	83 f8 20             	cmp    eax,0x20
c0003234:	0f 84 90 00 00 00    	je     c00032ca <get_fileinfo+0x149>
c000323a:	83 f8 05             	cmp    eax,0x5
c000323d:	75 05                	jne    c0003244 <get_fileinfo+0xc3>
c000323f:	ba e5 00 00 00       	mov    edx,0xe5
c0003244:	83 ff 0b             	cmp    edi,0xb
c0003247:	77 0b                	ja     c0003254 <get_fileinfo+0xd3>
c0003249:	83 fd 09             	cmp    ebp,0x9
c000324c:	75 06                	jne    c0003254 <get_fileinfo+0xd3>
c000324e:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003253:	47                   	inc    edi
c0003254:	0f b7 c2             	movzx  eax,dx
c0003257:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000325b:	e8 ab ed ff ff       	call   c000200b <dbc_1st>
c0003260:	85 c0                	test   eax,eax
c0003262:	74 2f                	je     c0003293 <get_fileinfo+0x112>
c0003264:	83 fd 08             	cmp    ebp,0x8
c0003267:	74 2a                	je     c0003293 <get_fileinfo+0x112>
c0003269:	83 fd 0b             	cmp    ebp,0xb
c000326c:	74 25                	je     c0003293 <get_fileinfo+0x112>
c000326e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003271:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0003275:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003279:	e8 90 ed ff ff       	call   c000200e <dbc_2nd>
c000327e:	85 c0                	test   eax,eax
c0003280:	74 11                	je     c0003293 <get_fileinfo+0x112>
c0003282:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003286:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000328b:	c1 e0 08             	shl    eax,0x8
c000328e:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003291:	09 c2                	or     edx,eax
c0003293:	0f b7 d2             	movzx  edx,dx
c0003296:	50                   	push   eax
c0003297:	50                   	push   eax
c0003298:	68 b5 01 00 00       	push   0x1b5
c000329d:	52                   	push   edx
c000329e:	e8 01 2c 00 00       	call   c0005ea4 <ff_oem2uni>
c00032a3:	83 c4 10             	add    esp,0x10
c00032a6:	0f b7 c0             	movzx  eax,ax
c00032a9:	85 c0                	test   eax,eax
c00032ab:	75 04                	jne    c00032b1 <get_fileinfo+0x130>
c00032ad:	31 ff                	xor    edi,edi
c00032af:	eb 20                	jmp    c00032d1 <get_fileinfo+0x150>
c00032b1:	b9 0c 00 00 00       	mov    ecx,0xc
c00032b6:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00032ba:	29 f9                	sub    ecx,edi
c00032bc:	e8 28 ee ff ff       	call   c00020e9 <put_utf>
c00032c1:	0f b6 c0             	movzx  eax,al
c00032c4:	85 c0                	test   eax,eax
c00032c6:	74 e5                	je     c00032ad <get_fileinfo+0x12c>
c00032c8:	01 c7                	add    edi,eax
c00032ca:	89 e9                	mov    ecx,ebp
c00032cc:	e9 4b ff ff ff       	jmp    c000321c <get_fileinfo+0x9b>
c00032d1:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c00032d6:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c00032da:	75 5f                	jne    c000333b <get_fileinfo+0x1ba>
c00032dc:	85 ff                	test   edi,edi
c00032de:	75 0b                	jne    c00032eb <get_fileinfo+0x16a>
c00032e0:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c00032e4:	ba 01 00 00 00       	mov    edx,0x1
c00032e9:	eb 3e                	jmp    c0003329 <get_fileinfo+0x1a8>
c00032eb:	bf 08 00 00 00       	mov    edi,0x8
c00032f0:	31 d2                	xor    edx,edx
c00032f2:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c00032f8:	84 c0                	test   al,al
c00032fa:	74 2d                	je     c0003329 <get_fileinfo+0x1a8>
c00032fc:	66 83 f8 2e          	cmp    ax,0x2e
c0003300:	74 1b                	je     c000331d <get_fileinfo+0x19c>
c0003302:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003305:	66 83 f9 19          	cmp    cx,0x19
c0003309:	77 17                	ja     c0003322 <get_fileinfo+0x1a1>
c000330b:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000330e:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003311:	21 f9                	and    ecx,edi
c0003313:	80 e1 18             	and    cl,0x18
c0003316:	74 0a                	je     c0003322 <get_fileinfo+0x1a1>
c0003318:	83 c0 20             	add    eax,0x20
c000331b:	eb 05                	jmp    c0003322 <get_fileinfo+0x1a1>
c000331d:	bf 10 00 00 00       	mov    edi,0x10
c0003322:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003326:	42                   	inc    edx
c0003327:	eb c9                	jmp    c00032f2 <get_fileinfo+0x171>
c0003329:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000332e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003331:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003335:	75 04                	jne    c000333b <get_fileinfo+0x1ba>
c0003337:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c000333b:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000333e:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0003341:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003344:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003347:	83 c0 1c             	add    eax,0x1c
c000334a:	e8 49 ec ff ff       	call   c0001f98 <ld_dword>
c000334f:	89 03                	mov    DWORD PTR [ebx],eax
c0003351:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003354:	83 c0 16             	add    eax,0x16
c0003357:	e8 2f ec ff ff       	call   c0001f8b <ld_word>
c000335c:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0003360:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003363:	83 c0 18             	add    eax,0x18
c0003366:	e8 20 ec ff ff       	call   c0001f8b <ld_word>
c000336b:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000336f:	83 c4 1c             	add    esp,0x1c
c0003372:	5b                   	pop    ebx
c0003373:	5e                   	pop    esi
c0003374:	5f                   	pop    edi
c0003375:	5d                   	pop    ebp
c0003376:	c3                   	ret    

c0003377 <ld_clust.isra.0>:
c0003377:	56                   	push   esi
c0003378:	89 c6                	mov    esi,eax
c000337a:	53                   	push   ebx
c000337b:	8d 42 1a             	lea    eax,[edx+0x1a]
c000337e:	89 d3                	mov    ebx,edx
c0003380:	e8 06 ec ff ff       	call   c0001f8b <ld_word>
c0003385:	0f b7 c8             	movzx  ecx,ax
c0003388:	89 f0                	mov    eax,esi
c000338a:	3c 03                	cmp    al,0x3
c000338c:	75 0d                	jne    c000339b <ld_clust.isra.0+0x24>
c000338e:	8d 43 14             	lea    eax,[ebx+0x14]
c0003391:	e8 f5 eb ff ff       	call   c0001f8b <ld_word>
c0003396:	c1 e0 10             	shl    eax,0x10
c0003399:	09 c1                	or     ecx,eax
c000339b:	89 c8                	mov    eax,ecx
c000339d:	5b                   	pop    ebx
c000339e:	5e                   	pop    esi
c000339f:	c3                   	ret    

c00033a0 <st_clust.isra.1>:
c00033a0:	56                   	push   esi
c00033a1:	89 c6                	mov    esi,eax
c00033a3:	53                   	push   ebx
c00033a4:	89 d3                	mov    ebx,edx
c00033a6:	0f b7 d1             	movzx  edx,cx
c00033a9:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00033ac:	e8 ff eb ff ff       	call   c0001fb0 <st_word>
c00033b1:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00033b4:	75 0f                	jne    c00033c5 <st_clust.isra.1+0x25>
c00033b6:	c1 e9 10             	shr    ecx,0x10
c00033b9:	8d 43 14             	lea    eax,[ebx+0x14]
c00033bc:	89 ca                	mov    edx,ecx
c00033be:	5b                   	pop    ebx
c00033bf:	5e                   	pop    esi
c00033c0:	e9 eb eb ff ff       	jmp    c0001fb0 <st_word>
c00033c5:	5b                   	pop    ebx
c00033c6:	5e                   	pop    esi
c00033c7:	c3                   	ret    

c00033c8 <get_fat.isra.2>:
c00033c8:	b9 01 00 00 00       	mov    ecx,0x1
c00033cd:	83 fa 01             	cmp    edx,0x1
c00033d0:	0f 86 f3 00 00 00    	jbe    c00034c9 <get_fat.isra.2+0x101>
c00033d6:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c00033d9:	0f 83 ea 00 00 00    	jae    c00034c9 <get_fat.isra.2+0x101>
c00033df:	55                   	push   ebp
c00033e0:	57                   	push   edi
c00033e1:	89 c7                	mov    edi,eax
c00033e3:	56                   	push   esi
c00033e4:	89 d6                	mov    esi,edx
c00033e6:	53                   	push   ebx
c00033e7:	83 ec 0c             	sub    esp,0xc
c00033ea:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00033ed:	83 f8 02             	cmp    eax,0x2
c00033f0:	74 78                	je     c000346a <get_fat.isra.2+0xa2>
c00033f2:	83 f8 03             	cmp    eax,0x3
c00033f5:	0f 84 96 00 00 00    	je     c0003491 <get_fat.isra.2+0xc9>
c00033fb:	48                   	dec    eax
c00033fc:	0f 85 bd 00 00 00    	jne    c00034bf <get_fat.isra.2+0xf7>
c0003402:	89 d3                	mov    ebx,edx
c0003404:	89 f8                	mov    eax,edi
c0003406:	d1 eb                	shr    ebx,1
c0003408:	01 d3                	add    ebx,edx
c000340a:	89 da                	mov    edx,ebx
c000340c:	c1 ea 09             	shr    edx,0x9
c000340f:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003412:	e8 db f0 ff ff       	call   c00024f2 <move_window>
c0003417:	85 c0                	test   eax,eax
c0003419:	74 08                	je     c0003423 <get_fat.isra.2+0x5b>
c000341b:	83 c9 ff             	or     ecx,0xffffffff
c000341e:	e9 9c 00 00 00       	jmp    c00034bf <get_fat.isra.2+0xf7>
c0003423:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003426:	89 f8                	mov    eax,edi
c0003428:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000342e:	89 ea                	mov    edx,ebp
c0003430:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003434:	c1 ea 09             	shr    edx,0x9
c0003437:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000343a:	e8 b3 f0 ff ff       	call   c00024f2 <move_window>
c000343f:	85 c0                	test   eax,eax
c0003441:	75 d8                	jne    c000341b <get_fat.isra.2+0x53>
c0003443:	0f b6 c3             	movzx  eax,bl
c0003446:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000344c:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003451:	c1 e3 08             	shl    ebx,0x8
c0003454:	09 c3                	or     ebx,eax
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000345e:	83 e6 01             	and    esi,0x1
c0003461:	74 5c                	je     c00034bf <get_fat.isra.2+0xf7>
c0003463:	89 d9                	mov    ecx,ebx
c0003465:	c1 e9 04             	shr    ecx,0x4
c0003468:	eb 55                	jmp    c00034bf <get_fat.isra.2+0xf7>
c000346a:	c1 ea 08             	shr    edx,0x8
c000346d:	89 f8                	mov    eax,edi
c000346f:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003472:	e8 7b f0 ff ff       	call   c00024f2 <move_window>
c0003477:	85 c0                	test   eax,eax
c0003479:	75 a0                	jne    c000341b <get_fat.isra.2+0x53>
c000347b:	01 f6                	add    esi,esi
c000347d:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003483:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c0003487:	e8 ff ea ff ff       	call   c0001f8b <ld_word>
c000348c:	0f b7 c8             	movzx  ecx,ax
c000348f:	eb 2e                	jmp    c00034bf <get_fat.isra.2+0xf7>
c0003491:	c1 ea 07             	shr    edx,0x7
c0003494:	89 f8                	mov    eax,edi
c0003496:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003499:	e8 54 f0 ff ff       	call   c00024f2 <move_window>
c000349e:	85 c0                	test   eax,eax
c00034a0:	0f 85 75 ff ff ff    	jne    c000341b <get_fat.isra.2+0x53>
c00034a6:	c1 e6 02             	shl    esi,0x2
c00034a9:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00034af:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034b3:	e8 e0 ea ff ff       	call   c0001f98 <ld_dword>
c00034b8:	25 ff ff ff 0f       	and    eax,0xfffffff
c00034bd:	89 c1                	mov    ecx,eax
c00034bf:	83 c4 0c             	add    esp,0xc
c00034c2:	89 c8                	mov    eax,ecx
c00034c4:	5b                   	pop    ebx
c00034c5:	5e                   	pop    esi
c00034c6:	5f                   	pop    edi
c00034c7:	5d                   	pop    ebp
c00034c8:	c3                   	ret    
c00034c9:	89 c8                	mov    eax,ecx
c00034cb:	c3                   	ret    

c00034cc <dir_sdi>:
c00034cc:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c00034d2:	0f 87 b6 00 00 00    	ja     c000358e <dir_sdi+0xc2>
c00034d8:	55                   	push   ebp
c00034d9:	57                   	push   edi
c00034da:	56                   	push   esi
c00034db:	53                   	push   ebx
c00034dc:	89 d3                	mov    ebx,edx
c00034de:	83 ec 1c             	sub    esp,0x1c
c00034e1:	f6 c2 1f             	test   dl,0x1f
c00034e4:	74 0a                	je     c00034f0 <dir_sdi+0x24>
c00034e6:	b8 02 00 00 00       	mov    eax,0x2
c00034eb:	e9 96 00 00 00       	jmp    c0003586 <dir_sdi+0xba>
c00034f0:	89 c6                	mov    esi,eax
c00034f2:	8b 38                	mov    edi,DWORD PTR [eax]
c00034f4:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c00034f7:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00034fa:	85 c9                	test   ecx,ecx
c00034fc:	75 23                	jne    c0003521 <dir_sdi+0x55>
c00034fe:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003501:	76 07                	jbe    c000350a <dir_sdi+0x3e>
c0003503:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003506:	85 c0                	test   eax,eax
c0003508:	75 15                	jne    c000351f <dir_sdi+0x53>
c000350a:	89 da                	mov    edx,ebx
c000350c:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003510:	c1 ea 05             	shr    edx,0x5
c0003513:	39 c2                	cmp    edx,eax
c0003515:	73 cf                	jae    c00034e6 <dir_sdi+0x1a>
c0003517:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000351a:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000351d:	eb 3d                	jmp    c000355c <dir_sdi+0x90>
c000351f:	89 c1                	mov    ecx,eax
c0003521:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003525:	c1 e5 09             	shl    ebp,0x9
c0003528:	89 ca                	mov    edx,ecx
c000352a:	39 eb                	cmp    ebx,ebp
c000352c:	72 1c                	jb     c000354a <dir_sdi+0x7e>
c000352e:	8b 06                	mov    eax,DWORD PTR [esi]
c0003530:	e8 93 fe ff ff       	call   c00033c8 <get_fat.isra.2>
c0003535:	89 c1                	mov    ecx,eax
c0003537:	83 f8 ff             	cmp    eax,0xffffffff
c000353a:	74 45                	je     c0003581 <dir_sdi+0xb5>
c000353c:	83 f8 01             	cmp    eax,0x1
c000353f:	76 a5                	jbe    c00034e6 <dir_sdi+0x1a>
c0003541:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003544:	76 a0                	jbe    c00034e6 <dir_sdi+0x1a>
c0003546:	29 eb                	sub    ebx,ebp
c0003548:	eb de                	jmp    c0003528 <dir_sdi+0x5c>
c000354a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000354e:	89 f8                	mov    eax,edi
c0003550:	e8 8d ec ff ff       	call   c00021e2 <clst2sect>
c0003555:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003559:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000355c:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c000355f:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0003562:	85 d2                	test   edx,edx
c0003564:	74 80                	je     c00034e6 <dir_sdi+0x1a>
c0003566:	89 d8                	mov    eax,ebx
c0003568:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000356e:	c1 e8 09             	shr    eax,0x9
c0003571:	01 d0                	add    eax,edx
c0003573:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003576:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c000357a:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000357d:	31 c0                	xor    eax,eax
c000357f:	eb 05                	jmp    c0003586 <dir_sdi+0xba>
c0003581:	b8 01 00 00 00       	mov    eax,0x1
c0003586:	83 c4 1c             	add    esp,0x1c
c0003589:	5b                   	pop    ebx
c000358a:	5e                   	pop    esi
c000358b:	5f                   	pop    edi
c000358c:	5d                   	pop    ebp
c000358d:	c3                   	ret    
c000358e:	b8 02 00 00 00       	mov    eax,0x2
c0003593:	c3                   	ret    

c0003594 <create_chain>:
c0003594:	55                   	push   ebp
c0003595:	89 c5                	mov    ebp,eax
c0003597:	57                   	push   edi
c0003598:	89 d7                	mov    edi,edx
c000359a:	56                   	push   esi
c000359b:	53                   	push   ebx
c000359c:	83 ec 1c             	sub    esp,0x1c
c000359f:	85 d2                	test   edx,edx
c00035a1:	8b 30                	mov    esi,DWORD PTR [eax]
c00035a3:	75 0e                	jne    c00035b3 <create_chain+0x1f>
c00035a5:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00035a8:	85 c9                	test   ecx,ecx
c00035aa:	74 34                	je     c00035e0 <create_chain+0x4c>
c00035ac:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00035af:	77 34                	ja     c00035e5 <create_chain+0x51>
c00035b1:	eb 2d                	jmp    c00035e0 <create_chain+0x4c>
c00035b3:	89 f0                	mov    eax,esi
c00035b5:	e8 0e fe ff ff       	call   c00033c8 <get_fat.isra.2>
c00035ba:	89 c3                	mov    ebx,eax
c00035bc:	83 f8 01             	cmp    eax,0x1
c00035bf:	77 0a                	ja     c00035cb <create_chain+0x37>
c00035c1:	bb 01 00 00 00       	mov    ebx,0x1
c00035c6:	e9 fe 00 00 00       	jmp    c00036c9 <create_chain+0x135>
c00035cb:	83 f8 ff             	cmp    eax,0xffffffff
c00035ce:	0f 84 f2 00 00 00    	je     c00036c6 <create_chain+0x132>
c00035d4:	89 f9                	mov    ecx,edi
c00035d6:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c00035d9:	76 0a                	jbe    c00035e5 <create_chain+0x51>
c00035db:	e9 e9 00 00 00       	jmp    c00036c9 <create_chain+0x135>
c00035e0:	b9 01 00 00 00       	mov    ecx,0x1
c00035e5:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c00035e9:	75 07                	jne    c00035f2 <create_chain+0x5e>
c00035eb:	31 db                	xor    ebx,ebx
c00035ed:	e9 d7 00 00 00       	jmp    c00036c9 <create_chain+0x135>
c00035f2:	39 f9                	cmp    ecx,edi
c00035f4:	75 46                	jne    c000363c <create_chain+0xa8>
c00035f6:	8d 59 01             	lea    ebx,[ecx+0x1]
c00035f9:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c00035fc:	77 05                	ja     c0003603 <create_chain+0x6f>
c00035fe:	bb 02 00 00 00       	mov    ebx,0x2
c0003603:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003607:	89 da                	mov    edx,ebx
c0003609:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000360c:	e8 b7 fd ff ff       	call   c00033c8 <get_fat.isra.2>
c0003611:	83 f8 01             	cmp    eax,0x1
c0003614:	74 ab                	je     c00035c1 <create_chain+0x2d>
c0003616:	83 f8 ff             	cmp    eax,0xffffffff
c0003619:	0f 84 a7 00 00 00    	je     c00036c6 <create_chain+0x132>
c000361f:	85 c0                	test   eax,eax
c0003621:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003625:	74 11                	je     c0003638 <create_chain+0xa4>
c0003627:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000362a:	83 f8 01             	cmp    eax,0x1
c000362d:	76 0d                	jbe    c000363c <create_chain+0xa8>
c000362f:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003632:	73 08                	jae    c000363c <create_chain+0xa8>
c0003634:	89 c1                	mov    ecx,eax
c0003636:	eb 04                	jmp    c000363c <create_chain+0xa8>
c0003638:	85 db                	test   ebx,ebx
c000363a:	75 3d                	jne    c0003679 <create_chain+0xe5>
c000363c:	89 cb                	mov    ebx,ecx
c000363e:	43                   	inc    ebx
c000363f:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003642:	77 0a                	ja     c000364e <create_chain+0xba>
c0003644:	83 f9 01             	cmp    ecx,0x1
c0003647:	76 a2                	jbe    c00035eb <create_chain+0x57>
c0003649:	bb 02 00 00 00       	mov    ebx,0x2
c000364e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003652:	89 da                	mov    edx,ebx
c0003654:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003657:	e8 6c fd ff ff       	call   c00033c8 <get_fat.isra.2>
c000365c:	85 c0                	test   eax,eax
c000365e:	74 19                	je     c0003679 <create_chain+0xe5>
c0003660:	83 f8 01             	cmp    eax,0x1
c0003663:	0f 84 58 ff ff ff    	je     c00035c1 <create_chain+0x2d>
c0003669:	40                   	inc    eax
c000366a:	74 5a                	je     c00036c6 <create_chain+0x132>
c000366c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003670:	39 cb                	cmp    ebx,ecx
c0003672:	75 ca                	jne    c000363e <create_chain+0xaa>
c0003674:	e9 72 ff ff ff       	jmp    c00035eb <create_chain+0x57>
c0003679:	83 c9 ff             	or     ecx,0xffffffff
c000367c:	89 da                	mov    edx,ebx
c000367e:	89 f0                	mov    eax,esi
c0003680:	e8 b1 f2 ff ff       	call   c0002936 <put_fat>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 36                	jne    c00036bf <create_chain+0x12b>
c0003689:	85 ff                	test   edi,edi
c000368b:	75 16                	jne    c00036a3 <create_chain+0x10f>
c000368d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003690:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0003693:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c0003696:	8d 57 fe             	lea    edx,[edi-0x2]
c0003699:	39 d0                	cmp    eax,edx
c000369b:	77 17                	ja     c00036b4 <create_chain+0x120>
c000369d:	48                   	dec    eax
c000369e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00036a1:	eb 11                	jmp    c00036b4 <create_chain+0x120>
c00036a3:	89 d9                	mov    ecx,ebx
c00036a5:	89 fa                	mov    edx,edi
c00036a7:	89 f0                	mov    eax,esi
c00036a9:	e8 88 f2 ff ff       	call   c0002936 <put_fat>
c00036ae:	85 c0                	test   eax,eax
c00036b0:	74 db                	je     c000368d <create_chain+0xf9>
c00036b2:	eb 0b                	jmp    c00036bf <create_chain+0x12b>
c00036b4:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c00036b7:	83 c8 01             	or     eax,0x1
c00036ba:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00036bd:	eb 0a                	jmp    c00036c9 <create_chain+0x135>
c00036bf:	48                   	dec    eax
c00036c0:	0f 85 fb fe ff ff    	jne    c00035c1 <create_chain+0x2d>
c00036c6:	83 cb ff             	or     ebx,0xffffffff
c00036c9:	83 c4 1c             	add    esp,0x1c
c00036cc:	89 d8                	mov    eax,ebx
c00036ce:	5b                   	pop    ebx
c00036cf:	5e                   	pop    esi
c00036d0:	5f                   	pop    edi
c00036d1:	5d                   	pop    ebp
c00036d2:	c3                   	ret    

c00036d3 <remove_chain>:
c00036d3:	55                   	push   ebp
c00036d4:	57                   	push   edi
c00036d5:	56                   	push   esi
c00036d6:	89 d6                	mov    esi,edx
c00036d8:	53                   	push   ebx
c00036d9:	83 ec 0c             	sub    esp,0xc
c00036dc:	83 fa 01             	cmp    edx,0x1
c00036df:	8b 18                	mov    ebx,DWORD PTR [eax]
c00036e1:	76 6a                	jbe    c000374d <remove_chain+0x7a>
c00036e3:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c00036e6:	76 65                	jbe    c000374d <remove_chain+0x7a>
c00036e8:	89 c5                	mov    ebp,eax
c00036ea:	89 ca                	mov    edx,ecx
c00036ec:	85 c9                	test   ecx,ecx
c00036ee:	74 0e                	je     c00036fe <remove_chain+0x2b>
c00036f0:	83 c9 ff             	or     ecx,0xffffffff
c00036f3:	89 d8                	mov    eax,ebx
c00036f5:	e8 3c f2 ff ff       	call   c0002936 <put_fat>
c00036fa:	85 c0                	test   eax,eax
c00036fc:	75 5b                	jne    c0003759 <remove_chain+0x86>
c00036fe:	89 f2                	mov    edx,esi
c0003700:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003703:	e8 c0 fc ff ff       	call   c00033c8 <get_fat.isra.2>
c0003708:	89 c7                	mov    edi,eax
c000370a:	85 c0                	test   eax,eax
c000370c:	75 04                	jne    c0003712 <remove_chain+0x3f>
c000370e:	31 c0                	xor    eax,eax
c0003710:	eb 47                	jmp    c0003759 <remove_chain+0x86>
c0003712:	83 f8 01             	cmp    eax,0x1
c0003715:	74 36                	je     c000374d <remove_chain+0x7a>
c0003717:	83 f8 ff             	cmp    eax,0xffffffff
c000371a:	74 38                	je     c0003754 <remove_chain+0x81>
c000371c:	31 c9                	xor    ecx,ecx
c000371e:	89 f2                	mov    edx,esi
c0003720:	89 d8                	mov    eax,ebx
c0003722:	e8 0f f2 ff ff       	call   c0002936 <put_fat>
c0003727:	85 c0                	test   eax,eax
c0003729:	75 2e                	jne    c0003759 <remove_chain+0x86>
c000372b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000372e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003731:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003734:	39 c8                	cmp    eax,ecx
c0003736:	73 0d                	jae    c0003745 <remove_chain+0x72>
c0003738:	40                   	inc    eax
c0003739:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000373c:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000373f:	83 c8 01             	or     eax,0x1
c0003742:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003745:	89 fe                	mov    esi,edi
c0003747:	39 fa                	cmp    edx,edi
c0003749:	77 b3                	ja     c00036fe <remove_chain+0x2b>
c000374b:	eb c1                	jmp    c000370e <remove_chain+0x3b>
c000374d:	b8 02 00 00 00       	mov    eax,0x2
c0003752:	eb 05                	jmp    c0003759 <remove_chain+0x86>
c0003754:	b8 01 00 00 00       	mov    eax,0x1
c0003759:	83 c4 0c             	add    esp,0xc
c000375c:	5b                   	pop    ebx
c000375d:	5e                   	pop    esi
c000375e:	5f                   	pop    edi
c000375f:	5d                   	pop    ebp
c0003760:	c3                   	ret    

c0003761 <dir_next>:
c0003761:	55                   	push   ebp
c0003762:	57                   	push   edi
c0003763:	56                   	push   esi
c0003764:	53                   	push   ebx
c0003765:	83 ec 1c             	sub    esp,0x1c
c0003768:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000376b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000376d:	83 c7 20             	add    edi,0x20
c0003770:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c0003776:	76 07                	jbe    c000377f <dir_next+0x1e>
c0003778:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000377f:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003782:	b9 04 00 00 00       	mov    ecx,0x4
c0003787:	85 f6                	test   esi,esi
c0003789:	0f 84 cd 00 00 00    	je     c000385c <dir_next+0xfb>
c000378f:	89 c3                	mov    ebx,eax
c0003791:	89 d1                	mov    ecx,edx
c0003793:	89 f8                	mov    eax,edi
c0003795:	25 ff 01 00 00       	and    eax,0x1ff
c000379a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000379e:	0f 85 a8 00 00 00    	jne    c000384c <dir_next+0xeb>
c00037a4:	46                   	inc    esi
c00037a5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00037a8:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00037ab:	85 d2                	test   edx,edx
c00037ad:	75 22                	jne    c00037d1 <dir_next+0x70>
c00037af:	89 fa                	mov    edx,edi
c00037b1:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037b5:	c1 ea 05             	shr    edx,0x5
c00037b8:	39 c2                	cmp    edx,eax
c00037ba:	0f 82 8c 00 00 00    	jb     c000384c <dir_next+0xeb>
c00037c0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037c7:	b9 04 00 00 00       	mov    ecx,0x4
c00037cc:	e9 8b 00 00 00       	jmp    c000385c <dir_next+0xfb>
c00037d1:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037d5:	89 fe                	mov    esi,edi
c00037d7:	48                   	dec    eax
c00037d8:	c1 ee 09             	shr    esi,0x9
c00037db:	85 f0                	test   eax,esi
c00037dd:	75 6d                	jne    c000384c <dir_next+0xeb>
c00037df:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00037e3:	89 e8                	mov    eax,ebp
c00037e5:	e8 de fb ff ff       	call   c00033c8 <get_fat.isra.2>
c00037ea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00037ee:	89 c6                	mov    esi,eax
c00037f0:	83 f8 01             	cmp    eax,0x1
c00037f3:	77 07                	ja     c00037fc <dir_next+0x9b>
c00037f5:	b9 02 00 00 00       	mov    ecx,0x2
c00037fa:	eb 60                	jmp    c000385c <dir_next+0xfb>
c00037fc:	83 f8 ff             	cmp    eax,0xffffffff
c00037ff:	75 07                	jne    c0003808 <dir_next+0xa7>
c0003801:	b9 01 00 00 00       	mov    ecx,0x1
c0003806:	eb 54                	jmp    c000385c <dir_next+0xfb>
c0003808:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c000380b:	77 30                	ja     c000383d <dir_next+0xdc>
c000380d:	85 c9                	test   ecx,ecx
c000380f:	74 af                	je     c00037c0 <dir_next+0x5f>
c0003811:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003814:	89 d8                	mov    eax,ebx
c0003816:	e8 79 fd ff ff       	call   c0003594 <create_chain>
c000381b:	b9 07 00 00 00       	mov    ecx,0x7
c0003820:	89 c6                	mov    esi,eax
c0003822:	85 c0                	test   eax,eax
c0003824:	74 36                	je     c000385c <dir_next+0xfb>
c0003826:	83 f8 01             	cmp    eax,0x1
c0003829:	74 ca                	je     c00037f5 <dir_next+0x94>
c000382b:	83 f8 ff             	cmp    eax,0xffffffff
c000382e:	74 d1                	je     c0003801 <dir_next+0xa0>
c0003830:	89 c2                	mov    edx,eax
c0003832:	89 e8                	mov    eax,ebp
c0003834:	e8 54 f2 ff ff       	call   c0002a8d <dir_clear>
c0003839:	85 c0                	test   eax,eax
c000383b:	75 c4                	jne    c0003801 <dir_next+0xa0>
c000383d:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003840:	89 f2                	mov    edx,esi
c0003842:	89 e8                	mov    eax,ebp
c0003844:	e8 99 e9 ff ff       	call   c00021e2 <clst2sect>
c0003849:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000384c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003850:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003853:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003857:	31 c9                	xor    ecx,ecx
c0003859:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000385c:	83 c4 1c             	add    esp,0x1c
c000385f:	89 c8                	mov    eax,ecx
c0003861:	5b                   	pop    ebx
c0003862:	5e                   	pop    esi
c0003863:	5f                   	pop    edi
c0003864:	5d                   	pop    ebp
c0003865:	c3                   	ret    

c0003866 <dir_alloc>:
c0003866:	55                   	push   ebp
c0003867:	89 c5                	mov    ebp,eax
c0003869:	57                   	push   edi
c000386a:	89 d7                	mov    edi,edx
c000386c:	56                   	push   esi
c000386d:	31 d2                	xor    edx,edx
c000386f:	53                   	push   ebx
c0003870:	83 ec 0c             	sub    esp,0xc
c0003873:	8b 30                	mov    esi,DWORD PTR [eax]
c0003875:	e8 52 fc ff ff       	call   c00034cc <dir_sdi>
c000387a:	85 c0                	test   eax,eax
c000387c:	75 3b                	jne    c00038b9 <dir_alloc+0x53>
c000387e:	31 db                	xor    ebx,ebx
c0003880:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003883:	89 f0                	mov    eax,esi
c0003885:	e8 68 ec ff ff       	call   c00024f2 <move_window>
c000388a:	85 c0                	test   eax,eax
c000388c:	75 2b                	jne    c00038b9 <dir_alloc+0x53>
c000388e:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003891:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003894:	85 d2                	test   edx,edx
c0003896:	74 08                	je     c00038a0 <dir_alloc+0x3a>
c0003898:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000389e:	75 07                	jne    c00038a7 <dir_alloc+0x41>
c00038a0:	43                   	inc    ebx
c00038a1:	39 fb                	cmp    ebx,edi
c00038a3:	75 04                	jne    c00038a9 <dir_alloc+0x43>
c00038a5:	eb 1c                	jmp    c00038c3 <dir_alloc+0x5d>
c00038a7:	31 db                	xor    ebx,ebx
c00038a9:	ba 01 00 00 00       	mov    edx,0x1
c00038ae:	89 e8                	mov    eax,ebp
c00038b0:	e8 ac fe ff ff       	call   c0003761 <dir_next>
c00038b5:	85 c0                	test   eax,eax
c00038b7:	74 c7                	je     c0003880 <dir_alloc+0x1a>
c00038b9:	83 f8 04             	cmp    eax,0x4
c00038bc:	75 05                	jne    c00038c3 <dir_alloc+0x5d>
c00038be:	b8 07 00 00 00       	mov    eax,0x7
c00038c3:	83 c4 0c             	add    esp,0xc
c00038c6:	5b                   	pop    ebx
c00038c7:	5e                   	pop    esi
c00038c8:	5f                   	pop    edi
c00038c9:	5d                   	pop    ebp
c00038ca:	c3                   	ret    

c00038cb <dir_read>:
c00038cb:	55                   	push   ebp
c00038cc:	57                   	push   edi
c00038cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038d2:	56                   	push   esi
c00038d3:	be 04 00 00 00       	mov    esi,0x4
c00038d8:	53                   	push   ebx
c00038d9:	89 c3                	mov    ebx,eax
c00038db:	83 ec 1c             	sub    esp,0x1c
c00038de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038e2:	8b 28                	mov    ebp,DWORD PTR [eax]
c00038e4:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038e9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038ec:	85 d2                	test   edx,edx
c00038ee:	0f 84 e3 00 00 00    	je     c00039d7 <dir_read+0x10c>
c00038f4:	89 e8                	mov    eax,ebp
c00038f6:	e8 f7 eb ff ff       	call   c00024f2 <move_window>
c00038fb:	89 c6                	mov    esi,eax
c00038fd:	85 c0                	test   eax,eax
c00038ff:	0f 85 dd 00 00 00    	jne    c00039e2 <dir_read+0x117>
c0003905:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003908:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c000390b:	88 04 24             	mov    BYTE PTR [esp],al
c000390e:	85 c0                	test   eax,eax
c0003910:	0f 84 c7 00 00 00    	je     c00039dd <dir_read+0x112>
c0003916:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003919:	83 e1 3f             	and    ecx,0x3f
c000391c:	83 f8 2e             	cmp    eax,0x2e
c000391f:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003922:	0f 84 95 00 00 00    	je     c00039bd <dir_read+0xf2>
c0003928:	3d e5 00 00 00       	cmp    eax,0xe5
c000392d:	0f 84 8a 00 00 00    	je     c00039bd <dir_read+0xf2>
c0003933:	0f b6 c9             	movzx  ecx,cl
c0003936:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000393a:	83 e1 df             	and    ecx,0xffffffdf
c000393d:	83 f9 08             	cmp    ecx,0x8
c0003940:	0f 94 c1             	sete   cl
c0003943:	0f b6 c9             	movzx  ecx,cl
c0003946:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000394a:	75 71                	jne    c00039bd <dir_read+0xf2>
c000394c:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003951:	75 4a                	jne    c000399d <dir_read+0xd2>
c0003953:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c0003957:	74 16                	je     c000396f <dir_read+0xa4>
c0003959:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000395c:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003963:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003967:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000396a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000396d:	eb 0e                	jmp    c000397d <dir_read+0xb2>
c000396f:	89 f9                	mov    ecx,edi
c0003971:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003976:	0f b6 c9             	movzx  ecx,cl
c0003979:	39 c1                	cmp    ecx,eax
c000397b:	75 45                	jne    c00039c2 <dir_read+0xf7>
c000397d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003981:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003986:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c0003989:	75 37                	jne    c00039c2 <dir_read+0xf7>
c000398b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000398e:	e8 6c e8 ff ff       	call   c00021ff <pick_lfn>
c0003993:	85 c0                	test   eax,eax
c0003995:	74 2b                	je     c00039c2 <dir_read+0xf7>
c0003997:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000399a:	4f                   	dec    edi
c000399b:	eb 25                	jmp    c00039c2 <dir_read+0xf7>
c000399d:	89 f8                	mov    eax,edi
c000399f:	84 c0                	test   al,al
c00039a1:	75 11                	jne    c00039b4 <dir_read+0xe9>
c00039a3:	89 d0                	mov    eax,edx
c00039a5:	e8 32 ea ff ff       	call   c00023dc <sum_sfn>
c00039aa:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ae:	75 04                	jne    c00039b4 <dir_read+0xe9>
c00039b0:	31 f6                	xor    esi,esi
c00039b2:	eb 35                	jmp    c00039e9 <dir_read+0x11e>
c00039b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039bb:	eb 2c                	jmp    c00039e9 <dir_read+0x11e>
c00039bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039c2:	31 d2                	xor    edx,edx
c00039c4:	89 d8                	mov    eax,ebx
c00039c6:	e8 96 fd ff ff       	call   c0003761 <dir_next>
c00039cb:	89 c6                	mov    esi,eax
c00039cd:	85 c0                	test   eax,eax
c00039cf:	0f 84 14 ff ff ff    	je     c00038e9 <dir_read+0x1e>
c00039d5:	eb 0b                	jmp    c00039e2 <dir_read+0x117>
c00039d7:	85 f6                	test   esi,esi
c00039d9:	74 d5                	je     c00039b0 <dir_read+0xe5>
c00039db:	eb 05                	jmp    c00039e2 <dir_read+0x117>
c00039dd:	be 04 00 00 00       	mov    esi,0x4
c00039e2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039e9:	83 c4 1c             	add    esp,0x1c
c00039ec:	89 f0                	mov    eax,esi
c00039ee:	5b                   	pop    ebx
c00039ef:	5e                   	pop    esi
c00039f0:	5f                   	pop    edi
c00039f1:	5d                   	pop    ebp
c00039f2:	c3                   	ret    

c00039f3 <dir_remove>:
c00039f3:	57                   	push   edi
c00039f4:	56                   	push   esi
c00039f5:	53                   	push   ebx
c00039f6:	89 c3                	mov    ebx,eax
c00039f8:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00039fb:	8b 30                	mov    esi,DWORD PTR [eax]
c00039fd:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a00:	83 fa ff             	cmp    edx,0xffffffff
c0003a03:	74 09                	je     c0003a0e <dir_remove+0x1b>
c0003a05:	e8 c2 fa ff ff       	call   c00034cc <dir_sdi>
c0003a0a:	85 c0                	test   eax,eax
c0003a0c:	75 34                	jne    c0003a42 <dir_remove+0x4f>
c0003a0e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a11:	89 f0                	mov    eax,esi
c0003a13:	e8 da ea ff ff       	call   c00024f2 <move_window>
c0003a18:	85 c0                	test   eax,eax
c0003a1a:	75 1c                	jne    c0003a38 <dir_remove+0x45>
c0003a1c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a1f:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a22:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a26:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a29:	73 17                	jae    c0003a42 <dir_remove+0x4f>
c0003a2b:	31 d2                	xor    edx,edx
c0003a2d:	89 d8                	mov    eax,ebx
c0003a2f:	e8 2d fd ff ff       	call   c0003761 <dir_next>
c0003a34:	85 c0                	test   eax,eax
c0003a36:	74 d6                	je     c0003a0e <dir_remove+0x1b>
c0003a38:	83 f8 04             	cmp    eax,0x4
c0003a3b:	75 05                	jne    c0003a42 <dir_remove+0x4f>
c0003a3d:	b8 02 00 00 00       	mov    eax,0x2
c0003a42:	5b                   	pop    ebx
c0003a43:	5e                   	pop    esi
c0003a44:	5f                   	pop    edi
c0003a45:	c3                   	ret    

c0003a46 <dir_find>:
c0003a46:	55                   	push   ebp
c0003a47:	31 d2                	xor    edx,edx
c0003a49:	57                   	push   edi
c0003a4a:	56                   	push   esi
c0003a4b:	53                   	push   ebx
c0003a4c:	89 c3                	mov    ebx,eax
c0003a4e:	83 ec 1c             	sub    esp,0x1c
c0003a51:	8b 00                	mov    eax,DWORD PTR [eax]
c0003a53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a57:	89 d8                	mov    eax,ebx
c0003a59:	e8 6e fa ff ff       	call   c00034cc <dir_sdi>
c0003a5e:	89 c6                	mov    esi,eax
c0003a60:	85 c0                	test   eax,eax
c0003a62:	0f 85 1d 01 00 00    	jne    c0003b85 <dir_find+0x13f>
c0003a68:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003a6f:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003a74:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a79:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a80:	e8 6d ea ff ff       	call   c00024f2 <move_window>
c0003a85:	89 c6                	mov    esi,eax
c0003a87:	85 c0                	test   eax,eax
c0003a89:	0f 85 f6 00 00 00    	jne    c0003b85 <dir_find+0x13f>
c0003a8f:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003a92:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003a96:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003a9a:	85 c9                	test   ecx,ecx
c0003a9c:	0f 84 de 00 00 00    	je     c0003b80 <dir_find+0x13a>
c0003aa2:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003aa5:	89 d0                	mov    eax,edx
c0003aa7:	83 e0 3f             	and    eax,0x3f
c0003aaa:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003ab0:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ab3:	0f 84 a6 00 00 00    	je     c0003b5f <dir_find+0x119>
c0003ab9:	80 e2 08             	and    dl,0x8
c0003abc:	0f b6 c0             	movzx  eax,al
c0003abf:	74 0b                	je     c0003acc <dir_find+0x86>
c0003ac1:	83 f8 0f             	cmp    eax,0xf
c0003ac4:	0f 85 95 00 00 00    	jne    c0003b5f <dir_find+0x119>
c0003aca:	eb 05                	jmp    c0003ad1 <dir_find+0x8b>
c0003acc:	83 f8 0f             	cmp    eax,0xf
c0003acf:	75 62                	jne    c0003b33 <dir_find+0xed>
c0003ad1:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003ad5:	0f 85 90 00 00 00    	jne    c0003b6b <dir_find+0x125>
c0003adb:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003ae0:	74 17                	je     c0003af9 <dir_find+0xb3>
c0003ae2:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003ae5:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003aed:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003af1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003af4:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003af7:	eb 13                	jmp    c0003b0c <dir_find+0xc6>
c0003af9:	89 f8                	mov    eax,edi
c0003afb:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b00:	0f b6 d0             	movzx  edx,al
c0003b03:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003b08:	39 c2                	cmp    edx,eax
c0003b0a:	75 5f                	jne    c0003b6b <dir_find+0x125>
c0003b0c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003b10:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b15:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003b18:	75 51                	jne    c0003b6b <dir_find+0x125>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	89 ea                	mov    edx,ebp
c0003b20:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b23:	e8 37 f3 ff ff       	call   c0002e5f <cmp_lfn>
c0003b28:	85 c0                	test   eax,eax
c0003b2a:	74 3f                	je     c0003b6b <dir_find+0x125>
c0003b2c:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003b30:	4f                   	dec    edi
c0003b31:	eb 38                	jmp    c0003b6b <dir_find+0x125>
c0003b33:	89 f8                	mov    eax,edi
c0003b35:	84 c0                	test   al,al
c0003b37:	75 0d                	jne    c0003b46 <dir_find+0x100>
c0003b39:	89 e8                	mov    eax,ebp
c0003b3b:	e8 9c e8 ff ff       	call   c00023dc <sum_sfn>
c0003b40:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003b44:	74 3f                	je     c0003b85 <dir_find+0x13f>
c0003b46:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003b4a:	75 13                	jne    c0003b5f <dir_find+0x119>
c0003b4c:	8d 53 20             	lea    edx,[ebx+0x20]
c0003b4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b54:	89 e8                	mov    eax,ebp
c0003b56:	e8 7c e4 ff ff       	call   c0001fd7 <mem_cmp>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	74 26                	je     c0003b85 <dir_find+0x13f>
c0003b5f:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b66:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b6b:	31 d2                	xor    edx,edx
c0003b6d:	89 d8                	mov    eax,ebx
c0003b6f:	e8 ed fb ff ff       	call   c0003761 <dir_next>
c0003b74:	89 c6                	mov    esi,eax
c0003b76:	85 c0                	test   eax,eax
c0003b78:	0f 84 fb fe ff ff    	je     c0003a79 <dir_find+0x33>
c0003b7e:	eb 05                	jmp    c0003b85 <dir_find+0x13f>
c0003b80:	be 04 00 00 00       	mov    esi,0x4
c0003b85:	83 c4 1c             	add    esp,0x1c
c0003b88:	89 f0                	mov    eax,esi
c0003b8a:	5b                   	pop    ebx
c0003b8b:	5e                   	pop    esi
c0003b8c:	5f                   	pop    edi
c0003b8d:	5d                   	pop    ebp
c0003b8e:	c3                   	ret    

c0003b8f <follow_path>:
c0003b8f:	56                   	push   esi
c0003b90:	53                   	push   ebx
c0003b91:	89 c3                	mov    ebx,eax
c0003b93:	83 ec 14             	sub    esp,0x14
c0003b96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003b9a:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ba0:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003ba3:	83 fa 5c             	cmp    edx,0x5c
c0003ba6:	75 07                	jne    c0003baf <follow_path+0x20>
c0003ba8:	40                   	inc    eax
c0003ba9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bad:	eb ed                	jmp    c0003b9c <follow_path+0xd>
c0003baf:	83 fa 2f             	cmp    edx,0x2f
c0003bb2:	74 f4                	je     c0003ba8 <follow_path+0x19>
c0003bb4:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003bbb:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003bbe:	77 3e                	ja     c0003bfe <follow_path+0x6f>
c0003bc0:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003bc4:	31 d2                	xor    edx,edx
c0003bc6:	89 d8                	mov    eax,ebx
c0003bc8:	e8 ff f8 ff ff       	call   c00034cc <dir_sdi>
c0003bcd:	eb 4f                	jmp    c0003c1e <follow_path+0x8f>
c0003bcf:	89 d8                	mov    eax,ebx
c0003bd1:	e8 70 fe ff ff       	call   c0003a46 <dir_find>
c0003bd6:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003bd9:	85 c0                	test   eax,eax
c0003bdb:	75 32                	jne    c0003c0f <follow_path+0x80>
c0003bdd:	80 e2 04             	and    dl,0x4
c0003be0:	75 3c                	jne    c0003c1e <follow_path+0x8f>
c0003be2:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003be6:	74 31                	je     c0003c19 <follow_path+0x8a>
c0003be8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003beb:	25 ff 01 00 00       	and    eax,0x1ff
c0003bf0:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003bf4:	8a 06                	mov    al,BYTE PTR [esi]
c0003bf6:	e8 7c f7 ff ff       	call   c0003377 <ld_clust.isra.0>
c0003bfb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003bfe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c02:	89 d8                	mov    eax,ebx
c0003c04:	e8 7f ef ff ff       	call   c0002b88 <create_name>
c0003c09:	85 c0                	test   eax,eax
c0003c0b:	74 c2                	je     c0003bcf <follow_path+0x40>
c0003c0d:	eb 0f                	jmp    c0003c1e <follow_path+0x8f>
c0003c0f:	83 f8 04             	cmp    eax,0x4
c0003c12:	75 0a                	jne    c0003c1e <follow_path+0x8f>
c0003c14:	80 e2 04             	and    dl,0x4
c0003c17:	75 05                	jne    c0003c1e <follow_path+0x8f>
c0003c19:	b8 05 00 00 00       	mov    eax,0x5
c0003c1e:	83 c4 14             	add    esp,0x14
c0003c21:	5b                   	pop    ebx
c0003c22:	5e                   	pop    esi
c0003c23:	c3                   	ret    

c0003c24 <dir_register>:
c0003c24:	55                   	push   ebp
c0003c25:	57                   	push   edi
c0003c26:	56                   	push   esi
c0003c27:	be 06 00 00 00       	mov    esi,0x6
c0003c2c:	53                   	push   ebx
c0003c2d:	83 ec 2c             	sub    esp,0x2c
c0003c30:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003c33:	80 e2 a0             	and    dl,0xa0
c0003c36:	0f 85 66 01 00 00    	jne    c0003da2 <dir_register+0x17e>
c0003c3c:	8b 38                	mov    edi,DWORD PTR [eax]
c0003c3e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003c46:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003c49:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c4d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003c52:	74 06                	je     c0003c5a <dir_register+0x36>
c0003c54:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003c58:	eb ef                	jmp    c0003c49 <dir_register+0x25>
c0003c5a:	89 c3                	mov    ebx,eax
c0003c5c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003c61:	8d 40 20             	lea    eax,[eax+0x20]
c0003c64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c68:	89 c2                	mov    edx,eax
c0003c6a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003c6e:	e8 44 e3 ff ff       	call   c0001fb7 <mem_cpy>
c0003c73:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003c78:	74 48                	je     c0003cc2 <dir_register+0x9e>
c0003c7a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003c7e:	bd 01 00 00 00       	mov    ebp,0x1
c0003c83:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003c86:	55                   	push   ebp
c0003c87:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003c8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c8f:	e8 86 e6 ff ff       	call   c000231a <gen_numname>
c0003c94:	58                   	pop    eax
c0003c95:	89 d8                	mov    eax,ebx
c0003c97:	e8 aa fd ff ff       	call   c0003a46 <dir_find>
c0003c9c:	89 c6                	mov    esi,eax
c0003c9e:	85 c0                	test   eax,eax
c0003ca0:	75 10                	jne    c0003cb2 <dir_register+0x8e>
c0003ca2:	45                   	inc    ebp
c0003ca3:	83 fd 64             	cmp    ebp,0x64
c0003ca6:	75 db                	jne    c0003c83 <dir_register+0x5f>
c0003ca8:	be 07 00 00 00       	mov    esi,0x7
c0003cad:	e9 f0 00 00 00       	jmp    c0003da2 <dir_register+0x17e>
c0003cb2:	83 f8 04             	cmp    eax,0x4
c0003cb5:	0f 85 e7 00 00 00    	jne    c0003da2 <dir_register+0x17e>
c0003cbb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003cbf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003cc2:	bd 01 00 00 00       	mov    ebp,0x1
c0003cc7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003ccc:	74 13                	je     c0003ce1 <dir_register+0xbd>
c0003cce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cd2:	b9 0d 00 00 00       	mov    ecx,0xd
c0003cd7:	83 c0 0c             	add    eax,0xc
c0003cda:	31 d2                	xor    edx,edx
c0003cdc:	f7 f1                	div    ecx
c0003cde:	8d 68 01             	lea    ebp,[eax+0x1]
c0003ce1:	89 ea                	mov    edx,ebp
c0003ce3:	89 d8                	mov    eax,ebx
c0003ce5:	e8 7c fb ff ff       	call   c0003866 <dir_alloc>
c0003cea:	89 c6                	mov    esi,eax
c0003cec:	85 c0                	test   eax,eax
c0003cee:	0f 85 ae 00 00 00    	jne    c0003da2 <dir_register+0x17e>
c0003cf4:	4d                   	dec    ebp
c0003cf5:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003cf9:	74 67                	je     c0003d62 <dir_register+0x13e>
c0003cfb:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003cfe:	89 e8                	mov    eax,ebp
c0003d00:	c1 e0 05             	shl    eax,0x5
c0003d03:	29 c2                	sub    edx,eax
c0003d05:	89 d8                	mov    eax,ebx
c0003d07:	e8 c0 f7 ff ff       	call   c00034cc <dir_sdi>
c0003d0c:	89 c6                	mov    esi,eax
c0003d0e:	85 c0                	test   eax,eax
c0003d10:	0f 85 8c 00 00 00    	jne    c0003da2 <dir_register+0x17e>
c0003d16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d1a:	e8 bd e6 ff ff       	call   c00023dc <sum_sfn>
c0003d1f:	0f b6 e8             	movzx  ebp,al
c0003d22:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d25:	89 f8                	mov    eax,edi
c0003d27:	e8 c6 e7 ff ff       	call   c00024f2 <move_window>
c0003d2c:	89 c6                	mov    esi,eax
c0003d2e:	85 c0                	test   eax,eax
c0003d30:	75 70                	jne    c0003da2 <dir_register+0x17e>
c0003d32:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003d37:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d3a:	83 ec 0c             	sub    esp,0xc
c0003d3d:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003d40:	55                   	push   ebp
c0003d41:	e8 39 e5 ff ff       	call   c000227f <put_lfn>
c0003d46:	31 d2                	xor    edx,edx
c0003d48:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003d4c:	89 d8                	mov    eax,ebx
c0003d4e:	e8 0e fa ff ff       	call   c0003761 <dir_next>
c0003d53:	83 c4 10             	add    esp,0x10
c0003d56:	89 c6                	mov    esi,eax
c0003d58:	85 c0                	test   eax,eax
c0003d5a:	75 46                	jne    c0003da2 <dir_register+0x17e>
c0003d5c:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003d60:	75 c0                	jne    c0003d22 <dir_register+0xfe>
c0003d62:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d65:	89 f8                	mov    eax,edi
c0003d67:	e8 86 e7 ff ff       	call   c00024f2 <move_window>
c0003d6c:	89 c6                	mov    esi,eax
c0003d6e:	85 c0                	test   eax,eax
c0003d70:	75 30                	jne    c0003da2 <dir_register+0x17e>
c0003d72:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003d75:	b9 20 00 00 00       	mov    ecx,0x20
c0003d7a:	31 d2                	xor    edx,edx
c0003d7c:	e8 4b e2 ff ff       	call   c0001fcc <mem_set>
c0003d81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003d84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d88:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d8d:	e8 25 e2 ff ff       	call   c0001fb7 <mem_cpy>
c0003d92:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003d95:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d98:	83 e0 18             	and    eax,0x18
c0003d9b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003d9e:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003da2:	83 c4 2c             	add    esp,0x2c
c0003da5:	89 f0                	mov    eax,esi
c0003da7:	5b                   	pop    ebx
c0003da8:	5e                   	pop    esi
c0003da9:	5f                   	pop    edi
c0003daa:	5d                   	pop    ebp
c0003dab:	c3                   	ret    

c0003dac <f_mount>:
c0003dac:	53                   	push   ebx
c0003dad:	83 ec 18             	sub    esp,0x18
c0003db0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003db4:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003db8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dbc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003dc0:	e8 37 e6 ff ff       	call   c00023fc <get_ldnumber>
c0003dc5:	89 c2                	mov    edx,eax
c0003dc7:	b8 0b 00 00 00       	mov    eax,0xb
c0003dcc:	85 d2                	test   edx,edx
c0003dce:	78 39                	js     c0003e09 <f_mount+0x5d>
c0003dd0:	8b 04 95 80 6c 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc9380]
c0003dd7:	85 c0                	test   eax,eax
c0003dd9:	74 03                	je     c0003dde <f_mount+0x32>
c0003ddb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003dde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003de2:	85 c0                	test   eax,eax
c0003de4:	74 03                	je     c0003de9 <f_mount+0x3d>
c0003de6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003de9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003ded:	89 04 95 80 6c 03 c0 	mov    DWORD PTR [edx*4-0x3ffc9380],eax
c0003df4:	31 c0                	xor    eax,eax
c0003df6:	84 db                	test   bl,bl
c0003df8:	74 0f                	je     c0003e09 <f_mount+0x5d>
c0003dfa:	31 c9                	xor    ecx,ecx
c0003dfc:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e00:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e04:	e8 3c e8 ff ff       	call   c0002645 <mount_volume>
c0003e09:	83 c4 18             	add    esp,0x18
c0003e0c:	5b                   	pop    ebx
c0003e0d:	c3                   	ret    

c0003e0e <f_open>:
c0003e0e:	55                   	push   ebp
c0003e0f:	b8 09 00 00 00       	mov    eax,0x9
c0003e14:	57                   	push   edi
c0003e15:	56                   	push   esi
c0003e16:	53                   	push   ebx
c0003e17:	83 ec 5c             	sub    esp,0x5c
c0003e1a:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e1e:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e22:	85 db                	test   ebx,ebx
c0003e24:	0f 84 9f 02 00 00    	je     c00040c9 <f_open+0x2bb>
c0003e2a:	89 fd                	mov    ebp,edi
c0003e2c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e30:	83 e5 3f             	and    ebp,0x3f
c0003e33:	89 e8                	mov    eax,ebp
c0003e35:	89 ee                	mov    esi,ebp
c0003e37:	0f b6 c8             	movzx  ecx,al
c0003e3a:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003e3e:	e8 02 e8 ff ff       	call   c0002645 <mount_volume>
c0003e43:	85 c0                	test   eax,eax
c0003e45:	0f 85 78 02 00 00    	jne    c00040c3 <f_open+0x2b5>
c0003e4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e4f:	83 ec 0c             	sub    esp,0xc
c0003e52:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003e56:	68 00 02 00 00       	push   0x200
c0003e5b:	e8 74 1f 00 00       	call   c0005dd4 <ff_memalloc>
c0003e60:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003e64:	83 c4 10             	add    esp,0x10
c0003e67:	b8 11 00 00 00       	mov    eax,0x11
c0003e6c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003e71:	0f 84 52 02 00 00    	je     c00040c9 <f_open+0x2bb>
c0003e77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e7b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e7f:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003e83:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003e86:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003e8a:	e8 00 fd ff ff       	call   c0003b8f <follow_path>
c0003e8f:	85 c0                	test   eax,eax
c0003e91:	75 0c                	jne    c0003e9f <f_open+0x91>
c0003e93:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003e98:	74 05                	je     c0003e9f <f_open+0x91>
c0003e9a:	b8 06 00 00 00       	mov    eax,0x6
c0003e9f:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ea5:	0f 84 d5 00 00 00    	je     c0003f80 <f_open+0x172>
c0003eab:	85 c0                	test   eax,eax
c0003ead:	74 21                	je     c0003ed0 <f_open+0xc2>
c0003eaf:	83 f8 04             	cmp    eax,0x4
c0003eb2:	0f 85 f0 01 00 00    	jne    c00040a8 <f_open+0x29a>
c0003eb8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ebc:	e8 63 fd ff ff       	call   c0003c24 <dir_register>
c0003ec1:	85 c0                	test   eax,eax
c0003ec3:	0f 85 df 01 00 00    	jne    c00040a8 <f_open+0x29a>
c0003ec9:	83 cd 08             	or     ebp,0x8
c0003ecc:	89 ee                	mov    esi,ebp
c0003ece:	eb 2c                	jmp    c0003efc <f_open+0xee>
c0003ed0:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003ed4:	b8 07 00 00 00       	mov    eax,0x7
c0003ed9:	80 e2 11             	and    dl,0x11
c0003edc:	0f 85 c6 01 00 00    	jne    c00040a8 <f_open+0x29a>
c0003ee2:	b8 08 00 00 00       	mov    eax,0x8
c0003ee7:	f7 c7 04 00 00 00    	test   edi,0x4
c0003eed:	0f 85 b5 01 00 00    	jne    c00040a8 <f_open+0x29a>
c0003ef3:	83 e7 08             	and    edi,0x8
c0003ef6:	0f 84 b1 00 00 00    	je     c0003fad <f_open+0x19f>
c0003efc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f04:	89 ea                	mov    edx,ebp
c0003f06:	8a 00                	mov    al,BYTE PTR [eax]
c0003f08:	e8 6a f4 ff ff       	call   c0003377 <ld_clust.isra.0>
c0003f0d:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f12:	89 c7                	mov    edi,eax
c0003f14:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f17:	e8 98 e0 ff ff       	call   c0001fb4 <st_dword>
c0003f1c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f20:	31 c9                	xor    ecx,ecx
c0003f22:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f2a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003f2e:	e8 6d f4 ff ff       	call   c00033a0 <st_clust.isra.1>
c0003f33:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f37:	31 d2                	xor    edx,edx
c0003f39:	83 c0 1c             	add    eax,0x1c
c0003f3c:	e8 73 e0 ff ff       	call   c0001fb4 <st_dword>
c0003f41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f45:	85 ff                	test   edi,edi
c0003f47:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003f4b:	74 60                	je     c0003fad <f_open+0x19f>
c0003f4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f51:	31 c9                	xor    ecx,ecx
c0003f53:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003f56:	89 fa                	mov    edx,edi
c0003f58:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f5c:	e8 72 f7 ff ff       	call   c00036d3 <remove_chain>
c0003f61:	85 c0                	test   eax,eax
c0003f63:	0f 85 3f 01 00 00    	jne    c00040a8 <f_open+0x29a>
c0003f69:	89 ea                	mov    edx,ebp
c0003f6b:	4f                   	dec    edi
c0003f6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f70:	e8 7d e5 ff ff       	call   c00024f2 <move_window>
c0003f75:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f79:	85 c0                	test   eax,eax
c0003f7b:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003f7e:	eb 27                	jmp    c0003fa7 <f_open+0x199>
c0003f80:	85 c0                	test   eax,eax
c0003f82:	0f 85 20 01 00 00    	jne    c00040a8 <f_open+0x29a>
c0003f88:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f8c:	b8 04 00 00 00       	mov    eax,0x4
c0003f91:	f6 c2 10             	test   dl,0x10
c0003f94:	0f 85 0e 01 00 00    	jne    c00040a8 <f_open+0x29a>
c0003f9a:	83 e7 02             	and    edi,0x2
c0003f9d:	74 0e                	je     c0003fad <f_open+0x19f>
c0003f9f:	b8 07 00 00 00       	mov    eax,0x7
c0003fa4:	80 e2 01             	and    dl,0x1
c0003fa7:	0f 85 fb 00 00 00    	jne    c00040a8 <f_open+0x29a>
c0003fad:	f7 c6 08 00 00 00    	test   esi,0x8
c0003fb3:	74 03                	je     c0003fb8 <f_open+0x1aa>
c0003fb5:	83 ce 40             	or     esi,0x40
c0003fb8:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003fbc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003fc0:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003fc3:	89 fa                	mov    edx,edi
c0003fc5:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003fc8:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003fcb:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003fce:	e8 a4 f3 ff ff       	call   c0003377 <ld_clust.isra.0>
c0003fd3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003fd6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003fd9:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003fdc:	e8 b7 df ff ff       	call   c0001f98 <ld_dword>
c0003fe1:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003fe3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003fe6:	31 d2                	xor    edx,edx
c0003fe8:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003fec:	b9 00 02 00 00       	mov    ecx,0x200
c0003ff1:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003ff5:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003ff9:	89 f0                	mov    eax,esi
c0003ffb:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004002:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004005:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000400c:	89 f8                	mov    eax,edi
c000400e:	e8 b9 df ff ff       	call   c0001fcc <mem_set>
c0004013:	83 e6 20             	and    esi,0x20
c0004016:	75 07                	jne    c000401f <f_open+0x211>
c0004018:	31 c0                	xor    eax,eax
c000401a:	e9 89 00 00 00       	jmp    c00040a8 <f_open+0x29a>
c000401f:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0004022:	85 ed                	test   ebp,ebp
c0004024:	74 f2                	je     c0004018 <f_open+0x20a>
c0004026:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0004029:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000402d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004030:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0004034:	c1 e6 09             	shl    esi,0x9
c0004037:	39 ee                	cmp    esi,ebp
c0004039:	73 1c                	jae    c0004057 <f_open+0x249>
c000403b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000403d:	29 f5                	sub    ebp,esi
c000403f:	e8 84 f3 ff ff       	call   c00033c8 <get_fat.isra.2>
c0004044:	89 c2                	mov    edx,eax
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	76 10                	jbe    c000405b <f_open+0x24d>
c000404b:	83 f8 ff             	cmp    eax,0xffffffff
c000404e:	75 e7                	jne    c0004037 <f_open+0x229>
c0004050:	b8 01 00 00 00       	mov    eax,0x1
c0004055:	eb 09                	jmp    c0004060 <f_open+0x252>
c0004057:	31 c0                	xor    eax,eax
c0004059:	eb 05                	jmp    c0004060 <f_open+0x252>
c000405b:	b8 02 00 00 00       	mov    eax,0x2
c0004060:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0004063:	85 c0                	test   eax,eax
c0004065:	75 41                	jne    c00040a8 <f_open+0x29a>
c0004067:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c000406d:	74 a9                	je     c0004018 <f_open+0x20a>
c000406f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004073:	89 f0                	mov    eax,esi
c0004075:	e8 68 e1 ff ff       	call   c00021e2 <clst2sect>
c000407a:	89 c2                	mov    edx,eax
c000407c:	b8 02 00 00 00       	mov    eax,0x2
c0004081:	85 d2                	test   edx,edx
c0004083:	74 23                	je     c00040a8 <f_open+0x29a>
c0004085:	c1 ed 09             	shr    ebp,0x9
c0004088:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c000408c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000408f:	6a 01                	push   0x1
c0004091:	50                   	push   eax
c0004092:	57                   	push   edi
c0004093:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0004097:	50                   	push   eax
c0004098:	e8 a3 de ff ff       	call   c0001f40 <disk_read>
c000409d:	83 c4 10             	add    esp,0x10
c00040a0:	85 c0                	test   eax,eax
c00040a2:	0f 95 c0             	setne  al
c00040a5:	0f b6 c0             	movzx  eax,al
c00040a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00040ac:	83 ec 0c             	sub    esp,0xc
c00040af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00040b3:	e8 34 1d 00 00       	call   c0005dec <ff_memfree>
c00040b8:	83 c4 10             	add    esp,0x10
c00040bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040bf:	85 c0                	test   eax,eax
c00040c1:	74 06                	je     c00040c9 <f_open+0x2bb>
c00040c3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00040c9:	83 c4 5c             	add    esp,0x5c
c00040cc:	5b                   	pop    ebx
c00040cd:	5e                   	pop    esi
c00040ce:	5f                   	pop    edi
c00040cf:	5d                   	pop    ebp
c00040d0:	c3                   	ret    

c00040d1 <f_read>:
c00040d1:	55                   	push   ebp
c00040d2:	57                   	push   edi
c00040d3:	56                   	push   esi
c00040d4:	53                   	push   ebx
c00040d5:	83 ec 2c             	sub    esp,0x2c
c00040d8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00040dc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00040e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00040e6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040ea:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00040ee:	89 d8                	mov    eax,ebx
c00040f0:	e8 54 e3 ff ff       	call   c0002449 <validate>
c00040f5:	89 c5                	mov    ebp,eax
c00040f7:	85 c0                	test   eax,eax
c00040f9:	0f 85 c7 01 00 00    	jne    c00042c6 <f_read+0x1f5>
c00040ff:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004103:	85 ed                	test   ebp,ebp
c0004105:	0f 85 bb 01 00 00    	jne    c00042c6 <f_read+0x1f5>
c000410b:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c000410f:	0f 84 ac 01 00 00    	je     c00042c1 <f_read+0x1f0>
c0004115:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004118:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c000411b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000411f:	39 f0                	cmp    eax,esi
c0004121:	0f 86 b0 00 00 00    	jbe    c00041d7 <f_read+0x106>
c0004127:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000412b:	e9 a7 00 00 00       	jmp    c00041d7 <f_read+0x106>
c0004130:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004133:	a9 ff 01 00 00       	test   eax,0x1ff
c0004138:	0f 85 56 01 00 00    	jne    c0004294 <f_read+0x1c3>
c000413e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004142:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0004146:	89 c2                	mov    edx,eax
c0004148:	4f                   	dec    edi
c0004149:	c1 ea 09             	shr    edx,0x9
c000414c:	21 d7                	and    edi,edx
c000414e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0004152:	0f 84 8f 00 00 00    	je     c00041e7 <f_read+0x116>
c0004158:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000415c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000415f:	89 c8                	mov    eax,ecx
c0004161:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004165:	e8 78 e0 ff ff       	call   c00021e2 <clst2sect>
c000416a:	85 c0                	test   eax,eax
c000416c:	0f 84 8d 00 00 00    	je     c00041ff <f_read+0x12e>
c0004172:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004176:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c000417e:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0004181:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004185:	0f 86 bf 00 00 00    	jbe    c000424a <f_read+0x179>
c000418b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000418f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004193:	c1 ee 09             	shr    esi,0x9
c0004196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000419a:	01 f2                	add    edx,esi
c000419c:	39 c2                	cmp    edx,eax
c000419e:	76 06                	jbe    c00041a6 <f_read+0xd5>
c00041a0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041a4:	89 c6                	mov    esi,eax
c00041a6:	56                   	push   esi
c00041a7:	57                   	push   edi
c00041a8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041b0:	50                   	push   eax
c00041b1:	e8 8a dd ff ff       	call   c0001f40 <disk_read>
c00041b6:	83 c4 10             	add    esp,0x10
c00041b9:	85 c0                	test   eax,eax
c00041bb:	75 55                	jne    c0004212 <f_read+0x141>
c00041bd:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041c1:	75 65                	jne    c0004228 <f_read+0x157>
c00041c3:	c1 e6 09             	shl    esi,0x9
c00041c6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00041ca:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c00041ce:	01 30                	add    DWORD PTR [eax],esi
c00041d0:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00041d4:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c00041d7:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00041dc:	0f 85 4e ff ff ff    	jne    c0004130 <f_read+0x5f>
c00041e2:	e9 df 00 00 00       	jmp    c00042c6 <f_read+0x1f5>
c00041e7:	85 c0                	test   eax,eax
c00041e9:	75 05                	jne    c00041f0 <f_read+0x11f>
c00041eb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041ee:	eb 0a                	jmp    c00041fa <f_read+0x129>
c00041f0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041f5:	e8 ce f1 ff ff       	call   c00033c8 <get_fat.isra.2>
c00041fa:	83 f8 01             	cmp    eax,0x1
c00041fd:	77 0e                	ja     c000420d <f_read+0x13c>
c00041ff:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004203:	bd 02 00 00 00       	mov    ebp,0x2
c0004208:	e9 b9 00 00 00       	jmp    c00042c6 <f_read+0x1f5>
c000420d:	83 f8 ff             	cmp    eax,0xffffffff
c0004210:	75 0e                	jne    c0004220 <f_read+0x14f>
c0004212:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004216:	bd 01 00 00 00       	mov    ebp,0x1
c000421b:	e9 a6 00 00 00       	jmp    c00042c6 <f_read+0x1f5>
c0004220:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004223:	e9 30 ff ff ff       	jmp    c0004158 <f_read+0x87>
c0004228:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000422b:	29 f8                	sub    eax,edi
c000422d:	39 f0                	cmp    eax,esi
c000422f:	73 92                	jae    c00041c3 <f_read+0xf2>
c0004231:	c1 e0 09             	shl    eax,0x9
c0004234:	8d 53 28             	lea    edx,[ebx+0x28]
c0004237:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000423b:	b9 00 02 00 00       	mov    ecx,0x200
c0004240:	e8 72 dd ff ff       	call   c0001fb7 <mem_cpy>
c0004245:	e9 79 ff ff ff       	jmp    c00041c3 <f_read+0xf2>
c000424a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000424d:	39 f8                	cmp    eax,edi
c000424f:	74 40                	je     c0004291 <f_read+0x1c0>
c0004251:	8d 73 28             	lea    esi,[ebx+0x28]
c0004254:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004258:	74 1e                	je     c0004278 <f_read+0x1a7>
c000425a:	6a 01                	push   0x1
c000425c:	50                   	push   eax
c000425d:	56                   	push   esi
c000425e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004262:	50                   	push   eax
c0004263:	e8 ee dc ff ff       	call   c0001f56 <disk_write>
c0004268:	83 c4 10             	add    esp,0x10
c000426b:	85 c0                	test   eax,eax
c000426d:	75 a3                	jne    c0004212 <f_read+0x141>
c000426f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004272:	83 e0 7f             	and    eax,0x7f
c0004275:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004278:	6a 01                	push   0x1
c000427a:	57                   	push   edi
c000427b:	56                   	push   esi
c000427c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004280:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004284:	50                   	push   eax
c0004285:	e8 b6 dc ff ff       	call   c0001f40 <disk_read>
c000428a:	83 c4 10             	add    esp,0x10
c000428d:	85 c0                	test   eax,eax
c000428f:	75 81                	jne    c0004212 <f_read+0x141>
c0004291:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004294:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004297:	ba 00 02 00 00       	mov    edx,0x200
c000429c:	25 ff 01 00 00       	and    eax,0x1ff
c00042a1:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00042a5:	29 c2                	sub    edx,eax
c00042a7:	39 d6                	cmp    esi,edx
c00042a9:	76 02                	jbe    c00042ad <f_read+0x1dc>
c00042ab:	89 d6                	mov    esi,edx
c00042ad:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042b1:	89 f1                	mov    ecx,esi
c00042b3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042b7:	e8 fb dc ff ff       	call   c0001fb7 <mem_cpy>
c00042bc:	e9 05 ff ff ff       	jmp    c00041c6 <f_read+0xf5>
c00042c1:	bd 07 00 00 00       	mov    ebp,0x7
c00042c6:	83 c4 2c             	add    esp,0x2c
c00042c9:	89 e8                	mov    eax,ebp
c00042cb:	5b                   	pop    ebx
c00042cc:	5e                   	pop    esi
c00042cd:	5f                   	pop    edi
c00042ce:	5d                   	pop    ebp
c00042cf:	c3                   	ret    

c00042d0 <f_write>:
c00042d0:	55                   	push   ebp
c00042d1:	57                   	push   edi
c00042d2:	56                   	push   esi
c00042d3:	53                   	push   ebx
c00042d4:	83 ec 2c             	sub    esp,0x2c
c00042d7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00042db:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00042df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00042e5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 59 e1 ff ff       	call   c0002449 <validate>
c00042f0:	89 c5                	mov    ebp,eax
c00042f2:	85 c0                	test   eax,eax
c00042f4:	0f 85 14 02 00 00    	jne    c000450e <f_write+0x23e>
c00042fa:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00042fe:	85 ed                	test   ebp,ebp
c0004300:	0f 85 08 02 00 00    	jne    c000450e <f_write+0x23e>
c0004306:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000430a:	0f 84 f9 01 00 00    	je     c0004509 <f_write+0x239>
c0004310:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004313:	89 c7                	mov    edi,eax
c0004315:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004319:	0f 83 ef 00 00 00    	jae    c000440e <f_write+0x13e>
c000431f:	f7 d0                	not    eax
c0004321:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004325:	e9 e4 00 00 00       	jmp    c000440e <f_write+0x13e>
c000432a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000432d:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0004333:	0f 85 9a 01 00 00    	jne    c00044d3 <f_write+0x203>
c0004339:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000433d:	89 d1                	mov    ecx,edx
c000433f:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0004343:	c1 e9 09             	shr    ecx,0x9
c0004346:	48                   	dec    eax
c0004347:	21 c8                	and    eax,ecx
c0004349:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000434d:	0f 84 c8 00 00 00    	je     c000441b <f_write+0x14b>
c0004353:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004357:	0f 85 22 01 00 00    	jne    c000447f <f_write+0x1af>
c000435d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004361:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004364:	89 c8                	mov    eax,ecx
c0004366:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000436a:	e8 73 de ff ff       	call   c00021e2 <clst2sect>
c000436f:	85 c0                	test   eax,eax
c0004371:	0f 84 d2 00 00 00    	je     c0004449 <f_write+0x179>
c0004377:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000437b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000437f:	01 c7                	add    edi,eax
c0004381:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0004389:	0f 86 1c 01 00 00    	jbe    c00044ab <f_write+0x1db>
c000438f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004393:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004397:	c1 ee 09             	shr    esi,0x9
c000439a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000439e:	01 f2                	add    edx,esi
c00043a0:	39 c2                	cmp    edx,eax
c00043a2:	76 06                	jbe    c00043aa <f_write+0xda>
c00043a4:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043a8:	89 c6                	mov    esi,eax
c00043aa:	56                   	push   esi
c00043ab:	57                   	push   edi
c00043ac:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00043b0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043b4:	50                   	push   eax
c00043b5:	e8 9c db ff ff       	call   c0001f56 <disk_write>
c00043ba:	83 c4 10             	add    esp,0x10
c00043bd:	85 c0                	test   eax,eax
c00043bf:	0f 85 97 00 00 00    	jne    c000445c <f_write+0x18c>
c00043c5:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00043c8:	29 fa                	sub    edx,edi
c00043ca:	39 f2                	cmp    edx,esi
c00043cc:	73 1d                	jae    c00043eb <f_write+0x11b>
c00043ce:	8d 43 28             	lea    eax,[ebx+0x28]
c00043d1:	c1 e2 09             	shl    edx,0x9
c00043d4:	b9 00 02 00 00       	mov    ecx,0x200
c00043d9:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00043dd:	e8 d5 db ff ff       	call   c0001fb7 <mem_cpy>
c00043e2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e5:	83 e0 7f             	and    eax,0x7f
c00043e8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043eb:	c1 e6 09             	shl    esi,0x9
c00043ee:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00043f2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00043f6:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00043fa:	01 30                	add    DWORD PTR [eax],esi
c00043fc:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00043ff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004402:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004405:	39 f0                	cmp    eax,esi
c0004407:	73 02                	jae    c000440b <f_write+0x13b>
c0004409:	89 f0                	mov    eax,esi
c000440b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000440e:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004413:	0f 85 11 ff ff ff    	jne    c000432a <f_write+0x5a>
c0004419:	eb 1b                	jmp    c0004436 <f_write+0x166>
c000441b:	85 d2                	test   edx,edx
c000441d:	75 09                	jne    c0004428 <f_write+0x158>
c000441f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004422:	85 c0                	test   eax,eax
c0004424:	75 1e                	jne    c0004444 <f_write+0x174>
c0004426:	eb 03                	jmp    c000442b <f_write+0x15b>
c0004428:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000442b:	89 d8                	mov    eax,ebx
c000442d:	e8 62 f1 ff ff       	call   c0003594 <create_chain>
c0004432:	85 c0                	test   eax,eax
c0004434:	75 0e                	jne    c0004444 <f_write+0x174>
c0004436:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004439:	83 c8 40             	or     eax,0x40
c000443c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000443f:	e9 ca 00 00 00       	jmp    c000450e <f_write+0x23e>
c0004444:	83 f8 01             	cmp    eax,0x1
c0004447:	75 0e                	jne    c0004457 <f_write+0x187>
c0004449:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000444d:	bd 02 00 00 00       	mov    ebp,0x2
c0004452:	e9 b7 00 00 00       	jmp    c000450e <f_write+0x23e>
c0004457:	83 f8 ff             	cmp    eax,0xffffffff
c000445a:	75 0e                	jne    c000446a <f_write+0x19a>
c000445c:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004460:	bd 01 00 00 00       	mov    ebp,0x1
c0004465:	e9 a4 00 00 00       	jmp    c000450e <f_write+0x23e>
c000446a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000446d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004471:	0f 85 dc fe ff ff    	jne    c0004353 <f_write+0x83>
c0004477:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000447a:	e9 d4 fe ff ff       	jmp    c0004353 <f_write+0x83>
c000447f:	6a 01                	push   0x1
c0004481:	8d 43 28             	lea    eax,[ebx+0x28]
c0004484:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004487:	50                   	push   eax
c0004488:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000448c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004490:	50                   	push   eax
c0004491:	e8 c0 da ff ff       	call   c0001f56 <disk_write>
c0004496:	83 c4 10             	add    esp,0x10
c0004499:	85 c0                	test   eax,eax
c000449b:	75 bf                	jne    c000445c <f_write+0x18c>
c000449d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044a0:	83 e0 7f             	and    eax,0x7f
c00044a3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044a6:	e9 b2 fe ff ff       	jmp    c000435d <f_write+0x8d>
c00044ab:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00044ae:	74 20                	je     c00044d0 <f_write+0x200>
c00044b0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044b3:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00044b6:	76 18                	jbe    c00044d0 <f_write+0x200>
c00044b8:	6a 01                	push   0x1
c00044ba:	8d 43 28             	lea    eax,[ebx+0x28]
c00044bd:	57                   	push   edi
c00044be:	50                   	push   eax
c00044bf:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00044c3:	50                   	push   eax
c00044c4:	e8 77 da ff ff       	call   c0001f40 <disk_read>
c00044c9:	83 c4 10             	add    esp,0x10
c00044cc:	85 c0                	test   eax,eax
c00044ce:	75 8c                	jne    c000445c <f_write+0x18c>
c00044d0:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00044d3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044d6:	ba 00 02 00 00       	mov    edx,0x200
c00044db:	25 ff 01 00 00       	and    eax,0x1ff
c00044e0:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00044e4:	29 c2                	sub    edx,eax
c00044e6:	39 d6                	cmp    esi,edx
c00044e8:	76 02                	jbe    c00044ec <f_write+0x21c>
c00044ea:	89 d6                	mov    esi,edx
c00044ec:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00044f0:	89 f1                	mov    ecx,esi
c00044f2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00044f6:	e8 bc da ff ff       	call   c0001fb7 <mem_cpy>
c00044fb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044fe:	83 c8 80             	or     eax,0xffffff80
c0004501:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004504:	e9 e5 fe ff ff       	jmp    c00043ee <f_write+0x11e>
c0004509:	bd 07 00 00 00       	mov    ebp,0x7
c000450e:	83 c4 2c             	add    esp,0x2c
c0004511:	89 e8                	mov    eax,ebp
c0004513:	5b                   	pop    ebx
c0004514:	5e                   	pop    esi
c0004515:	5f                   	pop    edi
c0004516:	5d                   	pop    ebp
c0004517:	c3                   	ret    

c0004518 <f_sync>:
c0004518:	56                   	push   esi
c0004519:	53                   	push   ebx
c000451a:	83 ec 14             	sub    esp,0x14
c000451d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004521:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004525:	89 d8                	mov    eax,ebx
c0004527:	e8 1d df ff ff       	call   c0002449 <validate>
c000452c:	85 c0                	test   eax,eax
c000452e:	0f 85 a3 00 00 00    	jne    c00045d7 <f_sync+0xbf>
c0004534:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004537:	f6 c2 40             	test   dl,0x40
c000453a:	0f 84 97 00 00 00    	je     c00045d7 <f_sync+0xbf>
c0004540:	80 e2 80             	and    dl,0x80
c0004543:	74 2e                	je     c0004573 <f_sync+0x5b>
c0004545:	6a 01                	push   0x1
c0004547:	8d 43 28             	lea    eax,[ebx+0x28]
c000454a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000454d:	50                   	push   eax
c000454e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004552:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004556:	50                   	push   eax
c0004557:	e8 fa d9 ff ff       	call   c0001f56 <disk_write>
c000455c:	83 c4 10             	add    esp,0x10
c000455f:	89 c2                	mov    edx,eax
c0004561:	b8 01 00 00 00       	mov    eax,0x1
c0004566:	85 d2                	test   edx,edx
c0004568:	75 6d                	jne    c00045d7 <f_sync+0xbf>
c000456a:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000456d:	83 e0 7f             	and    eax,0x7f
c0004570:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004573:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004576:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000457a:	e8 73 df ff ff       	call   c00024f2 <move_window>
c000457f:	85 c0                	test   eax,eax
c0004581:	75 54                	jne    c00045d7 <f_sync+0xbf>
c0004583:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004586:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c0004589:	89 f2                	mov    edx,esi
c000458b:	83 c8 20             	or     eax,0x20
c000458e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004591:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004594:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004596:	e8 05 ee ff ff       	call   c00033a0 <st_clust.isra.1>
c000459b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000459e:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045a1:	e8 0e da ff ff       	call   c0001fb4 <st_dword>
c00045a6:	8d 46 16             	lea    eax,[esi+0x16]
c00045a9:	ba 00 00 21 50       	mov    edx,0x50210000
c00045ae:	e8 01 da ff ff       	call   c0001fb4 <st_dword>
c00045b3:	31 d2                	xor    edx,edx
c00045b5:	8d 46 12             	lea    eax,[esi+0x12]
c00045b8:	e8 f3 d9 ff ff       	call   c0001fb0 <st_word>
c00045bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045c1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00045c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045c9:	e8 5b e9 ff ff       	call   c0002f29 <sync_fs>
c00045ce:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045d1:	83 e2 bf             	and    edx,0xffffffbf
c00045d4:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045d7:	83 c4 14             	add    esp,0x14
c00045da:	5b                   	pop    ebx
c00045db:	5e                   	pop    esi
c00045dc:	c3                   	ret    

c00045dd <f_close>:
c00045dd:	53                   	push   ebx
c00045de:	83 ec 24             	sub    esp,0x24
c00045e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00045e5:	53                   	push   ebx
c00045e6:	e8 2d ff ff ff       	call   c0004518 <f_sync>
c00045eb:	83 c4 10             	add    esp,0x10
c00045ee:	85 c0                	test   eax,eax
c00045f0:	75 15                	jne    c0004607 <f_close+0x2a>
c00045f2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00045f6:	89 d8                	mov    eax,ebx
c00045f8:	e8 4c de ff ff       	call   c0002449 <validate>
c00045fd:	85 c0                	test   eax,eax
c00045ff:	75 06                	jne    c0004607 <f_close+0x2a>
c0004601:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004607:	83 c4 18             	add    esp,0x18
c000460a:	5b                   	pop    ebx
c000460b:	c3                   	ret    

c000460c <f_lseek>:
c000460c:	55                   	push   ebp
c000460d:	57                   	push   edi
c000460e:	56                   	push   esi
c000460f:	53                   	push   ebx
c0004610:	83 ec 2c             	sub    esp,0x2c
c0004613:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004617:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000461b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000461f:	89 d8                	mov    eax,ebx
c0004621:	e8 23 de ff ff       	call   c0002449 <validate>
c0004626:	89 c5                	mov    ebp,eax
c0004628:	85 c0                	test   eax,eax
c000462a:	0f 85 83 01 00 00    	jne    c00047b3 <f_lseek+0x1a7>
c0004630:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004634:	85 ed                	test   ebp,ebp
c0004636:	0f 85 77 01 00 00    	jne    c00047b3 <f_lseek+0x1a7>
c000463c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000463f:	39 f0                	cmp    eax,esi
c0004641:	73 08                	jae    c000464b <f_lseek+0x3f>
c0004643:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004647:	75 02                	jne    c000464b <f_lseek+0x3f>
c0004649:	89 c6                	mov    esi,eax
c000464b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000464e:	85 f6                	test   esi,esi
c0004650:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004657:	75 07                	jne    c0004660 <f_lseek+0x54>
c0004659:	31 f6                	xor    esi,esi
c000465b:	e9 e2 00 00 00       	jmp    c0004742 <f_lseek+0x136>
c0004660:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004664:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c0004668:	c1 e7 09             	shl    edi,0x9
c000466b:	85 c9                	test   ecx,ecx
c000466d:	74 28                	je     c0004697 <f_lseek+0x8b>
c000466f:	49                   	dec    ecx
c0004670:	31 d2                	xor    edx,edx
c0004672:	8d 46 ff             	lea    eax,[esi-0x1]
c0004675:	f7 f7                	div    edi
c0004677:	31 d2                	xor    edx,edx
c0004679:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000467d:	89 c8                	mov    eax,ecx
c000467f:	f7 f7                	div    edi
c0004681:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004685:	72 10                	jb     c0004697 <f_lseek+0x8b>
c0004687:	89 f8                	mov    eax,edi
c0004689:	f7 d8                	neg    eax
c000468b:	21 c1                	and    ecx,eax
c000468d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004690:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004693:	29 ce                	sub    esi,ecx
c0004695:	eb 3c                	jmp    c00046d3 <f_lseek+0xc7>
c0004697:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000469a:	85 c0                	test   eax,eax
c000469c:	75 32                	jne    c00046d0 <f_lseek+0xc4>
c000469e:	31 d2                	xor    edx,edx
c00046a0:	89 d8                	mov    eax,ebx
c00046a2:	e8 ed ee ff ff       	call   c0003594 <create_chain>
c00046a7:	83 f8 01             	cmp    eax,0x1
c00046aa:	75 0e                	jne    c00046ba <f_lseek+0xae>
c00046ac:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00046b0:	bd 02 00 00 00       	mov    ebp,0x2
c00046b5:	e9 f9 00 00 00       	jmp    c00047b3 <f_lseek+0x1a7>
c00046ba:	83 f8 ff             	cmp    eax,0xffffffff
c00046bd:	75 0e                	jne    c00046cd <f_lseek+0xc1>
c00046bf:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00046c3:	bd 01 00 00 00       	mov    ebp,0x1
c00046c8:	e9 e6 00 00 00       	jmp    c00047b3 <f_lseek+0x1a7>
c00046cd:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046d0:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00046d3:	85 c0                	test   eax,eax
c00046d5:	74 82                	je     c0004659 <f_lseek+0x4d>
c00046d7:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00046da:	39 fe                	cmp    esi,edi
c00046dc:	76 3d                	jbe    c000471b <f_lseek+0x10f>
c00046de:	01 fa                	add    edx,edi
c00046e0:	29 fe                	sub    esi,edi
c00046e2:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00046e5:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00046e9:	89 c2                	mov    edx,eax
c00046eb:	74 0d                	je     c00046fa <f_lseek+0xee>
c00046ed:	89 d8                	mov    eax,ebx
c00046ef:	e8 a0 ee ff ff       	call   c0003594 <create_chain>
c00046f4:	85 c0                	test   eax,eax
c00046f6:	75 09                	jne    c0004701 <f_lseek+0xf5>
c00046f8:	eb 1f                	jmp    c0004719 <f_lseek+0x10d>
c00046fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00046fc:	e8 c7 ec ff ff       	call   c00033c8 <get_fat.isra.2>
c0004701:	83 f8 ff             	cmp    eax,0xffffffff
c0004704:	74 b9                	je     c00046bf <f_lseek+0xb3>
c0004706:	83 f8 01             	cmp    eax,0x1
c0004709:	76 a1                	jbe    c00046ac <f_lseek+0xa0>
c000470b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000470f:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004712:	76 98                	jbe    c00046ac <f_lseek+0xa0>
c0004714:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004717:	eb be                	jmp    c00046d7 <f_lseek+0xcb>
c0004719:	31 f6                	xor    esi,esi
c000471b:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000471e:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004724:	0f 84 2f ff ff ff    	je     c0004659 <f_lseek+0x4d>
c000472a:	89 c2                	mov    edx,eax
c000472c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004730:	e8 ad da ff ff       	call   c00021e2 <clst2sect>
c0004735:	85 c0                	test   eax,eax
c0004737:	0f 84 6f ff ff ff    	je     c00046ac <f_lseek+0xa0>
c000473d:	c1 ee 09             	shr    esi,0x9
c0004740:	01 c6                	add    esi,eax
c0004742:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004745:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004748:	76 0c                	jbe    c0004756 <f_lseek+0x14a>
c000474a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000474d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004750:	83 ca 40             	or     edx,0x40
c0004753:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004756:	a9 ff 01 00 00       	test   eax,0x1ff
c000475b:	74 56                	je     c00047b3 <f_lseek+0x1a7>
c000475d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004760:	39 f0                	cmp    eax,esi
c0004762:	74 4f                	je     c00047b3 <f_lseek+0x1a7>
c0004764:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004767:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000476b:	74 26                	je     c0004793 <f_lseek+0x187>
c000476d:	6a 01                	push   0x1
c000476f:	50                   	push   eax
c0004770:	57                   	push   edi
c0004771:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004775:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004779:	50                   	push   eax
c000477a:	e8 d7 d7 ff ff       	call   c0001f56 <disk_write>
c000477f:	83 c4 10             	add    esp,0x10
c0004782:	85 c0                	test   eax,eax
c0004784:	0f 85 35 ff ff ff    	jne    c00046bf <f_lseek+0xb3>
c000478a:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000478d:	83 e0 7f             	and    eax,0x7f
c0004790:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004793:	6a 01                	push   0x1
c0004795:	56                   	push   esi
c0004796:	57                   	push   edi
c0004797:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000479b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000479f:	50                   	push   eax
c00047a0:	e8 9b d7 ff ff       	call   c0001f40 <disk_read>
c00047a5:	83 c4 10             	add    esp,0x10
c00047a8:	85 c0                	test   eax,eax
c00047aa:	0f 85 0f ff ff ff    	jne    c00046bf <f_lseek+0xb3>
c00047b0:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00047b3:	83 c4 2c             	add    esp,0x2c
c00047b6:	89 e8                	mov    eax,ebp
c00047b8:	5b                   	pop    ebx
c00047b9:	5e                   	pop    esi
c00047ba:	5f                   	pop    edi
c00047bb:	5d                   	pop    ebp
c00047bc:	c3                   	ret    

c00047bd <f_opendir>:
c00047bd:	56                   	push   esi
c00047be:	b8 09 00 00 00       	mov    eax,0x9
c00047c3:	53                   	push   ebx
c00047c4:	83 ec 24             	sub    esp,0x24
c00047c7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00047cb:	85 db                	test   ebx,ebx
c00047cd:	0f 84 af 00 00 00    	je     c0004882 <f_opendir+0xc5>
c00047d3:	31 c9                	xor    ecx,ecx
c00047d5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00047d9:	8d 44 24 34          	lea    eax,[esp+0x34]
c00047dd:	e8 63 de ff ff       	call   c0002645 <mount_volume>
c00047e2:	85 c0                	test   eax,eax
c00047e4:	0f 85 92 00 00 00    	jne    c000487c <f_opendir+0xbf>
c00047ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047ee:	83 ec 0c             	sub    esp,0xc
c00047f1:	89 03                	mov    DWORD PTR [ebx],eax
c00047f3:	68 00 02 00 00       	push   0x200
c00047f8:	e8 d7 15 00 00       	call   c0005dd4 <ff_memalloc>
c00047fd:	83 c4 10             	add    esp,0x10
c0004800:	89 c6                	mov    esi,eax
c0004802:	b8 11 00 00 00       	mov    eax,0x11
c0004807:	85 f6                	test   esi,esi
c0004809:	74 77                	je     c0004882 <f_opendir+0xc5>
c000480b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000480f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004813:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004816:	89 d8                	mov    eax,ebx
c0004818:	e8 72 f3 ff ff       	call   c0003b8f <follow_path>
c000481d:	85 c0                	test   eax,eax
c000481f:	75 37                	jne    c0004858 <f_opendir+0x9b>
c0004821:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004825:	75 1c                	jne    c0004843 <f_opendir+0x86>
c0004827:	b8 05 00 00 00       	mov    eax,0x5
c000482c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004830:	74 26                	je     c0004858 <f_opendir+0x9b>
c0004832:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004835:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004839:	8a 00                	mov    al,BYTE PTR [eax]
c000483b:	e8 37 eb ff ff       	call   c0003377 <ld_clust.isra.0>
c0004840:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004843:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004847:	31 d2                	xor    edx,edx
c0004849:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000484d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004851:	89 d8                	mov    eax,ebx
c0004853:	e8 74 ec ff ff       	call   c00034cc <dir_sdi>
c0004858:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000485c:	83 ec 0c             	sub    esp,0xc
c000485f:	56                   	push   esi
c0004860:	e8 87 15 00 00       	call   c0005dec <ff_memfree>
c0004865:	83 c4 10             	add    esp,0x10
c0004868:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000486c:	83 f8 04             	cmp    eax,0x4
c000486f:	74 06                	je     c0004877 <f_opendir+0xba>
c0004871:	85 c0                	test   eax,eax
c0004873:	74 0d                	je     c0004882 <f_opendir+0xc5>
c0004875:	eb 05                	jmp    c000487c <f_opendir+0xbf>
c0004877:	b8 05 00 00 00       	mov    eax,0x5
c000487c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004882:	83 c4 24             	add    esp,0x24
c0004885:	5b                   	pop    ebx
c0004886:	5e                   	pop    esi
c0004887:	c3                   	ret    

c0004888 <f_closedir>:
c0004888:	53                   	push   ebx
c0004889:	83 ec 18             	sub    esp,0x18
c000488c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004890:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004894:	89 d8                	mov    eax,ebx
c0004896:	e8 ae db ff ff       	call   c0002449 <validate>
c000489b:	85 c0                	test   eax,eax
c000489d:	75 06                	jne    c00048a5 <f_closedir+0x1d>
c000489f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048a5:	83 c4 18             	add    esp,0x18
c00048a8:	5b                   	pop    ebx
c00048a9:	c3                   	ret    

c00048aa <f_readdir>:
c00048aa:	57                   	push   edi
c00048ab:	56                   	push   esi
c00048ac:	53                   	push   ebx
c00048ad:	83 ec 20             	sub    esp,0x20
c00048b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00048b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00048b8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048bc:	89 d8                	mov    eax,ebx
c00048be:	e8 86 db ff ff       	call   c0002449 <validate>
c00048c3:	85 c0                	test   eax,eax
c00048c5:	75 6e                	jne    c0004935 <f_readdir+0x8b>
c00048c7:	85 ff                	test   edi,edi
c00048c9:	75 0b                	jne    c00048d6 <f_readdir+0x2c>
c00048cb:	31 d2                	xor    edx,edx
c00048cd:	89 d8                	mov    eax,ebx
c00048cf:	e8 f8 eb ff ff       	call   c00034cc <dir_sdi>
c00048d4:	eb 5f                	jmp    c0004935 <f_readdir+0x8b>
c00048d6:	83 ec 0c             	sub    esp,0xc
c00048d9:	68 00 02 00 00       	push   0x200
c00048de:	e8 f1 14 00 00       	call   c0005dd4 <ff_memalloc>
c00048e3:	83 c4 10             	add    esp,0x10
c00048e6:	89 c6                	mov    esi,eax
c00048e8:	b8 11 00 00 00       	mov    eax,0x11
c00048ed:	85 f6                	test   esi,esi
c00048ef:	74 44                	je     c0004935 <f_readdir+0x8b>
c00048f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048f5:	31 d2                	xor    edx,edx
c00048f7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00048fa:	89 d8                	mov    eax,ebx
c00048fc:	e8 ca ef ff ff       	call   c00038cb <dir_read>
c0004901:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004906:	75 19                	jne    c0004921 <f_readdir+0x77>
c0004908:	89 fa                	mov    edx,edi
c000490a:	89 d8                	mov    eax,ebx
c000490c:	e8 70 e8 ff ff       	call   c0003181 <get_fileinfo>
c0004911:	31 d2                	xor    edx,edx
c0004913:	89 d8                	mov    eax,ebx
c0004915:	e8 47 ee ff ff       	call   c0003761 <dir_next>
c000491a:	83 f8 04             	cmp    eax,0x4
c000491d:	75 02                	jne    c0004921 <f_readdir+0x77>
c000491f:	31 c0                	xor    eax,eax
c0004921:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004925:	83 ec 0c             	sub    esp,0xc
c0004928:	56                   	push   esi
c0004929:	e8 be 14 00 00       	call   c0005dec <ff_memfree>
c000492e:	83 c4 10             	add    esp,0x10
c0004931:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004935:	83 c4 20             	add    esp,0x20
c0004938:	5b                   	pop    ebx
c0004939:	5e                   	pop    esi
c000493a:	5f                   	pop    edi
c000493b:	c3                   	ret    

c000493c <f_stat>:
c000493c:	57                   	push   edi
c000493d:	31 c9                	xor    ecx,ecx
c000493f:	56                   	push   esi
c0004940:	53                   	push   ebx
c0004941:	83 ec 30             	sub    esp,0x30
c0004944:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004948:	89 e2                	mov    edx,esp
c000494a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000494e:	e8 f2 dc ff ff       	call   c0002645 <mount_volume>
c0004953:	89 c3                	mov    ebx,eax
c0004955:	85 c0                	test   eax,eax
c0004957:	75 59                	jne    c00049b2 <f_stat+0x76>
c0004959:	83 ec 0c             	sub    esp,0xc
c000495c:	bb 11 00 00 00       	mov    ebx,0x11
c0004961:	68 00 02 00 00       	push   0x200
c0004966:	e8 69 14 00 00       	call   c0005dd4 <ff_memalloc>
c000496b:	83 c4 10             	add    esp,0x10
c000496e:	89 c6                	mov    esi,eax
c0004970:	85 c0                	test   eax,eax
c0004972:	74 3e                	je     c00049b2 <f_stat+0x76>
c0004974:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004977:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000497b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000497e:	89 e0                	mov    eax,esp
c0004980:	e8 0a f2 ff ff       	call   c0003b8f <follow_path>
c0004985:	89 c3                	mov    ebx,eax
c0004987:	85 c0                	test   eax,eax
c0004989:	75 1b                	jne    c00049a6 <f_stat+0x6a>
c000498b:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004990:	75 0f                	jne    c00049a1 <f_stat+0x65>
c0004992:	85 ff                	test   edi,edi
c0004994:	74 10                	je     c00049a6 <f_stat+0x6a>
c0004996:	89 fa                	mov    edx,edi
c0004998:	89 e0                	mov    eax,esp
c000499a:	e8 e2 e7 ff ff       	call   c0003181 <get_fileinfo>
c000499f:	eb 05                	jmp    c00049a6 <f_stat+0x6a>
c00049a1:	bb 06 00 00 00       	mov    ebx,0x6
c00049a6:	83 ec 0c             	sub    esp,0xc
c00049a9:	56                   	push   esi
c00049aa:	e8 3d 14 00 00       	call   c0005dec <ff_memfree>
c00049af:	83 c4 10             	add    esp,0x10
c00049b2:	83 c4 30             	add    esp,0x30
c00049b5:	89 d8                	mov    eax,ebx
c00049b7:	5b                   	pop    ebx
c00049b8:	5e                   	pop    esi
c00049b9:	5f                   	pop    edi
c00049ba:	c3                   	ret    

c00049bb <f_getfree>:
c00049bb:	55                   	push   ebp
c00049bc:	31 c9                	xor    ecx,ecx
c00049be:	57                   	push   edi
c00049bf:	56                   	push   esi
c00049c0:	53                   	push   ebx
c00049c1:	83 ec 2c             	sub    esp,0x2c
c00049c4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00049c8:	8d 44 24 40          	lea    eax,[esp+0x40]
c00049cc:	e8 74 dc ff ff       	call   c0002645 <mount_volume>
c00049d1:	89 c7                	mov    edi,eax
c00049d3:	85 c0                	test   eax,eax
c00049d5:	0f 85 df 00 00 00    	jne    c0004aba <f_getfree+0xff>
c00049db:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00049df:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00049e3:	89 30                	mov    DWORD PTR [eax],esi
c00049e5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00049e8:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00049eb:	8d 55 fe             	lea    edx,[ebp-0x2]
c00049ee:	39 d0                	cmp    eax,edx
c00049f0:	77 0b                	ja     c00049fd <f_getfree+0x42>
c00049f2:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00049f6:	89 01                	mov    DWORD PTR [ecx],eax
c00049f8:	e9 bd 00 00 00       	jmp    c0004aba <f_getfree+0xff>
c00049fd:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004a00:	75 29                	jne    c0004a2b <f_getfree+0x70>
c0004a02:	bd 02 00 00 00       	mov    ebp,0x2
c0004a07:	31 db                	xor    ebx,ebx
c0004a09:	89 ea                	mov    edx,ebp
c0004a0b:	89 f0                	mov    eax,esi
c0004a0d:	e8 b6 e9 ff ff       	call   c00033c8 <get_fat.isra.2>
c0004a12:	83 f8 ff             	cmp    eax,0xffffffff
c0004a15:	74 7d                	je     c0004a94 <f_getfree+0xd9>
c0004a17:	83 f8 01             	cmp    eax,0x1
c0004a1a:	74 7f                	je     c0004a9b <f_getfree+0xe0>
c0004a1c:	83 d3 00             	adc    ebx,0x0
c0004a1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a23:	45                   	inc    ebp
c0004a24:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004a27:	77 e0                	ja     c0004a09 <f_getfree+0x4e>
c0004a29:	eb 79                	jmp    c0004aa4 <f_getfree+0xe9>
c0004a2b:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004a2e:	31 db                	xor    ebx,ebx
c0004a30:	31 f6                	xor    esi,esi
c0004a32:	85 f6                	test   esi,esi
c0004a34:	75 18                	jne    c0004a4e <f_getfree+0x93>
c0004a36:	8d 42 01             	lea    eax,[edx+0x1]
c0004a39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a41:	e8 ac da ff ff       	call   c00024f2 <move_window>
c0004a46:	85 c0                	test   eax,eax
c0004a48:	75 58                	jne    c0004aa2 <f_getfree+0xe7>
c0004a4a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a4e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004a52:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004a56:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004a5a:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004a5d:	75 13                	jne    c0004a72 <f_getfree+0xb7>
c0004a5f:	e8 27 d5 ff ff       	call   c0001f8b <ld_word>
c0004a64:	0f b7 c0             	movzx  eax,ax
c0004a67:	83 f8 01             	cmp    eax,0x1
c0004a6a:	83 d3 00             	adc    ebx,0x0
c0004a6d:	83 c6 02             	add    esi,0x2
c0004a70:	eb 13                	jmp    c0004a85 <f_getfree+0xca>
c0004a72:	e8 21 d5 ff ff       	call   c0001f98 <ld_dword>
c0004a77:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004a7c:	83 f8 01             	cmp    eax,0x1
c0004a7f:	83 d3 00             	adc    ebx,0x0
c0004a82:	83 c6 04             	add    esi,0x4
c0004a85:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004a8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a8f:	4d                   	dec    ebp
c0004a90:	75 a0                	jne    c0004a32 <f_getfree+0x77>
c0004a92:	eb 10                	jmp    c0004aa4 <f_getfree+0xe9>
c0004a94:	bf 01 00 00 00       	mov    edi,0x1
c0004a99:	eb 09                	jmp    c0004aa4 <f_getfree+0xe9>
c0004a9b:	bf 02 00 00 00       	mov    edi,0x2
c0004aa0:	eb 02                	jmp    c0004aa4 <f_getfree+0xe9>
c0004aa2:	89 c7                	mov    edi,eax
c0004aa4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004aa8:	89 18                	mov    DWORD PTR [eax],ebx
c0004aaa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004aae:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004ab1:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004ab4:	83 ca 01             	or     edx,0x1
c0004ab7:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004aba:	83 c4 2c             	add    esp,0x2c
c0004abd:	89 f8                	mov    eax,edi
c0004abf:	5b                   	pop    ebx
c0004ac0:	5e                   	pop    esi
c0004ac1:	5f                   	pop    edi
c0004ac2:	5d                   	pop    ebp
c0004ac3:	c3                   	ret    

c0004ac4 <f_truncate>:
c0004ac4:	56                   	push   esi
c0004ac5:	53                   	push   ebx
c0004ac6:	83 ec 14             	sub    esp,0x14
c0004ac9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004acd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ad1:	89 d8                	mov    eax,ebx
c0004ad3:	e8 71 d9 ff ff       	call   c0002449 <validate>
c0004ad8:	89 c6                	mov    esi,eax
c0004ada:	85 c0                	test   eax,eax
c0004adc:	0f 85 c4 00 00 00    	jne    c0004ba6 <f_truncate+0xe2>
c0004ae2:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004ae6:	85 f6                	test   esi,esi
c0004ae8:	0f 85 b8 00 00 00    	jne    c0004ba6 <f_truncate+0xe2>
c0004aee:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004af2:	0f 84 a9 00 00 00    	je     c0004ba1 <f_truncate+0xdd>
c0004af8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004afb:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004afe:	0f 83 a2 00 00 00    	jae    c0004ba6 <f_truncate+0xe2>
c0004b04:	85 c0                	test   eax,eax
c0004b06:	75 15                	jne    c0004b1d <f_truncate+0x59>
c0004b08:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b0b:	31 c9                	xor    ecx,ecx
c0004b0d:	89 d8                	mov    eax,ebx
c0004b0f:	e8 bf eb ff ff       	call   c00036d3 <remove_chain>
c0004b14:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b1b:	eb 35                	jmp    c0004b52 <f_truncate+0x8e>
c0004b1d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b20:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b22:	e8 a1 e8 ff ff       	call   c00033c8 <get_fat.isra.2>
c0004b27:	89 c2                	mov    edx,eax
c0004b29:	b8 01 00 00 00       	mov    eax,0x1
c0004b2e:	83 fa ff             	cmp    edx,0xffffffff
c0004b31:	74 1f                	je     c0004b52 <f_truncate+0x8e>
c0004b33:	b8 02 00 00 00       	mov    eax,0x2
c0004b38:	83 fa 01             	cmp    edx,0x1
c0004b3b:	74 15                	je     c0004b52 <f_truncate+0x8e>
c0004b3d:	31 c0                	xor    eax,eax
c0004b3f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b43:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b46:	76 0a                	jbe    c0004b52 <f_truncate+0x8e>
c0004b48:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b4b:	89 d8                	mov    eax,ebx
c0004b4d:	e8 81 eb ff ff       	call   c00036d3 <remove_chain>
c0004b52:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004b55:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004b58:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004b5b:	83 ca 40             	or     edx,0x40
c0004b5e:	85 c0                	test   eax,eax
c0004b60:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004b63:	75 35                	jne    c0004b9a <f_truncate+0xd6>
c0004b65:	80 e2 80             	and    dl,0x80
c0004b68:	74 3c                	je     c0004ba6 <f_truncate+0xe2>
c0004b6a:	6a 01                	push   0x1
c0004b6c:	8d 43 28             	lea    eax,[ebx+0x28]
c0004b6f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004b72:	50                   	push   eax
c0004b73:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004b77:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004b7b:	50                   	push   eax
c0004b7c:	e8 d5 d3 ff ff       	call   c0001f56 <disk_write>
c0004b81:	83 c4 10             	add    esp,0x10
c0004b84:	85 c0                	test   eax,eax
c0004b86:	75 0d                	jne    c0004b95 <f_truncate+0xd1>
c0004b88:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004b8b:	31 f6                	xor    esi,esi
c0004b8d:	83 e0 7f             	and    eax,0x7f
c0004b90:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004b93:	eb 11                	jmp    c0004ba6 <f_truncate+0xe2>
c0004b95:	b8 01 00 00 00       	mov    eax,0x1
c0004b9a:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004b9d:	89 c6                	mov    esi,eax
c0004b9f:	eb 05                	jmp    c0004ba6 <f_truncate+0xe2>
c0004ba1:	be 07 00 00 00       	mov    esi,0x7
c0004ba6:	89 f0                	mov    eax,esi
c0004ba8:	83 c4 14             	add    esp,0x14
c0004bab:	5b                   	pop    ebx
c0004bac:	5e                   	pop    esi
c0004bad:	c3                   	ret    

c0004bae <f_unlink>:
c0004bae:	55                   	push   ebp
c0004baf:	b9 02 00 00 00       	mov    ecx,0x2
c0004bb4:	57                   	push   edi
c0004bb5:	56                   	push   esi
c0004bb6:	53                   	push   ebx
c0004bb7:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004bbd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004bc1:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004bc8:	e8 78 da ff ff       	call   c0002645 <mount_volume>
c0004bcd:	85 c0                	test   eax,eax
c0004bcf:	0f 85 f0 00 00 00    	jne    c0004cc5 <f_unlink+0x117>
c0004bd5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bd9:	83 ec 0c             	sub    esp,0xc
c0004bdc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004be0:	68 00 02 00 00       	push   0x200
c0004be5:	e8 ea 11 00 00       	call   c0005dd4 <ff_memalloc>
c0004bea:	83 c4 10             	add    esp,0x10
c0004bed:	89 c3                	mov    ebx,eax
c0004bef:	b8 11 00 00 00       	mov    eax,0x11
c0004bf4:	85 db                	test   ebx,ebx
c0004bf6:	0f 84 c9 00 00 00    	je     c0004cc5 <f_unlink+0x117>
c0004bfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c00:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c07:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c0a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c0e:	e8 7c ef ff ff       	call   c0003b8f <follow_path>
c0004c13:	85 c0                	test   eax,eax
c0004c15:	0f 85 96 00 00 00    	jne    c0004cb1 <f_unlink+0x103>
c0004c1b:	b8 06 00 00 00       	mov    eax,0x6
c0004c20:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c25:	0f 85 86 00 00 00    	jne    c0004cb1 <f_unlink+0x103>
c0004c2b:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c30:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c36:	74 07                	je     c0004c3f <f_unlink+0x91>
c0004c38:	b8 07 00 00 00       	mov    eax,0x7
c0004c3d:	eb 72                	jmp    c0004cb1 <f_unlink+0x103>
c0004c3f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c43:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c47:	8a 07                	mov    al,BYTE PTR [edi]
c0004c49:	e8 29 e7 ff ff       	call   c0003377 <ld_clust.isra.0>
c0004c4e:	83 e5 10             	and    ebp,0x10
c0004c51:	89 c6                	mov    esi,eax
c0004c53:	75 0f                	jne    c0004c64 <f_unlink+0xb6>
c0004c55:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c59:	e8 95 ed ff ff       	call   c00039f3 <dir_remove>
c0004c5e:	85 c0                	test   eax,eax
c0004c60:	74 2f                	je     c0004c91 <f_unlink+0xe3>
c0004c62:	eb 4d                	jmp    c0004cb1 <f_unlink+0x103>
c0004c64:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004c68:	31 d2                	xor    edx,edx
c0004c6a:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004c6e:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004c72:	e8 55 e8 ff ff       	call   c00034cc <dir_sdi>
c0004c77:	85 c0                	test   eax,eax
c0004c79:	75 36                	jne    c0004cb1 <f_unlink+0x103>
c0004c7b:	31 d2                	xor    edx,edx
c0004c7d:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004c81:	e8 45 ec ff ff       	call   c00038cb <dir_read>
c0004c86:	85 c0                	test   eax,eax
c0004c88:	74 ae                	je     c0004c38 <f_unlink+0x8a>
c0004c8a:	83 f8 04             	cmp    eax,0x4
c0004c8d:	75 22                	jne    c0004cb1 <f_unlink+0x103>
c0004c8f:	eb c4                	jmp    c0004c55 <f_unlink+0xa7>
c0004c91:	85 f6                	test   esi,esi
c0004c93:	75 0b                	jne    c0004ca0 <f_unlink+0xf2>
c0004c95:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c99:	e8 8b e2 ff ff       	call   c0002f29 <sync_fs>
c0004c9e:	eb 11                	jmp    c0004cb1 <f_unlink+0x103>
c0004ca0:	31 c9                	xor    ecx,ecx
c0004ca2:	89 f2                	mov    edx,esi
c0004ca4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ca8:	e8 26 ea ff ff       	call   c00036d3 <remove_chain>
c0004cad:	85 c0                	test   eax,eax
c0004caf:	74 e4                	je     c0004c95 <f_unlink+0xe7>
c0004cb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cb5:	83 ec 0c             	sub    esp,0xc
c0004cb8:	53                   	push   ebx
c0004cb9:	e8 2e 11 00 00       	call   c0005dec <ff_memfree>
c0004cbe:	83 c4 10             	add    esp,0x10
c0004cc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc5:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004ccb:	5b                   	pop    ebx
c0004ccc:	5e                   	pop    esi
c0004ccd:	5f                   	pop    edi
c0004cce:	5d                   	pop    ebp
c0004ccf:	c3                   	ret    

c0004cd0 <f_mkdir>:
c0004cd0:	57                   	push   edi
c0004cd1:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd6:	56                   	push   esi
c0004cd7:	53                   	push   ebx
c0004cd8:	83 ec 50             	sub    esp,0x50
c0004cdb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cdf:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004ce3:	e8 5d d9 ff ff       	call   c0002645 <mount_volume>
c0004ce8:	89 c3                	mov    ebx,eax
c0004cea:	85 c0                	test   eax,eax
c0004cec:	0f 85 70 01 00 00    	jne    c0004e62 <f_mkdir+0x192>
c0004cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf6:	bb 11 00 00 00       	mov    ebx,0x11
c0004cfb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004cff:	83 ec 0c             	sub    esp,0xc
c0004d02:	68 00 02 00 00       	push   0x200
c0004d07:	e8 c8 10 00 00       	call   c0005dd4 <ff_memalloc>
c0004d0c:	83 c4 10             	add    esp,0x10
c0004d0f:	89 c7                	mov    edi,eax
c0004d11:	85 c0                	test   eax,eax
c0004d13:	0f 84 49 01 00 00    	je     c0004e62 <f_mkdir+0x192>
c0004d19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d1d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d21:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d24:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d28:	e8 62 ee ff ff       	call   c0003b8f <follow_path>
c0004d2d:	89 c3                	mov    ebx,eax
c0004d2f:	85 c0                	test   eax,eax
c0004d31:	74 3e                	je     c0004d71 <f_mkdir+0xa1>
c0004d33:	83 f8 04             	cmp    eax,0x4
c0004d36:	75 3e                	jne    c0004d76 <f_mkdir+0xa6>
c0004d38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d3c:	31 d2                	xor    edx,edx
c0004d3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d46:	e8 49 e8 ff ff       	call   c0003594 <create_chain>
c0004d4b:	89 c6                	mov    esi,eax
c0004d4d:	85 c0                	test   eax,eax
c0004d4f:	74 0c                	je     c0004d5d <f_mkdir+0x8d>
c0004d51:	bb 02 00 00 00       	mov    ebx,0x2
c0004d56:	83 f8 01             	cmp    eax,0x1
c0004d59:	74 07                	je     c0004d62 <f_mkdir+0x92>
c0004d5b:	eb 2a                	jmp    c0004d87 <f_mkdir+0xb7>
c0004d5d:	bb 07 00 00 00       	mov    ebx,0x7
c0004d62:	31 c9                	xor    ecx,ecx
c0004d64:	89 f2                	mov    edx,esi
c0004d66:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d6a:	e8 64 e9 ff ff       	call   c00036d3 <remove_chain>
c0004d6f:	eb 05                	jmp    c0004d76 <f_mkdir+0xa6>
c0004d71:	bb 08 00 00 00       	mov    ebx,0x8
c0004d76:	83 ec 0c             	sub    esp,0xc
c0004d79:	57                   	push   edi
c0004d7a:	e8 6d 10 00 00       	call   c0005dec <ff_memfree>
c0004d7f:	83 c4 10             	add    esp,0x10
c0004d82:	e9 db 00 00 00       	jmp    c0004e62 <f_mkdir+0x192>
c0004d87:	bb 01 00 00 00       	mov    ebx,0x1
c0004d8c:	83 f8 ff             	cmp    eax,0xffffffff
c0004d8f:	74 d1                	je     c0004d62 <f_mkdir+0x92>
c0004d91:	89 f2                	mov    edx,esi
c0004d93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d97:	e8 f1 dc ff ff       	call   c0002a8d <dir_clear>
c0004d9c:	89 c3                	mov    ebx,eax
c0004d9e:	85 c0                	test   eax,eax
c0004da0:	75 c0                	jne    c0004d62 <f_mkdir+0x92>
c0004da2:	b9 0b 00 00 00       	mov    ecx,0xb
c0004da7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dab:	ba 20 00 00 00       	mov    edx,0x20
c0004db0:	83 c0 34             	add    eax,0x34
c0004db3:	e8 14 d2 ff ff       	call   c0001fcc <mem_set>
c0004db8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dbc:	ba 00 00 21 50       	mov    edx,0x50210000
c0004dc1:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004dc5:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004dc9:	83 c0 4a             	add    eax,0x4a
c0004dcc:	e8 e3 d1 ff ff       	call   c0001fb4 <st_dword>
c0004dd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dd5:	89 f1                	mov    ecx,esi
c0004dd7:	8d 50 34             	lea    edx,[eax+0x34]
c0004dda:	e8 c1 e5 ff ff       	call   c00033a0 <st_clust.isra.1>
c0004ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de3:	b9 20 00 00 00       	mov    ecx,0x20
c0004de8:	8d 50 34             	lea    edx,[eax+0x34]
c0004deb:	83 c0 54             	add    eax,0x54
c0004dee:	e8 c4 d1 ff ff       	call   c0001fb7 <mem_cpy>
c0004df3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004dfb:	8d 50 54             	lea    edx,[eax+0x54]
c0004dfe:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e02:	e8 99 e5 ff ff       	call   c00033a0 <st_clust.isra.1>
c0004e07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e0f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e13:	e8 0c ee ff ff       	call   c0003c24 <dir_register>
c0004e18:	89 c3                	mov    ebx,eax
c0004e1a:	85 c0                	test   eax,eax
c0004e1c:	0f 85 40 ff ff ff    	jne    c0004d62 <f_mkdir+0x92>
c0004e22:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e26:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e2b:	83 c0 16             	add    eax,0x16
c0004e2e:	e8 81 d1 ff ff       	call   c0001fb4 <st_dword>
c0004e33:	89 f1                	mov    ecx,esi
c0004e35:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3d:	e8 5e e5 ff ff       	call   c00033a0 <st_clust.isra.1>
c0004e42:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e46:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e56:	e8 ce e0 ff ff       	call   c0002f29 <sync_fs>
c0004e5b:	89 c3                	mov    ebx,eax
c0004e5d:	e9 14 ff ff ff       	jmp    c0004d76 <f_mkdir+0xa6>
c0004e62:	83 c4 50             	add    esp,0x50
c0004e65:	89 d8                	mov    eax,ebx
c0004e67:	5b                   	pop    ebx
c0004e68:	5e                   	pop    esi
c0004e69:	5f                   	pop    edi
c0004e6a:	c3                   	ret    

c0004e6b <f_rename>:
c0004e6b:	57                   	push   edi
c0004e6c:	56                   	push   esi
c0004e6d:	53                   	push   ebx
c0004e6e:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004e74:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004e7b:	e8 7c d5 ff ff       	call   c00023fc <get_ldnumber>
c0004e80:	b9 02 00 00 00       	mov    ecx,0x2
c0004e85:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e89:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004e90:	e8 b0 d7 ff ff       	call   c0002645 <mount_volume>
c0004e95:	85 c0                	test   eax,eax
c0004e97:	0f 85 7c 01 00 00    	jne    c0005019 <f_rename+0x1ae>
c0004e9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ea1:	83 ec 0c             	sub    esp,0xc
c0004ea4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ea8:	68 00 02 00 00       	push   0x200
c0004ead:	e8 22 0f 00 00       	call   c0005dd4 <ff_memalloc>
c0004eb2:	83 c4 10             	add    esp,0x10
c0004eb5:	89 c6                	mov    esi,eax
c0004eb7:	b8 11 00 00 00       	mov    eax,0x11
c0004ebc:	85 f6                	test   esi,esi
c0004ebe:	0f 84 55 01 00 00    	je     c0005019 <f_rename+0x1ae>
c0004ec4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ec8:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004ecf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ed2:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ed6:	e8 b4 ec ff ff       	call   c0003b8f <follow_path>
c0004edb:	85 c0                	test   eax,eax
c0004edd:	0f 85 22 01 00 00    	jne    c0005005 <f_rename+0x19a>
c0004ee3:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004ee7:	b8 06 00 00 00       	mov    eax,0x6
c0004eec:	80 e2 a0             	and    dl,0xa0
c0004eef:	0f 85 10 01 00 00    	jne    c0005005 <f_rename+0x19a>
c0004ef5:	b9 20 00 00 00       	mov    ecx,0x20
c0004efa:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004efe:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f02:	e8 b0 d0 ff ff       	call   c0001fb7 <mem_cpy>
c0004f07:	b9 30 00 00 00       	mov    ecx,0x30
c0004f0c:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f10:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f14:	e8 9e d0 ff ff       	call   c0001fb7 <mem_cpy>
c0004f19:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f20:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f24:	e8 66 ec ff ff       	call   c0003b8f <follow_path>
c0004f29:	85 c0                	test   eax,eax
c0004f2b:	75 20                	jne    c0004f4d <f_rename+0xe2>
c0004f2d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f31:	b8 08 00 00 00       	mov    eax,0x8
c0004f36:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f3a:	0f 85 c5 00 00 00    	jne    c0005005 <f_rename+0x19a>
c0004f40:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f44:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f4b:	eb 03                	jmp    c0004f50 <f_rename+0xe5>
c0004f4d:	83 f8 04             	cmp    eax,0x4
c0004f50:	0f 85 af 00 00 00    	jne    c0005005 <f_rename+0x19a>
c0004f56:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f5a:	e8 c5 ec ff ff       	call   c0003c24 <dir_register>
c0004f5f:	85 c0                	test   eax,eax
c0004f61:	0f 85 9e 00 00 00    	jne    c0005005 <f_rename+0x19a>
c0004f67:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004f6e:	b9 13 00 00 00       	mov    ecx,0x13
c0004f73:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004f76:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004f7a:	e8 38 d0 ff ff       	call   c0001fb7 <mem_cpy>
c0004f7f:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004f83:	a8 10                	test   al,0x10
c0004f85:	75 03                	jne    c0004f8a <f_rename+0x11f>
c0004f87:	83 c8 20             	or     eax,0x20
c0004f8a:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004f8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f91:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f95:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004f99:	74 54                	je     c0004fef <f_rename+0x184>
c0004f9b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004f9f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004fa3:	74 4a                	je     c0004fef <f_rename+0x184>
c0004fa5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004fa9:	89 da                	mov    edx,ebx
c0004fab:	8a 07                	mov    al,BYTE PTR [edi]
c0004fad:	e8 c5 e3 ff ff       	call   c0003377 <ld_clust.isra.0>
c0004fb2:	89 c2                	mov    edx,eax
c0004fb4:	89 f8                	mov    eax,edi
c0004fb6:	e8 27 d2 ff ff       	call   c00021e2 <clst2sect>
c0004fbb:	89 c2                	mov    edx,eax
c0004fbd:	b8 02 00 00 00       	mov    eax,0x2
c0004fc2:	85 d2                	test   edx,edx
c0004fc4:	74 3f                	je     c0005005 <f_rename+0x19a>
c0004fc6:	89 f8                	mov    eax,edi
c0004fc8:	e8 25 d5 ff ff       	call   c00024f2 <move_window>
c0004fcd:	85 c0                	test   eax,eax
c0004fcf:	75 34                	jne    c0005005 <f_rename+0x19a>
c0004fd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd5:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004fd9:	75 14                	jne    c0004fef <f_rename+0x184>
c0004fdb:	8d 50 54             	lea    edx,[eax+0x54]
c0004fde:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004fe2:	e8 b9 e3 ff ff       	call   c00033a0 <st_clust.isra.1>
c0004fe7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004feb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fef:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ff3:	e8 fb e9 ff ff       	call   c00039f3 <dir_remove>
c0004ff8:	85 c0                	test   eax,eax
c0004ffa:	75 09                	jne    c0005005 <f_rename+0x19a>
c0004ffc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005000:	e8 24 df ff ff       	call   c0002f29 <sync_fs>
c0005005:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005009:	83 ec 0c             	sub    esp,0xc
c000500c:	56                   	push   esi
c000500d:	e8 da 0d 00 00       	call   c0005dec <ff_memfree>
c0005012:	83 c4 10             	add    esp,0x10
c0005015:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005019:	81 c4 a0 00 00 00    	add    esp,0xa0
c000501f:	5b                   	pop    ebx
c0005020:	5e                   	pop    esi
c0005021:	5f                   	pop    edi
c0005022:	c3                   	ret    

c0005023 <f_chmod>:
c0005023:	57                   	push   edi
c0005024:	b9 02 00 00 00       	mov    ecx,0x2
c0005029:	56                   	push   esi
c000502a:	53                   	push   ebx
c000502b:	83 ec 50             	sub    esp,0x50
c000502e:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005032:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0005036:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000503a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000503e:	e8 02 d6 ff ff       	call   c0002645 <mount_volume>
c0005043:	85 c0                	test   eax,eax
c0005045:	0f 85 81 00 00 00    	jne    c00050cc <f_chmod+0xa9>
c000504b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000504f:	83 ec 0c             	sub    esp,0xc
c0005052:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005056:	68 00 02 00 00       	push   0x200
c000505b:	e8 74 0d 00 00       	call   c0005dd4 <ff_memalloc>
c0005060:	83 c4 10             	add    esp,0x10
c0005063:	89 c6                	mov    esi,eax
c0005065:	b8 11 00 00 00       	mov    eax,0x11
c000506a:	85 f6                	test   esi,esi
c000506c:	74 5e                	je     c00050cc <f_chmod+0xa9>
c000506e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005072:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005076:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005079:	8d 44 24 20          	lea    eax,[esp+0x20]
c000507d:	e8 0d eb ff ff       	call   c0003b8f <follow_path>
c0005082:	85 c0                	test   eax,eax
c0005084:	75 32                	jne    c00050b8 <f_chmod+0x95>
c0005086:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c000508a:	b8 06 00 00 00       	mov    eax,0x6
c000508f:	80 e2 a0             	and    dl,0xa0
c0005092:	75 24                	jne    c00050b8 <f_chmod+0x95>
c0005094:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005098:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c000509b:	31 d7                	xor    edi,edx
c000509d:	21 fb                	and    ebx,edi
c000509f:	83 e3 27             	and    ebx,0x27
c00050a2:	31 d3                	xor    ebx,edx
c00050a4:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ab:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050b3:	e8 71 de ff ff       	call   c0002f29 <sync_fs>
c00050b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050bc:	83 ec 0c             	sub    esp,0xc
c00050bf:	56                   	push   esi
c00050c0:	e8 27 0d 00 00       	call   c0005dec <ff_memfree>
c00050c5:	83 c4 10             	add    esp,0x10
c00050c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050cc:	83 c4 50             	add    esp,0x50
c00050cf:	5b                   	pop    ebx
c00050d0:	5e                   	pop    esi
c00050d1:	5f                   	pop    edi
c00050d2:	c3                   	ret    

c00050d3 <f_utime>:
c00050d3:	56                   	push   esi
c00050d4:	b9 02 00 00 00       	mov    ecx,0x2
c00050d9:	53                   	push   ebx
c00050da:	83 ec 54             	sub    esp,0x54
c00050dd:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00050e1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00050e5:	8d 44 24 60          	lea    eax,[esp+0x60]
c00050e9:	e8 57 d5 ff ff       	call   c0002645 <mount_volume>
c00050ee:	85 c0                	test   eax,eax
c00050f0:	0f 85 87 00 00 00    	jne    c000517d <f_utime+0xaa>
c00050f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050fa:	83 ec 0c             	sub    esp,0xc
c00050fd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005101:	68 00 02 00 00       	push   0x200
c0005106:	e8 c9 0c 00 00       	call   c0005dd4 <ff_memalloc>
c000510b:	83 c4 10             	add    esp,0x10
c000510e:	89 c3                	mov    ebx,eax
c0005110:	b8 11 00 00 00       	mov    eax,0x11
c0005115:	85 db                	test   ebx,ebx
c0005117:	74 64                	je     c000517d <f_utime+0xaa>
c0005119:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000511d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005121:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005124:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005128:	e8 62 ea ff ff       	call   c0003b8f <follow_path>
c000512d:	85 c0                	test   eax,eax
c000512f:	75 38                	jne    c0005169 <f_utime+0x96>
c0005131:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005135:	b8 06 00 00 00       	mov    eax,0x6
c000513a:	80 e2 a0             	and    dl,0xa0
c000513d:	75 2a                	jne    c0005169 <f_utime+0x96>
c000513f:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005143:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0005147:	c1 e2 10             	shl    edx,0x10
c000514a:	09 c2                	or     edx,eax
c000514c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005150:	83 c0 16             	add    eax,0x16
c0005153:	e8 5c ce ff ff       	call   c0001fb4 <st_dword>
c0005158:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000515c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005160:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005164:	e8 c0 dd ff ff       	call   c0002f29 <sync_fs>
c0005169:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000516d:	83 ec 0c             	sub    esp,0xc
c0005170:	53                   	push   ebx
c0005171:	e8 76 0c 00 00       	call   c0005dec <ff_memfree>
c0005176:	83 c4 10             	add    esp,0x10
c0005179:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000517d:	83 c4 54             	add    esp,0x54
c0005180:	5b                   	pop    ebx
c0005181:	5e                   	pop    esi
c0005182:	c3                   	ret    

c0005183 <f_getlabel>:
c0005183:	55                   	push   ebp
c0005184:	31 c9                	xor    ecx,ecx
c0005186:	57                   	push   edi
c0005187:	56                   	push   esi
c0005188:	53                   	push   ebx
c0005189:	83 ec 5c             	sub    esp,0x5c
c000518c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005190:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005194:	e8 ac d4 ff ff       	call   c0002645 <mount_volume>
c0005199:	89 c6                	mov    esi,eax
c000519b:	85 c0                	test   eax,eax
c000519d:	0f 85 27 01 00 00    	jne    c00052ca <f_getlabel+0x147>
c00051a3:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c00051a8:	0f 84 d0 00 00 00    	je     c000527e <f_getlabel+0xfb>
c00051ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051b2:	31 d2                	xor    edx,edx
c00051b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051b8:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051c0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051c4:	e8 03 e3 ff ff       	call   c00034cc <dir_sdi>
c00051c9:	85 c0                	test   eax,eax
c00051cb:	0f 85 a1 00 00 00    	jne    c0005272 <f_getlabel+0xef>
c00051d1:	ba 01 00 00 00       	mov    edx,0x1
c00051d6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051da:	e8 ec e6 ff ff       	call   c00038cb <dir_read>
c00051df:	85 c0                	test   eax,eax
c00051e1:	0f 85 8b 00 00 00    	jne    c0005272 <f_getlabel+0xef>
c00051e7:	31 db                	xor    ebx,ebx
c00051e9:	31 c9                	xor    ecx,ecx
c00051eb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00051ef:	8d 79 01             	lea    edi,[ecx+0x1]
c00051f2:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00051f7:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c00051fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005200:	e8 06 ce ff ff       	call   c000200b <dbc_1st>
c0005205:	85 c0                	test   eax,eax
c0005207:	74 16                	je     c000521f <f_getlabel+0x9c>
c0005209:	83 ff 0b             	cmp    edi,0xb
c000520c:	74 11                	je     c000521f <f_getlabel+0x9c>
c000520e:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0005213:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005217:	8d 79 02             	lea    edi,[ecx+0x2]
c000521a:	c1 e0 08             	shl    eax,0x8
c000521d:	09 c2                	or     edx,eax
c000521f:	0f b7 d2             	movzx  edx,dx
c0005222:	50                   	push   eax
c0005223:	50                   	push   eax
c0005224:	68 b5 01 00 00       	push   0x1b5
c0005229:	52                   	push   edx
c000522a:	e8 75 0c 00 00       	call   c0005ea4 <ff_oem2uni>
c000522f:	83 c4 10             	add    esp,0x10
c0005232:	0f b7 c0             	movzx  eax,ax
c0005235:	85 c0                	test   eax,eax
c0005237:	74 22                	je     c000525b <f_getlabel+0xd8>
c0005239:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000523d:	b9 04 00 00 00       	mov    ecx,0x4
c0005242:	01 da                	add    edx,ebx
c0005244:	e8 a0 ce ff ff       	call   c00020e9 <put_utf>
c0005249:	0f b6 c0             	movzx  eax,al
c000524c:	85 c0                	test   eax,eax
c000524e:	74 0b                	je     c000525b <f_getlabel+0xd8>
c0005250:	01 c3                	add    ebx,eax
c0005252:	83 ff 0b             	cmp    edi,0xb
c0005255:	74 06                	je     c000525d <f_getlabel+0xda>
c0005257:	89 f9                	mov    ecx,edi
c0005259:	eb 90                	jmp    c00051eb <f_getlabel+0x68>
c000525b:	31 db                	xor    ebx,ebx
c000525d:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0005261:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0005264:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0005268:	74 14                	je     c000527e <f_getlabel+0xfb>
c000526a:	4b                   	dec    ebx
c000526b:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c000526e:	74 f1                	je     c0005261 <f_getlabel+0xde>
c0005270:	eb 0c                	jmp    c000527e <f_getlabel+0xfb>
c0005272:	83 f8 04             	cmp    eax,0x4
c0005275:	75 51                	jne    c00052c8 <f_getlabel+0x145>
c0005277:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000527b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000527e:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0005283:	74 45                	je     c00052ca <f_getlabel+0x147>
c0005285:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005289:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000528c:	e8 61 d2 ff ff       	call   c00024f2 <move_window>
c0005291:	89 c6                	mov    esi,eax
c0005293:	85 c0                	test   eax,eax
c0005295:	75 33                	jne    c00052ca <f_getlabel+0x147>
c0005297:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000529b:	b8 43 00 00 00       	mov    eax,0x43
c00052a0:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052a3:	83 f9 03             	cmp    ecx,0x3
c00052a6:	74 0f                	je     c00052b7 <f_getlabel+0x134>
c00052a8:	31 c0                	xor    eax,eax
c00052aa:	83 f9 04             	cmp    ecx,0x4
c00052ad:	0f 94 c0             	sete   al
c00052b0:	48                   	dec    eax
c00052b1:	83 e0 c3             	and    eax,0xffffffc3
c00052b4:	83 c0 64             	add    eax,0x64
c00052b7:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00052bb:	e8 d8 cc ff ff       	call   c0001f98 <ld_dword>
c00052c0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00052c4:	89 07                	mov    DWORD PTR [edi],eax
c00052c6:	eb 02                	jmp    c00052ca <f_getlabel+0x147>
c00052c8:	89 c6                	mov    esi,eax
c00052ca:	83 c4 5c             	add    esp,0x5c
c00052cd:	89 f0                	mov    eax,esi
c00052cf:	5b                   	pop    ebx
c00052d0:	5e                   	pop    esi
c00052d1:	5f                   	pop    edi
c00052d2:	5d                   	pop    ebp
c00052d3:	c3                   	ret    

c00052d4 <f_setlabel>:
c00052d4:	57                   	push   edi
c00052d5:	b9 02 00 00 00       	mov    ecx,0x2
c00052da:	56                   	push   esi
c00052db:	53                   	push   ebx
c00052dc:	83 ec 50             	sub    esp,0x50
c00052df:	8d 54 24 04          	lea    edx,[esp+0x4]
c00052e3:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052e7:	e8 59 d3 ff ff       	call   c0002645 <mount_volume>
c00052ec:	89 c6                	mov    esi,eax
c00052ee:	85 c0                	test   eax,eax
c00052f0:	0f 85 65 01 00 00    	jne    c000545b <f_setlabel+0x187>
c00052f6:	b9 0b 00 00 00       	mov    ecx,0xb
c00052fb:	ba 20 00 00 00       	mov    edx,0x20
c0005300:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005304:	31 db                	xor    ebx,ebx
c0005306:	e8 c1 cc ff ff       	call   c0001fcc <mem_set>
c000530b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000530f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005312:	76 5d                	jbe    c0005371 <f_setlabel+0x9d>
c0005314:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005318:	e8 f4 cc ff ff       	call   c0002011 <tchar2uni>
c000531d:	3d ff ff 00 00       	cmp    eax,0xffff
c0005322:	76 0a                	jbe    c000532e <f_setlabel+0x5a>
c0005324:	be 06 00 00 00       	mov    esi,0x6
c0005329:	e9 2d 01 00 00       	jmp    c000545b <f_setlabel+0x187>
c000532e:	83 ec 0c             	sub    esp,0xc
c0005331:	50                   	push   eax
c0005332:	e8 e5 0b 00 00       	call   c0005f1c <ff_wtoupper>
c0005337:	5a                   	pop    edx
c0005338:	59                   	pop    ecx
c0005339:	68 b5 01 00 00       	push   0x1b5
c000533e:	50                   	push   eax
c000533f:	e8 c0 0a 00 00       	call   c0005e04 <ff_uni2oem>
c0005344:	83 c4 10             	add    esp,0x10
c0005347:	0f b7 f0             	movzx  esi,ax
c000534a:	89 f7                	mov    edi,esi
c000534c:	85 f6                	test   esi,esi
c000534e:	74 d4                	je     c0005324 <f_setlabel+0x50>
c0005350:	89 f2                	mov    edx,esi
c0005352:	b8 70 f5 02 c0       	mov    eax,0xc002f570
c0005357:	e8 9e cc ff ff       	call   c0001ffa <chk_chr>
c000535c:	85 c0                	test   eax,eax
c000535e:	75 c4                	jne    c0005324 <f_setlabel+0x50>
c0005360:	81 fe ff 00 00 00    	cmp    esi,0xff
c0005366:	0f 87 c9 00 00 00    	ja     c0005435 <f_setlabel+0x161>
c000536c:	e9 e0 00 00 00       	jmp    c0005451 <f_setlabel+0x17d>
c0005371:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005376:	74 ac                	je     c0005324 <f_setlabel+0x50>
c0005378:	85 db                	test   ebx,ebx
c000537a:	74 0e                	je     c000538a <f_setlabel+0xb6>
c000537c:	8d 43 ff             	lea    eax,[ebx-0x1]
c000537f:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005384:	75 04                	jne    c000538a <f_setlabel+0xb6>
c0005386:	89 c3                	mov    ebx,eax
c0005388:	eb ee                	jmp    c0005378 <f_setlabel+0xa4>
c000538a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000538e:	31 d2                	xor    edx,edx
c0005390:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005394:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000539c:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053a0:	e8 27 e1 ff ff       	call   c00034cc <dir_sdi>
c00053a5:	89 c6                	mov    esi,eax
c00053a7:	85 c0                	test   eax,eax
c00053a9:	0f 85 ac 00 00 00    	jne    c000545b <f_setlabel+0x187>
c00053af:	ba 01 00 00 00       	mov    edx,0x1
c00053b4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053b8:	e8 0e e5 ff ff       	call   c00038cb <dir_read>
c00053bd:	85 c0                	test   eax,eax
c00053bf:	75 18                	jne    c00053d9 <f_setlabel+0x105>
c00053c1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00053c5:	85 db                	test   ebx,ebx
c00053c7:	74 0b                	je     c00053d4 <f_setlabel+0x100>
c00053c9:	b9 0b 00 00 00       	mov    ecx,0xb
c00053ce:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00053d2:	eb 47                	jmp    c000541b <f_setlabel+0x147>
c00053d4:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00053d7:	eb 47                	jmp    c0005420 <f_setlabel+0x14c>
c00053d9:	83 f8 04             	cmp    eax,0x4
c00053dc:	75 53                	jne    c0005431 <f_setlabel+0x15d>
c00053de:	85 db                	test   ebx,ebx
c00053e0:	74 79                	je     c000545b <f_setlabel+0x187>
c00053e2:	ba 01 00 00 00       	mov    edx,0x1
c00053e7:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053eb:	e8 76 e4 ff ff       	call   c0003866 <dir_alloc>
c00053f0:	89 c6                	mov    esi,eax
c00053f2:	85 c0                	test   eax,eax
c00053f4:	75 65                	jne    c000545b <f_setlabel+0x187>
c00053f6:	b9 20 00 00 00       	mov    ecx,0x20
c00053fb:	31 d2                	xor    edx,edx
c00053fd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005401:	e8 c6 cb ff ff       	call   c0001fcc <mem_set>
c0005406:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000540a:	b9 0b 00 00 00       	mov    ecx,0xb
c000540f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005413:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005417:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000541b:	e8 97 cb ff ff       	call   c0001fb7 <mem_cpy>
c0005420:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005424:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005428:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000542c:	e8 f8 da ff ff       	call   c0002f29 <sync_fs>
c0005431:	89 c6                	mov    esi,eax
c0005433:	eb 26                	jmp    c000545b <f_setlabel+0x187>
c0005435:	83 fb 09             	cmp    ebx,0x9
c0005438:	0f 87 e6 fe ff ff    	ja     c0005324 <f_setlabel+0x50>
c000543e:	89 f0                	mov    eax,esi
c0005440:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005444:	43                   	inc    ebx
c0005445:	89 f8                	mov    eax,edi
c0005447:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000544b:	43                   	inc    ebx
c000544c:	e9 ba fe ff ff       	jmp    c000530b <f_setlabel+0x37>
c0005451:	83 fb 0a             	cmp    ebx,0xa
c0005454:	76 ef                	jbe    c0005445 <f_setlabel+0x171>
c0005456:	e9 c9 fe ff ff       	jmp    c0005324 <f_setlabel+0x50>
c000545b:	83 c4 50             	add    esp,0x50
c000545e:	89 f0                	mov    eax,esi
c0005460:	5b                   	pop    ebx
c0005461:	5e                   	pop    esi
c0005462:	5f                   	pop    edi
c0005463:	c3                   	ret    

c0005464 <f_expand>:
c0005464:	55                   	push   ebp
c0005465:	57                   	push   edi
c0005466:	56                   	push   esi
c0005467:	53                   	push   ebx
c0005468:	83 ec 2c             	sub    esp,0x2c
c000546b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000546f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005473:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005477:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000547b:	89 d8                	mov    eax,ebx
c000547d:	e8 c7 cf ff ff       	call   c0002449 <validate>
c0005482:	89 c6                	mov    esi,eax
c0005484:	85 c0                	test   eax,eax
c0005486:	0f 85 3b 01 00 00    	jne    c00055c7 <f_expand+0x163>
c000548c:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005490:	85 f6                	test   esi,esi
c0005492:	0f 85 2f 01 00 00    	jne    c00055c7 <f_expand+0x163>
c0005498:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000549d:	75 0a                	jne    c00054a9 <f_expand+0x45>
c000549f:	be 07 00 00 00       	mov    esi,0x7
c00054a4:	e9 1e 01 00 00       	jmp    c00055c7 <f_expand+0x163>
c00054a9:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00054ad:	75 f0                	jne    c000549f <f_expand+0x3b>
c00054af:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00054b3:	74 ea                	je     c000549f <f_expand+0x3b>
c00054b5:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00054b9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00054bd:	c1 e1 09             	shl    ecx,0x9
c00054c0:	8d 41 ff             	lea    eax,[ecx-0x1]
c00054c3:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00054c7:	0f 95 c0             	setne  al
c00054ca:	31 d2                	xor    edx,edx
c00054cc:	0f b6 c0             	movzx  eax,al
c00054cf:	89 c7                	mov    edi,eax
c00054d1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00054d5:	f7 f1                	div    ecx
c00054d7:	01 f8                	add    eax,edi
c00054d9:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00054dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00054e0:	83 ff 01             	cmp    edi,0x1
c00054e3:	76 05                	jbe    c00054ea <f_expand+0x86>
c00054e5:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00054e8:	77 05                	ja     c00054ef <f_expand+0x8b>
c00054ea:	bf 02 00 00 00       	mov    edi,0x2
c00054ef:	89 3c 24             	mov    DWORD PTR [esp],edi
c00054f2:	89 fd                	mov    ebp,edi
c00054f4:	31 c9                	xor    ecx,ecx
c00054f6:	89 ea                	mov    edx,ebp
c00054f8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00054fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00054fe:	45                   	inc    ebp
c00054ff:	e8 c4 de ff ff       	call   c00033c8 <get_fat.isra.2>
c0005504:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005508:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000550c:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000550f:	77 05                	ja     c0005516 <f_expand+0xb2>
c0005511:	bd 02 00 00 00       	mov    ebp,0x2
c0005516:	83 f8 01             	cmp    eax,0x1
c0005519:	74 20                	je     c000553b <f_expand+0xd7>
c000551b:	83 f8 ff             	cmp    eax,0xffffffff
c000551e:	74 25                	je     c0005545 <f_expand+0xe1>
c0005520:	85 c0                	test   eax,eax
c0005522:	75 09                	jne    c000552d <f_expand+0xc9>
c0005524:	41                   	inc    ecx
c0005525:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005529:	75 07                	jne    c0005532 <f_expand+0xce>
c000552b:	eb 1f                	jmp    c000554c <f_expand+0xe8>
c000552d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005530:	31 c9                	xor    ecx,ecx
c0005532:	39 fd                	cmp    ebp,edi
c0005534:	75 c0                	jne    c00054f6 <f_expand+0x92>
c0005536:	e9 64 ff ff ff       	jmp    c000549f <f_expand+0x3b>
c000553b:	be 02 00 00 00       	mov    esi,0x2
c0005540:	e9 82 00 00 00       	jmp    c00055c7 <f_expand+0x163>
c0005545:	be 01 00 00 00       	mov    esi,0x1
c000554a:	eb 7b                	jmp    c00055c7 <f_expand+0x163>
c000554c:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005551:	74 2b                	je     c000557e <f_expand+0x11a>
c0005553:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005556:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000555a:	85 ed                	test   ebp,ebp
c000555c:	74 24                	je     c0005582 <f_expand+0x11e>
c000555e:	83 c9 ff             	or     ecx,0xffffffff
c0005561:	83 fd 01             	cmp    ebp,0x1
c0005564:	74 03                	je     c0005569 <f_expand+0x105>
c0005566:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005569:	89 fa                	mov    edx,edi
c000556b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000556f:	e8 c2 d3 ff ff       	call   c0002936 <put_fat>
c0005574:	85 c0                	test   eax,eax
c0005576:	75 4d                	jne    c00055c5 <f_expand+0x161>
c0005578:	89 f8                	mov    eax,edi
c000557a:	4d                   	dec    ebp
c000557b:	47                   	inc    edi
c000557c:	eb dc                	jmp    c000555a <f_expand+0xf6>
c000557e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005581:	48                   	dec    eax
c0005582:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005586:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000558b:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000558e:	74 37                	je     c00055c7 <f_expand+0x163>
c0005590:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005593:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005596:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000559a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000559d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055a0:	83 c8 40             	or     eax,0x40
c00055a3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055a6:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00055a9:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055ac:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00055af:	39 c8                	cmp    eax,ecx
c00055b1:	77 14                	ja     c00055c7 <f_expand+0x163>
c00055b3:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00055b7:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00055ba:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00055bd:	83 c8 01             	or     eax,0x1
c00055c0:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00055c3:	eb 02                	jmp    c00055c7 <f_expand+0x163>
c00055c5:	89 c6                	mov    esi,eax
c00055c7:	83 c4 2c             	add    esp,0x2c
c00055ca:	89 f0                	mov    eax,esi
c00055cc:	5b                   	pop    ebx
c00055cd:	5e                   	pop    esi
c00055ce:	5f                   	pop    edi
c00055cf:	5d                   	pop    ebp
c00055d0:	c3                   	ret    

c00055d1 <f_mkfs>:
c00055d1:	55                   	push   ebp
c00055d2:	57                   	push   edi
c00055d3:	56                   	push   esi
c00055d4:	be 0b 00 00 00       	mov    esi,0xb
c00055d9:	53                   	push   ebx
c00055da:	83 ec 5c             	sub    esp,0x5c
c00055dd:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00055e1:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c00055e5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00055e9:	e8 0e ce ff ff       	call   c00023fc <get_ldnumber>
c00055ee:	85 c0                	test   eax,eax
c00055f0:	0f 88 d1 07 00 00    	js     c0005dc7 <f_mkfs+0x7f6>
c00055f6:	8b 14 85 80 6c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9380]
c00055fd:	85 d2                	test   edx,edx
c00055ff:	74 03                	je     c0005604 <f_mkfs+0x33>
c0005601:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005604:	85 db                	test   ebx,ebx
c0005606:	75 05                	jne    c000560d <f_mkfs+0x3c>
c0005608:	bb 60 f5 02 c0       	mov    ebx,0xc002f560
c000560d:	83 ec 0c             	sub    esp,0xc
c0005610:	0f b6 c0             	movzx  eax,al
c0005613:	be 03 00 00 00       	mov    esi,0x3
c0005618:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000561c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005620:	e8 18 c9 ff ff       	call   c0001f3d <disk_initialize>
c0005625:	83 c4 10             	add    esp,0x10
c0005628:	a8 01                	test   al,0x1
c000562a:	0f 85 97 07 00 00    	jne    c0005dc7 <f_mkfs+0x7f6>
c0005630:	be 0a 00 00 00       	mov    esi,0xa
c0005635:	a8 04                	test   al,0x4
c0005637:	0f 85 8a 07 00 00    	jne    c0005dc7 <f_mkfs+0x7f6>
c000563d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005640:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005644:	85 c0                	test   eax,eax
c0005646:	75 20                	jne    c0005668 <f_mkfs+0x97>
c0005648:	51                   	push   ecx
c0005649:	8d 44 24 44          	lea    eax,[esp+0x44]
c000564d:	50                   	push   eax
c000564e:	6a 03                	push   0x3
c0005650:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005654:	e8 13 c9 ff ff       	call   c0001f6c <disk_ioctl>
c0005659:	83 c4 10             	add    esp,0x10
c000565c:	85 c0                	test   eax,eax
c000565e:	74 08                	je     c0005668 <f_mkfs+0x97>
c0005660:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c0005668:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000566c:	8d 42 ff             	lea    eax,[edx-0x1]
c000566f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005674:	77 04                	ja     c000567a <f_mkfs+0xa9>
c0005676:	85 c2                	test   edx,eax
c0005678:	74 08                	je     c0005682 <f_mkfs+0xb1>
c000567a:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c0005682:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005685:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0005689:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000568d:	48                   	dec    eax
c000568e:	3c 01                	cmp    al,0x1
c0005690:	76 05                	jbe    c0005697 <f_mkfs+0xc6>
c0005692:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005697:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000569a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000569e:	48                   	dec    eax
c000569f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056a4:	77 07                	ja     c00056ad <f_mkfs+0xdc>
c00056a6:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00056ab:	74 08                	je     c00056b5 <f_mkfs+0xe4>
c00056ad:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c00056b5:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00056b8:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00056be:	77 07                	ja     c00056c7 <f_mkfs+0xf6>
c00056c0:	8d 47 ff             	lea    eax,[edi-0x1]
c00056c3:	85 f8                	test   eax,edi
c00056c5:	74 02                	je     c00056c9 <f_mkfs+0xf8>
c00056c7:	31 ff                	xor    edi,edi
c00056c9:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c00056d1:	77 0a                	ja     c00056dd <f_mkfs+0x10c>
c00056d3:	be 11 00 00 00       	mov    esi,0x11
c00056d8:	e9 ea 06 00 00       	jmp    c0005dc7 <f_mkfs+0x7f6>
c00056dd:	8b 33                	mov    esi,DWORD PTR [ebx]
c00056df:	85 ed                	test   ebp,ebp
c00056e1:	89 eb                	mov    ebx,ebp
c00056e3:	75 1e                	jne    c0005703 <f_mkfs+0x132>
c00056e5:	83 ec 0c             	sub    esp,0xc
c00056e8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00056ef:	25 00 fe ff ff       	and    eax,0xfffffe00
c00056f4:	50                   	push   eax
c00056f5:	e8 da 06 00 00       	call   c0005dd4 <ff_memalloc>
c00056fa:	83 c4 10             	add    esp,0x10
c00056fd:	89 c3                	mov    ebx,eax
c00056ff:	85 c0                	test   eax,eax
c0005701:	74 d0                	je     c00056d3 <f_mkfs+0x102>
c0005703:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000570b:	52                   	push   edx
c000570c:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005710:	50                   	push   eax
c0005711:	6a 01                	push   0x1
c0005713:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005717:	e8 50 c8 ff ff       	call   c0001f6c <disk_ioctl>
c000571c:	83 c4 10             	add    esp,0x10
c000571f:	85 c0                	test   eax,eax
c0005721:	0f 85 49 06 00 00    	jne    c0005d70 <f_mkfs+0x79f>
c0005727:	89 f0                	mov    eax,esi
c0005729:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005731:	83 e0 08             	and    eax,0x8
c0005734:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005738:	75 18                	jne    c0005752 <f_mkfs+0x181>
c000573a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000573e:	83 f8 3f             	cmp    eax,0x3f
c0005741:	76 0f                	jbe    c0005752 <f_mkfs+0x181>
c0005743:	83 e8 3f             	sub    eax,0x3f
c0005746:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000574e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005752:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005756:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000575a:	83 f8 7f             	cmp    eax,0x7f
c000575d:	0f 86 5b 02 00 00    	jbe    c00059be <f_mkfs+0x3ed>
c0005763:	b9 80 00 00 00       	mov    ecx,0x80
c0005768:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000576e:	77 05                	ja     c0005775 <f_mkfs+0x1a4>
c0005770:	c1 ef 09             	shr    edi,0x9
c0005773:	89 f9                	mov    ecx,edi
c0005775:	89 f0                	mov    eax,esi
c0005777:	89 f7                	mov    edi,esi
c0005779:	83 e0 01             	and    eax,0x1
c000577c:	83 e7 02             	and    edi,0x2
c000577f:	0f b6 c0             	movzx  eax,al
c0005782:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c0005786:	74 0a                	je     c0005792 <f_mkfs+0x1c1>
c0005788:	85 c0                	test   eax,eax
c000578a:	0f 84 4f 01 00 00    	je     c00058df <f_mkfs+0x30e>
c0005790:	eb 37                	jmp    c00057c9 <f_mkfs+0x1f8>
c0005792:	be 13 00 00 00       	mov    esi,0x13
c0005797:	85 c0                	test   eax,eax
c0005799:	75 2e                	jne    c00057c9 <f_mkfs+0x1f8>
c000579b:	e9 e7 05 00 00       	jmp    c0005d87 <f_mkfs+0x7b6>
c00057a0:	83 f8 02             	cmp    eax,0x2
c00057a3:	0f 85 0d 02 00 00    	jne    c00059b6 <f_mkfs+0x3e5>
c00057a9:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00057af:	0f 86 e4 01 00 00    	jbe    c0005999 <f_mkfs+0x3c8>
c00057b5:	85 c9                	test   ecx,ecx
c00057b7:	0f 85 dc 05 00 00    	jne    c0005d99 <f_mkfs+0x7c8>
c00057bd:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057c0:	83 f9 40             	cmp    ecx,0x40
c00057c3:	0f 87 e0 05 00 00    	ja     c0005da9 <f_mkfs+0x7d8>
c00057c9:	89 cf                	mov    edi,ecx
c00057cb:	85 c9                	test   ecx,ecx
c00057cd:	75 1c                	jne    c00057eb <f_mkfs+0x21a>
c00057cf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00057d3:	b8 40 f5 02 c0       	mov    eax,0xc002f540
c00057d8:	c1 ee 0c             	shr    esi,0xc
c00057db:	bf 01 00 00 00       	mov    edi,0x1
c00057e0:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00057e3:	85 d2                	test   edx,edx
c00057e5:	0f 85 63 01 00 00    	jne    c000594e <f_mkfs+0x37d>
c00057eb:	31 d2                	xor    edx,edx
c00057ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00057f1:	f7 f7                	div    edi
c00057f3:	3d f5 0f 00 00       	cmp    eax,0xff5
c00057f8:	0f 86 62 01 00 00    	jbe    c0005960 <f_mkfs+0x38f>
c00057fe:	83 c0 02             	add    eax,0x2
c0005801:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005806:	01 c0                	add    eax,eax
c0005808:	05 ff 01 00 00       	add    eax,0x1ff
c000580d:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005815:	c1 e8 09             	shr    eax,0x9
c0005818:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000581c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005820:	c1 e0 05             	shl    eax,0x5
c0005823:	c1 e8 09             	shr    eax,0x9
c0005826:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000582a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000582f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005837:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c000583b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000583f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005843:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005848:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000584c:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005850:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005854:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0005858:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000585c:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c0005860:	f7 d8                	neg    eax
c0005862:	21 c6                	and    esi,eax
c0005864:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005869:	29 d6                	sub    esi,edx
c000586b:	83 f8 03             	cmp    eax,0x3
c000586e:	0f 85 ff 00 00 00    	jne    c0005973 <f_mkfs+0x3a2>
c0005874:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005878:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c000587c:	89 f8                	mov    eax,edi
c000587e:	c1 e0 04             	shl    eax,0x4
c0005881:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0005885:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005889:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000588d:	0f 82 2b 01 00 00    	jb     c00059be <f_mkfs+0x3ed>
c0005893:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005897:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000589b:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c000589f:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00058a4:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00058a8:	29 d0                	sub    eax,edx
c00058aa:	31 d2                	xor    edx,edx
c00058ac:	f7 f7                	div    edi
c00058ae:	89 c6                	mov    esi,eax
c00058b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058b5:	83 f8 03             	cmp    eax,0x3
c00058b8:	0f 85 e2 fe ff ff    	jne    c00057a0 <f_mkfs+0x1cf>
c00058be:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00058c4:	0f 87 03 01 00 00    	ja     c00059cd <f_mkfs+0x3fc>
c00058ca:	85 c9                	test   ecx,ecx
c00058cc:	0f 85 ec 00 00 00    	jne    c00059be <f_mkfs+0x3ed>
c00058d2:	83 ff 01             	cmp    edi,0x1
c00058d5:	0f 86 e3 00 00 00    	jbe    c00059be <f_mkfs+0x3ed>
c00058db:	d1 ef                	shr    edi,1
c00058dd:	89 f9                	mov    ecx,edi
c00058df:	89 ce                	mov    esi,ecx
c00058e1:	85 c9                	test   ecx,ecx
c00058e3:	75 25                	jne    c000590a <f_mkfs+0x339>
c00058e5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00058e9:	b8 50 f5 02 c0       	mov    eax,0xc002f550
c00058ee:	c1 ee 11             	shr    esi,0x11
c00058f1:	b9 01 00 00 00       	mov    ecx,0x1
c00058f6:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00058f9:	85 d2                	test   edx,edx
c00058fb:	74 0b                	je     c0005908 <f_mkfs+0x337>
c00058fd:	83 c0 02             	add    eax,0x2
c0005900:	39 f2                	cmp    edx,esi
c0005902:	77 04                	ja     c0005908 <f_mkfs+0x337>
c0005904:	01 c9                	add    ecx,ecx
c0005906:	eb ee                	jmp    c00058f6 <f_mkfs+0x325>
c0005908:	31 f6                	xor    esi,esi
c000590a:	31 d2                	xor    edx,edx
c000590c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005910:	f7 f1                	div    ecx
c0005912:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005919:	2d f6 ff 00 00       	sub    eax,0xfff6
c000591e:	c1 ea 09             	shr    edx,0x9
c0005921:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005926:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000592a:	0f 87 8e 00 00 00    	ja     c00059be <f_mkfs+0x3ed>
c0005930:	89 cf                	mov    edi,ecx
c0005932:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000593a:	89 f1                	mov    ecx,esi
c000593c:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005944:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005949:	e9 dc fe ff ff       	jmp    c000582a <f_mkfs+0x259>
c000594e:	83 c0 02             	add    eax,0x2
c0005951:	39 f2                	cmp    edx,esi
c0005953:	0f 87 92 fe ff ff    	ja     c00057eb <f_mkfs+0x21a>
c0005959:	01 ff                	add    edi,edi
c000595b:	e9 80 fe ff ff       	jmp    c00057e0 <f_mkfs+0x20f>
c0005960:	8d 04 40             	lea    eax,[eax+eax*2]
c0005963:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005968:	40                   	inc    eax
c0005969:	d1 e8                	shr    eax,1
c000596b:	83 c0 03             	add    eax,0x3
c000596e:	e9 95 fe ff ff       	jmp    c0005808 <f_mkfs+0x237>
c0005973:	31 d2                	xor    edx,edx
c0005975:	89 f0                	mov    eax,esi
c0005977:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000597b:	85 d2                	test   edx,edx
c000597d:	74 09                	je     c0005988 <f_mkfs+0x3b7>
c000597f:	4e                   	dec    esi
c0005980:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005984:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005988:	89 f0                	mov    eax,esi
c000598a:	31 d2                	xor    edx,edx
c000598c:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005990:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005994:	e9 e3 fe ff ff       	jmp    c000587c <f_mkfs+0x2ab>
c0005999:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000599f:	77 2c                	ja     c00059cd <f_mkfs+0x3fc>
c00059a1:	85 c9                	test   ecx,ecx
c00059a3:	75 19                	jne    c00059be <f_mkfs+0x3ed>
c00059a5:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00059a8:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00059ae:	0f 86 15 fe ff ff    	jbe    c00057c9 <f_mkfs+0x1f8>
c00059b4:	eb 08                	jmp    c00059be <f_mkfs+0x3ed>
c00059b6:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059bc:	76 0a                	jbe    c00059c8 <f_mkfs+0x3f7>
c00059be:	be 0e 00 00 00       	mov    esi,0xe
c00059c3:	e9 bf 03 00 00       	jmp    c0005d87 <f_mkfs+0x7b6>
c00059c8:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00059cd:	31 d2                	xor    edx,edx
c00059cf:	b9 00 02 00 00       	mov    ecx,0x200
c00059d4:	89 d8                	mov    eax,ebx
c00059d6:	e8 f1 c5 ff ff       	call   c0001fcc <mem_set>
c00059db:	b9 0b 00 00 00       	mov    ecx,0xb
c00059e0:	ba 02 f5 02 c0       	mov    edx,0xc002f502
c00059e5:	89 d8                	mov    eax,ebx
c00059e7:	e8 cb c5 ff ff       	call   c0001fb7 <mem_cpy>
c00059ec:	8d 43 0b             	lea    eax,[ebx+0xb]
c00059ef:	ba 00 02 00 00       	mov    edx,0x200
c00059f4:	e8 b7 c5 ff ff       	call   c0001fb0 <st_word>
c00059f9:	89 f8                	mov    eax,edi
c00059fb:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a00:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a03:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a06:	e8 a5 c5 ff ff       	call   c0001fb0 <st_word>
c0005a0b:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a0f:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a12:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a17:	83 f8 03             	cmp    eax,0x3
c0005a1a:	75 08                	jne    c0005a24 <f_mkfs+0x453>
c0005a1c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005a24:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005a28:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a2b:	e8 80 c5 ff ff       	call   c0001fb0 <st_word>
c0005a30:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005a34:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005a3a:	77 0a                	ja     c0005a46 <f_mkfs+0x475>
c0005a3c:	8d 43 13             	lea    eax,[ebx+0x13]
c0005a3f:	e8 6c c5 ff ff       	call   c0001fb0 <st_word>
c0005a44:	eb 08                	jmp    c0005a4e <f_mkfs+0x47d>
c0005a46:	8d 43 20             	lea    eax,[ebx+0x20]
c0005a49:	e8 66 c5 ff ff       	call   c0001fb4 <st_dword>
c0005a4e:	8d 43 18             	lea    eax,[ebx+0x18]
c0005a51:	ba 3f 00 00 00       	mov    edx,0x3f
c0005a56:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005a5a:	e8 51 c5 ff ff       	call   c0001fb0 <st_word>
c0005a5f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005a62:	ba ff 00 00 00       	mov    edx,0xff
c0005a67:	e8 44 c5 ff ff       	call   c0001fb0 <st_word>
c0005a6c:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005a6f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005a73:	e8 3c c5 ff ff       	call   c0001fb4 <st_dword>
c0005a78:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a7d:	83 f8 03             	cmp    eax,0x3
c0005a80:	75 57                	jne    c0005ad9 <f_mkfs+0x508>
c0005a82:	8d 43 43             	lea    eax,[ebx+0x43]
c0005a85:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a8a:	e8 25 c5 ff ff       	call   c0001fb4 <st_dword>
c0005a8f:	8d 43 24             	lea    eax,[ebx+0x24]
c0005a92:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005a96:	e8 19 c5 ff ff       	call   c0001fb4 <st_dword>
c0005a9b:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005a9e:	ba 02 00 00 00       	mov    edx,0x2
c0005aa3:	e8 0c c5 ff ff       	call   c0001fb4 <st_dword>
c0005aa8:	8d 43 30             	lea    eax,[ebx+0x30]
c0005aab:	ba 01 00 00 00       	mov    edx,0x1
c0005ab0:	e8 fb c4 ff ff       	call   c0001fb0 <st_word>
c0005ab5:	8d 43 32             	lea    eax,[ebx+0x32]
c0005ab8:	ba 06 00 00 00       	mov    edx,0x6
c0005abd:	e8 ee c4 ff ff       	call   c0001fb0 <st_word>
c0005ac2:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005ac6:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005aca:	8d 43 47             	lea    eax,[ebx+0x47]
c0005acd:	b9 13 00 00 00       	mov    ecx,0x13
c0005ad2:	ba 0e f5 02 c0       	mov    edx,0xc002f50e
c0005ad7:	eb 2f                	jmp    c0005b08 <f_mkfs+0x537>
c0005ad9:	8d 43 27             	lea    eax,[ebx+0x27]
c0005adc:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ae1:	e8 ce c4 ff ff       	call   c0001fb4 <st_dword>
c0005ae6:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005aeb:	8d 43 16             	lea    eax,[ebx+0x16]
c0005aee:	e8 bd c4 ff ff       	call   c0001fb0 <st_word>
c0005af3:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005af7:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005afb:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005afe:	b9 13 00 00 00       	mov    ecx,0x13
c0005b03:	ba 22 f5 02 c0       	mov    edx,0xc002f522
c0005b08:	e8 aa c4 ff ff       	call   c0001fb7 <mem_cpy>
c0005b0d:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b13:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b18:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b1c:	e8 8f c4 ff ff       	call   c0001fb0 <st_word>
c0005b21:	6a 01                	push   0x1
c0005b23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b27:	53                   	push   ebx
c0005b28:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b2c:	e8 25 c4 ff ff       	call   c0001f56 <disk_write>
c0005b31:	83 c4 10             	add    esp,0x10
c0005b34:	85 c0                	test   eax,eax
c0005b36:	0f 85 34 02 00 00    	jne    c0005d70 <f_mkfs+0x79f>
c0005b3c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b41:	83 f8 03             	cmp    eax,0x3
c0005b44:	0f 85 98 00 00 00    	jne    c0005be2 <f_mkfs+0x611>
c0005b4a:	6a 01                	push   0x1
c0005b4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b50:	83 c0 06             	add    eax,0x6
c0005b53:	50                   	push   eax
c0005b54:	53                   	push   ebx
c0005b55:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b59:	e8 f8 c3 ff ff       	call   c0001f56 <disk_write>
c0005b5e:	b9 00 02 00 00       	mov    ecx,0x200
c0005b63:	31 d2                	xor    edx,edx
c0005b65:	89 d8                	mov    eax,ebx
c0005b67:	e8 60 c4 ff ff       	call   c0001fcc <mem_set>
c0005b6c:	ba 52 52 61 41       	mov    edx,0x41615252
c0005b71:	89 d8                	mov    eax,ebx
c0005b73:	e8 3c c4 ff ff       	call   c0001fb4 <st_dword>
c0005b78:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005b7e:	ba 72 72 41 61       	mov    edx,0x61417272
c0005b83:	e8 2c c4 ff ff       	call   c0001fb4 <st_dword>
c0005b88:	8d 56 ff             	lea    edx,[esi-0x1]
c0005b8b:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005b91:	e8 1e c4 ff ff       	call   c0001fb4 <st_dword>
c0005b96:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005b9c:	ba 02 00 00 00       	mov    edx,0x2
c0005ba1:	e8 0e c4 ff ff       	call   c0001fb4 <st_dword>
c0005ba6:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005bab:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005bb1:	e8 fa c3 ff ff       	call   c0001fb0 <st_word>
c0005bb6:	6a 01                	push   0x1
c0005bb8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005bbc:	83 c0 07             	add    eax,0x7
c0005bbf:	50                   	push   eax
c0005bc0:	53                   	push   ebx
c0005bc1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005bc5:	e8 8c c3 ff ff       	call   c0001f56 <disk_write>
c0005bca:	83 c4 20             	add    esp,0x20
c0005bcd:	6a 01                	push   0x1
c0005bcf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bd3:	40                   	inc    eax
c0005bd4:	50                   	push   eax
c0005bd5:	53                   	push   ebx
c0005bd6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bda:	e8 77 c3 ff ff       	call   c0001f56 <disk_write>
c0005bdf:	83 c4 10             	add    esp,0x10
c0005be2:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005be6:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005bea:	c1 e8 09             	shr    eax,0x9
c0005bed:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005bf3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005bf7:	31 d2                	xor    edx,edx
c0005bf9:	89 d8                	mov    eax,ebx
c0005bfb:	e8 cc c3 ff ff       	call   c0001fcc <mem_set>
c0005c00:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c05:	31 c9                	xor    ecx,ecx
c0005c07:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005c0f:	83 f8 01             	cmp    eax,0x1
c0005c12:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c16:	0f 94 c1             	sete   cl
c0005c19:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005c1d:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005c21:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005c29:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005c31:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c36:	75 21                	jne    c0005c59 <f_mkfs+0x688>
c0005c38:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c3d:	89 d8                	mov    eax,ebx
c0005c3f:	e8 70 c3 ff ff       	call   c0001fb4 <st_dword>
c0005c44:	8d 43 04             	lea    eax,[ebx+0x4]
c0005c47:	83 ca ff             	or     edx,0xffffffff
c0005c4a:	e8 65 c3 ff ff       	call   c0001fb4 <st_dword>
c0005c4f:	8d 43 08             	lea    eax,[ebx+0x8]
c0005c52:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005c57:	eb 06                	jmp    c0005c5f <f_mkfs+0x68e>
c0005c59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005c5d:	89 d8                	mov    eax,ebx
c0005c5f:	e8 50 c3 ff ff       	call   c0001fb4 <st_dword>
c0005c64:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c68:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005c6c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005c70:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c74:	39 ce                	cmp    esi,ecx
c0005c76:	76 02                	jbe    c0005c7a <f_mkfs+0x6a9>
c0005c78:	89 ce                	mov    esi,ecx
c0005c7a:	56                   	push   esi
c0005c7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005c7f:	53                   	push   ebx
c0005c80:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c84:	e8 cd c2 ff ff       	call   c0001f56 <disk_write>
c0005c89:	83 c4 10             	add    esp,0x10
c0005c8c:	85 c0                	test   eax,eax
c0005c8e:	0f 85 dc 00 00 00    	jne    c0005d70 <f_mkfs+0x79f>
c0005c94:	31 d2                	xor    edx,edx
c0005c96:	b9 00 02 00 00       	mov    ecx,0x200
c0005c9b:	89 d8                	mov    eax,ebx
c0005c9d:	e8 2a c3 ff ff       	call   c0001fcc <mem_set>
c0005ca2:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005ca6:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005caa:	75 c0                	jne    c0005c6c <f_mkfs+0x69b>
c0005cac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005cb0:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005cb8:	40                   	inc    eax
c0005cb9:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005cbd:	0f 87 6e ff ff ff    	ja     c0005c31 <f_mkfs+0x660>
c0005cc3:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005cc8:	83 f8 03             	cmp    eax,0x3
c0005ccb:	74 04                	je     c0005cd1 <f_mkfs+0x700>
c0005ccd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005cd1:	89 fe                	mov    esi,edi
c0005cd3:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005cd7:	76 04                	jbe    c0005cdd <f_mkfs+0x70c>
c0005cd9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005cdd:	56                   	push   esi
c0005cde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005ce2:	53                   	push   ebx
c0005ce3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ce7:	e8 6a c2 ff ff       	call   c0001f56 <disk_write>
c0005cec:	83 c4 10             	add    esp,0x10
c0005cef:	85 c0                	test   eax,eax
c0005cf1:	75 7d                	jne    c0005d70 <f_mkfs+0x79f>
c0005cf3:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005cf7:	29 f7                	sub    edi,esi
c0005cf9:	75 d6                	jne    c0005cd1 <f_mkfs+0x700>
c0005cfb:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d00:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d05:	83 f8 03             	cmp    eax,0x3
c0005d08:	74 1e                	je     c0005d28 <f_mkfs+0x757>
c0005d0a:	b9 06 00 00 00       	mov    ecx,0x6
c0005d0f:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d17:	77 0f                	ja     c0005d28 <f_mkfs+0x757>
c0005d19:	b9 04 00 00 00       	mov    ecx,0x4
c0005d1e:	83 f8 02             	cmp    eax,0x2
c0005d21:	74 05                	je     c0005d28 <f_mkfs+0x757>
c0005d23:	b9 01 00 00 00       	mov    ecx,0x1
c0005d28:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d2d:	75 2a                	jne    c0005d59 <f_mkfs+0x788>
c0005d2f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d33:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d3b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005d3f:	83 ec 0c             	sub    esp,0xc
c0005d42:	53                   	push   ebx
c0005d43:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005d47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d4b:	e8 89 d2 ff ff       	call   c0002fd9 <create_partition>
c0005d50:	83 c4 10             	add    esp,0x10
c0005d53:	89 c6                	mov    esi,eax
c0005d55:	85 c0                	test   eax,eax
c0005d57:	75 2e                	jne    c0005d87 <f_mkfs+0x7b6>
c0005d59:	31 f6                	xor    esi,esi
c0005d5b:	50                   	push   eax
c0005d5c:	6a 00                	push   0x0
c0005d5e:	6a 00                	push   0x0
c0005d60:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d64:	e8 03 c2 ff ff       	call   c0001f6c <disk_ioctl>
c0005d69:	83 c4 10             	add    esp,0x10
c0005d6c:	85 c0                	test   eax,eax
c0005d6e:	74 17                	je     c0005d87 <f_mkfs+0x7b6>
c0005d70:	85 ed                	test   ebp,ebp
c0005d72:	75 0c                	jne    c0005d80 <f_mkfs+0x7af>
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	53                   	push   ebx
c0005d78:	e8 6f 00 00 00       	call   c0005dec <ff_memfree>
c0005d7d:	83 c4 10             	add    esp,0x10
c0005d80:	be 01 00 00 00       	mov    esi,0x1
c0005d85:	eb 40                	jmp    c0005dc7 <f_mkfs+0x7f6>
c0005d87:	85 ed                	test   ebp,ebp
c0005d89:	75 3c                	jne    c0005dc7 <f_mkfs+0x7f6>
c0005d8b:	83 ec 0c             	sub    esp,0xc
c0005d8e:	53                   	push   ebx
c0005d8f:	e8 58 00 00 00       	call   c0005dec <ff_memfree>
c0005d94:	83 c4 10             	add    esp,0x10
c0005d97:	eb 2e                	jmp    c0005dc7 <f_mkfs+0x7f6>
c0005d99:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005d9e:	0f 85 3b fb ff ff    	jne    c00058df <f_mkfs+0x30e>
c0005da4:	e9 15 fc ff ff       	jmp    c00059be <f_mkfs+0x3ed>
c0005da9:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005dae:	0f 85 31 fb ff ff    	jne    c00058e5 <f_mkfs+0x314>
c0005db4:	89 cf                	mov    edi,ecx
c0005db6:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005dbc:	0f 86 29 fa ff ff    	jbe    c00057eb <f_mkfs+0x21a>
c0005dc2:	e9 f7 fb ff ff       	jmp    c00059be <f_mkfs+0x3ed>
c0005dc7:	83 c4 5c             	add    esp,0x5c
c0005dca:	89 f0                	mov    eax,esi
c0005dcc:	5b                   	pop    ebx
c0005dcd:	5e                   	pop    esi
c0005dce:	5f                   	pop    edi
c0005dcf:	5d                   	pop    ebp
c0005dd0:	c3                   	ret    
c0005dd1:	66 90                	xchg   ax,ax
c0005dd3:	90                   	nop

c0005dd4 <ff_memalloc>:
c0005dd4:	83 ec 0c             	sub    esp,0xc
c0005dd7:	83 ec 0c             	sub    esp,0xc
c0005dda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005dde:	e8 db 05 01 00       	call   c00163be <malloc>
c0005de3:	83 c4 10             	add    esp,0x10
c0005de6:	83 c4 0c             	add    esp,0xc
c0005de9:	c3                   	ret    
c0005dea:	66 90                	xchg   ax,ax

c0005dec <ff_memfree>:
c0005dec:	83 ec 0c             	sub    esp,0xc
c0005def:	83 ec 0c             	sub    esp,0xc
c0005df2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005df6:	e8 d3 05 01 00       	call   c00163ce <free>
c0005dfb:	83 c4 10             	add    esp,0x10
c0005dfe:	90                   	nop
c0005dff:	83 c4 0c             	add    esp,0xc
c0005e02:	c3                   	ret    
c0005e03:	90                   	nop

c0005e04 <ff_uni2oem>:
c0005e04:	83 ec 14             	sub    esp,0x14
c0005e07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e0b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e0f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e16:	c7 44 24 0c 40 f9 02 c0 	mov    DWORD PTR [esp+0xc],0xc002f940
c0005e1e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e23:	77 0b                	ja     c0005e30 <ff_uni2oem+0x2c>
c0005e25:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e2e:	eb 68                	jmp    c0005e98 <ff_uni2oem+0x94>
c0005e30:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e38:	77 5e                	ja     c0005e98 <ff_uni2oem+0x94>
c0005e3a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e3e:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e43:	75 53                	jne    c0005e98 <ff_uni2oem+0x94>
c0005e45:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e4c:	eb 12                	jmp    c0005e60 <ff_uni2oem+0x5c>
c0005e4e:	66 90                	xchg   ax,ax
c0005e50:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e55:	83 c0 01             	add    eax,0x1
c0005e58:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e5d:	8d 76 00             	lea    esi,[esi+0x0]
c0005e60:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005e65:	83 f8 7f             	cmp    eax,0x7f
c0005e68:	77 1e                	ja     c0005e88 <ff_uni2oem+0x84>
c0005e6a:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005e6f:	01 c0                	add    eax,eax
c0005e71:	89 c2                	mov    edx,eax
c0005e73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e77:	01 d0                	add    eax,edx
c0005e79:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7c:	0f b7 c0             	movzx  eax,ax
c0005e7f:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005e83:	75 cb                	jne    c0005e50 <ff_uni2oem+0x4c>
c0005e85:	8d 76 00             	lea    esi,[esi+0x0]
c0005e88:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e8d:	83 e8 80             	sub    eax,0xffffff80
c0005e90:	0f b6 c0             	movzx  eax,al
c0005e93:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e98:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e9d:	83 c4 14             	add    esp,0x14
c0005ea0:	c3                   	ret    
c0005ea1:	8d 76 00             	lea    esi,[esi+0x0]

c0005ea4 <ff_oem2uni>:
c0005ea4:	83 ec 18             	sub    esp,0x18
c0005ea7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005eab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005eaf:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005eb4:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005eb8:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005ebf:	c7 44 24 10 40 f9 02 c0 	mov    DWORD PTR [esp+0x10],0xc002f940
c0005ec7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ecc:	83 f8 7f             	cmp    eax,0x7f
c0005ecf:	77 0b                	ja     c0005edc <ff_oem2uni+0x38>
c0005ed1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ed5:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005eda:	eb 34                	jmp    c0005f10 <ff_oem2uni+0x6c>
c0005edc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005ee0:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005ee5:	75 29                	jne    c0005f10 <ff_oem2uni+0x6c>
c0005ee7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005eec:	3d ff 00 00 00       	cmp    eax,0xff
c0005ef1:	77 1d                	ja     c0005f10 <ff_oem2uni+0x6c>
c0005ef3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef8:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005efd:	01 c0                	add    eax,eax
c0005eff:	89 c2                	mov    edx,eax
c0005f01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f05:	01 d0                	add    eax,edx
c0005f07:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f0a:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f0f:	90                   	nop
c0005f10:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f15:	83 c4 18             	add    esp,0x18
c0005f18:	c3                   	ret    
c0005f19:	8d 76 00             	lea    esi,[esi+0x0]

c0005f1c <ff_wtoupper>:
c0005f1c:	83 ec 10             	sub    esp,0x10
c0005f1f:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f27:	0f 87 ab 01 00 00    	ja     c00060d8 <ff_wtoupper+0x1bc>
c0005f2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f31:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f36:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f3b:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f40:	77 0a                	ja     c0005f4c <ff_wtoupper+0x30>
c0005f42:	b8 40 f7 02 c0       	mov    eax,0xc002f740
c0005f47:	eb 0b                	jmp    c0005f54 <ff_wtoupper+0x38>
c0005f49:	8d 76 00             	lea    esi,[esi+0x0]
c0005f4c:	b8 80 f6 02 c0       	mov    eax,0xc002f680
c0005f51:	8d 76 00             	lea    esi,[esi+0x0]
c0005f54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f5c:	8d 50 02             	lea    edx,[eax+0x2]
c0005f5f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f63:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f66:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005f6b:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005f70:	85 c0                	test   eax,eax
c0005f72:	0f 84 54 01 00 00    	je     c00060cc <ff_wtoupper+0x1b0>
c0005f78:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005f7d:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005f82:	39 c2                	cmp    edx,eax
c0005f84:	0f 82 42 01 00 00    	jb     c00060cc <ff_wtoupper+0x1b0>
c0005f8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f8e:	8d 50 02             	lea    edx,[eax+0x2]
c0005f91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f95:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f98:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005f9d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005fa2:	c1 e8 08             	shr    eax,0x8
c0005fa5:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005faa:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005faf:	0f b6 c0             	movzx  eax,al
c0005fb2:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005fb7:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005fbc:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005fc1:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005fc6:	01 ca                	add    edx,ecx
c0005fc8:	39 d0                	cmp    eax,edx
c0005fca:	0f 8d d8 00 00 00    	jge    c00060a8 <ff_wtoupper+0x18c>
c0005fd0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005fd5:	83 f8 08             	cmp    eax,0x8
c0005fd8:	0f 87 ea 00 00 00    	ja     c00060c8 <ff_wtoupper+0x1ac>
c0005fde:	8b 04 85 40 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd09c0]
c0005fe5:	ff e0                	jmp    eax
c0005fe7:	90                   	nop
c0005fe8:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fed:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005ff2:	29 c2                	sub    edx,eax
c0005ff4:	89 d0                	mov    eax,edx
c0005ff6:	01 c0                	add    eax,eax
c0005ff8:	89 c2                	mov    edx,eax
c0005ffa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ffe:	01 d0                	add    eax,edx
c0006000:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006003:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006008:	e9 97 00 00 00       	jmp    c00060a4 <ff_wtoupper+0x188>
c000600d:	8d 76 00             	lea    esi,[esi+0x0]
c0006010:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0006015:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006019:	89 d1                	mov    ecx,edx
c000601b:	29 c1                	sub    ecx,eax
c000601d:	89 c8                	mov    eax,ecx
c000601f:	83 e0 01             	and    eax,0x1
c0006022:	89 c2                	mov    edx,eax
c0006024:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006029:	29 d0                	sub    eax,edx
c000602b:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006030:	eb 72                	jmp    c00060a4 <ff_wtoupper+0x188>
c0006032:	66 90                	xchg   ax,ax
c0006034:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006039:	83 e8 10             	sub    eax,0x10
c000603c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006041:	eb 61                	jmp    c00060a4 <ff_wtoupper+0x188>
c0006043:	90                   	nop
c0006044:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006049:	83 e8 20             	sub    eax,0x20
c000604c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006051:	eb 51                	jmp    c00060a4 <ff_wtoupper+0x188>
c0006053:	90                   	nop
c0006054:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006059:	83 e8 30             	sub    eax,0x30
c000605c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006061:	eb 41                	jmp    c00060a4 <ff_wtoupper+0x188>
c0006063:	90                   	nop
c0006064:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006069:	83 e8 1a             	sub    eax,0x1a
c000606c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006071:	eb 31                	jmp    c00060a4 <ff_wtoupper+0x188>
c0006073:	90                   	nop
c0006074:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006079:	83 c0 08             	add    eax,0x8
c000607c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006081:	eb 21                	jmp    c00060a4 <ff_wtoupper+0x188>
c0006083:	90                   	nop
c0006084:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006089:	83 e8 50             	sub    eax,0x50
c000608c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006091:	eb 11                	jmp    c00060a4 <ff_wtoupper+0x188>
c0006093:	90                   	nop
c0006094:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006099:	2d 60 1c 00 00       	sub    eax,0x1c60
c000609e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a3:	90                   	nop
c00060a4:	eb 22                	jmp    c00060c8 <ff_wtoupper+0x1ac>
c00060a6:	66 90                	xchg   ax,ax
c00060a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060ad:	85 c0                	test   eax,eax
c00060af:	0f 85 a3 fe ff ff    	jne    c0005f58 <ff_wtoupper+0x3c>
c00060b5:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00060ba:	01 c0                	add    eax,eax
c00060bc:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00060c0:	e9 93 fe ff ff       	jmp    c0005f58 <ff_wtoupper+0x3c>
c00060c5:	8d 76 00             	lea    esi,[esi+0x0]
c00060c8:	90                   	nop
c00060c9:	8d 76 00             	lea    esi,[esi+0x0]
c00060cc:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00060d1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00060d5:	8d 76 00             	lea    esi,[esi+0x0]
c00060d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00060dc:	83 c4 10             	add    esp,0x10
c00060df:	c3                   	ret    

c00060e0 <utf2ucs>:
c00060e0:	57                   	push   edi
c00060e1:	31 c9                	xor    ecx,ecx
c00060e3:	56                   	push   esi
c00060e4:	89 d7                	mov    edi,edx
c00060e6:	53                   	push   ebx
c00060e7:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c00060eb:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c00060ef:	89 de                	mov    esi,ebx
c00060f1:	c1 fe 08             	sar    esi,0x8
c00060f4:	89 f2                	mov    edx,esi
c00060f6:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c00060f9:	41                   	inc    ecx
c00060fa:	85 db                	test   ebx,ebx
c00060fc:	75 e9                	jne    c00060e7 <utf2ucs+0x7>
c00060fe:	5b                   	pop    ebx
c00060ff:	5e                   	pop    esi
c0006100:	5f                   	pop    edi
c0006101:	c3                   	ret    

c0006102 <ucs2utfn>:
c0006102:	83 e1 fe             	and    ecx,0xfffffffe
c0006105:	01 d1                	add    ecx,edx
c0006107:	39 d1                	cmp    ecx,edx
c0006109:	75 04                	jne    c000610f <ucs2utfn+0xd>
c000610b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000610e:	c3                   	ret    
c000610f:	57                   	push   edi
c0006110:	56                   	push   esi
c0006111:	53                   	push   ebx
c0006112:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006115:	83 c2 02             	add    edx,0x2
c0006118:	89 de                	mov    esi,ebx
c000611a:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c000611e:	c1 e6 08             	shl    esi,0x8
c0006121:	09 f3                	or     ebx,esi
c0006123:	83 fb 3b             	cmp    ebx,0x3b
c0006126:	74 50                	je     c0006178 <ucs2utfn+0x76>
c0006128:	83 fb 7f             	cmp    ebx,0x7f
c000612b:	7f 05                	jg     c0006132 <ucs2utfn+0x30>
c000612d:	88 18                	mov    BYTE PTR [eax],bl
c000612f:	40                   	inc    eax
c0006130:	eb 42                	jmp    c0006174 <ucs2utfn+0x72>
c0006132:	89 de                	mov    esi,ebx
c0006134:	89 df                	mov    edi,ebx
c0006136:	c1 fe 06             	sar    esi,0x6
c0006139:	83 e7 3f             	and    edi,0x3f
c000613c:	83 cf 80             	or     edi,0xffffff80
c000613f:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006145:	7f 12                	jg     c0006159 <ucs2utfn+0x57>
c0006147:	83 ce c0             	or     esi,0xffffffc0
c000614a:	83 c0 02             	add    eax,0x2
c000614d:	89 f3                	mov    ebx,esi
c000614f:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006152:	89 fb                	mov    ebx,edi
c0006154:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0006157:	eb 1b                	jmp    c0006174 <ucs2utfn+0x72>
c0006159:	c1 fb 0c             	sar    ebx,0xc
c000615c:	83 e6 3f             	and    esi,0x3f
c000615f:	83 cb e0             	or     ebx,0xffffffe0
c0006162:	83 ce 80             	or     esi,0xffffff80
c0006165:	88 18                	mov    BYTE PTR [eax],bl
c0006167:	89 f3                	mov    ebx,esi
c0006169:	83 c0 03             	add    eax,0x3
c000616c:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c000616f:	89 fb                	mov    ebx,edi
c0006171:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0006174:	39 d1                	cmp    ecx,edx
c0006176:	75 9a                	jne    c0006112 <ucs2utfn+0x10>
c0006178:	5b                   	pop    ebx
c0006179:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000617c:	5e                   	pop    esi
c000617d:	5f                   	pop    edi
c000617e:	c3                   	ret    

c000617f <isjoliet>:
c000617f:	31 d2                	xor    edx,edx
c0006181:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0006184:	75 26                	jne    c00061ac <isjoliet+0x2d>
c0006186:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c000618a:	75 20                	jne    c00061ac <isjoliet+0x2d>
c000618c:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006190:	ba 02 00 00 00       	mov    edx,0x2
c0006195:	83 f8 43             	cmp    eax,0x43
c0006198:	74 12                	je     c00061ac <isjoliet+0x2d>
c000619a:	ba 03 00 00 00       	mov    edx,0x3
c000619f:	83 f8 45             	cmp    eax,0x45
c00061a2:	74 08                	je     c00061ac <isjoliet+0x2d>
c00061a4:	31 d2                	xor    edx,edx
c00061a6:	83 f8 40             	cmp    eax,0x40
c00061a9:	0f 94 c2             	sete   dl
c00061ac:	89 d0                	mov    eax,edx
c00061ae:	c3                   	ret    

c00061af <htohl_32>:
c00061af:	8b 00                	mov    eax,DWORD PTR [eax]
c00061b1:	c3                   	ret    

c00061b2 <iso_733>:
c00061b2:	eb fb                	jmp    c00061af <htohl_32>

c00061b4 <bgrad_cache>:
c00061b4:	83 fa 0e             	cmp    edx,0xe
c00061b7:	77 16                	ja     c00061cf <bgrad_cache+0x1b>
c00061b9:	53                   	push   ebx
c00061ba:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c00061bd:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c00061c1:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c00061c4:	42                   	inc    edx
c00061c5:	83 fa 0f             	cmp    edx,0xf
c00061c8:	75 f3                	jne    c00061bd <bgrad_cache+0x9>
c00061ca:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c00061cd:	5b                   	pop    ebx
c00061ce:	c3                   	ret    
c00061cf:	c3                   	ret    

c00061d0 <ucscompare>:
c00061d0:	55                   	push   ebp
c00061d1:	57                   	push   edi
c00061d2:	89 c7                	mov    edi,eax
c00061d4:	56                   	push   esi
c00061d5:	89 d6                	mov    esi,edx
c00061d7:	53                   	push   ebx
c00061d8:	31 d2                	xor    edx,edx
c00061da:	83 ec 1c             	sub    esp,0x1c
c00061dd:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c00061e1:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c00061e6:	c1 e3 08             	shl    ebx,0x8
c00061e9:	09 c3                	or     ebx,eax
c00061eb:	39 ca                	cmp    edx,ecx
c00061ed:	7d 42                	jge    c0006231 <ucscompare+0x61>
c00061ef:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c00061f3:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c00061f8:	c1 e0 08             	shl    eax,0x8
c00061fb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00061ff:	09 e8                	or     eax,ebp
c0006201:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006205:	83 f8 3b             	cmp    eax,0x3b
c0006208:	74 27                	je     c0006231 <ucscompare+0x61>
c000620a:	83 ec 0c             	sub    esp,0xc
c000620d:	50                   	push   eax
c000620e:	e8 3d a7 ff ff       	call   c0000950 <tolower>
c0006213:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006216:	89 c5                	mov    ebp,eax
c0006218:	e8 33 a7 ff ff       	call   c0000950 <tolower>
c000621d:	83 c4 10             	add    esp,0x10
c0006220:	39 c5                	cmp    ebp,eax
c0006222:	75 20                	jne    c0006244 <ucscompare+0x74>
c0006224:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006228:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000622c:	83 c2 02             	add    edx,0x2
c000622f:	eb ac                	jmp    c00061dd <ucscompare+0xd>
c0006231:	85 db                	test   ebx,ebx
c0006233:	0f 95 c2             	setne  dl
c0006236:	31 c0                	xor    eax,eax
c0006238:	83 fb 2f             	cmp    ebx,0x2f
c000623b:	0f 95 c0             	setne  al
c000623e:	21 d0                	and    eax,edx
c0006240:	f7 d8                	neg    eax
c0006242:	eb 03                	jmp    c0006247 <ucscompare+0x77>
c0006244:	83 c8 ff             	or     eax,0xffffffff
c0006247:	83 c4 1c             	add    esp,0x1c
c000624a:	5b                   	pop    ebx
c000624b:	5e                   	pop    esi
c000624c:	5f                   	pop    edi
c000624d:	5d                   	pop    ebp
c000624e:	c3                   	ret    

c000624f <fncompare>:
c000624f:	55                   	push   ebp
c0006250:	57                   	push   edi
c0006251:	89 c7                	mov    edi,eax
c0006253:	56                   	push   esi
c0006254:	89 ce                	mov    esi,ecx
c0006256:	53                   	push   ebx
c0006257:	31 db                	xor    ebx,ebx
c0006259:	83 ec 1c             	sub    esp,0x1c
c000625c:	39 d3                	cmp    ebx,edx
c000625e:	7d 45                	jge    c00062a5 <fncompare+0x56>
c0006260:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006264:	83 f8 3b             	cmp    eax,0x3b
c0006267:	74 3c                	je     c00062a5 <fncompare+0x56>
c0006269:	83 f8 2e             	cmp    eax,0x2e
c000626c:	75 0e                	jne    c000627c <fncompare+0x2d>
c000626e:	8d 4a ff             	lea    ecx,[edx-0x1]
c0006271:	39 d9                	cmp    ecx,ebx
c0006273:	74 30                	je     c00062a5 <fncompare+0x56>
c0006275:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c000627a:	74 29                	je     c00062a5 <fncompare+0x56>
c000627c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006280:	83 ec 0c             	sub    esp,0xc
c0006283:	50                   	push   eax
c0006284:	e8 c7 a6 ff ff       	call   c0000950 <tolower>
c0006289:	89 c5                	mov    ebp,eax
c000628b:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c000628f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006292:	e8 b9 a6 ff ff       	call   c0000950 <tolower>
c0006297:	83 c4 10             	add    esp,0x10
c000629a:	39 c5                	cmp    ebp,eax
c000629c:	75 1e                	jne    c00062bc <fncompare+0x6d>
c000629e:	43                   	inc    ebx
c000629f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062a3:	eb b7                	jmp    c000625c <fncompare+0xd>
c00062a5:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00062a9:	85 d2                	test   edx,edx
c00062ab:	0f 95 c1             	setne  cl
c00062ae:	31 c0                	xor    eax,eax
c00062b0:	83 fa 2f             	cmp    edx,0x2f
c00062b3:	0f 95 c0             	setne  al
c00062b6:	21 c8                	and    eax,ecx
c00062b8:	f7 d8                	neg    eax
c00062ba:	eb 03                	jmp    c00062bf <fncompare+0x70>
c00062bc:	83 c8 ff             	or     eax,0xffffffff
c00062bf:	83 c4 1c             	add    esp,0x1c
c00062c2:	5b                   	pop    ebx
c00062c3:	5e                   	pop    esi
c00062c4:	5f                   	pop    edi
c00062c5:	5d                   	pop    ebp
c00062c6:	c3                   	ret    

c00062c7 <bclear_cache>:
c00062c7:	83 ec 18             	sub    esp,0x18
c00062ca:	68 40 fa 02 c0       	push   0xc002fa40
c00062cf:	e8 48 30 02 00       	call   c002931c <iso_kprintf>
c00062d4:	83 c4 10             	add    esp,0x10
c00062d7:	31 c0                	xor    eax,eax
c00062d9:	8b 14 85 20 60 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9fe0]
c00062e0:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c00062e6:	8b 14 85 80 60 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9f80]
c00062ed:	40                   	inc    eax
c00062ee:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c00062f4:	83 f8 10             	cmp    eax,0x10
c00062f7:	75 e0                	jne    c00062d9 <bclear_cache+0x12>
c00062f9:	83 c4 0c             	add    esp,0xc
c00062fc:	c3                   	ret    

c00062fd <bclear>:
c00062fd:	eb c8                	jmp    c00062c7 <bclear_cache>

c00062ff <iso_break_all>:
c00062ff:	83 ec 18             	sub    esp,0x18
c0006302:	68 4e fa 02 c0       	push   0xc002fa4e
c0006307:	e8 10 30 02 00       	call   c002931c <iso_kprintf>
c000630c:	83 c4 10             	add    esp,0x10
c000630f:	31 c0                	xor    eax,eax
c0006311:	c7 80 b0 6d 03 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffc9250],0x1
c000631b:	05 94 00 00 00       	add    eax,0x94
c0006320:	3d 40 09 00 00       	cmp    eax,0x940
c0006325:	75 ea                	jne    c0006311 <iso_break_all+0x12>
c0006327:	83 c4 0c             	add    esp,0xc
c000632a:	c3                   	ret    

c000632b <isoReadDiscSector>:
c000632b:	83 ec 0c             	sub    esp,0xc
c000632e:	0f be 05 60 60 03 c0 	movsx  eax,BYTE PTR ds:0xc0036060
c0006335:	50                   	push   eax
c0006336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000633a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000633e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006342:	e8 79 2f 02 00       	call   c00292c0 <isoReadDiscSectorHelper>
c0006347:	83 c4 1c             	add    esp,0x1c
c000634a:	c3                   	ret    

c000634b <bread_cache>:
c000634b:	55                   	push   ebp
c000634c:	57                   	push   edi
c000634d:	89 d7                	mov    edi,edx
c000634f:	56                   	push   esi
c0006350:	ba 0f 00 00 00       	mov    edx,0xf
c0006355:	53                   	push   ebx
c0006356:	89 c6                	mov    esi,eax
c0006358:	83 ec 0c             	sub    esp,0xc
c000635b:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c000635e:	39 38                	cmp    DWORD PTR [eax],edi
c0006360:	74 3c                	je     c000639e <bread_cache+0x53>
c0006362:	4a                   	dec    edx
c0006363:	83 fa ff             	cmp    edx,0xffffffff
c0006366:	75 f3                	jne    c000635b <bread_cache+0x10>
c0006368:	31 db                	xor    ebx,ebx
c000636a:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c000636d:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0006370:	74 08                	je     c000637a <bread_cache+0x2f>
c0006372:	43                   	inc    ebx
c0006373:	83 fb 10             	cmp    ebx,0x10
c0006376:	75 f2                	jne    c000636a <bread_cache+0x1f>
c0006378:	31 db                	xor    ebx,ebx
c000637a:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c000637d:	50                   	push   eax
c000637e:	6a 01                	push   0x1
c0006380:	57                   	push   edi
c0006381:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006384:	83 c0 04             	add    eax,0x4
c0006387:	50                   	push   eax
c0006388:	e8 9e ff ff ff       	call   c000632b <isoReadDiscSector>
c000638d:	83 c4 10             	add    esp,0x10
c0006390:	83 c9 ff             	or     ecx,0xffffffff
c0006393:	85 c0                	test   eax,eax
c0006395:	78 13                	js     c00063aa <bread_cache+0x5f>
c0006397:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000639a:	89 da                	mov    edx,ebx
c000639c:	89 38                	mov    DWORD PTR [eax],edi
c000639e:	89 f0                	mov    eax,esi
c00063a0:	e8 0f fe ff ff       	call   c00061b4 <bgrad_cache>
c00063a5:	b9 0f 00 00 00       	mov    ecx,0xf
c00063aa:	83 c4 0c             	add    esp,0xc
c00063ad:	89 c8                	mov    eax,ecx
c00063af:	5b                   	pop    ebx
c00063b0:	5e                   	pop    esi
c00063b1:	5f                   	pop    edi
c00063b2:	5d                   	pop    ebp
c00063b3:	c3                   	ret    

c00063b4 <biread>:
c00063b4:	89 c2                	mov    edx,eax
c00063b6:	b8 80 60 03 c0       	mov    eax,0xc0036080
c00063bb:	eb 8e                	jmp    c000634b <bread_cache>

c00063bd <bdread>:
c00063bd:	89 c2                	mov    edx,eax
c00063bf:	b8 20 60 03 c0       	mov    eax,0xc0036020
c00063c4:	eb 85                	jmp    c000634b <bread_cache>

c00063c6 <strnicmp>:
c00063c6:	55                   	push   ebp
c00063c7:	57                   	push   edi
c00063c8:	31 ff                	xor    edi,edi
c00063ca:	56                   	push   esi
c00063cb:	53                   	push   ebx
c00063cc:	83 ec 0c             	sub    esp,0xc
c00063cf:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00063d3:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c00063d7:	74 43                	je     c000641c <strnicmp+0x56>
c00063d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00063dd:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c00063e1:	85 c0                	test   eax,eax
c00063e3:	74 37                	je     c000641c <strnicmp+0x56>
c00063e5:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c00063e9:	85 d2                	test   edx,edx
c00063eb:	74 2f                	je     c000641c <strnicmp+0x56>
c00063ed:	39 d0                	cmp    eax,edx
c00063ef:	8d 6f 01             	lea    ebp,[edi+0x1]
c00063f2:	75 04                	jne    c00063f8 <strnicmp+0x32>
c00063f4:	89 ef                	mov    edi,ebp
c00063f6:	eb db                	jmp    c00063d3 <strnicmp+0xd>
c00063f8:	83 ec 0c             	sub    esp,0xc
c00063fb:	50                   	push   eax
c00063fc:	e8 4f a5 ff ff       	call   c0000950 <tolower>
c0006401:	89 c3                	mov    ebx,eax
c0006403:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006407:	89 ef                	mov    edi,ebp
c0006409:	89 04 24             	mov    DWORD PTR [esp],eax
c000640c:	e8 3f a5 ff ff       	call   c0000950 <tolower>
c0006411:	83 c4 10             	add    esp,0x10
c0006414:	29 c3                	sub    ebx,eax
c0006416:	89 d8                	mov    eax,ebx
c0006418:	74 b9                	je     c00063d3 <strnicmp+0xd>
c000641a:	eb 02                	jmp    c000641e <strnicmp+0x58>
c000641c:	31 c0                	xor    eax,eax
c000641e:	83 c4 0c             	add    esp,0xc
c0006421:	5b                   	pop    ebx
c0006422:	5e                   	pop    esi
c0006423:	5f                   	pop    edi
c0006424:	5d                   	pop    ebp
c0006425:	c3                   	ret    

c0006426 <find_object>:
c0006426:	55                   	push   ebp
c0006427:	57                   	push   edi
c0006428:	89 c7                	mov    edi,eax
c000642a:	56                   	push   esi
c000642b:	53                   	push   ebx
c000642c:	89 d3                	mov    ebx,edx
c000642e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006434:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000643b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000643f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006443:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c000644a:	74 0b                	je     c0006457 <find_object+0x31>
c000644c:	89 fa                	mov    edx,edi
c000644e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006452:	e8 89 fc ff ff       	call   c00060e0 <utf2ucs>
c0006457:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000645a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000645e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006463:	7e 11                	jle    c0006476 <find_object+0x50>
c0006465:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006469:	e8 46 ff ff ff       	call   c00063b4 <biread>
c000646e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006472:	85 c0                	test   eax,eax
c0006474:	79 07                	jns    c000647d <find_object+0x57>
c0006476:	31 db                	xor    ebx,ebx
c0006478:	e9 56 01 00 00       	jmp    c00065d3 <find_object+0x1ad>
c000647d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0006485:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006489:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000648d:	8b 04 85 80 60 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9f80]
c0006494:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c0006498:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c000649b:	85 f6                	test   esi,esi
c000649d:	75 0e                	jne    c00064ad <find_object+0x87>
c000649f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00064a3:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00064ab:	eb b1                	jmp    c000645e <find_object+0x38>
c00064ad:	8b 2d 94 76 03 c0    	mov    ebp,DWORD PTR ds:0xc0037694
c00064b3:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00064b7:	85 ed                	test   ebp,ebp
c00064b9:	89 c8                	mov    eax,ecx
c00064bb:	74 2b                	je     c00064e8 <find_object+0xc2>
c00064bd:	8d 43 21             	lea    eax,[ebx+0x21]
c00064c0:	8d 54 24 20          	lea    edx,[esp+0x20]
c00064c4:	e8 07 fd ff ff       	call   c00061d0 <ucscompare>
c00064c9:	85 c0                	test   eax,eax
c00064cb:	0f 84 bf 00 00 00    	je     c0006590 <find_object+0x16a>
c00064d1:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c00064d4:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c00064d8:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c00064e0:	0f 8e da 00 00 00    	jle    c00065c0 <find_object+0x19a>
c00064e6:	eb b7                	jmp    c000649f <find_object+0x79>
c00064e8:	29 ce                	sub    esi,ecx
c00064ea:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c00064ee:	a8 01                	test   al,0x1
c00064f0:	74 05                	je     c00064f7 <find_object+0xd1>
c00064f2:	83 ee 21             	sub    esi,0x21
c00064f5:	eb 5a                	jmp    c0006551 <find_object+0x12b>
c00064f7:	42                   	inc    edx
c00064f8:	83 ee 22             	sub    esi,0x22
c00064fb:	eb 54                	jmp    c0006551 <find_object+0x12b>
c00064fd:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006500:	48                   	dec    eax
c0006501:	3c 01                	cmp    al,0x1
c0006503:	77 51                	ja     c0006556 <find_object+0x130>
c0006505:	50                   	push   eax
c0006506:	6a 02                	push   0x2
c0006508:	68 5d fa 02 c0       	push   0xc002fa5d
c000650d:	52                   	push   edx
c000650e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0006512:	e8 c9 a2 ff ff       	call   c00007e0 <strncmp>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	85 c0                	test   eax,eax
c000651c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006520:	75 27                	jne    c0006549 <find_object+0x123>
c0006522:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006526:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006529:	50                   	push   eax
c000652a:	8d 42 05             	lea    eax,[edx+0x5]
c000652d:	55                   	push   ebp
c000652e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006532:	50                   	push   eax
c0006533:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006537:	50                   	push   eax
c0006538:	e8 43 a1 ff ff       	call   c0000680 <strncpy>
c000653d:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c0006542:	83 c4 10             	add    esp,0x10
c0006545:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006549:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000654d:	29 c6                	sub    esi,eax
c000654f:	01 c2                	add    edx,eax
c0006551:	83 fe 03             	cmp    esi,0x3
c0006554:	7f a7                	jg     c00064fd <find_object+0xd7>
c0006556:	85 ed                	test   ebp,ebp
c0006558:	7e 40                	jle    c000659a <find_object+0x174>
c000655a:	51                   	push   ecx
c000655b:	51                   	push   ecx
c000655c:	6a 2f                	push   0x2f
c000655e:	57                   	push   edi
c000655f:	e8 3c a2 ff ff       	call   c00007a0 <strchr>
c0006564:	83 c4 10             	add    esp,0x10
c0006567:	85 c0                	test   eax,eax
c0006569:	74 04                	je     c000656f <find_object+0x149>
c000656b:	29 f8                	sub    eax,edi
c000656d:	eb 0c                	jmp    c000657b <find_object+0x155>
c000656f:	83 ec 0c             	sub    esp,0xc
c0006572:	57                   	push   edi
c0006573:	e8 f8 9f ff ff       	call   c0000570 <strlen>
c0006578:	83 c4 10             	add    esp,0x10
c000657b:	52                   	push   edx
c000657c:	50                   	push   eax
c000657d:	57                   	push   edi
c000657e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006582:	50                   	push   eax
c0006583:	e8 3e fe ff ff       	call   c00063c6 <strnicmp>
c0006588:	83 c4 10             	add    esp,0x10
c000658b:	e9 39 ff ff ff       	jmp    c00064c9 <find_object+0xa3>
c0006590:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006594:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c0006598:	eb 1e                	jmp    c00065b8 <find_object+0x192>
c000659a:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000659e:	8d 43 21             	lea    eax,[ebx+0x21]
c00065a1:	89 f9                	mov    ecx,edi
c00065a3:	e8 a7 fc ff ff       	call   c000624f <fncompare>
c00065a8:	85 c0                	test   eax,eax
c00065aa:	0f 85 21 ff ff ff    	jne    c00064d1 <find_object+0xab>
c00065b0:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065b4:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00065b8:	0f 85 13 ff ff ff    	jne    c00064d1 <find_object+0xab>
c00065be:	eb 13                	jmp    c00065d3 <find_object+0x1ad>
c00065c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00065c4:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00065c8:	0f 8f b7 fe ff ff    	jg     c0006485 <find_object+0x5f>
c00065ce:	e9 cc fe ff ff       	jmp    c000649f <find_object+0x79>
c00065d3:	81 c4 2c 01 00 00    	add    esp,0x12c
c00065d9:	89 d8                	mov    eax,ebx
c00065db:	5b                   	pop    ebx
c00065dc:	5e                   	pop    esi
c00065dd:	5f                   	pop    edi
c00065de:	5d                   	pop    ebp
c00065df:	c3                   	ret    

c00065e0 <find_object_path>:
c00065e0:	55                   	push   ebp
c00065e1:	57                   	push   edi
c00065e2:	89 d7                	mov    edi,edx
c00065e4:	56                   	push   esi
c00065e5:	89 c6                	mov    esi,eax
c00065e7:	53                   	push   ebx
c00065e8:	89 cb                	mov    ebx,ecx
c00065ea:	83 ec 0c             	sub    esp,0xc
c00065ed:	50                   	push   eax
c00065ee:	50                   	push   eax
c00065ef:	6a 2f                	push   0x2f
c00065f1:	56                   	push   esi
c00065f2:	e8 a9 a1 ff ff       	call   c00007a0 <strchr>
c00065f7:	83 c4 10             	add    esp,0x10
c00065fa:	89 c5                	mov    ebp,eax
c00065fc:	85 c0                	test   eax,eax
c00065fe:	74 3a                	je     c000663a <find_object_path+0x5a>
c0006600:	39 ee                	cmp    esi,ebp
c0006602:	74 31                	je     c0006635 <find_object_path+0x55>
c0006604:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006607:	e8 a6 fb ff ff       	call   c00061b2 <iso_733>
c000660c:	89 c2                	mov    edx,eax
c000660e:	8d 43 02             	lea    eax,[ebx+0x2]
c0006611:	e8 9c fb ff ff       	call   c00061b2 <iso_733>
c0006616:	83 ec 0c             	sub    esp,0xc
c0006619:	89 c1                	mov    ecx,eax
c000661b:	52                   	push   edx
c000661c:	89 f0                	mov    eax,esi
c000661e:	ba 01 00 00 00       	mov    edx,0x1
c0006623:	e8 fe fd ff ff       	call   c0006426 <find_object>
c0006628:	83 c4 10             	add    esp,0x10
c000662b:	89 c3                	mov    ebx,eax
c000662d:	85 c0                	test   eax,eax
c000662f:	75 04                	jne    c0006635 <find_object_path+0x55>
c0006631:	31 db                	xor    ebx,ebx
c0006633:	eb 36                	jmp    c000666b <find_object_path+0x8b>
c0006635:	8d 75 01             	lea    esi,[ebp+0x1]
c0006638:	eb b3                	jmp    c00065ed <find_object_path+0xd>
c000663a:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000663d:	74 28                	je     c0006667 <find_object_path+0x87>
c000663f:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006642:	e8 6b fb ff ff       	call   c00061b2 <iso_733>
c0006647:	89 c2                	mov    edx,eax
c0006649:	8d 43 02             	lea    eax,[ebx+0x2]
c000664c:	e8 61 fb ff ff       	call   c00061b2 <iso_733>
c0006651:	83 ec 0c             	sub    esp,0xc
c0006654:	89 c1                	mov    ecx,eax
c0006656:	52                   	push   edx
c0006657:	89 f0                	mov    eax,esi
c0006659:	89 fa                	mov    edx,edi
c000665b:	e8 c6 fd ff ff       	call   c0006426 <find_object>
c0006660:	83 c4 10             	add    esp,0x10
c0006663:	89 c3                	mov    ebx,eax
c0006665:	eb 04                	jmp    c000666b <find_object_path+0x8b>
c0006667:	85 ff                	test   edi,edi
c0006669:	74 c6                	je     c0006631 <find_object_path+0x51>
c000666b:	83 c4 0c             	add    esp,0xc
c000666e:	89 d8                	mov    eax,ebx
c0006670:	5b                   	pop    ebx
c0006671:	5e                   	pop    esi
c0006672:	5f                   	pop    edi
c0006673:	5d                   	pop    ebp
c0006674:	c3                   	ret    

c0006675 <stricmp>:
c0006675:	57                   	push   edi
c0006676:	56                   	push   esi
c0006677:	31 f6                	xor    esi,esi
c0006679:	53                   	push   ebx
c000667a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000667e:	83 ec 0c             	sub    esp,0xc
c0006681:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c0006685:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006689:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c000668d:	50                   	push   eax
c000668e:	e8 9d a2 ff ff       	call   c0000930 <toupper>
c0006693:	89 04 24             	mov    DWORD PTR [esp],eax
c0006696:	e8 b5 a2 ff ff       	call   c0000950 <tolower>
c000669b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000669e:	89 c3                	mov    ebx,eax
c00066a0:	e8 8b a2 ff ff       	call   c0000930 <toupper>
c00066a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00066a8:	e8 a3 a2 ff ff       	call   c0000950 <tolower>
c00066ad:	83 c4 10             	add    esp,0x10
c00066b0:	39 c3                	cmp    ebx,eax
c00066b2:	75 05                	jne    c00066b9 <stricmp+0x44>
c00066b4:	46                   	inc    esi
c00066b5:	85 db                	test   ebx,ebx
c00066b7:	75 c1                	jne    c000667a <stricmp+0x5>
c00066b9:	29 c3                	sub    ebx,eax
c00066bb:	89 d8                	mov    eax,ebx
c00066bd:	5b                   	pop    ebx
c00066be:	5e                   	pop    esi
c00066bf:	5f                   	pop    edi
c00066c0:	c3                   	ret    

c00066c1 <iso_open>:
c00066c1:	57                   	push   edi
c00066c2:	31 c0                	xor    eax,eax
c00066c4:	56                   	push   esi
c00066c5:	b9 60 76 03 c0       	mov    ecx,0xc0037660
c00066ca:	53                   	push   ebx
c00066cb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00066d0:	0f 95 c0             	setne  al
c00066d3:	89 c2                	mov    edx,eax
c00066d5:	89 c6                	mov    esi,eax
c00066d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00066db:	e8 00 ff ff ff       	call   c00065e0 <find_object_path>
c00066e0:	83 ca ff             	or     edx,0xffffffff
c00066e3:	85 c0                	test   eax,eax
c00066e5:	74 5e                	je     c0006745 <iso_open+0x84>
c00066e7:	89 c1                	mov    ecx,eax
c00066e9:	31 d2                	xor    edx,edx
c00066eb:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c00066f1:	83 bf 20 6d 03 c0 00 	cmp    DWORD PTR [edi-0x3ffc92e0],0x0
c00066f8:	75 42                	jne    c000673c <iso_open+0x7b>
c00066fa:	8d 41 02             	lea    eax,[ecx+0x2]
c00066fd:	c7 87 20 6d 03 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffc92e0],0xffffffff
c0006707:	e8 a6 fa ff ff       	call   c00061b2 <iso_733>
c000670c:	89 b7 24 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92dc],esi
c0006712:	89 87 20 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92e0],eax
c0006718:	c7 87 28 6d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc92d8],0x0
c0006722:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006725:	e8 88 fa ff ff       	call   c00061b2 <iso_733>
c000672a:	c7 87 b0 6d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc9250],0x0
c0006734:	89 87 2c 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92d4],eax
c000673a:	eb 09                	jmp    c0006745 <iso_open+0x84>
c000673c:	42                   	inc    edx
c000673d:	83 fa 10             	cmp    edx,0x10
c0006740:	75 a9                	jne    c00066eb <iso_open+0x2a>
c0006742:	83 ca ff             	or     edx,0xffffffff
c0006745:	5b                   	pop    ebx
c0006746:	89 d0                	mov    eax,edx
c0006748:	5e                   	pop    esi
c0006749:	5f                   	pop    edi
c000674a:	c3                   	ret    

c000674b <iso_close>:
c000674b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000674f:	83 f8 0f             	cmp    eax,0xf
c0006752:	7f 10                	jg     c0006764 <iso_close+0x19>
c0006754:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000675a:	c7 80 20 6d 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc92e0],0x0
c0006764:	e9 5e fb ff ff       	jmp    c00062c7 <bclear_cache>

c0006769 <iso_read>:
c0006769:	55                   	push   ebp
c000676a:	57                   	push   edi
c000676b:	56                   	push   esi
c000676c:	53                   	push   ebx
c000676d:	83 ec 1c             	sub    esp,0x1c
c0006770:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0006774:	83 fd 0f             	cmp    ebp,0xf
c0006777:	7e 0a                	jle    c0006783 <iso_read+0x1a>
c0006779:	83 c8 ff             	or     eax,0xffffffff
c000677c:	89 c2                	mov    edx,eax
c000677e:	e9 f4 00 00 00       	jmp    c0006877 <iso_read+0x10e>
c0006783:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c0006789:	83 bd 20 6d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc92e0],0x0
c0006790:	74 e7                	je     c0006779 <iso_read+0x10>
c0006792:	8b 95 b0 6d 03 c0    	mov    edx,DWORD PTR [ebp-0x3ffc9250]
c0006798:	85 d2                	test   edx,edx
c000679a:	75 dd                	jne    c0006779 <iso_read+0x10>
c000679c:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067a1:	0f 84 cd 00 00 00    	je     c0006874 <iso_read+0x10b>
c00067a7:	8b 85 28 6d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc92d8]
c00067ad:	8b 8d 2c 6d 03 c0    	mov    ecx,DWORD PTR [ebp-0x3ffc92d4]
c00067b3:	29 c1                	sub    ecx,eax
c00067b5:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00067b9:	76 04                	jbe    c00067bf <iso_read+0x56>
c00067bb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00067bf:	85 c9                	test   ecx,ecx
c00067c1:	0f 84 ad 00 00 00    	je     c0006874 <iso_read+0x10b>
c00067c7:	89 c6                	mov    esi,eax
c00067c9:	bb 00 08 00 00       	mov    ebx,0x800
c00067ce:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00067d4:	c1 e8 0b             	shr    eax,0xb
c00067d7:	29 f3                	sub    ebx,esi
c00067d9:	03 85 20 6d 03 c0    	add    eax,DWORD PTR [ebp-0x3ffc92e0]
c00067df:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00067e5:	7e 3f                	jle    c0006826 <iso_read+0xbd>
c00067e7:	81 fb 00 08 00 00    	cmp    ebx,0x800
c00067ed:	75 37                	jne    c0006826 <iso_read+0xbd>
c00067ef:	be 20 00 00 00       	mov    esi,0x20
c00067f4:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c00067fa:	7f 05                	jg     c0006801 <iso_read+0x98>
c00067fc:	89 ce                	mov    esi,ecx
c00067fe:	c1 fe 0b             	sar    esi,0xb
c0006801:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006805:	89 f3                	mov    ebx,esi
c0006807:	c1 e3 0b             	shl    ebx,0xb
c000680a:	52                   	push   edx
c000680b:	56                   	push   esi
c000680c:	50                   	push   eax
c000680d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006811:	e8 15 fb ff ff       	call   c000632b <isoReadDiscSector>
c0006816:	83 c4 10             	add    esp,0x10
c0006819:	85 c0                	test   eax,eax
c000681b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000681f:	7f 3e                	jg     c000685f <iso_read+0xf6>
c0006821:	e9 53 ff ff ff       	jmp    c0006779 <iso_read+0x10>
c0006826:	39 cb                	cmp    ebx,ecx
c0006828:	7e 02                	jle    c000682c <iso_read+0xc3>
c000682a:	89 cb                	mov    ebx,ecx
c000682c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006830:	e8 88 fb ff ff       	call   c00063bd <bdread>
c0006835:	85 c0                	test   eax,eax
c0006837:	0f 88 3c ff ff ff    	js     c0006779 <iso_read+0x10>
c000683d:	8b 0c 85 20 60 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc9fe0]
c0006844:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006848:	8b 85 28 6d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc92d8]
c000684e:	25 ff 07 00 00       	and    eax,0x7ff
c0006853:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006857:	89 d9                	mov    ecx,ebx
c0006859:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000685b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000685f:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006863:	01 9d 28 6d 03 c0    	add    DWORD PTR [ebp-0x3ffc92d8],ebx
c0006869:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c000686d:	01 da                	add    edx,ebx
c000686f:	e9 28 ff ff ff       	jmp    c000679c <iso_read+0x33>
c0006874:	89 d0                	mov    eax,edx
c0006876:	99                   	cdq    
c0006877:	83 c4 1c             	add    esp,0x1c
c000687a:	5b                   	pop    ebx
c000687b:	5e                   	pop    esi
c000687c:	5f                   	pop    edi
c000687d:	5d                   	pop    ebp
c000687e:	c3                   	ret    

c000687f <iso_seek>:
c000687f:	55                   	push   ebp
c0006880:	83 c8 ff             	or     eax,0xffffffff
c0006883:	57                   	push   edi
c0006884:	89 c2                	mov    edx,eax
c0006886:	56                   	push   esi
c0006887:	53                   	push   ebx
c0006888:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000688c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0006890:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006894:	83 fe 0f             	cmp    esi,0xf
c0006897:	7f 65                	jg     c00068fe <iso_seek+0x7f>
c0006899:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c000689f:	8d 8d 20 6d 03 c0    	lea    ecx,[ebp-0x3ffc92e0]
c00068a5:	83 bd 20 6d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc92e0],0x0
c00068ac:	74 50                	je     c00068fe <iso_seek+0x7f>
c00068ae:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068b5:	75 47                	jne    c00068fe <iso_seek+0x7f>
c00068b7:	83 fb 01             	cmp    ebx,0x1
c00068ba:	74 0e                	je     c00068ca <iso_seek+0x4b>
c00068bc:	83 fb 02             	cmp    ebx,0x2
c00068bf:	74 0e                	je     c00068cf <iso_seek+0x50>
c00068c1:	85 db                	test   ebx,ebx
c00068c3:	75 39                	jne    c00068fe <iso_seek+0x7f>
c00068c5:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00068c8:	eb 0d                	jmp    c00068d7 <iso_seek+0x58>
c00068ca:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c00068cd:	eb 08                	jmp    c00068d7 <iso_seek+0x58>
c00068cf:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c00068d2:	01 f8                	add    eax,edi
c00068d4:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00068d7:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c00068dd:	8b 88 2c 6d 03 c0    	mov    ecx,DWORD PTR [eax-0x3ffc92d4]
c00068e3:	05 20 6d 03 c0       	add    eax,0xc0036d20
c00068e8:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c00068eb:	76 03                	jbe    c00068f0 <iso_seek+0x71>
c00068ed:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00068f0:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c00068f6:	8b 82 28 6d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc92d8]
c00068fc:	31 d2                	xor    edx,edx
c00068fe:	5b                   	pop    ebx
c00068ff:	5e                   	pop    esi
c0006900:	5f                   	pop    edi
c0006901:	5d                   	pop    ebp
c0006902:	c3                   	ret    

c0006903 <iso_tell>:
c0006903:	83 c8 ff             	or     eax,0xffffffff
c0006906:	53                   	push   ebx
c0006907:	89 c2                	mov    edx,eax
c0006909:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000690d:	83 f9 0f             	cmp    ecx,0xf
c0006910:	7f 20                	jg     c0006932 <iso_tell+0x2f>
c0006912:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006918:	83 bb 20 6d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc92e0],0x0
c000691f:	74 11                	je     c0006932 <iso_tell+0x2f>
c0006921:	83 bb b0 6d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc9250],0x0
c0006928:	75 08                	jne    c0006932 <iso_tell+0x2f>
c000692a:	8b 83 28 6d 03 c0    	mov    eax,DWORD PTR [ebx-0x3ffc92d8]
c0006930:	31 d2                	xor    edx,edx
c0006932:	5b                   	pop    ebx
c0006933:	c3                   	ret    

c0006934 <iso_total>:
c0006934:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006938:	83 c8 ff             	or     eax,0xffffffff
c000693b:	83 fa 0f             	cmp    edx,0xf
c000693e:	7f 1e                	jg     c000695e <iso_total+0x2a>
c0006940:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006946:	83 ba 20 6d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc92e0],0x0
c000694d:	74 0f                	je     c000695e <iso_total+0x2a>
c000694f:	83 ba b0 6d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc9250],0x0
c0006956:	75 06                	jne    c000695e <iso_total+0x2a>
c0006958:	8b 82 2c 6d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc92d4]
c000695e:	c3                   	ret    

c000695f <fn_postprocess>:
c000695f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006963:	89 d0                	mov    eax,edx
c0006965:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0006968:	83 f9 3b             	cmp    ecx,0x3b
c000696b:	74 07                	je     c0006974 <fn_postprocess+0x15>
c000696d:	85 c9                	test   ecx,ecx
c000696f:	74 03                	je     c0006974 <fn_postprocess+0x15>
c0006971:	40                   	inc    eax
c0006972:	eb f1                	jmp    c0006965 <fn_postprocess+0x6>
c0006974:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006977:	39 d0                	cmp    eax,edx
c0006979:	76 0a                	jbe    c0006985 <fn_postprocess+0x26>
c000697b:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c000697f:	75 04                	jne    c0006985 <fn_postprocess+0x26>
c0006981:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c0006985:	c3                   	ret    

c0006986 <iso_readdir>:
c0006986:	55                   	push   ebp
c0006987:	57                   	push   edi
c0006988:	56                   	push   esi
c0006989:	53                   	push   ebx
c000698a:	83 ec 1c             	sub    esp,0x1c
c000698d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006991:	83 fb 0f             	cmp    ebx,0xf
c0006994:	7f 28                	jg     c00069be <iso_readdir+0x38>
c0006996:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699c:	8d b8 20 6d 03 c0    	lea    edi,[eax-0x3ffc92e0]
c00069a2:	83 b8 20 6d 03 c0 00 	cmp    DWORD PTR [eax-0x3ffc92e0],0x0
c00069a9:	74 13                	je     c00069be <iso_readdir+0x38>
c00069ab:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069af:	74 0d                	je     c00069be <iso_readdir+0x38>
c00069b1:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00069b8:	0f 84 b1 00 00 00    	je     c0006a6f <iso_readdir+0xe9>
c00069be:	83 ec 0c             	sub    esp,0xc
c00069c1:	68 60 fa 02 c0       	push   0xc002fa60
c00069c6:	e8 51 29 02 00       	call   c002931c <iso_kprintf>
c00069cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00069ce:	e8 65 29 02 00       	call   c0029338 <iso_kprintfd>
c00069d3:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c00069d9:	c7 04 24 65 fa 02 c0 	mov    DWORD PTR [esp],0xc002fa65
c00069e0:	e8 37 29 02 00       	call   c002931c <iso_kprintf>
c00069e5:	5d                   	pop    ebp
c00069e6:	ff b3 20 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc92e0]
c00069ec:	e8 47 29 02 00       	call   c0029338 <iso_kprintfd>
c00069f1:	c7 04 24 6b fa 02 c0 	mov    DWORD PTR [esp],0xc002fa6b
c00069f8:	e8 1f 29 02 00       	call   c002931c <iso_kprintf>
c00069fd:	58                   	pop    eax
c00069fe:	ff b3 24 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc92dc]
c0006a04:	e8 2f 29 02 00       	call   c0029338 <iso_kprintfd>
c0006a09:	c7 04 24 71 fa 02 c0 	mov    DWORD PTR [esp],0xc002fa71
c0006a10:	e8 07 29 02 00       	call   c002931c <iso_kprintf>
c0006a15:	58                   	pop    eax
c0006a16:	ff b3 b0 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc9250]
c0006a1c:	e8 17 29 02 00       	call   c0029338 <iso_kprintfd>
c0006a21:	83 c4 10             	add    esp,0x10
c0006a24:	eb 42                	jmp    c0006a68 <iso_readdir+0xe2>
c0006a26:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a29:	8b 34 85 80 60 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9f80]
c0006a30:	89 d1                	mov    ecx,edx
c0006a32:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a38:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a3c:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a3f:	75 35                	jne    c0006a76 <iso_readdir+0xf0>
c0006a41:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a47:	81 c2 00 08 00 00    	add    edx,0x800
c0006a4d:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a50:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a53:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a56:	73 1e                	jae    c0006a76 <iso_readdir+0xf0>
c0006a58:	c1 ea 0b             	shr    edx,0xb
c0006a5b:	8b 07                	mov    eax,DWORD PTR [edi]
c0006a5d:	01 d0                	add    eax,edx
c0006a5f:	e8 50 f9 ff ff       	call   c00063b4 <biread>
c0006a64:	85 c0                	test   eax,eax
c0006a66:	79 be                	jns    c0006a26 <iso_readdir+0xa0>
c0006a68:	31 c0                	xor    eax,eax
c0006a6a:	e9 66 01 00 00       	jmp    c0006bd5 <iso_readdir+0x24f>
c0006a6f:	31 f6                	xor    esi,esi
c0006a71:	83 c8 ff             	or     eax,0xffffffff
c0006a74:	eb da                	jmp    c0006a50 <iso_readdir+0xca>
c0006a76:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006a7c:	8b ba 28 6d 03 c0    	mov    edi,DWORD PTR [edx-0x3ffc92d8]
c0006a82:	81 c2 20 6d 03 c0    	add    edx,0xc0036d20
c0006a88:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006a8b:	73 db                	jae    c0006a68 <iso_readdir+0xe2>
c0006a8d:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006a91:	75 34                	jne    c0006ac7 <iso_readdir+0x141>
c0006a93:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006a97:	75 2e                	jne    c0006ac7 <iso_readdir+0x141>
c0006a99:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006a9c:	8b 34 85 80 60 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9f80]
c0006aa3:	01 f9                	add    ecx,edi
c0006aa5:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006aa8:	89 c8                	mov    eax,ecx
c0006aaa:	25 ff 07 00 00       	and    eax,0x7ff
c0006aaf:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006ab4:	01 c8                	add    eax,ecx
c0006ab6:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006ab9:	25 ff 07 00 00       	and    eax,0x7ff
c0006abe:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006ac2:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006ac5:	74 a1                	je     c0006a68 <iso_readdir+0xe2>
c0006ac7:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006acd:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006ad1:	8d 56 21             	lea    edx,[esi+0x21]
c0006ad4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006ad8:	8d a8 38 6d 03 c0    	lea    ebp,[eax-0x3ffc92c8]
c0006ade:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006ae5:	74 0c                	je     c0006af3 <iso_readdir+0x16d>
c0006ae7:	89 e8                	mov    eax,ebp
c0006ae9:	e8 14 f6 ff ff       	call   c0006102 <ucs2utfn>
c0006aee:	e9 a6 00 00 00       	jmp    c0006b99 <iso_readdir+0x213>
c0006af3:	57                   	push   edi
c0006af4:	51                   	push   ecx
c0006af5:	52                   	push   edx
c0006af6:	55                   	push   ebp
c0006af7:	e8 84 9b ff ff       	call   c0000680 <strncpy>
c0006afc:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b00:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006b06:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b09:	c6 84 01 38 6d 03 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffc92c8],0x0
c0006b11:	e8 49 fe ff ff       	call   c000695f <fn_postprocess>
c0006b16:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b1a:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b1d:	83 c4 10             	add    esp,0x10
c0006b20:	29 d0                	sub    eax,edx
c0006b22:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006b26:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006b2a:	74 05                	je     c0006b31 <iso_readdir+0x1ab>
c0006b2c:	83 e8 21             	sub    eax,0x21
c0006b2f:	eb 04                	jmp    c0006b35 <iso_readdir+0x1af>
c0006b31:	47                   	inc    edi
c0006b32:	83 e8 22             	sub    eax,0x22
c0006b35:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b39:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b43:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b48:	7e 4f                	jle    c0006b99 <iso_readdir+0x213>
c0006b4a:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006b4d:	48                   	dec    eax
c0006b4e:	3c 01                	cmp    al,0x1
c0006b50:	77 47                	ja     c0006b99 <iso_readdir+0x213>
c0006b52:	52                   	push   edx
c0006b53:	6a 02                	push   0x2
c0006b55:	68 5d fa 02 c0       	push   0xc002fa5d
c0006b5a:	57                   	push   edi
c0006b5b:	e8 80 9c ff ff       	call   c00007e0 <strncmp>
c0006b60:	83 c4 10             	add    esp,0x10
c0006b63:	85 c0                	test   eax,eax
c0006b65:	75 26                	jne    c0006b8d <iso_readdir+0x207>
c0006b67:	50                   	push   eax
c0006b68:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006b6c:	83 e8 05             	sub    eax,0x5
c0006b6f:	50                   	push   eax
c0006b70:	8d 47 05             	lea    eax,[edi+0x5]
c0006b73:	50                   	push   eax
c0006b74:	55                   	push   ebp
c0006b75:	e8 06 9b ff ff       	call   c0000680 <strncpy>
c0006b7a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006b7e:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006b82:	83 c4 10             	add    esp,0x10
c0006b85:	c6 84 08 33 6d 03 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffc92cd],0x0
c0006b8d:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006b91:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006b95:	01 c7                	add    edi,eax
c0006b97:	eb aa                	jmp    c0006b43 <iso_readdir+0x1bd>
c0006b99:	83 c8 ff             	or     eax,0xffffffff
c0006b9c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006ba0:	89 c2                	mov    edx,eax
c0006ba2:	75 0a                	jne    c0006bae <iso_readdir+0x228>
c0006ba4:	8d 46 0a             	lea    eax,[esi+0xa]
c0006ba7:	e8 06 f6 ff ff       	call   c00061b2 <iso_733>
c0006bac:	31 d2                	xor    edx,edx
c0006bae:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006bb4:	89 83 30 6d 03 c0    	mov    DWORD PTR [ebx-0x3ffc92d0],eax
c0006bba:	89 93 34 6d 03 c0    	mov    DWORD PTR [ebx-0x3ffc92cc],edx
c0006bc0:	81 c3 20 6d 03 c0    	add    ebx,0xc0036d20
c0006bc6:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006bc9:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006bcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006bd0:	05 30 6d 03 c0       	add    eax,0xc0036d30
c0006bd5:	83 c4 1c             	add    esp,0x1c
c0006bd8:	5b                   	pop    ebx
c0006bd9:	5e                   	pop    esi
c0006bda:	5f                   	pop    edi
c0006bdb:	5d                   	pop    ebp
c0006bdc:	c3                   	ret    

c0006bdd <iso_reset>:
c0006bdd:	83 ec 18             	sub    esp,0x18
c0006be0:	68 7a fa 02 c0       	push   0xc002fa7a
c0006be5:	e8 32 27 02 00       	call   c002931c <iso_kprintf>
c0006bea:	e8 10 f7 ff ff       	call   c00062ff <iso_break_all>
c0006bef:	e8 09 f7 ff ff       	call   c00062fd <bclear>
c0006bf4:	31 c0                	xor    eax,eax
c0006bf6:	83 c4 1c             	add    esp,0x1c
c0006bf9:	c3                   	ret    

c0006bfa <init_percd>:
c0006bfa:	57                   	push   edi
c0006bfb:	56                   	push   esi
c0006bfc:	53                   	push   ebx
c0006bfd:	bb 01 00 00 00       	mov    ebx,0x1
c0006c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c06:	a2 60 60 03 c0       	mov    ds:0xc0036060,al
c0006c0b:	e8 cd ff ff ff       	call   c0006bdd <iso_reset>
c0006c10:	c7 05 94 76 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037694,0x0
c0006c1a:	a1 8c 76 03 c0       	mov    eax,ds:0xc003768c
c0006c1f:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c23:	e8 8c f7 ff ff       	call   c00063b4 <biread>
c0006c28:	89 c6                	mov    esi,eax
c0006c2a:	85 c0                	test   eax,eax
c0006c2c:	0f 88 ba 00 00 00    	js     c0006cec <init_percd+0xf2>
c0006c32:	8b 04 85 80 60 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9f80]
c0006c39:	83 c0 04             	add    eax,0x4
c0006c3c:	52                   	push   edx
c0006c3d:	6a 06                	push   0x6
c0006c3f:	68 85 fa 02 c0       	push   0xc002fa85
c0006c44:	50                   	push   eax
c0006c45:	e8 36 97 ff ff       	call   c0000380 <memcmp>
c0006c4a:	83 c4 10             	add    esp,0x10
c0006c4d:	85 c0                	test   eax,eax
c0006c4f:	74 08                	je     c0006c59 <init_percd+0x5f>
c0006c51:	43                   	inc    ebx
c0006c52:	83 fb 04             	cmp    ebx,0x4
c0006c55:	75 c3                	jne    c0006c1a <init_percd+0x20>
c0006c57:	eb 1a                	jmp    c0006c73 <init_percd+0x79>
c0006c59:	8b 04 b5 80 60 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc9f80]
c0006c60:	83 c0 5c             	add    eax,0x5c
c0006c63:	e8 17 f5 ff ff       	call   c000617f <isjoliet>
c0006c68:	a3 94 76 03 c0       	mov    ds:0xc0037694,eax
c0006c6d:	85 c0                	test   eax,eax
c0006c6f:	74 e0                	je     c0006c51 <init_percd+0x57>
c0006c71:	eb 3e                	jmp    c0006cb1 <init_percd+0xb7>
c0006c73:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006c7a:	75 35                	jne    c0006cb1 <init_percd+0xb7>
c0006c7c:	a1 8c 76 03 c0       	mov    eax,ds:0xc003768c
c0006c81:	83 c0 10             	add    eax,0x10
c0006c84:	e8 2b f7 ff ff       	call   c00063b4 <biread>
c0006c89:	89 c6                	mov    esi,eax
c0006c8b:	85 c0                	test   eax,eax
c0006c8d:	78 5f                	js     c0006cee <init_percd+0xf4>
c0006c8f:	83 cb ff             	or     ebx,0xffffffff
c0006c92:	50                   	push   eax
c0006c93:	8b 04 b5 80 60 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc9f80]
c0006c9a:	6a 06                	push   0x6
c0006c9c:	83 c0 04             	add    eax,0x4
c0006c9f:	68 8c fa 02 c0       	push   0xc002fa8c
c0006ca4:	50                   	push   eax
c0006ca5:	e8 d6 96 ff ff       	call   c0000380 <memcmp>
c0006caa:	83 c4 10             	add    esp,0x10
c0006cad:	85 c0                	test   eax,eax
c0006caf:	75 3d                	jne    c0006cee <init_percd+0xf4>
c0006cb1:	8b 34 b5 80 60 03 c0 	mov    esi,DWORD PTR [esi*4-0x3ffc9f80]
c0006cb8:	bf 60 76 03 c0       	mov    edi,0xc0037660
c0006cbd:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006cc3:	b9 22 00 00 00       	mov    ecx,0x22
c0006cc8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006cca:	b8 62 76 03 c0       	mov    eax,0xc0037662
c0006ccf:	31 db                	xor    ebx,ebx
c0006cd1:	e8 dc f4 ff ff       	call   c00061b2 <iso_733>
c0006cd6:	a3 88 76 03 c0       	mov    ds:0xc0037688,eax
c0006cdb:	b8 6a 76 03 c0       	mov    eax,0xc003766a
c0006ce0:	e8 cd f4 ff ff       	call   c00061b2 <iso_733>
c0006ce5:	a3 84 76 03 c0       	mov    ds:0xc0037684,eax
c0006cea:	eb 02                	jmp    c0006cee <init_percd+0xf4>
c0006cec:	89 c3                	mov    ebx,eax
c0006cee:	89 d8                	mov    eax,ebx
c0006cf0:	5b                   	pop    ebx
c0006cf1:	5e                   	pop    esi
c0006cf2:	5f                   	pop    edi
c0006cf3:	c3                   	ret    

c0006cf4 <iso_ioctl>:
c0006cf4:	83 ec 18             	sub    esp,0x18
c0006cf7:	68 93 fa 02 c0       	push   0xc002fa93
c0006cfc:	e8 1b 26 02 00       	call   c002931c <iso_kprintf>
c0006d01:	e8 d7 fe ff ff       	call   c0006bdd <iso_reset>
c0006d06:	31 c0                	xor    eax,eax
c0006d08:	83 c4 1c             	add    esp,0x1c
c0006d0b:	c3                   	ret    

c0006d0c <fs_iso9660_init>:
c0006d0c:	53                   	push   ebx
c0006d0d:	31 db                	xor    ebx,ebx
c0006d0f:	83 ec 14             	sub    esp,0x14
c0006d12:	68 9e fa 02 c0       	push   0xc002fa9e
c0006d17:	e8 00 26 02 00       	call   c002931c <iso_kprintf>
c0006d1c:	83 c4 0c             	add    esp,0xc
c0006d1f:	68 40 09 00 00       	push   0x940
c0006d24:	6a 00                	push   0x0
c0006d26:	68 20 6d 03 c0       	push   0xc0036d20
c0006d2b:	e8 c0 97 ff ff       	call   c00004f0 <memset>
c0006d30:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d37:	c7 05 20 6d 03 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0036d20,0xffffffff
c0006d41:	e8 78 f6 00 00       	call   c00163be <malloc>
c0006d46:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d4d:	a3 90 76 03 c0       	mov    ds:0xc0037690,eax
c0006d52:	e8 67 f6 00 00       	call   c00163be <malloc>
c0006d57:	83 c4 10             	add    esp,0x10
c0006d5a:	a3 00 6d 03 c0       	mov    ds:0xc0036d00,eax
c0006d5f:	83 ec 0c             	sub    esp,0xc
c0006d62:	68 04 08 00 00       	push   0x804
c0006d67:	e8 52 f6 00 00       	call   c00163be <malloc>
c0006d6c:	89 04 9d 80 60 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc9f80],eax
c0006d73:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006d79:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006d80:	e8 39 f6 00 00       	call   c00163be <malloc>
c0006d85:	83 c4 10             	add    esp,0x10
c0006d88:	89 04 9d 20 60 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc9fe0],eax
c0006d8f:	43                   	inc    ebx
c0006d90:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006d96:	83 fb 10             	cmp    ebx,0x10
c0006d99:	75 c4                	jne    c0006d5f <fs_iso9660_init+0x53>
c0006d9b:	31 c0                	xor    eax,eax
c0006d9d:	83 c4 08             	add    esp,0x8
c0006da0:	5b                   	pop    ebx
c0006da1:	c3                   	ret    

c0006da2 <fs_iso9660_shutdown>:
c0006da2:	53                   	push   ebx
c0006da3:	31 db                	xor    ebx,ebx
c0006da5:	83 ec 08             	sub    esp,0x8
c0006da8:	83 ec 0c             	sub    esp,0xc
c0006dab:	ff 34 9d 80 60 03 c0 	push   DWORD PTR [ebx*4-0x3ffc9f80]
c0006db2:	e8 17 f6 00 00       	call   c00163ce <free>
c0006db7:	58                   	pop    eax
c0006db8:	ff 34 9d 20 60 03 c0 	push   DWORD PTR [ebx*4-0x3ffc9fe0]
c0006dbf:	43                   	inc    ebx
c0006dc0:	e8 09 f6 00 00       	call   c00163ce <free>
c0006dc5:	83 c4 10             	add    esp,0x10
c0006dc8:	83 fb 10             	cmp    ebx,0x10
c0006dcb:	75 db                	jne    c0006da8 <fs_iso9660_shutdown+0x6>
c0006dcd:	a1 90 76 03 c0       	mov    eax,ds:0xc0037690
c0006dd2:	85 c0                	test   eax,eax
c0006dd4:	74 0c                	je     c0006de2 <fs_iso9660_shutdown+0x40>
c0006dd6:	83 ec 0c             	sub    esp,0xc
c0006dd9:	50                   	push   eax
c0006dda:	e8 ef f5 00 00       	call   c00163ce <free>
c0006ddf:	83 c4 10             	add    esp,0x10
c0006de2:	a1 00 6d 03 c0       	mov    eax,ds:0xc0036d00
c0006de7:	85 c0                	test   eax,eax
c0006de9:	74 0c                	je     c0006df7 <fs_iso9660_shutdown+0x55>
c0006deb:	83 ec 0c             	sub    esp,0xc
c0006dee:	50                   	push   eax
c0006def:	e8 da f5 00 00       	call   c00163ce <free>
c0006df4:	83 c4 10             	add    esp,0x10
c0006df7:	c7 05 00 6d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036d00,0x0
c0006e01:	c7 05 90 76 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037690,0x0
c0006e0b:	31 c0                	xor    eax,eax
c0006e0d:	83 c4 08             	add    esp,0x8
c0006e10:	5b                   	pop    ebx
c0006e11:	c3                   	ret    
c0006e12:	66 90                	xchg   ax,ax

c0006e14 <lwip_init>:
c0006e14:	83 ec 0c             	sub    esp,0xc
c0006e17:	e8 48 2c 00 00       	call   c0009a64 <stats_init>
c0006e1c:	e8 7b 9f ff ff       	call   c0000d9c <sys_init>
c0006e21:	e8 ae 01 00 00       	call   c0006fd4 <mem_init>
c0006e26:	e8 05 0a 00 00       	call   c0007830 <memp_init>
c0006e2b:	e8 e8 0c 00 00       	call   c0007b18 <netif_init>
c0006e30:	e8 07 9e ff ff       	call   c0000c3c <lwip_socket_init>
c0006e35:	e8 76 9d 00 00       	call   c0010bb0 <sys_timeouts_init>
c0006e3a:	90                   	nop
c0006e3b:	83 c4 0c             	add    esp,0xc
c0006e3e:	c3                   	ret    
c0006e3f:	90                   	nop

c0006e40 <plug_holes>:
c0006e40:	83 ec 1c             	sub    esp,0x1c
c0006e43:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006e48:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006e4c:	73 16                	jae    c0006e64 <plug_holes+0x24>
c0006e4e:	83 ec 08             	sub    esp,0x8
c0006e51:	68 af fa 02 c0       	push   0xc002faaf
c0006e56:	68 c6 fa 02 c0       	push   0xc002fac6
c0006e5b:	e8 34 8d 01 00       	call   c001fb94 <CPrintf>
c0006e60:	83 c4 10             	add    esp,0x10
c0006e63:	90                   	nop
c0006e64:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006e69:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006e6d:	72 15                	jb     c0006e84 <plug_holes+0x44>
c0006e6f:	83 ec 08             	sub    esp,0x8
c0006e72:	68 d3 fa 02 c0       	push   0xc002fad3
c0006e77:	68 c6 fa 02 c0       	push   0xc002fac6
c0006e7c:	e8 13 8d 01 00       	call   c001fb94 <CPrintf>
c0006e81:	83 c4 10             	add    esp,0x10
c0006e84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e88:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0006e8b:	0f b6 c0             	movzx  eax,al
c0006e8e:	85 c0                	test   eax,eax
c0006e90:	74 16                	je     c0006ea8 <plug_holes+0x68>
c0006e92:	83 ec 08             	sub    esp,0x8
c0006e95:	68 ed fa 02 c0       	push   0xc002faed
c0006e9a:	68 c6 fa 02 c0       	push   0xc002fac6
c0006e9f:	e8 f0 8c 01 00       	call   c001fb94 <CPrintf>
c0006ea4:	83 c4 10             	add    esp,0x10
c0006ea7:	90                   	nop
c0006ea8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006eac:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006eaf:	0f b7 c0             	movzx  eax,ax
c0006eb2:	3d 40 06 00 00       	cmp    eax,0x640
c0006eb7:	76 17                	jbe    c0006ed0 <plug_holes+0x90>
c0006eb9:	83 ec 08             	sub    esp,0x8
c0006ebc:	68 80 fb 02 c0       	push   0xc002fb80
c0006ec1:	68 c6 fa 02 c0       	push   0xc002fac6
c0006ec6:	e8 c9 8c 01 00       	call   c001fb94 <CPrintf>
c0006ecb:	83 c4 10             	add    esp,0x10
c0006ece:	66 90                	xchg   ax,ax
c0006ed0:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0006ed6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006eda:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006edd:	0f b7 c0             	movzx  eax,ax
c0006ee0:	01 d0                	add    eax,edx
c0006ee2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ee6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006eea:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006eee:	74 64                	je     c0006f54 <plug_holes+0x114>
c0006ef0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ef4:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0006ef7:	0f b6 c0             	movzx  eax,al
c0006efa:	85 c0                	test   eax,eax
c0006efc:	75 56                	jne    c0006f54 <plug_holes+0x114>
c0006efe:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006f03:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006f07:	74 4b                	je     c0006f54 <plug_holes+0x114>
c0006f09:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0006f0e:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006f12:	75 0c                	jne    c0006f20 <plug_holes+0xe0>
c0006f14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006f18:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0006f1d:	8d 76 00             	lea    esi,[esi+0x0]
c0006f20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f24:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006f27:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0006f2b:	66 89 02             	mov    WORD PTR [edx],ax
c0006f2e:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006f33:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0006f37:	29 c2                	sub    edx,eax
c0006f39:	8b 0d a4 76 03 c0    	mov    ecx,DWORD PTR ds:0xc00376a4
c0006f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f43:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006f46:	0f b7 c0             	movzx  eax,ax
c0006f49:	01 c1                	add    ecx,eax
c0006f4b:	89 d0                	mov    eax,edx
c0006f4d:	66 89 41 02          	mov    WORD PTR [ecx+0x2],ax
c0006f51:	8d 76 00             	lea    esi,[esi+0x0]
c0006f54:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0006f5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006f5e:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0006f62:	0f b7 c0             	movzx  eax,ax
c0006f65:	01 d0                	add    eax,edx
c0006f67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006f6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f6f:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0006f73:	74 57                	je     c0006fcc <plug_holes+0x18c>
c0006f75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f79:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0006f7c:	0f b6 c0             	movzx  eax,al
c0006f7f:	85 c0                	test   eax,eax
c0006f81:	75 49                	jne    c0006fcc <plug_holes+0x18c>
c0006f83:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0006f88:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006f8c:	75 0a                	jne    c0006f98 <plug_holes+0x158>
c0006f8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f92:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0006f97:	90                   	nop
c0006f98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006f9c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006f9f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fa3:	66 89 02             	mov    WORD PTR [edx],ax
c0006fa6:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006fab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006faf:	29 c2                	sub    edx,eax
c0006fb1:	8b 0d a4 76 03 c0    	mov    ecx,DWORD PTR ds:0xc00376a4
c0006fb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006fbb:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006fbe:	0f b7 c0             	movzx  eax,ax
c0006fc1:	01 c1                	add    ecx,eax
c0006fc3:	89 d0                	mov    eax,edx
c0006fc5:	66 89 41 02          	mov    WORD PTR [ecx+0x2],ax
c0006fc9:	8d 76 00             	lea    esi,[esi+0x0]
c0006fcc:	90                   	nop
c0006fcd:	83 c4 1c             	add    esp,0x1c
c0006fd0:	c3                   	ret    
c0006fd1:	8d 76 00             	lea    esi,[esi+0x0]

c0006fd4 <mem_init>:
c0006fd4:	83 ec 1c             	sub    esp,0x1c
c0006fd7:	c7 05 a4 76 03 c0 c0 60 03 c0 	mov    DWORD PTR ds:0xc00376a4,0xc00360c0
c0006fe1:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006fe6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006fea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006fee:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c0006ff3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ff7:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c0006ffd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007001:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007005:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000700a:	05 40 06 00 00       	add    eax,0x640
c000700f:	a3 a0 76 03 c0       	mov    ds:0xc00376a0,eax
c0007014:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007019:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c000701d:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007022:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c0007027:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000702c:	66 c7 40 02 40 06    	mov    WORD PTR [eax+0x2],0x640
c0007032:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007037:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c000703c:	66 c7 05 c8 67 03 c0 40 06 	mov    WORD PTR ds:0xc00367c8,0x640
c0007045:	83 ec 08             	sub    esp,0x8
c0007048:	6a 01                	push   0x1
c000704a:	68 98 76 03 c0       	push   0xc0037698
c000704f:	e8 18 9c ff ff       	call   c0000c6c <sys_sem_new>
c0007054:	83 c4 10             	add    esp,0x10
c0007057:	0f be c0             	movsx  eax,al
c000705a:	85 c0                	test   eax,eax
c000705c:	74 16                	je     c0007074 <mem_init+0xa0>
c000705e:	83 ec 08             	sub    esp,0x8
c0007061:	68 08 fb 02 c0       	push   0xc002fb08
c0007066:	68 c6 fa 02 c0       	push   0xc002fac6
c000706b:	e8 24 8b 01 00       	call   c001fb94 <CPrintf>
c0007070:	83 c4 10             	add    esp,0x10
c0007073:	90                   	nop
c0007074:	90                   	nop
c0007075:	83 c4 1c             	add    esp,0x1c
c0007078:	c3                   	ret    
c0007079:	8d 76 00             	lea    esi,[esi+0x0]

c000707c <mem_free>:
c000707c:	83 ec 1c             	sub    esp,0x1c
c000707f:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0007084:	0f 84 0e 01 00 00    	je     c0007198 <mem_free+0x11c>
c000708a:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000708f:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007093:	72 0b                	jb     c00070a0 <mem_free+0x24>
c0007095:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000709a:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000709e:	72 18                	jb     c00070b8 <mem_free+0x3c>
c00070a0:	83 ec 08             	sub    esp,0x8
c00070a3:	68 23 fb 02 c0       	push   0xc002fb23
c00070a8:	68 c6 fa 02 c0       	push   0xc002fac6
c00070ad:	e8 e2 8a 01 00       	call   c001fb94 <CPrintf>
c00070b2:	83 c4 10             	add    esp,0x10
c00070b5:	8d 76 00             	lea    esi,[esi+0x0]
c00070b8:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00070bd:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00070c1:	72 0d                	jb     c00070d0 <mem_free+0x54>
c00070c3:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00070c8:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00070cc:	72 22                	jb     c00070f0 <mem_free+0x74>
c00070ce:	66 90                	xchg   ax,ax
c00070d0:	e8 af 8a 01 00       	call   c001fb84 <CLockScheduler>
c00070d5:	66 a1 d0 67 03 c0    	mov    ax,ds:0xc00367d0
c00070db:	83 c0 01             	add    eax,0x1
c00070de:	66 a3 d0 67 03 c0    	mov    ds:0xc00367d0,ax
c00070e4:	e8 7f 8a 01 00       	call   c001fb68 <CUnlockScheduler>
c00070e9:	e9 ae 00 00 00       	jmp    c000719c <mem_free+0x120>
c00070ee:	66 90                	xchg   ax,ax
c00070f0:	83 ec 08             	sub    esp,0x8
c00070f3:	6a 00                	push   0x0
c00070f5:	68 98 76 03 c0       	push   0xc0037698
c00070fa:	e8 c5 9b ff ff       	call   c0000cc4 <sys_arch_sem_wait>
c00070ff:	83 c4 10             	add    esp,0x10
c0007102:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007106:	83 e8 06             	sub    eax,0x6
c0007109:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000710d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007111:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007114:	0f b6 c0             	movzx  eax,al
c0007117:	85 c0                	test   eax,eax
c0007119:	75 15                	jne    c0007130 <mem_free+0xb4>
c000711b:	83 ec 08             	sub    esp,0x8
c000711e:	68 3a fb 02 c0       	push   0xc002fb3a
c0007123:	68 c6 fa 02 c0       	push   0xc002fac6
c0007128:	e8 67 8a 01 00       	call   c001fb94 <CPrintf>
c000712d:	83 c4 10             	add    esp,0x10
c0007130:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007134:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007138:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c000713d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0007141:	73 09                	jae    c000714c <mem_free+0xd0>
c0007143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007147:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c000714c:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007152:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007158:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000715c:	29 d1                	sub    ecx,edx
c000715e:	89 ca                	mov    edx,ecx
c0007160:	89 d1                	mov    ecx,edx
c0007162:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007166:	66 8b 12             	mov    dx,WORD PTR [edx]
c0007169:	29 d1                	sub    ecx,edx
c000716b:	89 ca                	mov    edx,ecx
c000716d:	01 d0                	add    eax,edx
c000716f:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c0007175:	83 ec 0c             	sub    esp,0xc
c0007178:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000717c:	e8 bf fc ff ff       	call   c0006e40 <plug_holes>
c0007181:	83 c4 10             	add    esp,0x10
c0007184:	83 ec 0c             	sub    esp,0xc
c0007187:	68 98 76 03 c0       	push   0xc0037698
c000718c:	e8 1b 9b ff ff       	call   c0000cac <sys_sem_signal>
c0007191:	83 c4 10             	add    esp,0x10
c0007194:	eb 06                	jmp    c000719c <mem_free+0x120>
c0007196:	66 90                	xchg   ax,ax
c0007198:	90                   	nop
c0007199:	8d 76 00             	lea    esi,[esi+0x0]
c000719c:	83 c4 1c             	add    esp,0x1c
c000719f:	c3                   	ret    

c00071a0 <mem_trim>:
c00071a0:	83 ec 2c             	sub    esp,0x2c
c00071a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00071a7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00071ac:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00071b1:	83 f8 0b             	cmp    eax,0xb
c00071b4:	77 0a                	ja     c00071c0 <mem_trim+0x20>
c00071b6:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c00071bd:	8d 76 00             	lea    esi,[esi+0x0]
c00071c0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00071c5:	3d 40 06 00 00       	cmp    eax,0x640
c00071ca:	76 0c                	jbe    c00071d8 <mem_trim+0x38>
c00071cc:	b8 00 00 00 00       	mov    eax,0x0
c00071d1:	e9 d6 02 00 00       	jmp    c00074ac <mem_trim+0x30c>
c00071d6:	66 90                	xchg   ax,ax
c00071d8:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00071dd:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c00071e1:	72 0d                	jb     c00071f0 <mem_trim+0x50>
c00071e3:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00071e8:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c00071ec:	72 1a                	jb     c0007208 <mem_trim+0x68>
c00071ee:	66 90                	xchg   ax,ax
c00071f0:	83 ec 08             	sub    esp,0x8
c00071f3:	68 4e fb 02 c0       	push   0xc002fb4e
c00071f8:	68 c6 fa 02 c0       	push   0xc002fac6
c00071fd:	e8 92 89 01 00       	call   c001fb94 <CPrintf>
c0007202:	83 c4 10             	add    esp,0x10
c0007205:	8d 76 00             	lea    esi,[esi+0x0]
c0007208:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000720d:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007211:	72 0d                	jb     c0007220 <mem_trim+0x80>
c0007213:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007218:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000721c:	72 26                	jb     c0007244 <mem_trim+0xa4>
c000721e:	66 90                	xchg   ax,ax
c0007220:	e8 5f 89 01 00       	call   c001fb84 <CLockScheduler>
c0007225:	66 a1 d0 67 03 c0    	mov    ax,ds:0xc00367d0
c000722b:	83 c0 01             	add    eax,0x1
c000722e:	66 a3 d0 67 03 c0    	mov    ds:0xc00367d0,ax
c0007234:	e8 2f 89 01 00       	call   c001fb68 <CUnlockScheduler>
c0007239:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000723d:	e9 6a 02 00 00       	jmp    c00074ac <mem_trim+0x30c>
c0007242:	66 90                	xchg   ax,ax
c0007244:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007248:	83 e8 06             	sub    eax,0x6
c000724b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000724f:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007254:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007258:	29 c2                	sub    edx,eax
c000725a:	89 d0                	mov    eax,edx
c000725c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0007261:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007265:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007268:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000726d:	89 d1                	mov    ecx,edx
c000726f:	29 c1                	sub    ecx,eax
c0007271:	89 c8                	mov    eax,ecx
c0007273:	83 e8 06             	sub    eax,0x6
c0007276:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c000727b:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007280:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0007285:	39 c2                	cmp    edx,eax
c0007287:	76 17                	jbe    c00072a0 <mem_trim+0x100>
c0007289:	83 ec 08             	sub    esp,0x8
c000728c:	68 ac fb 02 c0       	push   0xc002fbac
c0007291:	68 c6 fa 02 c0       	push   0xc002fac6
c0007296:	e8 f9 88 01 00       	call   c001fb94 <CPrintf>
c000729b:	83 c4 10             	add    esp,0x10
c000729e:	66 90                	xchg   ax,ax
c00072a0:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00072a5:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00072aa:	39 c2                	cmp    edx,eax
c00072ac:	76 0a                	jbe    c00072b8 <mem_trim+0x118>
c00072ae:	b8 00 00 00 00       	mov    eax,0x0
c00072b3:	e9 f4 01 00 00       	jmp    c00074ac <mem_trim+0x30c>
c00072b8:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00072bd:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00072c2:	39 c2                	cmp    edx,eax
c00072c4:	75 0a                	jne    c00072d0 <mem_trim+0x130>
c00072c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00072ca:	e9 dd 01 00 00       	jmp    c00074ac <mem_trim+0x30c>
c00072cf:	90                   	nop
c00072d0:	83 ec 08             	sub    esp,0x8
c00072d3:	6a 00                	push   0x0
c00072d5:	68 98 76 03 c0       	push   0xc0037698
c00072da:	e8 e5 99 ff ff       	call   c0000cc4 <sys_arch_sem_wait>
c00072df:	83 c4 10             	add    esp,0x10
c00072e2:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00072e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00072ec:	66 8b 00             	mov    ax,WORD PTR [eax]
c00072ef:	0f b7 c0             	movzx  eax,ax
c00072f2:	01 d0                	add    eax,edx
c00072f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00072fc:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00072ff:	0f b6 c0             	movzx  eax,al
c0007302:	85 c0                	test   eax,eax
c0007304:	0f 85 c6 00 00 00    	jne    c00073d0 <mem_trim+0x230>
c000730a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000730e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007311:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0007316:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000731b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000731f:	01 d0                	add    eax,edx
c0007321:	83 c0 06             	add    eax,0x6
c0007324:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c0007329:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c000732e:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007332:	75 14                	jne    c0007348 <mem_trim+0x1a8>
c0007334:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000733a:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c000733f:	01 d0                	add    eax,edx
c0007341:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0007346:	66 90                	xchg   ax,ax
c0007348:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000734e:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0007353:	01 d0                	add    eax,edx
c0007355:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007359:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000735d:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007361:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007365:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000736a:	66 89 02             	mov    WORD PTR [edx],ax
c000736d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007371:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0007376:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000737a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000737e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007382:	66 89 02             	mov    WORD PTR [edx],ax
c0007385:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007389:	66 8b 00             	mov    ax,WORD PTR [eax]
c000738c:	0f b7 c0             	movzx  eax,ax
c000738f:	3d 40 06 00 00       	cmp    eax,0x640
c0007394:	74 1a                	je     c00073b0 <mem_trim+0x210>
c0007396:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000739c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00073a0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00073a3:	0f b7 c0             	movzx  eax,ax
c00073a6:	01 c2                	add    edx,eax
c00073a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00073ac:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00073b0:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00073b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00073ba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00073be:	29 d1                	sub    ecx,edx
c00073c0:	89 ca                	mov    edx,ecx
c00073c2:	01 d0                	add    eax,edx
c00073c4:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c00073ca:	e9 c9 00 00 00       	jmp    c0007498 <mem_trim+0x2f8>
c00073cf:	90                   	nop
c00073d0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00073d5:	8d 50 12             	lea    edx,[eax+0x12]
c00073d8:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00073dd:	39 c2                	cmp    edx,eax
c00073df:	0f 87 b3 00 00 00    	ja     c0007498 <mem_trim+0x2f8>
c00073e5:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c00073ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00073ee:	01 d0                	add    eax,edx
c00073f0:	83 c0 06             	add    eax,0x6
c00073f3:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c00073f8:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00073fe:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0007403:	01 d0                	add    eax,edx
c0007405:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007409:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c000740e:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007412:	73 0c                	jae    c0007420 <mem_trim+0x280>
c0007414:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007418:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c000741d:	8d 76 00             	lea    esi,[esi+0x0]
c0007420:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007424:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007428:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000742c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000742f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007433:	66 89 02             	mov    WORD PTR [edx],ax
c0007436:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000743a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000743f:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007443:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000744b:	66 89 02             	mov    WORD PTR [edx],ax
c000744e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007452:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007455:	0f b7 c0             	movzx  eax,ax
c0007458:	3d 40 06 00 00       	cmp    eax,0x640
c000745d:	74 1d                	je     c000747c <mem_trim+0x2dc>
c000745f:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007465:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007469:	66 8b 00             	mov    ax,WORD PTR [eax]
c000746c:	0f b7 c0             	movzx  eax,ax
c000746f:	01 c2                	add    edx,eax
c0007471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007475:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007479:	8d 76 00             	lea    esi,[esi+0x0]
c000747c:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007482:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007486:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000748a:	29 d1                	sub    ecx,edx
c000748c:	89 ca                	mov    edx,ecx
c000748e:	01 d0                	add    eax,edx
c0007490:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c0007496:	66 90                	xchg   ax,ax
c0007498:	83 ec 0c             	sub    esp,0xc
c000749b:	68 98 76 03 c0       	push   0xc0037698
c00074a0:	e8 07 98 ff ff       	call   c0000cac <sys_sem_signal>
c00074a5:	83 c4 10             	add    esp,0x10
c00074a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00074ac:	83 c4 2c             	add    esp,0x2c
c00074af:	c3                   	ret    

c00074b0 <mem_malloc>:
c00074b0:	53                   	push   ebx
c00074b1:	83 ec 28             	sub    esp,0x28
c00074b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00074b8:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00074bd:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00074c2:	85 c0                	test   eax,eax
c00074c4:	75 0a                	jne    c00074d0 <mem_malloc+0x20>
c00074c6:	b8 00 00 00 00       	mov    eax,0x0
c00074cb:	e9 f4 02 00 00       	jmp    c00077c4 <mem_malloc+0x314>
c00074d0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00074d5:	83 f8 0b             	cmp    eax,0xb
c00074d8:	77 0a                	ja     c00074e4 <mem_malloc+0x34>
c00074da:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c00074e1:	8d 76 00             	lea    esi,[esi+0x0]
c00074e4:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00074e9:	3d 40 06 00 00       	cmp    eax,0x640
c00074ee:	76 0c                	jbe    c00074fc <mem_malloc+0x4c>
c00074f0:	b8 00 00 00 00       	mov    eax,0x0
c00074f5:	e9 ca 02 00 00       	jmp    c00077c4 <mem_malloc+0x314>
c00074fa:	66 90                	xchg   ax,ax
c00074fc:	83 ec 08             	sub    esp,0x8
c00074ff:	6a 00                	push   0x0
c0007501:	68 98 76 03 c0       	push   0xc0037698
c0007506:	e8 b9 97 ff ff       	call   c0000cc4 <sys_arch_sem_wait>
c000750b:	83 c4 10             	add    esp,0x10
c000750e:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c0007514:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007519:	29 c2                	sub    edx,eax
c000751b:	89 d0                	mov    eax,edx
c000751d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0007522:	e9 5d 02 00 00       	jmp    c0007784 <mem_malloc+0x2d4>
c0007527:	90                   	nop
c0007528:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000752e:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0007533:	01 d0                	add    eax,edx
c0007535:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007539:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000753d:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007540:	0f b6 c0             	movzx  eax,al
c0007543:	85 c0                	test   eax,eax
c0007545:	0f 85 21 02 00 00    	jne    c000776c <mem_malloc+0x2bc>
c000754b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000754f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007552:	0f b7 d0             	movzx  edx,ax
c0007555:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000755a:	29 c2                	sub    edx,eax
c000755c:	89 d0                	mov    eax,edx
c000755e:	8d 50 fa             	lea    edx,[eax-0x6]
c0007561:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007566:	39 c2                	cmp    edx,eax
c0007568:	0f 82 fe 01 00 00    	jb     c000776c <mem_malloc+0x2bc>
c000756e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007575:	0f b7 d0             	movzx  edx,ax
c0007578:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000757d:	29 c2                	sub    edx,eax
c000757f:	89 d0                	mov    eax,edx
c0007581:	8d 50 fa             	lea    edx,[eax-0x6]
c0007584:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007589:	83 c0 12             	add    eax,0x12
c000758c:	39 c2                	cmp    edx,eax
c000758e:	0f 82 c4 00 00 00    	jb     c0007658 <mem_malloc+0x1a8>
c0007594:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c0007599:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000759d:	01 d0                	add    eax,edx
c000759f:	83 c0 06             	add    eax,0x6
c00075a2:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00075a7:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00075ad:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c00075b2:	01 d0                	add    eax,edx
c00075b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00075b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075bc:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00075c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00075c4:	66 8b 00             	mov    ax,WORD PTR [eax]
c00075c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00075cb:	66 89 02             	mov    WORD PTR [edx],ax
c00075ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00075d2:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00075d7:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00075db:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00075df:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00075e4:	66 89 02             	mov    WORD PTR [edx],ax
c00075e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00075eb:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c00075ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075f3:	66 8b 00             	mov    ax,WORD PTR [eax]
c00075f6:	0f b7 c0             	movzx  eax,ax
c00075f9:	3d 40 06 00 00       	cmp    eax,0x640
c00075fe:	74 1c                	je     c000761c <mem_malloc+0x16c>
c0007600:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000760a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000760d:	0f b7 c0             	movzx  eax,ax
c0007610:	01 c2                	add    edx,eax
c0007612:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0007617:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000761b:	90                   	nop
c000761c:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007622:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007626:	01 d0                	add    eax,edx
c0007628:	83 c0 06             	add    eax,0x6
c000762b:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c0007631:	66 8b 15 cc 67 03 c0 	mov    dx,WORD PTR ds:0xc00367cc
c0007638:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c000763e:	0f b7 d2             	movzx  edx,dx
c0007641:	0f b7 c0             	movzx  eax,ax
c0007644:	39 c2                	cmp    edx,eax
c0007646:	73 60                	jae    c00076a8 <mem_malloc+0x1f8>
c0007648:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c000764e:	66 a3 cc 67 03 c0    	mov    ds:0xc00367cc,ax
c0007654:	eb 52                	jmp    c00076a8 <mem_malloc+0x1f8>
c0007656:	66 90                	xchg   ax,ax
c0007658:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000765c:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c0007660:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007666:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000766a:	66 8b 12             	mov    dx,WORD PTR [edx]
c000766d:	8b 0d a4 76 03 c0    	mov    ecx,DWORD PTR ds:0xc00376a4
c0007673:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0007677:	29 cb                	sub    ebx,ecx
c0007679:	89 d9                	mov    ecx,ebx
c000767b:	29 ca                	sub    edx,ecx
c000767d:	01 d0                	add    eax,edx
c000767f:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c0007685:	66 8b 15 cc 67 03 c0 	mov    dx,WORD PTR ds:0xc00367cc
c000768c:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007692:	0f b7 d2             	movzx  edx,dx
c0007695:	0f b7 c0             	movzx  eax,ax
c0007698:	39 c2                	cmp    edx,eax
c000769a:	73 0c                	jae    c00076a8 <mem_malloc+0x1f8>
c000769c:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00076a2:	66 a3 cc 67 03 c0    	mov    ds:0xc00367cc,ax
c00076a8:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00076ad:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00076b1:	75 71                	jne    c0007724 <mem_malloc+0x274>
c00076b3:	eb 1b                	jmp    c00076d0 <mem_malloc+0x220>
c00076b5:	8d 76 00             	lea    esi,[esi+0x0]
c00076b8:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00076be:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00076c3:	66 8b 00             	mov    ax,WORD PTR [eax]
c00076c6:	0f b7 c0             	movzx  eax,ax
c00076c9:	01 d0                	add    eax,edx
c00076cb:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00076d0:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00076d5:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00076d8:	0f b6 c0             	movzx  eax,al
c00076db:	85 c0                	test   eax,eax
c00076dd:	74 11                	je     c00076f0 <mem_malloc+0x240>
c00076df:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c00076e5:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00076ea:	39 c2                	cmp    edx,eax
c00076ec:	75 ca                	jne    c00076b8 <mem_malloc+0x208>
c00076ee:	66 90                	xchg   ax,ax
c00076f0:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c00076f6:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00076fb:	39 c2                	cmp    edx,eax
c00076fd:	74 25                	je     c0007724 <mem_malloc+0x274>
c00076ff:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007704:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007707:	0f b6 c0             	movzx  eax,al
c000770a:	85 c0                	test   eax,eax
c000770c:	74 16                	je     c0007724 <mem_malloc+0x274>
c000770e:	83 ec 08             	sub    esp,0x8
c0007711:	68 65 fb 02 c0       	push   0xc002fb65
c0007716:	68 c6 fa 02 c0       	push   0xc002fac6
c000771b:	e8 74 84 01 00       	call   c001fb94 <CPrintf>
c0007720:	83 c4 10             	add    esp,0x10
c0007723:	90                   	nop
c0007724:	83 ec 0c             	sub    esp,0xc
c0007727:	68 98 76 03 c0       	push   0xc0037698
c000772c:	e8 7b 95 ff ff       	call   c0000cac <sys_sem_signal>
c0007731:	83 c4 10             	add    esp,0x10
c0007734:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007739:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000773d:	01 d0                	add    eax,edx
c000773f:	8d 50 06             	lea    edx,[eax+0x6]
c0007742:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007747:	39 c2                	cmp    edx,eax
c0007749:	76 15                	jbe    c0007760 <mem_malloc+0x2b0>
c000774b:	83 ec 08             	sub    esp,0x8
c000774e:	68 cc fb 02 c0       	push   0xc002fbcc
c0007753:	68 c6 fa 02 c0       	push   0xc002fac6
c0007758:	e8 37 84 01 00       	call   c001fb94 <CPrintf>
c000775d:	83 c4 10             	add    esp,0x10
c0007760:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007764:	83 c0 06             	add    eax,0x6
c0007767:	eb 5b                	jmp    c00077c4 <mem_malloc+0x314>
c0007769:	8d 76 00             	lea    esi,[esi+0x0]
c000776c:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007772:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0007777:	01 d0                	add    eax,edx
c0007779:	66 8b 00             	mov    ax,WORD PTR [eax]
c000777c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0007781:	8d 76 00             	lea    esi,[esi+0x0]
c0007784:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0007789:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000778e:	b9 40 06 00 00       	mov    ecx,0x640
c0007793:	29 d1                	sub    ecx,edx
c0007795:	89 ca                	mov    edx,ecx
c0007797:	39 d0                	cmp    eax,edx
c0007799:	0f 8c 89 fd ff ff    	jl     c0007528 <mem_malloc+0x78>
c000779f:	66 a1 ce 67 03 c0    	mov    ax,ds:0xc00367ce
c00077a5:	83 c0 01             	add    eax,0x1
c00077a8:	66 a3 ce 67 03 c0    	mov    ds:0xc00367ce,ax
c00077ae:	83 ec 0c             	sub    esp,0xc
c00077b1:	68 98 76 03 c0       	push   0xc0037698
c00077b6:	e8 f1 94 ff ff       	call   c0000cac <sys_sem_signal>
c00077bb:	83 c4 10             	add    esp,0x10
c00077be:	b8 00 00 00 00       	mov    eax,0x0
c00077c3:	90                   	nop
c00077c4:	83 c4 28             	add    esp,0x28
c00077c7:	5b                   	pop    ebx
c00077c8:	c3                   	ret    
c00077c9:	8d 76 00             	lea    esi,[esi+0x0]

c00077cc <mem_calloc>:
c00077cc:	83 ec 2c             	sub    esp,0x2c
c00077cf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00077d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00077d7:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c00077dc:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00077e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00077e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077e9:	0f af c2             	imul   eax,edx
c00077ec:	0f b7 c0             	movzx  eax,ax
c00077ef:	83 ec 0c             	sub    esp,0xc
c00077f2:	50                   	push   eax
c00077f3:	e8 b8 fc ff ff       	call   c00074b0 <mem_malloc>
c00077f8:	83 c4 10             	add    esp,0x10
c00077fb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00077ff:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0007804:	74 22                	je     c0007828 <mem_calloc+0x5c>
c0007806:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000780b:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0007810:	0f af c2             	imul   eax,edx
c0007813:	83 ec 04             	sub    esp,0x4
c0007816:	50                   	push   eax
c0007817:	6a 00                	push   0x0
c0007819:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000781d:	e8 ce 8c ff ff       	call   c00004f0 <memset>
c0007822:	83 c4 10             	add    esp,0x10
c0007825:	8d 76 00             	lea    esi,[esi+0x0]
c0007828:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000782c:	83 c4 2c             	add    esp,0x2c
c000782f:	c3                   	ret    

c0007830 <memp_init>:
c0007830:	83 ec 10             	sub    esp,0x10
c0007833:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c000783a:	eb 78                	jmp    c00078b4 <memp_init+0x84>
c000783c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007841:	89 d0                	mov    eax,edx
c0007843:	c1 e0 02             	shl    eax,0x2
c0007846:	01 d0                	add    eax,edx
c0007848:	01 c0                	add    eax,eax
c000784a:	05 d4 67 03 c0       	add    eax,0xc00367d4
c000784f:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c0007854:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007859:	89 d0                	mov    eax,edx
c000785b:	c1 e0 02             	shl    eax,0x2
c000785e:	01 d0                	add    eax,edx
c0007860:	01 c0                	add    eax,eax
c0007862:	05 d6 67 03 c0       	add    eax,0xc00367d6
c0007867:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c000786c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007871:	89 d0                	mov    eax,edx
c0007873:	c1 e0 02             	shl    eax,0x2
c0007876:	01 d0                	add    eax,edx
c0007878:	01 c0                	add    eax,eax
c000787a:	05 d8 67 03 c0       	add    eax,0xc00367d8
c000787f:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c0007884:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007889:	0f b7 4c 24 0a       	movzx  ecx,WORD PTR [esp+0xa]
c000788e:	66 8b 94 00 1c fc 02 c0 	mov    dx,WORD PTR [eax+eax*1-0x3ffd03e4]
c0007896:	89 c8                	mov    eax,ecx
c0007898:	c1 e0 02             	shl    eax,0x2
c000789b:	01 c8                	add    eax,ecx
c000789d:	01 c0                	add    eax,eax
c000789f:	05 d2 67 03 c0       	add    eax,0xc00367d2
c00078a4:	66 89 10             	mov    WORD PTR [eax],dx
c00078a7:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00078ac:	83 c0 01             	add    eax,0x1
c00078af:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00078b4:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00078b9:	83 f8 0d             	cmp    eax,0xd
c00078bc:	0f 86 7a ff ff ff    	jbe    c000783c <memp_init+0xc>
c00078c2:	c7 44 24 0c c0 76 03 c0 	mov    DWORD PTR [esp+0xc],0xc00376c0
c00078ca:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c00078d1:	e9 8a 00 00 00       	jmp    c0007960 <memp_init+0x130>
c00078d6:	66 90                	xchg   ax,ax
c00078d8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00078dd:	c7 04 85 60 a8 03 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffc57a0],0x0
c00078e8:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00078ef:	eb 47                	jmp    c0007938 <memp_init+0x108>
c00078f1:	8d 76 00             	lea    esi,[esi+0x0]
c00078f4:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00078f9:	8b 14 85 60 a8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc57a0]
c0007900:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007904:	89 10                	mov    DWORD PTR [eax],edx
c0007906:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000790b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000790f:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c0007916:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000791b:	66 8b 84 00 38 fc 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd03c8]
c0007923:	0f b7 c0             	movzx  eax,ax
c0007926:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000792a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000792e:	83 c0 01             	add    eax,0x1
c0007931:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0007936:	66 90                	xchg   ax,ax
c0007938:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000793d:	66 8b 84 00 1c fc 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd03e4]
c0007945:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000794a:	0f b7 c0             	movzx  eax,ax
c000794d:	39 c2                	cmp    edx,eax
c000794f:	72 a3                	jb     c00078f4 <memp_init+0xc4>
c0007951:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0007956:	83 c0 01             	add    eax,0x1
c0007959:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000795e:	66 90                	xchg   ax,ax
c0007960:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007965:	83 f8 0d             	cmp    eax,0xd
c0007968:	0f 86 6a ff ff ff    	jbe    c00078d8 <memp_init+0xa8>
c000796e:	90                   	nop
c000796f:	83 c4 10             	add    esp,0x10
c0007972:	c3                   	ret    
c0007973:	90                   	nop

c0007974 <memp_malloc>:
c0007974:	83 ec 1c             	sub    esp,0x1c
c0007977:	83 7c 24 20 0d       	cmp    DWORD PTR [esp+0x20],0xd
c000797c:	76 22                	jbe    c00079a0 <memp_malloc+0x2c>
c000797e:	83 ec 08             	sub    esp,0x8
c0007981:	68 fc fb 02 c0       	push   0xc002fbfc
c0007986:	68 c6 fa 02 c0       	push   0xc002fac6
c000798b:	e8 04 82 01 00       	call   c001fb94 <CPrintf>
c0007990:	83 c4 10             	add    esp,0x10
c0007993:	b8 00 00 00 00       	mov    eax,0x0
c0007998:	e9 ff 00 00 00       	jmp    c0007a9c <memp_malloc+0x128>
c000799d:	8d 76 00             	lea    esi,[esi+0x0]
c00079a0:	e8 df 81 01 00       	call   c001fb84 <CLockScheduler>
c00079a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00079a9:	8b 04 85 60 a8 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc57a0]
c00079b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00079b4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00079b9:	0f 84 a1 00 00 00    	je     c0007a60 <memp_malloc+0xec>
c00079bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079c3:	8b 10                	mov    edx,DWORD PTR [eax]
c00079c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00079c9:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c00079d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00079d4:	89 d0                	mov    eax,edx
c00079d6:	c1 e0 02             	shl    eax,0x2
c00079d9:	01 d0                	add    eax,edx
c00079db:	01 c0                	add    eax,eax
c00079dd:	05 d4 67 03 c0       	add    eax,0xc00367d4
c00079e2:	66 8b 00             	mov    ax,WORD PTR [eax]
c00079e5:	83 c0 01             	add    eax,0x1
c00079e8:	89 c2                	mov    edx,eax
c00079ea:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079ee:	89 c8                	mov    eax,ecx
c00079f0:	c1 e0 02             	shl    eax,0x2
c00079f3:	01 c8                	add    eax,ecx
c00079f5:	01 c0                	add    eax,eax
c00079f7:	05 d4 67 03 c0       	add    eax,0xc00367d4
c00079fc:	66 89 10             	mov    WORD PTR [eax],dx
c00079ff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007a03:	89 d0                	mov    eax,edx
c0007a05:	c1 e0 02             	shl    eax,0x2
c0007a08:	01 d0                	add    eax,edx
c0007a0a:	01 c0                	add    eax,eax
c0007a0c:	05 d6 67 03 c0       	add    eax,0xc00367d6
c0007a11:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007a14:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a18:	89 c8                	mov    eax,ecx
c0007a1a:	c1 e0 02             	shl    eax,0x2
c0007a1d:	01 c8                	add    eax,ecx
c0007a1f:	01 c0                	add    eax,eax
c0007a21:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007a26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007a29:	0f b7 d2             	movzx  edx,dx
c0007a2c:	0f b7 c0             	movzx  eax,ax
c0007a2f:	39 c2                	cmp    edx,eax
c0007a31:	73 5d                	jae    c0007a90 <memp_malloc+0x11c>
c0007a33:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007a37:	89 d0                	mov    eax,edx
c0007a39:	c1 e0 02             	shl    eax,0x2
c0007a3c:	01 d0                	add    eax,edx
c0007a3e:	01 c0                	add    eax,eax
c0007a40:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007a45:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007a48:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a4c:	89 c8                	mov    eax,ecx
c0007a4e:	c1 e0 02             	shl    eax,0x2
c0007a51:	01 c8                	add    eax,ecx
c0007a53:	01 c0                	add    eax,eax
c0007a55:	05 d6 67 03 c0       	add    eax,0xc00367d6
c0007a5a:	66 89 10             	mov    WORD PTR [eax],dx
c0007a5d:	eb 31                	jmp    c0007a90 <memp_malloc+0x11c>
c0007a5f:	90                   	nop
c0007a60:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007a64:	89 d0                	mov    eax,edx
c0007a66:	c1 e0 02             	shl    eax,0x2
c0007a69:	01 d0                	add    eax,edx
c0007a6b:	01 c0                	add    eax,eax
c0007a6d:	05 d8 67 03 c0       	add    eax,0xc00367d8
c0007a72:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007a75:	83 c0 01             	add    eax,0x1
c0007a78:	89 c2                	mov    edx,eax
c0007a7a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a7e:	89 c8                	mov    eax,ecx
c0007a80:	c1 e0 02             	shl    eax,0x2
c0007a83:	01 c8                	add    eax,ecx
c0007a85:	01 c0                	add    eax,eax
c0007a87:	05 d8 67 03 c0       	add    eax,0xc00367d8
c0007a8c:	66 89 10             	mov    WORD PTR [eax],dx
c0007a8f:	90                   	nop
c0007a90:	e8 d3 80 01 00       	call   c001fb68 <CUnlockScheduler>
c0007a95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a99:	8d 76 00             	lea    esi,[esi+0x0]
c0007a9c:	83 c4 1c             	add    esp,0x1c
c0007a9f:	c3                   	ret    

c0007aa0 <memp_free>:
c0007aa0:	83 ec 1c             	sub    esp,0x1c
c0007aa3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007aa8:	74 66                	je     c0007b10 <memp_free+0x70>
c0007aaa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007aae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ab2:	e8 cd 80 01 00       	call   c001fb84 <CLockScheduler>
c0007ab7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007abb:	89 d0                	mov    eax,edx
c0007abd:	c1 e0 02             	shl    eax,0x2
c0007ac0:	01 d0                	add    eax,edx
c0007ac2:	01 c0                	add    eax,eax
c0007ac4:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007ac9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007acc:	83 e8 01             	sub    eax,0x1
c0007acf:	89 c2                	mov    edx,eax
c0007ad1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ad5:	89 c8                	mov    eax,ecx
c0007ad7:	c1 e0 02             	shl    eax,0x2
c0007ada:	01 c8                	add    eax,ecx
c0007adc:	01 c0                	add    eax,eax
c0007ade:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007ae3:	66 89 10             	mov    WORD PTR [eax],dx
c0007ae6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007aea:	8b 14 85 60 a8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc57a0]
c0007af1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007af5:	89 10                	mov    DWORD PTR [eax],edx
c0007af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007afb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007aff:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c0007b06:	e8 5d 80 01 00       	call   c001fb68 <CUnlockScheduler>
c0007b0b:	eb 07                	jmp    c0007b14 <memp_free+0x74>
c0007b0d:	8d 76 00             	lea    esi,[esi+0x0]
c0007b10:	90                   	nop
c0007b11:	8d 76 00             	lea    esi,[esi+0x0]
c0007b14:	83 c4 1c             	add    esp,0x1c
c0007b17:	c3                   	ret    

c0007b18 <netif_init>:
c0007b18:	90                   	nop
c0007b19:	c3                   	ret    
c0007b1a:	66 90                	xchg   ax,ax

c0007b1c <netif_find>:
c0007b1c:	83 ec 10             	sub    esp,0x10
c0007b1f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007b24:	75 0a                	jne    c0007b30 <netif_find+0x14>
c0007b26:	b8 00 00 00 00       	mov    eax,0x0
c0007b2b:	e9 80 00 00 00       	jmp    c0007bb0 <netif_find+0x94>
c0007b30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007b34:	83 c0 02             	add    eax,0x2
c0007b37:	8a 00                	mov    al,BYTE PTR [eax]
c0007b39:	83 e8 30             	sub    eax,0x30
c0007b3c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0007b40:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007b45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b49:	eb 59                	jmp    c0007ba4 <netif_find+0x88>
c0007b4b:	90                   	nop
c0007b4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b50:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0007b53:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c0007b58:	0f b6 c0             	movzx  eax,al
c0007b5b:	39 c2                	cmp    edx,eax
c0007b5d:	75 39                	jne    c0007b98 <netif_find+0x7c>
c0007b5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007b63:	8a 10                	mov    dl,BYTE PTR [eax]
c0007b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b69:	8a 40 2a             	mov    al,BYTE PTR [eax+0x2a]
c0007b6c:	0f be d2             	movsx  edx,dl
c0007b6f:	0f be c0             	movsx  eax,al
c0007b72:	39 c2                	cmp    edx,eax
c0007b74:	75 22                	jne    c0007b98 <netif_find+0x7c>
c0007b76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007b7a:	83 c0 01             	add    eax,0x1
c0007b7d:	8a 10                	mov    dl,BYTE PTR [eax]
c0007b7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b83:	8a 40 2b             	mov    al,BYTE PTR [eax+0x2b]
c0007b86:	0f be d2             	movsx  edx,dl
c0007b89:	0f be c0             	movsx  eax,al
c0007b8c:	39 c2                	cmp    edx,eax
c0007b8e:	75 08                	jne    c0007b98 <netif_find+0x7c>
c0007b90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b94:	eb 1a                	jmp    c0007bb0 <netif_find+0x94>
c0007b96:	66 90                	xchg   ax,ax
c0007b98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0007b9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ba2:	66 90                	xchg   ax,ax
c0007ba4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007ba9:	75 a1                	jne    c0007b4c <netif_find+0x30>
c0007bab:	b8 00 00 00 00       	mov    eax,0x0
c0007bb0:	83 c4 10             	add    esp,0x10
c0007bb3:	c3                   	ret    

c0007bb4 <netif_set_ipaddr>:
c0007bb4:	83 ec 1c             	sub    esp,0x1c
c0007bb7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007bbb:	8b 10                	mov    edx,DWORD PTR [eax]
c0007bbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007bc1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007bc4:	39 c2                	cmp    edx,eax
c0007bc6:	0f 84 bc 00 00 00    	je     c0007c88 <netif_set_ipaddr+0xd4>
c0007bcc:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0007bd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007bd5:	eb 45                	jmp    c0007c1c <netif_set_ipaddr+0x68>
c0007bd7:	90                   	nop
c0007bd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bdc:	8b 10                	mov    edx,DWORD PTR [eax]
c0007bde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007be2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007be5:	39 c2                	cmp    edx,eax
c0007be7:	75 27                	jne    c0007c10 <netif_set_ipaddr+0x5c>
c0007be9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007bf0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007bf4:	83 ec 0c             	sub    esp,0xc
c0007bf7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007bfb:	e8 7c 36 00 00       	call   c000b27c <tcp_abort>
c0007c00:	83 c4 10             	add    esp,0x10
c0007c03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c0b:	eb 0f                	jmp    c0007c1c <netif_set_ipaddr+0x68>
c0007c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0007c10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c14:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007c17:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c1b:	90                   	nop
c0007c1c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007c21:	75 b5                	jne    c0007bd8 <netif_set_ipaddr+0x24>
c0007c23:	a1 78 68 03 c0       	mov    eax,ds:0xc0036878
c0007c28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c2c:	eb 52                	jmp    c0007c80 <netif_set_ipaddr+0xcc>
c0007c2e:	66 90                	xchg   ax,ax
c0007c30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c34:	85 c0                	test   eax,eax
c0007c36:	74 3c                	je     c0007c74 <netif_set_ipaddr+0xc0>
c0007c38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0007c3e:	85 c0                	test   eax,eax
c0007c40:	74 32                	je     c0007c74 <netif_set_ipaddr+0xc0>
c0007c42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c46:	8b 10                	mov    edx,DWORD PTR [eax]
c0007c48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007c4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007c4f:	39 c2                	cmp    edx,eax
c0007c51:	75 21                	jne    c0007c74 <netif_set_ipaddr+0xc0>
c0007c53:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007c58:	74 0a                	je     c0007c64 <netif_set_ipaddr+0xb0>
c0007c5a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007c5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0007c60:	eb 0a                	jmp    c0007c6c <netif_set_ipaddr+0xb8>
c0007c62:	66 90                	xchg   ax,ax
c0007c64:	b8 00 00 00 00       	mov    eax,0x0
c0007c69:	8d 76 00             	lea    esi,[esi+0x0]
c0007c6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c70:	89 02                	mov    DWORD PTR [edx],eax
c0007c72:	66 90                	xchg   ax,ax
c0007c74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c78:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007c7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c7f:	90                   	nop
c0007c80:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007c85:	75 a9                	jne    c0007c30 <netif_set_ipaddr+0x7c>
c0007c87:	90                   	nop
c0007c88:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007c8d:	74 09                	je     c0007c98 <netif_set_ipaddr+0xe4>
c0007c8f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007c93:	8b 00                	mov    eax,DWORD PTR [eax]
c0007c95:	eb 09                	jmp    c0007ca0 <netif_set_ipaddr+0xec>
c0007c97:	90                   	nop
c0007c98:	b8 00 00 00 00       	mov    eax,0x0
c0007c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0007ca0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007ca4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0007ca7:	90                   	nop
c0007ca8:	83 c4 1c             	add    esp,0x1c
c0007cab:	c3                   	ret    

c0007cac <netif_set_gw>:
c0007cac:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cb1:	74 09                	je     c0007cbc <netif_set_gw+0x10>
c0007cb3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cb7:	8b 00                	mov    eax,DWORD PTR [eax]
c0007cb9:	eb 09                	jmp    c0007cc4 <netif_set_gw+0x18>
c0007cbb:	90                   	nop
c0007cbc:	b8 00 00 00 00       	mov    eax,0x0
c0007cc1:	8d 76 00             	lea    esi,[esi+0x0]
c0007cc4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007cc8:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0007ccb:	90                   	nop
c0007ccc:	c3                   	ret    
c0007ccd:	8d 76 00             	lea    esi,[esi+0x0]

c0007cd0 <netif_set_netmask>:
c0007cd0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cd5:	74 09                	je     c0007ce0 <netif_set_netmask+0x10>
c0007cd7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cdb:	8b 00                	mov    eax,DWORD PTR [eax]
c0007cdd:	eb 09                	jmp    c0007ce8 <netif_set_netmask+0x18>
c0007cdf:	90                   	nop
c0007ce0:	b8 00 00 00 00       	mov    eax,0x0
c0007ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0007ce8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007cec:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0007cef:	90                   	nop
c0007cf0:	c3                   	ret    
c0007cf1:	8d 76 00             	lea    esi,[esi+0x0]

c0007cf4 <netif_set_addr>:
c0007cf4:	83 ec 0c             	sub    esp,0xc
c0007cf7:	83 ec 08             	sub    esp,0x8
c0007cfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007cfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d02:	e8 ad fe ff ff       	call   c0007bb4 <netif_set_ipaddr>
c0007d07:	83 c4 10             	add    esp,0x10
c0007d0a:	83 ec 08             	sub    esp,0x8
c0007d0d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007d11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d15:	e8 b6 ff ff ff       	call   c0007cd0 <netif_set_netmask>
c0007d1a:	83 c4 10             	add    esp,0x10
c0007d1d:	83 ec 08             	sub    esp,0x8
c0007d20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007d24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d28:	e8 7f ff ff ff       	call   c0007cac <netif_set_gw>
c0007d2d:	83 c4 10             	add    esp,0x10
c0007d30:	90                   	nop
c0007d31:	83 c4 0c             	add    esp,0xc
c0007d34:	c3                   	ret    
c0007d35:	8d 76 00             	lea    esi,[esi+0x0]

c0007d38 <netif_add>:
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007d40:	75 16                	jne    c0007d58 <netif_add+0x20>
c0007d42:	83 ec 08             	sub    esp,0x8
c0007d45:	68 54 fc 02 c0       	push   0xc002fc54
c0007d4a:	68 c6 fa 02 c0       	push   0xc002fac6
c0007d4f:	e8 40 7e 01 00       	call   c001fb94 <CPrintf>
c0007d54:	83 c4 10             	add    esp,0x10
c0007d57:	90                   	nop
c0007d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d5c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0007d63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d67:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0007d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d72:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0007d79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d7d:	c6 40 29 00          	mov    BYTE PTR [eax+0x29],0x0
c0007d81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d85:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007d89:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0007d8c:	a0 98 a8 03 c0       	mov    al,ds:0xc003a898
c0007d91:	8d 50 01             	lea    edx,[eax+0x1]
c0007d94:	88 15 98 a8 03 c0    	mov    BYTE PTR ds:0xc003a898,dl
c0007d9a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007d9e:	88 42 2c             	mov    BYTE PTR [edx+0x2c],al
c0007da1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007da5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007da9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0007dac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007db0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007db4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007db8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dbc:	e8 33 ff ff ff       	call   c0007cf4 <netif_set_addr>
c0007dc1:	83 c4 10             	add    esp,0x10
c0007dc4:	83 ec 0c             	sub    esp,0xc
c0007dc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dcb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007dcf:	ff d0                	call   eax
c0007dd1:	83 c4 10             	add    esp,0x10
c0007dd4:	0f be c0             	movsx  eax,al
c0007dd7:	85 c0                	test   eax,eax
c0007dd9:	74 09                	je     c0007de4 <netif_add+0xac>
c0007ddb:	b8 00 00 00 00       	mov    eax,0x0
c0007de0:	eb 1e                	jmp    c0007e00 <netif_add+0xc8>
c0007de2:	66 90                	xchg   ax,ax
c0007de4:	8b 15 10 67 03 c0    	mov    edx,DWORD PTR ds:0xc0036710
c0007dea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007dee:	89 10                	mov    DWORD PTR [eax],edx
c0007df0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007df4:	a3 10 67 03 c0       	mov    ds:0xc0036710,eax
c0007df9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007dfd:	8d 76 00             	lea    esi,[esi+0x0]
c0007e00:	83 c4 0c             	add    esp,0xc
c0007e03:	c3                   	ret    

c0007e04 <netif_set_default>:
c0007e04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e08:	a3 14 67 03 c0       	mov    ds:0xc0036714,eax
c0007e0d:	90                   	nop
c0007e0e:	c3                   	ret    
c0007e0f:	90                   	nop

c0007e10 <netif_set_up>:
c0007e10:	83 ec 0c             	sub    esp,0xc
c0007e13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e17:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e1a:	0f b6 c0             	movzx  eax,al
c0007e1d:	83 e0 01             	and    eax,0x1
c0007e20:	75 4a                	jne    c0007e6c <netif_set_up+0x5c>
c0007e22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e26:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e29:	83 c8 01             	or     eax,0x1
c0007e2c:	88 c2                	mov    dl,al
c0007e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e32:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007e35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e39:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e3c:	0f b6 c0             	movzx  eax,al
c0007e3f:	83 e0 10             	and    eax,0x10
c0007e42:	74 28                	je     c0007e6c <netif_set_up+0x5c>
c0007e44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e48:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e4b:	0f b6 c0             	movzx  eax,al
c0007e4e:	83 e0 20             	and    eax,0x20
c0007e51:	74 19                	je     c0007e6c <netif_set_up+0x5c>
c0007e53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e57:	83 c0 04             	add    eax,0x4
c0007e5a:	83 ec 08             	sub    esp,0x8
c0007e5d:	50                   	push   eax
c0007e5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e62:	e8 bd a5 00 00       	call   c0012424 <etharp_request>
c0007e67:	83 c4 10             	add    esp,0x10
c0007e6a:	66 90                	xchg   ax,ax
c0007e6c:	90                   	nop
c0007e6d:	83 c4 0c             	add    esp,0xc
c0007e70:	c3                   	ret    
c0007e71:	8d 76 00             	lea    esi,[esi+0x0]

c0007e74 <netif_set_down>:
c0007e74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e78:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e7b:	0f b6 c0             	movzx  eax,al
c0007e7e:	83 e0 01             	and    eax,0x1
c0007e81:	74 15                	je     c0007e98 <netif_set_down+0x24>
c0007e83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e87:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e8a:	83 e0 fe             	and    eax,0xfffffffe
c0007e8d:	88 c2                	mov    dl,al
c0007e8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e93:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007e96:	66 90                	xchg   ax,ax
c0007e98:	90                   	nop
c0007e99:	c3                   	ret    
c0007e9a:	66 90                	xchg   ax,ax

c0007e9c <netif_remove>:
c0007e9c:	83 ec 10             	sub    esp,0x10
c0007e9f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007ea4:	0f 84 92 00 00 00    	je     c0007f3c <netif_remove+0xa0>
c0007eaa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007eae:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007eb1:	83 e0 01             	and    eax,0x1
c0007eb4:	0f b6 c0             	movzx  eax,al
c0007eb7:	85 c0                	test   eax,eax
c0007eb9:	74 0d                	je     c0007ec8 <netif_remove+0x2c>
c0007ebb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ebf:	e8 b0 ff ff ff       	call   c0007e74 <netif_set_down>
c0007ec4:	83 c4 04             	add    esp,0x4
c0007ec7:	90                   	nop
c0007ec8:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007ecd:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007ed1:	75 0d                	jne    c0007ee0 <netif_remove+0x44>
c0007ed3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007ed7:	8b 00                	mov    eax,DWORD PTR [eax]
c0007ed9:	a3 10 67 03 c0       	mov    ds:0xc0036710,eax
c0007ede:	eb 44                	jmp    c0007f24 <netif_remove+0x88>
c0007ee0:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007ee5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ee9:	eb 29                	jmp    c0007f14 <netif_remove+0x78>
c0007eeb:	90                   	nop
c0007eec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ef0:	8b 00                	mov    eax,DWORD PTR [eax]
c0007ef2:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007ef6:	75 10                	jne    c0007f08 <netif_remove+0x6c>
c0007ef8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007efc:	8b 10                	mov    edx,DWORD PTR [eax]
c0007efe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f02:	89 10                	mov    DWORD PTR [eax],edx
c0007f04:	eb 16                	jmp    c0007f1c <netif_remove+0x80>
c0007f06:	66 90                	xchg   ax,ax
c0007f08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0007f0e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f12:	66 90                	xchg   ax,ax
c0007f14:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007f19:	75 d1                	jne    c0007eec <netif_remove+0x50>
c0007f1b:	90                   	nop
c0007f1c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007f21:	74 1d                	je     c0007f40 <netif_remove+0xa4>
c0007f23:	90                   	nop
c0007f24:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0007f29:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007f2d:	75 15                	jne    c0007f44 <netif_remove+0xa8>
c0007f2f:	6a 00                	push   0x0
c0007f31:	e8 ce fe ff ff       	call   c0007e04 <netif_set_default>
c0007f36:	83 c4 04             	add    esp,0x4
c0007f39:	eb 09                	jmp    c0007f44 <netif_remove+0xa8>
c0007f3b:	90                   	nop
c0007f3c:	90                   	nop
c0007f3d:	eb 05                	jmp    c0007f44 <netif_remove+0xa8>
c0007f3f:	90                   	nop
c0007f40:	90                   	nop
c0007f41:	8d 76 00             	lea    esi,[esi+0x0]
c0007f44:	83 c4 10             	add    esp,0x10
c0007f47:	c3                   	ret    

c0007f48 <netif_set_link_up>:
c0007f48:	83 ec 0c             	sub    esp,0xc
c0007f4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f4f:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007f52:	0f b6 c0             	movzx  eax,al
c0007f55:	83 e0 10             	and    eax,0x10
c0007f58:	75 4a                	jne    c0007fa4 <netif_set_link_up+0x5c>
c0007f5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f5e:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007f61:	83 c8 10             	or     eax,0x10
c0007f64:	88 c2                	mov    dl,al
c0007f66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f6a:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007f6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f71:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007f74:	0f b6 c0             	movzx  eax,al
c0007f77:	83 e0 01             	and    eax,0x1
c0007f7a:	74 28                	je     c0007fa4 <netif_set_link_up+0x5c>
c0007f7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f80:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007f83:	0f b6 c0             	movzx  eax,al
c0007f86:	83 e0 20             	and    eax,0x20
c0007f89:	74 19                	je     c0007fa4 <netif_set_link_up+0x5c>
c0007f8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f8f:	83 c0 04             	add    eax,0x4
c0007f92:	83 ec 08             	sub    esp,0x8
c0007f95:	50                   	push   eax
c0007f96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f9a:	e8 85 a4 00 00       	call   c0012424 <etharp_request>
c0007f9f:	83 c4 10             	add    esp,0x10
c0007fa2:	66 90                	xchg   ax,ax
c0007fa4:	90                   	nop
c0007fa5:	83 c4 0c             	add    esp,0xc
c0007fa8:	c3                   	ret    
c0007fa9:	8d 76 00             	lea    esi,[esi+0x0]

c0007fac <netif_set_link_down>:
c0007fac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007fb0:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fb3:	0f b6 c0             	movzx  eax,al
c0007fb6:	83 e0 10             	and    eax,0x10
c0007fb9:	74 15                	je     c0007fd0 <netif_set_link_down+0x24>
c0007fbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007fbf:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fc2:	83 e0 ef             	and    eax,0xffffffef
c0007fc5:	88 c2                	mov    dl,al
c0007fc7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007fcb:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007fce:	66 90                	xchg   ax,ax
c0007fd0:	90                   	nop
c0007fd1:	c3                   	ret    
c0007fd2:	66 90                	xchg   ax,ax

c0007fd4 <pbuf_free_ooseq>:
c0007fd4:	83 ec 1c             	sub    esp,0x1c
c0007fd7:	e8 a8 7b 01 00       	call   c001fb84 <CLockScheduler>
c0007fdc:	c6 05 99 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a899,0x0
c0007fe3:	e8 80 7b 01 00       	call   c001fb68 <CUnlockScheduler>
c0007fe8:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0007fed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ff1:	eb 41                	jmp    c0008034 <pbuf_free_ooseq+0x60>
c0007ff3:	90                   	nop
c0007ff4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ff8:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c0007ffe:	85 c0                	test   eax,eax
c0008000:	74 26                	je     c0008028 <pbuf_free_ooseq+0x54>
c0008002:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008006:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000800c:	83 ec 0c             	sub    esp,0xc
c000800f:	50                   	push   eax
c0008010:	e8 03 20 00 00       	call   c000a018 <tcp_segs_free>
c0008015:	83 c4 10             	add    esp,0x10
c0008018:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000801c:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c0008026:	eb 14                	jmp    c000803c <pbuf_free_ooseq+0x68>
c0008028:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000802c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000802f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008033:	90                   	nop
c0008034:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0008039:	75 b9                	jne    c0007ff4 <pbuf_free_ooseq+0x20>
c000803b:	90                   	nop
c000803c:	83 c4 1c             	add    esp,0x1c
c000803f:	c3                   	ret    

c0008040 <pbuf_pool_is_empty>:
c0008040:	83 ec 1c             	sub    esp,0x1c
c0008043:	e8 3c 7b 01 00       	call   c001fb84 <CLockScheduler>
c0008048:	a0 99 a8 03 c0       	mov    al,ds:0xc003a899
c000804d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008051:	c6 05 99 a8 03 c0 01 	mov    BYTE PTR ds:0xc003a899,0x1
c0008058:	e8 0b 7b 01 00       	call   c001fb68 <CUnlockScheduler>
c000805d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0008062:	85 c0                	test   eax,eax
c0008064:	75 2e                	jne    c0008094 <pbuf_pool_is_empty+0x54>
c0008066:	83 ec 04             	sub    esp,0x4
c0008069:	6a 00                	push   0x0
c000806b:	6a 00                	push   0x0
c000806d:	68 d4 7f 00 c0       	push   0xc0007fd4
c0008072:	e8 dd 8b ff ff       	call   c0000c54 <tcpip_callback_with_block>
c0008077:	83 c4 10             	add    esp,0x10
c000807a:	0f be c0             	movsx  eax,al
c000807d:	85 c0                	test   eax,eax
c000807f:	74 13                	je     c0008094 <pbuf_pool_is_empty+0x54>
c0008081:	e8 fe 7a 01 00       	call   c001fb84 <CLockScheduler>
c0008086:	c6 05 99 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a899,0x0
c000808d:	e8 d6 7a 01 00       	call   c001fb68 <CUnlockScheduler>
c0008092:	66 90                	xchg   ax,ax
c0008094:	90                   	nop
c0008095:	83 c4 1c             	add    esp,0x1c
c0008098:	c3                   	ret    
c0008099:	8d 76 00             	lea    esi,[esi+0x0]

c000809c <pbuf_alloced_custom>:
c000809c:	83 ec 2c             	sub    esp,0x2c
c000809f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00080a3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00080a7:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c00080ac:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00080b1:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c00080b8:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c00080bd:	74 29                	je     c00080e8 <pbuf_alloced_custom+0x4c>
c00080bf:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00080c4:	74 12                	je     c00080d8 <pbuf_alloced_custom+0x3c>
c00080c6:	83 7c 24 30 02       	cmp    DWORD PTR [esp+0x30],0x2
c00080cb:	74 2b                	je     c00080f8 <pbuf_alloced_custom+0x5c>
c00080cd:	83 7c 24 30 03       	cmp    DWORD PTR [esp+0x30],0x3
c00080d2:	74 54                	je     c0008128 <pbuf_alloced_custom+0x8c>
c00080d4:	eb 32                	jmp    c0008108 <pbuf_alloced_custom+0x6c>
c00080d6:	66 90                	xchg   ax,ax
c00080d8:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00080dd:	83 c0 14             	add    eax,0x14
c00080e0:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00080e5:	8d 76 00             	lea    esi,[esi+0x0]
c00080e8:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00080ed:	83 c0 14             	add    eax,0x14
c00080f0:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00080f5:	8d 76 00             	lea    esi,[esi+0x0]
c00080f8:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00080fd:	83 c0 0e             	add    eax,0xe
c0008100:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008105:	eb 25                	jmp    c000812c <pbuf_alloced_custom+0x90>
c0008107:	90                   	nop
c0008108:	83 ec 08             	sub    esp,0x8
c000810b:	68 6c fc 02 c0       	push   0xc002fc6c
c0008110:	68 c6 fa 02 c0       	push   0xc002fac6
c0008115:	e8 7a 7a 01 00       	call   c001fb94 <CPrintf>
c000811a:	83 c4 10             	add    esp,0x10
c000811d:	b8 00 00 00 00       	mov    eax,0x0
c0008122:	e9 95 00 00 00       	jmp    c00081bc <pbuf_alloced_custom+0x120>
c0008127:	90                   	nop
c0008128:	90                   	nop
c0008129:	8d 76 00             	lea    esi,[esi+0x0]
c000812c:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0008131:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0008136:	01 c2                	add    edx,eax
c0008138:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000813d:	39 c2                	cmp    edx,eax
c000813f:	7d 07                	jge    c0008148 <pbuf_alloced_custom+0xac>
c0008141:	b8 00 00 00 00       	mov    eax,0x0
c0008146:	eb 74                	jmp    c00081bc <pbuf_alloced_custom+0x120>
c0008148:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000814c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008152:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008157:	74 17                	je     c0008170 <pbuf_alloced_custom+0xd4>
c0008159:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000815e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008162:	01 c2                	add    edx,eax
c0008164:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008168:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000816b:	eb 0f                	jmp    c000817c <pbuf_alloced_custom+0xe0>
c000816d:	8d 76 00             	lea    esi,[esi+0x0]
c0008170:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008174:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000817b:	90                   	nop
c000817c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008180:	c6 40 0d 02          	mov    BYTE PTR [eax+0xd],0x2
c0008184:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0008188:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000818c:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008190:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008194:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008197:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000819b:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c000819f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00081a3:	88 c2                	mov    dl,al
c00081a5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00081a9:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00081ac:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00081b0:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c00081b6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00081ba:	66 90                	xchg   ax,ax
c00081bc:	83 c4 2c             	add    esp,0x2c
c00081bf:	c3                   	ret    

c00081c0 <pbuf_header>:
c00081c0:	83 ec 2c             	sub    esp,0x2c
c00081c3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00081c7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00081cc:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00081d1:	75 15                	jne    c00081e8 <pbuf_header+0x28>
c00081d3:	83 ec 08             	sub    esp,0x8
c00081d6:	68 f6 fe 02 c0       	push   0xc002fef6
c00081db:	68 c6 fa 02 c0       	push   0xc002fac6
c00081e0:	e8 af 79 01 00       	call   c001fb94 <CPrintf>
c00081e5:	83 c4 10             	add    esp,0x10
c00081e8:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c00081ed:	85 c0                	test   eax,eax
c00081ef:	74 07                	je     c00081f8 <pbuf_header+0x38>
c00081f1:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00081f6:	75 08                	jne    c0008200 <pbuf_header+0x40>
c00081f8:	b0 00                	mov    al,0x0
c00081fa:	e9 59 01 00 00       	jmp    c0008358 <pbuf_header+0x198>
c00081ff:	90                   	nop
c0008200:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c0008205:	85 c0                	test   eax,eax
c0008207:	79 3b                	jns    c0008244 <pbuf_header+0x84>
c0008209:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000820d:	f7 d8                	neg    eax
c000820f:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008214:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008218:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000821c:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0008221:	0f b7 c0             	movzx  eax,ax
c0008224:	39 c2                	cmp    edx,eax
c0008226:	76 28                	jbe    c0008250 <pbuf_header+0x90>
c0008228:	83 ec 08             	sub    esp,0x8
c000822b:	68 47 fe 02 c0       	push   0xc002fe47
c0008230:	68 c6 fa 02 c0       	push   0xc002fac6
c0008235:	e8 5a 79 01 00       	call   c001fb94 <CPrintf>
c000823a:	83 c4 10             	add    esp,0x10
c000823d:	b0 01                	mov    al,0x1
c000823f:	e9 14 01 00 00       	jmp    c0008358 <pbuf_header+0x198>
c0008244:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008248:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000824d:	8d 76 00             	lea    esi,[esi+0x0]
c0008250:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008254:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008257:	0f b6 c0             	movzx  eax,al
c000825a:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c000825f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008263:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008266:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000826a:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000826f:	85 c0                	test   eax,eax
c0008271:	74 0d                	je     c0008280 <pbuf_header+0xc0>
c0008273:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008278:	83 f8 03             	cmp    eax,0x3
c000827b:	75 3f                	jne    c00082bc <pbuf_header+0xfc>
c000827d:	8d 76 00             	lea    esi,[esi+0x0]
c0008280:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008284:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008287:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c000828c:	f7 da                	neg    edx
c000828e:	01 c2                	add    edx,eax
c0008290:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008294:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008297:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000829b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000829e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00082a2:	83 c2 10             	add    edx,0x10
c00082a5:	39 d0                	cmp    eax,edx
c00082a7:	73 7f                	jae    c0008328 <pbuf_header+0x168>
c00082a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00082ad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00082b1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00082b4:	b0 01                	mov    al,0x1
c00082b6:	e9 9d 00 00 00       	jmp    c0008358 <pbuf_header+0x198>
c00082bb:	90                   	nop
c00082bc:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00082c1:	83 f8 02             	cmp    eax,0x2
c00082c4:	74 0a                	je     c00082d0 <pbuf_header+0x110>
c00082c6:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00082cb:	83 f8 01             	cmp    eax,0x1
c00082ce:	75 3c                	jne    c000830c <pbuf_header+0x14c>
c00082d0:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c00082d5:	85 c0                	test   eax,eax
c00082d7:	79 2f                	jns    c0008308 <pbuf_header+0x148>
c00082d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00082dd:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00082e1:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00082e6:	0f b7 c0             	movzx  eax,ax
c00082e9:	39 c2                	cmp    edx,eax
c00082eb:	77 1b                	ja     c0008308 <pbuf_header+0x148>
c00082ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00082f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00082f4:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c00082f9:	f7 da                	neg    edx
c00082fb:	01 c2                	add    edx,eax
c00082fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008301:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008304:	eb 22                	jmp    c0008328 <pbuf_header+0x168>
c0008306:	66 90                	xchg   ax,ax
c0008308:	b0 01                	mov    al,0x1
c000830a:	eb 4c                	jmp    c0008358 <pbuf_header+0x198>
c000830c:	83 ec 08             	sub    esp,0x8
c000830f:	68 65 fe 02 c0       	push   0xc002fe65
c0008314:	68 c6 fa 02 c0       	push   0xc002fac6
c0008319:	e8 76 78 01 00       	call   c001fb94 <CPrintf>
c000831e:	83 c4 10             	add    esp,0x10
c0008321:	b0 01                	mov    al,0x1
c0008323:	eb 33                	jmp    c0008358 <pbuf_header+0x198>
c0008325:	8d 76 00             	lea    esi,[esi+0x0]
c0008328:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000832c:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008330:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008334:	01 d0                	add    eax,edx
c0008336:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000833a:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c000833e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008342:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008345:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008349:	01 d0                	add    eax,edx
c000834b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000834f:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008353:	b0 00                	mov    al,0x0
c0008355:	8d 76 00             	lea    esi,[esi+0x0]
c0008358:	83 c4 2c             	add    esp,0x2c
c000835b:	c3                   	ret    

c000835c <pbuf_free>:
c000835c:	83 ec 1c             	sub    esp,0x1c
c000835f:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008364:	75 26                	jne    c000838c <pbuf_free+0x30>
c0008366:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000836b:	75 17                	jne    c0008384 <pbuf_free+0x28>
c000836d:	83 ec 08             	sub    esp,0x8
c0008370:	68 f6 fe 02 c0       	push   0xc002fef6
c0008375:	68 c6 fa 02 c0       	push   0xc002fac6
c000837a:	e8 15 78 01 00       	call   c001fb94 <CPrintf>
c000837f:	83 c4 10             	add    esp,0x10
c0008382:	66 90                	xchg   ax,ax
c0008384:	b0 00                	mov    al,0x0
c0008386:	e9 a5 01 00 00       	jmp    c0008530 <pbuf_free+0x1d4>
c000838b:	90                   	nop
c000838c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008390:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008393:	0f b6 c0             	movzx  eax,al
c0008396:	85 c0                	test   eax,eax
c0008398:	74 42                	je     c00083dc <pbuf_free+0x80>
c000839a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000839e:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00083a1:	0f b6 c0             	movzx  eax,al
c00083a4:	83 f8 01             	cmp    eax,0x1
c00083a7:	74 33                	je     c00083dc <pbuf_free+0x80>
c00083a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083ad:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00083b0:	0f b6 c0             	movzx  eax,al
c00083b3:	83 f8 02             	cmp    eax,0x2
c00083b6:	74 24                	je     c00083dc <pbuf_free+0x80>
c00083b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083bc:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00083bf:	0f b6 c0             	movzx  eax,al
c00083c2:	83 f8 03             	cmp    eax,0x3
c00083c5:	74 15                	je     c00083dc <pbuf_free+0x80>
c00083c7:	83 ec 08             	sub    esp,0x8
c00083ca:	68 73 fe 02 c0       	push   0xc002fe73
c00083cf:	68 c6 fa 02 c0       	push   0xc002fac6
c00083d4:	e8 bb 77 01 00       	call   c001fb94 <CPrintf>
c00083d9:	83 c4 10             	add    esp,0x10
c00083dc:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00083e1:	e9 3a 01 00 00       	jmp    c0008520 <pbuf_free+0x1c4>
c00083e6:	66 90                	xchg   ax,ax
c00083e8:	e8 97 77 01 00       	call   c001fb84 <CLockScheduler>
c00083ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083f1:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c00083f5:	0f b7 c0             	movzx  eax,ax
c00083f8:	85 c0                	test   eax,eax
c00083fa:	75 18                	jne    c0008414 <pbuf_free+0xb8>
c00083fc:	83 ec 08             	sub    esp,0x8
c00083ff:	68 88 fe 02 c0       	push   0xc002fe88
c0008404:	68 c6 fa 02 c0       	push   0xc002fac6
c0008409:	e8 86 77 01 00       	call   c001fb94 <CPrintf>
c000840e:	83 c4 10             	add    esp,0x10
c0008411:	8d 76 00             	lea    esi,[esi+0x0]
c0008414:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008418:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000841c:	83 e8 01             	sub    eax,0x1
c000841f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008423:	66 89 42 0e          	mov    WORD PTR [edx+0xe],ax
c0008427:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000842b:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000842f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008434:	e8 2f 77 01 00       	call   c001fb68 <CUnlockScheduler>
c0008439:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000843e:	85 c0                	test   eax,eax
c0008440:	0f 85 d2 00 00 00    	jne    c0008518 <pbuf_free+0x1bc>
c0008446:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000844a:	8b 00                	mov    eax,DWORD PTR [eax]
c000844c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008450:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008454:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008457:	0f b6 c0             	movzx  eax,al
c000845a:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000845f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008463:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008466:	0f b6 c0             	movzx  eax,al
c0008469:	83 e0 02             	and    eax,0x2
c000846c:	74 3a                	je     c00084a8 <pbuf_free+0x14c>
c000846e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008472:	89 04 24             	mov    DWORD PTR [esp],eax
c0008475:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008478:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000847b:	85 c0                	test   eax,eax
c000847d:	75 15                	jne    c0008494 <pbuf_free+0x138>
c000847f:	83 ec 08             	sub    esp,0x8
c0008482:	68 90 fc 02 c0       	push   0xc002fc90
c0008487:	68 c6 fa 02 c0       	push   0xc002fac6
c000848c:	e8 03 77 01 00       	call   c001fb94 <CPrintf>
c0008491:	83 c4 10             	add    esp,0x10
c0008494:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008497:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000849a:	83 ec 0c             	sub    esp,0xc
c000849d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00084a1:	ff d0                	call   eax
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	eb 58                	jmp    c0008500 <pbuf_free+0x1a4>
c00084a8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084ad:	83 f8 03             	cmp    eax,0x3
c00084b0:	75 16                	jne    c00084c8 <pbuf_free+0x16c>
c00084b2:	83 ec 08             	sub    esp,0x8
c00084b5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084b9:	6a 0d                	push   0xd
c00084bb:	e8 e0 f5 ff ff       	call   c0007aa0 <memp_free>
c00084c0:	83 c4 10             	add    esp,0x10
c00084c3:	eb 3b                	jmp    c0008500 <pbuf_free+0x1a4>
c00084c5:	8d 76 00             	lea    esi,[esi+0x0]
c00084c8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084cd:	83 f8 01             	cmp    eax,0x1
c00084d0:	74 0a                	je     c00084dc <pbuf_free+0x180>
c00084d2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084d7:	83 f8 02             	cmp    eax,0x2
c00084da:	75 14                	jne    c00084f0 <pbuf_free+0x194>
c00084dc:	83 ec 08             	sub    esp,0x8
c00084df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084e3:	6a 0c                	push   0xc
c00084e5:	e8 b6 f5 ff ff       	call   c0007aa0 <memp_free>
c00084ea:	83 c4 10             	add    esp,0x10
c00084ed:	eb 11                	jmp    c0008500 <pbuf_free+0x1a4>
c00084ef:	90                   	nop
c00084f0:	83 ec 0c             	sub    esp,0xc
c00084f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00084f7:	e8 80 eb ff ff       	call   c000707c <mem_free>
c00084fc:	83 c4 10             	add    esp,0x10
c00084ff:	90                   	nop
c0008500:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008504:	83 c0 01             	add    eax,0x1
c0008507:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000850b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000850f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008513:	eb 0b                	jmp    c0008520 <pbuf_free+0x1c4>
c0008515:	8d 76 00             	lea    esi,[esi+0x0]
c0008518:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008520:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008525:	0f 85 bd fe ff ff    	jne    c00083e8 <pbuf_free+0x8c>
c000852b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000852f:	90                   	nop
c0008530:	83 c4 1c             	add    esp,0x1c
c0008533:	c3                   	ret    

c0008534 <pbuf_alloc>:
c0008534:	83 ec 3c             	sub    esp,0x3c
c0008537:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000853b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008540:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c0008547:	83 7c 24 40 01       	cmp    DWORD PTR [esp+0x40],0x1
c000854c:	74 2a                	je     c0008578 <pbuf_alloc+0x44>
c000854e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008553:	74 13                	je     c0008568 <pbuf_alloc+0x34>
c0008555:	83 7c 24 40 02       	cmp    DWORD PTR [esp+0x40],0x2
c000855a:	74 2c                	je     c0008588 <pbuf_alloc+0x54>
c000855c:	83 7c 24 40 03       	cmp    DWORD PTR [esp+0x40],0x3
c0008561:	74 55                	je     c00085b8 <pbuf_alloc+0x84>
c0008563:	eb 33                	jmp    c0008598 <pbuf_alloc+0x64>
c0008565:	8d 76 00             	lea    esi,[esi+0x0]
c0008568:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c000856d:	83 c0 14             	add    eax,0x14
c0008570:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c0008575:	8d 76 00             	lea    esi,[esi+0x0]
c0008578:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c000857d:	83 c0 14             	add    eax,0x14
c0008580:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c0008585:	8d 76 00             	lea    esi,[esi+0x0]
c0008588:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c000858d:	83 c0 0e             	add    eax,0xe
c0008590:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c0008595:	eb 25                	jmp    c00085bc <pbuf_alloc+0x88>
c0008597:	90                   	nop
c0008598:	83 ec 08             	sub    esp,0x8
c000859b:	68 9e fe 02 c0       	push   0xc002fe9e
c00085a0:	68 c6 fa 02 c0       	push   0xc002fac6
c00085a5:	e8 ea 75 01 00       	call   c001fb94 <CPrintf>
c00085aa:	83 c4 10             	add    esp,0x10
c00085ad:	b8 00 00 00 00       	mov    eax,0x0
c00085b2:	e9 71 03 00 00       	jmp    c0008928 <pbuf_alloc+0x3f4>
c00085b7:	90                   	nop
c00085b8:	90                   	nop
c00085b9:	8d 76 00             	lea    esi,[esi+0x0]
c00085bc:	83 7c 24 48 02       	cmp    DWORD PTR [esp+0x48],0x2
c00085c1:	77 11                	ja     c00085d4 <pbuf_alloc+0xa0>
c00085c3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00085c8:	0f 85 c6 02 00 00    	jne    c0008894 <pbuf_alloc+0x360>
c00085ce:	e9 41 02 00 00       	jmp    c0008814 <pbuf_alloc+0x2e0>
c00085d3:	90                   	nop
c00085d4:	83 7c 24 48 03       	cmp    DWORD PTR [esp+0x48],0x3
c00085d9:	0f 85 15 03 00 00    	jne    c00088f4 <pbuf_alloc+0x3c0>
c00085df:	83 ec 0c             	sub    esp,0xc
c00085e2:	6a 0d                	push   0xd
c00085e4:	e8 8b f3 ff ff       	call   c0007974 <memp_malloc>
c00085e9:	83 c4 10             	add    esp,0x10
c00085ec:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00085f0:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00085f5:	75 11                	jne    c0008608 <pbuf_alloc+0xd4>
c00085f7:	e8 44 fa ff ff       	call   c0008040 <pbuf_pool_is_empty>
c00085fc:	b8 00 00 00 00       	mov    eax,0x0
c0008601:	e9 22 03 00 00       	jmp    c0008928 <pbuf_alloc+0x3f4>
c0008606:	66 90                	xchg   ax,ax
c0008608:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000860c:	88 c2                	mov    dl,al
c000860e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008612:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008615:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008619:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000861f:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008624:	8d 50 10             	lea    edx,[eax+0x10]
c0008627:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000862b:	01 c2                	add    edx,eax
c000862d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008631:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008634:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008638:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000863c:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008640:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008645:	ba 4e 02 00 00       	mov    edx,0x24e
c000864a:	29 c2                	sub    edx,eax
c000864c:	89 d0                	mov    eax,edx
c000864e:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008653:	39 d0                	cmp    eax,edx
c0008655:	7e 05                	jle    c000865c <pbuf_alloc+0x128>
c0008657:	89 d0                	mov    eax,edx
c0008659:	8d 76 00             	lea    esi,[esi+0x0]
c000865c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008660:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008664:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008668:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000866b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000866f:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008673:	0f b7 c0             	movzx  eax,ax
c0008676:	01 c2                	add    edx,eax
c0008678:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000867c:	05 5e 02 00 00       	add    eax,0x25e
c0008681:	39 c2                	cmp    edx,eax
c0008683:	76 17                	jbe    c000869c <pbuf_alloc+0x168>
c0008685:	83 ec 08             	sub    esp,0x8
c0008688:	68 b4 fc 02 c0       	push   0xc002fcb4
c000868d:	68 c6 fa 02 c0       	push   0xc002fac6
c0008692:	e8 fd 74 01 00       	call   c001fb94 <CPrintf>
c0008697:	83 c4 10             	add    esp,0x10
c000869a:	66 90                	xchg   ax,ax
c000869c:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00086a1:	ba 4e 02 00 00       	mov    edx,0x24e
c00086a6:	29 c2                	sub    edx,eax
c00086a8:	89 d0                	mov    eax,edx
c00086aa:	85 c0                	test   eax,eax
c00086ac:	7f 16                	jg     c00086c4 <pbuf_alloc+0x190>
c00086ae:	83 ec 08             	sub    esp,0x8
c00086b1:	68 e8 fc 02 c0       	push   0xc002fce8
c00086b6:	68 c6 fa 02 c0       	push   0xc002fac6
c00086bb:	e8 d4 74 01 00       	call   c001fb94 <CPrintf>
c00086c0:	83 c4 10             	add    esp,0x10
c00086c3:	90                   	nop
c00086c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00086c8:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c00086ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00086d2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00086d6:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00086db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00086df:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00086e3:	0f b7 c0             	movzx  eax,ax
c00086e6:	29 c2                	sub    edx,eax
c00086e8:	89 d0                	mov    eax,edx
c00086ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00086ee:	e9 11 01 00 00       	jmp    c0008804 <pbuf_alloc+0x2d0>
c00086f3:	90                   	nop
c00086f4:	83 ec 0c             	sub    esp,0xc
c00086f7:	6a 0d                	push   0xd
c00086f9:	e8 76 f2 ff ff       	call   c0007974 <memp_malloc>
c00086fe:	83 c4 10             	add    esp,0x10
c0008701:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008705:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000870a:	75 20                	jne    c000872c <pbuf_alloc+0x1f8>
c000870c:	e8 2f f9 ff ff       	call   c0008040 <pbuf_pool_is_empty>
c0008711:	83 ec 0c             	sub    esp,0xc
c0008714:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008718:	e8 3f fc ff ff       	call   c000835c <pbuf_free>
c000871d:	83 c4 10             	add    esp,0x10
c0008720:	b8 00 00 00 00       	mov    eax,0x0
c0008725:	e9 fe 01 00 00       	jmp    c0008928 <pbuf_alloc+0x3f4>
c000872a:	66 90                	xchg   ax,ax
c000872c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008730:	88 c2                	mov    dl,al
c0008732:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008736:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008739:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000873d:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c0008741:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008745:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000874b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000874f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008753:	89 10                	mov    DWORD PTR [eax],edx
c0008755:	81 7c 24 20 fe ff 00 00 	cmp    DWORD PTR [esp+0x20],0xfffe
c000875d:	7e 15                	jle    c0008774 <pbuf_alloc+0x240>
c000875f:	83 ec 08             	sub    esp,0x8
c0008762:	68 b9 fe 02 c0       	push   0xc002feb9
c0008767:	68 c6 fa 02 c0       	push   0xc002fac6
c000876c:	e8 23 74 01 00       	call   c001fb94 <CPrintf>
c0008771:	83 c4 10             	add    esp,0x10
c0008774:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008778:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000877c:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008780:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008784:	0f b7 d0             	movzx  edx,ax
c0008787:	81 fa 4e 02 00 00    	cmp    edx,0x24e
c000878d:	76 05                	jbe    c0008794 <pbuf_alloc+0x260>
c000878f:	b8 4e 02 00 00       	mov    eax,0x24e
c0008794:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008798:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c000879c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00087a0:	8d 50 10             	lea    edx,[eax+0x10]
c00087a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00087a7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00087aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087ae:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00087b1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087b5:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00087b9:	0f b7 c0             	movzx  eax,ax
c00087bc:	01 c2                	add    edx,eax
c00087be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087c2:	05 5e 02 00 00       	add    eax,0x25e
c00087c7:	39 c2                	cmp    edx,eax
c00087c9:	76 15                	jbe    c00087e0 <pbuf_alloc+0x2ac>
c00087cb:	83 ec 08             	sub    esp,0x8
c00087ce:	68 b4 fc 02 c0       	push   0xc002fcb4
c00087d3:	68 c6 fa 02 c0       	push   0xc002fac6
c00087d8:	e8 b7 73 01 00       	call   c001fb94 <CPrintf>
c00087dd:	83 c4 10             	add    esp,0x10
c00087e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00087e4:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c00087ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00087ee:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00087f2:	0f b7 c0             	movzx  eax,ax
c00087f5:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c00087f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00087fd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0008801:	8d 76 00             	lea    esi,[esi+0x0]
c0008804:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008809:	0f 8f e5 fe ff ff    	jg     c00086f4 <pbuf_alloc+0x1c0>
c000880f:	e9 fc 00 00 00       	jmp    c0008910 <pbuf_alloc+0x3dc>
c0008814:	66 8b 54 24 26       	mov    dx,WORD PTR [esp+0x26]
c0008819:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000881d:	01 d0                	add    eax,edx
c000881f:	83 c0 10             	add    eax,0x10
c0008822:	0f b7 c0             	movzx  eax,ax
c0008825:	83 ec 0c             	sub    esp,0xc
c0008828:	50                   	push   eax
c0008829:	e8 82 ec ff ff       	call   c00074b0 <mem_malloc>
c000882e:	83 c4 10             	add    esp,0x10
c0008831:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0008835:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000883a:	75 0c                	jne    c0008848 <pbuf_alloc+0x314>
c000883c:	b8 00 00 00 00       	mov    eax,0x0
c0008841:	e9 e2 00 00 00       	jmp    c0008928 <pbuf_alloc+0x3f4>
c0008846:	66 90                	xchg   ax,ax
c0008848:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c000884d:	8d 50 10             	lea    edx,[eax+0x10]
c0008850:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008854:	01 c2                	add    edx,eax
c0008856:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000885a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000885d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008861:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008865:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008869:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000886d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008870:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008874:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008878:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000887c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008882:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008886:	88 c2                	mov    dl,al
c0008888:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000888c:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c000888f:	eb 7f                	jmp    c0008910 <pbuf_alloc+0x3dc>
c0008891:	8d 76 00             	lea    esi,[esi+0x0]
c0008894:	83 ec 0c             	sub    esp,0xc
c0008897:	6a 0c                	push   0xc
c0008899:	e8 d6 f0 ff ff       	call   c0007974 <memp_malloc>
c000889e:	83 c4 10             	add    esp,0x10
c00088a1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00088a5:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00088aa:	75 08                	jne    c00088b4 <pbuf_alloc+0x380>
c00088ac:	b8 00 00 00 00       	mov    eax,0x0
c00088b1:	eb 75                	jmp    c0008928 <pbuf_alloc+0x3f4>
c00088b3:	90                   	nop
c00088b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00088b8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00088bf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00088c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00088c7:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c00088cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00088cf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00088d2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00088d6:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00088da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00088de:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00088e4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00088e8:	88 c2                	mov    dl,al
c00088ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00088ee:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00088f1:	eb 1d                	jmp    c0008910 <pbuf_alloc+0x3dc>
c00088f3:	90                   	nop
c00088f4:	83 ec 08             	sub    esp,0x8
c00088f7:	68 cd fe 02 c0       	push   0xc002fecd
c00088fc:	68 c6 fa 02 c0       	push   0xc002fac6
c0008901:	e8 8e 72 01 00       	call   c001fb94 <CPrintf>
c0008906:	83 c4 10             	add    esp,0x10
c0008909:	b8 00 00 00 00       	mov    eax,0x0
c000890e:	eb 18                	jmp    c0008928 <pbuf_alloc+0x3f4>
c0008910:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008914:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c000891a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000891e:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c0008922:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008926:	66 90                	xchg   ax,ax
c0008928:	83 c4 3c             	add    esp,0x3c
c000892b:	c3                   	ret    

c000892c <pbuf_realloc>:
c000892c:	83 ec 2c             	sub    esp,0x2c
c000892f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008933:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008938:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000893d:	75 15                	jne    c0008954 <pbuf_realloc+0x28>
c000893f:	83 ec 08             	sub    esp,0x8
c0008942:	68 e8 fe 02 c0       	push   0xc002fee8
c0008947:	68 c6 fa 02 c0       	push   0xc002fac6
c000894c:	e8 43 72 01 00       	call   c001fb94 <CPrintf>
c0008951:	83 c4 10             	add    esp,0x10
c0008954:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008958:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c000895b:	0f b6 c0             	movzx  eax,al
c000895e:	83 f8 03             	cmp    eax,0x3
c0008961:	74 41                	je     c00089a4 <pbuf_realloc+0x78>
c0008963:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008967:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c000896a:	0f b6 c0             	movzx  eax,al
c000896d:	83 f8 01             	cmp    eax,0x1
c0008970:	74 32                	je     c00089a4 <pbuf_realloc+0x78>
c0008972:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008976:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008979:	0f b6 c0             	movzx  eax,al
c000897c:	85 c0                	test   eax,eax
c000897e:	74 24                	je     c00089a4 <pbuf_realloc+0x78>
c0008980:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008984:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008987:	0f b6 c0             	movzx  eax,al
c000898a:	83 f8 02             	cmp    eax,0x2
c000898d:	74 15                	je     c00089a4 <pbuf_realloc+0x78>
c000898f:	83 ec 08             	sub    esp,0x8
c0008992:	68 00 ff 02 c0       	push   0xc002ff00
c0008997:	68 c6 fa 02 c0       	push   0xc002fac6
c000899c:	e8 f3 71 01 00       	call   c001fb94 <CPrintf>
c00089a1:	83 c4 10             	add    esp,0x10
c00089a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089a8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00089ab:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00089b0:	0f b7 c0             	movzx  eax,ax
c00089b3:	39 c2                	cmp    edx,eax
c00089b5:	0f 83 6d 01 00 00    	jae    c0008b28 <pbuf_realloc+0x1fc>
c00089bb:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00089c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00089c7:	0f b7 c0             	movzx  eax,ax
c00089ca:	29 c2                	sub    edx,eax
c00089cc:	89 d0                	mov    eax,edx
c00089ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00089d6:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00089db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00089e3:	eb 77                	jmp    c0008a5c <pbuf_realloc+0x130>
c00089e5:	8d 76 00             	lea    esi,[esi+0x0]
c00089e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089ec:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00089f0:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c00089f5:	89 d1                	mov    ecx,edx
c00089f7:	29 c1                	sub    ecx,eax
c00089f9:	89 c8                	mov    eax,ecx
c00089fb:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0008a00:	81 7c 24 14 fe ff 00 00 	cmp    DWORD PTR [esp+0x14],0xfffe
c0008a08:	7e 16                	jle    c0008a20 <pbuf_realloc+0xf4>
c0008a0a:	83 ec 08             	sub    esp,0x8
c0008a0d:	68 1b ff 02 c0       	push   0xc002ff1b
c0008a12:	68 c6 fa 02 c0       	push   0xc002fac6
c0008a17:	e8 78 71 01 00       	call   c001fb94 <CPrintf>
c0008a1c:	83 c4 10             	add    esp,0x10
c0008a1f:	90                   	nop
c0008a20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a24:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008a27:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008a2b:	01 d0                	add    eax,edx
c0008a2d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008a31:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008a35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a39:	8b 00                	mov    eax,DWORD PTR [eax]
c0008a3b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008a3f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008a44:	75 16                	jne    c0008a5c <pbuf_realloc+0x130>
c0008a46:	83 ec 08             	sub    esp,0x8
c0008a49:	68 2c ff 02 c0       	push   0xc002ff2c
c0008a4e:	68 c6 fa 02 c0       	push   0xc002fac6
c0008a53:	e8 3c 71 01 00       	call   c001fb94 <CPrintf>
c0008a58:	83 c4 10             	add    esp,0x10
c0008a5b:	90                   	nop
c0008a5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a60:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008a64:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0008a69:	0f b7 c0             	movzx  eax,ax
c0008a6c:	39 c2                	cmp    edx,eax
c0008a6e:	0f 87 74 ff ff ff    	ja     c00089e8 <pbuf_realloc+0xbc>
c0008a74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a78:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008a7b:	0f b6 c0             	movzx  eax,al
c0008a7e:	85 c0                	test   eax,eax
c0008a80:	75 5e                	jne    c0008ae0 <pbuf_realloc+0x1b4>
c0008a82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a86:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008a8a:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0008a8f:	0f b7 c0             	movzx  eax,ax
c0008a92:	39 c2                	cmp    edx,eax
c0008a94:	74 4a                	je     c0008ae0 <pbuf_realloc+0x1b4>
c0008a96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008a9d:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0008aa1:	89 c2                	mov    edx,eax
c0008aa3:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0008aa8:	01 d0                	add    eax,edx
c0008aaa:	0f b7 c0             	movzx  eax,ax
c0008aad:	83 ec 08             	sub    esp,0x8
c0008ab0:	50                   	push   eax
c0008ab1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008ab5:	e8 e6 e6 ff ff       	call   c00071a0 <mem_trim>
c0008aba:	83 c4 10             	add    esp,0x10
c0008abd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008ac1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008ac6:	75 18                	jne    c0008ae0 <pbuf_realloc+0x1b4>
c0008ac8:	83 ec 08             	sub    esp,0x8
c0008acb:	68 44 ff 02 c0       	push   0xc002ff44
c0008ad0:	68 c6 fa 02 c0       	push   0xc002fac6
c0008ad5:	e8 ba 70 01 00       	call   c001fb94 <CPrintf>
c0008ada:	83 c4 10             	add    esp,0x10
c0008add:	8d 76 00             	lea    esi,[esi+0x0]
c0008ae0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008ae4:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0008ae9:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008aed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008af1:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008af5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008af9:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008afd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b01:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b03:	85 c0                	test   eax,eax
c0008b05:	74 15                	je     c0008b1c <pbuf_realloc+0x1f0>
c0008b07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b0d:	83 ec 0c             	sub    esp,0xc
c0008b10:	50                   	push   eax
c0008b11:	e8 46 f8 ff ff       	call   c000835c <pbuf_free>
c0008b16:	83 c4 10             	add    esp,0x10
c0008b19:	8d 76 00             	lea    esi,[esi+0x0]
c0008b1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b20:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008b26:	eb 04                	jmp    c0008b2c <pbuf_realloc+0x200>
c0008b28:	90                   	nop
c0008b29:	8d 76 00             	lea    esi,[esi+0x0]
c0008b2c:	83 c4 2c             	add    esp,0x2c
c0008b2f:	c3                   	ret    

c0008b30 <pbuf_clen>:
c0008b30:	83 ec 10             	sub    esp,0x10
c0008b33:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008b38:	eb 1a                	jmp    c0008b54 <pbuf_clen+0x24>
c0008b3a:	66 90                	xchg   ax,ax
c0008b3c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008b40:	83 c0 01             	add    eax,0x1
c0008b43:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008b47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008b4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008b51:	8d 76 00             	lea    esi,[esi+0x0]
c0008b54:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008b59:	75 e1                	jne    c0008b3c <pbuf_clen+0xc>
c0008b5b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008b5f:	83 c4 10             	add    esp,0x10
c0008b62:	c3                   	ret    
c0008b63:	90                   	nop

c0008b64 <pbuf_ref>:
c0008b64:	83 ec 0c             	sub    esp,0xc
c0008b67:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0008b6c:	74 1e                	je     c0008b8c <pbuf_ref+0x28>
c0008b6e:	e8 11 70 01 00       	call   c001fb84 <CLockScheduler>
c0008b73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b77:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008b7b:	83 c0 01             	add    eax,0x1
c0008b7e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008b82:	66 89 42 0e          	mov    WORD PTR [edx+0xe],ax
c0008b86:	e8 dd 6f 01 00       	call   c001fb68 <CUnlockScheduler>
c0008b8b:	90                   	nop
c0008b8c:	90                   	nop
c0008b8d:	83 c4 0c             	add    esp,0xc
c0008b90:	c3                   	ret    
c0008b91:	8d 76 00             	lea    esi,[esi+0x0]

c0008b94 <pbuf_cat>:
c0008b94:	83 ec 1c             	sub    esp,0x1c
c0008b97:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008b9c:	74 0a                	je     c0008ba8 <pbuf_cat+0x14>
c0008b9e:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008ba3:	75 1f                	jne    c0008bc4 <pbuf_cat+0x30>
c0008ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0008ba8:	83 ec 08             	sub    esp,0x8
c0008bab:	68 1c fd 02 c0       	push   0xc002fd1c
c0008bb0:	68 c6 fa 02 c0       	push   0xc002fac6
c0008bb5:	e8 da 6f 01 00       	call   c001fb94 <CPrintf>
c0008bba:	83 c4 10             	add    esp,0x10
c0008bbd:	e9 ae 00 00 00       	jmp    c0008c70 <pbuf_cat+0xdc>
c0008bc2:	66 90                	xchg   ax,ax
c0008bc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008bc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008bcc:	eb 26                	jmp    c0008bf4 <pbuf_cat+0x60>
c0008bce:	66 90                	xchg   ax,ax
c0008bd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008bd4:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008bd7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008bdb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008bde:	01 d0                	add    eax,edx
c0008be0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008be4:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008be8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008bec:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008bf2:	66 90                	xchg   ax,ax
c0008bf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008bf8:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bfa:	85 c0                	test   eax,eax
c0008bfc:	75 d2                	jne    c0008bd0 <pbuf_cat+0x3c>
c0008bfe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c02:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008c05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c09:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c0d:	0f b7 d2             	movzx  edx,dx
c0008c10:	0f b7 c0             	movzx  eax,ax
c0008c13:	39 c2                	cmp    edx,eax
c0008c15:	74 15                	je     c0008c2c <pbuf_cat+0x98>
c0008c17:	83 ec 08             	sub    esp,0x8
c0008c1a:	68 54 fd 02 c0       	push   0xc002fd54
c0008c1f:	68 c6 fa 02 c0       	push   0xc002fac6
c0008c24:	e8 6b 6f 01 00       	call   c001fb94 <CPrintf>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c30:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c32:	85 c0                	test   eax,eax
c0008c34:	74 16                	je     c0008c4c <pbuf_cat+0xb8>
c0008c36:	83 ec 08             	sub    esp,0x8
c0008c39:	68 60 ff 02 c0       	push   0xc002ff60
c0008c3e:	68 c6 fa 02 c0       	push   0xc002fac6
c0008c43:	e8 4c 6f 01 00       	call   c001fb94 <CPrintf>
c0008c48:	83 c4 10             	add    esp,0x10
c0008c4b:	90                   	nop
c0008c4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c50:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008c53:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008c57:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008c5a:	01 d0                	add    eax,edx
c0008c5c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008c60:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008c64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c68:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008c6c:	89 10                	mov    DWORD PTR [eax],edx
c0008c6e:	66 90                	xchg   ax,ax
c0008c70:	83 c4 1c             	add    esp,0x1c
c0008c73:	c3                   	ret    

c0008c74 <pbuf_chain>:
c0008c74:	83 ec 0c             	sub    esp,0xc
c0008c77:	83 ec 08             	sub    esp,0x8
c0008c7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008c7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008c82:	e8 0d ff ff ff       	call   c0008b94 <pbuf_cat>
c0008c87:	83 c4 10             	add    esp,0x10
c0008c8a:	83 ec 0c             	sub    esp,0xc
c0008c8d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c91:	e8 ce fe ff ff       	call   c0008b64 <pbuf_ref>
c0008c96:	83 c4 10             	add    esp,0x10
c0008c99:	90                   	nop
c0008c9a:	83 c4 0c             	add    esp,0xc
c0008c9d:	c3                   	ret    
c0008c9e:	66 90                	xchg   ax,ax

c0008ca0 <pbuf_dechain>:
c0008ca0:	83 ec 1c             	sub    esp,0x1c
c0008ca3:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0008ca8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cac:	8b 00                	mov    eax,DWORD PTR [eax]
c0008cae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cb2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008cb7:	0f 84 8b 00 00 00    	je     c0008d48 <pbuf_dechain+0xa8>
c0008cbd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008cc1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008cc4:	0f b7 d0             	movzx  edx,ax
c0008cc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ccb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008cce:	0f b7 c8             	movzx  ecx,ax
c0008cd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd5:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008cd9:	0f b7 c0             	movzx  eax,ax
c0008cdc:	29 c1                	sub    ecx,eax
c0008cde:	89 c8                	mov    eax,ecx
c0008ce0:	39 c2                	cmp    edx,eax
c0008ce2:	74 18                	je     c0008cfc <pbuf_dechain+0x5c>
c0008ce4:	83 ec 08             	sub    esp,0x8
c0008ce7:	68 84 fd 02 c0       	push   0xc002fd84
c0008cec:	68 c6 fa 02 c0       	push   0xc002fac6
c0008cf1:	e8 9e 6e 01 00       	call   c001fb94 <CPrintf>
c0008cf6:	83 c4 10             	add    esp,0x10
c0008cf9:	8d 76 00             	lea    esi,[esi+0x0]
c0008cfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d00:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008d03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d07:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008d0b:	89 d1                	mov    ecx,edx
c0008d0d:	29 c1                	sub    ecx,eax
c0008d0f:	89 c8                	mov    eax,ecx
c0008d11:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008d15:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008d19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d1d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008d23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d27:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008d2b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008d2f:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008d33:	83 ec 0c             	sub    esp,0xc
c0008d36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3a:	e8 1d f6 ff ff       	call   c000835c <pbuf_free>
c0008d3f:	83 c4 10             	add    esp,0x10
c0008d42:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008d46:	66 90                	xchg   ax,ax
c0008d48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d4c:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008d4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d53:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008d57:	0f b7 d2             	movzx  edx,dx
c0008d5a:	0f b7 c0             	movzx  eax,ax
c0008d5d:	39 c2                	cmp    edx,eax
c0008d5f:	74 17                	je     c0008d78 <pbuf_dechain+0xd8>
c0008d61:	83 ec 08             	sub    esp,0x8
c0008d64:	68 70 ff 02 c0       	push   0xc002ff70
c0008d69:	68 c6 fa 02 c0       	push   0xc002fac6
c0008d6e:	e8 21 6e 01 00       	call   c001fb94 <CPrintf>
c0008d73:	83 c4 10             	add    esp,0x10
c0008d76:	66 90                	xchg   ax,ax
c0008d78:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0008d7d:	85 c0                	test   eax,eax
c0008d7f:	75 07                	jne    c0008d88 <pbuf_dechain+0xe8>
c0008d81:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008d85:	eb 09                	jmp    c0008d90 <pbuf_dechain+0xf0>
c0008d87:	90                   	nop
c0008d88:	b8 00 00 00 00       	mov    eax,0x0
c0008d8d:	8d 76 00             	lea    esi,[esi+0x0]
c0008d90:	83 c4 1c             	add    esp,0x1c
c0008d93:	c3                   	ret    

c0008d94 <pbuf_copy>:
c0008d94:	53                   	push   ebx
c0008d95:	83 ec 18             	sub    esp,0x18
c0008d98:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0008d9f:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0008da6:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008dab:	74 1f                	je     c0008dcc <pbuf_copy+0x38>
c0008dad:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008db2:	74 18                	je     c0008dcc <pbuf_copy+0x38>
c0008db4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008db8:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008dbb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008dbf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008dc2:	0f b7 d2             	movzx  edx,dx
c0008dc5:	0f b7 c0             	movzx  eax,ax
c0008dc8:	39 c2                	cmp    edx,eax
c0008dca:	73 1c                	jae    c0008de8 <pbuf_copy+0x54>
c0008dcc:	83 ec 08             	sub    esp,0x8
c0008dcf:	68 a8 fd 02 c0       	push   0xc002fda8
c0008dd4:	68 c6 fa 02 c0       	push   0xc002fac6
c0008dd9:	e8 b6 6d 01 00       	call   c001fb94 <CPrintf>
c0008dde:	83 c4 10             	add    esp,0x10
c0008de1:	b0 f2                	mov    al,0xf2
c0008de3:	e9 0c 02 00 00       	jmp    c0008ff4 <pbuf_copy+0x260>
c0008de8:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008ded:	75 15                	jne    c0008e04 <pbuf_copy+0x70>
c0008def:	83 ec 08             	sub    esp,0x8
c0008df2:	68 85 ff 02 c0       	push   0xc002ff85
c0008df7:	68 c6 fa 02 c0       	push   0xc002fac6
c0008dfc:	e8 93 6d 01 00       	call   c001fb94 <CPrintf>
c0008e01:	83 c4 10             	add    esp,0x10
c0008e04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e08:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e0c:	0f b7 d0             	movzx  edx,ax
c0008e0f:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0008e14:	89 d1                	mov    ecx,edx
c0008e16:	29 c1                	sub    ecx,eax
c0008e18:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008e1c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e20:	0f b7 d0             	movzx  edx,ax
c0008e23:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0008e28:	29 c2                	sub    edx,eax
c0008e2a:	89 d0                	mov    eax,edx
c0008e2c:	39 c1                	cmp    ecx,eax
c0008e2e:	7c 1c                	jl     c0008e4c <pbuf_copy+0xb8>
c0008e30:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008e34:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008e38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008e3c:	89 d3                	mov    ebx,edx
c0008e3e:	29 c3                	sub    ebx,eax
c0008e40:	89 d8                	mov    eax,ebx
c0008e42:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008e47:	eb 1b                	jmp    c0008e64 <pbuf_copy+0xd0>
c0008e49:	8d 76 00             	lea    esi,[esi+0x0]
c0008e4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e50:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008e54:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0008e59:	89 d3                	mov    ebx,edx
c0008e5b:	29 c3                	sub    ebx,eax
c0008e5d:	89 d8                	mov    eax,ebx
c0008e5f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008e64:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008e69:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e6d:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0008e70:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008e75:	01 d1                	add    ecx,edx
c0008e77:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008e7b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0008e7e:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0008e83:	01 da                	add    edx,ebx
c0008e85:	83 ec 04             	sub    esp,0x4
c0008e88:	50                   	push   eax
c0008e89:	51                   	push   ecx
c0008e8a:	52                   	push   edx
c0008e8b:	e8 ea 74 ff ff       	call   c000037a <memcpy>
c0008e90:	83 c4 10             	add    esp,0x10
c0008e93:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0008e98:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008e9d:	01 d0                	add    eax,edx
c0008e9f:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0008ea4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008ea8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008ead:	01 d0                	add    eax,edx
c0008eaf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008eb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008eb8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008ebc:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0008ec1:	0f b7 c0             	movzx  eax,ax
c0008ec4:	39 c2                	cmp    edx,eax
c0008ec6:	76 18                	jbe    c0008ee0 <pbuf_copy+0x14c>
c0008ec8:	83 ec 08             	sub    esp,0x8
c0008ecb:	68 92 ff 02 c0       	push   0xc002ff92
c0008ed0:	68 c6 fa 02 c0       	push   0xc002fac6
c0008ed5:	e8 ba 6c 01 00       	call   c001fb94 <CPrintf>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	8d 76 00             	lea    esi,[esi+0x0]
c0008ee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ee4:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008ee8:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0008eed:	0f b7 c0             	movzx  eax,ax
c0008ef0:	39 c2                	cmp    edx,eax
c0008ef2:	75 14                	jne    c0008f08 <pbuf_copy+0x174>
c0008ef4:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0008efb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008eff:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f01:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008f05:	8d 76 00             	lea    esi,[esi+0x0]
c0008f08:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f0c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008f10:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008f15:	0f b7 c0             	movzx  eax,ax
c0008f18:	39 c2                	cmp    edx,eax
c0008f1a:	76 18                	jbe    c0008f34 <pbuf_copy+0x1a0>
c0008f1c:	83 ec 08             	sub    esp,0x8
c0008f1f:	68 a9 ff 02 c0       	push   0xc002ffa9
c0008f24:	68 c6 fa 02 c0       	push   0xc002fac6
c0008f29:	e8 66 6c 01 00       	call   c001fb94 <CPrintf>
c0008f2e:	83 c4 10             	add    esp,0x10
c0008f31:	8d 76 00             	lea    esi,[esi+0x0]
c0008f34:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f38:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008f3c:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008f41:	0f b7 c0             	movzx  eax,ax
c0008f44:	39 c2                	cmp    edx,eax
c0008f46:	72 14                	jb     c0008f5c <pbuf_copy+0x1c8>
c0008f48:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0008f4f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f53:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f55:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008f59:	8d 76 00             	lea    esi,[esi+0x0]
c0008f5c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008f61:	74 3d                	je     c0008fa0 <pbuf_copy+0x20c>
c0008f63:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f67:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008f6b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f6f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008f72:	0f b7 d2             	movzx  edx,dx
c0008f75:	0f b7 c0             	movzx  eax,ax
c0008f78:	39 c2                	cmp    edx,eax
c0008f7a:	75 24                	jne    c0008fa0 <pbuf_copy+0x20c>
c0008f7c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f80:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f82:	85 c0                	test   eax,eax
c0008f84:	74 1a                	je     c0008fa0 <pbuf_copy+0x20c>
c0008f86:	83 ec 08             	sub    esp,0x8
c0008f89:	68 d8 fd 02 c0       	push   0xc002fdd8
c0008f8e:	68 c6 fa 02 c0       	push   0xc002fac6
c0008f93:	e8 fc 6b 01 00       	call   c001fb94 <CPrintf>
c0008f98:	83 c4 10             	add    esp,0x10
c0008f9b:	b0 fa                	mov    al,0xfa
c0008f9d:	eb 55                	jmp    c0008ff4 <pbuf_copy+0x260>
c0008f9f:	90                   	nop
c0008fa0:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008fa5:	74 3d                	je     c0008fe4 <pbuf_copy+0x250>
c0008fa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fab:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008faf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fb3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008fb6:	0f b7 d2             	movzx  edx,dx
c0008fb9:	0f b7 c0             	movzx  eax,ax
c0008fbc:	39 c2                	cmp    edx,eax
c0008fbe:	75 24                	jne    c0008fe4 <pbuf_copy+0x250>
c0008fc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0008fc6:	85 c0                	test   eax,eax
c0008fc8:	74 1a                	je     c0008fe4 <pbuf_copy+0x250>
c0008fca:	83 ec 08             	sub    esp,0x8
c0008fcd:	68 d8 fd 02 c0       	push   0xc002fdd8
c0008fd2:	68 c6 fa 02 c0       	push   0xc002fac6
c0008fd7:	e8 b8 6b 01 00       	call   c001fb94 <CPrintf>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	b0 fa                	mov    al,0xfa
c0008fe1:	eb 11                	jmp    c0008ff4 <pbuf_copy+0x260>
c0008fe3:	90                   	nop
c0008fe4:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008fe9:	0f 85 f9 fd ff ff    	jne    c0008de8 <pbuf_copy+0x54>
c0008fef:	b0 00                	mov    al,0x0
c0008ff1:	8d 76 00             	lea    esi,[esi+0x0]
c0008ff4:	83 c4 18             	add    esp,0x18
c0008ff7:	5b                   	pop    ebx
c0008ff8:	c3                   	ret    
c0008ff9:	8d 76 00             	lea    esi,[esi+0x0]

c0008ffc <pbuf_copy_partial>:
c0008ffc:	53                   	push   ebx
c0008ffd:	83 ec 28             	sub    esp,0x28
c0009000:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009004:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009008:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000900d:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0009012:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0009019:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000901e:	75 20                	jne    c0009040 <pbuf_copy_partial+0x44>
c0009020:	83 ec 08             	sub    esp,0x8
c0009023:	68 04 fe 02 c0       	push   0xc002fe04
c0009028:	68 c6 fa 02 c0       	push   0xc002fac6
c000902d:	e8 62 6b 01 00       	call   c001fb94 <CPrintf>
c0009032:	83 c4 10             	add    esp,0x10
c0009035:	b8 00 00 00 00       	mov    eax,0x0
c000903a:	e9 59 01 00 00       	jmp    c0009198 <pbuf_copy_partial+0x19c>
c000903f:	90                   	nop
c0009040:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009045:	75 21                	jne    c0009068 <pbuf_copy_partial+0x6c>
c0009047:	83 ec 08             	sub    esp,0x8
c000904a:	68 24 fe 02 c0       	push   0xc002fe24
c000904f:	68 c6 fa 02 c0       	push   0xc002fac6
c0009054:	e8 3b 6b 01 00       	call   c001fb94 <CPrintf>
c0009059:	83 c4 10             	add    esp,0x10
c000905c:	b8 00 00 00 00       	mov    eax,0x0
c0009061:	e9 32 01 00 00       	jmp    c0009198 <pbuf_copy_partial+0x19c>
c0009066:	66 90                	xchg   ax,ax
c0009068:	66 c7 44 24 1a 00 00 	mov    WORD PTR [esp+0x1a],0x0
c000906f:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0009074:	74 0a                	je     c0009080 <pbuf_copy_partial+0x84>
c0009076:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000907b:	75 0f                	jne    c000908c <pbuf_copy_partial+0x90>
c000907d:	8d 76 00             	lea    esi,[esi+0x0]
c0009080:	b8 00 00 00 00       	mov    eax,0x0
c0009085:	e9 0e 01 00 00       	jmp    c0009198 <pbuf_copy_partial+0x19c>
c000908a:	66 90                	xchg   ax,ax
c000908c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009090:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009094:	e9 e3 00 00 00       	jmp    c000917c <pbuf_copy_partial+0x180>
c0009099:	8d 76 00             	lea    esi,[esi+0x0]
c000909c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00090a1:	85 c0                	test   eax,eax
c00090a3:	74 33                	je     c00090d8 <pbuf_copy_partial+0xdc>
c00090a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00090a9:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00090ad:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00090b2:	0f b7 c0             	movzx  eax,ax
c00090b5:	39 c2                	cmp    edx,eax
c00090b7:	72 1f                	jb     c00090d8 <pbuf_copy_partial+0xdc>
c00090b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00090bd:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00090c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00090c5:	89 d3                	mov    ebx,edx
c00090c7:	29 c3                	sub    ebx,eax
c00090c9:	89 d8                	mov    eax,ebx
c00090cb:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00090d0:	e9 9b 00 00 00       	jmp    c0009170 <pbuf_copy_partial+0x174>
c00090d5:	8d 76 00             	lea    esi,[esi+0x0]
c00090d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00090dc:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00090e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00090e4:	89 d1                	mov    ecx,edx
c00090e6:	29 c1                	sub    ecx,eax
c00090e8:	89 c8                	mov    eax,ecx
c00090ea:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00090ef:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c00090f4:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00090f9:	39 c2                	cmp    edx,eax
c00090fb:	76 0b                	jbe    c0009108 <pbuf_copy_partial+0x10c>
c00090fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009101:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0009106:	66 90                	xchg   ax,ax
c0009108:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c000910d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009111:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0009114:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0009119:	01 d1                	add    ecx,edx
c000911b:	0f b7 5c 24 1a       	movzx  ebx,WORD PTR [esp+0x1a]
c0009120:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009124:	01 da                	add    edx,ebx
c0009126:	83 ec 04             	sub    esp,0x4
c0009129:	50                   	push   eax
c000912a:	51                   	push   ecx
c000912b:	52                   	push   edx
c000912c:	e8 49 72 ff ff       	call   c000037a <memcpy>
c0009131:	83 c4 10             	add    esp,0x10
c0009134:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009139:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000913d:	01 d0                	add    eax,edx
c000913f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009144:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0009149:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000914d:	01 d0                	add    eax,edx
c000914f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0009154:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009158:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000915c:	89 d3                	mov    ebx,edx
c000915e:	29 c3                	sub    ebx,eax
c0009160:	89 d8                	mov    eax,ebx
c0009162:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009167:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c000916e:	66 90                	xchg   ax,ax
c0009170:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009174:	8b 00                	mov    eax,DWORD PTR [eax]
c0009176:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000917a:	66 90                	xchg   ax,ax
c000917c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009181:	85 c0                	test   eax,eax
c0009183:	74 0b                	je     c0009190 <pbuf_copy_partial+0x194>
c0009185:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000918a:	0f 85 0c ff ff ff    	jne    c000909c <pbuf_copy_partial+0xa0>
c0009190:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0009195:	8d 76 00             	lea    esi,[esi+0x0]
c0009198:	83 c4 28             	add    esp,0x28
c000919b:	5b                   	pop    ebx
c000919c:	c3                   	ret    
c000919d:	8d 76 00             	lea    esi,[esi+0x0]

c00091a0 <pbuf_take>:
c00091a0:	83 ec 2c             	sub    esp,0x2c
c00091a3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00091a7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00091ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00091b0:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00091b5:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00091bc:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00091c1:	75 1d                	jne    c00091e0 <pbuf_take+0x40>
c00091c3:	83 ec 08             	sub    esp,0x8
c00091c6:	68 c4 ff 02 c0       	push   0xc002ffc4
c00091cb:	68 c6 fa 02 c0       	push   0xc002fac6
c00091d0:	e8 bf 69 01 00       	call   c001fb94 <CPrintf>
c00091d5:	83 c4 10             	add    esp,0x10
c00091d8:	b0 00                	mov    al,0x0
c00091da:	e9 3d 01 00 00       	jmp    c000931c <pbuf_take+0x17c>
c00091df:	90                   	nop
c00091e0:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00091e5:	75 1d                	jne    c0009204 <pbuf_take+0x64>
c00091e7:	83 ec 08             	sub    esp,0x8
c00091ea:	68 db ff 02 c0       	push   0xc002ffdb
c00091ef:	68 c6 fa 02 c0       	push   0xc002fac6
c00091f4:	e8 9b 69 01 00       	call   c001fb94 <CPrintf>
c00091f9:	83 c4 10             	add    esp,0x10
c00091fc:	b0 00                	mov    al,0x0
c00091fe:	e9 19 01 00 00       	jmp    c000931c <pbuf_take+0x17c>
c0009203:	90                   	nop
c0009204:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0009209:	74 1d                	je     c0009228 <pbuf_take+0x88>
c000920b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009210:	74 16                	je     c0009228 <pbuf_take+0x88>
c0009212:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009216:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009219:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000921e:	0f b7 c0             	movzx  eax,ax
c0009221:	39 c2                	cmp    edx,eax
c0009223:	76 0b                	jbe    c0009230 <pbuf_take+0x90>
c0009225:	8d 76 00             	lea    esi,[esi+0x0]
c0009228:	b0 f2                	mov    al,0xf2
c000922a:	e9 ed 00 00 00       	jmp    c000931c <pbuf_take+0x17c>
c000922f:	90                   	nop
c0009230:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009234:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009238:	e9 9f 00 00 00       	jmp    c00092dc <pbuf_take+0x13c>
c000923d:	8d 76 00             	lea    esi,[esi+0x0]
c0009240:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009245:	75 15                	jne    c000925c <pbuf_take+0xbc>
c0009247:	83 ec 08             	sub    esp,0x8
c000924a:	68 f6 ff 02 c0       	push   0xc002fff6
c000924f:	68 c6 fa 02 c0       	push   0xc002fac6
c0009254:	e8 3b 69 01 00       	call   c001fb94 <CPrintf>
c0009259:	83 c4 10             	add    esp,0x10
c000925c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009260:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0009265:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009269:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000926d:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0009272:	0f b7 c0             	movzx  eax,ax
c0009275:	39 c2                	cmp    edx,eax
c0009277:	76 0f                	jbe    c0009288 <pbuf_take+0xe8>
c0009279:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000927d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009281:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0009286:	66 90                	xchg   ax,ax
c0009288:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c000928d:	0f b7 4c 24 16       	movzx  ecx,WORD PTR [esp+0x16]
c0009292:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009296:	01 c1                	add    ecx,eax
c0009298:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000929c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000929f:	83 ec 04             	sub    esp,0x4
c00092a2:	52                   	push   edx
c00092a3:	51                   	push   ecx
c00092a4:	50                   	push   eax
c00092a5:	e8 d0 70 ff ff       	call   c000037a <memcpy>
c00092aa:	83 c4 10             	add    esp,0x10
c00092ad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00092b1:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00092b6:	89 d1                	mov    ecx,edx
c00092b8:	29 c1                	sub    ecx,eax
c00092ba:	89 c8                	mov    eax,ecx
c00092bc:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00092c1:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00092c6:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00092cb:	01 d0                	add    eax,edx
c00092cd:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00092d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00092d8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00092dc:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00092e1:	85 c0                	test   eax,eax
c00092e3:	0f 85 57 ff ff ff    	jne    c0009240 <pbuf_take+0xa0>
c00092e9:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00092ee:	85 c0                	test   eax,eax
c00092f0:	75 0e                	jne    c0009300 <pbuf_take+0x160>
c00092f2:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c00092f7:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00092fc:	39 c2                	cmp    edx,eax
c00092fe:	74 18                	je     c0009318 <pbuf_take+0x178>
c0009300:	83 ec 08             	sub    esp,0x8
c0009303:	68 0e 00 03 c0       	push   0xc003000e
c0009308:	68 c6 fa 02 c0       	push   0xc002fac6
c000930d:	e8 82 68 01 00       	call   c001fb94 <CPrintf>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	8d 76 00             	lea    esi,[esi+0x0]
c0009318:	b0 00                	mov    al,0x0
c000931a:	66 90                	xchg   ax,ax
c000931c:	83 c4 2c             	add    esp,0x2c
c000931f:	c3                   	ret    

c0009320 <pbuf_coalesce>:
c0009320:	83 ec 1c             	sub    esp,0x1c
c0009323:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009327:	8b 00                	mov    eax,DWORD PTR [eax]
c0009329:	85 c0                	test   eax,eax
c000932b:	75 07                	jne    c0009334 <pbuf_coalesce+0x14>
c000932d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009331:	eb 7d                	jmp    c00093b0 <pbuf_coalesce+0x90>
c0009333:	90                   	nop
c0009334:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009338:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000933b:	0f b7 c0             	movzx  eax,ax
c000933e:	83 ec 04             	sub    esp,0x4
c0009341:	6a 00                	push   0x0
c0009343:	50                   	push   eax
c0009344:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009348:	e8 e7 f1 ff ff       	call   c0008534 <pbuf_alloc>
c000934d:	83 c4 10             	add    esp,0x10
c0009350:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009354:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009359:	75 09                	jne    c0009364 <pbuf_coalesce+0x44>
c000935b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000935f:	eb 4f                	jmp    c00093b0 <pbuf_coalesce+0x90>
c0009361:	8d 76 00             	lea    esi,[esi+0x0]
c0009364:	83 ec 08             	sub    esp,0x8
c0009367:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000936b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000936f:	e8 20 fa ff ff       	call   c0008d94 <pbuf_copy>
c0009374:	83 c4 10             	add    esp,0x10
c0009377:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000937b:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c0009380:	85 c0                	test   eax,eax
c0009382:	74 18                	je     c000939c <pbuf_coalesce+0x7c>
c0009384:	83 ec 08             	sub    esp,0x8
c0009387:	68 24 00 03 c0       	push   0xc0030024
c000938c:	68 c6 fa 02 c0       	push   0xc002fac6
c0009391:	e8 fe 67 01 00       	call   c001fb94 <CPrintf>
c0009396:	83 c4 10             	add    esp,0x10
c0009399:	8d 76 00             	lea    esi,[esi+0x0]
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00093a3:	e8 b4 ef ff ff       	call   c000835c <pbuf_free>
c00093a8:	83 c4 10             	add    esp,0x10
c00093ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093af:	90                   	nop
c00093b0:	83 c4 1c             	add    esp,0x1c
c00093b3:	c3                   	ret    

c00093b4 <pbuf_get_at>:
c00093b4:	83 ec 14             	sub    esp,0x14
c00093b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00093bb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00093bf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00093c2:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00093c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00093cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00093cf:	eb 27                	jmp    c00093f8 <pbuf_get_at+0x44>
c00093d1:	8d 76 00             	lea    esi,[esi+0x0]
c00093d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093d8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00093dc:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c00093e1:	89 d1                	mov    ecx,edx
c00093e3:	29 c1                	sub    ecx,eax
c00093e5:	89 c8                	mov    eax,ecx
c00093e7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00093ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00093f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00093f6:	66 90                	xchg   ax,ax
c00093f8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00093fd:	74 15                	je     c0009414 <pbuf_get_at+0x60>
c00093ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009403:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009407:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c000940c:	0f b7 c0             	movzx  eax,ax
c000940f:	39 c2                	cmp    edx,eax
c0009411:	73 c1                	jae    c00093d4 <pbuf_get_at+0x20>
c0009413:	90                   	nop
c0009414:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009419:	74 29                	je     c0009444 <pbuf_get_at+0x90>
c000941b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000941f:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009423:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c0009428:	0f b7 c0             	movzx  eax,ax
c000942b:	39 c2                	cmp    edx,eax
c000942d:	73 15                	jae    c0009444 <pbuf_get_at+0x90>
c000942f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009433:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009436:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000943b:	01 d0                	add    eax,edx
c000943d:	8a 00                	mov    al,BYTE PTR [eax]
c000943f:	eb 07                	jmp    c0009448 <pbuf_get_at+0x94>
c0009441:	8d 76 00             	lea    esi,[esi+0x0]
c0009444:	b0 00                	mov    al,0x0
c0009446:	66 90                	xchg   ax,ax
c0009448:	83 c4 14             	add    esp,0x14
c000944b:	c3                   	ret    

c000944c <pbuf_memcmp>:
c000944c:	83 ec 18             	sub    esp,0x18
c000944f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009453:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009457:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000945c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0009460:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009464:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009469:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000946d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009471:	eb 25                	jmp    c0009498 <pbuf_memcmp+0x4c>
c0009473:	90                   	nop
c0009474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009478:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000947c:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009481:	89 d1                	mov    ecx,edx
c0009483:	29 c1                	sub    ecx,eax
c0009485:	89 c8                	mov    eax,ecx
c0009487:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000948c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009490:	8b 00                	mov    eax,DWORD PTR [eax]
c0009492:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009496:	66 90                	xchg   ax,ax
c0009498:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000949d:	74 15                	je     c00094b4 <pbuf_memcmp+0x68>
c000949f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094a3:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00094a7:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c00094ac:	0f b7 c0             	movzx  eax,ax
c00094af:	39 c2                	cmp    edx,eax
c00094b1:	73 c1                	jae    c0009474 <pbuf_memcmp+0x28>
c00094b3:	90                   	nop
c00094b4:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00094b9:	0f 84 8d 00 00 00    	je     c000954c <pbuf_memcmp+0x100>
c00094bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094c3:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00094c7:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c00094cc:	0f b7 c0             	movzx  eax,ax
c00094cf:	39 c2                	cmp    edx,eax
c00094d1:	73 79                	jae    c000954c <pbuf_memcmp+0x100>
c00094d3:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c00094da:	eb 5c                	jmp    c0009538 <pbuf_memcmp+0xec>
c00094dc:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00094e1:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00094e6:	01 d0                	add    eax,edx
c00094e8:	0f b7 c0             	movzx  eax,ax
c00094eb:	50                   	push   eax
c00094ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094f0:	e8 bf fe ff ff       	call   c00093b4 <pbuf_get_at>
c00094f5:	83 c4 08             	add    esp,0x8
c00094f8:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00094fc:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009501:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009505:	01 d0                	add    eax,edx
c0009507:	8a 00                	mov    al,BYTE PTR [eax]
c0009509:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000950d:	0f b6 54 24 0d       	movzx  edx,BYTE PTR [esp+0xd]
c0009512:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0009517:	39 c2                	cmp    edx,eax
c0009519:	74 0d                	je     c0009528 <pbuf_memcmp+0xdc>
c000951b:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0009520:	83 c0 01             	add    eax,0x1
c0009523:	eb 2f                	jmp    c0009554 <pbuf_memcmp+0x108>
c0009525:	8d 76 00             	lea    esi,[esi+0x0]
c0009528:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000952d:	83 c0 01             	add    eax,0x1
c0009530:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0009535:	8d 76 00             	lea    esi,[esi+0x0]
c0009538:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000953d:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0009541:	39 c2                	cmp    edx,eax
c0009543:	72 97                	jb     c00094dc <pbuf_memcmp+0x90>
c0009545:	b8 00 00 00 00       	mov    eax,0x0
c000954a:	eb 08                	jmp    c0009554 <pbuf_memcmp+0x108>
c000954c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009551:	8d 76 00             	lea    esi,[esi+0x0]
c0009554:	83 c4 18             	add    esp,0x18
c0009557:	c3                   	ret    

c0009558 <pbuf_memfind>:
c0009558:	83 ec 18             	sub    esp,0x18
c000955b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000955f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009563:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0009568:	66 89 04 24          	mov    WORD PTR [esp],ax
c000956c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009570:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0009573:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009577:	89 d1                	mov    ecx,edx
c0009579:	29 c1                	sub    ecx,eax
c000957b:	89 c8                	mov    eax,ecx
c000957d:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0009582:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009586:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009589:	0f b7 c0             	movzx  eax,ax
c000958c:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c0009591:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c0009595:	01 ca                	add    edx,ecx
c0009597:	39 d0                	cmp    eax,edx
c0009599:	7c 65                	jl     c0009600 <pbuf_memfind+0xa8>
c000959b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000959e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00095a3:	eb 4b                	jmp    c00095f0 <pbuf_memfind+0x98>
c00095a5:	8d 76 00             	lea    esi,[esi+0x0]
c00095a8:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c00095ad:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c00095b2:	52                   	push   edx
c00095b3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095b7:	50                   	push   eax
c00095b8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00095bc:	e8 8b fe ff ff       	call   c000944c <pbuf_memcmp>
c00095c1:	83 c4 10             	add    esp,0x10
c00095c4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00095c9:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00095ce:	85 c0                	test   eax,eax
c00095d0:	75 0a                	jne    c00095dc <pbuf_memfind+0x84>
c00095d2:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00095d7:	eb 2f                	jmp    c0009608 <pbuf_memfind+0xb0>
c00095d9:	8d 76 00             	lea    esi,[esi+0x0]
c00095dc:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00095e1:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00095e6:	01 d0                	add    eax,edx
c00095e8:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00095ed:	8d 76 00             	lea    esi,[esi+0x0]
c00095f0:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c00095f5:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00095fa:	39 c2                	cmp    edx,eax
c00095fc:	76 aa                	jbe    c00095a8 <pbuf_memfind+0x50>
c00095fe:	66 90                	xchg   ax,ax
c0009600:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009605:	8d 76 00             	lea    esi,[esi+0x0]
c0009608:	83 c4 18             	add    esp,0x18
c000960b:	c3                   	ret    

c000960c <pbuf_strstr>:
c000960c:	83 ec 1c             	sub    esp,0x1c
c000960f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0009614:	74 1e                	je     c0009634 <pbuf_strstr+0x28>
c0009616:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000961a:	8a 00                	mov    al,BYTE PTR [eax]
c000961c:	0f be c0             	movsx  eax,al
c000961f:	85 c0                	test   eax,eax
c0009621:	74 11                	je     c0009634 <pbuf_strstr+0x28>
c0009623:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009627:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000962a:	0f b7 c0             	movzx  eax,ax
c000962d:	3d ff ff 00 00       	cmp    eax,0xffff
c0009632:	75 08                	jne    c000963c <pbuf_strstr+0x30>
c0009634:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009639:	eb 41                	jmp    c000967c <pbuf_strstr+0x70>
c000963b:	90                   	nop
c000963c:	83 ec 0c             	sub    esp,0xc
c000963f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009643:	e8 28 6f ff ff       	call   c0000570 <strlen>
c0009648:	83 c4 10             	add    esp,0x10
c000964b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000964f:	81 7c 24 0c fe ff 00 00 	cmp    DWORD PTR [esp+0xc],0xfffe
c0009657:	76 07                	jbe    c0009660 <pbuf_strstr+0x54>
c0009659:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000965e:	eb 1c                	jmp    c000967c <pbuf_strstr+0x70>
c0009660:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009664:	0f b7 c0             	movzx  eax,ax
c0009667:	6a 00                	push   0x0
c0009669:	50                   	push   eax
c000966a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000966e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009672:	e8 e1 fe ff ff       	call   c0009558 <pbuf_memfind>
c0009677:	83 c4 10             	add    esp,0x10
c000967a:	66 90                	xchg   ax,ax
c000967c:	83 c4 1c             	add    esp,0x1c
c000967f:	c3                   	ret    

c0009680 <raw_input>:
c0009680:	83 ec 2c             	sub    esp,0x2c
c0009683:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0009688:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000968c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000968f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009697:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000969a:	0f b6 c0             	movzx  eax,al
c000969d:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00096a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00096aa:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c00096af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00096b3:	e9 b8 00 00 00       	jmp    c0009770 <raw_input+0xf0>
c00096b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096bc:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00096bf:	0f b6 d0             	movzx  edx,al
c00096c2:	0f bf 44 24 0e       	movsx  eax,WORD PTR [esp+0xe]
c00096c7:	39 c2                	cmp    edx,eax
c00096c9:	0f 85 8d 00 00 00    	jne    c000975c <raw_input+0xdc>
c00096cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096d3:	85 c0                	test   eax,eax
c00096d5:	74 19                	je     c00096f0 <raw_input+0x70>
c00096d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096db:	8b 00                	mov    eax,DWORD PTR [eax]
c00096dd:	85 c0                	test   eax,eax
c00096df:	74 0f                	je     c00096f0 <raw_input+0x70>
c00096e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096e5:	8b 10                	mov    edx,DWORD PTR [eax]
c00096e7:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c00096ec:	39 c2                	cmp    edx,eax
c00096ee:	75 6c                	jne    c000975c <raw_input+0xdc>
c00096f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096f4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00096f7:	85 c0                	test   eax,eax
c00096f9:	74 61                	je     c000975c <raw_input+0xdc>
c00096fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096ff:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0009702:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009706:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c0009709:	68 90 68 03 c0       	push   0xc0036890
c000970e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009716:	52                   	push   edx
c0009717:	ff d0                	call   eax
c0009719:	83 c4 10             	add    esp,0x10
c000971c:	0f b6 c0             	movzx  eax,al
c000971f:	85 c0                	test   eax,eax
c0009721:	74 39                	je     c000975c <raw_input+0xdc>
c0009723:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000972b:	c6 44 24 17 01       	mov    BYTE PTR [esp+0x17],0x1
c0009730:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0009735:	74 25                	je     c000975c <raw_input+0xdc>
c0009737:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000973b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000973e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009742:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009745:	8b 15 9c a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a89c
c000974b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000974f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009752:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009756:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c000975b:	90                   	nop
c000975c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009760:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009764:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009768:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000976b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000976f:	90                   	nop
c0009770:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0009775:	85 c0                	test   eax,eax
c0009777:	75 0b                	jne    c0009784 <raw_input+0x104>
c0009779:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000977e:	0f 85 34 ff ff ff    	jne    c00096b8 <raw_input+0x38>
c0009784:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0009788:	83 c4 2c             	add    esp,0x2c
c000978b:	c3                   	ret    

c000978c <raw_bind>:
c000978c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009791:	74 09                	je     c000979c <raw_bind+0x10>
c0009793:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009797:	8b 00                	mov    eax,DWORD PTR [eax]
c0009799:	eb 09                	jmp    c00097a4 <raw_bind+0x18>
c000979b:	90                   	nop
c000979c:	b8 00 00 00 00       	mov    eax,0x0
c00097a1:	8d 76 00             	lea    esi,[esi+0x0]
c00097a4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a8:	89 02                	mov    DWORD PTR [edx],eax
c00097aa:	b0 00                	mov    al,0x0
c00097ac:	c3                   	ret    
c00097ad:	8d 76 00             	lea    esi,[esi+0x0]

c00097b0 <raw_connect>:
c00097b0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00097b5:	74 09                	je     c00097c0 <raw_connect+0x10>
c00097b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00097bd:	eb 09                	jmp    c00097c8 <raw_connect+0x18>
c00097bf:	90                   	nop
c00097c0:	b8 00 00 00 00       	mov    eax,0x0
c00097c5:	8d 76 00             	lea    esi,[esi+0x0]
c00097c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097cc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00097cf:	b0 00                	mov    al,0x0
c00097d1:	c3                   	ret    
c00097d2:	66 90                	xchg   ax,ax

c00097d4 <raw_recv>:
c00097d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00097dc:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00097df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097e7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00097ea:	90                   	nop
c00097eb:	c3                   	ret    

c00097ec <raw_sendto>:
c00097ec:	83 ec 1c             	sub    esp,0x1c
c00097ef:	83 ec 08             	sub    esp,0x8
c00097f2:	6a 14                	push   0x14
c00097f4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00097f8:	e8 c3 e9 ff ff       	call   c00081c0 <pbuf_header>
c00097fd:	83 c4 10             	add    esp,0x10
c0009800:	0f b6 c0             	movzx  eax,al
c0009803:	85 c0                	test   eax,eax
c0009805:	74 49                	je     c0009850 <raw_sendto+0x64>
c0009807:	83 ec 04             	sub    esp,0x4
c000980a:	6a 00                	push   0x0
c000980c:	6a 00                	push   0x0
c000980e:	6a 01                	push   0x1
c0009810:	e8 1f ed ff ff       	call   c0008534 <pbuf_alloc>
c0009815:	83 c4 10             	add    esp,0x10
c0009818:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000981c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009821:	75 09                	jne    c000982c <raw_sendto+0x40>
c0009823:	b0 ff                	mov    al,0xff
c0009825:	e9 2a 01 00 00       	jmp    c0009954 <raw_sendto+0x168>
c000982a:	66 90                	xchg   ax,ax
c000982c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009830:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009833:	0f b7 c0             	movzx  eax,ax
c0009836:	85 c0                	test   eax,eax
c0009838:	74 52                	je     c000988c <raw_sendto+0xa0>
c000983a:	83 ec 08             	sub    esp,0x8
c000983d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009841:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009845:	e8 2a f4 ff ff       	call   c0008c74 <pbuf_chain>
c000984a:	83 c4 10             	add    esp,0x10
c000984d:	eb 3d                	jmp    c000988c <raw_sendto+0xa0>
c000984f:	90                   	nop
c0009850:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009854:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009858:	83 ec 08             	sub    esp,0x8
c000985b:	6a ec                	push   0xffffffec
c000985d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009861:	e8 5a e9 ff ff       	call   c00081c0 <pbuf_header>
c0009866:	83 c4 10             	add    esp,0x10
c0009869:	0f b6 c0             	movzx  eax,al
c000986c:	85 c0                	test   eax,eax
c000986e:	74 1c                	je     c000988c <raw_sendto+0xa0>
c0009870:	83 ec 08             	sub    esp,0x8
c0009873:	68 38 00 03 c0       	push   0xc0030038
c0009878:	68 c6 fa 02 c0       	push   0xc002fac6
c000987d:	e8 12 63 01 00       	call   c001fb94 <CPrintf>
c0009882:	83 c4 10             	add    esp,0x10
c0009885:	b0 ff                	mov    al,0xff
c0009887:	e9 c8 00 00 00       	jmp    c0009954 <raw_sendto+0x168>
c000988c:	83 ec 0c             	sub    esp,0xc
c000988f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009893:	e8 6c 9d 00 00       	call   c0013604 <ip_route>
c0009898:	83 c4 10             	add    esp,0x10
c000989b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000989f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00098a4:	75 22                	jne    c00098c8 <raw_sendto+0xdc>
c00098a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098aa:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c00098ae:	74 10                	je     c00098c0 <raw_sendto+0xd4>
c00098b0:	83 ec 0c             	sub    esp,0xc
c00098b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098b7:	e8 a0 ea ff ff       	call   c000835c <pbuf_free>
c00098bc:	83 c4 10             	add    esp,0x10
c00098bf:	90                   	nop
c00098c0:	b0 fc                	mov    al,0xfc
c00098c2:	e9 8d 00 00 00       	jmp    c0009954 <raw_sendto+0x168>
c00098c7:	90                   	nop
c00098c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00098cc:	85 c0                	test   eax,eax
c00098ce:	74 0c                	je     c00098dc <raw_sendto+0xf0>
c00098d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00098d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00098d6:	85 c0                	test   eax,eax
c00098d8:	75 12                	jne    c00098ec <raw_sendto+0x100>
c00098da:	66 90                	xchg   ax,ax
c00098dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098e0:	83 c0 04             	add    eax,0x4
c00098e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00098e7:	eb 0b                	jmp    c00098f4 <raw_sendto+0x108>
c00098e9:	8d 76 00             	lea    esi,[esi+0x0]
c00098ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00098f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00098f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00098f8:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00098fb:	0f b6 c8             	movzx  ecx,al
c00098fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009902:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0009905:	0f b6 d0             	movzx  edx,al
c0009908:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000990c:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000990f:	0f b6 c0             	movzx  eax,al
c0009912:	83 ec 04             	sub    esp,0x4
c0009915:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009919:	51                   	push   ecx
c000991a:	52                   	push   edx
c000991b:	50                   	push   eax
c000991c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009920:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009924:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009928:	e8 af a1 00 00       	call   c0013adc <ip_output_if>
c000992d:	83 c4 20             	add    esp,0x20
c0009930:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0009934:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009938:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c000993c:	74 12                	je     c0009950 <raw_sendto+0x164>
c000993e:	83 ec 0c             	sub    esp,0xc
c0009941:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009945:	e8 12 ea ff ff       	call   c000835c <pbuf_free>
c000994a:	83 c4 10             	add    esp,0x10
c000994d:	8d 76 00             	lea    esi,[esi+0x0]
c0009950:	8a 44 24 03          	mov    al,BYTE PTR [esp+0x3]
c0009954:	83 c4 1c             	add    esp,0x1c
c0009957:	c3                   	ret    

c0009958 <raw_send>:
c0009958:	83 ec 0c             	sub    esp,0xc
c000995b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000995f:	83 c0 04             	add    eax,0x4
c0009962:	83 ec 04             	sub    esp,0x4
c0009965:	50                   	push   eax
c0009966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000996a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000996e:	e8 79 fe ff ff       	call   c00097ec <raw_sendto>
c0009973:	83 c4 10             	add    esp,0x10
c0009976:	83 c4 0c             	add    esp,0xc
c0009979:	c3                   	ret    
c000997a:	66 90                	xchg   ax,ax

c000997c <raw_remove>:
c000997c:	83 ec 1c             	sub    esp,0x1c
c000997f:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c0009984:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0009988:	75 12                	jne    c000999c <raw_remove+0x20>
c000998a:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c000998f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009992:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c0009997:	eb 4b                	jmp    c00099e4 <raw_remove+0x68>
c0009999:	8d 76 00             	lea    esi,[esi+0x0]
c000999c:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c00099a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099a5:	eb 35                	jmp    c00099dc <raw_remove+0x60>
c00099a7:	90                   	nop
c00099a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099ac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00099af:	85 c0                	test   eax,eax
c00099b1:	74 1d                	je     c00099d0 <raw_remove+0x54>
c00099b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00099ba:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00099be:	75 10                	jne    c00099d0 <raw_remove+0x54>
c00099c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00099c4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00099c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099cb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00099ce:	66 90                	xchg   ax,ax
c00099d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099d4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00099d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099db:	90                   	nop
c00099dc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00099e1:	75 c5                	jne    c00099a8 <raw_remove+0x2c>
c00099e3:	90                   	nop
c00099e4:	83 ec 08             	sub    esp,0x8
c00099e7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00099eb:	6a 00                	push   0x0
c00099ed:	e8 ae e0 ff ff       	call   c0007aa0 <memp_free>
c00099f2:	83 c4 10             	add    esp,0x10
c00099f5:	90                   	nop
c00099f6:	83 c4 1c             	add    esp,0x1c
c00099f9:	c3                   	ret    
c00099fa:	66 90                	xchg   ax,ax

c00099fc <raw_new>:
c00099fc:	83 ec 2c             	sub    esp,0x2c
c00099ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a03:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009a07:	83 ec 0c             	sub    esp,0xc
c0009a0a:	6a 00                	push   0x0
c0009a0c:	e8 63 df ff ff       	call   c0007974 <memp_malloc>
c0009a11:	83 c4 10             	add    esp,0x10
c0009a14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009a18:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009a1d:	74 3d                	je     c0009a5c <raw_new+0x60>
c0009a1f:	83 ec 04             	sub    esp,0x4
c0009a22:	6a 1c                	push   0x1c
c0009a24:	6a 00                	push   0x0
c0009a26:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009a2a:	e8 c1 6a ff ff       	call   c00004f0 <memset>
c0009a2f:	83 c4 10             	add    esp,0x10
c0009a32:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a36:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009a3a:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c0009a3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a41:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c0009a45:	8b 15 9c a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a89c
c0009a4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a4f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009a52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a56:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c0009a5b:	90                   	nop
c0009a5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a60:	83 c4 2c             	add    esp,0x2c
c0009a63:	c3                   	ret    

c0009a64 <stats_init>:
c0009a64:	90                   	nop
c0009a65:	c3                   	ret    
c0009a66:	66 90                	xchg   ax,ax

c0009a68 <sys_msleep>:
c0009a68:	83 ec 1c             	sub    esp,0x1c
c0009a6b:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0009a70:	74 46                	je     c0009ab8 <sys_msleep+0x50>
c0009a72:	83 ec 08             	sub    esp,0x8
c0009a75:	6a 00                	push   0x0
c0009a77:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009a7b:	50                   	push   eax
c0009a7c:	e8 eb 71 ff ff       	call   c0000c6c <sys_sem_new>
c0009a81:	83 c4 10             	add    esp,0x10
c0009a84:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009a88:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0009a8d:	85 c0                	test   eax,eax
c0009a8f:	75 27                	jne    c0009ab8 <sys_msleep+0x50>
c0009a91:	83 ec 08             	sub    esp,0x8
c0009a94:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009a98:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009a9c:	50                   	push   eax
c0009a9d:	e8 22 72 ff ff       	call   c0000cc4 <sys_arch_sem_wait>
c0009aa2:	83 c4 10             	add    esp,0x10
c0009aa5:	83 ec 0c             	sub    esp,0xc
c0009aa8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009aac:	50                   	push   eax
c0009aad:	e8 e2 71 ff ff       	call   c0000c94 <sys_sem_free>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	8d 76 00             	lea    esi,[esi+0x0]
c0009ab8:	90                   	nop
c0009ab9:	83 c4 1c             	add    esp,0x1c
c0009abc:	c3                   	ret    
c0009abd:	66 90                	xchg   ax,ax
c0009abf:	90                   	nop

c0009ac0 <tcp_accept_null>:
c0009ac0:	83 ec 04             	sub    esp,0x4
c0009ac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ac7:	88 04 24             	mov    BYTE PTR [esp],al
c0009aca:	b0 f6                	mov    al,0xf6
c0009acc:	83 c4 04             	add    esp,0x4
c0009acf:	c3                   	ret    

c0009ad0 <tcp_listen_with_backlog>:
c0009ad0:	83 ec 2c             	sub    esp,0x2c
c0009ad3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009ad7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009adb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009adf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009ae2:	85 c0                	test   eax,eax
c0009ae4:	74 22                	je     c0009b08 <tcp_listen_with_backlog+0x38>
c0009ae6:	83 ec 08             	sub    esp,0x8
c0009ae9:	68 60 00 03 c0       	push   0xc0030060
c0009aee:	68 c6 fa 02 c0       	push   0xc002fac6
c0009af3:	e8 9c 60 01 00       	call   c001fb94 <CPrintf>
c0009af8:	83 c4 10             	add    esp,0x10
c0009afb:	b8 00 00 00 00       	mov    eax,0x0
c0009b00:	e9 77 01 00 00       	jmp    c0009c7c <tcp_listen_with_backlog+0x1ac>
c0009b05:	8d 76 00             	lea    esi,[esi+0x0]
c0009b08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b0c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009b0f:	83 f8 01             	cmp    eax,0x1
c0009b12:	75 0c                	jne    c0009b20 <tcp_listen_with_backlog+0x50>
c0009b14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b18:	e9 5f 01 00 00       	jmp    c0009c7c <tcp_listen_with_backlog+0x1ac>
c0009b1d:	8d 76 00             	lea    esi,[esi+0x0]
c0009b20:	83 ec 0c             	sub    esp,0xc
c0009b23:	6a 03                	push   0x3
c0009b25:	e8 4a de ff ff       	call   c0007974 <memp_malloc>
c0009b2a:	83 c4 10             	add    esp,0x10
c0009b2d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b31:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009b36:	75 0c                	jne    c0009b44 <tcp_listen_with_backlog+0x74>
c0009b38:	b8 00 00 00 00       	mov    eax,0x0
c0009b3d:	e9 3a 01 00 00       	jmp    c0009c7c <tcp_listen_with_backlog+0x1ac>
c0009b42:	66 90                	xchg   ax,ax
c0009b44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b48:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0009b4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b4f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0009b52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b56:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009b59:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009b5d:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c0009b61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b65:	c7 40 10 01 00 00 00 	mov    DWORD PTR [eax+0x10],0x1
c0009b6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b70:	8a 50 14             	mov    dl,BYTE PTR [eax+0x14]
c0009b73:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b77:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c0009b7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b7e:	8a 50 08             	mov    dl,BYTE PTR [eax+0x8]
c0009b81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b85:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009b88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b8c:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c0009b8f:	83 c8 02             	or     eax,0x2
c0009b92:	88 c2                	mov    dl,al
c0009b94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b98:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009b9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b9f:	8a 50 0a             	mov    dl,BYTE PTR [eax+0xa]
c0009ba2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ba6:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c0009ba9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bad:	8a 50 09             	mov    dl,BYTE PTR [eax+0x9]
c0009bb0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bb4:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0009bb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bbb:	8b 10                	mov    edx,DWORD PTR [eax]
c0009bbd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bc1:	89 10                	mov    DWORD PTR [eax],edx
c0009bc3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bc7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009bca:	0f b7 c0             	movzx  eax,ax
c0009bcd:	85 c0                	test   eax,eax
c0009bcf:	74 6f                	je     c0009c40 <tcp_listen_with_backlog+0x170>
c0009bd1:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009bd6:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009bda:	75 10                	jne    c0009bec <tcp_listen_with_backlog+0x11c>
c0009bdc:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009be1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009be4:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c0009be9:	eb 49                	jmp    c0009c34 <tcp_listen_with_backlog+0x164>
c0009beb:	90                   	nop
c0009bec:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009bf1:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c0009bf6:	eb 30                	jmp    c0009c28 <tcp_listen_with_backlog+0x158>
c0009bf8:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009bfd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c00:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009c04:	75 12                	jne    c0009c18 <tcp_listen_with_backlog+0x148>
c0009c06:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009c0b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009c0f:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009c12:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009c15:	eb 1d                	jmp    c0009c34 <tcp_listen_with_backlog+0x164>
c0009c17:	90                   	nop
c0009c18:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009c1d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c20:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c0009c25:	8d 76 00             	lea    esi,[esi+0x0]
c0009c28:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009c2d:	85 c0                	test   eax,eax
c0009c2f:	75 c7                	jne    c0009bf8 <tcp_listen_with_backlog+0x128>
c0009c31:	8d 76 00             	lea    esi,[esi+0x0]
c0009c34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c38:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0009c3f:	90                   	nop
c0009c40:	83 ec 08             	sub    esp,0x8
c0009c43:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009c47:	6a 02                	push   0x2
c0009c49:	e8 52 de ff ff       	call   c0007aa0 <memp_free>
c0009c4e:	83 c4 10             	add    esp,0x10
c0009c51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c55:	c7 40 1c c0 9a 00 c0 	mov    DWORD PTR [eax+0x1c],0xc0009ac0
c0009c5c:	8b 15 78 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036878
c0009c62:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c66:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009c69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c6d:	a3 78 68 03 c0       	mov    ds:0xc0036878,eax
c0009c72:	e8 a5 6e 00 00       	call   c0010b1c <tcp_timer_needed>
c0009c77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c7b:	90                   	nop
c0009c7c:	83 c4 2c             	add    esp,0x2c
c0009c7f:	c3                   	ret    

c0009c80 <tcp_update_rcv_ann_wnd>:
c0009c80:	83 ec 1c             	sub    esp,0x1c
c0009c83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c87:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009c8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c8e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009c91:	0f b7 c0             	movzx  eax,ax
c0009c94:	01 d0                	add    eax,edx
c0009c96:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c9e:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009ca1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ca5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009ca8:	0f b7 c8             	movzx  ecx,ax
c0009cab:	81 f9 30 04 00 00    	cmp    ecx,0x430
c0009cb1:	76 05                	jbe    c0009cb8 <tcp_update_rcv_ann_wnd+0x38>
c0009cb3:	b8 30 04 00 00       	mov    eax,0x430
c0009cb8:	0f b7 c0             	movzx  eax,ax
c0009cbb:	01 c2                	add    edx,eax
c0009cbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009cc1:	29 d0                	sub    eax,edx
c0009cc3:	78 23                	js     c0009ce8 <tcp_update_rcv_ann_wnd+0x68>
c0009cc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009cc9:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009ccc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009cd0:	66 89 42 2e          	mov    WORD PTR [edx+0x2e],ax
c0009cd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009cd8:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009cdb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009cdf:	29 c2                	sub    edx,eax
c0009ce1:	89 d0                	mov    eax,edx
c0009ce3:	eb 73                	jmp    c0009d58 <tcp_update_rcv_ann_wnd+0xd8>
c0009ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0009ce8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009cec:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009cef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009cf3:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009cf6:	29 c2                	sub    edx,eax
c0009cf8:	89 d0                	mov    eax,edx
c0009cfa:	85 c0                	test   eax,eax
c0009cfc:	7e 0e                	jle    c0009d0c <tcp_update_rcv_ann_wnd+0x8c>
c0009cfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009d02:	66 c7 40 2e 00 00    	mov    WORD PTR [eax+0x2e],0x0
c0009d08:	eb 46                	jmp    c0009d50 <tcp_update_rcv_ann_wnd+0xd0>
c0009d0a:	66 90                	xchg   ax,ax
c0009d0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009d10:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009d13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009d17:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0009d1a:	29 c2                	sub    edx,eax
c0009d1c:	89 d0                	mov    eax,edx
c0009d1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009d22:	81 7c 24 08 ff ff 00 00 	cmp    DWORD PTR [esp+0x8],0xffff
c0009d2a:	76 18                	jbe    c0009d44 <tcp_update_rcv_ann_wnd+0xc4>
c0009d2c:	83 ec 08             	sub    esp,0x8
c0009d2f:	68 94 02 03 c0       	push   0xc0030294
c0009d34:	68 c6 fa 02 c0       	push   0xc002fac6
c0009d39:	e8 56 5e 01 00       	call   c001fb94 <CPrintf>
c0009d3e:	83 c4 10             	add    esp,0x10
c0009d41:	8d 76 00             	lea    esi,[esi+0x0]
c0009d44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009d48:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009d4c:	66 89 42 2e          	mov    WORD PTR [edx+0x2e],ax
c0009d50:	b8 00 00 00 00       	mov    eax,0x0
c0009d55:	8d 76 00             	lea    esi,[esi+0x0]
c0009d58:	83 c4 1c             	add    esp,0x1c
c0009d5b:	c3                   	ret    

c0009d5c <tcp_recved>:
c0009d5c:	83 ec 2c             	sub    esp,0x2c
c0009d5f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d63:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009d68:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009d6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d71:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009d74:	0f b7 c0             	movzx  eax,ax
c0009d77:	b9 ff ff 00 00       	mov    ecx,0xffff
c0009d7c:	29 c1                	sub    ecx,eax
c0009d7e:	89 c8                	mov    eax,ecx
c0009d80:	39 c2                	cmp    edx,eax
c0009d82:	7e 18                	jle    c0009d9c <tcp_recved+0x40>
c0009d84:	83 ec 08             	sub    esp,0x8
c0009d87:	68 84 00 03 c0       	push   0xc0030084
c0009d8c:	68 c6 fa 02 c0       	push   0xc002fac6
c0009d91:	e8 fe 5d 01 00       	call   c001fb94 <CPrintf>
c0009d96:	83 c4 10             	add    esp,0x10
c0009d99:	8d 76 00             	lea    esi,[esi+0x0]
c0009d9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009da0:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009da3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009da7:	01 d0                	add    eax,edx
c0009da9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009dad:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c0009db1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009db5:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009db8:	0f b7 c0             	movzx  eax,ax
c0009dbb:	3d 60 08 00 00       	cmp    eax,0x860
c0009dc0:	76 0a                	jbe    c0009dcc <tcp_recved+0x70>
c0009dc2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dc6:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c0009dcc:	83 ec 0c             	sub    esp,0xc
c0009dcf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dd3:	e8 a8 fe ff ff       	call   c0009c80 <tcp_update_rcv_ann_wnd>
c0009dd8:	83 c4 10             	add    esp,0x10
c0009ddb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ddf:	81 7c 24 1c 17 02 00 00 	cmp    DWORD PTR [esp+0x1c],0x217
c0009de7:	7e 23                	jle    c0009e0c <tcp_recved+0xb0>
c0009de9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ded:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0009df0:	83 c8 02             	or     eax,0x2
c0009df3:	88 c2                	mov    dl,al
c0009df5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009df9:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0009dfc:	83 ec 0c             	sub    esp,0xc
c0009dff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009e03:	e8 84 60 00 00       	call   c000fe8c <tcp_output>
c0009e08:	83 c4 10             	add    esp,0x10
c0009e0b:	90                   	nop
c0009e0c:	90                   	nop
c0009e0d:	83 c4 2c             	add    esp,0x2c
c0009e10:	c3                   	ret    
c0009e11:	8d 76 00             	lea    esi,[esi+0x0]

c0009e14 <tcp_new_port>:
c0009e14:	83 ec 10             	sub    esp,0x10
c0009e17:	90                   	nop
c0009e18:	66 a1 80 3b 03 c0    	mov    ax,ds:0xc0033b80
c0009e1e:	8d 50 01             	lea    edx,[eax+0x1]
c0009e21:	66 89 15 80 3b 03 c0 	mov    WORD PTR ds:0xc0033b80,dx
c0009e28:	0f b7 c0             	movzx  eax,ax
c0009e2b:	3d ff ff 00 00       	cmp    eax,0xffff
c0009e30:	75 0a                	jne    c0009e3c <tcp_new_port+0x28>
c0009e32:	66 c7 05 80 3b 03 c0 00 c0 	mov    WORD PTR ds:0xc0033b80,0xc000
c0009e3b:	90                   	nop
c0009e3c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009e44:	eb 4a                	jmp    c0009e90 <tcp_new_port+0x7c>
c0009e46:	66 90                	xchg   ax,ax
c0009e48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e4c:	8b 04 85 a0 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfc60]
c0009e53:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e55:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e59:	eb 29                	jmp    c0009e84 <tcp_new_port+0x70>
c0009e5b:	90                   	nop
c0009e5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009e60:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0009e63:	66 a1 80 3b 03 c0    	mov    ax,ds:0xc0033b80
c0009e69:	0f b7 d2             	movzx  edx,dx
c0009e6c:	0f b7 c0             	movzx  eax,ax
c0009e6f:	39 c2                	cmp    edx,eax
c0009e71:	75 05                	jne    c0009e78 <tcp_new_port+0x64>
c0009e73:	eb a3                	jmp    c0009e18 <tcp_new_port+0x4>
c0009e75:	8d 76 00             	lea    esi,[esi+0x0]
c0009e78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009e7c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e83:	90                   	nop
c0009e84:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009e89:	75 d1                	jne    c0009e5c <tcp_new_port+0x48>
c0009e8b:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0009e90:	83 7c 24 0c 03       	cmp    DWORD PTR [esp+0xc],0x3
c0009e95:	7e b1                	jle    c0009e48 <tcp_new_port+0x34>
c0009e97:	66 a1 80 3b 03 c0    	mov    ax,ds:0xc0033b80
c0009e9d:	83 c4 10             	add    esp,0x10
c0009ea0:	c3                   	ret    
c0009ea1:	8d 76 00             	lea    esi,[esi+0x0]

c0009ea4 <tcp_bind>:
c0009ea4:	83 ec 2c             	sub    esp,0x2c
c0009ea7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eab:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009eb0:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0009eb8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ebc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009ebf:	85 c0                	test   eax,eax
c0009ec1:	74 1d                	je     c0009ee0 <tcp_bind+0x3c>
c0009ec3:	83 ec 08             	sub    esp,0x8
c0009ec6:	68 a8 00 03 c0       	push   0xc00300a8
c0009ecb:	68 c6 fa 02 c0       	push   0xc002fac6
c0009ed0:	e8 bf 5c 01 00       	call   c001fb94 <CPrintf>
c0009ed5:	83 c4 10             	add    esp,0x10
c0009ed8:	b0 fa                	mov    al,0xfa
c0009eda:	e9 f1 00 00 00       	jmp    c0009fd0 <tcp_bind+0x12c>
c0009edf:	90                   	nop
c0009ee0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009ee5:	85 c0                	test   eax,eax
c0009ee7:	75 0b                	jne    c0009ef4 <tcp_bind+0x50>
c0009ee9:	e8 26 ff ff ff       	call   c0009e14 <tcp_new_port>
c0009eee:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009ef3:	90                   	nop
c0009ef4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009efc:	eb 7a                	jmp    c0009f78 <tcp_bind+0xd4>
c0009efe:	66 90                	xchg   ax,ax
c0009f00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009f04:	8b 04 85 a0 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfc60]
c0009f0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f11:	eb 59                	jmp    c0009f6c <tcp_bind+0xc8>
c0009f13:	90                   	nop
c0009f14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f18:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009f1b:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009f20:	0f b7 c0             	movzx  eax,ax
c0009f23:	39 c2                	cmp    edx,eax
c0009f25:	75 39                	jne    c0009f60 <tcp_bind+0xbc>
c0009f27:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f2b:	85 c0                	test   eax,eax
c0009f2d:	74 2d                	je     c0009f5c <tcp_bind+0xb8>
c0009f2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f33:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f35:	85 c0                	test   eax,eax
c0009f37:	74 23                	je     c0009f5c <tcp_bind+0xb8>
c0009f39:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009f3e:	74 1c                	je     c0009f5c <tcp_bind+0xb8>
c0009f40:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f44:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f46:	85 c0                	test   eax,eax
c0009f48:	74 12                	je     c0009f5c <tcp_bind+0xb8>
c0009f4a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009f50:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f54:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f56:	39 c2                	cmp    edx,eax
c0009f58:	75 06                	jne    c0009f60 <tcp_bind+0xbc>
c0009f5a:	66 90                	xchg   ax,ax
c0009f5c:	b0 f8                	mov    al,0xf8
c0009f5e:	eb 70                	jmp    c0009fd0 <tcp_bind+0x12c>
c0009f60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f64:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f6b:	90                   	nop
c0009f6c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0009f71:	75 a1                	jne    c0009f14 <tcp_bind+0x70>
c0009f73:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009f78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009f7c:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c0009f80:	0f 8c 7a ff ff ff    	jl     c0009f00 <tcp_bind+0x5c>
c0009f86:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009f8b:	74 17                	je     c0009fa4 <tcp_bind+0x100>
c0009f8d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f91:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f93:	85 c0                	test   eax,eax
c0009f95:	74 0d                	je     c0009fa4 <tcp_bind+0x100>
c0009f97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f9b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f9f:	8b 12                	mov    edx,DWORD PTR [edx]
c0009fa1:	89 10                	mov    DWORD PTR [eax],edx
c0009fa3:	90                   	nop
c0009fa4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009fa8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009fac:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c0009fb0:	8b 15 80 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036880
c0009fb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fba:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009fbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fc1:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c0009fc6:	e8 51 6b 00 00       	call   c0010b1c <tcp_timer_needed>
c0009fcb:	b0 00                	mov    al,0x0
c0009fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0009fd0:	83 c4 2c             	add    esp,0x2c
c0009fd3:	c3                   	ret    

c0009fd4 <tcp_seg_free>:
c0009fd4:	83 ec 0c             	sub    esp,0xc
c0009fd7:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0009fdc:	74 32                	je     c000a010 <tcp_seg_free+0x3c>
c0009fde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fe2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009fe5:	85 c0                	test   eax,eax
c0009fe7:	74 13                	je     c0009ffc <tcp_seg_free+0x28>
c0009fe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009ff0:	83 ec 0c             	sub    esp,0xc
c0009ff3:	50                   	push   eax
c0009ff4:	e8 63 e3 ff ff       	call   c000835c <pbuf_free>
c0009ff9:	83 c4 10             	add    esp,0x10
c0009ffc:	83 ec 08             	sub    esp,0x8
c0009fff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a003:	6a 04                	push   0x4
c000a005:	e8 96 da ff ff       	call   c0007aa0 <memp_free>
c000a00a:	83 c4 10             	add    esp,0x10
c000a00d:	8d 76 00             	lea    esi,[esi+0x0]
c000a010:	90                   	nop
c000a011:	83 c4 0c             	add    esp,0xc
c000a014:	c3                   	ret    
c000a015:	8d 76 00             	lea    esi,[esi+0x0]

c000a018 <tcp_segs_free>:
c000a018:	83 ec 1c             	sub    esp,0x1c
c000a01b:	eb 27                	jmp    c000a044 <tcp_segs_free+0x2c>
c000a01d:	8d 76 00             	lea    esi,[esi+0x0]
c000a020:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a024:	8b 00                	mov    eax,DWORD PTR [eax]
c000a026:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a02a:	83 ec 0c             	sub    esp,0xc
c000a02d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a031:	e8 9e ff ff ff       	call   c0009fd4 <tcp_seg_free>
c000a036:	83 c4 10             	add    esp,0x10
c000a039:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a03d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a041:	8d 76 00             	lea    esi,[esi+0x0]
c000a044:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000a049:	75 d5                	jne    c000a020 <tcp_segs_free+0x8>
c000a04b:	90                   	nop
c000a04c:	83 c4 1c             	add    esp,0x1c
c000a04f:	c3                   	ret    

c000a050 <tcp_setprio>:
c000a050:	83 ec 04             	sub    esp,0x4
c000a053:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a057:	88 04 24             	mov    BYTE PTR [esp],al
c000a05a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a05e:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000a061:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c000a064:	90                   	nop
c000a065:	83 c4 04             	add    esp,0x4
c000a068:	c3                   	ret    
c000a069:	8d 76 00             	lea    esi,[esi+0x0]

c000a06c <tcp_seg_copy>:
c000a06c:	83 ec 1c             	sub    esp,0x1c
c000a06f:	83 ec 0c             	sub    esp,0xc
c000a072:	6a 04                	push   0x4
c000a074:	e8 fb d8 ff ff       	call   c0007974 <memp_malloc>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a080:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a085:	75 09                	jne    c000a090 <tcp_seg_copy+0x24>
c000a087:	b8 00 00 00 00       	mov    eax,0x0
c000a08c:	eb 2e                	jmp    c000a0bc <tcp_seg_copy+0x50>
c000a08e:	66 90                	xchg   ax,ax
c000a090:	83 ec 04             	sub    esp,0x4
c000a093:	6a 10                	push   0x10
c000a095:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a099:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a09d:	e8 d8 62 ff ff       	call   c000037a <memcpy>
c000a0a2:	83 c4 10             	add    esp,0x10
c000a0a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a0a9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a0ac:	83 ec 0c             	sub    esp,0xc
c000a0af:	50                   	push   eax
c000a0b0:	e8 af ea ff ff       	call   c0008b64 <pbuf_ref>
c000a0b5:	83 c4 10             	add    esp,0x10
c000a0b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a0bc:	83 c4 1c             	add    esp,0x1c
c000a0bf:	c3                   	ret    

c000a0c0 <tcp_arg>:
c000a0c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a0c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a0c8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a0cb:	90                   	nop
c000a0cc:	c3                   	ret    
c000a0cd:	8d 76 00             	lea    esi,[esi+0x0]

c000a0d0 <tcp_recv>:
c000a0d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a0d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a0d8:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
c000a0de:	90                   	nop
c000a0df:	c3                   	ret    

c000a0e0 <tcp_sent>:
c000a0e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a0e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a0e8:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
c000a0ee:	90                   	nop
c000a0ef:	c3                   	ret    

c000a0f0 <tcp_err>:
c000a0f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a0f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a0f8:	89 90 98 00 00 00    	mov    DWORD PTR [eax+0x98],edx
c000a0fe:	90                   	nop
c000a0ff:	c3                   	ret    

c000a100 <tcp_accept>:
c000a100:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a104:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a108:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000a10b:	90                   	nop
c000a10c:	c3                   	ret    
c000a10d:	8d 76 00             	lea    esi,[esi+0x0]

c000a110 <tcp_poll>:
c000a110:	83 ec 04             	sub    esp,0x4
c000a113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a117:	88 04 24             	mov    BYTE PTR [esp],al
c000a11a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a11e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a122:	89 90 94 00 00 00    	mov    DWORD PTR [eax+0x94],edx
c000a128:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a12c:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000a12f:	88 50 39             	mov    BYTE PTR [eax+0x39],dl
c000a132:	90                   	nop
c000a133:	83 c4 04             	add    esp,0x4
c000a136:	c3                   	ret    
c000a137:	90                   	nop

c000a138 <tcp_pcb_purge>:
c000a138:	83 ec 0c             	sub    esp,0xc
c000a13b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a13f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a142:	85 c0                	test   eax,eax
c000a144:	0f 84 ca 00 00 00    	je     c000a214 <tcp_pcb_purge+0xdc>
c000a14a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a14e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a151:	83 f8 0a             	cmp    eax,0xa
c000a154:	0f 84 ba 00 00 00    	je     c000a214 <tcp_pcb_purge+0xdc>
c000a15a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a15e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a161:	83 f8 01             	cmp    eax,0x1
c000a164:	0f 84 aa 00 00 00    	je     c000a214 <tcp_pcb_purge+0xdc>
c000a16a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a16e:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a174:	85 c0                	test   eax,eax
c000a176:	74 24                	je     c000a19c <tcp_pcb_purge+0x64>
c000a178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a17c:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a182:	83 ec 0c             	sub    esp,0xc
c000a185:	50                   	push   eax
c000a186:	e8 d1 e1 ff ff       	call   c000835c <pbuf_free>
c000a18b:	83 c4 10             	add    esp,0x10
c000a18e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a192:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000a19c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1a0:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a1a6:	83 ec 0c             	sub    esp,0xc
c000a1a9:	50                   	push   eax
c000a1aa:	e8 69 fe ff ff       	call   c000a018 <tcp_segs_free>
c000a1af:	83 c4 10             	add    esp,0x10
c000a1b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1b6:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a1c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1c4:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000a1ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1ce:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000a1d1:	83 ec 0c             	sub    esp,0xc
c000a1d4:	50                   	push   eax
c000a1d5:	e8 3e fe ff ff       	call   c000a018 <tcp_segs_free>
c000a1da:	83 c4 10             	add    esp,0x10
c000a1dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1e1:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a1e4:	83 ec 0c             	sub    esp,0xc
c000a1e7:	50                   	push   eax
c000a1e8:	e8 2b fe ff ff       	call   c000a018 <tcp_segs_free>
c000a1ed:	83 c4 10             	add    esp,0x10
c000a1f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1f4:	c7 40 78 00 00 00 00 	mov    DWORD PTR [eax+0x78],0x0
c000a1fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1ff:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c000a202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a206:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000a209:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a20d:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000a213:	90                   	nop
c000a214:	90                   	nop
c000a215:	83 c4 0c             	add    esp,0xc
c000a218:	c3                   	ret    
c000a219:	8d 76 00             	lea    esi,[esi+0x0]

c000a21c <tcp_slowtmr>:
c000a21c:	57                   	push   edi
c000a21d:	56                   	push   esi
c000a21e:	53                   	push   ebx
c000a21f:	83 ec 20             	sub    esp,0x20
c000a222:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a227:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000a22c:	83 c0 01             	add    eax,0x1
c000a22f:	a3 74 68 03 c0       	mov    ds:0xc0036874,eax
c000a234:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a23c:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a241:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a245:	e9 16 06 00 00       	jmp    c000a860 <tcp_slowtmr+0x644>
c000a24a:	66 90                	xchg   ax,ax
c000a24c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a250:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a253:	85 c0                	test   eax,eax
c000a255:	75 15                	jne    c000a26c <tcp_slowtmr+0x50>
c000a257:	83 ec 08             	sub    esp,0x8
c000a25a:	68 d0 00 03 c0       	push   0xc00300d0
c000a25f:	68 c6 fa 02 c0       	push   0xc002fac6
c000a264:	e8 2b 59 01 00       	call   c001fb94 <CPrintf>
c000a269:	83 c4 10             	add    esp,0x10
c000a26c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a270:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a273:	83 f8 01             	cmp    eax,0x1
c000a276:	75 18                	jne    c000a290 <tcp_slowtmr+0x74>
c000a278:	83 ec 08             	sub    esp,0x8
c000a27b:	68 fc 00 03 c0       	push   0xc00300fc
c000a280:	68 c6 fa 02 c0       	push   0xc002fac6
c000a285:	e8 0a 59 01 00       	call   c001fb94 <CPrintf>
c000a28a:	83 c4 10             	add    esp,0x10
c000a28d:	8d 76 00             	lea    esi,[esi+0x0]
c000a290:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a294:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a297:	83 f8 0a             	cmp    eax,0xa
c000a29a:	75 18                	jne    c000a2b4 <tcp_slowtmr+0x98>
c000a29c:	83 ec 08             	sub    esp,0x8
c000a29f:	68 28 01 03 c0       	push   0xc0030128
c000a2a4:	68 c6 fa 02 c0       	push   0xc002fac6
c000a2a9:	e8 e6 58 01 00       	call   c001fb94 <CPrintf>
c000a2ae:	83 c4 10             	add    esp,0x10
c000a2b1:	8d 76 00             	lea    esi,[esi+0x0]
c000a2b4:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a2b9:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000a2be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2c2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a2c5:	83 f8 02             	cmp    eax,0x2
c000a2c8:	75 22                	jne    c000a2ec <tcp_slowtmr+0xd0>
c000a2ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2ce:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a2d1:	0f b6 c0             	movzx  eax,al
c000a2d4:	83 f8 06             	cmp    eax,0x6
c000a2d7:	75 13                	jne    c000a2ec <tcp_slowtmr+0xd0>
c000a2d9:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a2dd:	83 c0 01             	add    eax,0x1
c000a2e0:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a2e4:	e9 df 01 00 00       	jmp    c000a4c8 <tcp_slowtmr+0x2ac>
c000a2e9:	8d 76 00             	lea    esi,[esi+0x0]
c000a2ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2f0:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a2f3:	0f b6 c0             	movzx  eax,al
c000a2f6:	83 f8 0c             	cmp    eax,0xc
c000a2f9:	75 11                	jne    c000a30c <tcp_slowtmr+0xf0>
c000a2fb:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a2ff:	83 c0 01             	add    eax,0x1
c000a302:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a306:	e9 bd 01 00 00       	jmp    c000a4c8 <tcp_slowtmr+0x2ac>
c000a30b:	90                   	nop
c000a30c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a310:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a316:	0f b6 c0             	movzx  eax,al
c000a319:	85 c0                	test   eax,eax
c000a31b:	0f 84 8f 00 00 00    	je     c000a3b0 <tcp_slowtmr+0x194>
c000a321:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a325:	8b 80 a0 00 00 00    	mov    eax,DWORD PTR [eax+0xa0]
c000a32b:	8d 50 01             	lea    edx,[eax+0x1]
c000a32e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a332:	89 90 a0 00 00 00    	mov    DWORD PTR [eax+0xa0],edx
c000a338:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a33c:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [eax+0xa0]
c000a342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a346:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a34c:	0f b6 c0             	movzx  eax,al
c000a34f:	83 e8 01             	sub    eax,0x1
c000a352:	8a 80 b0 03 03 c0    	mov    al,BYTE PTR [eax-0x3ffcfc50]
c000a358:	0f b6 c0             	movzx  eax,al
c000a35b:	39 c2                	cmp    edx,eax
c000a35d:	0f 82 65 01 00 00    	jb     c000a4c8 <tcp_slowtmr+0x2ac>
c000a363:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a367:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c000a371:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a375:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a37b:	0f b6 c0             	movzx  eax,al
c000a37e:	83 f8 06             	cmp    eax,0x6
c000a381:	77 19                	ja     c000a39c <tcp_slowtmr+0x180>
c000a383:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a387:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a38d:	83 c0 01             	add    eax,0x1
c000a390:	88 c2                	mov    dl,al
c000a392:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a396:	88 90 a4 00 00 00    	mov    BYTE PTR [eax+0xa4],dl
c000a39c:	83 ec 0c             	sub    esp,0xc
c000a39f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a3a3:	e8 e8 63 00 00       	call   c0010790 <tcp_zero_window_probe>
c000a3a8:	83 c4 10             	add    esp,0x10
c000a3ab:	e9 18 01 00 00       	jmp    c000a4c8 <tcp_slowtmr+0x2ac>
c000a3b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3b4:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a3b8:	98                   	cwde   
c000a3b9:	85 c0                	test   eax,eax
c000a3bb:	78 13                	js     c000a3d0 <tcp_slowtmr+0x1b4>
c000a3bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3c1:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a3c5:	83 c0 01             	add    eax,0x1
c000a3c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a3cc:	66 89 42 3a          	mov    WORD PTR [edx+0x3a],ax
c000a3d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3d4:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a3d7:	85 c0                	test   eax,eax
c000a3d9:	0f 84 e9 00 00 00    	je     c000a4c8 <tcp_slowtmr+0x2ac>
c000a3df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3e3:	66 8b 50 3a          	mov    dx,WORD PTR [eax+0x3a]
c000a3e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3eb:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a3ee:	0f bf d2             	movsx  edx,dx
c000a3f1:	98                   	cwde   
c000a3f2:	39 c2                	cmp    edx,eax
c000a3f4:	0f 8c ce 00 00 00    	jl     c000a4c8 <tcp_slowtmr+0x2ac>
c000a3fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3fe:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a401:	83 f8 02             	cmp    eax,0x2
c000a404:	74 3a                	je     c000a440 <tcp_slowtmr+0x224>
c000a406:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a40a:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000a40d:	98                   	cwde   
c000a40e:	c1 f8 03             	sar    eax,0x3
c000a411:	0f bf d0             	movsx  edx,ax
c000a414:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a418:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000a41c:	98                   	cwde   
c000a41d:	01 c2                	add    edx,eax
c000a41f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a423:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a426:	0f b6 c0             	movzx  eax,al
c000a429:	8a 80 b8 03 03 c0    	mov    al,BYTE PTR [eax-0x3ffcfc48]
c000a42f:	0f b6 c0             	movzx  eax,al
c000a432:	88 c1                	mov    cl,al
c000a434:	d3 e2                	shl    edx,cl
c000a436:	89 d0                	mov    eax,edx
c000a438:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a43c:	66 89 42 4c          	mov    WORD PTR [edx+0x4c],ax
c000a440:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a444:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000a44a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a44e:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000a451:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a455:	66 8b 52 56          	mov    dx,WORD PTR [edx+0x56]
c000a459:	0f b7 d8             	movzx  ebx,ax
c000a45c:	0f b7 ca             	movzx  ecx,dx
c000a45f:	39 cb                	cmp    ebx,ecx
c000a461:	76 05                	jbe    c000a468 <tcp_slowtmr+0x24c>
c000a463:	89 d0                	mov    eax,edx
c000a465:	8d 76 00             	lea    esi,[esi+0x0]
c000a468:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000a46d:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000a472:	d1 e8                	shr    eax,1
c000a474:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a478:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000a47c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a480:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000a483:	0f b7 d0             	movzx  edx,ax
c000a486:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a48a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a48d:	0f b7 c0             	movzx  eax,ax
c000a490:	01 c0                	add    eax,eax
c000a492:	39 c2                	cmp    edx,eax
c000a494:	7d 12                	jge    c000a4a8 <tcp_slowtmr+0x28c>
c000a496:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a49a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a49d:	d1 e0                	shl    eax,1
c000a49f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a4a3:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000a4a7:	90                   	nop
c000a4a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4ac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a4af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a4b3:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000a4b7:	83 ec 0c             	sub    esp,0xc
c000a4ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a4be:	e8 c9 5f 00 00       	call   c001048c <tcp_rexmit_rto>
c000a4c3:	83 c4 10             	add    esp,0x10
c000a4c6:	66 90                	xchg   ax,ax
c000a4c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a4cf:	83 f8 06             	cmp    eax,0x6
c000a4d2:	75 24                	jne    c000a4f8 <tcp_slowtmr+0x2dc>
c000a4d4:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a4da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4de:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a4e1:	29 c2                	sub    edx,eax
c000a4e3:	89 d0                	mov    eax,edx
c000a4e5:	83 f8 28             	cmp    eax,0x28
c000a4e8:	76 0e                	jbe    c000a4f8 <tcp_slowtmr+0x2dc>
c000a4ea:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a4ee:	83 c0 01             	add    eax,0x1
c000a4f1:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a4f5:	8d 76 00             	lea    esi,[esi+0x0]
c000a4f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4fc:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000a4ff:	0f b6 c0             	movzx  eax,al
c000a502:	83 e0 08             	and    eax,0x8
c000a505:	0f 84 e1 00 00 00    	je     c000a5ec <tcp_slowtmr+0x3d0>
c000a50b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a50f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a512:	83 f8 04             	cmp    eax,0x4
c000a515:	74 11                	je     c000a528 <tcp_slowtmr+0x30c>
c000a517:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a51b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a51e:	83 f8 07             	cmp    eax,0x7
c000a521:	0f 85 c5 00 00 00    	jne    c000a5ec <tcp_slowtmr+0x3d0>
c000a527:	90                   	nop
c000a528:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a52e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a532:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a535:	89 d1                	mov    ecx,edx
c000a537:	29 c1                	sub    ecx,eax
c000a539:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a53d:	8b 80 9c 00 00 00    	mov    eax,DWORD PTR [eax+0x9c]
c000a543:	05 b8 4c 0a 00       	add    eax,0xa4cb8
c000a548:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a54d:	f7 e2                	mul    edx
c000a54f:	89 d0                	mov    eax,edx
c000a551:	c1 e8 05             	shr    eax,0x5
c000a554:	39 c1                	cmp    ecx,eax
c000a556:	76 18                	jbe    c000a570 <tcp_slowtmr+0x354>
c000a558:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a55c:	83 c0 01             	add    eax,0x1
c000a55f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a563:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c000a567:	83 c0 01             	add    eax,0x1
c000a56a:	88 44 24 16          	mov    BYTE PTR [esp+0x16],al
c000a56e:	eb 7c                	jmp    c000a5ec <tcp_slowtmr+0x3d0>
c000a570:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a576:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a57a:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a57d:	89 d3                	mov    ebx,edx
c000a57f:	29 c3                	sub    ebx,eax
c000a581:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a585:	8b 88 9c 00 00 00    	mov    ecx,DWORD PTR [eax+0x9c]
c000a58b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a58f:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a595:	0f b6 d0             	movzx  edx,al
c000a598:	89 d0                	mov    eax,edx
c000a59a:	c1 e0 03             	shl    eax,0x3
c000a59d:	01 d0                	add    eax,edx
c000a59f:	c1 e0 03             	shl    eax,0x3
c000a5a2:	01 d0                	add    eax,edx
c000a5a4:	c1 e0 02             	shl    eax,0x2
c000a5a7:	01 d0                	add    eax,edx
c000a5a9:	c1 e0 05             	shl    eax,0x5
c000a5ac:	29 d0                	sub    eax,edx
c000a5ae:	c1 e0 03             	shl    eax,0x3
c000a5b1:	01 c8                	add    eax,ecx
c000a5b3:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a5b8:	f7 e2                	mul    edx
c000a5ba:	89 d0                	mov    eax,edx
c000a5bc:	c1 e8 05             	shr    eax,0x5
c000a5bf:	39 c3                	cmp    ebx,eax
c000a5c1:	76 29                	jbe    c000a5ec <tcp_slowtmr+0x3d0>
c000a5c3:	83 ec 0c             	sub    esp,0xc
c000a5c6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a5ca:	e8 f9 60 00 00       	call   c00106c8 <tcp_keepalive>
c000a5cf:	83 c4 10             	add    esp,0x10
c000a5d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5d6:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a5dc:	83 c0 01             	add    eax,0x1
c000a5df:	88 c2                	mov    dl,al
c000a5e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5e5:	88 90 a5 00 00 00    	mov    BYTE PTR [eax+0xa5],dl
c000a5eb:	90                   	nop
c000a5ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5f0:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a5f6:	85 c0                	test   eax,eax
c000a5f8:	74 4e                	je     c000a648 <tcp_slowtmr+0x42c>
c000a5fa:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a600:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a604:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a607:	89 d1                	mov    ecx,edx
c000a609:	29 c1                	sub    ecx,eax
c000a60b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a60f:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a612:	0f bf d0             	movsx  edx,ax
c000a615:	89 d0                	mov    eax,edx
c000a617:	01 c0                	add    eax,eax
c000a619:	01 d0                	add    eax,edx
c000a61b:	01 c0                	add    eax,eax
c000a61d:	39 c1                	cmp    ecx,eax
c000a61f:	72 27                	jb     c000a648 <tcp_slowtmr+0x42c>
c000a621:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a625:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a62b:	83 ec 0c             	sub    esp,0xc
c000a62e:	50                   	push   eax
c000a62f:	e8 e4 f9 ff ff       	call   c000a018 <tcp_segs_free>
c000a634:	83 c4 10             	add    esp,0x10
c000a637:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a63b:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a645:	8d 76 00             	lea    esi,[esi+0x0]
c000a648:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a64c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a64f:	83 f8 03             	cmp    eax,0x3
c000a652:	75 24                	jne    c000a678 <tcp_slowtmr+0x45c>
c000a654:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a65a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a65e:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a661:	29 c2                	sub    edx,eax
c000a663:	89 d0                	mov    eax,edx
c000a665:	83 f8 28             	cmp    eax,0x28
c000a668:	76 0e                	jbe    c000a678 <tcp_slowtmr+0x45c>
c000a66a:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a66e:	83 c0 01             	add    eax,0x1
c000a671:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a675:	8d 76 00             	lea    esi,[esi+0x0]
c000a678:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a67c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a67f:	83 f8 09             	cmp    eax,0x9
c000a682:	75 24                	jne    c000a6a8 <tcp_slowtmr+0x48c>
c000a684:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a68a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a68e:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a691:	29 c2                	sub    edx,eax
c000a693:	89 d0                	mov    eax,edx
c000a695:	3d f0 00 00 00       	cmp    eax,0xf0
c000a69a:	76 0c                	jbe    c000a6a8 <tcp_slowtmr+0x48c>
c000a69c:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a6a0:	83 c0 01             	add    eax,0x1
c000a6a3:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a6a7:	90                   	nop
c000a6a8:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000a6ad:	85 c0                	test   eax,eax
c000a6af:	0f 84 13 01 00 00    	je     c000a7c8 <tcp_slowtmr+0x5ac>
c000a6b5:	83 ec 0c             	sub    esp,0xc
c000a6b8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a6bc:	e8 77 fa ff ff       	call   c000a138 <tcp_pcb_purge>
c000a6c1:	83 c4 10             	add    esp,0x10
c000a6c4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a6c9:	74 31                	je     c000a6fc <tcp_slowtmr+0x4e0>
c000a6cb:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a6d0:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a6d4:	75 16                	jne    c000a6ec <tcp_slowtmr+0x4d0>
c000a6d6:	83 ec 08             	sub    esp,0x8
c000a6d9:	68 58 01 03 c0       	push   0xc0030158
c000a6de:	68 c6 fa 02 c0       	push   0xc002fac6
c000a6e3:	e8 ac 54 01 00       	call   c001fb94 <CPrintf>
c000a6e8:	83 c4 10             	add    esp,0x10
c000a6eb:	90                   	nop
c000a6ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6f0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a6f7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a6fa:	eb 2c                	jmp    c000a728 <tcp_slowtmr+0x50c>
c000a6fc:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a701:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a705:	74 15                	je     c000a71c <tcp_slowtmr+0x500>
c000a707:	83 ec 08             	sub    esp,0x8
c000a70a:	68 84 01 03 c0       	push   0xc0030184
c000a70f:	68 c6 fa 02 c0       	push   0xc002fac6
c000a714:	e8 7b 54 01 00       	call   c001fb94 <CPrintf>
c000a719:	83 c4 10             	add    esp,0x10
c000a71c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a720:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a723:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000a728:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a72c:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a732:	85 c0                	test   eax,eax
c000a734:	74 1e                	je     c000a754 <tcp_slowtmr+0x538>
c000a736:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a73a:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a740:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a744:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a747:	83 ec 08             	sub    esp,0x8
c000a74a:	6a f6                	push   0xfffffff6
c000a74c:	52                   	push   edx
c000a74d:	ff d0                	call   eax
c000a74f:	83 c4 10             	add    esp,0x10
c000a752:	66 90                	xchg   ax,ax
c000a754:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000a759:	85 c0                	test   eax,eax
c000a75b:	74 3f                	je     c000a79c <tcp_slowtmr+0x580>
c000a75d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a761:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000a765:	0f b7 f0             	movzx  esi,ax
c000a768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a76c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a76f:	0f b7 d8             	movzx  ebx,ax
c000a772:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a776:	8d 78 04             	lea    edi,[eax+0x4]
c000a779:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a77d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a781:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a784:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a788:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000a78b:	83 ec 08             	sub    esp,0x8
c000a78e:	56                   	push   esi
c000a78f:	53                   	push   ebx
c000a790:	57                   	push   edi
c000a791:	51                   	push   ecx
c000a792:	52                   	push   edx
c000a793:	50                   	push   eax
c000a794:	e8 7f 5b 00 00       	call   c0010318 <tcp_rst>
c000a799:	83 c4 20             	add    esp,0x20
c000a79c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a7a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a7ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a7af:	83 ec 08             	sub    esp,0x8
c000a7b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7b6:	6a 02                	push   0x2
c000a7b8:	e8 e3 d2 ff ff       	call   c0007aa0 <memp_free>
c000a7bd:	83 c4 10             	add    esp,0x10
c000a7c0:	e9 9b 00 00 00       	jmp    c000a860 <tcp_slowtmr+0x644>
c000a7c5:	8d 76 00             	lea    esi,[esi+0x0]
c000a7c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a7d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7d4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a7d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a7db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a7df:	8a 40 38             	mov    al,BYTE PTR [eax+0x38]
c000a7e2:	83 c0 01             	add    eax,0x1
c000a7e5:	88 c2                	mov    dl,al
c000a7e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a7eb:	88 50 38             	mov    BYTE PTR [eax+0x38],dl
c000a7ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a7f2:	8a 50 38             	mov    dl,BYTE PTR [eax+0x38]
c000a7f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a7f9:	8a 40 39             	mov    al,BYTE PTR [eax+0x39]
c000a7fc:	0f b6 d2             	movzx  edx,dl
c000a7ff:	0f b6 c0             	movzx  eax,al
c000a802:	39 c2                	cmp    edx,eax
c000a804:	72 5a                	jb     c000a860 <tcp_slowtmr+0x644>
c000a806:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a80a:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000a80e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a812:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a818:	85 c0                	test   eax,eax
c000a81a:	74 24                	je     c000a840 <tcp_slowtmr+0x624>
c000a81c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a820:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a826:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a82a:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a82d:	83 ec 08             	sub    esp,0x8
c000a830:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000a834:	52                   	push   edx
c000a835:	ff d0                	call   eax
c000a837:	83 c4 10             	add    esp,0x10
c000a83a:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000a83e:	eb 08                	jmp    c000a848 <tcp_slowtmr+0x62c>
c000a840:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a845:	8d 76 00             	lea    esi,[esi+0x0]
c000a848:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c000a84d:	85 c0                	test   eax,eax
c000a84f:	75 0f                	jne    c000a860 <tcp_slowtmr+0x644>
c000a851:	83 ec 0c             	sub    esp,0xc
c000a854:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a858:	e8 2f 56 00 00       	call   c000fe8c <tcp_output>
c000a85d:	83 c4 10             	add    esp,0x10
c000a860:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000a865:	0f 85 e1 f9 ff ff    	jne    c000a24c <tcp_slowtmr+0x30>
c000a86b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a873:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000a878:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a87c:	e9 0b 01 00 00       	jmp    c000a98c <tcp_slowtmr+0x770>
c000a881:	8d 76 00             	lea    esi,[esi+0x0]
c000a884:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a888:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a88b:	83 f8 0a             	cmp    eax,0xa
c000a88e:	74 18                	je     c000a8a8 <tcp_slowtmr+0x68c>
c000a890:	83 ec 08             	sub    esp,0x8
c000a893:	68 b0 01 03 c0       	push   0xc00301b0
c000a898:	68 c6 fa 02 c0       	push   0xc002fac6
c000a89d:	e8 f2 52 01 00       	call   c001fb94 <CPrintf>
c000a8a2:	83 c4 10             	add    esp,0x10
c000a8a5:	8d 76 00             	lea    esi,[esi+0x0]
c000a8a8:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a8ad:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a8b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8b7:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a8ba:	29 c2                	sub    edx,eax
c000a8bc:	89 d0                	mov    eax,edx
c000a8be:	3d f0 00 00 00       	cmp    eax,0xf0
c000a8c3:	76 0b                	jbe    c000a8d0 <tcp_slowtmr+0x6b4>
c000a8c5:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a8c9:	83 c0 01             	add    eax,0x1
c000a8cc:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a8d0:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000a8d5:	85 c0                	test   eax,eax
c000a8d7:	0f 84 9b 00 00 00    	je     c000a978 <tcp_slowtmr+0x75c>
c000a8dd:	83 ec 0c             	sub    esp,0xc
c000a8e0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a8e4:	e8 4f f8 ff ff       	call   c000a138 <tcp_pcb_purge>
c000a8e9:	83 c4 10             	add    esp,0x10
c000a8ec:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a8f1:	74 31                	je     c000a924 <tcp_slowtmr+0x708>
c000a8f3:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000a8f8:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a8fc:	75 16                	jne    c000a914 <tcp_slowtmr+0x6f8>
c000a8fe:	83 ec 08             	sub    esp,0x8
c000a901:	68 e0 01 03 c0       	push   0xc00301e0
c000a906:	68 c6 fa 02 c0       	push   0xc002fac6
c000a90b:	e8 84 52 01 00       	call   c001fb94 <CPrintf>
c000a910:	83 c4 10             	add    esp,0x10
c000a913:	90                   	nop
c000a914:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a918:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a91b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a91f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a922:	eb 2c                	jmp    c000a950 <tcp_slowtmr+0x734>
c000a924:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000a929:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a92d:	74 15                	je     c000a944 <tcp_slowtmr+0x728>
c000a92f:	83 ec 08             	sub    esp,0x8
c000a932:	68 08 02 03 c0       	push   0xc0030208
c000a937:	68 c6 fa 02 c0       	push   0xc002fac6
c000a93c:	e8 53 52 01 00       	call   c001fb94 <CPrintf>
c000a941:	83 c4 10             	add    esp,0x10
c000a944:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a948:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a94b:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000a950:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a954:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a958:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a95c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a95f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a963:	83 ec 08             	sub    esp,0x8
c000a966:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a96a:	6a 02                	push   0x2
c000a96c:	e8 2f d1 ff ff       	call   c0007aa0 <memp_free>
c000a971:	83 c4 10             	add    esp,0x10
c000a974:	eb 16                	jmp    c000a98c <tcp_slowtmr+0x770>
c000a976:	66 90                	xchg   ax,ax
c000a978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a97c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a980:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a984:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a987:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a98b:	90                   	nop
c000a98c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000a991:	0f 85 ed fe ff ff    	jne    c000a884 <tcp_slowtmr+0x668>
c000a997:	90                   	nop
c000a998:	83 c4 20             	add    esp,0x20
c000a99b:	5b                   	pop    ebx
c000a99c:	5e                   	pop    esi
c000a99d:	5f                   	pop    edi
c000a99e:	c3                   	ret    
c000a99f:	90                   	nop

c000a9a0 <tcp_pcb_remove>:
c000a9a0:	83 ec 0c             	sub    esp,0xc
c000a9a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9a7:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9a9:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000a9ad:	75 11                	jne    c000a9c0 <tcp_pcb_remove+0x20>
c000a9af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9b3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9b5:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a9b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9bc:	89 10                	mov    DWORD PTR [eax],edx
c000a9be:	eb 4c                	jmp    c000aa0c <tcp_pcb_remove+0x6c>
c000a9c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9c4:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9c6:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000a9cb:	eb 33                	jmp    c000aa00 <tcp_pcb_remove+0x60>
c000a9cd:	8d 76 00             	lea    esi,[esi+0x0]
c000a9d0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000a9d5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a9d8:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000a9dc:	75 12                	jne    c000a9f0 <tcp_pcb_remove+0x50>
c000a9de:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000a9e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a9e7:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a9ea:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a9ed:	eb 1d                	jmp    c000aa0c <tcp_pcb_remove+0x6c>
c000a9ef:	90                   	nop
c000a9f0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000a9f5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a9f8:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000a9fd:	8d 76 00             	lea    esi,[esi+0x0]
c000aa00:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000aa05:	85 c0                	test   eax,eax
c000aa07:	75 c7                	jne    c000a9d0 <tcp_pcb_remove+0x30>
c000aa09:	8d 76 00             	lea    esi,[esi+0x0]
c000aa0c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa10:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000aa17:	83 ec 0c             	sub    esp,0xc
c000aa1a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000aa1e:	e8 15 f7 ff ff       	call   c000a138 <tcp_pcb_purge>
c000aa23:	83 c4 10             	add    esp,0x10
c000aa26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa2a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aa2d:	83 f8 0a             	cmp    eax,0xa
c000aa30:	74 3e                	je     c000aa70 <tcp_pcb_remove+0xd0>
c000aa32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa36:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aa39:	83 f8 01             	cmp    eax,0x1
c000aa3c:	74 32                	je     c000aa70 <tcp_pcb_remove+0xd0>
c000aa3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa42:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000aa45:	0f b6 c0             	movzx  eax,al
c000aa48:	83 e0 01             	and    eax,0x1
c000aa4b:	74 23                	je     c000aa70 <tcp_pcb_remove+0xd0>
c000aa4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa51:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000aa54:	83 c8 02             	or     eax,0x2
c000aa57:	88 c2                	mov    dl,al
c000aa59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa5d:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000aa60:	83 ec 0c             	sub    esp,0xc
c000aa63:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000aa67:	e8 20 54 00 00       	call   c000fe8c <tcp_output>
c000aa6c:	83 c4 10             	add    esp,0x10
c000aa6f:	90                   	nop
c000aa70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa74:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aa77:	83 f8 01             	cmp    eax,0x1
c000aa7a:	74 64                	je     c000aae0 <tcp_pcb_remove+0x140>
c000aa7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa80:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000aa83:	85 c0                	test   eax,eax
c000aa85:	74 15                	je     c000aa9c <tcp_pcb_remove+0xfc>
c000aa87:	83 ec 08             	sub    esp,0x8
c000aa8a:	68 ae 02 03 c0       	push   0xc00302ae
c000aa8f:	68 c6 fa 02 c0       	push   0xc002fac6
c000aa94:	e8 fb 50 01 00       	call   c001fb94 <CPrintf>
c000aa99:	83 c4 10             	add    esp,0x10
c000aa9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aaa0:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000aaa3:	85 c0                	test   eax,eax
c000aaa5:	74 15                	je     c000aabc <tcp_pcb_remove+0x11c>
c000aaa7:	83 ec 08             	sub    esp,0x8
c000aaaa:	68 c6 02 03 c0       	push   0xc00302c6
c000aaaf:	68 c6 fa 02 c0       	push   0xc002fac6
c000aab4:	e8 db 50 01 00       	call   c001fb94 <CPrintf>
c000aab9:	83 c4 10             	add    esp,0x10
c000aabc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aac0:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000aac6:	85 c0                	test   eax,eax
c000aac8:	74 16                	je     c000aae0 <tcp_pcb_remove+0x140>
c000aaca:	83 ec 08             	sub    esp,0x8
c000aacd:	68 df 02 03 c0       	push   0xc00302df
c000aad2:	68 c6 fa 02 c0       	push   0xc002fac6
c000aad7:	e8 b8 50 01 00       	call   c001fb94 <CPrintf>
c000aadc:	83 c4 10             	add    esp,0x10
c000aadf:	90                   	nop
c000aae0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aae4:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000aaeb:	90                   	nop
c000aaec:	83 c4 0c             	add    esp,0xc
c000aaef:	c3                   	ret    

c000aaf0 <tcp_close_shutdown>:
c000aaf0:	57                   	push   edi
c000aaf1:	56                   	push   esi
c000aaf2:	53                   	push   ebx
c000aaf3:	83 ec 20             	sub    esp,0x20
c000aaf6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aafa:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000aafe:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ab03:	85 c0                	test   eax,eax
c000ab05:	0f 84 41 01 00 00    	je     c000ac4c <tcp_close_shutdown+0x15c>
c000ab0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab12:	83 f8 01             	cmp    eax,0x1
c000ab15:	0f 84 31 01 00 00    	je     c000ac4c <tcp_close_shutdown+0x15c>
c000ab1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab1f:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000ab25:	85 c0                	test   eax,eax
c000ab27:	75 17                	jne    c000ab40 <tcp_close_shutdown+0x50>
c000ab29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab2d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ab30:	0f b7 c0             	movzx  eax,ax
c000ab33:	3d 60 08 00 00       	cmp    eax,0x860
c000ab38:	0f 84 0e 01 00 00    	je     c000ac4c <tcp_close_shutdown+0x15c>
c000ab3e:	66 90                	xchg   ax,ax
c000ab40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab44:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ab47:	0f b6 c0             	movzx  eax,al
c000ab4a:	83 e0 10             	and    eax,0x10
c000ab4d:	75 15                	jne    c000ab64 <tcp_close_shutdown+0x74>
c000ab4f:	83 ec 08             	sub    esp,0x8
c000ab52:	68 f6 02 03 c0       	push   0xc00302f6
c000ab57:	68 c6 fa 02 c0       	push   0xc002fac6
c000ab5c:	e8 33 50 01 00       	call   c001fb94 <CPrintf>
c000ab61:	83 c4 10             	add    esp,0x10
c000ab64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab68:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ab6c:	0f b7 f0             	movzx  esi,ax
c000ab6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab73:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ab76:	0f b7 d8             	movzx  ebx,ax
c000ab79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab7d:	8d 78 04             	lea    edi,[eax+0x4]
c000ab80:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ab84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab88:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ab8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab8f:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000ab92:	83 ec 08             	sub    esp,0x8
c000ab95:	56                   	push   esi
c000ab96:	53                   	push   ebx
c000ab97:	57                   	push   edi
c000ab98:	51                   	push   ecx
c000ab99:	52                   	push   edx
c000ab9a:	50                   	push   eax
c000ab9b:	e8 78 57 00 00       	call   c0010318 <tcp_rst>
c000aba0:	83 c4 20             	add    esp,0x20
c000aba3:	83 ec 0c             	sub    esp,0xc
c000aba6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abaa:	e8 89 f5 ff ff       	call   c000a138 <tcp_pcb_purge>
c000abaf:	83 c4 10             	add    esp,0x10
c000abb2:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000abb7:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000abbb:	75 0f                	jne    c000abcc <tcp_close_shutdown+0xdc>
c000abbd:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000abc2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000abc5:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000abca:	eb 48                	jmp    c000ac14 <tcp_close_shutdown+0x124>
c000abcc:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000abd1:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000abd6:	eb 30                	jmp    c000ac08 <tcp_close_shutdown+0x118>
c000abd8:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000abdd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000abe0:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000abe4:	75 12                	jne    c000abf8 <tcp_close_shutdown+0x108>
c000abe6:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000abeb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000abef:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000abf2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000abf5:	eb 1d                	jmp    c000ac14 <tcp_close_shutdown+0x124>
c000abf7:	90                   	nop
c000abf8:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000abfd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ac00:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ac05:	8d 76 00             	lea    esi,[esi+0x0]
c000ac08:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ac0d:	85 c0                	test   eax,eax
c000ac0f:	75 c7                	jne    c000abd8 <tcp_close_shutdown+0xe8>
c000ac11:	8d 76 00             	lea    esi,[esi+0x0]
c000ac14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac18:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ac1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac23:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000ac2a:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000ac30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac34:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ac37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac3b:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000ac40:	e8 d7 5e 00 00       	call   c0010b1c <tcp_timer_needed>
c000ac45:	b0 00                	mov    al,0x0
c000ac47:	e9 f4 01 00 00       	jmp    c000ae40 <tcp_close_shutdown+0x350>
c000ac4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac50:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ac53:	83 f8 07             	cmp    eax,0x7
c000ac56:	0f 87 a4 01 00 00    	ja     c000ae00 <tcp_close_shutdown+0x310>
c000ac5c:	8b 04 85 80 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfc80]
c000ac63:	ff e0                	jmp    eax
c000ac65:	8d 76 00             	lea    esi,[esi+0x0]
c000ac68:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ac6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac71:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ac74:	0f b7 c0             	movzx  eax,ax
c000ac77:	85 c0                	test   eax,eax
c000ac79:	74 71                	je     c000acec <tcp_close_shutdown+0x1fc>
c000ac7b:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000ac80:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ac84:	75 12                	jne    c000ac98 <tcp_close_shutdown+0x1a8>
c000ac86:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000ac8b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ac8e:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000ac93:	eb 4b                	jmp    c000ace0 <tcp_close_shutdown+0x1f0>
c000ac95:	8d 76 00             	lea    esi,[esi+0x0]
c000ac98:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000ac9d:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000aca2:	eb 30                	jmp    c000acd4 <tcp_close_shutdown+0x1e4>
c000aca4:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000aca9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000acac:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000acb0:	75 12                	jne    c000acc4 <tcp_close_shutdown+0x1d4>
c000acb2:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000acb7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000acbb:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000acbe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000acc1:	eb 1d                	jmp    c000ace0 <tcp_close_shutdown+0x1f0>
c000acc3:	90                   	nop
c000acc4:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000acc9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000accc:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000acd1:	8d 76 00             	lea    esi,[esi+0x0]
c000acd4:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000acd9:	85 c0                	test   eax,eax
c000acdb:	75 c7                	jne    c000aca4 <tcp_close_shutdown+0x1b4>
c000acdd:	8d 76 00             	lea    esi,[esi+0x0]
c000ace0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ace4:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000aceb:	90                   	nop
c000acec:	83 ec 08             	sub    esp,0x8
c000acef:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000acf3:	6a 02                	push   0x2
c000acf5:	e8 a6 cd ff ff       	call   c0007aa0 <memp_free>
c000acfa:	83 c4 10             	add    esp,0x10
c000acfd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ad05:	e9 12 01 00 00       	jmp    c000ae1c <tcp_close_shutdown+0x32c>
c000ad0a:	66 90                	xchg   ax,ax
c000ad0c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ad11:	83 ec 08             	sub    esp,0x8
c000ad14:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ad18:	68 78 68 03 c0       	push   0xc0036878
c000ad1d:	e8 7e fc ff ff       	call   c000a9a0 <tcp_pcb_remove>
c000ad22:	83 c4 10             	add    esp,0x10
c000ad25:	83 ec 08             	sub    esp,0x8
c000ad28:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ad2c:	6a 03                	push   0x3
c000ad2e:	e8 6d cd ff ff       	call   c0007aa0 <memp_free>
c000ad33:	83 c4 10             	add    esp,0x10
c000ad36:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ad3e:	e9 d9 00 00 00       	jmp    c000ae1c <tcp_close_shutdown+0x32c>
c000ad43:	90                   	nop
c000ad44:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ad49:	83 ec 08             	sub    esp,0x8
c000ad4c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ad50:	68 70 68 03 c0       	push   0xc0036870
c000ad55:	e8 46 fc ff ff       	call   c000a9a0 <tcp_pcb_remove>
c000ad5a:	83 c4 10             	add    esp,0x10
c000ad5d:	83 ec 08             	sub    esp,0x8
c000ad60:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ad64:	6a 02                	push   0x2
c000ad66:	e8 35 cd ff ff       	call   c0007aa0 <memp_free>
c000ad6b:	83 c4 10             	add    esp,0x10
c000ad6e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ad76:	e9 a1 00 00 00       	jmp    c000ae1c <tcp_close_shutdown+0x32c>
c000ad7b:	90                   	nop
c000ad7c:	83 ec 0c             	sub    esp,0xc
c000ad7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ad83:	e8 54 4d 00 00       	call   c000fadc <tcp_send_fin>
c000ad88:	83 c4 10             	add    esp,0x10
c000ad8b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000ad8f:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000ad94:	85 c0                	test   eax,eax
c000ad96:	75 78                	jne    c000ae10 <tcp_close_shutdown+0x320>
c000ad98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad9c:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000ada3:	eb 6b                	jmp    c000ae10 <tcp_close_shutdown+0x320>
c000ada5:	8d 76 00             	lea    esi,[esi+0x0]
c000ada8:	83 ec 0c             	sub    esp,0xc
c000adab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000adaf:	e8 28 4d 00 00       	call   c000fadc <tcp_send_fin>
c000adb4:	83 c4 10             	add    esp,0x10
c000adb7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000adbb:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000adc0:	85 c0                	test   eax,eax
c000adc2:	75 50                	jne    c000ae14 <tcp_close_shutdown+0x324>
c000adc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000adc8:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000adcf:	eb 43                	jmp    c000ae14 <tcp_close_shutdown+0x324>
c000add1:	8d 76 00             	lea    esi,[esi+0x0]
c000add4:	83 ec 0c             	sub    esp,0xc
c000add7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000addb:	e8 fc 4c 00 00       	call   c000fadc <tcp_send_fin>
c000ade0:	83 c4 10             	add    esp,0x10
c000ade3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000ade7:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000adec:	85 c0                	test   eax,eax
c000adee:	75 28                	jne    c000ae18 <tcp_close_shutdown+0x328>
c000adf0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000adf4:	c7 40 10 09 00 00 00 	mov    DWORD PTR [eax+0x10],0x9
c000adfb:	eb 1b                	jmp    c000ae18 <tcp_close_shutdown+0x328>
c000adfd:	8d 76 00             	lea    esi,[esi+0x0]
c000ae00:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ae05:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ae0d:	eb 0d                	jmp    c000ae1c <tcp_close_shutdown+0x32c>
c000ae0f:	90                   	nop
c000ae10:	90                   	nop
c000ae11:	eb 09                	jmp    c000ae1c <tcp_close_shutdown+0x32c>
c000ae13:	90                   	nop
c000ae14:	90                   	nop
c000ae15:	eb 05                	jmp    c000ae1c <tcp_close_shutdown+0x32c>
c000ae17:	90                   	nop
c000ae18:	90                   	nop
c000ae19:	8d 76 00             	lea    esi,[esi+0x0]
c000ae1c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000ae21:	74 19                	je     c000ae3c <tcp_close_shutdown+0x34c>
c000ae23:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000ae28:	85 c0                	test   eax,eax
c000ae2a:	75 10                	jne    c000ae3c <tcp_close_shutdown+0x34c>
c000ae2c:	83 ec 0c             	sub    esp,0xc
c000ae2f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ae33:	e8 54 50 00 00       	call   c000fe8c <tcp_output>
c000ae38:	83 c4 10             	add    esp,0x10
c000ae3b:	90                   	nop
c000ae3c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000ae40:	83 c4 20             	add    esp,0x20
c000ae43:	5b                   	pop    ebx
c000ae44:	5e                   	pop    esi
c000ae45:	5f                   	pop    edi
c000ae46:	c3                   	ret    
c000ae47:	90                   	nop

c000ae48 <tcp_close>:
c000ae48:	83 ec 0c             	sub    esp,0xc
c000ae4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ae52:	83 f8 01             	cmp    eax,0x1
c000ae55:	74 15                	je     c000ae6c <tcp_close+0x24>
c000ae57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae5b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ae5e:	83 c8 10             	or     eax,0x10
c000ae61:	88 c2                	mov    dl,al
c000ae63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae67:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ae6a:	66 90                	xchg   ax,ax
c000ae6c:	83 ec 08             	sub    esp,0x8
c000ae6f:	6a 01                	push   0x1
c000ae71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae75:	e8 76 fc ff ff       	call   c000aaf0 <tcp_close_shutdown>
c000ae7a:	83 c4 10             	add    esp,0x10
c000ae7d:	83 c4 0c             	add    esp,0xc
c000ae80:	c3                   	ret    
c000ae81:	8d 76 00             	lea    esi,[esi+0x0]

c000ae84 <tcp_recv_null>:
c000ae84:	83 ec 1c             	sub    esp,0x1c
c000ae87:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ae8b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ae8f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000ae94:	74 2e                	je     c000aec4 <tcp_recv_null+0x40>
c000ae96:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ae9a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ae9d:	0f b7 c0             	movzx  eax,ax
c000aea0:	83 ec 08             	sub    esp,0x8
c000aea3:	50                   	push   eax
c000aea4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000aea8:	e8 af ee ff ff       	call   c0009d5c <tcp_recved>
c000aead:	83 c4 10             	add    esp,0x10
c000aeb0:	83 ec 0c             	sub    esp,0xc
c000aeb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aeb7:	e8 a0 d4 ff ff       	call   c000835c <pbuf_free>
c000aebc:	83 c4 10             	add    esp,0x10
c000aebf:	eb 1f                	jmp    c000aee0 <tcp_recv_null+0x5c>
c000aec1:	8d 76 00             	lea    esi,[esi+0x0]
c000aec4:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c000aec9:	85 c0                	test   eax,eax
c000aecb:	75 13                	jne    c000aee0 <tcp_recv_null+0x5c>
c000aecd:	83 ec 0c             	sub    esp,0xc
c000aed0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000aed4:	e8 6f ff ff ff       	call   c000ae48 <tcp_close>
c000aed9:	83 c4 10             	add    esp,0x10
c000aedc:	eb 06                	jmp    c000aee4 <tcp_recv_null+0x60>
c000aede:	66 90                	xchg   ax,ax
c000aee0:	b0 00                	mov    al,0x0
c000aee2:	66 90                	xchg   ax,ax
c000aee4:	83 c4 1c             	add    esp,0x1c
c000aee7:	c3                   	ret    

c000aee8 <tcp_fasttmr>:
c000aee8:	83 ec 1c             	sub    esp,0x1c
c000aeeb:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000aef0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aef4:	e9 03 01 00 00       	jmp    c000affc <tcp_fasttmr+0x114>
c000aef9:	8d 76 00             	lea    esi,[esi+0x0]
c000aefc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af00:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000af03:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000af07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af0b:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000af11:	85 c0                	test   eax,eax
c000af13:	0f 84 8f 00 00 00    	je     c000afa8 <tcp_fasttmr+0xc0>
c000af19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af1d:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000af23:	85 c0                	test   eax,eax
c000af25:	74 31                	je     c000af58 <tcp_fasttmr+0x70>
c000af27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af2b:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000af31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af35:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000af3b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af3f:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000af42:	6a 00                	push   0x0
c000af44:	51                   	push   ecx
c000af45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af49:	52                   	push   edx
c000af4a:	ff d0                	call   eax
c000af4c:	83 c4 10             	add    esp,0x10
c000af4f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000af53:	eb 23                	jmp    c000af78 <tcp_fasttmr+0x90>
c000af55:	8d 76 00             	lea    esi,[esi+0x0]
c000af58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af5c:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000af62:	6a 00                	push   0x0
c000af64:	50                   	push   eax
c000af65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af69:	6a 00                	push   0x0
c000af6b:	e8 14 ff ff ff       	call   c000ae84 <tcp_recv_null>
c000af70:	83 c4 10             	add    esp,0x10
c000af73:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000af77:	90                   	nop
c000af78:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000af7d:	85 c0                	test   eax,eax
c000af7f:	75 13                	jne    c000af94 <tcp_fasttmr+0xac>
c000af81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af85:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000af8f:	eb 17                	jmp    c000afa8 <tcp_fasttmr+0xc0>
c000af91:	8d 76 00             	lea    esi,[esi+0x0]
c000af94:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000af99:	83 f8 f6             	cmp    eax,0xfffffff6
c000af9c:	75 0a                	jne    c000afa8 <tcp_fasttmr+0xc0>
c000af9e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000afa6:	66 90                	xchg   ax,ax
c000afa8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000afad:	74 45                	je     c000aff4 <tcp_fasttmr+0x10c>
c000afaf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000afb3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000afb6:	0f b6 c0             	movzx  eax,al
c000afb9:	83 e0 01             	and    eax,0x1
c000afbc:	74 36                	je     c000aff4 <tcp_fasttmr+0x10c>
c000afbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000afc2:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000afc5:	83 c8 02             	or     eax,0x2
c000afc8:	88 c2                	mov    dl,al
c000afca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000afce:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000afd1:	83 ec 0c             	sub    esp,0xc
c000afd4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000afd8:	e8 af 4e 00 00       	call   c000fe8c <tcp_output>
c000afdd:	83 c4 10             	add    esp,0x10
c000afe0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000afe4:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000afe7:	83 e0 fc             	and    eax,0xfffffffc
c000afea:	88 c2                	mov    dl,al
c000afec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aff0:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000aff3:	90                   	nop
c000aff4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aff8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000affc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b001:	0f 85 f5 fe ff ff    	jne    c000aefc <tcp_fasttmr+0x14>
c000b007:	90                   	nop
c000b008:	83 c4 1c             	add    esp,0x1c
c000b00b:	c3                   	ret    

c000b00c <tcp_tmr>:
c000b00c:	83 ec 0c             	sub    esp,0xc
c000b00f:	e8 d4 fe ff ff       	call   c000aee8 <tcp_fasttmr>
c000b014:	a0 a0 a8 03 c0       	mov    al,ds:0xc003a8a0
c000b019:	83 c0 01             	add    eax,0x1
c000b01c:	a2 a0 a8 03 c0       	mov    ds:0xc003a8a0,al
c000b021:	a0 a0 a8 03 c0       	mov    al,ds:0xc003a8a0
c000b026:	0f b6 c0             	movzx  eax,al
c000b029:	83 e0 01             	and    eax,0x1
c000b02c:	74 06                	je     c000b034 <tcp_tmr+0x28>
c000b02e:	e8 e9 f1 ff ff       	call   c000a21c <tcp_slowtmr>
c000b033:	90                   	nop
c000b034:	90                   	nop
c000b035:	83 c4 0c             	add    esp,0xc
c000b038:	c3                   	ret    
c000b039:	8d 76 00             	lea    esi,[esi+0x0]

c000b03c <tcp_shutdown>:
c000b03c:	83 ec 0c             	sub    esp,0xc
c000b03f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b043:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b046:	83 f8 01             	cmp    eax,0x1
c000b049:	75 09                	jne    c000b054 <tcp_shutdown+0x18>
c000b04b:	b0 f3                	mov    al,0xf3
c000b04d:	e9 92 00 00 00       	jmp    c000b0e4 <tcp_shutdown+0xa8>
c000b052:	66 90                	xchg   ax,ax
c000b054:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b059:	74 49                	je     c000b0a4 <tcp_shutdown+0x68>
c000b05b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b05f:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b065:	85 c0                	test   eax,eax
c000b067:	74 27                	je     c000b090 <tcp_shutdown+0x54>
c000b069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b06d:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b073:	83 ec 0c             	sub    esp,0xc
c000b076:	50                   	push   eax
c000b077:	e8 e0 d2 ff ff       	call   c000835c <pbuf_free>
c000b07c:	83 c4 10             	add    esp,0x10
c000b07f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b083:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000b08d:	8d 76 00             	lea    esi,[esi+0x0]
c000b090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b094:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b097:	83 c8 10             	or     eax,0x10
c000b09a:	88 c2                	mov    dl,al
c000b09c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0a0:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b0a3:	90                   	nop
c000b0a4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b0a9:	74 2d                	je     c000b0d8 <tcp_shutdown+0x9c>
c000b0ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b0b2:	83 f8 03             	cmp    eax,0x3
c000b0b5:	72 25                	jb     c000b0dc <tcp_shutdown+0xa0>
c000b0b7:	83 f8 04             	cmp    eax,0x4
c000b0ba:	76 08                	jbe    c000b0c4 <tcp_shutdown+0x88>
c000b0bc:	83 f8 07             	cmp    eax,0x7
c000b0bf:	75 1b                	jne    c000b0dc <tcp_shutdown+0xa0>
c000b0c1:	8d 76 00             	lea    esi,[esi+0x0]
c000b0c4:	83 ec 08             	sub    esp,0x8
c000b0c7:	6a 00                	push   0x0
c000b0c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0cd:	e8 1e fa ff ff       	call   c000aaf0 <tcp_close_shutdown>
c000b0d2:	83 c4 10             	add    esp,0x10
c000b0d5:	eb 0d                	jmp    c000b0e4 <tcp_shutdown+0xa8>
c000b0d7:	90                   	nop
c000b0d8:	90                   	nop
c000b0d9:	eb 05                	jmp    c000b0e0 <tcp_shutdown+0xa4>
c000b0db:	90                   	nop
c000b0dc:	90                   	nop
c000b0dd:	8d 76 00             	lea    esi,[esi+0x0]
c000b0e0:	b0 00                	mov    al,0x0
c000b0e2:	66 90                	xchg   ax,ax
c000b0e4:	83 c4 0c             	add    esp,0xc
c000b0e7:	c3                   	ret    

c000b0e8 <tcp_abandon>:
c000b0e8:	83 ec 2c             	sub    esp,0x2c
c000b0eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b0f2:	83 f8 01             	cmp    eax,0x1
c000b0f5:	75 15                	jne    c000b10c <tcp_abandon+0x24>
c000b0f7:	83 ec 08             	sub    esp,0x8
c000b0fa:	68 30 02 03 c0       	push   0xc0030230
c000b0ff:	68 c6 fa 02 c0       	push   0xc002fac6
c000b104:	e8 8b 4a 01 00       	call   c001fb94 <CPrintf>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b110:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b113:	83 f8 0a             	cmp    eax,0xa
c000b116:	75 2c                	jne    c000b144 <tcp_abandon+0x5c>
c000b118:	83 ec 08             	sub    esp,0x8
c000b11b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b11f:	68 84 68 03 c0       	push   0xc0036884
c000b124:	e8 77 f8 ff ff       	call   c000a9a0 <tcp_pcb_remove>
c000b129:	83 c4 10             	add    esp,0x10
c000b12c:	83 ec 08             	sub    esp,0x8
c000b12f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b133:	6a 02                	push   0x2
c000b135:	e8 66 c9 ff ff       	call   c0007aa0 <memp_free>
c000b13a:	83 c4 10             	add    esp,0x10
c000b13d:	e9 32 01 00 00       	jmp    c000b274 <tcp_abandon+0x18c>
c000b142:	66 90                	xchg   ax,ax
c000b144:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b148:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000b14b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b14f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b153:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b156:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b15a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b15e:	8b 00                	mov    eax,DWORD PTR [eax]
c000b160:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b164:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b168:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b16b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b16f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b173:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b176:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000b17b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b17f:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000b183:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c000b188:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b18c:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000b192:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b196:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b19a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000b19d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b1a1:	83 ec 08             	sub    esp,0x8
c000b1a4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b1a8:	68 70 68 03 c0       	push   0xc0036870
c000b1ad:	e8 ee f7 ff ff       	call   c000a9a0 <tcp_pcb_remove>
c000b1b2:	83 c4 10             	add    esp,0x10
c000b1b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1b9:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b1bc:	85 c0                	test   eax,eax
c000b1be:	74 14                	je     c000b1d4 <tcp_abandon+0xec>
c000b1c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1c4:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b1c7:	83 ec 0c             	sub    esp,0xc
c000b1ca:	50                   	push   eax
c000b1cb:	e8 48 ee ff ff       	call   c000a018 <tcp_segs_free>
c000b1d0:	83 c4 10             	add    esp,0x10
c000b1d3:	90                   	nop
c000b1d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1d8:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b1db:	85 c0                	test   eax,eax
c000b1dd:	74 15                	je     c000b1f4 <tcp_abandon+0x10c>
c000b1df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1e3:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b1e6:	83 ec 0c             	sub    esp,0xc
c000b1e9:	50                   	push   eax
c000b1ea:	e8 29 ee ff ff       	call   c000a018 <tcp_segs_free>
c000b1ef:	83 c4 10             	add    esp,0x10
c000b1f2:	66 90                	xchg   ax,ax
c000b1f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1f8:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b1fe:	85 c0                	test   eax,eax
c000b200:	74 16                	je     c000b218 <tcp_abandon+0x130>
c000b202:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b206:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b20c:	83 ec 0c             	sub    esp,0xc
c000b20f:	50                   	push   eax
c000b210:	e8 03 ee ff ff       	call   c000a018 <tcp_segs_free>
c000b215:	83 c4 10             	add    esp,0x10
c000b218:	83 ec 08             	sub    esp,0x8
c000b21b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b21f:	6a 02                	push   0x2
c000b221:	e8 7a c8 ff ff       	call   c0007aa0 <memp_free>
c000b226:	83 c4 10             	add    esp,0x10
c000b229:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000b22e:	74 14                	je     c000b244 <tcp_abandon+0x15c>
c000b230:	83 ec 08             	sub    esp,0x8
c000b233:	6a f6                	push   0xfffffff6
c000b235:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b239:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b23d:	ff d0                	call   eax
c000b23f:	83 c4 10             	add    esp,0x10
c000b242:	66 90                	xchg   ax,ax
c000b244:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b249:	74 29                	je     c000b274 <tcp_abandon+0x18c>
c000b24b:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c000b250:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c000b255:	83 ec 08             	sub    esp,0x8
c000b258:	52                   	push   edx
c000b259:	50                   	push   eax
c000b25a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b25e:	50                   	push   eax
c000b25f:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b263:	50                   	push   eax
c000b264:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b268:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b26c:	e8 a7 50 00 00       	call   c0010318 <tcp_rst>
c000b271:	83 c4 20             	add    esp,0x20
c000b274:	90                   	nop
c000b275:	83 c4 2c             	add    esp,0x2c
c000b278:	c3                   	ret    
c000b279:	8d 76 00             	lea    esi,[esi+0x0]

c000b27c <tcp_abort>:
c000b27c:	83 ec 0c             	sub    esp,0xc
c000b27f:	83 ec 08             	sub    esp,0x8
c000b282:	6a 01                	push   0x1
c000b284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b288:	e8 5b fe ff ff       	call   c000b0e8 <tcp_abandon>
c000b28d:	83 c4 10             	add    esp,0x10
c000b290:	90                   	nop
c000b291:	83 c4 0c             	add    esp,0xc
c000b294:	c3                   	ret    
c000b295:	8d 76 00             	lea    esi,[esi+0x0]

c000b298 <tcp_kill_prio>:
c000b298:	83 ec 2c             	sub    esp,0x2c
c000b29b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b29f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b2a3:	c6 44 24 13 7f       	mov    BYTE PTR [esp+0x13],0x7f
c000b2a8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b2b0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b2b8:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000b2bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b2c1:	eb 75                	jmp    c000b338 <tcp_kill_prio+0xa0>
c000b2c3:	90                   	nop
c000b2c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b2c8:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b2cb:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c000b2d0:	0f b6 c0             	movzx  eax,al
c000b2d3:	39 c2                	cmp    edx,eax
c000b2d5:	72 55                	jb     c000b32c <tcp_kill_prio+0x94>
c000b2d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b2db:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b2de:	0f b6 54 24 13       	movzx  edx,BYTE PTR [esp+0x13]
c000b2e3:	0f b6 c0             	movzx  eax,al
c000b2e6:	39 c2                	cmp    edx,eax
c000b2e8:	72 42                	jb     c000b32c <tcp_kill_prio+0x94>
c000b2ea:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b2f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b2f4:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b2f7:	29 c2                	sub    edx,eax
c000b2f9:	89 d0                	mov    eax,edx
c000b2fb:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000b2ff:	77 2b                	ja     c000b32c <tcp_kill_prio+0x94>
c000b301:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b307:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b30b:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b30e:	29 c2                	sub    edx,eax
c000b310:	89 d0                	mov    eax,edx
c000b312:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b316:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b31a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b31e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b322:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b325:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b329:	8d 76 00             	lea    esi,[esi+0x0]
c000b32c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b330:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b333:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b337:	90                   	nop
c000b338:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b33d:	75 85                	jne    c000b2c4 <tcp_kill_prio+0x2c>
c000b33f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b344:	74 12                	je     c000b358 <tcp_kill_prio+0xc0>
c000b346:	83 ec 0c             	sub    esp,0xc
c000b349:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b34d:	e8 2a ff ff ff       	call   c000b27c <tcp_abort>
c000b352:	83 c4 10             	add    esp,0x10
c000b355:	8d 76 00             	lea    esi,[esi+0x0]
c000b358:	90                   	nop
c000b359:	83 c4 2c             	add    esp,0x2c
c000b35c:	c3                   	ret    
c000b35d:	8d 76 00             	lea    esi,[esi+0x0]

c000b360 <tcp_kill_timewait>:
c000b360:	83 ec 1c             	sub    esp,0x1c
c000b363:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b36b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000b373:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000b378:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b37c:	eb 42                	jmp    c000b3c0 <tcp_kill_timewait+0x60>
c000b37e:	66 90                	xchg   ax,ax
c000b380:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b38a:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b38d:	29 c2                	sub    edx,eax
c000b38f:	89 d0                	mov    eax,edx
c000b391:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b395:	77 1d                	ja     c000b3b4 <tcp_kill_timewait+0x54>
c000b397:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b39d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b3a1:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b3a4:	29 c2                	sub    edx,eax
c000b3a6:	89 d0                	mov    eax,edx
c000b3a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b3ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b3b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b3b8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b3bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b3bf:	90                   	nop
c000b3c0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b3c5:	75 b9                	jne    c000b380 <tcp_kill_timewait+0x20>
c000b3c7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b3cc:	74 12                	je     c000b3e0 <tcp_kill_timewait+0x80>
c000b3ce:	83 ec 0c             	sub    esp,0xc
c000b3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d5:	e8 a2 fe ff ff       	call   c000b27c <tcp_abort>
c000b3da:	83 c4 10             	add    esp,0x10
c000b3dd:	8d 76 00             	lea    esi,[esi+0x0]
c000b3e0:	90                   	nop
c000b3e1:	83 c4 1c             	add    esp,0x1c
c000b3e4:	c3                   	ret    
c000b3e5:	8d 76 00             	lea    esi,[esi+0x0]

c000b3e8 <tcp_next_iss>:
c000b3e8:	8b 15 7c 3b 03 c0    	mov    edx,DWORD PTR ds:0xc0033b7c
c000b3ee:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000b3f3:	01 d0                	add    eax,edx
c000b3f5:	a3 7c 3b 03 c0       	mov    ds:0xc0033b7c,eax
c000b3fa:	a1 7c 3b 03 c0       	mov    eax,ds:0xc0033b7c
c000b3ff:	c3                   	ret    

c000b400 <tcp_alloc>:
c000b400:	83 ec 2c             	sub    esp,0x2c
c000b403:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b407:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b40b:	83 ec 0c             	sub    esp,0xc
c000b40e:	6a 02                	push   0x2
c000b410:	e8 5f c5 ff ff       	call   c0007974 <memp_malloc>
c000b415:	83 c4 10             	add    esp,0x10
c000b418:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b41c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b421:	75 6d                	jne    c000b490 <tcp_alloc+0x90>
c000b423:	e8 38 ff ff ff       	call   c000b360 <tcp_kill_timewait>
c000b428:	83 ec 0c             	sub    esp,0xc
c000b42b:	6a 02                	push   0x2
c000b42d:	e8 42 c5 ff ff       	call   c0007974 <memp_malloc>
c000b432:	83 c4 10             	add    esp,0x10
c000b435:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b439:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b43e:	75 38                	jne    c000b478 <tcp_alloc+0x78>
c000b440:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000b445:	83 ec 0c             	sub    esp,0xc
c000b448:	50                   	push   eax
c000b449:	e8 4a fe ff ff       	call   c000b298 <tcp_kill_prio>
c000b44e:	83 c4 10             	add    esp,0x10
c000b451:	83 ec 0c             	sub    esp,0xc
c000b454:	6a 02                	push   0x2
c000b456:	e8 19 c5 ff ff       	call   c0007974 <memp_malloc>
c000b45b:	83 c4 10             	add    esp,0x10
c000b45e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b462:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b467:	74 0f                	je     c000b478 <tcp_alloc+0x78>
c000b469:	66 a1 ec 67 03 c0    	mov    ax,ds:0xc00367ec
c000b46f:	83 e8 01             	sub    eax,0x1
c000b472:	66 a3 ec 67 03 c0    	mov    ds:0xc00367ec,ax
c000b478:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b47d:	74 11                	je     c000b490 <tcp_alloc+0x90>
c000b47f:	66 a1 ec 67 03 c0    	mov    ax,ds:0xc00367ec
c000b485:	83 e8 01             	sub    eax,0x1
c000b488:	66 a3 ec 67 03 c0    	mov    ds:0xc00367ec,ax
c000b48e:	66 90                	xchg   ax,ax
c000b490:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b495:	0f 84 09 01 00 00    	je     c000b5a4 <tcp_alloc+0x1a4>
c000b49b:	83 ec 04             	sub    esp,0x4
c000b49e:	68 a8 00 00 00       	push   0xa8
c000b4a3:	6a 00                	push   0x0
c000b4a5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b4a9:	e8 42 50 ff ff       	call   c00004f0 <memset>
c000b4ae:	83 c4 10             	add    esp,0x10
c000b4b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4b5:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000b4b9:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c000b4bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4c0:	66 c7 40 72 00 01    	mov    WORD PTR [eax+0x72],0x100
c000b4c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4ca:	66 c7 40 74 00 00    	mov    WORD PTR [eax+0x74],0x0
c000b4d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4d4:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b4da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4de:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b4e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4e8:	c6 40 09 00          	mov    BYTE PTR [eax+0x9],0x0
c000b4ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4f0:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c000b4f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4f8:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b4fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b502:	66 c7 40 4c 06 00    	mov    WORD PTR [eax+0x4c],0x6
c000b508:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b50c:	66 c7 40 48 00 00    	mov    WORD PTR [eax+0x48],0x0
c000b512:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b516:	66 c7 40 4a 06 00    	mov    WORD PTR [eax+0x4a],0x6
c000b51c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b520:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000b526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b52a:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b530:	e8 b3 fe ff ff       	call   c000b3e8 <tcp_next_iss>
c000b535:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b539:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b53d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b541:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000b544:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b548:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b54c:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b54f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b553:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b557:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b55a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b55e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b562:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b565:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b56b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b56f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000b572:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b576:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000b57a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b57e:	c7 80 8c 00 00 00 84 ae 00 c0 	mov    DWORD PTR [eax+0x8c],0xc000ae84
c000b588:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b58c:	c7 80 9c 00 00 00 00 dd 6d 00 	mov    DWORD PTR [eax+0x9c],0x6ddd00
c000b596:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b59a:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000b5a1:	8d 76 00             	lea    esi,[esi+0x0]
c000b5a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5a8:	83 c4 2c             	add    esp,0x2c
c000b5ab:	c3                   	ret    

c000b5ac <tcp_new>:
c000b5ac:	83 ec 0c             	sub    esp,0xc
c000b5af:	83 ec 0c             	sub    esp,0xc
c000b5b2:	6a 40                	push   0x40
c000b5b4:	e8 47 fe ff ff       	call   c000b400 <tcp_alloc>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	83 c4 0c             	add    esp,0xc
c000b5bf:	c3                   	ret    

c000b5c0 <tcp_eff_send_mss>:
c000b5c0:	53                   	push   ebx
c000b5c1:	83 ec 28             	sub    esp,0x28
c000b5c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5c8:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b5cd:	83 ec 0c             	sub    esp,0xc
c000b5d0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b5d4:	e8 2b 80 00 00       	call   c0013604 <ip_route>
c000b5d9:	83 c4 10             	add    esp,0x10
c000b5dc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5e0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b5e5:	74 3d                	je     c000b624 <tcp_eff_send_mss+0x64>
c000b5e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5eb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b5ee:	0f b7 c0             	movzx  eax,ax
c000b5f1:	85 c0                	test   eax,eax
c000b5f3:	74 2f                	je     c000b624 <tcp_eff_send_mss+0x64>
c000b5f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5f9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b5fc:	83 e8 28             	sub    eax,0x28
c000b5ff:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b604:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b608:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000b60d:	0f b7 d8             	movzx  ebx,ax
c000b610:	0f b7 ca             	movzx  ecx,dx
c000b613:	39 cb                	cmp    ebx,ecx
c000b615:	76 05                	jbe    c000b61c <tcp_eff_send_mss+0x5c>
c000b617:	89 d0                	mov    eax,edx
c000b619:	8d 76 00             	lea    esi,[esi+0x0]
c000b61c:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b621:	8d 76 00             	lea    esi,[esi+0x0]
c000b624:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b628:	83 c4 28             	add    esp,0x28
c000b62b:	5b                   	pop    ebx
c000b62c:	c3                   	ret    
c000b62d:	8d 76 00             	lea    esi,[esi+0x0]

c000b630 <tcp_connect>:
c000b630:	83 ec 2c             	sub    esp,0x2c
c000b633:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b637:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b63c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b640:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b643:	85 c0                	test   eax,eax
c000b645:	74 1d                	je     c000b664 <tcp_connect+0x34>
c000b647:	83 ec 08             	sub    esp,0x8
c000b64a:	68 64 02 03 c0       	push   0xc0030264
c000b64f:	68 c6 fa 02 c0       	push   0xc002fac6
c000b654:	e8 3b 45 01 00       	call   c001fb94 <CPrintf>
c000b659:	83 c4 10             	add    esp,0x10
c000b65c:	b0 f7                	mov    al,0xf7
c000b65e:	e9 39 02 00 00       	jmp    c000b89c <tcp_connect+0x26c>
c000b663:	90                   	nop
c000b664:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b669:	74 25                	je     c000b690 <tcp_connect+0x60>
c000b66b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b66f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b673:	8b 12                	mov    edx,DWORD PTR [edx]
c000b675:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b678:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b67c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b680:	66 89 42 22          	mov    WORD PTR [edx+0x22],ax
c000b684:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b688:	85 c0                	test   eax,eax
c000b68a:	74 18                	je     c000b6a4 <tcp_connect+0x74>
c000b68c:	eb 0a                	jmp    c000b698 <tcp_connect+0x68>
c000b68e:	66 90                	xchg   ax,ax
c000b690:	b0 fa                	mov    al,0xfa
c000b692:	e9 05 02 00 00       	jmp    c000b89c <tcp_connect+0x26c>
c000b697:	90                   	nop
c000b698:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b69c:	8b 00                	mov    eax,DWORD PTR [eax]
c000b69e:	85 c0                	test   eax,eax
c000b6a0:	75 3a                	jne    c000b6dc <tcp_connect+0xac>
c000b6a2:	66 90                	xchg   ax,ax
c000b6a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6a8:	83 c0 04             	add    eax,0x4
c000b6ab:	83 ec 0c             	sub    esp,0xc
c000b6ae:	50                   	push   eax
c000b6af:	e8 50 7f 00 00       	call   c0013604 <ip_route>
c000b6b4:	83 c4 10             	add    esp,0x10
c000b6b7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b6bb:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b6c0:	75 0a                	jne    c000b6cc <tcp_connect+0x9c>
c000b6c2:	b0 fc                	mov    al,0xfc
c000b6c4:	e9 d3 01 00 00       	jmp    c000b89c <tcp_connect+0x26c>
c000b6c9:	8d 76 00             	lea    esi,[esi+0x0]
c000b6cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6d0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b6d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6d7:	89 10                	mov    DWORD PTR [eax],edx
c000b6d9:	8d 76 00             	lea    esi,[esi+0x0]
c000b6dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6e0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b6e3:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b6e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6ec:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b6ef:	0f b7 c0             	movzx  eax,ax
c000b6f2:	85 c0                	test   eax,eax
c000b6f4:	75 0e                	jne    c000b704 <tcp_connect+0xd4>
c000b6f6:	e8 19 e7 ff ff       	call   c0009e14 <tcp_new_port>
c000b6fb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b6ff:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c000b703:	90                   	nop
c000b704:	e8 df fc ff ff       	call   c000b3e8 <tcp_next_iss>
c000b709:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b70d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b711:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c000b718:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b71c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b720:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b723:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b727:	8d 50 ff             	lea    edx,[eax-0x1]
c000b72a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b72e:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b731:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b735:	8d 50 ff             	lea    edx,[eax-0x1]
c000b738:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b73c:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b73f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b743:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b749:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b74d:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b753:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b757:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000b75a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b75e:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000b761:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b765:	66 c7 40 60 60 08    	mov    WORD PTR [eax+0x60],0x860
c000b76b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b76f:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b775:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b779:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b77c:	0f b7 c0             	movzx  eax,ax
c000b77f:	83 ec 08             	sub    esp,0x8
c000b782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b786:	50                   	push   eax
c000b787:	e8 34 fe ff ff       	call   c000b5c0 <tcp_eff_send_mss>
c000b78c:	83 c4 10             	add    esp,0x10
c000b78f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b793:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000b797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b79b:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b7a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7a5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b7a8:	89 c2                	mov    edx,eax
c000b7aa:	c1 e2 02             	shl    edx,0x2
c000b7ad:	01 d0                	add    eax,edx
c000b7af:	d1 e0                	shl    eax,1
c000b7b1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b7b5:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000b7b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7bd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b7c1:	89 90 90 00 00 00    	mov    DWORD PTR [eax+0x90],edx
c000b7c7:	83 ec 08             	sub    esp,0x8
c000b7ca:	6a 02                	push   0x2
c000b7cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b7d0:	e8 1b 40 00 00       	call   c000f7f0 <tcp_enqueue_flags>
c000b7d5:	83 c4 10             	add    esp,0x10
c000b7d8:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b7dc:	0f be 44 24 13       	movsx  eax,BYTE PTR [esp+0x13]
c000b7e1:	85 c0                	test   eax,eax
c000b7e3:	0f 85 af 00 00 00    	jne    c000b898 <tcp_connect+0x268>
c000b7e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7ed:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b7f4:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c000b7f9:	85 c0                	test   eax,eax
c000b7fb:	74 6f                	je     c000b86c <tcp_connect+0x23c>
c000b7fd:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b802:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b806:	75 10                	jne    c000b818 <tcp_connect+0x1e8>
c000b808:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b80d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b810:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000b815:	eb 49                	jmp    c000b860 <tcp_connect+0x230>
c000b817:	90                   	nop
c000b818:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b81d:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000b822:	eb 30                	jmp    c000b854 <tcp_connect+0x224>
c000b824:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b829:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b82c:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b830:	75 12                	jne    c000b844 <tcp_connect+0x214>
c000b832:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b837:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b83b:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000b83e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b841:	eb 1d                	jmp    c000b860 <tcp_connect+0x230>
c000b843:	90                   	nop
c000b844:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b849:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b84c:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000b851:	8d 76 00             	lea    esi,[esi+0x0]
c000b854:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b859:	85 c0                	test   eax,eax
c000b85b:	75 c7                	jne    c000b824 <tcp_connect+0x1f4>
c000b85d:	8d 76 00             	lea    esi,[esi+0x0]
c000b860:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b864:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000b86b:	90                   	nop
c000b86c:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000b872:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b876:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b879:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b87d:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000b882:	e8 95 52 00 00       	call   c0010b1c <tcp_timer_needed>
c000b887:	83 ec 0c             	sub    esp,0xc
c000b88a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b88e:	e8 f9 45 00 00       	call   c000fe8c <tcp_output>
c000b893:	83 c4 10             	add    esp,0x10
c000b896:	66 90                	xchg   ax,ax
c000b898:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c000b89c:	83 c4 2c             	add    esp,0x2c
c000b89f:	c3                   	ret    

c000b8a0 <tcp_debug_state_str>:
c000b8a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8a4:	8b 04 85 e0 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfc20]
c000b8ab:	c3                   	ret    

c000b8ac <tcp_timewait_input>:
c000b8ac:	53                   	push   ebx
c000b8ad:	83 ec 08             	sub    esp,0x8
c000b8b0:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000b8b5:	0f b6 c0             	movzx  eax,al
c000b8b8:	83 e0 04             	and    eax,0x4
c000b8bb:	74 07                	je     c000b8c4 <tcp_timewait_input+0x18>
c000b8bd:	b0 00                	mov    al,0x0
c000b8bf:	e9 e8 00 00 00       	jmp    c000b9ac <tcp_timewait_input+0x100>
c000b8c4:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000b8c9:	0f b6 c0             	movzx  eax,al
c000b8cc:	83 e0 02             	and    eax,0x2
c000b8cf:	0f 84 83 00 00 00    	je     c000b958 <tcp_timewait_input+0xac>
c000b8d5:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000b8db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8df:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b8e2:	29 c2                	sub    edx,eax
c000b8e4:	89 d0                	mov    eax,edx
c000b8e6:	0f 88 88 00 00 00    	js     c000b974 <tcp_timewait_input+0xc8>
c000b8ec:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000b8f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8f6:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000b8f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8fd:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000b900:	0f b7 c0             	movzx  eax,ax
c000b903:	01 c8                	add    eax,ecx
c000b905:	29 c2                	sub    edx,eax
c000b907:	89 d0                	mov    eax,edx
c000b909:	85 c0                	test   eax,eax
c000b90b:	7f 67                	jg     c000b974 <tcp_timewait_input+0xc8>
c000b90d:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000b912:	66 8b 00             	mov    ax,WORD PTR [eax]
c000b915:	0f b7 c8             	movzx  ecx,ax
c000b918:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000b91d:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000b921:	0f b7 d0             	movzx  edx,ax
c000b924:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000b92a:	0f b7 d8             	movzx  ebx,ax
c000b92d:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000b932:	01 c3                	add    ebx,eax
c000b934:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000b939:	83 ec 08             	sub    esp,0x8
c000b93c:	51                   	push   ecx
c000b93d:	52                   	push   edx
c000b93e:	68 90 68 03 c0       	push   0xc0036890
c000b943:	68 98 68 03 c0       	push   0xc0036898
c000b948:	53                   	push   ebx
c000b949:	50                   	push   eax
c000b94a:	e8 c9 49 00 00       	call   c0010318 <tcp_rst>
c000b94f:	83 c4 20             	add    esp,0x20
c000b952:	b0 00                	mov    al,0x0
c000b954:	eb 56                	jmp    c000b9ac <tcp_timewait_input+0x100>
c000b956:	66 90                	xchg   ax,ax
c000b958:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000b95d:	0f b6 c0             	movzx  eax,al
c000b960:	83 e0 01             	and    eax,0x1
c000b963:	74 0f                	je     c000b974 <tcp_timewait_input+0xc8>
c000b965:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b96b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b96f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000b972:	66 90                	xchg   ax,ax
c000b974:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000b97a:	0f b7 c0             	movzx  eax,ax
c000b97d:	85 c0                	test   eax,eax
c000b97f:	74 27                	je     c000b9a8 <tcp_timewait_input+0xfc>
c000b981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b985:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b988:	83 c8 02             	or     eax,0x2
c000b98b:	88 c2                	mov    dl,al
c000b98d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b991:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b994:	83 ec 0c             	sub    esp,0xc
c000b997:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b99b:	e8 ec 44 00 00       	call   c000fe8c <tcp_output>
c000b9a0:	83 c4 10             	add    esp,0x10
c000b9a3:	eb 07                	jmp    c000b9ac <tcp_timewait_input+0x100>
c000b9a5:	8d 76 00             	lea    esi,[esi+0x0]
c000b9a8:	b0 00                	mov    al,0x0
c000b9aa:	66 90                	xchg   ax,ax
c000b9ac:	83 c4 08             	add    esp,0x8
c000b9af:	5b                   	pop    ebx
c000b9b0:	c3                   	ret    
c000b9b1:	8d 76 00             	lea    esi,[esi+0x0]

c000b9b4 <tcp_oos_insert_segment>:
c000b9b4:	53                   	push   ebx
c000b9b5:	83 ec 18             	sub    esp,0x18
c000b9b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9bc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9bf:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000b9c3:	0f b7 c0             	movzx  eax,ax
c000b9c6:	83 ec 0c             	sub    esp,0xc
c000b9c9:	50                   	push   eax
c000b9ca:	e8 19 52 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000b9cf:	83 c4 10             	add    esp,0x10
c000b9d2:	0f b7 c0             	movzx  eax,ax
c000b9d5:	83 e0 01             	and    eax,0x1
c000b9d8:	0f 84 8e 00 00 00    	je     c000ba6c <tcp_oos_insert_segment+0xb8>
c000b9de:	83 ec 0c             	sub    esp,0xc
c000b9e1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b9e5:	e8 2e e6 ff ff       	call   c000a018 <tcp_segs_free>
c000b9ea:	83 c4 10             	add    esp,0x10
c000b9ed:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000b9f5:	e9 16 01 00 00       	jmp    c000bb10 <tcp_oos_insert_segment+0x15c>
c000b9fa:	66 90                	xchg   ax,ax
c000b9fc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ba00:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ba03:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ba07:	0f b7 c0             	movzx  eax,ax
c000ba0a:	83 ec 0c             	sub    esp,0xc
c000ba0d:	50                   	push   eax
c000ba0e:	e8 d5 51 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ba13:	83 c4 10             	add    esp,0x10
c000ba16:	0f b7 c0             	movzx  eax,ax
c000ba19:	83 e0 01             	and    eax,0x1
c000ba1c:	74 2a                	je     c000ba48 <tcp_oos_insert_segment+0x94>
c000ba1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba22:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ba25:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000ba29:	83 ec 0c             	sub    esp,0xc
c000ba2c:	6a 01                	push   0x1
c000ba2e:	e8 b5 51 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ba33:	83 c4 10             	add    esp,0x10
c000ba36:	89 c1                	mov    ecx,eax
c000ba38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba3c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ba3f:	89 d8                	mov    eax,ebx
c000ba41:	09 c8                	or     eax,ecx
c000ba43:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000ba47:	90                   	nop
c000ba48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ba4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ba50:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ba54:	8b 00                	mov    eax,DWORD PTR [eax]
c000ba56:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ba5a:	83 ec 0c             	sub    esp,0xc
c000ba5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ba61:	e8 6e e5 ff ff       	call   c0009fd4 <tcp_seg_free>
c000ba66:	83 c4 10             	add    esp,0x10
c000ba69:	8d 76 00             	lea    esi,[esi+0x0]
c000ba6c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ba71:	74 35                	je     c000baa8 <tcp_oos_insert_segment+0xf4>
c000ba73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba77:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ba7a:	0f b7 d0             	movzx  edx,ax
c000ba7d:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ba82:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ba85:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ba89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ba8c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ba8f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ba93:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ba96:	0f b7 c0             	movzx  eax,ax
c000ba99:	01 d0                	add    eax,edx
c000ba9b:	29 c1                	sub    ecx,eax
c000ba9d:	89 c8                	mov    eax,ecx
c000ba9f:	0f 89 57 ff ff ff    	jns    c000b9fc <tcp_oos_insert_segment+0x48>
c000baa5:	8d 76 00             	lea    esi,[esi+0x0]
c000baa8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000baad:	74 61                	je     c000bb10 <tcp_oos_insert_segment+0x15c>
c000baaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bab3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bab6:	0f b7 d0             	movzx  edx,ax
c000bab9:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000babe:	01 c2                	add    edx,eax
c000bac0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bac4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bac7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000baca:	29 c2                	sub    edx,eax
c000bacc:	89 d0                	mov    eax,edx
c000bace:	85 c0                	test   eax,eax
c000bad0:	7e 3e                	jle    c000bb10 <tcp_oos_insert_segment+0x15c>
c000bad2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bad6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bad9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000badc:	89 c2                	mov    edx,eax
c000bade:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bae3:	89 d3                	mov    ebx,edx
c000bae5:	29 c3                	sub    ebx,eax
c000bae7:	89 d8                	mov    eax,ebx
c000bae9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000baed:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000baf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baf5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000baf8:	0f b7 d0             	movzx  edx,ax
c000bafb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bb02:	83 ec 08             	sub    esp,0x8
c000bb05:	52                   	push   edx
c000bb06:	50                   	push   eax
c000bb07:	e8 20 ce ff ff       	call   c000892c <pbuf_realloc>
c000bb0c:	83 c4 10             	add    esp,0x10
c000bb0f:	90                   	nop
c000bb10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb14:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000bb18:	89 10                	mov    DWORD PTR [eax],edx
c000bb1a:	90                   	nop
c000bb1b:	83 c4 18             	add    esp,0x18
c000bb1e:	5b                   	pop    ebx
c000bb1f:	c3                   	ret    

c000bb20 <tcp_receive>:
c000bb20:	57                   	push   edi
c000bb21:	56                   	push   esi
c000bb22:	53                   	push   ebx
c000bb23:	83 ec 30             	sub    esp,0x30
c000bb26:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bb2e:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000bb33:	0f b6 c0             	movzx  eax,al
c000bb36:	83 e0 10             	and    eax,0x10
c000bb39:	0f 84 e5 07 00 00    	je     c000c324 <tcp_receive+0x804>
c000bb3f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb43:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bb46:	0f b7 d0             	movzx  edx,ax
c000bb49:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb4d:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000bb50:	01 d0                	add    eax,edx
c000bb52:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb56:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb5a:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000bb5d:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bb62:	29 c2                	sub    edx,eax
c000bb64:	89 d0                	mov    eax,edx
c000bb66:	78 50                	js     c000bbb8 <tcp_receive+0x98>
c000bb68:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb6c:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000bb6f:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bb74:	39 c2                	cmp    edx,eax
c000bb76:	75 14                	jne    c000bb8c <tcp_receive+0x6c>
c000bb78:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb7c:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bb7f:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bb84:	29 c2                	sub    edx,eax
c000bb86:	89 d0                	mov    eax,edx
c000bb88:	78 2e                	js     c000bbb8 <tcp_receive+0x98>
c000bb8a:	66 90                	xchg   ax,ax
c000bb8c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb90:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bb93:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bb98:	39 c2                	cmp    edx,eax
c000bb9a:	75 74                	jne    c000bc10 <tcp_receive+0xf0>
c000bb9c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bba1:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000bba5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bba9:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bbac:	0f b7 d2             	movzx  edx,dx
c000bbaf:	0f b7 c0             	movzx  eax,ax
c000bbb2:	39 c2                	cmp    edx,eax
c000bbb4:	76 5a                	jbe    c000bc10 <tcp_receive+0xf0>
c000bbb6:	66 90                	xchg   ax,ax
c000bbb8:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bbbd:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000bbc1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bbc5:	66 89 42 60          	mov    WORD PTR [edx+0x60],ax
c000bbc9:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000bbcf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbd3:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000bbd6:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bbdc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbe0:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000bbe3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbe7:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bbea:	0f b7 c0             	movzx  eax,ax
c000bbed:	85 c0                	test   eax,eax
c000bbef:	74 1f                	je     c000bc10 <tcp_receive+0xf0>
c000bbf1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbf5:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000bbfb:	0f b6 c0             	movzx  eax,al
c000bbfe:	85 c0                	test   eax,eax
c000bc00:	74 0e                	je     c000bc10 <tcp_receive+0xf0>
c000bc02:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc06:	c6 80 a4 00 00 00 00 	mov    BYTE PTR [eax+0xa4],0x0
c000bc0d:	8d 76 00             	lea    esi,[esi+0x0]
c000bc10:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bc16:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc1a:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bc1d:	29 c2                	sub    edx,eax
c000bc1f:	89 d0                	mov    eax,edx
c000bc21:	85 c0                	test   eax,eax
c000bc23:	0f 8f ff 00 00 00    	jg     c000bd28 <tcp_receive+0x208>
c000bc29:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc2d:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000bc33:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000bc39:	0f b7 c0             	movzx  eax,ax
c000bc3c:	85 c0                	test   eax,eax
c000bc3e:	0f 85 cc 00 00 00    	jne    c000bd10 <tcp_receive+0x1f0>
c000bc44:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc48:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bc4b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc4f:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bc52:	0f b7 c0             	movzx  eax,ax
c000bc55:	01 d0                	add    eax,edx
c000bc57:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000bc5b:	0f 85 af 00 00 00    	jne    c000bd10 <tcp_receive+0x1f0>
c000bc61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc65:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000bc69:	98                   	cwde   
c000bc6a:	85 c0                	test   eax,eax
c000bc6c:	0f 88 9e 00 00 00    	js     c000bd10 <tcp_receive+0x1f0>
c000bc72:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc76:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000bc79:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bc7e:	39 c2                	cmp    edx,eax
c000bc80:	0f 85 8a 00 00 00    	jne    c000bd10 <tcp_receive+0x1f0>
c000bc86:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000bc8e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc92:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000bc95:	83 c0 01             	add    eax,0x1
c000bc98:	88 c2                	mov    dl,al
c000bc9a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc9e:	88 50 54             	mov    BYTE PTR [eax+0x54],dl
c000bca1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bca5:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000bca8:	0f b6 c0             	movzx  eax,al
c000bcab:	83 f8 03             	cmp    eax,0x3
c000bcae:	76 40                	jbe    c000bcf0 <tcp_receive+0x1d0>
c000bcb0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcb4:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bcb8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcbc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bcbf:	01 d0                	add    eax,edx
c000bcc1:	89 c2                	mov    edx,eax
c000bcc3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcc7:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000bccb:	0f b7 d2             	movzx  edx,dx
c000bcce:	0f b7 c0             	movzx  eax,ax
c000bcd1:	39 c2                	cmp    edx,eax
c000bcd3:	76 3b                	jbe    c000bd10 <tcp_receive+0x1f0>
c000bcd5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcd9:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bcdd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bce1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bce4:	01 d0                	add    eax,edx
c000bce6:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bcea:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000bcee:	eb 20                	jmp    c000bd10 <tcp_receive+0x1f0>
c000bcf0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcf4:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000bcf7:	0f b6 c0             	movzx  eax,al
c000bcfa:	83 f8 03             	cmp    eax,0x3
c000bcfd:	75 11                	jne    c000bd10 <tcp_receive+0x1f0>
c000bcff:	83 ec 0c             	sub    esp,0xc
c000bd02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bd06:	e8 d9 48 00 00       	call   c00105e4 <tcp_rexmit_fast>
c000bd0b:	83 c4 10             	add    esp,0x10
c000bd0e:	66 90                	xchg   ax,ax
c000bd10:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bd15:	0f 85 99 04 00 00    	jne    c000c1b4 <tcp_receive+0x694>
c000bd1b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd1f:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bd23:	e9 8c 04 00 00       	jmp    c000c1b4 <tcp_receive+0x694>
c000bd28:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bd2e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd32:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bd35:	29 c2                	sub    edx,eax
c000bd37:	89 d0                	mov    eax,edx
c000bd39:	83 e8 01             	sub    eax,0x1
c000bd3c:	0f 88 4a 03 00 00    	js     c000c08c <tcp_receive+0x56c>
c000bd42:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bd48:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd4c:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000bd4f:	29 c2                	sub    edx,eax
c000bd51:	89 d0                	mov    eax,edx
c000bd53:	85 c0                	test   eax,eax
c000bd55:	0f 8f 31 03 00 00    	jg     c000c08c <tcp_receive+0x56c>
c000bd5b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd5f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bd62:	0f b6 c0             	movzx  eax,al
c000bd65:	83 e0 04             	and    eax,0x4
c000bd68:	74 22                	je     c000bd8c <tcp_receive+0x26c>
c000bd6a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd6e:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bd71:	83 e0 fb             	and    eax,0xfffffffb
c000bd74:	88 c2                	mov    dl,al
c000bd76:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd7a:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000bd7d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd81:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000bd84:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bd88:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000bd8c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd90:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000bd94:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd98:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000bd9b:	98                   	cwde   
c000bd9c:	c1 f8 03             	sar    eax,0x3
c000bd9f:	89 c2                	mov    edx,eax
c000bda1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bda5:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000bda9:	01 d0                	add    eax,edx
c000bdab:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bdaf:	66 89 42 4c          	mov    WORD PTR [edx+0x4c],ax
c000bdb3:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bdb8:	89 c2                	mov    edx,eax
c000bdba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdbe:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bdc1:	89 d7                	mov    edi,edx
c000bdc3:	29 c7                	sub    edi,eax
c000bdc5:	89 f8                	mov    eax,edi
c000bdc7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bdcb:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000bdcf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdd3:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000bdd7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bddb:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000bdde:	01 d0                	add    eax,edx
c000bde0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bde4:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000bde8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdec:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bdf0:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bdf6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdfa:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000bdfd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be01:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000be04:	83 f8 03             	cmp    eax,0x3
c000be07:	0f 86 db 01 00 00    	jbe    c000bfe8 <tcp_receive+0x4c8>
c000be0d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be11:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000be15:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be19:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000be1c:	0f b7 d2             	movzx  edx,dx
c000be1f:	0f b7 c0             	movzx  eax,ax
c000be22:	39 c2                	cmp    edx,eax
c000be24:	73 4a                	jae    c000be70 <tcp_receive+0x350>
c000be26:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be2a:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000be2e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be32:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000be35:	01 d0                	add    eax,edx
c000be37:	89 c2                	mov    edx,eax
c000be39:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be3d:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000be41:	0f b7 d2             	movzx  edx,dx
c000be44:	0f b7 c0             	movzx  eax,ax
c000be47:	39 c2                	cmp    edx,eax
c000be49:	0f 86 99 01 00 00    	jbe    c000bfe8 <tcp_receive+0x4c8>
c000be4f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be53:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000be57:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be5b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000be5e:	01 d0                	add    eax,edx
c000be60:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000be64:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000be68:	e9 7b 01 00 00       	jmp    c000bfe8 <tcp_receive+0x4c8>
c000be6d:	8d 76 00             	lea    esi,[esi+0x0]
c000be70:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be74:	66 8b 48 56          	mov    cx,WORD PTR [eax+0x56]
c000be78:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be7c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000be7f:	0f b7 d0             	movzx  edx,ax
c000be82:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be86:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000be89:	0f b7 c0             	movzx  eax,ax
c000be8c:	0f af d0             	imul   edx,eax
c000be8f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be93:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000be97:	0f b7 d8             	movzx  ebx,ax
c000be9a:	89 d0                	mov    eax,edx
c000be9c:	89 c2                	mov    edx,eax
c000be9e:	c1 fa 1f             	sar    edx,0x1f
c000bea1:	f7 fb                	idiv   ebx
c000bea3:	01 c8                	add    eax,ecx
c000bea5:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000beaa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000beae:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000beb2:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c000beb7:	0f b7 c0             	movzx  eax,ax
c000beba:	39 c2                	cmp    edx,eax
c000bebc:	0f 86 26 01 00 00    	jbe    c000bfe8 <tcp_receive+0x4c8>
c000bec2:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bec6:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000becb:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000becf:	e9 14 01 00 00       	jmp    c000bfe8 <tcp_receive+0x4c8>
c000bed4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bed8:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bedb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bee3:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bee6:	8b 10                	mov    edx,DWORD PTR [eax]
c000bee8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000beec:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000beef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bef3:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000bef6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000befa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000befd:	83 ec 0c             	sub    esp,0xc
c000bf00:	50                   	push   eax
c000bf01:	e8 2a cc ff ff       	call   c0008b30 <pbuf_clen>
c000bf06:	83 c4 10             	add    esp,0x10
c000bf09:	0f b6 c0             	movzx  eax,al
c000bf0c:	0f b7 d3             	movzx  edx,bx
c000bf0f:	0f b7 c0             	movzx  eax,ax
c000bf12:	39 c2                	cmp    edx,eax
c000bf14:	73 16                	jae    c000bf2c <tcp_receive+0x40c>
c000bf16:	83 ec 08             	sub    esp,0x8
c000bf19:	68 0c 04 03 c0       	push   0xc003040c
c000bf1e:	68 c6 fa 02 c0       	push   0xc002fac6
c000bf23:	e8 6c 3c 01 00       	call   c001fb94 <CPrintf>
c000bf28:	83 c4 10             	add    esp,0x10
c000bf2b:	90                   	nop
c000bf2c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf30:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000bf33:	0f b7 c0             	movzx  eax,ax
c000bf36:	85 c0                	test   eax,eax
c000bf38:	74 36                	je     c000bf70 <tcp_receive+0x450>
c000bf3a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bf3e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bf41:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000bf45:	0f b7 c0             	movzx  eax,ax
c000bf48:	83 ec 0c             	sub    esp,0xc
c000bf4b:	50                   	push   eax
c000bf4c:	e8 97 4c ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000bf51:	83 c4 10             	add    esp,0x10
c000bf54:	0f b7 c0             	movzx  eax,ax
c000bf57:	83 e0 01             	and    eax,0x1
c000bf5a:	74 14                	je     c000bf70 <tcp_receive+0x450>
c000bf5c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf60:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000bf63:	83 e8 01             	sub    eax,0x1
c000bf66:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bf6a:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000bf6e:	66 90                	xchg   ax,ax
c000bf70:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bf74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bf77:	83 ec 0c             	sub    esp,0xc
c000bf7a:	50                   	push   eax
c000bf7b:	e8 b0 cb ff ff       	call   c0008b30 <pbuf_clen>
c000bf80:	83 c4 10             	add    esp,0x10
c000bf83:	88 c1                	mov    cl,al
c000bf85:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf89:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000bf8c:	0f b6 c1             	movzx  eax,cl
c000bf8f:	89 d7                	mov    edi,edx
c000bf91:	29 c7                	sub    edi,eax
c000bf93:	89 f8                	mov    eax,edi
c000bf95:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bf99:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000bf9d:	83 ec 0c             	sub    esp,0xc
c000bfa0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000bfa4:	e8 2b e0 ff ff       	call   c0009fd4 <tcp_seg_free>
c000bfa9:	83 c4 10             	add    esp,0x10
c000bfac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfb0:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000bfb3:	0f b7 c0             	movzx  eax,ax
c000bfb6:	85 c0                	test   eax,eax
c000bfb8:	74 2e                	je     c000bfe8 <tcp_receive+0x4c8>
c000bfba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfbe:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bfc1:	85 c0                	test   eax,eax
c000bfc3:	75 23                	jne    c000bfe8 <tcp_receive+0x4c8>
c000bfc5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfc9:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000bfcc:	85 c0                	test   eax,eax
c000bfce:	75 18                	jne    c000bfe8 <tcp_receive+0x4c8>
c000bfd0:	83 ec 08             	sub    esp,0x8
c000bfd3:	68 34 04 03 c0       	push   0xc0030434
c000bfd8:	68 c6 fa 02 c0       	push   0xc002fac6
c000bfdd:	e8 b2 3b 01 00       	call   c001fb94 <CPrintf>
c000bfe2:	83 c4 10             	add    esp,0x10
c000bfe5:	8d 76 00             	lea    esi,[esi+0x0]
c000bfe8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfec:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bfef:	85 c0                	test   eax,eax
c000bff1:	74 69                	je     c000c05c <tcp_receive+0x53c>
c000bff3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bff7:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bffa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bffd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c000:	83 ec 0c             	sub    esp,0xc
c000c003:	50                   	push   eax
c000c004:	e8 03 4c ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000c009:	83 c4 10             	add    esp,0x10
c000c00c:	89 c3                	mov    ebx,eax
c000c00e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c012:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c015:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c018:	0f b7 f0             	movzx  esi,ax
c000c01b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c01f:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c022:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c025:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c029:	0f b7 c0             	movzx  eax,ax
c000c02c:	83 ec 0c             	sub    esp,0xc
c000c02f:	50                   	push   eax
c000c030:	e8 b3 4b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c035:	83 c4 10             	add    esp,0x10
c000c038:	0f b7 c0             	movzx  eax,ax
c000c03b:	83 e0 03             	and    eax,0x3
c000c03e:	0f 95 c0             	setne  al
c000c041:	0f b6 c0             	movzx  eax,al
c000c044:	01 f0                	add    eax,esi
c000c046:	8d 14 03             	lea    edx,[ebx+eax*1]
c000c049:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000c04e:	29 c2                	sub    edx,eax
c000c050:	89 d0                	mov    eax,edx
c000c052:	85 c0                	test   eax,eax
c000c054:	0f 8e 7a fe ff ff    	jle    c000bed4 <tcp_receive+0x3b4>
c000c05a:	66 90                	xchg   ax,ax
c000c05c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c060:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c063:	85 c0                	test   eax,eax
c000c065:	75 0d                	jne    c000c074 <tcp_receive+0x554>
c000c067:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c06b:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000c071:	eb 0d                	jmp    c000c080 <tcp_receive+0x560>
c000c073:	90                   	nop
c000c074:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c078:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000c07e:	66 90                	xchg   ax,ax
c000c080:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c084:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000c088:	eb 0e                	jmp    c000c098 <tcp_receive+0x578>
c000c08a:	66 90                	xchg   ax,ax
c000c08c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c090:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000c096:	66 90                	xchg   ax,ax
c000c098:	e9 17 01 00 00       	jmp    c000c1b4 <tcp_receive+0x694>
c000c09d:	8d 76 00             	lea    esi,[esi+0x0]
c000c0a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0a4:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c0a7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0ab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0af:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c0b2:	8b 10                	mov    edx,DWORD PTR [eax]
c000c0b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0b8:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000c0bb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0bf:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000c0c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c0c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c0c9:	83 ec 0c             	sub    esp,0xc
c000c0cc:	50                   	push   eax
c000c0cd:	e8 5e ca ff ff       	call   c0008b30 <pbuf_clen>
c000c0d2:	83 c4 10             	add    esp,0x10
c000c0d5:	0f b6 c0             	movzx  eax,al
c000c0d8:	0f b7 d3             	movzx  edx,bx
c000c0db:	0f b7 c0             	movzx  eax,ax
c000c0de:	39 c2                	cmp    edx,eax
c000c0e0:	73 16                	jae    c000c0f8 <tcp_receive+0x5d8>
c000c0e2:	83 ec 08             	sub    esp,0x8
c000c0e5:	68 0c 04 03 c0       	push   0xc003040c
c000c0ea:	68 c6 fa 02 c0       	push   0xc002fac6
c000c0ef:	e8 a0 3a 01 00       	call   c001fb94 <CPrintf>
c000c0f4:	83 c4 10             	add    esp,0x10
c000c0f7:	90                   	nop
c000c0f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0fc:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c0ff:	0f b7 c0             	movzx  eax,ax
c000c102:	85 c0                	test   eax,eax
c000c104:	74 36                	je     c000c13c <tcp_receive+0x61c>
c000c106:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c10a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c10d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c111:	0f b7 c0             	movzx  eax,ax
c000c114:	83 ec 0c             	sub    esp,0xc
c000c117:	50                   	push   eax
c000c118:	e8 cb 4a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c11d:	83 c4 10             	add    esp,0x10
c000c120:	0f b7 c0             	movzx  eax,ax
c000c123:	83 e0 01             	and    eax,0x1
c000c126:	74 14                	je     c000c13c <tcp_receive+0x61c>
c000c128:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c12c:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c12f:	83 e8 01             	sub    eax,0x1
c000c132:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c136:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000c13a:	66 90                	xchg   ax,ax
c000c13c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c140:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c143:	83 ec 0c             	sub    esp,0xc
c000c146:	50                   	push   eax
c000c147:	e8 e4 c9 ff ff       	call   c0008b30 <pbuf_clen>
c000c14c:	83 c4 10             	add    esp,0x10
c000c14f:	88 c1                	mov    cl,al
c000c151:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c155:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000c158:	0f b6 c1             	movzx  eax,cl
c000c15b:	89 d6                	mov    esi,edx
c000c15d:	29 c6                	sub    esi,eax
c000c15f:	89 f0                	mov    eax,esi
c000c161:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c165:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000c169:	83 ec 0c             	sub    esp,0xc
c000c16c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c170:	e8 5f de ff ff       	call   c0009fd4 <tcp_seg_free>
c000c175:	83 c4 10             	add    esp,0x10
c000c178:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c17c:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000c17f:	0f b7 c0             	movzx  eax,ax
c000c182:	85 c0                	test   eax,eax
c000c184:	74 2e                	je     c000c1b4 <tcp_receive+0x694>
c000c186:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c18a:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c18d:	85 c0                	test   eax,eax
c000c18f:	75 23                	jne    c000c1b4 <tcp_receive+0x694>
c000c191:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c195:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c198:	85 c0                	test   eax,eax
c000c19a:	75 18                	jne    c000c1b4 <tcp_receive+0x694>
c000c19c:	83 ec 08             	sub    esp,0x8
c000c19f:	68 34 04 03 c0       	push   0xc0030434
c000c1a4:	68 c6 fa 02 c0       	push   0xc002fac6
c000c1a9:	e8 e6 39 01 00       	call   c001fb94 <CPrintf>
c000c1ae:	83 c4 10             	add    esp,0x10
c000c1b1:	8d 76 00             	lea    esi,[esi+0x0]
c000c1b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1b8:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c1bb:	85 c0                	test   eax,eax
c000c1bd:	74 7d                	je     c000c23c <tcp_receive+0x71c>
c000c1bf:	8b 1d b0 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8b0
c000c1c5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1c9:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c1cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c1cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c1d2:	83 ec 0c             	sub    esp,0xc
c000c1d5:	50                   	push   eax
c000c1d6:	e8 31 4a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000c1db:	83 c4 10             	add    esp,0x10
c000c1de:	89 c6                	mov    esi,eax
c000c1e0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1e4:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c1e7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c1ea:	0f b7 f8             	movzx  edi,ax
c000c1ed:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1f1:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c1f4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c1f7:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c1fb:	0f b7 c0             	movzx  eax,ax
c000c1fe:	83 ec 0c             	sub    esp,0xc
c000c201:	50                   	push   eax
c000c202:	e8 e1 49 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	0f b7 c0             	movzx  eax,ax
c000c20d:	83 e0 03             	and    eax,0x3
c000c210:	0f 95 c0             	setne  al
c000c213:	0f b6 c0             	movzx  eax,al
c000c216:	01 f8                	add    eax,edi
c000c218:	01 f0                	add    eax,esi
c000c21a:	29 c3                	sub    ebx,eax
c000c21c:	89 d8                	mov    eax,ebx
c000c21e:	78 1c                	js     c000c23c <tcp_receive+0x71c>
c000c220:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000c226:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c22a:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000c22d:	29 c2                	sub    edx,eax
c000c22f:	89 d0                	mov    eax,edx
c000c231:	85 c0                	test   eax,eax
c000c233:	0f 8e 67 fe ff ff    	jle    c000c0a0 <tcp_receive+0x580>
c000c239:	8d 76 00             	lea    esi,[esi+0x0]
c000c23c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c240:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c243:	85 c0                	test   eax,eax
c000c245:	0f 84 d9 00 00 00    	je     c000c324 <tcp_receive+0x804>
c000c24b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c24f:	8b 50 44             	mov    edx,DWORD PTR [eax+0x44]
c000c252:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000c257:	29 c2                	sub    edx,eax
c000c259:	89 d0                	mov    eax,edx
c000c25b:	0f 89 c3 00 00 00    	jns    c000c324 <tcp_receive+0x804>
c000c261:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000c266:	89 c2                	mov    edx,eax
c000c268:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c26c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c26f:	89 d7                	mov    edi,edx
c000c271:	29 c7                	sub    edi,eax
c000c273:	89 f8                	mov    eax,edi
c000c275:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c27a:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c27f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c283:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c286:	98                   	cwde   
c000c287:	c1 f8 03             	sar    eax,0x3
c000c28a:	89 d6                	mov    esi,edx
c000c28c:	29 c6                	sub    esi,eax
c000c28e:	89 f0                	mov    eax,esi
c000c290:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c295:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c299:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c29c:	89 c2                	mov    edx,eax
c000c29e:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c2a3:	01 d0                	add    eax,edx
c000c2a5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c2a9:	66 89 42 48          	mov    WORD PTR [edx+0x48],ax
c000c2ad:	0f bf 44 24 1e       	movsx  eax,WORD PTR [esp+0x1e]
c000c2b2:	85 c0                	test   eax,eax
c000c2b4:	79 0e                	jns    c000c2c4 <tcp_receive+0x7a4>
c000c2b6:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c2bb:	f7 d8                	neg    eax
c000c2bd:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c2c2:	66 90                	xchg   ax,ax
c000c2c4:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c2c9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2cd:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c2d1:	98                   	cwde   
c000c2d2:	c1 f8 02             	sar    eax,0x2
c000c2d5:	89 d7                	mov    edi,edx
c000c2d7:	29 c7                	sub    edi,eax
c000c2d9:	89 f8                	mov    eax,edi
c000c2db:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c2e0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2e4:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c2e8:	89 c2                	mov    edx,eax
c000c2ea:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c2ef:	01 d0                	add    eax,edx
c000c2f1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c2f5:	66 89 42 4a          	mov    WORD PTR [edx+0x4a],ax
c000c2f9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2fd:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c300:	98                   	cwde   
c000c301:	c1 f8 03             	sar    eax,0x3
c000c304:	89 c2                	mov    edx,eax
c000c306:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c30a:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c30e:	01 d0                	add    eax,edx
c000c310:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c314:	66 89 42 4c          	mov    WORD PTR [edx+0x4c],ax
c000c318:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c31c:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c000c323:	90                   	nop
c000c324:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c32a:	0f b7 c0             	movzx  eax,ax
c000c32d:	85 c0                	test   eax,eax
c000c32f:	0f 84 2f 0e 00 00    	je     c000d164 <tcp_receive+0x1644>
c000c335:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c339:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c33c:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c341:	29 c2                	sub    edx,eax
c000c343:	89 d0                	mov    eax,edx
c000c345:	83 e8 01             	sub    eax,0x1
c000c348:	0f 88 c6 01 00 00    	js     c000c514 <tcp_receive+0x9f4>
c000c34e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c352:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c355:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c35b:	0f b7 c8             	movzx  ecx,ax
c000c35e:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c363:	01 c8                	add    eax,ecx
c000c365:	29 c2                	sub    edx,eax
c000c367:	89 d0                	mov    eax,edx
c000c369:	83 c0 01             	add    eax,0x1
c000c36c:	85 c0                	test   eax,eax
c000c36e:	0f 8f a0 01 00 00    	jg     c000c514 <tcp_receive+0x9f4>
c000c374:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c378:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c37b:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c380:	29 c2                	sub    edx,eax
c000c382:	89 d0                	mov    eax,edx
c000c384:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c388:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c38d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c391:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c396:	85 c0                	test   eax,eax
c000c398:	75 16                	jne    c000c3b0 <tcp_receive+0x890>
c000c39a:	83 ec 08             	sub    esp,0x8
c000c39d:	68 31 06 03 c0       	push   0xc0030631
c000c3a2:	68 c6 fa 02 c0       	push   0xc002fac6
c000c3a7:	e8 e8 37 01 00       	call   c001fb94 <CPrintf>
c000c3ac:	83 c4 10             	add    esp,0x10
c000c3af:	90                   	nop
c000c3b0:	81 7c 24 20 fe 7f 00 00 	cmp    DWORD PTR [esp+0x20],0x7ffe
c000c3b8:	7e 16                	jle    c000c3d0 <tcp_receive+0x8b0>
c000c3ba:	83 ec 08             	sub    esp,0x8
c000c3bd:	68 41 06 03 c0       	push   0xc0030641
c000c3c2:	68 c6 fa 02 c0       	push   0xc002fac6
c000c3c7:	e8 c8 37 01 00       	call   c001fb94 <CPrintf>
c000c3cc:	83 c4 10             	add    esp,0x10
c000c3cf:	90                   	nop
c000c3d0:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c3d5:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c3d9:	0f b7 c0             	movzx  eax,ax
c000c3dc:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c3e0:	0f 8e b6 00 00 00    	jle    c000c49c <tcp_receive+0x97c>
c000c3e6:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c3eb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c3ee:	0f b7 c0             	movzx  eax,ax
c000c3f1:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c3f5:	7e 15                	jle    c000c40c <tcp_receive+0x8ec>
c000c3f7:	83 ec 08             	sub    esp,0x8
c000c3fa:	68 50 06 03 c0       	push   0xc0030650
c000c3ff:	68 c6 fa 02 c0       	push   0xc002fac6
c000c404:	e8 8b 37 01 00       	call   c001fb94 <CPrintf>
c000c409:	83 c4 10             	add    esp,0x10
c000c40c:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c411:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c414:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c418:	29 d0                	sub    eax,edx
c000c41a:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c000c41f:	eb 33                	jmp    c000c454 <tcp_receive+0x934>
c000c421:	8d 76 00             	lea    esi,[esi+0x0]
c000c424:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c428:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c42c:	0f b7 c0             	movzx  eax,ax
c000c42f:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c000c433:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c437:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c43b:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000c43f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c443:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c000c449:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c44d:	8b 00                	mov    eax,DWORD PTR [eax]
c000c44f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c453:	90                   	nop
c000c454:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c458:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c45c:	0f b7 c0             	movzx  eax,ax
c000c45f:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c463:	7f bf                	jg     c000c424 <tcp_receive+0x904>
c000c465:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c469:	f7 d8                	neg    eax
c000c46b:	98                   	cwde   
c000c46c:	83 ec 08             	sub    esp,0x8
c000c46f:	50                   	push   eax
c000c470:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c474:	e8 47 bd ff ff       	call   c00081c0 <pbuf_header>
c000c479:	83 c4 10             	add    esp,0x10
c000c47c:	0f b6 c0             	movzx  eax,al
c000c47f:	85 c0                	test   eax,eax
c000c481:	74 51                	je     c000c4d4 <tcp_receive+0x9b4>
c000c483:	83 ec 08             	sub    esp,0x8
c000c486:	68 60 06 03 c0       	push   0xc0030660
c000c48b:	68 c6 fa 02 c0       	push   0xc002fac6
c000c490:	e8 ff 36 01 00       	call   c001fb94 <CPrintf>
c000c495:	83 c4 10             	add    esp,0x10
c000c498:	eb 3a                	jmp    c000c4d4 <tcp_receive+0x9b4>
c000c49a:	66 90                	xchg   ax,ax
c000c49c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c4a0:	f7 d8                	neg    eax
c000c4a2:	0f bf d0             	movsx  edx,ax
c000c4a5:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c4aa:	83 ec 08             	sub    esp,0x8
c000c4ad:	52                   	push   edx
c000c4ae:	50                   	push   eax
c000c4af:	e8 0c bd ff ff       	call   c00081c0 <pbuf_header>
c000c4b4:	83 c4 10             	add    esp,0x10
c000c4b7:	0f b6 c0             	movzx  eax,al
c000c4ba:	85 c0                	test   eax,eax
c000c4bc:	74 16                	je     c000c4d4 <tcp_receive+0x9b4>
c000c4be:	83 ec 08             	sub    esp,0x8
c000c4c1:	68 60 06 03 c0       	push   0xc0030660
c000c4c6:	68 c6 fa 02 c0       	push   0xc002fac6
c000c4cb:	e8 c4 36 01 00       	call   c001fb94 <CPrintf>
c000c4d0:	83 c4 10             	add    esp,0x10
c000c4d3:	90                   	nop
c000c4d4:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c4d9:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c4df:	89 d1                	mov    ecx,edx
c000c4e1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c4e5:	8b 52 28             	mov    edx,DWORD PTR [edx+0x28]
c000c4e8:	89 ce                	mov    esi,ecx
c000c4ea:	29 d6                	sub    esi,edx
c000c4ec:	89 f2                	mov    edx,esi
c000c4ee:	01 d0                	add    eax,edx
c000c4f0:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c4f6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4fa:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c4fd:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000c502:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c507:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c50d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000c510:	eb 2a                	jmp    c000c53c <tcp_receive+0xa1c>
c000c512:	66 90                	xchg   ax,ax
c000c514:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c51a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c51e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c521:	29 c2                	sub    edx,eax
c000c523:	89 d0                	mov    eax,edx
c000c525:	79 15                	jns    c000c53c <tcp_receive+0xa1c>
c000c527:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c52b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000c52e:	83 c8 02             	or     eax,0x2
c000c531:	88 c2                	mov    dl,al
c000c533:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c537:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000c53a:	66 90                	xchg   ax,ax
c000c53c:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c542:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c546:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c549:	29 c2                	sub    edx,eax
c000c54b:	89 d0                	mov    eax,edx
c000c54d:	0f 88 fd 0b 00 00    	js     c000d150 <tcp_receive+0x1630>
c000c553:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c559:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c55d:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000c560:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c564:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c567:	0f b7 c0             	movzx  eax,ax
c000c56a:	01 c8                	add    eax,ecx
c000c56c:	29 c2                	sub    edx,eax
c000c56e:	89 d0                	mov    eax,edx
c000c570:	83 c0 01             	add    eax,0x1
c000c573:	85 c0                	test   eax,eax
c000c575:	0f 8f d5 0b 00 00    	jg     c000d150 <tcp_receive+0x1630>
c000c57b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c57f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c582:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c587:	39 c2                	cmp    edx,eax
c000c589:	0f 85 1d 07 00 00    	jne    c000ccac <tcp_receive+0x118c>
c000c58f:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c595:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c59a:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c59e:	0f b7 c0             	movzx  eax,ax
c000c5a1:	83 ec 0c             	sub    esp,0xc
c000c5a4:	50                   	push   eax
c000c5a5:	e8 3e 46 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c5aa:	83 c4 10             	add    esp,0x10
c000c5ad:	0f b7 c0             	movzx  eax,ax
c000c5b0:	83 e0 03             	and    eax,0x3
c000c5b3:	0f 95 c0             	setne  al
c000c5b6:	0f b6 c0             	movzx  eax,al
c000c5b9:	01 d8                	add    eax,ebx
c000c5bb:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c5c1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c5c5:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c5c8:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c5ce:	0f b7 d2             	movzx  edx,dx
c000c5d1:	0f b7 c0             	movzx  eax,ax
c000c5d4:	39 c2                	cmp    edx,eax
c000c5d6:	0f 83 2c 01 00 00    	jae    c000c708 <tcp_receive+0xbe8>
c000c5dc:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c5e1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c5e5:	0f b7 c0             	movzx  eax,ax
c000c5e8:	83 ec 0c             	sub    esp,0xc
c000c5eb:	50                   	push   eax
c000c5ec:	e8 f7 45 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c5f1:	83 c4 10             	add    esp,0x10
c000c5f4:	0f b7 c0             	movzx  eax,ax
c000c5f7:	83 e0 01             	and    eax,0x1
c000c5fa:	74 44                	je     c000c640 <tcp_receive+0xb20>
c000c5fc:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c601:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c605:	80 e4 c0             	and    ah,0xc0
c000c608:	89 c3                	mov    ebx,eax
c000c60a:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c60f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c613:	0f b7 c0             	movzx  eax,ax
c000c616:	83 ec 0c             	sub    esp,0xc
c000c619:	50                   	push   eax
c000c61a:	e8 c9 45 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	0f b7 c0             	movzx  eax,ax
c000c625:	83 e0 3e             	and    eax,0x3e
c000c628:	83 ec 0c             	sub    esp,0xc
c000c62b:	50                   	push   eax
c000c62c:	e8 b7 45 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c631:	83 c4 10             	add    esp,0x10
c000c634:	09 d8                	or     eax,ebx
c000c636:	8b 15 cc a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8cc
c000c63c:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000c640:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c644:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c647:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c64d:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c652:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c656:	0f b7 c0             	movzx  eax,ax
c000c659:	83 ec 0c             	sub    esp,0xc
c000c65c:	50                   	push   eax
c000c65d:	e8 86 45 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c662:	83 c4 10             	add    esp,0x10
c000c665:	0f b7 c0             	movzx  eax,ax
c000c668:	83 e0 02             	and    eax,0x2
c000c66b:	74 0f                	je     c000c67c <tcp_receive+0xb5c>
c000c66d:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c672:	83 e8 01             	sub    eax,0x1
c000c675:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c67b:	90                   	nop
c000c67c:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c681:	0f b7 d0             	movzx  edx,ax
c000c684:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c689:	83 ec 08             	sub    esp,0x8
c000c68c:	52                   	push   edx
c000c68d:	50                   	push   eax
c000c68e:	e8 99 c2 ff ff       	call   c000892c <pbuf_realloc>
c000c693:	83 c4 10             	add    esp,0x10
c000c696:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c69c:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c6a1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c6a5:	0f b7 c0             	movzx  eax,ax
c000c6a8:	83 ec 0c             	sub    esp,0xc
c000c6ab:	50                   	push   eax
c000c6ac:	e8 37 45 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c6b1:	83 c4 10             	add    esp,0x10
c000c6b4:	0f b7 c0             	movzx  eax,ax
c000c6b7:	83 e0 03             	and    eax,0x3
c000c6ba:	0f 95 c0             	setne  al
c000c6bd:	0f b6 c0             	movzx  eax,al
c000c6c0:	01 d8                	add    eax,ebx
c000c6c2:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c6c8:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c6ce:	0f b7 d0             	movzx  edx,ax
c000c6d1:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c6d6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000c6d9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6dd:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c6e0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6e4:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c6e7:	0f b7 c0             	movzx  eax,ax
c000c6ea:	01 d0                	add    eax,edx
c000c6ec:	39 c1                	cmp    ecx,eax
c000c6ee:	74 18                	je     c000c708 <tcp_receive+0xbe8>
c000c6f0:	83 ec 08             	sub    esp,0x8
c000c6f3:	68 54 04 03 c0       	push   0xc0030454
c000c6f8:	68 c6 fa 02 c0       	push   0xc002fac6
c000c6fd:	e8 92 34 01 00       	call   c001fb94 <CPrintf>
c000c702:	83 c4 10             	add    esp,0x10
c000c705:	8d 76 00             	lea    esi,[esi+0x0]
c000c708:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c70c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c712:	85 c0                	test   eax,eax
c000c714:	0f 84 7e 02 00 00    	je     c000c998 <tcp_receive+0xe78>
c000c71a:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c71f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c723:	0f b7 c0             	movzx  eax,ax
c000c726:	83 ec 0c             	sub    esp,0xc
c000c729:	50                   	push   eax
c000c72a:	e8 b9 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c72f:	83 c4 10             	add    esp,0x10
c000c732:	0f b7 c0             	movzx  eax,ax
c000c735:	83 e0 01             	and    eax,0x1
c000c738:	74 4a                	je     c000c784 <tcp_receive+0xc64>
c000c73a:	eb 34                	jmp    c000c770 <tcp_receive+0xc50>
c000c73c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c740:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c746:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c74a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c74e:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c754:	8b 10                	mov    edx,DWORD PTR [eax]
c000c756:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c75a:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000c760:	83 ec 0c             	sub    esp,0xc
c000c763:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c767:	e8 68 d8 ff ff       	call   c0009fd4 <tcp_seg_free>
c000c76c:	83 c4 10             	add    esp,0x10
c000c76f:	90                   	nop
c000c770:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c774:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c77a:	85 c0                	test   eax,eax
c000c77c:	75 be                	jne    c000c73c <tcp_receive+0xc1c>
c000c77e:	e9 15 02 00 00       	jmp    c000c998 <tcp_receive+0xe78>
c000c783:	90                   	nop
c000c784:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c788:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c78e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c792:	e9 bd 00 00 00       	jmp    c000c854 <tcp_receive+0xd34>
c000c797:	90                   	nop
c000c798:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c79c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c79f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c7a3:	0f b7 c0             	movzx  eax,ax
c000c7a6:	83 ec 0c             	sub    esp,0xc
c000c7a9:	50                   	push   eax
c000c7aa:	e8 39 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c7af:	83 c4 10             	add    esp,0x10
c000c7b2:	0f b7 c0             	movzx  eax,ax
c000c7b5:	83 e0 01             	and    eax,0x1
c000c7b8:	74 76                	je     c000c830 <tcp_receive+0xd10>
c000c7ba:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c7bf:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c7c3:	0f b7 c0             	movzx  eax,ax
c000c7c6:	83 ec 0c             	sub    esp,0xc
c000c7c9:	50                   	push   eax
c000c7ca:	e8 19 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c7cf:	83 c4 10             	add    esp,0x10
c000c7d2:	0f b7 c0             	movzx  eax,ax
c000c7d5:	83 e0 02             	and    eax,0x2
c000c7d8:	75 56                	jne    c000c830 <tcp_receive+0xd10>
c000c7da:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c7df:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000c7e3:	83 ec 0c             	sub    esp,0xc
c000c7e6:	6a 01                	push   0x1
c000c7e8:	e8 fb 43 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c7ed:	83 c4 10             	add    esp,0x10
c000c7f0:	8b 15 cc a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8cc
c000c7f6:	09 d8                	or     eax,ebx
c000c7f8:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000c7fc:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c802:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c807:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c80b:	0f b7 c0             	movzx  eax,ax
c000c80e:	83 ec 0c             	sub    esp,0xc
c000c811:	50                   	push   eax
c000c812:	e8 d1 43 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c817:	83 c4 10             	add    esp,0x10
c000c81a:	0f b7 c0             	movzx  eax,ax
c000c81d:	83 e0 03             	and    eax,0x3
c000c820:	0f 95 c0             	setne  al
c000c823:	0f b6 c0             	movzx  eax,al
c000c826:	01 d8                	add    eax,ebx
c000c828:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c82e:	66 90                	xchg   ax,ax
c000c830:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c834:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c838:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c83c:	8b 00                	mov    eax,DWORD PTR [eax]
c000c83e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c842:	83 ec 0c             	sub    esp,0xc
c000c845:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c849:	e8 86 d7 ff ff       	call   c0009fd4 <tcp_seg_free>
c000c84e:	83 c4 10             	add    esp,0x10
c000c851:	8d 76 00             	lea    esi,[esi+0x0]
c000c854:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000c859:	74 31                	je     c000c88c <tcp_receive+0xd6c>
c000c85b:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c861:	0f b7 d0             	movzx  edx,ax
c000c864:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c869:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000c86c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c870:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c873:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000c876:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c87a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c87d:	0f b7 c0             	movzx  eax,ax
c000c880:	01 d0                	add    eax,edx
c000c882:	29 c1                	sub    ecx,eax
c000c884:	89 c8                	mov    eax,ecx
c000c886:	0f 89 0c ff ff ff    	jns    c000c798 <tcp_receive+0xc78>
c000c88c:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000c891:	0f 84 f1 00 00 00    	je     c000c988 <tcp_receive+0xe68>
c000c897:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c89d:	0f b7 d0             	movzx  edx,ax
c000c8a0:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c8a5:	01 c2                	add    edx,eax
c000c8a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c8ab:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c8ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c8b1:	29 c2                	sub    edx,eax
c000c8b3:	89 d0                	mov    eax,edx
c000c8b5:	85 c0                	test   eax,eax
c000c8b7:	0f 8e cb 00 00 00    	jle    c000c988 <tcp_receive+0xe68>
c000c8bd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c8c1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c8c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c8c7:	89 c2                	mov    edx,eax
c000c8c9:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c8ce:	89 d7                	mov    edi,edx
c000c8d0:	29 c7                	sub    edi,eax
c000c8d2:	89 f8                	mov    eax,edi
c000c8d4:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c8da:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c8df:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c8e3:	0f b7 c0             	movzx  eax,ax
c000c8e6:	83 ec 0c             	sub    esp,0xc
c000c8e9:	50                   	push   eax
c000c8ea:	e8 f9 42 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c8ef:	83 c4 10             	add    esp,0x10
c000c8f2:	0f b7 c0             	movzx  eax,ax
c000c8f5:	83 e0 02             	and    eax,0x2
c000c8f8:	74 0e                	je     c000c908 <tcp_receive+0xde8>
c000c8fa:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c8ff:	83 e8 01             	sub    eax,0x1
c000c902:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c908:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c90d:	0f b7 d0             	movzx  edx,ax
c000c910:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c915:	83 ec 08             	sub    esp,0x8
c000c918:	52                   	push   edx
c000c919:	50                   	push   eax
c000c91a:	e8 0d c0 ff ff       	call   c000892c <pbuf_realloc>
c000c91f:	83 c4 10             	add    esp,0x10
c000c922:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c928:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c92d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c931:	0f b7 c0             	movzx  eax,ax
c000c934:	83 ec 0c             	sub    esp,0xc
c000c937:	50                   	push   eax
c000c938:	e8 ab 42 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c93d:	83 c4 10             	add    esp,0x10
c000c940:	0f b7 c0             	movzx  eax,ax
c000c943:	83 e0 03             	and    eax,0x3
c000c946:	0f 95 c0             	setne  al
c000c949:	0f b6 c0             	movzx  eax,al
c000c94c:	01 d8                	add    eax,ebx
c000c94e:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c954:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c95a:	0f b7 d0             	movzx  edx,ax
c000c95d:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c962:	01 c2                	add    edx,eax
c000c964:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c968:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c96b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c96e:	39 c2                	cmp    edx,eax
c000c970:	74 16                	je     c000c988 <tcp_receive+0xe68>
c000c972:	83 ec 08             	sub    esp,0x8
c000c975:	68 8c 04 03 c0       	push   0xc003048c
c000c97a:	68 c6 fa 02 c0       	push   0xc002fac6
c000c97f:	e8 10 32 01 00       	call   c001fb94 <CPrintf>
c000c984:	83 c4 10             	add    esp,0x10
c000c987:	90                   	nop
c000c988:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c98c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c990:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000c996:	66 90                	xchg   ax,ax
c000c998:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c99e:	0f b7 d0             	movzx  edx,ax
c000c9a1:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c9a6:	01 c2                	add    edx,eax
c000c9a8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c9ac:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000c9af:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c9b3:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c9b6:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c9bc:	0f b7 d2             	movzx  edx,dx
c000c9bf:	0f b7 c0             	movzx  eax,ax
c000c9c2:	39 c2                	cmp    edx,eax
c000c9c4:	73 16                	jae    c000c9dc <tcp_receive+0xebc>
c000c9c6:	83 ec 08             	sub    esp,0x8
c000c9c9:	68 c8 04 03 c0       	push   0xc00304c8
c000c9ce:	68 c6 fa 02 c0       	push   0xc002fac6
c000c9d3:	e8 bc 31 01 00       	call   c001fb94 <CPrintf>
c000c9d8:	83 c4 10             	add    esp,0x10
c000c9db:	90                   	nop
c000c9dc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c9e0:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c9e3:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c9e9:	89 d6                	mov    esi,edx
c000c9eb:	29 c6                	sub    esi,eax
c000c9ed:	89 f0                	mov    eax,esi
c000c9ef:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c9f3:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c000c9f7:	83 ec 0c             	sub    esp,0xc
c000c9fa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c9fe:	e8 7d d2 ff ff       	call   c0009c80 <tcp_update_rcv_ann_wnd>
c000ca03:	83 c4 10             	add    esp,0x10
c000ca06:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000ca0b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ca0e:	0f b7 c0             	movzx  eax,ax
c000ca11:	85 c0                	test   eax,eax
c000ca13:	74 17                	je     c000ca2c <tcp_receive+0xf0c>
c000ca15:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000ca1a:	a3 a4 a8 03 c0       	mov    ds:0xc003a8a4,eax
c000ca1f:	c7 05 c4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c4,0x0
c000ca29:	8d 76 00             	lea    esi,[esi+0x0]
c000ca2c:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000ca31:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ca35:	0f b7 c0             	movzx  eax,ax
c000ca38:	83 ec 0c             	sub    esp,0xc
c000ca3b:	50                   	push   eax
c000ca3c:	e8 a7 41 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ca41:	83 c4 10             	add    esp,0x10
c000ca44:	0f b7 c0             	movzx  eax,ax
c000ca47:	83 e0 01             	and    eax,0x1
c000ca4a:	0f 84 d8 01 00 00    	je     c000cc28 <tcp_receive+0x1108>
c000ca50:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000ca55:	83 c8 20             	or     eax,0x20
c000ca58:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000ca5d:	e9 c6 01 00 00       	jmp    c000cc28 <tcp_receive+0x1108>
c000ca62:	66 90                	xchg   ax,ax
c000ca64:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca68:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ca6e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca72:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca76:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ca7c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ca82:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000ca87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca8b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ca8e:	0f b7 d8             	movzx  ebx,ax
c000ca91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca95:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca98:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ca9c:	0f b7 c0             	movzx  eax,ax
c000ca9f:	83 ec 0c             	sub    esp,0xc
c000caa2:	50                   	push   eax
c000caa3:	e8 40 41 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000caa8:	83 c4 10             	add    esp,0x10
c000caab:	0f b7 c0             	movzx  eax,ax
c000caae:	83 e0 03             	and    eax,0x3
c000cab1:	0f 95 c0             	setne  al
c000cab4:	0f b6 c0             	movzx  eax,al
c000cab7:	8d 14 03             	lea    edx,[ebx+eax*1]
c000caba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cabe:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000cac1:	01 c2                	add    edx,eax
c000cac3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cac7:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000caca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cace:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000cad1:	0f b7 d8             	movzx  ebx,ax
c000cad4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cadb:	0f b7 f0             	movzx  esi,ax
c000cade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cae2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cae5:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cae9:	0f b7 c0             	movzx  eax,ax
c000caec:	83 ec 0c             	sub    esp,0xc
c000caef:	50                   	push   eax
c000caf0:	e8 f3 40 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000caf5:	83 c4 10             	add    esp,0x10
c000caf8:	0f b7 c0             	movzx  eax,ax
c000cafb:	83 e0 03             	and    eax,0x3
c000cafe:	0f 95 c0             	setne  al
c000cb01:	0f b6 c0             	movzx  eax,al
c000cb04:	01 f0                	add    eax,esi
c000cb06:	39 c3                	cmp    ebx,eax
c000cb08:	7d 16                	jge    c000cb20 <tcp_receive+0x1000>
c000cb0a:	83 ec 08             	sub    esp,0x8
c000cb0d:	68 e8 04 03 c0       	push   0xc00304e8
c000cb12:	68 c6 fa 02 c0       	push   0xc002fac6
c000cb17:	e8 78 30 01 00       	call   c001fb94 <CPrintf>
c000cb1c:	83 c4 10             	add    esp,0x10
c000cb1f:	90                   	nop
c000cb20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb24:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cb27:	0f b7 d8             	movzx  ebx,ax
c000cb2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb2e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cb31:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cb35:	0f b7 c0             	movzx  eax,ax
c000cb38:	83 ec 0c             	sub    esp,0xc
c000cb3b:	50                   	push   eax
c000cb3c:	e8 a7 40 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cb41:	83 c4 10             	add    esp,0x10
c000cb44:	0f b7 c0             	movzx  eax,ax
c000cb47:	83 e0 03             	and    eax,0x3
c000cb4a:	0f 95 c0             	setne  al
c000cb4d:	0f b6 c0             	movzx  eax,al
c000cb50:	8d 14 03             	lea    edx,[ebx+eax*1]
c000cb53:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb57:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000cb5a:	29 d0                	sub    eax,edx
c000cb5c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000cb60:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c000cb64:	83 ec 0c             	sub    esp,0xc
c000cb67:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cb6b:	e8 10 d1 ff ff       	call   c0009c80 <tcp_update_rcv_ann_wnd>
c000cb70:	83 c4 10             	add    esp,0x10
c000cb73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cb7a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cb7d:	0f b7 c0             	movzx  eax,ax
c000cb80:	85 c0                	test   eax,eax
c000cb82:	74 3c                	je     c000cbc0 <tcp_receive+0x10a0>
c000cb84:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000cb89:	85 c0                	test   eax,eax
c000cb8b:	74 1b                	je     c000cba8 <tcp_receive+0x1088>
c000cb8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb91:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cb94:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000cb99:	83 ec 08             	sub    esp,0x8
c000cb9c:	52                   	push   edx
c000cb9d:	50                   	push   eax
c000cb9e:	e8 f1 bf ff ff       	call   c0008b94 <pbuf_cat>
c000cba3:	83 c4 10             	add    esp,0x10
c000cba6:	eb 0c                	jmp    c000cbb4 <tcp_receive+0x1094>
c000cba8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cbaf:	a3 a4 a8 03 c0       	mov    ds:0xc003a8a4,eax
c000cbb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbb8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cbbf:	90                   	nop
c000cbc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbc4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cbc7:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cbcb:	0f b7 c0             	movzx  eax,ax
c000cbce:	83 ec 0c             	sub    esp,0xc
c000cbd1:	50                   	push   eax
c000cbd2:	e8 11 40 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cbd7:	83 c4 10             	add    esp,0x10
c000cbda:	0f b7 c0             	movzx  eax,ax
c000cbdd:	83 e0 01             	and    eax,0x1
c000cbe0:	74 26                	je     c000cc08 <tcp_receive+0x10e8>
c000cbe2:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000cbe7:	83 c8 20             	or     eax,0x20
c000cbea:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000cbef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbf3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000cbf6:	83 f8 04             	cmp    eax,0x4
c000cbf9:	75 0d                	jne    c000cc08 <tcp_receive+0x10e8>
c000cbfb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbff:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000cc06:	66 90                	xchg   ax,ax
c000cc08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc0c:	8b 10                	mov    edx,DWORD PTR [eax]
c000cc0e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc12:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cc18:	83 ec 0c             	sub    esp,0xc
c000cc1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc1f:	e8 b0 d3 ff ff       	call   c0009fd4 <tcp_seg_free>
c000cc24:	83 c4 10             	add    esp,0x10
c000cc27:	90                   	nop
c000cc28:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc2c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc32:	85 c0                	test   eax,eax
c000cc34:	74 22                	je     c000cc58 <tcp_receive+0x1138>
c000cc36:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc3a:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc40:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cc43:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cc46:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc4a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000cc4d:	39 c2                	cmp    edx,eax
c000cc4f:	0f 84 0f fe ff ff    	je     c000ca64 <tcp_receive+0xf44>
c000cc55:	8d 76 00             	lea    esi,[esi+0x0]
c000cc58:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc5c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cc5f:	0f b6 c0             	movzx  eax,al
c000cc62:	83 e0 01             	and    eax,0x1
c000cc65:	74 2d                	je     c000cc94 <tcp_receive+0x1174>
c000cc67:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc6b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cc6e:	83 e0 fe             	and    eax,0xfffffffe
c000cc71:	88 c2                	mov    dl,al
c000cc73:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc77:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000cc7a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc7e:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cc81:	83 c8 02             	or     eax,0x2
c000cc84:	88 c2                	mov    dl,al
c000cc86:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc8a:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000cc8d:	e9 22 05 00 00       	jmp    c000d1b4 <tcp_receive+0x1694>
c000cc92:	66 90                	xchg   ax,ax
c000cc94:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc98:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cc9b:	83 c8 01             	or     eax,0x1
c000cc9e:	88 c2                	mov    dl,al
c000cca0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cca4:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000cca7:	e9 08 05 00 00       	jmp    c000d1b4 <tcp_receive+0x1694>
c000ccac:	83 ec 0c             	sub    esp,0xc
c000ccaf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ccb3:	e8 c4 2e 00 00       	call   c000fb7c <tcp_send_empty_ack>
c000ccb8:	83 c4 10             	add    esp,0x10
c000ccbb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ccbf:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ccc5:	85 c0                	test   eax,eax
c000ccc7:	75 23                	jne    c000ccec <tcp_receive+0x11cc>
c000ccc9:	83 ec 0c             	sub    esp,0xc
c000cccc:	68 c0 a8 03 c0       	push   0xc003a8c0
c000ccd1:	e8 96 d3 ff ff       	call   c000a06c <tcp_seg_copy>
c000ccd6:	83 c4 10             	add    esp,0x10
c000ccd9:	89 c2                	mov    edx,eax
c000ccdb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ccdf:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cce5:	e9 ca 04 00 00       	jmp    c000d1b4 <tcp_receive+0x1694>
c000ccea:	66 90                	xchg   ax,ax
c000ccec:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000ccf4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ccf8:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ccfe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cd02:	e9 21 04 00 00       	jmp    c000d128 <tcp_receive+0x1608>
c000cd07:	90                   	nop
c000cd08:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cd0c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cd0f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cd12:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cd17:	39 c2                	cmp    edx,eax
c000cd19:	75 75                	jne    c000cd90 <tcp_receive+0x1270>
c000cd1b:	8b 15 c8 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8c8
c000cd21:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cd25:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cd28:	0f b7 d2             	movzx  edx,dx
c000cd2b:	0f b7 c0             	movzx  eax,ax
c000cd2e:	39 c2                	cmp    edx,eax
c000cd30:	0f 86 02 04 00 00    	jbe    c000d138 <tcp_receive+0x1618>
c000cd36:	83 ec 0c             	sub    esp,0xc
c000cd39:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cd3e:	e8 29 d3 ff ff       	call   c000a06c <tcp_seg_copy>
c000cd43:	83 c4 10             	add    esp,0x10
c000cd46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd4a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cd4f:	0f 84 e7 03 00 00    	je     c000d13c <tcp_receive+0x161c>
c000cd55:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cd5a:	74 0c                	je     c000cd68 <tcp_receive+0x1248>
c000cd5c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cd60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd64:	89 10                	mov    DWORD PTR [eax],edx
c000cd66:	eb 10                	jmp    c000cd78 <tcp_receive+0x1258>
c000cd68:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd70:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cd76:	66 90                	xchg   ax,ax
c000cd78:	83 ec 08             	sub    esp,0x8
c000cd7b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd83:	e8 2c ec ff ff       	call   c000b9b4 <tcp_oos_insert_segment>
c000cd88:	83 c4 10             	add    esp,0x10
c000cd8b:	e9 ac 03 00 00       	jmp    c000d13c <tcp_receive+0x161c>
c000cd90:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cd95:	75 61                	jne    c000cdf8 <tcp_receive+0x12d8>
c000cd97:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cd9d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cda1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cda4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cda7:	29 c2                	sub    edx,eax
c000cda9:	89 d0                	mov    eax,edx
c000cdab:	0f 89 27 01 00 00    	jns    c000ced8 <tcp_receive+0x13b8>
c000cdb1:	83 ec 0c             	sub    esp,0xc
c000cdb4:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cdb9:	e8 ae d2 ff ff       	call   c000a06c <tcp_seg_copy>
c000cdbe:	83 c4 10             	add    esp,0x10
c000cdc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cdc5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cdca:	0f 84 70 03 00 00    	je     c000d140 <tcp_receive+0x1620>
c000cdd0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cdd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cdd8:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cdde:	83 ec 08             	sub    esp,0x8
c000cde1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cde5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cde9:	e8 c6 eb ff ff       	call   c000b9b4 <tcp_oos_insert_segment>
c000cdee:	83 c4 10             	add    esp,0x10
c000cdf1:	e9 4a 03 00 00       	jmp    c000d140 <tcp_receive+0x1620>
c000cdf6:	66 90                	xchg   ax,ax
c000cdf8:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cdfe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce02:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce05:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ce08:	29 c2                	sub    edx,eax
c000ce0a:	89 d0                	mov    eax,edx
c000ce0c:	83 e8 01             	sub    eax,0x1
c000ce0f:	0f 88 c3 00 00 00    	js     c000ced8 <tcp_receive+0x13b8>
c000ce15:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000ce1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce1f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ce25:	29 c2                	sub    edx,eax
c000ce27:	89 d0                	mov    eax,edx
c000ce29:	83 c0 01             	add    eax,0x1
c000ce2c:	85 c0                	test   eax,eax
c000ce2e:	0f 8f a4 00 00 00    	jg     c000ced8 <tcp_receive+0x13b8>
c000ce34:	83 ec 0c             	sub    esp,0xc
c000ce37:	68 c0 a8 03 c0       	push   0xc003a8c0
c000ce3c:	e8 2b d2 ff ff       	call   c000a06c <tcp_seg_copy>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce48:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000ce4d:	0f 84 f1 02 00 00    	je     c000d144 <tcp_receive+0x1624>
c000ce53:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce57:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce5a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ce5d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce61:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ce64:	0f b7 c0             	movzx  eax,ax
c000ce67:	01 c2                	add    edx,eax
c000ce69:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ce6e:	29 c2                	sub    edx,eax
c000ce70:	89 d0                	mov    eax,edx
c000ce72:	85 c0                	test   eax,eax
c000ce74:	7e 3e                	jle    c000ceb4 <tcp_receive+0x1394>
c000ce76:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ce7b:	89 c2                	mov    edx,eax
c000ce7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce81:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ce87:	89 d7                	mov    edi,edx
c000ce89:	29 c7                	sub    edi,eax
c000ce8b:	89 f8                	mov    eax,edi
c000ce8d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ce91:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000ce95:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce99:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ce9c:	0f b7 d0             	movzx  edx,ax
c000ce9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cea3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cea6:	83 ec 08             	sub    esp,0x8
c000cea9:	52                   	push   edx
c000ceaa:	50                   	push   eax
c000ceab:	e8 7c ba ff ff       	call   c000892c <pbuf_realloc>
c000ceb0:	83 c4 10             	add    esp,0x10
c000ceb3:	90                   	nop
c000ceb4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ceb8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cebc:	89 10                	mov    DWORD PTR [eax],edx
c000cebe:	83 ec 08             	sub    esp,0x8
c000cec1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cec5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cec9:	e8 e6 ea ff ff       	call   c000b9b4 <tcp_oos_insert_segment>
c000cece:	83 c4 10             	add    esp,0x10
c000ced1:	e9 6e 02 00 00       	jmp    c000d144 <tcp_receive+0x1624>
c000ced6:	66 90                	xchg   ax,ax
c000ced8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cedc:	8b 00                	mov    eax,DWORD PTR [eax]
c000cede:	85 c0                	test   eax,eax
c000cee0:	0f 85 2e 02 00 00    	jne    c000d114 <tcp_receive+0x15f4>
c000cee6:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000ceec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cef0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cef3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cef6:	29 c2                	sub    edx,eax
c000cef8:	89 d0                	mov    eax,edx
c000cefa:	85 c0                	test   eax,eax
c000cefc:	0f 8e 12 02 00 00    	jle    c000d114 <tcp_receive+0x15f4>
c000cf02:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf06:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf09:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cf0d:	0f b7 c0             	movzx  eax,ax
c000cf10:	83 ec 0c             	sub    esp,0xc
c000cf13:	50                   	push   eax
c000cf14:	e8 cf 3c ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cf19:	83 c4 10             	add    esp,0x10
c000cf1c:	0f b7 c0             	movzx  eax,ax
c000cf1f:	83 e0 01             	and    eax,0x1
c000cf22:	0f 85 20 02 00 00    	jne    c000d148 <tcp_receive+0x1628>
c000cf28:	83 ec 0c             	sub    esp,0xc
c000cf2b:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cf30:	e8 37 d1 ff ff       	call   c000a06c <tcp_seg_copy>
c000cf35:	83 c4 10             	add    esp,0x10
c000cf38:	89 c2                	mov    edx,eax
c000cf3a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf3e:	89 10                	mov    DWORD PTR [eax],edx
c000cf40:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf44:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf46:	85 c0                	test   eax,eax
c000cf48:	0f 84 fe 01 00 00    	je     c000d14c <tcp_receive+0x162c>
c000cf4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf52:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf55:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cf58:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf5c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cf5f:	0f b7 c0             	movzx  eax,ax
c000cf62:	01 c2                	add    edx,eax
c000cf64:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cf69:	29 c2                	sub    edx,eax
c000cf6b:	89 d0                	mov    eax,edx
c000cf6d:	85 c0                	test   eax,eax
c000cf6f:	7e 3f                	jle    c000cfb0 <tcp_receive+0x1490>
c000cf71:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cf76:	89 c2                	mov    edx,eax
c000cf78:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf7c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cf82:	89 d6                	mov    esi,edx
c000cf84:	29 c6                	sub    esi,eax
c000cf86:	89 f0                	mov    eax,esi
c000cf88:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cf8c:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000cf90:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf94:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cf97:	0f b7 d0             	movzx  edx,ax
c000cf9a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cfa1:	83 ec 08             	sub    esp,0x8
c000cfa4:	52                   	push   edx
c000cfa5:	50                   	push   eax
c000cfa6:	e8 81 b9 ff ff       	call   c000892c <pbuf_realloc>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	66 90                	xchg   ax,ax
c000cfb0:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000cfb6:	0f b7 d0             	movzx  edx,ax
c000cfb9:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cfbe:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000cfc1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cfc5:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000cfc8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cfcc:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000cfcf:	0f b7 c0             	movzx  eax,ax
c000cfd2:	01 d0                	add    eax,edx
c000cfd4:	39 c1                	cmp    ecx,eax
c000cfd6:	0f 86 70 01 00 00    	jbe    c000d14c <tcp_receive+0x162c>
c000cfdc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfe0:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfe2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cfe5:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cfe9:	0f b7 c0             	movzx  eax,ax
c000cfec:	83 ec 0c             	sub    esp,0xc
c000cfef:	50                   	push   eax
c000cff0:	e8 f3 3b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cff5:	83 c4 10             	add    esp,0x10
c000cff8:	0f b7 c0             	movzx  eax,ax
c000cffb:	83 e0 01             	and    eax,0x1
c000cffe:	74 50                	je     c000d050 <tcp_receive+0x1530>
c000d000:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d004:	8b 00                	mov    eax,DWORD PTR [eax]
c000d006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d009:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d00d:	80 e4 c0             	and    ah,0xc0
c000d010:	89 c3                	mov    ebx,eax
c000d012:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d016:	8b 00                	mov    eax,DWORD PTR [eax]
c000d018:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d01b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d01f:	0f b7 c0             	movzx  eax,ax
c000d022:	83 ec 0c             	sub    esp,0xc
c000d025:	50                   	push   eax
c000d026:	e8 bd 3b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d02b:	83 c4 10             	add    esp,0x10
c000d02e:	0f b7 c0             	movzx  eax,ax
c000d031:	83 e0 3e             	and    eax,0x3e
c000d034:	83 ec 0c             	sub    esp,0xc
c000d037:	50                   	push   eax
c000d038:	e8 ab 3b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	09 d8                	or     eax,ebx
c000d042:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d046:	8b 12                	mov    edx,DWORD PTR [edx]
c000d048:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000d04b:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000d04f:	90                   	nop
c000d050:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d054:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d057:	89 c2                	mov    edx,eax
c000d059:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d05d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d060:	01 d0                	add    eax,edx
c000d062:	89 c3                	mov    ebx,eax
c000d064:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d069:	89 c1                	mov    ecx,eax
c000d06b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d06f:	8b 10                	mov    edx,DWORD PTR [eax]
c000d071:	89 d8                	mov    eax,ebx
c000d073:	29 c8                	sub    eax,ecx
c000d075:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000d079:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d07d:	8b 00                	mov    eax,DWORD PTR [eax]
c000d07f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d082:	0f b7 d0             	movzx  edx,ax
c000d085:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d089:	8b 00                	mov    eax,DWORD PTR [eax]
c000d08b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d08e:	83 ec 08             	sub    esp,0x8
c000d091:	52                   	push   edx
c000d092:	50                   	push   eax
c000d093:	e8 94 b8 ff ff       	call   c000892c <pbuf_realloc>
c000d098:	83 c4 10             	add    esp,0x10
c000d09b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d09f:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0a1:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
c000d0a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0a8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0aa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d0ad:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d0b1:	0f b7 c0             	movzx  eax,ax
c000d0b4:	83 ec 0c             	sub    esp,0xc
c000d0b7:	50                   	push   eax
c000d0b8:	e8 2b 3b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d0bd:	83 c4 10             	add    esp,0x10
c000d0c0:	0f b7 c0             	movzx  eax,ax
c000d0c3:	83 e0 03             	and    eax,0x3
c000d0c6:	0f 95 c0             	setne  al
c000d0c9:	0f b6 c0             	movzx  eax,al
c000d0cc:	01 d8                	add    eax,ebx
c000d0ce:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000d0d4:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d0da:	0f b7 d0             	movzx  edx,ax
c000d0dd:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d0e2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d0e5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d0e9:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d0ec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d0f0:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d0f3:	0f b7 c0             	movzx  eax,ax
c000d0f6:	01 d0                	add    eax,edx
c000d0f8:	39 c1                	cmp    ecx,eax
c000d0fa:	74 50                	je     c000d14c <tcp_receive+0x162c>
c000d0fc:	83 ec 08             	sub    esp,0x8
c000d0ff:	68 54 04 03 c0       	push   0xc0030454
c000d104:	68 c6 fa 02 c0       	push   0xc002fac6
c000d109:	e8 86 2a 01 00       	call   c001fb94 <CPrintf>
c000d10e:	83 c4 10             	add    esp,0x10
c000d111:	eb 39                	jmp    c000d14c <tcp_receive+0x162c>
c000d113:	90                   	nop
c000d114:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d118:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d11c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d120:	8b 00                	mov    eax,DWORD PTR [eax]
c000d122:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d126:	66 90                	xchg   ax,ax
c000d128:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000d12d:	0f 85 d5 fb ff ff    	jne    c000cd08 <tcp_receive+0x11e8>
c000d133:	eb 7f                	jmp    c000d1b4 <tcp_receive+0x1694>
c000d135:	8d 76 00             	lea    esi,[esi+0x0]
c000d138:	90                   	nop
c000d139:	eb 79                	jmp    c000d1b4 <tcp_receive+0x1694>
c000d13b:	90                   	nop
c000d13c:	90                   	nop
c000d13d:	eb 75                	jmp    c000d1b4 <tcp_receive+0x1694>
c000d13f:	90                   	nop
c000d140:	90                   	nop
c000d141:	eb 71                	jmp    c000d1b4 <tcp_receive+0x1694>
c000d143:	90                   	nop
c000d144:	90                   	nop
c000d145:	eb 6d                	jmp    c000d1b4 <tcp_receive+0x1694>
c000d147:	90                   	nop
c000d148:	90                   	nop
c000d149:	eb 69                	jmp    c000d1b4 <tcp_receive+0x1694>
c000d14b:	90                   	nop
c000d14c:	90                   	nop
c000d14d:	eb 65                	jmp    c000d1b4 <tcp_receive+0x1694>
c000d14f:	90                   	nop
c000d150:	83 ec 0c             	sub    esp,0xc
c000d153:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d157:	e8 20 2a 00 00       	call   c000fb7c <tcp_send_empty_ack>
c000d15c:	83 c4 10             	add    esp,0x10
c000d15f:	eb 53                	jmp    c000d1b4 <tcp_receive+0x1694>
c000d161:	8d 76 00             	lea    esi,[esi+0x0]
c000d164:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d16a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d16e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d171:	29 c2                	sub    edx,eax
c000d173:	89 d0                	mov    eax,edx
c000d175:	78 25                	js     c000d19c <tcp_receive+0x167c>
c000d177:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d17d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d181:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d184:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d188:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d18b:	0f b7 c0             	movzx  eax,ax
c000d18e:	01 c8                	add    eax,ecx
c000d190:	29 c2                	sub    edx,eax
c000d192:	89 d0                	mov    eax,edx
c000d194:	83 c0 01             	add    eax,0x1
c000d197:	85 c0                	test   eax,eax
c000d199:	7e 19                	jle    c000d1b4 <tcp_receive+0x1694>
c000d19b:	90                   	nop
c000d19c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d1a0:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d1a3:	83 c8 02             	or     eax,0x2
c000d1a6:	88 c2                	mov    dl,al
c000d1a8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d1ac:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d1af:	eb 03                	jmp    c000d1b4 <tcp_receive+0x1694>
c000d1b1:	8d 76 00             	lea    esi,[esi+0x0]
c000d1b4:	90                   	nop
c000d1b5:	83 c4 30             	add    esp,0x30
c000d1b8:	5b                   	pop    ebx
c000d1b9:	5e                   	pop    esi
c000d1ba:	5f                   	pop    edi
c000d1bb:	c3                   	ret    

c000d1bc <tcp_parseopt>:
c000d1bc:	83 ec 1c             	sub    esp,0x1c
c000d1bf:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d1c4:	83 c0 14             	add    eax,0x14
c000d1c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d1cb:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d1d0:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d1d4:	0f b7 c0             	movzx  eax,ax
c000d1d7:	83 ec 0c             	sub    esp,0xc
c000d1da:	50                   	push   eax
c000d1db:	e8 08 3a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d1e0:	83 c4 10             	add    esp,0x10
c000d1e3:	0f b7 c0             	movzx  eax,ax
c000d1e6:	c1 e8 0c             	shr    eax,0xc
c000d1e9:	0f b7 c0             	movzx  eax,ax
c000d1ec:	83 f8 05             	cmp    eax,0x5
c000d1ef:	0f 86 6f 01 00 00    	jbe    c000d364 <tcp_parseopt+0x1a8>
c000d1f5:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d1fa:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d1fe:	0f b7 c0             	movzx  eax,ax
c000d201:	83 ec 0c             	sub    esp,0xc
c000d204:	50                   	push   eax
c000d205:	e8 de 39 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d20a:	83 c4 10             	add    esp,0x10
c000d20d:	0f b7 c0             	movzx  eax,ax
c000d210:	c1 e8 0c             	shr    eax,0xc
c000d213:	83 e8 05             	sub    eax,0x5
c000d216:	c1 e0 02             	shl    eax,0x2
c000d219:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000d21e:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c000d225:	e9 1e 01 00 00       	jmp    c000d348 <tcp_parseopt+0x18c>
c000d22a:	66 90                	xchg   ax,ax
c000d22c:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d231:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d235:	01 d0                	add    eax,edx
c000d237:	8a 00                	mov    al,BYTE PTR [eax]
c000d239:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000d23d:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c000d242:	83 f8 01             	cmp    eax,0x1
c000d245:	74 15                	je     c000d25c <tcp_parseopt+0xa0>
c000d247:	83 f8 02             	cmp    eax,0x2
c000d24a:	74 24                	je     c000d270 <tcp_parseopt+0xb4>
c000d24c:	85 c0                	test   eax,eax
c000d24e:	0f 85 bc 00 00 00    	jne    c000d310 <tcp_parseopt+0x154>
c000d254:	e9 0b 01 00 00       	jmp    c000d364 <tcp_parseopt+0x1a8>
c000d259:	8d 76 00             	lea    esi,[esi+0x0]
c000d25c:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d261:	83 c0 01             	add    eax,0x1
c000d264:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d269:	e9 da 00 00 00       	jmp    c000d348 <tcp_parseopt+0x18c>
c000d26e:	66 90                	xchg   ax,ax
c000d270:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d275:	8d 50 01             	lea    edx,[eax+0x1]
c000d278:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d27c:	01 d0                	add    eax,edx
c000d27e:	8a 00                	mov    al,BYTE PTR [eax]
c000d280:	0f b6 c0             	movzx  eax,al
c000d283:	83 f8 04             	cmp    eax,0x4
c000d286:	0f 85 d0 00 00 00    	jne    c000d35c <tcp_parseopt+0x1a0>
c000d28c:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d291:	8d 50 03             	lea    edx,[eax+0x3]
c000d294:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d299:	39 c2                	cmp    edx,eax
c000d29b:	0f 8d bb 00 00 00    	jge    c000d35c <tcp_parseopt+0x1a0>
c000d2a1:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d2a6:	8d 50 02             	lea    edx,[eax+0x2]
c000d2a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d2ad:	01 d0                	add    eax,edx
c000d2af:	8a 00                	mov    al,BYTE PTR [eax]
c000d2b1:	0f b6 c0             	movzx  eax,al
c000d2b4:	c1 e0 08             	shl    eax,0x8
c000d2b7:	89 c2                	mov    edx,eax
c000d2b9:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d2be:	8d 48 03             	lea    ecx,[eax+0x3]
c000d2c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d2c5:	01 c8                	add    eax,ecx
c000d2c7:	8a 00                	mov    al,BYTE PTR [eax]
c000d2c9:	0f b6 c0             	movzx  eax,al
c000d2cc:	09 d0                	or     eax,edx
c000d2ce:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c000d2d3:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d2d8:	3d 18 02 00 00       	cmp    eax,0x218
c000d2dd:	77 11                	ja     c000d2f0 <tcp_parseopt+0x134>
c000d2df:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d2e4:	85 c0                	test   eax,eax
c000d2e6:	74 08                	je     c000d2f0 <tcp_parseopt+0x134>
c000d2e8:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c000d2ed:	eb 09                	jmp    c000d2f8 <tcp_parseopt+0x13c>
c000d2ef:	90                   	nop
c000d2f0:	b8 18 02 00 00       	mov    eax,0x218
c000d2f5:	8d 76 00             	lea    esi,[esi+0x0]
c000d2f8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d2fc:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d300:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d305:	83 c0 04             	add    eax,0x4
c000d308:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d30d:	eb 39                	jmp    c000d348 <tcp_parseopt+0x18c>
c000d30f:	90                   	nop
c000d310:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d315:	8d 50 01             	lea    edx,[eax+0x1]
c000d318:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d31c:	01 d0                	add    eax,edx
c000d31e:	8a 00                	mov    al,BYTE PTR [eax]
c000d320:	0f b6 c0             	movzx  eax,al
c000d323:	85 c0                	test   eax,eax
c000d325:	74 39                	je     c000d360 <tcp_parseopt+0x1a4>
c000d327:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d32c:	8d 50 01             	lea    edx,[eax+0x1]
c000d32f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d333:	01 d0                	add    eax,edx
c000d335:	8a 00                	mov    al,BYTE PTR [eax]
c000d337:	0f b6 c0             	movzx  eax,al
c000d33a:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c000d33f:	01 d0                	add    eax,edx
c000d341:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d346:	66 90                	xchg   ax,ax
c000d348:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d34d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d352:	39 c2                	cmp    edx,eax
c000d354:	0f 82 d2 fe ff ff    	jb     c000d22c <tcp_parseopt+0x70>
c000d35a:	eb 08                	jmp    c000d364 <tcp_parseopt+0x1a8>
c000d35c:	90                   	nop
c000d35d:	eb 05                	jmp    c000d364 <tcp_parseopt+0x1a8>
c000d35f:	90                   	nop
c000d360:	90                   	nop
c000d361:	8d 76 00             	lea    esi,[esi+0x0]
c000d364:	83 c4 1c             	add    esp,0x1c
c000d367:	c3                   	ret    

c000d368 <tcp_listen_input>:
c000d368:	53                   	push   ebx
c000d369:	83 ec 18             	sub    esp,0x18
c000d36c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d371:	0f b6 c0             	movzx  eax,al
c000d374:	83 e0 10             	and    eax,0x10
c000d377:	74 4f                	je     c000d3c8 <tcp_listen_input+0x60>
c000d379:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d37e:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d381:	0f b7 c8             	movzx  ecx,ax
c000d384:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d389:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000d38d:	0f b7 d0             	movzx  edx,ax
c000d390:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d396:	0f b7 d8             	movzx  ebx,ax
c000d399:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d39e:	01 c3                	add    ebx,eax
c000d3a0:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d3a5:	83 c0 01             	add    eax,0x1
c000d3a8:	83 ec 08             	sub    esp,0x8
c000d3ab:	51                   	push   ecx
c000d3ac:	52                   	push   edx
c000d3ad:	68 90 68 03 c0       	push   0xc0036890
c000d3b2:	68 98 68 03 c0       	push   0xc0036898
c000d3b7:	53                   	push   ebx
c000d3b8:	50                   	push   eax
c000d3b9:	e8 5a 2f 00 00       	call   c0010318 <tcp_rst>
c000d3be:	83 c4 20             	add    esp,0x20
c000d3c1:	e9 a2 01 00 00       	jmp    c000d568 <tcp_listen_input+0x200>
c000d3c6:	66 90                	xchg   ax,ax
c000d3c8:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d3cd:	0f b6 c0             	movzx  eax,al
c000d3d0:	83 e0 02             	and    eax,0x2
c000d3d3:	0f 84 8f 01 00 00    	je     c000d568 <tcp_listen_input+0x200>
c000d3d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3dd:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000d3e0:	0f b6 c0             	movzx  eax,al
c000d3e3:	83 ec 0c             	sub    esp,0xc
c000d3e6:	50                   	push   eax
c000d3e7:	e8 14 e0 ff ff       	call   c000b400 <tcp_alloc>
c000d3ec:	83 c4 10             	add    esp,0x10
c000d3ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d3f3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d3f8:	75 16                	jne    c000d410 <tcp_listen_input+0xa8>
c000d3fa:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000d400:	83 c0 01             	add    eax,0x1
c000d403:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000d409:	b0 ff                	mov    al,0xff
c000d40b:	e9 5c 01 00 00       	jmp    c000d56c <tcp_listen_input+0x204>
c000d410:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c000d416:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d41a:	89 10                	mov    DWORD PTR [eax],edx
c000d41c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d420:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d423:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d427:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c000d42b:	8b 15 90 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036890
c000d431:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d435:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d438:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d43d:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d440:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d444:	66 89 42 22          	mov    WORD PTR [edx+0x22],ax
c000d448:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d44c:	c7 40 10 03 00 00 00 	mov    DWORD PTR [eax+0x10],0x3
c000d453:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d458:	8d 50 01             	lea    edx,[eax+0x1]
c000d45b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d45f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d462:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d466:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d469:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d46d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d470:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d475:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000d479:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d47d:	66 89 42 60          	mov    WORD PTR [edx+0x60],ax
c000d481:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d485:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000d488:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d48c:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000d490:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d495:	8d 50 ff             	lea    edx,[eax-0x1]
c000d498:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d49c:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d49f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4a3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000d4a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4aa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000d4ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4b1:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
c000d4b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4b8:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000d4bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4bf:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000d4c2:	83 e0 8c             	and    eax,0xffffff8c
c000d4c5:	88 c2                	mov    dl,al
c000d4c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4cb:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c000d4ce:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000d4d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4d8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d4db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4df:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000d4e4:	e8 33 36 00 00       	call   c0010b1c <tcp_timer_needed>
c000d4e9:	83 ec 0c             	sub    esp,0xc
c000d4ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d4f0:	e8 c7 fc ff ff       	call   c000d1bc <tcp_parseopt>
c000d4f5:	83 c4 10             	add    esp,0x10
c000d4f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4fc:	8d 50 04             	lea    edx,[eax+0x4]
c000d4ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d503:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d506:	0f b7 c0             	movzx  eax,ax
c000d509:	83 ec 08             	sub    esp,0x8
c000d50c:	52                   	push   edx
c000d50d:	50                   	push   eax
c000d50e:	e8 ad e0 ff ff       	call   c000b5c0 <tcp_eff_send_mss>
c000d513:	83 c4 10             	add    esp,0x10
c000d516:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d51a:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d51e:	83 ec 08             	sub    esp,0x8
c000d521:	6a 12                	push   0x12
c000d523:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d527:	e8 c4 22 00 00       	call   c000f7f0 <tcp_enqueue_flags>
c000d52c:	83 c4 10             	add    esp,0x10
c000d52f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000d533:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000d538:	85 c0                	test   eax,eax
c000d53a:	74 18                	je     c000d554 <tcp_listen_input+0x1ec>
c000d53c:	83 ec 08             	sub    esp,0x8
c000d53f:	6a 00                	push   0x0
c000d541:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d545:	e8 9e db ff ff       	call   c000b0e8 <tcp_abandon>
c000d54a:	83 c4 10             	add    esp,0x10
c000d54d:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000d551:	eb 19                	jmp    c000d56c <tcp_listen_input+0x204>
c000d553:	90                   	nop
c000d554:	83 ec 0c             	sub    esp,0xc
c000d557:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d55b:	e8 2c 29 00 00       	call   c000fe8c <tcp_output>
c000d560:	83 c4 10             	add    esp,0x10
c000d563:	eb 07                	jmp    c000d56c <tcp_listen_input+0x204>
c000d565:	8d 76 00             	lea    esi,[esi+0x0]
c000d568:	b0 00                	mov    al,0x0
c000d56a:	66 90                	xchg   ax,ax
c000d56c:	83 c4 18             	add    esp,0x18
c000d56f:	5b                   	pop    ebx
c000d570:	c3                   	ret    
c000d571:	8d 76 00             	lea    esi,[esi+0x0]

c000d574 <tcp_process>:
c000d574:	53                   	push   ebx
c000d575:	83 ec 18             	sub    esp,0x18
c000d578:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000d57d:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000d582:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d587:	0f b6 c0             	movzx  eax,al
c000d58a:	83 e0 04             	and    eax,0x4
c000d58d:	0f 84 bd 00 00 00    	je     c000d650 <tcp_process+0xdc>
c000d593:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d597:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d59a:	83 f8 02             	cmp    eax,0x2
c000d59d:	75 19                	jne    c000d5b8 <tcp_process+0x44>
c000d59f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5a3:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000d5a6:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d5ab:	39 c2                	cmp    edx,eax
c000d5ad:	75 45                	jne    c000d5f4 <tcp_process+0x80>
c000d5af:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d5b4:	eb 3e                	jmp    c000d5f4 <tcp_process+0x80>
c000d5b6:	66 90                	xchg   ax,ax
c000d5b8:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d5be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5c2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d5c5:	29 c2                	sub    edx,eax
c000d5c7:	89 d0                	mov    eax,edx
c000d5c9:	78 29                	js     c000d5f4 <tcp_process+0x80>
c000d5cb:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d5d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5d5:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d5d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5dc:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d5df:	0f b7 c0             	movzx  eax,ax
c000d5e2:	01 c8                	add    eax,ecx
c000d5e4:	29 c2                	sub    edx,eax
c000d5e6:	89 d0                	mov    eax,edx
c000d5e8:	85 c0                	test   eax,eax
c000d5ea:	7f 08                	jg     c000d5f4 <tcp_process+0x80>
c000d5ec:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d5f1:	8d 76 00             	lea    esi,[esi+0x0]
c000d5f4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000d5f9:	85 c0                	test   eax,eax
c000d5fb:	74 4b                	je     c000d648 <tcp_process+0xd4>
c000d5fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d601:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d604:	85 c0                	test   eax,eax
c000d606:	75 18                	jne    c000d620 <tcp_process+0xac>
c000d608:	83 ec 08             	sub    esp,0x8
c000d60b:	68 10 05 03 c0       	push   0xc0030510
c000d610:	68 c6 fa 02 c0       	push   0xc002fac6
c000d615:	e8 7a 25 01 00       	call   c001fb94 <CPrintf>
c000d61a:	83 c4 10             	add    esp,0x10
c000d61d:	8d 76 00             	lea    esi,[esi+0x0]
c000d620:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000d625:	83 c8 08             	or     eax,0x8
c000d628:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000d62d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d631:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d634:	83 e0 fe             	and    eax,0xfffffffe
c000d637:	88 c2                	mov    dl,al
c000d639:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d63d:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d640:	b0 f5                	mov    al,0xf5
c000d642:	e9 bd 08 00 00       	jmp    c000df04 <tcp_process+0x990>
c000d647:	90                   	nop
c000d648:	b0 00                	mov    al,0x0
c000d64a:	e9 b5 08 00 00       	jmp    c000df04 <tcp_process+0x990>
c000d64f:	90                   	nop
c000d650:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d655:	0f b6 c0             	movzx  eax,al
c000d658:	83 e0 02             	and    eax,0x2
c000d65b:	74 33                	je     c000d690 <tcp_process+0x11c>
c000d65d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d661:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d664:	83 f8 02             	cmp    eax,0x2
c000d667:	74 27                	je     c000d690 <tcp_process+0x11c>
c000d669:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d66d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d670:	83 f8 03             	cmp    eax,0x3
c000d673:	74 1b                	je     c000d690 <tcp_process+0x11c>
c000d675:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d679:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d67c:	83 c8 02             	or     eax,0x2
c000d67f:	88 c2                	mov    dl,al
c000d681:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d685:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d688:	b0 00                	mov    al,0x0
c000d68a:	e9 75 08 00 00       	jmp    c000df04 <tcp_process+0x990>
c000d68f:	90                   	nop
c000d690:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d694:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d697:	0f b6 c0             	movzx  eax,al
c000d69a:	83 e0 10             	and    eax,0x10
c000d69d:	75 0d                	jne    c000d6ac <tcp_process+0x138>
c000d69f:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000d6a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6a9:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000d6ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6b0:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000d6b7:	83 ec 0c             	sub    esp,0xc
c000d6ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d6be:	e8 f9 fa ff ff       	call   c000d1bc <tcp_parseopt>
c000d6c3:	83 c4 10             	add    esp,0x10
c000d6c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6ca:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d6cd:	83 f8 09             	cmp    eax,0x9
c000d6d0:	0f 87 0a 08 00 00    	ja     c000dee0 <tcp_process+0x96c>
c000d6d6:	8b 04 85 b8 06 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf948]
c000d6dd:	ff e0                	jmp    eax
c000d6df:	90                   	nop
c000d6e0:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d6e5:	0f b6 c0             	movzx  eax,al
c000d6e8:	83 e0 10             	and    eax,0x10
c000d6eb:	0f 84 ff 01 00 00    	je     c000d8f0 <tcp_process+0x37c>
c000d6f1:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d6f6:	0f b6 c0             	movzx  eax,al
c000d6f9:	83 e0 02             	and    eax,0x2
c000d6fc:	0f 84 ee 01 00 00    	je     c000d8f0 <tcp_process+0x37c>
c000d702:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d706:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d709:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d70c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d70f:	83 ec 0c             	sub    esp,0xc
c000d712:	50                   	push   eax
c000d713:	e8 f4 34 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000d718:	83 c4 10             	add    esp,0x10
c000d71b:	8d 50 01             	lea    edx,[eax+0x1]
c000d71e:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d723:	39 c2                	cmp    edx,eax
c000d725:	0f 85 c5 01 00 00    	jne    c000d8f0 <tcp_process+0x37c>
c000d72b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d72f:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000d733:	83 c0 01             	add    eax,0x1
c000d736:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d73a:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000d73e:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d743:	8d 50 01             	lea    edx,[eax+0x1]
c000d746:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d74a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d74d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d751:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d754:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d758:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d75b:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d761:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d765:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000d768:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d76d:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000d771:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d775:	66 89 42 60          	mov    WORD PTR [edx+0x60],ax
c000d779:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d77e:	8d 50 ff             	lea    edx,[eax-0x1]
c000d781:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d785:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d788:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d78c:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d793:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d797:	8d 50 04             	lea    edx,[eax+0x4]
c000d79a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d79e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d7a1:	0f b7 c0             	movzx  eax,ax
c000d7a4:	83 ec 08             	sub    esp,0x8
c000d7a7:	52                   	push   edx
c000d7a8:	50                   	push   eax
c000d7a9:	e8 12 de ff ff       	call   c000b5c0 <tcp_eff_send_mss>
c000d7ae:	83 c4 10             	add    esp,0x10
c000d7b1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d7b5:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d7b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7bd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d7c0:	89 c2                	mov    edx,eax
c000d7c2:	c1 e2 02             	shl    edx,0x2
c000d7c5:	01 d0                	add    eax,edx
c000d7c7:	d1 e0                	shl    eax,1
c000d7c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d7cd:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000d7d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7d5:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000d7d9:	0f b7 c0             	movzx  eax,ax
c000d7dc:	83 f8 01             	cmp    eax,0x1
c000d7df:	75 0b                	jne    c000d7ec <tcp_process+0x278>
c000d7e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7e5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d7e8:	d1 e0                	shl    eax,1
c000d7ea:	eb 08                	jmp    c000d7f4 <tcp_process+0x280>
c000d7ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7f0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d7f3:	90                   	nop
c000d7f4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d7f8:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000d7fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d800:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000d803:	0f b7 c0             	movzx  eax,ax
c000d806:	85 c0                	test   eax,eax
c000d808:	75 16                	jne    c000d820 <tcp_process+0x2ac>
c000d80a:	83 ec 08             	sub    esp,0x8
c000d80d:	68 73 06 03 c0       	push   0xc0030673
c000d812:	68 c6 fa 02 c0       	push   0xc002fac6
c000d817:	e8 78 23 01 00       	call   c001fb94 <CPrintf>
c000d81c:	83 c4 10             	add    esp,0x10
c000d81f:	90                   	nop
c000d820:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d824:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000d827:	83 e8 01             	sub    eax,0x1
c000d82a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d82e:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000d832:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d836:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d839:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d83d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d841:	8b 10                	mov    edx,DWORD PTR [eax]
c000d843:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d847:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000d84a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d84e:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d851:	85 c0                	test   eax,eax
c000d853:	75 0f                	jne    c000d864 <tcp_process+0x2f0>
c000d855:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d859:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000d85f:	eb 17                	jmp    c000d878 <tcp_process+0x304>
c000d861:	8d 76 00             	lea    esi,[esi+0x0]
c000d864:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d868:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000d86e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d872:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000d876:	66 90                	xchg   ax,ax
c000d878:	83 ec 0c             	sub    esp,0xc
c000d87b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d87f:	e8 50 c7 ff ff       	call   c0009fd4 <tcp_seg_free>
c000d884:	83 c4 10             	add    esp,0x10
c000d887:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d88b:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000d891:	85 c0                	test   eax,eax
c000d893:	74 27                	je     c000d8bc <tcp_process+0x348>
c000d895:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d899:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000d89f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d8a3:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000d8a6:	83 ec 04             	sub    esp,0x4
c000d8a9:	6a 00                	push   0x0
c000d8ab:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d8af:	52                   	push   edx
c000d8b0:	ff d0                	call   eax
c000d8b2:	83 c4 10             	add    esp,0x10
c000d8b5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d8b9:	eb 09                	jmp    c000d8c4 <tcp_process+0x350>
c000d8bb:	90                   	nop
c000d8bc:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000d8c1:	8d 76 00             	lea    esi,[esi+0x0]
c000d8c4:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000d8c9:	83 f8 f6             	cmp    eax,0xfffffff6
c000d8cc:	75 0a                	jne    c000d8d8 <tcp_process+0x364>
c000d8ce:	b0 f6                	mov    al,0xf6
c000d8d0:	e9 2f 06 00 00       	jmp    c000df04 <tcp_process+0x990>
c000d8d5:	8d 76 00             	lea    esi,[esi+0x0]
c000d8d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8dc:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d8df:	83 c8 02             	or     eax,0x2
c000d8e2:	88 c2                	mov    dl,al
c000d8e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8e8:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d8eb:	e9 f4 05 00 00       	jmp    c000dee4 <tcp_process+0x970>
c000d8f0:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d8f5:	0f b6 c0             	movzx  eax,al
c000d8f8:	83 e0 10             	and    eax,0x10
c000d8fb:	0f 84 e3 05 00 00    	je     c000dee4 <tcp_process+0x970>
c000d901:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d906:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d909:	0f b7 c8             	movzx  ecx,ax
c000d90c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d911:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000d915:	0f b7 d0             	movzx  edx,ax
c000d918:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d91e:	0f b7 d8             	movzx  ebx,ax
c000d921:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d926:	01 c3                	add    ebx,eax
c000d928:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d92d:	83 ec 08             	sub    esp,0x8
c000d930:	51                   	push   ecx
c000d931:	52                   	push   edx
c000d932:	68 90 68 03 c0       	push   0xc0036890
c000d937:	68 98 68 03 c0       	push   0xc0036898
c000d93c:	53                   	push   ebx
c000d93d:	50                   	push   eax
c000d93e:	e8 d5 29 00 00       	call   c0010318 <tcp_rst>
c000d943:	83 c4 20             	add    esp,0x20
c000d946:	e9 99 05 00 00       	jmp    c000dee4 <tcp_process+0x970>
c000d94b:	90                   	nop
c000d94c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d951:	0f b6 c0             	movzx  eax,al
c000d954:	83 e0 10             	and    eax,0x10
c000d957:	0f 84 a7 01 00 00    	je     c000db04 <tcp_process+0x590>
c000d95d:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d963:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d967:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000d96a:	29 c2                	sub    edx,eax
c000d96c:	89 d0                	mov    eax,edx
c000d96e:	83 e8 01             	sub    eax,0x1
c000d971:	0f 88 41 01 00 00    	js     c000dab8 <tcp_process+0x544>
c000d977:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d97d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d981:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000d984:	29 c2                	sub    edx,eax
c000d986:	89 d0                	mov    eax,edx
c000d988:	85 c0                	test   eax,eax
c000d98a:	0f 8f 28 01 00 00    	jg     c000dab8 <tcp_process+0x544>
c000d990:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d994:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d99b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d99f:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000d9a2:	85 c0                	test   eax,eax
c000d9a4:	75 16                	jne    c000d9bc <tcp_process+0x448>
c000d9a6:	83 ec 08             	sub    esp,0x8
c000d9a9:	68 89 06 03 c0       	push   0xc0030689
c000d9ae:	68 c6 fa 02 c0       	push   0xc002fac6
c000d9b3:	e8 dc 21 01 00       	call   c001fb94 <CPrintf>
c000d9b8:	83 c4 10             	add    esp,0x10
c000d9bb:	90                   	nop
c000d9bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9c0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000d9c3:	85 c0                	test   eax,eax
c000d9c5:	74 25                	je     c000d9ec <tcp_process+0x478>
c000d9c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9cb:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000d9ce:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d9d2:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000d9d5:	83 ec 04             	sub    esp,0x4
c000d9d8:	6a 00                	push   0x0
c000d9da:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d9de:	52                   	push   edx
c000d9df:	ff d0                	call   eax
c000d9e1:	83 c4 10             	add    esp,0x10
c000d9e4:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d9e8:	eb 0a                	jmp    c000d9f4 <tcp_process+0x480>
c000d9ea:	66 90                	xchg   ax,ax
c000d9ec:	c6 44 24 0e f2       	mov    BYTE PTR [esp+0xe],0xf2
c000d9f1:	8d 76 00             	lea    esi,[esi+0x0]
c000d9f4:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000d9f9:	85 c0                	test   eax,eax
c000d9fb:	74 23                	je     c000da20 <tcp_process+0x4ac>
c000d9fd:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000da02:	83 f8 f6             	cmp    eax,0xfffffff6
c000da05:	74 11                	je     c000da18 <tcp_process+0x4a4>
c000da07:	83 ec 0c             	sub    esp,0xc
c000da0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da0e:	e8 69 d8 ff ff       	call   c000b27c <tcp_abort>
c000da13:	83 c4 10             	add    esp,0x10
c000da16:	66 90                	xchg   ax,ax
c000da18:	b0 f6                	mov    al,0xf6
c000da1a:	e9 e5 04 00 00       	jmp    c000df04 <tcp_process+0x990>
c000da1f:	90                   	nop
c000da20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da24:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000da28:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000da2d:	83 ec 0c             	sub    esp,0xc
c000da30:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da34:	e8 e7 e0 ff ff       	call   c000bb20 <tcp_receive>
c000da39:	83 c4 10             	add    esp,0x10
c000da3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da40:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000da43:	0f b7 c0             	movzx  eax,ax
c000da46:	85 c0                	test   eax,eax
c000da48:	74 12                	je     c000da5c <tcp_process+0x4e8>
c000da4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da4e:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000da51:	83 e8 01             	sub    eax,0x1
c000da54:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000da58:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000da5c:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000da61:	83 f8 01             	cmp    eax,0x1
c000da64:	75 0e                	jne    c000da74 <tcp_process+0x500>
c000da66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da6a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000da6d:	d1 e0                	shl    eax,1
c000da6f:	eb 0b                	jmp    c000da7c <tcp_process+0x508>
c000da71:	8d 76 00             	lea    esi,[esi+0x0]
c000da74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da78:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000da7b:	90                   	nop
c000da7c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000da80:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000da84:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000da89:	0f b6 c0             	movzx  eax,al
c000da8c:	83 e0 20             	and    eax,0x20
c000da8f:	0f 84 ab 00 00 00    	je     c000db40 <tcp_process+0x5cc>
c000da95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da99:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000da9c:	83 c8 02             	or     eax,0x2
c000da9f:	88 c2                	mov    dl,al
c000daa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daa5:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000daa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daac:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000dab3:	e9 88 00 00 00       	jmp    c000db40 <tcp_process+0x5cc>
c000dab8:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000dabd:	66 8b 00             	mov    ax,WORD PTR [eax]
c000dac0:	0f b7 c8             	movzx  ecx,ax
c000dac3:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000dac8:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000dacc:	0f b7 d0             	movzx  edx,ax
c000dacf:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000dad5:	0f b7 d8             	movzx  ebx,ax
c000dad8:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000dadd:	01 c3                	add    ebx,eax
c000dadf:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dae4:	83 ec 08             	sub    esp,0x8
c000dae7:	51                   	push   ecx
c000dae8:	52                   	push   edx
c000dae9:	68 90 68 03 c0       	push   0xc0036890
c000daee:	68 98 68 03 c0       	push   0xc0036898
c000daf3:	53                   	push   ebx
c000daf4:	50                   	push   eax
c000daf5:	e8 1e 28 00 00       	call   c0010318 <tcp_rst>
c000dafa:	83 c4 20             	add    esp,0x20
c000dafd:	e9 e6 03 00 00       	jmp    c000dee8 <tcp_process+0x974>
c000db02:	66 90                	xchg   ax,ax
c000db04:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000db09:	0f b6 c0             	movzx  eax,al
c000db0c:	83 e0 02             	and    eax,0x2
c000db0f:	0f 84 d3 03 00 00    	je     c000dee8 <tcp_process+0x974>
c000db15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db19:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000db1c:	8d 50 ff             	lea    edx,[eax-0x1]
c000db1f:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000db24:	39 c2                	cmp    edx,eax
c000db26:	0f 85 bc 03 00 00    	jne    c000dee8 <tcp_process+0x974>
c000db2c:	83 ec 0c             	sub    esp,0xc
c000db2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db33:	e8 e4 29 00 00       	call   c001051c <tcp_rexmit>
c000db38:	83 c4 10             	add    esp,0x10
c000db3b:	e9 a8 03 00 00       	jmp    c000dee8 <tcp_process+0x974>
c000db40:	90                   	nop
c000db41:	e9 a2 03 00 00       	jmp    c000dee8 <tcp_process+0x974>
c000db46:	66 90                	xchg   ax,ax
c000db48:	83 ec 0c             	sub    esp,0xc
c000db4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db4f:	e8 cc df ff ff       	call   c000bb20 <tcp_receive>
c000db54:	83 c4 10             	add    esp,0x10
c000db57:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000db5c:	0f b6 c0             	movzx  eax,al
c000db5f:	83 e0 20             	and    eax,0x20
c000db62:	0f 84 84 03 00 00    	je     c000deec <tcp_process+0x978>
c000db68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db6c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000db6f:	83 c8 02             	or     eax,0x2
c000db72:	88 c2                	mov    dl,al
c000db74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db78:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000db7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db7f:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000db86:	e9 61 03 00 00       	jmp    c000deec <tcp_process+0x978>
c000db8b:	90                   	nop
c000db8c:	83 ec 0c             	sub    esp,0xc
c000db8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db93:	e8 88 df ff ff       	call   c000bb20 <tcp_receive>
c000db98:	83 c4 10             	add    esp,0x10
c000db9b:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dba0:	0f b6 c0             	movzx  eax,al
c000dba3:	83 e0 20             	and    eax,0x20
c000dba6:	0f 84 08 01 00 00    	je     c000dcb4 <tcp_process+0x740>
c000dbac:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dbb1:	0f b6 c0             	movzx  eax,al
c000dbb4:	83 e0 10             	and    eax,0x10
c000dbb7:	0f 84 d3 00 00 00    	je     c000dc90 <tcp_process+0x71c>
c000dbbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbc1:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000dbc4:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dbc9:	39 c2                	cmp    edx,eax
c000dbcb:	0f 85 bf 00 00 00    	jne    c000dc90 <tcp_process+0x71c>
c000dbd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbd5:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dbd8:	83 c8 02             	or     eax,0x2
c000dbdb:	88 c2                	mov    dl,al
c000dbdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbe1:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dbe4:	83 ec 0c             	sub    esp,0xc
c000dbe7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dbeb:	e8 48 c5 ff ff       	call   c000a138 <tcp_pcb_purge>
c000dbf0:	83 c4 10             	add    esp,0x10
c000dbf3:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dbf8:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dbfc:	75 12                	jne    c000dc10 <tcp_process+0x69c>
c000dbfe:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dc03:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dc06:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000dc0b:	eb 4b                	jmp    c000dc58 <tcp_process+0x6e4>
c000dc0d:	8d 76 00             	lea    esi,[esi+0x0]
c000dc10:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dc15:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dc1a:	eb 30                	jmp    c000dc4c <tcp_process+0x6d8>
c000dc1c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dc21:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dc24:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dc28:	75 12                	jne    c000dc3c <tcp_process+0x6c8>
c000dc2a:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dc2f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dc33:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000dc36:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dc39:	eb 1d                	jmp    c000dc58 <tcp_process+0x6e4>
c000dc3b:	90                   	nop
c000dc3c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dc41:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dc44:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dc49:	8d 76 00             	lea    esi,[esi+0x0]
c000dc4c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dc51:	85 c0                	test   eax,eax
c000dc53:	75 c7                	jne    c000dc1c <tcp_process+0x6a8>
c000dc55:	8d 76 00             	lea    esi,[esi+0x0]
c000dc58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc5c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000dc63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc67:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000dc6e:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000dc74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc78:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dc7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc7f:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000dc84:	e8 93 2e 00 00       	call   c0010b1c <tcp_timer_needed>
c000dc89:	e9 62 02 00 00       	jmp    c000def0 <tcp_process+0x97c>
c000dc8e:	66 90                	xchg   ax,ax
c000dc90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc94:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dc97:	83 c8 02             	or     eax,0x2
c000dc9a:	88 c2                	mov    dl,al
c000dc9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dca0:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dca3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dca7:	c7 40 10 08 00 00 00 	mov    DWORD PTR [eax+0x10],0x8
c000dcae:	e9 3d 02 00 00       	jmp    c000def0 <tcp_process+0x97c>
c000dcb3:	90                   	nop
c000dcb4:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dcb9:	0f b6 c0             	movzx  eax,al
c000dcbc:	83 e0 10             	and    eax,0x10
c000dcbf:	0f 84 2b 02 00 00    	je     c000def0 <tcp_process+0x97c>
c000dcc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcc9:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000dccc:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dcd1:	39 c2                	cmp    edx,eax
c000dcd3:	0f 85 17 02 00 00    	jne    c000def0 <tcp_process+0x97c>
c000dcd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcdd:	c7 40 10 06 00 00 00 	mov    DWORD PTR [eax+0x10],0x6
c000dce4:	e9 07 02 00 00       	jmp    c000def0 <tcp_process+0x97c>
c000dce9:	8d 76 00             	lea    esi,[esi+0x0]
c000dcec:	83 ec 0c             	sub    esp,0xc
c000dcef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dcf3:	e8 28 de ff ff       	call   c000bb20 <tcp_receive>
c000dcf8:	83 c4 10             	add    esp,0x10
c000dcfb:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dd00:	0f b6 c0             	movzx  eax,al
c000dd03:	83 e0 20             	and    eax,0x20
c000dd06:	0f 84 e8 01 00 00    	je     c000def4 <tcp_process+0x980>
c000dd0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd10:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dd13:	83 c8 02             	or     eax,0x2
c000dd16:	88 c2                	mov    dl,al
c000dd18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd1c:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dd1f:	83 ec 0c             	sub    esp,0xc
c000dd22:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd26:	e8 0d c4 ff ff       	call   c000a138 <tcp_pcb_purge>
c000dd2b:	83 c4 10             	add    esp,0x10
c000dd2e:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dd33:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dd37:	75 0f                	jne    c000dd48 <tcp_process+0x7d4>
c000dd39:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dd3e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dd41:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000dd46:	eb 48                	jmp    c000dd90 <tcp_process+0x81c>
c000dd48:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dd4d:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dd52:	eb 30                	jmp    c000dd84 <tcp_process+0x810>
c000dd54:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dd59:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dd5c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dd60:	75 12                	jne    c000dd74 <tcp_process+0x800>
c000dd62:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dd67:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dd6b:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000dd6e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dd71:	eb 1d                	jmp    c000dd90 <tcp_process+0x81c>
c000dd73:	90                   	nop
c000dd74:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dd79:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dd7c:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dd81:	8d 76 00             	lea    esi,[esi+0x0]
c000dd84:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dd89:	85 c0                	test   eax,eax
c000dd8b:	75 c7                	jne    c000dd54 <tcp_process+0x7e0>
c000dd8d:	8d 76 00             	lea    esi,[esi+0x0]
c000dd90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd94:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000dd9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd9f:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000dda6:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000ddac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddb0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ddb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddb7:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000ddbc:	e8 5b 2d 00 00       	call   c0010b1c <tcp_timer_needed>
c000ddc1:	e9 2e 01 00 00       	jmp    c000def4 <tcp_process+0x980>
c000ddc6:	66 90                	xchg   ax,ax
c000ddc8:	83 ec 0c             	sub    esp,0xc
c000ddcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddcf:	e8 4c dd ff ff       	call   c000bb20 <tcp_receive>
c000ddd4:	83 c4 10             	add    esp,0x10
c000ddd7:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dddc:	0f b6 c0             	movzx  eax,al
c000dddf:	83 e0 10             	and    eax,0x10
c000dde2:	0f 84 10 01 00 00    	je     c000def8 <tcp_process+0x984>
c000dde8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddec:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000ddef:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000ddf4:	39 c2                	cmp    edx,eax
c000ddf6:	0f 85 fc 00 00 00    	jne    c000def8 <tcp_process+0x984>
c000ddfc:	83 ec 0c             	sub    esp,0xc
c000ddff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de03:	e8 30 c3 ff ff       	call   c000a138 <tcp_pcb_purge>
c000de08:	83 c4 10             	add    esp,0x10
c000de0b:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000de10:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000de14:	75 12                	jne    c000de28 <tcp_process+0x8b4>
c000de16:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000de1b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000de1e:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000de23:	eb 4b                	jmp    c000de70 <tcp_process+0x8fc>
c000de25:	8d 76 00             	lea    esi,[esi+0x0]
c000de28:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000de2d:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000de32:	eb 30                	jmp    c000de64 <tcp_process+0x8f0>
c000de34:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000de39:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000de3c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000de40:	75 12                	jne    c000de54 <tcp_process+0x8e0>
c000de42:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000de47:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000de4b:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000de4e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000de51:	eb 1d                	jmp    c000de70 <tcp_process+0x8fc>
c000de53:	90                   	nop
c000de54:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000de59:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000de5c:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000de61:	8d 76 00             	lea    esi,[esi+0x0]
c000de64:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000de69:	85 c0                	test   eax,eax
c000de6b:	75 c7                	jne    c000de34 <tcp_process+0x8c0>
c000de6d:	8d 76 00             	lea    esi,[esi+0x0]
c000de70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de74:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000de7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de7f:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000de86:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000de8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de90:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000de93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de97:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000de9c:	e8 7b 2c 00 00       	call   c0010b1c <tcp_timer_needed>
c000dea1:	eb 55                	jmp    c000def8 <tcp_process+0x984>
c000dea3:	90                   	nop
c000dea4:	83 ec 0c             	sub    esp,0xc
c000dea7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000deab:	e8 70 dc ff ff       	call   c000bb20 <tcp_receive>
c000deb0:	83 c4 10             	add    esp,0x10
c000deb3:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000deb8:	0f b6 c0             	movzx  eax,al
c000debb:	83 e0 10             	and    eax,0x10
c000debe:	74 3c                	je     c000defc <tcp_process+0x988>
c000dec0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dec4:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000dec7:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000decc:	39 c2                	cmp    edx,eax
c000dece:	75 2c                	jne    c000defc <tcp_process+0x988>
c000ded0:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000ded5:	83 c8 10             	or     eax,0x10
c000ded8:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000dedd:	eb 1d                	jmp    c000defc <tcp_process+0x988>
c000dedf:	90                   	nop
c000dee0:	90                   	nop
c000dee1:	eb 1d                	jmp    c000df00 <tcp_process+0x98c>
c000dee3:	90                   	nop
c000dee4:	90                   	nop
c000dee5:	eb 19                	jmp    c000df00 <tcp_process+0x98c>
c000dee7:	90                   	nop
c000dee8:	90                   	nop
c000dee9:	eb 15                	jmp    c000df00 <tcp_process+0x98c>
c000deeb:	90                   	nop
c000deec:	90                   	nop
c000deed:	eb 11                	jmp    c000df00 <tcp_process+0x98c>
c000deef:	90                   	nop
c000def0:	90                   	nop
c000def1:	eb 0d                	jmp    c000df00 <tcp_process+0x98c>
c000def3:	90                   	nop
c000def4:	90                   	nop
c000def5:	eb 09                	jmp    c000df00 <tcp_process+0x98c>
c000def7:	90                   	nop
c000def8:	90                   	nop
c000def9:	eb 05                	jmp    c000df00 <tcp_process+0x98c>
c000defb:	90                   	nop
c000defc:	90                   	nop
c000defd:	8d 76 00             	lea    esi,[esi+0x0]
c000df00:	b0 00                	mov    al,0x0
c000df02:	66 90                	xchg   ax,ax
c000df04:	83 c4 18             	add    esp,0x18
c000df07:	5b                   	pop    ebx
c000df08:	c3                   	ret    
c000df09:	8d 76 00             	lea    esi,[esi+0x0]

c000df0c <tcp_input>:
c000df0c:	53                   	push   ebx
c000df0d:	83 ec 18             	sub    esp,0x18
c000df10:	66 a1 b2 67 03 c0    	mov    ax,ds:0xc00367b2
c000df16:	83 c0 01             	add    eax,0x1
c000df19:	66 a3 b2 67 03 c0    	mov    ds:0xc00367b2,ax
c000df1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df26:	a3 b8 a8 03 c0       	mov    ds:0xc003a8b8,eax
c000df2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df2f:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000df32:	a1 b8 a8 03 c0       	mov    eax,ds:0xc003a8b8
c000df37:	66 8b 00             	mov    ax,WORD PTR [eax]
c000df3a:	0f b7 c0             	movzx  eax,ax
c000df3d:	83 ec 0c             	sub    esp,0xc
c000df40:	50                   	push   eax
c000df41:	e8 a2 2c ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000df46:	83 c4 10             	add    esp,0x10
c000df49:	0f b7 c0             	movzx  eax,ax
c000df4c:	c1 e8 08             	shr    eax,0x8
c000df4f:	0f b7 c0             	movzx  eax,ax
c000df52:	83 e0 0f             	and    eax,0xf
c000df55:	c1 e0 02             	shl    eax,0x2
c000df58:	01 d8                	add    eax,ebx
c000df5a:	a3 bc a8 03 c0       	mov    ds:0xc003a8bc,eax
c000df5f:	a1 b8 a8 03 c0       	mov    eax,ds:0xc003a8b8
c000df64:	66 8b 00             	mov    ax,WORD PTR [eax]
c000df67:	0f b7 c0             	movzx  eax,ax
c000df6a:	83 ec 0c             	sub    esp,0xc
c000df6d:	50                   	push   eax
c000df6e:	e8 75 2c ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000df73:	83 c4 10             	add    esp,0x10
c000df76:	0f b7 c0             	movzx  eax,ax
c000df79:	c1 e8 08             	shr    eax,0x8
c000df7c:	83 e0 0f             	and    eax,0xf
c000df7f:	c1 e0 02             	shl    eax,0x2
c000df82:	f7 d8                	neg    eax
c000df84:	98                   	cwde   
c000df85:	83 ec 08             	sub    esp,0x8
c000df88:	50                   	push   eax
c000df89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df8d:	e8 2e a2 ff ff       	call   c00081c0 <pbuf_header>
c000df92:	83 c4 10             	add    esp,0x10
c000df95:	0f b6 c0             	movzx  eax,al
c000df98:	85 c0                	test   eax,eax
c000df9a:	75 10                	jne    c000dfac <tcp_input+0xa0>
c000df9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfa0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000dfa3:	0f b7 c0             	movzx  eax,ax
c000dfa6:	83 f8 13             	cmp    eax,0x13
c000dfa9:	77 35                	ja     c000dfe0 <tcp_input+0xd4>
c000dfab:	90                   	nop
c000dfac:	66 a1 ba 67 03 c0    	mov    ax,ds:0xc00367ba
c000dfb2:	83 c0 01             	add    eax,0x1
c000dfb5:	66 a3 ba 67 03 c0    	mov    ds:0xc00367ba,ax
c000dfbb:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000dfc1:	83 c0 01             	add    eax,0x1
c000dfc4:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000dfca:	83 ec 0c             	sub    esp,0xc
c000dfcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dfd1:	e8 86 a3 ff ff       	call   c000835c <pbuf_free>
c000dfd6:	83 c4 10             	add    esp,0x10
c000dfd9:	e9 fa 09 00 00       	jmp    c000e9d8 <tcp_input+0xacc>
c000dfde:	66 90                	xchg   ax,ax
c000dfe0:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000dfe5:	83 ec 08             	sub    esp,0x8
c000dfe8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dfec:	50                   	push   eax
c000dfed:	e8 5e 5e 00 00       	call   c0013e50 <ip4_addr_isbroadcast>
c000dff2:	83 c4 10             	add    esp,0x10
c000dff5:	0f b6 c0             	movzx  eax,al
c000dff8:	85 c0                	test   eax,eax
c000dffa:	75 14                	jne    c000e010 <tcp_input+0x104>
c000dffc:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e001:	25 f0 00 00 00       	and    eax,0xf0
c000e006:	3d e0 00 00 00       	cmp    eax,0xe0
c000e00b:	75 37                	jne    c000e044 <tcp_input+0x138>
c000e00d:	8d 76 00             	lea    esi,[esi+0x0]
c000e010:	66 a1 c0 67 03 c0    	mov    ax,ds:0xc00367c0
c000e016:	83 c0 01             	add    eax,0x1
c000e019:	66 a3 c0 67 03 c0    	mov    ds:0xc00367c0,ax
c000e01f:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e025:	83 c0 01             	add    eax,0x1
c000e028:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e02e:	83 ec 0c             	sub    esp,0xc
c000e031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e035:	e8 22 a3 ff ff       	call   c000835c <pbuf_free>
c000e03a:	83 c4 10             	add    esp,0x10
c000e03d:	e9 96 09 00 00       	jmp    c000e9d8 <tcp_input+0xacc>
c000e042:	66 90                	xchg   ax,ax
c000e044:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e048:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e04b:	0f b7 c0             	movzx  eax,ax
c000e04e:	83 ec 0c             	sub    esp,0xc
c000e051:	50                   	push   eax
c000e052:	6a 06                	push   0x6
c000e054:	68 98 68 03 c0       	push   0xc0036898
c000e059:	68 90 68 03 c0       	push   0xc0036890
c000e05e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e062:	e8 11 51 00 00       	call   c0013178 <inet_chksum_pseudo>
c000e067:	83 c4 20             	add    esp,0x20
c000e06a:	0f b7 c0             	movzx  eax,ax
c000e06d:	85 c0                	test   eax,eax
c000e06f:	74 33                	je     c000e0a4 <tcp_input+0x198>
c000e071:	66 a1 b8 67 03 c0    	mov    ax,ds:0xc00367b8
c000e077:	83 c0 01             	add    eax,0x1
c000e07a:	66 a3 b8 67 03 c0    	mov    ds:0xc00367b8,ax
c000e080:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e086:	83 c0 01             	add    eax,0x1
c000e089:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e08f:	83 ec 0c             	sub    esp,0xc
c000e092:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e096:	e8 c1 a2 ff ff       	call   c000835c <pbuf_free>
c000e09b:	83 c4 10             	add    esp,0x10
c000e09e:	e9 35 09 00 00       	jmp    c000e9d8 <tcp_input+0xacc>
c000e0a3:	90                   	nop
c000e0a4:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e0a9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e0ad:	0f b7 c0             	movzx  eax,ax
c000e0b0:	83 ec 0c             	sub    esp,0xc
c000e0b3:	50                   	push   eax
c000e0b4:	e8 2f 2b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e0b9:	83 c4 10             	add    esp,0x10
c000e0bc:	0f b7 c0             	movzx  eax,ax
c000e0bf:	c1 e8 0c             	shr    eax,0xc
c000e0c2:	88 44 24 02          	mov    BYTE PTR [esp+0x2],al
c000e0c6:	0f b6 44 24 02       	movzx  eax,BYTE PTR [esp+0x2]
c000e0cb:	ba 00 00 00 00       	mov    edx,0x0
c000e0d0:	89 d1                	mov    ecx,edx
c000e0d2:	29 c1                	sub    ecx,eax
c000e0d4:	89 c8                	mov    eax,ecx
c000e0d6:	c1 e0 02             	shl    eax,0x2
c000e0d9:	98                   	cwde   
c000e0da:	83 ec 08             	sub    esp,0x8
c000e0dd:	50                   	push   eax
c000e0de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0e2:	e8 d9 a0 ff ff       	call   c00081c0 <pbuf_header>
c000e0e7:	83 c4 10             	add    esp,0x10
c000e0ea:	0f b6 c0             	movzx  eax,al
c000e0ed:	85 c0                	test   eax,eax
c000e0ef:	74 33                	je     c000e124 <tcp_input+0x218>
c000e0f1:	66 a1 ba 67 03 c0    	mov    ax,ds:0xc00367ba
c000e0f7:	83 c0 01             	add    eax,0x1
c000e0fa:	66 a3 ba 67 03 c0    	mov    ds:0xc00367ba,ax
c000e100:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e106:	83 c0 01             	add    eax,0x1
c000e109:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e10f:	83 ec 0c             	sub    esp,0xc
c000e112:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e116:	e8 41 a2 ff ff       	call   c000835c <pbuf_free>
c000e11b:	83 c4 10             	add    esp,0x10
c000e11e:	e9 b5 08 00 00       	jmp    c000e9d8 <tcp_input+0xacc>
c000e123:	90                   	nop
c000e124:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e129:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e12c:	0f b7 c0             	movzx  eax,ax
c000e12f:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e135:	83 ec 0c             	sub    esp,0xc
c000e138:	50                   	push   eax
c000e139:	e8 aa 2a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e13e:	83 c4 10             	add    esp,0x10
c000e141:	66 89 03             	mov    WORD PTR [ebx],ax
c000e144:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e149:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e14d:	0f b7 c0             	movzx  eax,ax
c000e150:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e156:	83 ec 0c             	sub    esp,0xc
c000e159:	50                   	push   eax
c000e15a:	e8 89 2a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e15f:	83 c4 10             	add    esp,0x10
c000e162:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000e166:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e16b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e16e:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e174:	83 ec 0c             	sub    esp,0xc
c000e177:	50                   	push   eax
c000e178:	e8 8f 2a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000e17d:	83 c4 10             	add    esp,0x10
c000e180:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e183:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e186:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000e18b:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e190:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e193:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e199:	83 ec 0c             	sub    esp,0xc
c000e19c:	50                   	push   eax
c000e19d:	e8 6a 2a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000e1a2:	83 c4 10             	add    esp,0x10
c000e1a5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000e1a8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e1ab:	a3 b0 a8 03 c0       	mov    ds:0xc003a8b0,eax
c000e1b0:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e1b5:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000e1b9:	0f b7 c0             	movzx  eax,ax
c000e1bc:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e1c2:	83 ec 0c             	sub    esp,0xc
c000e1c5:	50                   	push   eax
c000e1c6:	e8 1d 2a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e1cb:	83 c4 10             	add    esp,0x10
c000e1ce:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000e1d2:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e1d7:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e1db:	0f b7 c0             	movzx  eax,ax
c000e1de:	83 ec 0c             	sub    esp,0xc
c000e1e1:	50                   	push   eax
c000e1e2:	e8 01 2a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e1e7:	83 c4 10             	add    esp,0x10
c000e1ea:	83 e0 3f             	and    eax,0x3f
c000e1ed:	a2 ac a8 03 c0       	mov    ds:0xc003a8ac,al
c000e1f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1f6:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000e1f9:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e1fe:	0f b6 c0             	movzx  eax,al
c000e201:	83 e0 03             	and    eax,0x3
c000e204:	0f 95 c0             	setne  al
c000e207:	0f b6 c0             	movzx  eax,al
c000e20a:	01 d0                	add    eax,edx
c000e20c:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000e212:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e21a:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000e21f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e223:	e9 50 01 00 00       	jmp    c000e378 <tcp_input+0x46c>
c000e228:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e22c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e22f:	85 c0                	test   eax,eax
c000e231:	75 15                	jne    c000e248 <tcp_input+0x33c>
c000e233:	83 ec 08             	sub    esp,0x8
c000e236:	68 30 05 03 c0       	push   0xc0030530
c000e23b:	68 c6 fa 02 c0       	push   0xc002fac6
c000e240:	e8 4f 19 01 00       	call   c001fb94 <CPrintf>
c000e245:	83 c4 10             	add    esp,0x10
c000e248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e24c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e24f:	83 f8 0a             	cmp    eax,0xa
c000e252:	75 18                	jne    c000e26c <tcp_input+0x360>
c000e254:	83 ec 08             	sub    esp,0x8
c000e257:	68 58 05 03 c0       	push   0xc0030558
c000e25c:	68 c6 fa 02 c0       	push   0xc002fac6
c000e261:	e8 2e 19 01 00       	call   c001fb94 <CPrintf>
c000e266:	83 c4 10             	add    esp,0x10
c000e269:	8d 76 00             	lea    esi,[esi+0x0]
c000e26c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e270:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e273:	83 f8 01             	cmp    eax,0x1
c000e276:	75 18                	jne    c000e290 <tcp_input+0x384>
c000e278:	83 ec 08             	sub    esp,0x8
c000e27b:	68 84 05 03 c0       	push   0xc0030584
c000e280:	68 c6 fa 02 c0       	push   0xc002fac6
c000e285:	e8 0a 19 01 00       	call   c001fb94 <CPrintf>
c000e28a:	83 c4 10             	add    esp,0x10
c000e28d:	8d 76 00             	lea    esi,[esi+0x0]
c000e290:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e294:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e298:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e29d:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e2a0:	0f b7 d2             	movzx  edx,dx
c000e2a3:	0f b7 c0             	movzx  eax,ax
c000e2a6:	39 c2                	cmp    edx,eax
c000e2a8:	0f 85 b6 00 00 00    	jne    c000e364 <tcp_input+0x458>
c000e2ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2b2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e2b5:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e2ba:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e2be:	0f b7 d2             	movzx  edx,dx
c000e2c1:	0f b7 c0             	movzx  eax,ax
c000e2c4:	39 c2                	cmp    edx,eax
c000e2c6:	0f 85 98 00 00 00    	jne    c000e364 <tcp_input+0x458>
c000e2cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2d0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e2d3:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c000e2d8:	39 c2                	cmp    edx,eax
c000e2da:	0f 85 84 00 00 00    	jne    c000e364 <tcp_input+0x458>
c000e2e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2e4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e2e6:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e2eb:	39 c2                	cmp    edx,eax
c000e2ed:	75 75                	jne    c000e364 <tcp_input+0x458>
c000e2ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2f3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e2f6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e2fa:	75 18                	jne    c000e314 <tcp_input+0x408>
c000e2fc:	83 ec 08             	sub    esp,0x8
c000e2ff:	68 ac 05 03 c0       	push   0xc00305ac
c000e304:	68 c6 fa 02 c0       	push   0xc002fac6
c000e309:	e8 86 18 01 00       	call   c001fb94 <CPrintf>
c000e30e:	83 c4 10             	add    esp,0x10
c000e311:	8d 76 00             	lea    esi,[esi+0x0]
c000e314:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e319:	74 25                	je     c000e340 <tcp_input+0x434>
c000e31b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e31f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e322:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e326:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e329:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000e32f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e333:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e336:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e33a:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000e33f:	90                   	nop
c000e340:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e344:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e347:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e34b:	75 3b                	jne    c000e388 <tcp_input+0x47c>
c000e34d:	83 ec 08             	sub    esp,0x8
c000e350:	68 d8 05 03 c0       	push   0xc00305d8
c000e355:	68 c6 fa 02 c0       	push   0xc002fac6
c000e35a:	e8 35 18 01 00       	call   c001fb94 <CPrintf>
c000e35f:	83 c4 10             	add    esp,0x10
c000e362:	eb 24                	jmp    c000e388 <tcp_input+0x47c>
c000e364:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e368:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e36c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e370:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e373:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e377:	90                   	nop
c000e378:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e37d:	0f 85 a5 fe ff ff    	jne    c000e228 <tcp_input+0x31c>
c000e383:	eb 07                	jmp    c000e38c <tcp_input+0x480>
c000e385:	8d 76 00             	lea    esi,[esi+0x0]
c000e388:	90                   	nop
c000e389:	8d 76 00             	lea    esi,[esi+0x0]
c000e38c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e391:	0f 85 89 01 00 00    	jne    c000e520 <tcp_input+0x614>
c000e397:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000e39c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e3a0:	e9 ab 00 00 00       	jmp    c000e450 <tcp_input+0x544>
c000e3a5:	8d 76 00             	lea    esi,[esi+0x0]
c000e3a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3ac:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e3af:	83 f8 0a             	cmp    eax,0xa
c000e3b2:	74 18                	je     c000e3cc <tcp_input+0x4c0>
c000e3b4:	83 ec 08             	sub    esp,0x8
c000e3b7:	68 04 06 03 c0       	push   0xc0030604
c000e3bc:	68 c6 fa 02 c0       	push   0xc002fac6
c000e3c1:	e8 ce 17 01 00       	call   c001fb94 <CPrintf>
c000e3c6:	83 c4 10             	add    esp,0x10
c000e3c9:	8d 76 00             	lea    esi,[esi+0x0]
c000e3cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3d0:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e3d4:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e3d9:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e3dc:	0f b7 d2             	movzx  edx,dx
c000e3df:	0f b7 c0             	movzx  eax,ax
c000e3e2:	39 c2                	cmp    edx,eax
c000e3e4:	75 5e                	jne    c000e444 <tcp_input+0x538>
c000e3e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3ea:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e3ed:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e3f2:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e3f6:	0f b7 d2             	movzx  edx,dx
c000e3f9:	0f b7 c0             	movzx  eax,ax
c000e3fc:	39 c2                	cmp    edx,eax
c000e3fe:	75 44                	jne    c000e444 <tcp_input+0x538>
c000e400:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e404:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e407:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c000e40c:	39 c2                	cmp    edx,eax
c000e40e:	75 34                	jne    c000e444 <tcp_input+0x538>
c000e410:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e414:	8b 10                	mov    edx,DWORD PTR [eax]
c000e416:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e41b:	39 c2                	cmp    edx,eax
c000e41d:	75 25                	jne    c000e444 <tcp_input+0x538>
c000e41f:	83 ec 0c             	sub    esp,0xc
c000e422:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e426:	e8 81 d4 ff ff       	call   c000b8ac <tcp_timewait_input>
c000e42b:	83 c4 10             	add    esp,0x10
c000e42e:	83 ec 0c             	sub    esp,0xc
c000e431:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e435:	e8 22 9f ff ff       	call   c000835c <pbuf_free>
c000e43a:	83 c4 10             	add    esp,0x10
c000e43d:	e9 96 05 00 00       	jmp    c000e9d8 <tcp_input+0xacc>
c000e442:	66 90                	xchg   ax,ax
c000e444:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e448:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e44b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e44f:	90                   	nop
c000e450:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e455:	0f 85 4d ff ff ff    	jne    c000e3a8 <tcp_input+0x49c>
c000e45b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e463:	a1 78 68 03 c0       	mov    eax,ds:0xc0036878
c000e468:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e46c:	eb 52                	jmp    c000e4c0 <tcp_input+0x5b4>
c000e46e:	66 90                	xchg   ax,ax
c000e470:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e474:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e477:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e47c:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e480:	0f b7 d2             	movzx  edx,dx
c000e483:	0f b7 c0             	movzx  eax,ax
c000e486:	39 c2                	cmp    edx,eax
c000e488:	75 22                	jne    c000e4ac <tcp_input+0x5a0>
c000e48a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e48e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e490:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e495:	39 c2                	cmp    edx,eax
c000e497:	74 2f                	je     c000e4c8 <tcp_input+0x5bc>
c000e499:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e49d:	85 c0                	test   eax,eax
c000e49f:	74 27                	je     c000e4c8 <tcp_input+0x5bc>
c000e4a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4a5:	8b 00                	mov    eax,DWORD PTR [eax]
c000e4a7:	85 c0                	test   eax,eax
c000e4a9:	74 1d                	je     c000e4c8 <tcp_input+0x5bc>
c000e4ab:	90                   	nop
c000e4ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e4b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4b8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e4bb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e4bf:	90                   	nop
c000e4c0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e4c5:	75 a9                	jne    c000e470 <tcp_input+0x564>
c000e4c7:	90                   	nop
c000e4c8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e4cd:	74 51                	je     c000e520 <tcp_input+0x614>
c000e4cf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e4d4:	74 26                	je     c000e4fc <tcp_input+0x5f0>
c000e4d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4da:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e4dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e4e1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e4e4:	8b 15 78 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036878
c000e4ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4ee:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e4f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4f5:	a3 78 68 03 c0       	mov    ds:0xc0036878,eax
c000e4fa:	66 90                	xchg   ax,ax
c000e4fc:	83 ec 0c             	sub    esp,0xc
c000e4ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e503:	e8 60 ee ff ff       	call   c000d368 <tcp_listen_input>
c000e508:	83 c4 10             	add    esp,0x10
c000e50b:	83 ec 0c             	sub    esp,0xc
c000e50e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e512:	e8 45 9e ff ff       	call   c000835c <pbuf_free>
c000e517:	83 c4 10             	add    esp,0x10
c000e51a:	e9 b9 04 00 00       	jmp    c000e9d8 <tcp_input+0xacc>
c000e51f:	90                   	nop
c000e520:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e525:	0f 84 19 04 00 00    	je     c000e944 <tcp_input+0xa38>
c000e52b:	c7 05 c0 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c0,0x0
c000e535:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e539:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e53c:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000e542:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e546:	a3 c4 a8 03 c0       	mov    ds:0xc003a8c4,eax
c000e54b:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e550:	a3 cc a8 03 c0       	mov    ds:0xc003a8cc,eax
c000e555:	c7 05 a4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8a4,0x0
c000e55f:	c6 05 a8 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a8a8,0x0
c000e566:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e56a:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e570:	85 c0                	test   eax,eax
c000e572:	0f 84 b4 00 00 00    	je     c000e62c <tcp_input+0x720>
c000e578:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e57c:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e582:	85 c0                	test   eax,eax
c000e584:	74 2e                	je     c000e5b4 <tcp_input+0x6a8>
c000e586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e58a:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e590:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e594:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000e59a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e59e:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e5a1:	6a 00                	push   0x0
c000e5a3:	51                   	push   ecx
c000e5a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e5a8:	52                   	push   edx
c000e5a9:	ff d0                	call   eax
c000e5ab:	83 c4 10             	add    esp,0x10
c000e5ae:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e5b2:	eb 20                	jmp    c000e5d4 <tcp_input+0x6c8>
c000e5b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5b8:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e5be:	6a 00                	push   0x0
c000e5c0:	50                   	push   eax
c000e5c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e5c5:	6a 00                	push   0x0
c000e5c7:	e8 b8 c8 ff ff       	call   c000ae84 <tcp_recv_null>
c000e5cc:	83 c4 10             	add    esp,0x10
c000e5cf:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e5d3:	90                   	nop
c000e5d4:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e5d9:	85 c0                	test   eax,eax
c000e5db:	75 13                	jne    c000e5f0 <tcp_input+0x6e4>
c000e5dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5e1:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000e5eb:	eb 3f                	jmp    c000e62c <tcp_input+0x720>
c000e5ed:	8d 76 00             	lea    esi,[esi+0x0]
c000e5f0:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e5f5:	83 f8 f6             	cmp    eax,0xfffffff6
c000e5f8:	74 0e                	je     c000e608 <tcp_input+0x6fc>
c000e5fa:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000e600:	0f b7 c0             	movzx  eax,ax
c000e603:	85 c0                	test   eax,eax
c000e605:	74 25                	je     c000e62c <tcp_input+0x720>
c000e607:	90                   	nop
c000e608:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e60e:	83 c0 01             	add    eax,0x1
c000e611:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e617:	83 ec 0c             	sub    esp,0xc
c000e61a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e61e:	e8 39 9d ff ff       	call   c000835c <pbuf_free>
c000e623:	83 c4 10             	add    esp,0x10
c000e626:	e9 ad 03 00 00       	jmp    c000e9d8 <tcp_input+0xacc>
c000e62b:	90                   	nop
c000e62c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e630:	a3 88 68 03 c0       	mov    ds:0xc0036888,eax
c000e635:	83 ec 0c             	sub    esp,0xc
c000e638:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e63c:	e8 33 ef ff ff       	call   c000d574 <tcp_process>
c000e641:	83 c4 10             	add    esp,0x10
c000e644:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e648:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e64d:	83 f8 f6             	cmp    eax,0xfffffff6
c000e650:	0f 84 9a 02 00 00    	je     c000e8f0 <tcp_input+0x9e4>
c000e656:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e65b:	0f b6 c0             	movzx  eax,al
c000e65e:	83 e0 08             	and    eax,0x8
c000e661:	74 59                	je     c000e6bc <tcp_input+0x7b0>
c000e663:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e667:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e66d:	85 c0                	test   eax,eax
c000e66f:	74 1f                	je     c000e690 <tcp_input+0x784>
c000e671:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e675:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e67b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e67f:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e682:	83 ec 08             	sub    esp,0x8
c000e685:	6a f5                	push   0xfffffff5
c000e687:	52                   	push   edx
c000e688:	ff d0                	call   eax
c000e68a:	83 c4 10             	add    esp,0x10
c000e68d:	8d 76 00             	lea    esi,[esi+0x0]
c000e690:	83 ec 08             	sub    esp,0x8
c000e693:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e697:	68 70 68 03 c0       	push   0xc0036870
c000e69c:	e8 ff c2 ff ff       	call   c000a9a0 <tcp_pcb_remove>
c000e6a1:	83 c4 10             	add    esp,0x10
c000e6a4:	83 ec 08             	sub    esp,0x8
c000e6a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e6ab:	6a 02                	push   0x2
c000e6ad:	e8 ee 93 ff ff       	call   c0007aa0 <memp_free>
c000e6b2:	83 c4 10             	add    esp,0x10
c000e6b5:	e9 46 02 00 00       	jmp    c000e900 <tcp_input+0x9f4>
c000e6ba:	66 90                	xchg   ax,ax
c000e6bc:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e6c1:	0f b6 c0             	movzx  eax,al
c000e6c4:	83 e0 10             	and    eax,0x10
c000e6c7:	74 2b                	je     c000e6f4 <tcp_input+0x7e8>
c000e6c9:	83 ec 08             	sub    esp,0x8
c000e6cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e6d0:	68 70 68 03 c0       	push   0xc0036870
c000e6d5:	e8 c6 c2 ff ff       	call   c000a9a0 <tcp_pcb_remove>
c000e6da:	83 c4 10             	add    esp,0x10
c000e6dd:	83 ec 08             	sub    esp,0x8
c000e6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e6e4:	6a 02                	push   0x2
c000e6e6:	e8 b5 93 ff ff       	call   c0007aa0 <memp_free>
c000e6eb:	83 c4 10             	add    esp,0x10
c000e6ee:	e9 0d 02 00 00       	jmp    c000e900 <tcp_input+0x9f4>
c000e6f3:	90                   	nop
c000e6f4:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e6f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e6fd:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000e700:	0f b7 c0             	movzx  eax,ax
c000e703:	85 c0                	test   eax,eax
c000e705:	74 55                	je     c000e75c <tcp_input+0x850>
c000e707:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e70b:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c000e711:	85 c0                	test   eax,eax
c000e713:	74 2f                	je     c000e744 <tcp_input+0x838>
c000e715:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e719:	8b 90 88 00 00 00    	mov    edx,DWORD PTR [eax+0x88]
c000e71f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e723:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000e726:	0f b7 c8             	movzx  ecx,ax
c000e729:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e72d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000e730:	83 ec 04             	sub    esp,0x4
c000e733:	51                   	push   ecx
c000e734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e738:	50                   	push   eax
c000e739:	ff d2                	call   edx
c000e73b:	83 c4 10             	add    esp,0x10
c000e73e:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e742:	eb 08                	jmp    c000e74c <tcp_input+0x840>
c000e744:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e749:	8d 76 00             	lea    esi,[esi+0x0]
c000e74c:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e751:	83 f8 f6             	cmp    eax,0xfffffff6
c000e754:	0f 84 9a 01 00 00    	je     c000e8f4 <tcp_input+0x9e8>
c000e75a:	66 90                	xchg   ax,ax
c000e75c:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e761:	85 c0                	test   eax,eax
c000e763:	0f 84 f3 00 00 00    	je     c000e85c <tcp_input+0x950>
c000e769:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e76d:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e773:	85 c0                	test   eax,eax
c000e775:	74 15                	je     c000e78c <tcp_input+0x880>
c000e777:	83 ec 08             	sub    esp,0x8
c000e77a:	68 9d 06 03 c0       	push   0xc003069d
c000e77f:	68 c6 fa 02 c0       	push   0xc002fac6
c000e784:	e8 0b 14 01 00       	call   c001fb94 <CPrintf>
c000e789:	83 c4 10             	add    esp,0x10
c000e78c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e790:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000e793:	0f b6 c0             	movzx  eax,al
c000e796:	83 e0 10             	and    eax,0x10
c000e799:	74 25                	je     c000e7c0 <tcp_input+0x8b4>
c000e79b:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e7a0:	83 ec 0c             	sub    esp,0xc
c000e7a3:	50                   	push   eax
c000e7a4:	e8 b3 9b ff ff       	call   c000835c <pbuf_free>
c000e7a9:	83 c4 10             	add    esp,0x10
c000e7ac:	83 ec 0c             	sub    esp,0xc
c000e7af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e7b3:	e8 c4 ca ff ff       	call   c000b27c <tcp_abort>
c000e7b8:	83 c4 10             	add    esp,0x10
c000e7bb:	e9 40 01 00 00       	jmp    c000e900 <tcp_input+0x9f4>
c000e7c0:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e7c5:	0f b6 c0             	movzx  eax,al
c000e7c8:	83 e0 08             	and    eax,0x8
c000e7cb:	74 13                	je     c000e7e0 <tcp_input+0x8d4>
c000e7cd:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e7d2:	8a 50 0d             	mov    dl,BYTE PTR [eax+0xd]
c000e7d5:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e7da:	83 ca 01             	or     edx,0x1
c000e7dd:	88 50 0d             	mov    BYTE PTR [eax+0xd],dl
c000e7e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7e4:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e7ea:	85 c0                	test   eax,eax
c000e7ec:	74 2a                	je     c000e818 <tcp_input+0x90c>
c000e7ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7f2:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e7f8:	8b 0d a4 a8 03 c0    	mov    ecx,DWORD PTR ds:0xc003a8a4
c000e7fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e802:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e805:	6a 00                	push   0x0
c000e807:	51                   	push   ecx
c000e808:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e80c:	52                   	push   edx
c000e80d:	ff d0                	call   eax
c000e80f:	83 c4 10             	add    esp,0x10
c000e812:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e816:	eb 1c                	jmp    c000e834 <tcp_input+0x928>
c000e818:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e81d:	6a 00                	push   0x0
c000e81f:	50                   	push   eax
c000e820:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e824:	6a 00                	push   0x0
c000e826:	e8 59 c6 ff ff       	call   c000ae84 <tcp_recv_null>
c000e82b:	83 c4 10             	add    esp,0x10
c000e82e:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e832:	66 90                	xchg   ax,ax
c000e834:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e839:	83 f8 f6             	cmp    eax,0xfffffff6
c000e83c:	0f 84 b6 00 00 00    	je     c000e8f8 <tcp_input+0x9ec>
c000e842:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e847:	85 c0                	test   eax,eax
c000e849:	74 11                	je     c000e85c <tcp_input+0x950>
c000e84b:	8b 15 a4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8a4
c000e851:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e855:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
c000e85b:	90                   	nop
c000e85c:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e861:	0f b6 c0             	movzx  eax,al
c000e864:	83 e0 20             	and    eax,0x20
c000e867:	74 6b                	je     c000e8d4 <tcp_input+0x9c8>
c000e869:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e86d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000e870:	0f b7 c0             	movzx  eax,ax
c000e873:	3d 60 08 00 00       	cmp    eax,0x860
c000e878:	74 12                	je     c000e88c <tcp_input+0x980>
c000e87a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e87e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000e881:	83 c0 01             	add    eax,0x1
c000e884:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e888:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c000e88c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e890:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e896:	85 c0                	test   eax,eax
c000e898:	74 26                	je     c000e8c0 <tcp_input+0x9b4>
c000e89a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e89e:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e8a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e8a8:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e8ab:	6a 00                	push   0x0
c000e8ad:	6a 00                	push   0x0
c000e8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e8b3:	52                   	push   edx
c000e8b4:	ff d0                	call   eax
c000e8b6:	83 c4 10             	add    esp,0x10
c000e8b9:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e8bd:	eb 09                	jmp    c000e8c8 <tcp_input+0x9bc>
c000e8bf:	90                   	nop
c000e8c0:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e8c5:	8d 76 00             	lea    esi,[esi+0x0]
c000e8c8:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e8cd:	83 f8 f6             	cmp    eax,0xfffffff6
c000e8d0:	74 2a                	je     c000e8fc <tcp_input+0x9f0>
c000e8d2:	66 90                	xchg   ax,ax
c000e8d4:	c7 05 88 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036888,0x0
c000e8de:	83 ec 0c             	sub    esp,0xc
c000e8e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e8e5:	e8 a2 15 00 00       	call   c000fe8c <tcp_output>
c000e8ea:	83 c4 10             	add    esp,0x10
c000e8ed:	eb 11                	jmp    c000e900 <tcp_input+0x9f4>
c000e8ef:	90                   	nop
c000e8f0:	90                   	nop
c000e8f1:	eb 0d                	jmp    c000e900 <tcp_input+0x9f4>
c000e8f3:	90                   	nop
c000e8f4:	90                   	nop
c000e8f5:	eb 09                	jmp    c000e900 <tcp_input+0x9f4>
c000e8f7:	90                   	nop
c000e8f8:	90                   	nop
c000e8f9:	eb 05                	jmp    c000e900 <tcp_input+0x9f4>
c000e8fb:	90                   	nop
c000e8fc:	90                   	nop
c000e8fd:	8d 76 00             	lea    esi,[esi+0x0]
c000e900:	c7 05 88 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036888,0x0
c000e90a:	c7 05 a4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8a4,0x0
c000e914:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000e919:	85 c0                	test   eax,eax
c000e91b:	0f 84 b7 00 00 00    	je     c000e9d8 <tcp_input+0xacc>
c000e921:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000e926:	83 ec 0c             	sub    esp,0xc
c000e929:	50                   	push   eax
c000e92a:	e8 2d 9a ff ff       	call   c000835c <pbuf_free>
c000e92f:	83 c4 10             	add    esp,0x10
c000e932:	c7 05 c4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c4,0x0
c000e93c:	e9 97 00 00 00       	jmp    c000e9d8 <tcp_input+0xacc>
c000e941:	8d 76 00             	lea    esi,[esi+0x0]
c000e944:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e949:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e94d:	0f b7 c0             	movzx  eax,ax
c000e950:	83 ec 0c             	sub    esp,0xc
c000e953:	50                   	push   eax
c000e954:	e8 8f 22 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e959:	83 c4 10             	add    esp,0x10
c000e95c:	0f b7 c0             	movzx  eax,ax
c000e95f:	83 e0 04             	and    eax,0x4
c000e962:	75 64                	jne    c000e9c8 <tcp_input+0xabc>
c000e964:	66 a1 c0 67 03 c0    	mov    ax,ds:0xc00367c0
c000e96a:	83 c0 01             	add    eax,0x1
c000e96d:	66 a3 c0 67 03 c0    	mov    ds:0xc00367c0,ax
c000e973:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e979:	83 c0 01             	add    eax,0x1
c000e97c:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e982:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e987:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e98a:	0f b7 c8             	movzx  ecx,ax
c000e98d:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e992:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e996:	0f b7 d0             	movzx  edx,ax
c000e999:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000e99f:	0f b7 d8             	movzx  ebx,ax
c000e9a2:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000e9a7:	01 c3                	add    ebx,eax
c000e9a9:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000e9ae:	83 ec 08             	sub    esp,0x8
c000e9b1:	51                   	push   ecx
c000e9b2:	52                   	push   edx
c000e9b3:	68 90 68 03 c0       	push   0xc0036890
c000e9b8:	68 98 68 03 c0       	push   0xc0036898
c000e9bd:	53                   	push   ebx
c000e9be:	50                   	push   eax
c000e9bf:	e8 54 19 00 00       	call   c0010318 <tcp_rst>
c000e9c4:	83 c4 20             	add    esp,0x20
c000e9c7:	90                   	nop
c000e9c8:	83 ec 0c             	sub    esp,0xc
c000e9cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e9cf:	e8 88 99 ff ff       	call   c000835c <pbuf_free>
c000e9d4:	83 c4 10             	add    esp,0x10
c000e9d7:	90                   	nop
c000e9d8:	83 c4 18             	add    esp,0x18
c000e9db:	5b                   	pop    ebx
c000e9dc:	c3                   	ret    
c000e9dd:	66 90                	xchg   ax,ax
c000e9df:	90                   	nop

c000e9e0 <tcp_output_alloc_header>:
c000e9e0:	83 ec 2c             	sub    esp,0x2c
c000e9e3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e9e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e9eb:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000e9f0:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e9f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9fd:	01 d0                	add    eax,edx
c000e9ff:	83 c0 14             	add    eax,0x14
c000ea02:	0f b7 c0             	movzx  eax,ax
c000ea05:	83 ec 04             	sub    esp,0x4
c000ea08:	6a 00                	push   0x0
c000ea0a:	50                   	push   eax
c000ea0b:	6a 01                	push   0x1
c000ea0d:	e8 22 9b ff ff       	call   c0008534 <pbuf_alloc>
c000ea12:	83 c4 10             	add    esp,0x10
c000ea15:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea19:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000ea1e:	0f 84 10 01 00 00    	je     c000eb34 <tcp_output_alloc_header+0x154>
c000ea24:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ea29:	8d 50 13             	lea    edx,[eax+0x13]
c000ea2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ea30:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000ea34:	0f b7 c0             	movzx  eax,ax
c000ea37:	39 c2                	cmp    edx,eax
c000ea39:	7c 15                	jl     c000ea50 <tcp_output_alloc_header+0x70>
c000ea3b:	83 ec 08             	sub    esp,0x8
c000ea3e:	68 e0 06 03 c0       	push   0xc00306e0
c000ea43:	68 c6 fa 02 c0       	push   0xc002fac6
c000ea48:	e8 47 11 01 00       	call   c001fb94 <CPrintf>
c000ea4d:	83 c4 10             	add    esp,0x10
c000ea50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ea54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ea57:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ea5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea5f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ea62:	0f b7 c0             	movzx  eax,ax
c000ea65:	83 ec 0c             	sub    esp,0xc
c000ea68:	50                   	push   eax
c000ea69:	e8 7a 21 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ea6e:	83 c4 10             	add    esp,0x10
c000ea71:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ea75:	66 89 02             	mov    WORD PTR [edx],ax
c000ea78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea7c:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ea80:	0f b7 c0             	movzx  eax,ax
c000ea83:	83 ec 0c             	sub    esp,0xc
c000ea86:	50                   	push   eax
c000ea87:	e8 5c 21 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ea8c:	83 c4 10             	add    esp,0x10
c000ea8f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ea93:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ea97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea9b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ea9f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000eaa2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eaa6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000eaa9:	83 ec 0c             	sub    esp,0xc
c000eaac:	50                   	push   eax
c000eaad:	e8 5a 21 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000eab2:	83 c4 10             	add    esp,0x10
c000eab5:	89 c2                	mov    edx,eax
c000eab7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eabb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000eabe:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000eac3:	c1 e8 02             	shr    eax,0x2
c000eac6:	83 c0 05             	add    eax,0x5
c000eac9:	c1 e0 0c             	shl    eax,0xc
c000eacc:	83 c8 10             	or     eax,0x10
c000eacf:	0f b7 c0             	movzx  eax,ax
c000ead2:	83 ec 0c             	sub    esp,0xc
c000ead5:	50                   	push   eax
c000ead6:	e8 0d 21 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000eadb:	83 c4 10             	add    esp,0x10
c000eade:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eae2:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000eae6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eaea:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000eaee:	0f b7 c0             	movzx  eax,ax
c000eaf1:	83 ec 0c             	sub    esp,0xc
c000eaf4:	50                   	push   eax
c000eaf5:	e8 ee 20 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eb01:	66 89 42 0e          	mov    WORD PTR [edx+0xe],ax
c000eb05:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb09:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000eb0f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb13:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000eb19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb1d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000eb20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb24:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000eb28:	0f b7 c0             	movzx  eax,ax
c000eb2b:	01 c2                	add    edx,eax
c000eb2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb31:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000eb34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eb38:	83 c4 2c             	add    esp,0x2c
c000eb3b:	c3                   	ret    

c000eb3c <tcp_create_segment>:
c000eb3c:	53                   	push   ebx
c000eb3d:	83 ec 28             	sub    esp,0x28
c000eb40:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000eb44:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eb48:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000eb4c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000eb50:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000eb55:	c1 e0 02             	shl    eax,0x2
c000eb58:	83 e0 04             	and    eax,0x4
c000eb5b:	88 c2                	mov    dl,al
c000eb5d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000eb62:	83 e0 02             	and    eax,0x2
c000eb65:	74 05                	je     c000eb6c <tcp_create_segment+0x30>
c000eb67:	b0 0c                	mov    al,0xc
c000eb69:	eb 05                	jmp    c000eb70 <tcp_create_segment+0x34>
c000eb6b:	90                   	nop
c000eb6c:	b0 00                	mov    al,0x0
c000eb6e:	66 90                	xchg   ax,ax
c000eb70:	01 d0                	add    eax,edx
c000eb72:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000eb76:	83 ec 0c             	sub    esp,0xc
c000eb79:	6a 04                	push   0x4
c000eb7b:	e8 f4 8d ff ff       	call   c0007974 <memp_malloc>
c000eb80:	83 c4 10             	add    esp,0x10
c000eb83:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eb87:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000eb8c:	75 1a                	jne    c000eba8 <tcp_create_segment+0x6c>
c000eb8e:	83 ec 0c             	sub    esp,0xc
c000eb91:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb95:	e8 c2 97 ff ff       	call   c000835c <pbuf_free>
c000eb9a:	83 c4 10             	add    esp,0x10
c000eb9d:	b8 00 00 00 00       	mov    eax,0x0
c000eba2:	e9 31 01 00 00       	jmp    c000ecd8 <tcp_create_segment+0x19c>
c000eba7:	90                   	nop
c000eba8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ebac:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c000ebb0:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c000ebb3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ebb7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ebbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ebc1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ebc5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ebc8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ebcc:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000ebcf:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ebd4:	89 d1                	mov    ecx,edx
c000ebd6:	29 c1                	sub    ecx,eax
c000ebd8:	89 c8                	mov    eax,ecx
c000ebda:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ebde:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000ebe2:	83 ec 08             	sub    esp,0x8
c000ebe5:	6a 14                	push   0x14
c000ebe7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ebeb:	e8 d0 95 ff ff       	call   c00081c0 <pbuf_header>
c000ebf0:	83 c4 10             	add    esp,0x10
c000ebf3:	0f b6 c0             	movzx  eax,al
c000ebf6:	85 c0                	test   eax,eax
c000ebf8:	74 2a                	je     c000ec24 <tcp_create_segment+0xe8>
c000ebfa:	66 a1 c4 67 03 c0    	mov    ax,ds:0xc00367c4
c000ec00:	83 c0 01             	add    eax,0x1
c000ec03:	66 a3 c4 67 03 c0    	mov    ds:0xc00367c4,ax
c000ec09:	83 ec 0c             	sub    esp,0xc
c000ec0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ec10:	e8 bf b3 ff ff       	call   c0009fd4 <tcp_seg_free>
c000ec15:	83 c4 10             	add    esp,0x10
c000ec18:	b8 00 00 00 00       	mov    eax,0x0
c000ec1d:	e9 b6 00 00 00       	jmp    c000ecd8 <tcp_create_segment+0x19c>
c000ec22:	66 90                	xchg   ax,ax
c000ec24:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ec2b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ec2e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec32:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ec35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec39:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ec3c:	0f b7 c0             	movzx  eax,ax
c000ec3f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec43:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ec46:	83 ec 0c             	sub    esp,0xc
c000ec49:	50                   	push   eax
c000ec4a:	e8 99 1f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ec4f:	83 c4 10             	add    esp,0x10
c000ec52:	66 89 03             	mov    WORD PTR [ebx],ax
c000ec55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec59:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ec5d:	0f b7 c0             	movzx  eax,ax
c000ec60:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec64:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ec67:	83 ec 0c             	sub    esp,0xc
c000ec6a:	50                   	push   eax
c000ec6b:	e8 78 1f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ec70:	83 c4 10             	add    esp,0x10
c000ec73:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000ec77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec7b:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ec7e:	83 ec 0c             	sub    esp,0xc
c000ec81:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ec85:	e8 82 1f ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000ec8a:	83 c4 10             	add    esp,0x10
c000ec8d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ec90:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ec95:	c1 e8 02             	shr    eax,0x2
c000ec98:	0f b6 c0             	movzx  eax,al
c000ec9b:	83 c0 05             	add    eax,0x5
c000ec9e:	c1 e0 0c             	shl    eax,0xc
c000eca1:	89 c2                	mov    edx,eax
c000eca3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000eca8:	09 d0                	or     eax,edx
c000ecaa:	0f b7 c0             	movzx  eax,ax
c000ecad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ecb1:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ecb4:	83 ec 0c             	sub    esp,0xc
c000ecb7:	50                   	push   eax
c000ecb8:	e8 2b 1f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ecbd:	83 c4 10             	add    esp,0x10
c000ecc0:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c000ecc4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ecc8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000eccb:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000ecd1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ecd5:	8d 76 00             	lea    esi,[esi+0x0]
c000ecd8:	83 c4 28             	add    esp,0x28
c000ecdb:	5b                   	pop    ebx
c000ecdc:	c3                   	ret    
c000ecdd:	8d 76 00             	lea    esi,[esi+0x0]

c000ece0 <tcp_pbuf_prealloc>:
c000ece0:	53                   	push   ebx
c000ece1:	83 ec 28             	sub    esp,0x28
c000ece4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ece8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ecec:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000ecf0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000ecf4:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000ecf9:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ecfe:	88 d8                	mov    al,bl
c000ed00:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ed04:	88 c8                	mov    al,cl
c000ed06:	88 04 24             	mov    BYTE PTR [esp],al
c000ed09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed0d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000ed12:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000ed17:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000ed1c:	39 c2                	cmp    edx,eax
c000ed1e:	73 64                	jae    c000ed84 <tcp_pbuf_prealloc+0xa4>
c000ed20:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ed25:	83 e0 02             	and    eax,0x2
c000ed28:	75 2e                	jne    c000ed58 <tcp_pbuf_prealloc+0x78>
c000ed2a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ed2e:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ed31:	0f b6 c0             	movzx  eax,al
c000ed34:	83 e0 40             	and    eax,0x40
c000ed37:	75 4b                	jne    c000ed84 <tcp_pbuf_prealloc+0xa4>
c000ed39:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000ed3d:	85 c0                	test   eax,eax
c000ed3f:	74 17                	je     c000ed58 <tcp_pbuf_prealloc+0x78>
c000ed41:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ed45:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ed48:	85 c0                	test   eax,eax
c000ed4a:	75 0c                	jne    c000ed58 <tcp_pbuf_prealloc+0x78>
c000ed4c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ed50:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ed53:	85 c0                	test   eax,eax
c000ed55:	74 2d                	je     c000ed84 <tcp_pbuf_prealloc+0xa4>
c000ed57:	90                   	nop
c000ed58:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ed5d:	8d 90 17 02 00 00    	lea    edx,[eax+0x217]
c000ed63:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000ed68:	39 c2                	cmp    edx,eax
c000ed6a:	7d 0c                	jge    c000ed78 <tcp_pbuf_prealloc+0x98>
c000ed6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed70:	05 18 02 00 00       	add    eax,0x218
c000ed75:	eb 05                	jmp    c000ed7c <tcp_pbuf_prealloc+0x9c>
c000ed77:	90                   	nop
c000ed78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed7c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000ed81:	8d 76 00             	lea    esi,[esi+0x0]
c000ed84:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000ed89:	83 ec 04             	sub    esp,0x4
c000ed8c:	6a 00                	push   0x0
c000ed8e:	50                   	push   eax
c000ed8f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ed93:	e8 9c 97 ff ff       	call   c0008534 <pbuf_alloc>
c000ed98:	83 c4 10             	add    esp,0x10
c000ed9b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ed9f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000eda4:	75 0a                	jne    c000edb0 <tcp_pbuf_prealloc+0xd0>
c000eda6:	b8 00 00 00 00       	mov    eax,0x0
c000edab:	eb 5b                	jmp    c000ee08 <tcp_pbuf_prealloc+0x128>
c000edad:	8d 76 00             	lea    esi,[esi+0x0]
c000edb0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edb4:	8b 00                	mov    eax,DWORD PTR [eax]
c000edb6:	85 c0                	test   eax,eax
c000edb8:	74 16                	je     c000edd0 <tcp_pbuf_prealloc+0xf0>
c000edba:	83 ec 08             	sub    esp,0x8
c000edbd:	68 64 09 03 c0       	push   0xc0030964
c000edc2:	68 c6 fa 02 c0       	push   0xc002fac6
c000edc7:	e8 c8 0d 01 00       	call   c001fb94 <CPrintf>
c000edcc:	83 c4 10             	add    esp,0x10
c000edcf:	90                   	nop
c000edd0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edd4:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000edd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eddc:	89 d1                	mov    ecx,edx
c000edde:	29 c1                	sub    ecx,eax
c000ede0:	89 c8                	mov    eax,ecx
c000ede2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ede6:	66 89 02             	mov    WORD PTR [edx],ax
c000ede9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eded:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000edf1:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000edf5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edf9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000edfc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee00:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c000ee04:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee08:	83 c4 28             	add    esp,0x28
c000ee0b:	5b                   	pop    ebx
c000ee0c:	c3                   	ret    
c000ee0d:	8d 76 00             	lea    esi,[esi+0x0]

c000ee10 <tcp_write_checks>:
c000ee10:	83 ec 1c             	sub    esp,0x1c
c000ee13:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ee17:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ee1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ee23:	83 f8 04             	cmp    eax,0x4
c000ee26:	74 2c                	je     c000ee54 <tcp_write_checks+0x44>
c000ee28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee2c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ee2f:	83 f8 07             	cmp    eax,0x7
c000ee32:	74 20                	je     c000ee54 <tcp_write_checks+0x44>
c000ee34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee38:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ee3b:	83 f8 02             	cmp    eax,0x2
c000ee3e:	74 14                	je     c000ee54 <tcp_write_checks+0x44>
c000ee40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee44:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ee47:	83 f8 03             	cmp    eax,0x3
c000ee4a:	74 08                	je     c000ee54 <tcp_write_checks+0x44>
c000ee4c:	b0 f3                	mov    al,0xf3
c000ee4e:	e9 f9 00 00 00       	jmp    c000ef4c <tcp_write_checks+0x13c>
c000ee53:	90                   	nop
c000ee54:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ee59:	85 c0                	test   eax,eax
c000ee5b:	75 07                	jne    c000ee64 <tcp_write_checks+0x54>
c000ee5d:	b0 00                	mov    al,0x0
c000ee5f:	e9 e8 00 00 00       	jmp    c000ef4c <tcp_write_checks+0x13c>
c000ee64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee68:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000ee6c:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000ee71:	0f b7 c0             	movzx  eax,ax
c000ee74:	39 c2                	cmp    edx,eax
c000ee76:	76 1c                	jbe    c000ee94 <tcp_write_checks+0x84>
c000ee78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee7c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ee7f:	83 c8 80             	or     eax,0xffffff80
c000ee82:	88 c2                	mov    dl,al
c000ee84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee88:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ee8b:	b0 ff                	mov    al,0xff
c000ee8d:	e9 ba 00 00 00       	jmp    c000ef4c <tcp_write_checks+0x13c>
c000ee92:	66 90                	xchg   ax,ax
c000ee94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee98:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000ee9b:	0f b7 c0             	movzx  eax,ax
c000ee9e:	83 f8 01             	cmp    eax,0x1
c000eea1:	77 11                	ja     c000eeb4 <tcp_write_checks+0xa4>
c000eea3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eea7:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000eeaa:	0f b7 c0             	movzx  eax,ax
c000eead:	3d fc ff 00 00       	cmp    eax,0xfffc
c000eeb2:	76 28                	jbe    c000eedc <tcp_write_checks+0xcc>
c000eeb4:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000eeba:	83 c0 01             	add    eax,0x1
c000eebd:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000eec3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eec7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000eeca:	83 c8 80             	or     eax,0xffffff80
c000eecd:	88 c2                	mov    dl,al
c000eecf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eed3:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000eed6:	b0 ff                	mov    al,0xff
c000eed8:	eb 72                	jmp    c000ef4c <tcp_write_checks+0x13c>
c000eeda:	66 90                	xchg   ax,ax
c000eedc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eee0:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000eee3:	0f b7 c0             	movzx  eax,ax
c000eee6:	85 c0                	test   eax,eax
c000eee8:	74 2e                	je     c000ef18 <tcp_write_checks+0x108>
c000eeea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeee:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000eef1:	85 c0                	test   eax,eax
c000eef3:	75 53                	jne    c000ef48 <tcp_write_checks+0x138>
c000eef5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eef9:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000eefc:	85 c0                	test   eax,eax
c000eefe:	75 48                	jne    c000ef48 <tcp_write_checks+0x138>
c000ef00:	83 ec 08             	sub    esp,0x8
c000ef03:	68 10 07 03 c0       	push   0xc0030710
c000ef08:	68 c6 fa 02 c0       	push   0xc002fac6
c000ef0d:	e8 82 0c 01 00       	call   c001fb94 <CPrintf>
c000ef12:	83 c4 10             	add    esp,0x10
c000ef15:	eb 31                	jmp    c000ef48 <tcp_write_checks+0x138>
c000ef17:	90                   	nop
c000ef18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef1c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ef1f:	85 c0                	test   eax,eax
c000ef21:	75 0d                	jne    c000ef30 <tcp_write_checks+0x120>
c000ef23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef27:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ef2a:	85 c0                	test   eax,eax
c000ef2c:	74 1a                	je     c000ef48 <tcp_write_checks+0x138>
c000ef2e:	66 90                	xchg   ax,ax
c000ef30:	83 ec 08             	sub    esp,0x8
c000ef33:	68 4c 07 03 c0       	push   0xc003074c
c000ef38:	68 c6 fa 02 c0       	push   0xc002fac6
c000ef3d:	e8 52 0c 01 00       	call   c001fb94 <CPrintf>
c000ef42:	83 c4 10             	add    esp,0x10
c000ef45:	8d 76 00             	lea    esi,[esi+0x0]
c000ef48:	b0 00                	mov    al,0x0
c000ef4a:	66 90                	xchg   ax,ax
c000ef4c:	83 c4 1c             	add    esp,0x1c
c000ef4f:	c3                   	ret    

c000ef50 <tcp_write>:
c000ef50:	56                   	push   esi
c000ef51:	53                   	push   ebx
c000ef52:	83 ec 54             	sub    esp,0x54
c000ef55:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000ef59:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000ef5d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ef62:	88 d0                	mov    al,dl
c000ef64:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ef68:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000ef70:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000ef78:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000ef80:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000ef88:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000ef90:	66 c7 44 24 3a 00 00 	mov    WORD PTR [esp+0x3a],0x0
c000ef97:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000ef9c:	c6 44 24 2a 00       	mov    BYTE PTR [esp+0x2a],0x0
c000efa1:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000efa8:	66 c7 44 24 36 00 00 	mov    WORD PTR [esp+0x36],0x0
c000efaf:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
c000efb4:	75 1e                	jne    c000efd4 <tcp_write+0x84>
c000efb6:	83 ec 08             	sub    esp,0x8
c000efb9:	68 80 07 03 c0       	push   0xc0030780
c000efbe:	68 c6 fa 02 c0       	push   0xc002fac6
c000efc3:	e8 cc 0b 01 00       	call   c001fb94 <CPrintf>
c000efc8:	83 c4 10             	add    esp,0x10
c000efcb:	b0 f2                	mov    al,0xf2
c000efcd:	e9 16 08 00 00       	jmp    c000f7e8 <tcp_write+0x898>
c000efd2:	66 90                	xchg   ax,ax
c000efd4:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000efd9:	83 ec 08             	sub    esp,0x8
c000efdc:	50                   	push   eax
c000efdd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000efe1:	e8 2a fe ff ff       	call   c000ee10 <tcp_write_checks>
c000efe6:	83 c4 10             	add    esp,0x10
c000efe9:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c000efed:	0f be 44 24 29       	movsx  eax,BYTE PTR [esp+0x29]
c000eff2:	85 c0                	test   eax,eax
c000eff4:	74 0a                	je     c000f000 <tcp_write+0xb0>
c000eff6:	8a 44 24 29          	mov    al,BYTE PTR [esp+0x29]
c000effa:	e9 e9 07 00 00       	jmp    c000f7e8 <tcp_write+0x898>
c000efff:	90                   	nop
c000f000:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f004:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f007:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f00c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f010:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f013:	85 c0                	test   eax,eax
c000f015:	0f 84 79 02 00 00    	je     c000f294 <tcp_write+0x344>
c000f01b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f01f:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f022:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f026:	eb 0c                	jmp    c000f034 <tcp_write+0xe4>
c000f028:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f02c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f02e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f032:	66 90                	xchg   ax,ax
c000f034:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f038:	8b 00                	mov    eax,DWORD PTR [eax]
c000f03a:	85 c0                	test   eax,eax
c000f03c:	75 ea                	jne    c000f028 <tcp_write+0xd8>
c000f03e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f042:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000f045:	0f b6 c0             	movzx  eax,al
c000f048:	c1 e0 02             	shl    eax,0x2
c000f04b:	83 e0 04             	and    eax,0x4
c000f04e:	89 c2                	mov    edx,eax
c000f050:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f054:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000f057:	0f b6 c0             	movzx  eax,al
c000f05a:	83 e0 02             	and    eax,0x2
c000f05d:	74 09                	je     c000f068 <tcp_write+0x118>
c000f05f:	b8 0c 00 00 00       	mov    eax,0xc
c000f064:	eb 0a                	jmp    c000f070 <tcp_write+0x120>
c000f066:	66 90                	xchg   ax,ax
c000f068:	b8 00 00 00 00       	mov    eax,0x0
c000f06d:	8d 76 00             	lea    esi,[esi+0x0]
c000f070:	01 d0                	add    eax,edx
c000f072:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000f077:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f07b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f07e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000f082:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000f085:	66 8b 4c 24 26       	mov    cx,WORD PTR [esp+0x26]
c000f08a:	01 ca                	add    edx,ecx
c000f08c:	29 d0                	sub    eax,edx
c000f08e:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f093:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f097:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f09b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f0a0:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f0a5:	0f b7 c0             	movzx  eax,ax
c000f0a8:	85 c0                	test   eax,eax
c000f0aa:	0f 84 84 00 00 00    	je     c000f134 <tcp_write+0x1e4>
c000f0b0:	0f b7 54 24 36       	movzx  edx,WORD PTR [esp+0x36]
c000f0b5:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f0ba:	39 c2                	cmp    edx,eax
c000f0bc:	76 16                	jbe    c000f0d4 <tcp_write+0x184>
c000f0be:	83 ec 08             	sub    esp,0x8
c000f0c1:	68 b4 07 03 c0       	push   0xc00307b4
c000f0c6:	68 c6 fa 02 c0       	push   0xc002fac6
c000f0cb:	e8 c4 0a 01 00       	call   c001fb94 <CPrintf>
c000f0d0:	83 c4 10             	add    esp,0x10
c000f0d3:	90                   	nop
c000f0d4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f0d8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f0dc:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f0e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0e5:	0f b7 d8             	movzx  ebx,ax
c000f0e8:	0f b7 ca             	movzx  ecx,dx
c000f0eb:	39 cb                	cmp    ebx,ecx
c000f0ed:	76 05                	jbe    c000f0f4 <tcp_write+0x1a4>
c000f0ef:	89 d0                	mov    eax,edx
c000f0f1:	8d 76 00             	lea    esi,[esi+0x0]
c000f0f4:	66 89 44 24 36       	mov    WORD PTR [esp+0x36],ax
c000f0f9:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f0fe:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f103:	01 d0                	add    eax,edx
c000f105:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f10a:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f10f:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f114:	89 d6                	mov    esi,edx
c000f116:	29 c6                	sub    esi,eax
c000f118:	89 f0                	mov    eax,esi
c000f11a:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f11f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000f123:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f128:	89 d6                	mov    esi,edx
c000f12a:	29 c6                	sub    esi,eax
c000f12c:	89 f0                	mov    eax,esi
c000f12e:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f133:	90                   	nop
c000f134:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f139:	0f b7 c0             	movzx  eax,ax
c000f13c:	85 c0                	test   eax,eax
c000f13e:	74 24                	je     c000f164 <tcp_write+0x214>
c000f140:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f145:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f14a:	39 c2                	cmp    edx,eax
c000f14c:	74 16                	je     c000f164 <tcp_write+0x214>
c000f14e:	83 ec 08             	sub    esp,0x8
c000f151:	68 78 09 03 c0       	push   0xc0030978
c000f156:	68 c6 fa 02 c0       	push   0xc002fac6
c000f15b:	e8 34 0a 01 00       	call   c001fb94 <CPrintf>
c000f160:	83 c4 10             	add    esp,0x10
c000f163:	90                   	nop
c000f164:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f169:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f16e:	39 c2                	cmp    edx,eax
c000f170:	0f 83 ce 03 00 00    	jae    c000f544 <tcp_write+0x5f4>
c000f176:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f17b:	85 c0                	test   eax,eax
c000f17d:	0f 84 c1 03 00 00    	je     c000f544 <tcp_write+0x5f4>
c000f183:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f187:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f18a:	0f b7 c0             	movzx  eax,ax
c000f18d:	85 c0                	test   eax,eax
c000f18f:	0f 84 af 03 00 00    	je     c000f544 <tcp_write+0x5f4>
c000f195:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000f19a:	0f b7 44 24 3a       	movzx  eax,WORD PTR [esp+0x3a]
c000f19f:	29 c2                	sub    edx,eax
c000f1a1:	89 d0                	mov    eax,edx
c000f1a3:	0f b7 54 24 34       	movzx  edx,WORD PTR [esp+0x34]
c000f1a8:	39 d0                	cmp    eax,edx
c000f1aa:	7e 04                	jle    c000f1b0 <tcp_write+0x260>
c000f1ac:	89 d0                	mov    eax,edx
c000f1ae:	66 90                	xchg   ax,ax
c000f1b0:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c000f1b5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f1b9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f1bd:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f1c2:	83 e0 01             	and    eax,0x1
c000f1c5:	74 61                	je     c000f228 <tcp_write+0x2d8>
c000f1c7:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c000f1cc:	0f b7 54 24 34       	movzx  edx,WORD PTR [esp+0x34]
c000f1d1:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f1d6:	83 ec 04             	sub    esp,0x4
c000f1d9:	6a 01                	push   0x1
c000f1db:	51                   	push   ecx
c000f1dc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f1e0:	8d 4c 24 26          	lea    ecx,[esp+0x26]
c000f1e4:	51                   	push   ecx
c000f1e5:	52                   	push   edx
c000f1e6:	50                   	push   eax
c000f1e7:	6a 03                	push   0x3
c000f1e9:	e8 f2 fa ff ff       	call   c000ece0 <tcp_pbuf_prealloc>
c000f1ee:	83 c4 20             	add    esp,0x20
c000f1f1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f1f5:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f1fa:	0f 84 44 05 00 00    	je     c000f744 <tcp_write+0x7f4>
c000f200:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000f205:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f20a:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f20e:	01 c1                	add    ecx,eax
c000f210:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f214:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f217:	83 ec 04             	sub    esp,0x4
c000f21a:	52                   	push   edx
c000f21b:	51                   	push   ecx
c000f21c:	50                   	push   eax
c000f21d:	e8 58 11 ff ff       	call   c000037a <memcpy>
c000f222:	83 c4 10             	add    esp,0x10
c000f225:	eb 39                	jmp    c000f260 <tcp_write+0x310>
c000f227:	90                   	nop
c000f228:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f22d:	83 ec 04             	sub    esp,0x4
c000f230:	6a 01                	push   0x1
c000f232:	50                   	push   eax
c000f233:	6a 03                	push   0x3
c000f235:	e8 fa 92 ff ff       	call   c0008534 <pbuf_alloc>
c000f23a:	83 c4 10             	add    esp,0x10
c000f23d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f241:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f246:	0f 84 fc 04 00 00    	je     c000f748 <tcp_write+0x7f8>
c000f24c:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f251:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f255:	01 c2                	add    edx,eax
c000f257:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f25b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f25e:	66 90                	xchg   ax,ax
c000f260:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f265:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f269:	01 d0                	add    eax,edx
c000f26b:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f270:	83 ec 0c             	sub    esp,0xc
c000f273:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f277:	e8 b4 98 ff ff       	call   c0008b30 <pbuf_clen>
c000f27c:	83 c4 10             	add    esp,0x10
c000f27f:	0f b6 c0             	movzx  eax,al
c000f282:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f286:	01 d0                	add    eax,edx
c000f288:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f28d:	e9 b2 02 00 00       	jmp    c000f544 <tcp_write+0x5f4>
c000f292:	66 90                	xchg   ax,ax
c000f294:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f298:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f29c:	0f b7 c0             	movzx  eax,ax
c000f29f:	85 c0                	test   eax,eax
c000f2a1:	0f 84 9d 02 00 00    	je     c000f544 <tcp_write+0x5f4>
c000f2a7:	83 ec 08             	sub    esp,0x8
c000f2aa:	68 d4 07 03 c0       	push   0xc00307d4
c000f2af:	68 c6 fa 02 c0       	push   0xc002fac6
c000f2b4:	e8 db 08 01 00       	call   c001fb94 <CPrintf>
c000f2b9:	83 c4 10             	add    esp,0x10
c000f2bc:	e9 83 02 00 00       	jmp    c000f544 <tcp_write+0x5f4>
c000f2c1:	8d 76 00             	lea    esi,[esi+0x0]
c000f2c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f2c8:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c000f2cd:	89 d6                	mov    esi,edx
c000f2cf:	29 c6                	sub    esi,eax
c000f2d1:	89 f0                	mov    eax,esi
c000f2d3:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c000f2d8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f2dc:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000f2df:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f2e4:	89 d3                	mov    ebx,edx
c000f2e6:	29 c3                	sub    ebx,eax
c000f2e8:	89 d8                	mov    eax,ebx
c000f2ea:	66 89 44 24 20       	mov    WORD PTR [esp+0x20],ax
c000f2ef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f2f3:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c000f2f8:	0f b7 d8             	movzx  ebx,ax
c000f2fb:	0f b7 ca             	movzx  ecx,dx
c000f2fe:	39 cb                	cmp    ebx,ecx
c000f300:	76 02                	jbe    c000f304 <tcp_write+0x3b4>
c000f302:	89 d0                	mov    eax,edx
c000f304:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000f309:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f30e:	83 e0 01             	and    eax,0x1
c000f311:	0f 84 b1 00 00 00    	je     c000f3c8 <tcp_write+0x478>
c000f317:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f31c:	0f 94 c0             	sete   al
c000f31f:	0f b6 f0             	movzx  esi,al
c000f322:	0f b6 5c 24 08       	movzx  ebx,BYTE PTR [esp+0x8]
c000f327:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f32b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f32e:	0f b7 c8             	movzx  ecx,ax
c000f331:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f336:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000f33b:	01 d0                	add    eax,edx
c000f33d:	0f b7 c0             	movzx  eax,ax
c000f340:	83 ec 04             	sub    esp,0x4
c000f343:	56                   	push   esi
c000f344:	53                   	push   ebx
c000f345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f349:	8d 54 24 26          	lea    edx,[esp+0x26]
c000f34d:	52                   	push   edx
c000f34e:	51                   	push   ecx
c000f34f:	50                   	push   eax
c000f350:	6a 00                	push   0x0
c000f352:	e8 89 f9 ff ff       	call   c000ece0 <tcp_pbuf_prealloc>
c000f357:	83 c4 20             	add    esp,0x20
c000f35a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f35e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f363:	0f 84 e3 03 00 00    	je     c000f74c <tcp_write+0x7fc>
c000f369:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f36d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f371:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000f376:	0f b7 c0             	movzx  eax,ax
c000f379:	39 c2                	cmp    edx,eax
c000f37b:	76 17                	jbe    c000f394 <tcp_write+0x444>
c000f37d:	83 ec 08             	sub    esp,0x8
c000f380:	68 04 08 03 c0       	push   0xc0030804
c000f385:	68 c6 fa 02 c0       	push   0xc002fac6
c000f38a:	e8 05 08 01 00       	call   c001fb94 <CPrintf>
c000f38f:	83 c4 10             	add    esp,0x10
c000f392:	66 90                	xchg   ax,ax
c000f394:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f399:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f39e:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000f3a2:	01 d1                	add    ecx,edx
c000f3a4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f3a8:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000f3ab:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000f3b0:	01 da                	add    edx,ebx
c000f3b2:	83 ec 04             	sub    esp,0x4
c000f3b5:	50                   	push   eax
c000f3b6:	51                   	push   ecx
c000f3b7:	52                   	push   edx
c000f3b8:	e8 bd 0f ff ff       	call   c000037a <memcpy>
c000f3bd:	83 c4 10             	add    esp,0x10
c000f3c0:	e9 a7 00 00 00       	jmp    c000f46c <tcp_write+0x51c>
c000f3c5:	8d 76 00             	lea    esi,[esi+0x0]
c000f3c8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f3cd:	0f b7 c0             	movzx  eax,ax
c000f3d0:	85 c0                	test   eax,eax
c000f3d2:	74 18                	je     c000f3ec <tcp_write+0x49c>
c000f3d4:	83 ec 08             	sub    esp,0x8
c000f3d7:	68 96 09 03 c0       	push   0xc0030996
c000f3dc:	68 c6 fa 02 c0       	push   0xc002fac6
c000f3e1:	e8 ae 07 01 00       	call   c001fb94 <CPrintf>
c000f3e6:	83 c4 10             	add    esp,0x10
c000f3e9:	8d 76 00             	lea    esi,[esi+0x0]
c000f3ec:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f3f1:	83 ec 04             	sub    esp,0x4
c000f3f4:	6a 01                	push   0x1
c000f3f6:	50                   	push   eax
c000f3f7:	6a 00                	push   0x0
c000f3f9:	e8 36 91 ff ff       	call   c0008534 <pbuf_alloc>
c000f3fe:	83 c4 10             	add    esp,0x10
c000f401:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f405:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f40a:	0f 84 40 03 00 00    	je     c000f750 <tcp_write+0x800>
c000f410:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f415:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f419:	01 c2                	add    edx,eax
c000f41b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f41f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f422:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f427:	83 ec 04             	sub    esp,0x4
c000f42a:	6a 00                	push   0x0
c000f42c:	50                   	push   eax
c000f42d:	6a 00                	push   0x0
c000f42f:	e8 00 91 ff ff       	call   c0008534 <pbuf_alloc>
c000f434:	83 c4 10             	add    esp,0x10
c000f437:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f43b:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f440:	75 16                	jne    c000f458 <tcp_write+0x508>
c000f442:	83 ec 0c             	sub    esp,0xc
c000f445:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f449:	e8 0e 8f ff ff       	call   c000835c <pbuf_free>
c000f44e:	83 c4 10             	add    esp,0x10
c000f451:	e9 02 03 00 00       	jmp    c000f758 <tcp_write+0x808>
c000f456:	66 90                	xchg   ax,ax
c000f458:	83 ec 08             	sub    esp,0x8
c000f45b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f45f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f463:	e8 2c 97 ff ff       	call   c0008b94 <pbuf_cat>
c000f468:	83 c4 10             	add    esp,0x10
c000f46b:	90                   	nop
c000f46c:	83 ec 0c             	sub    esp,0xc
c000f46f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f473:	e8 b8 96 ff ff       	call   c0008b30 <pbuf_clen>
c000f478:	83 c4 10             	add    esp,0x10
c000f47b:	0f b6 c0             	movzx  eax,al
c000f47e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f482:	01 d0                	add    eax,edx
c000f484:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f489:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f48e:	83 f8 02             	cmp    eax,0x2
c000f491:	77 0d                	ja     c000f4a0 <tcp_write+0x550>
c000f493:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f498:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f49d:	76 15                	jbe    c000f4b4 <tcp_write+0x564>
c000f49f:	90                   	nop
c000f4a0:	83 ec 0c             	sub    esp,0xc
c000f4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f4a7:	e8 b0 8e ff ff       	call   c000835c <pbuf_free>
c000f4ac:	83 c4 10             	add    esp,0x10
c000f4af:	e9 a4 02 00 00       	jmp    c000f758 <tcp_write+0x808>
c000f4b4:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c000f4b9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f4bd:	8b 4a 6c             	mov    ecx,DWORD PTR [edx+0x6c]
c000f4c0:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f4c5:	01 ca                	add    edx,ecx
c000f4c7:	83 ec 0c             	sub    esp,0xc
c000f4ca:	50                   	push   eax
c000f4cb:	52                   	push   edx
c000f4cc:	6a 00                	push   0x0
c000f4ce:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f4d2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000f4d6:	e8 61 f6 ff ff       	call   c000eb3c <tcp_create_segment>
c000f4db:	83 c4 20             	add    esp,0x20
c000f4de:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f4e2:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f4e7:	0f 84 67 02 00 00    	je     c000f754 <tcp_write+0x804>
c000f4ed:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f4f2:	75 0c                	jne    c000f500 <tcp_write+0x5b0>
c000f4f4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f4f8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f4fc:	eb 2a                	jmp    c000f528 <tcp_write+0x5d8>
c000f4fe:	66 90                	xchg   ax,ax
c000f500:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f505:	75 15                	jne    c000f51c <tcp_write+0x5cc>
c000f507:	83 ec 08             	sub    esp,0x8
c000f50a:	68 a4 09 03 c0       	push   0xc00309a4
c000f50f:	68 c6 fa 02 c0       	push   0xc002fac6
c000f514:	e8 7b 06 01 00       	call   c001fb94 <CPrintf>
c000f519:	83 c4 10             	add    esp,0x10
c000f51c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f520:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f524:	89 10                	mov    DWORD PTR [eax],edx
c000f526:	66 90                	xchg   ax,ax
c000f528:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f52c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f530:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f535:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000f53a:	01 d0                	add    eax,edx
c000f53c:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f541:	8d 76 00             	lea    esi,[esi+0x0]
c000f544:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f549:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f54e:	39 c2                	cmp    edx,eax
c000f550:	0f 82 6e fd ff ff    	jb     c000f2c4 <tcp_write+0x374>
c000f556:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c000f55b:	85 c0                	test   eax,eax
c000f55d:	0f 84 9d 00 00 00    	je     c000f600 <tcp_write+0x6b0>
c000f563:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f567:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f56a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f56e:	eb 70                	jmp    c000f5e0 <tcp_write+0x690>
c000f570:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f574:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f577:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f57c:	01 d0                	add    eax,edx
c000f57e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f582:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000f586:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f58a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f58c:	85 c0                	test   eax,eax
c000f58e:	75 44                	jne    c000f5d4 <tcp_write+0x684>
c000f590:	0f b7 54 24 36       	movzx  edx,WORD PTR [esp+0x36]
c000f595:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f599:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000f59c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5a0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f5a4:	0f b7 c0             	movzx  eax,ax
c000f5a7:	01 c8                	add    eax,ecx
c000f5a9:	83 ec 04             	sub    esp,0x4
c000f5ac:	52                   	push   edx
c000f5ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f5b1:	50                   	push   eax
c000f5b2:	e8 c3 0d ff ff       	call   c000037a <memcpy>
c000f5b7:	83 c4 10             	add    esp,0x10
c000f5ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5be:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f5c2:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f5c7:	01 d0                	add    eax,edx
c000f5c9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f5cd:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c000f5d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f5d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5d8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5da:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f5de:	66 90                	xchg   ax,ax
c000f5e0:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000f5e5:	75 89                	jne    c000f570 <tcp_write+0x620>
c000f5e7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f5eb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f5ee:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f5f3:	01 d0                	add    eax,edx
c000f5f5:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000f5f9:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000f5fd:	8d 76 00             	lea    esi,[esi+0x0]
c000f600:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f605:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f609:	66 89 42 76          	mov    WORD PTR [edx+0x76],ax
c000f60d:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f612:	74 4c                	je     c000f660 <tcp_write+0x710>
c000f614:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f619:	75 15                	jne    c000f630 <tcp_write+0x6e0>
c000f61b:	83 ec 08             	sub    esp,0x8
c000f61e:	68 44 08 03 c0       	push   0xc0030844
c000f623:	68 c6 fa 02 c0       	push   0xc002fac6
c000f628:	e8 67 05 01 00       	call   c001fb94 <CPrintf>
c000f62d:	83 c4 10             	add    esp,0x10
c000f630:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f634:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f637:	83 ec 08             	sub    esp,0x8
c000f63a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000f63e:	50                   	push   eax
c000f63f:	e8 50 95 ff ff       	call   c0008b94 <pbuf_cat>
c000f644:	83 c4 10             	add    esp,0x10
c000f647:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f64b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000f64e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f652:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f655:	01 d0                	add    eax,edx
c000f657:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000f65b:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000f65f:	90                   	nop
c000f660:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f665:	75 0d                	jne    c000f674 <tcp_write+0x724>
c000f667:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f66b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f66f:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000f672:	eb 0c                	jmp    c000f680 <tcp_write+0x730>
c000f674:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f678:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f67c:	89 10                	mov    DWORD PTR [eax],edx
c000f67e:	66 90                	xchg   ax,ax
c000f680:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f684:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000f687:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f68c:	01 c2                	add    edx,eax
c000f68e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f692:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000f695:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f699:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000f69d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f6a1:	89 d6                	mov    esi,edx
c000f6a3:	29 c6                	sub    esi,eax
c000f6a5:	89 f0                	mov    eax,esi
c000f6a7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f6ab:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000f6af:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f6b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f6b7:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000f6bb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f6bf:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f6c2:	0f b7 c0             	movzx  eax,ax
c000f6c5:	85 c0                	test   eax,eax
c000f6c7:	74 2b                	je     c000f6f4 <tcp_write+0x7a4>
c000f6c9:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f6cd:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f6d0:	85 c0                	test   eax,eax
c000f6d2:	75 20                	jne    c000f6f4 <tcp_write+0x7a4>
c000f6d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f6d8:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f6db:	85 c0                	test   eax,eax
c000f6dd:	75 15                	jne    c000f6f4 <tcp_write+0x7a4>
c000f6df:	83 ec 08             	sub    esp,0x8
c000f6e2:	68 b5 09 03 c0       	push   0xc00309b5
c000f6e7:	68 c6 fa 02 c0       	push   0xc002fac6
c000f6ec:	e8 a3 04 01 00       	call   c001fb94 <CPrintf>
c000f6f1:	83 c4 10             	add    esp,0x10
c000f6f4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f6f9:	74 41                	je     c000f73c <tcp_write+0x7ec>
c000f6fb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f6ff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f702:	85 c0                	test   eax,eax
c000f704:	74 36                	je     c000f73c <tcp_write+0x7ec>
c000f706:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f70b:	83 e0 02             	and    eax,0x2
c000f70e:	75 2c                	jne    c000f73c <tcp_write+0x7ec>
c000f710:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f714:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f717:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000f71b:	83 ec 0c             	sub    esp,0xc
c000f71e:	6a 08                	push   0x8
c000f720:	e8 c3 14 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000f725:	83 c4 10             	add    esp,0x10
c000f728:	89 c1                	mov    ecx,eax
c000f72a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f72e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000f731:	89 d8                	mov    eax,ebx
c000f733:	09 c8                	or     eax,ecx
c000f735:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000f739:	8d 76 00             	lea    esi,[esi+0x0]
c000f73c:	b0 00                	mov    al,0x0
c000f73e:	e9 a5 00 00 00       	jmp    c000f7e8 <tcp_write+0x898>
c000f743:	90                   	nop
c000f744:	90                   	nop
c000f745:	eb 11                	jmp    c000f758 <tcp_write+0x808>
c000f747:	90                   	nop
c000f748:	90                   	nop
c000f749:	eb 0d                	jmp    c000f758 <tcp_write+0x808>
c000f74b:	90                   	nop
c000f74c:	90                   	nop
c000f74d:	eb 09                	jmp    c000f758 <tcp_write+0x808>
c000f74f:	90                   	nop
c000f750:	90                   	nop
c000f751:	eb 05                	jmp    c000f758 <tcp_write+0x808>
c000f753:	90                   	nop
c000f754:	90                   	nop
c000f755:	8d 76 00             	lea    esi,[esi+0x0]
c000f758:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f75c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f75f:	83 c8 80             	or     eax,0xffffff80
c000f762:	88 c2                	mov    dl,al
c000f764:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f768:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f76b:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f771:	83 c0 01             	add    eax,0x1
c000f774:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f77a:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f77f:	74 0f                	je     c000f790 <tcp_write+0x840>
c000f781:	83 ec 0c             	sub    esp,0xc
c000f784:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f788:	e8 cf 8b ff ff       	call   c000835c <pbuf_free>
c000f78d:	83 c4 10             	add    esp,0x10
c000f790:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f795:	74 11                	je     c000f7a8 <tcp_write+0x858>
c000f797:	83 ec 0c             	sub    esp,0xc
c000f79a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f79e:	e8 75 a8 ff ff       	call   c000a018 <tcp_segs_free>
c000f7a3:	83 c4 10             	add    esp,0x10
c000f7a6:	66 90                	xchg   ax,ax
c000f7a8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f7ac:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f7af:	0f b7 c0             	movzx  eax,ax
c000f7b2:	85 c0                	test   eax,eax
c000f7b4:	74 2e                	je     c000f7e4 <tcp_write+0x894>
c000f7b6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f7ba:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f7bd:	85 c0                	test   eax,eax
c000f7bf:	75 23                	jne    c000f7e4 <tcp_write+0x894>
c000f7c1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f7c5:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f7c8:	85 c0                	test   eax,eax
c000f7ca:	75 18                	jne    c000f7e4 <tcp_write+0x894>
c000f7cc:	83 ec 08             	sub    esp,0x8
c000f7cf:	68 b5 09 03 c0       	push   0xc00309b5
c000f7d4:	68 c6 fa 02 c0       	push   0xc002fac6
c000f7d9:	e8 b6 03 01 00       	call   c001fb94 <CPrintf>
c000f7de:	83 c4 10             	add    esp,0x10
c000f7e1:	8d 76 00             	lea    esi,[esi+0x0]
c000f7e4:	b0 ff                	mov    al,0xff
c000f7e6:	66 90                	xchg   ax,ax
c000f7e8:	83 c4 54             	add    esp,0x54
c000f7eb:	5b                   	pop    ebx
c000f7ec:	5e                   	pop    esi
c000f7ed:	c3                   	ret    
c000f7ee:	66 90                	xchg   ax,ax

c000f7f0 <tcp_enqueue_flags>:
c000f7f0:	83 ec 3c             	sub    esp,0x3c
c000f7f3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f7f7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000f7fb:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f800:	c6 44 24 27 00       	mov    BYTE PTR [esp+0x27],0x0
c000f805:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f80a:	83 e0 03             	and    eax,0x3
c000f80d:	75 15                	jne    c000f824 <tcp_enqueue_flags+0x34>
c000f80f:	83 ec 08             	sub    esp,0x8
c000f812:	68 7c 08 03 c0       	push   0xc003087c
c000f817:	68 c6 fa 02 c0       	push   0xc002fac6
c000f81c:	e8 73 03 01 00       	call   c001fb94 <CPrintf>
c000f821:	83 c4 10             	add    esp,0x10
c000f824:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f828:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f82b:	0f b7 c0             	movzx  eax,ax
c000f82e:	83 f8 01             	cmp    eax,0x1
c000f831:	77 11                	ja     c000f844 <tcp_enqueue_flags+0x54>
c000f833:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f837:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f83a:	0f b7 c0             	movzx  eax,ax
c000f83d:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f842:	76 2c                	jbe    c000f870 <tcp_enqueue_flags+0x80>
c000f844:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f84a:	83 c0 01             	add    eax,0x1
c000f84d:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f853:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f857:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f85a:	83 c8 80             	or     eax,0xffffff80
c000f85d:	88 c2                	mov    dl,al
c000f85f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f863:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f866:	b0 ff                	mov    al,0xff
c000f868:	e9 6b 02 00 00       	jmp    c000fad8 <tcp_enqueue_flags+0x2e8>
c000f86d:	8d 76 00             	lea    esi,[esi+0x0]
c000f870:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f875:	83 e0 02             	and    eax,0x2
c000f878:	74 06                	je     c000f880 <tcp_enqueue_flags+0x90>
c000f87a:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000f87f:	90                   	nop
c000f880:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000f885:	c1 e0 02             	shl    eax,0x2
c000f888:	83 e0 04             	and    eax,0x4
c000f88b:	88 c2                	mov    dl,al
c000f88d:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000f892:	83 e0 02             	and    eax,0x2
c000f895:	74 05                	je     c000f89c <tcp_enqueue_flags+0xac>
c000f897:	b0 0c                	mov    al,0xc
c000f899:	eb 05                	jmp    c000f8a0 <tcp_enqueue_flags+0xb0>
c000f89b:	90                   	nop
c000f89c:	b0 00                	mov    al,0x0
c000f89e:	66 90                	xchg   ax,ax
c000f8a0:	01 d0                	add    eax,edx
c000f8a2:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c000f8a6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f8aa:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000f8ae:	0f b7 c0             	movzx  eax,ax
c000f8b1:	85 c0                	test   eax,eax
c000f8b3:	75 17                	jne    c000f8cc <tcp_enqueue_flags+0xdc>
c000f8b5:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f8bb:	83 c0 01             	add    eax,0x1
c000f8be:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f8c4:	b0 ff                	mov    al,0xff
c000f8c6:	e9 0d 02 00 00       	jmp    c000fad8 <tcp_enqueue_flags+0x2e8>
c000f8cb:	90                   	nop
c000f8cc:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000f8d1:	83 ec 04             	sub    esp,0x4
c000f8d4:	6a 00                	push   0x0
c000f8d6:	50                   	push   eax
c000f8d7:	6a 00                	push   0x0
c000f8d9:	e8 56 8c ff ff       	call   c0008534 <pbuf_alloc>
c000f8de:	83 c4 10             	add    esp,0x10
c000f8e1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f8e5:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000f8ea:	75 2c                	jne    c000f918 <tcp_enqueue_flags+0x128>
c000f8ec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f8f0:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f8f3:	83 c8 80             	or     eax,0xffffff80
c000f8f6:	88 c2                	mov    dl,al
c000f8f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f8fc:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f8ff:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f905:	83 c0 01             	add    eax,0x1
c000f908:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f90e:	b0 ff                	mov    al,0xff
c000f910:	e9 c3 01 00 00       	jmp    c000fad8 <tcp_enqueue_flags+0x2e8>
c000f915:	8d 76 00             	lea    esi,[esi+0x0]
c000f918:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f91c:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000f920:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000f925:	0f b7 d2             	movzx  edx,dx
c000f928:	0f b7 c0             	movzx  eax,ax
c000f92b:	39 c2                	cmp    edx,eax
c000f92d:	73 15                	jae    c000f944 <tcp_enqueue_flags+0x154>
c000f92f:	83 ec 08             	sub    esp,0x8
c000f932:	68 d4 08 03 c0       	push   0xc00308d4
c000f937:	68 c6 fa 02 c0       	push   0xc002fac6
c000f93c:	e8 53 02 01 00       	call   c001fb94 <CPrintf>
c000f941:	83 c4 10             	add    esp,0x10
c000f944:	0f b6 4c 24 2f       	movzx  ecx,BYTE PTR [esp+0x2f]
c000f949:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f94d:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000f950:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f955:	83 ec 0c             	sub    esp,0xc
c000f958:	51                   	push   ecx
c000f959:	52                   	push   edx
c000f95a:	50                   	push   eax
c000f95b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000f95f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000f963:	e8 d4 f1 ff ff       	call   c000eb3c <tcp_create_segment>
c000f968:	83 c4 20             	add    esp,0x20
c000f96b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f96f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000f974:	75 2a                	jne    c000f9a0 <tcp_enqueue_flags+0x1b0>
c000f976:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f97a:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f97d:	83 c8 80             	or     eax,0xffffff80
c000f980:	88 c2                	mov    dl,al
c000f982:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f986:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f989:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f98f:	83 c0 01             	add    eax,0x1
c000f992:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f998:	b0 ff                	mov    al,0xff
c000f99a:	e9 39 01 00 00       	jmp    c000fad8 <tcp_enqueue_flags+0x2e8>
c000f99f:	90                   	nop
c000f9a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f9a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f9a7:	0f b7 c0             	movzx  eax,ax
c000f9aa:	85 c0                	test   eax,eax
c000f9ac:	74 16                	je     c000f9c4 <tcp_enqueue_flags+0x1d4>
c000f9ae:	83 ec 08             	sub    esp,0x8
c000f9b1:	68 10 09 03 c0       	push   0xc0030910
c000f9b6:	68 c6 fa 02 c0       	push   0xc002fac6
c000f9bb:	e8 d4 01 01 00       	call   c001fb94 <CPrintf>
c000f9c0:	83 c4 10             	add    esp,0x10
c000f9c3:	90                   	nop
c000f9c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9c8:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f9cb:	85 c0                	test   eax,eax
c000f9cd:	75 0d                	jne    c000f9dc <tcp_enqueue_flags+0x1ec>
c000f9cf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f9d7:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000f9da:	eb 30                	jmp    c000fa0c <tcp_enqueue_flags+0x21c>
c000f9dc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9e0:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f9e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f9e7:	eb 0f                	jmp    c000f9f8 <tcp_enqueue_flags+0x208>
c000f9e9:	8d 76 00             	lea    esi,[esi+0x0]
c000f9ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f9f0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f9f6:	66 90                	xchg   ax,ax
c000f9f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f9fc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9fe:	85 c0                	test   eax,eax
c000fa00:	75 ea                	jne    c000f9ec <tcp_enqueue_flags+0x1fc>
c000fa02:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fa06:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fa0a:	89 10                	mov    DWORD PTR [eax],edx
c000fa0c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa10:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000fa16:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fa1b:	83 e0 02             	and    eax,0x2
c000fa1e:	75 0c                	jne    c000fa2c <tcp_enqueue_flags+0x23c>
c000fa20:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fa25:	83 e0 01             	and    eax,0x1
c000fa28:	74 26                	je     c000fa50 <tcp_enqueue_flags+0x260>
c000fa2a:	66 90                	xchg   ax,ax
c000fa2c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa30:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
c000fa33:	8d 50 01             	lea    edx,[eax+0x1]
c000fa36:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa3a:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000fa3d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa41:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000fa45:	83 e8 01             	sub    eax,0x1
c000fa48:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000fa4c:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000fa50:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fa55:	83 e0 01             	and    eax,0x1
c000fa58:	74 16                	je     c000fa70 <tcp_enqueue_flags+0x280>
c000fa5a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa5e:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fa61:	83 c8 20             	or     eax,0x20
c000fa64:	88 c2                	mov    dl,al
c000fa66:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa6a:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fa6d:	8d 76 00             	lea    esi,[esi+0x0]
c000fa70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fa74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fa77:	83 ec 0c             	sub    esp,0xc
c000fa7a:	50                   	push   eax
c000fa7b:	e8 b0 90 ff ff       	call   c0008b30 <pbuf_clen>
c000fa80:	83 c4 10             	add    esp,0x10
c000fa83:	88 c1                	mov    cl,al
c000fa85:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa89:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000fa8c:	0f b6 c1             	movzx  eax,cl
c000fa8f:	01 d0                	add    eax,edx
c000fa91:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000fa95:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000fa99:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa9d:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000faa0:	0f b7 c0             	movzx  eax,ax
c000faa3:	85 c0                	test   eax,eax
c000faa5:	74 2d                	je     c000fad4 <tcp_enqueue_flags+0x2e4>
c000faa7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000faab:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000faae:	85 c0                	test   eax,eax
c000fab0:	75 22                	jne    c000fad4 <tcp_enqueue_flags+0x2e4>
c000fab2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fab6:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fab9:	85 c0                	test   eax,eax
c000fabb:	75 17                	jne    c000fad4 <tcp_enqueue_flags+0x2e4>
c000fabd:	83 ec 08             	sub    esp,0x8
c000fac0:	68 3c 09 03 c0       	push   0xc003093c
c000fac5:	68 c6 fa 02 c0       	push   0xc002fac6
c000faca:	e8 c5 00 01 00       	call   c001fb94 <CPrintf>
c000facf:	83 c4 10             	add    esp,0x10
c000fad2:	66 90                	xchg   ax,ax
c000fad4:	b0 00                	mov    al,0x0
c000fad6:	66 90                	xchg   ax,ax
c000fad8:	83 c4 3c             	add    esp,0x3c
c000fadb:	c3                   	ret    

c000fadc <tcp_send_fin>:
c000fadc:	53                   	push   ebx
c000fadd:	83 ec 18             	sub    esp,0x18
c000fae0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fae4:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fae7:	85 c0                	test   eax,eax
c000fae9:	74 75                	je     c000fb60 <tcp_send_fin+0x84>
c000faeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faef:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000faf2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000faf6:	eb 0c                	jmp    c000fb04 <tcp_send_fin+0x28>
c000faf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fafc:	8b 00                	mov    eax,DWORD PTR [eax]
c000fafe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fb02:	66 90                	xchg   ax,ax
c000fb04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb08:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb0a:	85 c0                	test   eax,eax
c000fb0c:	75 ea                	jne    c000faf8 <tcp_send_fin+0x1c>
c000fb0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb12:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fb15:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000fb19:	0f b7 c0             	movzx  eax,ax
c000fb1c:	83 ec 0c             	sub    esp,0xc
c000fb1f:	50                   	push   eax
c000fb20:	e8 c3 10 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fb25:	83 c4 10             	add    esp,0x10
c000fb28:	0f b7 c0             	movzx  eax,ax
c000fb2b:	83 e0 07             	and    eax,0x7
c000fb2e:	75 30                	jne    c000fb60 <tcp_send_fin+0x84>
c000fb30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb34:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fb37:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000fb3b:	83 ec 0c             	sub    esp,0xc
c000fb3e:	6a 01                	push   0x1
c000fb40:	e8 a3 10 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fb45:	83 c4 10             	add    esp,0x10
c000fb48:	89 c1                	mov    ecx,eax
c000fb4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb4e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fb51:	89 d8                	mov    eax,ebx
c000fb53:	09 c8                	or     eax,ecx
c000fb55:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000fb59:	b0 00                	mov    al,0x0
c000fb5b:	eb 17                	jmp    c000fb74 <tcp_send_fin+0x98>
c000fb5d:	8d 76 00             	lea    esi,[esi+0x0]
c000fb60:	83 ec 08             	sub    esp,0x8
c000fb63:	6a 01                	push   0x1
c000fb65:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fb69:	e8 82 fc ff ff       	call   c000f7f0 <tcp_enqueue_flags>
c000fb6e:	83 c4 10             	add    esp,0x10
c000fb71:	8d 76 00             	lea    esi,[esi+0x0]
c000fb74:	83 c4 18             	add    esp,0x18
c000fb77:	5b                   	pop    ebx
c000fb78:	c3                   	ret    
c000fb79:	8d 76 00             	lea    esi,[esi+0x0]

c000fb7c <tcp_send_empty_ack>:
c000fb7c:	53                   	push   ebx
c000fb7d:	83 ec 18             	sub    esp,0x18
c000fb80:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fb85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb89:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000fb8c:	83 ec 0c             	sub    esp,0xc
c000fb8f:	50                   	push   eax
c000fb90:	e8 77 10 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000fb95:	83 c4 10             	add    esp,0x10
c000fb98:	89 c2                	mov    edx,eax
c000fb9a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fb9f:	52                   	push   edx
c000fba0:	6a 00                	push   0x0
c000fba2:	50                   	push   eax
c000fba3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fba7:	e8 34 ee ff ff       	call   c000e9e0 <tcp_output_alloc_header>
c000fbac:	83 c4 10             	add    esp,0x10
c000fbaf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fbb3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fbb8:	75 0a                	jne    c000fbc4 <tcp_send_empty_ack+0x48>
c000fbba:	b0 fe                	mov    al,0xfe
c000fbbc:	e9 97 00 00 00       	jmp    c000fc58 <tcp_send_empty_ack+0xdc>
c000fbc1:	8d 76 00             	lea    esi,[esi+0x0]
c000fbc4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fbc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fbcb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fbcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbd3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fbd6:	83 e0 fc             	and    eax,0xfffffffc
c000fbd9:	88 c2                	mov    dl,al
c000fbdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbdf:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fbe2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fbe6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fbe9:	0f b7 d0             	movzx  edx,ax
c000fbec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbf0:	8d 48 04             	lea    ecx,[eax+0x4]
c000fbf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbf7:	83 ec 0c             	sub    esp,0xc
c000fbfa:	52                   	push   edx
c000fbfb:	6a 06                	push   0x6
c000fbfd:	51                   	push   ecx
c000fbfe:	50                   	push   eax
c000fbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fc03:	e8 70 35 00 00       	call   c0013178 <inet_chksum_pseudo>
c000fc08:	83 c4 20             	add    esp,0x20
c000fc0b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000fc0f:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c000fc13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc17:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000fc1a:	0f b6 c8             	movzx  ecx,al
c000fc1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc21:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fc24:	0f b6 d0             	movzx  edx,al
c000fc27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc2b:	8d 58 04             	lea    ebx,[eax+0x4]
c000fc2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc32:	83 ec 08             	sub    esp,0x8
c000fc35:	6a 06                	push   0x6
c000fc37:	51                   	push   ecx
c000fc38:	52                   	push   edx
c000fc39:	53                   	push   ebx
c000fc3a:	50                   	push   eax
c000fc3b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fc3f:	e8 68 41 00 00       	call   c0013dac <ip_output>
c000fc44:	83 c4 20             	add    esp,0x20
c000fc47:	83 ec 0c             	sub    esp,0xc
c000fc4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fc4e:	e8 09 87 ff ff       	call   c000835c <pbuf_free>
c000fc53:	83 c4 10             	add    esp,0x10
c000fc56:	b0 00                	mov    al,0x0
c000fc58:	83 c4 18             	add    esp,0x18
c000fc5b:	5b                   	pop    ebx
c000fc5c:	c3                   	ret    
c000fc5d:	8d 76 00             	lea    esi,[esi+0x0]

c000fc60 <tcp_output_segment>:
c000fc60:	56                   	push   esi
c000fc61:	53                   	push   ebx
c000fc62:	83 ec 14             	sub    esp,0x14
c000fc65:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc69:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000fc6c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fc70:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fc73:	83 ec 0c             	sub    esp,0xc
c000fc76:	50                   	push   eax
c000fc77:	e8 90 0f ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000fc7c:	83 c4 10             	add    esp,0x10
c000fc7f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000fc82:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc86:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fc8a:	0f b7 c0             	movzx  eax,ax
c000fc8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fc91:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fc94:	83 ec 0c             	sub    esp,0xc
c000fc97:	50                   	push   eax
c000fc98:	e8 4b 0f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fc9d:	83 c4 10             	add    esp,0x10
c000fca0:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000fca4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fca8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000fcab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcaf:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fcb3:	0f b7 c0             	movzx  eax,ax
c000fcb6:	01 c2                	add    edx,eax
c000fcb8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcbc:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000fcbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcc3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fcc6:	83 c0 14             	add    eax,0x14
c000fcc9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fccd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcd1:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fcd4:	0f b6 c0             	movzx  eax,al
c000fcd7:	83 e0 01             	and    eax,0x1
c000fcda:	74 10                	je     c000fcec <tcp_output_segment+0x8c>
c000fcdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fce0:	c7 00 02 04 02 18    	mov    DWORD PTR [eax],0x18020402
c000fce6:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c000fceb:	90                   	nop
c000fcec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcf0:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000fcf4:	98                   	cwde   
c000fcf5:	83 f8 ff             	cmp    eax,0xffffffff
c000fcf8:	75 0a                	jne    c000fd04 <tcp_output_segment+0xa4>
c000fcfa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcfe:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000fd04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd08:	85 c0                	test   eax,eax
c000fd0a:	74 0c                	je     c000fd18 <tcp_output_segment+0xb8>
c000fd0c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd10:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd12:	85 c0                	test   eax,eax
c000fd14:	75 32                	jne    c000fd48 <tcp_output_segment+0xe8>
c000fd16:	66 90                	xchg   ax,ax
c000fd18:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd1c:	83 c0 04             	add    eax,0x4
c000fd1f:	83 ec 0c             	sub    esp,0xc
c000fd22:	50                   	push   eax
c000fd23:	e8 dc 38 00 00       	call   c0013604 <ip_route>
c000fd28:	83 c4 10             	add    esp,0x10
c000fd2b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fd2f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fd34:	0f 84 46 01 00 00    	je     c000fe80 <tcp_output_segment+0x220>
c000fd3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd3e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000fd41:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd45:	89 10                	mov    DWORD PTR [eax],edx
c000fd47:	90                   	nop
c000fd48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd4c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fd4f:	85 c0                	test   eax,eax
c000fd51:	75 2d                	jne    c000fd80 <tcp_output_segment+0x120>
c000fd53:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000fd59:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd5d:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000fd60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd64:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fd67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd6a:	83 ec 0c             	sub    esp,0xc
c000fd6d:	50                   	push   eax
c000fd6e:	e8 99 0e ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000fd73:	83 c4 10             	add    esp,0x10
c000fd76:	89 c2                	mov    edx,eax
c000fd78:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd7c:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c000fd7f:	90                   	nop
c000fd80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd84:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fd87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd8b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd91:	29 c2                	sub    edx,eax
c000fd93:	89 d0                	mov    eax,edx
c000fd95:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000fd9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fda1:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000fda5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fda9:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000fdac:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000fdb1:	89 d6                	mov    esi,edx
c000fdb3:	29 c6                	sub    esi,eax
c000fdb5:	89 f0                	mov    eax,esi
c000fdb7:	66 89 41 0a          	mov    WORD PTR [ecx+0xa],ax
c000fdbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdbf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fdc2:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000fdc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdc9:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000fdcc:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000fdd1:	89 d6                	mov    esi,edx
c000fdd3:	29 c6                	sub    esi,eax
c000fdd5:	89 f0                	mov    eax,esi
c000fdd7:	66 89 41 08          	mov    WORD PTR [ecx+0x8],ax
c000fddb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fddf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fde2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fde6:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000fde9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fdec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fdf3:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000fdf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdfd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe00:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fe03:	0f b7 c8             	movzx  ecx,ax
c000fe06:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe0a:	8d 70 04             	lea    esi,[eax+0x4]
c000fe0d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fe11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe18:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000fe1c:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c000fe1f:	83 ec 0c             	sub    esp,0xc
c000fe22:	51                   	push   ecx
c000fe23:	6a 06                	push   0x6
c000fe25:	56                   	push   esi
c000fe26:	52                   	push   edx
c000fe27:	50                   	push   eax
c000fe28:	e8 4b 33 00 00       	call   c0013178 <inet_chksum_pseudo>
c000fe2d:	83 c4 20             	add    esp,0x20
c000fe30:	66 89 43 10          	mov    WORD PTR [ebx+0x10],ax
c000fe34:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c000fe3a:	83 c0 01             	add    eax,0x1
c000fe3d:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c000fe43:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe47:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000fe4a:	0f b6 d8             	movzx  ebx,al
c000fe4d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe51:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fe54:	0f b6 c8             	movzx  ecx,al
c000fe57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe5b:	8d 70 04             	lea    esi,[eax+0x4]
c000fe5e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fe62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe69:	83 ec 08             	sub    esp,0x8
c000fe6c:	6a 06                	push   0x6
c000fe6e:	53                   	push   ebx
c000fe6f:	51                   	push   ecx
c000fe70:	56                   	push   esi
c000fe71:	52                   	push   edx
c000fe72:	50                   	push   eax
c000fe73:	e8 34 3f 00 00       	call   c0013dac <ip_output>
c000fe78:	83 c4 20             	add    esp,0x20
c000fe7b:	eb 07                	jmp    c000fe84 <tcp_output_segment+0x224>
c000fe7d:	8d 76 00             	lea    esi,[esi+0x0]
c000fe80:	90                   	nop
c000fe81:	8d 76 00             	lea    esi,[esi+0x0]
c000fe84:	83 c4 14             	add    esp,0x14
c000fe87:	5b                   	pop    ebx
c000fe88:	5e                   	pop    esi
c000fe89:	c3                   	ret    
c000fe8a:	66 90                	xchg   ax,ax

c000fe8c <tcp_output>:
c000fe8c:	56                   	push   esi
c000fe8d:	53                   	push   ebx
c000fe8e:	83 ec 24             	sub    esp,0x24
c000fe91:	a1 88 68 03 c0       	mov    eax,ds:0xc0036888
c000fe96:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000fe9a:	75 08                	jne    c000fea4 <tcp_output+0x18>
c000fe9c:	b0 00                	mov    al,0x0
c000fe9e:	e9 6d 04 00 00       	jmp    c0010310 <tcp_output+0x484>
c000fea3:	90                   	nop
c000fea4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fea8:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000feac:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000feb0:	8b 52 60             	mov    edx,DWORD PTR [edx+0x60]
c000feb3:	0f b7 d8             	movzx  ebx,ax
c000feb6:	0f b7 ca             	movzx  ecx,dx
c000feb9:	39 cb                	cmp    ebx,ecx
c000febb:	76 03                	jbe    c000fec0 <tcp_output+0x34>
c000febd:	89 d0                	mov    eax,edx
c000febf:	90                   	nop
c000fec0:	0f b7 c0             	movzx  eax,ax
c000fec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fec7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fecb:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fece:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fed2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fed6:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fed9:	0f b6 c0             	movzx  eax,al
c000fedc:	83 e0 02             	and    eax,0x2
c000fedf:	74 4f                	je     c000ff30 <tcp_output+0xa4>
c000fee1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000fee6:	74 34                	je     c000ff1c <tcp_output+0x90>
c000fee8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000feec:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000feef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fef2:	83 ec 0c             	sub    esp,0xc
c000fef5:	50                   	push   eax
c000fef6:	e8 11 0d ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000fefb:	83 c4 10             	add    esp,0x10
c000fefe:	89 c2                	mov    edx,eax
c000ff00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff04:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000ff07:	29 c2                	sub    edx,eax
c000ff09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff0d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ff10:	0f b7 c0             	movzx  eax,ax
c000ff13:	01 d0                	add    eax,edx
c000ff15:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000ff19:	73 15                	jae    c000ff30 <tcp_output+0xa4>
c000ff1b:	90                   	nop
c000ff1c:	83 ec 0c             	sub    esp,0xc
c000ff1f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ff23:	e8 54 fc ff ff       	call   c000fb7c <tcp_send_empty_ack>
c000ff28:	83 c4 10             	add    esp,0x10
c000ff2b:	e9 e0 03 00 00       	jmp    c0010310 <tcp_output+0x484>
c000ff30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff34:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ff37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ff3b:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ff40:	0f 84 ea 02 00 00    	je     c0010230 <tcp_output+0x3a4>
c000ff46:	eb 0c                	jmp    c000ff54 <tcp_output+0xc8>
c000ff48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ff4c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff4e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ff52:	66 90                	xchg   ax,ax
c000ff54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ff58:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff5a:	85 c0                	test   eax,eax
c000ff5c:	75 ea                	jne    c000ff48 <tcp_output+0xbc>
c000ff5e:	e9 cd 02 00 00       	jmp    c0010230 <tcp_output+0x3a4>
c000ff63:	90                   	nop
c000ff64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff68:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ff6b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ff6f:	0f b7 c0             	movzx  eax,ax
c000ff72:	83 ec 0c             	sub    esp,0xc
c000ff75:	50                   	push   eax
c000ff76:	e8 6d 0c ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ff7b:	83 c4 10             	add    esp,0x10
c000ff7e:	0f b7 c0             	movzx  eax,ax
c000ff81:	83 e0 04             	and    eax,0x4
c000ff84:	74 16                	je     c000ff9c <tcp_output+0x110>
c000ff86:	83 ec 08             	sub    esp,0x8
c000ff89:	68 d3 09 03 c0       	push   0xc00309d3
c000ff8e:	68 c6 fa 02 c0       	push   0xc002fac6
c000ff93:	e8 fc fb 00 00       	call   c001fb94 <CPrintf>
c000ff98:	83 c4 10             	add    esp,0x10
c000ff9b:	90                   	nop
c000ff9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffa0:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ffa3:	85 c0                	test   eax,eax
c000ffa5:	74 45                	je     c000ffec <tcp_output+0x160>
c000ffa7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffab:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ffae:	0f b6 c0             	movzx  eax,al
c000ffb1:	83 e0 44             	and    eax,0x44
c000ffb4:	75 36                	jne    c000ffec <tcp_output+0x160>
c000ffb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffba:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ffbd:	85 c0                	test   eax,eax
c000ffbf:	74 33                	je     c000fff4 <tcp_output+0x168>
c000ffc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffc5:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ffc8:	8b 00                	mov    eax,DWORD PTR [eax]
c000ffca:	85 c0                	test   eax,eax
c000ffcc:	75 1e                	jne    c000ffec <tcp_output+0x160>
c000ffce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffd2:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ffd5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000ffd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffdc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ffdf:	0f b7 d2             	movzx  edx,dx
c000ffe2:	0f b7 c0             	movzx  eax,ax
c000ffe5:	39 c2                	cmp    edx,eax
c000ffe7:	72 0b                	jb     c000fff4 <tcp_output+0x168>
c000ffe9:	8d 76 00             	lea    esi,[esi+0x0]
c000ffec:	b8 01 00 00 00       	mov    eax,0x1
c000fff1:	eb 09                	jmp    c000fffc <tcp_output+0x170>
c000fff3:	90                   	nop
c000fff4:	b8 00 00 00 00       	mov    eax,0x0
c000fff9:	8d 76 00             	lea    esi,[esi+0x0]
c000fffc:	85 c0                	test   eax,eax
c000fffe:	75 18                	jne    c0010018 <tcp_output+0x18c>
c0010000:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010004:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010007:	0f b6 c0             	movzx  eax,al
c001000a:	25 a0 00 00 00       	and    eax,0xa0
c001000f:	0f 84 5b 02 00 00    	je     c0010270 <tcp_output+0x3e4>
c0010015:	8d 76 00             	lea    esi,[esi+0x0]
c0010018:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001001c:	8b 10                	mov    edx,DWORD PTR [eax]
c001001e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010022:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c0010025:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010029:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001002c:	83 f8 02             	cmp    eax,0x2
c001002f:	74 3f                	je     c0010070 <tcp_output+0x1e4>
c0010031:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010035:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010038:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c001003c:	83 ec 0c             	sub    esp,0xc
c001003f:	6a 10                	push   0x10
c0010041:	e8 a2 0b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010046:	83 c4 10             	add    esp,0x10
c0010049:	89 c1                	mov    ecx,eax
c001004b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001004f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010052:	89 d8                	mov    eax,ebx
c0010054:	09 c8                	or     eax,ecx
c0010056:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c001005a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001005e:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010061:	83 e0 fc             	and    eax,0xfffffffc
c0010064:	88 c2                	mov    dl,al
c0010066:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001006a:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c001006d:	8d 76 00             	lea    esi,[esi+0x0]
c0010070:	83 ec 08             	sub    esp,0x8
c0010073:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010077:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001007b:	e8 e0 fb ff ff       	call   c000fc60 <tcp_output_segment>
c0010080:	83 c4 10             	add    esp,0x10
c0010083:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010087:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001008a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001008d:	83 ec 0c             	sub    esp,0xc
c0010090:	50                   	push   eax
c0010091:	e8 76 0b ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010096:	83 c4 10             	add    esp,0x10
c0010099:	89 c3                	mov    ebx,eax
c001009b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001009f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00100a2:	0f b7 f0             	movzx  esi,ax
c00100a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100a9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00100ac:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00100b0:	0f b7 c0             	movzx  eax,ax
c00100b3:	83 ec 0c             	sub    esp,0xc
c00100b6:	50                   	push   eax
c00100b7:	e8 2c 0b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00100bc:	83 c4 10             	add    esp,0x10
c00100bf:	0f b7 c0             	movzx  eax,ax
c00100c2:	83 e0 03             	and    eax,0x3
c00100c5:	0f 95 c0             	setne  al
c00100c8:	0f b6 c0             	movzx  eax,al
c00100cb:	01 f0                	add    eax,esi
c00100cd:	01 d8                	add    eax,ebx
c00100cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100d7:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c00100da:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00100de:	79 0c                	jns    c00100ec <tcp_output+0x260>
c00100e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00100e8:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c00100eb:	90                   	nop
c00100ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100f0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00100f3:	0f b7 d8             	movzx  ebx,ax
c00100f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100fa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00100fd:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010101:	0f b7 c0             	movzx  eax,ax
c0010104:	83 ec 0c             	sub    esp,0xc
c0010107:	50                   	push   eax
c0010108:	e8 db 0a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001010d:	83 c4 10             	add    esp,0x10
c0010110:	0f b7 c0             	movzx  eax,ax
c0010113:	83 e0 03             	and    eax,0x3
c0010116:	0f 95 c0             	setne  al
c0010119:	0f b6 c0             	movzx  eax,al
c001011c:	01 d8                	add    eax,ebx
c001011e:	85 c0                	test   eax,eax
c0010120:	0f 8e ee 00 00 00    	jle    c0010214 <tcp_output+0x388>
c0010126:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001012a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010130:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010134:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010137:	85 c0                	test   eax,eax
c0010139:	75 19                	jne    c0010154 <tcp_output+0x2c8>
c001013b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001013f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010143:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c0010146:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001014a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001014e:	e9 d1 00 00 00       	jmp    c0010224 <tcp_output+0x398>
c0010153:	90                   	nop
c0010154:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010158:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001015b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001015e:	83 ec 0c             	sub    esp,0xc
c0010161:	50                   	push   eax
c0010162:	e8 a5 0a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010167:	83 c4 10             	add    esp,0x10
c001016a:	89 c3                	mov    ebx,eax
c001016c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010170:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010173:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010176:	83 ec 0c             	sub    esp,0xc
c0010179:	50                   	push   eax
c001017a:	e8 8d 0a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001017f:	83 c4 10             	add    esp,0x10
c0010182:	29 c3                	sub    ebx,eax
c0010184:	89 d8                	mov    eax,ebx
c0010186:	79 74                	jns    c00101fc <tcp_output+0x370>
c0010188:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001018c:	83 c0 7c             	add    eax,0x7c
c001018f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010193:	eb 0f                	jmp    c00101a4 <tcp_output+0x318>
c0010195:	8d 76 00             	lea    esi,[esi+0x0]
c0010198:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001019c:	8b 00                	mov    eax,DWORD PTR [eax]
c001019e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00101a2:	66 90                	xchg   ax,ax
c00101a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00101aa:	85 c0                	test   eax,eax
c00101ac:	74 36                	je     c00101e4 <tcp_output+0x358>
c00101ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00101b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00101b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00101ba:	83 ec 0c             	sub    esp,0xc
c00101bd:	50                   	push   eax
c00101be:	e8 49 0a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00101c3:	83 c4 10             	add    esp,0x10
c00101c6:	89 c3                	mov    ebx,eax
c00101c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00101cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00101d2:	83 ec 0c             	sub    esp,0xc
c00101d5:	50                   	push   eax
c00101d6:	e8 31 0a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00101db:	83 c4 10             	add    esp,0x10
c00101de:	29 c3                	sub    ebx,eax
c00101e0:	89 d8                	mov    eax,ebx
c00101e2:	78 b4                	js     c0010198 <tcp_output+0x30c>
c00101e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101e8:	8b 10                	mov    edx,DWORD PTR [eax]
c00101ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101ee:	89 10                	mov    DWORD PTR [eax],edx
c00101f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101f4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00101f8:	89 10                	mov    DWORD PTR [eax],edx
c00101fa:	eb 28                	jmp    c0010224 <tcp_output+0x398>
c00101fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010200:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010204:	89 10                	mov    DWORD PTR [eax],edx
c0010206:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001020a:	8b 00                	mov    eax,DWORD PTR [eax]
c001020c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010210:	eb 12                	jmp    c0010224 <tcp_output+0x398>
c0010212:	66 90                	xchg   ax,ax
c0010214:	83 ec 0c             	sub    esp,0xc
c0010217:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001021b:	e8 b4 9d ff ff       	call   c0009fd4 <tcp_seg_free>
c0010220:	83 c4 10             	add    esp,0x10
c0010223:	90                   	nop
c0010224:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010228:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c001022b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001022f:	90                   	nop
c0010230:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010235:	74 3d                	je     c0010274 <tcp_output+0x3e8>
c0010237:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001023b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001023e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010241:	83 ec 0c             	sub    esp,0xc
c0010244:	50                   	push   eax
c0010245:	e8 c2 09 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001024a:	83 c4 10             	add    esp,0x10
c001024d:	89 c2                	mov    edx,eax
c001024f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010253:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c0010256:	29 c2                	sub    edx,eax
c0010258:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001025c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001025f:	0f b7 c0             	movzx  eax,ax
c0010262:	01 d0                	add    eax,edx
c0010264:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0010268:	0f 83 f6 fc ff ff    	jae    c000ff64 <tcp_output+0xd8>
c001026e:	eb 04                	jmp    c0010274 <tcp_output+0x3e8>
c0010270:	90                   	nop
c0010271:	8d 76 00             	lea    esi,[esi+0x0]
c0010274:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010278:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c001027b:	85 c0                	test   eax,eax
c001027d:	75 0d                	jne    c001028c <tcp_output+0x400>
c001027f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010283:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c0010289:	8d 76 00             	lea    esi,[esi+0x0]
c001028c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010291:	74 65                	je     c00102f8 <tcp_output+0x46c>
c0010293:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010297:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c001029d:	0f b6 c0             	movzx  eax,al
c00102a0:	85 c0                	test   eax,eax
c00102a2:	75 54                	jne    c00102f8 <tcp_output+0x46c>
c00102a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00102ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00102ae:	83 ec 0c             	sub    esp,0xc
c00102b1:	50                   	push   eax
c00102b2:	e8 55 09 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00102b7:	83 c4 10             	add    esp,0x10
c00102ba:	89 c2                	mov    edx,eax
c00102bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102c0:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c00102c3:	29 c2                	sub    edx,eax
c00102c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102c9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00102cc:	0f b7 c0             	movzx  eax,ax
c00102cf:	01 c2                	add    edx,eax
c00102d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102d5:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c00102d8:	0f b7 c0             	movzx  eax,ax
c00102db:	39 c2                	cmp    edx,eax
c00102dd:	76 19                	jbe    c00102f8 <tcp_output+0x46c>
c00102df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102e3:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c00102ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102f1:	c6 80 a4 00 00 00 01 	mov    BYTE PTR [eax+0xa4],0x1
c00102f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102fc:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00102ff:	83 e0 7f             	and    eax,0x7f
c0010302:	88 c2                	mov    dl,al
c0010304:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010308:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c001030b:	b0 00                	mov    al,0x0
c001030d:	8d 76 00             	lea    esi,[esi+0x0]
c0010310:	83 c4 24             	add    esp,0x24
c0010313:	5b                   	pop    ebx
c0010314:	5e                   	pop    esi
c0010315:	c3                   	ret    
c0010316:	66 90                	xchg   ax,ax

c0010318 <tcp_rst>:
c0010318:	83 ec 2c             	sub    esp,0x2c
c001031b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001031f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0010323:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0010328:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001032d:	83 ec 04             	sub    esp,0x4
c0010330:	6a 00                	push   0x0
c0010332:	6a 14                	push   0x14
c0010334:	6a 01                	push   0x1
c0010336:	e8 f9 81 ff ff       	call   c0008534 <pbuf_alloc>
c001033b:	83 c4 10             	add    esp,0x10
c001033e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010342:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010347:	0f 84 37 01 00 00    	je     c0010484 <tcp_rst+0x16c>
c001034d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010351:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0010355:	0f b7 c0             	movzx  eax,ax
c0010358:	83 f8 13             	cmp    eax,0x13
c001035b:	77 17                	ja     c0010374 <tcp_rst+0x5c>
c001035d:	83 ec 08             	sub    esp,0x8
c0010360:	68 e0 06 03 c0       	push   0xc00306e0
c0010365:	68 c6 fa 02 c0       	push   0xc002fac6
c001036a:	e8 25 f8 00 00       	call   c001fb94 <CPrintf>
c001036f:	83 c4 10             	add    esp,0x10
c0010372:	66 90                	xchg   ax,ax
c0010374:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010378:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001037b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001037f:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0010384:	83 ec 0c             	sub    esp,0xc
c0010387:	50                   	push   eax
c0010388:	e8 5b 08 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001038d:	83 c4 10             	add    esp,0x10
c0010390:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010394:	66 89 02             	mov    WORD PTR [edx],ax
c0010397:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c001039c:	83 ec 0c             	sub    esp,0xc
c001039f:	50                   	push   eax
c00103a0:	e8 43 08 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00103a5:	83 c4 10             	add    esp,0x10
c00103a8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00103ac:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00103b0:	83 ec 0c             	sub    esp,0xc
c00103b3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00103b7:	e8 50 08 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00103bc:	83 c4 10             	add    esp,0x10
c00103bf:	89 c2                	mov    edx,eax
c00103c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00103c5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00103c8:	83 ec 0c             	sub    esp,0xc
c00103cb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00103cf:	e8 38 08 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00103d4:	83 c4 10             	add    esp,0x10
c00103d7:	89 c2                	mov    edx,eax
c00103d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00103dd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00103e0:	83 ec 0c             	sub    esp,0xc
c00103e3:	68 14 50 00 00       	push   0x5014
c00103e8:	e8 fb 07 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00103ed:	83 c4 10             	add    esp,0x10
c00103f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00103f4:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c00103f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00103fc:	66 c7 40 0e 08 60    	mov    WORD PTR [eax+0xe],0x6008
c0010402:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010406:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c001040c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010410:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c0010416:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001041a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001041d:	0f b7 c0             	movzx  eax,ax
c0010420:	83 ec 0c             	sub    esp,0xc
c0010423:	50                   	push   eax
c0010424:	6a 06                	push   0x6
c0010426:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001042a:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001042e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010432:	e8 41 2d 00 00       	call   c0013178 <inet_chksum_pseudo>
c0010437:	83 c4 20             	add    esp,0x20
c001043a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001043e:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c0010442:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c0010448:	83 c0 01             	add    eax,0x1
c001044b:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c0010451:	83 ec 08             	sub    esp,0x8
c0010454:	6a 06                	push   0x6
c0010456:	6a 00                	push   0x0
c0010458:	68 ff 00 00 00       	push   0xff
c001045d:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0010461:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0010465:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010469:	e8 3e 39 00 00       	call   c0013dac <ip_output>
c001046e:	83 c4 20             	add    esp,0x20
c0010471:	83 ec 0c             	sub    esp,0xc
c0010474:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010478:	e8 df 7e ff ff       	call   c000835c <pbuf_free>
c001047d:	83 c4 10             	add    esp,0x10
c0010480:	eb 06                	jmp    c0010488 <tcp_rst+0x170>
c0010482:	66 90                	xchg   ax,ax
c0010484:	90                   	nop
c0010485:	8d 76 00             	lea    esi,[esi+0x0]
c0010488:	83 c4 2c             	add    esp,0x2c
c001048b:	c3                   	ret    

c001048c <tcp_rexmit_rto>:
c001048c:	83 ec 1c             	sub    esp,0x1c
c001048f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010493:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010496:	85 c0                	test   eax,eax
c0010498:	74 7a                	je     c0010514 <tcp_rexmit_rto+0x88>
c001049a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001049e:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00104a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00104a5:	eb 0d                	jmp    c00104b4 <tcp_rexmit_rto+0x28>
c00104a7:	90                   	nop
c00104a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00104ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00104b2:	66 90                	xchg   ax,ax
c00104b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00104ba:	85 c0                	test   eax,eax
c00104bc:	75 ea                	jne    c00104a8 <tcp_rexmit_rto+0x1c>
c00104be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104c2:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c00104c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104c9:	89 10                	mov    DWORD PTR [eax],edx
c00104cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104cf:	8b 50 7c             	mov    edx,DWORD PTR [eax+0x7c]
c00104d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104d6:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c00104d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104dd:	c7 40 7c 00 00 00 00 	mov    DWORD PTR [eax+0x7c],0x0
c00104e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104e8:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c00104eb:	83 c0 01             	add    eax,0x1
c00104ee:	88 c2                	mov    dl,al
c00104f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104f4:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c00104f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104fb:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0010502:	83 ec 0c             	sub    esp,0xc
c0010505:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010509:	e8 7e f9 ff ff       	call   c000fe8c <tcp_output>
c001050e:	83 c4 10             	add    esp,0x10
c0010511:	eb 05                	jmp    c0010518 <tcp_rexmit_rto+0x8c>
c0010513:	90                   	nop
c0010514:	90                   	nop
c0010515:	8d 76 00             	lea    esi,[esi+0x0]
c0010518:	83 c4 1c             	add    esp,0x1c
c001051b:	c3                   	ret    

c001051c <tcp_rexmit>:
c001051c:	53                   	push   ebx
c001051d:	83 ec 18             	sub    esp,0x18
c0010520:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010524:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010527:	85 c0                	test   eax,eax
c0010529:	0f 84 a9 00 00 00    	je     c00105d8 <tcp_rexmit+0xbc>
c001052f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010533:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010536:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001053a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001053e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010540:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010544:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c0010547:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001054b:	83 c0 78             	add    eax,0x78
c001054e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010552:	eb 0c                	jmp    c0010560 <tcp_rexmit+0x44>
c0010554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010558:	8b 00                	mov    eax,DWORD PTR [eax]
c001055a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001055e:	66 90                	xchg   ax,ax
c0010560:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010564:	8b 00                	mov    eax,DWORD PTR [eax]
c0010566:	85 c0                	test   eax,eax
c0010568:	74 36                	je     c00105a0 <tcp_rexmit+0x84>
c001056a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001056e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010570:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010573:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010576:	83 ec 0c             	sub    esp,0xc
c0010579:	50                   	push   eax
c001057a:	e8 8d 06 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001057f:	83 c4 10             	add    esp,0x10
c0010582:	89 c3                	mov    ebx,eax
c0010584:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010588:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001058b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001058e:	83 ec 0c             	sub    esp,0xc
c0010591:	50                   	push   eax
c0010592:	e8 75 06 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010597:	83 c4 10             	add    esp,0x10
c001059a:	29 c3                	sub    ebx,eax
c001059c:	89 d8                	mov    eax,ebx
c001059e:	78 b4                	js     c0010554 <tcp_rexmit+0x38>
c00105a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00105a4:	8b 10                	mov    edx,DWORD PTR [eax]
c00105a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00105aa:	89 10                	mov    DWORD PTR [eax],edx
c00105ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00105b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00105b4:	89 10                	mov    DWORD PTR [eax],edx
c00105b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00105ba:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c00105bd:	83 c0 01             	add    eax,0x1
c00105c0:	88 c2                	mov    dl,al
c00105c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00105c6:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c00105c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00105cd:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00105d4:	eb 06                	jmp    c00105dc <tcp_rexmit+0xc0>
c00105d6:	66 90                	xchg   ax,ax
c00105d8:	90                   	nop
c00105d9:	8d 76 00             	lea    esi,[esi+0x0]
c00105dc:	83 c4 18             	add    esp,0x18
c00105df:	5b                   	pop    ebx
c00105e0:	c3                   	ret    
c00105e1:	8d 76 00             	lea    esi,[esi+0x0]

c00105e4 <tcp_rexmit_fast>:
c00105e4:	83 ec 0c             	sub    esp,0xc
c00105e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105eb:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00105ee:	85 c0                	test   eax,eax
c00105f0:	0f 84 ca 00 00 00    	je     c00106c0 <tcp_rexmit_fast+0xdc>
c00105f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105fa:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00105fd:	0f b6 c0             	movzx  eax,al
c0010600:	83 e0 04             	and    eax,0x4
c0010603:	0f 85 b7 00 00 00    	jne    c00106c0 <tcp_rexmit_fast+0xdc>
c0010609:	83 ec 0c             	sub    esp,0xc
c001060c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010610:	e8 07 ff ff ff       	call   c001051c <tcp_rexmit>
c0010615:	83 c4 10             	add    esp,0x10
c0010618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001061c:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c0010620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010624:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c0010627:	0f b7 d2             	movzx  edx,dx
c001062a:	0f b7 c0             	movzx  eax,ax
c001062d:	39 c2                	cmp    edx,eax
c001062f:	76 17                	jbe    c0010648 <tcp_rexmit_fast+0x64>
c0010631:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010635:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c0010638:	0f b7 c0             	movzx  eax,ax
c001063b:	d1 e8                	shr    eax,1
c001063d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010641:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c0010645:	eb 19                	jmp    c0010660 <tcp_rexmit_fast+0x7c>
c0010647:	90                   	nop
c0010648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001064c:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c0010650:	0f b7 c0             	movzx  eax,ax
c0010653:	d1 e8                	shr    eax,1
c0010655:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010659:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c001065d:	8d 76 00             	lea    esi,[esi+0x0]
c0010660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010664:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c0010667:	0f b7 d0             	movzx  edx,ax
c001066a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001066e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010671:	0f b7 c0             	movzx  eax,ax
c0010674:	01 c0                	add    eax,eax
c0010676:	39 c2                	cmp    edx,eax
c0010678:	7d 12                	jge    c001068c <tcp_rexmit_fast+0xa8>
c001067a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001067e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010681:	d1 e0                	shl    eax,1
c0010683:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010687:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c001068b:	90                   	nop
c001068c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010690:	8b 50 58             	mov    edx,DWORD PTR [eax+0x58]
c0010693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010697:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001069a:	89 c1                	mov    ecx,eax
c001069c:	d1 e1                	shl    ecx,1
c001069e:	01 c8                	add    eax,ecx
c00106a0:	01 d0                	add    eax,edx
c00106a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00106a6:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c00106aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ae:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00106b1:	83 c8 04             	or     eax,0x4
c00106b4:	88 c2                	mov    dl,al
c00106b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ba:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c00106bd:	8d 76 00             	lea    esi,[esi+0x0]
c00106c0:	90                   	nop
c00106c1:	83 c4 0c             	add    esp,0xc
c00106c4:	c3                   	ret    
c00106c5:	8d 76 00             	lea    esi,[esi+0x0]

c00106c8 <tcp_keepalive>:
c00106c8:	83 ec 1c             	sub    esp,0x1c
c00106cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106cf:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c00106d2:	83 e8 01             	sub    eax,0x1
c00106d5:	83 ec 0c             	sub    esp,0xc
c00106d8:	50                   	push   eax
c00106d9:	e8 2e 05 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00106de:	83 c4 10             	add    esp,0x10
c00106e1:	50                   	push   eax
c00106e2:	6a 00                	push   0x0
c00106e4:	6a 00                	push   0x0
c00106e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00106ea:	e8 f1 e2 ff ff       	call   c000e9e0 <tcp_output_alloc_header>
c00106ef:	83 c4 10             	add    esp,0x10
c00106f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00106f6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00106fb:	0f 84 87 00 00 00    	je     c0010788 <tcp_keepalive+0xc0>
c0010701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010705:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010708:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001070c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010710:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010713:	0f b7 d0             	movzx  edx,ax
c0010716:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001071a:	8d 48 04             	lea    ecx,[eax+0x4]
c001071d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010721:	83 ec 0c             	sub    esp,0xc
c0010724:	52                   	push   edx
c0010725:	6a 06                	push   0x6
c0010727:	51                   	push   ecx
c0010728:	50                   	push   eax
c0010729:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001072d:	e8 46 2a 00 00       	call   c0013178 <inet_chksum_pseudo>
c0010732:	83 c4 20             	add    esp,0x20
c0010735:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010739:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c001073d:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c0010743:	83 c0 01             	add    eax,0x1
c0010746:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c001074c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010750:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0010753:	0f b6 d0             	movzx  edx,al
c0010756:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001075a:	8d 48 04             	lea    ecx,[eax+0x4]
c001075d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010761:	83 ec 08             	sub    esp,0x8
c0010764:	6a 06                	push   0x6
c0010766:	6a 00                	push   0x0
c0010768:	52                   	push   edx
c0010769:	51                   	push   ecx
c001076a:	50                   	push   eax
c001076b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001076f:	e8 38 36 00 00       	call   c0013dac <ip_output>
c0010774:	83 c4 20             	add    esp,0x20
c0010777:	83 ec 0c             	sub    esp,0xc
c001077a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001077e:	e8 d9 7b ff ff       	call   c000835c <pbuf_free>
c0010783:	83 c4 10             	add    esp,0x10
c0010786:	eb 04                	jmp    c001078c <tcp_keepalive+0xc4>
c0010788:	90                   	nop
c0010789:	8d 76 00             	lea    esi,[esi+0x0]
c001078c:	83 c4 1c             	add    esp,0x1c
c001078f:	c3                   	ret    

c0010790 <tcp_zero_window_probe>:
c0010790:	53                   	push   ebx
c0010791:	83 ec 28             	sub    esp,0x28
c0010794:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010798:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001079b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001079f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00107a4:	75 0e                	jne    c00107b4 <tcp_zero_window_probe+0x24>
c00107a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00107aa:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c00107ad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00107b1:	8d 76 00             	lea    esi,[esi+0x0]
c00107b4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00107b9:	0f 84 95 01 00 00    	je     c0010954 <tcp_zero_window_probe+0x1c4>
c00107bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00107c3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00107c6:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00107ca:	0f b7 c0             	movzx  eax,ax
c00107cd:	83 ec 0c             	sub    esp,0xc
c00107d0:	50                   	push   eax
c00107d1:	e8 12 04 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00107d6:	83 c4 10             	add    esp,0x10
c00107d9:	0f b7 c0             	movzx  eax,ax
c00107dc:	83 e0 01             	and    eax,0x1
c00107df:	74 17                	je     c00107f8 <tcp_zero_window_probe+0x68>
c00107e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00107e5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00107e8:	0f b7 c0             	movzx  eax,ax
c00107eb:	85 c0                	test   eax,eax
c00107ed:	75 09                	jne    c00107f8 <tcp_zero_window_probe+0x68>
c00107ef:	b8 01 00 00 00       	mov    eax,0x1
c00107f4:	eb 0a                	jmp    c0010800 <tcp_zero_window_probe+0x70>
c00107f6:	66 90                	xchg   ax,ax
c00107f8:	b8 00 00 00 00       	mov    eax,0x0
c00107fd:	8d 76 00             	lea    esi,[esi+0x0]
c0010800:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0010804:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0010809:	85 c0                	test   eax,eax
c001080b:	0f 94 c0             	sete   al
c001080e:	0f b6 c0             	movzx  eax,al
c0010811:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0010816:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001081a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001081d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010820:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0010825:	52                   	push   edx
c0010826:	50                   	push   eax
c0010827:	6a 00                	push   0x0
c0010829:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001082d:	e8 ae e1 ff ff       	call   c000e9e0 <tcp_output_alloc_header>
c0010832:	83 c4 10             	add    esp,0x10
c0010835:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010839:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001083e:	0f 84 14 01 00 00    	je     c0010958 <tcp_zero_window_probe+0x1c8>
c0010844:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010848:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001084b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001084f:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0010854:	85 c0                	test   eax,eax
c0010856:	74 28                	je     c0010880 <tcp_zero_window_probe+0xf0>
c0010858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001085c:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010860:	80 e4 c0             	and    ah,0xc0
c0010863:	89 c3                	mov    ebx,eax
c0010865:	83 ec 0c             	sub    esp,0xc
c0010868:	6a 11                	push   0x11
c001086a:	e8 79 03 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001086f:	83 c4 10             	add    esp,0x10
c0010872:	09 d8                	or     eax,ebx
c0010874:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010878:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c001087c:	eb 5a                	jmp    c00108d8 <tcp_zero_window_probe+0x148>
c001087e:	66 90                	xchg   ax,ax
c0010880:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010884:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010887:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001088a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001088e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010892:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010895:	83 c0 14             	add    eax,0x14
c0010898:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001089c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00108a0:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00108a4:	0f b7 c0             	movzx  eax,ax
c00108a7:	83 ec 0c             	sub    esp,0xc
c00108aa:	50                   	push   eax
c00108ab:	e8 38 03 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00108b0:	83 c4 10             	add    esp,0x10
c00108b3:	0f b7 c0             	movzx  eax,ax
c00108b6:	c1 e8 0c             	shr    eax,0xc
c00108b9:	c1 e0 02             	shl    eax,0x2
c00108bc:	0f b7 d0             	movzx  edx,ax
c00108bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00108c3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00108c6:	52                   	push   edx
c00108c7:	6a 01                	push   0x1
c00108c9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00108cd:	50                   	push   eax
c00108ce:	e8 29 87 ff ff       	call   c0008ffc <pbuf_copy_partial>
c00108d3:	83 c4 10             	add    esp,0x10
c00108d6:	66 90                	xchg   ax,ax
c00108d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00108df:	0f b7 d0             	movzx  edx,ax
c00108e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00108e6:	8d 48 04             	lea    ecx,[eax+0x4]
c00108e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00108ed:	83 ec 0c             	sub    esp,0xc
c00108f0:	52                   	push   edx
c00108f1:	6a 06                	push   0x6
c00108f3:	51                   	push   ecx
c00108f4:	50                   	push   eax
c00108f5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00108f9:	e8 7a 28 00 00       	call   c0013178 <inet_chksum_pseudo>
c00108fe:	83 c4 20             	add    esp,0x20
c0010901:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010905:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c0010909:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c001090f:	83 c0 01             	add    eax,0x1
c0010912:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c0010918:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001091c:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c001091f:	0f b6 d0             	movzx  edx,al
c0010922:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010926:	8d 48 04             	lea    ecx,[eax+0x4]
c0010929:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001092d:	83 ec 08             	sub    esp,0x8
c0010930:	6a 06                	push   0x6
c0010932:	6a 00                	push   0x0
c0010934:	52                   	push   edx
c0010935:	51                   	push   ecx
c0010936:	50                   	push   eax
c0010937:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001093b:	e8 6c 34 00 00       	call   c0013dac <ip_output>
c0010940:	83 c4 20             	add    esp,0x20
c0010943:	83 ec 0c             	sub    esp,0xc
c0010946:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001094a:	e8 0d 7a ff ff       	call   c000835c <pbuf_free>
c001094f:	83 c4 10             	add    esp,0x10
c0010952:	eb 08                	jmp    c001095c <tcp_zero_window_probe+0x1cc>
c0010954:	90                   	nop
c0010955:	eb 05                	jmp    c001095c <tcp_zero_window_probe+0x1cc>
c0010957:	90                   	nop
c0010958:	90                   	nop
c0010959:	8d 76 00             	lea    esi,[esi+0x0]
c001095c:	83 c4 28             	add    esp,0x28
c001095f:	5b                   	pop    ebx
c0010960:	c3                   	ret    
c0010961:	66 90                	xchg   ax,ax
c0010963:	90                   	nop

c0010964 <sys_timeout>:
c0010964:	83 ec 1c             	sub    esp,0x1c
c0010967:	83 ec 0c             	sub    esp,0xc
c001096a:	6a 0b                	push   0xb
c001096c:	e8 03 70 ff ff       	call   c0007974 <memp_malloc>
c0010971:	83 c4 10             	add    esp,0x10
c0010974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010978:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001097d:	75 25                	jne    c00109a4 <sys_timeout+0x40>
c001097f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010984:	0f 85 3e 01 00 00    	jne    c0010ac8 <sys_timeout+0x164>
c001098a:	83 ec 08             	sub    esp,0x8
c001098d:	68 ec 09 03 c0       	push   0xc00309ec
c0010992:	68 c6 fa 02 c0       	push   0xc002fac6
c0010997:	e8 f8 f1 00 00       	call   c001fb94 <CPrintf>
c001099c:	83 c4 10             	add    esp,0x10
c001099f:	e9 24 01 00 00       	jmp    c0010ac8 <sys_timeout+0x164>
c00109a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109a8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00109ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109b2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00109b6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00109b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00109c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00109c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109c8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00109cc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00109cf:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c00109d4:	85 c0                	test   eax,eax
c00109d6:	75 10                	jne    c00109e8 <sys_timeout+0x84>
c00109d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109dc:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c00109e1:	e9 e6 00 00 00       	jmp    c0010acc <sys_timeout+0x168>
c00109e6:	66 90                	xchg   ax,ax
c00109e8:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c00109ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00109f0:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00109f4:	73 2e                	jae    c0010a24 <sys_timeout+0xc0>
c00109f6:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c00109fb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00109fe:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010a03:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0010a07:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010a0a:	8b 15 d4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8d4
c0010a10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a14:	89 10                	mov    DWORD PTR [eax],edx
c0010a16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a1a:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010a1f:	e9 a8 00 00 00       	jmp    c0010acc <sys_timeout+0x168>
c0010a24:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010a29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010a2d:	e9 86 00 00 00       	jmp    c0010ab8 <sys_timeout+0x154>
c0010a32:	66 90                	xchg   ax,ax
c0010a34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a38:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010a3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a3f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a42:	29 c2                	sub    edx,eax
c0010a44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010a4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a51:	85 c0                	test   eax,eax
c0010a53:	74 17                	je     c0010a6c <sys_timeout+0x108>
c0010a55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a59:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a5b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010a5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a65:	39 c2                	cmp    edx,eax
c0010a67:	76 43                	jbe    c0010aac <sys_timeout+0x148>
c0010a69:	8d 76 00             	lea    esi,[esi+0x0]
c0010a6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a70:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a72:	85 c0                	test   eax,eax
c0010a74:	74 1e                	je     c0010a94 <sys_timeout+0x130>
c0010a76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a7c:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010a7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a83:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010a86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a8c:	29 d1                	sub    ecx,edx
c0010a8e:	89 ca                	mov    edx,ecx
c0010a90:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010a93:	90                   	nop
c0010a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a98:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a9e:	89 10                	mov    DWORD PTR [eax],edx
c0010aa0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010aa4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010aa8:	89 10                	mov    DWORD PTR [eax],edx
c0010aaa:	eb 20                	jmp    c0010acc <sys_timeout+0x168>
c0010aac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ab0:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ab2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ab6:	66 90                	xchg   ax,ax
c0010ab8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010abd:	0f 85 71 ff ff ff    	jne    c0010a34 <sys_timeout+0xd0>
c0010ac3:	eb 07                	jmp    c0010acc <sys_timeout+0x168>
c0010ac5:	8d 76 00             	lea    esi,[esi+0x0]
c0010ac8:	90                   	nop
c0010ac9:	8d 76 00             	lea    esi,[esi+0x0]
c0010acc:	83 c4 1c             	add    esp,0x1c
c0010acf:	c3                   	ret    

c0010ad0 <tcpip_tcp_timer>:
c0010ad0:	83 ec 0c             	sub    esp,0xc
c0010ad3:	e8 34 a5 ff ff       	call   c000b00c <tcp_tmr>
c0010ad8:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0010add:	85 c0                	test   eax,eax
c0010adf:	75 0b                	jne    c0010aec <tcpip_tcp_timer+0x1c>
c0010ae1:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c0010ae6:	85 c0                	test   eax,eax
c0010ae8:	74 1e                	je     c0010b08 <tcpip_tcp_timer+0x38>
c0010aea:	66 90                	xchg   ax,ax
c0010aec:	83 ec 04             	sub    esp,0x4
c0010aef:	6a 00                	push   0x0
c0010af1:	68 d0 0a 01 c0       	push   0xc0010ad0
c0010af6:	68 fa 00 00 00       	push   0xfa
c0010afb:	e8 64 fe ff ff       	call   c0010964 <sys_timeout>
c0010b00:	83 c4 10             	add    esp,0x10
c0010b03:	eb 0f                	jmp    c0010b14 <tcpip_tcp_timer+0x44>
c0010b05:	8d 76 00             	lea    esi,[esi+0x0]
c0010b08:	c7 05 d0 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8d0,0x0
c0010b12:	66 90                	xchg   ax,ax
c0010b14:	90                   	nop
c0010b15:	83 c4 0c             	add    esp,0xc
c0010b18:	c3                   	ret    
c0010b19:	8d 76 00             	lea    esi,[esi+0x0]

c0010b1c <tcp_timer_needed>:
c0010b1c:	83 ec 0c             	sub    esp,0xc
c0010b1f:	a1 d0 a8 03 c0       	mov    eax,ds:0xc003a8d0
c0010b24:	85 c0                	test   eax,eax
c0010b26:	75 38                	jne    c0010b60 <tcp_timer_needed+0x44>
c0010b28:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0010b2d:	85 c0                	test   eax,eax
c0010b2f:	75 0b                	jne    c0010b3c <tcp_timer_needed+0x20>
c0010b31:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c0010b36:	85 c0                	test   eax,eax
c0010b38:	74 26                	je     c0010b60 <tcp_timer_needed+0x44>
c0010b3a:	66 90                	xchg   ax,ax
c0010b3c:	c7 05 d0 a8 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003a8d0,0x1
c0010b46:	83 ec 04             	sub    esp,0x4
c0010b49:	6a 00                	push   0x0
c0010b4b:	68 d0 0a 01 c0       	push   0xc0010ad0
c0010b50:	68 fa 00 00 00       	push   0xfa
c0010b55:	e8 0a fe ff ff       	call   c0010964 <sys_timeout>
c0010b5a:	83 c4 10             	add    esp,0x10
c0010b5d:	8d 76 00             	lea    esi,[esi+0x0]
c0010b60:	90                   	nop
c0010b61:	83 c4 0c             	add    esp,0xc
c0010b64:	c3                   	ret    
c0010b65:	8d 76 00             	lea    esi,[esi+0x0]

c0010b68 <ip_reass_timer>:
c0010b68:	83 ec 0c             	sub    esp,0xc
c0010b6b:	e8 f0 3a 00 00       	call   c0014660 <ip_reass_tmr>
c0010b70:	83 ec 04             	sub    esp,0x4
c0010b73:	6a 00                	push   0x0
c0010b75:	68 68 0b 01 c0       	push   0xc0010b68
c0010b7a:	68 e8 03 00 00       	push   0x3e8
c0010b7f:	e8 e0 fd ff ff       	call   c0010964 <sys_timeout>
c0010b84:	83 c4 10             	add    esp,0x10
c0010b87:	90                   	nop
c0010b88:	83 c4 0c             	add    esp,0xc
c0010b8b:	c3                   	ret    

c0010b8c <arp_timer>:
c0010b8c:	83 ec 0c             	sub    esp,0xc
c0010b8f:	e8 60 0d 00 00       	call   c00118f4 <etharp_tmr>
c0010b94:	83 ec 04             	sub    esp,0x4
c0010b97:	6a 00                	push   0x0
c0010b99:	68 8c 0b 01 c0       	push   0xc0010b8c
c0010b9e:	68 88 13 00 00       	push   0x1388
c0010ba3:	e8 bc fd ff ff       	call   c0010964 <sys_timeout>
c0010ba8:	83 c4 10             	add    esp,0x10
c0010bab:	90                   	nop
c0010bac:	83 c4 0c             	add    esp,0xc
c0010baf:	c3                   	ret    

c0010bb0 <sys_timeouts_init>:
c0010bb0:	83 ec 0c             	sub    esp,0xc
c0010bb3:	83 ec 04             	sub    esp,0x4
c0010bb6:	6a 00                	push   0x0
c0010bb8:	68 68 0b 01 c0       	push   0xc0010b68
c0010bbd:	68 e8 03 00 00       	push   0x3e8
c0010bc2:	e8 9d fd ff ff       	call   c0010964 <sys_timeout>
c0010bc7:	83 c4 10             	add    esp,0x10
c0010bca:	83 ec 04             	sub    esp,0x4
c0010bcd:	6a 00                	push   0x0
c0010bcf:	68 8c 0b 01 c0       	push   0xc0010b8c
c0010bd4:	68 88 13 00 00       	push   0x1388
c0010bd9:	e8 86 fd ff ff       	call   c0010964 <sys_timeout>
c0010bde:	83 c4 10             	add    esp,0x10
c0010be1:	90                   	nop
c0010be2:	83 c4 0c             	add    esp,0xc
c0010be5:	c3                   	ret    
c0010be6:	66 90                	xchg   ax,ax

c0010be8 <sys_untimeout>:
c0010be8:	83 ec 1c             	sub    esp,0x1c
c0010beb:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010bf0:	85 c0                	test   eax,eax
c0010bf2:	0f 84 b4 00 00 00    	je     c0010cac <sys_untimeout+0xc4>
c0010bf8:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010bfd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010c01:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010c09:	e9 8e 00 00 00       	jmp    c0010c9c <sys_untimeout+0xb4>
c0010c0e:	66 90                	xchg   ax,ax
c0010c10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c14:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010c17:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0010c1b:	75 6b                	jne    c0010c88 <sys_untimeout+0xa0>
c0010c1d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c21:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010c24:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0010c28:	75 5e                	jne    c0010c88 <sys_untimeout+0xa0>
c0010c2a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010c2f:	75 0f                	jne    c0010c40 <sys_untimeout+0x58>
c0010c31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c35:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c37:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010c3c:	eb 0e                	jmp    c0010c4c <sys_untimeout+0x64>
c0010c3e:	66 90                	xchg   ax,ax
c0010c40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c44:	8b 10                	mov    edx,DWORD PTR [eax]
c0010c46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c4a:	89 10                	mov    DWORD PTR [eax],edx
c0010c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c52:	85 c0                	test   eax,eax
c0010c54:	74 1e                	je     c0010c74 <sys_untimeout+0x8c>
c0010c56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c5c:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010c5f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c63:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010c66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c6c:	01 ca                	add    edx,ecx
c0010c6e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c71:	8d 76 00             	lea    esi,[esi+0x0]
c0010c74:	83 ec 08             	sub    esp,0x8
c0010c77:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010c7b:	6a 0b                	push   0xb
c0010c7d:	e8 1e 6e ff ff       	call   c0007aa0 <memp_free>
c0010c82:	83 c4 10             	add    esp,0x10
c0010c85:	eb 29                	jmp    c0010cb0 <sys_untimeout+0xc8>
c0010c87:	90                   	nop
c0010c88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010c90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c94:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c96:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010c9a:	66 90                	xchg   ax,ax
c0010c9c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010ca1:	0f 85 69 ff ff ff    	jne    c0010c10 <sys_untimeout+0x28>
c0010ca7:	90                   	nop
c0010ca8:	eb 06                	jmp    c0010cb0 <sys_untimeout+0xc8>
c0010caa:	66 90                	xchg   ax,ax
c0010cac:	90                   	nop
c0010cad:	8d 76 00             	lea    esi,[esi+0x0]
c0010cb0:	83 c4 1c             	add    esp,0x1c
c0010cb3:	c3                   	ret    

c0010cb4 <sys_timeouts_mbox_fetch>:
c0010cb4:	83 ec 1c             	sub    esp,0x1c
c0010cb7:	90                   	nop
c0010cb8:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010cbd:	85 c0                	test   eax,eax
c0010cbf:	75 1f                	jne    c0010ce0 <sys_timeouts_mbox_fetch+0x2c>
c0010cc1:	83 ec 04             	sub    esp,0x4
c0010cc4:	6a 00                	push   0x0
c0010cc6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010cca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010cce:	e8 59 00 ff ff       	call   c0000d2c <sys_arch_mbox_fetch>
c0010cd3:	83 c4 10             	add    esp,0x10
c0010cd6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010cda:	e9 cd 00 00 00       	jmp    c0010dac <sys_timeouts_mbox_fetch+0xf8>
c0010cdf:	90                   	nop
c0010ce0:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010ce5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ce8:	85 c0                	test   eax,eax
c0010cea:	74 24                	je     c0010d10 <sys_timeouts_mbox_fetch+0x5c>
c0010cec:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010cf1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cf4:	83 ec 04             	sub    esp,0x4
c0010cf7:	50                   	push   eax
c0010cf8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010cfc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010d00:	e8 27 00 ff ff       	call   c0000d2c <sys_arch_mbox_fetch>
c0010d05:	83 c4 10             	add    esp,0x10
c0010d08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d0c:	eb 0a                	jmp    c0010d18 <sys_timeouts_mbox_fetch+0x64>
c0010d0e:	66 90                	xchg   ax,ax
c0010d10:	c7 44 24 0c ff ff ff ff 	mov    DWORD PTR [esp+0xc],0xffffffff
c0010d18:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c0010d1d:	75 5d                	jne    c0010d7c <sys_timeouts_mbox_fetch+0xc8>
c0010d1f:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d24:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d2e:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010d33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d37:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010d3a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d42:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010d45:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d48:	83 ec 08             	sub    esp,0x8
c0010d4b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010d4f:	6a 0b                	push   0xb
c0010d51:	e8 4a 6d ff ff       	call   c0007aa0 <memp_free>
c0010d56:	83 c4 10             	add    esp,0x10
c0010d59:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0010d5e:	0f 84 54 ff ff ff    	je     c0010cb8 <sys_timeouts_mbox_fetch+0x4>
c0010d64:	83 ec 0c             	sub    esp,0xc
c0010d67:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010d6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010d6f:	ff d0                	call   eax
c0010d71:	83 c4 10             	add    esp,0x10
c0010d74:	e9 3f ff ff ff       	jmp    c0010cb8 <sys_timeouts_mbox_fetch+0x4>
c0010d79:	8d 76 00             	lea    esi,[esi+0x0]
c0010d7c:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d81:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d84:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0010d88:	73 16                	jae    c0010da0 <sys_timeouts_mbox_fetch+0xec>
c0010d8a:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d8f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010d92:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d97:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010d9b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010d9e:	eb 0c                	jmp    c0010dac <sys_timeouts_mbox_fetch+0xf8>
c0010da0:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010da5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010dac:	90                   	nop
c0010dad:	83 c4 1c             	add    esp,0x1c
c0010db0:	c3                   	ret    
c0010db1:	66 90                	xchg   ax,ax
c0010db3:	90                   	nop

c0010db4 <udp_input>:
c0010db4:	53                   	push   ebx
c0010db5:	83 ec 28             	sub    esp,0x28
c0010db8:	66 a1 9a 67 03 c0    	mov    ax,ds:0xc003679a
c0010dbe:	83 c0 01             	add    eax,0x1
c0010dc1:	66 a3 9a 67 03 c0    	mov    ds:0xc003679a,ax
c0010dc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010dcb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010dd2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010dd6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010dd9:	0f b7 d8             	movzx  ebx,ax
c0010ddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010de0:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010de3:	0f b7 c0             	movzx  eax,ax
c0010de6:	83 ec 0c             	sub    esp,0xc
c0010de9:	50                   	push   eax
c0010dea:	e8 f9 fd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010def:	83 c4 10             	add    esp,0x10
c0010df2:	0f b7 c0             	movzx  eax,ax
c0010df5:	c1 e8 08             	shr    eax,0x8
c0010df8:	0f b7 c0             	movzx  eax,ax
c0010dfb:	83 e0 0f             	and    eax,0xf
c0010dfe:	83 c0 02             	add    eax,0x2
c0010e01:	c1 e0 02             	shl    eax,0x2
c0010e04:	39 c3                	cmp    ebx,eax
c0010e06:	7c 3c                	jl     c0010e44 <udp_input+0x90>
c0010e08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010e0f:	0f b7 c0             	movzx  eax,ax
c0010e12:	83 ec 0c             	sub    esp,0xc
c0010e15:	50                   	push   eax
c0010e16:	e8 cd fd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010e1b:	83 c4 10             	add    esp,0x10
c0010e1e:	0f b7 c0             	movzx  eax,ax
c0010e21:	c1 e8 08             	shr    eax,0x8
c0010e24:	83 e0 0f             	and    eax,0xf
c0010e27:	c1 e0 02             	shl    eax,0x2
c0010e2a:	f7 d8                	neg    eax
c0010e2c:	98                   	cwde   
c0010e2d:	83 ec 08             	sub    esp,0x8
c0010e30:	50                   	push   eax
c0010e31:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010e35:	e8 86 73 ff ff       	call   c00081c0 <pbuf_header>
c0010e3a:	83 c4 10             	add    esp,0x10
c0010e3d:	0f b6 c0             	movzx  eax,al
c0010e40:	85 c0                	test   eax,eax
c0010e42:	74 34                	je     c0010e78 <udp_input+0xc4>
c0010e44:	66 a1 a2 67 03 c0    	mov    ax,ds:0xc00367a2
c0010e4a:	83 c0 01             	add    eax,0x1
c0010e4d:	66 a3 a2 67 03 c0    	mov    ds:0xc00367a2,ax
c0010e53:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0010e59:	83 c0 01             	add    eax,0x1
c0010e5c:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0010e62:	83 ec 0c             	sub    esp,0xc
c0010e65:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010e69:	e8 ee 74 ff ff       	call   c000835c <pbuf_free>
c0010e6e:	83 c4 10             	add    esp,0x10
c0010e71:	e9 aa 03 00 00       	jmp    c0011220 <udp_input+0x46c>
c0010e76:	66 90                	xchg   ax,ax
c0010e78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010e7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e83:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0010e88:	83 ec 08             	sub    esp,0x8
c0010e8b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010e8f:	50                   	push   eax
c0010e90:	e8 bb 2f 00 00       	call   c0013e50 <ip4_addr_isbroadcast>
c0010e95:	83 c4 10             	add    esp,0x10
c0010e98:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0010e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ea0:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010ea3:	0f b7 c0             	movzx  eax,ax
c0010ea6:	83 ec 0c             	sub    esp,0xc
c0010ea9:	50                   	push   eax
c0010eaa:	e8 39 fd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010eaf:	83 c4 10             	add    esp,0x10
c0010eb2:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0010eb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ebb:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0010ebf:	0f b7 c0             	movzx  eax,ax
c0010ec2:	83 ec 0c             	sub    esp,0xc
c0010ec5:	50                   	push   eax
c0010ec6:	e8 1d fd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010ecb:	83 c4 10             	add    esp,0x10
c0010ece:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c0010ed3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0010edb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0010ee0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010ee8:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0010eed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010ef1:	e9 0a 01 00 00       	jmp    c0011000 <udp_input+0x24c>
c0010ef6:	66 90                	xchg   ax,ax
c0010ef8:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0010efd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f01:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0010f05:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c0010f0a:	0f b7 c0             	movzx  eax,ax
c0010f0d:	39 c2                	cmp    edx,eax
c0010f0f:	75 57                	jne    c0010f68 <udp_input+0x1b4>
c0010f11:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0010f16:	85 c0                	test   eax,eax
c0010f18:	75 12                	jne    c0010f2c <udp_input+0x178>
c0010f1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f1e:	85 c0                	test   eax,eax
c0010f20:	74 22                	je     c0010f44 <udp_input+0x190>
c0010f22:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f26:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f28:	85 c0                	test   eax,eax
c0010f2a:	74 18                	je     c0010f44 <udp_input+0x190>
c0010f2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f30:	8b 10                	mov    edx,DWORD PTR [eax]
c0010f32:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0010f37:	39 c2                	cmp    edx,eax
c0010f39:	74 09                	je     c0010f44 <udp_input+0x190>
c0010f3b:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0010f40:	85 c0                	test   eax,eax
c0010f42:	74 24                	je     c0010f68 <udp_input+0x1b4>
c0010f44:	c6 44 24 13 01       	mov    BYTE PTR [esp+0x13],0x1
c0010f49:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010f4e:	75 18                	jne    c0010f68 <udp_input+0x1b4>
c0010f50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f54:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0010f57:	0f b6 c0             	movzx  eax,al
c0010f5a:	83 e0 04             	and    eax,0x4
c0010f5d:	75 09                	jne    c0010f68 <udp_input+0x1b4>
c0010f5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f63:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010f67:	90                   	nop
c0010f68:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0010f6d:	85 c0                	test   eax,eax
c0010f6f:	74 7b                	je     c0010fec <udp_input+0x238>
c0010f71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f75:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010f78:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0010f7d:	0f b7 c0             	movzx  eax,ax
c0010f80:	39 c2                	cmp    edx,eax
c0010f82:	75 68                	jne    c0010fec <udp_input+0x238>
c0010f84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f88:	83 c0 04             	add    eax,0x4
c0010f8b:	74 1b                	je     c0010fa8 <udp_input+0x1f4>
c0010f8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f94:	85 c0                	test   eax,eax
c0010f96:	74 10                	je     c0010fa8 <udp_input+0x1f4>
c0010f98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f9c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010f9f:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c0010fa4:	39 c2                	cmp    edx,eax
c0010fa6:	75 44                	jne    c0010fec <udp_input+0x238>
c0010fa8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0010fad:	74 29                	je     c0010fd8 <udp_input+0x224>
c0010faf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fb3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010fb6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010fba:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010fbd:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c0010fc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fc7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010fca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fce:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c0010fd3:	eb 37                	jmp    c001100c <udp_input+0x258>
c0010fd5:	8d 76 00             	lea    esi,[esi+0x0]
c0010fd8:	66 a1 ae 67 03 c0    	mov    ax,ds:0xc00367ae
c0010fde:	83 c0 01             	add    eax,0x1
c0010fe1:	66 a3 ae 67 03 c0    	mov    ds:0xc00367ae,ax
c0010fe7:	eb 23                	jmp    c001100c <udp_input+0x258>
c0010fe9:	8d 76 00             	lea    esi,[esi+0x0]
c0010fec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010ff4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ff8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010ffb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010fff:	90                   	nop
c0011000:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011005:	0f 85 ed fe ff ff    	jne    c0010ef8 <udp_input+0x144>
c001100b:	90                   	nop
c001100c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011011:	75 09                	jne    c001101c <udp_input+0x268>
c0011013:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011017:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001101b:	90                   	nop
c001101c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011021:	75 15                	jne    c0011038 <udp_input+0x284>
c0011023:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011027:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001102a:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c001102f:	39 c2                	cmp    edx,eax
c0011031:	0f 85 d9 01 00 00    	jne    c0011210 <udp_input+0x45c>
c0011037:	90                   	nop
c0011038:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001103c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0011040:	0f b7 c0             	movzx  eax,ax
c0011043:	85 c0                	test   eax,eax
c0011045:	74 61                	je     c00110a8 <udp_input+0x2f4>
c0011047:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001104b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001104e:	0f b7 c0             	movzx  eax,ax
c0011051:	83 ec 0c             	sub    esp,0xc
c0011054:	50                   	push   eax
c0011055:	6a 11                	push   0x11
c0011057:	68 98 68 03 c0       	push   0xc0036898
c001105c:	68 90 68 03 c0       	push   0xc0036890
c0011061:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011065:	e8 0e 21 00 00       	call   c0013178 <inet_chksum_pseudo>
c001106a:	83 c4 20             	add    esp,0x20
c001106d:	0f b7 c0             	movzx  eax,ax
c0011070:	85 c0                	test   eax,eax
c0011072:	74 34                	je     c00110a8 <udp_input+0x2f4>
c0011074:	66 a1 a0 67 03 c0    	mov    ax,ds:0xc00367a0
c001107a:	83 c0 01             	add    eax,0x1
c001107d:	66 a3 a0 67 03 c0    	mov    ds:0xc00367a0,ax
c0011083:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0011089:	83 c0 01             	add    eax,0x1
c001108c:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0011092:	83 ec 0c             	sub    esp,0xc
c0011095:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011099:	e8 be 72 ff ff       	call   c000835c <pbuf_free>
c001109e:	83 c4 10             	add    esp,0x10
c00110a1:	e9 7a 01 00 00       	jmp    c0011220 <udp_input+0x46c>
c00110a6:	66 90                	xchg   ax,ax
c00110a8:	83 ec 08             	sub    esp,0x8
c00110ab:	6a f8                	push   0xfffffff8
c00110ad:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00110b1:	e8 0a 71 ff ff       	call   c00081c0 <pbuf_header>
c00110b6:	83 c4 10             	add    esp,0x10
c00110b9:	0f b6 c0             	movzx  eax,al
c00110bc:	85 c0                	test   eax,eax
c00110be:	74 38                	je     c00110f8 <udp_input+0x344>
c00110c0:	83 ec 08             	sub    esp,0x8
c00110c3:	68 29 0a 03 c0       	push   0xc0030a29
c00110c8:	68 c6 fa 02 c0       	push   0xc002fac6
c00110cd:	e8 c2 ea 00 00       	call   c001fb94 <CPrintf>
c00110d2:	83 c4 10             	add    esp,0x10
c00110d5:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c00110db:	83 c0 01             	add    eax,0x1
c00110de:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c00110e4:	83 ec 0c             	sub    esp,0xc
c00110e7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00110eb:	e8 6c 72 ff ff       	call   c000835c <pbuf_free>
c00110f0:	83 c4 10             	add    esp,0x10
c00110f3:	e9 28 01 00 00       	jmp    c0011220 <udp_input+0x46c>
c00110f8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00110fd:	74 51                	je     c0011150 <udp_input+0x39c>
c00110ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011103:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011106:	85 c0                	test   eax,eax
c0011108:	74 32                	je     c001113c <udp_input+0x388>
c001110a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001110e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011111:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c0011116:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001111a:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001111d:	83 ec 0c             	sub    esp,0xc
c0011120:	51                   	push   ecx
c0011121:	68 90 68 03 c0       	push   0xc0036890
c0011126:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001112a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001112e:	52                   	push   edx
c001112f:	ff d0                	call   eax
c0011131:	83 c4 20             	add    esp,0x20
c0011134:	e9 e7 00 00 00       	jmp    c0011220 <udp_input+0x46c>
c0011139:	8d 76 00             	lea    esi,[esi+0x0]
c001113c:	83 ec 0c             	sub    esp,0xc
c001113f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011143:	e8 14 72 ff ff       	call   c000835c <pbuf_free>
c0011148:	83 c4 10             	add    esp,0x10
c001114b:	e9 d0 00 00 00       	jmp    c0011220 <udp_input+0x46c>
c0011150:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0011155:	85 c0                	test   eax,eax
c0011157:	0f 85 83 00 00 00    	jne    c00111e0 <udp_input+0x42c>
c001115d:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0011162:	25 f0 00 00 00       	and    eax,0xf0
c0011167:	3d e0 00 00 00       	cmp    eax,0xe0
c001116c:	74 72                	je     c00111e0 <udp_input+0x42c>
c001116e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011172:	66 8b 00             	mov    ax,WORD PTR [eax]
c0011175:	0f b7 c0             	movzx  eax,ax
c0011178:	83 ec 0c             	sub    esp,0xc
c001117b:	50                   	push   eax
c001117c:	e8 67 fa fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0011181:	83 c4 10             	add    esp,0x10
c0011184:	0f b7 c0             	movzx  eax,ax
c0011187:	c1 e8 08             	shr    eax,0x8
c001118a:	0f b7 c0             	movzx  eax,ax
c001118d:	83 e0 0f             	and    eax,0xf
c0011190:	83 c0 02             	add    eax,0x2
c0011193:	c1 e0 02             	shl    eax,0x2
c0011196:	98                   	cwde   
c0011197:	83 ec 08             	sub    esp,0x8
c001119a:	50                   	push   eax
c001119b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001119f:	e8 1c 70 ff ff       	call   c00081c0 <pbuf_header>
c00111a4:	83 c4 10             	add    esp,0x10
c00111a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00111ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111ae:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00111b2:	74 18                	je     c00111cc <udp_input+0x418>
c00111b4:	83 ec 08             	sub    esp,0x8
c00111b7:	68 3d 0a 03 c0       	push   0xc0030a3d
c00111bc:	68 c6 fa 02 c0       	push   0xc002fac6
c00111c1:	e8 ce e9 00 00       	call   c001fb94 <CPrintf>
c00111c6:	83 c4 10             	add    esp,0x10
c00111c9:	8d 76 00             	lea    esi,[esi+0x0]
c00111cc:	83 ec 08             	sub    esp,0x8
c00111cf:	6a 03                	push   0x3
c00111d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111d5:	e8 5e 1e 00 00       	call   c0013038 <icmp_dest_unreach>
c00111da:	83 c4 10             	add    esp,0x10
c00111dd:	8d 76 00             	lea    esi,[esi+0x0]
c00111e0:	66 a1 a8 67 03 c0    	mov    ax,ds:0xc00367a8
c00111e6:	83 c0 01             	add    eax,0x1
c00111e9:	66 a3 a8 67 03 c0    	mov    ds:0xc00367a8,ax
c00111ef:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c00111f5:	83 c0 01             	add    eax,0x1
c00111f8:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c00111fe:	83 ec 0c             	sub    esp,0xc
c0011201:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011205:	e8 52 71 ff ff       	call   c000835c <pbuf_free>
c001120a:	83 c4 10             	add    esp,0x10
c001120d:	eb 11                	jmp    c0011220 <udp_input+0x46c>
c001120f:	90                   	nop
c0011210:	83 ec 0c             	sub    esp,0xc
c0011213:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011217:	e8 40 71 ff ff       	call   c000835c <pbuf_free>
c001121c:	83 c4 10             	add    esp,0x10
c001121f:	90                   	nop
c0011220:	90                   	nop
c0011221:	83 c4 28             	add    esp,0x28
c0011224:	5b                   	pop    ebx
c0011225:	c3                   	ret    
c0011226:	66 90                	xchg   ax,ax

c0011228 <udp_bind>:
c0011228:	83 ec 2c             	sub    esp,0x2c
c001122b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001122f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011234:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c0011239:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c001123e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011242:	e9 8d 00 00 00       	jmp    c00112d4 <udp_bind+0xac>
c0011247:	90                   	nop
c0011248:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001124c:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0011250:	75 26                	jne    c0011278 <udp_bind+0x50>
c0011252:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0011257:	85 c0                	test   eax,eax
c0011259:	74 15                	je     c0011270 <udp_bind+0x48>
c001125b:	83 ec 08             	sub    esp,0x8
c001125e:	68 51 0a 03 c0       	push   0xc0030a51
c0011263:	68 c6 fa 02 c0       	push   0xc002fac6
c0011268:	e8 27 e9 00 00       	call   c001fb94 <CPrintf>
c001126d:	83 c4 10             	add    esp,0x10
c0011270:	c6 44 24 1b 01       	mov    BYTE PTR [esp+0x1b],0x1
c0011275:	eb 51                	jmp    c00112c8 <udp_bind+0xa0>
c0011277:	90                   	nop
c0011278:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001127c:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011280:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0011285:	0f b7 c0             	movzx  eax,ax
c0011288:	39 c2                	cmp    edx,eax
c001128a:	75 3c                	jne    c00112c8 <udp_bind+0xa0>
c001128c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011290:	85 c0                	test   eax,eax
c0011292:	74 2c                	je     c00112c0 <udp_bind+0x98>
c0011294:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011298:	8b 00                	mov    eax,DWORD PTR [eax]
c001129a:	85 c0                	test   eax,eax
c001129c:	74 22                	je     c00112c0 <udp_bind+0x98>
c001129e:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00112a3:	74 1b                	je     c00112c0 <udp_bind+0x98>
c00112a5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00112a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00112ab:	85 c0                	test   eax,eax
c00112ad:	74 11                	je     c00112c0 <udp_bind+0x98>
c00112af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00112b3:	8b 10                	mov    edx,DWORD PTR [eax]
c00112b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00112b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00112bb:	39 c2                	cmp    edx,eax
c00112bd:	75 09                	jne    c00112c8 <udp_bind+0xa0>
c00112bf:	90                   	nop
c00112c0:	b0 f8                	mov    al,0xf8
c00112c2:	e9 dd 00 00 00       	jmp    c00113a4 <udp_bind+0x17c>
c00112c7:	90                   	nop
c00112c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00112cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00112cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00112d3:	90                   	nop
c00112d4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00112d9:	0f 85 69 ff ff ff    	jne    c0011248 <udp_bind+0x20>
c00112df:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00112e4:	74 0a                	je     c00112f0 <udp_bind+0xc8>
c00112e6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00112ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00112ec:	eb 0a                	jmp    c00112f8 <udp_bind+0xd0>
c00112ee:	66 90                	xchg   ax,ax
c00112f0:	b8 00 00 00 00       	mov    eax,0x0
c00112f5:	8d 76 00             	lea    esi,[esi+0x0]
c00112f8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00112fc:	89 02                	mov    DWORD PTR [edx],eax
c00112fe:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011303:	85 c0                	test   eax,eax
c0011305:	75 6d                	jne    c0011374 <udp_bind+0x14c>
c0011307:	66 c7 44 24 0c 00 c0 	mov    WORD PTR [esp+0xc],0xc000
c001130e:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011313:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011317:	eb 3b                	jmp    c0011354 <udp_bind+0x12c>
c0011319:	8d 76 00             	lea    esi,[esi+0x0]
c001131c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011320:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011324:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0011329:	0f b7 c0             	movzx  eax,ax
c001132c:	39 c2                	cmp    edx,eax
c001132e:	75 18                	jne    c0011348 <udp_bind+0x120>
c0011330:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011334:	83 c0 01             	add    eax,0x1
c0011337:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001133c:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011341:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011345:	eb 0d                	jmp    c0011354 <udp_bind+0x12c>
c0011347:	90                   	nop
c0011348:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001134c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001134f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011353:	90                   	nop
c0011354:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011359:	74 0d                	je     c0011368 <udp_bind+0x140>
c001135b:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011360:	3d ff ff 00 00       	cmp    eax,0xffff
c0011365:	75 b5                	jne    c001131c <udp_bind+0xf4>
c0011367:	90                   	nop
c0011368:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001136d:	74 05                	je     c0011374 <udp_bind+0x14c>
c001136f:	b0 f8                	mov    al,0xf8
c0011371:	eb 31                	jmp    c00113a4 <udp_bind+0x17c>
c0011373:	90                   	nop
c0011374:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011378:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001137c:	66 89 42 12          	mov    WORD PTR [edx+0x12],ax
c0011380:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0011385:	85 c0                	test   eax,eax
c0011387:	75 17                	jne    c00113a0 <udp_bind+0x178>
c0011389:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c001138f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011393:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011396:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001139a:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c001139f:	90                   	nop
c00113a0:	b0 00                	mov    al,0x0
c00113a2:	66 90                	xchg   ax,ax
c00113a4:	83 c4 2c             	add    esp,0x2c
c00113a7:	c3                   	ret    

c00113a8 <udp_sendto_if>:
c00113a8:	83 ec 2c             	sub    esp,0x2c
c00113ab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00113af:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00113b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113b8:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00113bc:	0f b7 c0             	movzx  eax,ax
c00113bf:	85 c0                	test   eax,eax
c00113c1:	75 39                	jne    c00113fc <udp_sendto_if+0x54>
c00113c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113c7:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00113cb:	0f b7 d0             	movzx  edx,ax
c00113ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113d2:	83 ec 04             	sub    esp,0x4
c00113d5:	52                   	push   edx
c00113d6:	50                   	push   eax
c00113d7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00113db:	e8 48 fe ff ff       	call   c0011228 <udp_bind>
c00113e0:	83 c4 10             	add    esp,0x10
c00113e3:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00113e7:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c00113ec:	85 c0                	test   eax,eax
c00113ee:	74 0c                	je     c00113fc <udp_sendto_if+0x54>
c00113f0:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c00113f4:	e9 2b 02 00 00       	jmp    c0011624 <udp_sendto_if+0x27c>
c00113f9:	8d 76 00             	lea    esi,[esi+0x0]
c00113fc:	83 ec 08             	sub    esp,0x8
c00113ff:	6a 08                	push   0x8
c0011401:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011405:	e8 b6 6d ff ff       	call   c00081c0 <pbuf_header>
c001140a:	83 c4 10             	add    esp,0x10
c001140d:	0f b6 c0             	movzx  eax,al
c0011410:	85 c0                	test   eax,eax
c0011412:	74 48                	je     c001145c <udp_sendto_if+0xb4>
c0011414:	83 ec 04             	sub    esp,0x4
c0011417:	6a 00                	push   0x0
c0011419:	6a 08                	push   0x8
c001141b:	6a 01                	push   0x1
c001141d:	e8 12 71 ff ff       	call   c0008534 <pbuf_alloc>
c0011422:	83 c4 10             	add    esp,0x10
c0011425:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011429:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001142e:	75 08                	jne    c0011438 <udp_sendto_if+0x90>
c0011430:	b0 ff                	mov    al,0xff
c0011432:	e9 ed 01 00 00       	jmp    c0011624 <udp_sendto_if+0x27c>
c0011437:	90                   	nop
c0011438:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001143c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001143f:	0f b7 c0             	movzx  eax,ax
c0011442:	85 c0                	test   eax,eax
c0011444:	74 1e                	je     c0011464 <udp_sendto_if+0xbc>
c0011446:	83 ec 08             	sub    esp,0x8
c0011449:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001144d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011451:	e8 1e 78 ff ff       	call   c0008c74 <pbuf_chain>
c0011456:	83 c4 10             	add    esp,0x10
c0011459:	eb 09                	jmp    c0011464 <udp_sendto_if+0xbc>
c001145b:	90                   	nop
c001145c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011460:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011464:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011468:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001146c:	0f b7 c0             	movzx  eax,ax
c001146f:	83 f8 07             	cmp    eax,0x7
c0011472:	77 18                	ja     c001148c <udp_sendto_if+0xe4>
c0011474:	83 ec 08             	sub    esp,0x8
c0011477:	68 60 0a 03 c0       	push   0xc0030a60
c001147c:	68 c6 fa 02 c0       	push   0xc002fac6
c0011481:	e8 0e e7 00 00       	call   c001fb94 <CPrintf>
c0011486:	83 c4 10             	add    esp,0x10
c0011489:	8d 76 00             	lea    esi,[esi+0x0]
c001148c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011490:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011493:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011497:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001149b:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c001149f:	0f b7 c0             	movzx  eax,ax
c00114a2:	83 ec 0c             	sub    esp,0xc
c00114a5:	50                   	push   eax
c00114a6:	e8 3d f7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00114ab:	83 c4 10             	add    esp,0x10
c00114ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00114b2:	66 89 02             	mov    WORD PTR [edx],ax
c00114b5:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00114ba:	83 ec 0c             	sub    esp,0xc
c00114bd:	50                   	push   eax
c00114be:	e8 25 f7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00114c3:	83 c4 10             	add    esp,0x10
c00114c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00114ca:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00114ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114d2:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c00114d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00114dc:	85 c0                	test   eax,eax
c00114de:	74 0c                	je     c00114ec <udp_sendto_if+0x144>
c00114e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00114e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00114e6:	85 c0                	test   eax,eax
c00114e8:	75 12                	jne    c00114fc <udp_sendto_if+0x154>
c00114ea:	66 90                	xchg   ax,ax
c00114ec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00114f0:	83 c0 04             	add    eax,0x4
c00114f3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114f7:	eb 47                	jmp    c0011540 <udp_sendto_if+0x198>
c00114f9:	8d 76 00             	lea    esi,[esi+0x0]
c00114fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011500:	8b 10                	mov    edx,DWORD PTR [eax]
c0011502:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011506:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011509:	39 c2                	cmp    edx,eax
c001150b:	74 2b                	je     c0011538 <udp_sendto_if+0x190>
c001150d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011511:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0011515:	74 19                	je     c0011530 <udp_sendto_if+0x188>
c0011517:	83 ec 0c             	sub    esp,0xc
c001151a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001151e:	e8 39 6e ff ff       	call   c000835c <pbuf_free>
c0011523:	83 c4 10             	add    esp,0x10
c0011526:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001152e:	66 90                	xchg   ax,ax
c0011530:	b0 fa                	mov    al,0xfa
c0011532:	e9 ed 00 00 00       	jmp    c0011624 <udp_sendto_if+0x27c>
c0011537:	90                   	nop
c0011538:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001153c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011540:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011544:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011547:	0f b7 c0             	movzx  eax,ax
c001154a:	83 ec 0c             	sub    esp,0xc
c001154d:	50                   	push   eax
c001154e:	e8 95 f6 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0011553:	83 c4 10             	add    esp,0x10
c0011556:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001155a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001155e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011562:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0011565:	0f b6 c0             	movzx  eax,al
c0011568:	83 e0 01             	and    eax,0x1
c001156b:	75 4b                	jne    c00115b8 <udp_sendto_if+0x210>
c001156d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011571:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011574:	0f b7 c0             	movzx  eax,ax
c0011577:	83 ec 0c             	sub    esp,0xc
c001157a:	50                   	push   eax
c001157b:	6a 11                	push   0x11
c001157d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011581:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011585:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011589:	e8 ea 1b 00 00       	call   c0013178 <inet_chksum_pseudo>
c001158e:	83 c4 20             	add    esp,0x20
c0011591:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0011596:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c001159b:	85 c0                	test   eax,eax
c001159d:	75 09                	jne    c00115a8 <udp_sendto_if+0x200>
c001159f:	66 c7 44 24 16 ff ff 	mov    WORD PTR [esp+0x16],0xffff
c00115a6:	66 90                	xchg   ax,ax
c00115a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00115ac:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00115b1:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00115b5:	8d 76 00             	lea    esi,[esi+0x0]
c00115b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115bc:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c00115bf:	0f b6 d0             	movzx  edx,al
c00115c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115c6:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c00115c9:	0f b6 c0             	movzx  eax,al
c00115cc:	83 ec 04             	sub    esp,0x4
c00115cf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00115d3:	6a 11                	push   0x11
c00115d5:	52                   	push   edx
c00115d6:	50                   	push   eax
c00115d7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00115db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00115df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00115e3:	e8 f4 24 00 00       	call   c0013adc <ip_output_if>
c00115e8:	83 c4 20             	add    esp,0x20
c00115eb:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00115ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00115f3:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00115f7:	74 17                	je     c0011610 <udp_sendto_if+0x268>
c00115f9:	83 ec 0c             	sub    esp,0xc
c00115fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011600:	e8 57 6d ff ff       	call   c000835c <pbuf_free>
c0011605:	83 c4 10             	add    esp,0x10
c0011608:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011610:	66 a1 98 67 03 c0    	mov    ax,ds:0xc0036798
c0011616:	83 c0 01             	add    eax,0x1
c0011619:	66 a3 98 67 03 c0    	mov    ds:0xc0036798,ax
c001161f:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0011623:	90                   	nop
c0011624:	83 c4 2c             	add    esp,0x2c
c0011627:	c3                   	ret    

c0011628 <udp_sendto>:
c0011628:	83 ec 2c             	sub    esp,0x2c
c001162b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001162f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011634:	83 ec 0c             	sub    esp,0xc
c0011637:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001163b:	e8 c4 1f 00 00       	call   c0013604 <ip_route>
c0011640:	83 c4 10             	add    esp,0x10
c0011643:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011647:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001164c:	75 16                	jne    c0011664 <udp_sendto+0x3c>
c001164e:	66 a1 a6 67 03 c0    	mov    ax,ds:0xc00367a6
c0011654:	83 c0 01             	add    eax,0x1
c0011657:	66 a3 a6 67 03 c0    	mov    ds:0xc00367a6,ax
c001165d:	b0 fc                	mov    al,0xfc
c001165f:	eb 27                	jmp    c0011688 <udp_sendto+0x60>
c0011661:	8d 76 00             	lea    esi,[esi+0x0]
c0011664:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011669:	83 ec 0c             	sub    esp,0xc
c001166c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011670:	50                   	push   eax
c0011671:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011675:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011679:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001167d:	e8 26 fd ff ff       	call   c00113a8 <udp_sendto_if>
c0011682:	83 c4 20             	add    esp,0x20
c0011685:	8d 76 00             	lea    esi,[esi+0x0]
c0011688:	83 c4 2c             	add    esp,0x2c
c001168b:	c3                   	ret    

c001168c <udp_send>:
c001168c:	83 ec 0c             	sub    esp,0xc
c001168f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011693:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0011696:	0f b7 c0             	movzx  eax,ax
c0011699:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001169d:	83 c2 04             	add    edx,0x4
c00116a0:	50                   	push   eax
c00116a1:	52                   	push   edx
c00116a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116aa:	e8 79 ff ff ff       	call   c0011628 <udp_sendto>
c00116af:	83 c4 10             	add    esp,0x10
c00116b2:	83 c4 0c             	add    esp,0xc
c00116b5:	c3                   	ret    
c00116b6:	66 90                	xchg   ax,ax

c00116b8 <udp_connect>:
c00116b8:	83 ec 2c             	sub    esp,0x2c
c00116bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00116bf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00116c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116c8:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00116cc:	0f b7 c0             	movzx  eax,ax
c00116cf:	85 c0                	test   eax,eax
c00116d1:	75 39                	jne    c001170c <udp_connect+0x54>
c00116d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116d7:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00116db:	0f b7 d0             	movzx  edx,ax
c00116de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116e2:	83 ec 04             	sub    esp,0x4
c00116e5:	52                   	push   edx
c00116e6:	50                   	push   eax
c00116e7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00116eb:	e8 38 fb ff ff       	call   c0011228 <udp_bind>
c00116f0:	83 c4 10             	add    esp,0x10
c00116f3:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00116f7:	0f be 44 24 1b       	movsx  eax,BYTE PTR [esp+0x1b]
c00116fc:	85 c0                	test   eax,eax
c00116fe:	74 0c                	je     c001170c <udp_connect+0x54>
c0011700:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0011704:	e9 8b 00 00 00       	jmp    c0011794 <udp_connect+0xdc>
c0011709:	8d 76 00             	lea    esi,[esi+0x0]
c001170c:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011711:	74 09                	je     c001171c <udp_connect+0x64>
c0011713:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011717:	8b 00                	mov    eax,DWORD PTR [eax]
c0011719:	eb 09                	jmp    c0011724 <udp_connect+0x6c>
c001171b:	90                   	nop
c001171c:	b8 00 00 00 00       	mov    eax,0x0
c0011721:	8d 76 00             	lea    esi,[esi+0x0]
c0011724:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011728:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001172b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001172f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011733:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0011737:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001173b:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c001173e:	83 c8 04             	or     eax,0x4
c0011741:	88 c2                	mov    dl,al
c0011743:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011747:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c001174a:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c001174f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011753:	eb 1f                	jmp    c0011774 <udp_connect+0xbc>
c0011755:	8d 76 00             	lea    esi,[esi+0x0]
c0011758:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001175c:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0011760:	75 06                	jne    c0011768 <udp_connect+0xb0>
c0011762:	b0 00                	mov    al,0x0
c0011764:	eb 2e                	jmp    c0011794 <udp_connect+0xdc>
c0011766:	66 90                	xchg   ax,ax
c0011768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001176c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001176f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011773:	90                   	nop
c0011774:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011779:	75 dd                	jne    c0011758 <udp_connect+0xa0>
c001177b:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c0011781:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011785:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011788:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001178c:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c0011791:	b0 00                	mov    al,0x0
c0011793:	90                   	nop
c0011794:	83 c4 2c             	add    esp,0x2c
c0011797:	c3                   	ret    

c0011798 <udp_disconnect>:
c0011798:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001179c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00117a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117a7:	66 c7 40 14 00 00    	mov    WORD PTR [eax+0x14],0x0
c00117ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117b1:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00117b4:	83 e0 fb             	and    eax,0xfffffffb
c00117b7:	88 c2                	mov    dl,al
c00117b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117bd:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c00117c0:	90                   	nop
c00117c1:	c3                   	ret    
c00117c2:	66 90                	xchg   ax,ax

c00117c4 <udp_recv>:
c00117c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00117cc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00117cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00117d7:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00117da:	90                   	nop
c00117db:	c3                   	ret    

c00117dc <udp_remove>:
c00117dc:	83 ec 1c             	sub    esp,0x1c
c00117df:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00117e4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00117e8:	75 12                	jne    c00117fc <udp_remove+0x20>
c00117ea:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00117ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00117f2:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c00117f7:	eb 4b                	jmp    c0011844 <udp_remove+0x68>
c00117f9:	8d 76 00             	lea    esi,[esi+0x0]
c00117fc:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011801:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011805:	eb 35                	jmp    c001183c <udp_remove+0x60>
c0011807:	90                   	nop
c0011808:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001180c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001180f:	85 c0                	test   eax,eax
c0011811:	74 1d                	je     c0011830 <udp_remove+0x54>
c0011813:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011817:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001181a:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c001181e:	75 10                	jne    c0011830 <udp_remove+0x54>
c0011820:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011824:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011827:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001182b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001182e:	66 90                	xchg   ax,ax
c0011830:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011834:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011837:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001183b:	90                   	nop
c001183c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0011841:	75 c5                	jne    c0011808 <udp_remove+0x2c>
c0011843:	90                   	nop
c0011844:	83 ec 08             	sub    esp,0x8
c0011847:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001184b:	6a 01                	push   0x1
c001184d:	e8 4e 62 ff ff       	call   c0007aa0 <memp_free>
c0011852:	83 c4 10             	add    esp,0x10
c0011855:	90                   	nop
c0011856:	83 c4 1c             	add    esp,0x1c
c0011859:	c3                   	ret    
c001185a:	66 90                	xchg   ax,ax

c001185c <udp_new>:
c001185c:	83 ec 1c             	sub    esp,0x1c
c001185f:	83 ec 0c             	sub    esp,0xc
c0011862:	6a 01                	push   0x1
c0011864:	e8 0b 61 ff ff       	call   c0007974 <memp_malloc>
c0011869:	83 c4 10             	add    esp,0x10
c001186c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011870:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0011875:	74 1d                	je     c0011894 <udp_new+0x38>
c0011877:	83 ec 04             	sub    esp,0x4
c001187a:	6a 20                	push   0x20
c001187c:	6a 00                	push   0x0
c001187e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011882:	e8 69 ec fe ff       	call   c00004f0 <memset>
c0011887:	83 c4 10             	add    esp,0x10
c001188a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001188e:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c0011892:	66 90                	xchg   ax,ax
c0011894:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011898:	83 c4 1c             	add    esp,0x1c
c001189b:	c3                   	ret    

c001189c <free_entry>:
c001189c:	83 ec 0c             	sub    esp,0xc
c001189f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118a3:	c1 e0 04             	shl    eax,0x4
c00118a6:	05 00 a9 03 c0       	add    eax,0xc003a900
c00118ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00118ad:	85 c0                	test   eax,eax
c00118af:	74 2f                	je     c00118e0 <free_entry+0x44>
c00118b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118b5:	c1 e0 04             	shl    eax,0x4
c00118b8:	05 00 a9 03 c0       	add    eax,0xc003a900
c00118bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00118bf:	83 ec 0c             	sub    esp,0xc
c00118c2:	50                   	push   eax
c00118c3:	e8 94 6a ff ff       	call   c000835c <pbuf_free>
c00118c8:	83 c4 10             	add    esp,0x10
c00118cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118cf:	c1 e0 04             	shl    eax,0x4
c00118d2:	05 00 a9 03 c0       	add    eax,0xc003a900
c00118d7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00118dd:	8d 76 00             	lea    esi,[esi+0x0]
c00118e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118e4:	c1 e0 04             	shl    eax,0x4
c00118e7:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00118ec:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00118ef:	90                   	nop
c00118f0:	83 c4 0c             	add    esp,0xc
c00118f3:	c3                   	ret    

c00118f4 <etharp_tmr>:
c00118f4:	83 ec 1c             	sub    esp,0x1c
c00118f7:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00118fc:	e9 a7 00 00 00       	jmp    c00119a8 <etharp_tmr+0xb4>
c0011901:	8d 76 00             	lea    esi,[esi+0x0]
c0011904:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011909:	c1 e0 04             	shl    eax,0x4
c001190c:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011911:	8a 00                	mov    al,BYTE PTR [eax]
c0011913:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0011917:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001191c:	85 c0                	test   eax,eax
c001191e:	74 7c                	je     c001199c <etharp_tmr+0xa8>
c0011920:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011925:	89 c2                	mov    edx,eax
c0011927:	c1 e2 04             	shl    edx,0x4
c001192a:	81 c2 0f a9 03 c0    	add    edx,0xc003a90f
c0011930:	8a 12                	mov    dl,BYTE PTR [edx]
c0011932:	83 c2 01             	add    edx,0x1
c0011935:	c1 e0 04             	shl    eax,0x4
c0011938:	05 0f a9 03 c0       	add    eax,0xc003a90f
c001193d:	88 10                	mov    BYTE PTR [eax],dl
c001193f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011944:	c1 e0 04             	shl    eax,0x4
c0011947:	05 0f a9 03 c0       	add    eax,0xc003a90f
c001194c:	8a 00                	mov    al,BYTE PTR [eax]
c001194e:	0f b6 c0             	movzx  eax,al
c0011951:	3d ef 00 00 00       	cmp    eax,0xef
c0011956:	77 30                	ja     c0011988 <etharp_tmr+0x94>
c0011958:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001195d:	c1 e0 04             	shl    eax,0x4
c0011960:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011965:	8a 00                	mov    al,BYTE PTR [eax]
c0011967:	0f b6 c0             	movzx  eax,al
c001196a:	83 f8 01             	cmp    eax,0x1
c001196d:	75 2d                	jne    c001199c <etharp_tmr+0xa8>
c001196f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011974:	c1 e0 04             	shl    eax,0x4
c0011977:	05 0f a9 03 c0       	add    eax,0xc003a90f
c001197c:	8a 00                	mov    al,BYTE PTR [eax]
c001197e:	0f b6 c0             	movzx  eax,al
c0011981:	83 f8 01             	cmp    eax,0x1
c0011984:	76 16                	jbe    c001199c <etharp_tmr+0xa8>
c0011986:	66 90                	xchg   ax,ax
c0011988:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001198d:	83 ec 0c             	sub    esp,0xc
c0011990:	50                   	push   eax
c0011991:	e8 06 ff ff ff       	call   c001189c <free_entry>
c0011996:	83 c4 10             	add    esp,0x10
c0011999:	8d 76 00             	lea    esi,[esi+0x0]
c001199c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00119a0:	83 c0 01             	add    eax,0x1
c00119a3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00119a7:	90                   	nop
c00119a8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00119ad:	83 f8 09             	cmp    eax,0x9
c00119b0:	0f 86 4e ff ff ff    	jbe    c0011904 <etharp_tmr+0x10>
c00119b6:	90                   	nop
c00119b7:	83 c4 1c             	add    esp,0x1c
c00119ba:	c3                   	ret    
c00119bb:	90                   	nop

c00119bc <find_entry>:
c00119bc:	83 ec 2c             	sub    esp,0x2c
c00119bf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119c3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00119c7:	c6 44 24 1f 0a       	mov    BYTE PTR [esp+0x1f],0xa
c00119cc:	c6 44 24 1e 0a       	mov    BYTE PTR [esp+0x1e],0xa
c00119d1:	c6 44 24 1d 0a       	mov    BYTE PTR [esp+0x1d],0xa
c00119d6:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c00119db:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c00119e0:	c6 44 24 1a 00       	mov    BYTE PTR [esp+0x1a],0x0
c00119e5:	c6 44 24 19 0a       	mov    BYTE PTR [esp+0x19],0xa
c00119ea:	c6 44 24 18 00       	mov    BYTE PTR [esp+0x18],0x0
c00119ef:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c00119f4:	e9 7f 01 00 00       	jmp    c0011b78 <find_entry+0x1bc>
c00119f9:	8d 76 00             	lea    esi,[esi+0x0]
c00119fc:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011a01:	c1 e0 04             	shl    eax,0x4
c0011a04:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011a09:	8a 00                	mov    al,BYTE PTR [eax]
c0011a0b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0011a0f:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011a14:	83 f8 0a             	cmp    eax,0xa
c0011a17:	75 17                	jne    c0011a30 <find_entry+0x74>
c0011a19:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011a1e:	85 c0                	test   eax,eax
c0011a20:	75 0e                	jne    c0011a30 <find_entry+0x74>
c0011a22:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011a26:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0011a2a:	e9 3d 01 00 00       	jmp    c0011b6c <find_entry+0x1b0>
c0011a2f:	90                   	nop
c0011a30:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011a35:	85 c0                	test   eax,eax
c0011a37:	0f 84 2f 01 00 00    	je     c0011b6c <find_entry+0x1b0>
c0011a3d:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011a42:	83 f8 01             	cmp    eax,0x1
c0011a45:	74 21                	je     c0011a68 <find_entry+0xac>
c0011a47:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011a4c:	83 f8 02             	cmp    eax,0x2
c0011a4f:	74 17                	je     c0011a68 <find_entry+0xac>
c0011a51:	83 ec 08             	sub    esp,0x8
c0011a54:	68 90 0a 03 c0       	push   0xc0030a90
c0011a59:	68 c6 fa 02 c0       	push   0xc002fac6
c0011a5e:	e8 31 e1 00 00       	call   c001fb94 <CPrintf>
c0011a63:	83 c4 10             	add    esp,0x10
c0011a66:	66 90                	xchg   ax,ax
c0011a68:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011a6d:	74 25                	je     c0011a94 <find_entry+0xd8>
c0011a6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011a73:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a75:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011a7a:	c1 e0 04             	shl    eax,0x4
c0011a7d:	05 04 a9 03 c0       	add    eax,0xc003a904
c0011a82:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a84:	39 c2                	cmp    edx,eax
c0011a86:	75 0c                	jne    c0011a94 <find_entry+0xd8>
c0011a88:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011a8c:	e9 53 02 00 00       	jmp    c0011ce4 <find_entry+0x328>
c0011a91:	8d 76 00             	lea    esi,[esi+0x0]
c0011a94:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011a99:	83 f8 01             	cmp    eax,0x1
c0011a9c:	0f 85 8a 00 00 00    	jne    c0011b2c <find_entry+0x170>
c0011aa2:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011aa7:	c1 e0 04             	shl    eax,0x4
c0011aaa:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011aaf:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ab1:	85 c0                	test   eax,eax
c0011ab3:	74 3f                	je     c0011af4 <find_entry+0x138>
c0011ab5:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011aba:	c1 e0 04             	shl    eax,0x4
c0011abd:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011ac2:	8a 00                	mov    al,BYTE PTR [eax]
c0011ac4:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0011ac9:	0f b6 c0             	movzx  eax,al
c0011acc:	39 c2                	cmp    edx,eax
c0011ace:	0f 87 98 00 00 00    	ja     c0011b6c <find_entry+0x1b0>
c0011ad4:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011ad8:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0011adc:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011ae1:	c1 e0 04             	shl    eax,0x4
c0011ae4:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011ae9:	8a 00                	mov    al,BYTE PTR [eax]
c0011aeb:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0011aef:	eb 7b                	jmp    c0011b6c <find_entry+0x1b0>
c0011af1:	8d 76 00             	lea    esi,[esi+0x0]
c0011af4:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011af9:	c1 e0 04             	shl    eax,0x4
c0011afc:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011b01:	8a 00                	mov    al,BYTE PTR [eax]
c0011b03:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011b08:	0f b6 c0             	movzx  eax,al
c0011b0b:	39 c2                	cmp    edx,eax
c0011b0d:	77 5d                	ja     c0011b6c <find_entry+0x1b0>
c0011b0f:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011b13:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011b17:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b1c:	c1 e0 04             	shl    eax,0x4
c0011b1f:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011b24:	8a 00                	mov    al,BYTE PTR [eax]
c0011b26:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0011b2a:	eb 40                	jmp    c0011b6c <find_entry+0x1b0>
c0011b2c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011b31:	83 f8 02             	cmp    eax,0x2
c0011b34:	75 36                	jne    c0011b6c <find_entry+0x1b0>
c0011b36:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b3b:	c1 e0 04             	shl    eax,0x4
c0011b3e:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011b43:	8a 00                	mov    al,BYTE PTR [eax]
c0011b45:	0f b6 54 24 1a       	movzx  edx,BYTE PTR [esp+0x1a]
c0011b4a:	0f b6 c0             	movzx  eax,al
c0011b4d:	39 c2                	cmp    edx,eax
c0011b4f:	77 1b                	ja     c0011b6c <find_entry+0x1b0>
c0011b51:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011b55:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0011b59:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b5e:	c1 e0 04             	shl    eax,0x4
c0011b61:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011b66:	8a 00                	mov    al,BYTE PTR [eax]
c0011b68:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0011b6c:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011b70:	83 c0 01             	add    eax,0x1
c0011b73:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011b77:	90                   	nop
c0011b78:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b7d:	83 f8 09             	cmp    eax,0x9
c0011b80:	0f 86 76 fe ff ff    	jbe    c00119fc <find_entry+0x40>
c0011b86:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011b8b:	83 e0 02             	and    eax,0x2
c0011b8e:	75 14                	jne    c0011ba4 <find_entry+0x1e8>
c0011b90:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011b95:	83 f8 0a             	cmp    eax,0xa
c0011b98:	75 12                	jne    c0011bac <find_entry+0x1f0>
c0011b9a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011b9f:	83 e0 01             	and    eax,0x1
c0011ba2:	75 08                	jne    c0011bac <find_entry+0x1f0>
c0011ba4:	b0 ff                	mov    al,0xff
c0011ba6:	e9 39 01 00 00       	jmp    c0011ce4 <find_entry+0x328>
c0011bab:	90                   	nop
c0011bac:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011bb1:	83 f8 09             	cmp    eax,0x9
c0011bb4:	7f 0e                	jg     c0011bc4 <find_entry+0x208>
c0011bb6:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0011bba:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011bbe:	e9 a1 00 00 00       	jmp    c0011c64 <find_entry+0x2a8>
c0011bc3:	90                   	nop
c0011bc4:	0f be 44 24 1e       	movsx  eax,BYTE PTR [esp+0x1e]
c0011bc9:	83 f8 09             	cmp    eax,0x9
c0011bcc:	7f 32                	jg     c0011c00 <find_entry+0x244>
c0011bce:	8a 44 24 1e          	mov    al,BYTE PTR [esp+0x1e]
c0011bd2:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011bd6:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011bdb:	c1 e0 04             	shl    eax,0x4
c0011bde:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011be3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011be5:	85 c0                	test   eax,eax
c0011be7:	74 47                	je     c0011c30 <find_entry+0x274>
c0011be9:	83 ec 08             	sub    esp,0x8
c0011bec:	68 09 0c 03 c0       	push   0xc0030c09
c0011bf1:	68 c6 fa 02 c0       	push   0xc002fac6
c0011bf6:	e8 99 df 00 00       	call   c001fb94 <CPrintf>
c0011bfb:	83 c4 10             	add    esp,0x10
c0011bfe:	eb 30                	jmp    c0011c30 <find_entry+0x274>
c0011c00:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011c05:	83 f8 09             	cmp    eax,0x9
c0011c08:	7f 0a                	jg     c0011c14 <find_entry+0x258>
c0011c0a:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011c0e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011c12:	eb 1c                	jmp    c0011c30 <find_entry+0x274>
c0011c14:	0f be 44 24 19       	movsx  eax,BYTE PTR [esp+0x19]
c0011c19:	83 f8 09             	cmp    eax,0x9
c0011c1c:	7f 0a                	jg     c0011c28 <find_entry+0x26c>
c0011c1e:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0011c22:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011c26:	eb 08                	jmp    c0011c30 <find_entry+0x274>
c0011c28:	b0 ff                	mov    al,0xff
c0011c2a:	e9 b5 00 00 00       	jmp    c0011ce4 <find_entry+0x328>
c0011c2f:	90                   	nop
c0011c30:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c35:	83 f8 09             	cmp    eax,0x9
c0011c38:	76 16                	jbe    c0011c50 <find_entry+0x294>
c0011c3a:	83 ec 08             	sub    esp,0x8
c0011c3d:	68 20 0c 03 c0       	push   0xc0030c20
c0011c42:	68 c6 fa 02 c0       	push   0xc002fac6
c0011c47:	e8 48 df 00 00       	call   c001fb94 <CPrintf>
c0011c4c:	83 c4 10             	add    esp,0x10
c0011c4f:	90                   	nop
c0011c50:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c55:	83 ec 0c             	sub    esp,0xc
c0011c58:	50                   	push   eax
c0011c59:	e8 3e fc ff ff       	call   c001189c <free_entry>
c0011c5e:	83 c4 10             	add    esp,0x10
c0011c61:	8d 76 00             	lea    esi,[esi+0x0]
c0011c64:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c69:	83 f8 09             	cmp    eax,0x9
c0011c6c:	76 16                	jbe    c0011c84 <find_entry+0x2c8>
c0011c6e:	83 ec 08             	sub    esp,0x8
c0011c71:	68 20 0c 03 c0       	push   0xc0030c20
c0011c76:	68 c6 fa 02 c0       	push   0xc002fac6
c0011c7b:	e8 14 df 00 00       	call   c001fb94 <CPrintf>
c0011c80:	83 c4 10             	add    esp,0x10
c0011c83:	90                   	nop
c0011c84:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c89:	c1 e0 04             	shl    eax,0x4
c0011c8c:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011c91:	8a 00                	mov    al,BYTE PTR [eax]
c0011c93:	0f b6 c0             	movzx  eax,al
c0011c96:	85 c0                	test   eax,eax
c0011c98:	74 16                	je     c0011cb0 <find_entry+0x2f4>
c0011c9a:	83 ec 08             	sub    esp,0x8
c0011c9d:	68 d0 0a 03 c0       	push   0xc0030ad0
c0011ca2:	68 c6 fa 02 c0       	push   0xc002fac6
c0011ca7:	e8 e8 de 00 00       	call   c001fb94 <CPrintf>
c0011cac:	83 c4 10             	add    esp,0x10
c0011caf:	90                   	nop
c0011cb0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011cb5:	74 19                	je     c0011cd0 <find_entry+0x314>
c0011cb7:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c0011cbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cc2:	c1 e2 04             	shl    edx,0x4
c0011cc5:	81 c2 04 a9 03 c0    	add    edx,0xc003a904
c0011ccb:	89 02                	mov    DWORD PTR [edx],eax
c0011ccd:	8d 76 00             	lea    esi,[esi+0x0]
c0011cd0:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011cd5:	c1 e0 04             	shl    eax,0x4
c0011cd8:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011cdd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011ce0:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011ce4:	83 c4 2c             	add    esp,0x2c
c0011ce7:	c3                   	ret    

c0011ce8 <etharp_send_ip>:
c0011ce8:	83 ec 1c             	sub    esp,0x1c
c0011ceb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011cef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011cf2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011cf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011cfa:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011cfd:	0f b6 c0             	movzx  eax,al
c0011d00:	83 f8 06             	cmp    eax,0x6
c0011d03:	74 17                	je     c0011d1c <etharp_send_ip+0x34>
c0011d05:	83 ec 08             	sub    esp,0x8
c0011d08:	68 fc 0a 03 c0       	push   0xc0030afc
c0011d0d:	68 c6 fa 02 c0       	push   0xc002fac6
c0011d12:	e8 7d de 00 00       	call   c001fb94 <CPrintf>
c0011d17:	83 c4 10             	add    esp,0x10
c0011d1a:	66 90                	xchg   ax,ax
c0011d1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d20:	83 ec 04             	sub    esp,0x4
c0011d23:	6a 06                	push   0x6
c0011d25:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011d29:	50                   	push   eax
c0011d2a:	e8 4b e6 fe ff       	call   c000037a <memcpy>
c0011d2f:	83 c4 10             	add    esp,0x10
c0011d32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d36:	83 c0 06             	add    eax,0x6
c0011d39:	83 ec 04             	sub    esp,0x4
c0011d3c:	6a 06                	push   0x6
c0011d3e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011d42:	50                   	push   eax
c0011d43:	e8 32 e6 fe ff       	call   c000037a <memcpy>
c0011d48:	83 c4 10             	add    esp,0x10
c0011d4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d4f:	66 c7 40 0c 08 00    	mov    WORD PTR [eax+0xc],0x8
c0011d55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d59:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011d5c:	83 ec 08             	sub    esp,0x8
c0011d5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011d63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011d67:	ff d0                	call   eax
c0011d69:	83 c4 10             	add    esp,0x10
c0011d6c:	83 c4 1c             	add    esp,0x1c
c0011d6f:	c3                   	ret    

c0011d70 <update_arp_entry>:
c0011d70:	83 ec 2c             	sub    esp,0x2c
c0011d73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d77:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011d7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d7f:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011d82:	0f b6 c0             	movzx  eax,al
c0011d85:	83 f8 06             	cmp    eax,0x6
c0011d88:	74 16                	je     c0011da0 <update_arp_entry+0x30>
c0011d8a:	83 ec 08             	sub    esp,0x8
c0011d8d:	68 40 0b 03 c0       	push   0xc0030b40
c0011d92:	68 c6 fa 02 c0       	push   0xc002fac6
c0011d97:	e8 f8 dd 00 00       	call   c001fb94 <CPrintf>
c0011d9c:	83 c4 10             	add    esp,0x10
c0011d9f:	90                   	nop
c0011da0:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011da5:	74 39                	je     c0011de0 <update_arp_entry+0x70>
c0011da7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011dab:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dad:	85 c0                	test   eax,eax
c0011daf:	74 2f                	je     c0011de0 <update_arp_entry+0x70>
c0011db1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011db5:	8b 00                	mov    eax,DWORD PTR [eax]
c0011db7:	83 ec 08             	sub    esp,0x8
c0011dba:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011dbe:	50                   	push   eax
c0011dbf:	e8 8c 20 00 00       	call   c0013e50 <ip4_addr_isbroadcast>
c0011dc4:	83 c4 10             	add    esp,0x10
c0011dc7:	0f b6 c0             	movzx  eax,al
c0011dca:	85 c0                	test   eax,eax
c0011dcc:	75 12                	jne    c0011de0 <update_arp_entry+0x70>
c0011dce:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011dd2:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dd4:	25 f0 00 00 00       	and    eax,0xf0
c0011dd9:	3d e0 00 00 00       	cmp    eax,0xe0
c0011dde:	75 08                	jne    c0011de8 <update_arp_entry+0x78>
c0011de0:	b0 f2                	mov    al,0xf2
c0011de2:	e9 d9 00 00 00       	jmp    c0011ec0 <update_arp_entry+0x150>
c0011de7:	90                   	nop
c0011de8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011ded:	83 ec 08             	sub    esp,0x8
c0011df0:	50                   	push   eax
c0011df1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011df5:	e8 c2 fb ff ff       	call   c00119bc <find_entry>
c0011dfa:	83 c4 10             	add    esp,0x10
c0011dfd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011e01:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e06:	85 c0                	test   eax,eax
c0011e08:	79 0a                	jns    c0011e14 <update_arp_entry+0xa4>
c0011e0a:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011e0e:	e9 ad 00 00 00       	jmp    c0011ec0 <update_arp_entry+0x150>
c0011e13:	90                   	nop
c0011e14:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e19:	c1 e0 04             	shl    eax,0x4
c0011e1c:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011e21:	c6 00 02             	mov    BYTE PTR [eax],0x2
c0011e24:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e29:	c1 e0 04             	shl    eax,0x4
c0011e2c:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011e31:	83 c0 08             	add    eax,0x8
c0011e34:	83 ec 04             	sub    esp,0x4
c0011e37:	6a 06                	push   0x6
c0011e39:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011e3d:	50                   	push   eax
c0011e3e:	e8 37 e5 fe ff       	call   c000037a <memcpy>
c0011e43:	83 c4 10             	add    esp,0x10
c0011e46:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e4b:	c1 e0 04             	shl    eax,0x4
c0011e4e:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011e53:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011e56:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e5b:	c1 e0 04             	shl    eax,0x4
c0011e5e:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011e63:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e65:	85 c0                	test   eax,eax
c0011e67:	74 53                	je     c0011ebc <update_arp_entry+0x14c>
c0011e69:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e6e:	c1 e0 04             	shl    eax,0x4
c0011e71:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011e76:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e78:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e7c:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e81:	c1 e0 04             	shl    eax,0x4
c0011e84:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011e89:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011e8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e93:	83 c0 23             	add    eax,0x23
c0011e96:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011e9a:	50                   	push   eax
c0011e9b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011e9f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011ea3:	e8 40 fe ff ff       	call   c0011ce8 <etharp_send_ip>
c0011ea8:	83 c4 10             	add    esp,0x10
c0011eab:	83 ec 0c             	sub    esp,0xc
c0011eae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011eb2:	e8 a5 64 ff ff       	call   c000835c <pbuf_free>
c0011eb7:	83 c4 10             	add    esp,0x10
c0011eba:	66 90                	xchg   ax,ax
c0011ebc:	b0 00                	mov    al,0x0
c0011ebe:	66 90                	xchg   ax,ax
c0011ec0:	83 c4 2c             	add    esp,0x2c
c0011ec3:	c3                   	ret    

c0011ec4 <etharp_find_addr>:
c0011ec4:	83 ec 1c             	sub    esp,0x1c
c0011ec7:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011ecc:	74 0a                	je     c0011ed8 <etharp_find_addr+0x14>
c0011ece:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0011ed3:	75 1b                	jne    c0011ef0 <etharp_find_addr+0x2c>
c0011ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0011ed8:	83 ec 08             	sub    esp,0x8
c0011edb:	68 68 0b 03 c0       	push   0xc0030b68
c0011ee0:	68 c6 fa 02 c0       	push   0xc002fac6
c0011ee5:	e8 aa dc 00 00       	call   c001fb94 <CPrintf>
c0011eea:	83 c4 10             	add    esp,0x10
c0011eed:	8d 76 00             	lea    esi,[esi+0x0]
c0011ef0:	83 ec 08             	sub    esp,0x8
c0011ef3:	6a 02                	push   0x2
c0011ef5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011ef9:	e8 be fa ff ff       	call   c00119bc <find_entry>
c0011efe:	83 c4 10             	add    esp,0x10
c0011f01:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011f05:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011f0a:	85 c0                	test   eax,eax
c0011f0c:	78 4a                	js     c0011f58 <etharp_find_addr+0x94>
c0011f0e:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011f13:	c1 e0 04             	shl    eax,0x4
c0011f16:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011f1b:	8a 00                	mov    al,BYTE PTR [eax]
c0011f1d:	0f b6 c0             	movzx  eax,al
c0011f20:	83 f8 02             	cmp    eax,0x2
c0011f23:	75 33                	jne    c0011f58 <etharp_find_addr+0x94>
c0011f25:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011f2a:	c1 e0 04             	shl    eax,0x4
c0011f2d:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011f32:	8d 50 08             	lea    edx,[eax+0x8]
c0011f35:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f39:	89 10                	mov    DWORD PTR [eax],edx
c0011f3b:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011f40:	c1 e0 04             	shl    eax,0x4
c0011f43:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011f48:	8d 50 04             	lea    edx,[eax+0x4]
c0011f4b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f4f:	89 10                	mov    DWORD PTR [eax],edx
c0011f51:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011f55:	eb 05                	jmp    c0011f5c <etharp_find_addr+0x98>
c0011f57:	90                   	nop
c0011f58:	b0 ff                	mov    al,0xff
c0011f5a:	66 90                	xchg   ax,ax
c0011f5c:	83 c4 1c             	add    esp,0x1c
c0011f5f:	c3                   	ret    

c0011f60 <etharp_arp_input>:
c0011f60:	83 ec 2c             	sub    esp,0x2c
c0011f63:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011f68:	75 1a                	jne    c0011f84 <etharp_arp_input+0x24>
c0011f6a:	83 ec 08             	sub    esp,0x8
c0011f6d:	68 33 0c 03 c0       	push   0xc0030c33
c0011f72:	68 c6 fa 02 c0       	push   0xc002fac6
c0011f77:	e8 18 dc 00 00       	call   c001fb94 <CPrintf>
c0011f7c:	83 c4 10             	add    esp,0x10
c0011f7f:	e9 d0 02 00 00       	jmp    c0012254 <etharp_arp_input+0x2f4>
c0011f84:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011f88:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0011f8c:	0f b7 c0             	movzx  eax,ax
c0011f8f:	83 f8 29             	cmp    eax,0x29
c0011f92:	77 34                	ja     c0011fc8 <etharp_arp_input+0x68>
c0011f94:	66 a1 42 67 03 c0    	mov    ax,ds:0xc0036742
c0011f9a:	83 c0 01             	add    eax,0x1
c0011f9d:	66 a3 42 67 03 c0    	mov    ds:0xc0036742,ax
c0011fa3:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0011fa9:	83 c0 01             	add    eax,0x1
c0011fac:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0011fb2:	83 ec 0c             	sub    esp,0xc
c0011fb5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011fb9:	e8 9e 63 ff ff       	call   c000835c <pbuf_free>
c0011fbe:	83 c4 10             	add    esp,0x10
c0011fc1:	e9 8e 02 00 00       	jmp    c0012254 <etharp_arp_input+0x2f4>
c0011fc6:	66 90                	xchg   ax,ax
c0011fc8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011fcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011fcf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011fd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011fd7:	83 c0 0e             	add    eax,0xe
c0011fda:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011fde:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011fe2:	66 8b 00             	mov    ax,WORD PTR [eax]
c0011fe5:	0f b7 c0             	movzx  eax,ax
c0011fe8:	3d 00 01 00 00       	cmp    eax,0x100
c0011fed:	75 31                	jne    c0012020 <etharp_arp_input+0xc0>
c0011fef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011ff3:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0011ff6:	0f b6 c0             	movzx  eax,al
c0011ff9:	83 f8 06             	cmp    eax,0x6
c0011ffc:	75 22                	jne    c0012020 <etharp_arp_input+0xc0>
c0011ffe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012002:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
c0012005:	0f b6 c0             	movzx  eax,al
c0012008:	83 f8 04             	cmp    eax,0x4
c001200b:	75 13                	jne    c0012020 <etharp_arp_input+0xc0>
c001200d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012011:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012015:	0f b7 c0             	movzx  eax,ax
c0012018:	83 f8 08             	cmp    eax,0x8
c001201b:	74 37                	je     c0012054 <etharp_arp_input+0xf4>
c001201d:	8d 76 00             	lea    esi,[esi+0x0]
c0012020:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c0012026:	83 c0 01             	add    eax,0x1
c0012029:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c001202f:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012035:	83 c0 01             	add    eax,0x1
c0012038:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c001203e:	83 ec 0c             	sub    esp,0xc
c0012041:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012045:	e8 12 63 ff ff       	call   c000835c <pbuf_free>
c001204a:	83 c4 10             	add    esp,0x10
c001204d:	e9 02 02 00 00       	jmp    c0012254 <etharp_arp_input+0x2f4>
c0012052:	66 90                	xchg   ax,ax
c0012054:	66 a1 3a 67 03 c0    	mov    ax,ds:0xc003673a
c001205a:	83 c0 01             	add    eax,0x1
c001205d:	66 a3 3a 67 03 c0    	mov    ds:0xc003673a,ax
c0012063:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012067:	83 c0 0e             	add    eax,0xe
c001206a:	83 ec 04             	sub    esp,0x4
c001206d:	6a 04                	push   0x4
c001206f:	50                   	push   eax
c0012070:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012074:	50                   	push   eax
c0012075:	e8 00 e3 fe ff       	call   c000037a <memcpy>
c001207a:	83 c4 10             	add    esp,0x10
c001207d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012081:	83 c0 18             	add    eax,0x18
c0012084:	83 ec 04             	sub    esp,0x4
c0012087:	6a 04                	push   0x4
c0012089:	50                   	push   eax
c001208a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001208e:	50                   	push   eax
c001208f:	e8 e6 e2 fe ff       	call   c000037a <memcpy>
c0012094:	83 c4 10             	add    esp,0x10
c0012097:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001209b:	83 c0 04             	add    eax,0x4
c001209e:	74 0c                	je     c00120ac <etharp_arp_input+0x14c>
c00120a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00120a7:	85 c0                	test   eax,eax
c00120a9:	75 09                	jne    c00120b4 <etharp_arp_input+0x154>
c00120ab:	90                   	nop
c00120ac:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00120b1:	eb 15                	jmp    c00120c8 <etharp_arp_input+0x168>
c00120b3:	90                   	nop
c00120b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00120b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00120bf:	39 c2                	cmp    edx,eax
c00120c1:	0f 94 c0             	sete   al
c00120c4:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00120c8:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c00120cd:	85 c0                	test   eax,eax
c00120cf:	74 07                	je     c00120d8 <etharp_arp_input+0x178>
c00120d1:	b8 01 00 00 00       	mov    eax,0x1
c00120d6:	eb 08                	jmp    c00120e0 <etharp_arp_input+0x180>
c00120d8:	b8 02 00 00 00       	mov    eax,0x2
c00120dd:	8d 76 00             	lea    esi,[esi+0x0]
c00120e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00120e4:	83 c2 08             	add    edx,0x8
c00120e7:	50                   	push   eax
c00120e8:	52                   	push   edx
c00120e9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00120ed:	50                   	push   eax
c00120ee:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120f2:	e8 79 fc ff ff       	call   c0011d70 <update_arp_entry>
c00120f7:	83 c4 10             	add    esp,0x10
c00120fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120fe:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0012102:	0f b7 c0             	movzx  eax,ax
c0012105:	3d 00 01 00 00       	cmp    eax,0x100
c001210a:	74 10                	je     c001211c <etharp_arp_input+0x1bc>
c001210c:	3d 00 02 00 00       	cmp    eax,0x200
c0012111:	0f 84 29 01 00 00    	je     c0012240 <etharp_arp_input+0x2e0>
c0012117:	e9 10 01 00 00       	jmp    c001222c <etharp_arp_input+0x2cc>
c001211c:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0012121:	85 c0                	test   eax,eax
c0012123:	0f 84 f7 00 00 00    	je     c0012220 <etharp_arp_input+0x2c0>
c0012129:	83 ec 0c             	sub    esp,0xc
c001212c:	6a 02                	push   0x2
c001212e:	e8 b5 ea fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0012133:	83 c4 10             	add    esp,0x10
c0012136:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001213a:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c001213e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012142:	8d 50 0e             	lea    edx,[eax+0xe]
c0012145:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012149:	83 c0 18             	add    eax,0x18
c001214c:	83 ec 04             	sub    esp,0x4
c001214f:	6a 04                	push   0x4
c0012151:	52                   	push   edx
c0012152:	50                   	push   eax
c0012153:	e8 22 e2 fe ff       	call   c000037a <memcpy>
c0012158:	83 c4 10             	add    esp,0x10
c001215b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001215f:	8d 50 04             	lea    edx,[eax+0x4]
c0012162:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012166:	83 c0 0e             	add    eax,0xe
c0012169:	83 ec 04             	sub    esp,0x4
c001216c:	6a 04                	push   0x4
c001216e:	52                   	push   edx
c001216f:	50                   	push   eax
c0012170:	e8 05 e2 fe ff       	call   c000037a <memcpy>
c0012175:	83 c4 10             	add    esp,0x10
c0012178:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001217c:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c001217f:	0f b6 c0             	movzx  eax,al
c0012182:	83 f8 06             	cmp    eax,0x6
c0012185:	74 15                	je     c001219c <etharp_arp_input+0x23c>
c0012187:	83 ec 08             	sub    esp,0x8
c001218a:	68 fc 0a 03 c0       	push   0xc0030afc
c001218f:	68 c6 fa 02 c0       	push   0xc002fac6
c0012194:	e8 fb d9 00 00       	call   c001fb94 <CPrintf>
c0012199:	83 c4 10             	add    esp,0x10
c001219c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121a0:	8d 50 08             	lea    edx,[eax+0x8]
c00121a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121a7:	83 c0 12             	add    eax,0x12
c00121aa:	83 ec 04             	sub    esp,0x4
c00121ad:	6a 06                	push   0x6
c00121af:	52                   	push   edx
c00121b0:	50                   	push   eax
c00121b1:	e8 c4 e1 fe ff       	call   c000037a <memcpy>
c00121b6:	83 c4 10             	add    esp,0x10
c00121b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121bd:	8d 50 08             	lea    edx,[eax+0x8]
c00121c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00121c4:	83 ec 04             	sub    esp,0x4
c00121c7:	6a 06                	push   0x6
c00121c9:	52                   	push   edx
c00121ca:	50                   	push   eax
c00121cb:	e8 aa e1 fe ff       	call   c000037a <memcpy>
c00121d0:	83 c4 10             	add    esp,0x10
c00121d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121d7:	83 c0 08             	add    eax,0x8
c00121da:	83 ec 04             	sub    esp,0x4
c00121dd:	6a 06                	push   0x6
c00121df:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00121e3:	50                   	push   eax
c00121e4:	e8 91 e1 fe ff       	call   c000037a <memcpy>
c00121e9:	83 c4 10             	add    esp,0x10
c00121ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00121f0:	83 c0 06             	add    eax,0x6
c00121f3:	83 ec 04             	sub    esp,0x4
c00121f6:	6a 06                	push   0x6
c00121f8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00121fc:	50                   	push   eax
c00121fd:	e8 78 e1 fe ff       	call   c000037a <memcpy>
c0012202:	83 c4 10             	add    esp,0x10
c0012205:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012209:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001220c:	83 ec 08             	sub    esp,0x8
c001220f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012213:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012217:	ff d0                	call   eax
c0012219:	83 c4 10             	add    esp,0x10
c001221c:	eb 26                	jmp    c0012244 <etharp_arp_input+0x2e4>
c001221e:	66 90                	xchg   ax,ax
c0012220:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012224:	83 c0 04             	add    eax,0x4
c0012227:	eb 1b                	jmp    c0012244 <etharp_arp_input+0x2e4>
c0012229:	8d 76 00             	lea    esi,[esi+0x0]
c001222c:	66 a1 4c 67 03 c0    	mov    ax,ds:0xc003674c
c0012232:	83 c0 01             	add    eax,0x1
c0012235:	66 a3 4c 67 03 c0    	mov    ds:0xc003674c,ax
c001223b:	eb 07                	jmp    c0012244 <etharp_arp_input+0x2e4>
c001223d:	8d 76 00             	lea    esi,[esi+0x0]
c0012240:	90                   	nop
c0012241:	8d 76 00             	lea    esi,[esi+0x0]
c0012244:	83 ec 0c             	sub    esp,0xc
c0012247:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001224b:	e8 0c 61 ff ff       	call   c000835c <pbuf_free>
c0012250:	83 c4 10             	add    esp,0x10
c0012253:	90                   	nop
c0012254:	83 c4 2c             	add    esp,0x2c
c0012257:	c3                   	ret    

c0012258 <etharp_raw>:
c0012258:	83 ec 2c             	sub    esp,0x2c
c001225b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001225f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012264:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012269:	83 ec 04             	sub    esp,0x4
c001226c:	6a 00                	push   0x0
c001226e:	6a 2a                	push   0x2a
c0012270:	6a 03                	push   0x3
c0012272:	e8 bd 62 ff ff       	call   c0008534 <pbuf_alloc>
c0012277:	83 c4 10             	add    esp,0x10
c001227a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001227e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012283:	75 17                	jne    c001229c <etharp_raw+0x44>
c0012285:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c001228b:	83 c0 01             	add    eax,0x1
c001228e:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c0012294:	b0 ff                	mov    al,0xff
c0012296:	e9 85 01 00 00       	jmp    c0012420 <etharp_raw+0x1c8>
c001229b:	90                   	nop
c001229c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122a0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00122a4:	0f b7 c0             	movzx  eax,ax
c00122a7:	83 f8 29             	cmp    eax,0x29
c00122aa:	77 18                	ja     c00122c4 <etharp_raw+0x6c>
c00122ac:	83 ec 08             	sub    esp,0x8
c00122af:	68 8c 0b 03 c0       	push   0xc0030b8c
c00122b4:	68 c6 fa 02 c0       	push   0xc002fac6
c00122b9:	e8 d6 d8 00 00       	call   c001fb94 <CPrintf>
c00122be:	83 c4 10             	add    esp,0x10
c00122c1:	8d 76 00             	lea    esi,[esi+0x0]
c00122c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00122cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00122cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122d3:	83 c0 0e             	add    eax,0xe
c00122d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00122da:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00122df:	83 ec 0c             	sub    esp,0xc
c00122e2:	50                   	push   eax
c00122e3:	e8 00 e9 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00122e8:	83 c4 10             	add    esp,0x10
c00122eb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00122ef:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00122f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122f7:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c00122fa:	0f b6 c0             	movzx  eax,al
c00122fd:	83 f8 06             	cmp    eax,0x6
c0012300:	74 16                	je     c0012318 <etharp_raw+0xc0>
c0012302:	83 ec 08             	sub    esp,0x8
c0012305:	68 fc 0a 03 c0       	push   0xc0030afc
c001230a:	68 c6 fa 02 c0       	push   0xc002fac6
c001230f:	e8 80 d8 00 00       	call   c001fb94 <CPrintf>
c0012314:	83 c4 10             	add    esp,0x10
c0012317:	90                   	nop
c0012318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001231c:	83 c0 08             	add    eax,0x8
c001231f:	83 ec 04             	sub    esp,0x4
c0012322:	6a 06                	push   0x6
c0012324:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012328:	50                   	push   eax
c0012329:	e8 4c e0 fe ff       	call   c000037a <memcpy>
c001232e:	83 c4 10             	add    esp,0x10
c0012331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012335:	83 c0 12             	add    eax,0x12
c0012338:	83 ec 04             	sub    esp,0x4
c001233b:	6a 06                	push   0x6
c001233d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012341:	50                   	push   eax
c0012342:	e8 33 e0 fe ff       	call   c000037a <memcpy>
c0012347:	83 c4 10             	add    esp,0x10
c001234a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001234e:	83 ec 04             	sub    esp,0x4
c0012351:	6a 06                	push   0x6
c0012353:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012357:	50                   	push   eax
c0012358:	e8 1d e0 fe ff       	call   c000037a <memcpy>
c001235d:	83 c4 10             	add    esp,0x10
c0012360:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012364:	83 c0 06             	add    eax,0x6
c0012367:	83 ec 04             	sub    esp,0x4
c001236a:	6a 06                	push   0x6
c001236c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012370:	50                   	push   eax
c0012371:	e8 04 e0 fe ff       	call   c000037a <memcpy>
c0012376:	83 c4 10             	add    esp,0x10
c0012379:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001237d:	83 c0 0e             	add    eax,0xe
c0012380:	83 ec 04             	sub    esp,0x4
c0012383:	6a 04                	push   0x4
c0012385:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012389:	50                   	push   eax
c001238a:	e8 eb df fe ff       	call   c000037a <memcpy>
c001238f:	83 c4 10             	add    esp,0x10
c0012392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012396:	83 c0 18             	add    eax,0x18
c0012399:	83 ec 04             	sub    esp,0x4
c001239c:	6a 04                	push   0x4
c001239e:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00123a2:	50                   	push   eax
c00123a3:	e8 d2 df fe ff       	call   c000037a <memcpy>
c00123a8:	83 c4 10             	add    esp,0x10
c00123ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123af:	66 c7 00 00 01       	mov    WORD PTR [eax],0x100
c00123b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123b8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00123be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123c2:	c6 40 04 06          	mov    BYTE PTR [eax+0x4],0x6
c00123c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123ca:	c6 40 05 04          	mov    BYTE PTR [eax+0x5],0x4
c00123ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00123d2:	66 c7 40 0c 08 06    	mov    WORD PTR [eax+0xc],0x608
c00123d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123dc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00123df:	83 ec 08             	sub    esp,0x8
c00123e2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00123e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00123ea:	ff d0                	call   eax
c00123ec:	83 c4 10             	add    esp,0x10
c00123ef:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00123f3:	66 a1 38 67 03 c0    	mov    ax,ds:0xc0036738
c00123f9:	83 c0 01             	add    eax,0x1
c00123fc:	66 a3 38 67 03 c0    	mov    ds:0xc0036738,ax
c0012402:	83 ec 0c             	sub    esp,0xc
c0012405:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012409:	e8 4e 5f ff ff       	call   c000835c <pbuf_free>
c001240e:	83 c4 10             	add    esp,0x10
c0012411:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012419:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001241d:	8d 76 00             	lea    esi,[esi+0x0]
c0012420:	83 c4 2c             	add    esp,0x2c
c0012423:	c3                   	ret    

c0012424 <etharp_request>:
c0012424:	83 ec 0c             	sub    esp,0xc
c0012427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001242b:	8d 48 04             	lea    ecx,[eax+0x4]
c001242e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012432:	8d 50 23             	lea    edx,[eax+0x23]
c0012435:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012439:	83 c0 23             	add    eax,0x23
c001243c:	6a 01                	push   0x1
c001243e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012442:	68 5c 0c 03 c0       	push   0xc0030c5c
c0012447:	51                   	push   ecx
c0012448:	52                   	push   edx
c0012449:	68 64 0c 03 c0       	push   0xc0030c64
c001244e:	50                   	push   eax
c001244f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012453:	e8 00 fe ff ff       	call   c0012258 <etharp_raw>
c0012458:	83 c4 20             	add    esp,0x20
c001245b:	83 c4 0c             	add    esp,0xc
c001245e:	c3                   	ret    
c001245f:	90                   	nop

c0012460 <etharp_query>:
c0012460:	83 ec 2c             	sub    esp,0x2c
c0012463:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012467:	83 c0 23             	add    eax,0x23
c001246a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001246e:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c0012473:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012477:	8b 00                	mov    eax,DWORD PTR [eax]
c0012479:	83 ec 08             	sub    esp,0x8
c001247c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012480:	50                   	push   eax
c0012481:	e8 ca 19 00 00       	call   c0013e50 <ip4_addr_isbroadcast>
c0012486:	83 c4 10             	add    esp,0x10
c0012489:	0f b6 c0             	movzx  eax,al
c001248c:	85 c0                	test   eax,eax
c001248e:	75 24                	jne    c00124b4 <etharp_query+0x54>
c0012490:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012494:	8b 00                	mov    eax,DWORD PTR [eax]
c0012496:	25 f0 00 00 00       	and    eax,0xf0
c001249b:	3d e0 00 00 00       	cmp    eax,0xe0
c00124a0:	74 12                	je     c00124b4 <etharp_query+0x54>
c00124a2:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00124a7:	74 0b                	je     c00124b4 <etharp_query+0x54>
c00124a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00124af:	85 c0                	test   eax,eax
c00124b1:	75 09                	jne    c00124bc <etharp_query+0x5c>
c00124b3:	90                   	nop
c00124b4:	b0 f2                	mov    al,0xf2
c00124b6:	e9 dd 02 00 00       	jmp    c0012798 <etharp_query+0x338>
c00124bb:	90                   	nop
c00124bc:	83 ec 08             	sub    esp,0x8
c00124bf:	6a 01                	push   0x1
c00124c1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00124c5:	e8 f2 f4 ff ff       	call   c00119bc <find_entry>
c00124ca:	83 c4 10             	add    esp,0x10
c00124cd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00124d1:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00124d6:	85 c0                	test   eax,eax
c00124d8:	79 22                	jns    c00124fc <etharp_query+0x9c>
c00124da:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00124df:	74 0f                	je     c00124f0 <etharp_query+0x90>
c00124e1:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c00124e7:	83 c0 01             	add    eax,0x1
c00124ea:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c00124f0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00124f4:	e9 9f 02 00 00       	jmp    c0012798 <etharp_query+0x338>
c00124f9:	8d 76 00             	lea    esi,[esi+0x0]
c00124fc:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012501:	c1 e0 04             	shl    eax,0x4
c0012504:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012509:	8a 00                	mov    al,BYTE PTR [eax]
c001250b:	0f b6 c0             	movzx  eax,al
c001250e:	85 c0                	test   eax,eax
c0012510:	75 12                	jne    c0012524 <etharp_query+0xc4>
c0012512:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012517:	c1 e0 04             	shl    eax,0x4
c001251a:	05 0e a9 03 c0       	add    eax,0xc003a90e
c001251f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0012522:	66 90                	xchg   ax,ax
c0012524:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012529:	c1 e0 04             	shl    eax,0x4
c001252c:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012531:	8a 00                	mov    al,BYTE PTR [eax]
c0012533:	0f b6 c0             	movzx  eax,al
c0012536:	83 f8 01             	cmp    eax,0x1
c0012539:	74 2d                	je     c0012568 <etharp_query+0x108>
c001253b:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012540:	c1 e0 04             	shl    eax,0x4
c0012543:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012548:	8a 00                	mov    al,BYTE PTR [eax]
c001254a:	0f b6 c0             	movzx  eax,al
c001254d:	83 f8 02             	cmp    eax,0x2
c0012550:	74 16                	je     c0012568 <etharp_query+0x108>
c0012552:	83 ec 08             	sub    esp,0x8
c0012555:	68 c0 0b 03 c0       	push   0xc0030bc0
c001255a:	68 c6 fa 02 c0       	push   0xc002fac6
c001255f:	e8 30 d6 00 00       	call   c001fb94 <CPrintf>
c0012564:	83 c4 10             	add    esp,0x10
c0012567:	90                   	nop
c0012568:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001256d:	c1 e0 04             	shl    eax,0x4
c0012570:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012575:	8a 00                	mov    al,BYTE PTR [eax]
c0012577:	0f b6 c0             	movzx  eax,al
c001257a:	83 f8 01             	cmp    eax,0x1
c001257d:	74 09                	je     c0012588 <etharp_query+0x128>
c001257f:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0012584:	75 2a                	jne    c00125b0 <etharp_query+0x150>
c0012586:	66 90                	xchg   ax,ax
c0012588:	83 ec 08             	sub    esp,0x8
c001258b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001258f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012593:	e8 8c fe ff ff       	call   c0012424 <etharp_request>
c0012598:	83 c4 10             	add    esp,0x10
c001259b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001259f:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00125a4:	75 0a                	jne    c00125b0 <etharp_query+0x150>
c00125a6:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00125aa:	e9 e9 01 00 00       	jmp    c0012798 <etharp_query+0x338>
c00125af:	90                   	nop
c00125b0:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00125b5:	75 15                	jne    c00125cc <etharp_query+0x16c>
c00125b7:	83 ec 08             	sub    esp,0x8
c00125ba:	68 3a ff 02 c0       	push   0xc002ff3a
c00125bf:	68 c6 fa 02 c0       	push   0xc002fac6
c00125c4:	e8 cb d5 00 00       	call   c001fb94 <CPrintf>
c00125c9:	83 c4 10             	add    esp,0x10
c00125cc:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00125d1:	c1 e0 04             	shl    eax,0x4
c00125d4:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00125d9:	8a 00                	mov    al,BYTE PTR [eax]
c00125db:	0f b6 c0             	movzx  eax,al
c00125de:	83 f8 02             	cmp    eax,0x2
c00125e1:	75 39                	jne    c001261c <etharp_query+0x1bc>
c00125e3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00125e7:	a2 e0 a8 03 c0       	mov    ds:0xc003a8e0,al
c00125ec:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00125f1:	c1 e0 04             	shl    eax,0x4
c00125f4:	05 00 a9 03 c0       	add    eax,0xc003a900
c00125f9:	83 c0 08             	add    eax,0x8
c00125fc:	50                   	push   eax
c00125fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012601:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012605:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012609:	e8 da f6 ff ff       	call   c0011ce8 <etharp_send_ip>
c001260e:	83 c4 10             	add    esp,0x10
c0012611:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012615:	e9 7a 01 00 00       	jmp    c0012794 <etharp_query+0x334>
c001261a:	66 90                	xchg   ax,ax
c001261c:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012621:	c1 e0 04             	shl    eax,0x4
c0012624:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012629:	8a 00                	mov    al,BYTE PTR [eax]
c001262b:	0f b6 c0             	movzx  eax,al
c001262e:	83 f8 01             	cmp    eax,0x1
c0012631:	0f 85 5d 01 00 00    	jne    c0012794 <etharp_query+0x334>
c0012637:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001263f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012643:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012647:	eb 63                	jmp    c00126ac <etharp_query+0x24c>
c0012649:	8d 76 00             	lea    esi,[esi+0x0]
c001264c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012650:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0012654:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012658:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001265b:	0f b7 d2             	movzx  edx,dx
c001265e:	0f b7 c0             	movzx  eax,ax
c0012661:	39 c2                	cmp    edx,eax
c0012663:	75 1f                	jne    c0012684 <etharp_query+0x224>
c0012665:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012669:	8b 00                	mov    eax,DWORD PTR [eax]
c001266b:	85 c0                	test   eax,eax
c001266d:	74 15                	je     c0012684 <etharp_query+0x224>
c001266f:	83 ec 08             	sub    esp,0x8
c0012672:	68 41 0c 03 c0       	push   0xc0030c41
c0012677:	68 c6 fa 02 c0       	push   0xc002fac6
c001267c:	e8 13 d5 00 00       	call   c001fb94 <CPrintf>
c0012681:	83 c4 10             	add    esp,0x10
c0012684:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012688:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c001268b:	0f b6 c0             	movzx  eax,al
c001268e:	83 f8 01             	cmp    eax,0x1
c0012691:	74 0d                	je     c00126a0 <etharp_query+0x240>
c0012693:	c7 44 24 14 01 00 00 00 	mov    DWORD PTR [esp+0x14],0x1
c001269b:	eb 17                	jmp    c00126b4 <etharp_query+0x254>
c001269d:	8d 76 00             	lea    esi,[esi+0x0]
c00126a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00126a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00126a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126aa:	66 90                	xchg   ax,ax
c00126ac:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00126b1:	75 99                	jne    c001264c <etharp_query+0x1ec>
c00126b3:	90                   	nop
c00126b4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00126b9:	74 59                	je     c0012714 <etharp_query+0x2b4>
c00126bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00126bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00126c2:	0f b7 c0             	movzx  eax,ax
c00126c5:	83 ec 04             	sub    esp,0x4
c00126c8:	6a 00                	push   0x0
c00126ca:	50                   	push   eax
c00126cb:	6a 03                	push   0x3
c00126cd:	e8 62 5e ff ff       	call   c0008534 <pbuf_alloc>
c00126d2:	83 c4 10             	add    esp,0x10
c00126d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126d9:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00126de:	74 4c                	je     c001272c <etharp_query+0x2cc>
c00126e0:	83 ec 08             	sub    esp,0x8
c00126e3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00126e7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00126eb:	e8 a4 66 ff ff       	call   c0008d94 <pbuf_copy>
c00126f0:	83 c4 10             	add    esp,0x10
c00126f3:	0f be c0             	movsx  eax,al
c00126f6:	85 c0                	test   eax,eax
c00126f8:	74 32                	je     c001272c <etharp_query+0x2cc>
c00126fa:	83 ec 0c             	sub    esp,0xc
c00126fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012701:	e8 56 5c ff ff       	call   c000835c <pbuf_free>
c0012706:	83 c4 10             	add    esp,0x10
c0012709:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012711:	eb 19                	jmp    c001272c <etharp_query+0x2cc>
c0012713:	90                   	nop
c0012714:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012718:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001271c:	83 ec 0c             	sub    esp,0xc
c001271f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012723:	e8 3c 64 ff ff       	call   c0008b64 <pbuf_ref>
c0012728:	83 c4 10             	add    esp,0x10
c001272b:	90                   	nop
c001272c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012731:	74 4d                	je     c0012780 <etharp_query+0x320>
c0012733:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012738:	c1 e0 04             	shl    eax,0x4
c001273b:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012740:	8b 00                	mov    eax,DWORD PTR [eax]
c0012742:	85 c0                	test   eax,eax
c0012744:	74 1e                	je     c0012764 <etharp_query+0x304>
c0012746:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001274b:	c1 e0 04             	shl    eax,0x4
c001274e:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012753:	8b 00                	mov    eax,DWORD PTR [eax]
c0012755:	83 ec 0c             	sub    esp,0xc
c0012758:	50                   	push   eax
c0012759:	e8 fe 5b ff ff       	call   c000835c <pbuf_free>
c001275e:	83 c4 10             	add    esp,0x10
c0012761:	8d 76 00             	lea    esi,[esi+0x0]
c0012764:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012769:	c1 e0 04             	shl    eax,0x4
c001276c:	8d 90 00 a9 03 c0    	lea    edx,[eax-0x3ffc5700]
c0012772:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012776:	89 02                	mov    DWORD PTR [edx],eax
c0012778:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001277d:	eb 15                	jmp    c0012794 <etharp_query+0x334>
c001277f:	90                   	nop
c0012780:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c0012786:	83 c0 01             	add    eax,0x1
c0012789:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c001278f:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c0012794:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012798:	83 c4 2c             	add    esp,0x2c
c001279b:	c3                   	ret    

c001279c <etharp_output>:
c001279c:	83 ec 1c             	sub    esp,0x1c
c001279f:	83 ec 08             	sub    esp,0x8
c00127a2:	6a 0e                	push   0xe
c00127a4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00127a8:	e8 13 5a ff ff       	call   c00081c0 <pbuf_header>
c00127ad:	83 c4 10             	add    esp,0x10
c00127b0:	0f b6 c0             	movzx  eax,al
c00127b3:	85 c0                	test   eax,eax
c00127b5:	74 19                	je     c00127d0 <etharp_output+0x34>
c00127b7:	66 a1 2a 67 03 c0    	mov    ax,ds:0xc003672a
c00127bd:	83 c0 01             	add    eax,0x1
c00127c0:	66 a3 2a 67 03 c0    	mov    ds:0xc003672a,ax
c00127c6:	b0 fe                	mov    al,0xfe
c00127c8:	e9 8b 01 00 00       	jmp    c0012958 <etharp_output+0x1bc>
c00127cd:	8d 76 00             	lea    esi,[esi+0x0]
c00127d0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00127d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00127dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00127de:	83 ec 08             	sub    esp,0x8
c00127e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00127e5:	50                   	push   eax
c00127e6:	e8 65 16 00 00       	call   c0013e50 <ip4_addr_isbroadcast>
c00127eb:	83 c4 10             	add    esp,0x10
c00127ee:	0f b6 c0             	movzx  eax,al
c00127f1:	85 c0                	test   eax,eax
c00127f3:	74 0f                	je     c0012804 <etharp_output+0x68>
c00127f5:	c7 44 24 0c 64 0c 03 c0 	mov    DWORD PTR [esp+0xc],0xc0030c64
c00127fd:	e9 3a 01 00 00       	jmp    c001293c <etharp_output+0x1a0>
c0012802:	66 90                	xchg   ax,ax
c0012804:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012808:	8b 00                	mov    eax,DWORD PTR [eax]
c001280a:	25 f0 00 00 00       	and    eax,0xf0
c001280f:	3d e0 00 00 00       	cmp    eax,0xe0
c0012814:	75 42                	jne    c0012858 <etharp_output+0xbc>
c0012816:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001281b:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c0012820:	c6 44 24 08 5e       	mov    BYTE PTR [esp+0x8],0x5e
c0012825:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012829:	83 c0 01             	add    eax,0x1
c001282c:	8a 00                	mov    al,BYTE PTR [eax]
c001282e:	83 e0 7f             	and    eax,0x7f
c0012831:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0012835:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012839:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c001283c:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0012840:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012844:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
c0012847:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001284b:	8d 44 24 06          	lea    eax,[esp+0x6]
c001284f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012853:	e9 e4 00 00 00       	jmp    c001293c <etharp_output+0x1a0>
c0012858:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001285c:	8b 10                	mov    edx,DWORD PTR [eax]
c001285e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012862:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012865:	31 c2                	xor    edx,eax
c0012867:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001286b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001286e:	21 d0                	and    eax,edx
c0012870:	74 3a                	je     c00128ac <etharp_output+0x110>
c0012872:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012876:	8b 00                	mov    eax,DWORD PTR [eax]
c0012878:	0f b7 c0             	movzx  eax,ax
c001287b:	3d a9 fe 00 00       	cmp    eax,0xfea9
c0012880:	74 2a                	je     c00128ac <etharp_output+0x110>
c0012882:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012886:	83 c0 0c             	add    eax,0xc
c0012889:	74 19                	je     c00128a4 <etharp_output+0x108>
c001288b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001288f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012892:	85 c0                	test   eax,eax
c0012894:	74 0e                	je     c00128a4 <etharp_output+0x108>
c0012896:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001289a:	83 c0 0c             	add    eax,0xc
c001289d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00128a1:	eb 09                	jmp    c00128ac <etharp_output+0x110>
c00128a3:	90                   	nop
c00128a4:	b0 fc                	mov    al,0xfc
c00128a6:	e9 ad 00 00 00       	jmp    c0012958 <etharp_output+0x1bc>
c00128ab:	90                   	nop
c00128ac:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c00128b1:	0f b6 c0             	movzx  eax,al
c00128b4:	c1 e0 04             	shl    eax,0x4
c00128b7:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00128bc:	8a 00                	mov    al,BYTE PTR [eax]
c00128be:	0f b6 c0             	movzx  eax,al
c00128c1:	83 f8 02             	cmp    eax,0x2
c00128c4:	75 5a                	jne    c0012920 <etharp_output+0x184>
c00128c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00128ca:	8b 10                	mov    edx,DWORD PTR [eax]
c00128cc:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c00128d1:	0f b6 c0             	movzx  eax,al
c00128d4:	c1 e0 04             	shl    eax,0x4
c00128d7:	05 04 a9 03 c0       	add    eax,0xc003a904
c00128dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00128de:	39 c2                	cmp    edx,eax
c00128e0:	75 3e                	jne    c0012920 <etharp_output+0x184>
c00128e2:	66 a1 4e 67 03 c0    	mov    ax,ds:0xc003674e
c00128e8:	83 c0 01             	add    eax,0x1
c00128eb:	66 a3 4e 67 03 c0    	mov    ds:0xc003674e,ax
c00128f1:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c00128f6:	0f b6 c0             	movzx  eax,al
c00128f9:	c1 e0 04             	shl    eax,0x4
c00128fc:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012901:	8d 50 08             	lea    edx,[eax+0x8]
c0012904:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012908:	83 c0 23             	add    eax,0x23
c001290b:	52                   	push   edx
c001290c:	50                   	push   eax
c001290d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012911:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012915:	e8 ce f3 ff ff       	call   c0011ce8 <etharp_send_ip>
c001291a:	83 c4 10             	add    esp,0x10
c001291d:	eb 39                	jmp    c0012958 <etharp_output+0x1bc>
c001291f:	90                   	nop
c0012920:	83 ec 04             	sub    esp,0x4
c0012923:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012927:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001292b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001292f:	e8 2c fb ff ff       	call   c0012460 <etharp_query>
c0012934:	83 c4 10             	add    esp,0x10
c0012937:	eb 1f                	jmp    c0012958 <etharp_output+0x1bc>
c0012939:	8d 76 00             	lea    esi,[esi+0x0]
c001293c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012940:	83 c0 23             	add    eax,0x23
c0012943:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0012947:	50                   	push   eax
c0012948:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001294c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012950:	e8 93 f3 ff ff       	call   c0011ce8 <etharp_send_ip>
c0012955:	83 c4 10             	add    esp,0x10
c0012958:	83 c4 1c             	add    esp,0x1c
c001295b:	c3                   	ret    

c001295c <ethernet_input>:
c001295c:	83 ec 1c             	sub    esp,0x1c
c001295f:	66 c7 44 24 0e 0e 00 	mov    WORD PTR [esp+0xe],0xe
c0012966:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001296a:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001296e:	0f b7 c0             	movzx  eax,ax
c0012971:	83 f8 0e             	cmp    eax,0xe
c0012974:	77 26                	ja     c001299c <ethernet_input+0x40>
c0012976:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c001297c:	83 c0 01             	add    eax,0x1
c001297f:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c0012985:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c001298b:	83 c0 01             	add    eax,0x1
c001298e:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0012994:	e9 ef 00 00 00       	jmp    c0012a88 <ethernet_input+0x12c>
c0012999:	8d 76 00             	lea    esi,[esi+0x0]
c001299c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00129a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00129a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00129a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00129ab:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00129af:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00129b4:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00129b9:	83 f8 08             	cmp    eax,0x8
c00129bc:	74 0e                	je     c00129cc <ethernet_input+0x70>
c00129be:	3d 08 06 00 00       	cmp    eax,0x608
c00129c3:	74 6b                	je     c0012a30 <ethernet_input+0xd4>
c00129c5:	e9 92 00 00 00       	jmp    c0012a5c <ethernet_input+0x100>
c00129ca:	66 90                	xchg   ax,ax
c00129cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00129d0:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00129d3:	0f b6 c0             	movzx  eax,al
c00129d6:	83 e0 20             	and    eax,0x20
c00129d9:	0f 84 a1 00 00 00    	je     c0012a80 <ethernet_input+0x124>
c00129df:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00129e4:	f7 d8                	neg    eax
c00129e6:	98                   	cwde   
c00129e7:	83 ec 08             	sub    esp,0x8
c00129ea:	50                   	push   eax
c00129eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129ef:	e8 cc 57 ff ff       	call   c00081c0 <pbuf_header>
c00129f4:	83 c4 10             	add    esp,0x10
c00129f7:	0f b6 c0             	movzx  eax,al
c00129fa:	85 c0                	test   eax,eax
c00129fc:	74 1a                	je     c0012a18 <ethernet_input+0xbc>
c00129fe:	83 ec 08             	sub    esp,0x8
c0012a01:	68 e8 0b 03 c0       	push   0xc0030be8
c0012a06:	68 c6 fa 02 c0       	push   0xc002fac6
c0012a0b:	e8 84 d1 00 00       	call   c001fb94 <CPrintf>
c0012a10:	83 c4 10             	add    esp,0x10
c0012a13:	eb 73                	jmp    c0012a88 <ethernet_input+0x12c>
c0012a15:	8d 76 00             	lea    esi,[esi+0x0]
c0012a18:	83 ec 08             	sub    esp,0x8
c0012a1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a23:	e8 70 0c 00 00       	call   c0013698 <ip_input>
c0012a28:	83 c4 10             	add    esp,0x10
c0012a2b:	eb 4f                	jmp    c0012a7c <ethernet_input+0x120>
c0012a2d:	8d 76 00             	lea    esi,[esi+0x0]
c0012a30:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a34:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0012a37:	0f b6 c0             	movzx  eax,al
c0012a3a:	83 e0 20             	and    eax,0x20
c0012a3d:	74 45                	je     c0012a84 <ethernet_input+0x128>
c0012a3f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a43:	83 c0 23             	add    eax,0x23
c0012a46:	83 ec 04             	sub    esp,0x4
c0012a49:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012a4d:	50                   	push   eax
c0012a4e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012a52:	e8 09 f5 ff ff       	call   c0011f60 <etharp_arp_input>
c0012a57:	83 c4 10             	add    esp,0x10
c0012a5a:	eb 20                	jmp    c0012a7c <ethernet_input+0x120>
c0012a5c:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c0012a62:	83 c0 01             	add    eax,0x1
c0012a65:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c0012a6b:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012a71:	83 c0 01             	add    eax,0x1
c0012a74:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0012a7a:	eb 0c                	jmp    c0012a88 <ethernet_input+0x12c>
c0012a7c:	b0 00                	mov    al,0x0
c0012a7e:	eb 1c                	jmp    c0012a9c <ethernet_input+0x140>
c0012a80:	90                   	nop
c0012a81:	eb 05                	jmp    c0012a88 <ethernet_input+0x12c>
c0012a83:	90                   	nop
c0012a84:	90                   	nop
c0012a85:	8d 76 00             	lea    esi,[esi+0x0]
c0012a88:	83 ec 0c             	sub    esp,0xc
c0012a8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a8f:	e8 c8 58 ff ff       	call   c000835c <pbuf_free>
c0012a94:	83 c4 10             	add    esp,0x10
c0012a97:	b0 00                	mov    al,0x0
c0012a99:	8d 76 00             	lea    esi,[esi+0x0]
c0012a9c:	83 c4 1c             	add    esp,0x1c
c0012a9f:	c3                   	ret    

c0012aa0 <icmp_input>:
c0012aa0:	83 ec 2c             	sub    esp,0x2c
c0012aa3:	66 a1 82 67 03 c0    	mov    ax,ds:0xc0036782
c0012aa9:	83 c0 01             	add    eax,0x1
c0012aac:	66 a3 82 67 03 c0    	mov    ds:0xc0036782,ax
c0012ab2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ab6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ab9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012abd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012ac1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0012ac4:	0f b7 c0             	movzx  eax,ax
c0012ac7:	83 ec 0c             	sub    esp,0xc
c0012aca:	50                   	push   eax
c0012acb:	e8 18 e1 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0012ad0:	83 c4 10             	add    esp,0x10
c0012ad3:	0f b7 c0             	movzx  eax,ax
c0012ad6:	c1 e8 08             	shr    eax,0x8
c0012ad9:	83 e0 0f             	and    eax,0xf
c0012adc:	c1 e0 02             	shl    eax,0x2
c0012adf:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0012ae4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012ae9:	f7 d8                	neg    eax
c0012aeb:	98                   	cwde   
c0012aec:	83 ec 08             	sub    esp,0x8
c0012aef:	50                   	push   eax
c0012af0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012af4:	e8 c7 56 ff ff       	call   c00081c0 <pbuf_header>
c0012af9:	83 c4 10             	add    esp,0x10
c0012afc:	0f b6 c0             	movzx  eax,al
c0012aff:	85 c0                	test   eax,eax
c0012b01:	0f 85 a9 03 00 00    	jne    c0012eb0 <icmp_input+0x410>
c0012b07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b0b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012b0e:	0f b7 c0             	movzx  eax,ax
c0012b11:	83 f8 03             	cmp    eax,0x3
c0012b14:	0f 86 96 03 00 00    	jbe    c0012eb0 <icmp_input+0x410>
c0012b1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b21:	8a 00                	mov    al,BYTE PTR [eax]
c0012b23:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012b27:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012b2c:	85 c0                	test   eax,eax
c0012b2e:	0f 84 64 03 00 00    	je     c0012e98 <icmp_input+0x3f8>
c0012b34:	83 f8 08             	cmp    eax,0x8
c0012b37:	0f 85 3b 03 00 00    	jne    c0012e78 <icmp_input+0x3d8>
c0012b3d:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0012b45:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0012b4a:	25 f0 00 00 00       	and    eax,0xf0
c0012b4f:	3d e0 00 00 00       	cmp    eax,0xe0
c0012b54:	75 0a                	jne    c0012b60 <icmp_input+0xc0>
c0012b56:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012b5e:	66 90                	xchg   ax,ax
c0012b60:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0012b65:	83 ec 08             	sub    esp,0x8
c0012b68:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012b6c:	50                   	push   eax
c0012b6d:	e8 de 12 00 00       	call   c0013e50 <ip4_addr_isbroadcast>
c0012b72:	83 c4 10             	add    esp,0x10
c0012b75:	0f b6 c0             	movzx  eax,al
c0012b78:	85 c0                	test   eax,eax
c0012b7a:	74 08                	je     c0012b84 <icmp_input+0xe4>
c0012b7c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012b84:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012b89:	75 25                	jne    c0012bb0 <icmp_input+0x110>
c0012b8b:	66 a1 94 67 03 c0    	mov    ax,ds:0xc0036794
c0012b91:	83 c0 01             	add    eax,0x1
c0012b94:	66 a3 94 67 03 c0    	mov    ds:0xc0036794,ax
c0012b9a:	83 ec 0c             	sub    esp,0xc
c0012b9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ba1:	e8 b6 57 ff ff       	call   c000835c <pbuf_free>
c0012ba6:	83 c4 10             	add    esp,0x10
c0012ba9:	e9 4e 03 00 00       	jmp    c0012efc <icmp_input+0x45c>
c0012bae:	66 90                	xchg   ax,ax
c0012bb0:	90                   	nop
c0012bb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012bb5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012bb8:	0f b7 c0             	movzx  eax,ax
c0012bbb:	83 f8 07             	cmp    eax,0x7
c0012bbe:	0f 86 f0 02 00 00    	jbe    c0012eb4 <icmp_input+0x414>
c0012bc4:	83 ec 0c             	sub    esp,0xc
c0012bc7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012bcb:	e8 50 09 00 00       	call   c0013520 <inet_chksum_pbuf>
c0012bd0:	83 c4 10             	add    esp,0x10
c0012bd3:	0f b7 c0             	movzx  eax,ax
c0012bd6:	85 c0                	test   eax,eax
c0012bd8:	74 26                	je     c0012c00 <icmp_input+0x160>
c0012bda:	83 ec 0c             	sub    esp,0xc
c0012bdd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012be1:	e8 76 57 ff ff       	call   c000835c <pbuf_free>
c0012be6:	83 c4 10             	add    esp,0x10
c0012be9:	66 a1 88 67 03 c0    	mov    ax,ds:0xc0036788
c0012bef:	83 c0 01             	add    eax,0x1
c0012bf2:	66 a3 88 67 03 c0    	mov    ds:0xc0036788,ax
c0012bf8:	e9 ff 02 00 00       	jmp    c0012efc <icmp_input+0x45c>
c0012bfd:	8d 76 00             	lea    esi,[esi+0x0]
c0012c00:	83 ec 08             	sub    esp,0x8
c0012c03:	6a 22                	push   0x22
c0012c05:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c09:	e8 b2 55 ff ff       	call   c00081c0 <pbuf_header>
c0012c0e:	83 c4 10             	add    esp,0x10
c0012c11:	0f b6 c0             	movzx  eax,al
c0012c14:	85 c0                	test   eax,eax
c0012c16:	0f 84 24 01 00 00    	je     c0012d40 <icmp_input+0x2a0>
c0012c1c:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012c21:	83 ec 08             	sub    esp,0x8
c0012c24:	50                   	push   eax
c0012c25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c29:	e8 92 55 ff ff       	call   c00081c0 <pbuf_header>
c0012c2e:	83 c4 10             	add    esp,0x10
c0012c31:	0f b6 c0             	movzx  eax,al
c0012c34:	85 c0                	test   eax,eax
c0012c36:	74 1c                	je     c0012c54 <icmp_input+0x1b4>
c0012c38:	83 ec 08             	sub    esp,0x8
c0012c3b:	68 6c 0c 03 c0       	push   0xc0030c6c
c0012c40:	68 c6 fa 02 c0       	push   0xc002fac6
c0012c45:	e8 4a cf 00 00       	call   c001fb94 <CPrintf>
c0012c4a:	83 c4 10             	add    esp,0x10
c0012c4d:	e9 8a 02 00 00       	jmp    c0012edc <icmp_input+0x43c>
c0012c52:	66 90                	xchg   ax,ax
c0012c54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c58:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012c5b:	0f b7 c0             	movzx  eax,ax
c0012c5e:	83 ec 04             	sub    esp,0x4
c0012c61:	6a 00                	push   0x0
c0012c63:	50                   	push   eax
c0012c64:	6a 02                	push   0x2
c0012c66:	e8 c9 58 ff ff       	call   c0008534 <pbuf_alloc>
c0012c6b:	83 c4 10             	add    esp,0x10
c0012c6e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012c72:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012c77:	0f 84 5b 02 00 00    	je     c0012ed8 <icmp_input+0x438>
c0012c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c81:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012c85:	0f b7 c0             	movzx  eax,ax
c0012c88:	0f bf 54 24 16       	movsx  edx,WORD PTR [esp+0x16]
c0012c8d:	83 c2 08             	add    edx,0x8
c0012c90:	39 d0                	cmp    eax,edx
c0012c92:	73 18                	jae    c0012cac <icmp_input+0x20c>
c0012c94:	83 ec 08             	sub    esp,0x8
c0012c97:	68 a0 0c 03 c0       	push   0xc0030ca0
c0012c9c:	68 c6 fa 02 c0       	push   0xc002fac6
c0012ca1:	e8 ee ce 00 00       	call   c001fb94 <CPrintf>
c0012ca6:	83 c4 10             	add    esp,0x10
c0012ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0012cac:	83 ec 08             	sub    esp,0x8
c0012caf:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012cb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cb7:	e8 d8 60 ff ff       	call   c0008d94 <pbuf_copy>
c0012cbc:	83 c4 10             	add    esp,0x10
c0012cbf:	0f be c0             	movsx  eax,al
c0012cc2:	85 c0                	test   eax,eax
c0012cc4:	74 1a                	je     c0012ce0 <icmp_input+0x240>
c0012cc6:	83 ec 08             	sub    esp,0x8
c0012cc9:	68 d8 0c 03 c0       	push   0xc0030cd8
c0012cce:	68 c6 fa 02 c0       	push   0xc002fac6
c0012cd3:	e8 bc ce 00 00       	call   c001fb94 <CPrintf>
c0012cd8:	83 c4 10             	add    esp,0x10
c0012cdb:	e9 fc 01 00 00       	jmp    c0012edc <icmp_input+0x43c>
c0012ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ce4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ce7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012ceb:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012cf0:	f7 d8                	neg    eax
c0012cf2:	98                   	cwde   
c0012cf3:	83 ec 08             	sub    esp,0x8
c0012cf6:	50                   	push   eax
c0012cf7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cfb:	e8 c0 54 ff ff       	call   c00081c0 <pbuf_header>
c0012d00:	83 c4 10             	add    esp,0x10
c0012d03:	0f b6 c0             	movzx  eax,al
c0012d06:	85 c0                	test   eax,eax
c0012d08:	74 1a                	je     c0012d24 <icmp_input+0x284>
c0012d0a:	83 ec 08             	sub    esp,0x8
c0012d0d:	68 00 0d 03 c0       	push   0xc0030d00
c0012d12:	68 c6 fa 02 c0       	push   0xc002fac6
c0012d17:	e8 78 ce 00 00       	call   c001fb94 <CPrintf>
c0012d1c:	83 c4 10             	add    esp,0x10
c0012d1f:	e9 b8 01 00 00       	jmp    c0012edc <icmp_input+0x43c>
c0012d24:	83 ec 0c             	sub    esp,0xc
c0012d27:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d2b:	e8 2c 56 ff ff       	call   c000835c <pbuf_free>
c0012d30:	83 c4 10             	add    esp,0x10
c0012d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d37:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012d3b:	eb 37                	jmp    c0012d74 <icmp_input+0x2d4>
c0012d3d:	8d 76 00             	lea    esi,[esi+0x0]
c0012d40:	83 ec 08             	sub    esp,0x8
c0012d43:	6a de                	push   0xffffffde
c0012d45:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d49:	e8 72 54 ff ff       	call   c00081c0 <pbuf_header>
c0012d4e:	83 c4 10             	add    esp,0x10
c0012d51:	0f b6 c0             	movzx  eax,al
c0012d54:	85 c0                	test   eax,eax
c0012d56:	74 1c                	je     c0012d74 <icmp_input+0x2d4>
c0012d58:	83 ec 08             	sub    esp,0x8
c0012d5b:	68 00 0d 03 c0       	push   0xc0030d00
c0012d60:	68 c6 fa 02 c0       	push   0xc002fac6
c0012d65:	e8 2a ce 00 00       	call   c001fb94 <CPrintf>
c0012d6a:	83 c4 10             	add    esp,0x10
c0012d6d:	e9 6a 01 00 00       	jmp    c0012edc <icmp_input+0x43c>
c0012d72:	66 90                	xchg   ax,ax
c0012d74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012d7f:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c0012d85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012d89:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012d8c:	8b 15 90 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036890
c0012d92:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012d96:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012d99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d9d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012da0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012da4:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012da8:	0f b7 c0             	movzx  eax,ax
c0012dab:	3d f6 ff 00 00       	cmp    eax,0xfff6
c0012db0:	76 16                	jbe    c0012dc8 <icmp_input+0x328>
c0012db2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012db6:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012dba:	83 c0 09             	add    eax,0x9
c0012dbd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012dc1:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0012dc5:	eb 15                	jmp    c0012ddc <icmp_input+0x33c>
c0012dc7:	90                   	nop
c0012dc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012dcc:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012dd0:	83 c0 08             	add    eax,0x8
c0012dd3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012dd7:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0012ddb:	90                   	nop
c0012ddc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012de0:	c6 40 08 ff          	mov    BYTE PTR [eax+0x8],0xff
c0012de4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012de8:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0012dee:	83 ec 08             	sub    esp,0x8
c0012df1:	6a 14                	push   0x14
c0012df3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012df7:	e8 fc 06 00 00       	call   c00134f8 <inet_chksum>
c0012dfc:	83 c4 10             	add    esp,0x10
c0012dff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012e03:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0012e07:	66 a1 80 67 03 c0    	mov    ax,ds:0xc0036780
c0012e0d:	83 c0 01             	add    eax,0x1
c0012e10:	66 a3 80 67 03 c0    	mov    ds:0xc0036780,ax
c0012e16:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012e1b:	83 ec 08             	sub    esp,0x8
c0012e1e:	50                   	push   eax
c0012e1f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012e23:	e8 98 53 ff ff       	call   c00081c0 <pbuf_header>
c0012e28:	83 c4 10             	add    esp,0x10
c0012e2b:	0f b6 c0             	movzx  eax,al
c0012e2e:	85 c0                	test   eax,eax
c0012e30:	74 1a                	je     c0012e4c <icmp_input+0x3ac>
c0012e32:	83 ec 08             	sub    esp,0x8
c0012e35:	68 e8 0b 03 c0       	push   0xc0030be8
c0012e3a:	68 c6 fa 02 c0       	push   0xc002fac6
c0012e3f:	e8 50 cd 00 00       	call   c001fb94 <CPrintf>
c0012e44:	83 c4 10             	add    esp,0x10
c0012e47:	eb 53                	jmp    c0012e9c <icmp_input+0x3fc>
c0012e49:	8d 76 00             	lea    esi,[esi+0x0]
c0012e4c:	83 ec 04             	sub    esp,0x4
c0012e4f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012e53:	6a 01                	push   0x1
c0012e55:	6a 00                	push   0x0
c0012e57:	68 ff 00 00 00       	push   0xff
c0012e5c:	6a 00                	push   0x0
c0012e5e:	68 98 68 03 c0       	push   0xc0036898
c0012e63:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e67:	e8 70 0c 00 00       	call   c0013adc <ip_output_if>
c0012e6c:	83 c4 20             	add    esp,0x20
c0012e6f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012e73:	eb 27                	jmp    c0012e9c <icmp_input+0x3fc>
c0012e75:	8d 76 00             	lea    esi,[esi+0x0]
c0012e78:	66 a1 90 67 03 c0    	mov    ax,ds:0xc0036790
c0012e7e:	83 c0 01             	add    eax,0x1
c0012e81:	66 a3 90 67 03 c0    	mov    ds:0xc0036790,ax
c0012e87:	66 a1 86 67 03 c0    	mov    ax,ds:0xc0036786
c0012e8d:	83 c0 01             	add    eax,0x1
c0012e90:	66 a3 86 67 03 c0    	mov    ds:0xc0036786,ax
c0012e96:	eb 04                	jmp    c0012e9c <icmp_input+0x3fc>
c0012e98:	90                   	nop
c0012e99:	8d 76 00             	lea    esi,[esi+0x0]
c0012e9c:	83 ec 0c             	sub    esp,0xc
c0012e9f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ea3:	e8 b4 54 ff ff       	call   c000835c <pbuf_free>
c0012ea8:	83 c4 10             	add    esp,0x10
c0012eab:	eb 4f                	jmp    c0012efc <icmp_input+0x45c>
c0012ead:	8d 76 00             	lea    esi,[esi+0x0]
c0012eb0:	90                   	nop
c0012eb1:	eb 05                	jmp    c0012eb8 <icmp_input+0x418>
c0012eb3:	90                   	nop
c0012eb4:	90                   	nop
c0012eb5:	8d 76 00             	lea    esi,[esi+0x0]
c0012eb8:	83 ec 0c             	sub    esp,0xc
c0012ebb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ebf:	e8 98 54 ff ff       	call   c000835c <pbuf_free>
c0012ec4:	83 c4 10             	add    esp,0x10
c0012ec7:	66 a1 8a 67 03 c0    	mov    ax,ds:0xc003678a
c0012ecd:	83 c0 01             	add    eax,0x1
c0012ed0:	66 a3 8a 67 03 c0    	mov    ds:0xc003678a,ax
c0012ed6:	eb 24                	jmp    c0012efc <icmp_input+0x45c>
c0012ed8:	90                   	nop
c0012ed9:	8d 76 00             	lea    esi,[esi+0x0]
c0012edc:	83 ec 0c             	sub    esp,0xc
c0012edf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ee3:	e8 74 54 ff ff       	call   c000835c <pbuf_free>
c0012ee8:	83 c4 10             	add    esp,0x10
c0012eeb:	66 a1 94 67 03 c0    	mov    ax,ds:0xc0036794
c0012ef1:	83 c0 01             	add    eax,0x1
c0012ef4:	66 a3 94 67 03 c0    	mov    ds:0xc0036794,ax
c0012efa:	90                   	nop
c0012efb:	90                   	nop
c0012efc:	83 c4 2c             	add    esp,0x2c
c0012eff:	c3                   	ret    

c0012f00 <icmp_send_response>:
c0012f00:	83 ec 2c             	sub    esp,0x2c
c0012f03:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012f07:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012f0b:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0012f0f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0012f13:	83 ec 04             	sub    esp,0x4
c0012f16:	6a 00                	push   0x0
c0012f18:	6a 24                	push   0x24
c0012f1a:	6a 01                	push   0x1
c0012f1c:	e8 13 56 ff ff       	call   c0008534 <pbuf_alloc>
c0012f21:	83 c4 10             	add    esp,0x10
c0012f24:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012f28:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012f2d:	0f 84 fd 00 00 00    	je     c0013030 <icmp_send_response+0x130>
c0012f33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f37:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012f3b:	0f b7 c0             	movzx  eax,ax
c0012f3e:	83 f8 23             	cmp    eax,0x23
c0012f41:	77 15                	ja     c0012f58 <icmp_send_response+0x58>
c0012f43:	83 ec 08             	sub    esp,0x8
c0012f46:	68 34 0d 03 c0       	push   0xc0030d34
c0012f4b:	68 c6 fa 02 c0       	push   0xc002fac6
c0012f50:	e8 3f cc 00 00       	call   c001fb94 <CPrintf>
c0012f55:	83 c4 10             	add    esp,0x10
c0012f58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012f63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f6a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012f6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f72:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012f76:	88 10                	mov    BYTE PTR [eax],dl
c0012f78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f7c:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c0012f80:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012f83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f87:	66 c7 40 04 00 00    	mov    WORD PTR [eax+0x4],0x0
c0012f8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f91:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0012f97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f9b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f9e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012fa2:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0012fa5:	83 c2 08             	add    edx,0x8
c0012fa8:	83 ec 04             	sub    esp,0x4
c0012fab:	6a 1c                	push   0x1c
c0012fad:	50                   	push   eax
c0012fae:	52                   	push   edx
c0012faf:	e8 c6 d3 fe ff       	call   c000037a <memcpy>
c0012fb4:	83 c4 10             	add    esp,0x10
c0012fb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fbb:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c0012fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fc5:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012fc9:	0f b7 c0             	movzx  eax,ax
c0012fcc:	83 ec 08             	sub    esp,0x8
c0012fcf:	50                   	push   eax
c0012fd0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012fd4:	e8 1f 05 00 00       	call   c00134f8 <inet_chksum>
c0012fd9:	83 c4 10             	add    esp,0x10
c0012fdc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012fe0:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0012fe4:	66 a1 80 67 03 c0    	mov    ax,ds:0xc0036780
c0012fea:	83 c0 01             	add    eax,0x1
c0012fed:	66 a3 80 67 03 c0    	mov    ds:0xc0036780,ax
c0012ff3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ff7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012ffa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012ffe:	83 ec 08             	sub    esp,0x8
c0013001:	6a 01                	push   0x1
c0013003:	6a 00                	push   0x0
c0013005:	68 ff 00 00 00       	push   0xff
c001300a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001300e:	50                   	push   eax
c001300f:	6a 00                	push   0x0
c0013011:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0013015:	e8 92 0d 00 00       	call   c0013dac <ip_output>
c001301a:	83 c4 20             	add    esp,0x20
c001301d:	83 ec 0c             	sub    esp,0xc
c0013020:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013024:	e8 33 53 ff ff       	call   c000835c <pbuf_free>
c0013029:	83 c4 10             	add    esp,0x10
c001302c:	eb 06                	jmp    c0013034 <icmp_send_response+0x134>
c001302e:	66 90                	xchg   ax,ax
c0013030:	90                   	nop
c0013031:	8d 76 00             	lea    esi,[esi+0x0]
c0013034:	83 c4 2c             	add    esp,0x2c
c0013037:	c3                   	ret    

c0013038 <icmp_dest_unreach>:
c0013038:	83 ec 0c             	sub    esp,0xc
c001303b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001303f:	0f b6 c0             	movzx  eax,al
c0013042:	83 ec 04             	sub    esp,0x4
c0013045:	50                   	push   eax
c0013046:	6a 03                	push   0x3
c0013048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001304c:	e8 af fe ff ff       	call   c0012f00 <icmp_send_response>
c0013051:	83 c4 10             	add    esp,0x10
c0013054:	90                   	nop
c0013055:	83 c4 0c             	add    esp,0xc
c0013058:	c3                   	ret    
c0013059:	8d 76 00             	lea    esi,[esi+0x0]

c001305c <icmp_time_exceeded>:
c001305c:	83 ec 0c             	sub    esp,0xc
c001305f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013063:	0f b6 c0             	movzx  eax,al
c0013066:	83 ec 04             	sub    esp,0x4
c0013069:	50                   	push   eax
c001306a:	6a 0b                	push   0xb
c001306c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013070:	e8 8b fe ff ff       	call   c0012f00 <icmp_send_response>
c0013075:	83 c4 10             	add    esp,0x10
c0013078:	90                   	nop
c0013079:	83 c4 0c             	add    esp,0xc
c001307c:	c3                   	ret    
c001307d:	66 90                	xchg   ax,ax
c001307f:	90                   	nop

c0013080 <lwip_standard_chksum>:
c0013080:	83 ec 2c             	sub    esp,0x2c
c0013083:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013087:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001308b:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0013092:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001309a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001309e:	83 e0 01             	and    eax,0x1
c00130a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00130a5:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00130aa:	74 24                	je     c00130d0 <lwip_standard_chksum+0x50>
c00130ac:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00130b1:	7e 1d                	jle    c00130d0 <lwip_standard_chksum+0x50>
c00130b3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00130b7:	8d 42 01             	lea    eax,[edx+0x1]
c00130ba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00130be:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00130c2:	83 c0 01             	add    eax,0x1
c00130c5:	8a 12                	mov    dl,BYTE PTR [edx]
c00130c7:	88 10                	mov    BYTE PTR [eax],dl
c00130c9:	83 6c 24 34 01       	sub    DWORD PTR [esp+0x34],0x1
c00130ce:	66 90                	xchg   ax,ax
c00130d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00130d8:	eb 1e                	jmp    c00130f8 <lwip_standard_chksum+0x78>
c00130da:	66 90                	xchg   ax,ax
c00130dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130e0:	8d 50 02             	lea    edx,[eax+0x2]
c00130e3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00130e7:	66 8b 00             	mov    ax,WORD PTR [eax]
c00130ea:	0f b7 c0             	movzx  eax,ax
c00130ed:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00130f1:	83 6c 24 34 02       	sub    DWORD PTR [esp+0x34],0x2
c00130f6:	66 90                	xchg   ax,ax
c00130f8:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c00130fd:	7f dd                	jg     c00130dc <lwip_standard_chksum+0x5c>
c00130ff:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0013104:	7e 0e                	jle    c0013114 <lwip_standard_chksum+0x94>
c0013106:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001310a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001310e:	8a 12                	mov    dl,BYTE PTR [edx]
c0013110:	88 10                	mov    BYTE PTR [eax],dl
c0013112:	66 90                	xchg   ax,ax
c0013114:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0013119:	0f b7 c0             	movzx  eax,ax
c001311c:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013120:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013124:	c1 e8 10             	shr    eax,0x10
c0013127:	89 c2                	mov    edx,eax
c0013129:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001312d:	0f b7 c0             	movzx  eax,ax
c0013130:	01 d0                	add    eax,edx
c0013132:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013136:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001313a:	c1 e8 10             	shr    eax,0x10
c001313d:	89 c2                	mov    edx,eax
c001313f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013143:	0f b7 c0             	movzx  eax,ax
c0013146:	01 d0                	add    eax,edx
c0013148:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001314c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013151:	74 1d                	je     c0013170 <lwip_standard_chksum+0xf0>
c0013153:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013157:	0f b7 c0             	movzx  eax,ax
c001315a:	83 ec 0c             	sub    esp,0xc
c001315d:	50                   	push   eax
c001315e:	e8 85 da fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013163:	83 c4 10             	add    esp,0x10
c0013166:	0f b7 c0             	movzx  eax,ax
c0013169:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001316d:	8d 76 00             	lea    esi,[esi+0x0]
c0013170:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013174:	83 c4 2c             	add    esp,0x2c
c0013177:	c3                   	ret    

c0013178 <inet_chksum_pseudo>:
c0013178:	83 ec 2c             	sub    esp,0x2c
c001317b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001317f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013183:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0013187:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001318c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013194:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013199:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001319d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00131a1:	e9 8a 00 00 00       	jmp    c0013230 <inet_chksum_pseudo+0xb8>
c00131a6:	66 90                	xchg   ax,ax
c00131a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131ac:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00131b0:	0f b7 d0             	movzx  edx,ax
c00131b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00131ba:	83 ec 08             	sub    esp,0x8
c00131bd:	52                   	push   edx
c00131be:	50                   	push   eax
c00131bf:	e8 bc fe ff ff       	call   c0013080 <lwip_standard_chksum>
c00131c4:	83 c4 10             	add    esp,0x10
c00131c7:	0f b7 c0             	movzx  eax,ax
c00131ca:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00131ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131d2:	c1 e8 10             	shr    eax,0x10
c00131d5:	89 c2                	mov    edx,eax
c00131d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131db:	0f b7 c0             	movzx  eax,ax
c00131de:	01 d0                	add    eax,edx
c00131e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00131e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131e8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00131ec:	83 e0 01             	and    eax,0x1
c00131ef:	0f b7 c0             	movzx  eax,ax
c00131f2:	85 c0                	test   eax,eax
c00131f4:	74 2e                	je     c0013224 <inet_chksum_pseudo+0xac>
c00131f6:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00131fa:	ba 01 00 00 00       	mov    edx,0x1
c00131ff:	29 c2                	sub    edx,eax
c0013201:	89 d0                	mov    eax,edx
c0013203:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0013207:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001320b:	0f b7 c0             	movzx  eax,ax
c001320e:	83 ec 0c             	sub    esp,0xc
c0013211:	50                   	push   eax
c0013212:	e8 d1 d9 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013217:	83 c4 10             	add    esp,0x10
c001321a:	0f b7 c0             	movzx  eax,ax
c001321d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013221:	8d 76 00             	lea    esi,[esi+0x0]
c0013224:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013228:	8b 00                	mov    eax,DWORD PTR [eax]
c001322a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001322e:	66 90                	xchg   ax,ax
c0013230:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013235:	0f 85 6d ff ff ff    	jne    c00131a8 <inet_chksum_pseudo+0x30>
c001323b:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0013240:	85 c0                	test   eax,eax
c0013242:	74 1c                	je     c0013260 <inet_chksum_pseudo+0xe8>
c0013244:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013248:	0f b7 c0             	movzx  eax,ax
c001324b:	83 ec 0c             	sub    esp,0xc
c001324e:	50                   	push   eax
c001324f:	e8 94 d9 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013254:	83 c4 10             	add    esp,0x10
c0013257:	0f b7 c0             	movzx  eax,ax
c001325a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001325e:	66 90                	xchg   ax,ax
c0013260:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013264:	8b 00                	mov    eax,DWORD PTR [eax]
c0013266:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001326a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001326e:	0f b7 c0             	movzx  eax,ax
c0013271:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013275:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013279:	c1 e8 10             	shr    eax,0x10
c001327c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013280:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013284:	8b 00                	mov    eax,DWORD PTR [eax]
c0013286:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001328a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001328e:	0f b7 c0             	movzx  eax,ax
c0013291:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013299:	c1 e8 10             	shr    eax,0x10
c001329c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00132a0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00132a5:	83 ec 0c             	sub    esp,0xc
c00132a8:	50                   	push   eax
c00132a9:	e8 3a d9 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00132ae:	83 c4 10             	add    esp,0x10
c00132b1:	0f b7 c0             	movzx  eax,ax
c00132b4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00132b8:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00132bd:	83 ec 0c             	sub    esp,0xc
c00132c0:	50                   	push   eax
c00132c1:	e8 22 d9 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00132c6:	83 c4 10             	add    esp,0x10
c00132c9:	0f b7 c0             	movzx  eax,ax
c00132cc:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00132d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132d4:	c1 e8 10             	shr    eax,0x10
c00132d7:	89 c2                	mov    edx,eax
c00132d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132dd:	0f b7 c0             	movzx  eax,ax
c00132e0:	01 d0                	add    eax,edx
c00132e2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00132e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132ea:	c1 e8 10             	shr    eax,0x10
c00132ed:	89 c2                	mov    edx,eax
c00132ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132f3:	0f b7 c0             	movzx  eax,ax
c00132f6:	01 d0                	add    eax,edx
c00132f8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00132fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013300:	f7 d0                	not    eax
c0013302:	83 c4 2c             	add    esp,0x2c
c0013305:	c3                   	ret    
c0013306:	66 90                	xchg   ax,ax

c0013308 <inet_chksum_pseudo_partial>:
c0013308:	83 ec 2c             	sub    esp,0x2c
c001330b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001330f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013313:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0013317:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001331b:	66 89 54 24 08       	mov    WORD PTR [esp+0x8],dx
c0013320:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0013325:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001332d:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013332:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013336:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001333a:	e9 d9 00 00 00       	jmp    c0013418 <inet_chksum_pseudo_partial+0x110>
c001333f:	90                   	nop
c0013340:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013344:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013348:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001334d:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c0013352:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013357:	39 c2                	cmp    edx,eax
c0013359:	76 09                	jbe    c0013364 <inet_chksum_pseudo_partial+0x5c>
c001335b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001335f:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0013364:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c0013369:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001336d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013370:	83 ec 08             	sub    esp,0x8
c0013373:	52                   	push   edx
c0013374:	50                   	push   eax
c0013375:	e8 06 fd ff ff       	call   c0013080 <lwip_standard_chksum>
c001337a:	83 c4 10             	add    esp,0x10
c001337d:	0f b7 c0             	movzx  eax,ax
c0013380:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013384:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013388:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001338c:	89 d1                	mov    ecx,edx
c001338e:	29 c1                	sub    ecx,eax
c0013390:	89 c8                	mov    eax,ecx
c0013392:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0013397:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001339c:	3d fe 7f 00 00       	cmp    eax,0x7ffe
c00133a1:	76 15                	jbe    c00133b8 <inet_chksum_pseudo_partial+0xb0>
c00133a3:	83 ec 08             	sub    esp,0x8
c00133a6:	68 60 0d 03 c0       	push   0xc0030d60
c00133ab:	68 c6 fa 02 c0       	push   0xc002fac6
c00133b0:	e8 df c7 00 00       	call   c001fb94 <CPrintf>
c00133b5:	83 c4 10             	add    esp,0x10
c00133b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133bc:	c1 e8 10             	shr    eax,0x10
c00133bf:	89 c2                	mov    edx,eax
c00133c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133c5:	0f b7 c0             	movzx  eax,ax
c00133c8:	01 d0                	add    eax,edx
c00133ca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00133ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133d2:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00133d6:	83 e0 01             	and    eax,0x1
c00133d9:	0f b7 c0             	movzx  eax,ax
c00133dc:	85 c0                	test   eax,eax
c00133de:	74 2c                	je     c001340c <inet_chksum_pseudo_partial+0x104>
c00133e0:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00133e4:	ba 01 00 00 00       	mov    edx,0x1
c00133e9:	29 c2                	sub    edx,eax
c00133eb:	89 d0                	mov    eax,edx
c00133ed:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00133f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133f5:	0f b7 c0             	movzx  eax,ax
c00133f8:	83 ec 0c             	sub    esp,0xc
c00133fb:	50                   	push   eax
c00133fc:	e8 e7 d7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013401:	83 c4 10             	add    esp,0x10
c0013404:	0f b7 c0             	movzx  eax,ax
c0013407:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001340b:	90                   	nop
c001340c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013410:	8b 00                	mov    eax,DWORD PTR [eax]
c0013412:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013416:	66 90                	xchg   ax,ax
c0013418:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001341d:	74 0d                	je     c001342c <inet_chksum_pseudo_partial+0x124>
c001341f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013424:	85 c0                	test   eax,eax
c0013426:	0f 85 14 ff ff ff    	jne    c0013340 <inet_chksum_pseudo_partial+0x38>
c001342c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0013431:	85 c0                	test   eax,eax
c0013433:	74 1b                	je     c0013450 <inet_chksum_pseudo_partial+0x148>
c0013435:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013439:	0f b7 c0             	movzx  eax,ax
c001343c:	83 ec 0c             	sub    esp,0xc
c001343f:	50                   	push   eax
c0013440:	e8 a3 d7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013445:	83 c4 10             	add    esp,0x10
c0013448:	0f b7 c0             	movzx  eax,ax
c001344b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001344f:	90                   	nop
c0013450:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013454:	8b 00                	mov    eax,DWORD PTR [eax]
c0013456:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001345a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001345e:	0f b7 c0             	movzx  eax,ax
c0013461:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013469:	c1 e8 10             	shr    eax,0x10
c001346c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013470:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013474:	8b 00                	mov    eax,DWORD PTR [eax]
c0013476:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001347a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001347e:	0f b7 c0             	movzx  eax,ax
c0013481:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013485:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013489:	c1 e8 10             	shr    eax,0x10
c001348c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013490:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013495:	83 ec 0c             	sub    esp,0xc
c0013498:	50                   	push   eax
c0013499:	e8 4a d7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001349e:	83 c4 10             	add    esp,0x10
c00134a1:	0f b7 c0             	movzx  eax,ax
c00134a4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00134a8:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00134ad:	83 ec 0c             	sub    esp,0xc
c00134b0:	50                   	push   eax
c00134b1:	e8 32 d7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00134b6:	83 c4 10             	add    esp,0x10
c00134b9:	0f b7 c0             	movzx  eax,ax
c00134bc:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00134c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134c4:	c1 e8 10             	shr    eax,0x10
c00134c7:	89 c2                	mov    edx,eax
c00134c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134cd:	0f b7 c0             	movzx  eax,ax
c00134d0:	01 d0                	add    eax,edx
c00134d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134da:	c1 e8 10             	shr    eax,0x10
c00134dd:	89 c2                	mov    edx,eax
c00134df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134e3:	0f b7 c0             	movzx  eax,ax
c00134e6:	01 d0                	add    eax,edx
c00134e8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134f0:	f7 d0                	not    eax
c00134f2:	83 c4 2c             	add    esp,0x2c
c00134f5:	c3                   	ret    
c00134f6:	66 90                	xchg   ax,ax

c00134f8 <inet_chksum>:
c00134f8:	83 ec 1c             	sub    esp,0x1c
c00134fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00134ff:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0013504:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0013509:	83 ec 08             	sub    esp,0x8
c001350c:	50                   	push   eax
c001350d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013511:	e8 6a fb ff ff       	call   c0013080 <lwip_standard_chksum>
c0013516:	83 c4 10             	add    esp,0x10
c0013519:	f7 d0                	not    eax
c001351b:	83 c4 1c             	add    esp,0x1c
c001351e:	c3                   	ret    
c001351f:	90                   	nop

c0013520 <inet_chksum_pbuf>:
c0013520:	83 ec 1c             	sub    esp,0x1c
c0013523:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001352b:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c0013530:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013534:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013538:	e9 8b 00 00 00       	jmp    c00135c8 <inet_chksum_pbuf+0xa8>
c001353d:	8d 76 00             	lea    esi,[esi+0x0]
c0013540:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013544:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013548:	0f b7 d0             	movzx  edx,ax
c001354b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001354f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013552:	83 ec 08             	sub    esp,0x8
c0013555:	52                   	push   edx
c0013556:	50                   	push   eax
c0013557:	e8 24 fb ff ff       	call   c0013080 <lwip_standard_chksum>
c001355c:	83 c4 10             	add    esp,0x10
c001355f:	0f b7 c0             	movzx  eax,ax
c0013562:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0013566:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001356a:	c1 e8 10             	shr    eax,0x10
c001356d:	89 c2                	mov    edx,eax
c001356f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013573:	0f b7 c0             	movzx  eax,ax
c0013576:	01 d0                	add    eax,edx
c0013578:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001357c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013580:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013584:	83 e0 01             	and    eax,0x1
c0013587:	0f b7 c0             	movzx  eax,ax
c001358a:	85 c0                	test   eax,eax
c001358c:	74 2e                	je     c00135bc <inet_chksum_pbuf+0x9c>
c001358e:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0013592:	ba 01 00 00 00       	mov    edx,0x1
c0013597:	29 c2                	sub    edx,eax
c0013599:	89 d0                	mov    eax,edx
c001359b:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001359f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135a3:	0f b7 c0             	movzx  eax,ax
c00135a6:	83 ec 0c             	sub    esp,0xc
c00135a9:	50                   	push   eax
c00135aa:	e8 39 d6 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00135af:	83 c4 10             	add    esp,0x10
c00135b2:	0f b7 c0             	movzx  eax,ax
c00135b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00135b9:	8d 76 00             	lea    esi,[esi+0x0]
c00135bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00135c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00135c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00135c6:	66 90                	xchg   ax,ax
c00135c8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00135cd:	0f 85 6d ff ff ff    	jne    c0013540 <inet_chksum_pbuf+0x20>
c00135d3:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c00135d8:	85 c0                	test   eax,eax
c00135da:	74 1c                	je     c00135f8 <inet_chksum_pbuf+0xd8>
c00135dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135e0:	0f b7 c0             	movzx  eax,ax
c00135e3:	83 ec 0c             	sub    esp,0xc
c00135e6:	50                   	push   eax
c00135e7:	e8 fc d5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00135ec:	83 c4 10             	add    esp,0x10
c00135ef:	0f b7 c0             	movzx  eax,ax
c00135f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00135f6:	66 90                	xchg   ax,ax
c00135f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135fc:	f7 d0                	not    eax
c00135fe:	83 c4 1c             	add    esp,0x1c
c0013601:	c3                   	ret    
c0013602:	66 90                	xchg   ax,ax

c0013604 <ip_route>:
c0013604:	83 ec 10             	sub    esp,0x10
c0013607:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c001360c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013610:	eb 42                	jmp    c0013654 <ip_route+0x50>
c0013612:	66 90                	xchg   ax,ax
c0013614:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013618:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c001361b:	83 e0 01             	and    eax,0x1
c001361e:	0f b6 c0             	movzx  eax,al
c0013621:	85 c0                	test   eax,eax
c0013623:	74 23                	je     c0013648 <ip_route+0x44>
c0013625:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013629:	8b 10                	mov    edx,DWORD PTR [eax]
c001362b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001362f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013632:	31 c2                	xor    edx,eax
c0013634:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013638:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001363b:	21 d0                	and    eax,edx
c001363d:	75 09                	jne    c0013648 <ip_route+0x44>
c001363f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013643:	eb 4f                	jmp    c0013694 <ip_route+0x90>
c0013645:	8d 76 00             	lea    esi,[esi+0x0]
c0013648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001364c:	8b 00                	mov    eax,DWORD PTR [eax]
c001364e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013652:	66 90                	xchg   ax,ax
c0013654:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013659:	75 b9                	jne    c0013614 <ip_route+0x10>
c001365b:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0013660:	85 c0                	test   eax,eax
c0013662:	74 10                	je     c0013674 <ip_route+0x70>
c0013664:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0013669:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c001366c:	0f b6 c0             	movzx  eax,al
c001366f:	83 e0 01             	and    eax,0x1
c0013672:	75 18                	jne    c001368c <ip_route+0x88>
c0013674:	66 a1 76 67 03 c0    	mov    ax,ds:0xc0036776
c001367a:	83 c0 01             	add    eax,0x1
c001367d:	66 a3 76 67 03 c0    	mov    ds:0xc0036776,ax
c0013683:	b8 00 00 00 00       	mov    eax,0x0
c0013688:	eb 0a                	jmp    c0013694 <ip_route+0x90>
c001368a:	66 90                	xchg   ax,ax
c001368c:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0013691:	8d 76 00             	lea    esi,[esi+0x0]
c0013694:	83 c4 10             	add    esp,0x10
c0013697:	c3                   	ret    

c0013698 <ip_input>:
c0013698:	83 ec 1c             	sub    esp,0x1c
c001369b:	66 a1 6a 67 03 c0    	mov    ax,ds:0xc003676a
c00136a1:	83 c0 01             	add    eax,0x1
c00136a4:	66 a3 6a 67 03 c0    	mov    ds:0xc003676a,ax
c00136aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00136b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00136b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00136b9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00136bc:	0f b7 c0             	movzx  eax,ax
c00136bf:	83 ec 0c             	sub    esp,0xc
c00136c2:	50                   	push   eax
c00136c3:	e8 20 d5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00136c8:	83 c4 10             	add    esp,0x10
c00136cb:	0f b7 c0             	movzx  eax,ax
c00136ce:	c1 e8 0c             	shr    eax,0xc
c00136d1:	0f b7 c0             	movzx  eax,ax
c00136d4:	83 f8 04             	cmp    eax,0x4
c00136d7:	74 37                	je     c0013710 <ip_input+0x78>
c00136d9:	83 ec 0c             	sub    esp,0xc
c00136dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00136e0:	e8 77 4c ff ff       	call   c000835c <pbuf_free>
c00136e5:	83 c4 10             	add    esp,0x10
c00136e8:	66 a1 7c 67 03 c0    	mov    ax,ds:0xc003677c
c00136ee:	83 c0 01             	add    eax,0x1
c00136f1:	66 a3 7c 67 03 c0    	mov    ds:0xc003677c,ax
c00136f7:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c00136fd:	83 c0 01             	add    eax,0x1
c0013700:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013706:	b0 00                	mov    al,0x0
c0013708:	e9 cb 03 00 00       	jmp    c0013ad8 <ip_input+0x440>
c001370d:	8d 76 00             	lea    esi,[esi+0x0]
c0013710:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013714:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013717:	0f b7 c0             	movzx  eax,ax
c001371a:	83 ec 0c             	sub    esp,0xc
c001371d:	50                   	push   eax
c001371e:	e8 c5 d4 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013723:	83 c4 10             	add    esp,0x10
c0013726:	0f b7 c0             	movzx  eax,ax
c0013729:	c1 e8 08             	shr    eax,0x8
c001372c:	83 e0 0f             	and    eax,0xf
c001372f:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c0013734:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c0013739:	c1 e0 02             	shl    eax,0x2
c001373c:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c0013741:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013745:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0013749:	0f b7 c0             	movzx  eax,ax
c001374c:	83 ec 0c             	sub    esp,0xc
c001374f:	50                   	push   eax
c0013750:	e8 93 d4 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013755:	83 c4 10             	add    esp,0x10
c0013758:	66 89 04 24          	mov    WORD PTR [esp],ax
c001375c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013760:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013764:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c0013769:	0f b7 c0             	movzx  eax,ax
c001376c:	39 c2                	cmp    edx,eax
c001376e:	77 14                	ja     c0013784 <ip_input+0xec>
c0013770:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013774:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013777:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c001377b:	0f b7 c0             	movzx  eax,ax
c001377e:	39 c2                	cmp    edx,eax
c0013780:	76 36                	jbe    c00137b8 <ip_input+0x120>
c0013782:	66 90                	xchg   ax,ax
c0013784:	83 ec 0c             	sub    esp,0xc
c0013787:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001378b:	e8 cc 4b ff ff       	call   c000835c <pbuf_free>
c0013790:	83 c4 10             	add    esp,0x10
c0013793:	66 a1 72 67 03 c0    	mov    ax,ds:0xc0036772
c0013799:	83 c0 01             	add    eax,0x1
c001379c:	66 a3 72 67 03 c0    	mov    ds:0xc0036772,ax
c00137a2:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c00137a8:	83 c0 01             	add    eax,0x1
c00137ab:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c00137b1:	b0 00                	mov    al,0x0
c00137b3:	e9 20 03 00 00       	jmp    c0013ad8 <ip_input+0x440>
c00137b8:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c00137bd:	83 ec 08             	sub    esp,0x8
c00137c0:	50                   	push   eax
c00137c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137c5:	e8 2e fd ff ff       	call   c00134f8 <inet_chksum>
c00137ca:	83 c4 10             	add    esp,0x10
c00137cd:	0f b7 c0             	movzx  eax,ax
c00137d0:	85 c0                	test   eax,eax
c00137d2:	74 34                	je     c0013808 <ip_input+0x170>
c00137d4:	83 ec 0c             	sub    esp,0xc
c00137d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00137db:	e8 7c 4b ff ff       	call   c000835c <pbuf_free>
c00137e0:	83 c4 10             	add    esp,0x10
c00137e3:	66 a1 70 67 03 c0    	mov    ax,ds:0xc0036770
c00137e9:	83 c0 01             	add    eax,0x1
c00137ec:	66 a3 70 67 03 c0    	mov    ds:0xc0036770,ax
c00137f2:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c00137f8:	83 c0 01             	add    eax,0x1
c00137fb:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013801:	b0 00                	mov    al,0x0
c0013803:	e9 d0 02 00 00       	jmp    c0013ad8 <ip_input+0x440>
c0013808:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001380c:	83 ec 08             	sub    esp,0x8
c001380f:	50                   	push   eax
c0013810:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013814:	e8 13 51 ff ff       	call   c000892c <pbuf_realloc>
c0013819:	83 c4 10             	add    esp,0x10
c001381c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013820:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013823:	a3 98 68 03 c0       	mov    ds:0xc0036898,eax
c0013828:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001382c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001382f:	a3 90 68 03 c0       	mov    ds:0xc0036890,eax
c0013834:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001383c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013840:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013844:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013848:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c001384b:	83 e0 01             	and    eax,0x1
c001384e:	0f b6 c0             	movzx  eax,al
c0013851:	85 c0                	test   eax,eax
c0013853:	74 43                	je     c0013898 <ip_input+0x200>
c0013855:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013859:	83 c0 04             	add    eax,0x4
c001385c:	74 3a                	je     c0013898 <ip_input+0x200>
c001385e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013862:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013865:	85 c0                	test   eax,eax
c0013867:	74 2f                	je     c0013898 <ip_input+0x200>
c0013869:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c001386f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013873:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013876:	39 c2                	cmp    edx,eax
c0013878:	74 66                	je     c00138e0 <ip_input+0x248>
c001387a:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c001387f:	83 ec 08             	sub    esp,0x8
c0013882:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013886:	50                   	push   eax
c0013887:	e8 c4 05 00 00       	call   c0013e50 <ip4_addr_isbroadcast>
c001388c:	83 c4 10             	add    esp,0x10
c001388f:	0f b6 c0             	movzx  eax,al
c0013892:	85 c0                	test   eax,eax
c0013894:	75 4a                	jne    c00138e0 <ip_input+0x248>
c0013896:	66 90                	xchg   ax,ax
c0013898:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001389d:	74 15                	je     c00138b4 <ip_input+0x21c>
c001389f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00138a7:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c00138ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138b0:	eb 0e                	jmp    c00138c0 <ip_input+0x228>
c00138b2:	66 90                	xchg   ax,ax
c00138b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00138b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00138ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138be:	66 90                	xchg   ax,ax
c00138c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00138c4:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c00138c8:	75 0a                	jne    c00138d4 <ip_input+0x23c>
c00138ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00138ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00138d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138d4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00138d9:	0f 85 65 ff ff ff    	jne    c0013844 <ip_input+0x1ac>
c00138df:	90                   	nop
c00138e0:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c00138e5:	83 ec 08             	sub    esp,0x8
c00138e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138ec:	50                   	push   eax
c00138ed:	e8 5e 05 00 00       	call   c0013e50 <ip4_addr_isbroadcast>
c00138f2:	83 c4 10             	add    esp,0x10
c00138f5:	0f b6 c0             	movzx  eax,al
c00138f8:	85 c0                	test   eax,eax
c00138fa:	75 14                	jne    c0013910 <ip_input+0x278>
c00138fc:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c0013901:	25 f0 00 00 00       	and    eax,0xf0
c0013906:	3d e0 00 00 00       	cmp    eax,0xe0
c001390b:	75 2b                	jne    c0013938 <ip_input+0x2a0>
c001390d:	8d 76 00             	lea    esi,[esi+0x0]
c0013910:	83 ec 0c             	sub    esp,0xc
c0013913:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013917:	e8 40 4a ff ff       	call   c000835c <pbuf_free>
c001391c:	83 c4 10             	add    esp,0x10
c001391f:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013925:	83 c0 01             	add    eax,0x1
c0013928:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c001392e:	b0 00                	mov    al,0x0
c0013930:	e9 a3 01 00 00       	jmp    c0013ad8 <ip_input+0x440>
c0013935:	8d 76 00             	lea    esi,[esi+0x0]
c0013938:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001393d:	75 19                	jne    c0013958 <ip_input+0x2c0>
c001393f:	83 ec 0c             	sub    esp,0xc
c0013942:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013946:	e8 11 4a ff ff       	call   c000835c <pbuf_free>
c001394b:	83 c4 10             	add    esp,0x10
c001394e:	b0 00                	mov    al,0x0
c0013950:	e9 83 01 00 00       	jmp    c0013ad8 <ip_input+0x440>
c0013955:	8d 76 00             	lea    esi,[esi+0x0]
c0013958:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001395c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0013960:	0f b7 c0             	movzx  eax,ax
c0013963:	25 3f ff 00 00       	and    eax,0xff3f
c0013968:	74 2e                	je     c0013998 <ip_input+0x300>
c001396a:	83 ec 0c             	sub    esp,0xc
c001396d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013971:	e8 7a 13 00 00       	call   c0014cf0 <ip_reass>
c0013976:	83 c4 10             	add    esp,0x10
c0013979:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001397d:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0013982:	75 08                	jne    c001398c <ip_input+0x2f4>
c0013984:	b0 00                	mov    al,0x0
c0013986:	e9 4d 01 00 00       	jmp    c0013ad8 <ip_input+0x440>
c001398b:	90                   	nop
c001398c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013990:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013993:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013997:	90                   	nop
c0013998:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001399c:	a3 94 68 03 c0       	mov    ds:0xc0036894,eax
c00139a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139a5:	a3 9c 68 03 c0       	mov    ds:0xc003689c,eax
c00139aa:	83 ec 08             	sub    esp,0x8
c00139ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139b5:	e8 c6 5c ff ff       	call   c0009680 <raw_input>
c00139ba:	83 c4 10             	add    esp,0x10
c00139bd:	0f b6 c0             	movzx  eax,al
c00139c0:	85 c0                	test   eax,eax
c00139c2:	0f 85 e0 00 00 00    	jne    c0013aa8 <ip_input+0x410>
c00139c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139cc:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c00139cf:	0f b6 c0             	movzx  eax,al
c00139d2:	83 f8 06             	cmp    eax,0x6
c00139d5:	74 25                	je     c00139fc <ip_input+0x364>
c00139d7:	83 f8 11             	cmp    eax,0x11
c00139da:	74 08                	je     c00139e4 <ip_input+0x34c>
c00139dc:	83 f8 01             	cmp    eax,0x1
c00139df:	74 33                	je     c0013a14 <ip_input+0x37c>
c00139e1:	eb 49                	jmp    c0013a2c <ip_input+0x394>
c00139e3:	90                   	nop
c00139e4:	83 ec 08             	sub    esp,0x8
c00139e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139ef:	e8 c0 d3 ff ff       	call   c0010db4 <udp_input>
c00139f4:	83 c4 10             	add    esp,0x10
c00139f7:	e9 b0 00 00 00       	jmp    c0013aac <ip_input+0x414>
c00139fc:	83 ec 08             	sub    esp,0x8
c00139ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a07:	e8 00 a5 ff ff       	call   c000df0c <tcp_input>
c0013a0c:	83 c4 10             	add    esp,0x10
c0013a0f:	e9 98 00 00 00       	jmp    c0013aac <ip_input+0x414>
c0013a14:	83 ec 08             	sub    esp,0x8
c0013a17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a1f:	e8 7c f0 ff ff       	call   c0012aa0 <icmp_input>
c0013a24:	83 c4 10             	add    esp,0x10
c0013a27:	e9 80 00 00 00       	jmp    c0013aac <ip_input+0x414>
c0013a2c:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013a31:	83 ec 08             	sub    esp,0x8
c0013a34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a38:	50                   	push   eax
c0013a39:	e8 12 04 00 00       	call   c0013e50 <ip4_addr_isbroadcast>
c0013a3e:	83 c4 10             	add    esp,0x10
c0013a41:	0f b6 c0             	movzx  eax,al
c0013a44:	85 c0                	test   eax,eax
c0013a46:	75 30                	jne    c0013a78 <ip_input+0x3e0>
c0013a48:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013a4d:	25 f0 00 00 00       	and    eax,0xf0
c0013a52:	3d e0 00 00 00       	cmp    eax,0xe0
c0013a57:	74 1f                	je     c0013a78 <ip_input+0x3e0>
c0013a59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013a5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013a61:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013a64:	83 ec 08             	sub    esp,0x8
c0013a67:	6a 02                	push   0x2
c0013a69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a6d:	e8 c6 f5 ff ff       	call   c0013038 <icmp_dest_unreach>
c0013a72:	83 c4 10             	add    esp,0x10
c0013a75:	8d 76 00             	lea    esi,[esi+0x0]
c0013a78:	83 ec 0c             	sub    esp,0xc
c0013a7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a7f:	e8 d8 48 ff ff       	call   c000835c <pbuf_free>
c0013a84:	83 c4 10             	add    esp,0x10
c0013a87:	66 a1 78 67 03 c0    	mov    ax,ds:0xc0036778
c0013a8d:	83 c0 01             	add    eax,0x1
c0013a90:	66 a3 78 67 03 c0    	mov    ds:0xc0036778,ax
c0013a96:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013a9c:	83 c0 01             	add    eax,0x1
c0013a9f:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013aa5:	eb 05                	jmp    c0013aac <ip_input+0x414>
c0013aa7:	90                   	nop
c0013aa8:	90                   	nop
c0013aa9:	8d 76 00             	lea    esi,[esi+0x0]
c0013aac:	c7 05 94 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036894,0x0
c0013ab6:	c7 05 9c 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003689c,0x0
c0013ac0:	c7 05 90 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036890,0x0
c0013aca:	c7 05 98 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036898,0x0
c0013ad4:	b0 00                	mov    al,0x0
c0013ad6:	66 90                	xchg   ax,ax
c0013ad8:	83 c4 1c             	add    esp,0x1c
c0013adb:	c3                   	ret    

c0013adc <ip_output_if>:
c0013adc:	83 ec 2c             	sub    esp,0x2c
c0013adf:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013ae3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013ae7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0013aeb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013aef:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c0013af3:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013af7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013aff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b03:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0013b07:	0f b7 c0             	movzx  eax,ax
c0013b0a:	83 f8 01             	cmp    eax,0x1
c0013b0d:	74 15                	je     c0013b24 <ip_output_if+0x48>
c0013b0f:	83 ec 08             	sub    esp,0x8
c0013b12:	68 6a 0d 03 c0       	push   0xc0030d6a
c0013b17:	68 c6 fa 02 c0       	push   0xc002fac6
c0013b1c:	e8 73 c0 00 00       	call   c001fb94 <CPrintf>
c0013b21:	83 c4 10             	add    esp,0x10
c0013b24:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0013b29:	0f 84 ed 01 00 00    	je     c0013d1c <ip_output_if+0x240>
c0013b2f:	66 c7 44 24 1a 14 00 	mov    WORD PTR [esp+0x1a],0x14
c0013b36:	83 ec 08             	sub    esp,0x8
c0013b39:	6a 14                	push   0x14
c0013b3b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013b3f:	e8 7c 46 ff ff       	call   c00081c0 <pbuf_header>
c0013b44:	83 c4 10             	add    esp,0x10
c0013b47:	0f b6 c0             	movzx  eax,al
c0013b4a:	85 c0                	test   eax,eax
c0013b4c:	74 16                	je     c0013b64 <ip_output_if+0x88>
c0013b4e:	66 a1 7c 67 03 c0    	mov    ax,ds:0xc003677c
c0013b54:	83 c0 01             	add    eax,0x1
c0013b57:	66 a3 7c 67 03 c0    	mov    ds:0xc003677c,ax
c0013b5d:	b0 fe                	mov    al,0xfe
c0013b5f:	e9 44 02 00 00       	jmp    c0013da8 <ip_output_if+0x2cc>
c0013b64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013b6b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b73:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013b77:	0f b7 c0             	movzx  eax,ax
c0013b7a:	83 f8 13             	cmp    eax,0x13
c0013b7d:	77 15                	ja     c0013b94 <ip_output_if+0xb8>
c0013b7f:	83 ec 08             	sub    esp,0x8
c0013b82:	68 78 0d 03 c0       	push   0xc0030d78
c0013b87:	68 c6 fa 02 c0       	push   0xc002fac6
c0013b8c:	e8 03 c0 00 00       	call   c001fb94 <CPrintf>
c0013b91:	83 c4 10             	add    esp,0x10
c0013b94:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b98:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013b9c:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0013b9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ba3:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013ba7:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0013baa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0013baf:	c1 e0 08             	shl    eax,0x8
c0013bb2:	89 c2                	mov    edx,eax
c0013bb4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013bb9:	09 d0                	or     eax,edx
c0013bbb:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013bbf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013bc3:	8b 10                	mov    edx,DWORD PTR [eax]
c0013bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bc9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013bcc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bd0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013bd3:	0f b7 c0             	movzx  eax,ax
c0013bd6:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013bda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bde:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013be1:	c1 e8 10             	shr    eax,0x10
c0013be4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013be8:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c0013bed:	c1 e8 02             	shr    eax,0x2
c0013bf0:	0f b7 c0             	movzx  eax,ax
c0013bf3:	c1 e0 08             	shl    eax,0x8
c0013bf6:	80 cc 40             	or     ah,0x40
c0013bf9:	89 c2                	mov    edx,eax
c0013bfb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013c00:	09 d0                	or     eax,edx
c0013c02:	0f b7 c0             	movzx  eax,ax
c0013c05:	83 ec 0c             	sub    esp,0xc
c0013c08:	50                   	push   eax
c0013c09:	e8 da cf fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013c0e:	83 c4 10             	add    esp,0x10
c0013c11:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013c15:	66 89 02             	mov    WORD PTR [edx],ax
c0013c18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c1c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013c1f:	0f b7 c0             	movzx  eax,ax
c0013c22:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013c26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c2a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013c2d:	0f b7 c0             	movzx  eax,ax
c0013c30:	83 ec 0c             	sub    esp,0xc
c0013c33:	50                   	push   eax
c0013c34:	e8 af cf fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013c39:	83 c4 10             	add    esp,0x10
c0013c3c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013c40:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0013c44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c48:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0013c4c:	0f b7 c0             	movzx  eax,ax
c0013c4f:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013c53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c57:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0013c5d:	66 a1 a0 a9 03 c0    	mov    ax,ds:0xc003a9a0
c0013c63:	0f b7 c0             	movzx  eax,ax
c0013c66:	83 ec 0c             	sub    esp,0xc
c0013c69:	50                   	push   eax
c0013c6a:	e8 79 cf fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013c6f:	83 c4 10             	add    esp,0x10
c0013c72:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013c76:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0013c7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c7e:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0013c82:	0f b7 c0             	movzx  eax,ax
c0013c85:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013c89:	66 a1 a0 a9 03 c0    	mov    ax,ds:0xc003a9a0
c0013c8f:	83 c0 01             	add    eax,0x1
c0013c92:	66 a3 a0 a9 03 c0    	mov    ds:0xc003a9a0,ax
c0013c98:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0013c9d:	74 0d                	je     c0013cac <ip_output_if+0x1d0>
c0013c9f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013ca3:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ca5:	85 c0                	test   eax,eax
c0013ca7:	75 13                	jne    c0013cbc <ip_output_if+0x1e0>
c0013ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0013cac:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013cb0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0013cb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cb7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013cba:	eb 10                	jmp    c0013ccc <ip_output_if+0x1f0>
c0013cbc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013cc0:	8b 10                	mov    edx,DWORD PTR [eax]
c0013cc2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cc6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013cc9:	8d 76 00             	lea    esi,[esi+0x0]
c0013ccc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cd0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013cd3:	0f b7 c0             	movzx  eax,ax
c0013cd6:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013cda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cde:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013ce1:	c1 e8 10             	shr    eax,0x10
c0013ce4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013ce8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cec:	c1 e8 10             	shr    eax,0x10
c0013cef:	89 c2                	mov    edx,eax
c0013cf1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cf5:	0f b7 c0             	movzx  eax,ax
c0013cf8:	01 d0                	add    eax,edx
c0013cfa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013cfe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d02:	c1 e8 10             	shr    eax,0x10
c0013d05:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013d09:	f7 54 24 1c          	not    DWORD PTR [esp+0x1c]
c0013d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d11:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013d15:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0013d19:	eb 21                	jmp    c0013d3c <ip_output_if+0x260>
c0013d1b:	90                   	nop
c0013d1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013d23:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013d2e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d32:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013d36:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0013d3a:	66 90                	xchg   ax,ax
c0013d3c:	66 a1 68 67 03 c0    	mov    ax,ds:0xc0036768
c0013d42:	83 c0 01             	add    eax,0x1
c0013d45:	66 a3 68 67 03 c0    	mov    ds:0xc0036768,ax
c0013d4b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013d4f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013d52:	0f b7 c0             	movzx  eax,ax
c0013d55:	85 c0                	test   eax,eax
c0013d57:	74 33                	je     c0013d8c <ip_output_if+0x2b0>
c0013d59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d5d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0013d60:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013d64:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013d67:	0f b7 d2             	movzx  edx,dx
c0013d6a:	0f b7 c0             	movzx  eax,ax
c0013d6d:	39 c2                	cmp    edx,eax
c0013d6f:	76 1b                	jbe    c0013d8c <ip_output_if+0x2b0>
c0013d71:	83 ec 04             	sub    esp,0x4
c0013d74:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013d78:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013d7c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013d80:	e8 2b 14 00 00       	call   c00151b0 <ip_frag>
c0013d85:	83 c4 10             	add    esp,0x10
c0013d88:	eb 1e                	jmp    c0013da8 <ip_output_if+0x2cc>
c0013d8a:	66 90                	xchg   ax,ax
c0013d8c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013d90:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0013d93:	83 ec 04             	sub    esp,0x4
c0013d96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013d9a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0013d9e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013da2:	ff d0                	call   eax
c0013da4:	83 c4 10             	add    esp,0x10
c0013da7:	90                   	nop
c0013da8:	83 c4 2c             	add    esp,0x2c
c0013dab:	c3                   	ret    

c0013dac <ip_output>:
c0013dac:	83 ec 2c             	sub    esp,0x2c
c0013daf:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013db3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013db7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0013dbb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013dbf:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c0013dc3:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013dc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013dcb:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0013dcf:	0f b7 c0             	movzx  eax,ax
c0013dd2:	83 f8 01             	cmp    eax,0x1
c0013dd5:	74 15                	je     c0013dec <ip_output+0x40>
c0013dd7:	83 ec 08             	sub    esp,0x8
c0013dda:	68 6a 0d 03 c0       	push   0xc0030d6a
c0013ddf:	68 c6 fa 02 c0       	push   0xc002fac6
c0013de4:	e8 ab bd 00 00       	call   c001fb94 <CPrintf>
c0013de9:	83 c4 10             	add    esp,0x10
c0013dec:	83 ec 0c             	sub    esp,0xc
c0013def:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0013df3:	e8 0c f8 ff ff       	call   c0013604 <ip_route>
c0013df8:	83 c4 10             	add    esp,0x10
c0013dfb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013dff:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013e04:	75 16                	jne    c0013e1c <ip_output+0x70>
c0013e06:	66 a1 76 67 03 c0    	mov    ax,ds:0xc0036776
c0013e0c:	83 c0 01             	add    eax,0x1
c0013e0f:	66 a3 76 67 03 c0    	mov    ds:0xc0036776,ax
c0013e15:	b0 fc                	mov    al,0xfc
c0013e17:	eb 33                	jmp    c0013e4c <ip_output+0xa0>
c0013e19:	8d 76 00             	lea    esi,[esi+0x0]
c0013e1c:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0013e21:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0013e26:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013e2b:	83 ec 04             	sub    esp,0x4
c0013e2e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013e32:	51                   	push   ecx
c0013e33:	52                   	push   edx
c0013e34:	50                   	push   eax
c0013e35:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013e39:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013e3d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013e41:	e8 96 fc ff ff       	call   c0013adc <ip_output_if>
c0013e46:	83 c4 20             	add    esp,0x20
c0013e49:	8d 76 00             	lea    esi,[esi+0x0]
c0013e4c:	83 c4 2c             	add    esp,0x2c
c0013e4f:	c3                   	ret    

c0013e50 <ip4_addr_isbroadcast>:
c0013e50:	83 ec 10             	sub    esp,0x10
c0013e53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013e5b:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0013e60:	74 0a                	je     c0013e6c <ip4_addr_isbroadcast+0x1c>
c0013e62:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0013e67:	75 07                	jne    c0013e70 <ip4_addr_isbroadcast+0x20>
c0013e69:	8d 76 00             	lea    esi,[esi+0x0]
c0013e6c:	b0 01                	mov    al,0x1
c0013e6e:	eb 64                	jmp    c0013ed4 <ip4_addr_isbroadcast+0x84>
c0013e70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e74:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013e77:	0f b6 c0             	movzx  eax,al
c0013e7a:	83 e0 02             	and    eax,0x2
c0013e7d:	75 05                	jne    c0013e84 <ip4_addr_isbroadcast+0x34>
c0013e7f:	b0 00                	mov    al,0x0
c0013e81:	eb 51                	jmp    c0013ed4 <ip4_addr_isbroadcast+0x84>
c0013e83:	90                   	nop
c0013e84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013e8b:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0013e8f:	75 07                	jne    c0013e98 <ip4_addr_isbroadcast+0x48>
c0013e91:	b0 00                	mov    al,0x0
c0013e93:	eb 3f                	jmp    c0013ed4 <ip4_addr_isbroadcast+0x84>
c0013e95:	8d 76 00             	lea    esi,[esi+0x0]
c0013e98:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013e9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ea0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013ea3:	31 c2                	xor    edx,eax
c0013ea5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ea9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013eac:	21 d0                	and    eax,edx
c0013eae:	75 20                	jne    c0013ed0 <ip4_addr_isbroadcast+0x80>
c0013eb0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013eb4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013eb7:	f7 d0                	not    eax
c0013eb9:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0013ebd:	89 c2                	mov    edx,eax
c0013ebf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ec3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013ec6:	f7 d0                	not    eax
c0013ec8:	39 c2                	cmp    edx,eax
c0013eca:	75 04                	jne    c0013ed0 <ip4_addr_isbroadcast+0x80>
c0013ecc:	b0 01                	mov    al,0x1
c0013ece:	eb 04                	jmp    c0013ed4 <ip4_addr_isbroadcast+0x84>
c0013ed0:	b0 00                	mov    al,0x0
c0013ed2:	66 90                	xchg   ax,ax
c0013ed4:	83 c4 10             	add    esp,0x10
c0013ed7:	c3                   	ret    

c0013ed8 <ip4_addr_netmask_valid>:
c0013ed8:	83 ec 1c             	sub    esp,0x1c
c0013edb:	83 ec 0c             	sub    esp,0xc
c0013ede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ee2:	e8 25 cd fe ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0013ee7:	83 c4 10             	add    esp,0x10
c0013eea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013eee:	c7 44 24 0c 00 00 00 80 	mov    DWORD PTR [esp+0xc],0x80000000
c0013ef6:	eb 10                	jmp    c0013f08 <ip4_addr_netmask_valid+0x30>
c0013ef8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013efc:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c0013f00:	74 12                	je     c0013f14 <ip4_addr_netmask_valid+0x3c>
c0013f02:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c0013f06:	66 90                	xchg   ax,ax
c0013f08:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013f0d:	75 e9                	jne    c0013ef8 <ip4_addr_netmask_valid+0x20>
c0013f0f:	eb 1b                	jmp    c0013f2c <ip4_addr_netmask_valid+0x54>
c0013f11:	8d 76 00             	lea    esi,[esi+0x0]
c0013f14:	90                   	nop
c0013f15:	eb 15                	jmp    c0013f2c <ip4_addr_netmask_valid+0x54>
c0013f17:	90                   	nop
c0013f18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013f1c:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c0013f20:	74 06                	je     c0013f28 <ip4_addr_netmask_valid+0x50>
c0013f22:	b0 00                	mov    al,0x0
c0013f24:	eb 12                	jmp    c0013f38 <ip4_addr_netmask_valid+0x60>
c0013f26:	66 90                	xchg   ax,ax
c0013f28:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c0013f2c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013f31:	75 e5                	jne    c0013f18 <ip4_addr_netmask_valid+0x40>
c0013f33:	b0 01                	mov    al,0x1
c0013f35:	8d 76 00             	lea    esi,[esi+0x0]
c0013f38:	83 c4 1c             	add    esp,0x1c
c0013f3b:	c3                   	ret    

c0013f3c <ipaddr_aton>:
c0013f3c:	83 ec 2c             	sub    esp,0x2c
c0013f3f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0013f43:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f4b:	8a 00                	mov    al,BYTE PTR [eax]
c0013f4d:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0013f51:	8d 76 00             	lea    esi,[esi+0x0]
c0013f54:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013f58:	0f b6 c0             	movzx  eax,al
c0013f5b:	83 f8 2f             	cmp    eax,0x2f
c0013f5e:	76 0c                	jbe    c0013f6c <ipaddr_aton+0x30>
c0013f60:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013f64:	0f b6 c0             	movzx  eax,al
c0013f67:	83 f8 39             	cmp    eax,0x39
c0013f6a:	76 0c                	jbe    c0013f78 <ipaddr_aton+0x3c>
c0013f6c:	b8 00 00 00 00       	mov    eax,0x0
c0013f71:	e9 f2 02 00 00       	jmp    c0014268 <ipaddr_aton+0x32c>
c0013f76:	66 90                	xchg   ax,ax
c0013f78:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013f80:	c6 44 24 1b 0a       	mov    BYTE PTR [esp+0x1b],0xa
c0013f85:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013f8a:	83 f8 30             	cmp    eax,0x30
c0013f8d:	75 45                	jne    c0013fd4 <ipaddr_aton+0x98>
c0013f8f:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0013f94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f98:	8a 00                	mov    al,BYTE PTR [eax]
c0013f9a:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0013f9e:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013fa3:	83 f8 78             	cmp    eax,0x78
c0013fa6:	74 0c                	je     c0013fb4 <ipaddr_aton+0x78>
c0013fa8:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013fad:	83 f8 58             	cmp    eax,0x58
c0013fb0:	75 1a                	jne    c0013fcc <ipaddr_aton+0x90>
c0013fb2:	66 90                	xchg   ax,ax
c0013fb4:	c6 44 24 1b 10       	mov    BYTE PTR [esp+0x1b],0x10
c0013fb9:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0013fbe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013fc2:	8a 00                	mov    al,BYTE PTR [eax]
c0013fc4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0013fc8:	eb 0a                	jmp    c0013fd4 <ipaddr_aton+0x98>
c0013fca:	66 90                	xchg   ax,ax
c0013fcc:	c6 44 24 1b 08       	mov    BYTE PTR [esp+0x1b],0x8
c0013fd1:	8d 76 00             	lea    esi,[esi+0x0]
c0013fd4:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013fd8:	0f b6 c0             	movzx  eax,al
c0013fdb:	83 f8 2f             	cmp    eax,0x2f
c0013fde:	76 3c                	jbe    c001401c <ipaddr_aton+0xe0>
c0013fe0:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013fe4:	0f b6 c0             	movzx  eax,al
c0013fe7:	83 f8 39             	cmp    eax,0x39
c0013fea:	77 30                	ja     c001401c <ipaddr_aton+0xe0>
c0013fec:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0013ff1:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0013ff6:	89 c2                	mov    edx,eax
c0013ff8:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013ffd:	01 d0                	add    eax,edx
c0013fff:	83 e8 30             	sub    eax,0x30
c0014002:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014006:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c001400b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001400f:	8a 00                	mov    al,BYTE PTR [eax]
c0014011:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014015:	e9 ae 00 00 00       	jmp    c00140c8 <ipaddr_aton+0x18c>
c001401a:	66 90                	xchg   ax,ax
c001401c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0014021:	83 f8 10             	cmp    eax,0x10
c0014024:	0f 85 a6 00 00 00    	jne    c00140d0 <ipaddr_aton+0x194>
c001402a:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001402e:	0f b6 c0             	movzx  eax,al
c0014031:	83 f8 2f             	cmp    eax,0x2f
c0014034:	76 0e                	jbe    c0014044 <ipaddr_aton+0x108>
c0014036:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001403a:	0f b6 c0             	movzx  eax,al
c001403d:	83 f8 39             	cmp    eax,0x39
c0014040:	76 32                	jbe    c0014074 <ipaddr_aton+0x138>
c0014042:	66 90                	xchg   ax,ax
c0014044:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014048:	0f b6 c0             	movzx  eax,al
c001404b:	83 f8 60             	cmp    eax,0x60
c001404e:	76 0c                	jbe    c001405c <ipaddr_aton+0x120>
c0014050:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014054:	0f b6 c0             	movzx  eax,al
c0014057:	83 f8 66             	cmp    eax,0x66
c001405a:	76 18                	jbe    c0014074 <ipaddr_aton+0x138>
c001405c:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014060:	0f b6 c0             	movzx  eax,al
c0014063:	83 f8 40             	cmp    eax,0x40
c0014066:	76 68                	jbe    c00140d0 <ipaddr_aton+0x194>
c0014068:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001406c:	0f b6 c0             	movzx  eax,al
c001406f:	83 f8 46             	cmp    eax,0x46
c0014072:	77 5c                	ja     c00140d0 <ipaddr_aton+0x194>
c0014074:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014078:	c1 e0 04             	shl    eax,0x4
c001407b:	89 c2                	mov    edx,eax
c001407d:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014082:	8d 48 0a             	lea    ecx,[eax+0xa]
c0014085:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014089:	0f b6 c0             	movzx  eax,al
c001408c:	83 f8 60             	cmp    eax,0x60
c001408f:	76 13                	jbe    c00140a4 <ipaddr_aton+0x168>
c0014091:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014095:	0f b6 c0             	movzx  eax,al
c0014098:	83 f8 7a             	cmp    eax,0x7a
c001409b:	77 07                	ja     c00140a4 <ipaddr_aton+0x168>
c001409d:	b8 61 00 00 00       	mov    eax,0x61
c00140a2:	eb 08                	jmp    c00140ac <ipaddr_aton+0x170>
c00140a4:	b8 41 00 00 00       	mov    eax,0x41
c00140a9:	8d 76 00             	lea    esi,[esi+0x0]
c00140ac:	29 c1                	sub    ecx,eax
c00140ae:	89 c8                	mov    eax,ecx
c00140b0:	09 d0                	or     eax,edx
c00140b2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00140b6:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c00140bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00140bf:	8a 00                	mov    al,BYTE PTR [eax]
c00140c1:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00140c5:	8d 76 00             	lea    esi,[esi+0x0]
c00140c8:	e9 07 ff ff ff       	jmp    c0013fd4 <ipaddr_aton+0x98>
c00140cd:	8d 76 00             	lea    esi,[esi+0x0]
c00140d0:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00140d5:	83 f8 2e             	cmp    eax,0x2e
c00140d8:	75 42                	jne    c001411c <ipaddr_aton+0x1e0>
c00140da:	8d 44 24 04          	lea    eax,[esp+0x4]
c00140de:	83 c0 0c             	add    eax,0xc
c00140e1:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00140e5:	72 0d                	jb     c00140f4 <ipaddr_aton+0x1b8>
c00140e7:	b8 00 00 00 00       	mov    eax,0x0
c00140ec:	e9 77 01 00 00       	jmp    c0014268 <ipaddr_aton+0x32c>
c00140f1:	8d 76 00             	lea    esi,[esi+0x0]
c00140f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00140f8:	8d 50 04             	lea    edx,[eax+0x4]
c00140fb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00140ff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014103:	89 10                	mov    DWORD PTR [eax],edx
c0014105:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c001410a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001410e:	8a 00                	mov    al,BYTE PTR [eax]
c0014110:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014114:	e9 3b fe ff ff       	jmp    c0013f54 <ipaddr_aton+0x18>
c0014119:	8d 76 00             	lea    esi,[esi+0x0]
c001411c:	90                   	nop
c001411d:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014122:	85 c0                	test   eax,eax
c0014124:	74 46                	je     c001416c <ipaddr_aton+0x230>
c0014126:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001412b:	83 f8 20             	cmp    eax,0x20
c001412e:	74 3c                	je     c001416c <ipaddr_aton+0x230>
c0014130:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014135:	83 f8 0c             	cmp    eax,0xc
c0014138:	74 32                	je     c001416c <ipaddr_aton+0x230>
c001413a:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001413f:	83 f8 0a             	cmp    eax,0xa
c0014142:	74 28                	je     c001416c <ipaddr_aton+0x230>
c0014144:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014149:	83 f8 0d             	cmp    eax,0xd
c001414c:	74 1e                	je     c001416c <ipaddr_aton+0x230>
c001414e:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014153:	83 f8 09             	cmp    eax,0x9
c0014156:	74 14                	je     c001416c <ipaddr_aton+0x230>
c0014158:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001415d:	83 f8 0b             	cmp    eax,0xb
c0014160:	74 0a                	je     c001416c <ipaddr_aton+0x230>
c0014162:	b8 00 00 00 00       	mov    eax,0x0
c0014167:	e9 fc 00 00 00       	jmp    c0014268 <ipaddr_aton+0x32c>
c001416c:	8d 44 24 04          	lea    eax,[esp+0x4]
c0014170:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014174:	29 c2                	sub    edx,eax
c0014176:	89 d0                	mov    eax,edx
c0014178:	c1 f8 02             	sar    eax,0x2
c001417b:	83 c0 01             	add    eax,0x1
c001417e:	83 f8 04             	cmp    eax,0x4
c0014181:	0f 87 9d 00 00 00    	ja     c0014224 <ipaddr_aton+0x2e8>
c0014187:	8b 04 85 b0 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf250]
c001418e:	ff e0                	jmp    eax
c0014190:	b8 00 00 00 00       	mov    eax,0x0
c0014195:	e9 ce 00 00 00       	jmp    c0014268 <ipaddr_aton+0x32c>
c001419a:	66 90                	xchg   ax,ax
c001419c:	81 7c 24 1c ff ff ff 00 	cmp    DWORD PTR [esp+0x1c],0xffffff
c00141a4:	76 0a                	jbe    c00141b0 <ipaddr_aton+0x274>
c00141a6:	b8 00 00 00 00       	mov    eax,0x0
c00141ab:	e9 b8 00 00 00       	jmp    c0014268 <ipaddr_aton+0x32c>
c00141b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141b4:	c1 e0 18             	shl    eax,0x18
c00141b7:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c00141bb:	e9 80 00 00 00       	jmp    c0014240 <ipaddr_aton+0x304>
c00141c0:	81 7c 24 1c ff ff 00 00 	cmp    DWORD PTR [esp+0x1c],0xffff
c00141c8:	76 0a                	jbe    c00141d4 <ipaddr_aton+0x298>
c00141ca:	b8 00 00 00 00       	mov    eax,0x0
c00141cf:	e9 94 00 00 00       	jmp    c0014268 <ipaddr_aton+0x32c>
c00141d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141d8:	c1 e0 18             	shl    eax,0x18
c00141db:	89 c2                	mov    edx,eax
c00141dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00141e1:	c1 e0 10             	shl    eax,0x10
c00141e4:	09 d0                	or     eax,edx
c00141e6:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c00141ea:	eb 54                	jmp    c0014240 <ipaddr_aton+0x304>
c00141ec:	81 7c 24 1c ff 00 00 00 	cmp    DWORD PTR [esp+0x1c],0xff
c00141f4:	76 0a                	jbe    c0014200 <ipaddr_aton+0x2c4>
c00141f6:	b8 00 00 00 00       	mov    eax,0x0
c00141fb:	eb 6b                	jmp    c0014268 <ipaddr_aton+0x32c>
c00141fd:	8d 76 00             	lea    esi,[esi+0x0]
c0014200:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014204:	c1 e0 18             	shl    eax,0x18
c0014207:	89 c2                	mov    edx,eax
c0014209:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001420d:	c1 e0 10             	shl    eax,0x10
c0014210:	09 c2                	or     edx,eax
c0014212:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014216:	c1 e0 08             	shl    eax,0x8
c0014219:	09 d0                	or     eax,edx
c001421b:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c001421f:	eb 1f                	jmp    c0014240 <ipaddr_aton+0x304>
c0014221:	8d 76 00             	lea    esi,[esi+0x0]
c0014224:	83 ec 08             	sub    esp,0x8
c0014227:	68 a5 0d 03 c0       	push   0xc0030da5
c001422c:	68 c6 fa 02 c0       	push   0xc002fac6
c0014231:	e8 5e b9 00 00       	call   c001fb94 <CPrintf>
c0014236:	83 c4 10             	add    esp,0x10
c0014239:	eb 05                	jmp    c0014240 <ipaddr_aton+0x304>
c001423b:	90                   	nop
c001423c:	90                   	nop
c001423d:	8d 76 00             	lea    esi,[esi+0x0]
c0014240:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0014245:	74 19                	je     c0014260 <ipaddr_aton+0x324>
c0014247:	83 ec 0c             	sub    esp,0xc
c001424a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001424e:	e8 b9 c9 fe ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0014253:	83 c4 10             	add    esp,0x10
c0014256:	89 c2                	mov    edx,eax
c0014258:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001425c:	89 10                	mov    DWORD PTR [eax],edx
c001425e:	66 90                	xchg   ax,ax
c0014260:	b8 01 00 00 00       	mov    eax,0x1
c0014265:	8d 76 00             	lea    esi,[esi+0x0]
c0014268:	83 c4 2c             	add    esp,0x2c
c001426b:	c3                   	ret    

c001426c <ipaddr_addr>:
c001426c:	83 ec 1c             	sub    esp,0x1c
c001426f:	83 ec 08             	sub    esp,0x8
c0014272:	8d 44 24 14          	lea    eax,[esp+0x14]
c0014276:	50                   	push   eax
c0014277:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001427b:	e8 bc fc ff ff       	call   c0013f3c <ipaddr_aton>
c0014280:	83 c4 10             	add    esp,0x10
c0014283:	85 c0                	test   eax,eax
c0014285:	74 09                	je     c0014290 <ipaddr_addr+0x24>
c0014287:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001428b:	eb 0b                	jmp    c0014298 <ipaddr_addr+0x2c>
c001428d:	8d 76 00             	lea    esi,[esi+0x0]
c0014290:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014295:	8d 76 00             	lea    esi,[esi+0x0]
c0014298:	83 c4 1c             	add    esp,0x1c
c001429b:	c3                   	ret    

c001429c <ipaddr_ntoa_r>:
c001429c:	83 ec 20             	sub    esp,0x20
c001429f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00142a7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00142ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00142ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00142b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00142b5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00142b9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00142bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00142c1:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00142c6:	e9 f9 00 00 00       	jmp    c00143c4 <ipaddr_ntoa_r+0x128>
c00142cb:	90                   	nop
c00142cc:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c00142d1:	8d 76 00             	lea    esi,[esi+0x0]
c00142d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142d8:	8a 00                	mov    al,BYTE PTR [eax]
c00142da:	0f b6 c8             	movzx  ecx,al
c00142dd:	ba cd cc cc cc       	mov    edx,0xcccccccd
c00142e2:	89 c8                	mov    eax,ecx
c00142e4:	f7 e2                	mul    edx
c00142e6:	c1 ea 03             	shr    edx,0x3
c00142e9:	89 d0                	mov    eax,edx
c00142eb:	c1 e0 02             	shl    eax,0x2
c00142ee:	01 d0                	add    eax,edx
c00142f0:	01 c0                	add    eax,eax
c00142f2:	29 c1                	sub    ecx,eax
c00142f4:	89 c8                	mov    eax,ecx
c00142f6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00142fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142fe:	8a 00                	mov    al,BYTE PTR [eax]
c0014300:	0f b6 c0             	movzx  eax,al
c0014303:	ba cd cc cc cc       	mov    edx,0xcccccccd
c0014308:	f7 e2                	mul    edx
c001430a:	89 d0                	mov    eax,edx
c001430c:	c1 e8 03             	shr    eax,0x3
c001430f:	88 c2                	mov    dl,al
c0014311:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014315:	88 10                	mov    BYTE PTR [eax],dl
c0014317:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001431b:	83 c0 30             	add    eax,0x30
c001431e:	88 c1                	mov    cl,al
c0014320:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c0014324:	8d 50 01             	lea    edx,[eax+0x1]
c0014327:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c001432b:	0f b6 c0             	movzx  eax,al
c001432e:	88 ca                	mov    dl,cl
c0014330:	88 54 04 05          	mov    BYTE PTR [esp+eax*1+0x5],dl
c0014334:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014338:	8a 00                	mov    al,BYTE PTR [eax]
c001433a:	0f b6 c0             	movzx  eax,al
c001433d:	85 c0                	test   eax,eax
c001433f:	75 93                	jne    c00142d4 <ipaddr_ntoa_r+0x38>
c0014341:	eb 35                	jmp    c0014378 <ipaddr_ntoa_r+0xdc>
c0014343:	90                   	nop
c0014344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014348:	8d 50 01             	lea    edx,[eax+0x1]
c001434b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001434f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0014353:	7f 0b                	jg     c0014360 <ipaddr_ntoa_r+0xc4>
c0014355:	b8 00 00 00 00       	mov    eax,0x0
c001435a:	e9 85 00 00 00       	jmp    c00143e4 <ipaddr_ntoa_r+0x148>
c001435f:	90                   	nop
c0014360:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0014365:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014369:	8d 48 01             	lea    ecx,[eax+0x1]
c001436c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014370:	8a 54 14 05          	mov    dl,BYTE PTR [esp+edx*1+0x5]
c0014374:	88 10                	mov    BYTE PTR [eax],dl
c0014376:	66 90                	xchg   ax,ax
c0014378:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c001437c:	8d 50 ff             	lea    edx,[eax-0x1]
c001437f:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c0014383:	0f b6 c0             	movzx  eax,al
c0014386:	85 c0                	test   eax,eax
c0014388:	75 ba                	jne    c0014344 <ipaddr_ntoa_r+0xa8>
c001438a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001438e:	8d 50 01             	lea    edx,[eax+0x1]
c0014391:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014395:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0014399:	7f 09                	jg     c00143a4 <ipaddr_ntoa_r+0x108>
c001439b:	b8 00 00 00 00       	mov    eax,0x0
c00143a0:	eb 42                	jmp    c00143e4 <ipaddr_ntoa_r+0x148>
c00143a2:	66 90                	xchg   ax,ax
c00143a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00143a8:	8d 50 01             	lea    edx,[eax+0x1]
c00143ab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00143af:	c6 00 2e             	mov    BYTE PTR [eax],0x2e
c00143b2:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00143b7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00143bb:	83 c0 01             	add    eax,0x1
c00143be:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00143c2:	66 90                	xchg   ax,ax
c00143c4:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00143c9:	83 f8 03             	cmp    eax,0x3
c00143cc:	0f 86 fa fe ff ff    	jbe    c00142cc <ipaddr_ntoa_r+0x30>
c00143d2:	83 6c 24 1c 01       	sub    DWORD PTR [esp+0x1c],0x1
c00143d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00143db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00143de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00143e2:	66 90                	xchg   ax,ax
c00143e4:	83 c4 20             	add    esp,0x20
c00143e7:	c3                   	ret    

c00143e8 <ipaddr_ntoa>:
c00143e8:	6a 10                	push   0x10
c00143ea:	68 a4 a9 03 c0       	push   0xc003a9a4
c00143ef:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00143f3:	e8 a4 fe ff ff       	call   c001429c <ipaddr_ntoa_r>
c00143f8:	83 c4 0c             	add    esp,0xc
c00143fb:	c3                   	ret    

c00143fc <ip_reass_dequeue_datagram>:
c00143fc:	83 ec 0c             	sub    esp,0xc
c00143ff:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014404:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0014408:	75 0e                	jne    c0014418 <ip_reass_dequeue_datagram+0x1c>
c001440a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001440e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014410:	a3 b8 a9 03 c0       	mov    ds:0xc003a9b8,eax
c0014415:	eb 29                	jmp    c0014440 <ip_reass_dequeue_datagram+0x44>
c0014417:	90                   	nop
c0014418:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001441d:	75 15                	jne    c0014434 <ip_reass_dequeue_datagram+0x38>
c001441f:	83 ec 08             	sub    esp,0x8
c0014422:	68 cc 0d 03 c0       	push   0xc0030dcc
c0014427:	68 c6 fa 02 c0       	push   0xc002fac6
c001442c:	e8 63 b7 00 00       	call   c001fb94 <CPrintf>
c0014431:	83 c4 10             	add    esp,0x10
c0014434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014438:	8b 10                	mov    edx,DWORD PTR [eax]
c001443a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001443e:	89 10                	mov    DWORD PTR [eax],edx
c0014440:	83 ec 08             	sub    esp,0x8
c0014443:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014447:	6a 05                	push   0x5
c0014449:	e8 52 36 ff ff       	call   c0007aa0 <memp_free>
c001444e:	83 c4 10             	add    esp,0x10
c0014451:	90                   	nop
c0014452:	83 c4 0c             	add    esp,0xc
c0014455:	c3                   	ret    
c0014456:	66 90                	xchg   ax,ax

c0014458 <ip_reass_free_complete_datagram>:
c0014458:	83 ec 2c             	sub    esp,0x2c
c001445b:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c0014462:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014466:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001446a:	75 18                	jne    c0014484 <ip_reass_free_complete_datagram+0x2c>
c001446c:	83 ec 08             	sub    esp,0x8
c001446f:	68 e5 0d 03 c0       	push   0xc0030de5
c0014474:	68 c6 fa 02 c0       	push   0xc002fac6
c0014479:	e8 16 b7 00 00       	call   c001fb94 <CPrintf>
c001447e:	83 c4 10             	add    esp,0x10
c0014481:	8d 76 00             	lea    esi,[esi+0x0]
c0014484:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0014489:	74 21                	je     c00144ac <ip_reass_free_complete_datagram+0x54>
c001448b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001448f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014491:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0014495:	74 15                	je     c00144ac <ip_reass_free_complete_datagram+0x54>
c0014497:	83 ec 08             	sub    esp,0x8
c001449a:	68 f1 0d 03 c0       	push   0xc0030df1
c001449f:	68 c6 fa 02 c0       	push   0xc002fac6
c00144a4:	e8 eb b6 00 00       	call   c001fb94 <CPrintf>
c00144a9:	83 c4 10             	add    esp,0x10
c00144ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00144b3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00144b6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00144ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00144be:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00144c2:	0f b7 c0             	movzx  eax,ax
c00144c5:	85 c0                	test   eax,eax
c00144c7:	0f 85 a3 00 00 00    	jne    c0014570 <ip_reass_free_complete_datagram+0x118>
c00144cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144d1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00144d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00144d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00144dc:	8b 10                	mov    edx,DWORD PTR [eax]
c00144de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144e2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00144e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144e9:	8d 50 08             	lea    edx,[eax+0x8]
c00144ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00144f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00144f3:	83 ec 04             	sub    esp,0x4
c00144f6:	6a 14                	push   0x14
c00144f8:	52                   	push   edx
c00144f9:	50                   	push   eax
c00144fa:	e8 7b be fe ff       	call   c000037a <memcpy>
c00144ff:	83 c4 10             	add    esp,0x10
c0014502:	83 ec 08             	sub    esp,0x8
c0014505:	6a 01                	push   0x1
c0014507:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001450b:	e8 4c eb ff ff       	call   c001305c <icmp_time_exceeded>
c0014510:	83 c4 10             	add    esp,0x10
c0014513:	83 ec 0c             	sub    esp,0xc
c0014516:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001451a:	e8 11 46 ff ff       	call   c0008b30 <pbuf_clen>
c001451f:	83 c4 10             	add    esp,0x10
c0014522:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0014526:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c001452b:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014530:	01 d0                	add    eax,edx
c0014532:	3d ff ff 00 00       	cmp    eax,0xffff
c0014537:	7e 17                	jle    c0014550 <ip_reass_free_complete_datagram+0xf8>
c0014539:	83 ec 08             	sub    esp,0x8
c001453c:	68 03 0e 03 c0       	push   0xc0030e03
c0014541:	68 c6 fa 02 c0       	push   0xc002fac6
c0014546:	e8 49 b6 00 00       	call   c001fb94 <CPrintf>
c001454b:	83 c4 10             	add    esp,0x10
c001454e:	66 90                	xchg   ax,ax
c0014550:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014555:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c001455a:	01 d0                	add    eax,edx
c001455c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0014561:	83 ec 0c             	sub    esp,0xc
c0014564:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014568:	e8 ef 3d ff ff       	call   c000835c <pbuf_free>
c001456d:	83 c4 10             	add    esp,0x10
c0014570:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014574:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014577:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001457b:	eb 7b                	jmp    c00145f8 <ip_reass_free_complete_datagram+0x1a0>
c001457d:	8d 76 00             	lea    esi,[esi+0x0]
c0014580:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014584:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014587:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001458b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001458f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014593:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014597:	8b 00                	mov    eax,DWORD PTR [eax]
c0014599:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001459d:	83 ec 0c             	sub    esp,0xc
c00145a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145a4:	e8 87 45 ff ff       	call   c0008b30 <pbuf_clen>
c00145a9:	83 c4 10             	add    esp,0x10
c00145ac:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00145b0:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00145b5:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00145ba:	01 d0                	add    eax,edx
c00145bc:	3d ff ff 00 00       	cmp    eax,0xffff
c00145c1:	7e 15                	jle    c00145d8 <ip_reass_free_complete_datagram+0x180>
c00145c3:	83 ec 08             	sub    esp,0x8
c00145c6:	68 03 0e 03 c0       	push   0xc0030e03
c00145cb:	68 c6 fa 02 c0       	push   0xc002fac6
c00145d0:	e8 bf b5 00 00       	call   c001fb94 <CPrintf>
c00145d5:	83 c4 10             	add    esp,0x10
c00145d8:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00145dd:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c00145e2:	01 d0                	add    eax,edx
c00145e4:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00145e9:	83 ec 0c             	sub    esp,0xc
c00145ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145f0:	e8 67 3d ff ff       	call   c000835c <pbuf_free>
c00145f5:	83 c4 10             	add    esp,0x10
c00145f8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00145fd:	75 81                	jne    c0014580 <ip_reass_free_complete_datagram+0x128>
c00145ff:	83 ec 08             	sub    esp,0x8
c0014602:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014606:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001460a:	e8 ed fd ff ff       	call   c00143fc <ip_reass_dequeue_datagram>
c001460f:	83 c4 10             	add    esp,0x10
c0014612:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014618:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c001461d:	0f b7 c0             	movzx  eax,ax
c0014620:	39 c2                	cmp    edx,eax
c0014622:	76 18                	jbe    c001463c <ip_reass_free_complete_datagram+0x1e4>
c0014624:	83 ec 08             	sub    esp,0x8
c0014627:	68 20 0e 03 c0       	push   0xc0030e20
c001462c:	68 c6 fa 02 c0       	push   0xc002fac6
c0014631:	e8 5e b5 00 00       	call   c001fb94 <CPrintf>
c0014636:	83 c4 10             	add    esp,0x10
c0014639:	8d 76 00             	lea    esi,[esi+0x0]
c001463c:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c0014643:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0014648:	89 d1                	mov    ecx,edx
c001464a:	29 c1                	sub    ecx,eax
c001464c:	89 c8                	mov    eax,ecx
c001464e:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014654:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0014659:	83 c4 2c             	add    esp,0x2c
c001465c:	c3                   	ret    
c001465d:	8d 76 00             	lea    esi,[esi+0x0]

c0014660 <ip_reass_tmr>:
c0014660:	83 ec 1c             	sub    esp,0x1c
c0014663:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001466b:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014670:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014674:	eb 62                	jmp    c00146d8 <ip_reass_tmr+0x78>
c0014676:	66 90                	xchg   ax,ax
c0014678:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001467c:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c001467f:	0f b6 c0             	movzx  eax,al
c0014682:	85 c0                	test   eax,eax
c0014684:	74 2a                	je     c00146b0 <ip_reass_tmr+0x50>
c0014686:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001468a:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c001468d:	83 e8 01             	sub    eax,0x1
c0014690:	88 c2                	mov    dl,al
c0014692:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014696:	88 50 1f             	mov    BYTE PTR [eax+0x1f],dl
c0014699:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001469d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00146a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00146a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00146a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00146ab:	eb 2b                	jmp    c00146d8 <ip_reass_tmr+0x78>
c00146ad:	8d 76 00             	lea    esi,[esi+0x0]
c00146b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00146b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00146b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00146bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00146be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00146c2:	83 ec 08             	sub    esp,0x8
c00146c5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00146c9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00146cd:	e8 86 fd ff ff       	call   c0014458 <ip_reass_free_complete_datagram>
c00146d2:	83 c4 10             	add    esp,0x10
c00146d5:	8d 76 00             	lea    esi,[esi+0x0]
c00146d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00146dd:	75 99                	jne    c0014678 <ip_reass_tmr+0x18>
c00146df:	90                   	nop
c00146e0:	83 c4 1c             	add    esp,0x1c
c00146e3:	c3                   	ret    

c00146e4 <ip_reass_remove_oldest_datagram>:
c00146e4:	83 ec 2c             	sub    esp,0x2c
c00146e7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00146ef:	90                   	nop
c00146f0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00146f8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014700:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014708:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c001470d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014711:	e9 9a 00 00 00       	jmp    c00147b0 <ip_reass_remove_oldest_datagram+0xcc>
c0014716:	66 90                	xchg   ax,ax
c0014718:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001471c:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c001471f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014723:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014726:	39 c2                	cmp    edx,eax
c0014728:	75 2e                	jne    c0014758 <ip_reass_remove_oldest_datagram+0x74>
c001472a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001472e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014731:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014735:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014738:	39 c2                	cmp    edx,eax
c001473a:	75 1c                	jne    c0014758 <ip_reass_remove_oldest_datagram+0x74>
c001473c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014740:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014743:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014747:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001474b:	0f b7 d2             	movzx  edx,dx
c001474e:	0f b7 c0             	movzx  eax,ax
c0014751:	39 c2                	cmp    edx,eax
c0014753:	74 3b                	je     c0014790 <ip_reass_remove_oldest_datagram+0xac>
c0014755:	8d 76 00             	lea    esi,[esi+0x0]
c0014758:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001475d:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014762:	75 0c                	jne    c0014770 <ip_reass_remove_oldest_datagram+0x8c>
c0014764:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014768:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001476c:	eb 22                	jmp    c0014790 <ip_reass_remove_oldest_datagram+0xac>
c001476e:	66 90                	xchg   ax,ax
c0014770:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014774:	8a 50 1f             	mov    dl,BYTE PTR [eax+0x1f]
c0014777:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001477b:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c001477e:	0f b6 d2             	movzx  edx,dl
c0014781:	0f b6 c0             	movzx  eax,al
c0014784:	39 c2                	cmp    edx,eax
c0014786:	77 08                	ja     c0014790 <ip_reass_remove_oldest_datagram+0xac>
c0014788:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001478c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014790:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014794:	8b 00                	mov    eax,DWORD PTR [eax]
c0014796:	85 c0                	test   eax,eax
c0014798:	74 0a                	je     c00147a4 <ip_reass_remove_oldest_datagram+0xc0>
c001479a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001479e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00147a2:	66 90                	xchg   ax,ax
c00147a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00147a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00147aa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00147ae:	66 90                	xchg   ax,ax
c00147b0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00147b5:	0f 85 5d ff ff ff    	jne    c0014718 <ip_reass_remove_oldest_datagram+0x34>
c00147bb:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00147c0:	74 22                	je     c00147e4 <ip_reass_remove_oldest_datagram+0x100>
c00147c2:	83 ec 08             	sub    esp,0x8
c00147c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147c9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00147cd:	e8 86 fc ff ff       	call   c0014458 <ip_reass_free_complete_datagram>
c00147d2:	83 c4 10             	add    esp,0x10
c00147d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00147d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00147dd:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c00147e1:	8d 76 00             	lea    esi,[esi+0x0]
c00147e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147e8:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00147ec:	7d 0e                	jge    c00147fc <ip_reass_remove_oldest_datagram+0x118>
c00147ee:	83 7c 24 0c 01       	cmp    DWORD PTR [esp+0xc],0x1
c00147f3:	0f 8f f7 fe ff ff    	jg     c00146f0 <ip_reass_remove_oldest_datagram+0xc>
c00147f9:	8d 76 00             	lea    esi,[esi+0x0]
c00147fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014800:	83 c4 2c             	add    esp,0x2c
c0014803:	c3                   	ret    

c0014804 <ip_reass_enqueue_new_datagram>:
c0014804:	83 ec 1c             	sub    esp,0x1c
c0014807:	83 ec 0c             	sub    esp,0xc
c001480a:	6a 05                	push   0x5
c001480c:	e8 63 31 ff ff       	call   c0007974 <memp_malloc>
c0014811:	83 c4 10             	add    esp,0x10
c0014814:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014818:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001481d:	75 4d                	jne    c001486c <ip_reass_enqueue_new_datagram+0x68>
c001481f:	83 ec 08             	sub    esp,0x8
c0014822:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014826:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001482a:	e8 b5 fe ff ff       	call   c00146e4 <ip_reass_remove_oldest_datagram>
c001482f:	83 c4 10             	add    esp,0x10
c0014832:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0014836:	7f 14                	jg     c001484c <ip_reass_enqueue_new_datagram+0x48>
c0014838:	83 ec 0c             	sub    esp,0xc
c001483b:	6a 05                	push   0x5
c001483d:	e8 32 31 ff ff       	call   c0007974 <memp_malloc>
c0014842:	83 c4 10             	add    esp,0x10
c0014845:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014849:	8d 76 00             	lea    esi,[esi+0x0]
c001484c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014851:	75 19                	jne    c001486c <ip_reass_enqueue_new_datagram+0x68>
c0014853:	66 a1 5c 67 03 c0    	mov    ax,ds:0xc003675c
c0014859:	83 c0 01             	add    eax,0x1
c001485c:	66 a3 5c 67 03 c0    	mov    ds:0xc003675c,ax
c0014862:	b8 00 00 00 00       	mov    eax,0x0
c0014867:	eb 53                	jmp    c00148bc <ip_reass_enqueue_new_datagram+0xb8>
c0014869:	8d 76 00             	lea    esi,[esi+0x0]
c001486c:	83 ec 04             	sub    esp,0x4
c001486f:	6a 20                	push   0x20
c0014871:	6a 00                	push   0x0
c0014873:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014877:	e8 74 bc fe ff       	call   c00004f0 <memset>
c001487c:	83 c4 10             	add    esp,0x10
c001487f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014883:	c6 40 1f 03          	mov    BYTE PTR [eax+0x1f],0x3
c0014887:	8b 15 b8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9b8
c001488d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014891:	89 10                	mov    DWORD PTR [eax],edx
c0014893:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014897:	a3 b8 a9 03 c0       	mov    ds:0xc003a9b8,eax
c001489c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148a0:	83 c0 08             	add    eax,0x8
c00148a3:	83 ec 04             	sub    esp,0x4
c00148a6:	6a 14                	push   0x14
c00148a8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00148ac:	50                   	push   eax
c00148ad:	e8 c8 ba fe ff       	call   c000037a <memcpy>
c00148b2:	83 c4 10             	add    esp,0x10
c00148b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148b9:	8d 76 00             	lea    esi,[esi+0x0]
c00148bc:	83 c4 1c             	add    esp,0x1c
c00148bf:	c3                   	ret    

c00148c0 <ip_reass_chain_frag_into_datagram_and_validate>:
c00148c0:	53                   	push   ebx
c00148c1:	83 ec 28             	sub    esp,0x28
c00148c4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00148cc:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c00148d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00148d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00148db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00148df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148e3:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c00148e7:	0f b7 c0             	movzx  eax,ax
c00148ea:	83 ec 0c             	sub    esp,0xc
c00148ed:	50                   	push   eax
c00148ee:	e8 f5 c2 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00148f3:	83 c4 10             	add    esp,0x10
c00148f6:	89 c3                	mov    ebx,eax
c00148f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148fc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00148ff:	0f b7 c0             	movzx  eax,ax
c0014902:	83 ec 0c             	sub    esp,0xc
c0014905:	50                   	push   eax
c0014906:	e8 dd c2 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001490b:	83 c4 10             	add    esp,0x10
c001490e:	0f b7 c0             	movzx  eax,ax
c0014911:	c1 e8 08             	shr    eax,0x8
c0014914:	83 e0 0f             	and    eax,0xf
c0014917:	c1 e0 02             	shl    eax,0x2
c001491a:	89 d9                	mov    ecx,ebx
c001491c:	29 c1                	sub    ecx,eax
c001491e:	89 c8                	mov    eax,ecx
c0014920:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0014925:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014929:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c001492d:	0f b7 c0             	movzx  eax,ax
c0014930:	83 ec 0c             	sub    esp,0xc
c0014933:	50                   	push   eax
c0014934:	e8 af c2 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014939:	83 c4 10             	add    esp,0x10
c001493c:	25 ff 1f 00 00       	and    eax,0x1fff
c0014941:	c1 e0 03             	shl    eax,0x3
c0014944:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0014949:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001494d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014950:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014954:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014958:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001495e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014962:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014966:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001496a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001496e:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0014973:	01 d0                	add    eax,edx
c0014975:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014979:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c001497d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014981:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014984:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014988:	e9 13 01 00 00       	jmp    c0014aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x1e0>
c001498d:	8d 76 00             	lea    esi,[esi+0x0]
c0014990:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014994:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014997:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001499b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001499f:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c00149a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00149a7:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00149ab:	0f b7 d2             	movzx  edx,dx
c00149ae:	0f b7 c0             	movzx  eax,ax
c00149b1:	39 c2                	cmp    edx,eax
c00149b3:	73 6f                	jae    c0014a24 <ip_reass_chain_frag_into_datagram_and_validate+0x164>
c00149b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149b9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00149bd:	89 10                	mov    DWORD PTR [eax],edx
c00149bf:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00149c4:	74 4e                	je     c0014a14 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
c00149c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149ca:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c00149ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00149d2:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00149d6:	0f b7 d2             	movzx  edx,dx
c00149d9:	0f b7 c0             	movzx  eax,ax
c00149dc:	39 c2                	cmp    edx,eax
c00149de:	0f 82 bc 02 00 00    	jb     c0014ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c00149e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149e8:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00149ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00149f0:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00149f4:	0f b7 d2             	movzx  edx,dx
c00149f7:	0f b7 c0             	movzx  eax,ax
c00149fa:	39 c2                	cmp    edx,eax
c00149fc:	0f 87 9e 02 00 00    	ja     c0014ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c0014a02:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a06:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014a0a:	89 10                	mov    DWORD PTR [eax],edx
c0014a0c:	e9 9b 00 00 00       	jmp    c0014aac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c0014a11:	8d 76 00             	lea    esi,[esi+0x0]
c0014a14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a18:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014a1c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014a1f:	e9 88 00 00 00       	jmp    c0014aac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c0014a24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a28:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014a2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a30:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014a34:	0f b7 d2             	movzx  edx,dx
c0014a37:	0f b7 c0             	movzx  eax,ax
c0014a3a:	39 c2                	cmp    edx,eax
c0014a3c:	0f 84 62 02 00 00    	je     c0014ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x3e4>
c0014a42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a46:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014a4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a4e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014a52:	0f b7 d2             	movzx  edx,dx
c0014a55:	0f b7 c0             	movzx  eax,ax
c0014a58:	39 c2                	cmp    edx,eax
c0014a5a:	0f 82 48 02 00 00    	jb     c0014ca8 <ip_reass_chain_frag_into_datagram_and_validate+0x3e8>
c0014a60:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014a65:	74 25                	je     c0014a8c <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c0014a67:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a6b:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014a6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a73:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014a77:	0f b7 d2             	movzx  edx,dx
c0014a7a:	0f b7 c0             	movzx  eax,ax
c0014a7d:	39 c2                	cmp    edx,eax
c0014a7f:	74 0b                	je     c0014a8c <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c0014a81:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014a89:	8d 76 00             	lea    esi,[esi+0x0]
c0014a8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a90:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a92:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014a9e:	66 90                	xchg   ax,ax
c0014aa0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014aa5:	0f 85 e5 fe ff ff    	jne    c0014990 <ip_reass_chain_frag_into_datagram_and_validate+0xd0>
c0014aab:	90                   	nop
c0014aac:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014ab1:	0f 85 95 00 00 00    	jne    c0014b4c <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014ab7:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014abc:	74 62                	je     c0014b20 <ip_reass_chain_frag_into_datagram_and_validate+0x260>
c0014abe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ac2:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014ac6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014aca:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014ace:	0f b7 d2             	movzx  edx,dx
c0014ad1:	0f b7 c0             	movzx  eax,ax
c0014ad4:	39 c2                	cmp    edx,eax
c0014ad6:	76 18                	jbe    c0014af0 <ip_reass_chain_frag_into_datagram_and_validate+0x230>
c0014ad8:	83 ec 08             	sub    esp,0x8
c0014adb:	68 3b 0e 03 c0       	push   0xc0030e3b
c0014ae0:	68 c6 fa 02 c0       	push   0xc002fac6
c0014ae5:	e8 aa b0 00 00       	call   c001fb94 <CPrintf>
c0014aea:	83 c4 10             	add    esp,0x10
c0014aed:	8d 76 00             	lea    esi,[esi+0x0]
c0014af0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014af4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014af8:	89 10                	mov    DWORD PTR [eax],edx
c0014afa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014afe:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014b02:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b06:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014b0a:	0f b7 d2             	movzx  edx,dx
c0014b0d:	0f b7 c0             	movzx  eax,ax
c0014b10:	39 c2                	cmp    edx,eax
c0014b12:	74 38                	je     c0014b4c <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014b14:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014b1c:	eb 2e                	jmp    c0014b4c <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014b1e:	66 90                	xchg   ax,ax
c0014b20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b27:	85 c0                	test   eax,eax
c0014b29:	74 15                	je     c0014b40 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
c0014b2b:	83 ec 08             	sub    esp,0x8
c0014b2e:	68 7c 0e 03 c0       	push   0xc0030e7c
c0014b33:	68 c6 fa 02 c0       	push   0xc002fac6
c0014b38:	e8 57 b0 00 00       	call   c001fb94 <CPrintf>
c0014b3d:	83 c4 10             	add    esp,0x10
c0014b40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b44:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014b48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014b4b:	90                   	nop
c0014b4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b50:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c0014b53:	0f b6 c0             	movzx  eax,al
c0014b56:	83 e0 01             	and    eax,0x1
c0014b59:	0f 84 39 01 00 00    	je     c0014c98 <ip_reass_chain_frag_into_datagram_and_validate+0x3d8>
c0014b5f:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014b64:	0f 84 26 01 00 00    	je     c0014c90 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014b6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b74:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014b78:	0f b7 c0             	movzx  eax,ax
c0014b7b:	85 c0                	test   eax,eax
c0014b7d:	74 0d                	je     c0014b8c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>
c0014b7f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014b87:	e9 04 01 00 00       	jmp    c0014c90 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014b8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014b94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b98:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b9a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b9e:	eb 44                	jmp    c0014be4 <ip_reass_chain_frag_into_datagram_and_validate+0x324>
c0014ba0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014ba4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014ba7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014bab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014baf:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014bb3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bb7:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014bbb:	0f b7 d2             	movzx  edx,dx
c0014bbe:	0f b7 c0             	movzx  eax,ax
c0014bc1:	39 c2                	cmp    edx,eax
c0014bc3:	74 0b                	je     c0014bd0 <ip_reass_chain_frag_into_datagram_and_validate+0x310>
c0014bc5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014bcd:	eb 1d                	jmp    c0014bec <ip_reass_chain_frag_into_datagram_and_validate+0x32c>
c0014bcf:	90                   	nop
c0014bd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014bd8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bde:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014be2:	66 90                	xchg   ax,ax
c0014be4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014be9:	75 b5                	jne    c0014ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2e0>
c0014beb:	90                   	nop
c0014bec:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014bf1:	0f 84 99 00 00 00    	je     c0014c90 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014bf7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bfb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014bfe:	85 c0                	test   eax,eax
c0014c00:	75 16                	jne    c0014c18 <ip_reass_chain_frag_into_datagram_and_validate+0x358>
c0014c02:	83 ec 08             	sub    esp,0x8
c0014c05:	68 59 0e 03 c0       	push   0xc0030e59
c0014c0a:	68 c6 fa 02 c0       	push   0xc002fac6
c0014c0f:	e8 80 af 00 00       	call   c001fb94 <CPrintf>
c0014c14:	83 c4 10             	add    esp,0x10
c0014c17:	90                   	nop
c0014c18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014c1f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014c22:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0014c26:	75 18                	jne    c0014c40 <ip_reass_chain_frag_into_datagram_and_validate+0x380>
c0014c28:	83 ec 08             	sub    esp,0x8
c0014c2b:	68 59 0e 03 c0       	push   0xc0030e59
c0014c30:	68 c6 fa 02 c0       	push   0xc002fac6
c0014c35:	e8 5a af 00 00       	call   c001fb94 <CPrintf>
c0014c3a:	83 c4 10             	add    esp,0x10
c0014c3d:	8d 76 00             	lea    esi,[esi+0x0]
c0014c40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c44:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c46:	85 c0                	test   eax,eax
c0014c48:	74 16                	je     c0014c60 <ip_reass_chain_frag_into_datagram_and_validate+0x3a0>
c0014c4a:	83 ec 08             	sub    esp,0x8
c0014c4d:	68 b4 0e 03 c0       	push   0xc0030eb4
c0014c52:	68 c6 fa 02 c0       	push   0xc002fac6
c0014c57:	e8 38 af 00 00       	call   c001fb94 <CPrintf>
c0014c5c:	83 c4 10             	add    esp,0x10
c0014c5f:	90                   	nop
c0014c60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c64:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014c68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c6c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014c6f:	0f b7 d2             	movzx  edx,dx
c0014c72:	0f b7 c0             	movzx  eax,ax
c0014c75:	39 c2                	cmp    edx,eax
c0014c77:	74 17                	je     c0014c90 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014c79:	83 ec 08             	sub    esp,0x8
c0014c7c:	68 d8 0e 03 c0       	push   0xc0030ed8
c0014c81:	68 c6 fa 02 c0       	push   0xc002fac6
c0014c86:	e8 09 af 00 00       	call   c001fb94 <CPrintf>
c0014c8b:	83 c4 10             	add    esp,0x10
c0014c8e:	66 90                	xchg   ax,ax
c0014c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c94:	eb 52                	jmp    c0014ce8 <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014c96:	66 90                	xchg   ax,ax
c0014c98:	b8 00 00 00 00       	mov    eax,0x0
c0014c9d:	eb 49                	jmp    c0014ce8 <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014c9f:	90                   	nop
c0014ca0:	90                   	nop
c0014ca1:	eb 09                	jmp    c0014cac <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014ca3:	90                   	nop
c0014ca4:	90                   	nop
c0014ca5:	eb 05                	jmp    c0014cac <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014ca7:	90                   	nop
c0014ca8:	90                   	nop
c0014ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0014cac:	83 ec 0c             	sub    esp,0xc
c0014caf:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014cb3:	e8 78 3e ff ff       	call   c0008b30 <pbuf_clen>
c0014cb8:	83 c4 10             	add    esp,0x10
c0014cbb:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c0014cc2:	0f b6 c0             	movzx  eax,al
c0014cc5:	89 d3                	mov    ebx,edx
c0014cc7:	29 c3                	sub    ebx,eax
c0014cc9:	89 d8                	mov    eax,ebx
c0014ccb:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014cd1:	83 ec 0c             	sub    esp,0xc
c0014cd4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014cd8:	e8 7f 36 ff ff       	call   c000835c <pbuf_free>
c0014cdd:	83 c4 10             	add    esp,0x10
c0014ce0:	b8 00 00 00 00       	mov    eax,0x0
c0014ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0014ce8:	83 c4 28             	add    esp,0x28
c0014ceb:	5b                   	pop    ebx
c0014cec:	c3                   	ret    
c0014ced:	8d 76 00             	lea    esi,[esi+0x0]

c0014cf0 <ip_reass>:
c0014cf0:	53                   	push   ebx
c0014cf1:	83 ec 28             	sub    esp,0x28
c0014cf4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014cfc:	66 a1 52 67 03 c0    	mov    ax,ds:0xc0036752
c0014d02:	83 c0 01             	add    eax,0x1
c0014d05:	66 a3 52 67 03 c0    	mov    ds:0xc0036752,ax
c0014d0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d0f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014d12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d1a:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014d1d:	0f b7 c0             	movzx  eax,ax
c0014d20:	83 ec 0c             	sub    esp,0xc
c0014d23:	50                   	push   eax
c0014d24:	e8 bf be fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014d29:	83 c4 10             	add    esp,0x10
c0014d2c:	0f b7 c0             	movzx  eax,ax
c0014d2f:	c1 e8 08             	shr    eax,0x8
c0014d32:	0f b7 c0             	movzx  eax,ax
c0014d35:	83 e0 0f             	and    eax,0xf
c0014d38:	c1 e0 02             	shl    eax,0x2
c0014d3b:	83 f8 14             	cmp    eax,0x14
c0014d3e:	74 14                	je     c0014d54 <ip_reass+0x64>
c0014d40:	66 a1 64 67 03 c0    	mov    ax,ds:0xc0036764
c0014d46:	83 c0 01             	add    eax,0x1
c0014d49:	66 a3 64 67 03 c0    	mov    ds:0xc0036764,ax
c0014d4f:	e9 68 03 00 00       	jmp    c00150bc <ip_reass+0x3cc>
c0014d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d58:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014d5c:	0f b7 c0             	movzx  eax,ax
c0014d5f:	83 ec 0c             	sub    esp,0xc
c0014d62:	50                   	push   eax
c0014d63:	e8 80 be fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014d68:	83 c4 10             	add    esp,0x10
c0014d6b:	25 ff 1f 00 00       	and    eax,0x1fff
c0014d70:	c1 e0 03             	shl    eax,0x3
c0014d73:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0014d78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d7c:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0014d80:	0f b7 c0             	movzx  eax,ax
c0014d83:	83 ec 0c             	sub    esp,0xc
c0014d86:	50                   	push   eax
c0014d87:	e8 5c be fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014d8c:	83 c4 10             	add    esp,0x10
c0014d8f:	89 c3                	mov    ebx,eax
c0014d91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d95:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014d98:	0f b7 c0             	movzx  eax,ax
c0014d9b:	83 ec 0c             	sub    esp,0xc
c0014d9e:	50                   	push   eax
c0014d9f:	e8 44 be fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014da4:	83 c4 10             	add    esp,0x10
c0014da7:	0f b7 c0             	movzx  eax,ax
c0014daa:	c1 e8 08             	shr    eax,0x8
c0014dad:	83 e0 0f             	and    eax,0xf
c0014db0:	c1 e0 02             	shl    eax,0x2
c0014db3:	89 d9                	mov    ecx,ebx
c0014db5:	29 c1                	sub    ecx,eax
c0014db7:	89 c8                	mov    eax,ecx
c0014db9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0014dbe:	83 ec 0c             	sub    esp,0xc
c0014dc1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014dc5:	e8 66 3d ff ff       	call   c0008b30 <pbuf_clen>
c0014dca:	83 c4 10             	add    esp,0x10
c0014dcd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0014dd1:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014dd7:	0f b7 d0             	movzx  edx,ax
c0014dda:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014ddf:	01 d0                	add    eax,edx
c0014de1:	83 f8 0a             	cmp    eax,0xa
c0014de4:	7e 42                	jle    c0014e28 <ip_reass+0x138>
c0014de6:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014deb:	83 ec 08             	sub    esp,0x8
c0014dee:	50                   	push   eax
c0014def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014df3:	e8 ec f8 ff ff       	call   c00146e4 <ip_reass_remove_oldest_datagram>
c0014df8:	83 c4 10             	add    esp,0x10
c0014dfb:	85 c0                	test   eax,eax
c0014dfd:	74 15                	je     c0014e14 <ip_reass+0x124>
c0014dff:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014e05:	0f b7 d0             	movzx  edx,ax
c0014e08:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014e0d:	01 d0                	add    eax,edx
c0014e0f:	83 f8 0a             	cmp    eax,0xa
c0014e12:	7e 14                	jle    c0014e28 <ip_reass+0x138>
c0014e14:	66 a1 5c 67 03 c0    	mov    ax,ds:0xc003675c
c0014e1a:	83 c0 01             	add    eax,0x1
c0014e1d:	66 a3 5c 67 03 c0    	mov    ds:0xc003675c,ax
c0014e23:	e9 94 02 00 00       	jmp    c00150bc <ip_reass+0x3cc>
c0014e28:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014e2d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014e31:	eb 65                	jmp    c0014e98 <ip_reass+0x1a8>
c0014e33:	90                   	nop
c0014e34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e38:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c0014e3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e3f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014e42:	39 c2                	cmp    edx,eax
c0014e44:	75 3e                	jne    c0014e84 <ip_reass+0x194>
c0014e46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e4a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014e4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e51:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014e54:	39 c2                	cmp    edx,eax
c0014e56:	75 2c                	jne    c0014e84 <ip_reass+0x194>
c0014e58:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e5c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014e5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e63:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014e67:	0f b7 d2             	movzx  edx,dx
c0014e6a:	0f b7 c0             	movzx  eax,ax
c0014e6d:	39 c2                	cmp    edx,eax
c0014e6f:	75 13                	jne    c0014e84 <ip_reass+0x194>
c0014e71:	66 a1 66 67 03 c0    	mov    ax,ds:0xc0036766
c0014e77:	83 c0 01             	add    eax,0x1
c0014e7a:	66 a3 66 67 03 c0    	mov    ds:0xc0036766,ax
c0014e80:	eb 1e                	jmp    c0014ea0 <ip_reass+0x1b0>
c0014e82:	66 90                	xchg   ax,ax
c0014e84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e88:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014e8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e90:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014e96:	66 90                	xchg   ax,ax
c0014e98:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014e9d:	75 95                	jne    c0014e34 <ip_reass+0x144>
c0014e9f:	90                   	nop
c0014ea0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014ea5:	75 25                	jne    c0014ecc <ip_reass+0x1dc>
c0014ea7:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014eac:	83 ec 08             	sub    esp,0x8
c0014eaf:	50                   	push   eax
c0014eb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014eb4:	e8 4b f9 ff ff       	call   c0014804 <ip_reass_enqueue_new_datagram>
c0014eb9:	83 c4 10             	add    esp,0x10
c0014ebc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014ec0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014ec5:	75 61                	jne    c0014f28 <ip_reass+0x238>
c0014ec7:	e9 f0 01 00 00       	jmp    c00150bc <ip_reass+0x3cc>
c0014ecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ed0:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014ed4:	0f b7 c0             	movzx  eax,ax
c0014ed7:	83 ec 0c             	sub    esp,0xc
c0014eda:	50                   	push   eax
c0014edb:	e8 08 bd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014ee0:	83 c4 10             	add    esp,0x10
c0014ee3:	0f b7 c0             	movzx  eax,ax
c0014ee6:	25 ff 1f 00 00       	and    eax,0x1fff
c0014eeb:	75 3b                	jne    c0014f28 <ip_reass+0x238>
c0014eed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ef1:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0014ef5:	0f b7 c0             	movzx  eax,ax
c0014ef8:	83 ec 0c             	sub    esp,0xc
c0014efb:	50                   	push   eax
c0014efc:	e8 e7 bc fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014f01:	83 c4 10             	add    esp,0x10
c0014f04:	0f b7 c0             	movzx  eax,ax
c0014f07:	25 ff 1f 00 00       	and    eax,0x1fff
c0014f0c:	74 1a                	je     c0014f28 <ip_reass+0x238>
c0014f0e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f12:	83 c0 08             	add    eax,0x8
c0014f15:	83 ec 04             	sub    esp,0x4
c0014f18:	6a 14                	push   0x14
c0014f1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f1e:	50                   	push   eax
c0014f1f:	e8 56 b4 fe ff       	call   c000037a <memcpy>
c0014f24:	83 c4 10             	add    esp,0x10
c0014f27:	90                   	nop
c0014f28:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c0014f2d:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014f33:	01 d0                	add    eax,edx
c0014f35:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014f3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f3f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014f43:	0f b7 c0             	movzx  eax,ax
c0014f46:	83 e0 20             	and    eax,0x20
c0014f49:	75 29                	jne    c0014f74 <ip_reass+0x284>
c0014f4b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f4f:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c0014f52:	83 c8 01             	or     eax,0x1
c0014f55:	88 c2                	mov    dl,al
c0014f57:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f5b:	88 50 1e             	mov    BYTE PTR [eax+0x1e],dl
c0014f5e:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0014f63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014f67:	01 d0                	add    eax,edx
c0014f69:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014f6d:	66 89 42 1c          	mov    WORD PTR [edx+0x1c],ax
c0014f71:	8d 76 00             	lea    esi,[esi+0x0]
c0014f74:	83 ec 08             	sub    esp,0x8
c0014f77:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0014f7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014f7f:	e8 3c f9 ff ff       	call   c00148c0 <ip_reass_chain_frag_into_datagram_and_validate>
c0014f84:	83 c4 10             	add    esp,0x10
c0014f87:	85 c0                	test   eax,eax
c0014f89:	0f 84 25 01 00 00    	je     c00150b4 <ip_reass+0x3c4>
c0014f8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f93:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014f96:	83 c0 14             	add    eax,0x14
c0014f99:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014f9d:	66 89 42 1c          	mov    WORD PTR [edx+0x1c],ax
c0014fa1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fa5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014fa8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014fab:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014fb1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fb5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014fb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014fbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014fbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fc3:	83 c0 08             	add    eax,0x8
c0014fc6:	83 ec 04             	sub    esp,0x4
c0014fc9:	6a 14                	push   0x14
c0014fcb:	50                   	push   eax
c0014fcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014fd0:	e8 a5 b3 fe ff       	call   c000037a <memcpy>
c0014fd5:	83 c4 10             	add    esp,0x10
c0014fd8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fdc:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014fdf:	0f b7 c0             	movzx  eax,ax
c0014fe2:	83 ec 0c             	sub    esp,0xc
c0014fe5:	50                   	push   eax
c0014fe6:	e8 fd bb fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014feb:	83 c4 10             	add    esp,0x10
c0014fee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014ff2:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0014ff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ffa:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0015000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015004:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c001500a:	83 ec 08             	sub    esp,0x8
c001500d:	6a 14                	push   0x14
c001500f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015013:	e8 e0 e4 ff ff       	call   c00134f8 <inet_chksum>
c0015018:	83 c4 10             	add    esp,0x10
c001501b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001501f:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0015023:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015027:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001502a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001502e:	eb 3c                	jmp    c001506c <ip_reass+0x37c>
c0015030:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015037:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001503b:	83 ec 08             	sub    esp,0x8
c001503e:	6a ec                	push   0xffffffec
c0015040:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015044:	e8 77 31 ff ff       	call   c00081c0 <pbuf_header>
c0015049:	83 c4 10             	add    esp,0x10
c001504c:	83 ec 08             	sub    esp,0x8
c001504f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015053:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015057:	e8 38 3b ff ff       	call   c0008b94 <pbuf_cat>
c001505c:	83 c4 10             	add    esp,0x10
c001505f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015063:	8b 00                	mov    eax,DWORD PTR [eax]
c0015065:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015069:	8d 76 00             	lea    esi,[esi+0x0]
c001506c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0015071:	75 bd                	jne    c0015030 <ip_reass+0x340>
c0015073:	83 ec 08             	sub    esp,0x8
c0015076:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001507a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001507e:	e8 79 f3 ff ff       	call   c00143fc <ip_reass_dequeue_datagram>
c0015083:	83 c4 10             	add    esp,0x10
c0015086:	83 ec 0c             	sub    esp,0xc
c0015089:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001508d:	e8 9e 3a ff ff       	call   c0008b30 <pbuf_clen>
c0015092:	83 c4 10             	add    esp,0x10
c0015095:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c001509c:	0f b6 c0             	movzx  eax,al
c001509f:	89 d3                	mov    ebx,edx
c00150a1:	29 c3                	sub    ebx,eax
c00150a3:	89 d8                	mov    eax,ebx
c00150a5:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c00150ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150af:	eb 2f                	jmp    c00150e0 <ip_reass+0x3f0>
c00150b1:	8d 76 00             	lea    esi,[esi+0x0]
c00150b4:	b8 00 00 00 00       	mov    eax,0x0
c00150b9:	eb 25                	jmp    c00150e0 <ip_reass+0x3f0>
c00150bb:	90                   	nop
c00150bc:	66 a1 56 67 03 c0    	mov    ax,ds:0xc0036756
c00150c2:	83 c0 01             	add    eax,0x1
c00150c5:	66 a3 56 67 03 c0    	mov    ds:0xc0036756,ax
c00150cb:	83 ec 0c             	sub    esp,0xc
c00150ce:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00150d2:	e8 85 32 ff ff       	call   c000835c <pbuf_free>
c00150d7:	83 c4 10             	add    esp,0x10
c00150da:	b8 00 00 00 00       	mov    eax,0x0
c00150df:	90                   	nop
c00150e0:	83 c4 28             	add    esp,0x28
c00150e3:	5b                   	pop    ebx
c00150e4:	c3                   	ret    
c00150e5:	8d 76 00             	lea    esi,[esi+0x0]

c00150e8 <ip_frag_alloc_pbuf_custom_ref>:
c00150e8:	83 ec 0c             	sub    esp,0xc
c00150eb:	83 ec 0c             	sub    esp,0xc
c00150ee:	6a 06                	push   0x6
c00150f0:	e8 7f 28 ff ff       	call   c0007974 <memp_malloc>
c00150f5:	83 c4 10             	add    esp,0x10
c00150f8:	83 c4 0c             	add    esp,0xc
c00150fb:	c3                   	ret    

c00150fc <ip_frag_free_pbuf_custom_ref>:
c00150fc:	83 ec 0c             	sub    esp,0xc
c00150ff:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0015104:	75 16                	jne    c001511c <ip_frag_free_pbuf_custom_ref+0x20>
c0015106:	83 ec 08             	sub    esp,0x8
c0015109:	68 f6 fe 02 c0       	push   0xc002fef6
c001510e:	68 c6 fa 02 c0       	push   0xc002fac6
c0015113:	e8 7c aa 00 00       	call   c001fb94 <CPrintf>
c0015118:	83 c4 10             	add    esp,0x10
c001511b:	90                   	nop
c001511c:	83 ec 08             	sub    esp,0x8
c001511f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015123:	6a 06                	push   0x6
c0015125:	e8 76 29 ff ff       	call   c0007aa0 <memp_free>
c001512a:	83 c4 10             	add    esp,0x10
c001512d:	90                   	nop
c001512e:	83 c4 0c             	add    esp,0xc
c0015131:	c3                   	ret    
c0015132:	66 90                	xchg   ax,ax

c0015134 <ipfrag_free_pbuf_custom>:
c0015134:	83 ec 1c             	sub    esp,0x1c
c0015137:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001513b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001513f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015144:	75 16                	jne    c001515c <ipfrag_free_pbuf_custom+0x28>
c0015146:	83 ec 08             	sub    esp,0x8
c0015149:	68 66 0e 03 c0       	push   0xc0030e66
c001514e:	68 c6 fa 02 c0       	push   0xc002fac6
c0015153:	e8 3c aa 00 00       	call   c001fb94 <CPrintf>
c0015158:	83 c4 10             	add    esp,0x10
c001515b:	90                   	nop
c001515c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015160:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0015164:	74 16                	je     c001517c <ipfrag_free_pbuf_custom+0x48>
c0015166:	83 ec 08             	sub    esp,0x8
c0015169:	68 72 0e 03 c0       	push   0xc0030e72
c001516e:	68 c6 fa 02 c0       	push   0xc002fac6
c0015173:	e8 1c aa 00 00       	call   c001fb94 <CPrintf>
c0015178:	83 c4 10             	add    esp,0x10
c001517b:	90                   	nop
c001517c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015180:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015183:	85 c0                	test   eax,eax
c0015185:	74 15                	je     c001519c <ipfrag_free_pbuf_custom+0x68>
c0015187:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001518b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001518e:	83 ec 0c             	sub    esp,0xc
c0015191:	50                   	push   eax
c0015192:	e8 c5 31 ff ff       	call   c000835c <pbuf_free>
c0015197:	83 c4 10             	add    esp,0x10
c001519a:	66 90                	xchg   ax,ax
c001519c:	83 ec 0c             	sub    esp,0xc
c001519f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00151a3:	e8 54 ff ff ff       	call   c00150fc <ip_frag_free_pbuf_custom_ref>
c00151a8:	83 c4 10             	add    esp,0x10
c00151ab:	90                   	nop
c00151ac:	83 c4 1c             	add    esp,0x1c
c00151af:	c3                   	ret    

c00151b0 <ip_frag>:
c00151b0:	53                   	push   ebx
c00151b1:	83 ec 38             	sub    esp,0x38
c00151b4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00151b8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00151bb:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c00151c0:	66 c7 44 24 2a 14 00 	mov    WORD PTR [esp+0x2a],0x14
c00151c7:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c00151ce:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00151d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00151d5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00151d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00151dd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00151e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151e5:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00151e9:	0f b7 c0             	movzx  eax,ax
c00151ec:	83 ec 0c             	sub    esp,0xc
c00151ef:	50                   	push   eax
c00151f0:	e8 f3 b9 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00151f5:	83 c4 10             	add    esp,0x10
c00151f8:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c00151fd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015201:	25 ff 1f 00 00       	and    eax,0x1fff
c0015206:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001520b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001520f:	25 00 20 00 00       	and    eax,0x2000
c0015214:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0015219:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001521d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0015220:	83 e8 14             	sub    eax,0x14
c0015223:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0015228:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c001522d:	83 e8 14             	sub    eax,0x14
c0015230:	79 06                	jns    c0015238 <ip_frag+0x88>
c0015232:	83 c0 07             	add    eax,0x7
c0015235:	8d 76 00             	lea    esi,[esi+0x0]
c0015238:	c1 f8 03             	sar    eax,0x3
c001523b:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0015240:	e9 03 03 00 00       	jmp    c0015548 <ip_frag+0x398>
c0015245:	8d 76 00             	lea    esi,[esi+0x0]
c0015248:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c001524d:	8d 50 ed             	lea    edx,[eax-0x13]
c0015250:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c0015255:	39 c2                	cmp    edx,eax
c0015257:	0f 9f c0             	setg   al
c001525a:	0f b6 c0             	movzx  eax,al
c001525d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0015262:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015266:	25 ff 1f 00 00       	and    eax,0x1fff
c001526b:	89 c2                	mov    edx,eax
c001526d:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0015272:	09 d0                	or     eax,edx
c0015274:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c0015279:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c001527e:	85 c0                	test   eax,eax
c0015280:	75 0e                	jne    c0015290 <ip_frag+0xe0>
c0015282:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015286:	80 cc 20             	or     ah,0x20
c0015289:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c001528e:	66 90                	xchg   ax,ax
c0015290:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0015295:	85 c0                	test   eax,eax
c0015297:	75 0b                	jne    c00152a4 <ip_frag+0xf4>
c0015299:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001529d:	c1 e0 03             	shl    eax,0x3
c00152a0:	eb 0a                	jmp    c00152ac <ip_frag+0xfc>
c00152a2:	66 90                	xchg   ax,ax
c00152a4:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c00152a9:	8d 76 00             	lea    esi,[esi+0x0]
c00152ac:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c00152b1:	83 ec 04             	sub    esp,0x4
c00152b4:	6a 00                	push   0x0
c00152b6:	6a 14                	push   0x14
c00152b8:	6a 02                	push   0x2
c00152ba:	e8 75 32 ff ff       	call   c0008534 <pbuf_alloc>
c00152bf:	83 c4 10             	add    esp,0x10
c00152c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00152c6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00152cb:	75 07                	jne    c00152d4 <ip_frag+0x124>
c00152cd:	b0 ff                	mov    al,0xff
c00152cf:	e9 84 02 00 00       	jmp    c0015558 <ip_frag+0x3a8>
c00152d4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00152d8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00152dc:	0f b7 c0             	movzx  eax,ax
c00152df:	83 f8 13             	cmp    eax,0x13
c00152e2:	77 18                	ja     c00152fc <ip_frag+0x14c>
c00152e4:	83 ec 08             	sub    esp,0x8
c00152e7:	68 08 0f 03 c0       	push   0xc0030f08
c00152ec:	68 c6 fa 02 c0       	push   0xc002fac6
c00152f1:	e8 9e a8 00 00       	call   c001fb94 <CPrintf>
c00152f6:	83 c4 10             	add    esp,0x10
c00152f9:	8d 76 00             	lea    esi,[esi+0x0]
c00152fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015300:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015303:	83 ec 04             	sub    esp,0x4
c0015306:	6a 14                	push   0x14
c0015308:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001530c:	50                   	push   eax
c001530d:	e8 68 b0 fe ff       	call   c000037a <memcpy>
c0015312:	83 c4 10             	add    esp,0x10
c0015315:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015319:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001531c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015320:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015324:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015327:	0f b7 44 24 2a       	movzx  eax,WORD PTR [esp+0x2a]
c001532c:	01 c2                	add    edx,eax
c001532e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015332:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0015335:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015339:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c001533d:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c0015342:	89 d1                	mov    ecx,edx
c0015344:	29 c1                	sub    ecx,eax
c0015346:	89 c8                	mov    eax,ecx
c0015348:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001534c:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0015350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015354:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c0015359:	e9 1a 01 00 00       	jmp    c0015478 <ip_frag+0x2c8>
c001535e:	66 90                	xchg   ax,ax
c0015360:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015364:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0015368:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001536c:	0f b7 d8             	movzx  ebx,ax
c001536f:	0f b7 ca             	movzx  ecx,dx
c0015372:	39 cb                	cmp    ebx,ecx
c0015374:	76 02                	jbe    c0015378 <ip_frag+0x1c8>
c0015376:	89 d0                	mov    eax,edx
c0015378:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c001537d:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0015382:	85 c0                	test   eax,eax
c0015384:	75 12                	jne    c0015398 <ip_frag+0x1e8>
c0015386:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001538a:	8b 00                	mov    eax,DWORD PTR [eax]
c001538c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015390:	e9 e3 00 00 00       	jmp    c0015478 <ip_frag+0x2c8>
c0015395:	8d 76 00             	lea    esi,[esi+0x0]
c0015398:	e8 4b fd ff ff       	call   c00150e8 <ip_frag_alloc_pbuf_custom_ref>
c001539d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00153a1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00153a6:	75 18                	jne    c00153c0 <ip_frag+0x210>
c00153a8:	83 ec 0c             	sub    esp,0xc
c00153ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00153af:	e8 a8 2f ff ff       	call   c000835c <pbuf_free>
c00153b4:	83 c4 10             	add    esp,0x10
c00153b7:	b0 ff                	mov    al,0xff
c00153b9:	e9 9a 01 00 00       	jmp    c0015558 <ip_frag+0x3a8>
c00153be:	66 90                	xchg   ax,ax
c00153c0:	0f b7 5c 24 26       	movzx  ebx,WORD PTR [esp+0x26]
c00153c5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00153c9:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00153cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00153d0:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00153d5:	83 ec 08             	sub    esp,0x8
c00153d8:	53                   	push   ebx
c00153d9:	51                   	push   ecx
c00153da:	52                   	push   edx
c00153db:	6a 02                	push   0x2
c00153dd:	50                   	push   eax
c00153de:	6a 03                	push   0x3
c00153e0:	e8 b7 2c ff ff       	call   c000809c <pbuf_alloced_custom>
c00153e5:	83 c4 20             	add    esp,0x20
c00153e8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00153ec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00153f1:	75 25                	jne    c0015418 <ip_frag+0x268>
c00153f3:	83 ec 0c             	sub    esp,0xc
c00153f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00153fa:	e8 fd fc ff ff       	call   c00150fc <ip_frag_free_pbuf_custom_ref>
c00153ff:	83 c4 10             	add    esp,0x10
c0015402:	83 ec 0c             	sub    esp,0xc
c0015405:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015409:	e8 4e 2f ff ff       	call   c000835c <pbuf_free>
c001540e:	83 c4 10             	add    esp,0x10
c0015411:	b0 ff                	mov    al,0xff
c0015413:	e9 40 01 00 00       	jmp    c0015558 <ip_frag+0x3a8>
c0015418:	83 ec 0c             	sub    esp,0xc
c001541b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001541f:	e8 40 37 ff ff       	call   c0008b64 <pbuf_ref>
c0015424:	83 c4 10             	add    esp,0x10
c0015427:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001542b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001542f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015436:	c7 40 10 34 51 01 c0 	mov    DWORD PTR [eax+0x10],0xc0015134
c001543d:	83 ec 08             	sub    esp,0x8
c0015440:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015444:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015448:	e8 47 37 ff ff       	call   c0008b94 <pbuf_cat>
c001544d:	83 c4 10             	add    esp,0x10
c0015450:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015454:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0015459:	89 d3                	mov    ebx,edx
c001545b:	29 c3                	sub    ebx,eax
c001545d:	89 d8                	mov    eax,ebx
c001545f:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c0015464:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c0015469:	85 c0                	test   eax,eax
c001546b:	74 0b                	je     c0015478 <ip_frag+0x2c8>
c001546d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015471:	8b 00                	mov    eax,DWORD PTR [eax]
c0015473:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015477:	90                   	nop
c0015478:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c001547d:	85 c0                	test   eax,eax
c001547f:	0f 85 db fe ff ff    	jne    c0015360 <ip_frag+0x1b0>
c0015485:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c001548a:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c001548f:	0f b7 44 24 28       	movzx  eax,WORD PTR [esp+0x28]
c0015494:	83 ec 0c             	sub    esp,0xc
c0015497:	50                   	push   eax
c0015498:	e8 4b b7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001549d:	83 c4 10             	add    esp,0x10
c00154a0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00154a4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00154a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154ac:	83 c0 14             	add    eax,0x14
c00154af:	0f b7 c0             	movzx  eax,ax
c00154b2:	83 ec 0c             	sub    esp,0xc
c00154b5:	50                   	push   eax
c00154b6:	e8 2d b7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00154bb:	83 c4 10             	add    esp,0x10
c00154be:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00154c2:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00154c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00154ca:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c00154d0:	83 ec 08             	sub    esp,0x8
c00154d3:	6a 14                	push   0x14
c00154d5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00154d9:	e8 1a e0 ff ff       	call   c00134f8 <inet_chksum>
c00154de:	83 c4 10             	add    esp,0x10
c00154e1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00154e5:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00154e9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00154ed:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00154f0:	83 ec 04             	sub    esp,0x4
c00154f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00154f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00154fb:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00154ff:	ff d0                	call   eax
c0015501:	83 c4 10             	add    esp,0x10
c0015504:	66 a1 50 67 03 c0    	mov    ax,ds:0xc0036750
c001550a:	83 c0 01             	add    eax,0x1
c001550d:	66 a3 50 67 03 c0    	mov    ds:0xc0036750,ax
c0015513:	83 ec 0c             	sub    esp,0xc
c0015516:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001551a:	e8 3d 2e ff ff       	call   c000835c <pbuf_free>
c001551f:	83 c4 10             	add    esp,0x10
c0015522:	66 8b 54 24 2e       	mov    dx,WORD PTR [esp+0x2e]
c0015527:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001552b:	89 d1                	mov    ecx,edx
c001552d:	29 c1                	sub    ecx,eax
c001552f:	89 c8                	mov    eax,ecx
c0015531:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0015536:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001553a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001553e:	01 d0                	add    eax,edx
c0015540:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0015545:	8d 76 00             	lea    esi,[esi+0x0]
c0015548:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c001554d:	85 c0                	test   eax,eax
c001554f:	0f 85 f3 fc ff ff    	jne    c0015248 <ip_frag+0x98>
c0015555:	b0 00                	mov    al,0x0
c0015557:	90                   	nop
c0015558:	83 c4 38             	add    esp,0x38
c001555b:	5b                   	pop    ebx
c001555c:	c3                   	ret    
c001555d:	90                   	nop

c001555e <Computer::close(int, int, void*)>:
c001555e:	53                   	push   ebx
c001555f:	83 ec 08             	sub    esp,0x8
c0015562:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015566:	e8 b9 a4 00 00       	call   c001fa24 <KeExecuteAtexit()>
c001556b:	83 ec 0c             	sub    esp,0xc
c001556e:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0015574:	50                   	push   eax
c0015575:	e8 bc 5f 00 00       	call   c001b536 <Device::closeAll()>
c001557a:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0015580:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015584:	8b 10                	mov    edx,DWORD PTR [eax]
c0015586:	51                   	push   ecx
c0015587:	68 0f 27 00 00       	push   0x270f
c001558c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015590:	53                   	push   ebx
c0015591:	50                   	push   eax
c0015592:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015595:	83 c4 14             	add    esp,0x14
c0015598:	68 28 0f 03 c0       	push   0xc0030f28
c001559d:	e8 c4 ac 00 00       	call   c0020266 <KePanic(char const*)>
c00155a2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00155a7:	83 c4 18             	add    esp,0x18
c00155aa:	5b                   	pop    ebx
c00155ab:	c3                   	ret    

c00155ac <Krnl::firstTask()>:
c00155ac:	53                   	push   ebx
c00155ad:	83 ec 14             	sub    esp,0x14
c00155b0:	fb                   	sti    
c00155b1:	68 3e 0f 03 c0       	push   0xc0030f3e
c00155b6:	e8 48 a5 00 00       	call   c001fb03 <KeSetBootMessage(char const*)>
c00155bb:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c00155c2:	e8 f7 0d 00 00       	call   c00163be <malloc>
c00155c7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00155ce:	89 c3                	mov    ebx,eax
c00155d0:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00155d5:	50                   	push   eax
c00155d6:	68 57 0f 03 c0       	push   0xc0030f57
c00155db:	6a 01                	push   0x1
c00155dd:	53                   	push   ebx
c00155de:	e8 01 f8 00 00       	call   c0024de4 <Process::Process(bool, char const*, Process*, char**)>
c00155e3:	83 c4 20             	add    esp,0x20
c00155e6:	68 ff 00 00 00       	push   0xff
c00155eb:	6a 00                	push   0x0
c00155ed:	68 05 5e 01 c0       	push   0xc0015e05
c00155f2:	53                   	push   ebx
c00155f3:	e8 14 fa 00 00       	call   c002500c <Process::createThread(void (*)(void*), void*, int)>
c00155f8:	8b 15 f8 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401f8
c00155fe:	6a 7a                	push   0x7a
c0015600:	6a 00                	push   0x0
c0015602:	68 d4 58 02 c0       	push   0xc00258d4
c0015607:	52                   	push   edx
c0015608:	e8 ff f9 00 00       	call   c002500c <Process::createThread(void (*)(void*), void*, int)>
c001560d:	83 c4 14             	add    esp,0x14
c0015610:	a3 b0 01 04 c0       	mov    ds:0xc00401b0,eax
c0015615:	68 54 10 03 c0       	push   0xc0031054
c001561a:	e8 e4 a4 00 00       	call   c001fb03 <KeSetBootMessage(char const*)>
c001561f:	c6 05 c1 a9 03 c0 01 	mov    BYTE PTR ds:0xc003a9c1,0x1
c0015626:	e8 f4 ad 00 00       	call   c002041f <KeInitRand()>
c001562b:	e8 3b 06 01 00       	call   c0025c6b <Vm::initialise8086()>
c0015630:	e8 fd 4a 00 00       	call   c001a132 <Fs::initVFS()>
c0015635:	c7 04 24 64 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f64
c001563c:	e8 c2 a4 00 00       	call   c001fb03 <KeSetBootMessage(char const*)>
c0015641:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0015646:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001564c:	8b 10                	mov    edx,DWORD PTR [eax]
c001564e:	6a 00                	push   0x0
c0015650:	6a 00                	push   0x0
c0015652:	6a 00                	push   0x0
c0015654:	50                   	push   eax
c0015655:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015658:	83 c4 14             	add    esp,0x14
c001565b:	68 54 10 03 c0       	push   0xc0031054
c0015660:	e8 9e a4 00 00       	call   c001fb03 <KeSetBootMessage(char const*)>
c0015665:	e8 62 42 00 00       	call   c00198cc <KeInitialiseSymlinks()>
c001566a:	e8 3f aa 00 00       	call   c00200ae <KeLoadSystemEnv()>
c001566f:	e8 b7 ac 00 00       	call   c002032b <KeSetupPowerManager()>
c0015674:	83 c4 0c             	add    esp,0xc
c0015677:	6a 3a                	push   0x3a
c0015679:	68 7e 0f 03 c0       	push   0xc0030f7e
c001567e:	68 87 0f 03 c0       	push   0xc0030f87
c0015683:	e8 16 d9 00 00       	call   c0022f9e <Reg::readIntWithDefault(char*, char*, int)>
c0015688:	89 04 24             	mov    DWORD PTR [esp],eax
c001568b:	e8 bc 56 00 00       	call   c001ad4c <User::loadClockSettings(int)>
c0015690:	c7 04 24 78 10 03 c0 	mov    DWORD PTR [esp],0xc0031078
c0015697:	e8 67 a4 00 00       	call   c001fb03 <KeSetBootMessage(char const*)>
c001569c:	59                   	pop    ecx
c001569d:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00156a2:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c00156a8:	53                   	push   ebx
c00156a9:	e8 3c 5d 00 00       	call   c001b3ea <Device::loadDriversForAll()>
c00156ae:	e8 61 17 ff ff       	call   c0006e14 <lwip_init>
c00156b3:	c7 04 24 8f 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f8f
c00156ba:	e8 44 a4 00 00       	call   c001fb03 <KeSetBootMessage(char const*)>
c00156bf:	58                   	pop    eax
c00156c0:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c00156c6:	5a                   	pop    edx
c00156c7:	6a 01                	push   0x1
c00156c9:	68 a0 0f 03 c0       	push   0xc0030fa0
c00156ce:	e8 06 f1 00 00       	call   c00247d9 <Thr::loadDLL(char const*, bool)>
c00156d3:	59                   	pop    ecx
c00156d4:	5a                   	pop    edx
c00156d5:	53                   	push   ebx
c00156d6:	50                   	push   eax
c00156d7:	e8 4f f3 00 00       	call   c0024a2b <Thr::executeDLL(unsigned long, void*)>
c00156dc:	83 c4 10             	add    esp,0x10
c00156df:	83 ec 0c             	sub    esp,0xc
c00156e2:	6a 02                	push   0x2
c00156e4:	e8 2f fc 00 00       	call   c0025318 <blockTask(TaskState)>
c00156e9:	83 c4 10             	add    esp,0x10
c00156ec:	eb f1                	jmp    c00156df <Krnl::firstTask()+0x133>

c00156ee <Computer::Computer()>:
c00156ee:	83 ec 0c             	sub    esp,0xc
c00156f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156f5:	83 ec 08             	sub    esp,0x8
c00156f8:	68 bc 0f 03 c0       	push   0xc0030fbc
c00156fd:	50                   	push   eax
c00156fe:	e8 2d 5d 00 00       	call   c001b430 <Device::Device(char const*)>
c0015703:	83 c4 10             	add    esp,0x10
c0015706:	ba c4 10 03 c0       	mov    edx,0xc00310c4
c001570b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001570f:	89 10                	mov    DWORD PTR [eax],edx
c0015711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015715:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001571f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015723:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c001572d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015731:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0015737:	83 ca 04             	or     edx,0x4
c001573a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0015740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015744:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001574a:	0f b6 d0             	movzx  edx,al
c001574d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015751:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0015758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001575c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0015762:	0f b6 d0             	movzx  edx,al
c0015765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015769:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001576e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015772:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0015778:	8d 50 01             	lea    edx,[eax+0x1]
c001577b:	88 d1                	mov    cl,dl
c001577d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015781:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0015787:	0f b6 d0             	movzx  edx,al
c001578a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001578e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0015792:	83 e1 3f             	and    ecx,0x3f
c0015795:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0015799:	90                   	nop
c001579a:	83 c4 0c             	add    esp,0xc
c001579d:	c3                   	ret    

c001579e <Computer::setBootMessage(char const*)>:
c001579e:	c3                   	ret    
c001579f:	90                   	nop

c00157a0 <Computer::detectFeatures()>:
c00157a0:	55                   	push   ebp
c00157a1:	57                   	push   edi
c00157a2:	56                   	push   esi
c00157a3:	53                   	push   ebx
c00157a4:	83 ec 1c             	sub    esp,0x1c
c00157a7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00157ab:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00157b1:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c00157b7:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00157bd:	e8 37 aa fe ff       	call   c00001f9 <detectCPUID>
c00157c2:	31 d2                	xor    edx,edx
c00157c4:	85 c0                	test   eax,eax
c00157c6:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00157cc:	0f 95 c2             	setne  dl
c00157cf:	83 e0 fd             	and    eax,0xfffffffd
c00157d2:	d1 e2                	shl    edx,1
c00157d4:	09 d0                	or     eax,edx
c00157d6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00157dc:	a8 02                	test   al,0x2
c00157de:	75 51                	jne    c0015831 <Computer::detectFeatures()+0x91>
c00157e0:	f6 05 d5 a9 03 c0 04 	test   BYTE PTR ds:0xc003a9d5,0x4
c00157e7:	74 0f                	je     c00157f8 <Computer::detectFeatures()+0x58>
c00157e9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00157ef:	83 e0 fb             	and    eax,0xfffffffb
c00157f2:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00157f8:	e8 29 8b 01 00       	call   c002e326 <x87Detect>
c00157fd:	83 e0 01             	and    eax,0x1
c0015800:	c1 e0 04             	shl    eax,0x4
c0015803:	89 c2                	mov    edx,eax
c0015805:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c001580b:	83 e0 ef             	and    eax,0xffffffef
c001580e:	09 d0                	or     eax,edx
c0015810:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015816:	88 c2                	mov    dl,al
c0015818:	a8 10                	test   al,0x10
c001581a:	0f 85 33 01 00 00    	jne    c0015953 <Computer::detectFeatures()+0x1b3>
c0015820:	80 e2 80             	and    dl,0x80
c0015823:	0f 85 4c 01 00 00    	jne    c0015975 <Computer::detectFeatures()+0x1d5>
c0015829:	83 c4 1c             	add    esp,0x1c
c001582c:	5b                   	pop    ebx
c001582d:	5e                   	pop    esi
c001582e:	5f                   	pop    edi
c001582f:	5d                   	pop    ebp
c0015830:	c3                   	ret    
c0015831:	83 ec 0c             	sub    esp,0xc
c0015834:	6a 20                	push   0x20
c0015836:	e8 01 97 00 00       	call   c001ef3c <CPU::cpuidCheckEDX(unsigned int)>
c001583b:	83 e0 01             	and    eax,0x1
c001583e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0015845:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c001584b:	83 e0 f7             	and    eax,0xfffffff7
c001584e:	09 d0                	or     eax,edx
c0015850:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015856:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c001585d:	e8 da 96 00 00       	call   c001ef3c <CPU::cpuidCheckEDX(unsigned int)>
c0015862:	89 c2                	mov    edx,eax
c0015864:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c001586a:	83 e2 01             	and    edx,0x1
c001586d:	83 e0 fe             	and    eax,0xfffffffe
c0015870:	09 d0                	or     eax,edx
c0015872:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015878:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001587f:	e8 b8 96 00 00       	call   c001ef3c <CPU::cpuidCheckEDX(unsigned int)>
c0015884:	89 c2                	mov    edx,eax
c0015886:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c001588c:	c1 e2 07             	shl    edx,0x7
c001588f:	83 e0 7f             	and    eax,0x7f
c0015892:	09 d0                	or     eax,edx
c0015894:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c001589a:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c00158a1:	e8 96 96 00 00       	call   c001ef3c <CPU::cpuidCheckEDX(unsigned int)>
c00158a6:	83 c4 10             	add    esp,0x10
c00158a9:	83 e0 01             	and    eax,0x1
c00158ac:	c1 e0 05             	shl    eax,0x5
c00158af:	89 c2                	mov    edx,eax
c00158b1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00158b7:	83 e0 df             	and    eax,0xffffffdf
c00158ba:	09 d0                	or     eax,edx
c00158bc:	f7 05 d4 a9 03 c0 01 04 00 00 	test   DWORD PTR ds:0xc003a9d4,0x401
c00158c6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00158cc:	0f 84 c9 00 00 00    	je     c001599b <Computer::detectFeatures()+0x1fb>
c00158d2:	83 e0 fe             	and    eax,0xfffffffe
c00158d5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00158db:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00158e1:	89 c2                	mov    edx,eax
c00158e3:	83 e2 09             	and    edx,0x9
c00158e6:	83 fa 01             	cmp    edx,0x1
c00158e9:	75 09                	jne    c00158f4 <Computer::detectFeatures()+0x154>
c00158eb:	83 e0 fe             	and    eax,0xfffffffe
c00158ee:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00158f4:	83 ec 0c             	sub    esp,0xc
c00158f7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00158fb:	50                   	push   eax
c00158fc:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0015900:	55                   	push   ebp
c0015901:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0015905:	57                   	push   edi
c0015906:	8d 74 24 18          	lea    esi,[esp+0x18]
c001590a:	56                   	push   esi
c001590b:	68 00 00 00 80       	push   0x80000000
c0015910:	e8 a3 95 00 00       	call   c001eeb8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015915:	83 c4 20             	add    esp,0x20
c0015918:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c001591f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0015923:	0f 86 b7 fe ff ff    	jbe    c00157e0 <Computer::detectFeatures()+0x40>
c0015929:	83 ec 0c             	sub    esp,0xc
c001592c:	50                   	push   eax
c001592d:	55                   	push   ebp
c001592e:	57                   	push   edi
c001592f:	56                   	push   esi
c0015930:	68 01 00 00 80       	push   0x80000001
c0015935:	e8 7e 95 00 00       	call   c001eeb8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001593a:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0015940:	83 c4 20             	add    esp,0x20
c0015943:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0015948:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001594e:	e9 8d fe ff ff       	jmp    c00157e0 <Computer::detectFeatures()+0x40>
c0015953:	e8 88 89 01 00       	call   c002e2e0 <sseDetect>
c0015958:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c001595e:	c1 e0 07             	shl    eax,0x7
c0015961:	83 e2 7f             	and    edx,0x7f
c0015964:	09 c2                	or     edx,eax
c0015966:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c001596c:	80 e2 80             	and    dl,0x80
c001596f:	0f 84 b4 fe ff ff    	je     c0015829 <Computer::detectFeatures()+0x89>
c0015975:	e8 f6 85 01 00       	call   c002df70 <avxDetect>
c001597a:	83 e0 01             	and    eax,0x1
c001597d:	c1 e0 05             	shl    eax,0x5
c0015980:	89 c2                	mov    edx,eax
c0015982:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015988:	83 e0 df             	and    eax,0xffffffdf
c001598b:	09 d0                	or     eax,edx
c001598d:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015993:	83 c4 1c             	add    esp,0x1c
c0015996:	5b                   	pop    ebx
c0015997:	5e                   	pop    esi
c0015998:	5f                   	pop    edi
c0015999:	5d                   	pop    ebp
c001599a:	c3                   	ret    
c001599b:	83 ec 0c             	sub    esp,0xc
c001599e:	68 00 02 00 00       	push   0x200
c00159a3:	e8 94 95 00 00       	call   c001ef3c <CPU::cpuidCheckEDX(unsigned int)>
c00159a8:	83 c4 10             	add    esp,0x10
c00159ab:	89 c2                	mov    edx,eax
c00159ad:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00159b3:	83 e2 01             	and    edx,0x1
c00159b6:	83 e0 fe             	and    eax,0xfffffffe
c00159b9:	09 d0                	or     eax,edx
c00159bb:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00159c1:	e9 15 ff ff ff       	jmp    c00158db <Computer::detectFeatures()+0x13b>

c00159c6 <Computer::displayFeatures()>:
c00159c6:	c3                   	ret    
c00159c7:	90                   	nop

c00159c8 <Computer::rdmsr(unsigned int)>:
c00159c8:	83 ec 0c             	sub    esp,0xc
c00159cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159cf:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00159d6:	74 0a                	je     c00159e2 <Computer::rdmsr(unsigned int)+0x1a>
c00159d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00159dc:	0f 32                	rdmsr  
c00159de:	83 c4 0c             	add    esp,0xc
c00159e1:	c3                   	ret    
c00159e2:	83 ec 0c             	sub    esp,0xc
c00159e5:	68 c5 0f 03 c0       	push   0xc0030fc5
c00159ea:	e8 77 a8 00 00       	call   c0020266 <KePanic(char const*)>
c00159ef:	83 c4 10             	add    esp,0x10
c00159f2:	eb e4                	jmp    c00159d8 <Computer::rdmsr(unsigned int)+0x10>

c00159f4 <Computer::wrmsr(unsigned int, unsigned long long)>:
c00159f4:	57                   	push   edi
c00159f5:	56                   	push   esi
c00159f6:	83 ec 04             	sub    esp,0x4
c00159f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159fd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0015a01:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0015a05:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0015a0c:	74 10                	je     c0015a1e <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0015a0e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015a12:	89 f0                	mov    eax,esi
c0015a14:	89 fa                	mov    edx,edi
c0015a16:	0f 30                	wrmsr  
c0015a18:	83 c4 04             	add    esp,0x4
c0015a1b:	5e                   	pop    esi
c0015a1c:	5f                   	pop    edi
c0015a1d:	c3                   	ret    
c0015a1e:	83 ec 0c             	sub    esp,0xc
c0015a21:	68 cb 0f 03 c0       	push   0xc0030fcb
c0015a26:	e8 3b a8 00 00       	call   c0020266 <KePanic(char const*)>
c0015a2b:	83 c4 10             	add    esp,0x10
c0015a2e:	eb de                	jmp    c0015a0e <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0015a30 <Computer::shutdown()>:
c0015a30:	83 ec 0c             	sub    esp,0xc
c0015a33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a37:	8b 10                	mov    edx,DWORD PTR [eax]
c0015a39:	6a 00                	push   0x0
c0015a3b:	6a 00                	push   0x0
c0015a3d:	6a 00                	push   0x0
c0015a3f:	50                   	push   eax
c0015a40:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015a43:	83 c4 1c             	add    esp,0x1c
c0015a46:	c3                   	ret    
c0015a47:	90                   	nop

c0015a48 <Computer::restart()>:
c0015a48:	83 ec 0c             	sub    esp,0xc
c0015a4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a4f:	8b 10                	mov    edx,DWORD PTR [eax]
c0015a51:	6a 00                	push   0x0
c0015a53:	6a 00                	push   0x0
c0015a55:	6a 01                	push   0x1
c0015a57:	50                   	push   eax
c0015a58:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015a5b:	83 c4 1c             	add    esp,0x1c
c0015a5e:	c3                   	ret    
c0015a5f:	90                   	nop

c0015a60 <Computer::sleep()>:
c0015a60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a64:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0015a6a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015a6e:	e9 e1 8e 00 00       	jmp    c001e954 <ACPI::sleep()>
c0015a73:	90                   	nop

c0015a74 <Computer::nmiEnabled()>:
c0015a74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a78:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0015a7e:	c3                   	ret    
c0015a7f:	90                   	nop

c0015a80 <Computer::readCMOS(unsigned char)>:
c0015a80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015a84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015a88:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c0015a8f:	75 09                	jne    c0015a9a <Computer::readCMOS(unsigned char)+0x1a>
c0015a91:	b2 80                	mov    dl,0x80
c0015a93:	09 d0                	or     eax,edx
c0015a95:	e6 70                	out    0x70,al
c0015a97:	e4 71                	in     al,0x71
c0015a99:	c3                   	ret    
c0015a9a:	31 d2                	xor    edx,edx
c0015a9c:	eb f5                	jmp    c0015a93 <Computer::readCMOS(unsigned char)+0x13>

c0015a9e <Computer::enableNMI(bool)>:
c0015a9e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015aa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015aa6:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0015aac:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0015ab4:	eb ca                	jmp    c0015a80 <Computer::readCMOS(unsigned char)>

c0015ab6 <Computer::open(int, int, void*)>:
c0015ab6:	56                   	push   esi
c0015ab7:	53                   	push   ebx
c0015ab8:	83 ec 10             	sub    esp,0x10
c0015abb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015abf:	f6 05 d4 a9 03 c0 04 	test   BYTE PTR ds:0xc003a9d4,0x4
c0015ac6:	68 d1 0f 03 c0       	push   0xc0030fd1
c0015acb:	0f 94 05 a0 3b 03 c0 	sete   BYTE PTR ds:0xc0033ba0
c0015ad2:	e8 2c a0 00 00       	call   c001fb03 <KeSetBootMessage(char const*)>
c0015ad7:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0015ade:	e8 db 08 00 00       	call   c00163be <malloc>
c0015ae3:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ae6:	89 c6                	mov    esi,eax
c0015ae8:	e8 db 89 00 00       	call   c001e4c8 <ACPI::ACPI()>
c0015aed:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0015af3:	58                   	pop    eax
c0015af4:	5a                   	pop    edx
c0015af5:	56                   	push   esi
c0015af6:	53                   	push   ebx
c0015af7:	e8 d2 57 00 00       	call   c001b2ce <Device::addChild(Device*)>
c0015afc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015aff:	e8 9c fc ff ff       	call   c00157a0 <Computer::detectFeatures()>
c0015b04:	59                   	pop    ecx
c0015b05:	5e                   	pop    esi
c0015b06:	6a 01                	push   0x1
c0015b08:	53                   	push   ebx
c0015b09:	e8 90 ff ff ff       	call   c0015a9e <Computer::enableNMI(bool)>
c0015b0e:	c7 04 24 e9 0f 03 c0 	mov    DWORD PTR [esp],0xc0030fe9
c0015b15:	e8 e9 9f 00 00       	call   c001fb03 <KeSetBootMessage(char const*)>
c0015b1a:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0015b21:	e8 98 08 00 00       	call   c00163be <malloc>
c0015b26:	89 04 24             	mov    DWORD PTR [esp],eax
c0015b29:	89 c6                	mov    esi,eax
c0015b2b:	e8 c4 94 00 00       	call   c001eff4 <CPU::CPU()>
c0015b30:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0015b36:	58                   	pop    eax
c0015b37:	5a                   	pop    edx
c0015b38:	56                   	push   esi
c0015b39:	53                   	push   ebx
c0015b3a:	e8 8f 57 00 00       	call   c001b2ce <Device::addChild(Device*)>
c0015b3f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015b45:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015b49:	8b 10                	mov    edx,DWORD PTR [eax]
c0015b4b:	51                   	push   ecx
c0015b4c:	6a 00                	push   0x0
c0015b4e:	6a 00                	push   0x0
c0015b50:	50                   	push   eax
c0015b51:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015b54:	83 c4 14             	add    esp,0x14
c0015b57:	68 98 10 03 c0       	push   0xc0031098
c0015b5c:	e8 a2 9f 00 00       	call   c001fb03 <KeSetBootMessage(char const*)>
c0015b61:	e8 42 13 01 00       	call   c0026ea8 <HalInitialiseCoprocessor()>
c0015b66:	c7 04 24 03 10 03 c0 	mov    DWORD PTR [esp],0xc0031003
c0015b6d:	e8 91 9f 00 00       	call   c001fb03 <KeSetBootMessage(char const*)>
c0015b72:	c7 04 24 ac 55 01 c0 	mov    DWORD PTR [esp],0xc00155ac
c0015b79:	e8 ba f5 00 00       	call   c0025138 <setupMultitasking(void (*)())>
c0015b7e:	83 c4 14             	add    esp,0x14
c0015b81:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b86:	5b                   	pop    ebx
c0015b87:	5e                   	pop    esi
c0015b88:	c3                   	ret    
c0015b89:	90                   	nop

c0015b8a <Computer::disableNMI()>:
c0015b8a:	6a 00                	push   0x0
c0015b8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015b90:	50                   	push   eax
c0015b91:	e8 08 ff ff ff       	call   c0015a9e <Computer::enableNMI(bool)>
c0015b96:	5a                   	pop    edx
c0015b97:	59                   	pop    ecx
c0015b98:	c3                   	ret    
c0015b99:	90                   	nop

c0015b9a <Computer::writeCMOS(unsigned char, unsigned char)>:
c0015b9a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015b9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ba2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ba6:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c0015bad:	75 0b                	jne    c0015bba <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c0015baf:	b1 80                	mov    cl,0x80
c0015bb1:	09 c8                	or     eax,ecx
c0015bb3:	e6 70                	out    0x70,al
c0015bb5:	88 d0                	mov    al,dl
c0015bb7:	e6 71                	out    0x71,al
c0015bb9:	c3                   	ret    
c0015bba:	31 c9                	xor    ecx,ecx
c0015bbc:	eb f3                	jmp    c0015bb1 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c0015bbe <Computer::handleNMI()>:
c0015bbe:	56                   	push   esi
c0015bbf:	53                   	push   ebx
c0015bc0:	83 ec 10             	sub    esp,0x10
c0015bc3:	e4 92                	in     al,0x92
c0015bc5:	89 c6                	mov    esi,eax
c0015bc7:	e4 61                	in     al,0x61
c0015bc9:	68 1e 10 03 c0       	push   0xc003101e
c0015bce:	88 c3                	mov    bl,al
c0015bd0:	e8 78 36 00 00       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0015bd5:	83 c4 10             	add    esp,0x10
c0015bd8:	83 e6 10             	and    esi,0x10
c0015bdb:	75 10                	jne    c0015bed <Computer::handleNMI()+0x2f>
c0015bdd:	f6 c3 40             	test   bl,0x40
c0015be0:	75 20                	jne    c0015c02 <Computer::handleNMI()+0x44>
c0015be2:	80 e3 80             	and    bl,0x80
c0015be5:	75 30                	jne    c0015c17 <Computer::handleNMI()+0x59>
c0015be7:	83 c4 04             	add    esp,0x4
c0015bea:	5b                   	pop    ebx
c0015beb:	5e                   	pop    esi
c0015bec:	c3                   	ret    
c0015bed:	83 ec 0c             	sub    esp,0xc
c0015bf0:	68 2f 10 03 c0       	push   0xc003102f
c0015bf5:	e8 6c a6 00 00       	call   c0020266 <KePanic(char const*)>
c0015bfa:	83 c4 10             	add    esp,0x10
c0015bfd:	f6 c3 40             	test   bl,0x40
c0015c00:	74 e0                	je     c0015be2 <Computer::handleNMI()+0x24>
c0015c02:	83 ec 0c             	sub    esp,0xc
c0015c05:	68 3c 10 03 c0       	push   0xc003103c
c0015c0a:	e8 57 a6 00 00       	call   c0020266 <KePanic(char const*)>
c0015c0f:	83 c4 10             	add    esp,0x10
c0015c12:	80 e3 80             	and    bl,0x80
c0015c15:	74 d0                	je     c0015be7 <Computer::handleNMI()+0x29>
c0015c17:	c7 44 24 10 46 10 03 c0 	mov    DWORD PTR [esp+0x10],0xc0031046
c0015c1f:	83 c4 04             	add    esp,0x4
c0015c22:	5b                   	pop    ebx
c0015c23:	5e                   	pop    esi
c0015c24:	e9 3d a6 00 00       	jmp    c0020266 <KePanic(char const*)>
c0015c29:	90                   	nop

c0015c2a <GDTEntry::setBase(unsigned int)>:
c0015c2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c2e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c32:	89 c1                	mov    ecx,eax
c0015c34:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0015c38:	c1 e9 10             	shr    ecx,0x10
c0015c3b:	c1 e8 18             	shr    eax,0x18
c0015c3e:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0015c41:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0015c44:	c3                   	ret    
c0015c45:	90                   	nop

c0015c46 <GDTEntry::setLimit(unsigned int)>:
c0015c46:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015c4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c4e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0015c51:	66 89 01             	mov    WORD PTR [ecx],ax
c0015c54:	83 e2 f0             	and    edx,0xfffffff0
c0015c57:	c1 e8 10             	shr    eax,0x10
c0015c5a:	83 e0 0f             	and    eax,0xf
c0015c5d:	09 d0                	or     eax,edx
c0015c5f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0015c62:	c3                   	ret    
c0015c63:	90                   	nop

c0015c64 <GDT::GDT()>:
c0015c64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c68:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015c6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c72:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015c78:	90                   	nop
c0015c79:	c3                   	ret    

c0015c7a <GDT::addEntry(GDTEntry)>:
c0015c7a:	53                   	push   ebx
c0015c7b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015c7f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015c83:	8b 02                	mov    eax,DWORD PTR [edx]
c0015c85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015c89:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0015c8d:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0015c91:	8d 48 01             	lea    ecx,[eax+0x1]
c0015c94:	c1 e0 03             	shl    eax,0x3
c0015c97:	89 0a                	mov    DWORD PTR [edx],ecx
c0015c99:	5b                   	pop    ebx
c0015c9a:	c3                   	ret    
c0015c9b:	90                   	nop

c0015c9c <GDT::getNumberOfEntries()>:
c0015c9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ca0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca2:	c3                   	ret    
c0015ca3:	90                   	nop

c0015ca4 <GDT::flush()>:
c0015ca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ca8:	8b 10                	mov    edx,DWORD PTR [eax]
c0015caa:	83 c0 04             	add    eax,0x4
c0015cad:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0015cb4:	a3 c6 a9 03 c0       	mov    ds:0xc003a9c6,eax
c0015cb9:	66 89 15 c4 a9 03 c0 	mov    WORD PTR ds:0xc003a9c4,dx
c0015cc0:	e9 95 a6 fe ff       	jmp    c000035a <loadGDT>
c0015cc5:	90                   	nop

c0015cc6 <GDT::setup()>:
c0015cc6:	57                   	push   edi
c0015cc7:	56                   	push   esi
c0015cc8:	53                   	push   ebx
c0015cc9:	83 ec 30             	sub    esp,0x30
c0015ccc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0015cd0:	6a 00                	push   0x0
c0015cd2:	8d 74 24 14          	lea    esi,[esp+0x14]
c0015cd6:	56                   	push   esi
c0015cd7:	e8 4e ff ff ff       	call   c0015c2a <GDTEntry::setBase(unsigned int)>
c0015cdc:	6a 00                	push   0x0
c0015cde:	56                   	push   esi
c0015cdf:	e8 62 ff ff ff       	call   c0015c46 <GDTEntry::setLimit(unsigned int)>
c0015ce4:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0015cec:	6a 00                	push   0x0
c0015cee:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015cf2:	56                   	push   esi
c0015cf3:	e8 32 ff ff ff       	call   c0015c2a <GDTEntry::setBase(unsigned int)>
c0015cf8:	68 ff ff ff 00       	push   0xffffff
c0015cfd:	56                   	push   esi
c0015cfe:	e8 43 ff ff ff       	call   c0015c46 <GDTEntry::setLimit(unsigned int)>
c0015d03:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0015d07:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015d0b:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015d0f:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0015d13:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0015d18:	0d 00 9a c0 00       	or     eax,0xc09a00
c0015d1d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015d21:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0015d25:	89 f8                	mov    eax,edi
c0015d27:	89 fa                	mov    edx,edi
c0015d29:	80 e4 f7             	and    ah,0xf7
c0015d2c:	80 ce 60             	or     dh,0x60
c0015d2f:	89 c7                	mov    edi,eax
c0015d31:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015d35:	80 cc 60             	or     ah,0x60
c0015d38:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015d3c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015d40:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0015d44:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015d48:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015d4c:	83 c4 20             	add    esp,0x20
c0015d4f:	6a 00                	push   0x0
c0015d51:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015d55:	50                   	push   eax
c0015d56:	e8 cf fe ff ff       	call   c0015c2a <GDTEntry::setBase(unsigned int)>
c0015d5b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0015d5f:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0015d63:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0015d67:	83 e0 3f             	and    eax,0x3f
c0015d6a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015d6e:	6a 00                	push   0x0
c0015d70:	8d 44 24 34          	lea    eax,[esp+0x34]
c0015d74:	50                   	push   eax
c0015d75:	e8 b0 fe ff ff       	call   c0015c2a <GDTEntry::setBase(unsigned int)>
c0015d7a:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0015d7e:	83 e0 3f             	and    eax,0x3f
c0015d81:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0015d85:	83 c4 0c             	add    esp,0xc
c0015d88:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015d8c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015d90:	53                   	push   ebx
c0015d91:	e8 e4 fe ff ff       	call   c0015c7a <GDT::addEntry(GDTEntry)>
c0015d96:	83 c4 0c             	add    esp,0xc
c0015d99:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015d9d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015da1:	53                   	push   ebx
c0015da2:	e8 d3 fe ff ff       	call   c0015c7a <GDT::addEntry(GDTEntry)>
c0015da7:	83 c4 0c             	add    esp,0xc
c0015daa:	57                   	push   edi
c0015dab:	56                   	push   esi
c0015dac:	53                   	push   ebx
c0015dad:	e8 c8 fe ff ff       	call   c0015c7a <GDT::addEntry(GDTEntry)>
c0015db2:	83 c4 0c             	add    esp,0xc
c0015db5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015db9:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015dbd:	53                   	push   ebx
c0015dbe:	e8 b7 fe ff ff       	call   c0015c7a <GDT::addEntry(GDTEntry)>
c0015dc3:	83 c4 0c             	add    esp,0xc
c0015dc6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015dca:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015dce:	53                   	push   ebx
c0015dcf:	e8 a6 fe ff ff       	call   c0015c7a <GDT::addEntry(GDTEntry)>
c0015dd4:	83 c4 0c             	add    esp,0xc
c0015dd7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015ddb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015ddf:	53                   	push   ebx
c0015de0:	e8 95 fe ff ff       	call   c0015c7a <GDT::addEntry(GDTEntry)>
c0015de5:	83 c4 0c             	add    esp,0xc
c0015de8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015dec:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015df0:	53                   	push   ebx
c0015df1:	e8 84 fe ff ff       	call   c0015c7a <GDT::addEntry(GDTEntry)>
c0015df6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015df9:	e8 a6 fe ff ff       	call   c0015ca4 <GDT::flush()>
c0015dfe:	83 c4 40             	add    esp,0x40
c0015e01:	5b                   	pop    ebx
c0015e02:	5e                   	pop    esi
c0015e03:	5f                   	pop    edi
c0015e04:	c3                   	ret    

c0015e05 <idleFunction(void*)>:
c0015e05:	83 ec 0c             	sub    esp,0xc
c0015e08:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0015e0d:	48                   	dec    eax
c0015e0e:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0015e13:	75 01                	jne    c0015e16 <idleFunction(void*)+0x11>
c0015e15:	fb                   	sti    
c0015e16:	e8 59 0d 01 00       	call   c0026b74 <HalSystemIdle()>
c0015e1b:	e8 c2 8a 01 00       	call   c002e8e2 <idleCommon()>
c0015e20:	eb f4                	jmp    c0015e16 <idleFunction(void*)+0x11>
c0015e22:	66 90                	xchg   ax,ax

c0015e24 <IDTEntry::IDTEntry(bool)>:
c0015e24:	53                   	push   ebx
c0015e25:	83 ec 04             	sub    esp,0x4
c0015e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e2c:	88 04 24             	mov    BYTE PTR [esp],al
c0015e2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e33:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0015e39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e3d:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0015e41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e45:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015e48:	83 e2 f0             	and    edx,0xfffffff0
c0015e4b:	83 ca 0e             	or     edx,0xe
c0015e4e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015e51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e55:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015e58:	83 e2 ef             	and    edx,0xffffffef
c0015e5b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015e5e:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0015e62:	85 c0                	test   eax,eax
c0015e64:	74 06                	je     c0015e6c <IDTEntry::IDTEntry(bool)+0x48>
c0015e66:	b2 03                	mov    dl,0x3
c0015e68:	eb 06                	jmp    c0015e70 <IDTEntry::IDTEntry(bool)+0x4c>
c0015e6a:	66 90                	xchg   ax,ax
c0015e6c:	b2 00                	mov    dl,0x0
c0015e6e:	66 90                	xchg   ax,ax
c0015e70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e74:	83 e2 03             	and    edx,0x3
c0015e77:	89 d3                	mov    ebx,edx
c0015e79:	c1 e3 05             	shl    ebx,0x5
c0015e7c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015e7f:	83 e2 9f             	and    edx,0xffffff9f
c0015e82:	88 d1                	mov    cl,dl
c0015e84:	88 da                	mov    dl,bl
c0015e86:	09 ca                	or     edx,ecx
c0015e88:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015e8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e8f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015e92:	83 ca 80             	or     edx,0xffffff80
c0015e95:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015e98:	90                   	nop
c0015e99:	83 c4 04             	add    esp,0x4
c0015e9c:	5b                   	pop    ebx
c0015e9d:	c3                   	ret    

c0015e9e <IDTEntry::setOffset(unsigned int)>:
c0015e9e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015ea2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ea6:	66 89 02             	mov    WORD PTR [edx],ax
c0015ea9:	c1 e8 10             	shr    eax,0x10
c0015eac:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0015eb0:	c3                   	ret    
c0015eb1:	90                   	nop
c0015eb2:	66 90                	xchg   ax,ax

c0015eb4 <IDT::IDT()>:
c0015eb4:	90                   	nop
c0015eb5:	c3                   	ret    

c0015eb6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0015eb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015eba:	83 c0 30             	add    eax,0x30
c0015ebd:	c3                   	ret    

c0015ebe <IDT::addEntry(IDTEntry, int)>:
c0015ebe:	53                   	push   ebx
c0015ebf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ec3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015ec7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015ecb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015ecf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c0015ed2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0015ed6:	5b                   	pop    ebx
c0015ed7:	c3                   	ret    

c0015ed8 <IDT::addEntry(int, void (*)(), bool)>:
c0015ed8:	53                   	push   ebx
c0015ed9:	83 ec 10             	sub    esp,0x10
c0015edc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0015ee1:	50                   	push   eax
c0015ee2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0015ee6:	53                   	push   ebx
c0015ee7:	e8 38 ff ff ff       	call   c0015e24 <IDTEntry::IDTEntry(bool)>
c0015eec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015ef0:	53                   	push   ebx
c0015ef1:	e8 a8 ff ff ff       	call   c0015e9e <IDTEntry::setOffset(unsigned int)>
c0015ef6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015efa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015efe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015f02:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015f06:	e8 b3 ff ff ff       	call   c0015ebe <IDT::addEntry(IDTEntry, int)>
c0015f0b:	83 c4 30             	add    esp,0x30
c0015f0e:	5b                   	pop    ebx
c0015f0f:	c3                   	ret    

c0015f10 <IDT::flush()>:
c0015f10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f14:	66 c7 05 cc a9 03 c0 ff 07 	mov    WORD PTR ds:0xc003a9cc,0x7ff
c0015f1d:	a3 ce a9 03 c0       	mov    ds:0xc003a9ce,eax
c0015f22:	0f 01 1d cc a9 03 c0 	lidtd  ds:0xc003a9cc
c0015f29:	c3                   	ret    

c0015f2a <IDT::setup()>:
c0015f2a:	57                   	push   edi
c0015f2b:	56                   	push   esi
c0015f2c:	53                   	push   ebx
c0015f2d:	83 ec 10             	sub    esp,0x10
c0015f30:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015f34:	6a 00                	push   0x0
c0015f36:	68 e0 df 02 c0       	push   0xc002dfe0
c0015f3b:	6a 00                	push   0x0
c0015f3d:	53                   	push   ebx
c0015f3e:	e8 95 ff ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0015f43:	6a 00                	push   0x0
c0015f45:	68 f0 df 02 c0       	push   0xc002dff0
c0015f4a:	6a 01                	push   0x1
c0015f4c:	53                   	push   ebx
c0015f4d:	e8 86 ff ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0015f52:	83 c4 20             	add    esp,0x20
c0015f55:	6a 00                	push   0x0
c0015f57:	68 fa df 02 c0       	push   0xc002dffa
c0015f5c:	6a 02                	push   0x2
c0015f5e:	53                   	push   ebx
c0015f5f:	e8 74 ff ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0015f64:	6a 00                	push   0x0
c0015f66:	68 04 e0 02 c0       	push   0xc002e004
c0015f6b:	6a 03                	push   0x3
c0015f6d:	53                   	push   ebx
c0015f6e:	e8 65 ff ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0015f73:	83 c4 20             	add    esp,0x20
c0015f76:	6a 00                	push   0x0
c0015f78:	68 0e e0 02 c0       	push   0xc002e00e
c0015f7d:	6a 04                	push   0x4
c0015f7f:	53                   	push   ebx
c0015f80:	e8 53 ff ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0015f85:	6a 00                	push   0x0
c0015f87:	68 18 e0 02 c0       	push   0xc002e018
c0015f8c:	6a 05                	push   0x5
c0015f8e:	53                   	push   ebx
c0015f8f:	e8 44 ff ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0015f94:	83 c4 20             	add    esp,0x20
c0015f97:	6a 00                	push   0x0
c0015f99:	68 22 e0 02 c0       	push   0xc002e022
c0015f9e:	6a 06                	push   0x6
c0015fa0:	53                   	push   ebx
c0015fa1:	e8 32 ff ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0015fa6:	6a 00                	push   0x0
c0015fa8:	68 2c e0 02 c0       	push   0xc002e02c
c0015fad:	6a 07                	push   0x7
c0015faf:	53                   	push   ebx
c0015fb0:	e8 23 ff ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0015fb5:	83 c4 20             	add    esp,0x20
c0015fb8:	6a 00                	push   0x0
c0015fba:	68 36 e0 02 c0       	push   0xc002e036
c0015fbf:	6a 08                	push   0x8
c0015fc1:	53                   	push   ebx
c0015fc2:	e8 11 ff ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0015fc7:	6a 00                	push   0x0
c0015fc9:	68 3e e0 02 c0       	push   0xc002e03e
c0015fce:	6a 09                	push   0x9
c0015fd0:	53                   	push   ebx
c0015fd1:	e8 02 ff ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0015fd6:	83 c4 20             	add    esp,0x20
c0015fd9:	6a 00                	push   0x0
c0015fdb:	68 48 e0 02 c0       	push   0xc002e048
c0015fe0:	6a 0a                	push   0xa
c0015fe2:	53                   	push   ebx
c0015fe3:	e8 f0 fe ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0015fe8:	6a 00                	push   0x0
c0015fea:	68 50 e0 02 c0       	push   0xc002e050
c0015fef:	6a 0b                	push   0xb
c0015ff1:	53                   	push   ebx
c0015ff2:	e8 e1 fe ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0015ff7:	83 c4 20             	add    esp,0x20
c0015ffa:	6a 00                	push   0x0
c0015ffc:	68 58 e0 02 c0       	push   0xc002e058
c0016001:	6a 0c                	push   0xc
c0016003:	53                   	push   ebx
c0016004:	e8 cf fe ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0016009:	6a 00                	push   0x0
c001600b:	68 60 e0 02 c0       	push   0xc002e060
c0016010:	6a 0d                	push   0xd
c0016012:	53                   	push   ebx
c0016013:	e8 c0 fe ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0016018:	83 c4 20             	add    esp,0x20
c001601b:	6a 00                	push   0x0
c001601d:	68 7a e0 02 c0       	push   0xc002e07a
c0016022:	6a 0e                	push   0xe
c0016024:	53                   	push   ebx
c0016025:	e8 ae fe ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c001602a:	6a 00                	push   0x0
c001602c:	68 82 e0 02 c0       	push   0xc002e082
c0016031:	6a 0f                	push   0xf
c0016033:	53                   	push   ebx
c0016034:	e8 9f fe ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0016039:	83 c4 20             	add    esp,0x20
c001603c:	6a 00                	push   0x0
c001603e:	68 8c e0 02 c0       	push   0xc002e08c
c0016043:	6a 10                	push   0x10
c0016045:	53                   	push   ebx
c0016046:	e8 8d fe ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c001604b:	6a 00                	push   0x0
c001604d:	68 96 e0 02 c0       	push   0xc002e096
c0016052:	6a 11                	push   0x11
c0016054:	53                   	push   ebx
c0016055:	e8 7e fe ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c001605a:	83 c4 20             	add    esp,0x20
c001605d:	6a 00                	push   0x0
c001605f:	68 a0 e0 02 c0       	push   0xc002e0a0
c0016064:	6a 12                	push   0x12
c0016066:	53                   	push   ebx
c0016067:	e8 6c fe ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c001606c:	6a 01                	push   0x1
c001606e:	68 3a e1 02 c0       	push   0xc002e13a
c0016073:	6a 60                	push   0x60
c0016075:	53                   	push   ebx
c0016076:	e8 5d fe ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c001607b:	83 c4 20             	add    esp,0x20
c001607e:	6a 00                	push   0x0
c0016080:	68 41 e1 02 c0       	push   0xc002e141
c0016085:	6a 20                	push   0x20
c0016087:	53                   	push   ebx
c0016088:	e8 4b fe ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c001608d:	6a 00                	push   0x0
c001608f:	68 2c e1 02 c0       	push   0xc002e12c
c0016094:	6a 21                	push   0x21
c0016096:	53                   	push   ebx
c0016097:	e8 3c fe ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c001609c:	83 c4 20             	add    esp,0x20
c001609f:	6a 00                	push   0x0
c00160a1:	68 33 e1 02 c0       	push   0xc002e133
c00160a6:	6a 22                	push   0x22
c00160a8:	53                   	push   ebx
c00160a9:	e8 2a fe ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c00160ae:	6a 00                	push   0x0
c00160b0:	68 aa e0 02 c0       	push   0xc002e0aa
c00160b5:	6a 23                	push   0x23
c00160b7:	53                   	push   ebx
c00160b8:	e8 1b fe ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c00160bd:	83 c4 20             	add    esp,0x20
c00160c0:	6a 00                	push   0x0
c00160c2:	68 b4 e0 02 c0       	push   0xc002e0b4
c00160c7:	6a 24                	push   0x24
c00160c9:	53                   	push   ebx
c00160ca:	e8 09 fe ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c00160cf:	6a 00                	push   0x0
c00160d1:	68 be e0 02 c0       	push   0xc002e0be
c00160d6:	6a 25                	push   0x25
c00160d8:	53                   	push   ebx
c00160d9:	e8 fa fd ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c00160de:	83 c4 20             	add    esp,0x20
c00160e1:	6a 00                	push   0x0
c00160e3:	68 c8 e0 02 c0       	push   0xc002e0c8
c00160e8:	6a 26                	push   0x26
c00160ea:	53                   	push   ebx
c00160eb:	e8 e8 fd ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c00160f0:	6a 00                	push   0x0
c00160f2:	68 d2 e0 02 c0       	push   0xc002e0d2
c00160f7:	6a 27                	push   0x27
c00160f9:	53                   	push   ebx
c00160fa:	e8 d9 fd ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c00160ff:	83 c4 20             	add    esp,0x20
c0016102:	6a 00                	push   0x0
c0016104:	68 dc e0 02 c0       	push   0xc002e0dc
c0016109:	6a 28                	push   0x28
c001610b:	53                   	push   ebx
c001610c:	e8 c7 fd ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0016111:	6a 00                	push   0x0
c0016113:	68 e6 e0 02 c0       	push   0xc002e0e6
c0016118:	6a 29                	push   0x29
c001611a:	53                   	push   ebx
c001611b:	e8 b8 fd ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0016120:	83 c4 20             	add    esp,0x20
c0016123:	6a 00                	push   0x0
c0016125:	68 f0 e0 02 c0       	push   0xc002e0f0
c001612a:	6a 2a                	push   0x2a
c001612c:	53                   	push   ebx
c001612d:	e8 a6 fd ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0016132:	6a 00                	push   0x0
c0016134:	68 fa e0 02 c0       	push   0xc002e0fa
c0016139:	6a 2b                	push   0x2b
c001613b:	53                   	push   ebx
c001613c:	e8 97 fd ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0016141:	83 c4 20             	add    esp,0x20
c0016144:	6a 00                	push   0x0
c0016146:	68 04 e1 02 c0       	push   0xc002e104
c001614b:	6a 2c                	push   0x2c
c001614d:	53                   	push   ebx
c001614e:	e8 85 fd ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0016153:	6a 00                	push   0x0
c0016155:	68 0e e1 02 c0       	push   0xc002e10e
c001615a:	6a 2d                	push   0x2d
c001615c:	53                   	push   ebx
c001615d:	e8 76 fd ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0016162:	83 c4 20             	add    esp,0x20
c0016165:	6a 00                	push   0x0
c0016167:	68 18 e1 02 c0       	push   0xc002e118
c001616c:	6a 2e                	push   0x2e
c001616e:	53                   	push   ebx
c001616f:	e8 64 fd ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0016174:	6a 00                	push   0x0
c0016176:	68 22 e1 02 c0       	push   0xc002e122
c001617b:	6a 2f                	push   0x2f
c001617d:	53                   	push   ebx
c001617e:	e8 55 fd ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0016183:	83 c4 20             	add    esp,0x20
c0016186:	6a 00                	push   0x0
c0016188:	68 7c e2 02 c0       	push   0xc002e27c
c001618d:	6a 30                	push   0x30
c001618f:	53                   	push   ebx
c0016190:	e8 43 fd ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0016195:	6a 00                	push   0x0
c0016197:	68 86 e2 02 c0       	push   0xc002e286
c001619c:	6a 31                	push   0x31
c001619e:	53                   	push   ebx
c001619f:	e8 34 fd ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c00161a4:	83 c4 20             	add    esp,0x20
c00161a7:	6a 00                	push   0x0
c00161a9:	68 90 e2 02 c0       	push   0xc002e290
c00161ae:	6a 32                	push   0x32
c00161b0:	53                   	push   ebx
c00161b1:	e8 22 fd ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c00161b6:	6a 00                	push   0x0
c00161b8:	68 9a e2 02 c0       	push   0xc002e29a
c00161bd:	6a 33                	push   0x33
c00161bf:	53                   	push   ebx
c00161c0:	e8 13 fd ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c00161c5:	83 c4 20             	add    esp,0x20
c00161c8:	6a 00                	push   0x0
c00161ca:	68 a4 e2 02 c0       	push   0xc002e2a4
c00161cf:	6a 34                	push   0x34
c00161d1:	53                   	push   ebx
c00161d2:	e8 01 fd ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c00161d7:	6a 00                	push   0x0
c00161d9:	68 ae e2 02 c0       	push   0xc002e2ae
c00161de:	6a 35                	push   0x35
c00161e0:	53                   	push   ebx
c00161e1:	e8 f2 fc ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c00161e6:	83 c4 20             	add    esp,0x20
c00161e9:	6a 00                	push   0x0
c00161eb:	68 b8 e2 02 c0       	push   0xc002e2b8
c00161f0:	6a 36                	push   0x36
c00161f2:	53                   	push   ebx
c00161f3:	e8 e0 fc ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c00161f8:	6a 00                	push   0x0
c00161fa:	68 c2 e2 02 c0       	push   0xc002e2c2
c00161ff:	6a 37                	push   0x37
c0016201:	53                   	push   ebx
c0016202:	e8 d1 fc ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0016207:	83 c4 1c             	add    esp,0x1c
c001620a:	6a 03                	push   0x3
c001620c:	6a 02                	push   0x2
c001620e:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0016214:	e8 13 25 00 00       	call   c001872c <VAS::allocatePages(int, int)>
c0016219:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0016220:	89 c6                	mov    esi,eax
c0016222:	e8 97 01 00 00       	call   c00163be <malloc>
c0016227:	81 c6 00 20 00 00    	add    esi,0x2000
c001622d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016230:	89 c7                	mov    edi,eax
c0016232:	e8 15 16 00 00       	call   c001784c <TSS::TSS()>
c0016237:	83 c4 0c             	add    esp,0xc
c001623a:	68 36 e0 02 c0       	push   0xc002e036
c001623f:	56                   	push   esi
c0016240:	57                   	push   edi
c0016241:	e8 4a 16 00 00       	call   c0017890 <TSS::setup(unsigned long, unsigned long)>
c0016246:	89 c6                	mov    esi,eax
c0016248:	58                   	pop    eax
c0016249:	5a                   	pop    edx
c001624a:	6a 00                	push   0x0
c001624c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016250:	50                   	push   eax
c0016251:	e8 ce fb ff ff       	call   c0015e24 <IDTEntry::IDTEntry(bool)>
c0016256:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001625a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001625f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0016266:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c001626c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016270:	80 ce 05             	or     dh,0x5
c0016273:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0016276:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001627a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001627e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016281:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016284:	e8 87 fc ff ff       	call   c0015f10 <IDT::flush()>
c0016289:	83 c4 20             	add    esp,0x20
c001628c:	5b                   	pop    ebx
c001628d:	5e                   	pop    esi
c001628e:	5f                   	pop    edi
c001628f:	c3                   	ret    

c0016290 <sbrk>:
c0016290:	55                   	push   ebp
c0016291:	57                   	push   edi
c0016292:	56                   	push   esi
c0016293:	53                   	push   ebx
c0016294:	83 ec 1c             	sub    esp,0x1c
c0016297:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001629b:	85 c0                	test   eax,eax
c001629d:	74 61                	je     c0016300 <sbrk+0x70>
c001629f:	78 66                	js     c0016307 <sbrk+0x77>
c00162a1:	8b 15 84 3b 03 c0    	mov    edx,DWORD PTR ds:0xc0033b84
c00162a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00162ab:	05 ff 0f 00 00       	add    eax,0xfff
c00162b0:	89 c5                	mov    ebp,eax
c00162b2:	78 6b                	js     c001631f <sbrk+0x8f>
c00162b4:	c1 fd 0c             	sar    ebp,0xc
c00162b7:	bb 00 00 00 00       	mov    ebx,0x0
c00162bc:	8b 35 b0 aa 03 c0    	mov    esi,DWORD PTR ds:0xc003aab0
c00162c2:	8b 3d 84 3b 03 c0    	mov    edi,DWORD PTR ds:0xc0033b84
c00162c8:	e8 fa 03 00 00       	call   c00166c7 <Phys::allocatePage()>
c00162cd:	68 01 04 00 00       	push   0x401
c00162d2:	57                   	push   edi
c00162d3:	50                   	push   eax
c00162d4:	56                   	push   esi
c00162d5:	e8 4e 23 00 00       	call   c0018628 <VAS::mapPage(unsigned long, unsigned long, int)>
c00162da:	81 05 84 3b 03 c0 00 10 00 00 	add    DWORD PTR ds:0xc0033b84,0x1000
c00162e4:	83 c3 01             	add    ebx,0x1
c00162e7:	83 c4 10             	add    esp,0x10
c00162ea:	39 dd                	cmp    ebp,ebx
c00162ec:	75 ce                	jne    c00162bc <sbrk+0x2c>
c00162ee:	0f 20 d8             	mov    eax,cr3
c00162f1:	0f 22 d8             	mov    cr3,eax
c00162f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00162f8:	83 c4 1c             	add    esp,0x1c
c00162fb:	5b                   	pop    ebx
c00162fc:	5e                   	pop    esi
c00162fd:	5f                   	pop    edi
c00162fe:	5d                   	pop    ebp
c00162ff:	c3                   	ret    
c0016300:	a1 84 3b 03 c0       	mov    eax,ds:0xc0033b84
c0016305:	eb f1                	jmp    c00162f8 <sbrk+0x68>
c0016307:	83 ec 08             	sub    esp,0x8
c001630a:	50                   	push   eax
c001630b:	68 e8 10 03 c0       	push   0xc00310e8
c0016310:	e8 38 2f 00 00       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0016315:	83 c4 10             	add    esp,0x10
c0016318:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001631d:	eb d9                	jmp    c00162f8 <sbrk+0x68>
c001631f:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0016325:	eb 8d                	jmp    c00162b4 <sbrk+0x24>

c0016327 <mmap>:
c0016327:	83 ec 18             	sub    esp,0x18
c001632a:	68 18 11 03 c0       	push   0xc0031118
c001632f:	e8 32 9f 00 00       	call   c0020266 <KePanic(char const*)>
c0016334:	b8 00 00 00 00       	mov    eax,0x0
c0016339:	83 c4 1c             	add    esp,0x1c
c001633c:	c3                   	ret    

c001633d <munmap>:
c001633d:	83 ec 18             	sub    esp,0x18
c0016340:	68 1d 11 03 c0       	push   0xc003111d
c0016345:	e8 1c 9f 00 00       	call   c0020266 <KePanic(char const*)>
c001634a:	b8 00 00 00 00       	mov    eax,0x0
c001634f:	83 c4 1c             	add    esp,0x1c
c0016352:	c3                   	ret    

c0016353 <liballoc_lock()>:
c0016353:	fa                   	cli    
c0016354:	83 05 d0 01 04 c0 01 	add    DWORD PTR ds:0xc00401d0,0x1
c001635b:	b8 00 00 00 00       	mov    eax,0x0
c0016360:	c3                   	ret    

c0016361 <liballoc_unlock()>:
c0016361:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016366:	83 e8 01             	sub    eax,0x1
c0016369:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001636e:	75 01                	jne    c0016371 <liballoc_unlock()+0x10>
c0016370:	fb                   	sti    
c0016371:	b8 00 00 00 00       	mov    eax,0x0
c0016376:	c3                   	ret    

c0016377 <liballoc_alloc(int)>:
c0016377:	83 ec 10             	sub    esp,0x10
c001637a:	6a 01                	push   0x1
c001637c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016380:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0016386:	e8 a1 23 00 00       	call   c001872c <VAS::allocatePages(int, int)>
c001638b:	83 c4 1c             	add    esp,0x1c
c001638e:	c3                   	ret    

c001638f <liballoc_free(void*, int)>:
c001638f:	83 ec 14             	sub    esp,0x14
c0016392:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016396:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c001639c:	e8 cf 1f 00 00       	call   c0018370 <VAS::freeAllocatedPages(unsigned long)>
c00163a1:	b8 00 00 00 00       	mov    eax,0x0
c00163a6:	83 c4 1c             	add    esp,0x1c
c00163a9:	c3                   	ret    

c00163aa <realloc>:
c00163aa:	83 ec 14             	sub    esp,0x14
c00163ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163b5:	e8 e4 b3 fe ff       	call   c000179e <dlrealloc>
c00163ba:	83 c4 1c             	add    esp,0x1c
c00163bd:	c3                   	ret    

c00163be <malloc>:
c00163be:	83 ec 18             	sub    esp,0x18
c00163c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163c5:	e8 97 ae fe ff       	call   c0001261 <dlmalloc>
c00163ca:	83 c4 1c             	add    esp,0x1c
c00163cd:	c3                   	ret    

c00163ce <free>:
c00163ce:	83 ec 18             	sub    esp,0x18
c00163d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163d5:	e8 2f ab fe ff       	call   c0000f09 <dlfree>
c00163da:	83 c4 1c             	add    esp,0x1c
c00163dd:	c3                   	ret    

c00163de <rfree>:
c00163de:	83 ec 18             	sub    esp,0x18
c00163e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163e5:	e8 1f ab fe ff       	call   c0000f09 <dlfree>
c00163ea:	83 c4 1c             	add    esp,0x1c
c00163ed:	c3                   	ret    

c00163ee <calloc>:
c00163ee:	56                   	push   esi
c00163ef:	53                   	push   ebx
c00163f0:	83 ec 10             	sub    esp,0x10
c00163f3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00163f7:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00163fc:	53                   	push   ebx
c00163fd:	e8 bc ff ff ff       	call   c00163be <malloc>
c0016402:	89 c6                	mov    esi,eax
c0016404:	83 c4 0c             	add    esp,0xc
c0016407:	53                   	push   ebx
c0016408:	6a 00                	push   0x0
c001640a:	50                   	push   eax
c001640b:	e8 e0 a0 fe ff       	call   c00004f0 <memset>
c0016410:	89 f0                	mov    eax,esi
c0016412:	83 c4 14             	add    esp,0x14
c0016415:	5b                   	pop    ebx
c0016416:	5e                   	pop    esi
c0016417:	c3                   	ret    

c0016418 <KeEntryPoint>:
c0016418:	57                   	push   edi
c0016419:	bf f9 03 00 00       	mov    edi,0x3f9
c001641e:	56                   	push   esi
c001641f:	89 fa                	mov    edx,edi
c0016421:	53                   	push   ebx
c0016422:	31 f6                	xor    esi,esi
c0016424:	83 ec 2c             	sub    esp,0x2c
c0016427:	a1 00 05 00 00       	mov    eax,ds:0x500
c001642c:	a3 d4 a9 03 c0       	mov    ds:0xc003a9d4,eax
c0016431:	89 f0                	mov    eax,esi
c0016433:	ee                   	out    dx,al
c0016434:	bb fb 03 00 00       	mov    ebx,0x3fb
c0016439:	b0 80                	mov    al,0x80
c001643b:	89 da                	mov    edx,ebx
c001643d:	ee                   	out    dx,al
c001643e:	b1 03                	mov    cl,0x3
c0016440:	ba f8 03 00 00       	mov    edx,0x3f8
c0016445:	88 c8                	mov    al,cl
c0016447:	ee                   	out    dx,al
c0016448:	89 f0                	mov    eax,esi
c001644a:	89 fa                	mov    edx,edi
c001644c:	ee                   	out    dx,al
c001644d:	88 c8                	mov    al,cl
c001644f:	89 da                	mov    edx,ebx
c0016451:	ee                   	out    dx,al
c0016452:	b0 c7                	mov    al,0xc7
c0016454:	ba fa 03 00 00       	mov    edx,0x3fa
c0016459:	ee                   	out    dx,al
c001645a:	b0 0b                	mov    al,0xb
c001645c:	ba fc 03 00 00       	mov    edx,0x3fc
c0016461:	ee                   	out    dx,al
c0016462:	68 24 11 03 c0       	push   0xc0031124
c0016467:	e8 e1 2d 00 00       	call   c001924d <Dbg::kprintf(char const*, ...)>
c001646c:	e8 16 96 00 00       	call   c001fa87 <KeDisplaySplashScreen()>
c0016471:	a1 24 05 00 00       	mov    eax,ds:0x524
c0016476:	05 ff 0f 00 00       	add    eax,0xfff
c001647b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016480:	89 04 24             	mov    DWORD PTR [esp],eax
c0016483:	e8 ad 03 00 00       	call   c0016835 <Phys::physicalMemorySetup(unsigned int)>
c0016488:	e8 66 1c 00 00       	call   c00180f3 <Virt::virtualMemorySetup()>
c001648d:	e8 3f 95 00 00       	call   c001f9d1 <KeInitialiseAtexit()>
c0016492:	58                   	pop    eax
c0016493:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0016497:	53                   	push   ebx
c0016498:	e8 53 1f 00 00       	call   c00183f0 <VAS::VAS()>
c001649d:	89 1d b0 aa 03 c0    	mov    DWORD PTR ds:0xc003aab0,ebx
c00164a3:	e8 d2 83 01 00       	call   c002e87a <_init>
c00164a8:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00164af:	e8 0a ff ff ff       	call   c00163be <malloc>
c00164b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00164b7:	89 c6                	mov    esi,eax
c00164b9:	e8 30 f2 ff ff       	call   c00156ee <Computer::Computer()>
c00164be:	53                   	push   ebx
c00164bf:	89 35 bc a9 03 c0    	mov    DWORD PTR ds:0xc003a9bc,esi
c00164c5:	6a 00                	push   0x0
c00164c7:	6a 00                	push   0x0
c00164c9:	56                   	push   esi
c00164ca:	e8 e7 f5 ff ff       	call   c0015ab6 <Computer::open(int, int, void*)>
c00164cf:	83 c4 14             	add    esp,0x14
c00164d2:	53                   	push   ebx
c00164d3:	e8 e2 1f 00 00       	call   c00184ba <VAS::~VAS()>
c00164d8:	83 c4 30             	add    esp,0x30
c00164db:	5b                   	pop    ebx
c00164dc:	5e                   	pop    esi
c00164dd:	5f                   	pop    edi
c00164de:	c3                   	ret    

c00164df <Phys::allocateDMA(unsigned long)>:
c00164df:	55                   	push   ebp
c00164e0:	31 ed                	xor    ebp,ebp
c00164e2:	57                   	push   edi
c00164e3:	56                   	push   esi
c00164e4:	53                   	push   ebx
c00164e5:	31 db                	xor    ebx,ebx
c00164e7:	83 ec 1c             	sub    esp,0x1c
c00164ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00164ee:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00164f6:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00164fc:	31 c0                	xor    eax,eax
c00164fe:	c1 ef 0c             	shr    edi,0xc
c0016501:	eb 1b                	jmp    c001651e <Phys::allocateDMA(unsigned long)+0x3f>
c0016503:	85 c0                	test   eax,eax
c0016505:	75 06                	jne    c001650d <Phys::allocateDMA(unsigned long)+0x2e>
c0016507:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001650b:	89 dd                	mov    ebp,ebx
c001650d:	8d 70 01             	lea    esi,[eax+0x1]
c0016510:	39 f7                	cmp    edi,esi
c0016512:	74 37                	je     c001654b <Phys::allocateDMA(unsigned long)+0x6c>
c0016514:	89 f0                	mov    eax,esi
c0016516:	83 c3 01             	add    ebx,0x1
c0016519:	83 fb 0f             	cmp    ebx,0xf
c001651c:	7f 13                	jg     c0016531 <Phys::allocateDMA(unsigned long)+0x52>
c001651e:	80 bb f0 a9 03 c0 00 	cmp    BYTE PTR [ebx-0x3ffc5610],0x0
c0016525:	74 dc                	je     c0016503 <Phys::allocateDMA(unsigned long)+0x24>
c0016527:	31 c0                	xor    eax,eax
c0016529:	83 c3 01             	add    ebx,0x1
c001652c:	83 fb 0f             	cmp    ebx,0xf
c001652f:	7e ed                	jle    c001651e <Phys::allocateDMA(unsigned long)+0x3f>
c0016531:	83 ec 0c             	sub    esp,0xc
c0016534:	68 3c 11 03 c0       	push   0xc003113c
c0016539:	e8 28 9d 00 00       	call   c0020266 <KePanic(char const*)>
c001653e:	83 c4 10             	add    esp,0x10
c0016541:	31 c0                	xor    eax,eax
c0016543:	83 c4 1c             	add    esp,0x1c
c0016546:	5b                   	pop    ebx
c0016547:	5e                   	pop    esi
c0016548:	5f                   	pop    edi
c0016549:	5d                   	pop    ebp
c001654a:	c3                   	ret    
c001654b:	89 e9                	mov    ecx,ebp
c001654d:	c1 f9 04             	sar    ecx,0x4
c0016550:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016554:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0016558:	89 ca                	mov    edx,ecx
c001655a:	83 ea 01             	sub    edx,0x1
c001655d:	79 03                	jns    c0016562 <Phys::allocateDMA(unsigned long)+0x83>
c001655f:	8d 51 0e             	lea    edx,[ecx+0xe]
c0016562:	c1 fa 04             	sar    edx,0x4
c0016565:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0016569:	74 08                	je     c0016573 <Phys::allocateDMA(unsigned long)+0x94>
c001656b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001656f:	31 c0                	xor    eax,eax
c0016571:	eb b6                	jmp    c0016529 <Phys::allocateDMA(unsigned long)+0x4a>
c0016573:	85 f6                	test   esi,esi
c0016575:	74 17                	je     c001658e <Phys::allocateDMA(unsigned long)+0xaf>
c0016577:	8d 95 f0 a9 03 c0    	lea    edx,[ebp-0x3ffc5610]
c001657d:	8d 84 05 f1 a9 03 c0 	lea    eax,[ebp+eax*1-0x3ffc560f]
c0016584:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0016587:	83 c2 01             	add    edx,0x1
c001658a:	39 d0                	cmp    eax,edx
c001658c:	75 f6                	jne    c0016584 <Phys::allocateDMA(unsigned long)+0xa5>
c001658e:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c0016593:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016597:	01 f8                	add    eax,edi
c0016599:	85 d2                	test   edx,edx
c001659b:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c00165a0:	74 17                	je     c00165b9 <Phys::allocateDMA(unsigned long)+0xda>
c00165a2:	83 ec 0c             	sub    esp,0xc
c00165a5:	68 3c 11 03 c0       	push   0xc003113c
c00165aa:	e8 b7 9c 00 00       	call   c0020266 <KePanic(char const*)>
c00165af:	83 c4 10             	add    esp,0x10
c00165b2:	89 f0                	mov    eax,esi
c00165b4:	e9 5d ff ff ff       	jmp    c0016516 <Phys::allocateDMA(unsigned long)+0x37>
c00165b9:	c1 e5 0c             	shl    ebp,0xc
c00165bc:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00165c2:	e9 7c ff ff ff       	jmp    c0016543 <Phys::allocateDMA(unsigned long)+0x64>

c00165c7 <Phys::freeDMA(unsigned long, unsigned long)>:
c00165c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165cb:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00165d1:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c00165d6:	c1 ea 0c             	shr    edx,0xc
c00165d9:	29 d0                	sub    eax,edx
c00165db:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c00165e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00165e4:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00165e9:	c1 e8 0c             	shr    eax,0xc
c00165ec:	85 d2                	test   edx,edx
c00165ee:	74 11                	je     c0016601 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c00165f0:	05 f0 a9 03 c0       	add    eax,0xc003a9f0
c00165f5:	01 c2                	add    edx,eax
c00165f7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00165fa:	83 c0 01             	add    eax,0x1
c00165fd:	39 d0                	cmp    eax,edx
c00165ff:	75 f6                	jne    c00165f7 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0016601:	c3                   	ret    

c0016602 <Phys::setPageState(unsigned long, bool)>:
c0016602:	57                   	push   edi
c0016603:	56                   	push   esi
c0016604:	8b 35 88 3b 03 c0    	mov    esi,DWORD PTR ds:0xc0033b88
c001660a:	53                   	push   ebx
c001660b:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0016610:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016614:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016618:	0f b6 c0             	movzx  eax,al
c001661b:	89 ca                	mov    edx,ecx
c001661d:	83 e1 07             	and    ecx,0x7
c0016620:	c1 ea 03             	shr    edx,0x3
c0016623:	d3 c3                	rol    ebx,cl
c0016625:	01 d6                	add    esi,edx
c0016627:	d3 e0                	shl    eax,cl
c0016629:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c001662c:	21 fb                	and    ebx,edi
c001662e:	88 1e                	mov    BYTE PTR [esi],bl
c0016630:	8b 1d 88 3b 03 c0    	mov    ebx,DWORD PTR ds:0xc0033b88
c0016636:	01 da                	add    edx,ebx
c0016638:	8a 0a                	mov    cl,BYTE PTR [edx]
c001663a:	09 c8                	or     eax,ecx
c001663c:	88 02                	mov    BYTE PTR [edx],al
c001663e:	5b                   	pop    ebx
c001663f:	5e                   	pop    esi
c0016640:	5f                   	pop    edi
c0016641:	c3                   	ret    

c0016642 <Phys::getPageState(unsigned long)>:
c0016642:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016646:	8b 15 88 3b 03 c0    	mov    edx,DWORD PTR ds:0xc0033b88
c001664c:	89 c8                	mov    eax,ecx
c001664e:	83 e1 07             	and    ecx,0x7
c0016651:	c1 e8 03             	shr    eax,0x3
c0016654:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0016658:	d3 f8                	sar    eax,cl
c001665a:	83 e0 01             	and    eax,0x1
c001665d:	c3                   	ret    

c001665e <Phys::freePage(unsigned long)>:
c001665e:	53                   	push   ebx
c001665f:	83 ec 08             	sub    esp,0x8
c0016662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016666:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c001666c:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0016672:	76 41                	jbe    c00166b5 <Phys::freePage(unsigned long)+0x57>
c0016674:	c1 e8 0c             	shr    eax,0xc
c0016677:	50                   	push   eax
c0016678:	89 c3                	mov    ebx,eax
c001667a:	e8 c3 ff ff ff       	call   c0016642 <Phys::getPageState(unsigned long)>
c001667f:	5a                   	pop    edx
c0016680:	84 c0                	test   al,al
c0016682:	74 20                	je     c00166a4 <Phys::freePage(unsigned long)+0x46>
c0016684:	83 ec 08             	sub    esp,0x8
c0016687:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c001668c:	6a 00                	push   0x0
c001668e:	83 e8 01             	sub    eax,0x1
c0016691:	53                   	push   ebx
c0016692:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c0016697:	e8 66 ff ff ff       	call   c0016602 <Phys::setPageState(unsigned long, bool)>
c001669c:	83 c4 10             	add    esp,0x10
c001669f:	83 c4 08             	add    esp,0x8
c00166a2:	5b                   	pop    ebx
c00166a3:	c3                   	ret    
c00166a4:	c7 44 24 10 e1 11 03 c0 	mov    DWORD PTR [esp+0x10],0xc00311e1
c00166ac:	83 c4 08             	add    esp,0x8
c00166af:	5b                   	pop    ebx
c00166b0:	e9 b1 9b 00 00       	jmp    c0020266 <KePanic(char const*)>
c00166b5:	68 00 10 00 00       	push   0x1000
c00166ba:	50                   	push   eax
c00166bb:	e8 07 ff ff ff       	call   c00165c7 <Phys::freeDMA(unsigned long, unsigned long)>
c00166c0:	59                   	pop    ecx
c00166c1:	5b                   	pop    ebx
c00166c2:	83 c4 08             	add    esp,0x8
c00166c5:	5b                   	pop    ebx
c00166c6:	c3                   	ret    

c00166c7 <Phys::allocatePage()>:
c00166c7:	56                   	push   esi
c00166c8:	53                   	push   ebx
c00166c9:	83 ec 14             	sub    esp,0x14
c00166cc:	8b 35 dc a9 03 c0    	mov    esi,DWORD PTR ds:0xc003a9dc
c00166d2:	89 f3                	mov    ebx,esi
c00166d4:	eb 0a                	jmp    c00166e0 <Phys::allocatePage()+0x19>
c00166d6:	89 1d dc a9 03 c0    	mov    DWORD PTR ds:0xc003a9dc,ebx
c00166dc:	39 de                	cmp    esi,ebx
c00166de:	74 26                	je     c0016706 <Phys::allocatePage()+0x3f>
c00166e0:	53                   	push   ebx
c00166e1:	e8 5c ff ff ff       	call   c0016642 <Phys::getPageState(unsigned long)>
c00166e6:	5a                   	pop    edx
c00166e7:	84 c0                	test   al,al
c00166e9:	74 67                	je     c0016752 <Phys::allocatePage()+0x8b>
c00166eb:	83 c3 01             	add    ebx,0x1
c00166ee:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00166f4:	75 e0                	jne    c00166d6 <Phys::allocatePage()+0xf>
c00166f6:	31 db                	xor    ebx,ebx
c00166f8:	c7 05 dc a9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a9dc,0x0
c0016702:	39 de                	cmp    esi,ebx
c0016704:	75 da                	jne    c00166e0 <Phys::allocatePage()+0x19>
c0016706:	83 ec 0c             	sub    esp,0xc
c0016709:	a0 00 aa 03 c0       	mov    al,ds:0xc003aa00
c001670e:	83 f0 01             	xor    eax,0x1
c0016711:	a2 00 aa 03 c0       	mov    ds:0xc003aa00,al
c0016716:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001671b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001671e:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016724:	50                   	push   eax
c0016725:	e8 a8 27 00 00       	call   c0018ed2 <VAS::scanForEviction()>
c001672a:	83 c4 10             	add    esp,0x10
c001672d:	85 c0                	test   eax,eax
c001672f:	75 48                	jne    c0016779 <Phys::allocatePage()+0xb2>
c0016731:	83 ec 0c             	sub    esp,0xc
c0016734:	68 64 11 03 c0       	push   0xc0031164
c0016739:	e8 28 9b 00 00       	call   c0020266 <KePanic(char const*)>
c001673e:	83 c4 10             	add    esp,0x10
c0016741:	8b 1d dc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9dc
c0016747:	53                   	push   ebx
c0016748:	e8 f5 fe ff ff       	call   c0016642 <Phys::getPageState(unsigned long)>
c001674d:	5a                   	pop    edx
c001674e:	84 c0                	test   al,al
c0016750:	75 99                	jne    c00166eb <Phys::allocatePage()+0x24>
c0016752:	6a 01                	push   0x1
c0016754:	53                   	push   ebx
c0016755:	e8 a8 fe ff ff       	call   c0016602 <Phys::setPageState(unsigned long, bool)>
c001675a:	8b 15 e8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9e8
c0016760:	a1 dc a9 03 c0       	mov    eax,ds:0xc003a9dc
c0016765:	83 c2 01             	add    edx,0x1
c0016768:	59                   	pop    ecx
c0016769:	89 15 e8 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e8,edx
c001676f:	c1 e0 0c             	shl    eax,0xc
c0016772:	5b                   	pop    ebx
c0016773:	83 c4 14             	add    esp,0x14
c0016776:	5b                   	pop    ebx
c0016777:	5e                   	pop    esi
c0016778:	c3                   	ret    
c0016779:	83 ec 08             	sub    esp,0x8
c001677c:	89 c2                	mov    edx,eax
c001677e:	6a 01                	push   0x1
c0016780:	c1 ea 0c             	shr    edx,0xc
c0016783:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016787:	52                   	push   edx
c0016788:	e8 75 fe ff ff       	call   c0016602 <Phys::setPageState(unsigned long, bool)>
c001678d:	83 c4 10             	add    esp,0x10
c0016790:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016794:	eb dd                	jmp    c0016773 <Phys::allocatePage()+0xac>

c0016796 <Phys::allocateContiguousPages(int)>:
c0016796:	57                   	push   edi
c0016797:	56                   	push   esi
c0016798:	53                   	push   ebx
c0016799:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001679d:	fa                   	cli    
c001679e:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00167a3:	31 db                	xor    ebx,ebx
c00167a5:	83 c0 01             	add    eax,0x1
c00167a8:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00167ad:	85 db                	test   ebx,ebx
c00167af:	75 11                	jne    c00167c2 <Phys::allocateContiguousPages(int)+0x2c>
c00167b1:	e8 11 ff ff ff       	call   c00166c7 <Phys::allocatePage()>
c00167b6:	83 fe 01             	cmp    esi,0x1
c00167b9:	89 c7                	mov    edi,eax
c00167bb:	74 21                	je     c00167de <Phys::allocateContiguousPages(int)+0x48>
c00167bd:	bb 01 00 00 00       	mov    ebx,0x1
c00167c2:	e8 00 ff ff ff       	call   c00166c7 <Phys::allocatePage()>
c00167c7:	89 da                	mov    edx,ebx
c00167c9:	c1 e2 0c             	shl    edx,0xc
c00167cc:	01 fa                	add    edx,edi
c00167ce:	39 c2                	cmp    edx,eax
c00167d0:	74 22                	je     c00167f4 <Phys::allocateContiguousPages(int)+0x5e>
c00167d2:	bb 01 00 00 00       	mov    ebx,0x1
c00167d7:	89 c7                	mov    edi,eax
c00167d9:	83 fe 01             	cmp    esi,0x1
c00167dc:	75 e4                	jne    c00167c2 <Phys::allocateContiguousPages(int)+0x2c>
c00167de:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00167e3:	83 e8 01             	sub    eax,0x1
c00167e6:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00167eb:	75 01                	jne    c00167ee <Phys::allocateContiguousPages(int)+0x58>
c00167ed:	fb                   	sti    
c00167ee:	89 f8                	mov    eax,edi
c00167f0:	5b                   	pop    ebx
c00167f1:	5e                   	pop    esi
c00167f2:	5f                   	pop    edi
c00167f3:	c3                   	ret    
c00167f4:	83 c3 01             	add    ebx,0x1
c00167f7:	39 f3                	cmp    ebx,esi
c00167f9:	75 b2                	jne    c00167ad <Phys::allocateContiguousPages(int)+0x17>
c00167fb:	eb e1                	jmp    c00167de <Phys::allocateContiguousPages(int)+0x48>

c00167fd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c00167fd:	56                   	push   esi
c00167fe:	53                   	push   ebx
c00167ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016803:	39 1d e0 a9 03 c0    	cmp    DWORD PTR ds:0xc003a9e0,ebx
c0016809:	73 06                	jae    c0016811 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c001680b:	89 1d e0 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e0,ebx
c0016811:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016815:	c1 eb 0c             	shr    ebx,0xc
c0016818:	c1 e8 0c             	shr    eax,0xc
c001681b:	39 d8                	cmp    eax,ebx
c001681d:	73 13                	jae    c0016832 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001681f:	6a 00                	push   0x0
c0016821:	8d 70 01             	lea    esi,[eax+0x1]
c0016824:	50                   	push   eax
c0016825:	e8 d8 fd ff ff       	call   c0016602 <Phys::setPageState(unsigned long, bool)>
c001682a:	5a                   	pop    edx
c001682b:	89 f0                	mov    eax,esi
c001682d:	59                   	pop    ecx
c001682e:	39 f3                	cmp    ebx,esi
c0016830:	75 ed                	jne    c001681f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0016832:	5b                   	pop    ebx
c0016833:	5e                   	pop    esi
c0016834:	c3                   	ret    

c0016835 <Phys::physicalMemorySetup(unsigned int)>:
c0016835:	55                   	push   ebp
c0016836:	57                   	push   edi
c0016837:	56                   	push   esi
c0016838:	53                   	push   ebx
c0016839:	83 ec 40             	sub    esp,0x40
c001683c:	6a 10                	push   0x10
c001683e:	6a 00                	push   0x0
c0016840:	68 f0 a9 03 c0       	push   0xc003a9f0
c0016845:	e8 a6 9c fe ff       	call   c00004f0 <memset>
c001684a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001684e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016853:	05 00 10 00 00       	add    eax,0x1000
c0016858:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001685c:	5b                   	pop    ebx
c001685d:	31 db                	xor    ebx,ebx
c001685f:	5e                   	pop    esi
c0016860:	50                   	push   eax
c0016861:	68 f7 11 03 c0       	push   0xc00311f7
c0016866:	e8 e2 29 00 00       	call   c001924d <Dbg::kprintf(char const*, ...)>
c001686b:	83 c4 10             	add    esp,0x10
c001686e:	83 ec 08             	sub    esp,0x8
c0016871:	6a 01                	push   0x1
c0016873:	53                   	push   ebx
c0016874:	83 c3 01             	add    ebx,0x1
c0016877:	e8 86 fd ff ff       	call   c0016602 <Phys::setPageState(unsigned long, bool)>
c001687c:	83 c4 10             	add    esp,0x10
c001687f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0016885:	75 e7                	jne    c001686e <Phys::physicalMemorySetup(unsigned int)+0x39>
c0016887:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c001688e:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0016895:	c1 e0 08             	shl    eax,0x8
c0016898:	09 c2                	or     edx,eax
c001689a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001689e:	0f 84 98 01 00 00    	je     c0016a3c <Phys::physicalMemorySetup(unsigned int)+0x207>
c00168a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00168a8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00168b0:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00168b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00168b9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00168c1:	eb 1c                	jmp    c00168df <Phys::physicalMemorySetup(unsigned int)+0xaa>
c00168c3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00168c7:	83 c3 18             	add    ebx,0x18
c00168ca:	83 c6 01             	add    esi,0x1
c00168cd:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00168d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00168d5:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00168d9:	0f 84 6d 01 00 00    	je     c0016a4c <Phys::physicalMemorySetup(unsigned int)+0x217>
c00168df:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00168e2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00168e5:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00168e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00168ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00168f0:	8b 33                	mov    esi,DWORD PTR [ebx]
c00168f2:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00168f5:	01 f0                	add    eax,esi
c00168f7:	55                   	push   ebp
c00168f8:	11 fa                	adc    edx,edi
c00168fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00168fe:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016902:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016906:	51                   	push   ecx
c0016907:	56                   	push   esi
c0016908:	68 94 11 03 c0       	push   0xc0031194
c001690d:	e8 3b 29 00 00       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0016912:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016916:	83 c4 10             	add    esp,0x10
c0016919:	09 f8                	or     eax,edi
c001691b:	0f 85 2b 01 00 00    	jne    c0016a4c <Phys::physicalMemorySetup(unsigned int)+0x217>
c0016921:	83 fd 01             	cmp    ebp,0x1
c0016924:	75 9d                	jne    c00168c3 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016926:	ba 00 00 08 00       	mov    edx,0x80000
c001692b:	89 c1                	mov    ecx,eax
c001692d:	39 f2                	cmp    edx,esi
c001692f:	19 f9                	sbb    ecx,edi
c0016931:	0f 82 ab 00 00 00    	jb     c00169e2 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0016937:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001693b:	89 c1                	mov    ecx,eax
c001693d:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0016941:	0f 83 9b 00 00 00    	jae    c00169e2 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0016947:	ba 00 00 0a 00       	mov    edx,0xa0000
c001694c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016950:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0016954:	39 fa                	cmp    edx,edi
c0016956:	19 e8                	sbb    eax,ebp
c0016958:	0f 82 b0 01 00 00    	jb     c0016b0e <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c001695e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016962:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0016966:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c001696c:	ba ff 1f 00 00       	mov    edx,0x1fff
c0016971:	83 d5 ff             	adc    ebp,0xffffffff
c0016974:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0016978:	31 c0                	xor    eax,eax
c001697a:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c001697e:	39 fa                	cmp    edx,edi
c0016980:	89 c1                	mov    ecx,eax
c0016982:	19 e9                	sbb    ecx,ebp
c0016984:	0f 83 39 ff ff ff    	jae    c00168c3 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c001698a:	be 00 00 08 00       	mov    esi,0x80000
c001698f:	83 ec 04             	sub    esp,0x4
c0016992:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016996:	57                   	push   edi
c0016997:	56                   	push   esi
c0016998:	68 b8 11 03 c0       	push   0xc00311b8
c001699d:	e8 ab 28 00 00       	call   c001924d <Dbg::kprintf(char const*, ...)>
c00169a2:	5d                   	pop    ebp
c00169a3:	58                   	pop    eax
c00169a4:	57                   	push   edi
c00169a5:	56                   	push   esi
c00169a6:	e8 52 fe ff ff       	call   c00167fd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00169ab:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00169af:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00169b3:	83 c4 0c             	add    esp,0xc
c00169b6:	0f ac d0 0c          	shrd   eax,edx,0xc
c00169ba:	8b 15 ec a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9ec
c00169c0:	01 d0                	add    eax,edx
c00169c2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00169c9:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c00169ce:	52                   	push   edx
c00169cf:	50                   	push   eax
c00169d0:	68 1d 12 03 c0       	push   0xc003121d
c00169d5:	e8 73 28 00 00       	call   c001924d <Dbg::kprintf(char const*, ...)>
c00169da:	83 c4 10             	add    esp,0x10
c00169dd:	e9 e1 fe ff ff       	jmp    c00168c3 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00169e2:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00169e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00169ea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00169ee:	39 ea                	cmp    edx,ebp
c00169f0:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00169f4:	0f 82 c9 fe ff ff    	jb     c00168c3 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00169fa:	ba ff 1f 00 00       	mov    edx,0x1fff
c00169ff:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0016a03:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0016a07:	0f 83 b6 fe ff ff    	jae    c00168c3 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016a0d:	39 ee                	cmp    esi,ebp
c0016a0f:	89 f8                	mov    eax,edi
c0016a11:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0016a15:	0f 83 74 ff ff ff    	jae    c001698f <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0016a1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016a1f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016a23:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0016a27:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0016a2b:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0016a2f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016a33:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016a37:	e9 53 ff ff ff       	jmp    c001698f <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0016a3c:	83 ec 0c             	sub    esp,0xc
c0016a3f:	68 0f 12 03 c0       	push   0xc003120f
c0016a44:	e8 1d 98 00 00       	call   c0020266 <KePanic(char const*)>
c0016a49:	83 c4 10             	add    esp,0x10
c0016a4c:	83 ec 08             	sub    esp,0x8
c0016a4f:	bb 60 00 00 00       	mov    ebx,0x60
c0016a54:	6a 00                	push   0x0
c0016a56:	6a 06                	push   0x6
c0016a58:	e8 a5 fb ff ff       	call   c0016602 <Phys::setPageState(unsigned long, bool)>
c0016a5d:	58                   	pop    eax
c0016a5e:	5a                   	pop    edx
c0016a5f:	6a 00                	push   0x0
c0016a61:	6a 07                	push   0x7
c0016a63:	e8 9a fb ff ff       	call   c0016602 <Phys::setPageState(unsigned long, bool)>
c0016a68:	8b 0d ec a9 03 c0    	mov    ecx,DWORD PTR ds:0xc003a9ec
c0016a6e:	83 c4 10             	add    esp,0x10
c0016a71:	83 c1 02             	add    ecx,0x2
c0016a74:	89 0d ec a9 03 c0    	mov    DWORD PTR ds:0xc003a9ec,ecx
c0016a7a:	83 ec 08             	sub    esp,0x8
c0016a7d:	6a 00                	push   0x0
c0016a7f:	53                   	push   ebx
c0016a80:	83 c3 01             	add    ebx,0x1
c0016a83:	e8 7a fb ff ff       	call   c0016602 <Phys::setPageState(unsigned long, bool)>
c0016a88:	83 c4 10             	add    esp,0x10
c0016a8b:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0016a91:	75 e7                	jne    c0016a7a <Phys::physicalMemorySetup(unsigned int)+0x245>
c0016a93:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016a98:	bb 40 01 00 00       	mov    ebx,0x140
c0016a9d:	83 c0 20             	add    eax,0x20
c0016aa0:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016aa5:	eb 26                	jmp    c0016acd <Phys::physicalMemorySetup(unsigned int)+0x298>
c0016aa7:	83 ec 08             	sub    esp,0x8
c0016aaa:	6a 00                	push   0x0
c0016aac:	53                   	push   ebx
c0016aad:	83 c3 01             	add    ebx,0x1
c0016ab0:	e8 4d fb ff ff       	call   c0016602 <Phys::setPageState(unsigned long, bool)>
c0016ab5:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016aba:	83 c4 10             	add    esp,0x10
c0016abd:	83 c0 01             	add    eax,0x1
c0016ac0:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0016ac6:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016acb:	74 07                	je     c0016ad4 <Phys::physicalMemorySetup(unsigned int)+0x29f>
c0016acd:	3d ff 03 00 00       	cmp    eax,0x3ff
c0016ad2:	7e d3                	jle    c0016aa7 <Phys::physicalMemorySetup(unsigned int)+0x272>
c0016ad4:	bb d0 01 00 00       	mov    ebx,0x1d0
c0016ad9:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016ade:	7f 26                	jg     c0016b06 <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c0016ae0:	83 ec 08             	sub    esp,0x8
c0016ae3:	6a 00                	push   0x0
c0016ae5:	53                   	push   ebx
c0016ae6:	83 c3 01             	add    ebx,0x1
c0016ae9:	e8 14 fb ff ff       	call   c0016602 <Phys::setPageState(unsigned long, bool)>
c0016aee:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016af3:	83 c4 10             	add    esp,0x10
c0016af6:	83 c0 01             	add    eax,0x1
c0016af9:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0016aff:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016b04:	75 d3                	jne    c0016ad9 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c0016b06:	83 c4 3c             	add    esp,0x3c
c0016b09:	5b                   	pop    ebx
c0016b0a:	5e                   	pop    esi
c0016b0b:	5f                   	pop    edi
c0016b0c:	5d                   	pop    ebp
c0016b0d:	c3                   	ret    
c0016b0e:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0016b16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016b1e:	e9 3b fe ff ff       	jmp    c001695e <Phys::physicalMemorySetup(unsigned int)+0x129>
c0016b23:	90                   	nop

c0016b24 <Pipe::isAtty()>:
c0016b24:	31 c0                	xor    eax,eax
c0016b26:	c3                   	ret    
c0016b27:	90                   	nop

c0016b28 <Pipe::~Pipe()>:
c0016b28:	83 ec 0c             	sub    esp,0xc
c0016b2b:	ba 7c 12 03 c0       	mov    edx,0xc003127c
c0016b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b34:	89 10                	mov    DWORD PTR [eax],edx
c0016b36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b3a:	83 ec 0c             	sub    esp,0xc
c0016b3d:	50                   	push   eax
c0016b3e:	e8 69 11 00 00       	call   c0017cac <UnixFile::~UnixFile()>
c0016b43:	83 c4 10             	add    esp,0x10
c0016b46:	90                   	nop
c0016b47:	83 c4 0c             	add    esp,0xc
c0016b4a:	c3                   	ret    
c0016b4b:	90                   	nop

c0016b4c <Pipe::~Pipe()>:
c0016b4c:	83 ec 0c             	sub    esp,0xc
c0016b4f:	83 ec 0c             	sub    esp,0xc
c0016b52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b56:	e8 cd ff ff ff       	call   c0016b28 <Pipe::~Pipe()>
c0016b5b:	83 c4 10             	add    esp,0x10
c0016b5e:	83 ec 08             	sub    esp,0x8
c0016b61:	6a 20                	push   0x20
c0016b63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b67:	e8 b4 25 00 00       	call   c0019120 <operator delete(void*, unsigned long)>
c0016b6c:	83 c4 10             	add    esp,0x10
c0016b6f:	83 c4 0c             	add    esp,0xc
c0016b72:	c3                   	ret    
c0016b73:	90                   	nop

c0016b74 <Pipe::write(unsigned long long, void*, int*)>:
c0016b74:	55                   	push   ebp
c0016b75:	57                   	push   edi
c0016b76:	56                   	push   esi
c0016b77:	53                   	push   ebx
c0016b78:	83 ec 1c             	sub    esp,0x1c
c0016b7b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016b7f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016b83:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0016b86:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016b8a:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b8d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016b91:	89 d8                	mov    eax,ebx
c0016b93:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0016b96:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0016b9a:	89 d6                	mov    esi,edx
c0016b9c:	89 d7                	mov    edi,edx
c0016b9e:	c1 ff 1f             	sar    edi,0x1f
c0016ba1:	03 34 24             	add    esi,DWORD PTR [esp]
c0016ba4:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0016ba8:	c1 f8 1f             	sar    eax,0x1f
c0016bab:	39 f3                	cmp    ebx,esi
c0016bad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016bb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016bb5:	19 f8                	sbb    eax,edi
c0016bb7:	b8 01 00 00 00       	mov    eax,0x1
c0016bbc:	72 6e                	jb     c0016c2c <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0016bbe:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016bc1:	01 d0                	add    eax,edx
c0016bc3:	99                   	cdq    
c0016bc4:	f7 fb                	idiv   ebx
c0016bc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016bca:	29 d3                	sub    ebx,edx
c0016bcc:	89 d7                	mov    edi,edx
c0016bce:	89 de                	mov    esi,ebx
c0016bd0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0016bd3:	c1 fb 1f             	sar    ebx,0x1f
c0016bd6:	39 f2                	cmp    edx,esi
c0016bd8:	19 d8                	sbb    eax,ebx
c0016bda:	b8 00 00 00 00       	mov    eax,0x0
c0016bdf:	72 04                	jb     c0016be5 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0016be1:	89 d0                	mov    eax,edx
c0016be3:	29 f0                	sub    eax,esi
c0016be5:	89 d3                	mov    ebx,edx
c0016be7:	29 c3                	sub    ebx,eax
c0016be9:	74 0b                	je     c0016bf6 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0016beb:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0016bee:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016bf2:	89 d9                	mov    ecx,ebx
c0016bf4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016bf6:	85 c0                	test   eax,eax
c0016bf8:	74 0d                	je     c0016c07 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0016bfa:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016bfe:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016c01:	89 de                	mov    esi,ebx
c0016c03:	89 c1                	mov    ecx,eax
c0016c05:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016c07:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0016c0a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016c0f:	75 10                	jne    c0016c21 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0016c11:	83 ec 0c             	sub    esp,0xc
c0016c14:	68 39 12 03 c0       	push   0xc0031239
c0016c19:	e8 48 96 00 00       	call   c0020266 <KePanic(char const*)>
c0016c1e:	83 c4 10             	add    esp,0x10
c0016c21:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016c25:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016c28:	89 08                	mov    DWORD PTR [eax],ecx
c0016c2a:	31 c0                	xor    eax,eax
c0016c2c:	83 c4 1c             	add    esp,0x1c
c0016c2f:	5b                   	pop    ebx
c0016c30:	5e                   	pop    esi
c0016c31:	5f                   	pop    edi
c0016c32:	5d                   	pop    ebp
c0016c33:	c3                   	ret    

c0016c34 <Pipe::read(unsigned long long, void*, int*)>:
c0016c34:	55                   	push   ebp
c0016c35:	57                   	push   edi
c0016c36:	56                   	push   esi
c0016c37:	53                   	push   ebx
c0016c38:	83 ec 1c             	sub    esp,0x1c
c0016c3b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016c3f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016c43:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0016c47:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0016c4a:	89 c8                	mov    eax,ecx
c0016c4c:	99                   	cdq    
c0016c4d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0016c51:	74 24                	je     c0016c77 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016c53:	39 f9                	cmp    ecx,edi
c0016c55:	89 d1                	mov    ecx,edx
c0016c57:	19 f1                	sbb    ecx,esi
c0016c59:	73 1c                	jae    c0016c77 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016c5b:	fa                   	cli    
c0016c5c:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0016c62:	e8 f5 e5 00 00       	call   c002525c <schedule()>
c0016c67:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016c6c:	48                   	dec    eax
c0016c6d:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0016c72:	75 d3                	jne    c0016c47 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016c74:	fb                   	sti    
c0016c75:	eb d0                	jmp    c0016c47 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016c77:	39 f8                	cmp    eax,edi
c0016c79:	89 d1                	mov    ecx,edx
c0016c7b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016c7e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016c82:	19 f1                	sbb    ecx,esi
c0016c84:	73 07                	jae    c0016c8d <Pipe::read(unsigned long long, void*, int*)+0x59>
c0016c86:	89 04 24             	mov    DWORD PTR [esp],eax
c0016c89:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016c8d:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0016c90:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0016c93:	29 f7                	sub    edi,esi
c0016c95:	89 f8                	mov    eax,edi
c0016c97:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016c9b:	99                   	cdq    
c0016c9c:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0016c9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ca3:	19 d0                	sbb    eax,edx
c0016ca5:	73 07                	jae    c0016cae <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0016ca7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016caa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016cae:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0016cb1:	89 ea                	mov    edx,ebp
c0016cb3:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0016cb7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016cbc:	74 0d                	je     c0016ccb <Pipe::read(unsigned long long, void*, int*)+0x97>
c0016cbe:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0016cc1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0016cc5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016cc9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ccb:	85 d2                	test   edx,edx
c0016ccd:	74 11                	je     c0016ce0 <Pipe::read(unsigned long long, void*, int*)+0xac>
c0016ccf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016cd3:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0016cd6:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016cda:	89 d1                	mov    ecx,edx
c0016cdc:	89 c7                	mov    edi,eax
c0016cde:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ce0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016ce3:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0016ce6:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0016ce9:	99                   	cdq    
c0016cea:	89 f7                	mov    edi,esi
c0016cec:	03 04 24             	add    eax,DWORD PTR [esp]
c0016cef:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0016cf3:	c1 ff 1f             	sar    edi,0x1f
c0016cf6:	57                   	push   edi
c0016cf7:	56                   	push   esi
c0016cf8:	52                   	push   edx
c0016cf9:	50                   	push   eax
c0016cfa:	e8 61 7a 01 00       	call   c002e760 <__umoddi3>
c0016cff:	83 c4 10             	add    esp,0x10
c0016d02:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016d05:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016d0a:	75 10                	jne    c0016d1c <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0016d0c:	83 ec 0c             	sub    esp,0xc
c0016d0f:	68 56 12 03 c0       	push   0xc0031256
c0016d14:	e8 4d 95 00 00       	call   c0020266 <KePanic(char const*)>
c0016d19:	83 c4 10             	add    esp,0x10
c0016d1c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016d20:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0016d23:	89 10                	mov    DWORD PTR [eax],edx
c0016d25:	83 c4 1c             	add    esp,0x1c
c0016d28:	31 c0                	xor    eax,eax
c0016d2a:	5b                   	pop    ebx
c0016d2b:	5e                   	pop    esi
c0016d2c:	5f                   	pop    edi
c0016d2d:	5d                   	pop    ebp
c0016d2e:	c3                   	ret    
c0016d2f:	90                   	nop

c0016d30 <Pipe::Pipe(int)>:
c0016d30:	83 ec 0c             	sub    esp,0xc
c0016d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d37:	83 ec 08             	sub    esp,0x8
c0016d3a:	6a 00                	push   0x0
c0016d3c:	50                   	push   eax
c0016d3d:	e8 84 0d 00 00       	call   c0017ac6 <UnixFile::UnixFile(int)>
c0016d42:	83 c4 10             	add    esp,0x10
c0016d45:	ba 7c 12 03 c0       	mov    edx,0xc003127c
c0016d4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d4e:	89 10                	mov    DWORD PTR [eax],edx
c0016d50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d54:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016d58:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016d5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d5f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0016d66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d6a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0016d71:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d75:	83 ec 0c             	sub    esp,0xc
c0016d78:	50                   	push   eax
c0016d79:	e8 40 f6 ff ff       	call   c00163be <malloc>
c0016d7e:	83 c4 10             	add    esp,0x10
c0016d81:	89 c2                	mov    edx,eax
c0016d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d87:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d8e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0016d92:	90                   	nop
c0016d93:	83 c4 0c             	add    esp,0xc
c0016d96:	c3                   	ret    
c0016d97:	90                   	nop

c0016d98 <VgaText::isAtty()>:
c0016d98:	b0 01                	mov    al,0x1
c0016d9a:	c3                   	ret    
c0016d9b:	90                   	nop

c0016d9c <VgaText::~VgaText()>:
c0016d9c:	83 ec 0c             	sub    esp,0xc
c0016d9f:	ba c4 12 03 c0       	mov    edx,0xc00312c4
c0016da4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016da8:	89 10                	mov    DWORD PTR [eax],edx
c0016daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dae:	83 ec 0c             	sub    esp,0xc
c0016db1:	50                   	push   eax
c0016db2:	e8 f5 0e 00 00       	call   c0017cac <UnixFile::~UnixFile()>
c0016db7:	83 c4 10             	add    esp,0x10
c0016dba:	90                   	nop
c0016dbb:	83 c4 0c             	add    esp,0xc
c0016dbe:	c3                   	ret    
c0016dbf:	90                   	nop

c0016dc0 <VgaText::~VgaText()>:
c0016dc0:	83 ec 0c             	sub    esp,0xc
c0016dc3:	83 ec 0c             	sub    esp,0xc
c0016dc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dca:	e8 cd ff ff ff       	call   c0016d9c <VgaText::~VgaText()>
c0016dcf:	83 c4 10             	add    esp,0x10
c0016dd2:	83 ec 08             	sub    esp,0x8
c0016dd5:	68 84 01 00 00       	push   0x184
c0016dda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dde:	e8 3d 23 00 00       	call   c0019120 <operator delete(void*, unsigned long)>
c0016de3:	83 c4 10             	add    esp,0x10
c0016de6:	83 c4 0c             	add    esp,0xc
c0016de9:	c3                   	ret    

c0016dea <VgaText::read(unsigned long long, void*, int*)>:
c0016dea:	83 ec 10             	sub    esp,0x10
c0016ded:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016df1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016df5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016df9:	e8 ba 53 00 00       	call   c001c1b8 <readKeyboard(VgaText*, char*, unsigned long)>
c0016dfe:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016e02:	89 02                	mov    DWORD PTR [edx],eax
c0016e04:	31 c0                	xor    eax,eax
c0016e06:	83 c4 1c             	add    esp,0x1c
c0016e09:	c3                   	ret    

c0016e0a <setTerminalScrollLock(bool)>:
c0016e0a:	c3                   	ret    

c0016e0b <doTerminalCycle()>:
c0016e0b:	c3                   	ret    

c0016e0c <addToTerminalCycle(VgaText*)>:
c0016e0c:	c3                   	ret    

c0016e0d <scrollTerminalScrollLock(int)>:
c0016e0d:	c3                   	ret    

c0016e0e <VgaText::updateTitle()>:
c0016e0e:	c3                   	ret    
c0016e0f:	90                   	nop

c0016e10 <VgaText::load()>:
c0016e10:	c3                   	ret    
c0016e11:	90                   	nop

c0016e12 <VgaText::updateCursor()>:
c0016e12:	83 ec 14             	sub    esp,0x14
c0016e15:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016e19:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0016e1c:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0016e1f:	e8 44 0f 01 00       	call   c0027d68 <HalConsoleCursorUpdate(int, int)>
c0016e24:	83 c4 1c             	add    esp,0x1c
c0016e27:	c3                   	ret    

c0016e28 <VgaText::doANSI_SGR(int)>:
c0016e28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016e2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e30:	85 d2                	test   edx,edx
c0016e32:	75 0b                	jne    c0016e3f <VgaText::doANSI_SGR(int)+0x17>
c0016e34:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0016e37:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0016e3a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016e3d:	eb 59                	jmp    c0016e98 <VgaText::doANSI_SGR(int)+0x70>
c0016e3f:	83 fa 07             	cmp    edx,0x7
c0016e42:	75 0b                	jne    c0016e4f <VgaText::doANSI_SGR(int)+0x27>
c0016e44:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0016e47:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0016e4a:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0016e4d:	eb 49                	jmp    c0016e98 <VgaText::doANSI_SGR(int)+0x70>
c0016e4f:	83 fa 1b             	cmp    edx,0x1b
c0016e52:	74 e0                	je     c0016e34 <VgaText::doANSI_SGR(int)+0xc>
c0016e54:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0016e57:	83 f9 07             	cmp    ecx,0x7
c0016e5a:	77 09                	ja     c0016e65 <VgaText::doANSI_SGR(int)+0x3d>
c0016e5c:	8b 14 8d c0 3b 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcc440]
c0016e63:	eb 20                	jmp    c0016e85 <VgaText::doANSI_SGR(int)+0x5d>
c0016e65:	8d 4a d8             	lea    ecx,[edx-0x28]
c0016e68:	83 f9 07             	cmp    ecx,0x7
c0016e6b:	77 09                	ja     c0016e76 <VgaText::doANSI_SGR(int)+0x4e>
c0016e6d:	8b 14 8d c0 3b 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcc440]
c0016e74:	eb 22                	jmp    c0016e98 <VgaText::doANSI_SGR(int)+0x70>
c0016e76:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0016e79:	83 f9 07             	cmp    ecx,0x7
c0016e7c:	77 0b                	ja     c0016e89 <VgaText::doANSI_SGR(int)+0x61>
c0016e7e:	8b 14 95 78 3a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcc588]
c0016e85:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0016e88:	c3                   	ret    
c0016e89:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0016e8c:	83 f9 07             	cmp    ecx,0x7
c0016e8f:	77 0a                	ja     c0016e9b <VgaText::doANSI_SGR(int)+0x73>
c0016e91:	8b 14 95 50 3a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcc5b0]
c0016e98:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0016e9b:	c3                   	ret    

c0016e9c <VgaText::setDefaultBgColour(VgaColour)>:
c0016e9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ea0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016ea4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016ea7:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0016eaa:	c3                   	ret    
c0016eab:	90                   	nop

c0016eac <VgaText::setDefaultFgColour(VgaColour)>:
c0016eac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016eb0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016eb4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0016eb7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0016eba:	c3                   	ret    
c0016ebb:	90                   	nop

c0016ebc <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0016ebc:	53                   	push   ebx
c0016ebd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016ec1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0016ec5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016ec9:	51                   	push   ecx
c0016eca:	e8 cd ff ff ff       	call   c0016e9c <VgaText::setDefaultBgColour(VgaColour)>
c0016ecf:	58                   	pop    eax
c0016ed0:	5a                   	pop    edx
c0016ed1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0016ed5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016ed9:	5b                   	pop    ebx
c0016eda:	eb d0                	jmp    c0016eac <VgaText::setDefaultFgColour(VgaColour)>

c0016edc <VgaText::setTitleTextColour(VgaColour)>:
c0016edc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ee0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016ee4:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0016ee7:	c3                   	ret    

c0016ee8 <VgaText::setTitleColour(VgaColour)>:
c0016ee8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016eec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016ef0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016ef3:	c3                   	ret    

c0016ef4 <VgaText::setTitle(char*)>:
c0016ef4:	c3                   	ret    
c0016ef5:	90                   	nop

c0016ef6 <VgaText::combineColours(unsigned char, unsigned char)>:
c0016ef6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016efa:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0016eff:	83 e0 0f             	and    eax,0xf
c0016f02:	c1 e2 04             	shl    edx,0x4
c0016f05:	09 d0                	or     eax,edx
c0016f07:	c3                   	ret    

c0016f08 <VgaText::scrollScreen()>:
c0016f08:	55                   	push   ebp
c0016f09:	57                   	push   edi
c0016f0a:	56                   	push   esi
c0016f0b:	be 01 00 00 00       	mov    esi,0x1
c0016f10:	53                   	push   ebx
c0016f11:	83 ec 0c             	sub    esp,0xc
c0016f14:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016f18:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0016f1b:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0016f21:	31 ff                	xor    edi,edi
c0016f23:	01 e9                	add    ecx,ebp
c0016f25:	8a 01                	mov    al,BYTE PTR [ecx]
c0016f27:	83 fe 18             	cmp    esi,0x18
c0016f2a:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0016f30:	75 20                	jne    c0016f52 <VgaText::scrollScreen()+0x4a>
c0016f32:	f7 c7 01 00 00 00    	test   edi,0x1
c0016f38:	74 15                	je     c0016f4f <VgaText::scrollScreen()+0x47>
c0016f3a:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0016f3e:	50                   	push   eax
c0016f3f:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0016f43:	50                   	push   eax
c0016f44:	e8 ad ff ff ff       	call   c0016ef6 <VgaText::combineColours(unsigned char, unsigned char)>
c0016f49:	5a                   	pop    edx
c0016f4a:	5a                   	pop    edx
c0016f4b:	88 01                	mov    BYTE PTR [ecx],al
c0016f4d:	eb 03                	jmp    c0016f52 <VgaText::scrollScreen()+0x4a>
c0016f4f:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0016f52:	47                   	inc    edi
c0016f53:	41                   	inc    ecx
c0016f54:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0016f5a:	75 c9                	jne    c0016f25 <VgaText::scrollScreen()+0x1d>
c0016f5c:	46                   	inc    esi
c0016f5d:	83 fe 19             	cmp    esi,0x19
c0016f60:	75 b9                	jne    c0016f1b <VgaText::scrollScreen()+0x13>
c0016f62:	39 1d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebx
c0016f68:	75 1f                	jne    c0016f89 <VgaText::scrollScreen()+0x81>
c0016f6a:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0016f6e:	74 05                	je     c0016f75 <VgaText::scrollScreen()+0x6d>
c0016f70:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0016f73:	eb 14                	jmp    c0016f89 <VgaText::scrollScreen()+0x81>
c0016f75:	50                   	push   eax
c0016f76:	50                   	push   eax
c0016f77:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0016f7b:	50                   	push   eax
c0016f7c:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0016f80:	50                   	push   eax
c0016f81:	e8 76 0c 01 00       	call   c0027bfc <HalConsoleScroll(int, int)>
c0016f86:	83 c4 10             	add    esp,0x10
c0016f89:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0016f8d:	83 c4 0c             	add    esp,0xc
c0016f90:	5b                   	pop    ebx
c0016f91:	5e                   	pop    esi
c0016f92:	5f                   	pop    edi
c0016f93:	5d                   	pop    ebp
c0016f94:	e9 79 fe ff ff       	jmp    c0016e12 <VgaText::updateCursor()>
c0016f99:	90                   	nop

c0016f9a <VgaText::combineCharAndColour(char, unsigned char)>:
c0016f9a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0016f9f:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0016fa4:	c1 e0 08             	shl    eax,0x8
c0016fa7:	09 d0                	or     eax,edx
c0016fa9:	c3                   	ret    

c0016faa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0016faa:	55                   	push   ebp
c0016fab:	57                   	push   edi
c0016fac:	56                   	push   esi
c0016fad:	53                   	push   ebx
c0016fae:	83 ec 1c             	sub    esp,0x1c
c0016fb1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016fb5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016fb9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016fbd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fc1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016fc5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016fc9:	0f b6 c3             	movzx  eax,bl
c0016fcc:	50                   	push   eax
c0016fcd:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016fd2:	50                   	push   eax
c0016fd3:	e8 1e ff ff ff       	call   c0016ef6 <VgaText::combineColours(unsigned char, unsigned char)>
c0016fd8:	5a                   	pop    edx
c0016fd9:	0f b6 c0             	movzx  eax,al
c0016fdc:	59                   	pop    ecx
c0016fdd:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0016fe2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016fe6:	50                   	push   eax
c0016fe7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016feb:	e8 aa ff ff ff       	call   c0016f9a <VgaText::combineCharAndColour(char, unsigned char)>
c0016ff0:	5a                   	pop    edx
c0016ff1:	6b d7 50             	imul   edx,edi,0x50
c0016ff4:	59                   	pop    ecx
c0016ff5:	01 f2                	add    edx,esi
c0016ff7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0016ffa:	0f b7 d2             	movzx  edx,dx
c0016ffd:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0017001:	39 2d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebp
c0017007:	75 28                	jne    c0017031 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0017009:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001700d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0017011:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0017015:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0017019:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001701d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017021:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017025:	83 c4 1c             	add    esp,0x1c
c0017028:	5b                   	pop    ebx
c0017029:	5e                   	pop    esi
c001702a:	5f                   	pop    edi
c001702b:	5d                   	pop    ebp
c001702c:	e9 d3 0c 01 00       	jmp    c0027d04 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0017031:	83 c4 1c             	add    esp,0x1c
c0017034:	5b                   	pop    ebx
c0017035:	5e                   	pop    esi
c0017036:	5f                   	pop    edi
c0017037:	5d                   	pop    ebp
c0017038:	c3                   	ret    
c0017039:	90                   	nop

c001703a <VgaText::getCursorX()>:
c001703a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001703e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017041:	c3                   	ret    

c0017042 <VgaText::getCursorY()>:
c0017042:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017046:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017049:	c3                   	ret    

c001704a <VgaText::setCursor(int, int)>:
c001704a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001704e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017052:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0017055:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017059:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001705c:	e9 b1 fd ff ff       	jmp    c0016e12 <VgaText::updateCursor()>

c0017061 <setActiveTerminal(VgaText*)>:
c0017061:	53                   	push   ebx
c0017062:	83 ec 08             	sub    esp,0x8
c0017065:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017069:	85 db                	test   ebx,ebx
c001706b:	75 11                	jne    c001707e <setActiveTerminal(VgaText*)+0x1d>
c001706d:	c7 44 24 10 90 12 03 c0 	mov    DWORD PTR [esp+0x10],0xc0031290
c0017075:	83 c4 08             	add    esp,0x8
c0017078:	5b                   	pop    ebx
c0017079:	e9 e8 91 00 00       	jmp    c0020266 <KePanic(char const*)>
c001707e:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c0017083:	85 c0                	test   eax,eax
c0017085:	74 0c                	je     c0017093 <setActiveTerminal(VgaText*)+0x32>
c0017087:	83 ec 0c             	sub    esp,0xc
c001708a:	50                   	push   eax
c001708b:	e8 82 fd ff ff       	call   c0016e12 <VgaText::updateCursor()>
c0017090:	83 c4 10             	add    esp,0x10
c0017093:	89 1d 08 aa 03 c0    	mov    DWORD PTR ds:0xc003aa08,ebx
c0017099:	50                   	push   eax
c001709a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001709d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00170a0:	53                   	push   ebx
c00170a1:	e8 a4 ff ff ff       	call   c001704a <VgaText::setCursor(int, int)>
c00170a6:	83 c4 18             	add    esp,0x18
c00170a9:	5b                   	pop    ebx
c00170aa:	c3                   	ret    
c00170ab:	90                   	nop

c00170ac <VgaText::clearScreen()>:
c00170ac:	57                   	push   edi
c00170ad:	56                   	push   esi
c00170ae:	31 f6                	xor    esi,esi
c00170b0:	53                   	push   ebx
c00170b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00170b5:	52                   	push   edx
c00170b6:	6a 00                	push   0x0
c00170b8:	6a 00                	push   0x0
c00170ba:	53                   	push   ebx
c00170bb:	e8 8a ff ff ff       	call   c001704a <VgaText::setCursor(int, int)>
c00170c0:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00170c7:	83 c4 10             	add    esp,0x10
c00170ca:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00170cd:	7e 20                	jle    c00170ef <VgaText::clearScreen()+0x43>
c00170cf:	31 ff                	xor    edi,edi
c00170d1:	50                   	push   eax
c00170d2:	50                   	push   eax
c00170d3:	56                   	push   esi
c00170d4:	57                   	push   edi
c00170d5:	47                   	inc    edi
c00170d6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00170d9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00170dc:	6a 20                	push   0x20
c00170de:	53                   	push   ebx
c00170df:	e8 c6 fe ff ff       	call   c0016faa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00170e4:	83 c4 20             	add    esp,0x20
c00170e7:	83 ff 50             	cmp    edi,0x50
c00170ea:	75 e5                	jne    c00170d1 <VgaText::clearScreen()+0x25>
c00170ec:	46                   	inc    esi
c00170ed:	eb db                	jmp    c00170ca <VgaText::clearScreen()+0x1e>
c00170ef:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00170f6:	5b                   	pop    ebx
c00170f7:	5e                   	pop    esi
c00170f8:	5f                   	pop    edi
c00170f9:	c3                   	ret    

c00170fa <VgaText::setCursorX(int)>:
c00170fa:	83 ec 10             	sub    esp,0x10
c00170fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017101:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0017104:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017108:	50                   	push   eax
c0017109:	e8 3c ff ff ff       	call   c001704a <VgaText::setCursor(int, int)>
c001710e:	83 c4 1c             	add    esp,0x1c
c0017111:	c3                   	ret    

c0017112 <VgaText::setCursorY(int)>:
c0017112:	83 ec 10             	sub    esp,0x10
c0017115:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017119:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001711d:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0017120:	50                   	push   eax
c0017121:	e8 24 ff ff ff       	call   c001704a <VgaText::setCursor(int, int)>
c0017126:	83 c4 1c             	add    esp,0x1c
c0017129:	c3                   	ret    

c001712a <VgaText::incrementCursor(bool)>:
c001712a:	56                   	push   esi
c001712b:	53                   	push   ebx
c001712c:	51                   	push   ecx
c001712d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017131:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017135:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017138:	40                   	inc    eax
c0017139:	83 f8 50             	cmp    eax,0x50
c001713c:	74 05                	je     c0017143 <VgaText::incrementCursor(bool)+0x19>
c001713e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017141:	eb 24                	jmp    c0017167 <VgaText::incrementCursor(bool)+0x3d>
c0017143:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017146:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001714d:	8d 50 01             	lea    edx,[eax+0x1]
c0017150:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0017153:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0017156:	75 0f                	jne    c0017167 <VgaText::incrementCursor(bool)+0x3d>
c0017158:	83 ec 0c             	sub    esp,0xc
c001715b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001715e:	53                   	push   ebx
c001715f:	e8 a4 fd ff ff       	call   c0016f08 <VgaText::scrollScreen()>
c0017164:	83 c4 10             	add    esp,0x10
c0017167:	89 f0                	mov    eax,esi
c0017169:	84 c0                	test   al,al
c001716b:	74 0c                	je     c0017179 <VgaText::incrementCursor(bool)+0x4f>
c001716d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017171:	5a                   	pop    edx
c0017172:	5b                   	pop    ebx
c0017173:	5e                   	pop    esi
c0017174:	e9 99 fc ff ff       	jmp    c0016e12 <VgaText::updateCursor()>
c0017179:	58                   	pop    eax
c001717a:	5b                   	pop    ebx
c001717b:	5e                   	pop    esi
c001717c:	c3                   	ret    
c001717d:	90                   	nop

c001717e <VgaText::decrementCursor(bool)>:
c001717e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017182:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017186:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0017189:	85 c0                	test   eax,eax
c001718b:	74 04                	je     c0017191 <VgaText::decrementCursor(bool)+0x13>
c001718d:	48                   	dec    eax
c001718e:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0017191:	84 c9                	test   cl,cl
c0017193:	74 09                	je     c001719e <VgaText::decrementCursor(bool)+0x20>
c0017195:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0017199:	e9 74 fc ff ff       	jmp    c0016e12 <VgaText::updateCursor()>
c001719e:	c3                   	ret    
c001719f:	90                   	nop

c00171a0 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00171a0:	53                   	push   ebx
c00171a1:	83 ec 08             	sub    esp,0x8
c00171a4:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00171a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00171ad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00171b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00171b5:	83 f8 07             	cmp    eax,0x7
c00171b8:	75 21                	jne    c00171db <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00171ba:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00171c2:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00171ca:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00171d2:	83 c4 08             	add    esp,0x8
c00171d5:	5b                   	pop    ebx
c00171d6:	e9 18 3b 00 00       	jmp    c001acf3 <Krnl::beep(int, int, bool)>
c00171db:	83 f8 0d             	cmp    eax,0xd
c00171de:	75 09                	jne    c00171e9 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00171e0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00171e7:	eb 2d                	jmp    c0017216 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00171e9:	83 f8 0a             	cmp    eax,0xa
c00171ec:	75 31                	jne    c001721f <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00171ee:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00171f1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00171f8:	8d 50 01             	lea    edx,[eax+0x1]
c00171fb:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00171fe:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0017201:	75 0f                	jne    c0017212 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0017203:	83 ec 0c             	sub    esp,0xc
c0017206:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0017209:	53                   	push   ebx
c001720a:	e8 f9 fc ff ff       	call   c0016f08 <VgaText::scrollScreen()>
c001720f:	83 c4 10             	add    esp,0x10
c0017212:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017216:	83 c4 08             	add    esp,0x8
c0017219:	5b                   	pop    ebx
c001721a:	e9 f3 fb ff ff       	jmp    c0016e12 <VgaText::updateCursor()>
c001721f:	83 f8 08             	cmp    eax,0x8
c0017222:	75 25                	jne    c0017249 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0017224:	50                   	push   eax
c0017225:	50                   	push   eax
c0017226:	6a 01                	push   0x1
c0017228:	53                   	push   ebx
c0017229:	e8 50 ff ff ff       	call   c001717e <VgaText::decrementCursor(bool)>
c001722e:	5a                   	pop    edx
c001722f:	59                   	pop    ecx
c0017230:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017233:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017236:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017239:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001723c:	6a 20                	push   0x20
c001723e:	53                   	push   ebx
c001723f:	e8 66 fd ff ff       	call   c0016faa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0017244:	83 c4 28             	add    esp,0x28
c0017247:	5b                   	pop    ebx
c0017248:	c3                   	ret    
c0017249:	83 ec 08             	sub    esp,0x8
c001724c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001724f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017252:	51                   	push   ecx
c0017253:	52                   	push   edx
c0017254:	50                   	push   eax
c0017255:	53                   	push   ebx
c0017256:	e8 4f fd ff ff       	call   c0016faa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001725b:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001725f:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0017267:	83 c4 28             	add    esp,0x28
c001726a:	5b                   	pop    ebx
c001726b:	e9 ba fe ff ff       	jmp    c001712a <VgaText::incrementCursor(bool)>

c0017270 <VgaText::putchar(char)>:
c0017270:	57                   	push   edi
c0017271:	56                   	push   esi
c0017272:	53                   	push   ebx
c0017273:	83 ec 10             	sub    esp,0x10
c0017276:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001727a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001727e:	89 f8                	mov    eax,edi
c0017280:	0f be c0             	movsx  eax,al
c0017283:	83 f8 5b             	cmp    eax,0x5b
c0017286:	75 18                	jne    c00172a0 <VgaText::putchar(char)+0x30>
c0017288:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c001728c:	74 20                	je     c00172ae <VgaText::putchar(char)+0x3e>
c001728e:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0017294:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c001729b:	e9 c1 00 00 00       	jmp    c0017361 <VgaText::putchar(char)+0xf1>
c00172a0:	83 f8 1b             	cmp    eax,0x1b
c00172a3:	75 09                	jne    c00172ae <VgaText::putchar(char)+0x3e>
c00172a5:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00172a9:	e9 b3 00 00 00       	jmp    c0017361 <VgaText::putchar(char)+0xf1>
c00172ae:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00172b1:	84 c9                	test   cl,cl
c00172b3:	0f 84 98 00 00 00    	je     c0017351 <VgaText::putchar(char)+0xe1>
c00172b9:	8d 77 c0             	lea    esi,[edi-0x40]
c00172bc:	89 f2                	mov    edx,esi
c00172be:	80 fa 3e             	cmp    dl,0x3e
c00172c1:	77 78                	ja     c001733b <VgaText::putchar(char)+0xcb>
c00172c3:	83 f8 6d             	cmp    eax,0x6d
c00172c6:	75 47                	jne    c001730f <VgaText::putchar(char)+0x9f>
c00172c8:	31 f6                	xor    esi,esi
c00172ca:	31 d2                	xor    edx,edx
c00172cc:	31 c0                	xor    eax,eax
c00172ce:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00172d1:	7e 2d                	jle    c0017300 <VgaText::putchar(char)+0x90>
c00172d3:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00172d8:	83 fa 3b             	cmp    edx,0x3b
c00172db:	75 17                	jne    c00172f4 <VgaText::putchar(char)+0x84>
c00172dd:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00172e1:	50                   	push   eax
c00172e2:	53                   	push   ebx
c00172e3:	e8 40 fb ff ff       	call   c0016e28 <VgaText::doANSI_SGR(int)>
c00172e8:	59                   	pop    ecx
c00172e9:	31 d2                	xor    edx,edx
c00172eb:	5f                   	pop    edi
c00172ec:	31 c0                	xor    eax,eax
c00172ee:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00172f2:	eb 09                	jmp    c00172fd <VgaText::putchar(char)+0x8d>
c00172f4:	6b c0 0a             	imul   eax,eax,0xa
c00172f7:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00172fb:	88 ca                	mov    dl,cl
c00172fd:	46                   	inc    esi
c00172fe:	eb ce                	jmp    c00172ce <VgaText::putchar(char)+0x5e>
c0017300:	84 d2                	test   dl,dl
c0017302:	74 2f                	je     c0017333 <VgaText::putchar(char)+0xc3>
c0017304:	50                   	push   eax
c0017305:	53                   	push   ebx
c0017306:	e8 1d fb ff ff       	call   c0016e28 <VgaText::doANSI_SGR(int)>
c001730b:	58                   	pop    eax
c001730c:	5a                   	pop    edx
c001730d:	eb 24                	jmp    c0017333 <VgaText::putchar(char)+0xc3>
c001730f:	83 f8 4a             	cmp    eax,0x4a
c0017312:	75 1f                	jne    c0017333 <VgaText::putchar(char)+0xc3>
c0017314:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0017318:	75 19                	jne    c0017333 <VgaText::putchar(char)+0xc3>
c001731a:	83 ec 0c             	sub    esp,0xc
c001731d:	53                   	push   ebx
c001731e:	e8 89 fd ff ff       	call   c00170ac <VgaText::clearScreen()>
c0017323:	83 c4 0c             	add    esp,0xc
c0017326:	6a 00                	push   0x0
c0017328:	6a 00                	push   0x0
c001732a:	53                   	push   ebx
c001732b:	e8 1a fd ff ff       	call   c001704a <VgaText::setCursor(int, int)>
c0017330:	83 c4 10             	add    esp,0x10
c0017333:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0017339:	eb 26                	jmp    c0017361 <VgaText::putchar(char)+0xf1>
c001733b:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c001733e:	83 f8 0e             	cmp    eax,0xe
c0017341:	7f 1e                	jg     c0017361 <VgaText::putchar(char)+0xf1>
c0017343:	8d 48 01             	lea    ecx,[eax+0x1]
c0017346:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0017349:	89 f9                	mov    ecx,edi
c001734b:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c001734f:	eb 10                	jmp    c0017361 <VgaText::putchar(char)+0xf1>
c0017351:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017354:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017357:	50                   	push   eax
c0017358:	53                   	push   ebx
c0017359:	e8 42 fe ff ff       	call   c00171a0 <VgaText::putchar(char, VgaColour, VgaColour)>
c001735e:	83 c4 10             	add    esp,0x10
c0017361:	83 c4 10             	add    esp,0x10
c0017364:	5b                   	pop    ebx
c0017365:	5e                   	pop    esi
c0017366:	5f                   	pop    edi
c0017367:	c3                   	ret    

c0017368 <VgaText::putx(unsigned int)>:
c0017368:	57                   	push   edi
c0017369:	b9 11 00 00 00       	mov    ecx,0x11
c001736e:	56                   	push   esi
c001736f:	be 9e 12 03 c0       	mov    esi,0xc003129e
c0017374:	53                   	push   ebx
c0017375:	83 ec 20             	sub    esp,0x20
c0017378:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001737c:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0017380:	fc                   	cld    
c0017381:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017383:	be 08 00 00 00       	mov    esi,0x8
c0017388:	50                   	push   eax
c0017389:	50                   	push   eax
c001738a:	89 d8                	mov    eax,ebx
c001738c:	c1 e3 04             	shl    ebx,0x4
c001738f:	c1 e8 1c             	shr    eax,0x1c
c0017392:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0017397:	50                   	push   eax
c0017398:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001739c:	e8 cf fe ff ff       	call   c0017270 <VgaText::putchar(char)>
c00173a1:	83 c4 10             	add    esp,0x10
c00173a4:	4e                   	dec    esi
c00173a5:	75 e1                	jne    c0017388 <VgaText::putx(unsigned int)+0x20>
c00173a7:	83 c4 20             	add    esp,0x20
c00173aa:	5b                   	pop    ebx
c00173ab:	5e                   	pop    esi
c00173ac:	5f                   	pop    edi
c00173ad:	c3                   	ret    

c00173ae <VgaText::puts(char const*)>:
c00173ae:	53                   	push   ebx
c00173af:	83 ec 08             	sub    esp,0x8
c00173b2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00173b6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00173b9:	85 c0                	test   eax,eax
c00173bb:	74 12                	je     c00173cf <VgaText::puts(char const*)+0x21>
c00173bd:	43                   	inc    ebx
c00173be:	51                   	push   ecx
c00173bf:	51                   	push   ecx
c00173c0:	50                   	push   eax
c00173c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00173c5:	e8 a6 fe ff ff       	call   c0017270 <VgaText::putchar(char)>
c00173ca:	83 c4 10             	add    esp,0x10
c00173cd:	eb e7                	jmp    c00173b6 <VgaText::puts(char const*)+0x8>
c00173cf:	83 c4 08             	add    esp,0x8
c00173d2:	5b                   	pop    ebx
c00173d3:	c3                   	ret    

c00173d4 <VgaText::write(unsigned long long, void*, int*)>:
c00173d4:	55                   	push   ebp
c00173d5:	57                   	push   edi
c00173d6:	56                   	push   esi
c00173d7:	53                   	push   ebx
c00173d8:	83 ec 0c             	sub    esp,0xc
c00173db:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00173df:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00173e3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00173e7:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00173ee:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00173f1:	39 eb                	cmp    ebx,ebp
c00173f3:	74 13                	je     c0017408 <VgaText::write(unsigned long long, void*, int*)+0x34>
c00173f5:	43                   	inc    ebx
c00173f6:	50                   	push   eax
c00173f7:	50                   	push   eax
c00173f8:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00173fc:	50                   	push   eax
c00173fd:	56                   	push   esi
c00173fe:	e8 6d fe ff ff       	call   c0017270 <VgaText::putchar(char)>
c0017403:	83 c4 10             	add    esp,0x10
c0017406:	eb e9                	jmp    c00173f1 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0017408:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c001740f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017413:	89 38                	mov    DWORD PTR [eax],edi
c0017415:	83 c4 0c             	add    esp,0xc
c0017418:	31 c0                	xor    eax,eax
c001741a:	5b                   	pop    ebx
c001741b:	5e                   	pop    esi
c001741c:	5f                   	pop    edi
c001741d:	5d                   	pop    ebp
c001741e:	c3                   	ret    
c001741f:	90                   	nop

c0017420 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0017420:	55                   	push   ebp
c0017421:	57                   	push   edi
c0017422:	56                   	push   esi
c0017423:	53                   	push   ebx
c0017424:	83 ec 0c             	sub    esp,0xc
c0017427:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001742b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017430:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0017437:	50                   	push   eax
c0017438:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001743d:	50                   	push   eax
c001743e:	e8 b3 fa ff ff       	call   c0016ef6 <VgaText::combineColours(unsigned char, unsigned char)>
c0017443:	5a                   	pop    edx
c0017444:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0017448:	59                   	pop    ecx
c0017449:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c001744c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0017450:	0f b7 f6             	movzx  esi,si
c0017453:	0f b6 e8             	movzx  ebp,al
c0017456:	01 f6                	add    esi,esi
c0017458:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001745b:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001745e:	85 c0                	test   eax,eax
c0017460:	0f 84 ef 00 00 00    	je     c0017555 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0017466:	83 f8 0d             	cmp    eax,0xd
c0017469:	75 0c                	jne    c0017477 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c001746b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017472:	e9 d8 00 00 00       	jmp    c001754f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0017477:	83 f8 0a             	cmp    eax,0xa
c001747a:	75 44                	jne    c00174c0 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c001747c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001747f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017486:	8d 48 01             	lea    ecx,[eax+0x1]
c0017489:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c001748c:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c001748f:	75 0f                	jne    c00174a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0017491:	83 ec 0c             	sub    esp,0xc
c0017494:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0017497:	53                   	push   ebx
c0017498:	e8 6b fa ff ff       	call   c0016f08 <VgaText::scrollScreen()>
c001749d:	83 c4 10             	add    esp,0x10
c00174a0:	83 ec 0c             	sub    esp,0xc
c00174a3:	53                   	push   ebx
c00174a4:	e8 69 f9 ff ff       	call   c0016e12 <VgaText::updateCursor()>
c00174a9:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c00174ad:	83 c4 10             	add    esp,0x10
c00174b0:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00174b3:	0f b7 f6             	movzx  esi,si
c00174b6:	01 f6                	add    esi,esi
c00174b8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00174bb:	e9 8f 00 00 00       	jmp    c001754f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00174c0:	83 f8 08             	cmp    eax,0x8
c00174c3:	75 34                	jne    c00174f9 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c00174c5:	51                   	push   ecx
c00174c6:	51                   	push   ecx
c00174c7:	6a 01                	push   0x1
c00174c9:	53                   	push   ebx
c00174ca:	e8 af fc ff ff       	call   c001717e <VgaText::decrementCursor(bool)>
c00174cf:	5e                   	pop    esi
c00174d0:	58                   	pop    eax
c00174d1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00174d4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00174d7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00174da:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00174dd:	6a 20                	push   0x20
c00174df:	53                   	push   ebx
c00174e0:	e8 c5 fa ff ff       	call   c0016faa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00174e5:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c00174e9:	83 c4 20             	add    esp,0x20
c00174ec:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00174ef:	0f b7 f6             	movzx  esi,si
c00174f2:	01 f6                	add    esi,esi
c00174f4:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00174f7:	eb 56                	jmp    c001754f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00174f9:	52                   	push   edx
c00174fa:	52                   	push   edx
c00174fb:	55                   	push   ebp
c00174fc:	50                   	push   eax
c00174fd:	e8 98 fa ff ff       	call   c0016f9a <VgaText::combineCharAndColour(char, unsigned char)>
c0017502:	83 c4 10             	add    esp,0x10
c0017505:	66 89 06             	mov    WORD PTR [esi],ax
c0017508:	39 1d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebx
c001750e:	75 1d                	jne    c001752d <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0017510:	83 ec 0c             	sub    esp,0xc
c0017513:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017516:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017519:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001751d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017521:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0017524:	50                   	push   eax
c0017525:	e8 da 07 01 00       	call   c0027d04 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001752a:	83 c4 20             	add    esp,0x20
c001752d:	83 c6 02             	add    esi,0x2
c0017530:	50                   	push   eax
c0017531:	50                   	push   eax
c0017532:	6a 00                	push   0x0
c0017534:	53                   	push   ebx
c0017535:	e8 f0 fb ff ff       	call   c001712a <VgaText::incrementCursor(bool)>
c001753a:	83 c4 10             	add    esp,0x10
c001753d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0017541:	75 0c                	jne    c001754f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0017543:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0017547:	0f b7 f6             	movzx  esi,si
c001754a:	01 f6                	add    esi,esi
c001754c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001754f:	47                   	inc    edi
c0017550:	e9 06 ff ff ff       	jmp    c001745b <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0017555:	83 ec 0c             	sub    esp,0xc
c0017558:	53                   	push   ebx
c0017559:	e8 b4 f8 ff ff       	call   c0016e12 <VgaText::updateCursor()>
c001755e:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0017565:	83 c4 1c             	add    esp,0x1c
c0017568:	5b                   	pop    ebx
c0017569:	5e                   	pop    esi
c001756a:	5f                   	pop    edi
c001756b:	5d                   	pop    ebp
c001756c:	c3                   	ret    
c001756d:	90                   	nop

c001756e <VgaText::VgaText(char const*)>:
c001756e:	56                   	push   esi
c001756f:	53                   	push   ebx
c0017570:	83 ec 04             	sub    esp,0x4
c0017573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017577:	83 ec 08             	sub    esp,0x8
c001757a:	6a 00                	push   0x0
c001757c:	50                   	push   eax
c001757d:	e8 44 05 00 00       	call   c0017ac6 <UnixFile::UnixFile(int)>
c0017582:	83 c4 10             	add    esp,0x10
c0017585:	ba c4 12 03 c0       	mov    edx,0xc00312c4
c001758a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001758e:	89 10                	mov    DWORD PTR [eax],edx
c0017590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017594:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c001759b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001759f:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00175a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175aa:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00175ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175b2:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00175b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175ba:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00175c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175c5:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00175cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175d0:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00175d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175db:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00175e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175e6:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c00175ed:	83 ec 0c             	sub    esp,0xc
c00175f0:	6a 01                	push   0x1
c00175f2:	e8 1e 09 00 00       	call   c0017f15 <Virt::allocateKernelVirtualPages(int)>
c00175f7:	83 c4 10             	add    esp,0x10
c00175fa:	89 c2                	mov    edx,eax
c00175fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017600:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017603:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c0017609:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001760d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017610:	89 c6                	mov    esi,eax
c0017612:	e8 b0 f0 ff ff       	call   c00166c7 <Phys::allocatePage()>
c0017617:	68 05 0c 00 00       	push   0xc05
c001761c:	56                   	push   esi
c001761d:	50                   	push   eax
c001761e:	53                   	push   ebx
c001761f:	e8 04 10 00 00       	call   c0018628 <VAS::mapPage(unsigned long, unsigned long, int)>
c0017624:	83 c4 10             	add    esp,0x10
c0017627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001762b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001762e:	83 ec 04             	sub    esp,0x4
c0017631:	68 a0 0f 00 00       	push   0xfa0
c0017636:	6a 00                	push   0x0
c0017638:	50                   	push   eax
c0017639:	e8 b2 8e fe ff       	call   c00004f0 <memset>
c001763e:	83 c4 10             	add    esp,0x10
c0017641:	83 ec 04             	sub    esp,0x4
c0017644:	6a 00                	push   0x0
c0017646:	6a 07                	push   0x7
c0017648:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001764c:	e8 6b f8 ff ff       	call   c0016ebc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017651:	83 c4 10             	add    esp,0x10
c0017654:	83 ec 04             	sub    esp,0x4
c0017657:	6a 00                	push   0x0
c0017659:	6a 00                	push   0x0
c001765b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001765f:	e8 e6 f9 ff ff       	call   c001704a <VgaText::setCursor(int, int)>
c0017664:	83 c4 10             	add    esp,0x10
c0017667:	83 ec 0c             	sub    esp,0xc
c001766a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001766e:	e8 39 fa ff ff       	call   c00170ac <VgaText::clearScreen()>
c0017673:	83 c4 10             	add    esp,0x10
c0017676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001767a:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c001767e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017682:	05 82 00 00 00       	add    eax,0x82
c0017687:	83 ec 04             	sub    esp,0x4
c001768a:	68 80 00 00 00       	push   0x80
c001768f:	6a 00                	push   0x0
c0017691:	50                   	push   eax
c0017692:	e8 59 8e fe ff       	call   c00004f0 <memset>
c0017697:	83 c4 10             	add    esp,0x10
c001769a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001769e:	05 02 01 00 00       	add    eax,0x102
c00176a3:	83 ec 04             	sub    esp,0x4
c00176a6:	68 80 00 00 00       	push   0x80
c00176ab:	6a 00                	push   0x0
c00176ad:	50                   	push   eax
c00176ae:	e8 3d 8e fe ff       	call   c00004f0 <memset>
c00176b3:	83 c4 10             	add    esp,0x10
c00176b6:	90                   	nop
c00176b7:	83 c4 04             	add    esp,0x4
c00176ba:	5b                   	pop    ebx
c00176bb:	5e                   	pop    esi
c00176bc:	c3                   	ret    
c00176bd:	90                   	nop

c00176be <VgaText::receiveKey(unsigned char)>:
c00176be:	55                   	push   ebp
c00176bf:	57                   	push   edi
c00176c0:	56                   	push   esi
c00176c1:	53                   	push   ebx
c00176c2:	83 ec 2c             	sub    esp,0x2c
c00176c5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00176c9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00176cd:	89 ef                	mov    edi,ebp
c00176cf:	81 e7 ff 00 00 00    	and    edi,0xff
c00176d5:	0f 84 66 01 00 00    	je     c0017841 <VgaText::receiveKey(unsigned char)+0x183>
c00176db:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c00176e1:	83 ff 08             	cmp    edi,0x8
c00176e4:	75 73                	jne    c0017759 <VgaText::receiveKey(unsigned char)+0x9b>
c00176e6:	83 ec 0c             	sub    esp,0xc
c00176e9:	56                   	push   esi
c00176ea:	e8 81 8e fe ff       	call   c0000570 <strlen>
c00176ef:	83 c4 10             	add    esp,0x10
c00176f2:	85 c0                	test   eax,eax
c00176f4:	0f 84 02 01 00 00    	je     c00177fc <VgaText::receiveKey(unsigned char)+0x13e>
c00176fa:	50                   	push   eax
c00176fb:	50                   	push   eax
c00176fc:	6a 08                	push   0x8
c00176fe:	53                   	push   ebx
c00176ff:	e8 6c fb ff ff       	call   c0017270 <VgaText::putchar(char)>
c0017704:	89 34 24             	mov    DWORD PTR [esp],esi
c0017707:	e8 64 8e fe ff       	call   c0000570 <strlen>
c001770c:	83 c4 10             	add    esp,0x10
c001770f:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0017717:	83 fa 0d             	cmp    edx,0xd
c001771a:	89 d0                	mov    eax,edx
c001771c:	0f 95 c1             	setne  cl
c001771f:	83 fa 1f             	cmp    edx,0x1f
c0017722:	0f 9e c2             	setle  dl
c0017725:	0f b6 d2             	movzx  edx,dl
c0017728:	85 ca                	test   edx,ecx
c001772a:	74 17                	je     c0017743 <VgaText::receiveKey(unsigned char)+0x85>
c001772c:	83 e8 08             	sub    eax,0x8
c001772f:	3c 02                	cmp    al,0x2
c0017731:	76 10                	jbe    c0017743 <VgaText::receiveKey(unsigned char)+0x85>
c0017733:	55                   	push   ebp
c0017734:	55                   	push   ebp
c0017735:	68 af 12 03 c0       	push   0xc00312af
c001773a:	53                   	push   ebx
c001773b:	e8 6e fc ff ff       	call   c00173ae <VgaText::puts(char const*)>
c0017740:	83 c4 10             	add    esp,0x10
c0017743:	83 ec 0c             	sub    esp,0xc
c0017746:	56                   	push   esi
c0017747:	e8 24 8e fe ff       	call   c0000570 <strlen>
c001774c:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0017754:	e9 a0 00 00 00       	jmp    c00177f9 <VgaText::receiveKey(unsigned char)+0x13b>
c0017759:	83 ec 0c             	sub    esp,0xc
c001775c:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0017762:	50                   	push   eax
c0017763:	e8 08 8e fe ff       	call   c0000570 <strlen>
c0017768:	89 34 24             	mov    DWORD PTR [esp],esi
c001776b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001776f:	e8 fc 8d fe ff       	call   c0000570 <strlen>
c0017774:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017778:	83 c4 10             	add    esp,0x10
c001777b:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c001777f:	3d 80 00 00 00       	cmp    eax,0x80
c0017784:	0f 87 b7 00 00 00    	ja     c0017841 <VgaText::receiveKey(unsigned char)+0x183>
c001778a:	8d 45 ff             	lea    eax,[ebp-0x1]
c001778d:	8d 55 f7             	lea    edx,[ebp-0x9]
c0017790:	3c 1e                	cmp    al,0x1e
c0017792:	0f 96 c0             	setbe  al
c0017795:	80 fa 01             	cmp    dl,0x1
c0017798:	0f 97 c2             	seta   dl
c001779b:	0f b6 d2             	movzx  edx,dl
c001779e:	85 c2                	test   edx,eax
c00177a0:	74 2e                	je     c00177d0 <VgaText::receiveKey(unsigned char)+0x112>
c00177a2:	83 ff 0d             	cmp    edi,0xd
c00177a5:	74 29                	je     c00177d0 <VgaText::receiveKey(unsigned char)+0x112>
c00177a7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00177aa:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00177ad:	68 b5 12 03 c0       	push   0xc00312b5
c00177b2:	53                   	push   ebx
c00177b3:	e8 68 fc ff ff       	call   c0017420 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00177b8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00177bb:	8d 45 40             	lea    eax,[ebp+0x40]
c00177be:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00177c1:	0f b6 c0             	movzx  eax,al
c00177c4:	50                   	push   eax
c00177c5:	53                   	push   ebx
c00177c6:	e8 d5 f9 ff ff       	call   c00171a0 <VgaText::putchar(char, VgaColour, VgaColour)>
c00177cb:	83 c4 20             	add    esp,0x20
c00177ce:	eb 11                	jmp    c00177e1 <VgaText::receiveKey(unsigned char)+0x123>
c00177d0:	89 e8                	mov    eax,ebp
c00177d2:	51                   	push   ecx
c00177d3:	0f be c0             	movsx  eax,al
c00177d6:	51                   	push   ecx
c00177d7:	50                   	push   eax
c00177d8:	53                   	push   ebx
c00177d9:	e8 92 fa ff ff       	call   c0017270 <VgaText::putchar(char)>
c00177de:	83 c4 10             	add    esp,0x10
c00177e1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00177e6:	89 e8                	mov    eax,ebp
c00177e8:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c00177ec:	52                   	push   edx
c00177ed:	52                   	push   edx
c00177ee:	8d 44 24 26          	lea    eax,[esp+0x26]
c00177f2:	50                   	push   eax
c00177f3:	56                   	push   esi
c00177f4:	e8 47 90 fe ff       	call   c0000840 <strcat>
c00177f9:	83 c4 10             	add    esp,0x10
c00177fc:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0017802:	b0 01                	mov    al,0x1
c0017804:	83 ff 1c             	cmp    edi,0x1c
c0017807:	77 0e                	ja     c0017817 <VgaText::receiveKey(unsigned char)+0x159>
c0017809:	b8 08 04 00 10       	mov    eax,0x10000408
c001780e:	89 f9                	mov    ecx,edi
c0017810:	d3 e8                	shr    eax,cl
c0017812:	f7 d0                	not    eax
c0017814:	83 e0 01             	and    eax,0x1
c0017817:	84 c0                	test   al,al
c0017819:	74 04                	je     c001781f <VgaText::receiveKey(unsigned char)+0x161>
c001781b:	84 d2                	test   dl,dl
c001781d:	74 22                	je     c0017841 <VgaText::receiveKey(unsigned char)+0x183>
c001781f:	81 c3 02 01 00 00    	add    ebx,0x102
c0017825:	50                   	push   eax
c0017826:	50                   	push   eax
c0017827:	56                   	push   esi
c0017828:	53                   	push   ebx
c0017829:	e8 12 90 fe ff       	call   c0000840 <strcat>
c001782e:	83 c4 0c             	add    esp,0xc
c0017831:	68 80 00 00 00       	push   0x80
c0017836:	6a 00                	push   0x0
c0017838:	56                   	push   esi
c0017839:	e8 b2 8c fe ff       	call   c00004f0 <memset>
c001783e:	83 c4 10             	add    esp,0x10
c0017841:	83 c4 2c             	add    esp,0x2c
c0017844:	5b                   	pop    ebx
c0017845:	5e                   	pop    esi
c0017846:	5f                   	pop    edi
c0017847:	5d                   	pop    ebp
c0017848:	c3                   	ret    
c0017849:	90                   	nop

c001784a <VgaText::doUpdate()>:
c001784a:	c3                   	ret    
c001784b:	90                   	nop

c001784c <TSS::TSS()>:
c001784c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017850:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017857:	90                   	nop
c0017858:	c3                   	ret    
c0017859:	90                   	nop
c001785a:	66 90                	xchg   ax,ax

c001785c <TSS::setESP(unsigned long)>:
c001785c:	55                   	push   ebp
c001785d:	89 e5                	mov    ebp,esp
c001785f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017862:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017865:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017868:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001786b:	90                   	nop
c001786c:	5d                   	pop    ebp
c001786d:	c3                   	ret    
c001786e:	66 90                	xchg   ax,ax

c0017870 <TSS::flush()>:
c0017870:	55                   	push   ebp
c0017871:	89 e5                	mov    ebp,esp
c0017873:	83 ec 10             	sub    esp,0x10
c0017876:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017879:	8b 00                	mov    eax,DWORD PTR [eax]
c001787b:	83 c8 03             	or     eax,0x3
c001787e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0017882:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0017886:	66 89 d0             	mov    ax,dx
c0017889:	0f 00 d8             	ltr    ax
c001788c:	90                   	nop
c001788d:	c9                   	leave  
c001788e:	c3                   	ret    
c001788f:	90                   	nop

c0017890 <TSS::setup(unsigned long, unsigned long)>:
c0017890:	55                   	push   ebp
c0017891:	89 e5                	mov    ebp,esp
c0017893:	83 ec 18             	sub    esp,0x18
c0017896:	83 ec 0c             	sub    esp,0xc
c0017899:	6a 68                	push   0x68
c001789b:	e8 1e eb ff ff       	call   c00163be <malloc>
c00178a0:	83 c4 10             	add    esp,0x10
c00178a3:	89 c2                	mov    edx,eax
c00178a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178a8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00178ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178b1:	83 ec 04             	sub    esp,0x4
c00178b4:	6a 68                	push   0x68
c00178b6:	6a 00                	push   0x0
c00178b8:	50                   	push   eax
c00178b9:	e8 32 8c fe ff       	call   c00004f0 <memset>
c00178be:	83 c4 10             	add    esp,0x10
c00178c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178c7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00178cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178d3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00178d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178df:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00178e2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00178e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178eb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00178f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178f7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00178fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017900:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017903:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0017909:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001790c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001790f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0017915:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017918:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001791b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0017921:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017924:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017927:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001792d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017930:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017933:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0017936:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0017939:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001793c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001793f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017942:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017945:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017948:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001794b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0017952:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017955:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017958:	0f 20 da             	mov    edx,cr3
c001795b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001795e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0017961:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0017964:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017967:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001796a:	83 ec 08             	sub    esp,0x8
c001796d:	50                   	push   eax
c001796e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0017971:	50                   	push   eax
c0017972:	e8 b3 e2 ff ff       	call   c0015c2a <GDTEntry::setBase(unsigned int)>
c0017977:	83 c4 10             	add    esp,0x10
c001797a:	83 ec 08             	sub    esp,0x8
c001797d:	6a 68                	push   0x68
c001797f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0017982:	50                   	push   eax
c0017983:	e8 be e2 ff ff       	call   c0015c46 <GDTEntry::setLimit(unsigned int)>
c0017988:	83 c4 10             	add    esp,0x10
c001798b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c001798f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0017992:	83 e0 0f             	and    eax,0xf
c0017995:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0017998:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001799b:	83 c8 40             	or     eax,0x40
c001799e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00179a1:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00179a6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00179ac:	05 78 01 00 00       	add    eax,0x178
c00179b1:	83 ec 04             	sub    esp,0x4
c00179b4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00179b7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00179ba:	50                   	push   eax
c00179bb:	e8 ba e2 ff ff       	call   c0015c7a <GDT::addEntry(GDTEntry)>
c00179c0:	83 c4 10             	add    esp,0x10
c00179c3:	89 c2                	mov    edx,eax
c00179c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179c8:	89 10                	mov    DWORD PTR [eax],edx
c00179ca:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00179cf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00179d5:	05 78 01 00 00       	add    eax,0x178
c00179da:	83 ec 0c             	sub    esp,0xc
c00179dd:	50                   	push   eax
c00179de:	e8 c1 e2 ff ff       	call   c0015ca4 <GDT::flush()>
c00179e3:	83 c4 10             	add    esp,0x10
c00179e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00179eb:	c9                   	leave  
c00179ec:	c3                   	ret    
c00179ed:	90                   	nop

c00179ee <ReservedFilename::read(unsigned long long, void*, int*)>:
c00179ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00179f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00179f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179f9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00179fe:	75 08                	jne    c0017a08 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0017a00:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0017a06:	eb 38                	jmp    c0017a40 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0017a08:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0017a0d:	75 17                	jne    c0017a26 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0017a0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a14:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017a17:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a1d:	8b 10                	mov    edx,DWORD PTR [eax]
c0017a1f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a23:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0017a26:	89 c1                	mov    ecx,eax
c0017a28:	83 e1 fd             	and    ecx,0xfffffffd
c0017a2b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0017a31:	74 cd                	je     c0017a00 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017a33:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0017a38:	83 e0 ef             	and    eax,0xffffffef
c0017a3b:	83 f8 08             	cmp    eax,0x8
c0017a3e:	76 c0                	jbe    c0017a00 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017a40:	31 c0                	xor    eax,eax
c0017a42:	c3                   	ret    
c0017a43:	90                   	nop

c0017a44 <ReservedFilename::isAtty()>:
c0017a44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a48:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017a4b:	31 c0                	xor    eax,eax
c0017a4d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0017a53:	74 09                	je     c0017a5e <ReservedFilename::isAtty()+0x1a>
c0017a55:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0017a5b:	0f 94 c0             	sete   al
c0017a5e:	c3                   	ret    
c0017a5f:	90                   	nop

c0017a60 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0017a60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a64:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017a68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a6b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017a6f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0017a74:	75 08                	jne    c0017a7e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0017a76:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0017a7c:	eb 3d                	jmp    c0017abb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0017a7e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0017a83:	75 17                	jne    c0017a9c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0017a85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a8a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017a8d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a93:	8b 10                	mov    edx,DWORD PTR [eax]
c0017a95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a99:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0017a9c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0017aa1:	75 04                	jne    c0017aa7 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0017aa3:	89 0a                	mov    DWORD PTR [edx],ecx
c0017aa5:	eb 14                	jmp    c0017abb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0017aa7:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0017aac:	74 c8                	je     c0017a76 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0017aae:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0017ab3:	83 e0 ef             	and    eax,0xffffffef
c0017ab6:	83 f8 08             	cmp    eax,0x8
c0017ab9:	76 bb                	jbe    c0017a76 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0017abb:	31 c0                	xor    eax,eax
c0017abd:	c3                   	ret    

c0017abe <UnixFile::getFileDescriptor()>:
c0017abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ac2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ac5:	c3                   	ret    

c0017ac6 <UnixFile::UnixFile(int)>:
c0017ac6:	53                   	push   ebx
c0017ac7:	83 ec 28             	sub    esp,0x28
c0017aca:	ba 8c 13 03 c0       	mov    edx,0xc003138c
c0017acf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ad3:	89 10                	mov    DWORD PTR [eax],edx
c0017ad5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0017add:	0f 8f 90 01 00 00    	jg     c0017c73 <UnixFile::UnixFile(int)+0x1ad>
c0017ae3:	a1 00 3c 03 c0       	mov    eax,ds:0xc0033c00
c0017ae8:	8d 50 01             	lea    edx,[eax+0x1]
c0017aeb:	89 15 00 3c 03 c0    	mov    DWORD PTR ds:0xc0033c00,edx
c0017af1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017af5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017af8:	83 ec 08             	sub    esp,0x8
c0017afb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017aff:	68 98 aa 03 c0       	push   0xc003aa98
c0017b04:	e8 3f 6e 01 00       	call   c002e948 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017b09:	83 c4 10             	add    esp,0x10
c0017b0c:	a0 94 aa 03 c0       	mov    al,ds:0xc003aa94
c0017b11:	83 f0 01             	xor    eax,0x1
c0017b14:	0f b6 c0             	movzx  eax,al
c0017b17:	85 c0                	test   eax,eax
c0017b19:	0f 84 55 01 00 00    	je     c0017c74 <UnixFile::UnixFile(int)+0x1ae>
c0017b1f:	c6 05 94 aa 03 c0 01 	mov    BYTE PTR ds:0xc003aa94,0x1
c0017b26:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0017b2e:	83 ec 0c             	sub    esp,0xc
c0017b31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b35:	e8 84 e8 ff ff       	call   c00163be <malloc>
c0017b3a:	83 c4 10             	add    esp,0x10
c0017b3d:	89 c3                	mov    ebx,eax
c0017b3f:	83 ec 08             	sub    esp,0x8
c0017b42:	68 03 ff ff 0f       	push   0xfffff03
c0017b47:	53                   	push   ebx
c0017b48:	e8 2d 01 00 00       	call   c0017c7a <ReservedFilename::ReservedFilename(int)>
c0017b4d:	83 c4 10             	add    esp,0x10
c0017b50:	89 1d 8c aa 03 c0    	mov    DWORD PTR ds:0xc003aa8c,ebx
c0017b56:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0017b5e:	83 ec 0c             	sub    esp,0xc
c0017b61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b65:	e8 54 e8 ff ff       	call   c00163be <malloc>
c0017b6a:	83 c4 10             	add    esp,0x10
c0017b6d:	89 c3                	mov    ebx,eax
c0017b6f:	83 ec 08             	sub    esp,0x8
c0017b72:	68 01 ff ff 0f       	push   0xfffff01
c0017b77:	53                   	push   ebx
c0017b78:	e8 fd 00 00 00       	call   c0017c7a <ReservedFilename::ReservedFilename(int)>
c0017b7d:	83 c4 10             	add    esp,0x10
c0017b80:	89 1d 90 aa 03 c0    	mov    DWORD PTR ds:0xc003aa90,ebx
c0017b86:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0017b8e:	83 ec 0c             	sub    esp,0xc
c0017b91:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017b95:	e8 24 e8 ff ff       	call   c00163be <malloc>
c0017b9a:	83 c4 10             	add    esp,0x10
c0017b9d:	89 c3                	mov    ebx,eax
c0017b9f:	83 ec 08             	sub    esp,0x8
c0017ba2:	68 00 ff ff 0f       	push   0xfffff00
c0017ba7:	53                   	push   ebx
c0017ba8:	e8 cd 00 00 00       	call   c0017c7a <ReservedFilename::ReservedFilename(int)>
c0017bad:	83 c4 10             	add    esp,0x10
c0017bb0:	89 1d 84 aa 03 c0    	mov    DWORD PTR ds:0xc003aa84,ebx
c0017bb6:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0017bbe:	83 ec 0c             	sub    esp,0xc
c0017bc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017bc5:	e8 f4 e7 ff ff       	call   c00163be <malloc>
c0017bca:	83 c4 10             	add    esp,0x10
c0017bcd:	89 c3                	mov    ebx,eax
c0017bcf:	83 ec 08             	sub    esp,0x8
c0017bd2:	68 02 ff ff 0f       	push   0xfffff02
c0017bd7:	53                   	push   ebx
c0017bd8:	e8 9d 00 00 00       	call   c0017c7a <ReservedFilename::ReservedFilename(int)>
c0017bdd:	83 c4 10             	add    esp,0x10
c0017be0:	89 1d 88 aa 03 c0    	mov    DWORD PTR ds:0xc003aa88,ebx
c0017be6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017bee:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0017bf3:	7f 7f                	jg     c0017c74 <UnixFile::UnixFile(int)+0x1ae>
c0017bf5:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0017bfd:	83 ec 0c             	sub    esp,0xc
c0017c00:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017c04:	e8 b5 e7 ff ff       	call   c00163be <malloc>
c0017c09:	83 c4 10             	add    esp,0x10
c0017c0c:	89 c3                	mov    ebx,eax
c0017c0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c12:	05 10 ff ff 0f       	add    eax,0xfffff10
c0017c17:	83 ec 08             	sub    esp,0x8
c0017c1a:	50                   	push   eax
c0017c1b:	53                   	push   ebx
c0017c1c:	e8 59 00 00 00       	call   c0017c7a <ReservedFilename::ReservedFilename(int)>
c0017c21:	83 c4 10             	add    esp,0x10
c0017c24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c28:	89 1c 85 60 aa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc55a0],ebx
c0017c2f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0017c37:	83 ec 0c             	sub    esp,0xc
c0017c3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c3e:	e8 7b e7 ff ff       	call   c00163be <malloc>
c0017c43:	83 c4 10             	add    esp,0x10
c0017c46:	89 c3                	mov    ebx,eax
c0017c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c4c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0017c51:	83 ec 08             	sub    esp,0x8
c0017c54:	50                   	push   eax
c0017c55:	53                   	push   ebx
c0017c56:	e8 1f 00 00 00       	call   c0017c7a <ReservedFilename::ReservedFilename(int)>
c0017c5b:	83 c4 10             	add    esp,0x10
c0017c5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c62:	89 1c 85 20 aa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc55e0],ebx
c0017c69:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0017c6e:	e9 7b ff ff ff       	jmp    c0017bee <UnixFile::UnixFile(int)+0x128>
c0017c73:	90                   	nop
c0017c74:	83 c4 28             	add    esp,0x28
c0017c77:	5b                   	pop    ebx
c0017c78:	c3                   	ret    
c0017c79:	90                   	nop

c0017c7a <ReservedFilename::ReservedFilename(int)>:
c0017c7a:	83 ec 0c             	sub    esp,0xc
c0017c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c81:	83 ec 08             	sub    esp,0x8
c0017c84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c88:	50                   	push   eax
c0017c89:	e8 38 fe ff ff       	call   c0017ac6 <UnixFile::UnixFile(int)>
c0017c8e:	83 c4 10             	add    esp,0x10
c0017c91:	ba a8 13 03 c0       	mov    edx,0xc00313a8
c0017c96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c9a:	89 10                	mov    DWORD PTR [eax],edx
c0017c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ca0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017ca4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017ca7:	90                   	nop
c0017ca8:	83 c4 0c             	add    esp,0xc
c0017cab:	c3                   	ret    

c0017cac <UnixFile::~UnixFile()>:
c0017cac:	83 ec 1c             	sub    esp,0x1c
c0017caf:	ba 8c 13 03 c0       	mov    edx,0xc003138c
c0017cb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cb8:	89 10                	mov    DWORD PTR [eax],edx
c0017cba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017cc1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0017cc6:	7f 76                	jg     c0017d3e <UnixFile::~UnixFile()+0x92>
c0017cc8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017cd0:	83 ec 0c             	sub    esp,0xc
c0017cd3:	68 98 aa 03 c0       	push   0xc003aa98
c0017cd8:	e8 3f 6d 01 00       	call   c002ea1c <LinkedList<UnixFile>::getFirstElement()>
c0017cdd:	83 c4 10             	add    esp,0x10
c0017ce0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017ce4:	83 ec 0c             	sub    esp,0xc
c0017ce7:	68 98 aa 03 c0       	push   0xc003aa98
c0017cec:	e8 33 6d 01 00       	call   c002ea24 <LinkedList<UnixFile>::removeFirst()>
c0017cf1:	83 c4 10             	add    esp,0x10
c0017cf4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017cf8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0017cfc:	74 43                	je     c0017d41 <UnixFile::~UnixFile()+0x95>
c0017cfe:	83 ec 08             	sub    esp,0x8
c0017d01:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017d05:	68 98 aa 03 c0       	push   0xc003aa98
c0017d0a:	e8 39 6c 01 00       	call   c002e948 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017d0f:	83 c4 10             	add    esp,0x10
c0017d12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d16:	8d 50 01             	lea    edx,[eax+0x1]
c0017d19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017d1d:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0017d22:	0f 94 c0             	sete   al
c0017d25:	0f b6 c0             	movzx  eax,al
c0017d28:	85 c0                	test   eax,eax
c0017d2a:	74 a4                	je     c0017cd0 <UnixFile::~UnixFile()+0x24>
c0017d2c:	83 ec 0c             	sub    esp,0xc
c0017d2f:	68 64 13 03 c0       	push   0xc0031364
c0017d34:	e8 2d 85 00 00       	call   c0020266 <KePanic(char const*)>
c0017d39:	83 c4 10             	add    esp,0x10
c0017d3c:	eb 92                	jmp    c0017cd0 <UnixFile::~UnixFile()+0x24>
c0017d3e:	90                   	nop
c0017d3f:	eb 01                	jmp    c0017d42 <UnixFile::~UnixFile()+0x96>
c0017d41:	90                   	nop
c0017d42:	90                   	nop
c0017d43:	83 c4 1c             	add    esp,0x1c
c0017d46:	c3                   	ret    
c0017d47:	90                   	nop

c0017d48 <UnixFile::~UnixFile()>:
c0017d48:	83 ec 0c             	sub    esp,0xc
c0017d4b:	83 ec 0c             	sub    esp,0xc
c0017d4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d52:	e8 55 ff ff ff       	call   c0017cac <UnixFile::~UnixFile()>
c0017d57:	83 c4 10             	add    esp,0x10
c0017d5a:	83 ec 08             	sub    esp,0x8
c0017d5d:	6a 0c                	push   0xc
c0017d5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d63:	e8 b8 13 00 00       	call   c0019120 <operator delete(void*, unsigned long)>
c0017d68:	83 c4 10             	add    esp,0x10
c0017d6b:	83 c4 0c             	add    esp,0xc
c0017d6e:	c3                   	ret    
c0017d6f:	90                   	nop

c0017d70 <ReservedFilename::~ReservedFilename()>:
c0017d70:	83 ec 0c             	sub    esp,0xc
c0017d73:	ba a8 13 03 c0       	mov    edx,0xc00313a8
c0017d78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d7c:	89 10                	mov    DWORD PTR [eax],edx
c0017d7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d82:	83 ec 0c             	sub    esp,0xc
c0017d85:	50                   	push   eax
c0017d86:	e8 21 ff ff ff       	call   c0017cac <UnixFile::~UnixFile()>
c0017d8b:	83 c4 10             	add    esp,0x10
c0017d8e:	90                   	nop
c0017d8f:	83 c4 0c             	add    esp,0xc
c0017d92:	c3                   	ret    
c0017d93:	90                   	nop

c0017d94 <ReservedFilename::~ReservedFilename()>:
c0017d94:	83 ec 0c             	sub    esp,0xc
c0017d97:	83 ec 0c             	sub    esp,0xc
c0017d9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d9e:	e8 cd ff ff ff       	call   c0017d70 <ReservedFilename::~ReservedFilename()>
c0017da3:	83 c4 10             	add    esp,0x10
c0017da6:	83 ec 08             	sub    esp,0x8
c0017da9:	6a 0c                	push   0xc
c0017dab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017daf:	e8 6c 13 00 00       	call   c0019120 <operator delete(void*, unsigned long)>
c0017db4:	83 c4 10             	add    esp,0x10
c0017db7:	83 c4 0c             	add    esp,0xc
c0017dba:	c3                   	ret    

c0017dbb <KeGetFileFromDescriptor(int)>:
c0017dbb:	53                   	push   ebx
c0017dbc:	83 ec 08             	sub    esp,0x8
c0017dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017dc3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0017dc9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0017dcf:	7f 2c                	jg     c0017dfd <KeGetFileFromDescriptor(int)+0x42>
c0017dd1:	83 ec 0c             	sub    esp,0xc
c0017dd4:	68 98 aa 03 c0       	push   0xc003aa98
c0017dd9:	e8 3e 6c 01 00       	call   c002ea1c <LinkedList<UnixFile>::getFirstElement()>
c0017dde:	83 c4 10             	add    esp,0x10
c0017de1:	85 c0                	test   eax,eax
c0017de3:	75 04                	jne    c0017de9 <KeGetFileFromDescriptor(int)+0x2e>
c0017de5:	31 c0                	xor    eax,eax
c0017de7:	eb 6e                	jmp    c0017e57 <KeGetFileFromDescriptor(int)+0x9c>
c0017de9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0017dec:	74 69                	je     c0017e57 <KeGetFileFromDescriptor(int)+0x9c>
c0017dee:	52                   	push   edx
c0017def:	52                   	push   edx
c0017df0:	50                   	push   eax
c0017df1:	68 98 aa 03 c0       	push   0xc003aa98
c0017df6:	e8 cb 6c 01 00       	call   c002eac6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0017dfb:	eb e1                	jmp    c0017dde <KeGetFileFromDescriptor(int)+0x23>
c0017dfd:	a1 8c aa 03 c0       	mov    eax,ds:0xc003aa8c
c0017e02:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0017e08:	74 4d                	je     c0017e57 <KeGetFileFromDescriptor(int)+0x9c>
c0017e0a:	a1 90 aa 03 c0       	mov    eax,ds:0xc003aa90
c0017e0f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0017e15:	74 40                	je     c0017e57 <KeGetFileFromDescriptor(int)+0x9c>
c0017e17:	a1 88 aa 03 c0       	mov    eax,ds:0xc003aa88
c0017e1c:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0017e22:	74 33                	je     c0017e57 <KeGetFileFromDescriptor(int)+0x9c>
c0017e24:	a1 84 aa 03 c0       	mov    eax,ds:0xc003aa84
c0017e29:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0017e2f:	74 26                	je     c0017e57 <KeGetFileFromDescriptor(int)+0x9c>
c0017e31:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0017e37:	83 f8 08             	cmp    eax,0x8
c0017e3a:	77 09                	ja     c0017e45 <KeGetFileFromDescriptor(int)+0x8a>
c0017e3c:	8b 04 85 60 aa 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc55a0]
c0017e43:	eb 12                	jmp    c0017e57 <KeGetFileFromDescriptor(int)+0x9c>
c0017e45:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0017e4b:	83 fb 08             	cmp    ebx,0x8
c0017e4e:	77 95                	ja     c0017de5 <KeGetFileFromDescriptor(int)+0x2a>
c0017e50:	8b 04 9d 20 aa 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc55e0]
c0017e57:	83 c4 08             	add    esp,0x8
c0017e5a:	5b                   	pop    ebx
c0017e5b:	c3                   	ret    

c0017e5c <__static_initialization_and_destruction_0(int, int)>:
c0017e5c:	83 ec 0c             	sub    esp,0xc
c0017e5f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017e64:	75 34                	jne    c0017e9a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0017e66:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0017e6e:	75 2a                	jne    c0017e9a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0017e70:	83 ec 0c             	sub    esp,0xc
c0017e73:	68 98 aa 03 c0       	push   0xc003aa98
c0017e78:	e8 89 6a 01 00       	call   c002e906 <LinkedList<UnixFile>::LinkedList()>
c0017e7d:	83 c4 10             	add    esp,0x10
c0017e80:	83 ec 04             	sub    esp,0x4
c0017e83:	68 78 3b 03 c0       	push   0xc0033b78
c0017e88:	68 98 aa 03 c0       	push   0xc003aa98
c0017e8d:	68 04 e9 02 c0       	push   0xc002e904
c0017e92:	e8 39 12 00 00       	call   c00190d0 <__cxa_atexit>
c0017e97:	83 c4 10             	add    esp,0x10
c0017e9a:	90                   	nop
c0017e9b:	83 c4 0c             	add    esp,0xc
c0017e9e:	c3                   	ret    

c0017e9f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0017e9f:	83 ec 0c             	sub    esp,0xc
c0017ea2:	83 ec 08             	sub    esp,0x8
c0017ea5:	68 ff ff 00 00       	push   0xffff
c0017eaa:	6a 01                	push   0x1
c0017eac:	e8 ab ff ff ff       	call   c0017e5c <__static_initialization_and_destruction_0(int, int)>
c0017eb1:	83 c4 10             	add    esp,0x10
c0017eb4:	83 c4 0c             	add    esp,0xc
c0017eb7:	c3                   	ret    

c0017eb8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0017eb8:	53                   	push   ebx
c0017eb9:	8b 15 08 3c 03 c0    	mov    edx,DWORD PTR ds:0xc0033c08
c0017ebf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ec3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017ec7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0017ecd:	89 d8                	mov    eax,ebx
c0017ecf:	d1 e8                	shr    eax,1
c0017ed1:	01 d0                	add    eax,edx
c0017ed3:	80 e3 01             	and    bl,0x1
c0017ed6:	8a 10                	mov    dl,BYTE PTR [eax]
c0017ed8:	75 09                	jne    c0017ee3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0017eda:	83 e2 f0             	and    edx,0xfffffff0
c0017edd:	09 ca                	or     edx,ecx
c0017edf:	88 10                	mov    BYTE PTR [eax],dl
c0017ee1:	5b                   	pop    ebx
c0017ee2:	c3                   	ret    
c0017ee3:	83 e2 0f             	and    edx,0xf
c0017ee6:	0f b6 c9             	movzx  ecx,cl
c0017ee9:	c1 e1 04             	shl    ecx,0x4
c0017eec:	09 ca                	or     edx,ecx
c0017eee:	88 10                	mov    BYTE PTR [eax],dl
c0017ef0:	5b                   	pop    ebx
c0017ef1:	c3                   	ret    

c0017ef2 <Virt::getPageState(unsigned long)>:
c0017ef2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ef6:	8b 0d 08 3c 03 c0    	mov    ecx,DWORD PTR ds:0xc0033c08
c0017efc:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0017f02:	89 d0                	mov    eax,edx
c0017f04:	d1 e8                	shr    eax,1
c0017f06:	80 e2 01             	and    dl,0x1
c0017f09:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0017f0c:	74 03                	je     c0017f11 <Virt::getPageState(unsigned long)+0x1f>
c0017f0e:	c1 e8 04             	shr    eax,0x4
c0017f11:	83 e0 0f             	and    eax,0xf
c0017f14:	c3                   	ret    

c0017f15 <Virt::allocateKernelVirtualPages(int)>:
c0017f15:	55                   	push   ebp
c0017f16:	31 ed                	xor    ebp,ebp
c0017f18:	57                   	push   edi
c0017f19:	31 ff                	xor    edi,edi
c0017f1b:	56                   	push   esi
c0017f1c:	53                   	push   ebx
c0017f1d:	31 db                	xor    ebx,ebx
c0017f1f:	83 ec 0c             	sub    esp,0xc
c0017f22:	8b 35 04 3c 03 c0    	mov    esi,DWORD PTR ds:0xc0033c04
c0017f28:	56                   	push   esi
c0017f29:	e8 c4 ff ff ff       	call   c0017ef2 <Virt::getPageState(unsigned long)>
c0017f2e:	5a                   	pop    edx
c0017f2f:	84 c0                	test   al,al
c0017f31:	75 41                	jne    c0017f74 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0017f33:	85 db                	test   ebx,ebx
c0017f35:	75 02                	jne    c0017f39 <Virt::allocateKernelVirtualPages(int)+0x24>
c0017f37:	89 f5                	mov    ebp,esi
c0017f39:	83 c3 01             	add    ebx,0x1
c0017f3c:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0017f40:	74 5f                	je     c0017fa1 <Virt::allocateKernelVirtualPages(int)+0x8c>
c0017f42:	83 c6 01             	add    esi,0x1
c0017f45:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0017f4b:	76 34                	jbe    c0017f81 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0017f4d:	c7 05 04 3c 03 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0033c04,0xc8000
c0017f57:	f7 c7 01 00 00 00    	test   edi,0x1
c0017f5d:	75 2a                	jne    c0017f89 <Virt::allocateKernelVirtualPages(int)+0x74>
c0017f5f:	be 00 80 0c 00       	mov    esi,0xc8000
c0017f64:	bf 01 00 00 00       	mov    edi,0x1
c0017f69:	56                   	push   esi
c0017f6a:	e8 83 ff ff ff       	call   c0017ef2 <Virt::getPageState(unsigned long)>
c0017f6f:	5a                   	pop    edx
c0017f70:	84 c0                	test   al,al
c0017f72:	74 bf                	je     c0017f33 <Virt::allocateKernelVirtualPages(int)+0x1e>
c0017f74:	31 db                	xor    ebx,ebx
c0017f76:	83 c6 01             	add    esi,0x1
c0017f79:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0017f7f:	77 cc                	ja     c0017f4d <Virt::allocateKernelVirtualPages(int)+0x38>
c0017f81:	89 35 04 3c 03 c0    	mov    DWORD PTR ds:0xc0033c04,esi
c0017f87:	eb 9f                	jmp    c0017f28 <Virt::allocateKernelVirtualPages(int)+0x13>
c0017f89:	83 ec 0c             	sub    esp,0xc
c0017f8c:	68 bc 13 03 c0       	push   0xc00313bc
c0017f91:	e8 d0 82 00 00       	call   c0020266 <KePanic(char const*)>
c0017f96:	8b 35 04 3c 03 c0    	mov    esi,DWORD PTR ds:0xc0033c04
c0017f9c:	83 c4 10             	add    esp,0x10
c0017f9f:	eb 87                	jmp    c0017f28 <Virt::allocateKernelVirtualPages(int)+0x13>
c0017fa1:	89 2d 04 3c 03 c0    	mov    DWORD PTR ds:0xc0033c04,ebp
c0017fa7:	83 fb 01             	cmp    ebx,0x1
c0017faa:	74 6f                	je     c001801b <Virt::allocateKernelVirtualPages(int)+0x106>
c0017fac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017fb0:	85 c9                	test   ecx,ecx
c0017fb2:	74 49                	je     c0017ffd <Virt::allocateKernelVirtualPages(int)+0xe8>
c0017fb4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017fb8:	89 e8                	mov    eax,ebp
c0017fba:	31 db                	xor    ebx,ebx
c0017fbc:	8d 79 ff             	lea    edi,[ecx-0x1]
c0017fbf:	eb 18                	jmp    c0017fd9 <Virt::allocateKernelVirtualPages(int)+0xc4>
c0017fc1:	6a 01                	push   0x1
c0017fc3:	83 c3 01             	add    ebx,0x1
c0017fc6:	50                   	push   eax
c0017fc7:	e8 ec fe ff ff       	call   c0017eb8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0017fcc:	58                   	pop    eax
c0017fcd:	5a                   	pop    edx
c0017fce:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0017fd2:	74 29                	je     c0017ffd <Virt::allocateKernelVirtualPages(int)+0xe8>
c0017fd4:	a1 04 3c 03 c0       	mov    eax,ds:0xc0033c04
c0017fd9:	8d 50 01             	lea    edx,[eax+0x1]
c0017fdc:	85 db                	test   ebx,ebx
c0017fde:	89 15 04 3c 03 c0    	mov    DWORD PTR ds:0xc0033c04,edx
c0017fe4:	74 24                	je     c001800a <Virt::allocateKernelVirtualPages(int)+0xf5>
c0017fe6:	39 df                	cmp    edi,ebx
c0017fe8:	75 d7                	jne    c0017fc1 <Virt::allocateKernelVirtualPages(int)+0xac>
c0017fea:	6a 03                	push   0x3
c0017fec:	83 c3 01             	add    ebx,0x1
c0017fef:	50                   	push   eax
c0017ff0:	e8 c3 fe ff ff       	call   c0017eb8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0017ff5:	59                   	pop    ecx
c0017ff6:	5e                   	pop    esi
c0017ff7:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0017ffb:	75 d7                	jne    c0017fd4 <Virt::allocateKernelVirtualPages(int)+0xbf>
c0017ffd:	83 c4 0c             	add    esp,0xc
c0018000:	89 e8                	mov    eax,ebp
c0018002:	5b                   	pop    ebx
c0018003:	c1 e0 0c             	shl    eax,0xc
c0018006:	5e                   	pop    esi
c0018007:	5f                   	pop    edi
c0018008:	5d                   	pop    ebp
c0018009:	c3                   	ret    
c001800a:	6a 02                	push   0x2
c001800c:	bb 01 00 00 00       	mov    ebx,0x1
c0018011:	50                   	push   eax
c0018012:	e8 a1 fe ff ff       	call   c0017eb8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018017:	58                   	pop    eax
c0018018:	5a                   	pop    edx
c0018019:	eb b9                	jmp    c0017fd4 <Virt::allocateKernelVirtualPages(int)+0xbf>
c001801b:	6a 04                	push   0x4
c001801d:	8d 45 01             	lea    eax,[ebp+0x1]
c0018020:	55                   	push   ebp
c0018021:	a3 04 3c 03 c0       	mov    ds:0xc0033c04,eax
c0018026:	e8 8d fe ff ff       	call   c0017eb8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001802b:	5b                   	pop    ebx
c001802c:	89 e8                	mov    eax,ebp
c001802e:	5e                   	pop    esi
c001802f:	c1 e0 0c             	shl    eax,0xc
c0018032:	83 c4 0c             	add    esp,0xc
c0018035:	5b                   	pop    ebx
c0018036:	5e                   	pop    esi
c0018037:	5f                   	pop    edi
c0018038:	5d                   	pop    ebp
c0018039:	c3                   	ret    

c001803a <Virt::freeSwapfilePage(unsigned long)>:
c001803a:	53                   	push   ebx
c001803b:	8b 15 ac aa 03 c0    	mov    edx,DWORD PTR ds:0xc003aaac
c0018041:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018045:	b8 01 00 00 00       	mov    eax,0x1
c001804a:	89 cb                	mov    ebx,ecx
c001804c:	d3 e0                	shl    eax,cl
c001804e:	c1 eb 05             	shr    ebx,0x5
c0018051:	f7 d0                	not    eax
c0018053:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0018056:	21 c1                	and    ecx,eax
c0018058:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c001805b:	5b                   	pop    ebx
c001805c:	c3                   	ret    

c001805d <Virt::swapIDToSector(unsigned long)>:
c001805d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018061:	8b 15 0c 3c 03 c0    	mov    edx,DWORD PTR ds:0xc0033c0c
c0018067:	8b 0d 14 3c 03 c0    	mov    ecx,DWORD PTR ds:0xc0033c14
c001806d:	0f af c2             	imul   eax,edx
c0018070:	01 c8                	add    eax,ecx
c0018072:	c3                   	ret    

c0018073 <Virt::allocateSwapfilePage()>:
c0018073:	55                   	push   ebp
c0018074:	31 d2                	xor    edx,edx
c0018076:	57                   	push   edi
c0018077:	56                   	push   esi
c0018078:	53                   	push   ebx
c0018079:	83 ec 0c             	sub    esp,0xc
c001807c:	8b 0d 0c 3c 03 c0    	mov    ecx,DWORD PTR ds:0xc0033c0c
c0018082:	a1 10 3c 03 c0       	mov    eax,ds:0xc0033c10
c0018087:	f7 f1                	div    ecx
c0018089:	39 0d 10 3c 03 c0    	cmp    DWORD PTR ds:0xc0033c10,ecx
c001808f:	72 2f                	jb     c00180c0 <Virt::allocateSwapfilePage()+0x4d>
c0018091:	8b 35 ac aa 03 c0    	mov    esi,DWORD PTR ds:0xc003aaac
c0018097:	8b 16                	mov    edx,DWORD PTR [esi]
c0018099:	f6 c2 01             	test   dl,0x1
c001809c:	74 3e                	je     c00180dc <Virt::allocateSwapfilePage()+0x69>
c001809e:	31 c9                	xor    ecx,ecx
c00180a0:	bf 01 00 00 00       	mov    edi,0x1
c00180a5:	eb 12                	jmp    c00180b9 <Virt::allocateSwapfilePage()+0x46>
c00180a7:	89 fd                	mov    ebp,edi
c00180a9:	89 ca                	mov    edx,ecx
c00180ab:	d3 e5                	shl    ebp,cl
c00180ad:	c1 ea 05             	shr    edx,0x5
c00180b0:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00180b3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00180b5:	85 ea                	test   edx,ebp
c00180b7:	74 2c                	je     c00180e5 <Virt::allocateSwapfilePage()+0x72>
c00180b9:	83 c1 01             	add    ecx,0x1
c00180bc:	39 c8                	cmp    eax,ecx
c00180be:	77 e7                	ja     c00180a7 <Virt::allocateSwapfilePage()+0x34>
c00180c0:	83 ec 0c             	sub    esp,0xc
c00180c3:	68 50 16 03 c0       	push   0xc0031650
c00180c8:	e8 99 81 00 00       	call   c0020266 <KePanic(char const*)>
c00180cd:	83 c4 10             	add    esp,0x10
c00180d0:	31 c9                	xor    ecx,ecx
c00180d2:	83 c4 0c             	add    esp,0xc
c00180d5:	89 c8                	mov    eax,ecx
c00180d7:	5b                   	pop    ebx
c00180d8:	5e                   	pop    esi
c00180d9:	5f                   	pop    edi
c00180da:	5d                   	pop    ebp
c00180db:	c3                   	ret    
c00180dc:	89 f3                	mov    ebx,esi
c00180de:	bd 01 00 00 00       	mov    ebp,0x1
c00180e3:	31 c9                	xor    ecx,ecx
c00180e5:	09 ea                	or     edx,ebp
c00180e7:	89 c8                	mov    eax,ecx
c00180e9:	89 13                	mov    DWORD PTR [ebx],edx
c00180eb:	83 c4 0c             	add    esp,0xc
c00180ee:	5b                   	pop    ebx
c00180ef:	5e                   	pop    esi
c00180f0:	5f                   	pop    edi
c00180f1:	5d                   	pop    ebp
c00180f2:	c3                   	ret    

c00180f3 <Virt::virtualMemorySetup()>:
c00180f3:	53                   	push   ebx
c00180f4:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00180f9:	6a 0f                	push   0xf
c00180fb:	53                   	push   ebx
c00180fc:	83 c3 01             	add    ebx,0x1
c00180ff:	e8 b4 fd ff ff       	call   c0017eb8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018104:	58                   	pop    eax
c0018105:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001810b:	5a                   	pop    edx
c001810c:	75 eb                	jne    c00180f9 <Virt::virtualMemorySetup()+0x6>
c001810e:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0018113:	6a 00                	push   0x0
c0018115:	53                   	push   ebx
c0018116:	83 c3 01             	add    ebx,0x1
c0018119:	e8 9a fd ff ff       	call   c0017eb8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001811e:	59                   	pop    ecx
c001811f:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0018125:	58                   	pop    eax
c0018126:	75 eb                	jne    c0018113 <Virt::virtualMemorySetup()+0x20>
c0018128:	bb 00 00 0d 00       	mov    ebx,0xd0000
c001812d:	6a 0f                	push   0xf
c001812f:	53                   	push   ebx
c0018130:	83 c3 01             	add    ebx,0x1
c0018133:	e8 80 fd ff ff       	call   c0017eb8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018138:	58                   	pop    eax
c0018139:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c001813f:	5a                   	pop    edx
c0018140:	75 eb                	jne    c001812d <Virt::virtualMemorySetup()+0x3a>
c0018142:	5b                   	pop    ebx
c0018143:	c3                   	ret    

c0018144 <Virt::setupPageSwapping(int)>:
c0018144:	53                   	push   ebx
c0018145:	83 ec 0c             	sub    esp,0xc
c0018148:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001814c:	a1 88 f3 03 c0       	mov    eax,ds:0xc003f388
c0018151:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0018157:	8b 10                	mov    edx,DWORD PTR [eax]
c0018159:	53                   	push   ebx
c001815a:	c1 e3 0b             	shl    ebx,0xb
c001815d:	68 67 16 03 c0       	push   0xc0031667
c0018162:	50                   	push   eax
c0018163:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0018166:	89 1d 10 3c 03 c0    	mov    DWORD PTR ds:0xc0033c10,ebx
c001816c:	c6 05 18 3c 03 c0 43 	mov    BYTE PTR ds:0xc0033c18,0x43
c0018173:	c1 eb 08             	shr    ebx,0x8
c0018176:	a3 14 3c 03 c0       	mov    ds:0xc0033c14,eax
c001817b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001817e:	c7 05 0c 3c 03 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0033c0c,0x8
c0018188:	e8 31 e2 ff ff       	call   c00163be <malloc>
c001818d:	83 c4 0c             	add    esp,0xc
c0018190:	89 c1                	mov    ecx,eax
c0018192:	a3 ac aa 03 c0       	mov    ds:0xc003aaac,eax
c0018197:	31 d2                	xor    edx,edx
c0018199:	a1 10 3c 03 c0       	mov    eax,ds:0xc0033c10
c001819e:	f7 35 0c 3c 03 c0    	div    DWORD PTR ds:0xc0033c0c
c00181a4:	c1 e8 05             	shr    eax,0x5
c00181a7:	50                   	push   eax
c00181a8:	6a 00                	push   0x0
c00181aa:	51                   	push   ecx
c00181ab:	e8 40 83 fe ff       	call   c00004f0 <memset>
c00181b0:	83 c4 18             	add    esp,0x18
c00181b3:	5b                   	pop    ebx
c00181b4:	c3                   	ret    
c00181b5:	90                   	nop

c00181b6 <VAS::setCPUSpecific(unsigned long)>:
c00181b6:	c3                   	ret    
c00181b7:	90                   	nop

c00181b8 <VAS::VAS(VAS*)>:
c00181b8:	83 ec 0c             	sub    esp,0xc
c00181bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181bf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00181c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181ca:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00181d1:	83 ec 0c             	sub    esp,0xc
c00181d4:	68 dc 13 03 c0       	push   0xc00313dc
c00181d9:	e8 88 80 00 00       	call   c0020266 <KePanic(char const*)>
c00181de:	83 c4 10             	add    esp,0x10
c00181e1:	90                   	nop
c00181e2:	83 c4 0c             	add    esp,0xc
c00181e5:	c3                   	ret    

c00181e6 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00181e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181ea:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00181ef:	89 c2                	mov    edx,eax
c00181f1:	c1 e8 0a             	shr    eax,0xa
c00181f4:	c1 ea 16             	shr    edx,0x16
c00181f7:	83 f9 01             	cmp    ecx,0x1
c00181fa:	19 c9                	sbb    ecx,ecx
c00181fc:	c1 e2 0c             	shl    edx,0xc
c00181ff:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0018205:	25 fc 0f 00 00       	and    eax,0xffc
c001820a:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0018211:	01 d0                	add    eax,edx
c0018213:	c3                   	ret    

c0018214 <VAS::getPageTableEntry(unsigned long)>:
c0018214:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018218:	89 ca                	mov    edx,ecx
c001821a:	c1 e9 0a             	shr    ecx,0xa
c001821d:	c1 ea 16             	shr    edx,0x16
c0018220:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0018226:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001822c:	c1 e0 0c             	shl    eax,0xc
c001822f:	8d 04 08             	lea    eax,[eax+ecx*1]
c0018232:	c3                   	ret    

c0018233 <Virt::freeKernelVirtualPages(unsigned long)>:
c0018233:	55                   	push   ebp
c0018234:	57                   	push   edi
c0018235:	bf 01 00 00 00       	mov    edi,0x1
c001823a:	56                   	push   esi
c001823b:	53                   	push   ebx
c001823c:	83 ec 1c             	sub    esp,0x1c
c001823f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018243:	c1 ee 0c             	shr    esi,0xc
c0018246:	eb 48                	jmp    c0018290 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0018248:	83 ec 08             	sub    esp,0x8
c001824b:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c0018250:	55                   	push   ebp
c0018251:	50                   	push   eax
c0018252:	e8 bd ff ff ff       	call   c0018214 <VAS::getPageTableEntry(unsigned long)>
c0018257:	83 c4 10             	add    esp,0x10
c001825a:	8b 10                	mov    edx,DWORD PTR [eax]
c001825c:	f6 c6 04             	test   dh,0x4
c001825f:	75 70                	jne    c00182d1 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0018261:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0018267:	83 fb 04             	cmp    ebx,0x4
c001826a:	0f 84 8a 00 00 00    	je     c00182fa <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0018270:	83 fb 02             	cmp    ebx,0x2
c0018273:	0f 84 9a 00 00 00    	je     c0018313 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0018279:	83 fb 03             	cmp    ebx,0x3
c001827c:	0f 84 be 00 00 00    	je     c0018340 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0018282:	83 fb 01             	cmp    ebx,0x1
c0018285:	0f 84 a2 00 00 00    	je     c001832d <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c001828b:	83 c6 01             	add    esi,0x1
c001828e:	31 ff                	xor    edi,edi
c0018290:	56                   	push   esi
c0018291:	89 f5                	mov    ebp,esi
c0018293:	e8 5a fc ff ff       	call   c0017ef2 <Virt::getPageState(unsigned long)>
c0018298:	c1 e5 0c             	shl    ebp,0xc
c001829b:	0f b6 d8             	movzx  ebx,al
c001829e:	5a                   	pop    edx
c001829f:	85 db                	test   ebx,ebx
c00182a1:	75 a5                	jne    c0018248 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c00182a3:	83 ec 0c             	sub    esp,0xc
c00182a6:	68 7e 16 03 c0       	push   0xc003167e
c00182ab:	e8 b6 7f 00 00       	call   c0020266 <KePanic(char const*)>
c00182b0:	5a                   	pop    edx
c00182b1:	59                   	pop    ecx
c00182b2:	55                   	push   ebp
c00182b3:	8b 2d b0 aa 03 c0    	mov    ebp,DWORD PTR ds:0xc003aab0
c00182b9:	55                   	push   ebp
c00182ba:	e8 55 ff ff ff       	call   c0018214 <VAS::getPageTableEntry(unsigned long)>
c00182bf:	83 c4 10             	add    esp,0x10
c00182c2:	8b 10                	mov    edx,DWORD PTR [eax]
c00182c4:	f6 c6 04             	test   dh,0x4
c00182c7:	75 08                	jne    c00182d1 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00182c9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00182cf:	eb ba                	jmp    c001828b <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00182d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00182d5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00182db:	83 ec 0c             	sub    esp,0xc
c00182de:	52                   	push   edx
c00182df:	e8 7a e3 ff ff       	call   c001665e <Phys::freePage(unsigned long)>
c00182e4:	83 c4 10             	add    esp,0x10
c00182e7:	83 fb 04             	cmp    ebx,0x4
c00182ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182ee:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00182f4:	0f 85 76 ff ff ff    	jne    c0018270 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00182fa:	83 e7 01             	and    edi,0x1
c00182fd:	75 46                	jne    c0018345 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00182ff:	c7 44 24 30 00 14 03 c0 	mov    DWORD PTR [esp+0x30],0xc0031400
c0018307:	83 c4 1c             	add    esp,0x1c
c001830a:	5b                   	pop    ebx
c001830b:	5e                   	pop    esi
c001830c:	5f                   	pop    edi
c001830d:	5d                   	pop    ebp
c001830e:	e9 53 7f 00 00       	jmp    c0020266 <KePanic(char const*)>
c0018313:	83 e7 01             	and    edi,0x1
c0018316:	75 15                	jne    c001832d <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0018318:	83 ec 0c             	sub    esp,0xc
c001831b:	68 9a 16 03 c0       	push   0xc003169a
c0018320:	e8 41 7f 00 00       	call   c0020266 <KePanic(char const*)>
c0018325:	83 c4 10             	add    esp,0x10
c0018328:	e9 5e ff ff ff       	jmp    c001828b <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001832d:	83 ec 08             	sub    esp,0x8
c0018330:	6a 00                	push   0x0
c0018332:	56                   	push   esi
c0018333:	e8 80 fb ff ff       	call   c0017eb8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018338:	83 c4 10             	add    esp,0x10
c001833b:	e9 4b ff ff ff       	jmp    c001828b <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0018340:	83 e7 01             	and    edi,0x1
c0018343:	75 16                	jne    c001835b <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0018345:	83 ec 08             	sub    esp,0x8
c0018348:	6a 00                	push   0x0
c001834a:	56                   	push   esi
c001834b:	e8 68 fb ff ff       	call   c0017eb8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018350:	83 c4 10             	add    esp,0x10
c0018353:	83 c4 1c             	add    esp,0x1c
c0018356:	5b                   	pop    ebx
c0018357:	5e                   	pop    esi
c0018358:	5f                   	pop    edi
c0018359:	5d                   	pop    ebp
c001835a:	c3                   	ret    
c001835b:	c7 44 24 30 b6 16 03 c0 	mov    DWORD PTR [esp+0x30],0xc00316b6
c0018363:	83 c4 1c             	add    esp,0x1c
c0018366:	5b                   	pop    ebx
c0018367:	5e                   	pop    esi
c0018368:	5f                   	pop    edi
c0018369:	5d                   	pop    ebp
c001836a:	e9 f7 7e 00 00       	jmp    c0020266 <KePanic(char const*)>
c001836f:	90                   	nop

c0018370 <VAS::freeAllocatedPages(unsigned long)>:
c0018370:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018374:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018378:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001837c:	74 09                	je     c0018387 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001837e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0018382:	e9 ac fe ff ff       	jmp    c0018233 <Virt::freeKernelVirtualPages(unsigned long)>
c0018387:	c7 44 24 04 24 14 03 c0 	mov    DWORD PTR [esp+0x4],0xc0031424
c001838f:	e9 b9 0e 00 00       	jmp    c001924d <Dbg::kprintf(char const*, ...)>

c0018394 <VAS::virtualToPhysical(unsigned long)>:
c0018394:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018398:	50                   	push   eax
c0018399:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001839d:	52                   	push   edx
c001839e:	e8 71 fe ff ff       	call   c0018214 <VAS::getPageTableEntry(unsigned long)>
c00183a3:	59                   	pop    ecx
c00183a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00183a6:	5a                   	pop    edx
c00183a7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00183ac:	c3                   	ret    
c00183ad:	90                   	nop

c00183ae <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c00183ae:	55                   	push   ebp
c00183af:	57                   	push   edi
c00183b0:	56                   	push   esi
c00183b1:	53                   	push   ebx
c00183b2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00183b6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00183ba:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00183be:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00183c2:	85 db                	test   ebx,ebx
c00183c4:	7e 24                	jle    c00183ea <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c00183c6:	c1 e3 0c             	shl    ebx,0xc
c00183c9:	01 f3                	add    ebx,esi
c00183cb:	56                   	push   esi
c00183cc:	81 c6 00 10 00 00    	add    esi,0x1000
c00183d2:	55                   	push   ebp
c00183d3:	e8 3c fe ff ff       	call   c0018214 <VAS::getPageTableEntry(unsigned long)>
c00183d8:	5a                   	pop    edx
c00183d9:	59                   	pop    ecx
c00183da:	8b 08                	mov    ecx,DWORD PTR [eax]
c00183dc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00183e0:	21 f9                	and    ecx,edi
c00183e2:	09 d1                	or     ecx,edx
c00183e4:	39 f3                	cmp    ebx,esi
c00183e6:	89 08                	mov    DWORD PTR [eax],ecx
c00183e8:	75 e1                	jne    c00183cb <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c00183ea:	5b                   	pop    ebx
c00183eb:	5e                   	pop    esi
c00183ec:	5f                   	pop    edi
c00183ed:	5d                   	pop    ebp
c00183ee:	c3                   	ret    
c00183ef:	90                   	nop

c00183f0 <VAS::VAS()>:
c00183f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00183f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00183fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00183ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018406:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001840a:	a3 b0 aa 03 c0       	mov    ds:0xc003aab0,eax
c001840f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018413:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0018417:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001841b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001841e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018422:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0018429:	ba 7d 50 03 c0       	mov    edx,0xc003507d
c001842e:	b8 00 50 03 c0       	mov    eax,0xc0035000
c0018433:	29 c2                	sub    edx,eax
c0018435:	89 d0                	mov    eax,edx
c0018437:	05 ff 0f 00 00       	add    eax,0xfff
c001843c:	c1 e8 0c             	shr    eax,0xc
c001843f:	89 c2                	mov    edx,eax
c0018441:	b8 00 50 03 c0       	mov    eax,0xc0035000
c0018446:	6a 04                	push   0x4
c0018448:	6a ff                	push   0xffffffff
c001844a:	52                   	push   edx
c001844b:	50                   	push   eax
c001844c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018450:	e8 59 ff ff ff       	call   c00183ae <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0018455:	83 c4 14             	add    esp,0x14
c0018458:	90                   	nop
c0018459:	c3                   	ret    

c001845a <VAS::setToWriteCombining(unsigned long, int)>:
c001845a:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001845f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018465:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c001846c:	75 01                	jne    c001846f <VAS::setToWriteCombining(unsigned long, int)+0x15>
c001846e:	c3                   	ret    
c001846f:	68 80 00 00 00       	push   0x80
c0018474:	6a ff                	push   0xffffffff
c0018476:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001847a:	50                   	push   eax
c001847b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001847f:	52                   	push   edx
c0018480:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018484:	51                   	push   ecx
c0018485:	e8 24 ff ff ff       	call   c00183ae <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001848a:	83 c4 14             	add    esp,0x14
c001848d:	c3                   	ret    

c001848e <VAS::mapOtherVASIn(bool, VAS*)>:
c001848e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018492:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018495:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018499:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c001849c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00184a1:	83 f8 01             	cmp    eax,0x1
c00184a4:	19 c0                	sbb    eax,eax
c00184a6:	83 ca 03             	or     edx,0x3
c00184a9:	83 e0 fc             	and    eax,0xfffffffc
c00184ac:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00184b3:	0f 20 d8             	mov    eax,cr3
c00184b6:	0f 22 d8             	mov    cr3,eax
c00184b9:	c3                   	ret    

c00184ba <VAS::~VAS()>:
c00184ba:	83 ec 2c             	sub    esp,0x2c
c00184bd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00184c5:	fa                   	cli    
c00184c6:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00184cb:	83 c0 01             	add    eax,0x1
c00184ce:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00184d3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00184d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00184da:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00184dd:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00184e3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00184e7:	6a 01                	push   0x1
c00184e9:	50                   	push   eax
c00184ea:	e8 9f ff ff ff       	call   c001848e <VAS::mapOtherVASIn(bool, VAS*)>
c00184ef:	83 c4 0c             	add    esp,0xc
c00184f2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00184fa:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0018502:	0f 8f d8 00 00 00    	jg     c00185e0 <VAS::~VAS()+0x126>
c0018508:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001850c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001850f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018513:	c1 e2 02             	shl    edx,0x2
c0018516:	01 d0                	add    eax,edx
c0018518:	8b 00                	mov    eax,DWORD PTR [eax]
c001851a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001851e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018522:	83 e0 01             	and    eax,0x1
c0018525:	0f 84 ab 00 00 00    	je     c00185d6 <VAS::~VAS()+0x11c>
c001852b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0018533:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001853b:	7f 74                	jg     c00185b1 <VAS::~VAS()+0xf7>
c001853d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018541:	c1 e0 0a             	shl    eax,0xa
c0018544:	89 c2                	mov    edx,eax
c0018546:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001854a:	01 d0                	add    eax,edx
c001854c:	c1 e0 0c             	shl    eax,0xc
c001854f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018553:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018558:	8b 00                	mov    eax,DWORD PTR [eax]
c001855a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001855d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0018563:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018567:	6a 01                	push   0x1
c0018569:	50                   	push   eax
c001856a:	e8 77 fc ff ff       	call   c00181e6 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001856f:	83 c4 0c             	add    esp,0xc
c0018572:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018576:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001857a:	8b 00                	mov    eax,DWORD PTR [eax]
c001857c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018580:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018584:	25 01 04 00 00       	and    eax,0x401
c0018589:	3d 01 04 00 00       	cmp    eax,0x401
c001858e:	75 1a                	jne    c00185aa <VAS::~VAS()+0xf0>
c0018590:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018594:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018599:	83 ec 0c             	sub    esp,0xc
c001859c:	50                   	push   eax
c001859d:	e8 bc e0 ff ff       	call   c001665e <Phys::freePage(unsigned long)>
c00185a2:	83 c4 10             	add    esp,0x10
c00185a5:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00185aa:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c00185af:	eb 82                	jmp    c0018533 <VAS::~VAS()+0x79>
c00185b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185b5:	25 00 04 00 00       	and    eax,0x400
c00185ba:	74 1a                	je     c00185d6 <VAS::~VAS()+0x11c>
c00185bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185c0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00185c5:	83 ec 0c             	sub    esp,0xc
c00185c8:	50                   	push   eax
c00185c9:	e8 90 e0 ff ff       	call   c001665e <Phys::freePage(unsigned long)>
c00185ce:	83 c4 10             	add    esp,0x10
c00185d1:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00185d6:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00185db:	e9 1a ff ff ff       	jmp    c00184fa <VAS::~VAS()+0x40>
c00185e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185e4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00185e7:	83 ec 0c             	sub    esp,0xc
c00185ea:	50                   	push   eax
c00185eb:	e8 43 fc ff ff       	call   c0018233 <Virt::freeKernelVirtualPages(unsigned long)>
c00185f0:	83 c4 10             	add    esp,0x10
c00185f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00185fa:	83 ec 0c             	sub    esp,0xc
c00185fd:	50                   	push   eax
c00185fe:	e8 5b e0 ff ff       	call   c001665e <Phys::freePage(unsigned long)>
c0018603:	83 c4 10             	add    esp,0x10
c0018606:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001860b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0018610:	83 e8 01             	sub    eax,0x1
c0018613:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0018618:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001861d:	85 c0                	test   eax,eax
c001861f:	75 01                	jne    c0018622 <VAS::~VAS()+0x168>
c0018621:	fb                   	sti    
c0018622:	90                   	nop
c0018623:	83 c4 2c             	add    esp,0x2c
c0018626:	c3                   	ret    
c0018627:	90                   	nop

c0018628 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0018628:	55                   	push   ebp
c0018629:	57                   	push   edi
c001862a:	56                   	push   esi
c001862b:	53                   	push   ebx
c001862c:	83 ec 1c             	sub    esp,0x1c
c001862f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018633:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018637:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001863d:	77 08                	ja     c0018647 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001863f:	0f 20 d8             	mov    eax,cr3
c0018642:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0018645:	75 49                	jne    c0018690 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0018647:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001864b:	09 d8                	or     eax,ebx
c001864d:	a9 ff 0f 00 00       	test   eax,0xfff
c0018652:	75 59                	jne    c00186ad <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0018654:	89 de                	mov    esi,ebx
c0018656:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018659:	c1 ee 16             	shr    esi,0x16
c001865c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0018663:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0018667:	74 56                	je     c00186bf <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0018669:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001866d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018671:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0018677:	c1 eb 0a             	shr    ebx,0xa
c001867a:	c1 e6 0c             	shl    esi,0xc
c001867d:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0018683:	09 d0                	or     eax,edx
c0018685:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0018688:	83 c4 1c             	add    esp,0x1c
c001868b:	5b                   	pop    ebx
c001868c:	5e                   	pop    esi
c001868d:	5f                   	pop    edi
c001868e:	5d                   	pop    ebp
c001868f:	c3                   	ret    
c0018690:	83 ec 0c             	sub    esp,0xc
c0018693:	68 48 14 03 c0       	push   0xc0031448
c0018698:	e8 b0 0b 00 00       	call   c001924d <Dbg::kprintf(char const*, ...)>
c001869d:	83 c4 10             	add    esp,0x10
c00186a0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00186a4:	09 d8                	or     eax,ebx
c00186a6:	a9 ff 0f 00 00       	test   eax,0xfff
c00186ab:	74 a7                	je     c0018654 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00186ad:	83 ec 0c             	sub    esp,0xc
c00186b0:	68 b0 14 03 c0       	push   0xc00314b0
c00186b5:	e8 ac 7b 00 00       	call   c0020266 <KePanic(char const*)>
c00186ba:	83 c4 10             	add    esp,0x10
c00186bd:	eb 95                	jmp    c0018654 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00186bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00186c3:	e8 ff df ff ff       	call   c00166c7 <Phys::allocatePage()>
c00186c8:	83 ec 0c             	sub    esp,0xc
c00186cb:	89 c5                	mov    ebp,eax
c00186cd:	8b 0d b0 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aab0
c00186d3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00186d7:	6a 01                	push   0x1
c00186d9:	e8 37 f8 ff ff       	call   c0017f15 <Virt::allocateKernelVirtualPages(int)>
c00186de:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00186e5:	6a 01                	push   0x1
c00186e7:	50                   	push   eax
c00186e8:	55                   	push   ebp
c00186e9:	81 cd 07 04 00 00    	or     ebp,0x407
c00186ef:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00186f3:	51                   	push   ecx
c00186f4:	e8 29 01 00 00       	call   c0018822 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00186f9:	83 c4 1c             	add    esp,0x1c
c00186fc:	68 00 10 00 00       	push   0x1000
c0018701:	6a 00                	push   0x0
c0018703:	50                   	push   eax
c0018704:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018708:	e8 e3 7d fe ff       	call   c00004f0 <memset>
c001870d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0018711:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0018714:	e8 1a fb ff ff       	call   c0018233 <Virt::freeKernelVirtualPages(unsigned long)>
c0018719:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001871d:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018720:	83 c4 10             	add    esp,0x10
c0018723:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0018726:	e9 3e ff ff ff       	jmp    c0018669 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c001872b:	90                   	nop

c001872c <VAS::allocatePages(int, int)>:
c001872c:	55                   	push   ebp
c001872d:	57                   	push   edi
c001872e:	56                   	push   esi
c001872f:	53                   	push   ebx
c0018730:	83 ec 1c             	sub    esp,0x1c
c0018733:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018737:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001873b:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c001873f:	75 71                	jne    c00187b2 <VAS::allocatePages(int, int)+0x86>
c0018741:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0018744:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018748:	85 c0                	test   eax,eax
c001874a:	74 4d                	je     c0018799 <VAS::allocatePages(int, int)+0x6d>
c001874c:	89 dd                	mov    ebp,ebx
c001874e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018752:	c1 e5 0c             	shl    ebp,0xc
c0018755:	01 c5                	add    ebp,eax
c0018757:	85 db                	test   ebx,ebx
c0018759:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c001875c:	7e 29                	jle    c0018787 <VAS::allocatePages(int, int)+0x5b>
c001875e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0018762:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0018766:	81 cf 00 04 00 00    	or     edi,0x400
c001876c:	e8 56 df ff ff       	call   c00166c7 <Phys::allocatePage()>
c0018771:	57                   	push   edi
c0018772:	53                   	push   ebx
c0018773:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018779:	50                   	push   eax
c001877a:	56                   	push   esi
c001877b:	e8 a8 fe ff ff       	call   c0018628 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018780:	83 c4 10             	add    esp,0x10
c0018783:	39 dd                	cmp    ebp,ebx
c0018785:	75 e5                	jne    c001876c <VAS::allocatePages(int, int)+0x40>
c0018787:	0f 20 d8             	mov    eax,cr3
c001878a:	0f 22 d8             	mov    cr3,eax
c001878d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018791:	83 c4 1c             	add    esp,0x1c
c0018794:	5b                   	pop    ebx
c0018795:	5e                   	pop    esi
c0018796:	5f                   	pop    edi
c0018797:	5d                   	pop    ebp
c0018798:	c3                   	ret    
c0018799:	83 ec 0c             	sub    esp,0xc
c001879c:	68 d4 14 03 c0       	push   0xc00314d4
c00187a1:	e8 c0 7a 00 00       	call   c0020266 <KePanic(char const*)>
c00187a6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00187a9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00187ad:	83 c4 10             	add    esp,0x10
c00187b0:	eb 9a                	jmp    c001874c <VAS::allocatePages(int, int)+0x20>
c00187b2:	83 ec 0c             	sub    esp,0xc
c00187b5:	53                   	push   ebx
c00187b6:	e8 5a f7 ff ff       	call   c0017f15 <Virt::allocateKernelVirtualPages(int)>
c00187bb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00187bf:	83 c4 10             	add    esp,0x10
c00187c2:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00187c7:	77 37                	ja     c0018800 <VAS::allocatePages(int, int)+0xd4>
c00187c9:	85 db                	test   ebx,ebx
c00187cb:	7e ba                	jle    c0018787 <VAS::allocatePages(int, int)+0x5b>
c00187cd:	c1 e3 0c             	shl    ebx,0xc
c00187d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00187d4:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00187d8:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c00187db:	81 cf 00 04 00 00    	or     edi,0x400
c00187e1:	89 c3                	mov    ebx,eax
c00187e3:	e8 df de ff ff       	call   c00166c7 <Phys::allocatePage()>
c00187e8:	57                   	push   edi
c00187e9:	53                   	push   ebx
c00187ea:	81 c3 00 10 00 00    	add    ebx,0x1000
c00187f0:	50                   	push   eax
c00187f1:	56                   	push   esi
c00187f2:	e8 31 fe ff ff       	call   c0018628 <VAS::mapPage(unsigned long, unsigned long, int)>
c00187f7:	83 c4 10             	add    esp,0x10
c00187fa:	39 dd                	cmp    ebp,ebx
c00187fc:	75 e5                	jne    c00187e3 <VAS::allocatePages(int, int)+0xb7>
c00187fe:	eb 87                	jmp    c0018787 <VAS::allocatePages(int, int)+0x5b>
c0018800:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018805:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001880b:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0018812:	74 b5                	je     c00187c9 <VAS::allocatePages(int, int)+0x9d>
c0018814:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018818:	80 ce 01             	or     dh,0x1
c001881b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001881f:	eb a8                	jmp    c00187c9 <VAS::allocatePages(int, int)+0x9d>
c0018821:	90                   	nop

c0018822 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0018822:	55                   	push   ebp
c0018823:	57                   	push   edi
c0018824:	56                   	push   esi
c0018825:	53                   	push   ebx
c0018826:	83 ec 0c             	sub    esp,0xc
c0018829:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001882d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018831:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0018835:	85 db                	test   ebx,ebx
c0018837:	7e 2f                	jle    c0018868 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0018839:	c1 e3 0c             	shl    ebx,0xc
c001883c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018840:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0018844:	01 d3                	add    ebx,edx
c0018846:	55                   	push   ebp
c0018847:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001884b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001884f:	29 c2                	sub    edx,eax
c0018851:	01 f2                	add    edx,esi
c0018853:	52                   	push   edx
c0018854:	56                   	push   esi
c0018855:	81 c6 00 10 00 00    	add    esi,0x1000
c001885b:	57                   	push   edi
c001885c:	e8 c7 fd ff ff       	call   c0018628 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018861:	83 c4 10             	add    esp,0x10
c0018864:	39 de                	cmp    esi,ebx
c0018866:	75 de                	jne    c0018846 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0018868:	0f 20 d8             	mov    eax,cr3
c001886b:	0f 22 d8             	mov    cr3,eax
c001886e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018872:	83 c4 0c             	add    esp,0xc
c0018875:	5b                   	pop    ebx
c0018876:	5e                   	pop    esi
c0018877:	5f                   	pop    edi
c0018878:	5d                   	pop    ebp
c0018879:	c3                   	ret    

c001887a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001887a:	55                   	push   ebp
c001887b:	57                   	push   edi
c001887c:	56                   	push   esi
c001887d:	53                   	push   ebx
c001887e:	83 ec 1c             	sub    esp,0x1c
c0018881:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018885:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0018889:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001888d:	09 f8                	or     eax,edi
c001888f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0018893:	a9 ff 0f 00 00       	test   eax,0xfff
c0018898:	75 4f                	jne    c00188e9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c001889a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001889e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00188a1:	c1 eb 16             	shr    ebx,0x16
c00188a4:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c00188ab:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c00188af:	74 52                	je     c0018903 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c00188b1:	0f b6 f2             	movzx  esi,dl
c00188b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00188b8:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00188bc:	c1 e8 0a             	shr    eax,0xa
c00188bf:	83 fe 01             	cmp    esi,0x1
c00188c2:	19 d2                	sbb    edx,edx
c00188c4:	c1 e3 0c             	shl    ebx,0xc
c00188c7:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00188cd:	25 fc 0f 00 00       	and    eax,0xffc
c00188d2:	01 d8                	add    eax,ebx
c00188d4:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00188d8:	09 d9                	or     ecx,ebx
c00188da:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00188e1:	83 c4 1c             	add    esp,0x1c
c00188e4:	5b                   	pop    ebx
c00188e5:	5e                   	pop    esi
c00188e6:	5f                   	pop    edi
c00188e7:	5d                   	pop    ebp
c00188e8:	c3                   	ret    
c00188e9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00188ed:	83 ec 0c             	sub    esp,0xc
c00188f0:	68 00 15 03 c0       	push   0xc0031500
c00188f5:	e8 6c 79 00 00       	call   c0020266 <KePanic(char const*)>
c00188fa:	83 c4 10             	add    esp,0x10
c00188fd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018901:	eb 97                	jmp    c001889a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0018903:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018907:	e8 bb dd ff ff       	call   c00166c7 <Phys::allocatePage()>
c001890c:	83 ec 0c             	sub    esp,0xc
c001890f:	89 c5                	mov    ebp,eax
c0018911:	8b 0d b0 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aab0
c0018917:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001891b:	6a 01                	push   0x1
c001891d:	e8 f3 f5 ff ff       	call   c0017f15 <Virt::allocateKernelVirtualPages(int)>
c0018922:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018929:	6a 01                	push   0x1
c001892b:	50                   	push   eax
c001892c:	55                   	push   ebp
c001892d:	81 cd 07 04 00 00    	or     ebp,0x407
c0018933:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0018937:	51                   	push   ecx
c0018938:	e8 e5 fe ff ff       	call   c0018822 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001893d:	83 c4 1c             	add    esp,0x1c
c0018940:	68 00 10 00 00       	push   0x1000
c0018945:	6a 00                	push   0x0
c0018947:	50                   	push   eax
c0018948:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001894c:	e8 9f 7b fe ff       	call   c00004f0 <memset>
c0018951:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0018955:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0018958:	e8 d6 f8 ff ff       	call   c0018233 <Virt::freeKernelVirtualPages(unsigned long)>
c001895d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0018960:	83 c4 10             	add    esp,0x10
c0018963:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c0018966:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001896a:	e9 42 ff ff ff       	jmp    c00188b1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c001896f:	90                   	nop

c0018970 <VAS::VAS(bool)>:
c0018970:	53                   	push   ebx
c0018971:	83 ec 28             	sub    esp,0x28
c0018974:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018978:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001897c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018980:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018987:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001898b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018992:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018996:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001899a:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001899d:	e8 25 dd ff ff       	call   c00166c7 <Phys::allocatePage()>
c00189a2:	89 c2                	mov    edx,eax
c00189a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189a8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00189ab:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c00189b1:	83 ec 0c             	sub    esp,0xc
c00189b4:	6a 01                	push   0x1
c00189b6:	e8 5a f5 ff ff       	call   c0017f15 <Virt::allocateKernelVirtualPages(int)>
c00189bb:	83 c4 10             	add    esp,0x10
c00189be:	89 c2                	mov    edx,eax
c00189c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189c4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00189c7:	83 ec 0c             	sub    esp,0xc
c00189ca:	6a 03                	push   0x3
c00189cc:	6a 01                	push   0x1
c00189ce:	52                   	push   edx
c00189cf:	50                   	push   eax
c00189d0:	53                   	push   ebx
c00189d1:	e8 4c fe ff ff       	call   c0018822 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00189d6:	83 c4 20             	add    esp,0x20
c00189d9:	89 c2                	mov    edx,eax
c00189db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189df:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00189e2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00189ea:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00189f2:	7f 1d                	jg     c0018a11 <VAS::VAS(bool)+0xa1>
c00189f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189f8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00189fb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00189ff:	c1 e2 02             	shl    edx,0x2
c0018a02:	01 d0                	add    eax,edx
c0018a04:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0018a0a:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018a0f:	eb d9                	jmp    c00189ea <VAS::VAS(bool)+0x7a>
c0018a11:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0018a19:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0018a21:	7f 7e                	jg     c0018aa1 <VAS::VAS(bool)+0x131>
c0018a23:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a27:	2d 00 02 00 00       	sub    eax,0x200
c0018a2c:	c1 e0 0c             	shl    eax,0xc
c0018a2f:	83 c8 05             	or     eax,0x5
c0018a32:	89 c2                	mov    edx,eax
c0018a34:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018a39:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018a3f:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018a45:	83 e0 10             	and    eax,0x10
c0018a48:	0f b6 c0             	movzx  eax,al
c0018a4b:	85 c0                	test   eax,eax
c0018a4d:	74 07                	je     c0018a56 <VAS::VAS(bool)+0xe6>
c0018a4f:	b8 00 01 00 00       	mov    eax,0x100
c0018a54:	eb 05                	jmp    c0018a5b <VAS::VAS(bool)+0xeb>
c0018a56:	b8 00 00 00 00       	mov    eax,0x0
c0018a5b:	09 d0                	or     eax,edx
c0018a5d:	89 c1                	mov    ecx,eax
c0018a5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a63:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018a66:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a6a:	c1 e2 02             	shl    edx,0x2
c0018a6d:	01 d0                	add    eax,edx
c0018a6f:	89 ca                	mov    edx,ecx
c0018a71:	89 10                	mov    DWORD PTR [eax],edx
c0018a73:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a77:	2d 40 03 00 00       	sub    eax,0x340
c0018a7c:	83 f8 7f             	cmp    eax,0x7f
c0018a7f:	77 16                	ja     c0018a97 <VAS::VAS(bool)+0x127>
c0018a81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a85:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018a88:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a8c:	c1 e2 02             	shl    edx,0x2
c0018a8f:	01 d0                	add    eax,edx
c0018a91:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0018a97:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0018a9c:	e9 78 ff ff ff       	jmp    c0018a19 <VAS::VAS(bool)+0xa9>
c0018aa1:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018aa6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018aac:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018ab2:	83 e0 10             	and    eax,0x10
c0018ab5:	0f b6 c0             	movzx  eax,al
c0018ab8:	85 c0                	test   eax,eax
c0018aba:	74 07                	je     c0018ac3 <VAS::VAS(bool)+0x153>
c0018abc:	b8 03 41 00 00       	mov    eax,0x4103
c0018ac1:	eb 05                	jmp    c0018ac8 <VAS::VAS(bool)+0x158>
c0018ac3:	b8 03 40 00 00       	mov    eax,0x4003
c0018ac8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018acc:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0018acf:	81 c2 20 0c 00 00    	add    edx,0xc20
c0018ad5:	89 02                	mov    DWORD PTR [edx],eax
c0018ad7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018adb:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018ade:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018ae3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018ae9:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018aef:	83 e0 10             	and    eax,0x10
c0018af2:	0f b6 c0             	movzx  eax,al
c0018af5:	85 c0                	test   eax,eax
c0018af7:	74 07                	je     c0018b00 <VAS::VAS(bool)+0x190>
c0018af9:	b8 00 01 00 00       	mov    eax,0x100
c0018afe:	eb 05                	jmp    c0018b05 <VAS::VAS(bool)+0x195>
c0018b00:	b8 00 00 00 00       	mov    eax,0x0
c0018b05:	09 c2                	or     edx,eax
c0018b07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018b0e:	05 fc 0f 00 00       	add    eax,0xffc
c0018b13:	83 ca 03             	or     edx,0x3
c0018b16:	89 10                	mov    DWORD PTR [eax],edx
c0018b18:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018b1d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018b23:	83 ec 0c             	sub    esp,0xc
c0018b26:	50                   	push   eax
c0018b27:	e8 00 2a 00 00       	call   c001b52c <Device::getName()>
c0018b2c:	83 c4 10             	add    esp,0x10
c0018b2f:	83 ec 08             	sub    esp,0x8
c0018b32:	68 d0 16 03 c0       	push   0xc00316d0
c0018b37:	50                   	push   eax
c0018b38:	e8 13 7c fe ff       	call   c0000750 <strcmp>
c0018b3d:	83 c4 10             	add    esp,0x10
c0018b40:	85 c0                	test   eax,eax
c0018b42:	0f 94 c0             	sete   al
c0018b45:	0f b6 c0             	movzx  eax,al
c0018b48:	85 c0                	test   eax,eax
c0018b4a:	74 68                	je     c0018bb4 <VAS::VAS(bool)+0x244>
c0018b4c:	fa                   	cli    
c0018b4d:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018b52:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018b58:	05 7c 09 00 00       	add    eax,0x97c
c0018b5d:	83 ec 0c             	sub    esp,0xc
c0018b60:	50                   	push   eax
c0018b61:	e8 50 d3 ff ff       	call   c0015eb6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018b66:	83 c4 10             	add    esp,0x10
c0018b69:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018b6e:	89 c3                	mov    ebx,eax
c0018b70:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018b75:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018b7b:	05 7c 09 00 00       	add    eax,0x97c
c0018b80:	83 ec 0c             	sub    esp,0xc
c0018b83:	50                   	push   eax
c0018b84:	e8 2d d3 ff ff       	call   c0015eb6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018b89:	83 c4 10             	add    esp,0x10
c0018b8c:	83 ec 08             	sub    esp,0x8
c0018b8f:	50                   	push   eax
c0018b90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018b94:	e8 7b f6 ff ff       	call   c0018214 <VAS::getPageTableEntry(unsigned long)>
c0018b99:	83 c4 10             	add    esp,0x10
c0018b9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b9e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018ba3:	6a 11                	push   0x11
c0018ba5:	53                   	push   ebx
c0018ba6:	50                   	push   eax
c0018ba7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018bab:	e8 78 fa ff ff       	call   c0018628 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018bb0:	83 c4 10             	add    esp,0x10
c0018bb3:	fb                   	sti    
c0018bb4:	90                   	nop
c0018bb5:	83 c4 28             	add    esp,0x28
c0018bb8:	5b                   	pop    ebx
c0018bb9:	c3                   	ret    

c0018bba <VAS::evict(unsigned long)>:
c0018bba:	55                   	push   ebp
c0018bbb:	57                   	push   edi
c0018bbc:	56                   	push   esi
c0018bbd:	53                   	push   ebx
c0018bbe:	83 ec 1c             	sub    esp,0x1c
c0018bc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bc5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018bc9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018bcd:	e8 a1 f4 ff ff       	call   c0018073 <Virt::allocateSwapfilePage()>
c0018bd2:	89 c7                	mov    edi,eax
c0018bd4:	a1 0c 3c 03 c0       	mov    eax,ds:0xc0033c0c
c0018bd9:	85 c0                	test   eax,eax
c0018bdb:	7e 40                	jle    c0018c1d <VAS::evict(unsigned long)+0x63>
c0018bdd:	89 ee                	mov    esi,ebp
c0018bdf:	31 db                	xor    ebx,ebx
c0018be1:	83 ec 0c             	sub    esp,0xc
c0018be4:	57                   	push   edi
c0018be5:	e8 73 f4 ff ff       	call   c001805d <Virt::swapIDToSector(unsigned long)>
c0018bea:	89 34 24             	mov    DWORD PTR [esp],esi
c0018bed:	01 d8                	add    eax,ebx
c0018bef:	6a 01                	push   0x1
c0018bf1:	31 d2                	xor    edx,edx
c0018bf3:	83 c3 01             	add    ebx,0x1
c0018bf6:	52                   	push   edx
c0018bf7:	81 c6 00 02 00 00    	add    esi,0x200
c0018bfd:	50                   	push   eax
c0018bfe:	0f be 05 18 3c 03 c0 	movsx  eax,BYTE PTR ds:0xc0033c18
c0018c05:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0018c0c:	50                   	push   eax
c0018c0d:	e8 1a 3b 00 00       	call   c001c72c <LogicalDisk::write(unsigned long long, int, void*)>
c0018c12:	83 c4 20             	add    esp,0x20
c0018c15:	39 1d 0c 3c 03 c0    	cmp    DWORD PTR ds:0xc0033c0c,ebx
c0018c1b:	7f c4                	jg     c0018be1 <VAS::evict(unsigned long)+0x27>
c0018c1d:	83 ec 08             	sub    esp,0x8
c0018c20:	c1 e7 0c             	shl    edi,0xc
c0018c23:	55                   	push   ebp
c0018c24:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018c28:	50                   	push   eax
c0018c29:	e8 e6 f5 ff ff       	call   c0018214 <VAS::getPageTableEntry(unsigned long)>
c0018c2e:	8b 10                	mov    edx,DWORD PTR [eax]
c0018c30:	89 d3                	mov    ebx,edx
c0018c32:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0018c38:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018c3e:	09 d7                	or     edi,edx
c0018c40:	89 38                	mov    DWORD PTR [eax],edi
c0018c42:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018c45:	8b 15 a8 aa 03 c0    	mov    edx,DWORD PTR ds:0xc003aaa8
c0018c4b:	83 c2 01             	add    edx,0x1
c0018c4e:	89 15 a8 aa 03 c0    	mov    DWORD PTR ds:0xc003aaa8,edx
c0018c54:	e8 05 da ff ff       	call   c001665e <Phys::freePage(unsigned long)>
c0018c59:	0f 20 d8             	mov    eax,cr3
c0018c5c:	0f 22 d8             	mov    cr3,eax
c0018c5f:	8b 0d a8 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aaa8
c0018c65:	51                   	push   ecx
c0018c66:	55                   	push   ebp
c0018c67:	53                   	push   ebx
c0018c68:	68 24 15 03 c0       	push   0xc0031524
c0018c6d:	e8 db 05 00 00       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0018c72:	a1 a4 aa 03 c0       	mov    eax,ds:0xc003aaa4
c0018c77:	c7 44 24 50 de 16 03 c0 	mov    DWORD PTR [esp+0x50],0xc00316de
c0018c7f:	8d 50 01             	lea    edx,[eax+0x1]
c0018c82:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0018c86:	89 15 a4 aa 03 c0    	mov    DWORD PTR ds:0xc003aaa4,edx
c0018c8c:	83 c4 3c             	add    esp,0x3c
c0018c8f:	5b                   	pop    ebx
c0018c90:	5e                   	pop    esi
c0018c91:	5f                   	pop    edi
c0018c92:	5d                   	pop    ebp
c0018c93:	e9 b5 05 00 00       	jmp    c001924d <Dbg::kprintf(char const*, ...)>

c0018c98 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0018c98:	55                   	push   ebp
c0018c99:	57                   	push   edi
c0018c9a:	56                   	push   esi
c0018c9b:	53                   	push   ebx
c0018c9c:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0018ca2:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c0018ca9:	89 f3                	mov    ebx,esi
c0018cab:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018cb1:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c0018cb7:	77 22                	ja     c0018cdb <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c0018cb9:	83 ec 08             	sub    esp,0x8
c0018cbc:	56                   	push   esi
c0018cbd:	68 01 17 03 c0       	push   0xc0031701
c0018cc2:	e8 86 05 00 00       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0018cc7:	83 c4 10             	add    esp,0x10
c0018cca:	85 db                	test   ebx,ebx
c0018ccc:	75 2a                	jne    c0018cf8 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c0018cce:	31 c0                	xor    eax,eax
c0018cd0:	81 c4 1c 10 00 00    	add    esp,0x101c
c0018cd6:	5b                   	pop    ebx
c0018cd7:	5e                   	pop    esi
c0018cd8:	5f                   	pop    edi
c0018cd9:	5d                   	pop    ebp
c0018cda:	c3                   	ret    
c0018cdb:	83 ec 0c             	sub    esp,0xc
c0018cde:	68 ef 16 03 c0       	push   0xc00316ef
c0018ce3:	e8 7e 75 00 00       	call   c0020266 <KePanic(char const*)>
c0018ce8:	5f                   	pop    edi
c0018ce9:	5d                   	pop    ebp
c0018cea:	56                   	push   esi
c0018ceb:	68 01 17 03 c0       	push   0xc0031701
c0018cf0:	e8 58 05 00 00       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0018cf5:	83 c4 10             	add    esp,0x10
c0018cf8:	83 ec 08             	sub    esp,0x8
c0018cfb:	53                   	push   ebx
c0018cfc:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c0018d03:	51                   	push   ecx
c0018d04:	e8 0b f5 ff ff       	call   c0018214 <VAS::getPageTableEntry(unsigned long)>
c0018d09:	83 c4 10             	add    esp,0x10
c0018d0c:	89 c2                	mov    edx,eax
c0018d0e:	85 c0                	test   eax,eax
c0018d10:	74 bc                	je     c0018cce <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c0018d12:	8b 28                	mov    ebp,DWORD PTR [eax]
c0018d14:	f7 c5 00 02 00 00    	test   ebp,0x200
c0018d1a:	0f 85 c0 00 00 00    	jne    c0018de0 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c0018d20:	89 e8                	mov    eax,ebp
c0018d22:	25 01 04 00 00       	and    eax,0x401
c0018d27:	3d 00 04 00 00       	cmp    eax,0x400
c0018d2c:	75 a0                	jne    c0018cce <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c0018d2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018d32:	c1 ed 0c             	shr    ebp,0xc
c0018d35:	e8 8d d9 ff ff       	call   c00166c7 <Phys::allocatePage()>
c0018d3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d3e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018d40:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0018d46:	09 c1                	or     ecx,eax
c0018d48:	81 c9 01 08 00 00    	or     ecx,0x801
c0018d4e:	89 0a                	mov    DWORD PTR [edx],ecx
c0018d50:	8b 15 0c 3c 03 c0    	mov    edx,DWORD PTR ds:0xc0033c0c
c0018d56:	85 d2                	test   edx,edx
c0018d58:	7e 40                	jle    c0018d9a <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c0018d5a:	89 df                	mov    edi,ebx
c0018d5c:	31 f6                	xor    esi,esi
c0018d5e:	83 ec 0c             	sub    esp,0xc
c0018d61:	55                   	push   ebp
c0018d62:	e8 f6 f2 ff ff       	call   c001805d <Virt::swapIDToSector(unsigned long)>
c0018d67:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018d6a:	01 f0                	add    eax,esi
c0018d6c:	6a 01                	push   0x1
c0018d6e:	31 d2                	xor    edx,edx
c0018d70:	83 c6 01             	add    esi,0x1
c0018d73:	52                   	push   edx
c0018d74:	81 c7 00 02 00 00    	add    edi,0x200
c0018d7a:	50                   	push   eax
c0018d7b:	0f be 05 18 3c 03 c0 	movsx  eax,BYTE PTR ds:0xc0033c18
c0018d82:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0018d89:	50                   	push   eax
c0018d8a:	e8 31 39 00 00       	call   c001c6c0 <LogicalDisk::read(unsigned long long, int, void*)>
c0018d8f:	83 c4 20             	add    esp,0x20
c0018d92:	39 35 0c 3c 03 c0    	cmp    DWORD PTR ds:0xc0033c0c,esi
c0018d98:	7f c4                	jg     c0018d5e <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c0018d9a:	83 ec 04             	sub    esp,0x4
c0018d9d:	a1 a8 aa 03 c0       	mov    eax,ds:0xc003aaa8
c0018da2:	83 e8 01             	sub    eax,0x1
c0018da5:	50                   	push   eax
c0018da6:	a3 a8 aa 03 c0       	mov    ds:0xc003aaa8,eax
c0018dab:	53                   	push   ebx
c0018dac:	68 14 17 03 c0       	push   0xc0031714
c0018db1:	e8 97 04 00 00       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0018db6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018db9:	e8 7c f2 ff ff       	call   c001803a <Virt::freeSwapfilePage(unsigned long)>
c0018dbe:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0018dc3:	83 c4 10             	add    esp,0x10
c0018dc6:	83 e8 01             	sub    eax,0x1
c0018dc9:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0018dce:	85 c0                	test   eax,eax
c0018dd0:	75 01                	jne    c0018dd3 <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c0018dd2:	fb                   	sti    
c0018dd3:	0f 20 d8             	mov    eax,cr3
c0018dd6:	0f 22 d8             	mov    cr3,eax
c0018dd9:	b0 01                	mov    al,0x1
c0018ddb:	e9 f0 fe ff ff       	jmp    c0018cd0 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c0018de0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018de4:	bd 00 10 00 00       	mov    ebp,0x1000
c0018de9:	83 ec 0c             	sub    esp,0xc
c0018dec:	89 de                	mov    esi,ebx
c0018dee:	68 54 15 03 c0       	push   0xc0031554
c0018df3:	e8 55 04 00 00       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0018df8:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0018dfc:	e8 c6 d8 ff ff       	call   c00166c7 <Phys::allocatePage()>
c0018e01:	89 e9                	mov    ecx,ebp
c0018e03:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018e05:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018e09:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018e0b:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0018e11:	09 c8                	or     eax,ecx
c0018e13:	83 c8 02             	or     eax,0x2
c0018e16:	89 02                	mov    DWORD PTR [edx],eax
c0018e18:	0f 20 d8             	mov    eax,cr3
c0018e1b:	0f 22 d8             	mov    cr3,eax
c0018e1e:	8d 74 24 20          	lea    esi,[esp+0x20]
c0018e22:	89 df                	mov    edi,ebx
c0018e24:	89 e9                	mov    ecx,ebp
c0018e26:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018e28:	b0 01                	mov    al,0x1
c0018e2a:	83 c4 10             	add    esp,0x10
c0018e2d:	e9 9e fe ff ff       	jmp    c0018cd0 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c0018e32 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0018e32:	55                   	push   ebp
c0018e33:	57                   	push   edi
c0018e34:	56                   	push   esi
c0018e35:	53                   	push   ebx
c0018e36:	83 ec 28             	sub    esp,0x28
c0018e39:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0018e3d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018e41:	50                   	push   eax
c0018e42:	e8 ce f0 ff ff       	call   c0017f15 <Virt::allocateKernelVirtualPages(int)>
c0018e47:	83 c4 0c             	add    esp,0xc
c0018e4a:	89 c5                	mov    ebp,eax
c0018e4c:	6a 07                	push   0x7
c0018e4e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018e52:	52                   	push   edx
c0018e53:	56                   	push   esi
c0018e54:	e8 d3 f8 ff ff       	call   c001872c <VAS::allocatePages(int, int)>
c0018e59:	83 c4 10             	add    esp,0x10
c0018e5c:	89 c7                	mov    edi,eax
c0018e5e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018e62:	85 c9                	test   ecx,ecx
c0018e64:	74 2f                	je     c0018e95 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0018e66:	31 db                	xor    ebx,ebx
c0018e68:	e8 5a d8 ff ff       	call   c00166c7 <Phys::allocatePage()>
c0018e6d:	83 c3 01             	add    ebx,0x1
c0018e70:	6a 03                	push   0x3
c0018e72:	55                   	push   ebp
c0018e73:	50                   	push   eax
c0018e74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018e78:	56                   	push   esi
c0018e79:	e8 aa f7 ff ff       	call   c0018628 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018e7e:	6a 07                	push   0x7
c0018e80:	57                   	push   edi
c0018e81:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018e85:	50                   	push   eax
c0018e86:	56                   	push   esi
c0018e87:	e8 9c f7 ff ff       	call   c0018628 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018e8c:	83 c4 20             	add    esp,0x20
c0018e8f:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c0018e93:	75 d3                	jne    c0018e68 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0018e95:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018e99:	89 28                	mov    DWORD PTR [eax],ebp
c0018e9b:	83 c4 1c             	add    esp,0x1c
c0018e9e:	89 f8                	mov    eax,edi
c0018ea0:	5b                   	pop    ebx
c0018ea1:	5e                   	pop    esi
c0018ea2:	5f                   	pop    edi
c0018ea3:	5d                   	pop    ebp
c0018ea4:	c3                   	ret    
c0018ea5:	90                   	nop

c0018ea6 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0018ea6:	53                   	push   ebx
c0018ea7:	83 ec 14             	sub    esp,0x14
c0018eaa:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018eae:	68 74 15 03 c0       	push   0xc0031574
c0018eb3:	e8 95 03 00 00       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0018eb8:	c7 04 24 d4 15 03 c0 	mov    DWORD PTR [esp],0xc00315d4
c0018ebf:	e8 89 03 00 00       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0018ec4:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0018ec8:	83 c4 18             	add    esp,0x18
c0018ecb:	5b                   	pop    ebx
c0018ecc:	e9 62 f3 ff ff       	jmp    c0018233 <Virt::freeKernelVirtualPages(unsigned long)>
c0018ed1:	90                   	nop

c0018ed2 <VAS::scanForEviction()>:
c0018ed2:	57                   	push   edi
c0018ed3:	56                   	push   esi
c0018ed4:	31 f6                	xor    esi,esi
c0018ed6:	53                   	push   ebx
c0018ed7:	83 ec 10             	sub    esp,0x10
c0018eda:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018ede:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0018ee1:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0018ee7:	75 0e                	jne    c0018ef7 <VAS::scanForEviction()+0x25>
c0018ee9:	89 da                	mov    edx,ebx
c0018eeb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018eee:	c1 ea 16             	shr    edx,0x16
c0018ef1:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0018ef5:	74 57                	je     c0018f4e <VAS::scanForEviction()+0x7c>
c0018ef7:	53                   	push   ebx
c0018ef8:	57                   	push   edi
c0018ef9:	e8 16 f3 ff ff       	call   c0018214 <VAS::getPageTableEntry(unsigned long)>
c0018efe:	5a                   	pop    edx
c0018eff:	8b 10                	mov    edx,DWORD PTR [eax]
c0018f01:	59                   	pop    ecx
c0018f02:	89 d1                	mov    ecx,edx
c0018f04:	c1 e9 0c             	shr    ecx,0xc
c0018f07:	74 10                	je     c0018f19 <VAS::scanForEviction()+0x47>
c0018f09:	89 d1                	mov    ecx,edx
c0018f0b:	81 e1 01 08 00 00    	and    ecx,0x801
c0018f11:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0018f17:	74 40                	je     c0018f59 <VAS::scanForEviction()+0x87>
c0018f19:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018f1f:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0018f25:	76 2d                	jbe    c0018f54 <VAS::scanForEviction()+0x82>
c0018f27:	83 c6 01             	add    esi,0x1
c0018f2a:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0018f31:	83 fe 03             	cmp    esi,0x3
c0018f34:	74 32                	je     c0018f68 <VAS::scanForEviction()+0x96>
c0018f36:	31 db                	xor    ebx,ebx
c0018f38:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0018f3e:	75 b7                	jne    c0018ef7 <VAS::scanForEviction()+0x25>
c0018f40:	89 da                	mov    edx,ebx
c0018f42:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018f45:	c1 ea 16             	shr    edx,0x16
c0018f48:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0018f4c:	75 a9                	jne    c0018ef7 <VAS::scanForEviction()+0x25>
c0018f4e:	81 c3 00 00 40 00    	add    ebx,0x400000
c0018f54:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0018f57:	eb 88                	jmp    c0018ee1 <VAS::scanForEviction()+0xf>
c0018f59:	f6 c2 20             	test   dl,0x20
c0018f5c:	74 13                	je     c0018f71 <VAS::scanForEviction()+0x9f>
c0018f5e:	83 e2 df             	and    edx,0xffffffdf
c0018f61:	89 10                	mov    DWORD PTR [eax],edx
c0018f63:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0018f66:	eb b1                	jmp    c0018f19 <VAS::scanForEviction()+0x47>
c0018f68:	83 c4 10             	add    esp,0x10
c0018f6b:	31 c0                	xor    eax,eax
c0018f6d:	5b                   	pop    ebx
c0018f6e:	5e                   	pop    esi
c0018f6f:	5f                   	pop    edi
c0018f70:	c3                   	ret    
c0018f71:	83 ec 08             	sub    esp,0x8
c0018f74:	89 d0                	mov    eax,edx
c0018f76:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018f7b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018f7f:	53                   	push   ebx
c0018f80:	68 29 17 03 c0       	push   0xc0031729
c0018f85:	e8 c3 02 00 00       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0018f8a:	58                   	pop    eax
c0018f8b:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0018f8e:	5a                   	pop    edx
c0018f8f:	51                   	push   ecx
c0018f90:	57                   	push   edi
c0018f91:	e8 24 fc ff ff       	call   c0018bba <VAS::evict(unsigned long)>
c0018f96:	5b                   	pop    ebx
c0018f97:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0018f9a:	5e                   	pop    esi
c0018f9b:	50                   	push   eax
c0018f9c:	68 3d 17 03 c0       	push   0xc003173d
c0018fa1:	e8 a7 02 00 00       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0018fa6:	58                   	pop    eax
c0018fa7:	5a                   	pop    edx
c0018fa8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018fac:	50                   	push   eax
c0018fad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018fb1:	68 50 17 03 c0       	push   0xc0031750
c0018fb6:	e8 92 02 00 00       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0018fbb:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0018fbe:	83 c4 10             	add    esp,0x10
c0018fc1:	81 c1 00 10 00 00    	add    ecx,0x1000
c0018fc7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018fcb:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0018fce:	83 c4 10             	add    esp,0x10
c0018fd1:	5b                   	pop    ebx
c0018fd2:	5e                   	pop    esi
c0018fd3:	5f                   	pop    edi
c0018fd4:	c3                   	ret    

c0018fd5 <mapVASFirstTime>:
c0018fd5:	55                   	push   ebp
c0018fd6:	57                   	push   edi
c0018fd7:	56                   	push   esi
c0018fd8:	53                   	push   ebx
c0018fd9:	83 ec 0c             	sub    esp,0xc
c0018fdc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018fe1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018fe4:	83 fa 01             	cmp    edx,0x1
c0018fe7:	0f 84 cb 00 00 00    	je     c00190b8 <mapVASFirstTime+0xe3>
c0018fed:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0018ff0:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c0018ff3:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0018ff8:	c1 e5 15             	shl    ebp,0x15
c0018ffb:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0019000:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c0019006:	29 eb                	sub    ebx,ebp
c0019008:	29 ef                	sub    edi,ebp
c001900a:	e8 b8 d6 ff ff       	call   c00166c7 <Phys::allocatePage()>
c001900f:	83 ec 0c             	sub    esp,0xc
c0019012:	68 03 04 00 00       	push   0x403
c0019017:	6a 01                	push   0x1
c0019019:	53                   	push   ebx
c001901a:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0019020:	50                   	push   eax
c0019021:	56                   	push   esi
c0019022:	e8 fb f7 ff ff       	call   c0018822 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019027:	83 c4 20             	add    esp,0x20
c001902a:	39 fb                	cmp    ebx,edi
c001902c:	75 dc                	jne    c001900a <mapVASFirstTime+0x35>
c001902e:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0019033:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0019038:	29 eb                	sub    ebx,ebp
c001903a:	29 ef                	sub    edi,ebp
c001903c:	e8 86 d6 ff ff       	call   c00166c7 <Phys::allocatePage()>
c0019041:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0019045:	83 fa 01             	cmp    edx,0x1
c0019048:	19 d2                	sbb    edx,edx
c001904a:	83 ec 0c             	sub    esp,0xc
c001904d:	83 e2 04             	and    edx,0x4
c0019050:	81 c2 03 04 00 00    	add    edx,0x403
c0019056:	52                   	push   edx
c0019057:	6a 01                	push   0x1
c0019059:	53                   	push   ebx
c001905a:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0019060:	50                   	push   eax
c0019061:	56                   	push   esi
c0019062:	e8 bb f7 ff ff       	call   c0018822 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019067:	83 c4 20             	add    esp,0x20
c001906a:	39 df                	cmp    edi,ebx
c001906c:	75 ce                	jne    c001903c <mapVASFirstTime+0x67>
c001906e:	83 ec 0c             	sub    esp,0xc
c0019071:	bb 7c 60 03 c0       	mov    ebx,0xc003607c
c0019076:	6a 04                	push   0x4
c0019078:	81 eb 00 50 03 c0    	sub    ebx,0xc0035000
c001907e:	6a ff                	push   0xffffffff
c0019080:	c1 eb 0c             	shr    ebx,0xc
c0019083:	53                   	push   ebx
c0019084:	68 00 50 03 c0       	push   0xc0035000
c0019089:	56                   	push   esi
c001908a:	e8 1f f3 ff ff       	call   c00183ae <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001908f:	83 c4 14             	add    esp,0x14
c0019092:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c0019097:	6a 04                	push   0x4
c0019099:	6a ff                	push   0xffffffff
c001909b:	53                   	push   ebx
c001909c:	68 00 50 03 c0       	push   0xc0035000
c00190a1:	50                   	push   eax
c00190a2:	e8 07 f3 ff ff       	call   c00183ae <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00190a7:	0f 20 d8             	mov    eax,cr3
c00190aa:	0f 22 d8             	mov    cr3,eax
c00190ad:	83 c4 20             	add    esp,0x20
c00190b0:	83 c4 0c             	add    esp,0xc
c00190b3:	5b                   	pop    ebx
c00190b4:	5e                   	pop    esi
c00190b5:	5f                   	pop    edi
c00190b6:	5d                   	pop    ebp
c00190b7:	c3                   	ret    
c00190b8:	83 ec 0c             	sub    esp,0xc
c00190bb:	68 5d 17 03 c0       	push   0xc003175d
c00190c0:	e8 88 01 00 00       	call   c001924d <Dbg::kprintf(char const*, ...)>
c00190c5:	83 c4 10             	add    esp,0x10
c00190c8:	83 c4 0c             	add    esp,0xc
c00190cb:	5b                   	pop    ebx
c00190cc:	5e                   	pop    esi
c00190cd:	5f                   	pop    edi
c00190ce:	5d                   	pop    ebp
c00190cf:	c3                   	ret    

c00190d0 <__cxa_atexit>:
c00190d0:	31 c0                	xor    eax,eax
c00190d2:	c3                   	ret    

c00190d3 <__cxa_finalize>:
c00190d3:	c3                   	ret    

c00190d4 <__stack_chk_fail>:
c00190d4:	55                   	push   ebp
c00190d5:	89 e5                	mov    ebp,esp
c00190d7:	83 ec 10             	sub    esp,0x10
c00190da:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00190dd:	68 76 17 03 c0       	push   0xc0031776
c00190e2:	e8 66 01 00 00       	call   c001924d <Dbg::kprintf(char const*, ...)>
c00190e7:	58                   	pop    eax
c00190e8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00190eb:	5a                   	pop    edx
c00190ec:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00190ef:	68 76 17 03 c0       	push   0xc0031776
c00190f4:	e8 54 01 00 00       	call   c001924d <Dbg::kprintf(char const*, ...)>
c00190f9:	c7 04 24 7e 17 03 c0 	mov    DWORD PTR [esp],0xc003177e
c0019100:	e8 61 71 00 00       	call   c0020266 <KePanic(char const*)>
c0019105:	83 c4 10             	add    esp,0x10
c0019108:	c9                   	leave  
c0019109:	c3                   	ret    

c001910a <__cxa_pure_virtual>:
c001910a:	83 ec 18             	sub    esp,0x18
c001910d:	68 96 17 03 c0       	push   0xc0031796
c0019112:	e8 4f 71 00 00       	call   c0020266 <KePanic(char const*)>
c0019117:	83 c4 1c             	add    esp,0x1c
c001911a:	c3                   	ret    

c001911b <operator new[](unsigned long)>:
c001911b:	e9 9e d2 ff ff       	jmp    c00163be <malloc>

c0019120 <operator delete(void*, unsigned long)>:
c0019120:	e9 b9 d2 ff ff       	jmp    c00163de <rfree>

c0019125 <operator delete[](void*)>:
c0019125:	e9 b4 d2 ff ff       	jmp    c00163de <rfree>

c001912a <operator delete[](void*, unsigned long)>:
c001912a:	e9 af d2 ff ff       	jmp    c00163de <rfree>

c001912f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c001912f:	55                   	push   ebp
c0019130:	57                   	push   edi
c0019131:	56                   	push   esi
c0019132:	be 9f 12 03 c0       	mov    esi,0xc003129f
c0019137:	53                   	push   ebx
c0019138:	83 ec 20             	sub    esp,0x20
c001913b:	a0 9e 12 03 c0       	mov    al,ds:0xc003129e
c0019140:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019144:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019148:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001914c:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0019150:	b8 10 00 00 00       	mov    eax,0x10
c0019155:	f7 c7 02 00 00 00    	test   edi,0x2
c001915b:	75 60                	jne    c00191bd <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c001915d:	89 c1                	mov    ecx,eax
c001915f:	c1 e9 02             	shr    ecx,0x2
c0019162:	fc                   	cld    
c0019163:	31 d2                	xor    edx,edx
c0019165:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0019167:	a8 02                	test   al,0x2
c0019169:	74 0b                	je     c0019176 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c001916b:	66 8b 16             	mov    dx,WORD PTR [esi]
c001916e:	66 89 17             	mov    WORD PTR [edi],dx
c0019171:	ba 02 00 00 00       	mov    edx,0x2
c0019176:	a8 01                	test   al,0x1
c0019178:	74 06                	je     c0019180 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c001917a:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c001917d:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c0019180:	89 ee                	mov    esi,ebp
c0019182:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0019186:	eb 02                	jmp    c001918a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c0019188:	89 c6                	mov    esi,eax
c001918a:	31 d2                	xor    edx,edx
c001918c:	83 c1 01             	add    ecx,0x1
c001918f:	89 f0                	mov    eax,esi
c0019191:	f7 f3                	div    ebx
c0019193:	39 de                	cmp    esi,ebx
c0019195:	73 f1                	jae    c0019188 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c0019197:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001919a:	eb 02                	jmp    c001919e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c001919c:	89 c5                	mov    ebp,eax
c001919e:	31 d2                	xor    edx,edx
c00191a0:	83 e9 01             	sub    ecx,0x1
c00191a3:	89 e8                	mov    eax,ebp
c00191a5:	f7 f3                	div    ebx
c00191a7:	39 dd                	cmp    ebp,ebx
c00191a9:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c00191ad:	88 11                	mov    BYTE PTR [ecx],dl
c00191af:	73 eb                	jae    c001919c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c00191b1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00191b5:	83 c4 20             	add    esp,0x20
c00191b8:	5b                   	pop    ebx
c00191b9:	5e                   	pop    esi
c00191ba:	5f                   	pop    edi
c00191bb:	5d                   	pop    ebp
c00191bc:	c3                   	ret    
c00191bd:	66 8b 16             	mov    dx,WORD PTR [esi]
c00191c0:	83 c7 02             	add    edi,0x2
c00191c3:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c00191c7:	83 c6 02             	add    esi,0x2
c00191ca:	83 e8 02             	sub    eax,0x2
c00191cd:	eb 8e                	jmp    c001915d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c00191cf <Dbg::logc(char)>:
c00191cf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00191d3:	f6 05 d4 a9 03 c0 10 	test   BYTE PTR ds:0xc003a9d4,0x10
c00191da:	75 12                	jne    c00191ee <Dbg::logc(char)+0x1f>
c00191dc:	ba fd 03 00 00       	mov    edx,0x3fd
c00191e1:	ec                   	in     al,dx
c00191e2:	a8 20                	test   al,0x20
c00191e4:	74 fb                	je     c00191e1 <Dbg::logc(char)+0x12>
c00191e6:	ba f8 03 00 00       	mov    edx,0x3f8
c00191eb:	88 c8                	mov    al,cl
c00191ed:	ee                   	out    dx,al
c00191ee:	c3                   	ret    

c00191ef <Dbg::logs(char*)>:
c00191ef:	53                   	push   ebx
c00191f0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00191f4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00191f7:	85 c0                	test   eax,eax
c00191f9:	74 11                	je     c001920c <Dbg::logs(char*)+0x1d>
c00191fb:	83 c3 01             	add    ebx,0x1
c00191fe:	50                   	push   eax
c00191ff:	e8 cb ff ff ff       	call   c00191cf <Dbg::logc(char)>
c0019204:	58                   	pop    eax
c0019205:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019208:	85 c0                	test   eax,eax
c001920a:	75 ef                	jne    c00191fb <Dbg::logs(char*)+0xc>
c001920c:	5b                   	pop    ebx
c001920d:	c3                   	ret    

c001920e <Dbg::logWriteInt(unsigned int)>:
c001920e:	83 ec 10             	sub    esp,0x10
c0019211:	6a 0a                	push   0xa
c0019213:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019217:	50                   	push   eax
c0019218:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001921c:	50                   	push   eax
c001921d:	e8 0d ff ff ff       	call   c001912f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0019222:	50                   	push   eax
c0019223:	e8 c7 ff ff ff       	call   c00191ef <Dbg::logs(char*)>
c0019228:	83 c4 20             	add    esp,0x20
c001922b:	c3                   	ret    

c001922c <Dbg::logWriteIntBase(unsigned int, int)>:
c001922c:	83 ec 10             	sub    esp,0x10
c001922f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019233:	50                   	push   eax
c0019234:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019238:	50                   	push   eax
c0019239:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001923d:	52                   	push   edx
c001923e:	e8 ec fe ff ff       	call   c001912f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0019243:	50                   	push   eax
c0019244:	e8 a6 ff ff ff       	call   c00191ef <Dbg::logs(char*)>
c0019249:	83 c4 20             	add    esp,0x20
c001924c:	c3                   	ret    

c001924d <Dbg::kprintf(char const*, ...)>:
c001924d:	55                   	push   ebp
c001924e:	57                   	push   edi
c001924f:	56                   	push   esi
c0019250:	53                   	push   ebx
c0019251:	83 ec 0c             	sub    esp,0xc
c0019254:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019258:	f6 05 d4 a9 03 c0 10 	test   BYTE PTR ds:0xc003a9d4,0x10
c001925f:	74 08                	je     c0019269 <Dbg::kprintf(char const*, ...)+0x1c>
c0019261:	83 c4 0c             	add    esp,0xc
c0019264:	5b                   	pop    ebx
c0019265:	5e                   	pop    esi
c0019266:	5f                   	pop    edi
c0019267:	5d                   	pop    ebp
c0019268:	c3                   	ret    
c0019269:	8d 44 24 24          	lea    eax,[esp+0x24]
c001926d:	31 ff                	xor    edi,edi
c001926f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019273:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019276:	85 c0                	test   eax,eax
c0019278:	74 e7                	je     c0019261 <Dbg::kprintf(char const*, ...)+0x14>
c001927a:	8d 77 01             	lea    esi,[edi+0x1]
c001927d:	83 f8 25             	cmp    eax,0x25
c0019280:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0019283:	75 47                	jne    c00192cc <Dbg::kprintf(char const*, ...)+0x7f>
c0019285:	83 c7 02             	add    edi,0x2
c0019288:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001928b:	8d 34 3b             	lea    esi,[ebx+edi*1]
c001928e:	83 e8 25             	sub    eax,0x25
c0019291:	0f b6 c0             	movzx  eax,al
c0019294:	83 f8 53             	cmp    eax,0x53
c0019297:	0f 87 ce 00 00 00    	ja     c001936b <Dbg::kprintf(char const*, ...)+0x11e>
c001929d:	ff 24 85 ac 17 03 c0 	jmp    DWORD PTR [eax*4-0x3ffce854]
c00192a4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00192a8:	89 c8                	mov    eax,ecx
c00192aa:	83 c1 04             	add    ecx,0x4
c00192ad:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00192b1:	8b 28                	mov    ebp,DWORD PTR [eax]
c00192b3:	55                   	push   ebp
c00192b4:	e8 55 ff ff ff       	call   c001920e <Dbg::logWriteInt(unsigned int)>
c00192b9:	58                   	pop    eax
c00192ba:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00192bd:	85 c0                	test   eax,eax
c00192bf:	74 a0                	je     c0019261 <Dbg::kprintf(char const*, ...)+0x14>
c00192c1:	8d 77 01             	lea    esi,[edi+0x1]
c00192c4:	83 f8 25             	cmp    eax,0x25
c00192c7:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c00192ca:	74 b9                	je     c0019285 <Dbg::kprintf(char const*, ...)+0x38>
c00192cc:	50                   	push   eax
c00192cd:	89 f7                	mov    edi,esi
c00192cf:	e8 fb fe ff ff       	call   c00191cf <Dbg::logc(char)>
c00192d4:	89 ee                	mov    esi,ebp
c00192d6:	58                   	pop    eax
c00192d7:	eb e1                	jmp    c00192ba <Dbg::kprintf(char const*, ...)+0x6d>
c00192d9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00192dd:	89 c8                	mov    eax,ecx
c00192df:	83 c1 04             	add    ecx,0x4
c00192e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00192e4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00192e8:	50                   	push   eax
c00192e9:	e8 01 ff ff ff       	call   c00191ef <Dbg::logs(char*)>
c00192ee:	58                   	pop    eax
c00192ef:	eb c9                	jmp    c00192ba <Dbg::kprintf(char const*, ...)+0x6d>
c00192f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00192f5:	89 d0                	mov    eax,edx
c00192f7:	83 c2 04             	add    edx,0x4
c00192fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00192fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0019300:	50                   	push   eax
c0019301:	e8 08 ff ff ff       	call   c001920e <Dbg::logWriteInt(unsigned int)>
c0019306:	58                   	pop    eax
c0019307:	eb b1                	jmp    c00192ba <Dbg::kprintf(char const*, ...)+0x6d>
c0019309:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001930d:	89 d0                	mov    eax,edx
c001930f:	83 c2 04             	add    edx,0x4
c0019312:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0019315:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019319:	50                   	push   eax
c001931a:	e8 b0 fe ff ff       	call   c00191cf <Dbg::logc(char)>
c001931f:	58                   	pop    eax
c0019320:	eb 98                	jmp    c00192ba <Dbg::kprintf(char const*, ...)+0x6d>
c0019322:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019326:	89 c8                	mov    eax,ecx
c0019328:	83 c1 04             	add    ecx,0x4
c001932b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001932f:	6a 10                	push   0x10
c0019331:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019333:	51                   	push   ecx
c0019334:	e8 f3 fe ff ff       	call   c001922c <Dbg::logWriteIntBase(unsigned int, int)>
c0019339:	5d                   	pop    ebp
c001933a:	58                   	pop    eax
c001933b:	e9 7a ff ff ff       	jmp    c00192ba <Dbg::kprintf(char const*, ...)+0x6d>
c0019340:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019344:	89 d0                	mov    eax,edx
c0019346:	83 c2 08             	add    edx,0x8
c0019349:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001934d:	6a 10                	push   0x10
c001934f:	8b 00                	mov    eax,DWORD PTR [eax]
c0019351:	50                   	push   eax
c0019352:	e8 d5 fe ff ff       	call   c001922c <Dbg::logWriteIntBase(unsigned int, int)>
c0019357:	58                   	pop    eax
c0019358:	5a                   	pop    edx
c0019359:	e9 5c ff ff ff       	jmp    c00192ba <Dbg::kprintf(char const*, ...)+0x6d>
c001935e:	6a 25                	push   0x25
c0019360:	e8 6a fe ff ff       	call   c00191cf <Dbg::logc(char)>
c0019365:	5a                   	pop    edx
c0019366:	e9 4f ff ff ff       	jmp    c00192ba <Dbg::kprintf(char const*, ...)+0x6d>
c001936b:	6a 25                	push   0x25
c001936d:	e8 5d fe ff ff       	call   c00191cf <Dbg::logc(char)>
c0019372:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0019376:	50                   	push   eax
c0019377:	e8 53 fe ff ff       	call   c00191cf <Dbg::logc(char)>
c001937c:	5a                   	pop    edx
c001937d:	59                   	pop    ecx
c001937e:	e9 37 ff ff ff       	jmp    c00192ba <Dbg::kprintf(char const*, ...)+0x6d>
c0019383:	90                   	nop

c0019384 <KiUbsanPrintDetails(char const*, void*)>:
c0019384:	83 ec 1c             	sub    esp,0x1c
c0019387:	83 ec 08             	sub    esp,0x8
c001938a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001938e:	68 fc 18 03 c0       	push   0xc00318fc
c0019393:	e8 b5 fe ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0019398:	83 c4 10             	add    esp,0x10
c001939b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001939f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00193a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00193a9:	83 ec 08             	sub    esp,0x8
c00193ac:	50                   	push   eax
c00193ad:	68 10 19 03 c0       	push   0xc0031910
c00193b2:	e8 96 fe ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c00193b7:	83 c4 10             	add    esp,0x10
c00193ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00193be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00193c1:	83 ec 08             	sub    esp,0x8
c00193c4:	50                   	push   eax
c00193c5:	68 1a 19 03 c0       	push   0xc003191a
c00193ca:	e8 7e fe ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c00193cf:	83 c4 10             	add    esp,0x10
c00193d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00193d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00193d9:	83 ec 08             	sub    esp,0x8
c00193dc:	50                   	push   eax
c00193dd:	68 24 19 03 c0       	push   0xc0031924
c00193e2:	e8 66 fe ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c00193e7:	83 c4 10             	add    esp,0x10
c00193ea:	90                   	nop
c00193eb:	83 c4 1c             	add    esp,0x1c
c00193ee:	c3                   	ret    
c00193ef:	90                   	nop

c00193f0 <__ubsan_handle_type_mismatch_v1>:
c00193f0:	83 ec 0c             	sub    esp,0xc
c00193f3:	83 ec 08             	sub    esp,0x8
c00193f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00193fa:	68 68 1a 03 c0       	push   0xc0031a68
c00193ff:	e8 80 ff ff ff       	call   c0019384 <KiUbsanPrintDetails(char const*, void*)>
c0019404:	83 c4 10             	add    esp,0x10
c0019407:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001940c:	75 16                	jne    c0019424 <__ubsan_handle_type_mismatch_v1+0x34>
c001940e:	83 ec 0c             	sub    esp,0xc
c0019411:	68 2e 19 03 c0       	push   0xc003192e
c0019416:	e8 32 fe ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c001941b:	83 c4 10             	add    esp,0x10
c001941e:	e9 91 00 00 00       	jmp    c00194b4 <__ubsan_handle_type_mismatch_v1+0xc4>
c0019423:	90                   	nop
c0019424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019428:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001942b:	85 c0                	test   eax,eax
c001942d:	74 29                	je     c0019458 <__ubsan_handle_type_mismatch_v1+0x68>
c001942f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019433:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019436:	83 e8 01             	sub    eax,0x1
c0019439:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c001943d:	75 19                	jne    c0019458 <__ubsan_handle_type_mismatch_v1+0x68>
c001943f:	83 ec 08             	sub    esp,0x8
c0019442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019446:	68 88 1a 03 c0       	push   0xc0031a88
c001944b:	e8 fd fd ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0019450:	83 c4 10             	add    esp,0x10
c0019453:	eb 5f                	jmp    c00194b4 <__ubsan_handle_type_mismatch_v1+0xc4>
c0019455:	8d 76 00             	lea    esi,[esi+0x0]
c0019458:	83 ec 0c             	sub    esp,0xc
c001945b:	68 43 19 03 c0       	push   0xc0031943
c0019460:	e8 e8 fd ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0019465:	83 c4 10             	add    esp,0x10
c0019468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001946c:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c001946f:	0f b6 c0             	movzx  eax,al
c0019472:	83 ec 08             	sub    esp,0x8
c0019475:	50                   	push   eax
c0019476:	68 5d 19 03 c0       	push   0xc003195d
c001947b:	e8 cd fd ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0019480:	83 c4 10             	add    esp,0x10
c0019483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019487:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001948a:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c001948d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019495:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0019498:	0f b6 c0             	movzx  eax,al
c001949b:	8b 04 85 20 3c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcc3e0]
c00194a2:	51                   	push   ecx
c00194a3:	52                   	push   edx
c00194a4:	50                   	push   eax
c00194a5:	68 b0 1a 03 c0       	push   0xc0031ab0
c00194aa:	e8 9e fd ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c00194af:	83 c4 10             	add    esp,0x10
c00194b2:	66 90                	xchg   ax,ax
c00194b4:	83 ec 0c             	sub    esp,0xc
c00194b7:	68 68 1a 03 c0       	push   0xc0031a68
c00194bc:	e8 a5 6d 00 00       	call   c0020266 <KePanic(char const*)>
c00194c1:	83 c4 10             	add    esp,0x10
c00194c4:	90                   	nop
c00194c5:	83 c4 0c             	add    esp,0xc
c00194c8:	c3                   	ret    
c00194c9:	8d 76 00             	lea    esi,[esi+0x0]

c00194cc <__ubsan_handle_pointer_overflow>:
c00194cc:	83 ec 0c             	sub    esp,0xc
c00194cf:	83 ec 08             	sub    esp,0x8
c00194d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00194d6:	68 f8 1a 03 c0       	push   0xc0031af8
c00194db:	e8 a4 fe ff ff       	call   c0019384 <KiUbsanPrintDetails(char const*, void*)>
c00194e0:	83 c4 10             	add    esp,0x10
c00194e3:	83 ec 0c             	sub    esp,0xc
c00194e6:	68 f8 1a 03 c0       	push   0xc0031af8
c00194eb:	e8 76 6d 00 00       	call   c0020266 <KePanic(char const*)>
c00194f0:	83 c4 10             	add    esp,0x10
c00194f3:	90                   	nop
c00194f4:	83 c4 0c             	add    esp,0xc
c00194f7:	c3                   	ret    

c00194f8 <__ubsan_handle_out_of_bounds>:
c00194f8:	83 ec 0c             	sub    esp,0xc
c00194fb:	83 ec 08             	sub    esp,0x8
c00194fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019502:	68 68 19 03 c0       	push   0xc0031968
c0019507:	e8 78 fe ff ff       	call   c0019384 <KiUbsanPrintDetails(char const*, void*)>
c001950c:	83 c4 10             	add    esp,0x10
c001950f:	83 ec 0c             	sub    esp,0xc
c0019512:	68 68 19 03 c0       	push   0xc0031968
c0019517:	e8 4a 6d 00 00       	call   c0020266 <KePanic(char const*)>
c001951c:	83 c4 10             	add    esp,0x10
c001951f:	90                   	nop
c0019520:	83 c4 0c             	add    esp,0xc
c0019523:	c3                   	ret    

c0019524 <__ubsan_handle_add_overflow>:
c0019524:	83 ec 0c             	sub    esp,0xc
c0019527:	83 ec 08             	sub    esp,0x8
c001952a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001952e:	68 85 19 03 c0       	push   0xc0031985
c0019533:	e8 4c fe ff ff       	call   c0019384 <KiUbsanPrintDetails(char const*, void*)>
c0019538:	83 c4 10             	add    esp,0x10
c001953b:	83 ec 0c             	sub    esp,0xc
c001953e:	68 85 19 03 c0       	push   0xc0031985
c0019543:	e8 1e 6d 00 00       	call   c0020266 <KePanic(char const*)>
c0019548:	83 c4 10             	add    esp,0x10
c001954b:	90                   	nop
c001954c:	83 c4 0c             	add    esp,0xc
c001954f:	c3                   	ret    

c0019550 <__ubsan_handle_load_invalid_value>:
c0019550:	83 ec 0c             	sub    esp,0xc
c0019553:	83 ec 08             	sub    esp,0x8
c0019556:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001955a:	68 18 1b 03 c0       	push   0xc0031b18
c001955f:	e8 20 fe ff ff       	call   c0019384 <KiUbsanPrintDetails(char const*, void*)>
c0019564:	83 c4 10             	add    esp,0x10
c0019567:	83 ec 0c             	sub    esp,0xc
c001956a:	68 18 1b 03 c0       	push   0xc0031b18
c001956f:	e8 f2 6c 00 00       	call   c0020266 <KePanic(char const*)>
c0019574:	83 c4 10             	add    esp,0x10
c0019577:	90                   	nop
c0019578:	83 c4 0c             	add    esp,0xc
c001957b:	c3                   	ret    

c001957c <__ubsan_handle_divrem_overflow>:
c001957c:	83 ec 0c             	sub    esp,0xc
c001957f:	83 ec 08             	sub    esp,0x8
c0019582:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019586:	68 3c 1b 03 c0       	push   0xc0031b3c
c001958b:	e8 f4 fd ff ff       	call   c0019384 <KiUbsanPrintDetails(char const*, void*)>
c0019590:	83 c4 10             	add    esp,0x10
c0019593:	83 ec 0c             	sub    esp,0xc
c0019596:	68 3c 1b 03 c0       	push   0xc0031b3c
c001959b:	e8 c6 6c 00 00       	call   c0020266 <KePanic(char const*)>
c00195a0:	83 c4 10             	add    esp,0x10
c00195a3:	90                   	nop
c00195a4:	83 c4 0c             	add    esp,0xc
c00195a7:	c3                   	ret    

c00195a8 <__ubsan_handle_mul_overflow>:
c00195a8:	83 ec 0c             	sub    esp,0xc
c00195ab:	83 ec 08             	sub    esp,0x8
c00195ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00195b2:	68 a1 19 03 c0       	push   0xc00319a1
c00195b7:	e8 c8 fd ff ff       	call   c0019384 <KiUbsanPrintDetails(char const*, void*)>
c00195bc:	83 c4 10             	add    esp,0x10
c00195bf:	83 ec 0c             	sub    esp,0xc
c00195c2:	68 a1 19 03 c0       	push   0xc00319a1
c00195c7:	e8 9a 6c 00 00       	call   c0020266 <KePanic(char const*)>
c00195cc:	83 c4 10             	add    esp,0x10
c00195cf:	90                   	nop
c00195d0:	83 c4 0c             	add    esp,0xc
c00195d3:	c3                   	ret    

c00195d4 <__ubsan_handle_sub_overflow>:
c00195d4:	83 ec 0c             	sub    esp,0xc
c00195d7:	83 ec 08             	sub    esp,0x8
c00195da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00195de:	68 bd 19 03 c0       	push   0xc00319bd
c00195e3:	e8 9c fd ff ff       	call   c0019384 <KiUbsanPrintDetails(char const*, void*)>
c00195e8:	83 c4 10             	add    esp,0x10
c00195eb:	83 ec 0c             	sub    esp,0xc
c00195ee:	68 bd 19 03 c0       	push   0xc00319bd
c00195f3:	e8 6e 6c 00 00       	call   c0020266 <KePanic(char const*)>
c00195f8:	83 c4 10             	add    esp,0x10
c00195fb:	90                   	nop
c00195fc:	83 c4 0c             	add    esp,0xc
c00195ff:	c3                   	ret    

c0019600 <__ubsan_handle_shift_out_of_bounds>:
c0019600:	83 ec 0c             	sub    esp,0xc
c0019603:	83 ec 08             	sub    esp,0x8
c0019606:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001960a:	68 5c 1b 03 c0       	push   0xc0031b5c
c001960f:	e8 70 fd ff ff       	call   c0019384 <KiUbsanPrintDetails(char const*, void*)>
c0019614:	83 c4 10             	add    esp,0x10
c0019617:	83 ec 0c             	sub    esp,0xc
c001961a:	68 5c 1b 03 c0       	push   0xc0031b5c
c001961f:	e8 42 6c 00 00       	call   c0020266 <KePanic(char const*)>
c0019624:	83 c4 10             	add    esp,0x10
c0019627:	90                   	nop
c0019628:	83 c4 0c             	add    esp,0xc
c001962b:	c3                   	ret    

c001962c <__ubsan_handle_negate_overflow>:
c001962c:	83 ec 0c             	sub    esp,0xc
c001962f:	83 ec 08             	sub    esp,0x8
c0019632:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019636:	68 80 1b 03 c0       	push   0xc0031b80
c001963b:	e8 44 fd ff ff       	call   c0019384 <KiUbsanPrintDetails(char const*, void*)>
c0019640:	83 c4 10             	add    esp,0x10
c0019643:	83 ec 0c             	sub    esp,0xc
c0019646:	68 80 1b 03 c0       	push   0xc0031b80
c001964b:	e8 16 6c 00 00       	call   c0020266 <KePanic(char const*)>
c0019650:	83 c4 10             	add    esp,0x10
c0019653:	90                   	nop
c0019654:	83 c4 0c             	add    esp,0xc
c0019657:	c3                   	ret    

c0019658 <KiIsHashInTable(unsigned short)>:
c0019658:	0f b7 d0             	movzx  edx,ax
c001965b:	83 e0 07             	and    eax,0x7
c001965e:	c1 fa 03             	sar    edx,0x3
c0019661:	88 c1                	mov    cl,al
c0019663:	0f b6 92 00 af 03 c0 	movzx  edx,BYTE PTR [edx-0x3ffc5100]
c001966a:	d3 fa                	sar    edx,cl
c001966c:	89 d0                	mov    eax,edx
c001966e:	83 e0 01             	and    eax,0x1
c0019671:	c3                   	ret    

c0019672 <KiSetHashInTable(unsigned short, bool)>:
c0019672:	56                   	push   esi
c0019673:	53                   	push   ebx
c0019674:	0f b7 d8             	movzx  ebx,ax
c0019677:	83 e0 07             	and    eax,0x7
c001967a:	c1 fb 03             	sar    ebx,0x3
c001967d:	89 c1                	mov    ecx,eax
c001967f:	0f b6 b3 00 af 03 c0 	movzx  esi,BYTE PTR [ebx-0x3ffc5100]
c0019686:	b8 01 00 00 00       	mov    eax,0x1
c001968b:	d3 e0                	shl    eax,cl
c001968d:	84 d2                	test   dl,dl
c001968f:	74 04                	je     c0019695 <KiSetHashInTable(unsigned short, bool)+0x23>
c0019691:	09 f0                	or     eax,esi
c0019693:	eb 04                	jmp    c0019699 <KiSetHashInTable(unsigned short, bool)+0x27>
c0019695:	f7 d0                	not    eax
c0019697:	21 f0                	and    eax,esi
c0019699:	88 83 00 af 03 c0    	mov    BYTE PTR [ebx-0x3ffc5100],al
c001969f:	5b                   	pop    ebx
c00196a0:	5e                   	pop    esi
c00196a1:	c3                   	ret    

c00196a2 <KiFlushSymlinkChanges()>:
c00196a2:	57                   	push   edi
c00196a3:	56                   	push   esi
c00196a4:	53                   	push   ebx
c00196a5:	83 ec 1c             	sub    esp,0x1c
c00196a8:	68 14 01 00 00       	push   0x114
c00196ad:	e8 0c cd ff ff       	call   c00163be <malloc>
c00196b2:	83 c4 0c             	add    esp,0xc
c00196b5:	89 c3                	mov    ebx,eax
c00196b7:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00196bd:	68 9f 1b 03 c0       	push   0xc0031b9f
c00196c2:	50                   	push   eax
c00196c3:	e8 8c 0d 00 00       	call   c001a454 <File::File(char const*, Process*)>
c00196c8:	83 c4 10             	add    esp,0x10
c00196cb:	85 db                	test   ebx,ebx
c00196cd:	75 10                	jne    c00196df <KiFlushSymlinkChanges()+0x3d>
c00196cf:	83 ec 0c             	sub    esp,0xc
c00196d2:	68 bd 1b 03 c0       	push   0xc0031bbd
c00196d7:	e8 8a 6b 00 00       	call   c0020266 <KePanic(char const*)>
c00196dc:	83 c4 10             	add    esp,0x10
c00196df:	50                   	push   eax
c00196e0:	50                   	push   eax
c00196e1:	6a 06                	push   0x6
c00196e3:	53                   	push   ebx
c00196e4:	e8 89 0d 00 00       	call   c001a472 <File::open(FileOpenMode)>
c00196e9:	83 c4 10             	add    esp,0x10
c00196ec:	85 c0                	test   eax,eax
c00196ee:	74 10                	je     c0019700 <KiFlushSymlinkChanges()+0x5e>
c00196f0:	83 ec 0c             	sub    esp,0xc
c00196f3:	68 d7 1b 03 c0       	push   0xc0031bd7
c00196f8:	e8 69 6b 00 00       	call   c0020266 <KePanic(char const*)>
c00196fd:	83 c4 10             	add    esp,0x10
c0019700:	31 f6                	xor    esi,esi
c0019702:	39 35 c0 aa 03 c0    	cmp    DWORD PTR ds:0xc003aac0,esi
c0019708:	7e 70                	jle    c001977a <KiFlushSymlinkChanges()+0xd8>
c001970a:	83 ec 0c             	sub    esp,0xc
c001970d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001970f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0019713:	89 f0                	mov    eax,esi
c0019715:	57                   	push   edi
c0019716:	c1 e0 08             	shl    eax,0x8
c0019719:	05 00 ab 03 c0       	add    eax,0xc003ab00
c001971e:	50                   	push   eax
c001971f:	6a 00                	push   0x0
c0019721:	68 00 01 00 00       	push   0x100
c0019726:	53                   	push   ebx
c0019727:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001972a:	83 c4 20             	add    esp,0x20
c001972d:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c0019735:	74 10                	je     c0019747 <KiFlushSymlinkChanges()+0xa5>
c0019737:	83 ec 0c             	sub    esp,0xc
c001973a:	68 f1 1b 03 c0       	push   0xc0031bf1
c001973f:	e8 22 6b 00 00       	call   c0020266 <KePanic(char const*)>
c0019744:	83 c4 10             	add    esp,0x10
c0019747:	83 ec 0c             	sub    esp,0xc
c001974a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001974c:	8d 14 f5 e0 aa 03 c0 	lea    edx,[esi*8-0x3ffc5520]
c0019753:	57                   	push   edi
c0019754:	52                   	push   edx
c0019755:	6a 00                	push   0x0
c0019757:	6a 08                	push   0x8
c0019759:	53                   	push   ebx
c001975a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001975d:	83 c4 20             	add    esp,0x20
c0019760:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019765:	74 10                	je     c0019777 <KiFlushSymlinkChanges()+0xd5>
c0019767:	83 ec 0c             	sub    esp,0xc
c001976a:	68 0b 1c 03 c0       	push   0xc0031c0b
c001976f:	e8 f2 6a 00 00       	call   c0020266 <KePanic(char const*)>
c0019774:	83 c4 10             	add    esp,0x10
c0019777:	46                   	inc    esi
c0019778:	eb 88                	jmp    c0019702 <KiFlushSymlinkChanges()+0x60>
c001977a:	83 ec 0c             	sub    esp,0xc
c001977d:	53                   	push   ebx
c001977e:	e8 4d 0d 00 00       	call   c001a4d0 <File::close()>
c0019783:	83 c4 10             	add    esp,0x10
c0019786:	85 db                	test   ebx,ebx
c0019788:	74 0c                	je     c0019796 <KiFlushSymlinkChanges()+0xf4>
c001978a:	83 ec 0c             	sub    esp,0xc
c001978d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001978f:	53                   	push   ebx
c0019790:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019793:	83 c4 10             	add    esp,0x10
c0019796:	c7 05 c0 aa 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003aac0,0x0
c00197a0:	83 c4 10             	add    esp,0x10
c00197a3:	5b                   	pop    ebx
c00197a4:	5e                   	pop    esi
c00197a5:	5f                   	pop    edi
c00197a6:	c3                   	ret    

c00197a7 <KiDeinitialiseSymlinks(void*)>:
c00197a7:	e9 f6 fe ff ff       	jmp    c00196a2 <KiFlushSymlinkChanges()>

c00197ac <KiGetSymlinkHash(char const*)>:
c00197ac:	53                   	push   ebx
c00197ad:	89 c3                	mov    ebx,eax
c00197af:	83 ec 14             	sub    esp,0x14
c00197b2:	50                   	push   eax
c00197b3:	e8 b8 6d fe ff       	call   c0000570 <strlen>
c00197b8:	5a                   	pop    edx
c00197b9:	59                   	pop    ecx
c00197ba:	50                   	push   eax
c00197bb:	53                   	push   ebx
c00197bc:	e8 0c 64 00 00       	call   c001fbcd <KeCalculateCRC32(unsigned char*, int)>
c00197c1:	83 c4 18             	add    esp,0x18
c00197c4:	89 c2                	mov    edx,eax
c00197c6:	5b                   	pop    ebx
c00197c7:	c1 ea 10             	shr    edx,0x10
c00197ca:	31 d0                	xor    eax,edx
c00197cc:	c3                   	ret    

c00197cd <KiCreateSymlinkID()>:
c00197cd:	55                   	push   ebp
c00197ce:	57                   	push   edi
c00197cf:	56                   	push   esi
c00197d0:	53                   	push   ebx
c00197d1:	31 db                	xor    ebx,ebx
c00197d3:	83 ec 1c             	sub    esp,0x1c
c00197d6:	e8 d9 6b 00 00       	call   c00203b4 <KeRand()>
c00197db:	43                   	inc    ebx
c00197dc:	8b 2d 00 cf 03 c0    	mov    ebp,DWORD PTR ds:0xc003cf00
c00197e2:	31 d2                	xor    edx,edx
c00197e4:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00197e7:	0f a4 c2 1f          	shld   edx,eax,0x1f
c00197eb:	89 0d 00 cf 03 c0    	mov    DWORD PTR ds:0xc003cf00,ecx
c00197f1:	c1 e0 1f             	shl    eax,0x1f
c00197f4:	89 d7                	mov    edi,edx
c00197f6:	89 c6                	mov    esi,eax
c00197f8:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00197fc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019804:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c001980a:	75 10                	jne    c001981c <KiCreateSymlinkID()+0x4f>
c001980c:	83 ec 0c             	sub    esp,0xc
c001980f:	68 25 1c 03 c0       	push   0xc0031c25
c0019814:	e8 4d 6a 00 00       	call   c0020266 <KePanic(char const*)>
c0019819:	83 c4 10             	add    esp,0x10
c001981c:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0019820:	75 04                	jne    c0019826 <KiCreateSymlinkID()+0x59>
c0019822:	39 f5                	cmp    ebp,esi
c0019824:	74 b0                	je     c00197d6 <KiCreateSymlinkID()+0x9>
c0019826:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001982a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001982e:	31 f0                	xor    eax,esi
c0019830:	83 c4 1c             	add    esp,0x1c
c0019833:	31 fa                	xor    edx,edi
c0019835:	5b                   	pop    ebx
c0019836:	5e                   	pop    esi
c0019837:	5f                   	pop    edi
c0019838:	5d                   	pop    ebp
c0019839:	c3                   	ret    

c001983a <KeRegisterSymlink(char const*, unsigned long long)>:
c001983a:	53                   	push   ebx
c001983b:	83 ec 0c             	sub    esp,0xc
c001983e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019842:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019846:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001984a:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c001984f:	68 00 01 00 00       	push   0x100
c0019854:	89 0c c5 e4 aa 03 c0 	mov    DWORD PTR [eax*8-0x3ffc551c],ecx
c001985b:	6a 00                	push   0x0
c001985d:	89 14 c5 e0 aa 03 c0 	mov    DWORD PTR [eax*8-0x3ffc5520],edx
c0019864:	c1 e0 08             	shl    eax,0x8
c0019867:	05 00 ab 03 c0       	add    eax,0xc003ab00
c001986c:	50                   	push   eax
c001986d:	e8 7e 6c fe ff       	call   c00004f0 <memset>
c0019872:	58                   	pop    eax
c0019873:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c0019878:	5a                   	pop    edx
c0019879:	c1 e0 08             	shl    eax,0x8
c001987c:	53                   	push   ebx
c001987d:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019882:	50                   	push   eax
c0019883:	e8 b8 6d fe ff       	call   c0000640 <strcpy>
c0019888:	89 d8                	mov    eax,ebx
c001988a:	e8 1d ff ff ff       	call   c00197ac <KiGetSymlinkHash(char const*)>
c001988f:	59                   	pop    ecx
c0019890:	0f b7 d8             	movzx  ebx,ax
c0019893:	58                   	pop    eax
c0019894:	53                   	push   ebx
c0019895:	68 2e 1c 03 c0       	push   0xc0031c2e
c001989a:	e8 ae f9 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c001989f:	89 d8                	mov    eax,ebx
c00198a1:	ba 01 00 00 00       	mov    edx,0x1
c00198a6:	e8 c7 fd ff ff       	call   c0019672 <KiSetHashInTable(unsigned short, bool)>
c00198ab:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c00198b0:	83 c4 10             	add    esp,0x10
c00198b3:	40                   	inc    eax
c00198b4:	a3 c0 aa 03 c0       	mov    ds:0xc003aac0,eax
c00198b9:	83 f8 03             	cmp    eax,0x3
c00198bc:	7e 09                	jle    c00198c7 <KeRegisterSymlink(char const*, unsigned long long)+0x8d>
c00198be:	83 c4 08             	add    esp,0x8
c00198c1:	5b                   	pop    ebx
c00198c2:	e9 db fd ff ff       	jmp    c00196a2 <KiFlushSymlinkChanges()>
c00198c7:	83 c4 08             	add    esp,0x8
c00198ca:	5b                   	pop    ebx
c00198cb:	c3                   	ret    

c00198cc <KeInitialiseSymlinks()>:
c00198cc:	57                   	push   edi
c00198cd:	56                   	push   esi
c00198ce:	53                   	push   ebx
c00198cf:	81 ec 14 01 00 00    	sub    esp,0x114
c00198d5:	c7 05 00 cf 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003cf00,0x0
c00198df:	68 00 20 00 00       	push   0x2000
c00198e4:	c7 05 c0 aa 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003aac0,0x0
c00198ee:	6a 00                	push   0x0
c00198f0:	68 00 af 03 c0       	push   0xc003af00
c00198f5:	e8 f6 6b fe ff       	call   c00004f0 <memset>
c00198fa:	59                   	pop    ecx
c00198fb:	5b                   	pop    ebx
c00198fc:	ff 35 00 cf 03 c0    	push   DWORD PTR ds:0xc003cf00
c0019902:	68 42 1c 03 c0       	push   0xc0031c42
c0019907:	e8 41 f9 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c001990c:	5e                   	pop    esi
c001990d:	5f                   	pop    edi
c001990e:	6a 00                	push   0x0
c0019910:	68 a7 97 01 c0       	push   0xc00197a7
c0019915:	e8 d6 60 00 00       	call   c001f9f0 <KeRegisterAtexit(void (*)(void*), void*)>
c001991a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019921:	e8 98 ca ff ff       	call   c00163be <malloc>
c0019926:	83 c4 0c             	add    esp,0xc
c0019929:	89 c3                	mov    ebx,eax
c001992b:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019931:	68 9f 1b 03 c0       	push   0xc0031b9f
c0019936:	50                   	push   eax
c0019937:	e8 18 0b 00 00       	call   c001a454 <File::File(char const*, Process*)>
c001993c:	83 c4 10             	add    esp,0x10
c001993f:	85 db                	test   ebx,ebx
c0019941:	75 10                	jne    c0019953 <KeInitialiseSymlinks()+0x87>
c0019943:	83 ec 0c             	sub    esp,0xc
c0019946:	68 5f 1c 03 c0       	push   0xc0031c5f
c001994b:	e8 16 69 00 00       	call   c0020266 <KePanic(char const*)>
c0019950:	83 c4 10             	add    esp,0x10
c0019953:	83 ec 0c             	sub    esp,0xc
c0019956:	53                   	push   ebx
c0019957:	e8 da 0d 00 00       	call   c001a736 <File::exists()>
c001995c:	83 c4 10             	add    esp,0x10
c001995f:	84 c0                	test   al,al
c0019961:	75 3a                	jne    c001999d <KeInitialiseSymlinks()+0xd1>
c0019963:	52                   	push   edx
c0019964:	52                   	push   edx
c0019965:	6a 12                	push   0x12
c0019967:	53                   	push   ebx
c0019968:	e8 05 0b 00 00       	call   c001a472 <File::open(FileOpenMode)>
c001996d:	83 c4 10             	add    esp,0x10
c0019970:	85 c0                	test   eax,eax
c0019972:	74 10                	je     c0019984 <KeInitialiseSymlinks()+0xb8>
c0019974:	83 ec 0c             	sub    esp,0xc
c0019977:	68 7c 1c 03 c0       	push   0xc0031c7c
c001997c:	e8 e5 68 00 00       	call   c0020266 <KePanic(char const*)>
c0019981:	83 c4 10             	add    esp,0x10
c0019984:	83 ec 0c             	sub    esp,0xc
c0019987:	53                   	push   ebx
c0019988:	e8 43 0b 00 00       	call   c001a4d0 <File::close()>
c001998d:	83 c4 10             	add    esp,0x10
c0019990:	85 db                	test   ebx,ebx
c0019992:	0f 84 9e 00 00 00    	je     c0019a36 <KeInitialiseSymlinks()+0x16a>
c0019998:	e9 8d 00 00 00       	jmp    c0019a2a <KeInitialiseSymlinks()+0x15e>
c001999d:	50                   	push   eax
c001999e:	50                   	push   eax
c001999f:	6a 01                	push   0x1
c00199a1:	53                   	push   ebx
c00199a2:	e8 cb 0a 00 00       	call   c001a472 <File::open(FileOpenMode)>
c00199a7:	83 c4 10             	add    esp,0x10
c00199aa:	85 c0                	test   eax,eax
c00199ac:	74 10                	je     c00199be <KeInitialiseSymlinks()+0xf2>
c00199ae:	83 ec 0c             	sub    esp,0xc
c00199b1:	68 99 1c 03 c0       	push   0xc0031c99
c00199b6:	e8 ab 68 00 00       	call   c0020266 <KePanic(char const*)>
c00199bb:	83 c4 10             	add    esp,0x10
c00199be:	83 ec 0c             	sub    esp,0xc
c00199c1:	ff 05 00 cf 03 c0    	inc    DWORD PTR ds:0xc003cf00
c00199c7:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00199cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00199cd:	57                   	push   edi
c00199ce:	8d 74 24 20          	lea    esi,[esp+0x20]
c00199d2:	56                   	push   esi
c00199d3:	6a 00                	push   0x0
c00199d5:	68 00 01 00 00       	push   0x100
c00199da:	53                   	push   ebx
c00199db:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00199de:	83 c4 20             	add    esp,0x20
c00199e1:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00199e9:	75 33                	jne    c0019a1e <KeInitialiseSymlinks()+0x152>
c00199eb:	83 ec 0c             	sub    esp,0xc
c00199ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00199f0:	57                   	push   edi
c00199f1:	8d 54 24 18          	lea    edx,[esp+0x18]
c00199f5:	52                   	push   edx
c00199f6:	6a 00                	push   0x0
c00199f8:	6a 08                	push   0x8
c00199fa:	53                   	push   ebx
c00199fb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00199fe:	83 c4 20             	add    esp,0x20
c0019a01:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019a06:	75 16                	jne    c0019a1e <KeInitialiseSymlinks()+0x152>
c0019a08:	89 f0                	mov    eax,esi
c0019a0a:	e8 9d fd ff ff       	call   c00197ac <KiGetSymlinkHash(char const*)>
c0019a0f:	ba 01 00 00 00       	mov    edx,0x1
c0019a14:	0f b7 c0             	movzx  eax,ax
c0019a17:	e8 56 fc ff ff       	call   c0019672 <KiSetHashInTable(unsigned short, bool)>
c0019a1c:	eb a0                	jmp    c00199be <KeInitialiseSymlinks()+0xf2>
c0019a1e:	83 ec 0c             	sub    esp,0xc
c0019a21:	53                   	push   ebx
c0019a22:	e8 a9 0a 00 00       	call   c001a4d0 <File::close()>
c0019a27:	83 c4 10             	add    esp,0x10
c0019a2a:	83 ec 0c             	sub    esp,0xc
c0019a2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a2f:	53                   	push   ebx
c0019a30:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a33:	83 c4 10             	add    esp,0x10
c0019a36:	81 c4 10 01 00 00    	add    esp,0x110
c0019a3c:	5b                   	pop    ebx
c0019a3d:	5e                   	pop    esi
c0019a3e:	5f                   	pop    edi
c0019a3f:	c3                   	ret    

c0019a40 <KiIsSymlinkRegistered(char const*)>:
c0019a40:	55                   	push   ebp
c0019a41:	57                   	push   edi
c0019a42:	56                   	push   esi
c0019a43:	53                   	push   ebx
c0019a44:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019a4a:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0019a51:	89 f0                	mov    eax,esi
c0019a53:	e8 54 fd ff ff       	call   c00197ac <KiGetSymlinkHash(char const*)>
c0019a58:	0f b7 c0             	movzx  eax,ax
c0019a5b:	53                   	push   ebx
c0019a5c:	56                   	push   esi
c0019a5d:	50                   	push   eax
c0019a5e:	68 b4 1c 03 c0       	push   0xc0031cb4
c0019a63:	e8 e5 f7 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0019a68:	89 f0                	mov    eax,esi
c0019a6a:	e8 3d fd ff ff       	call   c00197ac <KiGetSymlinkHash(char const*)>
c0019a6f:	0f b7 c0             	movzx  eax,ax
c0019a72:	e8 e1 fb ff ff       	call   c0019658 <KiIsHashInTable(unsigned short)>
c0019a77:	83 c4 10             	add    esp,0x10
c0019a7a:	88 c1                	mov    cl,al
c0019a7c:	31 d2                	xor    edx,edx
c0019a7e:	31 c0                	xor    eax,eax
c0019a80:	84 c9                	test   cl,cl
c0019a82:	0f 84 31 01 00 00    	je     c0019bb9 <KiIsSymlinkRegistered(char const*)+0x179>
c0019a88:	31 db                	xor    ebx,ebx
c0019a8a:	39 1d c0 aa 03 c0    	cmp    DWORD PTR ds:0xc003aac0,ebx
c0019a90:	7e 30                	jle    c0019ac2 <KiIsSymlinkRegistered(char const*)+0x82>
c0019a92:	89 d8                	mov    eax,ebx
c0019a94:	51                   	push   ecx
c0019a95:	c1 e0 08             	shl    eax,0x8
c0019a98:	51                   	push   ecx
c0019a99:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019a9e:	50                   	push   eax
c0019a9f:	56                   	push   esi
c0019aa0:	e8 ab 6c fe ff       	call   c0000750 <strcmp>
c0019aa5:	83 c4 10             	add    esp,0x10
c0019aa8:	85 c0                	test   eax,eax
c0019aaa:	75 13                	jne    c0019abf <KiIsSymlinkRegistered(char const*)+0x7f>
c0019aac:	8b 04 dd e0 aa 03 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffc5520]
c0019ab3:	8b 14 dd e4 aa 03 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffc551c]
c0019aba:	e9 fa 00 00 00       	jmp    c0019bb9 <KiIsSymlinkRegistered(char const*)+0x179>
c0019abf:	43                   	inc    ebx
c0019ac0:	eb c8                	jmp    c0019a8a <KiIsSymlinkRegistered(char const*)+0x4a>
c0019ac2:	83 ec 0c             	sub    esp,0xc
c0019ac5:	68 14 01 00 00       	push   0x114
c0019aca:	e8 ef c8 ff ff       	call   c00163be <malloc>
c0019acf:	83 c4 0c             	add    esp,0xc
c0019ad2:	89 c3                	mov    ebx,eax
c0019ad4:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019ada:	68 9f 1b 03 c0       	push   0xc0031b9f
c0019adf:	50                   	push   eax
c0019ae0:	e8 6f 09 00 00       	call   c001a454 <File::File(char const*, Process*)>
c0019ae5:	83 c4 10             	add    esp,0x10
c0019ae8:	85 db                	test   ebx,ebx
c0019aea:	75 12                	jne    c0019afe <KiIsSymlinkRegistered(char const*)+0xbe>
c0019aec:	83 ec 0c             	sub    esp,0xc
c0019aef:	68 c9 1c 03 c0       	push   0xc0031cc9
c0019af4:	e8 6d 67 00 00       	call   c0020266 <KePanic(char const*)>
c0019af9:	83 c4 10             	add    esp,0x10
c0019afc:	eb 10                	jmp    c0019b0e <KiIsSymlinkRegistered(char const*)+0xce>
c0019afe:	83 ec 0c             	sub    esp,0xc
c0019b01:	53                   	push   ebx
c0019b02:	e8 2f 0c 00 00       	call   c001a736 <File::exists()>
c0019b07:	83 c4 10             	add    esp,0x10
c0019b0a:	84 c0                	test   al,al
c0019b0c:	74 de                	je     c0019aec <KiIsSymlinkRegistered(char const*)+0xac>
c0019b0e:	52                   	push   edx
c0019b0f:	52                   	push   edx
c0019b10:	6a 01                	push   0x1
c0019b12:	53                   	push   ebx
c0019b13:	e8 5a 09 00 00       	call   c001a472 <File::open(FileOpenMode)>
c0019b18:	83 c4 10             	add    esp,0x10
c0019b1b:	85 c0                	test   eax,eax
c0019b1d:	74 10                	je     c0019b2f <KiIsSymlinkRegistered(char const*)+0xef>
c0019b1f:	83 ec 0c             	sub    esp,0xc
c0019b22:	68 e4 1c 03 c0       	push   0xc0031ce4
c0019b27:	e8 3a 67 00 00       	call   c0020266 <KePanic(char const*)>
c0019b2c:	83 c4 10             	add    esp,0x10
c0019b2f:	83 ec 0c             	sub    esp,0xc
c0019b32:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b34:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0019b38:	55                   	push   ebp
c0019b39:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0019b3d:	57                   	push   edi
c0019b3e:	6a 00                	push   0x0
c0019b40:	68 00 01 00 00       	push   0x100
c0019b45:	53                   	push   ebx
c0019b46:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019b49:	83 c4 20             	add    esp,0x20
c0019b4c:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0019b54:	75 4b                	jne    c0019ba1 <KiIsSymlinkRegistered(char const*)+0x161>
c0019b56:	83 ec 0c             	sub    esp,0xc
c0019b59:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b5b:	55                   	push   ebp
c0019b5c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019b60:	52                   	push   edx
c0019b61:	6a 00                	push   0x0
c0019b63:	6a 08                	push   0x8
c0019b65:	53                   	push   ebx
c0019b66:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019b69:	83 c4 20             	add    esp,0x20
c0019b6c:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019b71:	75 2e                	jne    c0019ba1 <KiIsSymlinkRegistered(char const*)+0x161>
c0019b73:	50                   	push   eax
c0019b74:	50                   	push   eax
c0019b75:	57                   	push   edi
c0019b76:	56                   	push   esi
c0019b77:	e8 d4 6b fe ff       	call   c0000750 <strcmp>
c0019b7c:	83 c4 10             	add    esp,0x10
c0019b7f:	85 c0                	test   eax,eax
c0019b81:	75 ac                	jne    c0019b2f <KiIsSymlinkRegistered(char const*)+0xef>
c0019b83:	83 ec 0c             	sub    esp,0xc
c0019b86:	53                   	push   ebx
c0019b87:	e8 44 09 00 00       	call   c001a4d0 <File::close()>
c0019b8c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b91:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019b94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019b98:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019b9c:	83 c4 10             	add    esp,0x10
c0019b9f:	eb 18                	jmp    c0019bb9 <KiIsSymlinkRegistered(char const*)+0x179>
c0019ba1:	83 ec 0c             	sub    esp,0xc
c0019ba4:	53                   	push   ebx
c0019ba5:	e8 26 09 00 00       	call   c001a4d0 <File::close()>
c0019baa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019bac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019baf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019bb2:	83 c4 10             	add    esp,0x10
c0019bb5:	31 c0                	xor    eax,eax
c0019bb7:	31 d2                	xor    edx,edx
c0019bb9:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019bbf:	5b                   	pop    ebx
c0019bc0:	5e                   	pop    esi
c0019bc1:	5f                   	pop    edi
c0019bc2:	5d                   	pop    ebp
c0019bc3:	c3                   	ret    

c0019bc4 <KeDereferenceSymlink(char const*, char*)>:
c0019bc4:	55                   	push   ebp
c0019bc5:	57                   	push   edi
c0019bc6:	56                   	push   esi
c0019bc7:	53                   	push   ebx
c0019bc8:	83 ec 48             	sub    esp,0x48
c0019bcb:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0019bcf:	56                   	push   esi
c0019bd0:	e8 6b fe ff ff       	call   c0019a40 <KiIsSymlinkRegistered(char const*)>
c0019bd5:	83 c4 10             	add    esp,0x10
c0019bd8:	89 c7                	mov    edi,eax
c0019bda:	89 d0                	mov    eax,edx
c0019bdc:	09 f8                	or     eax,edi
c0019bde:	75 07                	jne    c0019be7 <KeDereferenceSymlink(char const*, char*)+0x23>
c0019be0:	31 c0                	xor    eax,eax
c0019be2:	e9 7c 01 00 00       	jmp    c0019d63 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019be7:	83 ec 0c             	sub    esp,0xc
c0019bea:	89 d5                	mov    ebp,edx
c0019bec:	68 14 01 00 00       	push   0x114
c0019bf1:	e8 c8 c7 ff ff       	call   c00163be <malloc>
c0019bf6:	83 c4 0c             	add    esp,0xc
c0019bf9:	89 c3                	mov    ebx,eax
c0019bfb:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019c01:	56                   	push   esi
c0019c02:	50                   	push   eax
c0019c03:	e8 4c 08 00 00       	call   c001a454 <File::File(char const*, Process*)>
c0019c08:	83 c4 10             	add    esp,0x10
c0019c0b:	85 db                	test   ebx,ebx
c0019c0d:	0f 84 32 01 00 00    	je     c0019d45 <KeDereferenceSymlink(char const*, char*)+0x181>
c0019c13:	56                   	push   esi
c0019c14:	56                   	push   esi
c0019c15:	6a 01                	push   0x1
c0019c17:	53                   	push   ebx
c0019c18:	e8 55 08 00 00       	call   c001a472 <File::open(FileOpenMode)>
c0019c1d:	83 c4 10             	add    esp,0x10
c0019c20:	85 c0                	test   eax,eax
c0019c22:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c24:	74 09                	je     c0019c2f <KeDereferenceSymlink(char const*, char*)+0x6b>
c0019c26:	83 ec 0c             	sub    esp,0xc
c0019c29:	53                   	push   ebx
c0019c2a:	e9 10 01 00 00       	jmp    c0019d3f <KeDereferenceSymlink(char const*, char*)+0x17b>
c0019c2f:	83 ec 0c             	sub    esp,0xc
c0019c32:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019c36:	56                   	push   esi
c0019c37:	8d 54 24 37          	lea    edx,[esp+0x37]
c0019c3b:	52                   	push   edx
c0019c3c:	6a 00                	push   0x0
c0019c3e:	6a 08                	push   0x8
c0019c40:	53                   	push   ebx
c0019c41:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019c44:	83 c4 20             	add    esp,0x20
c0019c47:	85 c0                	test   eax,eax
c0019c49:	0f 85 e2 00 00 00    	jne    c0019d31 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c4f:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019c54:	0f 85 d7 00 00 00    	jne    c0019d31 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c5a:	83 ec 0c             	sub    esp,0xc
c0019c5d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c5f:	56                   	push   esi
c0019c60:	8d 54 24 20          	lea    edx,[esp+0x20]
c0019c64:	52                   	push   edx
c0019c65:	6a 00                	push   0x0
c0019c67:	6a 08                	push   0x8
c0019c69:	53                   	push   ebx
c0019c6a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019c6d:	83 c4 20             	add    esp,0x20
c0019c70:	85 c0                	test   eax,eax
c0019c72:	0f 85 b9 00 00 00    	jne    c0019d31 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c78:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019c7d:	0f 85 ae 00 00 00    	jne    c0019d31 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c83:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0019c87:	0f 85 53 ff ff ff    	jne    c0019be0 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019c8d:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0019c91:	0f 85 49 ff ff ff    	jne    c0019be0 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019c97:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019c9f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019ca7:	51                   	push   ecx
c0019ca8:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0019cac:	50                   	push   eax
c0019cad:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019cb1:	50                   	push   eax
c0019cb2:	53                   	push   ebx
c0019cb3:	e8 bc 0a 00 00       	call   c001a774 <File::stat(unsigned long long*, bool*)>
c0019cb8:	83 c4 10             	add    esp,0x10
c0019cbb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0019cc0:	75 6f                	jne    c0019d31 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019cc2:	31 c9                	xor    ecx,ecx
c0019cc4:	bf 0f 00 00 00       	mov    edi,0xf
c0019cc9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019ccd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019cd1:	39 c7                	cmp    edi,eax
c0019cd3:	89 cf                	mov    edi,ecx
c0019cd5:	19 d7                	sbb    edi,edx
c0019cd7:	73 58                	jae    c0019d31 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019cd9:	83 c0 f0             	add    eax,0xfffffff0
c0019cdc:	bf ff 00 00 00       	mov    edi,0xff
c0019ce1:	83 d2 ff             	adc    edx,0xffffffff
c0019ce4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019ce8:	39 c7                	cmp    edi,eax
c0019cea:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019cee:	19 d1                	sbb    ecx,edx
c0019cf0:	72 53                	jb     c0019d45 <KeDereferenceSymlink(char const*, char*)+0x181>
c0019cf2:	40                   	inc    eax
c0019cf3:	52                   	push   edx
c0019cf4:	50                   	push   eax
c0019cf5:	6a 00                	push   0x0
c0019cf7:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0019cfb:	e8 f0 67 fe ff       	call   c00004f0 <memset>
c0019d00:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d02:	89 34 24             	mov    DWORD PTR [esp],esi
c0019d05:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0019d09:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019d0d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019d11:	53                   	push   ebx
c0019d12:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019d15:	83 c4 20             	add    esp,0x20
c0019d18:	85 c0                	test   eax,eax
c0019d1a:	75 15                	jne    c0019d31 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019d1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d20:	89 c7                	mov    edi,eax
c0019d22:	c1 ff 1f             	sar    edi,0x1f
c0019d25:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0019d29:	75 06                	jne    c0019d31 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019d2b:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0019d2f:	74 19                	je     c0019d4a <KeDereferenceSymlink(char const*, char*)+0x186>
c0019d31:	83 ec 0c             	sub    esp,0xc
c0019d34:	53                   	push   ebx
c0019d35:	e8 96 07 00 00       	call   c001a4d0 <File::close()>
c0019d3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d3f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019d42:	83 c4 10             	add    esp,0x10
c0019d45:	83 c8 ff             	or     eax,0xffffffff
c0019d48:	eb 19                	jmp    c0019d63 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019d4a:	83 ec 0c             	sub    esp,0xc
c0019d4d:	53                   	push   ebx
c0019d4e:	e8 7d 07 00 00       	call   c001a4d0 <File::close()>
c0019d53:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d55:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d58:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019d5b:	83 c4 10             	add    esp,0x10
c0019d5e:	b8 01 00 00 00       	mov    eax,0x1
c0019d63:	83 c4 3c             	add    esp,0x3c
c0019d66:	5b                   	pop    ebx
c0019d67:	5e                   	pop    esi
c0019d68:	5f                   	pop    edi
c0019d69:	5d                   	pop    ebp
c0019d6a:	c3                   	ret    

c0019d6b <KeCreateSymlink(char const*, char const*)>:
c0019d6b:	55                   	push   ebp
c0019d6c:	57                   	push   edi
c0019d6d:	56                   	push   esi
c0019d6e:	53                   	push   ebx
c0019d6f:	83 ec 38             	sub    esp,0x38
c0019d72:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0019d76:	68 14 01 00 00       	push   0x114
c0019d7b:	e8 3e c6 ff ff       	call   c00163be <malloc>
c0019d80:	6a 00                	push   0x0
c0019d82:	89 c3                	mov    ebx,eax
c0019d84:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019d8a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0019d8e:	50                   	push   eax
c0019d8f:	e8 e2 05 00 00       	call   c001a376 <File::File(char const*, Process*, bool)>
c0019d94:	83 c4 20             	add    esp,0x20
c0019d97:	b8 01 00 00 00       	mov    eax,0x1
c0019d9c:	85 db                	test   ebx,ebx
c0019d9e:	0f 84 19 01 00 00    	je     c0019ebd <KeCreateSymlink(char const*, char const*)+0x152>
c0019da4:	52                   	push   edx
c0019da5:	52                   	push   edx
c0019da6:	6a 12                	push   0x12
c0019da8:	53                   	push   ebx
c0019da9:	e8 c4 06 00 00       	call   c001a472 <File::open(FileOpenMode)>
c0019dae:	83 c4 10             	add    esp,0x10
c0019db1:	85 c0                	test   eax,eax
c0019db3:	74 0b                	je     c0019dc0 <KeCreateSymlink(char const*, char const*)+0x55>
c0019db5:	83 ec 0c             	sub    esp,0xc
c0019db8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019dba:	53                   	push   ebx
c0019dbb:	e9 f2 00 00 00       	jmp    c0019eb2 <KeCreateSymlink(char const*, char const*)+0x147>
c0019dc0:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0019dc4:	be 31 1d 03 c0       	mov    esi,0xc0031d31
c0019dc9:	b9 09 00 00 00       	mov    ecx,0x9
c0019dce:	fc                   	cld    
c0019dcf:	83 ec 0c             	sub    esp,0xc
c0019dd2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019dd4:	8d 74 24 10          	lea    esi,[esp+0x10]
c0019dd8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019dda:	56                   	push   esi
c0019ddb:	8d 54 24 27          	lea    edx,[esp+0x27]
c0019ddf:	52                   	push   edx
c0019de0:	6a 00                	push   0x0
c0019de2:	6a 08                	push   0x8
c0019de4:	53                   	push   ebx
c0019de5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019de8:	83 c4 20             	add    esp,0x20
c0019deb:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019df0:	0f 85 ae 00 00 00    	jne    c0019ea4 <KeCreateSymlink(char const*, char const*)+0x139>
c0019df6:	85 c0                	test   eax,eax
c0019df8:	0f 85 a6 00 00 00    	jne    c0019ea4 <KeCreateSymlink(char const*, char const*)+0x139>
c0019dfe:	e8 ca f9 ff ff       	call   c00197cd <KiCreateSymlinkID()>
c0019e03:	83 ec 0c             	sub    esp,0xc
c0019e06:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019e0a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0019e0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e10:	56                   	push   esi
c0019e11:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019e15:	52                   	push   edx
c0019e16:	6a 00                	push   0x0
c0019e18:	6a 08                	push   0x8
c0019e1a:	53                   	push   ebx
c0019e1b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019e1e:	83 c4 20             	add    esp,0x20
c0019e21:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019e26:	75 7c                	jne    c0019ea4 <KeCreateSymlink(char const*, char const*)+0x139>
c0019e28:	85 c0                	test   eax,eax
c0019e2a:	75 78                	jne    c0019ea4 <KeCreateSymlink(char const*, char const*)+0x139>
c0019e2c:	83 ec 0c             	sub    esp,0xc
c0019e2f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e31:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019e34:	55                   	push   ebp
c0019e35:	e8 36 67 fe ff       	call   c0000570 <strlen>
c0019e3a:	89 34 24             	mov    DWORD PTR [esp],esi
c0019e3d:	31 d2                	xor    edx,edx
c0019e3f:	55                   	push   ebp
c0019e40:	52                   	push   edx
c0019e41:	50                   	push   eax
c0019e42:	53                   	push   ebx
c0019e43:	ff d7                	call   edi
c0019e45:	83 c4 14             	add    esp,0x14
c0019e48:	89 c6                	mov    esi,eax
c0019e4a:	55                   	push   ebp
c0019e4b:	e8 20 67 fe ff       	call   c0000570 <strlen>
c0019e50:	83 c4 10             	add    esp,0x10
c0019e53:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019e57:	75 4b                	jne    c0019ea4 <KeCreateSymlink(char const*, char const*)+0x139>
c0019e59:	85 f6                	test   esi,esi
c0019e5b:	75 47                	jne    c0019ea4 <KeCreateSymlink(char const*, char const*)+0x139>
c0019e5d:	50                   	push   eax
c0019e5e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019e62:	55                   	push   ebp
c0019e63:	68 ff 1c 03 c0       	push   0xc0031cff
c0019e68:	e8 e0 f3 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0019e6d:	83 c4 0c             	add    esp,0xc
c0019e70:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019e74:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019e78:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0019e7c:	e8 b9 f9 ff ff       	call   c001983a <KeRegisterSymlink(char const*, unsigned long long)>
c0019e81:	c7 04 24 24 1d 03 c0 	mov    DWORD PTR [esp],0xc0031d24
c0019e88:	e8 c0 f3 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0019e8d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e90:	e8 3b 06 00 00       	call   c001a4d0 <File::close()>
c0019e95:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e97:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e9a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019e9d:	83 c4 10             	add    esp,0x10
c0019ea0:	31 c0                	xor    eax,eax
c0019ea2:	eb 19                	jmp    c0019ebd <KeCreateSymlink(char const*, char const*)+0x152>
c0019ea4:	83 ec 0c             	sub    esp,0xc
c0019ea7:	53                   	push   ebx
c0019ea8:	e8 23 06 00 00       	call   c001a4d0 <File::close()>
c0019ead:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019eaf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019eb2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019eb5:	83 c4 10             	add    esp,0x10
c0019eb8:	b8 01 00 00 00       	mov    eax,0x1
c0019ebd:	83 c4 2c             	add    esp,0x2c
c0019ec0:	5b                   	pop    ebx
c0019ec1:	5e                   	pop    esi
c0019ec2:	5f                   	pop    edi
c0019ec3:	5d                   	pop    ebp
c0019ec4:	c3                   	ret    
c0019ec5:	90                   	nop

c0019ec6 <File::read(unsigned long long, void*, int*)>:
c0019ec6:	53                   	push   ebx
c0019ec7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ecb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019ecf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0019ed6:	83 f8 19             	cmp    eax,0x19
c0019ed9:	77 35                	ja     c0019f10 <File::read(unsigned long long, void*, int*)+0x4a>
c0019edb:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0019ee2:	85 c0                	test   eax,eax
c0019ee4:	74 2a                	je     c0019f10 <File::read(unsigned long long, void*, int*)+0x4a>
c0019ee6:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0019eec:	85 c0                	test   eax,eax
c0019eee:	74 20                	je     c0019f10 <File::read(unsigned long long, void*, int*)+0x4a>
c0019ef0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0019ef4:	74 21                	je     c0019f17 <File::read(unsigned long long, void*, int*)+0x51>
c0019ef6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019ef8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019efc:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0019f02:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f06:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019f0a:	5b                   	pop    ebx
c0019f0b:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0019f0e:	ff e0                	jmp    eax
c0019f10:	b8 0b 00 00 00       	mov    eax,0xb
c0019f15:	eb 05                	jmp    c0019f1c <File::read(unsigned long long, void*, int*)+0x56>
c0019f17:	b8 05 00 00 00       	mov    eax,0x5
c0019f1c:	5b                   	pop    ebx
c0019f1d:	c3                   	ret    

c0019f1e <File::write(unsigned long long, void*, int*)>:
c0019f1e:	53                   	push   ebx
c0019f1f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019f23:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019f27:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0019f2e:	83 f8 19             	cmp    eax,0x19
c0019f31:	77 35                	ja     c0019f68 <File::write(unsigned long long, void*, int*)+0x4a>
c0019f33:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0019f3a:	85 c0                	test   eax,eax
c0019f3c:	74 2a                	je     c0019f68 <File::write(unsigned long long, void*, int*)+0x4a>
c0019f3e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0019f44:	85 c0                	test   eax,eax
c0019f46:	74 20                	je     c0019f68 <File::write(unsigned long long, void*, int*)+0x4a>
c0019f48:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0019f4c:	74 21                	je     c0019f6f <File::write(unsigned long long, void*, int*)+0x51>
c0019f4e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019f50:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019f54:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0019f5a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f5e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019f62:	5b                   	pop    ebx
c0019f63:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0019f66:	ff e0                	jmp    eax
c0019f68:	b8 0b 00 00 00       	mov    eax,0xb
c0019f6d:	eb 05                	jmp    c0019f74 <File::write(unsigned long long, void*, int*)+0x56>
c0019f6f:	b8 05 00 00 00       	mov    eax,0x5
c0019f74:	5b                   	pop    ebx
c0019f75:	c3                   	ret    

c0019f76 <Directory::read(unsigned long long, void*, int*)>:
c0019f76:	53                   	push   ebx
c0019f77:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019f7b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019f7f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0019f86:	83 f8 19             	cmp    eax,0x19
c0019f89:	77 35                	ja     c0019fc0 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0019f8b:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0019f92:	85 c0                	test   eax,eax
c0019f94:	74 2a                	je     c0019fc0 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0019f96:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0019f9c:	85 c0                	test   eax,eax
c0019f9e:	74 20                	je     c0019fc0 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0019fa0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0019fa4:	74 21                	je     c0019fc7 <Directory::read(unsigned long long, void*, int*)+0x51>
c0019fa6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019fa8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019fac:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0019fb2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019fb6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019fba:	5b                   	pop    ebx
c0019fbb:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0019fbe:	ff e0                	jmp    eax
c0019fc0:	b8 0b 00 00 00       	mov    eax,0xb
c0019fc5:	eb 05                	jmp    c0019fcc <Directory::read(unsigned long long, void*, int*)+0x56>
c0019fc7:	b8 05 00 00 00       	mov    eax,0x5
c0019fcc:	5b                   	pop    ebx
c0019fcd:	c3                   	ret    

c0019fce <Directory::write(unsigned long long, void*, int*)>:
c0019fce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fd2:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0019fd9:	b8 0b 00 00 00       	mov    eax,0xb
c0019fde:	83 fa 19             	cmp    edx,0x19
c0019fe1:	77 18                	ja     c0019ffb <Directory::write(unsigned long long, void*, int*)+0x2d>
c0019fe3:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c0019fea:	85 d2                	test   edx,edx
c0019fec:	74 0d                	je     c0019ffb <Directory::write(unsigned long long, void*, int*)+0x2d>
c0019fee:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0019ff5:	19 c0                	sbb    eax,eax
c0019ff7:	83 e0 0a             	and    eax,0xa
c0019ffa:	40                   	inc    eax
c0019ffb:	c3                   	ret    

c0019ffc <File::isAtty()>:
c0019ffc:	31 c0                	xor    eax,eax
c0019ffe:	c3                   	ret    
c0019fff:	90                   	nop

c001a000 <Directory::isAtty()>:
c001a000:	31 c0                	xor    eax,eax
c001a002:	c3                   	ret    
c001a003:	90                   	nop

c001a004 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a004:	b8 0a 00 00 00       	mov    eax,0xa
c001a009:	c3                   	ret    

c001a00a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001a00a:	b8 0a 00 00 00       	mov    eax,0xa
c001a00f:	c3                   	ret    

c001a010 <Filesystem::allocateSwapfile(char const*, int)>:
c001a010:	31 c0                	xor    eax,eax
c001a012:	31 d2                	xor    edx,edx
c001a014:	c3                   	ret    
c001a015:	90                   	nop

c001a016 <File::~File()>:
c001a016:	83 ec 0c             	sub    esp,0xc
c001a019:	ba f0 1d 03 c0       	mov    edx,0xc0031df0
c001a01e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a022:	89 10                	mov    DWORD PTR [eax],edx
c001a024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a028:	83 ec 0c             	sub    esp,0xc
c001a02b:	50                   	push   eax
c001a02c:	e8 7b dc ff ff       	call   c0017cac <UnixFile::~UnixFile()>
c001a031:	83 c4 10             	add    esp,0x10
c001a034:	90                   	nop
c001a035:	83 c4 0c             	add    esp,0xc
c001a038:	c3                   	ret    
c001a039:	90                   	nop

c001a03a <File::~File()>:
c001a03a:	83 ec 0c             	sub    esp,0xc
c001a03d:	83 ec 0c             	sub    esp,0xc
c001a040:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a044:	e8 cd ff ff ff       	call   c001a016 <File::~File()>
c001a049:	83 c4 10             	add    esp,0x10
c001a04c:	83 ec 08             	sub    esp,0x8
c001a04f:	68 14 01 00 00       	push   0x114
c001a054:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a058:	e8 c3 f0 ff ff       	call   c0019120 <operator delete(void*, unsigned long)>
c001a05d:	83 c4 10             	add    esp,0x10
c001a060:	83 c4 0c             	add    esp,0xc
c001a063:	c3                   	ret    

c001a064 <Directory::~Directory()>:
c001a064:	83 ec 0c             	sub    esp,0xc
c001a067:	ba 0c 1e 03 c0       	mov    edx,0xc0031e0c
c001a06c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a070:	89 10                	mov    DWORD PTR [eax],edx
c001a072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a076:	83 ec 0c             	sub    esp,0xc
c001a079:	50                   	push   eax
c001a07a:	e8 2d dc ff ff       	call   c0017cac <UnixFile::~UnixFile()>
c001a07f:	83 c4 10             	add    esp,0x10
c001a082:	90                   	nop
c001a083:	83 c4 0c             	add    esp,0xc
c001a086:	c3                   	ret    
c001a087:	90                   	nop

c001a088 <Directory::~Directory()>:
c001a088:	83 ec 0c             	sub    esp,0xc
c001a08b:	83 ec 0c             	sub    esp,0xc
c001a08e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a092:	e8 cd ff ff ff       	call   c001a064 <Directory::~Directory()>
c001a097:	83 c4 10             	add    esp,0x10
c001a09a:	83 ec 08             	sub    esp,0x8
c001a09d:	68 14 01 00 00       	push   0x114
c001a0a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0a6:	e8 75 f0 ff ff       	call   c0019120 <operator delete(void*, unsigned long)>
c001a0ab:	83 c4 10             	add    esp,0x10
c001a0ae:	83 c4 0c             	add    esp,0xc
c001a0b1:	c3                   	ret    

c001a0b2 <Filesystem::Filesystem()>:
c001a0b2:	ba 84 1d 03 c0       	mov    edx,0xc0031d84
c001a0b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0bb:	89 10                	mov    DWORD PTR [eax],edx
c001a0bd:	8b 15 04 cf 03 c0    	mov    edx,DWORD PTR ds:0xc003cf04
c001a0c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0c7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a0ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0ce:	a3 04 cf 03 c0       	mov    ds:0xc003cf04,eax
c001a0d3:	90                   	nop
c001a0d4:	c3                   	ret    
c001a0d5:	90                   	nop

c001a0d6 <Filesystem::~Filesystem()>:
c001a0d6:	ba 84 1d 03 c0       	mov    edx,0xc0031d84
c001a0db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0df:	89 10                	mov    DWORD PTR [eax],edx
c001a0e1:	90                   	nop
c001a0e2:	c3                   	ret    
c001a0e3:	90                   	nop

c001a0e4 <Filesystem::~Filesystem()>:
c001a0e4:	83 ec 0c             	sub    esp,0xc
c001a0e7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a0eb:	e8 e6 ff ff ff       	call   c001a0d6 <Filesystem::~Filesystem()>
c001a0f0:	83 c4 04             	add    esp,0x4
c001a0f3:	83 ec 08             	sub    esp,0x8
c001a0f6:	6a 08                	push   0x8
c001a0f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0fc:	e8 1f f0 ff ff       	call   c0019120 <operator delete(void*, unsigned long)>
c001a101:	83 c4 10             	add    esp,0x10
c001a104:	83 c4 0c             	add    esp,0xc
c001a107:	c3                   	ret    

c001a108 <Fs::getcwd(Process*, char*, int)>:
c001a108:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a10c:	31 c0                	xor    eax,eax
c001a10e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001a111:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001a115:	7d 15                	jge    c001a12c <Fs::getcwd(Process*, char*, int)+0x24>
c001a117:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001a11b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001a122:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001a125:	84 c9                	test   cl,cl
c001a127:	74 06                	je     c001a12f <Fs::getcwd(Process*, char*, int)+0x27>
c001a129:	40                   	inc    eax
c001a12a:	eb e2                	jmp    c001a10e <Fs::getcwd(Process*, char*, int)+0x6>
c001a12c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001a12f:	31 c0                	xor    eax,eax
c001a131:	c3                   	ret    

c001a132 <Fs::initVFS()>:
c001a132:	83 ec 18             	sub    esp,0x18
c001a135:	6a 08                	push   0x8
c001a137:	e8 82 c2 ff ff       	call   c00163be <malloc>
c001a13c:	89 04 24             	mov    DWORD PTR [esp],eax
c001a13f:	e8 d8 e9 00 00       	call   c0028b1c <FAT::FAT()>
c001a144:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001a14b:	e8 6e c2 ff ff       	call   c00163be <malloc>
c001a150:	89 04 24             	mov    DWORD PTR [esp],eax
c001a153:	e8 f0 f8 00 00       	call   c0029a48 <ISO9660::ISO9660()>
c001a158:	83 c4 1c             	add    esp,0x1c
c001a15b:	c3                   	ret    

c001a15c <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c001a15c:	55                   	push   ebp
c001a15d:	57                   	push   edi
c001a15e:	56                   	push   esi
c001a15f:	53                   	push   ebx
c001a160:	81 ec 10 04 00 00    	sub    esp,0x410
c001a166:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c001a16d:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c001a174:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c001a17c:	68 00 04 00 00       	push   0x400
c001a181:	6a 00                	push   0x0
c001a183:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a187:	57                   	push   edi
c001a188:	e8 63 63 fe ff       	call   c00004f0 <memset>
c001a18d:	83 c4 10             	add    esp,0x10
c001a190:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c001a194:	75 0b                	jne    c001a1a1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c001a196:	50                   	push   eax
c001a197:	50                   	push   eax
c001a198:	55                   	push   ebp
c001a199:	57                   	push   edi
c001a19a:	e8 a1 64 fe ff       	call   c0000640 <strcpy>
c001a19f:	eb 51                	jmp    c001a1f2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c001a1a1:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001a1a5:	83 f8 5c             	cmp    eax,0x5c
c001a1a8:	74 05                	je     c001a1af <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c001a1aa:	83 f8 2f             	cmp    eax,0x2f
c001a1ad:	75 1e                	jne    c001a1cd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c001a1af:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001a1b6:	8a 00                	mov    al,BYTE PTR [eax]
c001a1b8:	3c 60                	cmp    al,0x60
c001a1ba:	7e 03                	jle    c001a1bf <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c001a1bc:	83 e8 20             	sub    eax,0x20
c001a1bf:	88 04 24             	mov    BYTE PTR [esp],al
c001a1c2:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001a1c9:	50                   	push   eax
c001a1ca:	50                   	push   eax
c001a1cb:	eb 1e                	jmp    c001a1eb <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c001a1cd:	50                   	push   eax
c001a1ce:	50                   	push   eax
c001a1cf:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c001a1d6:	57                   	push   edi
c001a1d7:	e8 64 64 fe ff       	call   c0000640 <strcpy>
c001a1dc:	58                   	pop    eax
c001a1dd:	5a                   	pop    edx
c001a1de:	68 7f 2e 03 c0       	push   0xc0032e7f
c001a1e3:	57                   	push   edi
c001a1e4:	e8 57 66 fe ff       	call   c0000840 <strcat>
c001a1e9:	59                   	pop    ecx
c001a1ea:	58                   	pop    eax
c001a1eb:	55                   	push   ebp
c001a1ec:	57                   	push   edi
c001a1ed:	e8 4e 66 fe ff       	call   c0000840 <strcat>
c001a1f2:	83 c4 10             	add    esp,0x10
c001a1f5:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a1f8:	3c 60                	cmp    al,0x60
c001a1fa:	7e 03                	jle    c001a1ff <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c001a1fc:	83 e8 20             	sub    eax,0x20
c001a1ff:	88 04 24             	mov    BYTE PTR [esp],al
c001a202:	88 06                	mov    BYTE PTR [esi],al
c001a204:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001a20b:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c001a211:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c001a215:	bf 03 00 00 00       	mov    edi,0x3
c001a21a:	b8 03 00 00 00       	mov    eax,0x3
c001a21f:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c001a223:	89 e9                	mov    ecx,ebp
c001a225:	85 ed                	test   ebp,ebp
c001a227:	0f 84 97 00 00 00    	je     c001a2c4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c001a22d:	8d 57 01             	lea    edx,[edi+0x1]
c001a230:	83 fd 5c             	cmp    ebp,0x5c
c001a233:	74 05                	je     c001a23a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c001a235:	83 fd 2f             	cmp    ebp,0x2f
c001a238:	75 12                	jne    c001a24c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a23a:	89 c5                	mov    ebp,eax
c001a23c:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c001a241:	74 09                	je     c001a24c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a243:	40                   	inc    eax
c001a244:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c001a248:	89 d7                	mov    edi,edx
c001a24a:	eb d3                	jmp    c001a21f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c001a24c:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c001a251:	0f be e9             	movsx  ebp,cl
c001a254:	75 5e                	jne    c001a2b4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c001a256:	83 fd 2e             	cmp    ebp,0x2e
c001a259:	75 59                	jne    c001a2b4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c001a25b:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c001a25f:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c001a264:	74 18                	je     c001a27e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c001a266:	83 fd 2e             	cmp    ebp,0x2e
c001a269:	74 53                	je     c001a2be <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c001a26b:	89 fa                	mov    edx,edi
c001a26d:	42                   	inc    edx
c001a26e:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c001a272:	83 f9 2f             	cmp    ecx,0x2f
c001a275:	74 f6                	je     c001a26d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c001a277:	83 f9 5c             	cmp    ecx,0x5c
c001a27a:	74 f1                	je     c001a26d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c001a27c:	eb ca                	jmp    c001a248 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a27e:	83 fd 2e             	cmp    ebp,0x2e
c001a281:	74 3b                	je     c001a2be <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c001a283:	83 f8 03             	cmp    eax,0x3
c001a286:	74 c0                	je     c001a248 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a288:	42                   	inc    edx
c001a289:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c001a28d:	83 f9 5c             	cmp    ecx,0x5c
c001a290:	74 f6                	je     c001a288 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c001a292:	83 f9 2f             	cmp    ecx,0x2f
c001a295:	74 f1                	je     c001a288 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c001a297:	48                   	dec    eax
c001a298:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c001a29c:	75 06                	jne    c001a2a4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c001a29e:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a2a2:	eb f3                	jmp    c001a297 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c001a2a4:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c001a2a8:	74 07                	je     c001a2b1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c001a2aa:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a2ae:	48                   	dec    eax
c001a2af:	eb f3                	jmp    c001a2a4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c001a2b1:	40                   	inc    eax
c001a2b2:	eb 94                	jmp    c001a248 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a2b4:	83 fd 5c             	cmp    ebp,0x5c
c001a2b7:	74 8f                	je     c001a248 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a2b9:	83 fd 2f             	cmp    ebp,0x2f
c001a2bc:	74 8a                	je     c001a248 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a2be:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c001a2c1:	40                   	inc    eax
c001a2c2:	eb 84                	jmp    c001a248 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a2c4:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a2c8:	83 ec 0c             	sub    esp,0xc
c001a2cb:	56                   	push   esi
c001a2cc:	e8 9f 62 fe ff       	call   c0000570 <strlen>
c001a2d1:	83 c4 10             	add    esp,0x10
c001a2d4:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c001a2d9:	74 17                	je     c001a2f2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c001a2db:	83 ec 0c             	sub    esp,0xc
c001a2de:	56                   	push   esi
c001a2df:	e8 8c 62 fe ff       	call   c0000570 <strlen>
c001a2e4:	83 c4 10             	add    esp,0x10
c001a2e7:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c001a2ec:	74 04                	je     c001a2f2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c001a2ee:	31 ff                	xor    edi,edi
c001a2f0:	eb 5c                	jmp    c001a34e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c001a2f2:	83 ec 0c             	sub    esp,0xc
c001a2f5:	56                   	push   esi
c001a2f6:	e8 75 62 fe ff       	call   c0000570 <strlen>
c001a2fb:	83 c4 10             	add    esp,0x10
c001a2fe:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c001a303:	74 e9                	je     c001a2ee <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c001a305:	83 ec 0c             	sub    esp,0xc
c001a308:	56                   	push   esi
c001a309:	e8 62 62 fe ff       	call   c0000570 <strlen>
c001a30e:	83 c4 10             	add    esp,0x10
c001a311:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c001a316:	eb b0                	jmp    c001a2c8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c001a318:	52                   	push   edx
c001a319:	52                   	push   edx
c001a31a:	56                   	push   esi
c001a31b:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c001a31f:	55                   	push   ebp
c001a320:	e8 1b 63 fe ff       	call   c0000640 <strcpy>
c001a325:	59                   	pop    ecx
c001a326:	58                   	pop    eax
c001a327:	56                   	push   esi
c001a328:	55                   	push   ebp
c001a329:	e8 96 f8 ff ff       	call   c0019bc4 <KeDereferenceSymlink(char const*, char*)>
c001a32e:	83 c4 10             	add    esp,0x10
c001a331:	48                   	dec    eax
c001a332:	75 37                	jne    c001a36b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c001a334:	50                   	push   eax
c001a335:	56                   	push   esi
c001a336:	55                   	push   ebp
c001a337:	68 3a 1d 03 c0       	push   0xc0031d3a
c001a33c:	e8 0c ef ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c001a341:	83 c4 10             	add    esp,0x10
c001a344:	8d 47 01             	lea    eax,[edi+0x1]
c001a347:	83 ff 14             	cmp    edi,0x14
c001a34a:	74 08                	je     c001a354 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c001a34c:	89 c7                	mov    edi,eax
c001a34e:	85 db                	test   ebx,ebx
c001a350:	75 c6                	jne    c001a318 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c001a352:	eb 17                	jmp    c001a36b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c001a354:	83 ec 0c             	sub    esp,0xc
c001a357:	bf 15 00 00 00       	mov    edi,0x15
c001a35c:	68 55 1d 03 c0       	push   0xc0031d55
c001a361:	e8 00 5f 00 00       	call   c0020266 <KePanic(char const*)>
c001a366:	83 c4 10             	add    esp,0x10
c001a369:	eb e3                	jmp    c001a34e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c001a36b:	81 c4 0c 04 00 00    	add    esp,0x40c
c001a371:	5b                   	pop    ebx
c001a372:	5e                   	pop    esi
c001a373:	5f                   	pop    edi
c001a374:	5d                   	pop    ebp
c001a375:	c3                   	ret    

c001a376 <File::File(char const*, Process*, bool)>:
c001a376:	83 ec 1c             	sub    esp,0x1c
c001a379:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a37d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a381:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a385:	83 ec 08             	sub    esp,0x8
c001a388:	6a 00                	push   0x0
c001a38a:	50                   	push   eax
c001a38b:	e8 36 d7 ff ff       	call   c0017ac6 <UnixFile::UnixFile(int)>
c001a390:	83 c4 10             	add    esp,0x10
c001a393:	ba f0 1d 03 c0       	mov    edx,0xc0031df0
c001a398:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a39c:	89 10                	mov    DWORD PTR [eax],edx
c001a39e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a3a3:	85 c0                	test   eax,eax
c001a3a5:	74 0f                	je     c001a3b6 <File::File(char const*, Process*, bool)+0x40>
c001a3a7:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001a3ac:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a3b0:	74 04                	je     c001a3b6 <File::File(char const*, Process*, bool)+0x40>
c001a3b2:	b0 01                	mov    al,0x1
c001a3b4:	eb 02                	jmp    c001a3b8 <File::File(char const*, Process*, bool)+0x42>
c001a3b6:	b0 00                	mov    al,0x0
c001a3b8:	0f b6 c0             	movzx  eax,al
c001a3bb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a3bf:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001a3c5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a3c9:	83 c2 0d             	add    edx,0xd
c001a3cc:	50                   	push   eax
c001a3cd:	51                   	push   ecx
c001a3ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3d2:	52                   	push   edx
c001a3d3:	e8 84 fd ff ff       	call   c001a15c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a3d8:	83 c4 10             	add    esp,0x10
c001a3db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a3df:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001a3e2:	83 e8 41             	sub    eax,0x41
c001a3e5:	88 c2                	mov    dl,al
c001a3e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a3eb:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001a3f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a3f5:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001a3f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a3fd:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a403:	0f b6 c0             	movzx  eax,al
c001a406:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a40d:	85 c0                	test   eax,eax
c001a40f:	74 3e                	je     c001a44f <File::File(char const*, Process*, bool)+0xd9>
c001a411:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a415:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a41b:	0f b6 c0             	movzx  eax,al
c001a41e:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a425:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a42b:	85 c0                	test   eax,eax
c001a42d:	75 20                	jne    c001a44f <File::File(char const*, Process*, bool)+0xd9>
c001a42f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a433:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a439:	0f b6 c0             	movzx  eax,al
c001a43c:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a443:	83 ec 0c             	sub    esp,0xc
c001a446:	50                   	push   eax
c001a447:	e8 b2 21 00 00       	call   c001c5fe <LogicalDisk::mount()>
c001a44c:	83 c4 10             	add    esp,0x10
c001a44f:	90                   	nop
c001a450:	83 c4 1c             	add    esp,0x1c
c001a453:	c3                   	ret    

c001a454 <File::File(char const*, Process*)>:
c001a454:	83 ec 0c             	sub    esp,0xc
c001a457:	6a 01                	push   0x1
c001a459:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a45d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a461:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a465:	e8 0c ff ff ff       	call   c001a376 <File::File(char const*, Process*, bool)>
c001a46a:	83 c4 10             	add    esp,0x10
c001a46d:	90                   	nop
c001a46e:	83 c4 0c             	add    esp,0xc
c001a471:	c3                   	ret    

c001a472 <File::open(FileOpenMode)>:
c001a472:	53                   	push   ebx
c001a473:	b8 0b 00 00 00       	mov    eax,0xb
c001a478:	83 ec 08             	sub    esp,0x8
c001a47b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a47f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001a486:	83 fa 19             	cmp    edx,0x19
c001a489:	77 40                	ja     c001a4cb <File::open(FileOpenMode)+0x59>
c001a48b:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a492:	85 d2                	test   edx,edx
c001a494:	74 35                	je     c001a4cb <File::open(FileOpenMode)+0x59>
c001a496:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a49c:	85 d2                	test   edx,edx
c001a49e:	74 2b                	je     c001a4cb <File::open(FileOpenMode)+0x59>
c001a4a0:	b8 06 00 00 00       	mov    eax,0x6
c001a4a5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001a4a9:	75 20                	jne    c001a4cb <File::open(FileOpenMode)+0x59>
c001a4ab:	8b 02                	mov    eax,DWORD PTR [edx]
c001a4ad:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001a4b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a4b7:	51                   	push   ecx
c001a4b8:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001a4bb:	51                   	push   ecx
c001a4bc:	52                   	push   edx
c001a4bd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a4c0:	83 c4 10             	add    esp,0x10
c001a4c3:	85 c0                	test   eax,eax
c001a4c5:	75 04                	jne    c001a4cb <File::open(FileOpenMode)+0x59>
c001a4c7:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001a4cb:	83 c4 08             	add    esp,0x8
c001a4ce:	5b                   	pop    ebx
c001a4cf:	c3                   	ret    

c001a4d0 <File::close()>:
c001a4d0:	53                   	push   ebx
c001a4d1:	b8 0b 00 00 00       	mov    eax,0xb
c001a4d6:	83 ec 08             	sub    esp,0x8
c001a4d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a4dd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a4e4:	83 f9 19             	cmp    ecx,0x19
c001a4e7:	77 41                	ja     c001a52a <File::close()+0x5a>
c001a4e9:	8b 1c 8d 80 f3 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a4f0:	85 db                	test   ebx,ebx
c001a4f2:	74 36                	je     c001a52a <File::close()+0x5a>
c001a4f4:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001a4fb:	74 2d                	je     c001a52a <File::close()+0x5a>
c001a4fd:	b8 05 00 00 00       	mov    eax,0x5
c001a502:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a506:	74 22                	je     c001a52a <File::close()+0x5a>
c001a508:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001a50c:	8b 04 8d 80 f3 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc0c80]
c001a513:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a519:	53                   	push   ebx
c001a51a:	53                   	push   ebx
c001a51b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a51d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a523:	50                   	push   eax
c001a524:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c001a527:	83 c4 10             	add    esp,0x10
c001a52a:	83 c4 08             	add    esp,0x8
c001a52d:	5b                   	pop    ebx
c001a52e:	c3                   	ret    
c001a52f:	90                   	nop

c001a530 <File::seek(unsigned long long)>:
c001a530:	56                   	push   esi
c001a531:	53                   	push   ebx
c001a532:	b8 0b 00 00 00       	mov    eax,0xb
c001a537:	51                   	push   ecx
c001a538:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a53c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a540:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a547:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a54b:	83 fa 19             	cmp    edx,0x19
c001a54e:	77 31                	ja     c001a581 <File::seek(unsigned long long)+0x51>
c001a550:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a557:	85 d2                	test   edx,edx
c001a559:	74 26                	je     c001a581 <File::seek(unsigned long long)+0x51>
c001a55b:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a561:	85 d2                	test   edx,edx
c001a563:	74 1c                	je     c001a581 <File::seek(unsigned long long)+0x51>
c001a565:	b8 05 00 00 00       	mov    eax,0x5
c001a56a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a56e:	74 11                	je     c001a581 <File::seek(unsigned long long)+0x51>
c001a570:	8b 02                	mov    eax,DWORD PTR [edx]
c001a572:	53                   	push   ebx
c001a573:	51                   	push   ecx
c001a574:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a57a:	52                   	push   edx
c001a57b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a57e:	83 c4 10             	add    esp,0x10
c001a581:	5a                   	pop    edx
c001a582:	5b                   	pop    ebx
c001a583:	5e                   	pop    esi
c001a584:	c3                   	ret    
c001a585:	90                   	nop

c001a586 <File::truncate(unsigned long long)>:
c001a586:	56                   	push   esi
c001a587:	53                   	push   ebx
c001a588:	b8 0b 00 00 00       	mov    eax,0xb
c001a58d:	51                   	push   ecx
c001a58e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a592:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a596:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a59d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a5a1:	83 fa 19             	cmp    edx,0x19
c001a5a4:	77 31                	ja     c001a5d7 <File::truncate(unsigned long long)+0x51>
c001a5a6:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a5ad:	85 d2                	test   edx,edx
c001a5af:	74 26                	je     c001a5d7 <File::truncate(unsigned long long)+0x51>
c001a5b1:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a5b7:	85 d2                	test   edx,edx
c001a5b9:	74 1c                	je     c001a5d7 <File::truncate(unsigned long long)+0x51>
c001a5bb:	b8 05 00 00 00       	mov    eax,0x5
c001a5c0:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a5c4:	74 11                	je     c001a5d7 <File::truncate(unsigned long long)+0x51>
c001a5c6:	8b 02                	mov    eax,DWORD PTR [edx]
c001a5c8:	53                   	push   ebx
c001a5c9:	51                   	push   ecx
c001a5ca:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a5d0:	52                   	push   edx
c001a5d1:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001a5d4:	83 c4 10             	add    esp,0x10
c001a5d7:	5a                   	pop    edx
c001a5d8:	5b                   	pop    ebx
c001a5d9:	5e                   	pop    esi
c001a5da:	c3                   	ret    
c001a5db:	90                   	nop

c001a5dc <File::tell(unsigned long long*)>:
c001a5dc:	83 ec 0c             	sub    esp,0xc
c001a5df:	b8 0b 00 00 00       	mov    eax,0xb
c001a5e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a5e8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001a5ef:	83 fa 19             	cmp    edx,0x19
c001a5f2:	77 34                	ja     c001a628 <File::tell(unsigned long long*)+0x4c>
c001a5f4:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a5fb:	85 d2                	test   edx,edx
c001a5fd:	74 29                	je     c001a628 <File::tell(unsigned long long*)+0x4c>
c001a5ff:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a605:	85 d2                	test   edx,edx
c001a607:	74 1f                	je     c001a628 <File::tell(unsigned long long*)+0x4c>
c001a609:	b8 05 00 00 00       	mov    eax,0x5
c001a60e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001a612:	74 14                	je     c001a628 <File::tell(unsigned long long*)+0x4c>
c001a614:	50                   	push   eax
c001a615:	8b 02                	mov    eax,DWORD PTR [edx]
c001a617:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a61b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001a621:	52                   	push   edx
c001a622:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a625:	83 c4 10             	add    esp,0x10
c001a628:	83 c4 0c             	add    esp,0xc
c001a62b:	c3                   	ret    

c001a62c <File::rewind()>:
c001a62c:	83 ec 10             	sub    esp,0x10
c001a62f:	6a 00                	push   0x0
c001a631:	6a 00                	push   0x0
c001a633:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a637:	e8 f4 fe ff ff       	call   c001a530 <File::seek(unsigned long long)>
c001a63c:	83 c4 1c             	add    esp,0x1c
c001a63f:	c3                   	ret    

c001a640 <File::unlink()>:
c001a640:	83 ec 0c             	sub    esp,0xc
c001a643:	b8 0b 00 00 00       	mov    eax,0xb
c001a648:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a64c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a653:	83 f9 19             	cmp    ecx,0x19
c001a656:	77 2f                	ja     c001a687 <File::unlink()+0x47>
c001a658:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a65f:	85 c9                	test   ecx,ecx
c001a661:	74 24                	je     c001a687 <File::unlink()+0x47>
c001a663:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a669:	85 c9                	test   ecx,ecx
c001a66b:	74 1a                	je     c001a687 <File::unlink()+0x47>
c001a66d:	b8 06 00 00 00       	mov    eax,0x6
c001a672:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a676:	75 0f                	jne    c001a687 <File::unlink()+0x47>
c001a678:	83 c2 0d             	add    edx,0xd
c001a67b:	50                   	push   eax
c001a67c:	50                   	push   eax
c001a67d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a67f:	52                   	push   edx
c001a680:	51                   	push   ecx
c001a681:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001a684:	83 c4 10             	add    esp,0x10
c001a687:	83 c4 0c             	add    esp,0xc
c001a68a:	c3                   	ret    
c001a68b:	90                   	nop

c001a68c <File::rename(char const*)>:
c001a68c:	83 ec 0c             	sub    esp,0xc
c001a68f:	b8 0b 00 00 00       	mov    eax,0xb
c001a694:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a698:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a69f:	83 f9 19             	cmp    ecx,0x19
c001a6a2:	77 32                	ja     c001a6d6 <File::rename(char const*)+0x4a>
c001a6a4:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a6ab:	85 c9                	test   ecx,ecx
c001a6ad:	74 27                	je     c001a6d6 <File::rename(char const*)+0x4a>
c001a6af:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a6b5:	85 c9                	test   ecx,ecx
c001a6b7:	74 1d                	je     c001a6d6 <File::rename(char const*)+0x4a>
c001a6b9:	b8 06 00 00 00       	mov    eax,0x6
c001a6be:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a6c2:	75 12                	jne    c001a6d6 <File::rename(char const*)+0x4a>
c001a6c4:	83 c2 0d             	add    edx,0xd
c001a6c7:	50                   	push   eax
c001a6c8:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a6ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6ce:	52                   	push   edx
c001a6cf:	51                   	push   ecx
c001a6d0:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001a6d3:	83 c4 10             	add    esp,0x10
c001a6d6:	83 c4 0c             	add    esp,0xc
c001a6d9:	c3                   	ret    

c001a6da <File::chfatattr(unsigned char, unsigned char)>:
c001a6da:	57                   	push   edi
c001a6db:	b8 0b 00 00 00       	mov    eax,0xb
c001a6e0:	56                   	push   esi
c001a6e1:	53                   	push   ebx
c001a6e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a6e6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a6ea:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a6f1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a6f5:	83 f9 19             	cmp    ecx,0x19
c001a6f8:	77 37                	ja     c001a731 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a6fa:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a701:	85 c9                	test   ecx,ecx
c001a703:	74 2c                	je     c001a731 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a705:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a70b:	85 c9                	test   ecx,ecx
c001a70d:	74 22                	je     c001a731 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a70f:	b8 06 00 00 00       	mov    eax,0x6
c001a714:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a718:	75 17                	jne    c001a731 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a71a:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a71c:	89 f0                	mov    eax,esi
c001a71e:	83 c2 0d             	add    edx,0xd
c001a721:	0f b6 f0             	movzx  esi,al
c001a724:	0f b6 db             	movzx  ebx,bl
c001a727:	56                   	push   esi
c001a728:	53                   	push   ebx
c001a729:	52                   	push   edx
c001a72a:	51                   	push   ecx
c001a72b:	ff 57 38             	call   DWORD PTR [edi+0x38]
c001a72e:	83 c4 10             	add    esp,0x10
c001a731:	5b                   	pop    ebx
c001a732:	5e                   	pop    esi
c001a733:	5f                   	pop    edi
c001a734:	c3                   	ret    
c001a735:	90                   	nop

c001a736 <File::exists()>:
c001a736:	83 ec 0c             	sub    esp,0xc
c001a739:	31 c0                	xor    eax,eax
c001a73b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a73f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a746:	83 f9 19             	cmp    ecx,0x19
c001a749:	77 24                	ja     c001a76f <File::exists()+0x39>
c001a74b:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a752:	85 c9                	test   ecx,ecx
c001a754:	74 19                	je     c001a76f <File::exists()+0x39>
c001a756:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a75c:	85 c9                	test   ecx,ecx
c001a75e:	74 0f                	je     c001a76f <File::exists()+0x39>
c001a760:	83 c2 0d             	add    edx,0xd
c001a763:	50                   	push   eax
c001a764:	50                   	push   eax
c001a765:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a767:	52                   	push   edx
c001a768:	51                   	push   ecx
c001a769:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001a76c:	83 c4 10             	add    esp,0x10
c001a76f:	83 c4 0c             	add    esp,0xc
c001a772:	c3                   	ret    
c001a773:	90                   	nop

c001a774 <File::stat(unsigned long long*, bool*)>:
c001a774:	56                   	push   esi
c001a775:	53                   	push   ebx
c001a776:	50                   	push   eax
c001a777:	b8 0b 00 00 00       	mov    eax,0xb
c001a77c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a780:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a784:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a78b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a78f:	83 f9 19             	cmp    ecx,0x19
c001a792:	77 3d                	ja     c001a7d1 <File::stat(unsigned long long*, bool*)+0x5d>
c001a794:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a79b:	85 c9                	test   ecx,ecx
c001a79d:	74 32                	je     c001a7d1 <File::stat(unsigned long long*, bool*)+0x5d>
c001a79f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a7a5:	85 c9                	test   ecx,ecx
c001a7a7:	74 28                	je     c001a7d1 <File::stat(unsigned long long*, bool*)+0x5d>
c001a7a9:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a7ab:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a7af:	74 13                	je     c001a7c4 <File::stat(unsigned long long*, bool*)+0x50>
c001a7b1:	83 ec 04             	sub    esp,0x4
c001a7b4:	56                   	push   esi
c001a7b5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a7bb:	51                   	push   ecx
c001a7bc:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001a7bf:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001a7c2:	eb 0a                	jmp    c001a7ce <File::stat(unsigned long long*, bool*)+0x5a>
c001a7c4:	53                   	push   ebx
c001a7c5:	83 c2 0d             	add    edx,0xd
c001a7c8:	56                   	push   esi
c001a7c9:	52                   	push   edx
c001a7ca:	51                   	push   ecx
c001a7cb:	ff 50 34             	call   DWORD PTR [eax+0x34]
c001a7ce:	83 c4 10             	add    esp,0x10
c001a7d1:	5a                   	pop    edx
c001a7d2:	5b                   	pop    ebx
c001a7d3:	5e                   	pop    esi
c001a7d4:	c3                   	ret    

c001a7d5 <Fs::setcwd(Process*, char*)>:
c001a7d5:	55                   	push   ebp
c001a7d6:	57                   	push   edi
c001a7d7:	56                   	push   esi
c001a7d8:	53                   	push   ebx
c001a7d9:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a7df:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c001a7e6:	6a 00                	push   0x0
c001a7e8:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001a7ee:	57                   	push   edi
c001a7ef:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a7f6:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001a7fa:	56                   	push   esi
c001a7fb:	e8 5c f9 ff ff       	call   c001a15c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a800:	89 34 24             	mov    DWORD PTR [esp],esi
c001a803:	e8 68 5d fe ff       	call   c0000570 <strlen>
c001a808:	83 c4 10             	add    esp,0x10
c001a80b:	83 f8 02             	cmp    eax,0x2
c001a80e:	77 15                	ja     c001a825 <Fs::setcwd(Process*, char*)+0x50>
c001a810:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c001a815:	83 eb 41             	sub    ebx,0x41
c001a818:	8b 04 9d 80 f3 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc0c80]
c001a81f:	85 c0                	test   eax,eax
c001a821:	75 1c                	jne    c001a83f <Fs::setcwd(Process*, char*)+0x6a>
c001a823:	eb 2f                	jmp    c001a854 <Fs::setcwd(Process*, char*)+0x7f>
c001a825:	83 ec 0c             	sub    esp,0xc
c001a828:	56                   	push   esi
c001a829:	e8 42 5d fe ff       	call   c0000570 <strlen>
c001a82e:	83 c4 10             	add    esp,0x10
c001a831:	83 f8 03             	cmp    eax,0x3
c001a834:	75 57                	jne    c001a88d <Fs::setcwd(Process*, char*)+0xb8>
c001a836:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001a83b:	75 50                	jne    c001a88d <Fs::setcwd(Process*, char*)+0xb8>
c001a83d:	eb d1                	jmp    c001a810 <Fs::setcwd(Process*, char*)+0x3b>
c001a83f:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c001a846:	75 0c                	jne    c001a854 <Fs::setcwd(Process*, char*)+0x7f>
c001a848:	83 ec 0c             	sub    esp,0xc
c001a84b:	50                   	push   eax
c001a84c:	e8 ad 1d 00 00       	call   c001c5fe <LogicalDisk::mount()>
c001a851:	83 c4 10             	add    esp,0x10
c001a854:	b8 03 00 00 00       	mov    eax,0x3
c001a859:	83 fb 19             	cmp    ebx,0x19
c001a85c:	0f 87 c6 00 00 00    	ja     c001a928 <Fs::setcwd(Process*, char*)+0x153>
c001a862:	8b 14 9d 80 f3 03 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffc0c80]
c001a869:	b8 05 00 00 00       	mov    eax,0x5
c001a86e:	85 d2                	test   edx,edx
c001a870:	0f 84 b2 00 00 00    	je     c001a928 <Fs::setcwd(Process*, char*)+0x153>
c001a876:	b8 06 00 00 00       	mov    eax,0x6
c001a87b:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c001a882:	0f 85 92 00 00 00    	jne    c001a91a <Fs::setcwd(Process*, char*)+0x145>
c001a888:	e9 9b 00 00 00       	jmp    c001a928 <Fs::setcwd(Process*, char*)+0x153>
c001a88d:	83 ec 0c             	sub    esp,0xc
c001a890:	68 14 01 00 00       	push   0x114
c001a895:	e8 24 bb ff ff       	call   c00163be <malloc>
c001a89a:	83 c4 0c             	add    esp,0xc
c001a89d:	89 c3                	mov    ebx,eax
c001a89f:	55                   	push   ebp
c001a8a0:	56                   	push   esi
c001a8a1:	50                   	push   eax
c001a8a2:	e8 ad fb ff ff       	call   c001a454 <File::File(char const*, Process*)>
c001a8a7:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001a8ac:	83 c4 0c             	add    esp,0xc
c001a8af:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001a8b3:	50                   	push   eax
c001a8b4:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a8b8:	50                   	push   eax
c001a8b9:	53                   	push   ebx
c001a8ba:	e8 b5 fe ff ff       	call   c001a774 <File::stat(unsigned long long*, bool*)>
c001a8bf:	83 c4 10             	add    esp,0x10
c001a8c2:	83 f8 02             	cmp    eax,0x2
c001a8c5:	74 27                	je     c001a8ee <Fs::setcwd(Process*, char*)+0x119>
c001a8c7:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001a8cc:	75 1c                	jne    c001a8ea <Fs::setcwd(Process*, char*)+0x115>
c001a8ce:	b8 02 00 00 00       	mov    eax,0x2
c001a8d3:	85 db                	test   ebx,ebx
c001a8d5:	74 51                	je     c001a928 <Fs::setcwd(Process*, char*)+0x153>
c001a8d7:	83 ec 0c             	sub    esp,0xc
c001a8da:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8dc:	53                   	push   ebx
c001a8dd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a8e0:	83 c4 10             	add    esp,0x10
c001a8e3:	b8 02 00 00 00       	mov    eax,0x2
c001a8e8:	eb 3e                	jmp    c001a928 <Fs::setcwd(Process*, char*)+0x153>
c001a8ea:	85 c0                	test   eax,eax
c001a8ec:	74 1c                	je     c001a90a <Fs::setcwd(Process*, char*)+0x135>
c001a8ee:	b8 01 00 00 00       	mov    eax,0x1
c001a8f3:	85 db                	test   ebx,ebx
c001a8f5:	74 31                	je     c001a928 <Fs::setcwd(Process*, char*)+0x153>
c001a8f7:	83 ec 0c             	sub    esp,0xc
c001a8fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8fc:	53                   	push   ebx
c001a8fd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a900:	83 c4 10             	add    esp,0x10
c001a903:	b8 01 00 00 00       	mov    eax,0x1
c001a908:	eb 1e                	jmp    c001a928 <Fs::setcwd(Process*, char*)+0x153>
c001a90a:	85 db                	test   ebx,ebx
c001a90c:	74 0c                	je     c001a91a <Fs::setcwd(Process*, char*)+0x145>
c001a90e:	83 ec 0c             	sub    esp,0xc
c001a911:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a913:	53                   	push   ebx
c001a914:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a917:	83 c4 10             	add    esp,0x10
c001a91a:	50                   	push   eax
c001a91b:	50                   	push   eax
c001a91c:	56                   	push   esi
c001a91d:	57                   	push   edi
c001a91e:	e8 1d 5d fe ff       	call   c0000640 <strcpy>
c001a923:	83 c4 10             	add    esp,0x10
c001a926:	31 c0                	xor    eax,eax
c001a928:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a92e:	5b                   	pop    ebx
c001a92f:	5e                   	pop    esi
c001a930:	5f                   	pop    edi
c001a931:	5d                   	pop    ebp
c001a932:	c3                   	ret    
c001a933:	90                   	nop

c001a934 <Directory::Directory(char const*, Process*)>:
c001a934:	83 ec 0c             	sub    esp,0xc
c001a937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a93b:	83 ec 08             	sub    esp,0x8
c001a93e:	6a 00                	push   0x0
c001a940:	50                   	push   eax
c001a941:	e8 80 d1 ff ff       	call   c0017ac6 <UnixFile::UnixFile(int)>
c001a946:	83 c4 10             	add    esp,0x10
c001a949:	ba 0c 1e 03 c0       	mov    edx,0xc0031e0c
c001a94e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a952:	89 10                	mov    DWORD PTR [eax],edx
c001a954:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001a959:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a95d:	0f 95 c0             	setne  al
c001a960:	0f b6 c0             	movzx  eax,al
c001a963:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a967:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001a96d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a971:	83 c2 0d             	add    edx,0xd
c001a974:	50                   	push   eax
c001a975:	51                   	push   ecx
c001a976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a97a:	52                   	push   edx
c001a97b:	e8 dc f7 ff ff       	call   c001a15c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a980:	83 c4 10             	add    esp,0x10
c001a983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a987:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001a98a:	83 e8 41             	sub    eax,0x41
c001a98d:	88 c2                	mov    dl,al
c001a98f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a993:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001a999:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a99d:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001a9a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9a5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a9ab:	0f b6 c0             	movzx  eax,al
c001a9ae:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a9b5:	85 c0                	test   eax,eax
c001a9b7:	74 3e                	je     c001a9f7 <Directory::Directory(char const*, Process*)+0xc3>
c001a9b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9bd:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a9c3:	0f b6 c0             	movzx  eax,al
c001a9c6:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a9cd:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a9d3:	85 c0                	test   eax,eax
c001a9d5:	75 20                	jne    c001a9f7 <Directory::Directory(char const*, Process*)+0xc3>
c001a9d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9db:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a9e1:	0f b6 c0             	movzx  eax,al
c001a9e4:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a9eb:	83 ec 0c             	sub    esp,0xc
c001a9ee:	50                   	push   eax
c001a9ef:	e8 0a 1c 00 00       	call   c001c5fe <LogicalDisk::mount()>
c001a9f4:	83 c4 10             	add    esp,0x10
c001a9f7:	90                   	nop
c001a9f8:	83 c4 0c             	add    esp,0xc
c001a9fb:	c3                   	ret    

c001a9fc <Directory::open()>:
c001a9fc:	53                   	push   ebx
c001a9fd:	b8 0b 00 00 00       	mov    eax,0xb
c001aa02:	83 ec 08             	sub    esp,0x8
c001aa05:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa09:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001aa10:	83 fa 19             	cmp    edx,0x19
c001aa13:	77 3d                	ja     c001aa52 <Directory::open()+0x56>
c001aa15:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001aa1c:	85 d2                	test   edx,edx
c001aa1e:	74 32                	je     c001aa52 <Directory::open()+0x56>
c001aa20:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001aa26:	85 d2                	test   edx,edx
c001aa28:	74 28                	je     c001aa52 <Directory::open()+0x56>
c001aa2a:	b8 06 00 00 00       	mov    eax,0x6
c001aa2f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001aa33:	75 1d                	jne    c001aa52 <Directory::open()+0x56>
c001aa35:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001aa3b:	50                   	push   eax
c001aa3c:	8b 02                	mov    eax,DWORD PTR [edx]
c001aa3e:	51                   	push   ecx
c001aa3f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001aa42:	51                   	push   ecx
c001aa43:	52                   	push   edx
c001aa44:	ff 50 50             	call   DWORD PTR [eax+0x50]
c001aa47:	83 c4 10             	add    esp,0x10
c001aa4a:	85 c0                	test   eax,eax
c001aa4c:	75 04                	jne    c001aa52 <Directory::open()+0x56>
c001aa4e:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001aa52:	83 c4 08             	add    esp,0x8
c001aa55:	5b                   	pop    ebx
c001aa56:	c3                   	ret    
c001aa57:	90                   	nop

c001aa58 <Directory::close()>:
c001aa58:	53                   	push   ebx
c001aa59:	b8 0b 00 00 00       	mov    eax,0xb
c001aa5e:	83 ec 08             	sub    esp,0x8
c001aa61:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aa65:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aa6c:	83 f9 19             	cmp    ecx,0x19
c001aa6f:	77 41                	ja     c001aab2 <Directory::close()+0x5a>
c001aa71:	8b 1c 8d 80 f3 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc0c80]
c001aa78:	85 db                	test   ebx,ebx
c001aa7a:	74 36                	je     c001aab2 <Directory::close()+0x5a>
c001aa7c:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001aa83:	74 2d                	je     c001aab2 <Directory::close()+0x5a>
c001aa85:	b8 05 00 00 00       	mov    eax,0x5
c001aa8a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001aa8e:	74 22                	je     c001aab2 <Directory::close()+0x5a>
c001aa90:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001aa94:	8b 04 8d 80 f3 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc0c80]
c001aa9b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001aaa1:	53                   	push   ebx
c001aaa2:	53                   	push   ebx
c001aaa3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001aaa5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001aaab:	50                   	push   eax
c001aaac:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c001aaaf:	83 c4 10             	add    esp,0x10
c001aab2:	83 c4 08             	add    esp,0x8
c001aab5:	5b                   	pop    ebx
c001aab6:	c3                   	ret    
c001aab7:	90                   	nop

c001aab8 <Directory::unlink()>:
c001aab8:	83 ec 0c             	sub    esp,0xc
c001aabb:	b8 0b 00 00 00       	mov    eax,0xb
c001aac0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aac4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aacb:	83 f9 19             	cmp    ecx,0x19
c001aace:	77 2f                	ja     c001aaff <Directory::unlink()+0x47>
c001aad0:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001aad7:	85 c9                	test   ecx,ecx
c001aad9:	74 24                	je     c001aaff <Directory::unlink()+0x47>
c001aadb:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001aae1:	85 c9                	test   ecx,ecx
c001aae3:	74 1a                	je     c001aaff <Directory::unlink()+0x47>
c001aae5:	b8 06 00 00 00       	mov    eax,0x6
c001aaea:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001aaee:	75 0f                	jne    c001aaff <Directory::unlink()+0x47>
c001aaf0:	83 c2 0d             	add    edx,0xd
c001aaf3:	50                   	push   eax
c001aaf4:	50                   	push   eax
c001aaf5:	8b 01                	mov    eax,DWORD PTR [ecx]
c001aaf7:	52                   	push   edx
c001aaf8:	51                   	push   ecx
c001aaf9:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001aafc:	83 c4 10             	add    esp,0x10
c001aaff:	83 c4 0c             	add    esp,0xc
c001ab02:	c3                   	ret    
c001ab03:	90                   	nop

c001ab04 <Directory::rename(char const*)>:
c001ab04:	83 ec 0c             	sub    esp,0xc
c001ab07:	b8 0b 00 00 00       	mov    eax,0xb
c001ab0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ab10:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ab17:	83 f9 19             	cmp    ecx,0x19
c001ab1a:	77 32                	ja     c001ab4e <Directory::rename(char const*)+0x4a>
c001ab1c:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ab23:	85 c9                	test   ecx,ecx
c001ab25:	74 27                	je     c001ab4e <Directory::rename(char const*)+0x4a>
c001ab27:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ab2d:	85 c9                	test   ecx,ecx
c001ab2f:	74 1d                	je     c001ab4e <Directory::rename(char const*)+0x4a>
c001ab31:	b8 06 00 00 00       	mov    eax,0x6
c001ab36:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ab3a:	75 12                	jne    c001ab4e <Directory::rename(char const*)+0x4a>
c001ab3c:	83 c2 0d             	add    edx,0xd
c001ab3f:	50                   	push   eax
c001ab40:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ab42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ab46:	52                   	push   edx
c001ab47:	51                   	push   ecx
c001ab48:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001ab4b:	83 c4 10             	add    esp,0x10
c001ab4e:	83 c4 0c             	add    esp,0xc
c001ab51:	c3                   	ret    

c001ab52 <Directory::exists()>:
c001ab52:	83 ec 0c             	sub    esp,0xc
c001ab55:	31 c0                	xor    eax,eax
c001ab57:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ab5b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ab62:	83 f9 19             	cmp    ecx,0x19
c001ab65:	77 24                	ja     c001ab8b <Directory::exists()+0x39>
c001ab67:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ab6e:	85 c9                	test   ecx,ecx
c001ab70:	74 19                	je     c001ab8b <Directory::exists()+0x39>
c001ab72:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ab78:	85 c9                	test   ecx,ecx
c001ab7a:	74 0f                	je     c001ab8b <Directory::exists()+0x39>
c001ab7c:	83 c2 0d             	add    edx,0xd
c001ab7f:	50                   	push   eax
c001ab80:	50                   	push   eax
c001ab81:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ab83:	52                   	push   edx
c001ab84:	51                   	push   ecx
c001ab85:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001ab88:	83 c4 10             	add    esp,0x10
c001ab8b:	83 c4 0c             	add    esp,0xc
c001ab8e:	c3                   	ret    
c001ab8f:	90                   	nop

c001ab90 <Directory::read(dirent*)>:
c001ab90:	83 ec 1c             	sub    esp,0x1c
c001ab93:	b8 0b 00 00 00       	mov    eax,0xb
c001ab98:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ab9c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aba3:	83 f9 19             	cmp    ecx,0x19
c001aba6:	77 30                	ja     c001abd8 <Directory::read(dirent*)+0x48>
c001aba8:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001abaf:	85 c9                	test   ecx,ecx
c001abb1:	74 25                	je     c001abd8 <Directory::read(dirent*)+0x48>
c001abb3:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c001abba:	74 1c                	je     c001abd8 <Directory::read(dirent*)+0x48>
c001abbc:	83 ec 0c             	sub    esp,0xc
c001abbf:	8b 02                	mov    eax,DWORD PTR [edx]
c001abc1:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001abc5:	51                   	push   ecx
c001abc6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001abca:	6a 00                	push   0x0
c001abcc:	68 10 01 00 00       	push   0x110
c001abd1:	52                   	push   edx
c001abd2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001abd5:	83 c4 20             	add    esp,0x20
c001abd8:	83 c4 1c             	add    esp,0x1c
c001abdb:	c3                   	ret    

c001abdc <Directory::create()>:
c001abdc:	83 ec 0c             	sub    esp,0xc
c001abdf:	b8 0b 00 00 00       	mov    eax,0xb
c001abe4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001abe8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001abef:	83 f9 19             	cmp    ecx,0x19
c001abf2:	77 2f                	ja     c001ac23 <Directory::create()+0x47>
c001abf4:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001abfb:	85 c9                	test   ecx,ecx
c001abfd:	74 24                	je     c001ac23 <Directory::create()+0x47>
c001abff:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ac05:	85 c9                	test   ecx,ecx
c001ac07:	74 1a                	je     c001ac23 <Directory::create()+0x47>
c001ac09:	b8 06 00 00 00       	mov    eax,0x6
c001ac0e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ac12:	75 0f                	jne    c001ac23 <Directory::create()+0x47>
c001ac14:	83 c2 0d             	add    edx,0xd
c001ac17:	50                   	push   eax
c001ac18:	50                   	push   eax
c001ac19:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ac1b:	52                   	push   edx
c001ac1c:	51                   	push   ecx
c001ac1d:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001ac20:	83 c4 10             	add    esp,0x10
c001ac23:	83 c4 0c             	add    esp,0xc
c001ac26:	c3                   	ret    
c001ac27:	90                   	nop

c001ac28 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001ac28:	b8 0a 00 00 00       	mov    eax,0xa
c001ac2d:	c3                   	ret    
c001ac2e:	66 90                	xchg   ax,ax

c001ac30 <Bus::Bus(char const*)>:
c001ac30:	83 ec 0c             	sub    esp,0xc
c001ac33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac37:	83 ec 08             	sub    esp,0x8
c001ac3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac3e:	50                   	push   eax
c001ac3f:	e8 ec 07 00 00       	call   c001b430 <Device::Device(char const*)>
c001ac44:	83 c4 10             	add    esp,0x10
c001ac47:	ba 28 1e 03 c0       	mov    edx,0xc0031e28
c001ac4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac50:	89 10                	mov    DWORD PTR [eax],edx
c001ac52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac56:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001ac60:	90                   	nop
c001ac61:	83 c4 0c             	add    esp,0xc
c001ac64:	c3                   	ret    
c001ac65:	90                   	nop
c001ac66:	66 90                	xchg   ax,ax

c001ac68 <Bus::~Bus()>:
c001ac68:	83 ec 0c             	sub    esp,0xc
c001ac6b:	ba 28 1e 03 c0       	mov    edx,0xc0031e28
c001ac70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac74:	89 10                	mov    DWORD PTR [eax],edx
c001ac76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac7a:	83 ec 0c             	sub    esp,0xc
c001ac7d:	50                   	push   eax
c001ac7e:	e8 4d 05 00 00       	call   c001b1d0 <Device::~Device()>
c001ac83:	83 c4 10             	add    esp,0x10
c001ac86:	90                   	nop
c001ac87:	83 c4 0c             	add    esp,0xc
c001ac8a:	c3                   	ret    
c001ac8b:	90                   	nop

c001ac8c <Bus::~Bus()>:
c001ac8c:	83 ec 0c             	sub    esp,0xc
c001ac8f:	83 ec 0c             	sub    esp,0xc
c001ac92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac96:	e8 cd ff ff ff       	call   c001ac68 <Bus::~Bus()>
c001ac9b:	83 c4 10             	add    esp,0x10
c001ac9e:	83 ec 08             	sub    esp,0x8
c001aca1:	68 58 01 00 00       	push   0x158
c001aca6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001acaa:	e8 71 e4 ff ff       	call   c0019120 <operator delete(void*, unsigned long)>
c001acaf:	83 c4 10             	add    esp,0x10
c001acb2:	83 c4 0c             	add    esp,0xc
c001acb5:	c3                   	ret    

c001acb6 <beepThread(void*)>:
c001acb6:	83 ec 0c             	sub    esp,0xc
c001acb9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001acbe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001acc2:	48                   	dec    eax
c001acc3:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001acc8:	75 01                	jne    c001accb <beepThread(void*)+0x15>
c001acca:	fb                   	sti    
c001accb:	83 ec 0c             	sub    esp,0xc
c001acce:	6b c2 0a             	imul   eax,edx,0xa
c001acd1:	50                   	push   eax
c001acd2:	e8 5d a7 00 00       	call   c0025434 <milliTenthSleep(unsigned int)>
c001acd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001acde:	e8 58 c5 00 00       	call   c002723b <HalMakeBeep(int)>
c001ace3:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001aceb:	83 c4 1c             	add    esp,0x1c
c001acee:	e9 25 a6 00 00       	jmp    c0025318 <blockTask(TaskState)>

c001acf3 <Krnl::beep(int, int, bool)>:
c001acf3:	56                   	push   esi
c001acf4:	53                   	push   ebx
c001acf5:	83 ec 10             	sub    esp,0x10
c001acf8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001acfc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ad00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad04:	e8 32 c5 00 00       	call   c002723b <HalMakeBeep(int)>
c001ad09:	83 c4 10             	add    esp,0x10
c001ad0c:	89 f0                	mov    eax,esi
c001ad0e:	84 c0                	test   al,al
c001ad10:	74 1e                	je     c001ad30 <Krnl::beep(int, int, bool)+0x3d>
c001ad12:	83 ec 0c             	sub    esp,0xc
c001ad15:	6b db 0a             	imul   ebx,ebx,0xa
c001ad18:	53                   	push   ebx
c001ad19:	e8 16 a7 00 00       	call   c0025434 <milliTenthSleep(unsigned int)>
c001ad1e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ad26:	83 c4 14             	add    esp,0x14
c001ad29:	5b                   	pop    ebx
c001ad2a:	5e                   	pop    esi
c001ad2b:	e9 0b c5 00 00       	jmp    c002723b <HalMakeBeep(int)>
c001ad30:	68 e6 00 00 00       	push   0xe6
c001ad35:	53                   	push   ebx
c001ad36:	68 b6 ac 01 c0       	push   0xc001acb6
c001ad3b:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001ad41:	e8 c6 a2 00 00       	call   c002500c <Process::createThread(void (*)(void*), void*, int)>
c001ad46:	83 c4 14             	add    esp,0x14
c001ad49:	5b                   	pop    ebx
c001ad4a:	5e                   	pop    esi
c001ad4b:	c3                   	ret    

c001ad4c <User::loadClockSettings(int)>:
c001ad4c:	53                   	push   ebx
c001ad4d:	83 ec 14             	sub    esp,0x14
c001ad50:	68 14 01 00 00       	push   0x114
c001ad55:	e8 64 b6 ff ff       	call   c00163be <malloc>
c001ad5a:	83 c4 0c             	add    esp,0xc
c001ad5d:	89 c3                	mov    ebx,eax
c001ad5f:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001ad65:	68 4c 1e 03 c0       	push   0xc0031e4c
c001ad6a:	50                   	push   eax
c001ad6b:	e8 e4 f6 ff ff       	call   c001a454 <File::File(char const*, Process*)>
c001ad70:	58                   	pop    eax
c001ad71:	5a                   	pop    edx
c001ad72:	6a 01                	push   0x1
c001ad74:	53                   	push   ebx
c001ad75:	e8 f8 f6 ff ff       	call   c001a472 <File::open(FileOpenMode)>
c001ad7a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad7d:	e8 4e f7 ff ff       	call   c001a4d0 <File::close()>
c001ad82:	83 c4 10             	add    esp,0x10
c001ad85:	85 db                	test   ebx,ebx
c001ad87:	74 0f                	je     c001ad98 <User::loadClockSettings(int)+0x4c>
c001ad89:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad8b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001ad8f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ad92:	83 c4 08             	add    esp,0x8
c001ad95:	5b                   	pop    ebx
c001ad96:	ff e0                	jmp    eax
c001ad98:	83 c4 08             	add    esp,0x8
c001ad9b:	5b                   	pop    ebx
c001ad9c:	c3                   	ret    
c001ad9d:	90                   	nop

c001ad9e <Clock::Clock(char const*)>:
c001ad9e:	83 ec 0c             	sub    esp,0xc
c001ada1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ada5:	83 ec 08             	sub    esp,0x8
c001ada8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001adac:	50                   	push   eax
c001adad:	e8 7e 06 00 00       	call   c001b430 <Device::Device(char const*)>
c001adb2:	83 c4 10             	add    esp,0x10
c001adb5:	ba 74 1e 03 c0       	mov    edx,0xc0031e74
c001adba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adbe:	89 10                	mov    DWORD PTR [eax],edx
c001adc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adc4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001adce:	90                   	nop
c001adcf:	83 c4 0c             	add    esp,0xc
c001add2:	c3                   	ret    
c001add3:	90                   	nop

c001add4 <Clock::~Clock()>:
c001add4:	83 ec 0c             	sub    esp,0xc
c001add7:	ba 74 1e 03 c0       	mov    edx,0xc0031e74
c001addc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ade0:	89 10                	mov    DWORD PTR [eax],edx
c001ade2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ade6:	83 ec 0c             	sub    esp,0xc
c001ade9:	50                   	push   eax
c001adea:	e8 e1 03 00 00       	call   c001b1d0 <Device::~Device()>
c001adef:	83 c4 10             	add    esp,0x10
c001adf2:	90                   	nop
c001adf3:	83 c4 0c             	add    esp,0xc
c001adf6:	c3                   	ret    
c001adf7:	90                   	nop

c001adf8 <Clock::~Clock()>:
c001adf8:	83 ec 0c             	sub    esp,0xc
c001adfb:	83 ec 0c             	sub    esp,0xc
c001adfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae02:	e8 cd ff ff ff       	call   c001add4 <Clock::~Clock()>
c001ae07:	83 c4 10             	add    esp,0x10
c001ae0a:	83 ec 08             	sub    esp,0x8
c001ae0d:	68 58 01 00 00       	push   0x158
c001ae12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae16:	e8 05 e3 ff ff       	call   c0019120 <operator delete(void*, unsigned long)>
c001ae1b:	83 c4 10             	add    esp,0x10
c001ae1e:	83 c4 0c             	add    esp,0xc
c001ae21:	c3                   	ret    

c001ae22 <Clock::timeInSecondsLocal()>:
c001ae22:	53                   	push   ebx
c001ae23:	83 ec 14             	sub    esp,0x14
c001ae26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ae2a:	8b 10                	mov    edx,DWORD PTR [eax]
c001ae2c:	50                   	push   eax
c001ae2d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001ae30:	0f b6 0d 08 cf 03 c0 	movzx  ecx,BYTE PTR ds:0xc003cf08
c001ae37:	03 0d 0c cf 03 c0    	add    ecx,DWORD PTR ds:0xc003cf0c
c001ae3d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001ae43:	89 cb                	mov    ebx,ecx
c001ae45:	c1 fb 1f             	sar    ebx,0x1f
c001ae48:	01 c8                	add    eax,ecx
c001ae4a:	11 da                	adc    edx,ebx
c001ae4c:	83 c4 10             	add    esp,0x10
c001ae4f:	31 c9                	xor    ecx,ecx
c001ae51:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001ae58:	74 05                	je     c001ae5f <Clock::timeInSecondsLocal()+0x3d>
c001ae5a:	b9 08 07 00 00       	mov    ecx,0x708
c001ae5f:	31 db                	xor    ebx,ebx
c001ae61:	01 c8                	add    eax,ecx
c001ae63:	11 da                	adc    edx,ebx
c001ae65:	83 c4 08             	add    esp,0x8
c001ae68:	5b                   	pop    ebx
c001ae69:	c3                   	ret    

c001ae6a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001ae6a:	57                   	push   edi
c001ae6b:	56                   	push   esi
c001ae6c:	53                   	push   ebx
c001ae6d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ae71:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ae75:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae77:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ae7b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001ae7e:	0f b6 05 08 cf 03 c0 	movzx  eax,BYTE PTR ds:0xc003cf08
c001ae85:	03 05 0c cf 03 c0    	add    eax,DWORD PTR ds:0xc003cf0c
c001ae8b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001ae91:	99                   	cdq    
c001ae92:	29 c6                	sub    esi,eax
c001ae94:	19 d7                	sbb    edi,edx
c001ae96:	89 f0                	mov    eax,esi
c001ae98:	89 fa                	mov    edx,edi
c001ae9a:	31 f6                	xor    esi,esi
c001ae9c:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001aea3:	74 05                	je     c001aeaa <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001aea5:	be 08 07 00 00       	mov    esi,0x708
c001aeaa:	31 ff                	xor    edi,edi
c001aeac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001aeb0:	29 f0                	sub    eax,esi
c001aeb2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aeb6:	19 fa                	sbb    edx,edi
c001aeb8:	89 d8                	mov    eax,ebx
c001aeba:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001aebe:	5b                   	pop    ebx
c001aebf:	5e                   	pop    esi
c001aec0:	5f                   	pop    edi
c001aec1:	ff e0                	jmp    eax

c001aec3 <datetimeToSeconds(datetime_t)>:
c001aec3:	55                   	push   ebp
c001aec4:	57                   	push   edi
c001aec5:	56                   	push   esi
c001aec6:	53                   	push   ebx
c001aec7:	83 ec 0c             	sub    esp,0xc
c001aeca:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001aece:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001aed2:	89 d6                	mov    esi,edx
c001aed4:	0f b6 c7             	movzx  eax,bh
c001aed7:	c1 ee 10             	shr    esi,0x10
c001aeda:	6b e8 3c             	imul   ebp,eax,0x3c
c001aedd:	81 ee 6c 07 00 00    	sub    esi,0x76c
c001aee3:	0f b6 ce             	movzx  ecx,dh
c001aee6:	89 df                	mov    edi,ebx
c001aee8:	49                   	dec    ecx
c001aee9:	c1 ef 10             	shr    edi,0x10
c001aeec:	0f b6 db             	movzx  ebx,bl
c001aeef:	89 f8                	mov    eax,edi
c001aef1:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c001aef7:	0f b6 f8             	movzx  edi,al
c001aefa:	0f b6 d2             	movzx  edx,dl
c001aefd:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c001af01:	01 d8                	add    eax,ebx
c001af03:	0f b7 de             	movzx  ebx,si
c001af06:	89 04 24             	mov    DWORD PTR [esp],eax
c001af09:	c1 f8 1f             	sar    eax,0x1f
c001af0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001af10:	0f b6 c1             	movzx  eax,cl
c001af13:	8b 0c 85 c0 1e 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffce140]
c001af1a:	83 f8 01             	cmp    eax,0x1
c001af1d:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001af21:	76 27                	jbe    c001af4a <datetimeToSeconds(datetime_t)+0x87>
c001af23:	83 e6 03             	and    esi,0x3
c001af26:	75 22                	jne    c001af4a <datetimeToSeconds(datetime_t)+0x87>
c001af28:	31 d2                	xor    edx,edx
c001af2a:	be 64 00 00 00       	mov    esi,0x64
c001af2f:	89 d8                	mov    eax,ebx
c001af31:	f7 f6                	div    esi
c001af33:	85 d2                	test   edx,edx
c001af35:	75 12                	jne    c001af49 <datetimeToSeconds(datetime_t)+0x86>
c001af37:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001af3d:	be 90 01 00 00       	mov    esi,0x190
c001af42:	99                   	cdq    
c001af43:	f7 fe                	idiv   esi
c001af45:	85 d2                	test   edx,edx
c001af47:	75 01                	jne    c001af4a <datetimeToSeconds(datetime_t)+0x87>
c001af49:	41                   	inc    ecx
c001af4a:	83 fb 46             	cmp    ebx,0x46
c001af4d:	76 48                	jbe    c001af97 <datetimeToSeconds(datetime_t)+0xd4>
c001af4f:	be 46 00 00 00       	mov    esi,0x46
c001af54:	bf 64 00 00 00       	mov    edi,0x64
c001af59:	bd 90 01 00 00       	mov    ebp,0x190
c001af5e:	b8 6d 01 00 00       	mov    eax,0x16d
c001af63:	f7 c6 03 00 00 00    	test   esi,0x3
c001af69:	75 23                	jne    c001af8e <datetimeToSeconds(datetime_t)+0xcb>
c001af6b:	89 f0                	mov    eax,esi
c001af6d:	99                   	cdq    
c001af6e:	f7 ff                	idiv   edi
c001af70:	b8 6e 01 00 00       	mov    eax,0x16e
c001af75:	85 d2                	test   edx,edx
c001af77:	75 15                	jne    c001af8e <datetimeToSeconds(datetime_t)+0xcb>
c001af79:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001af7f:	99                   	cdq    
c001af80:	f7 fd                	idiv   ebp
c001af82:	83 fa 01             	cmp    edx,0x1
c001af85:	19 c0                	sbb    eax,eax
c001af87:	f7 d0                	not    eax
c001af89:	05 6e 01 00 00       	add    eax,0x16e
c001af8e:	01 c1                	add    ecx,eax
c001af90:	46                   	inc    esi
c001af91:	39 de                	cmp    esi,ebx
c001af93:	7c c9                	jl     c001af5e <datetimeToSeconds(datetime_t)+0x9b>
c001af95:	eb 34                	jmp    c001afcb <datetimeToSeconds(datetime_t)+0x108>
c001af97:	74 32                	je     c001afcb <datetimeToSeconds(datetime_t)+0x108>
c001af99:	b8 45 00 00 00       	mov    eax,0x45
c001af9e:	89 c2                	mov    edx,eax
c001afa0:	83 e2 03             	and    edx,0x3
c001afa3:	39 d8                	cmp    eax,ebx
c001afa5:	7e 0f                	jle    c001afb6 <datetimeToSeconds(datetime_t)+0xf3>
c001afa7:	83 fa 01             	cmp    edx,0x1
c001afaa:	19 d2                	sbb    edx,edx
c001afac:	48                   	dec    eax
c001afad:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001afb4:	eb e8                	jmp    c001af9e <datetimeToSeconds(datetime_t)+0xdb>
c001afb6:	b8 6d 01 00 00       	mov    eax,0x16d
c001afbb:	85 d2                	test   edx,edx
c001afbd:	75 0a                	jne    c001afc9 <datetimeToSeconds(datetime_t)+0x106>
c001afbf:	83 fb 01             	cmp    ebx,0x1
c001afc2:	19 c0                	sbb    eax,eax
c001afc4:	05 6e 01 00 00       	add    eax,0x16e
c001afc9:	29 c1                	sub    ecx,eax
c001afcb:	b8 80 51 01 00       	mov    eax,0x15180
c001afd0:	f7 e9                	imul   ecx
c001afd2:	03 04 24             	add    eax,DWORD PTR [esp]
c001afd5:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c001afd9:	83 c4 0c             	add    esp,0xc
c001afdc:	5b                   	pop    ebx
c001afdd:	5e                   	pop    esi
c001afde:	5f                   	pop    edi
c001afdf:	5d                   	pop    ebp
c001afe0:	c3                   	ret    
c001afe1:	90                   	nop

c001afe2 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001afe2:	57                   	push   edi
c001afe3:	56                   	push   esi
c001afe4:	53                   	push   ebx
c001afe5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001afe9:	8b 06                	mov    eax,DWORD PTR [esi]
c001afeb:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001afee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001aff2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001aff6:	e8 c8 fe ff ff       	call   c001aec3 <datetimeToSeconds(datetime_t)>
c001affb:	59                   	pop    ecx
c001affc:	0f b6 0d 08 cf 03 c0 	movzx  ecx,BYTE PTR ds:0xc003cf08
c001b003:	5b                   	pop    ebx
c001b004:	03 0d 0c cf 03 c0    	add    ecx,DWORD PTR ds:0xc003cf0c
c001b00a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001b010:	89 cb                	mov    ebx,ecx
c001b012:	c1 fb 1f             	sar    ebx,0x1f
c001b015:	29 c8                	sub    eax,ecx
c001b017:	19 da                	sbb    edx,ebx
c001b019:	31 c9                	xor    ecx,ecx
c001b01b:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001b022:	74 05                	je     c001b029 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001b024:	b9 08 07 00 00       	mov    ecx,0x708
c001b029:	31 db                	xor    ebx,ebx
c001b02b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b02f:	29 c8                	sub    eax,ecx
c001b031:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b035:	19 da                	sbb    edx,ebx
c001b037:	89 f8                	mov    eax,edi
c001b039:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b03d:	5b                   	pop    ebx
c001b03e:	5e                   	pop    esi
c001b03f:	5f                   	pop    edi
c001b040:	ff e0                	jmp    eax

c001b042 <secondsToDatetime(unsigned long long)>:
c001b042:	55                   	push   ebp
c001b043:	57                   	push   edi
c001b044:	56                   	push   esi
c001b045:	53                   	push   ebx
c001b046:	83 ec 1c             	sub    esp,0x1c
c001b049:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b04d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b051:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001b055:	6a 00                	push   0x0
c001b057:	68 80 51 01 00       	push   0x15180
c001b05c:	55                   	push   ebp
c001b05d:	57                   	push   edi
c001b05e:	e8 fd 35 01 00       	call   c002e660 <__udivdi3>
c001b063:	83 c4 10             	add    esp,0x10
c001b066:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001b06c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b070:	6a 00                	push   0x0
c001b072:	68 80 51 01 00       	push   0x15180
c001b077:	55                   	push   ebp
c001b078:	57                   	push   edi
c001b079:	bf 10 0e 00 00       	mov    edi,0xe10
c001b07e:	e8 dd 36 01 00       	call   c002e760 <__umoddi3>
c001b083:	83 c4 10             	add    esp,0x10
c001b086:	99                   	cdq    
c001b087:	f7 ff                	idiv   edi
c001b089:	bf 3c 00 00 00       	mov    edi,0x3c
c001b08e:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001b091:	89 d0                	mov    eax,edx
c001b093:	99                   	cdq    
c001b094:	f7 ff                	idiv   edi
c001b096:	85 db                	test   ebx,ebx
c001b098:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001b09b:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001b09e:	79 11                	jns    c001b0b1 <secondsToDatetime(unsigned long long)+0x6f>
c001b0a0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b0a4:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001b0aa:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001b0af:	eb 07                	jmp    c001b0b8 <secondsToDatetime(unsigned long long)+0x76>
c001b0b1:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001b0b6:	89 d8                	mov    eax,ebx
c001b0b8:	bf b4 05 00 00       	mov    edi,0x5b4
c001b0bd:	99                   	cdq    
c001b0be:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001b0c3:	f7 f9                	idiv   ecx
c001b0c5:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001b0ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b0ce:	31 d2                	xor    edx,edx
c001b0d0:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001b0d8:	01 c3                	add    ebx,eax
c001b0da:	89 d8                	mov    eax,ebx
c001b0dc:	f7 f1                	div    ecx
c001b0de:	31 d2                	xor    edx,edx
c001b0e0:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001b0e3:	89 d8                	mov    eax,ebx
c001b0e5:	f7 f7                	div    edi
c001b0e7:	31 d2                	xor    edx,edx
c001b0e9:	29 c1                	sub    ecx,eax
c001b0eb:	89 d8                	mov    eax,ebx
c001b0ed:	f7 f5                	div    ebp
c001b0ef:	bd 6d 01 00 00       	mov    ebp,0x16d
c001b0f4:	29 c1                	sub    ecx,eax
c001b0f6:	31 d2                	xor    edx,edx
c001b0f8:	89 c8                	mov    eax,ecx
c001b0fa:	f7 f5                	div    ebp
c001b0fc:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001b101:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b105:	31 d2                	xor    edx,edx
c001b107:	89 c8                	mov    eax,ecx
c001b109:	f7 f5                	div    ebp
c001b10b:	31 d2                	xor    edx,edx
c001b10d:	01 c3                	add    ebx,eax
c001b10f:	89 c8                	mov    eax,ecx
c001b111:	f7 f7                	div    edi
c001b113:	bf 99 00 00 00       	mov    edi,0x99
c001b118:	29 c3                	sub    ebx,eax
c001b11a:	31 d2                	xor    edx,edx
c001b11c:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001b124:	29 c3                	sub    ebx,eax
c001b126:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001b129:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001b12c:	bb 05 00 00 00       	mov    ebx,0x5
c001b131:	83 c1 02             	add    ecx,0x2
c001b134:	89 c8                	mov    eax,ecx
c001b136:	f7 f7                	div    edi
c001b138:	31 d2                	xor    edx,edx
c001b13a:	89 c7                	mov    edi,eax
c001b13c:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001b142:	83 c0 02             	add    eax,0x2
c001b145:	f7 f3                	div    ebx
c001b147:	89 eb                	mov    ebx,ebp
c001b149:	29 c3                	sub    ebx,eax
c001b14b:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001b151:	88 1e                	mov    BYTE PTR [esi],bl
c001b153:	19 c0                	sbb    eax,eax
c001b155:	31 d2                	xor    edx,edx
c001b157:	83 e0 0c             	and    eax,0xc
c001b15a:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001b15e:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001b166:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001b16a:	83 f9 01             	cmp    ecx,0x1
c001b16d:	0f 96 c2             	setbe  dl
c001b170:	41                   	inc    ecx
c001b171:	01 d0                	add    eax,edx
c001b173:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001b176:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001b17a:	83 c4 1c             	add    esp,0x1c
c001b17d:	89 f0                	mov    eax,esi
c001b17f:	5b                   	pop    ebx
c001b180:	5e                   	pop    esi
c001b181:	5f                   	pop    edi
c001b182:	5d                   	pop    ebp
c001b183:	c2 04 00             	ret    0x4

c001b186 <Clock::timeInDatetimeLocal()>:
c001b186:	53                   	push   ebx
c001b187:	83 ec 14             	sub    esp,0x14
c001b18a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b18e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b192:	e8 8b fc ff ff       	call   c001ae22 <Clock::timeInSecondsLocal()>
c001b197:	83 c4 0c             	add    esp,0xc
c001b19a:	52                   	push   edx
c001b19b:	50                   	push   eax
c001b19c:	53                   	push   ebx
c001b19d:	e8 a0 fe ff ff       	call   c001b042 <secondsToDatetime(unsigned long long)>
c001b1a2:	89 d8                	mov    eax,ebx
c001b1a4:	83 c4 14             	add    esp,0x14
c001b1a7:	5b                   	pop    ebx
c001b1a8:	c2 04 00             	ret    0x4
c001b1ab:	90                   	nop

c001b1ac <Device::hibernate()>:
c001b1ac:	c3                   	ret    
c001b1ad:	90                   	nop

c001b1ae <Device::wake()>:
c001b1ae:	c3                   	ret    
c001b1af:	90                   	nop

c001b1b0 <Device::detect()>:
c001b1b0:	c3                   	ret    
c001b1b1:	90                   	nop

c001b1b2 <Device::disableLegacy()>:
c001b1b2:	c3                   	ret    
c001b1b3:	90                   	nop

c001b1b4 <Device::powerSaving(PowerSavingLevel)>:
c001b1b4:	c3                   	ret    
c001b1b5:	90                   	nop

c001b1b6 <DriverlessDevice::close(int, int, void*)>:
c001b1b6:	31 c0                	xor    eax,eax
c001b1b8:	c3                   	ret    
c001b1b9:	90                   	nop

c001b1ba <DriverlessDevice::detect()>:
c001b1ba:	c3                   	ret    
c001b1bb:	90                   	nop

c001b1bc <DriverlessDevice::open(int, int, void*)>:
c001b1bc:	83 ec 18             	sub    esp,0x18
c001b1bf:	68 f0 1e 03 c0       	push   0xc0031ef0
c001b1c4:	e8 9d 50 00 00       	call   c0020266 <KePanic(char const*)>
c001b1c9:	83 c8 ff             	or     eax,0xffffffff
c001b1cc:	83 c4 1c             	add    esp,0x1c
c001b1cf:	c3                   	ret    

c001b1d0 <Device::~Device()>:
c001b1d0:	ba 5c 1f 03 c0       	mov    edx,0xc0031f5c
c001b1d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b1d9:	89 10                	mov    DWORD PTR [eax],edx
c001b1db:	90                   	nop
c001b1dc:	c3                   	ret    
c001b1dd:	90                   	nop

c001b1de <Device::~Device()>:
c001b1de:	83 ec 0c             	sub    esp,0xc
c001b1e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b1e5:	e8 e6 ff ff ff       	call   c001b1d0 <Device::~Device()>
c001b1ea:	83 c4 04             	add    esp,0x4
c001b1ed:	83 ec 08             	sub    esp,0x8
c001b1f0:	68 58 01 00 00       	push   0x158
c001b1f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1f9:	e8 22 df ff ff       	call   c0019120 <operator delete(void*, unsigned long)>
c001b1fe:	83 c4 10             	add    esp,0x10
c001b201:	83 c4 0c             	add    esp,0xc
c001b204:	c3                   	ret    
c001b205:	90                   	nop

c001b206 <Device::findAndLoadDriver()>:
c001b206:	c7 44 24 04 0e 1f 03 c0 	mov    DWORD PTR [esp+0x4],0xc0031f0e
c001b20e:	e9 3a e0 ff ff       	jmp    c001924d <Dbg::kprintf(char const*, ...)>
c001b213:	90                   	nop

c001b214 <Device::preOpenPCI(PCIDeviceInfo)>:
c001b214:	57                   	push   edi
c001b215:	b9 09 00 00 00       	mov    ecx,0x9
c001b21a:	56                   	push   esi
c001b21b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b21f:	8d 74 24 10          	lea    esi,[esp+0x10]
c001b223:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001b22d:	81 c7 18 01 00 00    	add    edi,0x118
c001b233:	fc                   	cld    
c001b234:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b236:	5e                   	pop    esi
c001b237:	5f                   	pop    edi
c001b238:	c3                   	ret    
c001b239:	90                   	nop

c001b23a <Device::preOpenACPI(void*, char*, char*)>:
c001b23a:	57                   	push   edi
c001b23b:	b9 1e 00 00 00       	mov    ecx,0x1e
c001b240:	56                   	push   esi
c001b241:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b245:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b249:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c001b253:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c001b259:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c001b25f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b263:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b265:	b9 0e 00 00 00       	mov    ecx,0xe
c001b26a:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c001b270:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b274:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b276:	5e                   	pop    esi
c001b277:	5f                   	pop    edi
c001b278:	c3                   	ret    
c001b279:	90                   	nop

c001b27a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b27a:	53                   	push   ebx
c001b27b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b27f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b283:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b287:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b28b:	0f b6 c0             	movzx  eax,al
c001b28e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b292:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b296:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b29a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b29e:	5b                   	pop    ebx
c001b29f:	e9 c0 05 00 00       	jmp    c001b864 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c001b2a4 <Device::getParent()>:
c001b2a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b2a8:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c001b2ae:	c3                   	ret    
c001b2af:	90                   	nop

c001b2b0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b2b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b2b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b2b8:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001b2bd:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b2c1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b2c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b2c9:	e9 fe 06 00 00       	jmp    c001b9cc <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c001b2ce <Device::addChild(Device*)>:
c001b2ce:	53                   	push   ebx
c001b2cf:	83 ec 08             	sub    esp,0x8
c001b2d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b2d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2da:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001b2e0:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001b2e6:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b2e8:	85 d2                	test   edx,edx
c001b2ea:	74 04                	je     c001b2f0 <Device::addChild(Device*)+0x22>
c001b2ec:	89 d3                	mov    ebx,edx
c001b2ee:	eb f6                	jmp    c001b2e6 <Device::addChild(Device*)+0x18>
c001b2f0:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001b2f3:	83 ec 0c             	sub    esp,0xc
c001b2f6:	6a 08                	push   0x8
c001b2f8:	e8 c1 b0 ff ff       	call   c00163be <malloc>
c001b2fd:	89 03                	mov    DWORD PTR [ebx],eax
c001b2ff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b305:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b30c:	83 c4 18             	add    esp,0x18
c001b30f:	5b                   	pop    ebx
c001b310:	c3                   	ret    
c001b311:	90                   	nop

c001b312 <Device::removeAllChildren()>:
c001b312:	56                   	push   esi
c001b313:	53                   	push   ebx
c001b314:	52                   	push   edx
c001b315:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b319:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001b31f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b322:	74 17                	je     c001b33b <Device::removeAllChildren()+0x29>
c001b324:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001b327:	85 c0                	test   eax,eax
c001b329:	74 0c                	je     c001b337 <Device::removeAllChildren()+0x25>
c001b32b:	83 ec 0c             	sub    esp,0xc
c001b32e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b330:	50                   	push   eax
c001b331:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b334:	83 c4 10             	add    esp,0x10
c001b337:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b339:	eb e4                	jmp    c001b31f <Device::removeAllChildren()+0xd>
c001b33b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b341:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b347:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b34d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b354:	58                   	pop    eax
c001b355:	5b                   	pop    ebx
c001b356:	5e                   	pop    esi
c001b357:	c3                   	ret    

c001b358 <Device::hibernateAll()>:
c001b358:	53                   	push   ebx
c001b359:	83 ec 14             	sub    esp,0x14
c001b35c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b360:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b362:	53                   	push   ebx
c001b363:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b366:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b36c:	83 c4 10             	add    esp,0x10
c001b36f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b372:	74 0f                	je     c001b383 <Device::hibernateAll()+0x2b>
c001b374:	83 ec 0c             	sub    esp,0xc
c001b377:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b37a:	e8 d9 ff ff ff       	call   c001b358 <Device::hibernateAll()>
c001b37f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b381:	eb e9                	jmp    c001b36c <Device::hibernateAll()+0x14>
c001b383:	83 c4 08             	add    esp,0x8
c001b386:	5b                   	pop    ebx
c001b387:	c3                   	ret    

c001b388 <Device::wakeAll()>:
c001b388:	53                   	push   ebx
c001b389:	83 ec 14             	sub    esp,0x14
c001b38c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b390:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b392:	53                   	push   ebx
c001b393:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001b396:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b39c:	83 c4 10             	add    esp,0x10
c001b39f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b3a2:	74 0f                	je     c001b3b3 <Device::wakeAll()+0x2b>
c001b3a4:	83 ec 0c             	sub    esp,0xc
c001b3a7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b3aa:	e8 d9 ff ff ff       	call   c001b388 <Device::wakeAll()>
c001b3af:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b3b1:	eb e9                	jmp    c001b39c <Device::wakeAll()+0x14>
c001b3b3:	83 c4 08             	add    esp,0x8
c001b3b6:	5b                   	pop    ebx
c001b3b7:	c3                   	ret    

c001b3b8 <Device::detectAll()>:
c001b3b8:	53                   	push   ebx
c001b3b9:	83 ec 14             	sub    esp,0x14
c001b3bc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b3c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3c2:	53                   	push   ebx
c001b3c3:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b3c6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b3cc:	83 c4 10             	add    esp,0x10
c001b3cf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b3d2:	74 0f                	je     c001b3e3 <Device::detectAll()+0x2b>
c001b3d4:	83 ec 0c             	sub    esp,0xc
c001b3d7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b3da:	e8 d9 ff ff ff       	call   c001b3b8 <Device::detectAll()>
c001b3df:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b3e1:	eb e9                	jmp    c001b3cc <Device::detectAll()+0x14>
c001b3e3:	83 c4 08             	add    esp,0x8
c001b3e6:	5b                   	pop    ebx
c001b3e7:	c3                   	ret    

c001b3e8 <Device::disableLegacyAll()>:
c001b3e8:	c3                   	ret    
c001b3e9:	90                   	nop

c001b3ea <Device::loadDriversForAll()>:
c001b3ea:	c3                   	ret    
c001b3eb:	90                   	nop

c001b3ec <Device::powerSavingAll(PowerSavingLevel)>:
c001b3ec:	56                   	push   esi
c001b3ed:	53                   	push   ebx
c001b3ee:	83 ec 0c             	sub    esp,0xc
c001b3f1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b3f5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b3f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3fb:	56                   	push   esi
c001b3fc:	53                   	push   ebx
c001b3fd:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001b400:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b406:	83 c4 10             	add    esp,0x10
c001b409:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b40c:	74 0f                	je     c001b41d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001b40e:	52                   	push   edx
c001b40f:	52                   	push   edx
c001b410:	56                   	push   esi
c001b411:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b414:	e8 d3 ff ff ff       	call   c001b3ec <Device::powerSavingAll(PowerSavingLevel)>
c001b419:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b41b:	eb e9                	jmp    c001b406 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001b41d:	58                   	pop    eax
c001b41e:	5b                   	pop    ebx
c001b41f:	5e                   	pop    esi
c001b420:	c3                   	ret    
c001b421:	90                   	nop

c001b422 <Device::setName(char const*)>:
c001b422:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001b42a:	e9 11 52 fe ff       	jmp    c0000640 <strcpy>
c001b42f:	90                   	nop

c001b430 <Device::Device(char const*)>:
c001b430:	83 ec 1c             	sub    esp,0x1c
c001b433:	ba 5c 1f 03 c0       	mov    edx,0xc0031f5c
c001b438:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b43c:	89 10                	mov    DWORD PTR [eax],edx
c001b43e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b442:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001b44c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b450:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b45a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b45e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b468:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b46c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b476:	83 ec 08             	sub    esp,0x8
c001b479:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b47d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b481:	e8 9c ff ff ff       	call   c001b422 <Device::setName(char const*)>
c001b486:	83 c4 10             	add    esp,0x10
c001b489:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001b491:	83 ec 0c             	sub    esp,0xc
c001b494:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b498:	e8 21 af ff ff       	call   c00163be <malloc>
c001b49d:	83 c4 10             	add    esp,0x10
c001b4a0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b4a6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b4ad:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b4b1:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001b4b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4bb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b4c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b4c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4cb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b4d1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b4d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4dc:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001b4e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4e7:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001b4ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4f2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b4fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b500:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b50a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b50e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b518:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b51c:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c001b526:	90                   	nop
c001b527:	83 c4 1c             	add    esp,0x1c
c001b52a:	c3                   	ret    
c001b52b:	90                   	nop

c001b52c <Device::getName()>:
c001b52c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b530:	05 d0 00 00 00       	add    eax,0xd0
c001b535:	c3                   	ret    

c001b536 <Device::closeAll()>:
c001b536:	53                   	push   ebx
c001b537:	83 ec 08             	sub    esp,0x8
c001b53a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b53e:	53                   	push   ebx
c001b53f:	e8 e8 ff ff ff       	call   c001b52c <Device::getName()>
c001b544:	52                   	push   edx
c001b545:	50                   	push   eax
c001b546:	68 48 1f 03 c0       	push   0xc0031f48
c001b54b:	e8 fd dc ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c001b550:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b552:	6a 00                	push   0x0
c001b554:	6a 00                	push   0x0
c001b556:	6a 00                	push   0x0
c001b558:	53                   	push   ebx
c001b559:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b55c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b562:	83 c4 20             	add    esp,0x20
c001b565:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b568:	74 12                	je     c001b57c <Device::closeAll()+0x46>
c001b56a:	83 ec 0c             	sub    esp,0xc
c001b56d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b570:	e8 c1 ff ff ff       	call   c001b536 <Device::closeAll()>
c001b575:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b577:	83 c4 10             	add    esp,0x10
c001b57a:	eb e9                	jmp    c001b565 <Device::closeAll()+0x2f>
c001b57c:	83 c4 08             	add    esp,0x8
c001b57f:	5b                   	pop    ebx
c001b580:	c3                   	ret    
c001b581:	90                   	nop

c001b582 <DriverlessDevice::DriverlessDevice(char const*)>:
c001b582:	83 ec 0c             	sub    esp,0xc
c001b585:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b589:	83 ec 08             	sub    esp,0x8
c001b58c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b590:	50                   	push   eax
c001b591:	e8 9a fe ff ff       	call   c001b430 <Device::Device(char const*)>
c001b596:	83 c4 10             	add    esp,0x10
c001b599:	ba 88 1f 03 c0       	mov    edx,0xc0031f88
c001b59e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5a2:	89 10                	mov    DWORD PTR [eax],edx
c001b5a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5a8:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c001b5b2:	90                   	nop
c001b5b3:	83 c4 0c             	add    esp,0xc
c001b5b6:	c3                   	ret    
c001b5b7:	90                   	nop

c001b5b8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001b5b8:	57                   	push   edi
c001b5b9:	56                   	push   esi
c001b5ba:	53                   	push   ebx
c001b5bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5bf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b5c3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b5c7:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001b5cd:	75 0c                	jne    c001b5db <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001b5cf:	52                   	push   edx
c001b5d0:	52                   	push   edx
c001b5d1:	53                   	push   ebx
c001b5d2:	56                   	push   esi
c001b5d3:	e8 3a 35 01 00       	call   c002eb12 <LinkedList<Device>::addElement(Device*)>
c001b5d8:	83 c4 10             	add    esp,0x10
c001b5db:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b5e1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b5e4:	74 12                	je     c001b5f8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001b5e6:	50                   	push   eax
c001b5e7:	57                   	push   edi
c001b5e8:	56                   	push   esi
c001b5e9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b5ec:	e8 c7 ff ff ff       	call   c001b5b8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b5f1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b5f3:	83 c4 10             	add    esp,0x10
c001b5f6:	eb e9                	jmp    c001b5e1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001b5f8:	5b                   	pop    ebx
c001b5f9:	5e                   	pop    esi
c001b5fa:	5f                   	pop    edi
c001b5fb:	c3                   	ret    

c001b5fc <getDevicesOfType(DeviceType)>:
c001b5fc:	53                   	push   ebx
c001b5fd:	83 ec 14             	sub    esp,0x14
c001b600:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b604:	53                   	push   ebx
c001b605:	e8 e4 35 01 00       	call   c002ebee <LinkedList<Device>::LinkedList()>
c001b60a:	83 c4 0c             	add    esp,0xc
c001b60d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b611:	53                   	push   ebx
c001b612:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001b618:	e8 9b ff ff ff       	call   c001b5b8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b61d:	89 d8                	mov    eax,ebx
c001b61f:	83 c4 18             	add    esp,0x18
c001b622:	5b                   	pop    ebx
c001b623:	c2 04 00             	ret    0x4
c001b626:	66 90                	xchg   ax,ax

c001b628 <HardDiskController::HardDiskController(char const*)>:
c001b628:	83 ec 0c             	sub    esp,0xc
c001b62b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b62f:	83 ec 08             	sub    esp,0x8
c001b632:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b636:	50                   	push   eax
c001b637:	e8 f4 fd ff ff       	call   c001b430 <Device::Device(char const*)>
c001b63c:	83 c4 10             	add    esp,0x10
c001b63f:	ba b4 1f 03 c0       	mov    edx,0xc0031fb4
c001b644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b648:	89 10                	mov    DWORD PTR [eax],edx
c001b64a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b64e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001b658:	90                   	nop
c001b659:	83 c4 0c             	add    esp,0xc
c001b65c:	c3                   	ret    
c001b65d:	90                   	nop
c001b65e:	66 90                	xchg   ax,ax

c001b660 <HardDiskController::~HardDiskController()>:
c001b660:	83 ec 0c             	sub    esp,0xc
c001b663:	ba b4 1f 03 c0       	mov    edx,0xc0031fb4
c001b668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b66c:	89 10                	mov    DWORD PTR [eax],edx
c001b66e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b672:	83 ec 0c             	sub    esp,0xc
c001b675:	50                   	push   eax
c001b676:	e8 55 fb ff ff       	call   c001b1d0 <Device::~Device()>
c001b67b:	83 c4 10             	add    esp,0x10
c001b67e:	90                   	nop
c001b67f:	83 c4 0c             	add    esp,0xc
c001b682:	c3                   	ret    
c001b683:	90                   	nop

c001b684 <HardDiskController::~HardDiskController()>:
c001b684:	83 ec 0c             	sub    esp,0xc
c001b687:	83 ec 0c             	sub    esp,0xc
c001b68a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b68e:	e8 cd ff ff ff       	call   c001b660 <HardDiskController::~HardDiskController()>
c001b693:	83 c4 10             	add    esp,0x10
c001b696:	83 ec 08             	sub    esp,0x8
c001b699:	68 58 01 00 00       	push   0x158
c001b69e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6a2:	e8 79 da ff ff       	call   c0019120 <operator delete(void*, unsigned long)>
c001b6a7:	83 c4 10             	add    esp,0x10
c001b6aa:	83 c4 0c             	add    esp,0xc
c001b6ad:	c3                   	ret    

c001b6ae <PhysicalDisk::eject()>:
c001b6ae:	83 c8 ff             	or     eax,0xffffffff
c001b6b1:	c3                   	ret    

c001b6b2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001b6b2:	83 ec 0c             	sub    esp,0xc
c001b6b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6b9:	83 ec 08             	sub    esp,0x8
c001b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6c0:	50                   	push   eax
c001b6c1:	e8 6a fd ff ff       	call   c001b430 <Device::Device(char const*)>
c001b6c6:	83 c4 10             	add    esp,0x10
c001b6c9:	ba e0 1f 03 c0       	mov    edx,0xc0031fe0
c001b6ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6d2:	89 10                	mov    DWORD PTR [eax],edx
c001b6d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6d8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001b6df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6e3:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001b6ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6ee:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001b6f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6fc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b700:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b70a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b714:	90                   	nop
c001b715:	83 c4 0c             	add    esp,0xc
c001b718:	c3                   	ret    
c001b719:	90                   	nop

c001b71a <PhysicalDisk::startCache()>:
c001b71a:	56                   	push   esi
c001b71b:	53                   	push   ebx
c001b71c:	83 ec 10             	sub    esp,0x10
c001b71f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b723:	6a 44                	push   0x44
c001b725:	e8 94 ac ff ff       	call   c00163be <malloc>
c001b72a:	89 c6                	mov    esi,eax
c001b72c:	58                   	pop    eax
c001b72d:	5a                   	pop    edx
c001b72e:	53                   	push   ebx
c001b72f:	56                   	push   esi
c001b730:	e8 6f 17 00 00       	call   c001cea4 <VCache::VCache(PhysicalDisk*)>
c001b735:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001b73b:	83 c4 14             	add    esp,0x14
c001b73e:	5b                   	pop    ebx
c001b73f:	5e                   	pop    esi
c001b740:	c3                   	ret    
c001b741:	90                   	nop

c001b742 <PhysicalDisk::~PhysicalDisk()>:
c001b742:	83 ec 0c             	sub    esp,0xc
c001b745:	ba e0 1f 03 c0       	mov    edx,0xc0031fe0
c001b74a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b74e:	89 10                	mov    DWORD PTR [eax],edx
c001b750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b754:	83 ec 0c             	sub    esp,0xc
c001b757:	50                   	push   eax
c001b758:	e8 73 fa ff ff       	call   c001b1d0 <Device::~Device()>
c001b75d:	83 c4 10             	add    esp,0x10
c001b760:	90                   	nop
c001b761:	83 c4 0c             	add    esp,0xc
c001b764:	c3                   	ret    
c001b765:	90                   	nop

c001b766 <PhysicalDisk::~PhysicalDisk()>:
c001b766:	83 ec 0c             	sub    esp,0xc
c001b769:	83 ec 0c             	sub    esp,0xc
c001b76c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b770:	e8 cd ff ff ff       	call   c001b742 <PhysicalDisk::~PhysicalDisk()>
c001b775:	83 c4 10             	add    esp,0x10
c001b778:	83 ec 08             	sub    esp,0x8
c001b77b:	68 6c 01 00 00       	push   0x16c
c001b780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b784:	e8 97 d9 ff ff       	call   c0019120 <operator delete(void*, unsigned long)>
c001b789:	83 c4 10             	add    esp,0x10
c001b78c:	83 c4 0c             	add    esp,0xc
c001b78f:	c3                   	ret    

c001b790 <int_handler>:
c001b790:	55                   	push   ebp
c001b791:	57                   	push   edi
c001b792:	56                   	push   esi
c001b793:	53                   	push   ebx
c001b794:	83 ec 0c             	sub    esp,0xc
c001b797:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b79b:	80 3d 88 f9 03 c0 00 	cmp    BYTE PTR ds:0xc003f988,0x0
c001b7a2:	74 0b                	je     c001b7af <int_handler+0x1f>
c001b7a4:	fa                   	cli    
c001b7a5:	f4                   	hlt    
c001b7a6:	80 3d 88 f9 03 c0 00 	cmp    BYTE PTR ds:0xc003f988,0x0
c001b7ad:	75 f5                	jne    c001b7a4 <int_handler+0x14>
c001b7af:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001b7b2:	8d 46 e0             	lea    eax,[esi-0x20]
c001b7b5:	83 f8 17             	cmp    eax,0x17
c001b7b8:	76 40                	jbe    c001b7fa <int_handler+0x6a>
c001b7ba:	c1 e6 04             	shl    esi,0x4
c001b7bd:	31 db                	xor    ebx,ebx
c001b7bf:	8d ae 20 df 03 c0    	lea    ebp,[esi-0x3ffc20e0]
c001b7c5:	81 c6 20 cf 03 c0    	add    esi,0xc003cf20
c001b7cb:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001b7cf:	85 c0                	test   eax,eax
c001b7d1:	74 13                	je     c001b7e6 <int_handler+0x56>
c001b7d3:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001b7d6:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001b7da:	74 2c                	je     c001b808 <int_handler+0x78>
c001b7dc:	83 ec 08             	sub    esp,0x8
c001b7df:	52                   	push   edx
c001b7e0:	57                   	push   edi
c001b7e1:	ff d0                	call   eax
c001b7e3:	83 c4 10             	add    esp,0x10
c001b7e6:	83 c3 01             	add    ebx,0x1
c001b7e9:	83 fb 04             	cmp    ebx,0x4
c001b7ec:	75 dd                	jne    c001b7cb <int_handler+0x3b>
c001b7ee:	83 c4 0c             	add    esp,0xc
c001b7f1:	31 c0                	xor    eax,eax
c001b7f3:	5b                   	pop    ebx
c001b7f4:	31 d2                	xor    edx,edx
c001b7f6:	5e                   	pop    esi
c001b7f7:	5f                   	pop    edi
c001b7f8:	5d                   	pop    ebp
c001b7f9:	c3                   	ret    
c001b7fa:	83 ec 0c             	sub    esp,0xc
c001b7fd:	50                   	push   eax
c001b7fe:	e8 75 ba 00 00       	call   c0027278 <HalEndOfInterrupt(int)>
c001b803:	83 c4 10             	add    esp,0x10
c001b806:	eb b2                	jmp    c001b7ba <int_handler+0x2a>
c001b808:	83 ec 08             	sub    esp,0x8
c001b80b:	52                   	push   edx
c001b80c:	57                   	push   edi
c001b80d:	ff d0                	call   eax
c001b80f:	83 c4 10             	add    esp,0x10
c001b812:	83 c4 0c             	add    esp,0xc
c001b815:	5b                   	pop    ebx
c001b816:	5e                   	pop    esi
c001b817:	5f                   	pop    edi
c001b818:	5d                   	pop    ebp
c001b819:	c3                   	ret    

c001b81a <installISRHandler(int, void (*)(regs*, void*), void*)>:
c001b81a:	56                   	push   esi
c001b81b:	31 c0                	xor    eax,eax
c001b81d:	53                   	push   ebx
c001b81e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b826:	89 ca                	mov    edx,ecx
c001b828:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b82c:	c1 e2 04             	shl    edx,0x4
c001b82f:	83 bc 82 20 df 03 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffc20e0],0x0
c001b837:	74 17                	je     c001b850 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001b839:	83 c0 01             	add    eax,0x1
c001b83c:	83 f8 04             	cmp    eax,0x4
c001b83f:	75 ee                	jne    c001b82f <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001b841:	c7 44 24 0c 10 20 03 c0 	mov    DWORD PTR [esp+0xc],0xc0032010
c001b849:	5b                   	pop    ebx
c001b84a:	5e                   	pop    esi
c001b84b:	e9 16 4a 00 00       	jmp    c0020266 <KePanic(char const*)>
c001b850:	8d 04 88             	lea    eax,[eax+ecx*4]
c001b853:	89 1c 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],ebx
c001b85a:	89 34 85 20 cf 03 c0 	mov    DWORD PTR [eax*4-0x3ffc30e0],esi
c001b861:	5b                   	pop    ebx
c001b862:	5e                   	pop    esi
c001b863:	c3                   	ret    

c001b864 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b864:	57                   	push   edi
c001b865:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001b86b:	56                   	push   esi
c001b86c:	53                   	push   ebx
c001b86d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b871:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b875:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001b87c:	74 54                	je     c001b8d2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c001b87e:	89 c7                	mov    edi,eax
c001b880:	84 c0                	test   al,al
c001b882:	74 1d                	je     c001b8a1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c001b884:	83 fe 0f             	cmp    esi,0xf
c001b887:	0f 8f d5 00 00 00    	jg     c001b962 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c001b88d:	0f b6 b6 48 3c 03 c0 	movzx  esi,BYTE PTR [esi-0x3ffcc3b8]
c001b894:	0f b7 bc 36 c0 f6 03 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffc0940]
c001b89c:	d1 ef                	shr    edi,1
c001b89e:	83 e7 01             	and    edi,0x1
c001b8a1:	83 ec 08             	sub    esp,0x8
c001b8a4:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c001b8a9:	31 db                	xor    ebx,ebx
c001b8ab:	50                   	push   eax
c001b8ac:	68 1d 20 03 c0       	push   0xc003201d
c001b8b1:	e8 97 d9 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c001b8b6:	83 c4 10             	add    esp,0x10
c001b8b9:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c001b8be:	85 c0                	test   eax,eax
c001b8c0:	7f 55                	jg     c001b917 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c001b8c2:	83 ec 0c             	sub    esp,0xc
c001b8c5:	68 34 20 03 c0       	push   0xc0032034
c001b8ca:	e8 97 49 00 00       	call   c0020266 <KePanic(char const*)>
c001b8cf:	83 c4 10             	add    esp,0x10
c001b8d2:	8d 7e 20             	lea    edi,[esi+0x20]
c001b8d5:	89 f8                	mov    eax,edi
c001b8d7:	31 d2                	xor    edx,edx
c001b8d9:	c1 e0 04             	shl    eax,0x4
c001b8dc:	8b 8c 90 20 df 03 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffc20e0]
c001b8e3:	85 c9                	test   ecx,ecx
c001b8e5:	0f 84 8e 00 00 00    	je     c001b979 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c001b8eb:	83 c2 01             	add    edx,0x1
c001b8ee:	83 fa 04             	cmp    edx,0x4
c001b8f1:	75 e9                	jne    c001b8dc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c001b8f3:	83 ec 0c             	sub    esp,0xc
c001b8f6:	68 88 20 03 c0       	push   0xc0032088
c001b8fb:	e8 66 49 00 00       	call   c0020266 <KePanic(char const*)>
c001b900:	83 c4 10             	add    esp,0x10
c001b903:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b908:	5b                   	pop    ebx
c001b909:	5e                   	pop    esi
c001b90a:	5f                   	pop    edi
c001b90b:	c3                   	ret    
c001b90c:	83 c3 01             	add    ebx,0x1
c001b90f:	39 1d c0 0b 04 c0    	cmp    DWORD PTR ds:0xc0040bc0,ebx
c001b915:	7e ab                	jle    c001b8c2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c001b917:	83 ec 08             	sub    esp,0x8
c001b91a:	8b 04 9d e0 0b 04 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffbf420]
c001b921:	56                   	push   esi
c001b922:	50                   	push   eax
c001b923:	e8 30 21 01 00       	call   c002da58 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001b928:	83 c4 10             	add    esp,0x10
c001b92b:	84 c0                	test   al,al
c001b92d:	74 dd                	je     c001b90c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c001b92f:	83 ec 04             	sub    esp,0x4
c001b932:	89 f8                	mov    eax,edi
c001b934:	8b 1c 9d e0 0b 04 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffbf420]
c001b93b:	0f b6 f8             	movzx  edi,al
c001b93e:	57                   	push   edi
c001b93f:	8d 7e 20             	lea    edi,[esi+0x20]
c001b942:	6a 00                	push   0x0
c001b944:	89 f8                	mov    eax,edi
c001b946:	0f b6 c0             	movzx  eax,al
c001b949:	50                   	push   eax
c001b94a:	89 f0                	mov    eax,esi
c001b94c:	6a 00                	push   0x0
c001b94e:	0f b6 c0             	movzx  eax,al
c001b951:	6a 00                	push   0x0
c001b953:	50                   	push   eax
c001b954:	53                   	push   ebx
c001b955:	e8 6a 22 01 00       	call   c002dbc4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001b95a:	83 c4 20             	add    esp,0x20
c001b95d:	e9 73 ff ff ff       	jmp    c001b8d5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c001b962:	83 ec 0c             	sub    esp,0xc
c001b965:	31 ff                	xor    edi,edi
c001b967:	68 50 20 03 c0       	push   0xc0032050
c001b96c:	e8 f5 48 00 00       	call   c0020266 <KePanic(char const*)>
c001b971:	83 c4 10             	add    esp,0x10
c001b974:	e9 28 ff ff ff       	jmp    c001b8a1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c001b979:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b97c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b980:	89 14 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],edx
c001b987:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b98b:	5b                   	pop    ebx
c001b98c:	89 14 85 20 cf 03 c0 	mov    DWORD PTR [eax*4-0x3ffc30e0],edx
c001b993:	89 f0                	mov    eax,esi
c001b995:	5e                   	pop    esi
c001b996:	5f                   	pop    edi
c001b997:	c3                   	ret    

c001b998 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c001b998:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b99c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b9a0:	c1 e0 04             	shl    eax,0x4
c001b9a3:	8d 50 10             	lea    edx,[eax+0x10]
c001b9a6:	39 88 20 df 03 c0    	cmp    DWORD PTR [eax-0x3ffc20e0],ecx
c001b9ac:	74 08                	je     c001b9b6 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001b9ae:	83 c0 04             	add    eax,0x4
c001b9b1:	39 d0                	cmp    eax,edx
c001b9b3:	75 f1                	jne    c001b9a6 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001b9b5:	c3                   	ret    
c001b9b6:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001b9c0:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001b9ca:	eb e2                	jmp    c001b9ae <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001b9cc <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b9cc:	53                   	push   ebx
c001b9cd:	83 ec 08             	sub    esp,0x8
c001b9d0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b9d4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b9d9:	74 0e                	je     c001b9e9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001b9db:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001b9e0:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c001b9e7:	75 37                	jne    c001ba20 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c001b9e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9ed:	83 c0 20             	add    eax,0x20
c001b9f0:	c1 e0 04             	shl    eax,0x4
c001b9f3:	8d 50 10             	lea    edx,[eax+0x10]
c001b9f6:	39 98 20 df 03 c0    	cmp    DWORD PTR [eax-0x3ffc20e0],ebx
c001b9fc:	74 0c                	je     c001ba0a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c001b9fe:	83 c0 04             	add    eax,0x4
c001ba01:	39 d0                	cmp    eax,edx
c001ba03:	75 f1                	jne    c001b9f6 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c001ba05:	83 c4 08             	add    esp,0x8
c001ba08:	5b                   	pop    ebx
c001ba09:	c3                   	ret    
c001ba0a:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001ba14:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001ba1e:	eb de                	jmp    c001b9fe <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c001ba20:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c001ba25:	7f 11                	jg     c001ba38 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c001ba27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba2b:	0f b6 80 48 3c 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffcc3b8]
c001ba32:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ba36:	eb b1                	jmp    c001b9e9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001ba38:	83 ec 0c             	sub    esp,0xc
c001ba3b:	68 41 20 03 c0       	push   0xc0032041
c001ba40:	e8 21 48 00 00       	call   c0020266 <KePanic(char const*)>
c001ba45:	83 c4 10             	add    esp,0x10
c001ba48:	eb 9f                	jmp    c001b9e9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c001ba4a <setupINTS()>:
c001ba4a:	31 c0                	xor    eax,eax
c001ba4c:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001ba56:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001ba60:	c7 80 24 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20dc],0x0
c001ba6a:	c7 80 24 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30dc],0x0
c001ba74:	c7 80 28 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20d8],0x0
c001ba7e:	c7 80 28 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30d8],0x0
c001ba88:	c7 80 2c df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20d4],0x0
c001ba92:	c7 80 2c cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30d4],0x0
c001ba9c:	83 c0 10             	add    eax,0x10
c001ba9f:	3d 00 10 00 00       	cmp    eax,0x1000
c001baa4:	75 a6                	jne    c001ba4c <setupINTS()+0x2>
c001baa6:	c3                   	ret    

c001baa7 <convertLegacyIRQNumber(int)>:
c001baa7:	83 ec 0c             	sub    esp,0xc
c001baaa:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001bab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bab4:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001babb:	74 0c                	je     c001bac9 <convertLegacyIRQNumber(int)+0x22>
c001babd:	83 f8 0f             	cmp    eax,0xf
c001bac0:	7f 0b                	jg     c001bacd <convertLegacyIRQNumber(int)+0x26>
c001bac2:	0f b6 80 48 3c 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffcc3b8]
c001bac9:	83 c4 0c             	add    esp,0xc
c001bacc:	c3                   	ret    
c001bacd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bad1:	83 ec 0c             	sub    esp,0xc
c001bad4:	68 50 20 03 c0       	push   0xc0032050
c001bad9:	e8 88 47 00 00       	call   c0020266 <KePanic(char const*)>
c001bade:	83 c4 10             	add    esp,0x10
c001bae1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bae5:	83 c4 0c             	add    esp,0xc
c001bae8:	c3                   	ret    
c001bae9:	90                   	nop

c001baea <startGUI(void*)>:
c001baea:	55                   	push   ebp
c001baeb:	89 e5                	mov    ebp,esp
c001baed:	53                   	push   ebx
c001baee:	83 ec 04             	sub    esp,0x4
c001baf1:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001baf6:	83 e8 01             	sub    eax,0x1
c001baf9:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bafe:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bb03:	85 c0                	test   eax,eax
c001bb05:	75 01                	jne    c001bb08 <startGUI(void*)+0x1e>
c001bb07:	fb                   	sti    
c001bb08:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bb0e:	83 ec 08             	sub    esp,0x8
c001bb11:	6a 01                	push   0x1
c001bb13:	68 ad 20 03 c0       	push   0xc00320ad
c001bb18:	e8 bc 8c 00 00       	call   c00247d9 <Thr::loadDLL(char const*, bool)>
c001bb1d:	83 c4 10             	add    esp,0x10
c001bb20:	83 ec 08             	sub    esp,0x8
c001bb23:	53                   	push   ebx
c001bb24:	50                   	push   eax
c001bb25:	e8 01 8f 00 00       	call   c0024a2b <Thr::executeDLL(unsigned long, void*)>
c001bb2a:	83 c4 10             	add    esp,0x10
c001bb2d:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bb33:	83 ec 08             	sub    esp,0x8
c001bb36:	6a 01                	push   0x1
c001bb38:	68 c7 20 03 c0       	push   0xc00320c7
c001bb3d:	e8 97 8c 00 00       	call   c00247d9 <Thr::loadDLL(char const*, bool)>
c001bb42:	83 c4 10             	add    esp,0x10
c001bb45:	83 ec 08             	sub    esp,0x8
c001bb48:	53                   	push   ebx
c001bb49:	50                   	push   eax
c001bb4a:	e8 dc 8e 00 00       	call   c0024a2b <Thr::executeDLL(unsigned long, void*)>
c001bb4f:	83 c4 10             	add    esp,0x10
c001bb52:	eb fe                	jmp    c001bb52 <startGUI(void*)+0x68>

c001bb54 <startGUIVESA(void*)>:
c001bb54:	55                   	push   ebp
c001bb55:	89 e5                	mov    ebp,esp
c001bb57:	53                   	push   ebx
c001bb58:	83 ec 04             	sub    esp,0x4
c001bb5b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bb60:	83 e8 01             	sub    eax,0x1
c001bb63:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bb68:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bb6d:	85 c0                	test   eax,eax
c001bb6f:	75 01                	jne    c001bb72 <startGUIVESA(void*)+0x1e>
c001bb71:	fb                   	sti    
c001bb72:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bb78:	83 ec 08             	sub    esp,0x8
c001bb7b:	6a 01                	push   0x1
c001bb7d:	68 e5 20 03 c0       	push   0xc00320e5
c001bb82:	e8 52 8c 00 00       	call   c00247d9 <Thr::loadDLL(char const*, bool)>
c001bb87:	83 c4 10             	add    esp,0x10
c001bb8a:	83 ec 08             	sub    esp,0x8
c001bb8d:	53                   	push   ebx
c001bb8e:	50                   	push   eax
c001bb8f:	e8 97 8e 00 00       	call   c0024a2b <Thr::executeDLL(unsigned long, void*)>
c001bb94:	83 c4 10             	add    esp,0x10
c001bb97:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bb9d:	83 ec 08             	sub    esp,0x8
c001bba0:	6a 01                	push   0x1
c001bba2:	68 c7 20 03 c0       	push   0xc00320c7
c001bba7:	e8 2d 8c 00 00       	call   c00247d9 <Thr::loadDLL(char const*, bool)>
c001bbac:	83 c4 10             	add    esp,0x10
c001bbaf:	83 ec 08             	sub    esp,0x8
c001bbb2:	53                   	push   ebx
c001bbb3:	50                   	push   eax
c001bbb4:	e8 72 8e 00 00       	call   c0024a2b <Thr::executeDLL(unsigned long, void*)>
c001bbb9:	83 c4 10             	add    esp,0x10
c001bbbc:	eb fe                	jmp    c001bbbc <startGUIVESA(void*)+0x68>

c001bbbe <sendKeyToTerminal(unsigned char)>:
c001bbbe:	55                   	push   ebp
c001bbbf:	89 e5                	mov    ebp,esp
c001bbc1:	83 ec 28             	sub    esp,0x28
c001bbc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bbc7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001bbca:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c001bbcf:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001bbd3:	83 ec 08             	sub    esp,0x8
c001bbd6:	52                   	push   edx
c001bbd7:	50                   	push   eax
c001bbd8:	e8 e1 ba ff ff       	call   c00176be <VgaText::receiveKey(unsigned char)>
c001bbdd:	83 c4 10             	add    esp,0x10
c001bbe0:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bbe4:	83 f8 0a             	cmp    eax,0xa
c001bbe7:	74 16                	je     c001bbff <sendKeyToTerminal(unsigned char)+0x41>
c001bbe9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bbed:	83 f8 03             	cmp    eax,0x3
c001bbf0:	74 0d                	je     c001bbff <sendKeyToTerminal(unsigned char)+0x41>
c001bbf2:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bbf6:	83 f8 1c             	cmp    eax,0x1c
c001bbf9:	0f 85 97 00 00 00    	jne    c001bc96 <sendKeyToTerminal(unsigned char)+0xd8>
c001bbff:	fa                   	cli    
c001bc00:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bc05:	83 c0 01             	add    eax,0x1
c001bc08:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bc0d:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bc12:	83 c0 01             	add    eax,0x1
c001bc15:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001bc1a:	a1 20 ef 03 c0       	mov    eax,ds:0xc003ef20
c001bc1f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bc22:	c7 05 20 ef 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003ef20,0x0
c001bc2c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001bc30:	74 1f                	je     c001bc51 <sendKeyToTerminal(unsigned char)+0x93>
c001bc32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001bc35:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001bc38:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bc3b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc3e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bc41:	83 ec 0c             	sub    esp,0xc
c001bc44:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001bc47:	e8 08 99 00 00       	call   c0025554 <unblockTask(ThreadControlBlock*)>
c001bc4c:	83 c4 10             	add    esp,0x10
c001bc4f:	eb db                	jmp    c001bc2c <sendKeyToTerminal(unsigned char)+0x6e>
c001bc51:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bc56:	83 e8 01             	sub    eax,0x1
c001bc59:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001bc5e:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bc63:	85 c0                	test   eax,eax
c001bc65:	75 18                	jne    c001bc7f <sendKeyToTerminal(unsigned char)+0xc1>
c001bc67:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c001bc6c:	85 c0                	test   eax,eax
c001bc6e:	74 0f                	je     c001bc7f <sendKeyToTerminal(unsigned char)+0xc1>
c001bc70:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c001bc7a:	e8 dd 95 00 00       	call   c002525c <schedule()>
c001bc7f:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bc84:	83 e8 01             	sub    eax,0x1
c001bc87:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bc8c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bc91:	85 c0                	test   eax,eax
c001bc93:	75 01                	jne    c001bc96 <sendKeyToTerminal(unsigned char)+0xd8>
c001bc95:	fb                   	sti    
c001bc96:	90                   	nop
c001bc97:	c9                   	leave  
c001bc98:	c3                   	ret    

c001bc99 <sendKeyboardToken(KeyboardToken)>:
c001bc99:	55                   	push   ebp
c001bc9a:	89 e5                	mov    ebp,esp
c001bc9c:	83 ec 18             	sub    esp,0x18
c001bc9f:	e8 12 46 00 00       	call   c00202b6 <KeUserIOReceived()>
c001bca4:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001bca7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bcaa:	0f b7 c0             	movzx  eax,ax
c001bcad:	83 f2 01             	xor    edx,0x1
c001bcb0:	88 90 40 ef 03 c0    	mov    BYTE PTR [eax-0x3ffc10c0],dl
c001bcb6:	a1 28 ef 03 c0       	mov    eax,ds:0xc003ef28
c001bcbb:	85 c0                	test   eax,eax
c001bcbd:	74 24                	je     c001bce3 <sendKeyboardToken(KeyboardToken)+0x4a>
c001bcbf:	8b 0d 28 ef 03 c0    	mov    ecx,DWORD PTR ds:0xc003ef28
c001bcc5:	83 ec 04             	sub    esp,0x4
c001bcc8:	68 40 ef 03 c0       	push   0xc003ef40
c001bccd:	83 ec 08             	sub    esp,0x8
c001bcd0:	89 e2                	mov    edx,esp
c001bcd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bcd5:	89 02                	mov    DWORD PTR [edx],eax
c001bcd7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bcda:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001bcde:	ff d1                	call   ecx
c001bce0:	83 c4 10             	add    esp,0x10
c001bce3:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001bce7:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001bcea:	a0 48 f3 03 c0       	mov    al,ds:0xc003f348
c001bcef:	0f b6 d2             	movzx  edx,dl
c001bcf2:	0f b6 c0             	movzx  eax,al
c001bcf5:	39 c2                	cmp    edx,eax
c001bcf7:	74 1c                	je     c001bd15 <sendKeyboardToken(KeyboardToken)+0x7c>
c001bcf9:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001bcfc:	a2 48 f3 03 c0       	mov    ds:0xc003f348,al
c001bd01:	a0 48 f3 03 c0       	mov    al,ds:0xc003f348
c001bd06:	0f b6 c0             	movzx  eax,al
c001bd09:	83 ec 0c             	sub    esp,0xc
c001bd0c:	50                   	push   eax
c001bd0d:	e8 f8 b0 ff ff       	call   c0016e0a <setTerminalScrollLock(bool)>
c001bd12:	83 c4 10             	add    esp,0x10
c001bd15:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001bd18:	0f b6 c0             	movzx  eax,al
c001bd1b:	85 c0                	test   eax,eax
c001bd1d:	0f 84 da 00 00 00    	je     c001bdfd <sendKeyboardToken(KeyboardToken)+0x164>
c001bd23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd26:	0f b7 c0             	movzx  eax,ax
c001bd29:	3d 18 03 00 00       	cmp    eax,0x318
c001bd2e:	75 06                	jne    c001bd36 <sendKeyboardToken(KeyboardToken)+0x9d>
c001bd30:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001bd36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd39:	0f b7 c0             	movzx  eax,ax
c001bd3c:	3d 19 03 00 00       	cmp    eax,0x319
c001bd41:	75 06                	jne    c001bd49 <sendKeyboardToken(KeyboardToken)+0xb0>
c001bd43:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001bd49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd4c:	0f b7 c0             	movzx  eax,ax
c001bd4f:	3d 1a 03 00 00       	cmp    eax,0x31a
c001bd54:	75 06                	jne    c001bd5c <sendKeyboardToken(KeyboardToken)+0xc3>
c001bd56:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001bd5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd5f:	0f b7 c0             	movzx  eax,ax
c001bd62:	3d 1b 03 00 00       	cmp    eax,0x31b
c001bd67:	75 06                	jne    c001bd6f <sendKeyboardToken(KeyboardToken)+0xd6>
c001bd69:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001bd6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd72:	0f b7 c0             	movzx  eax,ax
c001bd75:	3d 1c 03 00 00       	cmp    eax,0x31c
c001bd7a:	75 06                	jne    c001bd82 <sendKeyboardToken(KeyboardToken)+0xe9>
c001bd7c:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001bd82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd85:	0f b7 c0             	movzx  eax,ax
c001bd88:	3d 1d 03 00 00       	cmp    eax,0x31d
c001bd8d:	75 06                	jne    c001bd95 <sendKeyboardToken(KeyboardToken)+0xfc>
c001bd8f:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001bd95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd98:	0f b7 c0             	movzx  eax,ax
c001bd9b:	3d 1e 03 00 00       	cmp    eax,0x31e
c001bda0:	75 06                	jne    c001bda8 <sendKeyboardToken(KeyboardToken)+0x10f>
c001bda2:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001bda8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdab:	0f b7 c0             	movzx  eax,ax
c001bdae:	3d 1f 03 00 00       	cmp    eax,0x31f
c001bdb3:	75 06                	jne    c001bdbb <sendKeyboardToken(KeyboardToken)+0x122>
c001bdb5:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001bdbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdbe:	0f b7 c0             	movzx  eax,ax
c001bdc1:	3d 20 03 00 00       	cmp    eax,0x320
c001bdc6:	75 06                	jne    c001bdce <sendKeyboardToken(KeyboardToken)+0x135>
c001bdc8:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001bdce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdd1:	0f b7 c0             	movzx  eax,ax
c001bdd4:	3d 21 03 00 00       	cmp    eax,0x321
c001bdd9:	75 06                	jne    c001bde1 <sendKeyboardToken(KeyboardToken)+0x148>
c001bddb:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001bde1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bde4:	0f b7 c0             	movzx  eax,ax
c001bde7:	3d 22 03 00 00       	cmp    eax,0x322
c001bdec:	0f 85 f1 00 00 00    	jne    c001bee3 <sendKeyboardToken(KeyboardToken)+0x24a>
c001bdf2:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001bdf8:	e9 e6 00 00 00       	jmp    c001bee3 <sendKeyboardToken(KeyboardToken)+0x24a>
c001bdfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be00:	0f b7 c0             	movzx  eax,ax
c001be03:	3d 18 03 00 00       	cmp    eax,0x318
c001be08:	75 0a                	jne    c001be14 <sendKeyboardToken(KeyboardToken)+0x17b>
c001be0a:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001be10:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be17:	0f b7 c0             	movzx  eax,ax
c001be1a:	3d 19 03 00 00       	cmp    eax,0x319
c001be1f:	75 0a                	jne    c001be2b <sendKeyboardToken(KeyboardToken)+0x192>
c001be21:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001be27:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be2e:	0f b7 c0             	movzx  eax,ax
c001be31:	3d 1a 03 00 00       	cmp    eax,0x31a
c001be36:	75 0a                	jne    c001be42 <sendKeyboardToken(KeyboardToken)+0x1a9>
c001be38:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001be3e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be45:	0f b7 c0             	movzx  eax,ax
c001be48:	3d 1b 03 00 00       	cmp    eax,0x31b
c001be4d:	75 0a                	jne    c001be59 <sendKeyboardToken(KeyboardToken)+0x1c0>
c001be4f:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001be55:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be5c:	0f b7 c0             	movzx  eax,ax
c001be5f:	3d 1c 03 00 00       	cmp    eax,0x31c
c001be64:	75 0a                	jne    c001be70 <sendKeyboardToken(KeyboardToken)+0x1d7>
c001be66:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001be6c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be73:	0f b7 c0             	movzx  eax,ax
c001be76:	3d 1d 03 00 00       	cmp    eax,0x31d
c001be7b:	75 0a                	jne    c001be87 <sendKeyboardToken(KeyboardToken)+0x1ee>
c001be7d:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001be83:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be8a:	0f b7 c0             	movzx  eax,ax
c001be8d:	3d 1e 03 00 00       	cmp    eax,0x31e
c001be92:	75 0a                	jne    c001be9e <sendKeyboardToken(KeyboardToken)+0x205>
c001be94:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001be9a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bea1:	0f b7 c0             	movzx  eax,ax
c001bea4:	3d 1f 03 00 00       	cmp    eax,0x31f
c001bea9:	75 0a                	jne    c001beb5 <sendKeyboardToken(KeyboardToken)+0x21c>
c001beab:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001beb1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001beb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001beb8:	0f b7 c0             	movzx  eax,ax
c001bebb:	3d 20 03 00 00       	cmp    eax,0x320
c001bec0:	75 0a                	jne    c001becc <sendKeyboardToken(KeyboardToken)+0x233>
c001bec2:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001bec8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001becc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001becf:	0f b7 c0             	movzx  eax,ax
c001bed2:	3d 21 03 00 00       	cmp    eax,0x321
c001bed7:	75 0a                	jne    c001bee3 <sendKeyboardToken(KeyboardToken)+0x24a>
c001bed9:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001bedf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bee3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bee6:	0f b7 c0             	movzx  eax,ax
c001bee9:	3d 00 02 00 00       	cmp    eax,0x200
c001beee:	75 2f                	jne    c001bf1f <sendKeyboardToken(KeyboardToken)+0x286>
c001bef0:	a0 40 f3 03 c0       	mov    al,ds:0xc003f340
c001bef5:	83 f0 01             	xor    eax,0x1
c001bef8:	0f b6 c0             	movzx  eax,al
c001befb:	85 c0                	test   eax,eax
c001befd:	74 20                	je     c001bf1f <sendKeyboardToken(KeyboardToken)+0x286>
c001beff:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001bf04:	6a 01                	push   0x1
c001bf06:	6a 00                	push   0x0
c001bf08:	68 ea ba 01 c0       	push   0xc001baea
c001bf0d:	50                   	push   eax
c001bf0e:	e8 f9 90 00 00       	call   c002500c <Process::createThread(void (*)(void*), void*, int)>
c001bf13:	83 c4 10             	add    esp,0x10
c001bf16:	c6 05 40 f3 03 c0 01 	mov    BYTE PTR ds:0xc003f340,0x1
c001bf1d:	eb 3a                	jmp    c001bf59 <sendKeyboardToken(KeyboardToken)+0x2c0>
c001bf1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf22:	0f b7 c0             	movzx  eax,ax
c001bf25:	3d 01 02 00 00       	cmp    eax,0x201
c001bf2a:	75 2d                	jne    c001bf59 <sendKeyboardToken(KeyboardToken)+0x2c0>
c001bf2c:	a0 40 f3 03 c0       	mov    al,ds:0xc003f340
c001bf31:	83 f0 01             	xor    eax,0x1
c001bf34:	0f b6 c0             	movzx  eax,al
c001bf37:	85 c0                	test   eax,eax
c001bf39:	74 1e                	je     c001bf59 <sendKeyboardToken(KeyboardToken)+0x2c0>
c001bf3b:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001bf40:	6a 01                	push   0x1
c001bf42:	6a 00                	push   0x0
c001bf44:	68 54 bb 01 c0       	push   0xc001bb54
c001bf49:	50                   	push   eax
c001bf4a:	e8 bd 90 00 00       	call   c002500c <Process::createThread(void (*)(void*), void*, int)>
c001bf4f:	83 c4 10             	add    esp,0x10
c001bf52:	c6 05 40 f3 03 c0 01 	mov    BYTE PTR ds:0xc003f340,0x1
c001bf59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf5c:	0f b7 c0             	movzx  eax,ax
c001bf5f:	3d 25 03 00 00       	cmp    eax,0x325
c001bf64:	75 06                	jne    c001bf6c <sendKeyboardToken(KeyboardToken)+0x2d3>
c001bf66:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001bf6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf6f:	0f b7 c0             	movzx  eax,ax
c001bf72:	3d 24 03 00 00       	cmp    eax,0x324
c001bf77:	75 06                	jne    c001bf7f <sendKeyboardToken(KeyboardToken)+0x2e6>
c001bf79:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001bf7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf82:	0f b7 c0             	movzx  eax,ax
c001bf85:	3d 23 03 00 00       	cmp    eax,0x323
c001bf8a:	75 06                	jne    c001bf92 <sendKeyboardToken(KeyboardToken)+0x2f9>
c001bf8c:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001bf92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf95:	0f b7 c0             	movzx  eax,ax
c001bf98:	3d 26 03 00 00       	cmp    eax,0x326
c001bf9d:	75 06                	jne    c001bfa5 <sendKeyboardToken(KeyboardToken)+0x30c>
c001bf9f:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001bfa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bfa8:	0f b7 c0             	movzx  eax,ax
c001bfab:	3d 27 03 00 00       	cmp    eax,0x327
c001bfb0:	75 06                	jne    c001bfb8 <sendKeyboardToken(KeyboardToken)+0x31f>
c001bfb2:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001bfb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bfbb:	0f b7 c0             	movzx  eax,ax
c001bfbe:	3d 22 03 00 00       	cmp    eax,0x322
c001bfc3:	75 06                	jne    c001bfcb <sendKeyboardToken(KeyboardToken)+0x332>
c001bfc5:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001bfcb:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001bfcf:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001bfd2:	83 f0 01             	xor    eax,0x1
c001bfd5:	0f b6 c0             	movzx  eax,al
c001bfd8:	85 c0                	test   eax,eax
c001bfda:	74 7c                	je     c001c058 <sendKeyboardToken(KeyboardToken)+0x3bf>
c001bfdc:	a0 41 f0 03 c0       	mov    al,ds:0xc003f041
c001bfe1:	0f b6 c0             	movzx  eax,al
c001bfe4:	85 c0                	test   eax,eax
c001bfe6:	74 43                	je     c001c02b <sendKeyboardToken(KeyboardToken)+0x392>
c001bfe8:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001bfec:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001bff0:	85 c0                	test   eax,eax
c001bff2:	74 2b                	je     c001c01f <sendKeyboardToken(KeyboardToken)+0x386>
c001bff4:	8b 15 44 f3 03 c0    	mov    edx,DWORD PTR ds:0xc003f344
c001bffa:	89 d0                	mov    eax,edx
c001bffc:	c1 e0 02             	shl    eax,0x2
c001bfff:	01 d0                	add    eax,edx
c001c001:	01 c0                	add    eax,eax
c001c003:	a3 44 f3 03 c0       	mov    ds:0xc003f344,eax
c001c008:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c00b:	0f b7 c0             	movzx  eax,ax
c001c00e:	8d 50 d0             	lea    edx,[eax-0x30]
c001c011:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c016:	01 d0                	add    eax,edx
c001c018:	a3 44 f3 03 c0       	mov    ds:0xc003f344,eax
c001c01d:	eb 71                	jmp    c001c090 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c01f:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c029:	eb 65                	jmp    c001c090 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c02b:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c030:	85 c0                	test   eax,eax
c001c032:	74 18                	je     c001c04c <sendKeyboardToken(KeyboardToken)+0x3b3>
c001c034:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c039:	0f b6 c0             	movzx  eax,al
c001c03c:	83 ec 0c             	sub    esp,0xc
c001c03f:	50                   	push   eax
c001c040:	e8 79 fb ff ff       	call   c001bbbe <sendKeyToTerminal(unsigned char)>
c001c045:	83 c4 10             	add    esp,0x10
c001c048:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c04c:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c056:	eb 38                	jmp    c001c090 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c058:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c05b:	0f b7 c0             	movzx  eax,ax
c001c05e:	3d 01 01 00 00       	cmp    eax,0x101
c001c063:	75 2b                	jne    c001c090 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c065:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c06a:	85 c0                	test   eax,eax
c001c06c:	74 18                	je     c001c086 <sendKeyboardToken(KeyboardToken)+0x3ed>
c001c06e:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c073:	0f b6 c0             	movzx  eax,al
c001c076:	83 ec 0c             	sub    esp,0xc
c001c079:	50                   	push   eax
c001c07a:	e8 3f fb ff ff       	call   c001bbbe <sendKeyToTerminal(unsigned char)>
c001c07f:	83 c4 10             	add    esp,0x10
c001c082:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c086:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c090:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001c093:	83 f0 01             	xor    eax,0x1
c001c096:	0f b6 c0             	movzx  eax,al
c001c099:	85 c0                	test   eax,eax
c001c09b:	74 5a                	je     c001c0f7 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c09d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c0a0:	83 f0 01             	xor    eax,0x1
c001c0a3:	0f b6 c0             	movzx  eax,al
c001c0a6:	85 c0                	test   eax,eax
c001c0a8:	74 4d                	je     c001c0f7 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c0aa:	a0 40 f0 03 c0       	mov    al,ds:0xc003f040
c001c0af:	83 f0 01             	xor    eax,0x1
c001c0b2:	0f b6 c0             	movzx  eax,al
c001c0b5:	85 c0                	test   eax,eax
c001c0b7:	74 3e                	je     c001c0f7 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c0b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0bc:	0f b7 c0             	movzx  eax,ax
c001c0bf:	83 f8 1f             	cmp    eax,0x1f
c001c0c2:	76 0b                	jbe    c001c0cf <sendKeyboardToken(KeyboardToken)+0x436>
c001c0c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0c7:	0f b7 c0             	movzx  eax,ax
c001c0ca:	83 f8 7e             	cmp    eax,0x7e
c001c0cd:	76 16                	jbe    c001c0e5 <sendKeyboardToken(KeyboardToken)+0x44c>
c001c0cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0d2:	0f b7 c0             	movzx  eax,ax
c001c0d5:	83 f8 0a             	cmp    eax,0xa
c001c0d8:	74 0b                	je     c001c0e5 <sendKeyboardToken(KeyboardToken)+0x44c>
c001c0da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0dd:	0f b7 c0             	movzx  eax,ax
c001c0e0:	83 f8 08             	cmp    eax,0x8
c001c0e3:	75 12                	jne    c001c0f7 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c0e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0e8:	0f b6 c0             	movzx  eax,al
c001c0eb:	83 ec 0c             	sub    esp,0xc
c001c0ee:	50                   	push   eax
c001c0ef:	e8 ca fa ff ff       	call   c001bbbe <sendKeyToTerminal(unsigned char)>
c001c0f4:	83 c4 10             	add    esp,0x10
c001c0f7:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001c0fa:	83 f0 01             	xor    eax,0x1
c001c0fd:	0f b6 c0             	movzx  eax,al
c001c100:	85 c0                	test   eax,eax
c001c102:	74 5d                	je     c001c161 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c104:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c107:	83 f0 01             	xor    eax,0x1
c001c10a:	0f b6 c0             	movzx  eax,al
c001c10d:	85 c0                	test   eax,eax
c001c10f:	74 50                	je     c001c161 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c111:	a0 40 f0 03 c0       	mov    al,ds:0xc003f040
c001c116:	0f b6 c0             	movzx  eax,al
c001c119:	85 c0                	test   eax,eax
c001c11b:	74 44                	je     c001c161 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c11d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c120:	0f b7 c0             	movzx  eax,ax
c001c123:	83 f8 3f             	cmp    eax,0x3f
c001c126:	76 39                	jbe    c001c161 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c128:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c12b:	0f b7 c0             	movzx  eax,ax
c001c12e:	83 f8 7f             	cmp    eax,0x7f
c001c131:	77 2e                	ja     c001c161 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c133:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c136:	88 c2                	mov    dl,al
c001c138:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c13b:	0f b7 c0             	movzx  eax,ax
c001c13e:	83 f8 5f             	cmp    eax,0x5f
c001c141:	76 04                	jbe    c001c147 <sendKeyboardToken(KeyboardToken)+0x4ae>
c001c143:	b0 20                	mov    al,0x20
c001c145:	eb 02                	jmp    c001c149 <sendKeyboardToken(KeyboardToken)+0x4b0>
c001c147:	b0 00                	mov    al,0x0
c001c149:	89 d1                	mov    ecx,edx
c001c14b:	29 c1                	sub    ecx,eax
c001c14d:	89 c8                	mov    eax,ecx
c001c14f:	83 e8 40             	sub    eax,0x40
c001c152:	0f b6 c0             	movzx  eax,al
c001c155:	83 ec 0c             	sub    esp,0xc
c001c158:	50                   	push   eax
c001c159:	e8 60 fa ff ff       	call   c001bbbe <sendKeyToTerminal(unsigned char)>
c001c15e:	83 c4 10             	add    esp,0x10
c001c161:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c164:	0f b7 c0             	movzx  eax,ax
c001c167:	3d 00 03 00 00       	cmp    eax,0x300
c001c16c:	75 12                	jne    c001c180 <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c16e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c171:	83 f0 01             	xor    eax,0x1
c001c174:	0f b6 c0             	movzx  eax,al
c001c177:	85 c0                	test   eax,eax
c001c179:	74 05                	je     c001c180 <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c17b:	e8 8b ac ff ff       	call   c0016e0b <doTerminalCycle()>
c001c180:	90                   	nop
c001c181:	c9                   	leave  
c001c182:	c3                   	ret    

c001c183 <clearInternalKeybuffer(VgaText*)>:
c001c183:	55                   	push   ebp
c001c184:	89 e5                	mov    ebp,esp
c001c186:	83 ec 08             	sub    esp,0x8
c001c189:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c18c:	05 02 01 00 00       	add    eax,0x102
c001c191:	83 ec 0c             	sub    esp,0xc
c001c194:	50                   	push   eax
c001c195:	e8 d6 43 fe ff       	call   c0000570 <strlen>
c001c19a:	83 c4 10             	add    esp,0x10
c001c19d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c1a0:	81 c2 02 01 00 00    	add    edx,0x102
c001c1a6:	83 ec 04             	sub    esp,0x4
c001c1a9:	50                   	push   eax
c001c1aa:	6a 00                	push   0x0
c001c1ac:	52                   	push   edx
c001c1ad:	e8 3e 43 fe ff       	call   c00004f0 <memset>
c001c1b2:	83 c4 10             	add    esp,0x10
c001c1b5:	90                   	nop
c001c1b6:	c9                   	leave  
c001c1b7:	c3                   	ret    

c001c1b8 <readKeyboard(VgaText*, char*, unsigned long)>:
c001c1b8:	55                   	push   ebp
c001c1b9:	89 e5                	mov    ebp,esp
c001c1bb:	83 ec 18             	sub    esp,0x18
c001c1be:	a1 28 ef 03 c0       	mov    eax,ds:0xc003ef28
c001c1c3:	85 c0                	test   eax,eax
c001c1c5:	74 2a                	je     c001c1f1 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c001c1c7:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c001c1cd:	8b 0d 28 ef 03 c0    	mov    ecx,DWORD PTR ds:0xc003ef28
c001c1d3:	83 ec 04             	sub    esp,0x4
c001c1d6:	68 40 ef 03 c0       	push   0xc003ef40
c001c1db:	83 ec 08             	sub    esp,0x8
c001c1de:	89 e2                	mov    edx,esp
c001c1e0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001c1e3:	89 02                	mov    DWORD PTR [edx],eax
c001c1e5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001c1e8:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001c1ec:	ff d1                	call   ecx
c001c1ee:	83 c4 10             	add    esp,0x10
c001c1f1:	fb                   	sti    
c001c1f2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001c1f9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001c1fd:	0f 84 0d 01 00 00    	je     c001c310 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c001c203:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c206:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c20c:	0f be c0             	movsx  eax,al
c001c20f:	85 c0                	test   eax,eax
c001c211:	75 2c                	jne    c001c23f <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c001c213:	fa                   	cli    
c001c214:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c219:	83 c0 01             	add    eax,0x1
c001c21c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001c221:	e8 36 90 00 00       	call   c002525c <schedule()>
c001c226:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c22b:	83 e8 01             	sub    eax,0x1
c001c22e:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001c233:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c238:	85 c0                	test   eax,eax
c001c23a:	75 c7                	jne    c001c203 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c23c:	fb                   	sti    
c001c23d:	eb c4                	jmp    c001c203 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c23f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c242:	8d 50 01             	lea    edx,[eax+0x1]
c001c245:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c248:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c24b:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c001c251:	88 10                	mov    BYTE PTR [eax],dl
c001c253:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c256:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c25c:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001c25f:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c263:	83 f8 03             	cmp    eax,0x3
c001c266:	75 1e                	jne    c001c286 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c001c268:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c26d:	8b 00                	mov    eax,DWORD PTR [eax]
c001c26f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c272:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c278:	83 ec 08             	sub    esp,0x8
c001c27b:	6a 02                	push   0x2
c001c27d:	50                   	push   eax
c001c27e:	e8 9c 48 00 00       	call   c0020b1f <KeRaiseSignal(SigHandlerBlock*, int)>
c001c283:	83 c4 10             	add    esp,0x10
c001c286:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c28a:	83 f8 1c             	cmp    eax,0x1c
c001c28d:	75 1e                	jne    c001c2ad <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c001c28f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c294:	8b 00                	mov    eax,DWORD PTR [eax]
c001c296:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c299:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c29f:	83 ec 08             	sub    esp,0x8
c001c2a2:	6a 09                	push   0x9
c001c2a4:	50                   	push   eax
c001c2a5:	e8 75 48 00 00       	call   c0020b1f <KeRaiseSignal(SigHandlerBlock*, int)>
c001c2aa:	83 c4 10             	add    esp,0x10
c001c2ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2b0:	05 02 01 00 00       	add    eax,0x102
c001c2b5:	83 ec 0c             	sub    esp,0xc
c001c2b8:	50                   	push   eax
c001c2b9:	e8 b2 42 fe ff       	call   c0000570 <strlen>
c001c2be:	83 c4 10             	add    esp,0x10
c001c2c1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c2c4:	81 c2 02 01 00 00    	add    edx,0x102
c001c2ca:	8d 4a 01             	lea    ecx,[edx+0x1]
c001c2cd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c2d0:	81 c2 02 01 00 00    	add    edx,0x102
c001c2d6:	83 ec 04             	sub    esp,0x4
c001c2d9:	50                   	push   eax
c001c2da:	51                   	push   ecx
c001c2db:	52                   	push   edx
c001c2dc:	e8 ef 40 fe ff       	call   c00003d0 <memmove>
c001c2e1:	83 c4 10             	add    esp,0x10
c001c2e4:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c001c2e8:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c001c2ec:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c2f0:	83 f8 0a             	cmp    eax,0xa
c001c2f3:	74 16                	je     c001c30b <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c2f5:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c2f9:	83 f8 03             	cmp    eax,0x3
c001c2fc:	74 0d                	je     c001c30b <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c2fe:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c302:	83 f8 1c             	cmp    eax,0x1c
c001c305:	0f 85 ee fe ff ff    	jne    c001c1f9 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c001c30b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c30e:	eb 03                	jmp    c001c313 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c001c310:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c313:	c9                   	leave  
c001c314:	c3                   	ret    
c001c315:	90                   	nop

c001c316 <Keyboard::Keyboard(char const*)>:
c001c316:	83 ec 0c             	sub    esp,0xc
c001c319:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c31d:	83 ec 08             	sub    esp,0x8
c001c320:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c324:	50                   	push   eax
c001c325:	e8 06 f1 ff ff       	call   c001b430 <Device::Device(char const*)>
c001c32a:	83 c4 10             	add    esp,0x10
c001c32d:	ba 08 21 03 c0       	mov    edx,0xc0032108
c001c332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c336:	89 10                	mov    DWORD PTR [eax],edx
c001c338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c33c:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001c346:	c6 05 24 ef 03 c0 01 	mov    BYTE PTR ds:0xc003ef24,0x1
c001c34d:	90                   	nop
c001c34e:	83 c4 0c             	add    esp,0xc
c001c351:	c3                   	ret    

c001c352 <Keyboard::~Keyboard()>:
c001c352:	83 ec 0c             	sub    esp,0xc
c001c355:	ba 08 21 03 c0       	mov    edx,0xc0032108
c001c35a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c35e:	89 10                	mov    DWORD PTR [eax],edx
c001c360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c364:	83 ec 0c             	sub    esp,0xc
c001c367:	50                   	push   eax
c001c368:	e8 63 ee ff ff       	call   c001b1d0 <Device::~Device()>
c001c36d:	83 c4 10             	add    esp,0x10
c001c370:	90                   	nop
c001c371:	83 c4 0c             	add    esp,0xc
c001c374:	c3                   	ret    
c001c375:	90                   	nop

c001c376 <Keyboard::~Keyboard()>:
c001c376:	83 ec 0c             	sub    esp,0xc
c001c379:	83 ec 0c             	sub    esp,0xc
c001c37c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c380:	e8 cd ff ff ff       	call   c001c352 <Keyboard::~Keyboard()>
c001c385:	83 c4 10             	add    esp,0x10
c001c388:	83 ec 08             	sub    esp,0x8
c001c38b:	68 5c 01 00 00       	push   0x15c
c001c390:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c394:	e8 87 cd ff ff       	call   c0019120 <operator delete(void*, unsigned long)>
c001c399:	83 c4 10             	add    esp,0x10
c001c39c:	83 c4 0c             	add    esp,0xc
c001c39f:	c3                   	ret    

c001c3a0 <LogicalDisk::close(int, int, void*)>:
c001c3a0:	83 c8 ff             	or     eax,0xffffffff
c001c3a3:	c3                   	ret    

c001c3a4 <LogicalDisk::~LogicalDisk()>:
c001c3a4:	83 ec 0c             	sub    esp,0xc
c001c3a7:	ba 80 21 03 c0       	mov    edx,0xc0032180
c001c3ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3b0:	89 10                	mov    DWORD PTR [eax],edx
c001c3b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3b6:	83 ec 0c             	sub    esp,0xc
c001c3b9:	50                   	push   eax
c001c3ba:	e8 11 ee ff ff       	call   c001b1d0 <Device::~Device()>
c001c3bf:	83 c4 10             	add    esp,0x10
c001c3c2:	90                   	nop
c001c3c3:	83 c4 0c             	add    esp,0xc
c001c3c6:	c3                   	ret    
c001c3c7:	90                   	nop

c001c3c8 <LogicalDisk::~LogicalDisk()>:
c001c3c8:	83 ec 0c             	sub    esp,0xc
c001c3cb:	83 ec 0c             	sub    esp,0xc
c001c3ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3d2:	e8 cd ff ff ff       	call   c001c3a4 <LogicalDisk::~LogicalDisk()>
c001c3d7:	83 c4 10             	add    esp,0x10
c001c3da:	83 ec 08             	sub    esp,0x8
c001c3dd:	68 78 01 00 00       	push   0x178
c001c3e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3e6:	e8 35 cd ff ff       	call   c0019120 <operator delete(void*, unsigned long)>
c001c3eb:	83 c4 10             	add    esp,0x10
c001c3ee:	83 c4 0c             	add    esp,0xc
c001c3f1:	c3                   	ret    

c001c3f2 <LogicalDisk::open(int, int, void*)>:
c001c3f2:	83 ec 18             	sub    esp,0x18
c001c3f5:	68 34 21 03 c0       	push   0xc0032134
c001c3fa:	e8 67 3e 00 00       	call   c0020266 <KePanic(char const*)>
c001c3ff:	83 c8 ff             	or     eax,0xffffffff
c001c402:	83 c4 1c             	add    esp,0x1c
c001c405:	c3                   	ret    

c001c406 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001c406:	53                   	push   ebx
c001c407:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c40b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c40f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c413:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001c419:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001c41f:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001c425:	77 10                	ja     c001c437 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001c427:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001c42d:	89 d3                	mov    ebx,edx
c001c42f:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001c435:	72 05                	jb     c001c43c <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001c437:	83 c8 ff             	or     eax,0xffffffff
c001c43a:	89 c2                	mov    edx,eax
c001c43c:	5b                   	pop    ebx
c001c43d:	c3                   	ret    

c001c43e <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001c43e:	56                   	push   esi
c001c43f:	83 c8 ff             	or     eax,0xffffffff
c001c442:	53                   	push   ebx
c001c443:	89 c2                	mov    edx,eax
c001c445:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c449:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001c44d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c451:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c457:	77 27                	ja     c001c480 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c459:	89 d8                	mov    eax,ebx
c001c45b:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001c461:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001c467:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c46c:	89 c2                	mov    edx,eax
c001c46e:	73 10                	jae    c001c480 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c470:	89 c8                	mov    eax,ecx
c001c472:	89 da                	mov    edx,ebx
c001c474:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001c47a:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001c480:	5b                   	pop    ebx
c001c481:	5e                   	pop    esi
c001c482:	c3                   	ret    
c001c483:	90                   	nop

c001c484 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001c484:	83 ec 1c             	sub    esp,0x1c
c001c487:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c48b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c48f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c493:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c497:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c49b:	89 04 24             	mov    DWORD PTR [esp],eax
c001c49e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c4a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c4a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4aa:	83 ec 08             	sub    esp,0x8
c001c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c4b1:	50                   	push   eax
c001c4b2:	e8 79 ef ff ff       	call   c001b430 <Device::Device(char const*)>
c001c4b7:	83 c4 10             	add    esp,0x10
c001c4ba:	ba 80 21 03 c0       	mov    edx,0xc0032180
c001c4bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4c3:	89 10                	mov    DWORD PTR [eax],edx
c001c4c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4c9:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c4d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4d4:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001c4db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4df:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c4e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4ea:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001c4f4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c4f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c500:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001c506:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001c50c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c510:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c513:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c517:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001c51d:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001c523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c527:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c52b:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001c531:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c535:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c53f:	90                   	nop
c001c540:	83 c4 1c             	add    esp,0x1c
c001c543:	c3                   	ret    

c001c544 <LogicalDisk::assignDriveLetter()>:
c001c544:	55                   	push   ebp
c001c545:	57                   	push   edi
c001c546:	56                   	push   esi
c001c547:	53                   	push   ebx
c001c548:	83 ec 14             	sub    esp,0x14
c001c54b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c54f:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001c555:	b0 41                	mov    al,0x41
c001c557:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c001c55d:	84 d2                	test   dl,dl
c001c55f:	75 02                	jne    c001c563 <LogicalDisk::assignDriveLetter()+0x1f>
c001c561:	b0 43                	mov    al,0x43
c001c563:	8b 3d 60 f3 03 c0    	mov    edi,DWORD PTR ds:0xc003f360
c001c569:	0f b6 ca             	movzx  ecx,dl
c001c56c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c570:	0f be e8             	movsx  ebp,al
c001c573:	8b 3d 64 f3 03 c0    	mov    edi,DWORD PTR ds:0xc003f364
c001c579:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c57d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001c581:	3c 43                	cmp    al,0x43
c001c583:	75 10                	jne    c001c595 <LogicalDisk::assignDriveLetter()+0x51>
c001c585:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001c58c:	75 5a                	jne    c001c5e8 <LogicalDisk::assignDriveLetter()+0xa4>
c001c58e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c593:	75 53                	jne    c001c5e8 <LogicalDisk::assignDriveLetter()+0xa4>
c001c595:	8d 75 bf             	lea    esi,[ebp-0x41]
c001c598:	ba 01 00 00 00       	mov    edx,0x1
c001c59d:	89 34 24             	mov    DWORD PTR [esp],esi
c001c5a0:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c001c5a3:	d3 e2                	shl    edx,cl
c001c5a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c5a9:	89 d7                	mov    edi,edx
c001c5ab:	89 d6                	mov    esi,edx
c001c5ad:	c1 ff 1f             	sar    edi,0x1f
c001c5b0:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c001c5b4:	21 f9                	and    ecx,edi
c001c5b6:	09 d1                	or     ecx,edx
c001c5b8:	75 2e                	jne    c001c5e8 <LogicalDisk::assignDriveLetter()+0xa4>
c001c5ba:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c5be:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c5c2:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001c5c8:	09 f2                	or     edx,esi
c001c5ca:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c5cd:	89 15 60 f3 03 c0    	mov    DWORD PTR ds:0xc003f360,edx
c001c5d3:	89 1c b5 80 f3 03 c0 	mov    DWORD PTR [esi*4-0x3ffc0c80],ebx
c001c5da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c5de:	09 fa                	or     edx,edi
c001c5e0:	89 15 64 f3 03 c0    	mov    DWORD PTR ds:0xc003f364,edx
c001c5e6:	eb 0d                	jmp    c001c5f5 <LogicalDisk::assignDriveLetter()+0xb1>
c001c5e8:	8d 50 01             	lea    edx,[eax+0x1]
c001c5eb:	45                   	inc    ebp
c001c5ec:	88 d0                	mov    al,dl
c001c5ee:	80 fa 5b             	cmp    dl,0x5b
c001c5f1:	75 8e                	jne    c001c581 <LogicalDisk::assignDriveLetter()+0x3d>
c001c5f3:	31 c0                	xor    eax,eax
c001c5f5:	83 c4 14             	add    esp,0x14
c001c5f8:	5b                   	pop    ebx
c001c5f9:	5e                   	pop    esi
c001c5fa:	5f                   	pop    edi
c001c5fb:	5d                   	pop    ebp
c001c5fc:	c3                   	ret    
c001c5fd:	90                   	nop

c001c5fe <LogicalDisk::mount()>:
c001c5fe:	56                   	push   esi
c001c5ff:	53                   	push   ebx
c001c600:	53                   	push   ebx
c001c601:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c605:	8b 1d 04 cf 03 c0    	mov    ebx,DWORD PTR ds:0xc003cf04
c001c60b:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c001c615:	85 db                	test   ebx,ebx
c001c617:	74 27                	je     c001c640 <LogicalDisk::mount()+0x42>
c001c619:	51                   	push   ecx
c001c61a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001c621:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c623:	83 e8 41             	sub    eax,0x41
c001c626:	50                   	push   eax
c001c627:	56                   	push   esi
c001c628:	53                   	push   ebx
c001c629:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c62c:	83 c4 10             	add    esp,0x10
c001c62f:	84 c0                	test   al,al
c001c631:	74 08                	je     c001c63b <LogicalDisk::mount()+0x3d>
c001c633:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c001c639:	eb 07                	jmp    c001c642 <LogicalDisk::mount()+0x44>
c001c63b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001c63e:	eb d5                	jmp    c001c615 <LogicalDisk::mount()+0x17>
c001c640:	31 c0                	xor    eax,eax
c001c642:	5a                   	pop    edx
c001c643:	5b                   	pop    ebx
c001c644:	5e                   	pop    esi
c001c645:	c3                   	ret    

c001c646 <LogicalDisk::unmount()>:
c001c646:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c64a:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c654:	c3                   	ret    
c001c655:	90                   	nop

c001c656 <LogicalDisk::eject()>:
c001c656:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c65a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c660:	8b 10                	mov    edx,DWORD PTR [eax]
c001c662:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c666:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001c669:	90                   	nop

c001c66a <LogicalDisk::unassignDriveLetter()>:
c001c66a:	57                   	push   edi
c001c66b:	56                   	push   esi
c001c66c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c670:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001c677:	85 c9                	test   ecx,ecx
c001c679:	75 0f                	jne    c001c68a <LogicalDisk::unassignDriveLetter()+0x20>
c001c67b:	c7 44 24 0c 58 21 03 c0 	mov    DWORD PTR [esp+0xc],0xc0032158
c001c683:	5e                   	pop    esi
c001c684:	5f                   	pop    edi
c001c685:	e9 dc 3b 00 00       	jmp    c0020266 <KePanic(char const*)>
c001c68a:	83 e9 41             	sub    ecx,0x41
c001c68d:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001c694:	b8 01 00 00 00       	mov    eax,0x1
c001c699:	c7 04 8d 80 f3 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffc0c80],0x0
c001c6a4:	d3 e0                	shl    eax,cl
c001c6a6:	89 c7                	mov    edi,eax
c001c6a8:	f7 d0                	not    eax
c001c6aa:	c1 ff 1f             	sar    edi,0x1f
c001c6ad:	21 05 60 f3 03 c0    	and    DWORD PTR ds:0xc003f360,eax
c001c6b3:	89 fe                	mov    esi,edi
c001c6b5:	f7 d6                	not    esi
c001c6b7:	21 35 64 f3 03 c0    	and    DWORD PTR ds:0xc003f364,esi
c001c6bd:	5e                   	pop    esi
c001c6be:	5f                   	pop    edi
c001c6bf:	c3                   	ret    

c001c6c0 <LogicalDisk::read(unsigned long long, int, void*)>:
c001c6c0:	57                   	push   edi
c001c6c1:	56                   	push   esi
c001c6c2:	53                   	push   ebx
c001c6c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c6c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c6cb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c6cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c6d3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c6d9:	77 41                	ja     c001c71c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001c6db:	99                   	cdq    
c001c6dc:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001c6e2:	01 c8                	add    eax,ecx
c001c6e4:	11 da                	adc    edx,ebx
c001c6e6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001c6ec:	19 d7                	sbb    edi,edx
c001c6ee:	72 33                	jb     c001c723 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001c6f0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001c6f6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001c6fc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c700:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c704:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001c70a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c710:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c714:	5b                   	pop    ebx
c001c715:	5e                   	pop    esi
c001c716:	5f                   	pop    edi
c001c717:	e9 c8 0a 00 00       	jmp    c001d1e4 <VCache::read(unsigned long long, int, void*)>
c001c71c:	b8 05 00 00 00       	mov    eax,0x5
c001c721:	eb 05                	jmp    c001c728 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001c723:	b8 07 00 00 00       	mov    eax,0x7
c001c728:	5b                   	pop    ebx
c001c729:	5e                   	pop    esi
c001c72a:	5f                   	pop    edi
c001c72b:	c3                   	ret    

c001c72c <LogicalDisk::write(unsigned long long, int, void*)>:
c001c72c:	57                   	push   edi
c001c72d:	56                   	push   esi
c001c72e:	53                   	push   ebx
c001c72f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c733:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c737:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c73b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c73f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c745:	77 41                	ja     c001c788 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001c747:	99                   	cdq    
c001c748:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001c74e:	01 c8                	add    eax,ecx
c001c750:	11 da                	adc    edx,ebx
c001c752:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001c758:	19 d7                	sbb    edi,edx
c001c75a:	72 33                	jb     c001c78f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001c75c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001c762:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001c768:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c76c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c770:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001c776:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c77c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c780:	5b                   	pop    ebx
c001c781:	5e                   	pop    esi
c001c782:	5f                   	pop    edi
c001c783:	e9 68 09 00 00       	jmp    c001d0f0 <VCache::write(unsigned long long, int, void*)>
c001c788:	b8 05 00 00 00       	mov    eax,0x5
c001c78d:	eb 05                	jmp    c001c794 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001c78f:	b8 07 00 00 00       	mov    eax,0x7
c001c794:	5b                   	pop    ebx
c001c795:	5e                   	pop    esi
c001c796:	5f                   	pop    edi
c001c797:	c3                   	ret    

c001c798 <Mouse::Mouse(char const*)>:
c001c798:	83 ec 0c             	sub    esp,0xc
c001c79b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c79f:	83 ec 08             	sub    esp,0x8
c001c7a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7a6:	50                   	push   eax
c001c7a7:	e8 84 ec ff ff       	call   c001b430 <Device::Device(char const*)>
c001c7ac:	83 c4 10             	add    esp,0x10
c001c7af:	ba ac 21 03 c0       	mov    edx,0xc00321ac
c001c7b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7b8:	89 10                	mov    DWORD PTR [eax],edx
c001c7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7be:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001c7c8:	90                   	nop
c001c7c9:	83 c4 0c             	add    esp,0xc
c001c7cc:	c3                   	ret    
c001c7cd:	90                   	nop
c001c7ce:	66 90                	xchg   ax,ax

c001c7d0 <Mouse::~Mouse()>:
c001c7d0:	83 ec 0c             	sub    esp,0xc
c001c7d3:	ba ac 21 03 c0       	mov    edx,0xc00321ac
c001c7d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7dc:	89 10                	mov    DWORD PTR [eax],edx
c001c7de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7e2:	83 ec 0c             	sub    esp,0xc
c001c7e5:	50                   	push   eax
c001c7e6:	e8 e5 e9 ff ff       	call   c001b1d0 <Device::~Device()>
c001c7eb:	83 c4 10             	add    esp,0x10
c001c7ee:	90                   	nop
c001c7ef:	83 c4 0c             	add    esp,0xc
c001c7f2:	c3                   	ret    
c001c7f3:	90                   	nop

c001c7f4 <Mouse::~Mouse()>:
c001c7f4:	83 ec 0c             	sub    esp,0xc
c001c7f7:	83 ec 0c             	sub    esp,0xc
c001c7fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7fe:	e8 cd ff ff ff       	call   c001c7d0 <Mouse::~Mouse()>
c001c803:	83 c4 10             	add    esp,0x10
c001c806:	83 ec 08             	sub    esp,0x8
c001c809:	68 58 01 00 00       	push   0x158
c001c80e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c812:	e8 09 c9 ff ff       	call   c0019120 <operator delete(void*, unsigned long)>
c001c817:	83 c4 10             	add    esp,0x10
c001c81a:	83 c4 0c             	add    esp,0xc
c001c81d:	c3                   	ret    

c001c81e <NIC::getMAC()>:
c001c81e:	31 c0                	xor    eax,eax
c001c820:	31 d2                	xor    edx,edx
c001c822:	c3                   	ret    
c001c823:	90                   	nop

c001c824 <NIC::write(int, unsigned char*, int*)>:
c001c824:	b8 01 00 00 00       	mov    eax,0x1
c001c829:	c3                   	ret    

c001c82a <NIC::NIC(char const*)>:
c001c82a:	83 ec 0c             	sub    esp,0xc
c001c82d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c831:	83 ec 08             	sub    esp,0x8
c001c834:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c838:	50                   	push   eax
c001c839:	e8 f2 eb ff ff       	call   c001b430 <Device::Device(char const*)>
c001c83e:	83 c4 10             	add    esp,0x10
c001c841:	ba d8 21 03 c0       	mov    edx,0xc00321d8
c001c846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c84a:	89 10                	mov    DWORD PTR [eax],edx
c001c84c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c850:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c001c85a:	90                   	nop
c001c85b:	83 c4 0c             	add    esp,0xc
c001c85e:	c3                   	ret    
c001c85f:	90                   	nop

c001c860 <NIC::~NIC()>:
c001c860:	83 ec 0c             	sub    esp,0xc
c001c863:	ba d8 21 03 c0       	mov    edx,0xc00321d8
c001c868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c86c:	89 10                	mov    DWORD PTR [eax],edx
c001c86e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c872:	83 ec 0c             	sub    esp,0xc
c001c875:	50                   	push   eax
c001c876:	e8 55 e9 ff ff       	call   c001b1d0 <Device::~Device()>
c001c87b:	83 c4 10             	add    esp,0x10
c001c87e:	90                   	nop
c001c87f:	83 c4 0c             	add    esp,0xc
c001c882:	c3                   	ret    
c001c883:	90                   	nop

c001c884 <NIC::~NIC()>:
c001c884:	83 ec 0c             	sub    esp,0xc
c001c887:	83 ec 0c             	sub    esp,0xc
c001c88a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c88e:	e8 cd ff ff ff       	call   c001c860 <NIC::~NIC()>
c001c893:	83 c4 10             	add    esp,0x10
c001c896:	83 ec 08             	sub    esp,0x8
c001c899:	68 58 01 00 00       	push   0x158
c001c89e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8a2:	e8 79 c8 ff ff       	call   c0019120 <operator delete(void*, unsigned long)>
c001c8a7:	83 c4 10             	add    esp,0x10
c001c8aa:	83 c4 0c             	add    esp,0xc
c001c8ad:	c3                   	ret    

c001c8ae <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001c8ae:	55                   	push   ebp
c001c8af:	57                   	push   edi
c001c8b0:	56                   	push   esi
c001c8b1:	53                   	push   ebx
c001c8b2:	81 ec 28 01 00 00    	sub    esp,0x128
c001c8b8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001c8bf:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001c8c6:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001c8cd:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001c8d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c8d8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c8dc:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c8e3:	e8 44 ec ff ff       	call   c001b52c <Device::getName()>
c001c8e8:	5a                   	pop    edx
c001c8e9:	59                   	pop    ecx
c001c8ea:	50                   	push   eax
c001c8eb:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001c8ef:	55                   	push   ebp
c001c8f0:	e8 4b 3d fe ff       	call   c0000640 <strcpy>
c001c8f5:	5b                   	pop    ebx
c001c8f6:	58                   	pop    eax
c001c8f7:	68 04 22 03 c0       	push   0xc0032204
c001c8fc:	55                   	push   ebp
c001c8fd:	e8 3e 3f fe ff       	call   c0000840 <strcat>
c001c902:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c001c909:	e8 b0 9a ff ff       	call   c00163be <malloc>
c001c90e:	83 c4 0c             	add    esp,0xc
c001c911:	89 c3                	mov    ebx,eax
c001c913:	57                   	push   edi
c001c914:	56                   	push   esi
c001c915:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c919:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c91d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001c924:	55                   	push   ebp
c001c925:	50                   	push   eax
c001c926:	e8 59 fb ff ff       	call   c001c484 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c92b:	83 c4 14             	add    esp,0x14
c001c92e:	53                   	push   ebx
c001c92f:	e8 10 fc ff ff       	call   c001c544 <LogicalDisk::assignDriveLetter()>
c001c934:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c937:	e8 c2 fc ff ff       	call   c001c5fe <LogicalDisk::mount()>
c001c93c:	58                   	pop    eax
c001c93d:	5a                   	pop    edx
c001c93e:	53                   	push   ebx
c001c93f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c946:	e8 83 e9 ff ff       	call   c001b2ce <Device::addChild(Device*)>
c001c94b:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c951:	5b                   	pop    ebx
c001c952:	5e                   	pop    esi
c001c953:	5f                   	pop    edi
c001c954:	5d                   	pop    ebp
c001c955:	c3                   	ret    

c001c956 <createPartitionsForDisk(PhysicalDisk*)>:
c001c956:	55                   	push   ebp
c001c957:	57                   	push   edi
c001c958:	56                   	push   esi
c001c959:	53                   	push   ebx
c001c95a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001c960:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001c967:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c96d:	3d 00 02 00 00       	cmp    eax,0x200
c001c972:	74 27                	je     c001c99b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001c974:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001c97a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001c980:	83 ec 10             	sub    esp,0x10
c001c983:	0f a4 f7 0a          	shld   edi,esi,0xa
c001c987:	99                   	cdq    
c001c988:	c1 e6 0a             	shl    esi,0xa
c001c98b:	52                   	push   edx
c001c98c:	89 fd                	mov    ebp,edi
c001c98e:	50                   	push   eax
c001c98f:	55                   	push   ebp
c001c990:	56                   	push   esi
c001c991:	e8 ca 1c 01 00       	call   c002e660 <__udivdi3>
c001c996:	e9 b9 00 00 00       	jmp    c001ca54 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001c99b:	83 ec 0c             	sub    esp,0xc
c001c99e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c9a0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001c9a4:	56                   	push   esi
c001c9a5:	6a 01                	push   0x1
c001c9a7:	6a 00                	push   0x0
c001c9a9:	6a 00                	push   0x0
c001c9ab:	53                   	push   ebx
c001c9ac:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001c9af:	83 c4 20             	add    esp,0x20
c001c9b2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001c9ba:	75 0a                	jne    c001c9c6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001c9bc:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001c9c4:	74 2c                	je     c001c9f2 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001c9c6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001c9cc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001c9d2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c9d8:	83 ec 10             	sub    esp,0x10
c001c9db:	0f a4 c2 0a          	shld   edx,eax,0xa
c001c9df:	89 f7                	mov    edi,esi
c001c9e1:	c1 e0 0a             	shl    eax,0xa
c001c9e4:	c1 ff 1f             	sar    edi,0x1f
c001c9e7:	57                   	push   edi
c001c9e8:	56                   	push   esi
c001c9e9:	52                   	push   edx
c001c9ea:	50                   	push   eax
c001c9eb:	e8 70 1c 01 00       	call   c002e660 <__udivdi3>
c001c9f0:	eb 62                	jmp    c001ca54 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001c9f2:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001c9f9:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c001ca00:	89 cf                	mov    edi,ecx
c001ca02:	83 e2 7f             	and    edx,0x7f
c001ca05:	83 e7 7f             	and    edi,0x7f
c001ca08:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001ca0f:	8d 0c 17             	lea    ecx,[edi+edx*1]
c001ca12:	83 e0 7f             	and    eax,0x7f
c001ca15:	8d 14 01             	lea    edx,[ecx+eax*1]
c001ca18:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001ca1f:	83 e0 7f             	and    eax,0x7f
c001ca22:	01 d0                	add    eax,edx
c001ca24:	89 c5                	mov    ebp,eax
c001ca26:	84 c0                	test   al,al
c001ca28:	74 41                	je     c001ca6b <createPartitionsForDisk(PhysicalDisk*)+0x115>
c001ca2a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001ca30:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001ca36:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ca3c:	83 ec 10             	sub    esp,0x10
c001ca3f:	0f a4 c2 0a          	shld   edx,eax,0xa
c001ca43:	89 f7                	mov    edi,esi
c001ca45:	c1 e0 0a             	shl    eax,0xa
c001ca48:	c1 ff 1f             	sar    edi,0x1f
c001ca4b:	57                   	push   edi
c001ca4c:	56                   	push   esi
c001ca4d:	52                   	push   edx
c001ca4e:	50                   	push   eax
c001ca4f:	e8 0c 1c 01 00       	call   c002e660 <__udivdi3>
c001ca54:	83 c4 14             	add    esp,0x14
c001ca57:	52                   	push   edx
c001ca58:	50                   	push   eax
c001ca59:	6a 00                	push   0x0
c001ca5b:	6a 00                	push   0x0
c001ca5d:	53                   	push   ebx
c001ca5e:	e8 4b fe ff ff       	call   c001c8ae <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001ca63:	83 c4 20             	add    esp,0x20
c001ca66:	e9 73 01 00 00       	jmp    c001cbde <createPartitionsForDisk(PhysicalDisk*)+0x288>
c001ca6b:	89 f0                	mov    eax,esi
c001ca6d:	31 c9                	xor    ecx,ecx
c001ca6f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001ca76:	75 02                	jne    c001ca7a <createPartitionsForDisk(PhysicalDisk*)+0x124>
c001ca78:	89 cd                	mov    ebp,ecx
c001ca7a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001ca81:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c001ca88:	c1 e2 08             	shl    edx,0x8
c001ca8b:	c1 e6 10             	shl    esi,0x10
c001ca8e:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c001ca96:	09 f2                	or     edx,esi
c001ca98:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c001caa0:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c001caa7:	83 c0 10             	add    eax,0x10
c001caaa:	09 f2                	or     edx,esi
c001caac:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c001cab3:	c1 e6 18             	shl    esi,0x18
c001cab6:	09 f2                	or     edx,esi
c001cab8:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c001cabf:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c001cac3:	c1 e6 10             	shl    esi,0x10
c001cac6:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001cacd:	c1 e2 08             	shl    edx,0x8
c001cad0:	09 f2                	or     edx,esi
c001cad2:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c001cad9:	09 f2                	or     edx,esi
c001cadb:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c001cae2:	c1 e6 18             	shl    esi,0x18
c001cae5:	09 f2                	or     edx,esi
c001cae7:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c001caeb:	41                   	inc    ecx
c001caec:	83 f9 04             	cmp    ecx,0x4
c001caef:	0f 85 7a ff ff ff    	jne    c001ca6f <createPartitionsForDisk(PhysicalDisk*)+0x119>
c001caf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caf9:	83 f0 01             	xor    eax,0x1
c001cafc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001cb00:	75 4f                	jne    c001cb51 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001cb02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb06:	83 f0 01             	xor    eax,0x1
c001cb09:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001cb0d:	75 42                	jne    c001cb51 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001cb0f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cb17:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cb1f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001cb25:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001cb2b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cb31:	0f a4 c2 0a          	shld   edx,eax,0xa
c001cb35:	89 f7                	mov    edi,esi
c001cb37:	c1 e0 0a             	shl    eax,0xa
c001cb3a:	c1 ff 1f             	sar    edi,0x1f
c001cb3d:	57                   	push   edi
c001cb3e:	56                   	push   esi
c001cb3f:	52                   	push   edx
c001cb40:	50                   	push   eax
c001cb41:	e8 1a 1b 01 00       	call   c002e660 <__udivdi3>
c001cb46:	83 c4 10             	add    esp,0x10
c001cb49:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cb4d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cb51:	89 e8                	mov    eax,ebp
c001cb53:	0f b6 e8             	movzx  ebp,al
c001cb56:	85 ed                	test   ebp,ebp
c001cb58:	74 50                	je     c001cbaa <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001cb5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb5e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001cb62:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cb66:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cb6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cb6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cb72:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001cb76:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001cb7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cb7e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001cb82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb86:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c001cb8a:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c001cb8e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001cb92:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001cb96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cb9a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001cb9e:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c001cba2:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c001cba6:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c001cbaa:	31 ed                	xor    ebp,ebp
c001cbac:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001cbb0:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001cbb4:	89 f8                	mov    eax,edi
c001cbb6:	09 f0                	or     eax,esi
c001cbb8:	74 1e                	je     c001cbd8 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001cbba:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001cbbe:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001cbc2:	89 d1                	mov    ecx,edx
c001cbc4:	09 c1                	or     ecx,eax
c001cbc6:	74 10                	je     c001cbd8 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001cbc8:	83 ec 0c             	sub    esp,0xc
c001cbcb:	57                   	push   edi
c001cbcc:	56                   	push   esi
c001cbcd:	52                   	push   edx
c001cbce:	50                   	push   eax
c001cbcf:	53                   	push   ebx
c001cbd0:	e8 d9 fc ff ff       	call   c001c8ae <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001cbd5:	83 c4 20             	add    esp,0x20
c001cbd8:	45                   	inc    ebp
c001cbd9:	83 fd 04             	cmp    ebp,0x4
c001cbdc:	75 ce                	jne    c001cbac <createPartitionsForDisk(PhysicalDisk*)+0x256>
c001cbde:	81 c4 5c 02 00 00    	add    esp,0x25c
c001cbe4:	5b                   	pop    ebx
c001cbe5:	5e                   	pop    esi
c001cbe6:	5f                   	pop    edi
c001cbe7:	5d                   	pop    ebp
c001cbe8:	c3                   	ret    
c001cbe9:	66 90                	xchg   ax,ax
c001cbeb:	90                   	nop

c001cbec <Serial::Serial(char const*)>:
c001cbec:	83 ec 0c             	sub    esp,0xc
c001cbef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbf3:	83 ec 08             	sub    esp,0x8
c001cbf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbfa:	50                   	push   eax
c001cbfb:	e8 30 e8 ff ff       	call   c001b430 <Device::Device(char const*)>
c001cc00:	83 c4 10             	add    esp,0x10
c001cc03:	ba 18 22 03 c0       	mov    edx,0xc0032218
c001cc08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc0c:	89 10                	mov    DWORD PTR [eax],edx
c001cc0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc12:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001cc1c:	90                   	nop
c001cc1d:	83 c4 0c             	add    esp,0xc
c001cc20:	c3                   	ret    
c001cc21:	90                   	nop
c001cc22:	66 90                	xchg   ax,ax

c001cc24 <Serial::~Serial()>:
c001cc24:	83 ec 0c             	sub    esp,0xc
c001cc27:	ba 18 22 03 c0       	mov    edx,0xc0032218
c001cc2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc30:	89 10                	mov    DWORD PTR [eax],edx
c001cc32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc36:	83 ec 0c             	sub    esp,0xc
c001cc39:	50                   	push   eax
c001cc3a:	e8 91 e5 ff ff       	call   c001b1d0 <Device::~Device()>
c001cc3f:	83 c4 10             	add    esp,0x10
c001cc42:	90                   	nop
c001cc43:	83 c4 0c             	add    esp,0xc
c001cc46:	c3                   	ret    
c001cc47:	90                   	nop

c001cc48 <Serial::~Serial()>:
c001cc48:	83 ec 0c             	sub    esp,0xc
c001cc4b:	83 ec 0c             	sub    esp,0xc
c001cc4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc52:	e8 cd ff ff ff       	call   c001cc24 <Serial::~Serial()>
c001cc57:	83 c4 10             	add    esp,0x10
c001cc5a:	83 ec 08             	sub    esp,0x8
c001cc5d:	68 58 01 00 00       	push   0x158
c001cc62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc66:	e8 b5 c4 ff ff       	call   c0019120 <operator delete(void*, unsigned long)>
c001cc6b:	83 c4 10             	add    esp,0x10
c001cc6e:	83 c4 0c             	add    esp,0xc
c001cc71:	c3                   	ret    
c001cc72:	66 90                	xchg   ax,ax

c001cc74 <Timer::Timer(char const*)>:
c001cc74:	83 ec 0c             	sub    esp,0xc
c001cc77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc7b:	83 ec 08             	sub    esp,0x8
c001cc7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc82:	50                   	push   eax
c001cc83:	e8 a8 e7 ff ff       	call   c001b430 <Device::Device(char const*)>
c001cc88:	83 c4 10             	add    esp,0x10
c001cc8b:	ba 5c 22 03 c0       	mov    edx,0xc003225c
c001cc90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc94:	89 10                	mov    DWORD PTR [eax],edx
c001cc96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc9a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001cca4:	90                   	nop
c001cca5:	83 c4 0c             	add    esp,0xc
c001cca8:	c3                   	ret    
c001cca9:	90                   	nop
c001ccaa:	66 90                	xchg   ax,ax

c001ccac <Timer::~Timer()>:
c001ccac:	83 ec 0c             	sub    esp,0xc
c001ccaf:	ba 5c 22 03 c0       	mov    edx,0xc003225c
c001ccb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccb8:	89 10                	mov    DWORD PTR [eax],edx
c001ccba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccbe:	83 ec 0c             	sub    esp,0xc
c001ccc1:	50                   	push   eax
c001ccc2:	e8 09 e5 ff ff       	call   c001b1d0 <Device::~Device()>
c001ccc7:	83 c4 10             	add    esp,0x10
c001ccca:	90                   	nop
c001cccb:	83 c4 0c             	add    esp,0xc
c001ccce:	c3                   	ret    
c001cccf:	90                   	nop

c001ccd0 <Timer::~Timer()>:
c001ccd0:	83 ec 0c             	sub    esp,0xc
c001ccd3:	83 ec 0c             	sub    esp,0xc
c001ccd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccda:	e8 cd ff ff ff       	call   c001ccac <Timer::~Timer()>
c001ccdf:	83 c4 10             	add    esp,0x10
c001cce2:	83 ec 08             	sub    esp,0x8
c001cce5:	68 5c 01 00 00       	push   0x15c
c001ccea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccee:	e8 2d c4 ff ff       	call   c0019120 <operator delete(void*, unsigned long)>
c001ccf3:	83 c4 10             	add    esp,0x10
c001ccf6:	83 c4 0c             	add    esp,0xc
c001ccf9:	c3                   	ret    

c001ccfa <Timer::read()>:
c001ccfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ccfe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cd04:	c3                   	ret    

c001cd05 <setupTimer(int)>:
c001cd05:	53                   	push   ebx
c001cd06:	83 ec 14             	sub    esp,0x14
c001cd09:	68 5c 01 00 00       	push   0x15c
c001cd0e:	e8 ab 96 ff ff       	call   c00163be <malloc>
c001cd13:	89 04 24             	mov    DWORD PTR [esp],eax
c001cd16:	89 c3                	mov    ebx,eax
c001cd18:	e8 c3 11 01 00       	call   c002dee0 <PIT::PIT()>
c001cd1d:	58                   	pop    eax
c001cd1e:	5a                   	pop    edx
c001cd1f:	53                   	push   ebx
c001cd20:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001cd26:	e8 a3 e5 ff ff       	call   c001b2ce <Device::addChild(Device*)>
c001cd2b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd2d:	6a 00                	push   0x0
c001cd2f:	6a 00                	push   0x0
c001cd31:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cd35:	53                   	push   ebx
c001cd36:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cd39:	89 d8                	mov    eax,ebx
c001cd3b:	83 c4 28             	add    esp,0x28
c001cd3e:	5b                   	pop    ebx
c001cd3f:	c3                   	ret    

c001cd40 <timerHandler(unsigned int)>:
c001cd40:	57                   	push   edi
c001cd41:	56                   	push   esi
c001cd42:	53                   	push   ebx
c001cd43:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001cd47:	01 3d ec f3 03 c0    	add    DWORD PTR ds:0xc003f3ec,edi
c001cd4d:	80 3d c1 a9 03 c0 00 	cmp    BYTE PTR ds:0xc003a9c1,0x0
c001cd54:	0f 84 46 01 00 00    	je     c001cea0 <timerHandler(unsigned int)+0x160>
c001cd5a:	fa                   	cli    
c001cd5b:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c001cd61:	83 ec 0c             	sub    esp,0xc
c001cd64:	ff 05 cc 01 04 c0    	inc    DWORD PTR ds:0xc00401cc
c001cd6a:	68 e0 01 04 c0       	push   0xc00401e0
c001cd6f:	e8 bc 1e 01 00       	call   c002ec30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001cd74:	83 c4 10             	add    esp,0x10
c001cd77:	84 c0                	test   al,al
c001cd79:	0f 85 a1 00 00 00    	jne    c001ce20 <timerHandler(unsigned int)+0xe0>
c001cd7f:	83 ec 0c             	sub    esp,0xc
c001cd82:	68 e0 01 04 c0       	push   0xc00401e0
c001cd87:	e8 c0 1e 01 00       	call   c002ec4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cd8c:	83 c4 10             	add    esp,0x10
c001cd8f:	89 c6                	mov    esi,eax
c001cd91:	8d 76 00             	lea    esi,[esi+0x0]
c001cd94:	83 ec 0c             	sub    esp,0xc
c001cd97:	68 e0 01 04 c0       	push   0xc00401e0
c001cd9c:	e8 ab 1e 01 00       	call   c002ec4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cda1:	c7 04 24 e0 01 04 c0 	mov    DWORD PTR [esp],0xc00401e0
c001cda8:	89 c3                	mov    ebx,eax
c001cdaa:	e8 a5 1e 01 00       	call   c002ec54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001cdaf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cdb2:	83 c4 10             	add    esp,0x10
c001cdb5:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c001cdbb:	77 23                	ja     c001cde0 <timerHandler(unsigned int)+0xa0>
c001cdbd:	83 ec 0c             	sub    esp,0xc
c001cdc0:	53                   	push   ebx
c001cdc1:	e8 8e 87 00 00       	call   c0025554 <unblockTask(ThreadControlBlock*)>
c001cdc6:	83 c4 10             	add    esp,0x10
c001cdc9:	39 de                	cmp    esi,ebx
c001cdcb:	75 27                	jne    c001cdf4 <timerHandler(unsigned int)+0xb4>
c001cdcd:	83 ec 0c             	sub    esp,0xc
c001cdd0:	68 e0 01 04 c0       	push   0xc00401e0
c001cdd5:	e8 72 1e 01 00       	call   c002ec4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cdda:	89 c6                	mov    esi,eax
c001cddc:	eb 12                	jmp    c001cdf0 <timerHandler(unsigned int)+0xb0>
c001cdde:	66 90                	xchg   ax,ax
c001cde0:	50                   	push   eax
c001cde1:	50                   	push   eax
c001cde2:	53                   	push   ebx
c001cde3:	68 e0 01 04 c0       	push   0xc00401e0
c001cde8:	e8 23 1f 01 00       	call   c002ed10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001cded:	8d 76 00             	lea    esi,[esi+0x0]
c001cdf0:	83 c4 10             	add    esp,0x10
c001cdf3:	90                   	nop
c001cdf4:	83 ec 0c             	sub    esp,0xc
c001cdf7:	68 e0 01 04 c0       	push   0xc00401e0
c001cdfc:	e8 2f 1e 01 00       	call   c002ec30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ce01:	83 c4 10             	add    esp,0x10
c001ce04:	84 c0                	test   al,al
c001ce06:	75 18                	jne    c001ce20 <timerHandler(unsigned int)+0xe0>
c001ce08:	83 ec 0c             	sub    esp,0xc
c001ce0b:	68 e0 01 04 c0       	push   0xc00401e0
c001ce10:	e8 37 1e 01 00       	call   c002ec4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ce15:	83 c4 10             	add    esp,0x10
c001ce18:	39 f0                	cmp    eax,esi
c001ce1a:	0f 85 74 ff ff ff    	jne    c001cd94 <timerHandler(unsigned int)+0x54>
c001ce20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce25:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c001ce29:	74 3d                	je     c001ce68 <timerHandler(unsigned int)+0x128>
c001ce2b:	80 3d c0 a9 03 c0 00 	cmp    BYTE PTR ds:0xc003a9c0,0x0
c001ce32:	74 34                	je     c001ce68 <timerHandler(unsigned int)+0x128>
c001ce34:	fa                   	cli    
c001ce35:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c001ce3b:	8b 15 ec f3 03 c0    	mov    edx,DWORD PTR ds:0xc003f3ec
c001ce41:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce46:	29 78 34             	sub    DWORD PTR [eax+0x34],edi
c001ce49:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce4e:	39 50 34             	cmp    DWORD PTR [eax+0x34],edx
c001ce51:	77 05                	ja     c001ce58 <timerHandler(unsigned int)+0x118>
c001ce53:	e8 04 84 00 00       	call   c002525c <schedule()>
c001ce58:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001ce5d:	48                   	dec    eax
c001ce5e:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001ce63:	75 03                	jne    c001ce68 <timerHandler(unsigned int)+0x128>
c001ce65:	fb                   	sti    
c001ce66:	66 90                	xchg   ax,ax
c001ce68:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001ce6d:	48                   	dec    eax
c001ce6e:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001ce73:	75 1b                	jne    c001ce90 <timerHandler(unsigned int)+0x150>
c001ce75:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c001ce7c:	74 12                	je     c001ce90 <timerHandler(unsigned int)+0x150>
c001ce7e:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c001ce88:	e8 cf 83 00 00       	call   c002525c <schedule()>
c001ce8d:	8d 76 00             	lea    esi,[esi+0x0]
c001ce90:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001ce95:	48                   	dec    eax
c001ce96:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001ce9b:	75 03                	jne    c001cea0 <timerHandler(unsigned int)+0x160>
c001ce9d:	fb                   	sti    
c001ce9e:	66 90                	xchg   ax,ax
c001cea0:	5b                   	pop    ebx
c001cea1:	5e                   	pop    esi
c001cea2:	5f                   	pop    edi
c001cea3:	c3                   	ret    

c001cea4 <VCache::VCache(PhysicalDisk*)>:
c001cea4:	53                   	push   ebx
c001cea5:	83 ec 18             	sub    esp,0x18
c001cea8:	ba 8c 22 03 c0       	mov    edx,0xc003228c
c001cead:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ceb1:	89 10                	mov    DWORD PTR [eax],edx
c001ceb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ceb7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001cebe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cec2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001cec9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cecd:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001ced4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001cedb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cedf:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001cee6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ceed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cef1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001cef8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cefc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001cf00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf04:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001cf0b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001cf12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf16:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001cf1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf1e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001cf22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf26:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001cf2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf2e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001cf35:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001cf3d:	83 ec 0c             	sub    esp,0xc
c001cf40:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf44:	e8 75 94 ff ff       	call   c00163be <malloc>
c001cf49:	83 c4 10             	add    esp,0x10
c001cf4c:	89 c3                	mov    ebx,eax
c001cf4e:	83 ec 0c             	sub    esp,0xc
c001cf51:	53                   	push   ebx
c001cf52:	e8 f5 32 00 00       	call   c002024c <Mutex::Mutex()>
c001cf57:	83 c4 10             	add    esp,0x10
c001cf5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf5e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001cf61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf65:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001cf69:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cf6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf70:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001cf77:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf7b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001cf81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf85:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001cf88:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf8c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001cf92:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cf98:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001cf9c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001cf9f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001cfa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfa6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001cfaa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cfae:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001cfb4:	05 00 02 00 00       	add    eax,0x200
c001cfb9:	c1 e0 03             	shl    eax,0x3
c001cfbc:	83 ec 0c             	sub    esp,0xc
c001cfbf:	50                   	push   eax
c001cfc0:	e8 f9 93 ff ff       	call   c00163be <malloc>
c001cfc5:	83 c4 10             	add    esp,0x10
c001cfc8:	89 c2                	mov    edx,eax
c001cfca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfce:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001cfd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfd5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001cfdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfe0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001cfe4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cfe8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001cfee:	89 d0                	mov    eax,edx
c001cff0:	c1 e0 02             	shl    eax,0x2
c001cff3:	01 d0                	add    eax,edx
c001cff5:	c1 e0 04             	shl    eax,0x4
c001cff8:	83 ec 0c             	sub    esp,0xc
c001cffb:	50                   	push   eax
c001cffc:	e8 bd 93 ff ff       	call   c00163be <malloc>
c001d001:	83 c4 10             	add    esp,0x10
c001d004:	89 c2                	mov    edx,eax
c001d006:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d00a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001d00d:	90                   	nop
c001d00e:	83 c4 18             	add    esp,0x18
c001d011:	5b                   	pop    ebx
c001d012:	c3                   	ret    
c001d013:	90                   	nop

c001d014 <VCache::invalidateReadBuffer()>:
c001d014:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d018:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001d01e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001d022:	c3                   	ret    
c001d023:	90                   	nop

c001d024 <VCache::writeWriteBuffer()>:
c001d024:	53                   	push   ebx
c001d025:	83 ec 08             	sub    esp,0x8
c001d028:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d02c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d030:	74 1e                	je     c001d050 <VCache::writeWriteBuffer()+0x2c>
c001d032:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d035:	83 ec 0c             	sub    esp,0xc
c001d038:	8b 10                	mov    edx,DWORD PTR [eax]
c001d03a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001d03d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001d040:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001d043:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001d046:	50                   	push   eax
c001d047:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001d04a:	83 c4 20             	add    esp,0x20
c001d04d:	8d 76 00             	lea    esi,[esi+0x0]
c001d050:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001d057:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001d05e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001d062:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001d069:	83 c4 08             	add    esp,0x8
c001d06c:	5b                   	pop    ebx
c001d06d:	c3                   	ret    
c001d06e:	66 90                	xchg   ax,ax

c001d070 <VCache::~VCache()>:
c001d070:	83 ec 0c             	sub    esp,0xc
c001d073:	ba 8c 22 03 c0       	mov    edx,0xc003228c
c001d078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d07c:	89 10                	mov    DWORD PTR [eax],edx
c001d07e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d082:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001d085:	0f b6 c0             	movzx  eax,al
c001d088:	85 c0                	test   eax,eax
c001d08a:	74 10                	je     c001d09c <VCache::~VCache()+0x2c>
c001d08c:	83 ec 0c             	sub    esp,0xc
c001d08f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d093:	e8 8c ff ff ff       	call   c001d024 <VCache::writeWriteBuffer()>
c001d098:	83 c4 10             	add    esp,0x10
c001d09b:	90                   	nop
c001d09c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0a0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001d0a3:	83 ec 0c             	sub    esp,0xc
c001d0a6:	50                   	push   eax
c001d0a7:	e8 22 93 ff ff       	call   c00163ce <free>
c001d0ac:	83 c4 10             	add    esp,0x10
c001d0af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0b3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001d0b6:	83 ec 0c             	sub    esp,0xc
c001d0b9:	50                   	push   eax
c001d0ba:	e8 0f 93 ff ff       	call   c00163ce <free>
c001d0bf:	83 c4 10             	add    esp,0x10
c001d0c2:	90                   	nop
c001d0c3:	83 c4 0c             	add    esp,0xc
c001d0c6:	c3                   	ret    
c001d0c7:	90                   	nop

c001d0c8 <VCache::~VCache()>:
c001d0c8:	83 ec 0c             	sub    esp,0xc
c001d0cb:	83 ec 0c             	sub    esp,0xc
c001d0ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0d2:	e8 99 ff ff ff       	call   c001d070 <VCache::~VCache()>
c001d0d7:	83 c4 10             	add    esp,0x10
c001d0da:	83 ec 08             	sub    esp,0x8
c001d0dd:	6a 44                	push   0x44
c001d0df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0e3:	e8 38 c0 ff ff       	call   c0019120 <operator delete(void*, unsigned long)>
c001d0e8:	83 c4 10             	add    esp,0x10
c001d0eb:	83 c4 0c             	add    esp,0xc
c001d0ee:	c3                   	ret    
c001d0ef:	90                   	nop

c001d0f0 <VCache::write(unsigned long long, int, void*)>:
c001d0f0:	55                   	push   ebp
c001d0f1:	57                   	push   edi
c001d0f2:	56                   	push   esi
c001d0f3:	53                   	push   ebx
c001d0f4:	83 ec 1c             	sub    esp,0x1c
c001d0f7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d0fb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d0ff:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d103:	e8 bc 7e 00 00       	call   c0024fc4 <KeDisablePreemption()>
c001d108:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d10c:	74 0e                	je     c001d11c <VCache::write(unsigned long long, int, void*)+0x2c>
c001d10e:	83 ec 0c             	sub    esp,0xc
c001d111:	53                   	push   ebx
c001d112:	e8 fd fe ff ff       	call   c001d014 <VCache::invalidateReadBuffer()>
c001d117:	83 c4 10             	add    esp,0x10
c001d11a:	66 90                	xchg   ax,ax
c001d11c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d120:	74 5e                	je     c001d180 <VCache::write(unsigned long long, int, void*)+0x90>
c001d122:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c001d125:	89 e8                	mov    eax,ebp
c001d127:	99                   	cdq    
c001d128:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001d12b:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001d12e:	89 c1                	mov    ecx,eax
c001d130:	89 d0                	mov    eax,edx
c001d132:	31 f1                	xor    ecx,esi
c001d134:	31 f8                	xor    eax,edi
c001d136:	09 c1                	or     ecx,eax
c001d138:	75 3a                	jne    c001d174 <VCache::write(unsigned long long, int, void*)+0x84>
c001d13a:	83 7c 24 3c 01       	cmp    DWORD PTR [esp+0x3c],0x1
c001d13f:	75 33                	jne    c001d174 <VCache::write(unsigned long long, int, void*)+0x84>
c001d141:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d144:	89 ef                	mov    edi,ebp
c001d146:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d14c:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d150:	0f af f9             	imul   edi,ecx
c001d153:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c001d156:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d158:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001d15b:	40                   	inc    eax
c001d15c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001d15f:	83 f8 50             	cmp    eax,0x50
c001d162:	75 70                	jne    c001d1d4 <VCache::write(unsigned long long, int, void*)+0xe4>
c001d164:	83 ec 0c             	sub    esp,0xc
c001d167:	53                   	push   ebx
c001d168:	e8 b7 fe ff ff       	call   c001d024 <VCache::writeWriteBuffer()>
c001d16d:	83 c4 10             	add    esp,0x10
c001d170:	eb 62                	jmp    c001d1d4 <VCache::write(unsigned long long, int, void*)+0xe4>
c001d172:	66 90                	xchg   ax,ax
c001d174:	83 ec 0c             	sub    esp,0xc
c001d177:	53                   	push   ebx
c001d178:	e8 a7 fe ff ff       	call   c001d024 <VCache::writeWriteBuffer()>
c001d17d:	83 c4 10             	add    esp,0x10
c001d180:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d183:	83 7c 24 3c 4f       	cmp    DWORD PTR [esp+0x3c],0x4f
c001d188:	7f 22                	jg     c001d1ac <VCache::write(unsigned long long, int, void*)+0xbc>
c001d18a:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001d18d:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001d190:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d194:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001d198:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c001d19b:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c001d19e:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d1a4:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d1a8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d1aa:	eb 28                	jmp    c001d1d4 <VCache::write(unsigned long long, int, void*)+0xe4>
c001d1ac:	83 ec 0c             	sub    esp,0xc
c001d1af:	8b 10                	mov    edx,DWORD PTR [eax]
c001d1b1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d1b5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d1b9:	57                   	push   edi
c001d1ba:	56                   	push   esi
c001d1bb:	50                   	push   eax
c001d1bc:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001d1bf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d1c3:	83 c4 20             	add    esp,0x20
c001d1c6:	e8 21 7e 00 00       	call   c0024fec <KeRestorePreemption()>
c001d1cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d1cf:	eb 0b                	jmp    c001d1dc <VCache::write(unsigned long long, int, void*)+0xec>
c001d1d1:	8d 76 00             	lea    esi,[esi+0x0]
c001d1d4:	e8 13 7e 00 00       	call   c0024fec <KeRestorePreemption()>
c001d1d9:	31 c0                	xor    eax,eax
c001d1db:	90                   	nop
c001d1dc:	83 c4 1c             	add    esp,0x1c
c001d1df:	5b                   	pop    ebx
c001d1e0:	5e                   	pop    esi
c001d1e1:	5f                   	pop    edi
c001d1e2:	5d                   	pop    ebp
c001d1e3:	c3                   	ret    

c001d1e4 <VCache::read(unsigned long long, int, void*)>:
c001d1e4:	55                   	push   ebp
c001d1e5:	57                   	push   edi
c001d1e6:	56                   	push   esi
c001d1e7:	53                   	push   ebx
c001d1e8:	83 ec 1c             	sub    esp,0x1c
c001d1eb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d1ef:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d1f3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d1f7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d1fb:	e8 c4 7d 00 00       	call   c0024fc4 <KeDisablePreemption()>
c001d200:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d204:	74 0e                	je     c001d214 <VCache::read(unsigned long long, int, void*)+0x30>
c001d206:	83 ec 0c             	sub    esp,0xc
c001d209:	53                   	push   ebx
c001d20a:	e8 15 fe ff ff       	call   c001d024 <VCache::writeWriteBuffer()>
c001d20f:	83 c4 10             	add    esp,0x10
c001d212:	66 90                	xchg   ax,ax
c001d214:	83 fd 01             	cmp    ebp,0x1
c001d217:	0f 85 97 00 00 00    	jne    c001d2b4 <VCache::read(unsigned long long, int, void*)+0xd0>
c001d21d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d220:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d224:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001d22b:	0f 85 83 00 00 00    	jne    c001d2b4 <VCache::read(unsigned long long, int, void*)+0xd0>
c001d231:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c001d234:	89 e9                	mov    ecx,ebp
c001d236:	f7 d9                	neg    ecx
c001d238:	89 c8                	mov    eax,ecx
c001d23a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d23e:	c1 f8 1f             	sar    eax,0x1f
c001d241:	21 f1                	and    ecx,esi
c001d243:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d247:	89 c8                	mov    eax,ecx
c001d249:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d24d:	21 f9                	and    ecx,edi
c001d24f:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d253:	89 ca                	mov    edx,ecx
c001d255:	74 31                	je     c001d288 <VCache::read(unsigned long long, int, void*)+0xa4>
c001d257:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001d25a:	75 2c                	jne    c001d288 <VCache::read(unsigned long long, int, void*)+0xa4>
c001d25c:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c001d25f:	75 27                	jne    c001d288 <VCache::read(unsigned long long, int, void*)+0xa4>
c001d261:	8d 76 00             	lea    esi,[esi+0x0]
c001d264:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d267:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d26b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d271:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d274:	48                   	dec    eax
c001d275:	21 c6                	and    esi,eax
c001d277:	0f af f1             	imul   esi,ecx
c001d27a:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c001d27d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d27f:	e8 68 7d 00 00       	call   c0024fec <KeRestorePreemption()>
c001d284:	31 c0                	xor    eax,eax
c001d286:	eb 58                	jmp    c001d2e0 <VCache::read(unsigned long long, int, void*)+0xfc>
c001d288:	83 ec 0c             	sub    esp,0xc
c001d28b:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001d28f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d293:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c001d296:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c001d299:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001d29b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001d29e:	55                   	push   ebp
c001d29f:	52                   	push   edx
c001d2a0:	50                   	push   eax
c001d2a1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d2a5:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001d2a8:	83 c4 20             	add    esp,0x20
c001d2ab:	85 c0                	test   eax,eax
c001d2ad:	75 31                	jne    c001d2e0 <VCache::read(unsigned long long, int, void*)+0xfc>
c001d2af:	eb b3                	jmp    c001d264 <VCache::read(unsigned long long, int, void*)+0x80>
c001d2b1:	8d 76 00             	lea    esi,[esi+0x0]
c001d2b4:	83 ec 0c             	sub    esp,0xc
c001d2b7:	53                   	push   ebx
c001d2b8:	e8 57 fd ff ff       	call   c001d014 <VCache::invalidateReadBuffer()>
c001d2bd:	5a                   	pop    edx
c001d2be:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d2c1:	8b 10                	mov    edx,DWORD PTR [eax]
c001d2c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d2c7:	55                   	push   ebp
c001d2c8:	57                   	push   edi
c001d2c9:	56                   	push   esi
c001d2ca:	50                   	push   eax
c001d2cb:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001d2ce:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d2d2:	83 c4 20             	add    esp,0x20
c001d2d5:	e8 12 7d 00 00       	call   c0024fec <KeRestorePreemption()>
c001d2da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2de:	66 90                	xchg   ax,ax
c001d2e0:	83 c4 1c             	add    esp,0x1c
c001d2e3:	5b                   	pop    ebx
c001d2e4:	5e                   	pop    esi
c001d2e5:	5f                   	pop    edi
c001d2e6:	5d                   	pop    ebp
c001d2e7:	c3                   	ret    

c001d2e8 <Video::putrect(int, int, int, int, unsigned int)>:
c001d2e8:	55                   	push   ebp
c001d2e9:	57                   	push   edi
c001d2ea:	56                   	push   esi
c001d2eb:	53                   	push   ebx
c001d2ec:	83 ec 1c             	sub    esp,0x1c
c001d2ef:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d2f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d2f7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d2fb:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001d2ff:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d303:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d307:	01 df                	add    edi,ebx
c001d309:	39 fb                	cmp    ebx,edi
c001d30b:	7d 1f                	jge    c001d32c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001d30d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d311:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001d315:	7d 12                	jge    c001d329 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001d317:	8b 16                	mov    edx,DWORD PTR [esi]
c001d319:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d31d:	53                   	push   ebx
c001d31e:	55                   	push   ebp
c001d31f:	45                   	inc    ebp
c001d320:	56                   	push   esi
c001d321:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001d324:	83 c4 10             	add    esp,0x10
c001d327:	eb e8                	jmp    c001d311 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001d329:	43                   	inc    ebx
c001d32a:	eb dd                	jmp    c001d309 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001d32c:	83 c4 1c             	add    esp,0x1c
c001d32f:	5b                   	pop    ebx
c001d330:	5e                   	pop    esi
c001d331:	5f                   	pop    edi
c001d332:	5d                   	pop    ebp
c001d333:	c3                   	ret    

c001d334 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001d334:	55                   	push   ebp
c001d335:	57                   	push   edi
c001d336:	31 ff                	xor    edi,edi
c001d338:	56                   	push   esi
c001d339:	53                   	push   ebx
c001d33a:	83 ec 1c             	sub    esp,0x1c
c001d33d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001d341:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d345:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001d34c:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001d351:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d355:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001d359:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d35d:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001d360:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d364:	01 f9                	add    ecx,edi
c001d366:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001d36a:	7d 2f                	jge    c001d39b <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001d36c:	31 f6                	xor    esi,esi
c001d36e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d372:	01 f2                	add    edx,esi
c001d374:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001d378:	7d 1a                	jge    c001d394 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001d37a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d37d:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001d380:	46                   	inc    esi
c001d381:	51                   	push   ecx
c001d382:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001d386:	52                   	push   edx
c001d387:	55                   	push   ebp
c001d388:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d38b:	83 c4 10             	add    esp,0x10
c001d38e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d392:	eb da                	jmp    c001d36e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001d394:	47                   	inc    edi
c001d395:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d399:	eb c5                	jmp    c001d360 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001d39b:	83 c4 1c             	add    esp,0x1c
c001d39e:	5b                   	pop    ebx
c001d39f:	5e                   	pop    esi
c001d3a0:	5f                   	pop    edi
c001d3a1:	5d                   	pop    ebp
c001d3a2:	c3                   	ret    
c001d3a3:	90                   	nop

c001d3a4 <Video::blit(unsigned int*, int, int, int, int)>:
c001d3a4:	55                   	push   ebp
c001d3a5:	57                   	push   edi
c001d3a6:	56                   	push   esi
c001d3a7:	53                   	push   ebx
c001d3a8:	83 ec 1c             	sub    esp,0x1c
c001d3ab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d3af:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d3b3:	85 c0                	test   eax,eax
c001d3b5:	79 02                	jns    c001d3b9 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001d3b7:	31 c0                	xor    eax,eax
c001d3b9:	c1 e0 02             	shl    eax,0x2
c001d3bc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d3c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d3c4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d3c8:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001d3cc:	39 d8                	cmp    eax,ebx
c001d3ce:	7e 49                	jle    c001d419 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001d3d0:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d3d6:	7c 41                	jl     c001d419 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001d3d8:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d3dc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d3e0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d3e4:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001d3e8:	39 f9                	cmp    ecx,edi
c001d3ea:	7e 22                	jle    c001d40e <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001d3ec:	83 c5 04             	add    ebp,0x4
c001d3ef:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d3f5:	7c 14                	jl     c001d40b <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001d3f7:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d3f9:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001d3fc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d400:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d404:	56                   	push   esi
c001d405:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001d408:	83 c4 10             	add    esp,0x10
c001d40b:	47                   	inc    edi
c001d40c:	eb d2                	jmp    c001d3e0 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001d40e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d412:	43                   	inc    ebx
c001d413:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001d417:	eb ab                	jmp    c001d3c4 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001d419:	83 c4 1c             	add    esp,0x1c
c001d41c:	5b                   	pop    ebx
c001d41d:	5e                   	pop    esi
c001d41e:	5f                   	pop    edi
c001d41f:	5d                   	pop    ebp
c001d420:	c3                   	ret    
c001d421:	90                   	nop

c001d422 <Video::clearScreen(unsigned int)>:
c001d422:	57                   	push   edi
c001d423:	56                   	push   esi
c001d424:	53                   	push   ebx
c001d425:	31 db                	xor    ebx,ebx
c001d427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d42b:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d431:	7e 1f                	jle    c001d452 <Video::clearScreen(unsigned int)+0x30>
c001d433:	31 ff                	xor    edi,edi
c001d435:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d43b:	7e 12                	jle    c001d44f <Video::clearScreen(unsigned int)+0x2d>
c001d43d:	8b 06                	mov    eax,DWORD PTR [esi]
c001d43f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d443:	53                   	push   ebx
c001d444:	57                   	push   edi
c001d445:	47                   	inc    edi
c001d446:	56                   	push   esi
c001d447:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d44a:	83 c4 10             	add    esp,0x10
c001d44d:	eb e6                	jmp    c001d435 <Video::clearScreen(unsigned int)+0x13>
c001d44f:	43                   	inc    ebx
c001d450:	eb d9                	jmp    c001d42b <Video::clearScreen(unsigned int)+0x9>
c001d452:	5b                   	pop    ebx
c001d453:	5e                   	pop    esi
c001d454:	5f                   	pop    edi
c001d455:	c3                   	ret    

c001d456 <Video::putpixel(int, int, unsigned int)>:
c001d456:	c7 44 24 04 94 22 03 c0 	mov    DWORD PTR [esp+0x4],0xc0032294
c001d45e:	e9 03 2e 00 00       	jmp    c0020266 <KePanic(char const*)>
c001d463:	90                   	nop

c001d464 <Video::readPixelApprox(int, int)>:
c001d464:	83 ec 18             	sub    esp,0x18
c001d467:	68 b5 22 03 c0       	push   0xc00322b5
c001d46c:	e8 f5 2d 00 00       	call   c0020266 <KePanic(char const*)>
c001d471:	31 c0                	xor    eax,eax
c001d473:	83 c4 1c             	add    esp,0x1c
c001d476:	c3                   	ret    
c001d477:	90                   	nop

c001d478 <Video::Video(char const*)>:
c001d478:	83 ec 0c             	sub    esp,0xc
c001d47b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d47f:	83 ec 08             	sub    esp,0x8
c001d482:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d486:	50                   	push   eax
c001d487:	e8 a4 df ff ff       	call   c001b430 <Device::Device(char const*)>
c001d48c:	83 c4 10             	add    esp,0x10
c001d48f:	ba 58 23 03 c0       	mov    edx,0xc0032358
c001d494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d498:	89 10                	mov    DWORD PTR [eax],edx
c001d49a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d49e:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001d4a8:	90                   	nop
c001d4a9:	83 c4 0c             	add    esp,0xc
c001d4ac:	c3                   	ret    
c001d4ad:	90                   	nop

c001d4ae <Video::~Video()>:
c001d4ae:	83 ec 0c             	sub    esp,0xc
c001d4b1:	ba 58 23 03 c0       	mov    edx,0xc0032358
c001d4b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4ba:	89 10                	mov    DWORD PTR [eax],edx
c001d4bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4c0:	83 ec 0c             	sub    esp,0xc
c001d4c3:	50                   	push   eax
c001d4c4:	e8 07 dd ff ff       	call   c001b1d0 <Device::~Device()>
c001d4c9:	83 c4 10             	add    esp,0x10
c001d4cc:	90                   	nop
c001d4cd:	83 c4 0c             	add    esp,0xc
c001d4d0:	c3                   	ret    
c001d4d1:	90                   	nop

c001d4d2 <Video::~Video()>:
c001d4d2:	83 ec 0c             	sub    esp,0xc
c001d4d5:	83 ec 0c             	sub    esp,0xc
c001d4d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4dc:	e8 cd ff ff ff       	call   c001d4ae <Video::~Video()>
c001d4e1:	83 c4 10             	add    esp,0x10
c001d4e4:	83 ec 08             	sub    esp,0x8
c001d4e7:	68 64 01 00 00       	push   0x164
c001d4ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4f0:	e8 2b bc ff ff       	call   c0019120 <operator delete(void*, unsigned long)>
c001d4f5:	83 c4 10             	add    esp,0x10
c001d4f8:	83 c4 0c             	add    esp,0xc
c001d4fb:	c3                   	ret    

c001d4fc <Video::isMonochrome()>:
c001d4fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d500:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001d506:	c3                   	ret    
c001d507:	90                   	nop

c001d508 <Video::getWidth()>:
c001d508:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d50c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d512:	c3                   	ret    
c001d513:	90                   	nop

c001d514 <Video::getHeight()>:
c001d514:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d518:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d51e:	c3                   	ret    
c001d51f:	90                   	nop

c001d520 <Video::drawCursor(int, int, unsigned int*, int)>:
c001d520:	55                   	push   ebp
c001d521:	57                   	push   edi
c001d522:	56                   	push   esi
c001d523:	53                   	push   ebx
c001d524:	83 ec 2c             	sub    esp,0x2c
c001d527:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d52b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d52f:	83 f8 01             	cmp    eax,0x1
c001d532:	19 c9                	sbb    ecx,ecx
c001d534:	31 db                	xor    ebx,ebx
c001d536:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001d53a:	89 cd                	mov    ebp,ecx
c001d53c:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001d544:	f7 d5                	not    ebp
c001d546:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001d54c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d550:	01 d8                	add    eax,ebx
c001d552:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d556:	56                   	push   esi
c001d557:	e8 b8 ff ff ff       	call   c001d514 <Video::getHeight()>
c001d55c:	59                   	pop    ecx
c001d55d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001d561:	7e 70                	jle    c001d5d3 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c001d563:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d567:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001d56b:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001d56e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d572:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d576:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001d57d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d581:	89 f8                	mov    eax,edi
c001d583:	83 c0 20             	add    eax,0x20
c001d586:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d58a:	56                   	push   esi
c001d58b:	e8 78 ff ff ff       	call   c001d508 <Video::getWidth()>
c001d590:	5a                   	pop    edx
c001d591:	39 c7                	cmp    edi,eax
c001d593:	7d 34                	jge    c001d5c9 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c001d595:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001d59a:	74 05                	je     c001d5a1 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c001d59c:	8b 06                	mov    eax,DWORD PTR [esi]
c001d59e:	55                   	push   ebp
c001d59f:	eb 0d                	jmp    c001d5ae <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c001d5a1:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001d5a6:	74 12                	je     c001d5ba <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c001d5a8:	8b 06                	mov    eax,DWORD PTR [esi]
c001d5aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d5ae:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d5b2:	57                   	push   edi
c001d5b3:	56                   	push   esi
c001d5b4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d5b7:	83 c4 10             	add    esp,0x10
c001d5ba:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001d5be:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001d5c2:	47                   	inc    edi
c001d5c3:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001d5c7:	75 c1                	jne    c001d58a <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c001d5c9:	43                   	inc    ebx
c001d5ca:	83 fb 20             	cmp    ebx,0x20
c001d5cd:	0f 85 79 ff ff ff    	jne    c001d54c <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c001d5d3:	83 c4 2c             	add    esp,0x2c
c001d5d6:	5b                   	pop    ebx
c001d5d7:	5e                   	pop    esi
c001d5d8:	5f                   	pop    edi
c001d5d9:	5d                   	pop    ebp
c001d5da:	c3                   	ret    
c001d5db:	90                   	nop

c001d5dc <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001d5dc:	55                   	push   ebp
c001d5dd:	57                   	push   edi
c001d5de:	56                   	push   esi
c001d5df:	53                   	push   ebx
c001d5e0:	83 ec 48             	sub    esp,0x48
c001d5e3:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001d5e7:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c001d5eb:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c001d5ef:	c1 e0 08             	shl    eax,0x8
c001d5f2:	01 d0                	add    eax,edx
c001d5f4:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001d5f8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d5fc:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001d600:	c1 e0 08             	shl    eax,0x8
c001d603:	01 d0                	add    eax,edx
c001d605:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d609:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d60d:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c001d612:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d616:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d61a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001d621:	50                   	push   eax
c001d622:	e8 97 8d ff ff       	call   c00163be <malloc>
c001d627:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d62b:	83 c4 10             	add    esp,0x10
c001d62e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001d633:	75 10                	jne    c001d645 <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c001d635:	83 ec 0c             	sub    esp,0xc
c001d638:	68 e0 22 03 c0       	push   0xc00322e0
c001d63d:	e8 24 2c 00 00       	call   c0020266 <KePanic(char const*)>
c001d642:	83 c4 10             	add    esp,0x10
c001d645:	51                   	push   ecx
c001d646:	51                   	push   ecx
c001d647:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d64b:	50                   	push   eax
c001d64c:	68 f0 22 03 c0       	push   0xc00322f0
c001d651:	e8 f7 bb ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c001d656:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c001d659:	83 e0 20             	and    eax,0x20
c001d65c:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c001d660:	85 c0                	test   eax,eax
c001d662:	5e                   	pop    esi
c001d663:	0f 94 c0             	sete   al
c001d666:	5f                   	pop    edi
c001d667:	0f b6 c0             	movzx  eax,al
c001d66a:	be 12 00 00 00       	mov    esi,0x12
c001d66f:	50                   	push   eax
c001d670:	68 fa 22 03 c0       	push   0xc00322fa
c001d675:	e8 d3 bb ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c001d67a:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c001d67e:	83 c4 10             	add    esp,0x10
c001d681:	89 d0                	mov    eax,edx
c001d683:	85 d2                	test   edx,edx
c001d685:	74 11                	je     c001d698 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c001d687:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001d68b:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c001d68f:	c1 fe 03             	sar    esi,0x3
c001d692:	0f af f1             	imul   esi,ecx
c001d695:	83 c6 12             	add    esi,0x12
c001d698:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d69d:	74 07                	je     c001d6a6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c001d69f:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001d6a4:	75 12                	jne    c001d6b8 <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c001d6a6:	83 ec 0c             	sub    esp,0xc
c001d6a9:	68 08 23 03 c0       	push   0xc0032308
c001d6ae:	e8 9a bb ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c001d6b3:	e9 a0 02 00 00       	jmp    c001d958 <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c001d6b8:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c001d6bc:	83 f9 02             	cmp    ecx,0x2
c001d6bf:	74 0e                	je     c001d6cf <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c001d6c1:	83 f9 0a             	cmp    ecx,0xa
c001d6c4:	0f 84 c8 00 00 00    	je     c001d792 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c001d6ca:	e9 72 02 00 00       	jmp    c001d941 <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c001d6cf:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001d6d4:	75 0e                	jne    c001d6e4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c001d6d6:	84 c0                	test   al,al
c001d6d8:	75 0a                	jne    c001d6e4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c001d6da:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001d6dd:	83 e8 18             	sub    eax,0x18
c001d6e0:	a8 f7                	test   al,0xf7
c001d6e2:	74 0d                	je     c001d6f1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c001d6e4:	83 ec 0c             	sub    esp,0xc
c001d6e7:	68 1d 23 03 c0       	push   0xc003231d
c001d6ec:	e9 58 02 00 00       	jmp    c001d949 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c001d6f1:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c001d6f6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d6fe:	31 c0                	xor    eax,eax
c001d700:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001d704:	89 c7                	mov    edi,eax
c001d706:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d70e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001d713:	75 15                	jne    c001d72a <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001d715:	99                   	cdq    
c001d716:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c001d71a:	85 d2                	test   edx,edx
c001d71c:	75 0c                	jne    c001d72a <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001d71e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001d722:	29 c7                	sub    edi,eax
c001d724:	4f                   	dec    edi
c001d725:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c001d72a:	31 d2                	xor    edx,edx
c001d72c:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d730:	75 08                	jne    c001d73a <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c001d732:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c001d737:	c1 e2 18             	shl    edx,0x18
c001d73a:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c001d73f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001d743:	c1 e1 10             	shl    ecx,0x10
c001d746:	8d 47 01             	lea    eax,[edi+0x1]
c001d749:	89 cd                	mov    ebp,ecx
c001d74b:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c001d750:	c1 e1 08             	shl    ecx,0x8
c001d753:	09 e9                	or     ecx,ebp
c001d755:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c001d759:	09 e9                	or     ecx,ebp
c001d75b:	09 d1                	or     ecx,edx
c001d75d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d761:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c001d764:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c001d768:	c1 fa 03             	sar    edx,0x3
c001d76b:	01 d6                	add    esi,edx
c001d76d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d771:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c001d775:	7e 04                	jle    c001d77b <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c001d777:	89 c7                	mov    edi,eax
c001d779:	eb 93                	jmp    c001d70e <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c001d77b:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001d77f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d783:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c001d787:	0f 8f 77 ff ff ff    	jg     c001d704 <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c001d78d:	e9 d3 01 00 00       	jmp    c001d965 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c001d792:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001d797:	75 0e                	jne    c001d7a7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c001d799:	85 d2                	test   edx,edx
c001d79b:	75 0a                	jne    c001d7a7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c001d79d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001d7a0:	83 e8 18             	sub    eax,0x18
c001d7a3:	a8 f7                	test   al,0xf7
c001d7a5:	74 0d                	je     c001d7b4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c001d7a7:	83 ec 0c             	sub    esp,0xc
c001d7aa:	68 2b 23 03 c0       	push   0xc003232b
c001d7af:	e9 95 01 00 00       	jmp    c001d949 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c001d7b4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d7bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d7c4:	31 c9                	xor    ecx,ecx
c001d7c6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001d7ca:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c001d7ce:	0f 8e 91 01 00 00    	jle    c001d965 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c001d7d4:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c001d7d8:	0f 8d 87 01 00 00    	jge    c001d965 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c001d7de:	8d 46 01             	lea    eax,[esi+0x1]
c001d7e1:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c001d7e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d7e9:	83 fd 7f             	cmp    ebp,0x7f
c001d7ec:	89 e8                	mov    eax,ebp
c001d7ee:	0f 8e 9d 00 00 00    	jle    c001d891 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c001d7f4:	83 e0 7f             	and    eax,0x7f
c001d7f7:	31 d2                	xor    edx,edx
c001d7f9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d7fd:	40                   	inc    eax
c001d7fe:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d802:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d806:	75 0a                	jne    c001d812 <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c001d808:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c001d80d:	89 ea                	mov    edx,ebp
c001d80f:	c1 e2 18             	shl    edx,0x18
c001d812:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c001d817:	c1 e0 10             	shl    eax,0x10
c001d81a:	89 c7                	mov    edi,eax
c001d81c:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c001d821:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001d825:	c1 e0 08             	shl    eax,0x8
c001d828:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c001d82c:	09 f8                	or     eax,edi
c001d82e:	31 f6                	xor    esi,esi
c001d830:	09 c5                	or     ebp,eax
c001d832:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c001d837:	09 d5                	or     ebp,edx
c001d839:	85 ff                	test   edi,edi
c001d83b:	75 1d                	jne    c001d85a <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c001d83d:	89 c8                	mov    eax,ecx
c001d83f:	99                   	cdq    
c001d840:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c001d844:	85 d2                	test   edx,edx
c001d846:	75 12                	jne    c001d85a <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c001d848:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d84c:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c001d850:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001d854:	49                   	dec    ecx
c001d855:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c001d85a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d85e:	8d 51 01             	lea    edx,[ecx+0x1]
c001d861:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c001d864:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c001d868:	8d 46 01             	lea    eax,[esi+0x1]
c001d86b:	7e 06                	jle    c001d873 <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c001d86d:	89 c6                	mov    esi,eax
c001d86f:	89 d1                	mov    ecx,edx
c001d871:	eb c6                	jmp    c001d839 <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c001d873:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001d877:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d87b:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c001d87f:	c1 f8 03             	sar    eax,0x3
c001d882:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001d886:	89 d1                	mov    ecx,edx
c001d888:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001d88c:	e9 35 ff ff ff       	jmp    c001d7c6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c001d891:	8d 45 01             	lea    eax,[ebp+0x1]
c001d894:	31 f6                	xor    esi,esi
c001d896:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d89a:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001d89f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d8a3:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001d8a8:	75 1d                	jne    c001d8c7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c001d8aa:	89 c8                	mov    eax,ecx
c001d8ac:	99                   	cdq    
c001d8ad:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c001d8b1:	85 d2                	test   edx,edx
c001d8b3:	75 12                	jne    c001d8c7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c001d8b5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d8b9:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c001d8bd:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001d8c1:	49                   	dec    ecx
c001d8c2:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c001d8c7:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c001d8cf:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d8d3:	75 10                	jne    c001d8e5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c001d8d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d8d9:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c001d8de:	c1 e7 18             	shl    edi,0x18
c001d8e1:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001d8e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d8e9:	8d 51 01             	lea    edx,[ecx+0x1]
c001d8ec:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c001d8f1:	c1 e0 10             	shl    eax,0x10
c001d8f4:	89 c7                	mov    edi,eax
c001d8f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d8fa:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c001d8ff:	c1 e0 08             	shl    eax,0x8
c001d902:	09 f8                	or     eax,edi
c001d904:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d908:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c001d90c:	09 f8                	or     eax,edi
c001d90e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001d912:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c001d916:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c001d919:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d91d:	c1 f8 03             	sar    eax,0x3
c001d920:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001d924:	8d 46 01             	lea    eax,[esi+0x1]
c001d927:	39 f5                	cmp    ebp,esi
c001d929:	7e 09                	jle    c001d934 <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c001d92b:	89 c6                	mov    esi,eax
c001d92d:	89 d1                	mov    ecx,edx
c001d92f:	e9 6f ff ff ff       	jmp    c001d8a3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c001d934:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001d938:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c001d93c:	e9 45 ff ff ff       	jmp    c001d886 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c001d941:	52                   	push   edx
c001d942:	52                   	push   edx
c001d943:	51                   	push   ecx
c001d944:	68 3a 23 03 c0       	push   0xc003233a
c001d949:	e8 ff b8 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c001d94e:	58                   	pop    eax
c001d94f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d953:	e8 76 8a ff ff       	call   c00163ce <free>
c001d958:	83 c4 10             	add    esp,0x10
c001d95b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d963:	eb 14                	jmp    c001d979 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c001d965:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001d969:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d96d:	89 18                	mov    DWORD PTR [eax],ebx
c001d96f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001d973:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d977:	89 18                	mov    DWORD PTR [eax],ebx
c001d979:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d97d:	83 c4 3c             	add    esp,0x3c
c001d980:	5b                   	pop    ebx
c001d981:	5e                   	pop    esi
c001d982:	5f                   	pop    edi
c001d983:	5d                   	pop    ebp
c001d984:	c3                   	ret    
c001d985:	90                   	nop

c001d986 <Video::putTGA(int, int, unsigned char*, int)>:
c001d986:	55                   	push   ebp
c001d987:	57                   	push   edi
c001d988:	56                   	push   esi
c001d989:	53                   	push   ebx
c001d98a:	83 ec 28             	sub    esp,0x28
c001d98d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001d991:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d995:	50                   	push   eax
c001d996:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d99a:	50                   	push   eax
c001d99b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001d99f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001d9a3:	57                   	push   edi
c001d9a4:	e8 33 fc ff ff       	call   c001d5dc <Video::tgaParse(unsigned char*, int, int*, int*)>
c001d9a9:	83 c4 20             	add    esp,0x20
c001d9ac:	85 c0                	test   eax,eax
c001d9ae:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d9b2:	74 3a                	je     c001d9ee <Video::putTGA(int, int, unsigned char*, int)+0x68>
c001d9b4:	89 c6                	mov    esi,eax
c001d9b6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d9ba:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001d9be:	39 d8                	cmp    eax,ebx
c001d9c0:	7e 2c                	jle    c001d9ee <Video::putTGA(int, int, unsigned char*, int)+0x68>
c001d9c2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d9c6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d9ca:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d9ce:	39 e8                	cmp    eax,ebp
c001d9d0:	7e 19                	jle    c001d9eb <Video::putTGA(int, int, unsigned char*, int)+0x65>
c001d9d2:	83 c6 04             	add    esi,0x4
c001d9d5:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c001d9d8:	85 c0                	test   eax,eax
c001d9da:	79 0c                	jns    c001d9e8 <Video::putTGA(int, int, unsigned char*, int)+0x62>
c001d9dc:	8b 17                	mov    edx,DWORD PTR [edi]
c001d9de:	50                   	push   eax
c001d9df:	53                   	push   ebx
c001d9e0:	55                   	push   ebp
c001d9e1:	57                   	push   edi
c001d9e2:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001d9e5:	83 c4 10             	add    esp,0x10
c001d9e8:	45                   	inc    ebp
c001d9e9:	eb db                	jmp    c001d9c6 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001d9eb:	43                   	inc    ebx
c001d9ec:	eb c8                	jmp    c001d9b6 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001d9ee:	83 c4 1c             	add    esp,0x1c
c001d9f1:	5b                   	pop    ebx
c001d9f2:	5e                   	pop    esi
c001d9f3:	5f                   	pop    edi
c001d9f4:	5d                   	pop    ebp
c001d9f5:	c3                   	ret    
c001d9f6:	66 90                	xchg   ax,ax

c001d9f8 <ACPI::close(int, int, void*)>:
c001d9f8:	83 ec 1c             	sub    esp,0x1c
c001d9fb:	83 ec 0c             	sub    esp,0xc
c001d9fe:	68 9c 23 03 c0       	push   0xc003239c
c001da03:	e8 45 b8 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c001da08:	83 c4 10             	add    esp,0x10
c001da0b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001da13:	74 1b                	je     c001da30 <ACPI::close(int, int, void*)+0x38>
c001da15:	83 ec 0c             	sub    esp,0xc
c001da18:	68 ab 23 03 c0       	push   0xc00323ab
c001da1d:	e8 2b b8 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c001da22:	83 c4 10             	add    esp,0x10
c001da25:	b8 00 00 00 00       	mov    eax,0x0
c001da2a:	e9 01 01 00 00       	jmp    c001db30 <ACPI::close(int, int, void*)+0x138>
c001da2f:	90                   	nop
c001da30:	83 ec 0c             	sub    esp,0xc
c001da33:	68 bc 23 03 c0       	push   0xc00323bc
c001da38:	e8 10 b8 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c001da3d:	83 c4 10             	add    esp,0x10
c001da40:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001da45:	75 45                	jne    c001da8c <ACPI::close(int, int, void*)+0x94>
c001da47:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001da4c:	83 ec 08             	sub    esp,0x8
c001da4f:	50                   	push   eax
c001da50:	68 cb 23 03 c0       	push   0xc00323cb
c001da55:	e8 f3 b7 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c001da5a:	83 c4 10             	add    esp,0x10
c001da5d:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001da62:	85 c0                	test   eax,eax
c001da64:	74 0a                	je     c001da70 <ACPI::close(int, int, void*)+0x78>
c001da66:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001da6b:	ff d0                	call   eax
c001da6d:	8d 76 00             	lea    esi,[esi+0x0]
c001da70:	83 ec 0c             	sub    esp,0xc
c001da73:	68 9c 25 03 c0       	push   0xc003259c
c001da78:	e8 e9 27 00 00       	call   c0020266 <KePanic(char const*)>
c001da7d:	83 c4 10             	add    esp,0x10
c001da80:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001da85:	e9 a6 00 00 00       	jmp    c001db30 <ACPI::close(int, int, void*)+0x138>
c001da8a:	66 90                	xchg   ax,ax
c001da8c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001da91:	0f 85 81 00 00 00    	jne    c001db18 <ACPI::close(int, int, void*)+0x120>
c001da97:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001da9c:	83 ec 08             	sub    esp,0x8
c001da9f:	50                   	push   eax
c001daa0:	68 e9 23 03 c0       	push   0xc00323e9
c001daa5:	e8 a3 b7 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c001daaa:	83 c4 10             	add    esp,0x10
c001daad:	a1 04 f4 03 c0       	mov    eax,ds:0xc003f404
c001dab2:	85 c0                	test   eax,eax
c001dab4:	74 0a                	je     c001dac0 <ACPI::close(int, int, void*)+0xc8>
c001dab6:	a1 04 f4 03 c0       	mov    eax,ds:0xc003f404
c001dabb:	ff d0                	call   eax
c001dabd:	8d 76 00             	lea    esi,[esi+0x0]
c001dac0:	83 ec 0c             	sub    esp,0xc
c001dac3:	68 04 24 03 c0       	push   0xc0032404
c001dac8:	e8 80 b7 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c001dacd:	83 c4 10             	add    esp,0x10
c001dad0:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001dad5:	8d 76 00             	lea    esi,[esi+0x0]
c001dad8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dadd:	83 e0 02             	and    eax,0x2
c001dae0:	74 1e                	je     c001db00 <ACPI::close(int, int, void*)+0x108>
c001dae2:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001dae9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001daed:	89 c2                	mov    edx,eax
c001daef:	ec                   	in     al,dx
c001daf0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001daf4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001daf8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dafc:	eb da                	jmp    c001dad8 <ACPI::close(int, int, void*)+0xe0>
c001dafe:	66 90                	xchg   ax,ax
c001db00:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001db07:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001db0c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001db10:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001db14:	ee                   	out    dx,al
c001db15:	8d 76 00             	lea    esi,[esi+0x0]
c001db18:	83 ec 0c             	sub    esp,0xc
c001db1b:	68 16 24 03 c0       	push   0xc0032416
c001db20:	e8 28 b7 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c001db25:	83 c4 10             	add    esp,0x10
c001db28:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001db2d:	8d 76 00             	lea    esi,[esi+0x0]
c001db30:	83 c4 1c             	add    esp,0x1c
c001db33:	c3                   	ret    

c001db34 <findRSDP()>:
c001db34:	83 ec 1c             	sub    esp,0x1c
c001db37:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001db3c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001db42:	83 e0 04             	and    eax,0x4
c001db45:	0f b6 c0             	movzx  eax,al
c001db48:	85 c0                	test   eax,eax
c001db4a:	75 08                	jne    c001db54 <findRSDP()+0x20>
c001db4c:	b8 00 00 00 00       	mov    eax,0x0
c001db51:	eb 75                	jmp    c001dbc8 <findRSDP()+0x94>
c001db53:	90                   	nop
c001db54:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c001db59:	3d ff 07 00 00       	cmp    eax,0x7ff
c001db5e:	7f 1c                	jg     c001db7c <findRSDP()+0x48>
c001db60:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001db65:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001db6b:	83 e2 fb             	and    edx,0xfffffffb
c001db6e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001db74:	b8 00 00 00 00       	mov    eax,0x0
c001db79:	eb 4d                	jmp    c001dbc8 <findRSDP()+0x94>
c001db7b:	90                   	nop
c001db7c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001db84:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001db8c:	77 32                	ja     c001dbc0 <findRSDP()+0x8c>
c001db8e:	83 ec 04             	sub    esp,0x4
c001db91:	6a 08                	push   0x8
c001db93:	68 25 24 03 c0       	push   0xc0032425
c001db98:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001db9c:	e8 df 27 fe ff       	call   c0000380 <memcmp>
c001dba1:	83 c4 10             	add    esp,0x10
c001dba4:	85 c0                	test   eax,eax
c001dba6:	0f 94 c0             	sete   al
c001dba9:	0f b6 c0             	movzx  eax,al
c001dbac:	85 c0                	test   eax,eax
c001dbae:	74 08                	je     c001dbb8 <findRSDP()+0x84>
c001dbb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dbb4:	eb 12                	jmp    c001dbc8 <findRSDP()+0x94>
c001dbb6:	66 90                	xchg   ax,ax
c001dbb8:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001dbbd:	eb c5                	jmp    c001db84 <findRSDP()+0x50>
c001dbbf:	90                   	nop
c001dbc0:	b8 00 00 00 00       	mov    eax,0x0
c001dbc5:	8d 76 00             	lea    esi,[esi+0x0]
c001dbc8:	83 c4 1c             	add    esp,0x1c
c001dbcb:	c3                   	ret    

c001dbcc <loadACPITables(unsigned char*)>:
c001dbcc:	57                   	push   edi
c001dbcd:	56                   	push   esi
c001dbce:	53                   	push   ebx
c001dbcf:	83 ec 60             	sub    esp,0x60
c001dbd2:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001dbd7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001dbdd:	83 e0 04             	and    eax,0x4
c001dbe0:	0f b6 c0             	movzx  eax,al
c001dbe3:	85 c0                	test   eax,eax
c001dbe5:	0f 84 41 02 00 00    	je     c001de2c <loadACPITables(unsigned char*)+0x260>
c001dbeb:	a0 20 f6 03 c0       	mov    al,ds:0xc003f620
c001dbf0:	0f b6 c0             	movzx  eax,al
c001dbf3:	85 c0                	test   eax,eax
c001dbf5:	74 79                	je     c001dc70 <loadACPITables(unsigned char*)+0xa4>
c001dbf7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dbfb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001dbff:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001dc03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dc06:	83 e8 24             	sub    eax,0x24
c001dc09:	c1 e8 03             	shr    eax,0x3
c001dc0c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001dc10:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001dc18:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001dc1c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001dc20:	0f 8d ba 00 00 00    	jge    c001dce0 <loadACPITables(unsigned char*)+0x114>
c001dc26:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dc2a:	83 c0 24             	add    eax,0x24
c001dc2d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001dc31:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dc35:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001dc39:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001dc3d:	c1 e0 03             	shl    eax,0x3
c001dc40:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001dc44:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001dc48:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001dc4b:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc4d:	89 c1                	mov    ecx,eax
c001dc4f:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dc54:	8d 50 01             	lea    edx,[eax+0x1]
c001dc57:	89 15 0c f4 03 c0    	mov    DWORD PTR ds:0xc003f40c,edx
c001dc5d:	89 ca                	mov    edx,ecx
c001dc5f:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001dc66:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c001dc6b:	eb ab                	jmp    c001dc18 <loadACPITables(unsigned char*)+0x4c>
c001dc6d:	8d 76 00             	lea    esi,[esi+0x0]
c001dc70:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dc74:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001dc78:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001dc7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dc7f:	83 e8 24             	sub    eax,0x24
c001dc82:	c1 e8 02             	shr    eax,0x2
c001dc85:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001dc89:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001dc91:	8d 76 00             	lea    esi,[esi+0x0]
c001dc94:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001dc98:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001dc9c:	7d 42                	jge    c001dce0 <loadACPITables(unsigned char*)+0x114>
c001dc9e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dca2:	83 c0 24             	add    eax,0x24
c001dca5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001dca9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dcad:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001dcb1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001dcb5:	c1 e0 02             	shl    eax,0x2
c001dcb8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001dcbc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dcc0:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dcc2:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dcc7:	8d 50 01             	lea    edx,[eax+0x1]
c001dcca:	89 15 0c f4 03 c0    	mov    DWORD PTR ds:0xc003f40c,edx
c001dcd0:	89 ca                	mov    edx,ecx
c001dcd2:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001dcd9:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c001dcde:	eb b4                	jmp    c001dc94 <loadACPITables(unsigned char*)+0xc8>
c001dce0:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001dce8:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dced:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001dcf1:	0f 8d 39 01 00 00    	jge    c001de30 <loadACPITables(unsigned char*)+0x264>
c001dcf7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dcfb:	8b 04 c5 24 f4 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc0bdc]
c001dd02:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001dd06:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd0a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001dd0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd12:	25 ff 0f 00 00       	and    eax,0xfff
c001dd17:	89 c6                	mov    esi,eax
c001dd19:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001dd1f:	83 ec 0c             	sub    esp,0xc
c001dd22:	6a 01                	push   0x1
c001dd24:	e8 ec a1 ff ff       	call   c0017f15 <Virt::allocateKernelVirtualPages(int)>
c001dd29:	83 c4 10             	add    esp,0x10
c001dd2c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001dd30:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001dd36:	83 ec 0c             	sub    esp,0xc
c001dd39:	6a 01                	push   0x1
c001dd3b:	6a 01                	push   0x1
c001dd3d:	50                   	push   eax
c001dd3e:	52                   	push   edx
c001dd3f:	53                   	push   ebx
c001dd40:	e8 dd aa ff ff       	call   c0018822 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001dd45:	83 c4 20             	add    esp,0x20
c001dd48:	09 f0                	or     eax,esi
c001dd4a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001dd4e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dd52:	c1 e0 03             	shl    eax,0x3
c001dd55:	05 20 f4 03 c0       	add    eax,0xc003f420
c001dd5a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dd5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd62:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dd66:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001dd6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dd72:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dd76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dd7a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dd7e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001dd82:	89 c6                	mov    esi,eax
c001dd84:	89 d7                	mov    edi,edx
c001dd86:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dd88:	89 c8                	mov    eax,ecx
c001dd8a:	89 fa                	mov    edx,edi
c001dd8c:	89 f3                	mov    ebx,esi
c001dd8e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001dd92:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dd96:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dd9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dda1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001dda5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001dda9:	05 00 10 00 00       	add    eax,0x1000
c001ddae:	c1 e8 0c             	shr    eax,0xc
c001ddb1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ddb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddb9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ddbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddc1:	25 ff 0f 00 00       	and    eax,0xfff
c001ddc6:	89 c6                	mov    esi,eax
c001ddc8:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001ddce:	83 ec 0c             	sub    esp,0xc
c001ddd1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ddd5:	e8 3b a1 ff ff       	call   c0017f15 <Virt::allocateKernelVirtualPages(int)>
c001ddda:	83 c4 10             	add    esp,0x10
c001dddd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001dde1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001dde7:	83 ec 0c             	sub    esp,0xc
c001ddea:	6a 01                	push   0x1
c001ddec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ddf0:	50                   	push   eax
c001ddf1:	52                   	push   edx
c001ddf2:	53                   	push   ebx
c001ddf3:	e8 2a aa ff ff       	call   c0018822 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ddf8:	83 c4 20             	add    esp,0x20
c001ddfb:	09 f0                	or     eax,esi
c001ddfd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001de01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de05:	83 ec 0c             	sub    esp,0xc
c001de08:	50                   	push   eax
c001de09:	e8 25 a4 ff ff       	call   c0018233 <Virt::freeKernelVirtualPages(unsigned long)>
c001de0e:	83 c4 10             	add    esp,0x10
c001de11:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001de15:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001de19:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001de20:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c001de25:	e9 be fe ff ff       	jmp    c001dce8 <loadACPITables(unsigned char*)+0x11c>
c001de2a:	66 90                	xchg   ax,ax
c001de2c:	90                   	nop
c001de2d:	8d 76 00             	lea    esi,[esi+0x0]
c001de30:	83 c4 60             	add    esp,0x60
c001de33:	5b                   	pop    ebx
c001de34:	5e                   	pop    esi
c001de35:	5f                   	pop    edi
c001de36:	c3                   	ret    
c001de37:	90                   	nop

c001de38 <findRSDT(unsigned char*)>:
c001de38:	57                   	push   edi
c001de39:	56                   	push   esi
c001de3a:	53                   	push   ebx
c001de3b:	83 ec 50             	sub    esp,0x50
c001de3e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001de43:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001de49:	83 e0 04             	and    eax,0x4
c001de4c:	0f b6 c0             	movzx  eax,al
c001de4f:	85 c0                	test   eax,eax
c001de51:	75 0d                	jne    c001de60 <findRSDT(unsigned char*)+0x28>
c001de53:	b8 00 00 00 00       	mov    eax,0x0
c001de58:	e9 2b 01 00 00       	jmp    c001df88 <findRSDT(unsigned char*)+0x150>
c001de5d:	8d 76 00             	lea    esi,[esi+0x0]
c001de60:	89 e0                	mov    eax,esp
c001de62:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001de66:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001de6a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001de6e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001de76:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001de7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001de7e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001de82:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001de86:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001de8a:	89 c6                	mov    esi,eax
c001de8c:	89 d7                	mov    edi,edx
c001de8e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001de90:	89 c8                	mov    eax,ecx
c001de92:	89 fa                	mov    edx,edi
c001de94:	89 f3                	mov    ebx,esi
c001de96:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001de9a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001de9e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001dea2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dea6:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c001deaa:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001deb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001deb6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001deba:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001debe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dec2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001dec6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001deca:	25 ff 0f 00 00       	and    eax,0xfff
c001decf:	89 c6                	mov    esi,eax
c001ded1:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001ded7:	83 ec 0c             	sub    esp,0xc
c001deda:	6a 02                	push   0x2
c001dedc:	e8 34 a0 ff ff       	call   c0017f15 <Virt::allocateKernelVirtualPages(int)>
c001dee1:	83 c4 10             	add    esp,0x10
c001dee4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001dee8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001deee:	83 ec 0c             	sub    esp,0xc
c001def1:	6a 01                	push   0x1
c001def3:	6a 02                	push   0x2
c001def5:	50                   	push   eax
c001def6:	52                   	push   edx
c001def7:	53                   	push   ebx
c001def8:	e8 25 a9 ff ff       	call   c0018822 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001defd:	83 c4 20             	add    esp,0x20
c001df00:	09 f0                	or     eax,esi
c001df02:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001df06:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001df0a:	25 ff 0f 00 00       	and    eax,0xfff
c001df0f:	89 c6                	mov    esi,eax
c001df11:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001df17:	83 ec 0c             	sub    esp,0xc
c001df1a:	6a 02                	push   0x2
c001df1c:	e8 f4 9f ff ff       	call   c0017f15 <Virt::allocateKernelVirtualPages(int)>
c001df21:	83 c4 10             	add    esp,0x10
c001df24:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001df28:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001df2e:	83 ec 0c             	sub    esp,0xc
c001df31:	6a 01                	push   0x1
c001df33:	6a 02                	push   0x2
c001df35:	50                   	push   eax
c001df36:	52                   	push   edx
c001df37:	53                   	push   ebx
c001df38:	e8 e5 a8 ff ff       	call   c0018822 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001df3d:	83 c4 20             	add    esp,0x20
c001df40:	09 f0                	or     eax,esi
c001df42:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001df46:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001df4b:	85 c0                	test   eax,eax
c001df4d:	75 11                	jne    c001df60 <findRSDT(unsigned char*)+0x128>
c001df4f:	c6 05 20 f6 03 c0 00 	mov    BYTE PTR ds:0xc003f620,0x0
c001df56:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001df5a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001df5e:	eb 24                	jmp    c001df84 <findRSDT(unsigned char*)+0x14c>
c001df60:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001df65:	83 f8 02             	cmp    eax,0x2
c001df68:	75 12                	jne    c001df7c <findRSDT(unsigned char*)+0x144>
c001df6a:	c6 05 20 f6 03 c0 01 	mov    BYTE PTR ds:0xc003f620,0x1
c001df71:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001df75:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001df79:	eb 09                	jmp    c001df84 <findRSDT(unsigned char*)+0x14c>
c001df7b:	90                   	nop
c001df7c:	b8 00 00 00 00       	mov    eax,0x0
c001df81:	eb 05                	jmp    c001df88 <findRSDT(unsigned char*)+0x150>
c001df83:	90                   	nop
c001df84:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001df88:	83 c4 50             	add    esp,0x50
c001df8b:	5b                   	pop    ebx
c001df8c:	5e                   	pop    esi
c001df8d:	5f                   	pop    edi
c001df8e:	c3                   	ret    
c001df8f:	90                   	nop

c001df90 <findDataTable(unsigned char*, char*)>:
c001df90:	83 ec 1c             	sub    esp,0x1c
c001df93:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001df98:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001df9e:	83 e0 04             	and    eax,0x4
c001dfa1:	0f b6 c0             	movzx  eax,al
c001dfa4:	85 c0                	test   eax,eax
c001dfa6:	75 08                	jne    c001dfb0 <findDataTable(unsigned char*, char*)+0x20>
c001dfa8:	b8 00 00 00 00       	mov    eax,0x0
c001dfad:	eb 5d                	jmp    c001e00c <findDataTable(unsigned char*, char*)+0x7c>
c001dfaf:	90                   	nop
c001dfb0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001dfb8:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dfbd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001dfc1:	7d 41                	jge    c001e004 <findDataTable(unsigned char*, char*)+0x74>
c001dfc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dfc7:	c1 e0 03             	shl    eax,0x3
c001dfca:	05 20 f4 03 c0       	add    eax,0xc003f420
c001dfcf:	83 ec 04             	sub    esp,0x4
c001dfd2:	6a 04                	push   0x4
c001dfd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dfd8:	50                   	push   eax
c001dfd9:	e8 a2 23 fe ff       	call   c0000380 <memcmp>
c001dfde:	83 c4 10             	add    esp,0x10
c001dfe1:	85 c0                	test   eax,eax
c001dfe3:	0f 94 c0             	sete   al
c001dfe6:	0f b6 c0             	movzx  eax,al
c001dfe9:	85 c0                	test   eax,eax
c001dfeb:	74 0f                	je     c001dffc <findDataTable(unsigned char*, char*)+0x6c>
c001dfed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dff1:	8b 04 c5 24 f4 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc0bdc]
c001dff8:	eb 12                	jmp    c001e00c <findDataTable(unsigned char*, char*)+0x7c>
c001dffa:	66 90                	xchg   ax,ax
c001dffc:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001e001:	eb b5                	jmp    c001dfb8 <findDataTable(unsigned char*, char*)+0x28>
c001e003:	90                   	nop
c001e004:	b8 00 00 00 00       	mov    eax,0x0
c001e009:	8d 76 00             	lea    esi,[esi+0x0]
c001e00c:	83 c4 1c             	add    esp,0x1c
c001e00f:	c3                   	ret    

c001e010 <scanMADT()>:
c001e010:	53                   	push   ebx
c001e011:	83 ec 38             	sub    esp,0x38
c001e014:	a1 d4 a9 03 c0       	mov    eax,ds:0xc003a9d4
c001e019:	25 00 04 00 00       	and    eax,0x400
c001e01e:	74 14                	je     c001e034 <scanMADT()+0x24>
c001e020:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e025:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e02b:	83 e2 fb             	and    edx,0xfffffffb
c001e02e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e034:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e039:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e03f:	83 e0 04             	and    eax,0x4
c001e042:	0f b6 c0             	movzx  eax,al
c001e045:	85 c0                	test   eax,eax
c001e047:	0f 84 6b 04 00 00    	je     c001e4b8 <scanMADT()+0x4a8>
c001e04d:	e8 e2 fa ff ff       	call   c001db34 <findRSDP()>
c001e052:	a3 2c f6 03 c0       	mov    ds:0xc003f62c,eax
c001e057:	a1 2c f6 03 c0       	mov    eax,ds:0xc003f62c
c001e05c:	85 c0                	test   eax,eax
c001e05e:	75 1c                	jne    c001e07c <scanMADT()+0x6c>
c001e060:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e065:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e06b:	83 e2 fb             	and    edx,0xfffffffb
c001e06e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e074:	e9 47 04 00 00       	jmp    c001e4c0 <scanMADT()+0x4b0>
c001e079:	8d 76 00             	lea    esi,[esi+0x0]
c001e07c:	a1 2c f6 03 c0       	mov    eax,ds:0xc003f62c
c001e081:	83 ec 0c             	sub    esp,0xc
c001e084:	50                   	push   eax
c001e085:	e8 ae fd ff ff       	call   c001de38 <findRSDT(unsigned char*)>
c001e08a:	83 c4 10             	add    esp,0x10
c001e08d:	a3 28 f6 03 c0       	mov    ds:0xc003f628,eax
c001e092:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e097:	85 c0                	test   eax,eax
c001e099:	75 19                	jne    c001e0b4 <scanMADT()+0xa4>
c001e09b:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e0a0:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e0a6:	83 e2 fb             	and    edx,0xfffffffb
c001e0a9:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e0af:	e9 0c 04 00 00       	jmp    c001e4c0 <scanMADT()+0x4b0>
c001e0b4:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e0b9:	83 ec 0c             	sub    esp,0xc
c001e0bc:	50                   	push   eax
c001e0bd:	e8 0a fb ff ff       	call   c001dbcc <loadACPITables(unsigned char*)>
c001e0c2:	83 c4 10             	add    esp,0x10
c001e0c5:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e0ca:	83 ec 08             	sub    esp,0x8
c001e0cd:	68 2e 24 03 c0       	push   0xc003242e
c001e0d2:	50                   	push   eax
c001e0d3:	e8 b8 fe ff ff       	call   c001df90 <findDataTable(unsigned char*, char*)>
c001e0d8:	83 c4 10             	add    esp,0x10
c001e0db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e0df:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001e0e4:	75 1a                	jne    c001e100 <scanMADT()+0xf0>
c001e0e6:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e0eb:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e0f1:	83 e2 fe             	and    edx,0xfffffffe
c001e0f4:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e0fa:	e9 c1 03 00 00       	jmp    c001e4c0 <scanMADT()+0x4b0>
c001e0ff:	90                   	nop
c001e100:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001e108:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e10c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e10f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001e113:	0f 87 a7 03 00 00    	ja     c001e4c0 <scanMADT()+0x4b0>
c001e119:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c001e121:	0f 87 99 03 00 00    	ja     c001e4c0 <scanMADT()+0x4b0>
c001e127:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e12b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e12f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e133:	8d 50 01             	lea    edx,[eax+0x1]
c001e136:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e13a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e13e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e142:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001e146:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e14a:	8d 50 01             	lea    edx,[eax+0x1]
c001e14d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e151:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e155:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e159:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001e15d:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c001e162:	83 f8 02             	cmp    eax,0x2
c001e165:	0f 86 51 03 00 00    	jbe    c001e4bc <scanMADT()+0x4ac>
c001e16b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e170:	85 c0                	test   eax,eax
c001e172:	75 58                	jne    c001e1cc <scanMADT()+0x1bc>
c001e174:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e178:	8d 50 01             	lea    edx,[eax+0x1]
c001e17b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e17f:	8a 15 20 f8 03 c0    	mov    dl,BYTE PTR ds:0xc003f820
c001e185:	0f b6 d2             	movzx  edx,dl
c001e188:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e18c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e190:	88 82 60 f8 03 c0    	mov    BYTE PTR [edx-0x3ffc07a0],al
c001e196:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e19a:	8d 50 01             	lea    edx,[eax+0x1]
c001e19d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e1a1:	8a 15 20 f8 03 c0    	mov    dl,BYTE PTR ds:0xc003f820
c001e1a7:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e1aa:	88 0d 20 f8 03 c0    	mov    BYTE PTR ds:0xc003f820,cl
c001e1b0:	0f b6 d2             	movzx  edx,dl
c001e1b3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e1b7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e1bb:	88 82 40 f8 03 c0    	mov    BYTE PTR [edx-0x3ffc07c0],al
c001e1c1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e1c6:	e9 d9 02 00 00       	jmp    c001e4a4 <scanMADT()+0x494>
c001e1cb:	90                   	nop
c001e1cc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e1d1:	83 f8 01             	cmp    eax,0x1
c001e1d4:	0f 85 1a 01 00 00    	jne    c001e2f4 <scanMADT()+0x2e4>
c001e1da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e1de:	8d 50 01             	lea    edx,[eax+0x1]
c001e1e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e1e5:	8a 15 e0 f6 03 c0    	mov    dl,BYTE PTR ds:0xc003f6e0
c001e1eb:	0f b6 d2             	movzx  edx,dl
c001e1ee:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e1f2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e1f6:	88 82 00 f7 03 c0    	mov    BYTE PTR [edx-0x3ffc0900],al
c001e1fc:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c001e201:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e205:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e209:	01 d0                	add    eax,edx
c001e20b:	83 c0 2c             	add    eax,0x2c
c001e20e:	8a 00                	mov    al,BYTE PTR [eax]
c001e210:	0f b6 d0             	movzx  edx,al
c001e213:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e217:	8d 48 01             	lea    ecx,[eax+0x1]
c001e21a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e21e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e222:	0f b6 c0             	movzx  eax,al
c001e225:	c1 e0 08             	shl    eax,0x8
c001e228:	89 d1                	mov    ecx,edx
c001e22a:	09 c1                	or     ecx,eax
c001e22c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e230:	8d 50 02             	lea    edx,[eax+0x2]
c001e233:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e237:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e23b:	0f b6 c0             	movzx  eax,al
c001e23e:	c1 e0 10             	shl    eax,0x10
c001e241:	09 c1                	or     ecx,eax
c001e243:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e247:	8d 50 03             	lea    edx,[eax+0x3]
c001e24a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e24e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e252:	0f b6 c0             	movzx  eax,al
c001e255:	c1 e0 18             	shl    eax,0x18
c001e258:	09 c1                	or     ecx,eax
c001e25a:	89 ca                	mov    edx,ecx
c001e25c:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e261:	0f b6 c0             	movzx  eax,al
c001e264:	89 14 85 20 f7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc08e0],edx
c001e26b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e270:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e274:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e278:	01 d0                	add    eax,edx
c001e27a:	83 c0 2c             	add    eax,0x2c
c001e27d:	8a 00                	mov    al,BYTE PTR [eax]
c001e27f:	0f b6 d0             	movzx  edx,al
c001e282:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e286:	8d 48 01             	lea    ecx,[eax+0x1]
c001e289:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e28d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e291:	0f b6 c0             	movzx  eax,al
c001e294:	c1 e0 08             	shl    eax,0x8
c001e297:	89 d1                	mov    ecx,edx
c001e299:	09 c1                	or     ecx,eax
c001e29b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e29f:	8d 50 02             	lea    edx,[eax+0x2]
c001e2a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e2a6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e2aa:	0f b6 c0             	movzx  eax,al
c001e2ad:	c1 e0 10             	shl    eax,0x10
c001e2b0:	09 c1                	or     ecx,eax
c001e2b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e2b6:	8d 50 03             	lea    edx,[eax+0x3]
c001e2b9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e2bd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e2c1:	0f b6 c0             	movzx  eax,al
c001e2c4:	c1 e0 18             	shl    eax,0x18
c001e2c7:	09 c1                	or     ecx,eax
c001e2c9:	89 ca                	mov    edx,ecx
c001e2cb:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e2d0:	0f b6 c0             	movzx  eax,al
c001e2d3:	89 14 85 a0 f7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc0860],edx
c001e2da:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e2df:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e2e4:	83 c0 01             	add    eax,0x1
c001e2e7:	a2 e0 f6 03 c0       	mov    ds:0xc003f6e0,al
c001e2ec:	e9 b3 01 00 00       	jmp    c001e4a4 <scanMADT()+0x494>
c001e2f1:	8d 76 00             	lea    esi,[esi+0x0]
c001e2f4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e2f9:	83 f8 02             	cmp    eax,0x2
c001e2fc:	0f 85 ea 00 00 00    	jne    c001e3ec <scanMADT()+0x3dc>
c001e302:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e306:	8d 50 01             	lea    edx,[eax+0x1]
c001e309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e30d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e311:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e315:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001e319:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e31d:	8d 50 01             	lea    edx,[eax+0x1]
c001e320:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e324:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e328:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e32c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001e330:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e334:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e338:	01 d0                	add    eax,edx
c001e33a:	83 c0 2c             	add    eax,0x2c
c001e33d:	8a 00                	mov    al,BYTE PTR [eax]
c001e33f:	0f b6 d0             	movzx  edx,al
c001e342:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e346:	8d 48 01             	lea    ecx,[eax+0x1]
c001e349:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e34d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e351:	0f b6 c0             	movzx  eax,al
c001e354:	c1 e0 08             	shl    eax,0x8
c001e357:	89 d1                	mov    ecx,edx
c001e359:	09 c1                	or     ecx,eax
c001e35b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e35f:	8d 50 02             	lea    edx,[eax+0x2]
c001e362:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e366:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e36a:	0f b6 c0             	movzx  eax,al
c001e36d:	c1 e0 10             	shl    eax,0x10
c001e370:	09 c1                	or     ecx,eax
c001e372:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e376:	8d 50 03             	lea    edx,[eax+0x3]
c001e379:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e37d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e381:	0f b6 c0             	movzx  eax,al
c001e384:	c1 e0 18             	shl    eax,0x18
c001e387:	09 c8                	or     eax,ecx
c001e389:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e38d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e392:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e396:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e39a:	01 d0                	add    eax,edx
c001e39c:	83 c0 2c             	add    eax,0x2c
c001e39f:	8a 00                	mov    al,BYTE PTR [eax]
c001e3a1:	0f b6 c0             	movzx  eax,al
c001e3a4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e3a8:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e3ab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e3af:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001e3b3:	0f b6 d2             	movzx  edx,dl
c001e3b6:	c1 e2 08             	shl    edx,0x8
c001e3b9:	09 d0                	or     eax,edx
c001e3bb:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001e3c0:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e3c5:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001e3ca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e3ce:	88 90 48 3c 03 c0    	mov    BYTE PTR [eax-0x3ffcc3b8],dl
c001e3d4:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001e3d9:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001e3de:	66 89 84 12 c0 f6 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffc0940],ax
c001e3e6:	e9 b9 00 00 00       	jmp    c001e4a4 <scanMADT()+0x494>
c001e3eb:	90                   	nop
c001e3ec:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e3f1:	83 f8 04             	cmp    eax,0x4
c001e3f4:	0f 85 9a 00 00 00    	jne    c001e494 <scanMADT()+0x484>
c001e3fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e3fe:	8d 50 01             	lea    edx,[eax+0x1]
c001e401:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e405:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e409:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e40d:	0f b6 c0             	movzx  eax,al
c001e410:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e414:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e418:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e41c:	01 d0                	add    eax,edx
c001e41e:	83 c0 2c             	add    eax,0x2c
c001e421:	8a 00                	mov    al,BYTE PTR [eax]
c001e423:	0f b6 d0             	movzx  edx,al
c001e426:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e42a:	8d 48 01             	lea    ecx,[eax+0x1]
c001e42d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e431:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e435:	0f b6 c0             	movzx  eax,al
c001e438:	c1 e0 08             	shl    eax,0x8
c001e43b:	09 d0                	or     eax,edx
c001e43d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e441:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e446:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e44a:	8d 50 01             	lea    edx,[eax+0x1]
c001e44d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e451:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e455:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e459:	0f b6 c0             	movzx  eax,al
c001e45c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e464:	c1 e0 08             	shl    eax,0x8
c001e467:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001e46b:	89 c1                	mov    ecx,eax
c001e46d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e471:	c1 e0 18             	shl    eax,0x18
c001e474:	89 c3                	mov    ebx,eax
c001e476:	a1 30 f6 03 c0       	mov    eax,ds:0xc003f630
c001e47b:	8d 50 01             	lea    edx,[eax+0x1]
c001e47e:	89 15 30 f6 03 c0    	mov    DWORD PTR ds:0xc003f630,edx
c001e484:	09 d9                	or     ecx,ebx
c001e486:	89 ca                	mov    edx,ecx
c001e488:	89 14 85 40 f6 03 c0 	mov    DWORD PTR [eax*4-0x3ffc09c0],edx
c001e48f:	eb 13                	jmp    c001e4a4 <scanMADT()+0x494>
c001e491:	8d 76 00             	lea    esi,[esi+0x0]
c001e494:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e499:	83 f8 05             	cmp    eax,0x5
c001e49c:	75 06                	jne    c001e4a4 <scanMADT()+0x494>
c001e49e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001e4a3:	90                   	nop
c001e4a4:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001e4a9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e4ad:	01 d0                	add    eax,edx
c001e4af:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e4b3:	e9 50 fc ff ff       	jmp    c001e108 <scanMADT()+0xf8>
c001e4b8:	90                   	nop
c001e4b9:	eb 05                	jmp    c001e4c0 <scanMADT()+0x4b0>
c001e4bb:	90                   	nop
c001e4bc:	90                   	nop
c001e4bd:	8d 76 00             	lea    esi,[esi+0x0]
c001e4c0:	83 c4 38             	add    esp,0x38
c001e4c3:	5b                   	pop    ebx
c001e4c4:	c3                   	ret    
c001e4c5:	90                   	nop
c001e4c6:	66 90                	xchg   ax,ax

c001e4c8 <ACPI::ACPI()>:
c001e4c8:	83 ec 0c             	sub    esp,0xc
c001e4cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4cf:	83 ec 08             	sub    esp,0x8
c001e4d2:	68 33 24 03 c0       	push   0xc0032433
c001e4d7:	50                   	push   eax
c001e4d8:	e8 53 cf ff ff       	call   c001b430 <Device::Device(char const*)>
c001e4dd:	83 c4 10             	add    esp,0x10
c001e4e0:	ba 40 26 03 c0       	mov    edx,0xc0032640
c001e4e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4e9:	89 10                	mov    DWORD PTR [eax],edx
c001e4eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4ef:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e4f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4fa:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001e504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e508:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001e512:	e8 f9 fa ff ff       	call   c001e010 <scanMADT()>
c001e517:	90                   	nop
c001e518:	83 c4 0c             	add    esp,0xc
c001e51b:	c3                   	ret    

c001e51c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001e51c:	83 ec 2c             	sub    esp,0x2c
c001e51f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001e523:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e527:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001e52b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001e52f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001e534:	88 d0                	mov    al,dl
c001e536:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e53a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e53f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001e547:	90                   	nop
c001e548:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e54c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e552:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001e556:	0f 8d b0 00 00 00    	jge    c001e60c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c001e55c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e560:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e564:	83 c2 2a             	add    edx,0x2a
c001e567:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001e56b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e570:	0f b7 c0             	movzx  eax,ax
c001e573:	39 c2                	cmp    edx,eax
c001e575:	0f 85 85 00 00 00    	jne    c001e600 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e57b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e57f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e583:	83 c2 2a             	add    edx,0x2a
c001e586:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001e58a:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001e58f:	0f b6 c0             	movzx  eax,al
c001e592:	39 c2                	cmp    edx,eax
c001e594:	75 6a                	jne    c001e600 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e596:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e59b:	85 c0                	test   eax,eax
c001e59d:	74 3d                	je     c001e5dc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c001e59f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e5a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e5a7:	83 c2 2a             	add    edx,0x2a
c001e5aa:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001e5ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e5b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e5b5:	39 c2                	cmp    edx,eax
c001e5b7:	74 13                	je     c001e5cc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c001e5b9:	83 ec 0c             	sub    esp,0xc
c001e5bc:	68 c0 25 03 c0       	push   0xc00325c0
c001e5c1:	e8 a0 1c 00 00       	call   c0020266 <KePanic(char const*)>
c001e5c6:	83 c4 10             	add    esp,0x10
c001e5c9:	8d 76 00             	lea    esi,[esi+0x0]
c001e5cc:	83 ec 0c             	sub    esp,0xc
c001e5cf:	68 38 24 03 c0       	push   0xc0032438
c001e5d4:	e8 8d 1c 00 00       	call   c0020266 <KePanic(char const*)>
c001e5d9:	83 c4 10             	add    esp,0x10
c001e5dc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e5e0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e5e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e5e8:	83 c2 2a             	add    edx,0x2a
c001e5eb:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001e5ef:	8b 02                	mov    eax,DWORD PTR [edx]
c001e5f1:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001e5f4:	89 01                	mov    DWORD PTR [ecx],eax
c001e5f6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e5f9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e5fe:	66 90                	xchg   ax,ax
c001e600:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001e605:	e9 3e ff ff ff       	jmp    c001e548 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c001e60a:	66 90                	xchg   ax,ax
c001e60c:	90                   	nop
c001e60d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e611:	83 c4 2c             	add    esp,0x2c
c001e614:	c2 04 00             	ret    0x4
c001e617:	90                   	nop

c001e618 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001e618:	83 ec 1c             	sub    esp,0x1c
c001e61b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e61f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001e623:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e627:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001e62c:	88 c8                	mov    al,cl
c001e62e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e632:	88 d0                	mov    al,dl
c001e634:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e638:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e63c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e642:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e646:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e649:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001e64d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001e651:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e655:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e65b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e65f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001e662:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e666:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001e66b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e66f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e675:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e679:	83 c0 01             	add    eax,0x1
c001e67c:	88 c1                	mov    cl,al
c001e67e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e682:	83 c2 2a             	add    edx,0x2a
c001e685:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001e689:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e68d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e697:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e69a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e69e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001e6a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6a6:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e6ac:	8d 50 01             	lea    edx,[eax+0x1]
c001e6af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6b3:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001e6b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6bd:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e6c3:	3d 00 02 00 00       	cmp    eax,0x200
c001e6c8:	75 12                	jne    c001e6dc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c001e6ca:	83 ec 0c             	sub    esp,0xc
c001e6cd:	68 47 24 03 c0       	push   0xc0032447
c001e6d2:	e8 8f 1b 00 00       	call   c0020266 <KePanic(char const*)>
c001e6d7:	83 c4 10             	add    esp,0x10
c001e6da:	66 90                	xchg   ax,ax
c001e6dc:	90                   	nop
c001e6dd:	83 c4 1c             	add    esp,0x1c
c001e6e0:	c3                   	ret    
c001e6e1:	90                   	nop
c001e6e2:	66 90                	xchg   ax,ax

c001e6e4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c001e6e4:	b8 00 00 00 00       	mov    eax,0x0
c001e6e9:	c3                   	ret    
c001e6ea:	66 90                	xchg   ax,ax

c001e6ec <ACPI::detectPCI()>:
c001e6ec:	53                   	push   ebx
c001e6ed:	83 ec 28             	sub    esp,0x28
c001e6f0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e6f5:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c001e6fa:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e6ff:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e705:	83 e0 04             	and    eax,0x4
c001e708:	0f b6 c0             	movzx  eax,al
c001e70b:	85 c0                	test   eax,eax
c001e70d:	74 2d                	je     c001e73c <ACPI::detectPCI()+0x50>
c001e70f:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e714:	83 ec 08             	sub    esp,0x8
c001e717:	68 64 24 03 c0       	push   0xc0032464
c001e71c:	50                   	push   eax
c001e71d:	e8 6e f8 ff ff       	call   c001df90 <findDataTable(unsigned char*, char*)>
c001e722:	83 c4 10             	add    esp,0x10
c001e725:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e729:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001e72e:	74 0c                	je     c001e73c <ACPI::detectPCI()+0x50>
c001e730:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e735:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e73a:	66 90                	xchg   ax,ax
c001e73c:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c001e744:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e748:	8a 00                	mov    al,BYTE PTR [eax]
c001e74a:	0f b6 c0             	movzx  eax,al
c001e74d:	83 f8 01             	cmp    eax,0x1
c001e750:	75 0e                	jne    c001e760 <ACPI::detectPCI()+0x74>
c001e752:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e757:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e75c:	eb 2e                	jmp    c001e78c <ACPI::detectPCI()+0xa0>
c001e75e:	66 90                	xchg   ax,ax
c001e760:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e764:	8a 00                	mov    al,BYTE PTR [eax]
c001e766:	0f b6 c0             	movzx  eax,al
c001e769:	83 f8 02             	cmp    eax,0x2
c001e76c:	75 1e                	jne    c001e78c <ACPI::detectPCI()+0xa0>
c001e76e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e773:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e778:	85 c0                	test   eax,eax
c001e77a:	74 10                	je     c001e78c <ACPI::detectPCI()+0xa0>
c001e77c:	83 ec 0c             	sub    esp,0xc
c001e77f:	68 f0 25 03 c0       	push   0xc00325f0
c001e784:	e8 dd 1a 00 00       	call   c0020266 <KePanic(char const*)>
c001e789:	83 c4 10             	add    esp,0x10
c001e78c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001e790:	83 f0 01             	xor    eax,0x1
c001e793:	0f b6 c0             	movzx  eax,al
c001e796:	85 c0                	test   eax,eax
c001e798:	74 46                	je     c001e7e0 <ACPI::detectPCI()+0xf4>
c001e79a:	e8 91 19 fe ff       	call   c0000130 <manualPCIProbe>
c001e79f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e7a3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e7a8:	75 0e                	jne    c001e7b8 <ACPI::detectPCI()+0xcc>
c001e7aa:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e7af:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e7b4:	eb 2a                	jmp    c001e7e0 <ACPI::detectPCI()+0xf4>
c001e7b6:	66 90                	xchg   ax,ax
c001e7b8:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c001e7bd:	75 21                	jne    c001e7e0 <ACPI::detectPCI()+0xf4>
c001e7bf:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e7c4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e7c9:	85 c0                	test   eax,eax
c001e7cb:	74 13                	je     c001e7e0 <ACPI::detectPCI()+0xf4>
c001e7cd:	83 ec 0c             	sub    esp,0xc
c001e7d0:	68 f0 25 03 c0       	push   0xc00325f0
c001e7d5:	e8 8c 1a 00 00       	call   c0020266 <KePanic(char const*)>
c001e7da:	83 c4 10             	add    esp,0x10
c001e7dd:	8d 76 00             	lea    esi,[esi+0x0]
c001e7e0:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e7e5:	85 c0                	test   eax,eax
c001e7e7:	0f 84 87 00 00 00    	je     c001e874 <ACPI::detectPCI()+0x188>
c001e7ed:	83 ec 0c             	sub    esp,0xc
c001e7f0:	68 69 24 03 c0       	push   0xc0032469
c001e7f5:	e8 09 13 00 00       	call   c001fb03 <KeSetBootMessage(char const*)>
c001e7fa:	83 c4 10             	add    esp,0x10
c001e7fd:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001e805:	83 ec 0c             	sub    esp,0xc
c001e808:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e80c:	e8 ad 7b ff ff       	call   c00163be <malloc>
c001e811:	83 c4 10             	add    esp,0x10
c001e814:	89 c3                	mov    ebx,eax
c001e816:	83 ec 0c             	sub    esp,0xc
c001e819:	53                   	push   ebx
c001e81a:	e8 69 b8 00 00       	call   c002a088 <PCI::PCI()>
c001e81f:	83 c4 10             	add    esp,0x10
c001e822:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001e826:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e82a:	83 ec 08             	sub    esp,0x8
c001e82d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e831:	50                   	push   eax
c001e832:	e8 97 ca ff ff       	call   c001b2ce <Device::addChild(Device*)>
c001e837:	83 c4 10             	add    esp,0x10
c001e83a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e83e:	8b 00                	mov    eax,DWORD PTR [eax]
c001e840:	83 c0 08             	add    eax,0x8
c001e843:	8b 00                	mov    eax,DWORD PTR [eax]
c001e845:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c001e84a:	85 d2                	test   edx,edx
c001e84c:	74 0a                	je     c001e858 <ACPI::detectPCI()+0x16c>
c001e84e:	ba 01 00 00 00       	mov    edx,0x1
c001e853:	eb 0b                	jmp    c001e860 <ACPI::detectPCI()+0x174>
c001e855:	8d 76 00             	lea    esi,[esi+0x0]
c001e858:	ba 02 00 00 00       	mov    edx,0x2
c001e85d:	8d 76 00             	lea    esi,[esi+0x0]
c001e860:	6a 00                	push   0x0
c001e862:	6a 00                	push   0x0
c001e864:	52                   	push   edx
c001e865:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e869:	ff d0                	call   eax
c001e86b:	83 c4 10             	add    esp,0x10
c001e86e:	e9 91 00 00 00       	jmp    c001e904 <ACPI::detectPCI()+0x218>
c001e873:	90                   	nop
c001e874:	83 ec 0c             	sub    esp,0xc
c001e877:	68 81 24 03 c0       	push   0xc0032481
c001e87c:	e8 82 12 00 00       	call   c001fb03 <KeSetBootMessage(char const*)>
c001e881:	83 c4 10             	add    esp,0x10
c001e884:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c001e88b:	83 ec 0c             	sub    esp,0xc
c001e88e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e892:	e8 27 7b ff ff       	call   c00163be <malloc>
c001e897:	83 c4 10             	add    esp,0x10
c001e89a:	89 c3                	mov    ebx,eax
c001e89c:	83 ec 0c             	sub    esp,0xc
c001e89f:	53                   	push   ebx
c001e8a0:	e8 7d c3 00 00       	call   c002ac22 <IDE::IDE()>
c001e8a5:	83 c4 10             	add    esp,0x10
c001e8a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001e8ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e8b0:	83 ec 08             	sub    esp,0x8
c001e8b3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e8b7:	50                   	push   eax
c001e8b8:	e8 11 ca ff ff       	call   c001b2ce <Device::addChild(Device*)>
c001e8bd:	83 c4 10             	add    esp,0x10
c001e8c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8c4:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c001e8ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8d2:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c001e8db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8df:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c001e8e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8ec:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8ee:	83 c0 08             	add    eax,0x8
c001e8f1:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8f3:	6a 00                	push   0x0
c001e8f5:	6a 00                	push   0x0
c001e8f7:	6a 00                	push   0x0
c001e8f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e8fd:	ff d0                	call   eax
c001e8ff:	83 c4 10             	add    esp,0x10
c001e902:	66 90                	xchg   ax,ax
c001e904:	90                   	nop
c001e905:	83 c4 28             	add    esp,0x28
c001e908:	5b                   	pop    ebx
c001e909:	c3                   	ret    
c001e90a:	66 90                	xchg   ax,ax

c001e90c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001e90c:	83 ec 1c             	sub    esp,0x1c
c001e90f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e913:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001e916:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e91a:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e91f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001e924:	83 ec 08             	sub    esp,0x8
c001e927:	52                   	push   edx
c001e928:	50                   	push   eax
c001e929:	e8 52 71 ff ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c001e92e:	83 c4 10             	add    esp,0x10
c001e931:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001e935:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e93a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001e93f:	83 ec 04             	sub    esp,0x4
c001e942:	6a 01                	push   0x1
c001e944:	52                   	push   edx
c001e945:	50                   	push   eax
c001e946:	e8 4f 72 ff ff       	call   c0015b9a <Computer::writeCMOS(unsigned char, unsigned char)>
c001e94b:	83 c4 10             	add    esp,0x10
c001e94e:	90                   	nop
c001e94f:	83 c4 1c             	add    esp,0x1c
c001e952:	c3                   	ret    
c001e953:	90                   	nop

c001e954 <ACPI::sleep()>:
c001e954:	83 ec 0c             	sub    esp,0xc
c001e957:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c001e95c:	85 c0                	test   eax,eax
c001e95e:	74 08                	je     c001e968 <ACPI::sleep()+0x14>
c001e960:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c001e965:	ff d0                	call   eax
c001e967:	90                   	nop
c001e968:	90                   	nop
c001e969:	83 c4 0c             	add    esp,0xc
c001e96c:	c3                   	ret    
c001e96d:	90                   	nop
c001e96e:	66 90                	xchg   ax,ax

c001e970 <ACPI::open(int, int, void*)>:
c001e970:	57                   	push   edi
c001e971:	56                   	push   esi
c001e972:	53                   	push   ebx
c001e973:	81 ec 70 01 00 00    	sub    esp,0x170
c001e979:	83 ec 0c             	sub    esp,0xc
c001e97c:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001e983:	e8 64 fd ff ff       	call   c001e6ec <ACPI::detectPCI()>
c001e988:	83 c4 10             	add    esp,0x10
c001e98b:	83 ec 0c             	sub    esp,0xc
c001e98e:	68 18 26 03 c0       	push   0xc0032618
c001e993:	e8 6b 11 00 00       	call   c001fb03 <KeSetBootMessage(char const*)>
c001e998:	83 c4 10             	add    esp,0x10
c001e99b:	b8 4c 05 00 00       	mov    eax,0x54c
c001e9a0:	8a 00                	mov    al,BYTE PTR [eax]
c001e9a2:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c001e9a9:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c001e9b1:	83 f8 01             	cmp    eax,0x1
c001e9b4:	75 12                	jne    c001e9c8 <ACPI::open(int, int, void*)+0x58>
c001e9b6:	83 ec 0c             	sub    esp,0xc
c001e9b9:	68 96 24 03 c0       	push   0xc0032496
c001e9be:	e8 9c 53 00 00       	call   c0023d5f <Thr::loadKernelSymbolTable(char const*)>
c001e9c3:	83 c4 10             	add    esp,0x10
c001e9c6:	eb 34                	jmp    c001e9fc <ACPI::open(int, int, void*)+0x8c>
c001e9c8:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c001e9d0:	3d bb 00 00 00       	cmp    eax,0xbb
c001e9d5:	75 15                	jne    c001e9ec <ACPI::open(int, int, void*)+0x7c>
c001e9d7:	83 ec 0c             	sub    esp,0xc
c001e9da:	68 b4 24 03 c0       	push   0xc00324b4
c001e9df:	e8 7b 53 00 00       	call   c0023d5f <Thr::loadKernelSymbolTable(char const*)>
c001e9e4:	83 c4 10             	add    esp,0x10
c001e9e7:	eb 13                	jmp    c001e9fc <ACPI::open(int, int, void*)+0x8c>
c001e9e9:	8d 76 00             	lea    esi,[esi+0x0]
c001e9ec:	83 ec 0c             	sub    esp,0xc
c001e9ef:	68 d2 24 03 c0       	push   0xc00324d2
c001e9f4:	e8 6d 18 00 00       	call   c0020266 <KePanic(char const*)>
c001e9f9:	83 c4 10             	add    esp,0x10
c001e9fc:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c001ea04:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c001ea0f:	83 ec 0c             	sub    esp,0xc
c001ea12:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001ea19:	e8 a0 79 ff ff       	call   c00163be <malloc>
c001ea1e:	83 c4 10             	add    esp,0x10
c001ea21:	89 c3                	mov    ebx,eax
c001ea23:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ea28:	83 ec 04             	sub    esp,0x4
c001ea2b:	50                   	push   eax
c001ea2c:	68 ec 24 03 c0       	push   0xc00324ec
c001ea31:	53                   	push   ebx
c001ea32:	e8 1d ba ff ff       	call   c001a454 <File::File(char const*, Process*)>
c001ea37:	83 c4 10             	add    esp,0x10
c001ea3a:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c001ea41:	83 ec 08             	sub    esp,0x8
c001ea44:	6a 01                	push   0x1
c001ea46:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001ea4d:	e8 20 ba ff ff       	call   c001a472 <File::open(FileOpenMode)>
c001ea52:	83 c4 10             	add    esp,0x10
c001ea55:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c001ea5c:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c001ea64:	75 16                	jne    c001ea7c <ACPI::open(int, int, void*)+0x10c>
c001ea66:	83 ec 0c             	sub    esp,0xc
c001ea69:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001ea70:	e8 5b ba ff ff       	call   c001a4d0 <File::close()>
c001ea75:	83 c4 10             	add    esp,0x10
c001ea78:	eb 0a                	jmp    c001ea84 <ACPI::open(int, int, void*)+0x114>
c001ea7a:	66 90                	xchg   ax,ax
c001ea7c:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c001ea84:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c001ea8c:	74 1e                	je     c001eaac <ACPI::open(int, int, void*)+0x13c>
c001ea8e:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c001ea95:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea97:	83 c0 08             	add    eax,0x8
c001ea9a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea9c:	83 ec 0c             	sub    esp,0xc
c001ea9f:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001eaa6:	ff d0                	call   eax
c001eaa8:	83 c4 10             	add    esp,0x10
c001eaab:	90                   	nop
c001eaac:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c001eab3:	83 f0 01             	xor    eax,0x1
c001eab6:	0f b6 c0             	movzx  eax,al
c001eab9:	85 c0                	test   eax,eax
c001eabb:	74 43                	je     c001eb00 <ACPI::open(int, int, void*)+0x190>
c001eabd:	83 ec 0c             	sub    esp,0xc
c001eac0:	68 0a 25 03 c0       	push   0xc003250a
c001eac5:	e8 39 10 00 00       	call   c001fb03 <KeSetBootMessage(char const*)>
c001eaca:	83 c4 10             	add    esp,0x10
c001eacd:	83 ec 04             	sub    esp,0x4
c001ead0:	6a 0c                	push   0xc
c001ead2:	68 25 25 03 c0       	push   0xc0032525
c001ead7:	68 36 25 03 c0       	push   0xc0032536
c001eadc:	e8 bd 44 00 00       	call   c0022f9e <Reg::readIntWithDefault(char*, char*, int)>
c001eae1:	83 c4 10             	add    esp,0x10
c001eae4:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c001eaeb:	83 ec 0c             	sub    esp,0xc
c001eaee:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c001eaf5:	e8 4a 96 ff ff       	call   c0018144 <Virt::setupPageSwapping(int)>
c001eafa:	83 c4 10             	add    esp,0x10
c001eafd:	8d 76 00             	lea    esi,[esi+0x0]
c001eb00:	83 ec 0c             	sub    esp,0xc
c001eb03:	68 64 0f 03 c0       	push   0xc0030f64
c001eb08:	e8 f6 0f 00 00       	call   c001fb03 <KeSetBootMessage(char const*)>
c001eb0d:	83 c4 10             	add    esp,0x10
c001eb10:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c001eb17:	83 ec 08             	sub    esp,0x8
c001eb1a:	6a 13                	push   0x13
c001eb1c:	50                   	push   eax
c001eb1d:	e8 da ca ff ff       	call   c001b5fc <getDevicesOfType(DeviceType)>
c001eb22:	83 c4 0c             	add    esp,0xc
c001eb25:	8d 76 00             	lea    esi,[esi+0x0]
c001eb28:	83 ec 0c             	sub    esp,0xc
c001eb2b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001eb32:	50                   	push   eax
c001eb33:	e8 08 03 01 00       	call   c002ee40 <LinkedList<Device>::isEmpty()>
c001eb38:	83 c4 10             	add    esp,0x10
c001eb3b:	83 f0 01             	xor    eax,0x1
c001eb3e:	0f b6 c0             	movzx  eax,al
c001eb41:	85 c0                	test   eax,eax
c001eb43:	0f 84 47 01 00 00    	je     c001ec90 <ACPI::open(int, int, void*)+0x320>
c001eb49:	83 ec 0c             	sub    esp,0xc
c001eb4c:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001eb53:	50                   	push   eax
c001eb54:	e8 03 03 01 00       	call   c002ee5c <LinkedList<Device>::getFirstElement()>
c001eb59:	83 c4 10             	add    esp,0x10
c001eb5c:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c001eb63:	83 ec 0c             	sub    esp,0xc
c001eb66:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001eb6d:	50                   	push   eax
c001eb6e:	e8 f1 02 01 00       	call   c002ee64 <LinkedList<Device>::removeFirst()>
c001eb73:	83 c4 10             	add    esp,0x10
c001eb76:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c001eb7d:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c001eb84:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c001eb8b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eb8f:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c001eb95:	ba 09 00 00 00       	mov    edx,0x9
c001eb9a:	fc                   	cld    
c001eb9b:	89 c7                	mov    edi,eax
c001eb9d:	89 de                	mov    esi,ebx
c001eb9f:	89 d1                	mov    ecx,edx
c001eba1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001eba3:	83 ec 08             	sub    esp,0x8
c001eba6:	8d 44 24 38          	lea    eax,[esp+0x38]
c001ebaa:	50                   	push   eax
c001ebab:	83 ec 24             	sub    esp,0x24
c001ebae:	89 e0                	mov    eax,esp
c001ebb0:	89 c3                	mov    ebx,eax
c001ebb2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ebb6:	ba 09 00 00 00       	mov    edx,0x9
c001ebbb:	89 df                	mov    edi,ebx
c001ebbd:	89 c6                	mov    esi,eax
c001ebbf:	89 d1                	mov    ecx,edx
c001ebc1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ebc3:	e8 aa b9 00 00       	call   c002a572 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001ebc8:	83 c4 30             	add    esp,0x30
c001ebcb:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c001ebd2:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c001ebda:	0f 84 48 ff ff ff    	je     c001eb28 <ACPI::open(int, int, void*)+0x1b8>
c001ebe0:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c001ebeb:	83 ec 0c             	sub    esp,0xc
c001ebee:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ebf5:	e8 c4 77 ff ff       	call   c00163be <malloc>
c001ebfa:	83 c4 10             	add    esp,0x10
c001ebfd:	89 c3                	mov    ebx,eax
c001ebff:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ec04:	83 ec 04             	sub    esp,0x4
c001ec07:	50                   	push   eax
c001ec08:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001ec0f:	53                   	push   ebx
c001ec10:	e8 3f b8 ff ff       	call   c001a454 <File::File(char const*, Process*)>
c001ec15:	83 c4 10             	add    esp,0x10
c001ec18:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c001ec1f:	83 ec 0c             	sub    esp,0xc
c001ec22:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001ec29:	e8 08 bb ff ff       	call   c001a736 <File::exists()>
c001ec2e:	83 c4 10             	add    esp,0x10
c001ec31:	0f b6 c0             	movzx  eax,al
c001ec34:	85 c0                	test   eax,eax
c001ec36:	74 28                	je     c001ec60 <ACPI::open(int, int, void*)+0x2f0>
c001ec38:	83 ec 08             	sub    esp,0x8
c001ec3b:	6a 01                	push   0x1
c001ec3d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001ec44:	e8 90 5b 00 00       	call   c00247d9 <Thr::loadDLL(char const*, bool)>
c001ec49:	83 c4 10             	add    esp,0x10
c001ec4c:	83 ec 08             	sub    esp,0x8
c001ec4f:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001ec56:	50                   	push   eax
c001ec57:	e8 cf 5d 00 00       	call   c0024a2b <Thr::executeDLL(unsigned long, void*)>
c001ec5c:	83 c4 10             	add    esp,0x10
c001ec5f:	90                   	nop
c001ec60:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c001ec68:	0f 84 ba fe ff ff    	je     c001eb28 <ACPI::open(int, int, void*)+0x1b8>
c001ec6e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c001ec75:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec77:	83 c0 08             	add    eax,0x8
c001ec7a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec7c:	83 ec 0c             	sub    esp,0xc
c001ec7f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001ec86:	ff d0                	call   eax
c001ec88:	83 c4 10             	add    esp,0x10
c001ec8b:	e9 98 fe ff ff       	jmp    c001eb28 <ACPI::open(int, int, void*)+0x1b8>
c001ec90:	83 ec 0c             	sub    esp,0xc
c001ec93:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001ec9a:	50                   	push   eax
c001ec9b:	e8 9c 01 01 00       	call   c002ee3c <LinkedList<Device>::~LinkedList()>
c001eca0:	83 c4 10             	add    esp,0x10
c001eca3:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001eca9:	83 ec 08             	sub    esp,0x8
c001ecac:	6a 01                	push   0x1
c001ecae:	68 3d 25 03 c0       	push   0xc003253d
c001ecb3:	e8 21 5b 00 00       	call   c00247d9 <Thr::loadDLL(char const*, bool)>
c001ecb8:	83 c4 10             	add    esp,0x10
c001ecbb:	83 ec 08             	sub    esp,0x8
c001ecbe:	53                   	push   ebx
c001ecbf:	50                   	push   eax
c001ecc0:	e8 66 5d 00 00       	call   c0024a2b <Thr::executeDLL(unsigned long, void*)>
c001ecc5:	83 c4 10             	add    esp,0x10
c001ecc8:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001eccd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001ecd3:	83 e0 04             	and    eax,0x4
c001ecd6:	0f b6 c0             	movzx  eax,al
c001ecd9:	85 c0                	test   eax,eax
c001ecdb:	0f 84 1b 01 00 00    	je     c001edfc <ACPI::open(int, int, void*)+0x48c>
c001ece1:	83 ec 0c             	sub    esp,0xc
c001ece4:	68 5a 25 03 c0       	push   0xc003255a
c001ece9:	e8 15 0e 00 00       	call   c001fb03 <KeSetBootMessage(char const*)>
c001ecee:	83 c4 10             	add    esp,0x10
c001ecf1:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001ecfc:	83 ec 0c             	sub    esp,0xc
c001ecff:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c001ed06:	e8 b3 76 ff ff       	call   c00163be <malloc>
c001ed0b:	83 c4 10             	add    esp,0x10
c001ed0e:	89 c3                	mov    ebx,eax
c001ed10:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ed15:	83 ec 04             	sub    esp,0x4
c001ed18:	50                   	push   eax
c001ed19:	68 77 25 03 c0       	push   0xc0032577
c001ed1e:	53                   	push   ebx
c001ed1f:	e8 30 b7 ff ff       	call   c001a454 <File::File(char const*, Process*)>
c001ed24:	83 c4 10             	add    esp,0x10
c001ed27:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c001ed2e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001ed36:	74 20                	je     c001ed58 <ACPI::open(int, int, void*)+0x3e8>
c001ed38:	83 ec 0c             	sub    esp,0xc
c001ed3b:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001ed42:	e8 ef b9 ff ff       	call   c001a736 <File::exists()>
c001ed47:	83 c4 10             	add    esp,0x10
c001ed4a:	0f b6 c0             	movzx  eax,al
c001ed4d:	85 c0                	test   eax,eax
c001ed4f:	74 07                	je     c001ed58 <ACPI::open(int, int, void*)+0x3e8>
c001ed51:	b0 01                	mov    al,0x1
c001ed53:	eb 07                	jmp    c001ed5c <ACPI::open(int, int, void*)+0x3ec>
c001ed55:	8d 76 00             	lea    esi,[esi+0x0]
c001ed58:	b0 00                	mov    al,0x0
c001ed5a:	66 90                	xchg   ax,ax
c001ed5c:	0f b6 c0             	movzx  eax,al
c001ed5f:	85 c0                	test   eax,eax
c001ed61:	74 25                	je     c001ed88 <ACPI::open(int, int, void*)+0x418>
c001ed63:	83 ec 08             	sub    esp,0x8
c001ed66:	6a 01                	push   0x1
c001ed68:	68 77 25 03 c0       	push   0xc0032577
c001ed6d:	e8 67 5a 00 00       	call   c00247d9 <Thr::loadDLL(char const*, bool)>
c001ed72:	83 c4 10             	add    esp,0x10
c001ed75:	83 ec 08             	sub    esp,0x8
c001ed78:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c001ed7f:	50                   	push   eax
c001ed80:	e8 a6 5c 00 00       	call   c0024a2b <Thr::executeDLL(unsigned long, void*)>
c001ed85:	83 c4 10             	add    esp,0x10
c001ed88:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001ed90:	74 2a                	je     c001edbc <ACPI::open(int, int, void*)+0x44c>
c001ed92:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001ed9a:	74 20                	je     c001edbc <ACPI::open(int, int, void*)+0x44c>
c001ed9c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001eda3:	8b 00                	mov    eax,DWORD PTR [eax]
c001eda5:	83 c0 08             	add    eax,0x8
c001eda8:	8b 00                	mov    eax,DWORD PTR [eax]
c001edaa:	83 ec 0c             	sub    esp,0xc
c001edad:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001edb4:	ff d0                	call   eax
c001edb6:	83 c4 10             	add    esp,0x10
c001edb9:	8d 76 00             	lea    esi,[esi+0x0]
c001edbc:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001edc1:	83 ec 08             	sub    esp,0x8
c001edc4:	68 94 25 03 c0       	push   0xc0032594
c001edc9:	50                   	push   eax
c001edca:	e8 c1 f1 ff ff       	call   c001df90 <findDataTable(unsigned char*, char*)>
c001edcf:	83 c4 10             	add    esp,0x10
c001edd2:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c001edd9:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001ede1:	74 19                	je     c001edfc <ACPI::open(int, int, void*)+0x48c>
c001ede3:	83 ec 08             	sub    esp,0x8
c001ede6:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001eded:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001edf4:	e8 13 fb ff ff       	call   c001e90c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001edf9:	83 c4 10             	add    esp,0x10
c001edfc:	b8 00 00 00 00       	mov    eax,0x0
c001ee01:	81 c4 70 01 00 00    	add    esp,0x170
c001ee07:	5b                   	pop    ebx
c001ee08:	5e                   	pop    esi
c001ee09:	5f                   	pop    edi
c001ee0a:	c3                   	ret    
c001ee0b:	90                   	nop

c001ee0c <CPU::close(int, int, void*)>:
c001ee0c:	31 c0                	xor    eax,eax
c001ee0e:	c3                   	ret    
c001ee0f:	90                   	nop

c001ee10 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001ee10:	60                   	pusha  
c001ee11:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ee15:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ee19:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ee1d:	9c                   	pushf  
c001ee1e:	fa                   	cli    
c001ee1f:	0f 09                	wbinvd 
c001ee21:	0f 30                	wrmsr  
c001ee23:	9d                   	popf   
c001ee24:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ee28:	89 02                	mov    DWORD PTR [edx],eax
c001ee2a:	61                   	popa   
c001ee2b:	c3                   	ret    

c001ee2c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001ee2c:	60                   	pusha  
c001ee2d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ee31:	9c                   	pushf  
c001ee32:	fa                   	cli    
c001ee33:	0f 09                	wbinvd 
c001ee35:	31 c0                	xor    eax,eax
c001ee37:	31 d2                	xor    edx,edx
c001ee39:	0f 32                	rdmsr  
c001ee3b:	9d                   	popf   
c001ee3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ee40:	89 02                	mov    DWORD PTR [edx],eax
c001ee42:	61                   	popa   
c001ee43:	c3                   	ret    

c001ee44 <CPU::AMD_K6_writeback(int, int, int)>:
c001ee44:	56                   	push   esi
c001ee45:	53                   	push   ebx
c001ee46:	83 ec 10             	sub    esp,0x10
c001ee49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee4d:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001ee52:	75 5d                	jne    c001eeb1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001ee54:	83 f8 08             	cmp    eax,0x8
c001ee57:	75 09                	jne    c001ee62 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001ee59:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001ee5e:	7e 13                	jle    c001ee73 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001ee60:	eb 30                	jmp    c001ee92 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001ee62:	83 f8 06             	cmp    eax,0x6
c001ee65:	7c 4a                	jl     c001eeb1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001ee67:	83 f8 07             	cmp    eax,0x7
c001ee6a:	7e 07                	jle    c001ee73 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001ee6c:	83 f8 09             	cmp    eax,0x9
c001ee6f:	74 21                	je     c001ee92 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001ee71:	eb 3e                	jmp    c001eeb1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001ee73:	89 e6                	mov    esi,esp
c001ee75:	8b 1d e0 a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9e0
c001ee7b:	56                   	push   esi
c001ee7c:	c1 eb 15             	shr    ebx,0x15
c001ee7f:	68 82 00 00 c0       	push   0xc0000082
c001ee84:	83 e3 7e             	and    ebx,0x7e
c001ee87:	e8 a0 ff ff ff       	call   c001ee2c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001ee8c:	56                   	push   esi
c001ee8d:	6a 00                	push   0x0
c001ee8f:	53                   	push   ebx
c001ee90:	eb 12                	jmp    c001eea4 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001ee92:	89 e3                	mov    ebx,esp
c001ee94:	53                   	push   ebx
c001ee95:	68 82 00 00 c0       	push   0xc0000082
c001ee9a:	e8 8d ff ff ff       	call   c001ee2c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001ee9f:	53                   	push   ebx
c001eea0:	6a 00                	push   0x0
c001eea2:	6a 00                	push   0x0
c001eea4:	68 82 00 00 c0       	push   0xc0000082
c001eea9:	e8 62 ff ff ff       	call   c001ee10 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001eeae:	83 c4 18             	add    esp,0x18
c001eeb1:	83 c4 10             	add    esp,0x10
c001eeb4:	5b                   	pop    ebx
c001eeb5:	5e                   	pop    esi
c001eeb6:	c3                   	ret    
c001eeb7:	90                   	nop

c001eeb8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001eeb8:	55                   	push   ebp
c001eeb9:	57                   	push   edi
c001eeba:	56                   	push   esi
c001eebb:	53                   	push   ebx
c001eebc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eec0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001eec4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001eec8:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001eecc:	39 05 58 3c 03 c0    	cmp    DWORD PTR ds:0xc0033c58,eax
c001eed2:	75 23                	jne    c001eef7 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001eed4:	a1 8c f8 03 c0       	mov    eax,ds:0xc003f88c
c001eed9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001eedd:	89 06                	mov    DWORD PTR [esi],eax
c001eedf:	a1 88 f8 03 c0       	mov    eax,ds:0xc003f888
c001eee4:	89 07                	mov    DWORD PTR [edi],eax
c001eee6:	a1 84 f8 03 c0       	mov    eax,ds:0xc003f884
c001eeeb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001eeee:	a1 80 f8 03 c0       	mov    eax,ds:0xc003f880
c001eef3:	89 02                	mov    DWORD PTR [edx],eax
c001eef5:	eb 3f                	jmp    c001ef36 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001eef7:	31 c9                	xor    ecx,ecx
c001eef9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eefd:	0f a2                	cpuid  
c001eeff:	89 06                	mov    DWORD PTR [esi],eax
c001ef01:	89 1f                	mov    DWORD PTR [edi],ebx
c001ef03:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ef07:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001ef0a:	89 10                	mov    DWORD PTR [eax],edx
c001ef0c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ef10:	a3 58 3c 03 c0       	mov    ds:0xc0033c58,eax
c001ef15:	8b 06                	mov    eax,DWORD PTR [esi]
c001ef17:	a3 8c f8 03 c0       	mov    ds:0xc003f88c,eax
c001ef1c:	8b 07                	mov    eax,DWORD PTR [edi]
c001ef1e:	a3 88 f8 03 c0       	mov    ds:0xc003f888,eax
c001ef23:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ef26:	a3 84 f8 03 c0       	mov    ds:0xc003f884,eax
c001ef2b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ef2f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef31:	a3 80 f8 03 c0       	mov    ds:0xc003f880,eax
c001ef36:	5b                   	pop    ebx
c001ef37:	5e                   	pop    esi
c001ef38:	5f                   	pop    edi
c001ef39:	5d                   	pop    ebp
c001ef3a:	c3                   	ret    
c001ef3b:	90                   	nop

c001ef3c <CPU::cpuidCheckEDX(unsigned int)>:
c001ef3c:	83 ec 10             	sub    esp,0x10
c001ef3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef43:	50                   	push   eax
c001ef44:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef48:	50                   	push   eax
c001ef49:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef4d:	50                   	push   eax
c001ef4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef52:	50                   	push   eax
c001ef53:	6a 01                	push   0x1
c001ef55:	e8 5e ff ff ff       	call   c001eeb8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001ef5a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ef5e:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001ef62:	0f 95 c0             	setne  al
c001ef65:	83 c4 24             	add    esp,0x24
c001ef68:	c3                   	ret    
c001ef69:	90                   	nop

c001ef6a <CPU::cpuidCheckECX(unsigned int)>:
c001ef6a:	83 ec 10             	sub    esp,0x10
c001ef6d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef71:	50                   	push   eax
c001ef72:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef76:	50                   	push   eax
c001ef77:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef7b:	50                   	push   eax
c001ef7c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef80:	50                   	push   eax
c001ef81:	6a 01                	push   0x1
c001ef83:	e8 30 ff ff ff       	call   c001eeb8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001ef88:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ef8c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001ef90:	0f 95 c0             	setne  al
c001ef93:	83 c4 24             	add    esp,0x24
c001ef96:	c3                   	ret    
c001ef97:	90                   	nop

c001ef98 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001ef98:	83 ec 10             	sub    esp,0x10
c001ef9b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef9f:	50                   	push   eax
c001efa0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efa4:	50                   	push   eax
c001efa5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efa9:	50                   	push   eax
c001efaa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efae:	50                   	push   eax
c001efaf:	6a 07                	push   0x7
c001efb1:	e8 02 ff ff ff       	call   c001eeb8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001efb6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001efba:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001efbe:	0f 95 c0             	setne  al
c001efc1:	83 c4 24             	add    esp,0x24
c001efc4:	c3                   	ret    
c001efc5:	90                   	nop

c001efc6 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001efc6:	83 ec 10             	sub    esp,0x10
c001efc9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efcd:	50                   	push   eax
c001efce:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efd2:	50                   	push   eax
c001efd3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efd7:	50                   	push   eax
c001efd8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efdc:	50                   	push   eax
c001efdd:	6a 07                	push   0x7
c001efdf:	e8 d4 fe ff ff       	call   c001eeb8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001efe4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001efe8:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001efec:	0f 95 c0             	setne  al
c001efef:	83 c4 24             	add    esp,0x24
c001eff2:	c3                   	ret    
c001eff3:	90                   	nop

c001eff4 <CPU::CPU()>:
c001eff4:	83 ec 0c             	sub    esp,0xc
c001eff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001effb:	83 ec 08             	sub    esp,0x8
c001effe:	68 55 27 03 c0       	push   0xc0032755
c001f003:	50                   	push   eax
c001f004:	e8 27 c4 ff ff       	call   c001b430 <Device::Device(char const*)>
c001f009:	83 c4 10             	add    esp,0x10
c001f00c:	ba e8 27 03 c0       	mov    edx,0xc00327e8
c001f011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f015:	89 10                	mov    DWORD PTR [eax],edx
c001f017:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f01b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001f025:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f029:	05 78 01 00 00       	add    eax,0x178
c001f02e:	83 ec 0c             	sub    esp,0xc
c001f031:	50                   	push   eax
c001f032:	e8 2d 6c ff ff       	call   c0015c64 <GDT::GDT()>
c001f037:	83 c4 10             	add    esp,0x10
c001f03a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f03e:	05 7c 09 00 00       	add    eax,0x97c
c001f043:	83 ec 0c             	sub    esp,0xc
c001f046:	50                   	push   eax
c001f047:	e8 68 6e ff ff       	call   c0015eb4 <IDT::IDT()>
c001f04c:	83 c4 10             	add    esp,0x10
c001f04f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f053:	05 7c 11 00 00       	add    eax,0x117c
c001f058:	83 ec 0c             	sub    esp,0xc
c001f05b:	50                   	push   eax
c001f05c:	e8 eb 87 ff ff       	call   c001784c <TSS::TSS()>
c001f061:	83 c4 10             	add    esp,0x10
c001f064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f068:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001f06f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f073:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001f07d:	90                   	nop
c001f07e:	83 c4 0c             	add    esp,0xc
c001f081:	c3                   	ret    

c001f082 <CPU::displayFeatures()>:
c001f082:	c3                   	ret    
c001f083:	90                   	nop

c001f084 <CPU::detectFeatures()>:
c001f084:	55                   	push   ebp
c001f085:	57                   	push   edi
c001f086:	56                   	push   esi
c001f087:	53                   	push   ebx
c001f088:	83 ec 30             	sub    esp,0x30
c001f08b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f08f:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001f099:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c001f0a0:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001f0a6:	6a 0d                	push   0xd
c001f0a8:	6a 00                	push   0x0
c001f0aa:	55                   	push   ebp
c001f0ab:	e8 40 14 fe ff       	call   c00004f0 <memset>
c001f0b0:	83 c4 10             	add    esp,0x10
c001f0b3:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001f0b8:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c001f0bf:	0f 84 db 05 00 00    	je     c001f6a0 <CPU::detectFeatures()+0x61c>
c001f0c5:	83 ec 0c             	sub    esp,0xc
c001f0c8:	89 ef                	mov    edi,ebp
c001f0ca:	6a 10                	push   0x10
c001f0cc:	e8 6b fe ff ff       	call   c001ef3c <CPU::cpuidCheckEDX(unsigned int)>
c001f0d1:	83 e0 01             	and    eax,0x1
c001f0d4:	8d 14 00             	lea    edx,[eax+eax*1]
c001f0d7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f0dd:	83 e0 fd             	and    eax,0xfffffffd
c001f0e0:	09 d0                	or     eax,edx
c001f0e2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f0e8:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001f0ef:	e8 48 fe ff ff       	call   c001ef3c <CPU::cpuidCheckEDX(unsigned int)>
c001f0f4:	83 e0 01             	and    eax,0x1
c001f0f7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f0fe:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f104:	83 e0 fb             	and    eax,0xfffffffb
c001f107:	09 d0                	or     eax,edx
c001f109:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f10f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001f116:	e8 21 fe ff ff       	call   c001ef3c <CPU::cpuidCheckEDX(unsigned int)>
c001f11b:	83 e0 01             	and    eax,0x1
c001f11e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f125:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f12b:	83 e0 f7             	and    eax,0xfffffff7
c001f12e:	09 d0                	or     eax,edx
c001f130:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f136:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001f13d:	e8 fa fd ff ff       	call   c001ef3c <CPU::cpuidCheckEDX(unsigned int)>
c001f142:	83 e0 01             	and    eax,0x1
c001f145:	c1 e0 04             	shl    eax,0x4
c001f148:	89 c2                	mov    edx,eax
c001f14a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f150:	83 e0 ef             	and    eax,0xffffffef
c001f153:	09 d0                	or     eax,edx
c001f155:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f15b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001f162:	e8 d5 fd ff ff       	call   c001ef3c <CPU::cpuidCheckEDX(unsigned int)>
c001f167:	83 e0 01             	and    eax,0x1
c001f16a:	c1 e0 05             	shl    eax,0x5
c001f16d:	89 c2                	mov    edx,eax
c001f16f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f175:	83 e0 df             	and    eax,0xffffffdf
c001f178:	09 d0                	or     eax,edx
c001f17a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f180:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001f187:	e8 b0 fd ff ff       	call   c001ef3c <CPU::cpuidCheckEDX(unsigned int)>
c001f18c:	83 e0 01             	and    eax,0x1
c001f18f:	8d 14 00             	lea    edx,[eax+eax*1]
c001f192:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f198:	83 e0 fd             	and    eax,0xfffffffd
c001f19b:	09 d0                	or     eax,edx
c001f19d:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f1a3:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001f1aa:	e8 8d fd ff ff       	call   c001ef3c <CPU::cpuidCheckEDX(unsigned int)>
c001f1af:	83 e0 01             	and    eax,0x1
c001f1b2:	c1 e0 06             	shl    eax,0x6
c001f1b5:	89 c2                	mov    edx,eax
c001f1b7:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f1bd:	83 e0 bf             	and    eax,0xffffffbf
c001f1c0:	09 d0                	or     eax,edx
c001f1c2:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f1c8:	58                   	pop    eax
c001f1c9:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f1cd:	50                   	push   eax
c001f1ce:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f1d2:	50                   	push   eax
c001f1d3:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f1d7:	56                   	push   esi
c001f1d8:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f1dc:	50                   	push   eax
c001f1dd:	6a 00                	push   0x0
c001f1df:	e8 d4 fc ff ff       	call   c001eeb8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f1e4:	b8 04 00 00 00       	mov    eax,0x4
c001f1e9:	89 c1                	mov    ecx,eax
c001f1eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f1ed:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001f1f3:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001f1f7:	89 c1                	mov    ecx,eax
c001f1f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f1fb:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001f201:	8d 74 24 38          	lea    esi,[esp+0x38]
c001f205:	89 c1                	mov    ecx,eax
c001f207:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f209:	83 c4 18             	add    esp,0x18
c001f20c:	68 64 26 03 c0       	push   0xc0032664
c001f211:	55                   	push   ebp
c001f212:	e8 39 15 fe ff       	call   c0000750 <strcmp>
c001f217:	83 c4 10             	add    esp,0x10
c001f21a:	85 c0                	test   eax,eax
c001f21c:	75 0f                	jne    c001f22d <CPU::detectFeatures()+0x1a9>
c001f21e:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001f228:	e9 22 02 00 00       	jmp    c001f44f <CPU::detectFeatures()+0x3cb>
c001f22d:	50                   	push   eax
c001f22e:	50                   	push   eax
c001f22f:	68 71 26 03 c0       	push   0xc0032671
c001f234:	55                   	push   ebp
c001f235:	e8 16 15 fe ff       	call   c0000750 <strcmp>
c001f23a:	83 c4 10             	add    esp,0x10
c001f23d:	85 c0                	test   eax,eax
c001f23f:	74 dd                	je     c001f21e <CPU::detectFeatures()+0x19a>
c001f241:	50                   	push   eax
c001f242:	50                   	push   eax
c001f243:	68 7e 26 03 c0       	push   0xc003267e
c001f248:	55                   	push   ebp
c001f249:	e8 02 15 fe ff       	call   c0000750 <strcmp>
c001f24e:	83 c4 10             	add    esp,0x10
c001f251:	85 c0                	test   eax,eax
c001f253:	74 2a                	je     c001f27f <CPU::detectFeatures()+0x1fb>
c001f255:	50                   	push   eax
c001f256:	50                   	push   eax
c001f257:	68 8b 26 03 c0       	push   0xc003268b
c001f25c:	55                   	push   ebp
c001f25d:	e8 ee 14 fe ff       	call   c0000750 <strcmp>
c001f262:	83 c4 10             	add    esp,0x10
c001f265:	85 c0                	test   eax,eax
c001f267:	74 16                	je     c001f27f <CPU::detectFeatures()+0x1fb>
c001f269:	50                   	push   eax
c001f26a:	50                   	push   eax
c001f26b:	68 98 26 03 c0       	push   0xc0032698
c001f270:	55                   	push   ebp
c001f271:	e8 da 14 fe ff       	call   c0000750 <strcmp>
c001f276:	83 c4 10             	add    esp,0x10
c001f279:	85 c0                	test   eax,eax
c001f27b:	74 48                	je     c001f2c5 <CPU::detectFeatures()+0x241>
c001f27d:	eb 0f                	jmp    c001f28e <CPU::detectFeatures()+0x20a>
c001f27f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001f289:	e9 c1 01 00 00       	jmp    c001f44f <CPU::detectFeatures()+0x3cb>
c001f28e:	50                   	push   eax
c001f28f:	50                   	push   eax
c001f290:	68 a5 26 03 c0       	push   0xc00326a5
c001f295:	55                   	push   ebp
c001f296:	e8 b5 14 fe ff       	call   c0000750 <strcmp>
c001f29b:	83 c4 10             	add    esp,0x10
c001f29e:	85 c0                	test   eax,eax
c001f2a0:	74 23                	je     c001f2c5 <CPU::detectFeatures()+0x241>
c001f2a2:	57                   	push   edi
c001f2a3:	57                   	push   edi
c001f2a4:	68 b2 26 03 c0       	push   0xc00326b2
c001f2a9:	55                   	push   ebp
c001f2aa:	e8 a1 14 fe ff       	call   c0000750 <strcmp>
c001f2af:	83 c4 10             	add    esp,0x10
c001f2b2:	85 c0                	test   eax,eax
c001f2b4:	75 1e                	jne    c001f2d4 <CPU::detectFeatures()+0x250>
c001f2b6:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f2c0:	e9 8a 01 00 00       	jmp    c001f44f <CPU::detectFeatures()+0x3cb>
c001f2c5:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001f2cf:	e9 7b 01 00 00       	jmp    c001f44f <CPU::detectFeatures()+0x3cb>
c001f2d4:	56                   	push   esi
c001f2d5:	56                   	push   esi
c001f2d6:	68 bf 26 03 c0       	push   0xc00326bf
c001f2db:	55                   	push   ebp
c001f2dc:	e8 6f 14 fe ff       	call   c0000750 <strcmp>
c001f2e1:	83 c4 10             	add    esp,0x10
c001f2e4:	85 c0                	test   eax,eax
c001f2e6:	75 0f                	jne    c001f2f7 <CPU::detectFeatures()+0x273>
c001f2e8:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001f2f2:	e9 58 01 00 00       	jmp    c001f44f <CPU::detectFeatures()+0x3cb>
c001f2f7:	51                   	push   ecx
c001f2f8:	51                   	push   ecx
c001f2f9:	68 7e 26 03 c0       	push   0xc003267e
c001f2fe:	55                   	push   ebp
c001f2ff:	e8 4c 14 fe ff       	call   c0000750 <strcmp>
c001f304:	83 c4 10             	add    esp,0x10
c001f307:	85 c0                	test   eax,eax
c001f309:	75 0f                	jne    c001f31a <CPU::detectFeatures()+0x296>
c001f30b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001f315:	e9 35 01 00 00       	jmp    c001f44f <CPU::detectFeatures()+0x3cb>
c001f31a:	52                   	push   edx
c001f31b:	52                   	push   edx
c001f31c:	68 cc 26 03 c0       	push   0xc00326cc
c001f321:	55                   	push   ebp
c001f322:	e8 29 14 fe ff       	call   c0000750 <strcmp>
c001f327:	83 c4 10             	add    esp,0x10
c001f32a:	85 c0                	test   eax,eax
c001f32c:	75 0f                	jne    c001f33d <CPU::detectFeatures()+0x2b9>
c001f32e:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001f338:	e9 12 01 00 00       	jmp    c001f44f <CPU::detectFeatures()+0x3cb>
c001f33d:	50                   	push   eax
c001f33e:	50                   	push   eax
c001f33f:	68 d9 26 03 c0       	push   0xc00326d9
c001f344:	55                   	push   ebp
c001f345:	e8 06 14 fe ff       	call   c0000750 <strcmp>
c001f34a:	83 c4 10             	add    esp,0x10
c001f34d:	85 c0                	test   eax,eax
c001f34f:	75 0f                	jne    c001f360 <CPU::detectFeatures()+0x2dc>
c001f351:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001f35b:	e9 ef 00 00 00       	jmp    c001f44f <CPU::detectFeatures()+0x3cb>
c001f360:	50                   	push   eax
c001f361:	50                   	push   eax
c001f362:	68 e6 26 03 c0       	push   0xc00326e6
c001f367:	55                   	push   ebp
c001f368:	e8 e3 13 fe ff       	call   c0000750 <strcmp>
c001f36d:	83 c4 10             	add    esp,0x10
c001f370:	85 c0                	test   eax,eax
c001f372:	75 0f                	jne    c001f383 <CPU::detectFeatures()+0x2ff>
c001f374:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001f37e:	e9 cc 00 00 00       	jmp    c001f44f <CPU::detectFeatures()+0x3cb>
c001f383:	50                   	push   eax
c001f384:	50                   	push   eax
c001f385:	68 f3 26 03 c0       	push   0xc00326f3
c001f38a:	55                   	push   ebp
c001f38b:	e8 c0 13 fe ff       	call   c0000750 <strcmp>
c001f390:	83 c4 10             	add    esp,0x10
c001f393:	85 c0                	test   eax,eax
c001f395:	75 0f                	jne    c001f3a6 <CPU::detectFeatures()+0x322>
c001f397:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001f3a1:	e9 a9 00 00 00       	jmp    c001f44f <CPU::detectFeatures()+0x3cb>
c001f3a6:	50                   	push   eax
c001f3a7:	50                   	push   eax
c001f3a8:	68 00 27 03 c0       	push   0xc0032700
c001f3ad:	55                   	push   ebp
c001f3ae:	e8 9d 13 fe ff       	call   c0000750 <strcmp>
c001f3b3:	83 c4 10             	add    esp,0x10
c001f3b6:	85 c0                	test   eax,eax
c001f3b8:	75 0f                	jne    c001f3c9 <CPU::detectFeatures()+0x345>
c001f3ba:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001f3c4:	e9 86 00 00 00       	jmp    c001f44f <CPU::detectFeatures()+0x3cb>
c001f3c9:	50                   	push   eax
c001f3ca:	50                   	push   eax
c001f3cb:	68 0d 27 03 c0       	push   0xc003270d
c001f3d0:	55                   	push   ebp
c001f3d1:	e8 7a 13 fe ff       	call   c0000750 <strcmp>
c001f3d6:	83 c4 10             	add    esp,0x10
c001f3d9:	85 c0                	test   eax,eax
c001f3db:	75 0c                	jne    c001f3e9 <CPU::detectFeatures()+0x365>
c001f3dd:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001f3e7:	eb 66                	jmp    c001f44f <CPU::detectFeatures()+0x3cb>
c001f3e9:	50                   	push   eax
c001f3ea:	50                   	push   eax
c001f3eb:	68 1a 27 03 c0       	push   0xc003271a
c001f3f0:	55                   	push   ebp
c001f3f1:	e8 5a 13 fe ff       	call   c0000750 <strcmp>
c001f3f6:	83 c4 10             	add    esp,0x10
c001f3f9:	85 c0                	test   eax,eax
c001f3fb:	75 0c                	jne    c001f409 <CPU::detectFeatures()+0x385>
c001f3fd:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001f407:	eb 46                	jmp    c001f44f <CPU::detectFeatures()+0x3cb>
c001f409:	57                   	push   edi
c001f40a:	57                   	push   edi
c001f40b:	68 27 27 03 c0       	push   0xc0032727
c001f410:	55                   	push   ebp
c001f411:	e8 3a 13 fe ff       	call   c0000750 <strcmp>
c001f416:	83 c4 10             	add    esp,0x10
c001f419:	85 c0                	test   eax,eax
c001f41b:	74 e0                	je     c001f3fd <CPU::detectFeatures()+0x379>
c001f41d:	56                   	push   esi
c001f41e:	56                   	push   esi
c001f41f:	68 34 27 03 c0       	push   0xc0032734
c001f424:	55                   	push   ebp
c001f425:	e8 26 13 fe ff       	call   c0000750 <strcmp>
c001f42a:	83 c4 10             	add    esp,0x10
c001f42d:	85 c0                	test   eax,eax
c001f42f:	74 cc                	je     c001f3fd <CPU::detectFeatures()+0x379>
c001f431:	51                   	push   ecx
c001f432:	51                   	push   ecx
c001f433:	68 41 27 03 c0       	push   0xc0032741
c001f438:	55                   	push   ebp
c001f439:	e8 12 13 fe ff       	call   c0000750 <strcmp>
c001f43e:	83 c4 10             	add    esp,0x10
c001f441:	85 c0                	test   eax,eax
c001f443:	74 b8                	je     c001f3fd <CPU::detectFeatures()+0x379>
c001f445:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001f44f:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001f454:	0f 86 be 00 00 00    	jbe    c001f518 <CPU::detectFeatures()+0x494>
c001f45a:	83 ec 0c             	sub    esp,0xc
c001f45d:	68 80 00 00 00       	push   0x80
c001f462:	e8 31 fb ff ff       	call   c001ef98 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f467:	83 e0 01             	and    eax,0x1
c001f46a:	c1 e0 06             	shl    eax,0x6
c001f46d:	89 c2                	mov    edx,eax
c001f46f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f475:	83 e0 bf             	and    eax,0xffffffbf
c001f478:	09 d0                	or     eax,edx
c001f47a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f480:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001f487:	e8 0c fb ff ff       	call   c001ef98 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f48c:	83 e0 01             	and    eax,0x1
c001f48f:	c1 e0 04             	shl    eax,0x4
c001f492:	89 c2                	mov    edx,eax
c001f494:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f49a:	83 e0 ef             	and    eax,0xffffffef
c001f49d:	09 d0                	or     eax,edx
c001f49f:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f4a5:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001f4ac:	e8 e7 fa ff ff       	call   c001ef98 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f4b1:	89 c2                	mov    edx,eax
c001f4b3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f4b9:	c1 e2 07             	shl    edx,0x7
c001f4bc:	83 e0 7f             	and    eax,0x7f
c001f4bf:	09 d0                	or     eax,edx
c001f4c1:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f4c7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001f4ce:	e8 f3 fa ff ff       	call   c001efc6 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f4d3:	83 e0 01             	and    eax,0x1
c001f4d6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f4dd:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f4e3:	83 e0 f7             	and    eax,0xfffffff7
c001f4e6:	09 d0                	or     eax,edx
c001f4e8:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f4ee:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001f4f5:	e8 cc fa ff ff       	call   c001efc6 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f4fa:	83 c4 10             	add    esp,0x10
c001f4fd:	83 e0 01             	and    eax,0x1
c001f500:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f507:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f50d:	83 e0 fb             	and    eax,0xfffffffb
c001f510:	09 d0                	or     eax,edx
c001f512:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f518:	83 ec 0c             	sub    esp,0xc
c001f51b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f51f:	50                   	push   eax
c001f520:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f524:	50                   	push   eax
c001f525:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001f529:	57                   	push   edi
c001f52a:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f52e:	56                   	push   esi
c001f52f:	6a 01                	push   0x1
c001f531:	e8 82 f9 ff ff       	call   c001eeb8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f536:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f53a:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001f540:	89 c1                	mov    ecx,eax
c001f542:	83 e2 f0             	and    edx,0xfffffff0
c001f545:	83 e1 0f             	and    ecx,0xf
c001f548:	09 ca                	or     edx,ecx
c001f54a:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001f550:	89 c2                	mov    edx,eax
c001f552:	c1 ea 04             	shr    edx,0x4
c001f555:	83 e2 0f             	and    edx,0xf
c001f558:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f55c:	89 d1                	mov    ecx,edx
c001f55e:	83 c4 20             	add    esp,0x20
c001f561:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001f567:	c1 e1 06             	shl    ecx,0x6
c001f56a:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c001f570:	09 ca                	or     edx,ecx
c001f572:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001f579:	89 c2                	mov    edx,eax
c001f57b:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001f581:	c1 ea 08             	shr    edx,0x8
c001f584:	83 e1 3f             	and    ecx,0x3f
c001f587:	83 e2 0f             	and    edx,0xf
c001f58a:	89 d5                	mov    ebp,edx
c001f58c:	83 e5 03             	and    ebp,0x3
c001f58f:	c1 e5 06             	shl    ebp,0x6
c001f592:	09 e9                	or     ecx,ebp
c001f594:	89 d5                	mov    ebp,edx
c001f596:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001f59c:	c1 ed 02             	shr    ebp,0x2
c001f59f:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001f5a5:	83 e1 c0             	and    ecx,0xffffffc0
c001f5a8:	09 e9                	or     ecx,ebp
c001f5aa:	89 c5                	mov    ebp,eax
c001f5ac:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001f5b2:	c1 ed 08             	shr    ebp,0x8
c001f5b5:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001f5bb:	83 e5 30             	and    ebp,0x30
c001f5be:	83 e1 cf             	and    ecx,0xffffffcf
c001f5c1:	09 e9                	or     ecx,ebp
c001f5c3:	83 fa 06             	cmp    edx,0x6
c001f5c6:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c001f5cc:	74 05                	je     c001f5d3 <CPU::detectFeatures()+0x54f>
c001f5ce:	83 fa 0f             	cmp    edx,0xf
c001f5d1:	75 64                	jne    c001f637 <CPU::detectFeatures()+0x5b3>
c001f5d3:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001f5d9:	89 c1                	mov    ecx,eax
c001f5db:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c001f5e1:	c1 e9 10             	shr    ecx,0x10
c001f5e4:	c1 e1 04             	shl    ecx,0x4
c001f5e7:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001f5eb:	0f b6 c9             	movzx  ecx,cl
c001f5ee:	c1 e1 06             	shl    ecx,0x6
c001f5f1:	09 e9                	or     ecx,ebp
c001f5f3:	83 fa 0f             	cmp    edx,0xf
c001f5f6:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c001f5fd:	75 38                	jne    c001f637 <CPU::detectFeatures()+0x5b3>
c001f5ff:	c1 e8 14             	shr    eax,0x14
c001f602:	83 c0 0f             	add    eax,0xf
c001f605:	0f b6 c0             	movzx  eax,al
c001f608:	89 c2                	mov    edx,eax
c001f60a:	c1 e8 02             	shr    eax,0x2
c001f60d:	83 e2 03             	and    edx,0x3
c001f610:	89 d1                	mov    ecx,edx
c001f612:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001f618:	c1 e1 06             	shl    ecx,0x6
c001f61b:	83 e2 3f             	and    edx,0x3f
c001f61e:	09 ca                	or     edx,ecx
c001f620:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001f626:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001f62c:	83 e2 c0             	and    edx,0xffffffc0
c001f62f:	09 d0                	or     eax,edx
c001f631:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c001f637:	83 ec 0c             	sub    esp,0xc
c001f63a:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f640:	83 c8 07             	or     eax,0x7
c001f643:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f649:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f64d:	50                   	push   eax
c001f64e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001f652:	55                   	push   ebp
c001f653:	57                   	push   edi
c001f654:	56                   	push   esi
c001f655:	68 00 00 00 80       	push   0x80000000
c001f65a:	e8 59 f8 ff ff       	call   c001eeb8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f65f:	83 c4 20             	add    esp,0x20
c001f662:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001f66a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f66e:	76 1e                	jbe    c001f68e <CPU::detectFeatures()+0x60a>
c001f670:	83 ec 0c             	sub    esp,0xc
c001f673:	50                   	push   eax
c001f674:	55                   	push   ebp
c001f675:	57                   	push   edi
c001f676:	56                   	push   esi
c001f677:	68 01 00 00 80       	push   0x80000001
c001f67c:	e8 37 f8 ff ff       	call   c001eeb8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f681:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c001f68b:	83 c4 20             	add    esp,0x20
c001f68e:	52                   	push   edx
c001f68f:	52                   	push   edx
c001f690:	68 4d 27 03 c0       	push   0xc003274d
c001f695:	53                   	push   ebx
c001f696:	e8 87 bd ff ff       	call   c001b422 <Device::setName(char const*)>
c001f69b:	83 c4 10             	add    esp,0x10
c001f69e:	eb 69                	jmp    c001f709 <CPU::detectFeatures()+0x685>
c001f6a0:	50                   	push   eax
c001f6a1:	50                   	push   eax
c001f6a2:	68 b2 26 03 c0       	push   0xc00326b2
c001f6a7:	55                   	push   ebp
c001f6a8:	e8 93 0f fe ff       	call   c0000640 <strcpy>
c001f6ad:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f6b7:	e8 07 0b fe ff       	call   c00001c3 <is486>
c001f6bc:	83 c4 10             	add    esp,0x10
c001f6bf:	85 c0                	test   eax,eax
c001f6c1:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f6c7:	74 1f                	je     c001f6e8 <CPU::detectFeatures()+0x664>
c001f6c9:	83 c8 07             	or     eax,0x7
c001f6cc:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f6d2:	0f 20 c0             	mov    eax,cr0
c001f6d5:	83 e0 14             	and    eax,0x14
c001f6d8:	83 f8 04             	cmp    eax,0x4
c001f6db:	75 10                	jne    c001f6ed <CPU::detectFeatures()+0x669>
c001f6dd:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f6e3:	83 e0 fd             	and    eax,0xfffffffd
c001f6e6:	eb 1b                	jmp    c001f703 <CPU::detectFeatures()+0x67f>
c001f6e8:	83 e0 f8             	and    eax,0xfffffff8
c001f6eb:	eb df                	jmp    c001f6cc <CPU::detectFeatures()+0x648>
c001f6ed:	e8 ac 0a fe ff       	call   c000019e <hasLegacyFPU>
c001f6f2:	83 e0 01             	and    eax,0x1
c001f6f5:	8d 14 00             	lea    edx,[eax+eax*1]
c001f6f8:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f6fe:	83 e0 fd             	and    eax,0xfffffffd
c001f701:	09 d0                	or     eax,edx
c001f703:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f709:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c001f710:	74 17                	je     c001f729 <CPU::detectFeatures()+0x6a5>
c001f712:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001f718:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c001f71e:	83 c8 10             	or     eax,0x10
c001f721:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c001f727:	eb 20                	jmp    c001f749 <CPU::detectFeatures()+0x6c5>
c001f729:	e8 70 0a fe ff       	call   c000019e <hasLegacyFPU>
c001f72e:	83 e0 01             	and    eax,0x1
c001f731:	8d 14 00             	lea    edx,[eax+eax*1]
c001f734:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f73a:	83 e0 fd             	and    eax,0xfffffffd
c001f73d:	09 d0                	or     eax,edx
c001f73f:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f745:	a8 02                	test   al,0x2
c001f747:	75 c9                	jne    c001f712 <CPU::detectFeatures()+0x68e>
c001f749:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c001f750:	83 c4 2c             	add    esp,0x2c
c001f753:	5b                   	pop    ebx
c001f754:	5e                   	pop    esi
c001f755:	5f                   	pop    edi
c001f756:	5d                   	pop    ebp
c001f757:	c3                   	ret    

c001f758 <CPU::setupSMEP()>:
c001f758:	0f 20 e0             	mov    eax,cr4
c001f75b:	0d 00 00 10 00       	or     eax,0x100000
c001f760:	0f 22 e0             	mov    cr4,eax
c001f763:	c3                   	ret    

c001f764 <CPU::setupUMIP()>:
c001f764:	0f 20 e0             	mov    eax,cr4
c001f767:	80 cc 08             	or     ah,0x8
c001f76a:	0f 22 e0             	mov    cr4,eax
c001f76d:	c3                   	ret    

c001f76e <CPU::setupTSC()>:
c001f76e:	0f 20 e0             	mov    eax,cr4
c001f771:	83 c8 04             	or     eax,0x4
c001f774:	0f 22 e0             	mov    cr4,eax
c001f777:	c3                   	ret    

c001f778 <CPU::setupLargePages()>:
c001f778:	0f 20 e0             	mov    eax,cr4
c001f77b:	83 c8 10             	or     eax,0x10
c001f77e:	0f 22 e0             	mov    cr4,eax
c001f781:	c3                   	ret    

c001f782 <CPU::setupPAT()>:
c001f782:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001f787:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c001f78e:	74 2c                	je     c001f7bc <CPU::setupPAT()+0x3a>
c001f790:	53                   	push   ebx
c001f791:	83 ec 10             	sub    esp,0x10
c001f794:	68 77 02 00 00       	push   0x277
c001f799:	50                   	push   eax
c001f79a:	e8 29 62 ff ff       	call   c00159c8 <Computer::rdmsr(unsigned int)>
c001f79f:	83 e2 f8             	and    edx,0xfffffff8
c001f7a2:	83 ca 01             	or     edx,0x1
c001f7a5:	52                   	push   edx
c001f7a6:	50                   	push   eax
c001f7a7:	68 77 02 00 00       	push   0x277
c001f7ac:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001f7b2:	e8 3d 62 ff ff       	call   c00159f4 <Computer::wrmsr(unsigned int, unsigned long long)>
c001f7b7:	83 c4 28             	add    esp,0x28
c001f7ba:	5b                   	pop    ebx
c001f7bb:	c3                   	ret    
c001f7bc:	c3                   	ret    
c001f7bd:	90                   	nop

c001f7be <CPU::setupMTRR()>:
c001f7be:	c3                   	ret    
c001f7bf:	90                   	nop

c001f7c0 <CPU::setupGlobalPages()>:
c001f7c0:	0f 20 e0             	mov    eax,cr4
c001f7c3:	0c 80                	or     al,0x80
c001f7c5:	0f 22 e0             	mov    cr4,eax
c001f7c8:	c3                   	ret    
c001f7c9:	90                   	nop

c001f7ca <CPU::allowUsermodeDataAccess()>:
c001f7ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7ce:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001f7d5:	74 03                	je     c001f7da <CPU::allowUsermodeDataAccess()+0x10>
c001f7d7:	0f 01 cb             	stac   
c001f7da:	c3                   	ret    
c001f7db:	90                   	nop

c001f7dc <CPU::prohibitUsermodeDataAccess()>:
c001f7dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7e0:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001f7e7:	74 03                	je     c001f7ec <CPU::prohibitUsermodeDataAccess()+0x10>
c001f7e9:	0f 01 ca             	clac   
c001f7ec:	c3                   	ret    
c001f7ed:	90                   	nop

c001f7ee <CPU::setupSMAP()>:
c001f7ee:	0f 20 e0             	mov    eax,cr4
c001f7f1:	0d 00 00 20 00       	or     eax,0x200000
c001f7f6:	0f 22 e0             	mov    cr4,eax
c001f7f9:	eb e1                	jmp    c001f7dc <CPU::prohibitUsermodeDataAccess()>
c001f7fb:	90                   	nop

c001f7fc <CPU::setupFeatures()>:
c001f7fc:	53                   	push   ebx
c001f7fd:	83 ec 08             	sub    esp,0x8
c001f800:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f804:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c001f80b:	74 18                	je     c001f825 <CPU::setupFeatures()+0x29>
c001f80d:	83 ec 0c             	sub    esp,0xc
c001f810:	68 59 27 03 c0       	push   0xc0032759
c001f815:	e8 33 9a ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c001f81a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f81d:	e8 42 ff ff ff       	call   c001f764 <CPU::setupUMIP()>
c001f822:	83 c4 10             	add    esp,0x10
c001f825:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c001f82c:	74 18                	je     c001f846 <CPU::setupFeatures()+0x4a>
c001f82e:	83 ec 0c             	sub    esp,0xc
c001f831:	68 63 27 03 c0       	push   0xc0032763
c001f836:	e8 12 9a ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c001f83b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f83e:	e8 2b ff ff ff       	call   c001f76e <CPU::setupTSC()>
c001f843:	83 c4 10             	add    esp,0x10
c001f846:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c001f84d:	74 18                	je     c001f867 <CPU::setupFeatures()+0x6b>
c001f84f:	83 ec 0c             	sub    esp,0xc
c001f852:	68 6c 27 03 c0       	push   0xc003276c
c001f857:	e8 f1 99 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c001f85c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f85f:	e8 14 ff ff ff       	call   c001f778 <CPU::setupLargePages()>
c001f864:	83 c4 10             	add    esp,0x10
c001f867:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c001f86e:	74 18                	je     c001f888 <CPU::setupFeatures()+0x8c>
c001f870:	83 ec 0c             	sub    esp,0xc
c001f873:	68 75 27 03 c0       	push   0xc0032775
c001f878:	e8 d0 99 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c001f87d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f880:	e8 3b ff ff ff       	call   c001f7c0 <CPU::setupGlobalPages()>
c001f885:	83 c4 10             	add    esp,0x10
c001f888:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c001f88f:	74 18                	je     c001f8a9 <CPU::setupFeatures()+0xad>
c001f891:	83 ec 0c             	sub    esp,0xc
c001f894:	68 87 27 03 c0       	push   0xc0032787
c001f899:	e8 af 99 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c001f89e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f8a1:	e8 dc fe ff ff       	call   c001f782 <CPU::setupPAT()>
c001f8a6:	83 c4 10             	add    esp,0x10
c001f8a9:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001f8b0:	74 11                	je     c001f8c3 <CPU::setupFeatures()+0xc7>
c001f8b2:	c7 44 24 10 90 27 03 c0 	mov    DWORD PTR [esp+0x10],0xc0032790
c001f8ba:	83 c4 08             	add    esp,0x8
c001f8bd:	5b                   	pop    ebx
c001f8be:	e9 8a 99 ff ff       	jmp    c001924d <Dbg::kprintf(char const*, ...)>
c001f8c3:	83 c4 08             	add    esp,0x8
c001f8c6:	5b                   	pop    ebx
c001f8c7:	c3                   	ret    

c001f8c8 <CPU::open(int, int, void*)>:
c001f8c8:	55                   	push   ebp
c001f8c9:	57                   	push   edi
c001f8ca:	56                   	push   esi
c001f8cb:	53                   	push   ebx
c001f8cc:	83 ec 18             	sub    esp,0x18
c001f8cf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001f8d3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f8d7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f8db:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001f8e1:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c001f8e7:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c001f8ed:	50                   	push   eax
c001f8ee:	e8 d3 63 ff ff       	call   c0015cc6 <GDT::setup()>
c001f8f3:	83 c4 0c             	add    esp,0xc
c001f8f6:	6a 00                	push   0x0
c001f8f8:	68 ef be ad de       	push   0xdeadbeef
c001f8fd:	55                   	push   ebp
c001f8fe:	e8 8d 7f ff ff       	call   c0017890 <TSS::setup(unsigned long, unsigned long)>
c001f903:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001f906:	e8 65 7f ff ff       	call   c0017870 <TSS::flush()>
c001f90b:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001f911:	89 04 24             	mov    DWORD PTR [esp],eax
c001f914:	e8 11 66 ff ff       	call   c0015f2a <IDT::setup()>
c001f919:	b8 00 04 00 00       	mov    eax,0x400
c001f91e:	0f 23 f8             	mov    db7,eax
c001f921:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001f92b:	e8 97 6d ff ff       	call   c00166c7 <Phys::allocatePage()>
c001f930:	83 c4 10             	add    esp,0x10
c001f933:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f939:	85 f6                	test   esi,esi
c001f93b:	89 38                	mov    DWORD PTR [eax],edi
c001f93d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f943:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001f946:	74 10                	je     c001f958 <CPU::open(int, int, void*)+0x90>
c001f948:	50                   	push   eax
c001f949:	50                   	push   eax
c001f94a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f950:	56                   	push   esi
c001f951:	e8 60 88 ff ff       	call   c00181b6 <VAS::setCPUSpecific(unsigned long)>
c001f956:	eb 0d                	jmp    c001f965 <CPU::open(int, int, void*)+0x9d>
c001f958:	83 ec 0c             	sub    esp,0xc
c001f95b:	68 9a 27 03 c0       	push   0xc003279a
c001f960:	e8 01 09 00 00       	call   c0020266 <KePanic(char const*)>
c001f965:	83 c4 10             	add    esp,0x10
c001f968:	83 ec 0c             	sub    esp,0xc
c001f96b:	68 a8 27 03 c0       	push   0xc00327a8
c001f970:	e8 8e 01 00 00       	call   c001fb03 <KeSetBootMessage(char const*)>
c001f975:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f978:	e8 07 f7 ff ff       	call   c001f084 <CPU::detectFeatures()>
c001f97d:	c7 04 24 cb 27 03 c0 	mov    DWORD PTR [esp],0xc00327cb
c001f984:	e8 7a 01 00 00       	call   c001fb03 <KeSetBootMessage(char const*)>
c001f989:	e8 f7 76 00 00       	call   c0027085 <HalInitialise()>
c001f98e:	a1 d4 a9 03 c0       	mov    eax,ds:0xc003a9d4
c001f993:	83 e0 10             	and    eax,0x10
c001f996:	83 f8 01             	cmp    eax,0x1
c001f999:	19 c0                	sbb    eax,eax
c001f99b:	83 e0 46             	and    eax,0x46
c001f99e:	83 c0 1e             	add    eax,0x1e
c001f9a1:	89 04 24             	mov    DWORD PTR [esp],eax
c001f9a4:	e8 5c d3 ff ff       	call   c001cd05 <setupTimer(int)>
c001f9a9:	83 c4 10             	add    esp,0x10
c001f9ac:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001f9b2:	f6 05 d4 a9 03 c0 20 	test   BYTE PTR ds:0xc003a9d4,0x20
c001f9b9:	74 0c                	je     c001f9c7 <CPU::open(int, int, void*)+0xff>
c001f9bb:	83 ec 0c             	sub    esp,0xc
c001f9be:	53                   	push   ebx
c001f9bf:	e8 38 fe ff ff       	call   c001f7fc <CPU::setupFeatures()>
c001f9c4:	83 c4 10             	add    esp,0x10
c001f9c7:	83 c4 0c             	add    esp,0xc
c001f9ca:	31 c0                	xor    eax,eax
c001f9cc:	5b                   	pop    ebx
c001f9cd:	5e                   	pop    esi
c001f9ce:	5f                   	pop    edi
c001f9cf:	5d                   	pop    ebp
c001f9d0:	c3                   	ret    

c001f9d1 <KeInitialiseAtexit()>:
c001f9d1:	83 ec 10             	sub    esp,0x10
c001f9d4:	c7 05 a0 f8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f8a0,0x0
c001f9de:	6a 60                	push   0x60
c001f9e0:	6a 00                	push   0x0
c001f9e2:	68 20 f9 03 c0       	push   0xc003f920
c001f9e7:	e8 04 0b fe ff       	call   c00004f0 <memset>
c001f9ec:	83 c4 1c             	add    esp,0x1c
c001f9ef:	c3                   	ret    

c001f9f0 <KeRegisterAtexit(void (*)(void*), void*)>:
c001f9f0:	a1 a0 f8 03 c0       	mov    eax,ds:0xc003f8a0
c001f9f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f9f9:	89 14 85 20 f9 03 c0 	mov    DWORD PTR [eax*4-0x3ffc06e0],edx
c001fa00:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fa04:	89 14 85 c0 f8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc0740],edx
c001fa0b:	40                   	inc    eax
c001fa0c:	a3 a0 f8 03 c0       	mov    ds:0xc003f8a0,eax
c001fa11:	83 f8 17             	cmp    eax,0x17
c001fa14:	7e 0d                	jle    c001fa23 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c001fa16:	c7 44 24 04 0c 28 03 c0 	mov    DWORD PTR [esp+0x4],0xc003280c
c001fa1e:	e9 43 08 00 00       	jmp    c0020266 <KePanic(char const*)>
c001fa23:	c3                   	ret    

c001fa24 <KeExecuteAtexit()>:
c001fa24:	53                   	push   ebx
c001fa25:	31 db                	xor    ebx,ebx
c001fa27:	83 ec 08             	sub    esp,0x8
c001fa2a:	39 1d a0 f8 03 c0    	cmp    DWORD PTR ds:0xc003f8a0,ebx
c001fa30:	7e 50                	jle    c001fa82 <KeExecuteAtexit()+0x5e>
c001fa32:	8b 04 9d 20 f9 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc06e0]
c001fa39:	85 c0                	test   eax,eax
c001fa3b:	74 42                	je     c001fa7f <KeExecuteAtexit()+0x5b>
c001fa3d:	51                   	push   ecx
c001fa3e:	50                   	push   eax
c001fa3f:	53                   	push   ebx
c001fa40:	68 25 28 03 c0       	push   0xc0032825
c001fa45:	e8 03 98 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c001fa4a:	58                   	pop    eax
c001fa4b:	ff 34 9d c0 f8 03 c0 	push   DWORD PTR [ebx*4-0x3ffc0740]
c001fa52:	ff 14 9d 20 f9 03 c0 	call   DWORD PTR [ebx*4-0x3ffc06e0]
c001fa59:	c7 04 24 47 28 03 c0 	mov    DWORD PTR [esp],0xc0032847
c001fa60:	e8 e8 97 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c001fa65:	c7 04 24 f3 39 03 c0 	mov    DWORD PTR [esp],0xc00339f3
c001fa6c:	c7 04 9d 20 f9 03 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffc06e0],0x0
c001fa77:	e8 d1 97 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c001fa7c:	83 c4 10             	add    esp,0x10
c001fa7f:	43                   	inc    ebx
c001fa80:	eb a8                	jmp    c001fa2a <KeExecuteAtexit()+0x6>
c001fa82:	83 c4 08             	add    esp,0x8
c001fa85:	5b                   	pop    ebx
c001fa86:	c3                   	ret    

c001fa87 <KeDisplaySplashScreen()>:
c001fa87:	55                   	push   ebp
c001fa88:	bd 05 00 00 00       	mov    ebp,0x5
c001fa8d:	57                   	push   edi
c001fa8e:	bf 0a 00 00 00       	mov    edi,0xa
c001fa93:	56                   	push   esi
c001fa94:	31 f6                	xor    esi,esi
c001fa96:	53                   	push   ebx
c001fa97:	31 db                	xor    ebx,ebx
c001fa99:	83 ec 0c             	sub    esp,0xc
c001fa9c:	0f b6 96 60 3c 03 c0 	movzx  edx,BYTE PTR [esi-0x3ffcc3a0]
c001faa3:	89 d0                	mov    eax,edx
c001faa5:	85 d2                	test   edx,edx
c001faa7:	74 52                	je     c001fafb <KeDisplaySplashScreen()+0x74>
c001faa9:	80 bb 96 3c 03 c0 db 	cmp    BYTE PTR [ebx-0x3ffcc36a],0xdb
c001fab0:	75 13                	jne    c001fac5 <KeDisplaySplashScreen()+0x3e>
c001fab2:	0f b6 8b 95 3c 03 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffcc36b]
c001fab9:	83 e1 fe             	and    ecx,0xfffffffe
c001fabc:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c001fac2:	75 01                	jne    c001fac5 <KeDisplaySplashScreen()+0x3e>
c001fac4:	47                   	inc    edi
c001fac5:	83 fa 0d             	cmp    edx,0xd
c001fac8:	74 28                	je     c001faf2 <KeDisplaySplashScreen()+0x6b>
c001faca:	83 fa 0a             	cmp    edx,0xa
c001facd:	75 0a                	jne    c001fad9 <KeDisplaySplashScreen()+0x52>
c001facf:	45                   	inc    ebp
c001fad0:	bf 0a 00 00 00       	mov    edi,0xa
c001fad5:	31 db                	xor    ebx,ebx
c001fad7:	eb 19                	jmp    c001faf2 <KeDisplaySplashScreen()+0x6b>
c001fad9:	83 ec 0c             	sub    esp,0xc
c001fadc:	8d 14 1f             	lea    edx,[edi+ebx*1]
c001fadf:	55                   	push   ebp
c001fae0:	0f be c0             	movsx  eax,al
c001fae3:	52                   	push   edx
c001fae4:	43                   	inc    ebx
c001fae5:	6a 00                	push   0x0
c001fae7:	6a 0e                	push   0xe
c001fae9:	50                   	push   eax
c001faea:	e8 15 82 00 00       	call   c0027d04 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001faef:	83 c4 20             	add    esp,0x20
c001faf2:	46                   	inc    esi
c001faf3:	81 fe 42 01 00 00    	cmp    esi,0x142
c001faf9:	75 a1                	jne    c001fa9c <KeDisplaySplashScreen()+0x15>
c001fafb:	83 c4 0c             	add    esp,0xc
c001fafe:	5b                   	pop    ebx
c001faff:	5e                   	pop    esi
c001fb00:	5f                   	pop    edi
c001fb01:	5d                   	pop    ebp
c001fb02:	c3                   	ret    

c001fb03 <KeSetBootMessage(char const*)>:
c001fb03:	57                   	push   edi
c001fb04:	56                   	push   esi
c001fb05:	53                   	push   ebx
c001fb06:	81 ec a4 00 00 00    	sub    esp,0xa4
c001fb0c:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c001fb13:	68 9e 00 00 00       	push   0x9e
c001fb18:	6a 00                	push   0x0
c001fb1a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001fb1e:	56                   	push   esi
c001fb1f:	e8 cc 09 fe ff       	call   c00004f0 <memset>
c001fb24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fb27:	e8 44 0a fe ff       	call   c0000570 <strlen>
c001fb2c:	ba 50 00 00 00       	mov    edx,0x50
c001fb31:	83 c4 10             	add    esp,0x10
c001fb34:	29 c2                	sub    edx,eax
c001fb36:	31 c9                	xor    ecx,ecx
c001fb38:	83 e2 fe             	and    edx,0xfffffffe
c001fb3b:	01 f2                	add    edx,esi
c001fb3d:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c001fb42:	84 c0                	test   al,al
c001fb44:	74 0a                	je     c001fb50 <KeSetBootMessage(char const*)+0x4d>
c001fb46:	80 cc 0f             	or     ah,0xf
c001fb49:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c001fb4d:	41                   	inc    ecx
c001fb4e:	eb ed                	jmp    c001fb3d <KeSetBootMessage(char const*)+0x3a>
c001fb50:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c001fb55:	b9 9e 00 00 00       	mov    ecx,0x9e
c001fb5a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fb5c:	81 c4 a0 00 00 00    	add    esp,0xa0
c001fb62:	5b                   	pop    ebx
c001fb63:	5e                   	pop    esi
c001fb64:	5f                   	pop    edi
c001fb65:	c3                   	ret    
c001fb66:	66 90                	xchg   ax,ax

c001fb68 <CUnlockScheduler>:
c001fb68:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001fb6d:	83 e8 01             	sub    eax,0x1
c001fb70:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001fb75:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001fb7a:	85 c0                	test   eax,eax
c001fb7c:	75 02                	jne    c001fb80 <CUnlockScheduler+0x18>
c001fb7e:	fb                   	sti    
c001fb7f:	90                   	nop
c001fb80:	90                   	nop
c001fb81:	c3                   	ret    
c001fb82:	66 90                	xchg   ax,ax

c001fb84 <CLockScheduler>:
c001fb84:	fa                   	cli    
c001fb85:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001fb8a:	83 c0 01             	add    eax,0x1
c001fb8d:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001fb92:	90                   	nop
c001fb93:	c3                   	ret    

c001fb94 <CPrintf>:
c001fb94:	83 ec 0c             	sub    esp,0xc
c001fb97:	83 ec 08             	sub    esp,0x8
c001fb9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fb9e:	68 d0 fa 02 c0       	push   0xc002fad0
c001fba3:	e8 a5 96 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c001fba8:	83 c4 10             	add    esp,0x10
c001fbab:	90                   	nop
c001fbac:	83 c4 0c             	add    esp,0xc
c001fbaf:	c3                   	ret    

c001fbb0 <Krnl::handlePowerButton()>:
c001fbb0:	83 ec 0c             	sub    esp,0xc
c001fbb3:	e8 09 07 00 00       	call   c00202c1 <KeHandlePowerButton()>
c001fbb8:	90                   	nop
c001fbb9:	83 c4 0c             	add    esp,0xc
c001fbbc:	c3                   	ret    
c001fbbd:	8d 76 00             	lea    esi,[esi+0x0]

c001fbc0 <Krnl::handleSleepButton()>:
c001fbc0:	83 ec 0c             	sub    esp,0xc
c001fbc3:	e8 2e 07 00 00       	call   c00202f6 <KeHandleSleepButton()>
c001fbc8:	90                   	nop
c001fbc9:	83 c4 0c             	add    esp,0xc
c001fbcc:	c3                   	ret    

c001fbcd <KeCalculateCRC32(unsigned char*, int)>:
c001fbcd:	53                   	push   ebx
c001fbce:	83 c8 ff             	or     eax,0xffffffff
c001fbd1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fbd5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fbd9:	01 cb                	add    ebx,ecx
c001fbdb:	39 d9                	cmp    ecx,ebx
c001fbdd:	74 15                	je     c001fbf4 <KeCalculateCRC32(unsigned char*, int)+0x27>
c001fbdf:	41                   	inc    ecx
c001fbe0:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c001fbe3:	31 c2                	xor    edx,eax
c001fbe5:	c1 e8 08             	shr    eax,0x8
c001fbe8:	0f b6 d2             	movzx  edx,dl
c001fbeb:	33 04 95 c0 3d 03 c0 	xor    eax,DWORD PTR [edx*4-0x3ffcc240]
c001fbf2:	eb e7                	jmp    c001fbdb <KeCalculateCRC32(unsigned char*, int)+0xe>
c001fbf4:	f7 d0                	not    eax
c001fbf6:	5b                   	pop    ebx
c001fbf7:	c3                   	ret    

c001fbf8 <EnvVarContainer::getEnv(char const*)>:
c001fbf8:	57                   	push   edi
c001fbf9:	56                   	push   esi
c001fbfa:	53                   	push   ebx
c001fbfb:	31 db                	xor    ebx,ebx
c001fbfd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fc01:	39 1e                	cmp    DWORD PTR [esi],ebx
c001fc03:	7e 2b                	jle    c001fc30 <EnvVarContainer::getEnv(char const*)+0x38>
c001fc05:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001fc0c:	50                   	push   eax
c001fc0d:	50                   	push   eax
c001fc0e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001fc11:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001fc14:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001fc18:	e8 33 0b fe ff       	call   c0000750 <strcmp>
c001fc1d:	83 c4 10             	add    esp,0x10
c001fc20:	85 c0                	test   eax,eax
c001fc22:	75 09                	jne    c001fc2d <EnvVarContainer::getEnv(char const*)+0x35>
c001fc24:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001fc27:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001fc2b:	eb 05                	jmp    c001fc32 <EnvVarContainer::getEnv(char const*)+0x3a>
c001fc2d:	43                   	inc    ebx
c001fc2e:	eb d1                	jmp    c001fc01 <EnvVarContainer::getEnv(char const*)+0x9>
c001fc30:	31 c0                	xor    eax,eax
c001fc32:	5b                   	pop    ebx
c001fc33:	5e                   	pop    esi
c001fc34:	5f                   	pop    edi
c001fc35:	c3                   	ret    

c001fc36 <EnvVarContainer::setEnv(char const*, char const*)>:
c001fc36:	55                   	push   ebp
c001fc37:	57                   	push   edi
c001fc38:	56                   	push   esi
c001fc39:	53                   	push   ebx
c001fc3a:	83 ec 28             	sub    esp,0x28
c001fc3d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001fc41:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001fc45:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001fc49:	56                   	push   esi
c001fc4a:	e8 21 09 fe ff       	call   c0000570 <strlen>
c001fc4f:	40                   	inc    eax
c001fc50:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc53:	e8 66 67 ff ff       	call   c00163be <malloc>
c001fc58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fc5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fc5f:	e8 0c 09 fe ff       	call   c0000570 <strlen>
c001fc64:	40                   	inc    eax
c001fc65:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc68:	e8 51 67 ff ff       	call   c00163be <malloc>
c001fc6d:	89 34 24             	mov    DWORD PTR [esp],esi
c001fc70:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fc74:	e8 f7 08 fe ff       	call   c0000570 <strlen>
c001fc79:	83 c4 0c             	add    esp,0xc
c001fc7c:	40                   	inc    eax
c001fc7d:	50                   	push   eax
c001fc7e:	6a 00                	push   0x0
c001fc80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fc84:	e8 67 08 fe ff       	call   c00004f0 <memset>
c001fc89:	89 34 24             	mov    DWORD PTR [esp],esi
c001fc8c:	e8 df 08 fe ff       	call   c0000570 <strlen>
c001fc91:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fc95:	8d 48 01             	lea    ecx,[eax+0x1]
c001fc98:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fc9a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fc9d:	89 de                	mov    esi,ebx
c001fc9f:	e8 cc 08 fe ff       	call   c0000570 <strlen>
c001fca4:	83 c4 0c             	add    esp,0xc
c001fca7:	40                   	inc    eax
c001fca8:	50                   	push   eax
c001fca9:	6a 00                	push   0x0
c001fcab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fcaf:	e8 3c 08 fe ff       	call   c00004f0 <memset>
c001fcb4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fcb7:	e8 b4 08 fe ff       	call   c0000570 <strlen>
c001fcbc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fcc0:	8d 48 01             	lea    ecx,[eax+0x1]
c001fcc3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fcc5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001fcc8:	40                   	inc    eax
c001fcc9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001fccc:	c1 e0 03             	shl    eax,0x3
c001fccf:	5a                   	pop    edx
c001fcd0:	59                   	pop    ecx
c001fcd1:	50                   	push   eax
c001fcd2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001fcd5:	e8 d0 66 ff ff       	call   c00163aa <realloc>
c001fcda:	8d 74 24 18          	lea    esi,[esp+0x18]
c001fcde:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001fce1:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001fce4:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001fce8:	b9 08 00 00 00       	mov    ecx,0x8
c001fced:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fcef:	83 c4 2c             	add    esp,0x2c
c001fcf2:	5b                   	pop    ebx
c001fcf3:	5e                   	pop    esi
c001fcf4:	5f                   	pop    edi
c001fcf5:	5d                   	pop    ebp
c001fcf6:	c3                   	ret    
c001fcf7:	90                   	nop

c001fcf8 <EnvVarContainer::deleteEnv(char const*)>:
c001fcf8:	c3                   	ret    
c001fcf9:	90                   	nop

c001fcfa <EnvVarContainer::loadFrom(char const*, char const*)>:
c001fcfa:	55                   	push   ebp
c001fcfb:	57                   	push   edi
c001fcfc:	56                   	push   esi
c001fcfd:	53                   	push   ebx
c001fcfe:	81 ec 38 01 00 00    	sub    esp,0x138
c001fd04:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001fd0b:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001fd12:	68 14 01 00 00       	push   0x114
c001fd17:	e8 a2 66 ff ff       	call   c00163be <malloc>
c001fd1c:	83 c4 0c             	add    esp,0xc
c001fd1f:	89 c3                	mov    ebx,eax
c001fd21:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fd24:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001fd2b:	50                   	push   eax
c001fd2c:	e8 23 a7 ff ff       	call   c001a454 <File::File(char const*, Process*)>
c001fd31:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fd34:	e8 fd a9 ff ff       	call   c001a736 <File::exists()>
c001fd39:	83 c4 10             	add    esp,0x10
c001fd3c:	84 c0                	test   al,al
c001fd3e:	75 31                	jne    c001fd71 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001fd40:	50                   	push   eax
c001fd41:	50                   	push   eax
c001fd42:	6a 12                	push   0x12
c001fd44:	53                   	push   ebx
c001fd45:	e8 28 a7 ff ff       	call   c001a472 <File::open(FileOpenMode)>
c001fd4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fd4c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001fd4f:	89 34 24             	mov    DWORD PTR [esp],esi
c001fd52:	e8 19 08 fe ff       	call   c0000570 <strlen>
c001fd57:	5a                   	pop    edx
c001fd58:	31 d2                	xor    edx,edx
c001fd5a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001fd5e:	51                   	push   ecx
c001fd5f:	56                   	push   esi
c001fd60:	52                   	push   edx
c001fd61:	50                   	push   eax
c001fd62:	53                   	push   ebx
c001fd63:	ff d7                	call   edi
c001fd65:	83 c4 14             	add    esp,0x14
c001fd68:	53                   	push   ebx
c001fd69:	e8 62 a7 ff ff       	call   c001a4d0 <File::close()>
c001fd6e:	83 c4 10             	add    esp,0x10
c001fd71:	56                   	push   esi
c001fd72:	31 f6                	xor    esi,esi
c001fd74:	68 00 01 00 00       	push   0x100
c001fd79:	6a 00                	push   0x0
c001fd7b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001fd7f:	50                   	push   eax
c001fd80:	e8 6b 07 fe ff       	call   c00004f0 <memset>
c001fd85:	5f                   	pop    edi
c001fd86:	58                   	pop    eax
c001fd87:	6a 01                	push   0x1
c001fd89:	53                   	push   ebx
c001fd8a:	e8 e3 a6 ff ff       	call   c001a472 <File::open(FileOpenMode)>
c001fd8f:	83 c4 10             	add    esp,0x10
c001fd92:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001fd9a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001fda2:	83 ec 0c             	sub    esp,0xc
c001fda5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fda7:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001fdab:	51                   	push   ecx
c001fdac:	8d 54 24 23          	lea    edx,[esp+0x23]
c001fdb0:	52                   	push   edx
c001fdb1:	6a 00                	push   0x0
c001fdb3:	6a 01                	push   0x1
c001fdb5:	53                   	push   ebx
c001fdb6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001fdb9:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c001fdbe:	83 c4 20             	add    esp,0x20
c001fdc1:	89 c2                	mov    edx,eax
c001fdc3:	85 c0                	test   eax,eax
c001fdc5:	0f 84 36 01 00 00    	je     c001ff01 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c001fdcb:	83 f8 0d             	cmp    eax,0xd
c001fdce:	0f 84 22 01 00 00    	je     c001fef6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fdd4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fdd9:	0f 84 f0 00 00 00    	je     c001fecf <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c001fddf:	83 f8 0a             	cmp    eax,0xa
c001fde2:	74 13                	je     c001fdf7 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001fde4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fde9:	74 0c                	je     c001fdf7 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001fdeb:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001fdf1:	0f 8e f6 00 00 00    	jle    c001feed <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c001fdf7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fdfb:	83 ec 0c             	sub    esp,0xc
c001fdfe:	8d 78 01             	lea    edi,[eax+0x1]
c001fe01:	57                   	push   edi
c001fe02:	e8 b7 65 ff ff       	call   c00163be <malloc>
c001fe07:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001fe0b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001fe0f:	8d 56 04             	lea    edx,[esi+0x4]
c001fe12:	89 14 24             	mov    DWORD PTR [esp],edx
c001fe15:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001fe19:	e8 a0 65 ff ff       	call   c00163be <malloc>
c001fe1e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001fe22:	83 c4 0c             	add    esp,0xc
c001fe25:	57                   	push   edi
c001fe26:	6a 00                	push   0x0
c001fe28:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001fe2c:	e8 bf 06 fe ff       	call   c00004f0 <memset>
c001fe31:	8d 74 24 30          	lea    esi,[esp+0x30]
c001fe35:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001fe39:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001fe3d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fe3f:	83 c4 0c             	add    esp,0xc
c001fe42:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fe46:	52                   	push   edx
c001fe47:	6a 00                	push   0x0
c001fe49:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001fe4d:	e8 9e 06 fe ff       	call   c00004f0 <memset>
c001fe52:	8d 74 24 30          	lea    esi,[esp+0x30]
c001fe56:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001fe5a:	89 34 24             	mov    DWORD PTR [esp],esi
c001fe5d:	e8 0e 07 fe ff       	call   c0000570 <strlen>
c001fe62:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001fe66:	89 c1                	mov    ecx,eax
c001fe68:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fe6a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001fe6d:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001fe70:	40                   	inc    eax
c001fe71:	83 c4 10             	add    esp,0x10
c001fe74:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001fe77:	85 d2                	test   edx,edx
c001fe79:	75 0c                	jne    c001fe87 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c001fe7b:	83 ec 0c             	sub    esp,0xc
c001fe7e:	6a 08                	push   0x8
c001fe80:	e8 39 65 ff ff       	call   c00163be <malloc>
c001fe85:	eb 0c                	jmp    c001fe93 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c001fe87:	c1 e0 03             	shl    eax,0x3
c001fe8a:	51                   	push   ecx
c001fe8b:	51                   	push   ecx
c001fe8c:	50                   	push   eax
c001fe8d:	52                   	push   edx
c001fe8e:	e8 17 65 ff ff       	call   c00163aa <realloc>
c001fe93:	83 c4 10             	add    esp,0x10
c001fe96:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001fe99:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001fe9c:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001fe9f:	8d 74 24 18          	lea    esi,[esp+0x18]
c001fea3:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001fea7:	b9 08 00 00 00       	mov    ecx,0x8
c001feac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001feae:	31 f6                	xor    esi,esi
c001feb0:	50                   	push   eax
c001feb1:	68 00 01 00 00       	push   0x100
c001feb6:	6a 00                	push   0x0
c001feb8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001febc:	50                   	push   eax
c001febd:	e8 2e 06 fe ff       	call   c00004f0 <memset>
c001fec2:	83 c4 10             	add    esp,0x10
c001fec5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001fecd:	eb 27                	jmp    c001fef6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fecf:	83 f8 3d             	cmp    eax,0x3d
c001fed2:	74 1e                	je     c001fef2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c001fed4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001feda:	7f 07                	jg     c001fee3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c001fedc:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c001fee0:	46                   	inc    esi
c001fee1:	eb 13                	jmp    c001fef6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fee3:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001feeb:	eb 09                	jmp    c001fef6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001feed:	83 f8 3d             	cmp    eax,0x3d
c001fef0:	75 ea                	jne    c001fedc <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c001fef2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001fef6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fefb:	0f 85 99 fe ff ff    	jne    c001fd9a <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001ff01:	83 ec 0c             	sub    esp,0xc
c001ff04:	53                   	push   ebx
c001ff05:	e8 c6 a5 ff ff       	call   c001a4d0 <File::close()>
c001ff0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ff0c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ff0f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ff12:	81 c4 3c 01 00 00    	add    esp,0x13c
c001ff18:	5b                   	pop    ebx
c001ff19:	5e                   	pop    esi
c001ff1a:	5f                   	pop    edi
c001ff1b:	5d                   	pop    ebp
c001ff1c:	c3                   	ret    
c001ff1d:	90                   	nop

c001ff1e <EnvVarContainer::__loadSystem()>:
c001ff1e:	83 ec 10             	sub    esp,0x10
c001ff21:	68 c0 41 03 c0       	push   0xc00341c0
c001ff26:	68 4c 28 03 c0       	push   0xc003284c
c001ff2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff2f:	e8 c6 fd ff ff       	call   c001fcfa <EnvVarContainer::loadFrom(char const*, char const*)>
c001ff34:	83 c4 1c             	add    esp,0x1c
c001ff37:	c3                   	ret    

c001ff38 <EnvVarContainer::__loadUser()>:
c001ff38:	c3                   	ret    
c001ff39:	90                   	nop

c001ff3a <EnvVarContainer::EnvVarContainer(Process*)>:
c001ff3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff3e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ff44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff4c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ff4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff53:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ff5a:	90                   	nop
c001ff5b:	c3                   	ret    

c001ff5c <EnvVarContainer::~EnvVarContainer()>:
c001ff5c:	83 ec 0c             	sub    esp,0xc
c001ff5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff63:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff66:	85 c0                	test   eax,eax
c001ff68:	74 1d                	je     c001ff87 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001ff6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff6e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff70:	85 c0                	test   eax,eax
c001ff72:	74 13                	je     c001ff87 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001ff74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff7b:	83 ec 0c             	sub    esp,0xc
c001ff7e:	50                   	push   eax
c001ff7f:	e8 4a 64 ff ff       	call   c00163ce <free>
c001ff84:	83 c4 10             	add    esp,0x10
c001ff87:	90                   	nop
c001ff88:	83 c4 0c             	add    esp,0xc
c001ff8b:	c3                   	ret    

c001ff8c <KeGetEnv(Process*, char const*)>:
c001ff8c:	53                   	push   ebx
c001ff8d:	83 ec 08             	sub    esp,0x8
c001ff90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff94:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ff98:	39 05 f8 01 04 c0    	cmp    DWORD PTR ds:0xc00401f8,eax
c001ff9e:	74 04                	je     c001ffa4 <KeGetEnv(Process*, char const*)+0x18>
c001ffa0:	85 c0                	test   eax,eax
c001ffa2:	75 0b                	jne    c001ffaf <KeGetEnv(Process*, char const*)+0x23>
c001ffa4:	a1 80 f9 03 c0       	mov    eax,ds:0xc003f980
c001ffa9:	85 c0                	test   eax,eax
c001ffab:	75 19                	jne    c001ffc6 <KeGetEnv(Process*, char const*)+0x3a>
c001ffad:	eb 27                	jmp    c001ffd6 <KeGetEnv(Process*, char const*)+0x4a>
c001ffaf:	52                   	push   edx
c001ffb0:	52                   	push   edx
c001ffb1:	53                   	push   ebx
c001ffb2:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001ffb8:	e8 3b fc ff ff       	call   c001fbf8 <EnvVarContainer::getEnv(char const*)>
c001ffbd:	83 c4 10             	add    esp,0x10
c001ffc0:	85 c0                	test   eax,eax
c001ffc2:	75 28                	jne    c001ffec <KeGetEnv(Process*, char const*)+0x60>
c001ffc4:	eb de                	jmp    c001ffa4 <KeGetEnv(Process*, char const*)+0x18>
c001ffc6:	52                   	push   edx
c001ffc7:	52                   	push   edx
c001ffc8:	53                   	push   ebx
c001ffc9:	50                   	push   eax
c001ffca:	e8 29 fc ff ff       	call   c001fbf8 <EnvVarContainer::getEnv(char const*)>
c001ffcf:	83 c4 10             	add    esp,0x10
c001ffd2:	85 c0                	test   eax,eax
c001ffd4:	75 16                	jne    c001ffec <KeGetEnv(Process*, char const*)+0x60>
c001ffd6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001ffda:	a1 84 f9 03 c0       	mov    eax,ds:0xc003f984
c001ffdf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ffe3:	83 c4 08             	add    esp,0x8
c001ffe6:	5b                   	pop    ebx
c001ffe7:	e9 0c fc ff ff       	jmp    c001fbf8 <EnvVarContainer::getEnv(char const*)>
c001ffec:	83 c4 08             	add    esp,0x8
c001ffef:	5b                   	pop    ebx
c001fff0:	c3                   	ret    

c001fff1 <KeSetEnvSystem(char const*, char const*)>:
c001fff1:	83 ec 10             	sub    esp,0x10
c001fff4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fff8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fffc:	ff 35 84 f9 03 c0    	push   DWORD PTR ds:0xc003f984
c0020002:	e8 2f fc ff ff       	call   c001fc36 <EnvVarContainer::setEnv(char const*, char const*)>
c0020007:	83 c4 1c             	add    esp,0x1c
c002000a:	c3                   	ret    

c002000b <KeSetEnvUser(char const*, char const*)>:
c002000b:	a1 80 f9 03 c0       	mov    eax,ds:0xc003f980
c0020010:	85 c0                	test   eax,eax
c0020012:	74 15                	je     c0020029 <KeSetEnvUser(char const*, char const*)+0x1e>
c0020014:	83 ec 10             	sub    esp,0x10
c0020017:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002001b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002001f:	50                   	push   eax
c0020020:	e8 11 fc ff ff       	call   c001fc36 <EnvVarContainer::setEnv(char const*, char const*)>
c0020025:	83 c4 1c             	add    esp,0x1c
c0020028:	c3                   	ret    
c0020029:	c3                   	ret    

c002002a <KeSetEnvProcess(Process*, char const*, char const*)>:
c002002a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002002e:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0020034:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020038:	e9 f9 fb ff ff       	jmp    c001fc36 <EnvVarContainer::setEnv(char const*, char const*)>

c002003d <KeDeleteEnvSystem(char const*)>:
c002003d:	c3                   	ret    

c002003e <KeDeleteEnvUser(char const*)>:
c002003e:	c3                   	ret    

c002003f <KeDeleteEnvProcess(Process*, char const*)>:
c002003f:	c3                   	ret    

c0020040 <KeNewProcessEnv(Process*)>:
c0020040:	83 ec 28             	sub    esp,0x28
c0020043:	6a 0c                	push   0xc
c0020045:	e8 74 63 ff ff       	call   c00163be <malloc>
c002004a:	5a                   	pop    edx
c002004b:	59                   	pop    ecx
c002004c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020050:	50                   	push   eax
c0020051:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020055:	e8 e0 fe ff ff       	call   c001ff3a <EnvVarContainer::EnvVarContainer(Process*)>
c002005a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002005e:	83 c4 2c             	add    esp,0x2c
c0020061:	c3                   	ret    

c0020062 <KeCopyProcessEnv(Process*, Process*)>:
c0020062:	57                   	push   edi
c0020063:	56                   	push   esi
c0020064:	53                   	push   ebx
c0020065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020069:	83 ec 0c             	sub    esp,0xc
c002006c:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0020072:	6a 0c                	push   0xc
c0020074:	e8 45 63 ff ff       	call   c00163be <malloc>
c0020079:	89 c3                	mov    ebx,eax
c002007b:	58                   	pop    eax
c002007c:	5a                   	pop    edx
c002007d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020081:	53                   	push   ebx
c0020082:	e8 b3 fe ff ff       	call   c001ff3a <EnvVarContainer::EnvVarContainer(Process*)>
c0020087:	8b 07                	mov    eax,DWORD PTR [edi]
c0020089:	89 03                	mov    DWORD PTR [ebx],eax
c002008b:	c1 e0 03             	shl    eax,0x3
c002008e:	89 04 24             	mov    DWORD PTR [esp],eax
c0020091:	e8 28 63 ff ff       	call   c00163be <malloc>
c0020096:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0020099:	8b 0f                	mov    ecx,DWORD PTR [edi]
c002009b:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c002009e:	c1 e1 03             	shl    ecx,0x3
c00200a1:	89 c7                	mov    edi,eax
c00200a3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00200a5:	83 c4 10             	add    esp,0x10
c00200a8:	89 d8                	mov    eax,ebx
c00200aa:	5b                   	pop    ebx
c00200ab:	5e                   	pop    esi
c00200ac:	5f                   	pop    edi
c00200ad:	c3                   	ret    

c00200ae <KeLoadSystemEnv()>:
c00200ae:	53                   	push   ebx
c00200af:	83 ec 14             	sub    esp,0x14
c00200b2:	6a 0c                	push   0xc
c00200b4:	e8 05 63 ff ff       	call   c00163be <malloc>
c00200b9:	89 c3                	mov    ebx,eax
c00200bb:	58                   	pop    eax
c00200bc:	5a                   	pop    edx
c00200bd:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00200c3:	53                   	push   ebx
c00200c4:	e8 71 fe ff ff       	call   c001ff3a <EnvVarContainer::EnvVarContainer(Process*)>
c00200c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00200cc:	89 1d 84 f9 03 c0    	mov    DWORD PTR ds:0xc003f984,ebx
c00200d2:	e8 47 fe ff ff       	call   c001ff1e <EnvVarContainer::__loadSystem()>
c00200d7:	83 c4 18             	add    esp,0x18
c00200da:	5b                   	pop    ebx
c00200db:	c3                   	ret    

c00200dc <KeLoadUserEnv()>:
c00200dc:	53                   	push   ebx
c00200dd:	83 ec 14             	sub    esp,0x14
c00200e0:	6a 0c                	push   0xc
c00200e2:	e8 d7 62 ff ff       	call   c00163be <malloc>
c00200e7:	89 c3                	mov    ebx,eax
c00200e9:	58                   	pop    eax
c00200ea:	5a                   	pop    edx
c00200eb:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00200f1:	53                   	push   ebx
c00200f2:	e8 43 fe ff ff       	call   c001ff3a <EnvVarContainer::EnvVarContainer(Process*)>
c00200f7:	89 1d 80 f9 03 c0    	mov    DWORD PTR ds:0xc003f980,ebx
c00200fd:	83 c4 18             	add    esp,0x18
c0020100:	5b                   	pop    ebx
c0020101:	c3                   	ret    

c0020102 <KeFlushEnv()>:
c0020102:	c3                   	ret    

c0020103 <KeGetProcessTotalEnvCount(Process*)>:
c0020103:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020107:	8b 15 80 f9 03 c0    	mov    edx,DWORD PTR ds:0xc003f980
c002010d:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0020113:	a1 84 f9 03 c0       	mov    eax,ds:0xc003f984
c0020118:	8b 00                	mov    eax,DWORD PTR [eax]
c002011a:	03 01                	add    eax,DWORD PTR [ecx]
c002011c:	85 d2                	test   edx,edx
c002011e:	74 02                	je     c0020122 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0020120:	03 02                	add    eax,DWORD PTR [edx]
c0020122:	c3                   	ret    

c0020123 <KeGetProcessEnvPair(Process*, int)>:
c0020123:	57                   	push   edi
c0020124:	56                   	push   esi
c0020125:	8b 35 80 f9 03 c0    	mov    esi,DWORD PTR ds:0xc003f980
c002012b:	53                   	push   ebx
c002012c:	85 f6                	test   esi,esi
c002012e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020132:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020136:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c002013c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020140:	8b 01                	mov    eax,DWORD PTR [ecx]
c0020142:	75 16                	jne    c002015a <KeGetProcessEnvPair(Process*, int)+0x37>
c0020144:	39 c2                	cmp    edx,eax
c0020146:	7c 16                	jl     c002015e <KeGetProcessEnvPair(Process*, int)+0x3b>
c0020148:	8b 0d 84 f9 03 c0    	mov    ecx,DWORD PTR ds:0xc003f984
c002014e:	8b 31                	mov    esi,DWORD PTR [ecx]
c0020150:	01 c6                	add    esi,eax
c0020152:	39 d6                	cmp    esi,edx
c0020154:	7e 3c                	jle    c0020192 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0020156:	29 c2                	sub    edx,eax
c0020158:	eb 04                	jmp    c002015e <KeGetProcessEnvPair(Process*, int)+0x3b>
c002015a:	39 c2                	cmp    edx,eax
c002015c:	7d 05                	jge    c0020163 <KeGetProcessEnvPair(Process*, int)+0x40>
c002015e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0020161:	eb 20                	jmp    c0020183 <KeGetProcessEnvPair(Process*, int)+0x60>
c0020163:	8b 3e                	mov    edi,DWORD PTR [esi]
c0020165:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0020168:	39 d1                	cmp    ecx,edx
c002016a:	7e 04                	jle    c0020170 <KeGetProcessEnvPair(Process*, int)+0x4d>
c002016c:	29 c2                	sub    edx,eax
c002016e:	eb 10                	jmp    c0020180 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0020170:	8b 35 84 f9 03 c0    	mov    esi,DWORD PTR ds:0xc003f984
c0020176:	03 0e                	add    ecx,DWORD PTR [esi]
c0020178:	39 d1                	cmp    ecx,edx
c002017a:	7e 16                	jle    c0020192 <KeGetProcessEnvPair(Process*, int)+0x6f>
c002017c:	29 c2                	sub    edx,eax
c002017e:	29 fa                	sub    edx,edi
c0020180:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0020183:	8d 14 d0             	lea    edx,[eax+edx*8]
c0020186:	8b 02                	mov    eax,DWORD PTR [edx]
c0020188:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c002018b:	89 03                	mov    DWORD PTR [ebx],eax
c002018d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0020190:	eb 1d                	jmp    c00201af <KeGetProcessEnvPair(Process*, int)+0x8c>
c0020192:	83 ec 0c             	sub    esp,0xc
c0020195:	68 6e 28 03 c0       	push   0xc003286e
c002019a:	e8 c7 00 00 00       	call   c0020266 <KePanic(char const*)>
c002019f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00201a5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00201ac:	83 c4 10             	add    esp,0x10
c00201af:	89 d8                	mov    eax,ebx
c00201b1:	5b                   	pop    ebx
c00201b2:	5e                   	pop    esi
c00201b3:	5f                   	pop    edi
c00201b4:	c2 04 00             	ret    0x4

c00201b7 <CPU::current()>:
c00201b7:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00201bc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00201c2:	c3                   	ret    

c00201c3 <operator new(unsigned long)>:
c00201c3:	e9 f6 61 ff ff       	jmp    c00163be <malloc>

c00201c8 <operator delete(void*)>:
c00201c8:	e9 11 62 ff ff       	jmp    c00163de <rfree>

c00201cd <disableIRQs()>:
c00201cd:	fa                   	cli    
c00201ce:	c3                   	ret    

c00201cf <enableIRQs()>:
c00201cf:	fb                   	sti    
c00201d0:	c3                   	ret    

c00201d1 <lockScheduler()>:
c00201d1:	fa                   	cli    
c00201d2:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c00201d8:	c3                   	ret    

c00201d9 <unlockScheduler()>:
c00201d9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00201de:	48                   	dec    eax
c00201df:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00201e4:	75 01                	jne    c00201e7 <unlockScheduler()+0xe>
c00201e6:	fb                   	sti    
c00201e7:	c3                   	ret    

c00201e8 <lockStuff()>:
c00201e8:	fa                   	cli    
c00201e9:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c00201ef:	ff 05 cc 01 04 c0    	inc    DWORD PTR ds:0xc00401cc
c00201f5:	c3                   	ret    

c00201f6 <unlockStuff()>:
c00201f6:	83 ec 0c             	sub    esp,0xc
c00201f9:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00201fe:	48                   	dec    eax
c00201ff:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020204:	75 18                	jne    c002021e <unlockStuff()+0x28>
c0020206:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c002020d:	74 0f                	je     c002021e <unlockStuff()+0x28>
c002020f:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020219:	e8 3e 50 00 00       	call   c002525c <schedule()>
c002021e:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020223:	48                   	dec    eax
c0020224:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020229:	75 01                	jne    c002022c <unlockStuff()+0x36>
c002022b:	fb                   	sti    
c002022c:	83 c4 0c             	add    esp,0xc
c002022f:	c3                   	ret    

c0020230 <Virt::getAKernelVAS()>:
c0020230:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c0020235:	c3                   	ret    

c0020236 <__not_memcpy>:
c0020236:	57                   	push   edi
c0020237:	56                   	push   esi
c0020238:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002023c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020240:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020244:	89 c7                	mov    edi,eax
c0020246:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020248:	5e                   	pop    esi
c0020249:	5f                   	pop    edi
c002024a:	c3                   	ret    
c002024b:	90                   	nop

c002024c <Mutex::Mutex()>:
c002024c:	83 ec 0c             	sub    esp,0xc
c002024f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020253:	83 ec 08             	sub    esp,0x8
c0020256:	6a 01                	push   0x1
c0020258:	50                   	push   eax
c0020259:	e8 b2 03 00 00       	call   c0020610 <Semaphore::Semaphore(int)>
c002025e:	83 c4 10             	add    esp,0x10
c0020261:	90                   	nop
c0020262:	83 c4 0c             	add    esp,0xc
c0020265:	c3                   	ret    

c0020266 <KePanic(char const*)>:
c0020266:	c6 05 88 f9 03 c0 01 	mov    BYTE PTR ds:0xc003f988,0x1
c002026d:	e9 e4 6c 00 00       	jmp    c0026f56 <HalPanic(char const*)>

c0020272 <KePowerThread(void*)>:
c0020272:	83 ec 0c             	sub    esp,0xc
c0020275:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002027a:	48                   	dec    eax
c002027b:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020280:	75 01                	jne    c0020283 <KePowerThread(void*)+0x11>
c0020282:	fb                   	sti    
c0020283:	83 ec 0c             	sub    esp,0xc
c0020286:	c6 05 a0 f9 03 c0 00 	mov    BYTE PTR ds:0xc003f9a0,0x0
c002028d:	6a 0a                	push   0xa
c002028f:	e8 b4 51 00 00       	call   c0025448 <sleep(unsigned int)>
c0020294:	83 05 e4 f9 03 c0 0a 	add    DWORD PTR ds:0xc003f9e4,0xa
c002029b:	83 c4 10             	add    esp,0x10
c002029e:	eb e3                	jmp    c0020283 <KePowerThread(void*)+0x11>

c00202a0 <KeChangePowerSettings(PowerSettings)>:
c00202a0:	57                   	push   edi
c00202a1:	b9 09 00 00 00       	mov    ecx,0x9
c00202a6:	56                   	push   esi
c00202a7:	bf c0 f9 03 c0       	mov    edi,0xc003f9c0
c00202ac:	fc                   	cld    
c00202ad:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00202b1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00202b3:	5e                   	pop    esi
c00202b4:	5f                   	pop    edi
c00202b5:	c3                   	ret    

c00202b6 <KeUserIOReceived()>:
c00202b6:	c7 05 e4 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9e4,0x0
c00202c0:	c3                   	ret    

c00202c1 <KeHandlePowerButton()>:
c00202c1:	83 ec 0c             	sub    esp,0xc
c00202c4:	a1 c0 f9 03 c0       	mov    eax,ds:0xc003f9c0
c00202c9:	83 f8 02             	cmp    eax,0x2
c00202cc:	75 10                	jne    c00202de <KeHandlePowerButton()+0x1d>
c00202ce:	83 ec 0c             	sub    esp,0xc
c00202d1:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00202d7:	e8 54 57 ff ff       	call   c0015a30 <Computer::shutdown()>
c00202dc:	eb 11                	jmp    c00202ef <KeHandlePowerButton()+0x2e>
c00202de:	48                   	dec    eax
c00202df:	75 11                	jne    c00202f2 <KeHandlePowerButton()+0x31>
c00202e1:	83 ec 0c             	sub    esp,0xc
c00202e4:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00202ea:	e8 71 57 ff ff       	call   c0015a60 <Computer::sleep()>
c00202ef:	83 c4 10             	add    esp,0x10
c00202f2:	83 c4 0c             	add    esp,0xc
c00202f5:	c3                   	ret    

c00202f6 <KeHandleSleepButton()>:
c00202f6:	83 ec 0c             	sub    esp,0xc
c00202f9:	a1 c4 f9 03 c0       	mov    eax,ds:0xc003f9c4
c00202fe:	83 f8 02             	cmp    eax,0x2
c0020301:	75 10                	jne    c0020313 <KeHandleSleepButton()+0x1d>
c0020303:	83 ec 0c             	sub    esp,0xc
c0020306:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002030c:	e8 1f 57 ff ff       	call   c0015a30 <Computer::shutdown()>
c0020311:	eb 11                	jmp    c0020324 <KeHandleSleepButton()+0x2e>
c0020313:	48                   	dec    eax
c0020314:	75 11                	jne    c0020327 <KeHandleSleepButton()+0x31>
c0020316:	83 ec 0c             	sub    esp,0xc
c0020319:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002031f:	e8 3c 57 ff ff       	call   c0015a60 <Computer::sleep()>
c0020324:	83 c4 10             	add    esp,0x10
c0020327:	83 c4 0c             	add    esp,0xc
c002032a:	c3                   	ret    

c002032b <KeSetupPowerManager()>:
c002032b:	83 ec 0c             	sub    esp,0xc
c002032e:	c7 05 e4 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9e4,0x0
c0020338:	68 f0 00 00 00       	push   0xf0
c002033d:	c6 05 a0 f9 03 c0 00 	mov    BYTE PTR ds:0xc003f9a0,0x0
c0020344:	6a 00                	push   0x0
c0020346:	68 72 02 02 c0       	push   0xc0020272
c002034b:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0020351:	e8 b6 4c 00 00       	call   c002500c <Process::createThread(void (*)(void*), void*, int)>
c0020356:	c7 05 c0 f9 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc003f9c0,0x2
c0020360:	c7 05 c4 f9 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003f9c4,0x1
c002036a:	c7 05 c8 f9 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc003f9c8,0x3
c0020374:	c7 05 cc f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9cc,0x0
c002037e:	c7 05 d8 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9d8,0x0
c0020388:	c7 05 d0 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9d0,0x0
c0020392:	c7 05 dc f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9dc,0x0
c002039c:	c7 05 d4 f9 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc003f9d4,0x3c
c00203a6:	c7 05 e0 f9 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc003f9e0,0x3c
c00203b0:	83 c4 1c             	add    esp,0x1c
c00203b3:	c3                   	ret    

c00203b4 <KeRand()>:
c00203b4:	69 05 e8 f9 03 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc003f9e8,0x2875
c00203be:	69 0d ec f9 03 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc003f9ec,0xa2e7b175
c00203c8:	53                   	push   ebx
c00203c9:	01 c1                	add    ecx,eax
c00203cb:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00203d0:	f7 25 e8 f9 03 c0    	mul    DWORD PTR ds:0xc003f9e8
c00203d6:	01 ca                	add    edx,ecx
c00203d8:	05 ef 04 b5 00       	add    eax,0xb504ef
c00203dd:	83 d2 00             	adc    edx,0x0
c00203e0:	a3 e8 f9 03 c0       	mov    ds:0xc003f9e8,eax
c00203e5:	0f b7 da             	movzx  ebx,dx
c00203e8:	89 da                	mov    edx,ebx
c00203ea:	89 1d ec f9 03 c0    	mov    DWORD PTR ds:0xc003f9ec,ebx
c00203f0:	0f ac d0 0e          	shrd   eax,edx,0xe
c00203f4:	5b                   	pop    ebx
c00203f5:	c3                   	ret    

c00203f6 <KeSeedRand(unsigned int)>:
c00203f6:	53                   	push   ebx
c00203f7:	83 ec 08             	sub    esp,0x8
c00203fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00203fe:	e8 72 6e 00 00       	call   c0027275 <HalGetRand()>
c0020403:	c7 05 ec f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9ec,0x0
c002040d:	31 d8                	xor    eax,ebx
c002040f:	a3 e8 f9 03 c0       	mov    ds:0xc003f9e8,eax
c0020414:	e8 9b ff ff ff       	call   c00203b4 <KeRand()>
c0020419:	83 c4 08             	add    esp,0x8
c002041c:	5b                   	pop    ebx
c002041d:	eb 95                	jmp    c00203b4 <KeRand()>

c002041f <KeInitRand()>:
c002041f:	83 ec 0c             	sub    esp,0xc
c0020422:	e8 43 6c 00 00       	call   c002706a <HalQueryPerformanceCounter()>
c0020427:	0f 20 da             	mov    edx,cr3
c002042a:	0f 22 da             	mov    cr3,edx
c002042d:	0f 20 da             	mov    edx,cr3
c0020430:	0f 22 da             	mov    cr3,edx
c0020433:	0f 20 da             	mov    edx,cr3
c0020436:	0f 22 da             	mov    cr3,edx
c0020439:	0f 20 da             	mov    edx,cr3
c002043c:	0f 22 da             	mov    cr3,edx
c002043f:	83 ec 0c             	sub    esp,0xc
c0020442:	35 03 8a 95 38       	xor    eax,0x38958a03
c0020447:	50                   	push   eax
c0020448:	e8 a9 ff ff ff       	call   c00203f6 <KeSeedRand(unsigned int)>
c002044d:	83 c4 1c             	add    esp,0x1c
c0020450:	c3                   	ret    
c0020451:	66 90                	xchg   ax,ax
c0020453:	90                   	nop

c0020454 <KeResolveCompatibilitySymbol(char*)>:
c0020454:	83 ec 0c             	sub    esp,0xc
c0020457:	83 ec 08             	sub    esp,0x8
c002045a:	68 88 28 03 c0       	push   0xc0032888
c002045f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020463:	e8 e8 02 fe ff       	call   c0000750 <strcmp>
c0020468:	83 c4 10             	add    esp,0x10
c002046b:	85 c0                	test   eax,eax
c002046d:	0f 94 c0             	sete   al
c0020470:	0f b6 c0             	movzx  eax,al
c0020473:	85 c0                	test   eax,eax
c0020475:	74 0d                	je     c0020484 <KeResolveCompatibilitySymbol(char*)+0x30>
c0020477:	b8 bc a9 03 c0       	mov    eax,0xc003a9bc
c002047c:	e9 8b 01 00 00       	jmp    c002060c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020481:	8d 76 00             	lea    esi,[esi+0x0]
c0020484:	83 ec 08             	sub    esp,0x8
c0020487:	68 91 28 03 c0       	push   0xc0032891
c002048c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020490:	e8 bb 02 fe ff       	call   c0000750 <strcmp>
c0020495:	83 c4 10             	add    esp,0x10
c0020498:	85 c0                	test   eax,eax
c002049a:	0f 94 c0             	sete   al
c002049d:	0f b6 c0             	movzx  eax,al
c00204a0:	85 c0                	test   eax,eax
c00204a2:	74 0c                	je     c00204b0 <KeResolveCompatibilitySymbol(char*)+0x5c>
c00204a4:	b8 60 e6 02 c0       	mov    eax,0xc002e660
c00204a9:	e9 5e 01 00 00       	jmp    c002060c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00204ae:	66 90                	xchg   ax,ax
c00204b0:	83 ec 08             	sub    esp,0x8
c00204b3:	68 9b 28 03 c0       	push   0xc003289b
c00204b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204bc:	e8 8f 02 fe ff       	call   c0000750 <strcmp>
c00204c1:	83 c4 10             	add    esp,0x10
c00204c4:	85 c0                	test   eax,eax
c00204c6:	0f 94 c0             	sete   al
c00204c9:	0f b6 c0             	movzx  eax,al
c00204cc:	85 c0                	test   eax,eax
c00204ce:	74 0c                	je     c00204dc <KeResolveCompatibilitySymbol(char*)+0x88>
c00204d0:	b8 94 e3 02 c0       	mov    eax,0xc002e394
c00204d5:	e9 32 01 00 00       	jmp    c002060c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00204da:	66 90                	xchg   ax,ax
c00204dc:	83 ec 08             	sub    esp,0x8
c00204df:	68 a4 28 03 c0       	push   0xc00328a4
c00204e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204e8:	e8 63 02 fe ff       	call   c0000750 <strcmp>
c00204ed:	83 c4 10             	add    esp,0x10
c00204f0:	85 c0                	test   eax,eax
c00204f2:	0f 94 c0             	sete   al
c00204f5:	0f b6 c0             	movzx  eax,al
c00204f8:	85 c0                	test   eax,eax
c00204fa:	74 0c                	je     c0020508 <KeResolveCompatibilitySymbol(char*)+0xb4>
c00204fc:	b8 66 02 02 c0       	mov    eax,0xc0020266
c0020501:	e9 06 01 00 00       	jmp    c002060c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020506:	66 90                	xchg   ax,ax
c0020508:	83 ec 08             	sub    esp,0x8
c002050b:	68 b7 28 03 c0       	push   0xc00328b7
c0020510:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020514:	e8 37 02 fe ff       	call   c0000750 <strcmp>
c0020519:	83 c4 10             	add    esp,0x10
c002051c:	85 c0                	test   eax,eax
c002051e:	0f 94 c0             	sete   al
c0020521:	0f b6 c0             	movzx  eax,al
c0020524:	85 c0                	test   eax,eax
c0020526:	74 0c                	je     c0020534 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0020528:	b8 03 fb 01 c0       	mov    eax,0xc001fb03
c002052d:	e9 da 00 00 00       	jmp    c002060c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020532:	66 90                	xchg   ax,ax
c0020534:	83 ec 08             	sub    esp,0x8
c0020537:	68 d4 28 03 c0       	push   0xc00328d4
c002053c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020540:	e8 0b 02 fe ff       	call   c0000750 <strcmp>
c0020545:	83 c4 10             	add    esp,0x10
c0020548:	85 c0                	test   eax,eax
c002054a:	0f 94 c0             	sete   al
c002054d:	0f b6 c0             	movzx  eax,al
c0020550:	85 c0                	test   eax,eax
c0020552:	74 0c                	je     c0020560 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0020554:	b8 60 e7 02 c0       	mov    eax,0xc002e760
c0020559:	e9 ae 00 00 00       	jmp    c002060c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002055e:	66 90                	xchg   ax,ax
c0020560:	83 ec 08             	sub    esp,0x8
c0020563:	68 de 28 03 c0       	push   0xc00328de
c0020568:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002056c:	e8 df 01 fe ff       	call   c0000750 <strcmp>
c0020571:	83 c4 10             	add    esp,0x10
c0020574:	85 c0                	test   eax,eax
c0020576:	0f 94 c0             	sete   al
c0020579:	0f b6 c0             	movzx  eax,al
c002057c:	85 c0                	test   eax,eax
c002057e:	74 0c                	je     c002058c <KeResolveCompatibilitySymbol(char*)+0x138>
c0020580:	b8 e0 e4 02 c0       	mov    eax,0xc002e4e0
c0020585:	e9 82 00 00 00       	jmp    c002060c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002058a:	66 90                	xchg   ax,ax
c002058c:	83 ec 08             	sub    esp,0x8
c002058f:	68 e7 28 03 c0       	push   0xc00328e7
c0020594:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020598:	e8 b3 01 fe ff       	call   c0000750 <strcmp>
c002059d:	83 c4 10             	add    esp,0x10
c00205a0:	85 c0                	test   eax,eax
c00205a2:	0f 94 c0             	sete   al
c00205a5:	0f b6 c0             	movzx  eax,al
c00205a8:	85 c0                	test   eax,eax
c00205aa:	74 08                	je     c00205b4 <KeResolveCompatibilitySymbol(char*)+0x160>
c00205ac:	b8 c0 a9 03 c0       	mov    eax,0xc003a9c0
c00205b1:	eb 59                	jmp    c002060c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00205b3:	90                   	nop
c00205b4:	83 ec 08             	sub    esp,0x8
c00205b7:	68 ff 28 03 c0       	push   0xc00328ff
c00205bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205c0:	e8 8b 01 fe ff       	call   c0000750 <strcmp>
c00205c5:	83 c4 10             	add    esp,0x10
c00205c8:	85 c0                	test   eax,eax
c00205ca:	0f 94 c0             	sete   al
c00205cd:	0f b6 c0             	movzx  eax,al
c00205d0:	85 c0                	test   eax,eax
c00205d2:	74 08                	je     c00205dc <KeResolveCompatibilitySymbol(char*)+0x188>
c00205d4:	b8 c0 a9 03 c0       	mov    eax,0xc003a9c0
c00205d9:	eb 31                	jmp    c002060c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00205db:	90                   	nop
c00205dc:	83 ec 08             	sub    esp,0x8
c00205df:	68 0c 29 03 c0       	push   0xc003290c
c00205e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205e8:	e8 63 01 fe ff       	call   c0000750 <strcmp>
c00205ed:	83 c4 10             	add    esp,0x10
c00205f0:	85 c0                	test   eax,eax
c00205f2:	0f 94 c0             	sete   al
c00205f5:	0f b6 c0             	movzx  eax,al
c00205f8:	85 c0                	test   eax,eax
c00205fa:	74 08                	je     c0020604 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c00205fc:	b8 c1 a9 03 c0       	mov    eax,0xc003a9c1
c0020601:	eb 09                	jmp    c002060c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020603:	90                   	nop
c0020604:	b8 00 00 00 00       	mov    eax,0x0
c0020609:	8d 76 00             	lea    esi,[esi+0x0]
c002060c:	83 c4 0c             	add    esp,0xc
c002060f:	c3                   	ret    

c0020610 <Semaphore::Semaphore(int)>:
c0020610:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020614:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020618:	89 10                	mov    DWORD PTR [eax],edx
c002061a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002061e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0020625:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020629:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020634:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002063b:	90                   	nop
c002063c:	c3                   	ret    
c002063d:	90                   	nop
c002063e:	66 90                	xchg   ax,ax

c0020640 <Semaphore::tryAcquire()>:
c0020640:	83 ec 0c             	sub    esp,0xc
c0020643:	fa                   	cli    
c0020644:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020649:	83 c0 01             	add    eax,0x1
c002064c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020651:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020656:	83 c0 01             	add    eax,0x1
c0020659:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002065e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020662:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020669:	8b 00                	mov    eax,DWORD PTR [eax]
c002066b:	39 c2                	cmp    edx,eax
c002066d:	7d 5d                	jge    c00206cc <Semaphore::tryAcquire()+0x8c>
c002066f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020673:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020676:	8d 50 01             	lea    edx,[eax+0x1]
c0020679:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002067d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0020680:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020685:	83 e8 01             	sub    eax,0x1
c0020688:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002068d:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020692:	85 c0                	test   eax,eax
c0020694:	75 1a                	jne    c00206b0 <Semaphore::tryAcquire()+0x70>
c0020696:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c002069b:	85 c0                	test   eax,eax
c002069d:	74 11                	je     c00206b0 <Semaphore::tryAcquire()+0x70>
c002069f:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00206a9:	e8 ae 4b 00 00       	call   c002525c <schedule()>
c00206ae:	66 90                	xchg   ax,ax
c00206b0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00206b5:	83 e8 01             	sub    eax,0x1
c00206b8:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00206bd:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00206c2:	85 c0                	test   eax,eax
c00206c4:	75 02                	jne    c00206c8 <Semaphore::tryAcquire()+0x88>
c00206c6:	fb                   	sti    
c00206c7:	90                   	nop
c00206c8:	b0 01                	mov    al,0x1
c00206ca:	eb 4c                	jmp    c0020718 <Semaphore::tryAcquire()+0xd8>
c00206cc:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00206d1:	83 e8 01             	sub    eax,0x1
c00206d4:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00206d9:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00206de:	85 c0                	test   eax,eax
c00206e0:	75 1a                	jne    c00206fc <Semaphore::tryAcquire()+0xbc>
c00206e2:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00206e7:	85 c0                	test   eax,eax
c00206e9:	74 11                	je     c00206fc <Semaphore::tryAcquire()+0xbc>
c00206eb:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00206f5:	e8 62 4b 00 00       	call   c002525c <schedule()>
c00206fa:	66 90                	xchg   ax,ax
c00206fc:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020701:	83 e8 01             	sub    eax,0x1
c0020704:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020709:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002070e:	85 c0                	test   eax,eax
c0020710:	75 02                	jne    c0020714 <Semaphore::tryAcquire()+0xd4>
c0020712:	fb                   	sti    
c0020713:	90                   	nop
c0020714:	b0 00                	mov    al,0x0
c0020716:	66 90                	xchg   ax,ax
c0020718:	83 c4 0c             	add    esp,0xc
c002071b:	c3                   	ret    

c002071c <Semaphore::assertLocked(char const*)>:
c002071c:	83 ec 0c             	sub    esp,0xc
c002071f:	fa                   	cli    
c0020720:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020725:	83 c0 01             	add    eax,0x1
c0020728:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002072d:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020732:	83 c0 01             	add    eax,0x1
c0020735:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002073a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002073e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020741:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020745:	8b 00                	mov    eax,DWORD PTR [eax]
c0020747:	39 c2                	cmp    edx,eax
c0020749:	7d 11                	jge    c002075c <Semaphore::assertLocked(char const*)+0x40>
c002074b:	83 ec 0c             	sub    esp,0xc
c002074e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020752:	e8 0f fb ff ff       	call   c0020266 <KePanic(char const*)>
c0020757:	83 c4 10             	add    esp,0x10
c002075a:	66 90                	xchg   ax,ax
c002075c:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020761:	83 e8 01             	sub    eax,0x1
c0020764:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020769:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002076e:	85 c0                	test   eax,eax
c0020770:	75 1a                	jne    c002078c <Semaphore::assertLocked(char const*)+0x70>
c0020772:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0020777:	85 c0                	test   eax,eax
c0020779:	74 11                	je     c002078c <Semaphore::assertLocked(char const*)+0x70>
c002077b:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020785:	e8 d2 4a 00 00       	call   c002525c <schedule()>
c002078a:	66 90                	xchg   ax,ax
c002078c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020791:	83 e8 01             	sub    eax,0x1
c0020794:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020799:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002079e:	85 c0                	test   eax,eax
c00207a0:	75 02                	jne    c00207a4 <Semaphore::assertLocked(char const*)+0x88>
c00207a2:	fb                   	sti    
c00207a3:	90                   	nop
c00207a4:	90                   	nop
c00207a5:	83 c4 0c             	add    esp,0xc
c00207a8:	c3                   	ret    
c00207a9:	90                   	nop
c00207aa:	66 90                	xchg   ax,ax

c00207ac <Semaphore::acquire(int)>:
c00207ac:	83 ec 1c             	sub    esp,0x1c
c00207af:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00207b4:	0f 84 9a 00 00 00    	je     c0020854 <Semaphore::acquire(int)+0xa8>
c00207ba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00207c2:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00207c7:	90                   	nop
c00207c8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00207cd:	85 c0                	test   eax,eax
c00207cf:	74 77                	je     c0020848 <Semaphore::acquire(int)+0x9c>
c00207d1:	83 ec 0c             	sub    esp,0xc
c00207d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00207d8:	e8 63 fe ff ff       	call   c0020640 <Semaphore::tryAcquire()>
c00207dd:	83 c4 10             	add    esp,0x10
c00207e0:	83 f0 01             	xor    eax,0x1
c00207e3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00207e7:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00207eb:	83 f0 01             	xor    eax,0x1
c00207ee:	0f b6 c0             	movzx  eax,al
c00207f1:	85 c0                	test   eax,eax
c00207f3:	75 4f                	jne    c0020844 <Semaphore::acquire(int)+0x98>
c00207f5:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c00207fa:	7f 2c                	jg     c0020828 <Semaphore::acquire(int)+0x7c>
c00207fc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020800:	89 d0                	mov    eax,edx
c0020802:	c1 e0 02             	shl    eax,0x2
c0020805:	01 d0                	add    eax,edx
c0020807:	01 c0                	add    eax,eax
c0020809:	83 ec 0c             	sub    esp,0xc
c002080c:	50                   	push   eax
c002080d:	e8 22 4c 00 00       	call   c0025434 <milliTenthSleep(unsigned int)>
c0020812:	83 c4 10             	add    esp,0x10
c0020815:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020819:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c002081d:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0020825:	eb a1                	jmp    c00207c8 <Semaphore::acquire(int)+0x1c>
c0020827:	90                   	nop
c0020828:	83 ec 0c             	sub    esp,0xc
c002082b:	68 90 01 00 00       	push   0x190
c0020830:	e8 ff 4b 00 00       	call   c0025434 <milliTenthSleep(unsigned int)>
c0020835:	83 c4 10             	add    esp,0x10
c0020838:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c002083d:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0020842:	eb 84                	jmp    c00207c8 <Semaphore::acquire(int)+0x1c>
c0020844:	90                   	nop
c0020845:	8d 76 00             	lea    esi,[esi+0x0]
c0020848:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002084c:	e9 ff 00 00 00       	jmp    c0020950 <Semaphore::acquire(int)+0x1a4>
c0020851:	8d 76 00             	lea    esi,[esi+0x0]
c0020854:	fa                   	cli    
c0020855:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002085a:	83 c0 01             	add    eax,0x1
c002085d:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020862:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020867:	83 c0 01             	add    eax,0x1
c002086a:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002086f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020873:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020876:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002087a:	8b 00                	mov    eax,DWORD PTR [eax]
c002087c:	39 c2                	cmp    edx,eax
c002087e:	7d 14                	jge    c0020894 <Semaphore::acquire(int)+0xe8>
c0020880:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020884:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020887:	8d 50 01             	lea    edx,[eax+0x1]
c002088a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002088e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0020891:	eb 6d                	jmp    c0020900 <Semaphore::acquire(int)+0x154>
c0020893:	90                   	nop
c0020894:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0020899:	8b 00                	mov    eax,DWORD PTR [eax]
c002089b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00208a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00208a9:	85 c0                	test   eax,eax
c00208ab:	75 13                	jne    c00208c0 <Semaphore::acquire(int)+0x114>
c00208ad:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00208b2:	8b 10                	mov    edx,DWORD PTR [eax]
c00208b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208b8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00208bb:	eb 17                	jmp    c00208d4 <Semaphore::acquire(int)+0x128>
c00208bd:	8d 76 00             	lea    esi,[esi+0x0]
c00208c0:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00208c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208c9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00208cc:	8b 12                	mov    edx,DWORD PTR [edx]
c00208ce:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00208d1:	8d 76 00             	lea    esi,[esi+0x0]
c00208d4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00208d9:	8b 10                	mov    edx,DWORD PTR [eax]
c00208db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208df:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00208e2:	83 ec 0c             	sub    esp,0xc
c00208e5:	68 1c 29 03 c0       	push   0xc003291c
c00208ea:	e8 5e 89 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c00208ef:	83 c4 10             	add    esp,0x10
c00208f2:	83 ec 0c             	sub    esp,0xc
c00208f5:	6a 05                	push   0x5
c00208f7:	e8 1c 4a 00 00       	call   c0025318 <blockTask(TaskState)>
c00208fc:	83 c4 10             	add    esp,0x10
c00208ff:	90                   	nop
c0020900:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020905:	83 e8 01             	sub    eax,0x1
c0020908:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002090d:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020912:	85 c0                	test   eax,eax
c0020914:	75 1a                	jne    c0020930 <Semaphore::acquire(int)+0x184>
c0020916:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c002091b:	85 c0                	test   eax,eax
c002091d:	74 11                	je     c0020930 <Semaphore::acquire(int)+0x184>
c002091f:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020929:	e8 2e 49 00 00       	call   c002525c <schedule()>
c002092e:	66 90                	xchg   ax,ax
c0020930:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020935:	83 e8 01             	sub    eax,0x1
c0020938:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002093d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020942:	85 c0                	test   eax,eax
c0020944:	75 02                	jne    c0020948 <Semaphore::acquire(int)+0x19c>
c0020946:	fb                   	sti    
c0020947:	90                   	nop
c0020948:	b8 00 00 00 00       	mov    eax,0x0
c002094d:	8d 76 00             	lea    esi,[esi+0x0]
c0020950:	83 c4 1c             	add    esp,0x1c
c0020953:	c3                   	ret    

c0020954 <Semaphore::acquire()>:
c0020954:	83 ec 0c             	sub    esp,0xc
c0020957:	83 ec 08             	sub    esp,0x8
c002095a:	6a 00                	push   0x0
c002095c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020960:	e8 47 fe ff ff       	call   c00207ac <Semaphore::acquire(int)>
c0020965:	83 c4 10             	add    esp,0x10
c0020968:	90                   	nop
c0020969:	83 c4 0c             	add    esp,0xc
c002096c:	c3                   	ret    
c002096d:	90                   	nop
c002096e:	66 90                	xchg   ax,ax

c0020970 <Semaphore::release()>:
c0020970:	83 ec 1c             	sub    esp,0x1c
c0020973:	fa                   	cli    
c0020974:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020979:	83 c0 01             	add    eax,0x1
c002097c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020981:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020986:	83 c0 01             	add    eax,0x1
c0020989:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002098e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020992:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020995:	85 c0                	test   eax,eax
c0020997:	74 2b                	je     c00209c4 <Semaphore::release()+0x54>
c0020999:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002099d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00209a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00209a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00209a8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00209ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00209af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00209b2:	83 ec 0c             	sub    esp,0xc
c00209b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00209b9:	e8 96 4b 00 00       	call   c0025554 <unblockTask(ThreadControlBlock*)>
c00209be:	83 c4 10             	add    esp,0x10
c00209c1:	eb 15                	jmp    c00209d8 <Semaphore::release()+0x68>
c00209c3:	90                   	nop
c00209c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00209c8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00209cb:	8d 50 ff             	lea    edx,[eax-0x1]
c00209ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00209d2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00209d5:	8d 76 00             	lea    esi,[esi+0x0]
c00209d8:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00209dd:	83 e8 01             	sub    eax,0x1
c00209e0:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00209e5:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00209ea:	85 c0                	test   eax,eax
c00209ec:	75 1a                	jne    c0020a08 <Semaphore::release()+0x98>
c00209ee:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00209f3:	85 c0                	test   eax,eax
c00209f5:	74 11                	je     c0020a08 <Semaphore::release()+0x98>
c00209f7:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020a01:	e8 56 48 00 00       	call   c002525c <schedule()>
c0020a06:	66 90                	xchg   ax,ax
c0020a08:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020a0d:	83 e8 01             	sub    eax,0x1
c0020a10:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020a15:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020a1a:	85 c0                	test   eax,eax
c0020a1c:	75 02                	jne    c0020a20 <Semaphore::release()+0xb0>
c0020a1e:	fb                   	sti    
c0020a1f:	90                   	nop
c0020a20:	90                   	nop
c0020a21:	83 c4 1c             	add    esp,0x1c
c0020a24:	c3                   	ret    

c0020a25 <KiSigKill(int)>:
c0020a25:	83 ec 0c             	sub    esp,0xc
c0020a28:	6a 00                	push   0x0
c0020a2a:	6a 00                	push   0x0
c0020a2c:	6a ff                	push   0xffffffff
c0020a2e:	6a 01                	push   0x1
c0020a30:	e8 1d 46 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020a35:	83 c4 1c             	add    esp,0x1c
c0020a38:	c3                   	ret    

c0020a39 <KiDefaultSignalHandlerIgnore(int)>:
c0020a39:	c3                   	ret    

c0020a3a <KiDefaultSignalHandlerPause(int)>:
c0020a3a:	57                   	push   edi
c0020a3b:	b9 07 00 00 00       	mov    ecx,0x7
c0020a40:	56                   	push   esi
c0020a41:	be 77 29 03 c0       	mov    esi,0xc0032977
c0020a46:	83 ec 24             	sub    esp,0x24
c0020a49:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020a4d:	fc                   	cld    
c0020a4e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020a50:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020a54:	50                   	push   eax
c0020a55:	6a 00                	push   0x0
c0020a57:	6a 00                	push   0x0
c0020a59:	6a 27                	push   0x27
c0020a5b:	e8 f2 45 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020a60:	83 c4 34             	add    esp,0x34
c0020a63:	5e                   	pop    esi
c0020a64:	5f                   	pop    edi
c0020a65:	c3                   	ret    

c0020a66 <KiDefaultSignalHandlerResume(int)>:
c0020a66:	57                   	push   edi
c0020a67:	b9 1d 00 00 00       	mov    ecx,0x1d
c0020a6c:	56                   	push   esi
c0020a6d:	be 93 29 03 c0       	mov    esi,0xc0032993
c0020a72:	83 ec 24             	sub    esp,0x24
c0020a75:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0020a79:	fc                   	cld    
c0020a7a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020a7c:	8d 44 24 03          	lea    eax,[esp+0x3]
c0020a80:	50                   	push   eax
c0020a81:	6a 00                	push   0x0
c0020a83:	6a 00                	push   0x0
c0020a85:	6a 27                	push   0x27
c0020a87:	e8 c6 45 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020a8c:	83 c4 34             	add    esp,0x34
c0020a8f:	5e                   	pop    esi
c0020a90:	5f                   	pop    edi
c0020a91:	c3                   	ret    

c0020a92 <KeDeinitSignals(SigHandlerBlock*)>:
c0020a92:	e9 37 59 ff ff       	jmp    c00163ce <free>

c0020a97 <KeInitSignals()>:
c0020a97:	53                   	push   ebx
c0020a98:	83 ec 14             	sub    esp,0x14
c0020a9b:	68 c8 00 00 00       	push   0xc8
c0020aa0:	e8 19 59 ff ff       	call   c00163be <malloc>
c0020aa5:	83 c4 0c             	add    esp,0xc
c0020aa8:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0020ab2:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0020abc:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0020ac3:	89 c3                	mov    ebx,eax
c0020ac5:	6a 20                	push   0x20
c0020ac7:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0020acd:	6a 00                	push   0x0
c0020acf:	50                   	push   eax
c0020ad0:	e8 1b fa fd ff       	call   c00004f0 <memset>
c0020ad5:	83 c4 0c             	add    esp,0xc
c0020ad8:	6a 44                	push   0x44
c0020ada:	6a 00                	push   0x0
c0020adc:	53                   	push   ebx
c0020add:	e8 0e fa fd ff       	call   c00004f0 <memset>
c0020ae2:	89 d8                	mov    eax,ebx
c0020ae4:	83 c4 18             	add    esp,0x18
c0020ae7:	5b                   	pop    ebx
c0020ae8:	c3                   	ret    

c0020ae9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0020ae9:	53                   	push   ebx
c0020aea:	b8 01 00 00 00       	mov    eax,0x1
c0020aef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020af3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020af7:	83 f9 10             	cmp    ecx,0x10
c0020afa:	7f 21                	jg     c0020b1d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0020afc:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0020aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b03:	89 03                	mov    DWORD PTR [ebx],eax
c0020b05:	b8 01 00 00 00       	mov    eax,0x1
c0020b0a:	d3 e0                	shl    eax,cl
c0020b0c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0020b10:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0020b13:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0020b1b:	31 c0                	xor    eax,eax
c0020b1d:	5b                   	pop    ebx
c0020b1e:	c3                   	ret    

c0020b1f <KeRaiseSignal(SigHandlerBlock*, int)>:
c0020b1f:	55                   	push   ebp
c0020b20:	57                   	push   edi
c0020b21:	bf 08 00 00 00       	mov    edi,0x8
c0020b26:	56                   	push   esi
c0020b27:	53                   	push   ebx
c0020b28:	83 ec 18             	sub    esp,0x18
c0020b2b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020b2f:	68 b0 29 03 c0       	push   0xc00329b0
c0020b34:	e8 14 87 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0020b39:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0020b40:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0020b46:	83 c4 10             	add    esp,0x10
c0020b49:	31 c9                	xor    ecx,ecx
c0020b4b:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020b4f:	99                   	cdq    
c0020b50:	f7 ff                	idiv   edi
c0020b52:	8d 42 24             	lea    eax,[edx+0x24]
c0020b55:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0020b59:	85 f6                	test   esi,esi
c0020b5b:	75 1a                	jne    c0020b77 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0020b5d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020b61:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0020b65:	50                   	push   eax
c0020b66:	50                   	push   eax
c0020b67:	52                   	push   edx
c0020b68:	68 c1 29 03 c0       	push   0xc00329c1
c0020b6d:	e8 db 86 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0020b72:	83 c4 10             	add    esp,0x10
c0020b75:	eb 1b                	jmp    c0020b92 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0020b77:	41                   	inc    ecx
c0020b78:	83 f9 08             	cmp    ecx,0x8
c0020b7b:	75 ce                	jne    c0020b4b <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0020b7d:	83 ec 0c             	sub    esp,0xc
c0020b80:	be 01 00 00 00       	mov    esi,0x1
c0020b85:	68 e2 29 03 c0       	push   0xc00329e2
c0020b8a:	e8 be 86 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0020b8f:	83 c4 10             	add    esp,0x10
c0020b92:	83 c4 0c             	add    esp,0xc
c0020b95:	89 f0                	mov    eax,esi
c0020b97:	5b                   	pop    ebx
c0020b98:	5e                   	pop    esi
c0020b99:	5f                   	pop    edi
c0020b9a:	5d                   	pop    ebp
c0020b9b:	c3                   	ret    

c0020b9c <KeCheckSignal(SigHandlerBlock*, int*)>:
c0020b9c:	55                   	push   ebp
c0020b9d:	57                   	push   edi
c0020b9e:	56                   	push   esi
c0020b9f:	53                   	push   ebx
c0020ba0:	51                   	push   ecx
c0020ba1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020ba5:	85 db                	test   ebx,ebx
c0020ba7:	0f 84 bc 00 00 00    	je     c0020c69 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020bad:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0020bb4:	0f 84 af 00 00 00    	je     c0020c69 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020bba:	31 c9                	xor    ecx,ecx
c0020bbc:	bf 08 00 00 00       	mov    edi,0x8
c0020bc1:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0020bc7:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0020bca:	99                   	cdq    
c0020bcb:	f7 ff                	idiv   edi
c0020bcd:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0020bd4:	85 ed                	test   ebp,ebp
c0020bd6:	0f 84 9e 00 00 00    	je     c0020c7a <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0020bdc:	89 e9                	mov    ecx,ebp
c0020bde:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0020be4:	bf 01 00 00 00       	mov    edi,0x1
c0020be9:	89 04 24             	mov    DWORD PTR [esp],eax
c0020bec:	d3 e7                	shl    edi,cl
c0020bee:	31 c9                	xor    ecx,ecx
c0020bf0:	b8 01 00 00 00       	mov    eax,0x1
c0020bf5:	d3 e0                	shl    eax,cl
c0020bf7:	85 04 24             	test   DWORD PTR [esp],eax
c0020bfa:	74 06                	je     c0020c02 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0020bfc:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0020c00:	75 67                	jne    c0020c69 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020c02:	41                   	inc    ecx
c0020c03:	83 f9 11             	cmp    ecx,0x11
c0020c06:	75 e8                	jne    c0020bf0 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0020c08:	46                   	inc    esi
c0020c09:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020c0c:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0020c12:	09 f8                	or     eax,edi
c0020c14:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0020c1f:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0020c25:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0020c2c:	31 c0                	xor    eax,eax
c0020c2e:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0020c36:	74 09                	je     c0020c41 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0020c38:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0020c3f:	eb 06                	jmp    c0020c47 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0020c41:	40                   	inc    eax
c0020c42:	83 f8 08             	cmp    eax,0x8
c0020c45:	75 e7                	jne    c0020c2e <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0020c47:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0020c4a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020c4e:	83 fd 09             	cmp    ebp,0x9
c0020c51:	89 2a                	mov    DWORD PTR [edx],ebp
c0020c53:	75 07                	jne    c0020c5c <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0020c55:	b8 25 0a 02 c0       	mov    eax,0xc0020a25
c0020c5a:	eb 31                	jmp    c0020c8d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020c5c:	83 f8 01             	cmp    eax,0x1
c0020c5f:	75 0c                	jne    c0020c6d <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0020c61:	f7 d7                	not    edi
c0020c63:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0020c69:	31 c0                	xor    eax,eax
c0020c6b:	eb 20                	jmp    c0020c8d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020c6d:	85 c0                	test   eax,eax
c0020c6f:	75 1c                	jne    c0020c8d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020c71:	8b 04 ad 20 42 03 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffcbde0]
c0020c78:	eb 13                	jmp    c0020c8d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020c7a:	46                   	inc    esi
c0020c7b:	41                   	inc    ecx
c0020c7c:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0020c82:	83 f9 08             	cmp    ecx,0x8
c0020c85:	0f 85 36 ff ff ff    	jne    c0020bc1 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0020c8b:	eb dc                	jmp    c0020c69 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020c8d:	5a                   	pop    edx
c0020c8e:	5b                   	pop    ebx
c0020c8f:	5e                   	pop    esi
c0020c90:	5f                   	pop    edi
c0020c91:	5d                   	pop    ebp
c0020c92:	c3                   	ret    

c0020c93 <KiCheckSignalZ>:
c0020c93:	83 ec 10             	sub    esp,0x10
c0020c96:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020c9a:	50                   	push   eax
c0020c9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020ca0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020ca3:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0020ca9:	e8 ee fe ff ff       	call   c0020b9c <KeCheckSignal(SigHandlerBlock*, int*)>
c0020cae:	5a                   	pop    edx
c0020caf:	31 d2                	xor    edx,edx
c0020cb1:	59                   	pop    ecx
c0020cb2:	85 c0                	test   eax,eax
c0020cb4:	74 19                	je     c0020ccf <KiCheckSignalZ+0x3c>
c0020cb6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0020cbc:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020cbf:	89 02                	mov    DWORD PTR [edx],eax
c0020cc1:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0020cc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ccc:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0020ccf:	89 d0                	mov    eax,edx
c0020cd1:	83 c4 10             	add    esp,0x10
c0020cd4:	c3                   	ret    

c0020cd5 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0020cd5:	56                   	push   esi
c0020cd6:	53                   	push   ebx
c0020cd7:	bb 01 00 00 00       	mov    ebx,0x1
c0020cdc:	52                   	push   edx
c0020cdd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020ce1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020ce5:	d3 e3                	shl    ebx,cl
c0020ce7:	83 f9 10             	cmp    ecx,0x10
c0020cea:	7f 08                	jg     c0020cf4 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0020cec:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0020cf2:	75 10                	jne    c0020d04 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0020cf4:	83 ec 0c             	sub    esp,0xc
c0020cf7:	68 f3 29 03 c0       	push   0xc00329f3
c0020cfc:	e8 65 f5 ff ff       	call   c0020266 <KePanic(char const*)>
c0020d01:	83 c4 10             	add    esp,0x10
c0020d04:	f7 d3                	not    ebx
c0020d06:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0020d0c:	58                   	pop    eax
c0020d0d:	5b                   	pop    ebx
c0020d0e:	5e                   	pop    esi
c0020d0f:	c3                   	ret    

c0020d10 <KiFinishSignalZ>:
c0020d10:	53                   	push   ebx
c0020d11:	83 ec 10             	sub    esp,0x10
c0020d14:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020d18:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0020d1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020d20:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020d23:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0020d29:	e8 a7 ff ff ff       	call   c0020cd5 <KeCompleteSignal(SigHandlerBlock*, int)>
c0020d2e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020d34:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020d3b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0020d42:	83 c4 18             	add    esp,0x18
c0020d45:	5b                   	pop    ebx
c0020d46:	c3                   	ret    

c0020d47 <SysSeekDir(regs*)>:
c0020d47:	31 c0                	xor    eax,eax
c0020d49:	31 d2                	xor    edx,edx
c0020d4b:	c3                   	ret    

c0020d4c <SysTellDir(regs*)>:
c0020d4c:	31 c0                	xor    eax,eax
c0020d4e:	31 d2                	xor    edx,edx
c0020d50:	c3                   	ret    

c0020d51 <SysVerify(regs*)>:
c0020d51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020d55:	31 d2                	xor    edx,edx
c0020d57:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020d5a:	c3                   	ret    

c0020d5b <SysGetArgc(regs*)>:
c0020d5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020d60:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020d63:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0020d69:	89 c2                	mov    edx,eax
c0020d6b:	c1 fa 1f             	sar    edx,0x1f
c0020d6e:	c3                   	ret    

c0020d6f <SysTTYName(regs*)>:
c0020d6f:	b8 01 00 00 00       	mov    eax,0x1
c0020d74:	31 d2                	xor    edx,edx
c0020d76:	c3                   	ret    

c0020d77 <SysFormatDisk(regs*)>:
c0020d77:	56                   	push   esi
c0020d78:	53                   	push   ebx
c0020d79:	83 ec 04             	sub    esp,0x4
c0020d7c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020d80:	8b 1d 04 cf 03 c0    	mov    ebx,DWORD PTR ds:0xc003cf04
c0020d86:	eb 28                	jmp    c0020db0 <SysFormatDisk(regs*)+0x39>
c0020d88:	83 ec 0c             	sub    esp,0xc
c0020d8b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0020d8e:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0020d91:	8b 13                	mov    edx,DWORD PTR [ebx]
c0020d93:	51                   	push   ecx
c0020d94:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0020d97:	51                   	push   ecx
c0020d98:	50                   	push   eax
c0020d99:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0020da0:	50                   	push   eax
c0020da1:	53                   	push   ebx
c0020da2:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0020da5:	83 c4 20             	add    esp,0x20
c0020da8:	83 f8 08             	cmp    eax,0x8
c0020dab:	75 14                	jne    c0020dc1 <SysFormatDisk(regs*)+0x4a>
c0020dad:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0020db0:	85 db                	test   ebx,ebx
c0020db2:	75 d4                	jne    c0020d88 <SysFormatDisk(regs*)+0x11>
c0020db4:	83 c4 04             	add    esp,0x4
c0020db7:	b8 03 00 00 00       	mov    eax,0x3
c0020dbc:	31 d2                	xor    edx,edx
c0020dbe:	5b                   	pop    ebx
c0020dbf:	5e                   	pop    esi
c0020dc0:	c3                   	ret    
c0020dc1:	85 c0                	test   eax,eax
c0020dc3:	74 1f                	je     c0020de4 <SysFormatDisk(regs*)+0x6d>
c0020dc5:	83 f8 09             	cmp    eax,0x9
c0020dc8:	74 0d                	je     c0020dd7 <SysFormatDisk(regs*)+0x60>
c0020dca:	83 c4 04             	add    esp,0x4
c0020dcd:	b8 02 00 00 00       	mov    eax,0x2
c0020dd2:	31 d2                	xor    edx,edx
c0020dd4:	5b                   	pop    ebx
c0020dd5:	5e                   	pop    esi
c0020dd6:	c3                   	ret    
c0020dd7:	83 c4 04             	add    esp,0x4
c0020dda:	b8 01 00 00 00       	mov    eax,0x1
c0020ddf:	31 d2                	xor    edx,edx
c0020de1:	5b                   	pop    ebx
c0020de2:	5e                   	pop    esi
c0020de3:	c3                   	ret    
c0020de4:	83 c4 04             	add    esp,0x4
c0020de7:	31 c0                	xor    eax,eax
c0020de9:	31 d2                	xor    edx,edx
c0020deb:	5b                   	pop    ebx
c0020dec:	5e                   	pop    esi
c0020ded:	c3                   	ret    

c0020dee <SysSetDiskVolumeLabel(regs*)>:
c0020dee:	56                   	push   esi
c0020def:	53                   	push   ebx
c0020df0:	83 ec 04             	sub    esp,0x4
c0020df3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020df7:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0020dfa:	83 f8 19             	cmp    eax,0x19
c0020dfd:	77 33                	ja     c0020e32 <SysSetDiskVolumeLabel(regs*)+0x44>
c0020dff:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0020e06:	85 c9                	test   ecx,ecx
c0020e08:	74 28                	je     c0020e32 <SysSetDiskVolumeLabel(regs*)+0x44>
c0020e0a:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0020e0d:	85 db                	test   ebx,ebx
c0020e0f:	74 21                	je     c0020e32 <SysSetDiskVolumeLabel(regs*)+0x44>
c0020e11:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0020e17:	85 d2                	test   edx,edx
c0020e19:	74 17                	je     c0020e32 <SysSetDiskVolumeLabel(regs*)+0x44>
c0020e1b:	8b 32                	mov    esi,DWORD PTR [edx]
c0020e1d:	53                   	push   ebx
c0020e1e:	50                   	push   eax
c0020e1f:	51                   	push   ecx
c0020e20:	52                   	push   edx
c0020e21:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0020e24:	83 c4 10             	add    esp,0x10
c0020e27:	89 c2                	mov    edx,eax
c0020e29:	83 c4 04             	add    esp,0x4
c0020e2c:	c1 fa 1f             	sar    edx,0x1f
c0020e2f:	5b                   	pop    ebx
c0020e30:	5e                   	pop    esi
c0020e31:	c3                   	ret    
c0020e32:	83 c4 04             	add    esp,0x4
c0020e35:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0020e3a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020e3f:	5b                   	pop    ebx
c0020e40:	5e                   	pop    esi
c0020e41:	c3                   	ret    

c0020e42 <SysGetDiskVolumeLabel(regs*)>:
c0020e42:	57                   	push   edi
c0020e43:	56                   	push   esi
c0020e44:	53                   	push   ebx
c0020e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e49:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0020e4c:	83 fa 19             	cmp    edx,0x19
c0020e4f:	77 3c                	ja     c0020e8d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020e51:	8b 0c 95 80 f3 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffc0c80]
c0020e58:	85 c9                	test   ecx,ecx
c0020e5a:	74 31                	je     c0020e8d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020e5c:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0020e5f:	85 db                	test   ebx,ebx
c0020e61:	74 2a                	je     c0020e8d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020e63:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0020e66:	85 f6                	test   esi,esi
c0020e68:	74 23                	je     c0020e8d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020e6a:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0020e70:	85 c0                	test   eax,eax
c0020e72:	74 19                	je     c0020e8d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020e74:	83 ec 0c             	sub    esp,0xc
c0020e77:	8b 38                	mov    edi,DWORD PTR [eax]
c0020e79:	56                   	push   esi
c0020e7a:	53                   	push   ebx
c0020e7b:	52                   	push   edx
c0020e7c:	51                   	push   ecx
c0020e7d:	50                   	push   eax
c0020e7e:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0020e81:	83 c4 20             	add    esp,0x20
c0020e84:	89 c2                	mov    edx,eax
c0020e86:	5b                   	pop    ebx
c0020e87:	c1 fa 1f             	sar    edx,0x1f
c0020e8a:	5e                   	pop    esi
c0020e8b:	5f                   	pop    edi
c0020e8c:	c3                   	ret    
c0020e8d:	5b                   	pop    ebx
c0020e8e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0020e93:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020e98:	5e                   	pop    esi
c0020e99:	5f                   	pop    edi
c0020e9a:	c3                   	ret    

c0020e9b <SysShutdown(regs*)>:
c0020e9b:	83 ec 0c             	sub    esp,0xc
c0020e9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ea2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020ea5:	85 c0                	test   eax,eax
c0020ea7:	74 18                	je     c0020ec1 <SysShutdown(regs*)+0x26>
c0020ea9:	83 f8 01             	cmp    eax,0x1
c0020eac:	74 38                	je     c0020ee6 <SysShutdown(regs*)+0x4b>
c0020eae:	83 f8 02             	cmp    eax,0x2
c0020eb1:	74 24                	je     c0020ed7 <SysShutdown(regs*)+0x3c>
c0020eb3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020eb8:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020ebd:	83 c4 0c             	add    esp,0xc
c0020ec0:	c3                   	ret    
c0020ec1:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0020ec6:	8b 10                	mov    edx,DWORD PTR [eax]
c0020ec8:	6a 00                	push   0x0
c0020eca:	6a 00                	push   0x0
c0020ecc:	6a 00                	push   0x0
c0020ece:	50                   	push   eax
c0020ecf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0020ed2:	83 c4 10             	add    esp,0x10
c0020ed5:	eb dc                	jmp    c0020eb3 <SysShutdown(regs*)+0x18>
c0020ed7:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0020edc:	8b 10                	mov    edx,DWORD PTR [eax]
c0020ede:	6a 00                	push   0x0
c0020ee0:	6a 00                	push   0x0
c0020ee2:	6a 01                	push   0x1
c0020ee4:	eb e8                	jmp    c0020ece <SysShutdown(regs*)+0x33>
c0020ee6:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c0020eeb:	85 c0                	test   eax,eax
c0020eed:	74 02                	je     c0020ef1 <SysShutdown(regs*)+0x56>
c0020eef:	ff d0                	call   eax
c0020ef1:	31 c0                	xor    eax,eax
c0020ef3:	31 d2                	xor    edx,edx
c0020ef5:	83 c4 0c             	add    esp,0xc
c0020ef8:	c3                   	ret    

c0020ef9 <SysRealpath(regs*)>:
c0020ef9:	83 ec 0c             	sub    esp,0xc
c0020efc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f00:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0020f03:	85 d2                	test   edx,edx
c0020f05:	74 07                	je     c0020f0e <SysRealpath(regs*)+0x15>
c0020f07:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0020f0a:	85 c0                	test   eax,eax
c0020f0c:	75 0b                	jne    c0020f19 <SysRealpath(regs*)+0x20>
c0020f0e:	b8 01 00 00 00       	mov    eax,0x1
c0020f13:	31 d2                	xor    edx,edx
c0020f15:	83 c4 0c             	add    esp,0xc
c0020f18:	c3                   	ret    
c0020f19:	6a 00                	push   0x0
c0020f1b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0020f21:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0020f24:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0020f2a:	51                   	push   ecx
c0020f2b:	52                   	push   edx
c0020f2c:	50                   	push   eax
c0020f2d:	e8 2a 92 ff ff       	call   c001a15c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0020f32:	83 c4 10             	add    esp,0x10
c0020f35:	31 c0                	xor    eax,eax
c0020f37:	31 d2                	xor    edx,edx
c0020f39:	83 c4 0c             	add    esp,0xc
c0020f3c:	c3                   	ret    

c0020f3d <SysReadDir(regs*)>:
c0020f3d:	53                   	push   ebx
c0020f3e:	83 ec 18             	sub    esp,0x18
c0020f41:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020f45:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0020f48:	83 f8 02             	cmp    eax,0x2
c0020f4b:	76 61                	jbe    c0020fae <SysReadDir(regs*)+0x71>
c0020f4d:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0020f54:	77 49                	ja     c0020f9f <SysReadDir(regs*)+0x62>
c0020f56:	83 ec 0c             	sub    esp,0xc
c0020f59:	50                   	push   eax
c0020f5a:	e8 5c 6e ff ff       	call   c0017dbb <KeGetFileFromDescriptor(int)>
c0020f5f:	83 c4 10             	add    esp,0x10
c0020f62:	85 c0                	test   eax,eax
c0020f64:	74 39                	je     c0020f9f <SysReadDir(regs*)+0x62>
c0020f66:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020f6e:	83 ec 0c             	sub    esp,0xc
c0020f71:	8b 10                	mov    edx,DWORD PTR [eax]
c0020f73:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0020f77:	51                   	push   ecx
c0020f78:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0020f7b:	51                   	push   ecx
c0020f7c:	6a 00                	push   0x0
c0020f7e:	68 10 01 00 00       	push   0x110
c0020f83:	50                   	push   eax
c0020f84:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0020f87:	83 c4 20             	add    esp,0x20
c0020f8a:	85 c0                	test   eax,eax
c0020f8c:	74 29                	je     c0020fb7 <SysReadDir(regs*)+0x7a>
c0020f8e:	83 f8 07             	cmp    eax,0x7
c0020f91:	74 1b                	je     c0020fae <SysReadDir(regs*)+0x71>
c0020f93:	b8 02 00 00 00       	mov    eax,0x2
c0020f98:	31 d2                	xor    edx,edx
c0020f9a:	83 c4 18             	add    esp,0x18
c0020f9d:	5b                   	pop    ebx
c0020f9e:	c3                   	ret    
c0020f9f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020fa4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020fa9:	83 c4 18             	add    esp,0x18
c0020fac:	5b                   	pop    ebx
c0020fad:	c3                   	ret    
c0020fae:	b8 01 00 00 00       	mov    eax,0x1
c0020fb3:	31 d2                	xor    edx,edx
c0020fb5:	eb e3                	jmp    c0020f9a <SysReadDir(regs*)+0x5d>
c0020fb7:	31 c0                	xor    eax,eax
c0020fb9:	31 d2                	xor    edx,edx
c0020fbb:	eb dd                	jmp    c0020f9a <SysReadDir(regs*)+0x5d>

c0020fbd <SysIsATTY(regs*)>:
c0020fbd:	83 ec 0c             	sub    esp,0xc
c0020fc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fc4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020fc7:	83 f8 02             	cmp    eax,0x2
c0020fca:	76 07                	jbe    c0020fd3 <SysIsATTY(regs*)+0x16>
c0020fcc:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0020fd1:	75 26                	jne    c0020ff9 <SysIsATTY(regs*)+0x3c>
c0020fd3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020fd8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020fdb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0020fe1:	85 c0                	test   eax,eax
c0020fe3:	74 24                	je     c0021009 <SysIsATTY(regs*)+0x4c>
c0020fe5:	83 ec 0c             	sub    esp,0xc
c0020fe8:	8b 10                	mov    edx,DWORD PTR [eax]
c0020fea:	50                   	push   eax
c0020feb:	ff 12                	call   DWORD PTR [edx]
c0020fed:	31 d2                	xor    edx,edx
c0020fef:	0f b6 c0             	movzx  eax,al
c0020ff2:	83 c4 10             	add    esp,0x10
c0020ff5:	83 c4 0c             	add    esp,0xc
c0020ff8:	c3                   	ret    
c0020ff9:	83 ec 0c             	sub    esp,0xc
c0020ffc:	50                   	push   eax
c0020ffd:	e8 b9 6d ff ff       	call   c0017dbb <KeGetFileFromDescriptor(int)>
c0021002:	83 c4 10             	add    esp,0x10
c0021005:	85 c0                	test   eax,eax
c0021007:	75 dc                	jne    c0020fe5 <SysIsATTY(regs*)+0x28>
c0021009:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002100e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021013:	83 c4 0c             	add    esp,0xc
c0021016:	c3                   	ret    

c0021017 <SysSeek(regs*)>:
c0021017:	53                   	push   ebx
c0021018:	83 ec 08             	sub    esp,0x8
c002101b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002101f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021022:	8d 50 fd             	lea    edx,[eax-0x3]
c0021025:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c002102b:	77 32                	ja     c002105f <SysSeek(regs*)+0x48>
c002102d:	83 ec 0c             	sub    esp,0xc
c0021030:	50                   	push   eax
c0021031:	e8 85 6d ff ff       	call   c0017dbb <KeGetFileFromDescriptor(int)>
c0021036:	83 c4 0c             	add    esp,0xc
c0021039:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c002103c:	31 db                	xor    ebx,ebx
c002103e:	53                   	push   ebx
c002103f:	51                   	push   ecx
c0021040:	50                   	push   eax
c0021041:	e8 ea 94 ff ff       	call   c001a530 <File::seek(unsigned long long)>
c0021046:	83 c4 10             	add    esp,0x10
c0021049:	85 c0                	test   eax,eax
c002104b:	0f 95 c0             	setne  al
c002104e:	31 d2                	xor    edx,edx
c0021050:	0f b6 c0             	movzx  eax,al
c0021053:	f7 d8                	neg    eax
c0021055:	83 d2 00             	adc    edx,0x0
c0021058:	83 c4 08             	add    esp,0x8
c002105b:	f7 da                	neg    edx
c002105d:	5b                   	pop    ebx
c002105e:	c3                   	ret    
c002105f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021064:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021069:	83 c4 08             	add    esp,0x8
c002106c:	5b                   	pop    ebx
c002106d:	c3                   	ret    

c002106e <SysTell(regs*)>:
c002106e:	53                   	push   ebx
c002106f:	83 ec 08             	sub    esp,0x8
c0021072:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021076:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021079:	83 f8 02             	cmp    eax,0x2
c002107c:	76 4e                	jbe    c00210cc <SysTell(regs*)+0x5e>
c002107e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021083:	76 19                	jbe    c002109e <SysTell(regs*)+0x30>
c0021085:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0021088:	31 d2                	xor    edx,edx
c002108a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021090:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021097:	31 c0                	xor    eax,eax
c0021099:	83 c4 08             	add    esp,0x8
c002109c:	5b                   	pop    ebx
c002109d:	c3                   	ret    
c002109e:	83 ec 0c             	sub    esp,0xc
c00210a1:	50                   	push   eax
c00210a2:	e8 14 6d ff ff       	call   c0017dbb <KeGetFileFromDescriptor(int)>
c00210a7:	5a                   	pop    edx
c00210a8:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00210ab:	59                   	pop    ecx
c00210ac:	53                   	push   ebx
c00210ad:	50                   	push   eax
c00210ae:	e8 29 95 ff ff       	call   c001a5dc <File::tell(unsigned long long*)>
c00210b3:	83 c4 10             	add    esp,0x10
c00210b6:	85 c0                	test   eax,eax
c00210b8:	0f 95 c0             	setne  al
c00210bb:	31 d2                	xor    edx,edx
c00210bd:	0f b6 c0             	movzx  eax,al
c00210c0:	f7 d8                	neg    eax
c00210c2:	83 d2 00             	adc    edx,0x0
c00210c5:	83 c4 08             	add    esp,0x8
c00210c8:	f7 da                	neg    edx
c00210ca:	5b                   	pop    ebx
c00210cb:	c3                   	ret    
c00210cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00210d1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00210d6:	83 c4 08             	add    esp,0x8
c00210d9:	5b                   	pop    ebx
c00210da:	c3                   	ret    

c00210db <SysSize(regs*)>:
c00210db:	53                   	push   ebx
c00210dc:	83 ec 18             	sub    esp,0x18
c00210df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00210e3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00210e6:	83 f8 02             	cmp    eax,0x2
c00210e9:	76 54                	jbe    c002113f <SysSize(regs*)+0x64>
c00210eb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00210f0:	76 19                	jbe    c002110b <SysSize(regs*)+0x30>
c00210f2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00210f5:	31 d2                	xor    edx,edx
c00210f7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00210fd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021104:	31 c0                	xor    eax,eax
c0021106:	83 c4 18             	add    esp,0x18
c0021109:	5b                   	pop    ebx
c002110a:	c3                   	ret    
c002110b:	83 ec 0c             	sub    esp,0xc
c002110e:	50                   	push   eax
c002110f:	e8 a7 6c ff ff       	call   c0017dbb <KeGetFileFromDescriptor(int)>
c0021114:	83 c4 0c             	add    esp,0xc
c0021117:	8d 54 24 13          	lea    edx,[esp+0x13]
c002111b:	52                   	push   edx
c002111c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c002111f:	52                   	push   edx
c0021120:	50                   	push   eax
c0021121:	e8 4e 96 ff ff       	call   c001a774 <File::stat(unsigned long long*, bool*)>
c0021126:	83 c4 10             	add    esp,0x10
c0021129:	85 c0                	test   eax,eax
c002112b:	0f 95 c0             	setne  al
c002112e:	31 d2                	xor    edx,edx
c0021130:	0f b6 c0             	movzx  eax,al
c0021133:	f7 d8                	neg    eax
c0021135:	83 d2 00             	adc    edx,0x0
c0021138:	83 c4 18             	add    esp,0x18
c002113b:	f7 da                	neg    edx
c002113d:	5b                   	pop    ebx
c002113e:	c3                   	ret    
c002113f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021144:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021149:	83 c4 18             	add    esp,0x18
c002114c:	5b                   	pop    ebx
c002114d:	c3                   	ret    

c002114e <SysSizeFromFilename(regs*)>:
c002114e:	55                   	push   ebp
c002114f:	57                   	push   edi
c0021150:	56                   	push   esi
c0021151:	53                   	push   ebx
c0021152:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0021158:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c002115f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0021162:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0021165:	85 f6                	test   esi,esi
c0021167:	74 34                	je     c002119d <SysSizeFromFilename(regs*)+0x4f>
c0021169:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c002116f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021172:	83 f8 02             	cmp    eax,0x2
c0021175:	76 2d                	jbe    c00211a4 <SysSizeFromFilename(regs*)+0x56>
c0021177:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c002117c:	76 3b                	jbe    c00211b9 <SysSizeFromFilename(regs*)+0x6b>
c002117e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0021181:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021187:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002118e:	81 c4 5c 02 00 00    	add    esp,0x25c
c0021194:	31 c0                	xor    eax,eax
c0021196:	5b                   	pop    ebx
c0021197:	31 d2                	xor    edx,edx
c0021199:	5e                   	pop    esi
c002119a:	5f                   	pop    edi
c002119b:	5d                   	pop    ebp
c002119c:	c3                   	ret    
c002119d:	89 f8                	mov    eax,edi
c002119f:	83 f8 02             	cmp    eax,0x2
c00211a2:	77 d3                	ja     c0021177 <SysSizeFromFilename(regs*)+0x29>
c00211a4:	81 c4 5c 02 00 00    	add    esp,0x25c
c00211aa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00211af:	5b                   	pop    ebx
c00211b0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00211b5:	5e                   	pop    esi
c00211b6:	5f                   	pop    edi
c00211b7:	5d                   	pop    ebp
c00211b8:	c3                   	ret    
c00211b9:	83 ec 0c             	sub    esp,0xc
c00211bc:	68 14 01 00 00       	push   0x114
c00211c1:	e8 f8 51 ff ff       	call   c00163be <malloc>
c00211c6:	6a 01                	push   0x1
c00211c8:	89 c5                	mov    ebp,eax
c00211ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00211cf:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00211d2:	51                   	push   ecx
c00211d3:	57                   	push   edi
c00211d4:	55                   	push   ebp
c00211d5:	e8 9c 91 ff ff       	call   c001a376 <File::File(char const*, Process*, bool)>
c00211da:	83 c4 1c             	add    esp,0x1c
c00211dd:	8d 44 24 23          	lea    eax,[esp+0x23]
c00211e1:	50                   	push   eax
c00211e2:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00211e5:	53                   	push   ebx
c00211e6:	55                   	push   ebp
c00211e7:	e8 88 95 ff ff       	call   c001a774 <File::stat(unsigned long long*, bool*)>
c00211ec:	83 c4 10             	add    esp,0x10
c00211ef:	85 ed                	test   ebp,ebp
c00211f1:	74 15                	je     c0021208 <SysSizeFromFilename(regs*)+0xba>
c00211f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00211f7:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00211fa:	83 ec 0c             	sub    esp,0xc
c00211fd:	55                   	push   ebp
c00211fe:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0021201:	83 c4 10             	add    esp,0x10
c0021204:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021208:	85 c0                	test   eax,eax
c002120a:	75 98                	jne    c00211a4 <SysSizeFromFilename(regs*)+0x56>
c002120c:	6a 00                	push   0x0
c002120e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021213:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021216:	05 0c 01 00 00       	add    eax,0x10c
c002121b:	50                   	push   eax
c002121c:	57                   	push   edi
c002121d:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c0021224:	53                   	push   ebx
c0021225:	e8 32 8f ff ff       	call   c001a15c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c002122a:	58                   	pop    eax
c002122b:	5a                   	pop    edx
c002122c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021230:	50                   	push   eax
c0021231:	53                   	push   ebx
c0021232:	e8 8d 89 ff ff       	call   c0019bc4 <KeDereferenceSymlink(char const*, char*)>
c0021237:	83 c4 10             	add    esp,0x10
c002123a:	83 f8 01             	cmp    eax,0x1
c002123d:	74 1a                	je     c0021259 <SysSizeFromFilename(regs*)+0x10b>
c002123f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0021244:	74 26                	je     c002126c <SysSizeFromFilename(regs*)+0x11e>
c0021246:	85 f6                	test   esi,esi
c0021248:	0f 84 40 ff ff ff    	je     c002118e <SysSizeFromFilename(regs*)+0x40>
c002124e:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0021254:	e9 35 ff ff ff       	jmp    c002118e <SysSizeFromFilename(regs*)+0x40>
c0021259:	85 f6                	test   esi,esi
c002125b:	0f 84 2d ff ff ff    	je     c002118e <SysSizeFromFilename(regs*)+0x40>
c0021261:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0021267:	e9 22 ff ff ff       	jmp    c002118e <SysSizeFromFilename(regs*)+0x40>
c002126c:	85 f6                	test   esi,esi
c002126e:	0f 84 1a ff ff ff    	je     c002118e <SysSizeFromFilename(regs*)+0x40>
c0021274:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c002127a:	e9 0f ff ff ff       	jmp    c002118e <SysSizeFromFilename(regs*)+0x40>

c002127f <SysSizeFromFilenameNoSymlink(regs*)>:
c002127f:	55                   	push   ebp
c0021280:	57                   	push   edi
c0021281:	56                   	push   esi
c0021282:	53                   	push   ebx
c0021283:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0021289:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0021290:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0021293:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0021296:	85 f6                	test   esi,esi
c0021298:	74 34                	je     c00212ce <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c002129a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00212a0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00212a3:	83 f8 02             	cmp    eax,0x2
c00212a6:	76 2d                	jbe    c00212d5 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00212a8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00212ad:	76 3b                	jbe    c00212ea <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c00212af:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00212b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00212b8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00212bf:	81 c4 5c 02 00 00    	add    esp,0x25c
c00212c5:	31 c0                	xor    eax,eax
c00212c7:	5b                   	pop    ebx
c00212c8:	31 d2                	xor    edx,edx
c00212ca:	5e                   	pop    esi
c00212cb:	5f                   	pop    edi
c00212cc:	5d                   	pop    ebp
c00212cd:	c3                   	ret    
c00212ce:	89 f8                	mov    eax,edi
c00212d0:	83 f8 02             	cmp    eax,0x2
c00212d3:	77 d3                	ja     c00212a8 <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c00212d5:	81 c4 5c 02 00 00    	add    esp,0x25c
c00212db:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00212e0:	5b                   	pop    ebx
c00212e1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00212e6:	5e                   	pop    esi
c00212e7:	5f                   	pop    edi
c00212e8:	5d                   	pop    ebp
c00212e9:	c3                   	ret    
c00212ea:	83 ec 0c             	sub    esp,0xc
c00212ed:	68 14 01 00 00       	push   0x114
c00212f2:	e8 c7 50 ff ff       	call   c00163be <malloc>
c00212f7:	6a 00                	push   0x0
c00212f9:	89 c5                	mov    ebp,eax
c00212fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021300:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0021303:	51                   	push   ecx
c0021304:	57                   	push   edi
c0021305:	55                   	push   ebp
c0021306:	e8 6b 90 ff ff       	call   c001a376 <File::File(char const*, Process*, bool)>
c002130b:	83 c4 1c             	add    esp,0x1c
c002130e:	8d 44 24 23          	lea    eax,[esp+0x23]
c0021312:	50                   	push   eax
c0021313:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0021316:	53                   	push   ebx
c0021317:	55                   	push   ebp
c0021318:	e8 57 94 ff ff       	call   c001a774 <File::stat(unsigned long long*, bool*)>
c002131d:	83 c4 10             	add    esp,0x10
c0021320:	85 ed                	test   ebp,ebp
c0021322:	74 15                	je     c0021339 <SysSizeFromFilenameNoSymlink(regs*)+0xba>
c0021324:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021328:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002132b:	83 ec 0c             	sub    esp,0xc
c002132e:	55                   	push   ebp
c002132f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0021332:	83 c4 10             	add    esp,0x10
c0021335:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021339:	85 c0                	test   eax,eax
c002133b:	75 98                	jne    c00212d5 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c002133d:	6a 00                	push   0x0
c002133f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021344:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021347:	05 0c 01 00 00       	add    eax,0x10c
c002134c:	50                   	push   eax
c002134d:	57                   	push   edi
c002134e:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c0021355:	53                   	push   ebx
c0021356:	e8 01 8e ff ff       	call   c001a15c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c002135b:	58                   	pop    eax
c002135c:	5a                   	pop    edx
c002135d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021361:	50                   	push   eax
c0021362:	53                   	push   ebx
c0021363:	e8 5c 88 ff ff       	call   c0019bc4 <KeDereferenceSymlink(char const*, char*)>
c0021368:	83 c4 10             	add    esp,0x10
c002136b:	83 f8 01             	cmp    eax,0x1
c002136e:	74 1a                	je     c002138a <SysSizeFromFilenameNoSymlink(regs*)+0x10b>
c0021370:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0021375:	74 26                	je     c002139d <SysSizeFromFilenameNoSymlink(regs*)+0x11e>
c0021377:	85 f6                	test   esi,esi
c0021379:	0f 84 40 ff ff ff    	je     c00212bf <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c002137f:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0021385:	e9 35 ff ff ff       	jmp    c00212bf <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c002138a:	85 f6                	test   esi,esi
c002138c:	0f 84 2d ff ff ff    	je     c00212bf <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0021392:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0021398:	e9 22 ff ff ff       	jmp    c00212bf <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c002139d:	85 f6                	test   esi,esi
c002139f:	0f 84 1a ff ff ff    	je     c00212bf <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00213a5:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00213ab:	e9 0f ff ff ff       	jmp    c00212bf <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c00213b0 <SysClose(regs*)>:
c00213b0:	53                   	push   ebx
c00213b1:	83 ec 08             	sub    esp,0x8
c00213b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213b8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00213bb:	83 f8 02             	cmp    eax,0x2
c00213be:	76 41                	jbe    c0021401 <SysClose(regs*)+0x51>
c00213c0:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00213c6:	83 fa 01             	cmp    edx,0x1
c00213c9:	76 2d                	jbe    c00213f8 <SysClose(regs*)+0x48>
c00213cb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00213d0:	77 2f                	ja     c0021401 <SysClose(regs*)+0x51>
c00213d2:	83 ec 0c             	sub    esp,0xc
c00213d5:	50                   	push   eax
c00213d6:	e8 e0 69 ff ff       	call   c0017dbb <KeGetFileFromDescriptor(int)>
c00213db:	89 c3                	mov    ebx,eax
c00213dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00213e0:	e8 eb 90 ff ff       	call   c001a4d0 <File::close()>
c00213e5:	83 c4 10             	add    esp,0x10
c00213e8:	85 db                	test   ebx,ebx
c00213ea:	74 0c                	je     c00213f8 <SysClose(regs*)+0x48>
c00213ec:	83 ec 0c             	sub    esp,0xc
c00213ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c00213f1:	53                   	push   ebx
c00213f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00213f5:	83 c4 10             	add    esp,0x10
c00213f8:	31 c0                	xor    eax,eax
c00213fa:	31 d2                	xor    edx,edx
c00213fc:	83 c4 08             	add    esp,0x8
c00213ff:	5b                   	pop    ebx
c0021400:	c3                   	ret    
c0021401:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021406:	ba ff ff ff ff       	mov    edx,0xffffffff
c002140b:	83 c4 08             	add    esp,0x8
c002140e:	5b                   	pop    ebx
c002140f:	c3                   	ret    

c0021410 <SysOpenDir(regs*)>:
c0021410:	56                   	push   esi
c0021411:	53                   	push   ebx
c0021412:	83 ec 04             	sub    esp,0x4
c0021415:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021419:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c002141c:	85 c9                	test   ecx,ecx
c002141e:	74 5d                	je     c002147d <SysOpenDir(regs*)+0x6d>
c0021420:	83 ec 0c             	sub    esp,0xc
c0021423:	68 14 01 00 00       	push   0x114
c0021428:	e8 91 4f ff ff       	call   c00163be <malloc>
c002142d:	83 c4 0c             	add    esp,0xc
c0021430:	89 c6                	mov    esi,eax
c0021432:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021437:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002143a:	50                   	push   eax
c002143b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c002143e:	52                   	push   edx
c002143f:	56                   	push   esi
c0021440:	e8 ef 94 ff ff       	call   c001a934 <Directory::Directory(char const*, Process*)>
c0021445:	83 c4 10             	add    esp,0x10
c0021448:	85 f6                	test   esi,esi
c002144a:	74 31                	je     c002147d <SysOpenDir(regs*)+0x6d>
c002144c:	83 ec 0c             	sub    esp,0xc
c002144f:	56                   	push   esi
c0021450:	e8 a7 95 ff ff       	call   c001a9fc <Directory::open()>
c0021455:	83 c4 10             	add    esp,0x10
c0021458:	85 c0                	test   eax,eax
c002145a:	75 21                	jne    c002147d <SysOpenDir(regs*)+0x6d>
c002145c:	83 ec 0c             	sub    esp,0xc
c002145f:	56                   	push   esi
c0021460:	e8 59 66 ff ff       	call   c0017abe <UnixFile::getFileDescriptor()>
c0021465:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0021468:	83 c4 10             	add    esp,0x10
c002146b:	89 02                	mov    DWORD PTR [edx],eax
c002146d:	c1 f8 1f             	sar    eax,0x1f
c0021470:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0021473:	83 c4 04             	add    esp,0x4
c0021476:	31 c0                	xor    eax,eax
c0021478:	31 d2                	xor    edx,edx
c002147a:	5b                   	pop    ebx
c002147b:	5e                   	pop    esi
c002147c:	c3                   	ret    
c002147d:	83 c4 04             	add    esp,0x4
c0021480:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021485:	ba ff ff ff ff       	mov    edx,0xffffffff
c002148a:	5b                   	pop    ebx
c002148b:	5e                   	pop    esi
c002148c:	c3                   	ret    

c002148d <SysMakeDir(regs*)>:
c002148d:	56                   	push   esi
c002148e:	53                   	push   ebx
c002148f:	83 ec 10             	sub    esp,0x10
c0021492:	68 14 01 00 00       	push   0x114
c0021497:	e8 22 4f ff ff       	call   c00163be <malloc>
c002149c:	83 c4 0c             	add    esp,0xc
c002149f:	89 c3                	mov    ebx,eax
c00214a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00214a6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00214a9:	50                   	push   eax
c00214aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00214ae:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00214b1:	52                   	push   edx
c00214b2:	53                   	push   ebx
c00214b3:	e8 7c 94 ff ff       	call   c001a934 <Directory::Directory(char const*, Process*)>
c00214b8:	83 c4 10             	add    esp,0x10
c00214bb:	85 db                	test   ebx,ebx
c00214bd:	74 2c                	je     c00214eb <SysMakeDir(regs*)+0x5e>
c00214bf:	83 ec 0c             	sub    esp,0xc
c00214c2:	53                   	push   ebx
c00214c3:	e8 14 97 ff ff       	call   c001abdc <Directory::create()>
c00214c8:	89 c6                	mov    esi,eax
c00214ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c00214cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00214cf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00214d2:	83 c4 10             	add    esp,0x10
c00214d5:	31 c0                	xor    eax,eax
c00214d7:	85 f6                	test   esi,esi
c00214d9:	0f 95 c0             	setne  al
c00214dc:	31 d2                	xor    edx,edx
c00214de:	f7 d8                	neg    eax
c00214e0:	83 d2 00             	adc    edx,0x0
c00214e3:	83 c4 04             	add    esp,0x4
c00214e6:	f7 da                	neg    edx
c00214e8:	5b                   	pop    ebx
c00214e9:	5e                   	pop    esi
c00214ea:	c3                   	ret    
c00214eb:	83 c4 04             	add    esp,0x4
c00214ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00214f3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00214f8:	5b                   	pop    ebx
c00214f9:	5e                   	pop    esi
c00214fa:	c3                   	ret    

c00214fb <SysCloseDir(regs*)>:
c00214fb:	53                   	push   ebx
c00214fc:	83 ec 08             	sub    esp,0x8
c00214ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021503:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021506:	8d 50 fd             	lea    edx,[eax-0x3]
c0021509:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c002150f:	77 2f                	ja     c0021540 <SysCloseDir(regs*)+0x45>
c0021511:	83 ec 0c             	sub    esp,0xc
c0021514:	50                   	push   eax
c0021515:	e8 a1 68 ff ff       	call   c0017dbb <KeGetFileFromDescriptor(int)>
c002151a:	89 c3                	mov    ebx,eax
c002151c:	89 04 24             	mov    DWORD PTR [esp],eax
c002151f:	e8 34 95 ff ff       	call   c001aa58 <Directory::close()>
c0021524:	83 c4 10             	add    esp,0x10
c0021527:	85 db                	test   ebx,ebx
c0021529:	74 0c                	je     c0021537 <SysCloseDir(regs*)+0x3c>
c002152b:	83 ec 0c             	sub    esp,0xc
c002152e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021530:	53                   	push   ebx
c0021531:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021534:	83 c4 10             	add    esp,0x10
c0021537:	31 c0                	xor    eax,eax
c0021539:	31 d2                	xor    edx,edx
c002153b:	83 c4 08             	add    esp,0x8
c002153e:	5b                   	pop    ebx
c002153f:	c3                   	ret    
c0021540:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021545:	ba ff ff ff ff       	mov    edx,0xffffffff
c002154a:	83 c4 08             	add    esp,0x8
c002154d:	5b                   	pop    ebx
c002154e:	c3                   	ret    

c002154f <SysWait(regs*)>:
c002154f:	83 ec 10             	sub    esp,0x10
c0021552:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021556:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0021559:	52                   	push   edx
c002155a:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c002155d:	51                   	push   ecx
c002155e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021561:	50                   	push   eax
c0021562:	e8 e9 3d 00 00       	call   c0025350 <waitTask(int, int*, int)>
c0021567:	83 c4 1c             	add    esp,0x1c
c002156a:	89 c2                	mov    edx,eax
c002156c:	c1 fa 1f             	sar    edx,0x1f
c002156f:	c3                   	ret    

c0021570 <SysNotImpl(regs*)>:
c0021570:	83 ec 18             	sub    esp,0x18
c0021573:	68 04 2a 03 c0       	push   0xc0032a04
c0021578:	e8 e9 ec ff ff       	call   c0020266 <KePanic(char const*)>
c002157d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021582:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021587:	83 c4 1c             	add    esp,0x1c
c002158a:	c3                   	ret    

c002158b <SysPanic(regs*)>:
c002158b:	83 ec 18             	sub    esp,0x18
c002158e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021592:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0021595:	50                   	push   eax
c0021596:	e8 cb ec ff ff       	call   c0020266 <KePanic(char const*)>
c002159b:	b8 01 00 00 00       	mov    eax,0x1
c00215a0:	31 d2                	xor    edx,edx
c00215a2:	83 c4 1c             	add    esp,0x1c
c00215a5:	c3                   	ret    

c00215a6 <SysRmdir(regs*)>:
c00215a6:	56                   	push   esi
c00215a7:	53                   	push   ebx
c00215a8:	83 ec 20             	sub    esp,0x20
c00215ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00215af:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00215b2:	68 14 01 00 00       	push   0x114
c00215b7:	e8 02 4e ff ff       	call   c00163be <malloc>
c00215bc:	6a 00                	push   0x0
c00215be:	89 c3                	mov    ebx,eax
c00215c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00215c5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00215c8:	50                   	push   eax
c00215c9:	56                   	push   esi
c00215ca:	53                   	push   ebx
c00215cb:	e8 a6 8d ff ff       	call   c001a376 <File::File(char const*, Process*, bool)>
c00215d0:	83 c4 14             	add    esp,0x14
c00215d3:	53                   	push   ebx
c00215d4:	e8 67 90 ff ff       	call   c001a640 <File::unlink()>
c00215d9:	83 c4 10             	add    esp,0x10
c00215dc:	85 db                	test   ebx,ebx
c00215de:	74 14                	je     c00215f4 <SysRmdir(regs*)+0x4e>
c00215e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00215e4:	8b 13                	mov    edx,DWORD PTR [ebx]
c00215e6:	83 ec 0c             	sub    esp,0xc
c00215e9:	53                   	push   ebx
c00215ea:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00215ed:	83 c4 10             	add    esp,0x10
c00215f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00215f4:	85 c0                	test   eax,eax
c00215f6:	0f 95 c0             	setne  al
c00215f9:	31 d2                	xor    edx,edx
c00215fb:	0f b6 c0             	movzx  eax,al
c00215fe:	f7 d8                	neg    eax
c0021600:	83 d2 00             	adc    edx,0x0
c0021603:	83 c4 14             	add    esp,0x14
c0021606:	f7 da                	neg    edx
c0021608:	5b                   	pop    ebx
c0021609:	5e                   	pop    esi
c002160a:	c3                   	ret    

c002160b <SysUnlink(regs*)>:
c002160b:	56                   	push   esi
c002160c:	53                   	push   ebx
c002160d:	83 ec 20             	sub    esp,0x20
c0021610:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021614:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0021617:	68 14 01 00 00       	push   0x114
c002161c:	e8 9d 4d ff ff       	call   c00163be <malloc>
c0021621:	6a 00                	push   0x0
c0021623:	89 c3                	mov    ebx,eax
c0021625:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002162a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002162d:	50                   	push   eax
c002162e:	56                   	push   esi
c002162f:	53                   	push   ebx
c0021630:	e8 41 8d ff ff       	call   c001a376 <File::File(char const*, Process*, bool)>
c0021635:	83 c4 14             	add    esp,0x14
c0021638:	53                   	push   ebx
c0021639:	e8 02 90 ff ff       	call   c001a640 <File::unlink()>
c002163e:	83 c4 10             	add    esp,0x10
c0021641:	85 db                	test   ebx,ebx
c0021643:	74 14                	je     c0021659 <SysUnlink(regs*)+0x4e>
c0021645:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021649:	8b 13                	mov    edx,DWORD PTR [ebx]
c002164b:	83 ec 0c             	sub    esp,0xc
c002164e:	53                   	push   ebx
c002164f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0021652:	83 c4 10             	add    esp,0x10
c0021655:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021659:	85 c0                	test   eax,eax
c002165b:	0f 95 c0             	setne  al
c002165e:	31 d2                	xor    edx,edx
c0021660:	0f b6 c0             	movzx  eax,al
c0021663:	f7 d8                	neg    eax
c0021665:	83 d2 00             	adc    edx,0x0
c0021668:	83 c4 14             	add    esp,0x14
c002166b:	f7 da                	neg    edx
c002166d:	5b                   	pop    ebx
c002166e:	5e                   	pop    esi
c002166f:	c3                   	ret    

c0021670 <SysGetArgv(regs*)>:
c0021670:	83 ec 0c             	sub    esp,0xc
c0021673:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021677:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c002167a:	85 c0                	test   eax,eax
c002167c:	78 2c                	js     c00216aa <SysGetArgv(regs*)+0x3a>
c002167e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0021684:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0021687:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c002168d:	7d 1b                	jge    c00216aa <SysGetArgv(regs*)+0x3a>
c002168f:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0021696:	85 c0                	test   eax,eax
c0021698:	74 18                	je     c00216b2 <SysGetArgv(regs*)+0x42>
c002169a:	83 ec 08             	sub    esp,0x8
c002169d:	50                   	push   eax
c002169e:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00216a1:	50                   	push   eax
c00216a2:	e8 99 ef fd ff       	call   c0000640 <strcpy>
c00216a7:	83 c4 10             	add    esp,0x10
c00216aa:	31 c0                	xor    eax,eax
c00216ac:	31 d2                	xor    edx,edx
c00216ae:	83 c4 0c             	add    esp,0xc
c00216b1:	c3                   	ret    
c00216b2:	b8 01 00 00 00       	mov    eax,0x1
c00216b7:	31 d2                	xor    edx,edx
c00216b9:	83 c4 0c             	add    esp,0xc
c00216bc:	c3                   	ret    

c00216bd <SysUSleep(regs*)>:
c00216bd:	83 ec 1c             	sub    esp,0x1c
c00216c0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00216c4:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00216c7:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00216ca:	6a 00                	push   0x0
c00216cc:	6a 64                	push   0x64
c00216ce:	52                   	push   edx
c00216cf:	50                   	push   eax
c00216d0:	e8 8b cf 00 00       	call   c002e660 <__udivdi3>
c00216d5:	83 c4 14             	add    esp,0x14
c00216d8:	50                   	push   eax
c00216d9:	e8 56 3d 00 00       	call   c0025434 <milliTenthSleep(unsigned int)>
c00216de:	31 c0                	xor    eax,eax
c00216e0:	31 d2                	xor    edx,edx
c00216e2:	83 c4 1c             	add    esp,0x1c
c00216e5:	c3                   	ret    

c00216e6 <SysSpawn(regs*)>:
c00216e6:	56                   	push   esi
c00216e7:	53                   	push   ebx
c00216e8:	83 ec 04             	sub    esp,0x4
c00216eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00216ef:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00216f2:	85 f6                	test   esi,esi
c00216f4:	75 0a                	jne    c0021700 <SysSpawn(regs*)+0x1a>
c00216f6:	83 c4 04             	add    esp,0x4
c00216f9:	31 c0                	xor    eax,eax
c00216fb:	31 d2                	xor    edx,edx
c00216fd:	5b                   	pop    ebx
c00216fe:	5e                   	pop    esi
c00216ff:	c3                   	ret    
c0021700:	83 ec 0c             	sub    esp,0xc
c0021703:	68 24 07 00 00       	push   0x724
c0021708:	e8 b1 4c ff ff       	call   c00163be <malloc>
c002170d:	83 c4 10             	add    esp,0x10
c0021710:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0021713:	89 c6                	mov    esi,eax
c0021715:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021718:	85 c9                	test   ecx,ecx
c002171a:	75 39                	jne    c0021755 <SysSpawn(regs*)+0x6f>
c002171c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021721:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021724:	52                   	push   edx
c0021725:	50                   	push   eax
c0021726:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021729:	50                   	push   eax
c002172a:	56                   	push   esi
c002172b:	e8 a8 34 00 00       	call   c0024bd8 <Process::Process(char const*, Process*, char**)>
c0021730:	83 c4 10             	add    esp,0x10
c0021733:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c002173a:	75 ba                	jne    c00216f6 <SysSpawn(regs*)+0x10>
c002173c:	83 ec 0c             	sub    esp,0xc
c002173f:	56                   	push   esi
c0021740:	e8 d3 39 00 00       	call   c0025118 <Process::createUserThread()>
c0021745:	8b 06                	mov    eax,DWORD PTR [esi]
c0021747:	83 c4 10             	add    esp,0x10
c002174a:	89 c2                	mov    edx,eax
c002174c:	83 c4 04             	add    esp,0x4
c002174f:	c1 fa 1f             	sar    edx,0x1f
c0021752:	5b                   	pop    ebx
c0021753:	5e                   	pop    esi
c0021754:	c3                   	ret    
c0021755:	31 c0                	xor    eax,eax
c0021757:	eb cb                	jmp    c0021724 <SysSpawn(regs*)+0x3e>

c0021759 <SysGetEnv(regs*)>:
c0021759:	57                   	push   edi
c002175a:	56                   	push   esi
c002175b:	53                   	push   ebx
c002175c:	83 ec 1c             	sub    esp,0x1c
c002175f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0021763:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021768:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c002176b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c002176e:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0021771:	51                   	push   ecx
c0021772:	e8 8c e9 ff ff       	call   c0020103 <KeGetProcessTotalEnvCount(Process*)>
c0021777:	83 c4 10             	add    esp,0x10
c002177a:	39 c7                	cmp    edi,eax
c002177c:	7c 14                	jl     c0021792 <SysGetEnv(regs*)+0x39>
c002177e:	85 f6                	test   esi,esi
c0021780:	75 0b                	jne    c002178d <SysGetEnv(regs*)+0x34>
c0021782:	83 c4 10             	add    esp,0x10
c0021785:	31 c0                	xor    eax,eax
c0021787:	5b                   	pop    ebx
c0021788:	31 d2                	xor    edx,edx
c002178a:	5e                   	pop    esi
c002178b:	5f                   	pop    edi
c002178c:	c3                   	ret    
c002178d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021790:	eb f0                	jmp    c0021782 <SysGetEnv(regs*)+0x29>
c0021792:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021796:	83 ec 04             	sub    esp,0x4
c0021799:	57                   	push   edi
c002179a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00217a0:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00217a3:	57                   	push   edi
c00217a4:	50                   	push   eax
c00217a5:	e8 79 e9 ff ff       	call   c0020123 <KeGetProcessEnvPair(Process*, int)>
c00217aa:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00217ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00217b1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00217b5:	83 c4 0c             	add    esp,0xc
c00217b8:	85 d2                	test   edx,edx
c00217ba:	75 23                	jne    c00217df <SysGetEnv(regs*)+0x86>
c00217bc:	83 ec 0c             	sub    esp,0xc
c00217bf:	50                   	push   eax
c00217c0:	e8 ab ed fd ff       	call   c0000570 <strlen>
c00217c5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00217c8:	89 c3                	mov    ebx,eax
c00217ca:	e8 a1 ed fd ff       	call   c0000570 <strlen>
c00217cf:	83 c4 10             	add    esp,0x10
c00217d2:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00217d6:	83 c4 10             	add    esp,0x10
c00217d9:	31 d2                	xor    edx,edx
c00217db:	5b                   	pop    ebx
c00217dc:	5e                   	pop    esi
c00217dd:	5f                   	pop    edi
c00217de:	c3                   	ret    
c00217df:	83 ec 08             	sub    esp,0x8
c00217e2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00217e5:	50                   	push   eax
c00217e6:	56                   	push   esi
c00217e7:	e8 54 ee fd ff       	call   c0000640 <strcpy>
c00217ec:	58                   	pop    eax
c00217ed:	5a                   	pop    edx
c00217ee:	68 1e 2a 03 c0       	push   0xc0032a1e
c00217f3:	56                   	push   esi
c00217f4:	e8 47 f0 fd ff       	call   c0000840 <strcat>
c00217f9:	59                   	pop    ecx
c00217fa:	5b                   	pop    ebx
c00217fb:	57                   	push   edi
c00217fc:	56                   	push   esi
c00217fd:	e8 3e f0 fd ff       	call   c0000840 <strcat>
c0021802:	83 c4 10             	add    esp,0x10
c0021805:	e9 78 ff ff ff       	jmp    c0021782 <SysGetEnv(regs*)+0x29>

c002180a <SysSetFatAttrib(regs*)>:
c002180a:	57                   	push   edi
c002180b:	56                   	push   esi
c002180c:	53                   	push   ebx
c002180d:	83 ec 1c             	sub    esp,0x1c
c0021810:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021814:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0021817:	68 14 01 00 00       	push   0x114
c002181c:	e8 9d 4b ff ff       	call   c00163be <malloc>
c0021821:	83 c4 0c             	add    esp,0xc
c0021824:	89 c3                	mov    ebx,eax
c0021826:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002182b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002182e:	50                   	push   eax
c002182f:	57                   	push   edi
c0021830:	53                   	push   ebx
c0021831:	e8 1e 8c ff ff       	call   c001a454 <File::File(char const*, Process*)>
c0021836:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0021839:	83 c4 0c             	add    esp,0xc
c002183c:	0f b6 d4             	movzx  edx,ah
c002183f:	0f b6 c0             	movzx  eax,al
c0021842:	52                   	push   edx
c0021843:	50                   	push   eax
c0021844:	53                   	push   ebx
c0021845:	e8 90 8e ff ff       	call   c001a6da <File::chfatattr(unsigned char, unsigned char)>
c002184a:	83 c4 10             	add    esp,0x10
c002184d:	85 db                	test   ebx,ebx
c002184f:	74 14                	je     c0021865 <SysSetFatAttrib(regs*)+0x5b>
c0021851:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021855:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021857:	83 ec 0c             	sub    esp,0xc
c002185a:	53                   	push   ebx
c002185b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002185e:	83 c4 10             	add    esp,0x10
c0021861:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021865:	85 c0                	test   eax,eax
c0021867:	0f 95 c0             	setne  al
c002186a:	31 d2                	xor    edx,edx
c002186c:	0f b6 c0             	movzx  eax,al
c002186f:	f7 d8                	neg    eax
c0021871:	83 d2 00             	adc    edx,0x0
c0021874:	83 c4 10             	add    esp,0x10
c0021877:	f7 da                	neg    edx
c0021879:	5b                   	pop    ebx
c002187a:	5e                   	pop    esi
c002187b:	5f                   	pop    edi
c002187c:	c3                   	ret    

c002187d <SysPipe(regs*)>:
c002187d:	57                   	push   edi
c002187e:	56                   	push   esi
c002187f:	53                   	push   ebx
c0021880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021884:	83 ec 0c             	sub    esp,0xc
c0021887:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c002188a:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c002188d:	6a 20                	push   0x20
c002188f:	e8 2a 4b ff ff       	call   c00163be <malloc>
c0021894:	89 c3                	mov    ebx,eax
c0021896:	58                   	pop    eax
c0021897:	5a                   	pop    edx
c0021898:	68 00 50 00 00       	push   0x5000
c002189d:	53                   	push   ebx
c002189e:	e8 8d 54 ff ff       	call   c0016d30 <Pipe::Pipe(int)>
c00218a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00218a6:	e8 13 62 ff ff       	call   c0017abe <UnixFile::getFileDescriptor()>
c00218ab:	89 07                	mov    DWORD PTR [edi],eax
c00218ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00218b0:	e8 09 62 ff ff       	call   c0017abe <UnixFile::getFileDescriptor()>
c00218b5:	83 c4 10             	add    esp,0x10
c00218b8:	89 06                	mov    DWORD PTR [esi],eax
c00218ba:	31 d2                	xor    edx,edx
c00218bc:	5b                   	pop    ebx
c00218bd:	31 c0                	xor    eax,eax
c00218bf:	5e                   	pop    esi
c00218c0:	5f                   	pop    edi
c00218c1:	c3                   	ret    

c00218c2 <SysGetUnixTime(regs*)>:
c00218c2:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00218c7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00218cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00218d1:	e9 4c 95 ff ff       	jmp    c001ae22 <Clock::timeInSecondsLocal()>

c00218d6 <string_ends_with(char const*, char const*)>:
c00218d6:	57                   	push   edi
c00218d7:	56                   	push   esi
c00218d8:	53                   	push   ebx
c00218d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00218dd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00218e1:	83 ec 0c             	sub    esp,0xc
c00218e4:	53                   	push   ebx
c00218e5:	e8 86 ec fd ff       	call   c0000570 <strlen>
c00218ea:	89 3c 24             	mov    DWORD PTR [esp],edi
c00218ed:	89 c6                	mov    esi,eax
c00218ef:	e8 7c ec fd ff       	call   c0000570 <strlen>
c00218f4:	83 c4 10             	add    esp,0x10
c00218f7:	39 c6                	cmp    esi,eax
c00218f9:	7d 06                	jge    c0021901 <string_ends_with(char const*, char const*)+0x2b>
c00218fb:	5b                   	pop    ebx
c00218fc:	31 c0                	xor    eax,eax
c00218fe:	5e                   	pop    esi
c00218ff:	5f                   	pop    edi
c0021900:	c3                   	ret    
c0021901:	83 ec 08             	sub    esp,0x8
c0021904:	29 c6                	sub    esi,eax
c0021906:	57                   	push   edi
c0021907:	01 f3                	add    ebx,esi
c0021909:	53                   	push   ebx
c002190a:	e8 41 ee fd ff       	call   c0000750 <strcmp>
c002190f:	83 c4 10             	add    esp,0x10
c0021912:	85 c0                	test   eax,eax
c0021914:	5b                   	pop    ebx
c0021915:	0f 94 c0             	sete   al
c0021918:	5e                   	pop    esi
c0021919:	0f b6 c0             	movzx  eax,al
c002191c:	5f                   	pop    edi
c002191d:	c3                   	ret    

c002191e <SysOpen(regs*)>:
c002191e:	56                   	push   esi
c002191f:	53                   	push   ebx
c0021920:	81 ec 04 01 00 00    	sub    esp,0x104
c0021926:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c002192d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021930:	85 c0                	test   eax,eax
c0021932:	0f 84 bc 01 00 00    	je     c0021af4 <SysOpen(regs*)+0x1d6>
c0021938:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c002193b:	85 c0                	test   eax,eax
c002193d:	0f 84 b1 01 00 00    	je     c0021af4 <SysOpen(regs*)+0x1d6>
c0021943:	6a 00                	push   0x0
c0021945:	68 20 2a 03 c0       	push   0xc0032a20
c002194a:	50                   	push   eax
c002194b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c002194f:	56                   	push   esi
c0021950:	e8 07 88 ff ff       	call   c001a15c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0021955:	89 34 24             	mov    DWORD PTR [esp],esi
c0021958:	e8 13 ec fd ff       	call   c0000570 <strlen>
c002195d:	83 c4 10             	add    esp,0x10
c0021960:	83 e8 01             	sub    eax,0x1
c0021963:	74 21                	je     c0021986 <SysOpen(regs*)+0x68>
c0021965:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0021969:	eb 12                	jmp    c002197d <SysOpen(regs*)+0x5f>
c002196b:	83 fa 3a             	cmp    edx,0x3a
c002196e:	74 12                	je     c0021982 <SysOpen(regs*)+0x64>
c0021970:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0021974:	83 e8 01             	sub    eax,0x1
c0021977:	74 0d                	je     c0021986 <SysOpen(regs*)+0x68>
c0021979:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c002197d:	83 fa 2e             	cmp    edx,0x2e
c0021980:	75 e9                	jne    c002196b <SysOpen(regs*)+0x4d>
c0021982:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0021986:	83 ec 08             	sub    esp,0x8
c0021989:	68 24 2a 03 c0       	push   0xc0032a24
c002198e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021991:	50                   	push   eax
c0021992:	e8 3f ff ff ff       	call   c00218d6 <string_ends_with(char const*, char const*)>
c0021997:	83 c4 10             	add    esp,0x10
c002199a:	85 c0                	test   eax,eax
c002199c:	74 1d                	je     c00219bb <SysOpen(regs*)+0x9d>
c002199e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00219a1:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00219a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00219ae:	81 c4 04 01 00 00    	add    esp,0x104
c00219b4:	31 c0                	xor    eax,eax
c00219b6:	31 d2                	xor    edx,edx
c00219b8:	5b                   	pop    ebx
c00219b9:	5e                   	pop    esi
c00219ba:	c3                   	ret    
c00219bb:	83 ec 08             	sub    esp,0x8
c00219be:	68 29 2a 03 c0       	push   0xc0032a29
c00219c3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00219c6:	50                   	push   eax
c00219c7:	e8 0a ff ff ff       	call   c00218d6 <string_ends_with(char const*, char const*)>
c00219cc:	83 c4 10             	add    esp,0x10
c00219cf:	85 c0                	test   eax,eax
c00219d1:	75 cb                	jne    c002199e <SysOpen(regs*)+0x80>
c00219d3:	83 ec 08             	sub    esp,0x8
c00219d6:	68 25 2a 03 c0       	push   0xc0032a25
c00219db:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00219de:	50                   	push   eax
c00219df:	e8 6c ed fd ff       	call   c0000750 <strcmp>
c00219e4:	83 c4 10             	add    esp,0x10
c00219e7:	85 c0                	test   eax,eax
c00219e9:	74 b3                	je     c002199e <SysOpen(regs*)+0x80>
c00219eb:	83 ec 08             	sub    esp,0x8
c00219ee:	68 24 2a 03 c0       	push   0xc0032a24
c00219f3:	56                   	push   esi
c00219f4:	e8 dd fe ff ff       	call   c00218d6 <string_ends_with(char const*, char const*)>
c00219f9:	83 c4 10             	add    esp,0x10
c00219fc:	85 c0                	test   eax,eax
c00219fe:	75 9e                	jne    c002199e <SysOpen(regs*)+0x80>
c0021a00:	83 ec 08             	sub    esp,0x8
c0021a03:	68 2e 2a 03 c0       	push   0xc0032a2e
c0021a08:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021a0b:	50                   	push   eax
c0021a0c:	e8 c5 fe ff ff       	call   c00218d6 <string_ends_with(char const*, char const*)>
c0021a11:	83 c4 10             	add    esp,0x10
c0021a14:	85 c0                	test   eax,eax
c0021a16:	0f 85 eb 00 00 00    	jne    c0021b07 <SysOpen(regs*)+0x1e9>
c0021a1c:	83 ec 08             	sub    esp,0x8
c0021a1f:	68 33 2a 03 c0       	push   0xc0032a33
c0021a24:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021a27:	50                   	push   eax
c0021a28:	e8 a9 fe ff ff       	call   c00218d6 <string_ends_with(char const*, char const*)>
c0021a2d:	83 c4 10             	add    esp,0x10
c0021a30:	85 c0                	test   eax,eax
c0021a32:	0f 85 cf 00 00 00    	jne    c0021b07 <SysOpen(regs*)+0x1e9>
c0021a38:	83 ec 08             	sub    esp,0x8
c0021a3b:	68 2f 2a 03 c0       	push   0xc0032a2f
c0021a40:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0021a43:	51                   	push   ecx
c0021a44:	e8 07 ed fd ff       	call   c0000750 <strcmp>
c0021a49:	83 c4 10             	add    esp,0x10
c0021a4c:	85 c0                	test   eax,eax
c0021a4e:	0f 84 b3 00 00 00    	je     c0021b07 <SysOpen(regs*)+0x1e9>
c0021a54:	83 ec 08             	sub    esp,0x8
c0021a57:	68 2e 2a 03 c0       	push   0xc0032a2e
c0021a5c:	56                   	push   esi
c0021a5d:	e8 74 fe ff ff       	call   c00218d6 <string_ends_with(char const*, char const*)>
c0021a62:	83 c4 10             	add    esp,0x10
c0021a65:	85 c0                	test   eax,eax
c0021a67:	0f 85 9a 00 00 00    	jne    c0021b07 <SysOpen(regs*)+0x1e9>
c0021a6d:	83 ec 0c             	sub    esp,0xc
c0021a70:	68 14 01 00 00       	push   0x114
c0021a75:	e8 44 49 ff ff       	call   c00163be <malloc>
c0021a7a:	83 c4 0c             	add    esp,0xc
c0021a7d:	89 c6                	mov    esi,eax
c0021a7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021a84:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021a87:	50                   	push   eax
c0021a88:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0021a8b:	52                   	push   edx
c0021a8c:	56                   	push   esi
c0021a8d:	e8 c2 89 ff ff       	call   c001a454 <File::File(char const*, Process*)>
c0021a92:	83 c4 10             	add    esp,0x10
c0021a95:	85 f6                	test   esi,esi
c0021a97:	74 5b                	je     c0021af4 <SysOpen(regs*)+0x1d6>
c0021a99:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021a9c:	0f b6 c2             	movzx  eax,dl
c0021a9f:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0021aa2:	89 d0                	mov    eax,edx
c0021aa4:	83 e0 01             	and    eax,0x1
c0021aa7:	f6 c2 02             	test   dl,0x2
c0021aaa:	74 03                	je     c0021aaf <SysOpen(regs*)+0x191>
c0021aac:	83 c8 02             	or     eax,0x2
c0021aaf:	f6 c2 04             	test   dl,0x4
c0021ab2:	74 03                	je     c0021ab7 <SysOpen(regs*)+0x199>
c0021ab4:	83 c8 04             	or     eax,0x4
c0021ab7:	f6 c2 08             	test   dl,0x8
c0021aba:	74 03                	je     c0021abf <SysOpen(regs*)+0x1a1>
c0021abc:	83 c8 0a             	or     eax,0xa
c0021abf:	80 e2 10             	and    dl,0x10
c0021ac2:	74 03                	je     c0021ac7 <SysOpen(regs*)+0x1a9>
c0021ac4:	83 c8 12             	or     eax,0x12
c0021ac7:	83 ec 08             	sub    esp,0x8
c0021aca:	50                   	push   eax
c0021acb:	56                   	push   esi
c0021acc:	e8 a1 89 ff ff       	call   c001a472 <File::open(FileOpenMode)>
c0021ad1:	83 c4 10             	add    esp,0x10
c0021ad4:	85 c0                	test   eax,eax
c0021ad6:	75 1c                	jne    c0021af4 <SysOpen(regs*)+0x1d6>
c0021ad8:	83 ec 0c             	sub    esp,0xc
c0021adb:	56                   	push   esi
c0021adc:	e8 dd 5f ff ff       	call   c0017abe <UnixFile::getFileDescriptor()>
c0021ae1:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0021ae4:	83 c4 10             	add    esp,0x10
c0021ae7:	89 02                	mov    DWORD PTR [edx],eax
c0021ae9:	c1 f8 1f             	sar    eax,0x1f
c0021aec:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0021aef:	e9 ba fe ff ff       	jmp    c00219ae <SysOpen(regs*)+0x90>
c0021af4:	81 c4 04 01 00 00    	add    esp,0x104
c0021afa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021aff:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021b04:	5b                   	pop    ebx
c0021b05:	5e                   	pop    esi
c0021b06:	c3                   	ret    
c0021b07:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021b0a:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0021b10:	e9 92 fe ff ff       	jmp    c00219a7 <SysOpen(regs*)+0x89>

c0021b15 <KeSystemCall(regs*, void*)>:
c0021b15:	53                   	push   ebx
c0021b16:	83 ec 08             	sub    esp,0x8
c0021b19:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021b1d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0021b20:	83 f8 3e             	cmp    eax,0x3e
c0021b23:	77 16                	ja     c0021b3b <KeSystemCall(regs*, void*)+0x26>
c0021b25:	8b 14 85 80 42 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcbd80]
c0021b2c:	85 d2                	test   edx,edx
c0021b2e:	74 0b                	je     c0021b3b <KeSystemCall(regs*, void*)+0x26>
c0021b30:	83 ec 0c             	sub    esp,0xc
c0021b33:	53                   	push   ebx
c0021b34:	ff d2                	call   edx
c0021b36:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0021b39:	eb 0d                	jmp    c0021b48 <KeSystemCall(regs*, void*)+0x33>
c0021b3b:	52                   	push   edx
c0021b3c:	52                   	push   edx
c0021b3d:	50                   	push   eax
c0021b3e:	68 38 2a 03 c0       	push   0xc0032a38
c0021b43:	e8 05 77 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0021b48:	83 c4 10             	add    esp,0x10
c0021b4b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0021b50:	31 d2                	xor    edx,edx
c0021b52:	83 c4 08             	add    esp,0x8
c0021b55:	5b                   	pop    ebx
c0021b56:	c3                   	ret    
c0021b57:	90                   	nop

c0021b58 <KeSwitchEndian16(unsigned short)>:
c0021b58:	83 ec 04             	sub    esp,0x4
c0021b5b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021b5f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0021b63:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0021b67:	c1 f8 08             	sar    eax,0x8
c0021b6a:	89 c2                	mov    edx,eax
c0021b6c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0021b70:	c1 e0 08             	shl    eax,0x8
c0021b73:	09 d0                	or     eax,edx
c0021b75:	83 c4 04             	add    esp,0x4
c0021b78:	c3                   	ret    
c0021b79:	8d 76 00             	lea    esi,[esi+0x0]

c0021b7c <KeSwitchEndian32(unsigned int)>:
c0021b7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b80:	c1 e8 18             	shr    eax,0x18
c0021b83:	89 c2                	mov    edx,eax
c0021b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b89:	c1 e0 08             	shl    eax,0x8
c0021b8c:	25 00 00 ff 00       	and    eax,0xff0000
c0021b91:	09 c2                	or     edx,eax
c0021b93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b97:	c1 e8 08             	shr    eax,0x8
c0021b9a:	25 00 ff 00 00       	and    eax,0xff00
c0021b9f:	09 c2                	or     edx,eax
c0021ba1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ba5:	c1 e0 18             	shl    eax,0x18
c0021ba8:	09 d0                	or     eax,edx
c0021baa:	c3                   	ret    
c0021bab:	90                   	nop

c0021bac <EthernetCRC32(unsigned char*, int)>:
c0021bac:	83 ec 10             	sub    esp,0x10
c0021baf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021bb4:	75 0a                	jne    c0021bc0 <EthernetCRC32(unsigned char*, int)+0x14>
c0021bb6:	b8 00 00 00 00       	mov    eax,0x0
c0021bbb:	e9 8c 00 00 00       	jmp    c0021c4c <EthernetCRC32(unsigned char*, int)+0xa0>
c0021bc0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0021bc5:	7f 09                	jg     c0021bd0 <EthernetCRC32(unsigned char*, int)+0x24>
c0021bc7:	b8 00 00 00 00       	mov    eax,0x0
c0021bcc:	eb 7e                	jmp    c0021c4c <EthernetCRC32(unsigned char*, int)+0xa0>
c0021bce:	66 90                	xchg   ax,ax
c0021bd0:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0021bd8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021be0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021be4:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0021be8:	7d 5a                	jge    c0021c44 <EthernetCRC32(unsigned char*, int)+0x98>
c0021bea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021bee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021bf2:	01 d0                	add    eax,edx
c0021bf4:	8a 00                	mov    al,BYTE PTR [eax]
c0021bf6:	0f b6 c0             	movzx  eax,al
c0021bf9:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0021bfd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021c05:	8d 76 00             	lea    esi,[esi+0x0]
c0021c08:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0021c0d:	7f 2d                	jg     c0021c3c <EthernetCRC32(unsigned char*, int)+0x90>
c0021c0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c13:	83 e0 01             	and    eax,0x1
c0021c16:	74 10                	je     c0021c28 <EthernetCRC32(unsigned char*, int)+0x7c>
c0021c18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c1c:	d1 e8                	shr    eax,1
c0021c1e:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0021c23:	eb 0b                	jmp    c0021c30 <EthernetCRC32(unsigned char*, int)+0x84>
c0021c25:	8d 76 00             	lea    esi,[esi+0x0]
c0021c28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c2c:	d1 e8                	shr    eax,1
c0021c2e:	66 90                	xchg   ax,ax
c0021c30:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021c34:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0021c39:	eb cd                	jmp    c0021c08 <EthernetCRC32(unsigned char*, int)+0x5c>
c0021c3b:	90                   	nop
c0021c3c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0021c41:	eb 9d                	jmp    c0021be0 <EthernetCRC32(unsigned char*, int)+0x34>
c0021c43:	90                   	nop
c0021c44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c48:	f7 d0                	not    eax
c0021c4a:	66 90                	xchg   ax,ax
c0021c4c:	83 c4 10             	add    esp,0x10
c0021c4f:	c3                   	ret    

c0021c50 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0021c50:	83 ec 2c             	sub    esp,0x2c
c0021c53:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021c57:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0021c5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021c60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021c64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021c68:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021c6b:	0f b7 c0             	movzx  eax,ax
c0021c6e:	3d 06 08 00 00       	cmp    eax,0x806
c0021c73:	75 13                	jne    c0021c88 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0021c75:	83 ec 0c             	sub    esp,0xc
c0021c78:	68 4c 2a 03 c0       	push   0xc0032a4c
c0021c7d:	e8 cb 75 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0021c82:	83 c4 10             	add    esp,0x10
c0021c85:	eb 25                	jmp    c0021cac <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0021c87:	90                   	nop
c0021c88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021c8c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021c8f:	0f b7 c0             	movzx  eax,ax
c0021c92:	3d 00 08 00 00       	cmp    eax,0x800
c0021c97:	75 13                	jne    c0021cac <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0021c99:	83 ec 0c             	sub    esp,0xc
c0021c9c:	68 62 2a 03 c0       	push   0xc0032a62
c0021ca1:	e8 a7 75 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0021ca6:	83 c4 10             	add    esp,0x10
c0021ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0021cac:	90                   	nop
c0021cad:	83 c4 2c             	add    esp,0x2c
c0021cb0:	c3                   	ret    
c0021cb1:	66 90                	xchg   ax,ax
c0021cb3:	90                   	nop

c0021cb4 <KeNetCreateSemaphore>:
c0021cb4:	53                   	push   ebx
c0021cb5:	83 ec 18             	sub    esp,0x18
c0021cb8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0021cc0:	83 ec 0c             	sub    esp,0xc
c0021cc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021cc7:	e8 f2 46 ff ff       	call   c00163be <malloc>
c0021ccc:	83 c4 10             	add    esp,0x10
c0021ccf:	89 c3                	mov    ebx,eax
c0021cd1:	83 ec 08             	sub    esp,0x8
c0021cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021cd8:	53                   	push   ebx
c0021cd9:	e8 32 e9 ff ff       	call   c0020610 <Semaphore::Semaphore(int)>
c0021cde:	83 c4 10             	add    esp,0x10
c0021ce1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021ce5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021ce9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ced:	89 10                	mov    DWORD PTR [eax],edx
c0021cef:	90                   	nop
c0021cf0:	83 c4 18             	add    esp,0x18
c0021cf3:	5b                   	pop    ebx
c0021cf4:	c3                   	ret    
c0021cf5:	8d 76 00             	lea    esi,[esi+0x0]

c0021cf8 <KeNetFreeSemaphore>:
c0021cf8:	83 ec 0c             	sub    esp,0xc
c0021cfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cff:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d01:	83 ec 08             	sub    esp,0x8
c0021d04:	6a 10                	push   0x10
c0021d06:	50                   	push   eax
c0021d07:	e8 14 74 ff ff       	call   c0019120 <operator delete(void*, unsigned long)>
c0021d0c:	83 c4 10             	add    esp,0x10
c0021d0f:	90                   	nop
c0021d10:	83 c4 0c             	add    esp,0xc
c0021d13:	c3                   	ret    

c0021d14 <KeNetSignalSemaphore>:
c0021d14:	83 ec 0c             	sub    esp,0xc
c0021d17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d1d:	83 ec 0c             	sub    esp,0xc
c0021d20:	50                   	push   eax
c0021d21:	e8 4a ec ff ff       	call   c0020970 <Semaphore::release()>
c0021d26:	83 c4 10             	add    esp,0x10
c0021d29:	90                   	nop
c0021d2a:	83 c4 0c             	add    esp,0xc
c0021d2d:	c3                   	ret    
c0021d2e:	66 90                	xchg   ax,ax

c0021d30 <KeNetWaitSemaphore>:
c0021d30:	83 ec 0c             	sub    esp,0xc
c0021d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d37:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d39:	83 ec 08             	sub    esp,0x8
c0021d3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d40:	50                   	push   eax
c0021d41:	e8 66 ea ff ff       	call   c00207ac <Semaphore::acquire(int)>
c0021d46:	83 c4 10             	add    esp,0x10
c0021d49:	83 c4 0c             	add    esp,0xc
c0021d4c:	c3                   	ret    
c0021d4d:	8d 76 00             	lea    esi,[esi+0x0]

c0021d50 <KeNetCreateThread>:
c0021d50:	83 ec 0c             	sub    esp,0xc
c0021d53:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0021d58:	68 80 00 00 00       	push   0x80
c0021d5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021d61:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021d65:	50                   	push   eax
c0021d66:	e8 a1 32 00 00       	call   c002500c <Process::createThread(void (*)(void*), void*, int)>
c0021d6b:	83 c4 10             	add    esp,0x10
c0021d6e:	90                   	nop
c0021d6f:	83 c4 0c             	add    esp,0xc
c0021d72:	c3                   	ret    
c0021d73:	90                   	nop

c0021d74 <KeCPanic>:
c0021d74:	83 ec 0c             	sub    esp,0xc
c0021d77:	83 ec 0c             	sub    esp,0xc
c0021d7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d7e:	e8 e3 e4 ff ff       	call   c0020266 <KePanic(char const*)>
c0021d83:	83 c4 10             	add    esp,0x10
c0021d86:	90                   	nop
c0021d87:	83 c4 0c             	add    esp,0xc
c0021d8a:	c3                   	ret    

c0021d8b <CmOpen(char const*)>:
c0021d8b:	57                   	push   edi
c0021d8c:	56                   	push   esi
c0021d8d:	53                   	push   ebx
c0021d8e:	83 ec 1c             	sub    esp,0x1c
c0021d91:	6a 30                	push   0x30
c0021d93:	e8 26 46 ff ff       	call   c00163be <malloc>
c0021d98:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0021d9f:	89 c3                	mov    ebx,eax
c0021da1:	e8 18 46 ff ff       	call   c00163be <malloc>
c0021da6:	83 c4 0c             	add    esp,0xc
c0021da9:	89 c6                	mov    esi,eax
c0021dab:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0021db1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021db5:	50                   	push   eax
c0021db6:	e8 99 86 ff ff       	call   c001a454 <File::File(char const*, Process*)>
c0021dbb:	83 c4 0c             	add    esp,0xc
c0021dbe:	89 33                	mov    DWORD PTR [ebx],esi
c0021dc0:	8d 44 24 07          	lea    eax,[esp+0x7]
c0021dc4:	50                   	push   eax
c0021dc5:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021dc9:	50                   	push   eax
c0021dca:	56                   	push   esi
c0021dcb:	e8 a4 89 ff ff       	call   c001a774 <File::stat(unsigned long long*, bool*)>
c0021dd0:	5a                   	pop    edx
c0021dd1:	59                   	pop    ecx
c0021dd2:	6a 01                	push   0x1
c0021dd4:	ff 33                	push   DWORD PTR [ebx]
c0021dd6:	e8 97 86 ff ff       	call   c001a472 <File::open(FileOpenMode)>
c0021ddb:	5e                   	pop    esi
c0021ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021de0:	e8 d9 45 ff ff       	call   c00163be <malloc>
c0021de5:	5a                   	pop    edx
c0021de6:	89 c7                	mov    edi,eax
c0021de8:	8d 74 24 10          	lea    esi,[esp+0x10]
c0021dec:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021dee:	8b 10                	mov    edx,DWORD PTR [eax]
c0021df0:	56                   	push   esi
c0021df1:	57                   	push   edi
c0021df2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021df6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021dfa:	50                   	push   eax
c0021dfb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021dfe:	83 c4 14             	add    esp,0x14
c0021e01:	ff 33                	push   DWORD PTR [ebx]
c0021e03:	e8 c8 86 ff ff       	call   c001a4d0 <File::close()>
c0021e08:	59                   	pop    ecx
c0021e09:	58                   	pop    eax
c0021e0a:	6a 13                	push   0x13
c0021e0c:	ff 33                	push   DWORD PTR [ebx]
c0021e0e:	e8 5f 86 ff ff       	call   c001a472 <File::open(FileOpenMode)>
c0021e13:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021e15:	8b 10                	mov    edx,DWORD PTR [eax]
c0021e17:	89 34 24             	mov    DWORD PTR [esp],esi
c0021e1a:	57                   	push   edi
c0021e1b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021e1f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021e23:	50                   	push   eax
c0021e24:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0021e27:	83 c4 14             	add    esp,0x14
c0021e2a:	57                   	push   edi
c0021e2b:	e8 9e 45 ff ff       	call   c00163ce <free>
c0021e30:	83 c4 10             	add    esp,0x10
c0021e33:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0021e36:	75 10                	jne    c0021e48 <CmOpen(char const*)+0xbd>
c0021e38:	83 ec 0c             	sub    esp,0xc
c0021e3b:	68 77 2a 03 c0       	push   0xc0032a77
c0021e40:	e8 21 e4 ff ff       	call   c0020266 <KePanic(char const*)>
c0021e45:	83 c4 10             	add    esp,0x10
c0021e48:	8d 7b 05             	lea    edi,[ebx+0x5]
c0021e4b:	50                   	push   eax
c0021e4c:	6a 00                	push   0x0
c0021e4e:	6a 00                	push   0x0
c0021e50:	ff 33                	push   DWORD PTR [ebx]
c0021e52:	e8 d9 86 ff ff       	call   c001a530 <File::seek(unsigned long long)>
c0021e57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021e59:	8b 10                	mov    edx,DWORD PTR [eax]
c0021e5b:	89 34 24             	mov    DWORD PTR [esp],esi
c0021e5e:	57                   	push   edi
c0021e5f:	6a 00                	push   0x0
c0021e61:	6a 2b                	push   0x2b
c0021e63:	50                   	push   eax
c0021e64:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021e67:	83 c4 1c             	add    esp,0x1c
c0021e6a:	6a 00                	push   0x0
c0021e6c:	6a 00                	push   0x0
c0021e6e:	ff 33                	push   DWORD PTR [ebx]
c0021e70:	e8 bb 86 ff ff       	call   c001a530 <File::seek(unsigned long long)>
c0021e75:	83 c4 0c             	add    esp,0xc
c0021e78:	6a 08                	push   0x8
c0021e7a:	68 88 2a 03 c0       	push   0xc0032a88
c0021e7f:	57                   	push   edi
c0021e80:	e8 fb e4 fd ff       	call   c0000380 <memcmp>
c0021e85:	83 c4 10             	add    esp,0x10
c0021e88:	85 c0                	test   eax,eax
c0021e8a:	74 10                	je     c0021e9c <CmOpen(char const*)+0x111>
c0021e8c:	83 ec 0c             	sub    esp,0xc
c0021e8f:	68 91 2a 03 c0       	push   0xc0032a91
c0021e94:	e8 cd e3 ff ff       	call   c0020266 <KePanic(char const*)>
c0021e99:	83 c4 10             	add    esp,0x10
c0021e9c:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0021ea0:	89 d8                	mov    eax,ebx
c0021ea2:	83 c4 10             	add    esp,0x10
c0021ea5:	5b                   	pop    ebx
c0021ea6:	5e                   	pop    esi
c0021ea7:	5f                   	pop    edi
c0021ea8:	c3                   	ret    

c0021ea9 <CmClose(Reghive_Tag*)>:
c0021ea9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ead:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0021eb1:	74 0b                	je     c0021ebe <CmClose(Reghive_Tag*)+0x15>
c0021eb3:	8b 00                	mov    eax,DWORD PTR [eax]
c0021eb5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021eb9:	e9 12 86 ff ff       	jmp    c001a4d0 <File::close()>
c0021ebe:	c3                   	ret    

c0021ebf <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0021ebf:	53                   	push   ebx
c0021ec0:	83 ec 18             	sub    esp,0x18
c0021ec3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021ec7:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0021ecb:	74 29                	je     c0021ef6 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0021ecd:	50                   	push   eax
c0021ece:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0021ed3:	99                   	cdq    
c0021ed4:	52                   	push   edx
c0021ed5:	50                   	push   eax
c0021ed6:	ff 33                	push   DWORD PTR [ebx]
c0021ed8:	e8 53 86 ff ff       	call   c001a530 <File::seek(unsigned long long)>
c0021edd:	5a                   	pop    edx
c0021ede:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021ee0:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0021ee4:	8b 10                	mov    edx,DWORD PTR [eax]
c0021ee6:	51                   	push   ecx
c0021ee7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021eeb:	6a 00                	push   0x0
c0021eed:	6a 2b                	push   0x2b
c0021eef:	50                   	push   eax
c0021ef0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021ef3:	83 c4 20             	add    esp,0x20
c0021ef6:	83 c4 18             	add    esp,0x18
c0021ef9:	5b                   	pop    ebx
c0021efa:	c3                   	ret    

c0021efb <CmGetString(Reghive_Tag*, int, char*)>:
c0021efb:	55                   	push   ebp
c0021efc:	57                   	push   edi
c0021efd:	56                   	push   esi
c0021efe:	53                   	push   ebx
c0021eff:	31 db                	xor    ebx,ebx
c0021f01:	83 ec 70             	sub    esp,0x70
c0021f04:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0021f0b:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0021f0f:	50                   	push   eax
c0021f10:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021f17:	55                   	push   ebp
c0021f18:	e8 a2 ff ff ff       	call   c0021ebf <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021f1d:	83 c4 10             	add    esp,0x10
c0021f20:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0021f25:	c1 e0 08             	shl    eax,0x8
c0021f28:	89 c2                	mov    edx,eax
c0021f2a:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0021f2f:	09 d0                	or     eax,edx
c0021f31:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0021f36:	c1 e0 08             	shl    eax,0x8
c0021f39:	09 d0                	or     eax,edx
c0021f3b:	74 25                	je     c0021f62 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0021f3d:	6b fb 0d             	imul   edi,ebx,0xd
c0021f40:	52                   	push   edx
c0021f41:	8d 54 24 39          	lea    edx,[esp+0x39]
c0021f45:	52                   	push   edx
c0021f46:	50                   	push   eax
c0021f47:	55                   	push   ebp
c0021f48:	e8 72 ff ff ff       	call   c0021ebf <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021f4d:	8d 74 24 49          	lea    esi,[esp+0x49]
c0021f51:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0021f58:	b9 27 00 00 00       	mov    ecx,0x27
c0021f5d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021f5f:	83 c4 10             	add    esp,0x10
c0021f62:	83 c3 03             	add    ebx,0x3
c0021f65:	83 fb 15             	cmp    ebx,0x15
c0021f68:	75 b6                	jne    c0021f20 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0021f6a:	83 c4 6c             	add    esp,0x6c
c0021f6d:	5b                   	pop    ebx
c0021f6e:	5e                   	pop    esi
c0021f6f:	5f                   	pop    edi
c0021f70:	5d                   	pop    ebp
c0021f71:	c3                   	ret    

c0021f72 <CmEnterDirectory(Reghive_Tag*, int)>:
c0021f72:	83 ec 40             	sub    esp,0x40
c0021f75:	8d 44 24 09          	lea    eax,[esp+0x9]
c0021f79:	50                   	push   eax
c0021f7a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f7e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f82:	e8 38 ff ff ff       	call   c0021ebf <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021f87:	83 c4 10             	add    esp,0x10
c0021f8a:	83 c8 ff             	or     eax,0xffffffff
c0021f8d:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0021f92:	75 19                	jne    c0021fad <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0021f94:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0021f99:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0021f9e:	c1 e0 08             	shl    eax,0x8
c0021fa1:	09 c2                	or     edx,eax
c0021fa3:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0021fa8:	c1 e0 10             	shl    eax,0x10
c0021fab:	09 d0                	or     eax,edx
c0021fad:	83 c4 3c             	add    esp,0x3c
c0021fb0:	c3                   	ret    

c0021fb1 <CmGetNext(Reghive_Tag*, int)>:
c0021fb1:	83 ec 40             	sub    esp,0x40
c0021fb4:	8d 44 24 09          	lea    eax,[esp+0x9]
c0021fb8:	50                   	push   eax
c0021fb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021fbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021fc1:	e8 f9 fe ff ff       	call   c0021ebf <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021fc6:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0021fcb:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0021fd0:	c1 e0 08             	shl    eax,0x8
c0021fd3:	09 c2                	or     edx,eax
c0021fd5:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0021fda:	83 c4 4c             	add    esp,0x4c
c0021fdd:	c1 e0 10             	shl    eax,0x10
c0021fe0:	09 d0                	or     eax,edx
c0021fe2:	c3                   	ret    

c0021fe3 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0021fe3:	53                   	push   ebx
c0021fe4:	83 ec 18             	sub    esp,0x18
c0021fe7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021feb:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0021fef:	74 29                	je     c002201a <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0021ff1:	50                   	push   eax
c0021ff2:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0021ff7:	99                   	cdq    
c0021ff8:	52                   	push   edx
c0021ff9:	50                   	push   eax
c0021ffa:	ff 33                	push   DWORD PTR [ebx]
c0021ffc:	e8 2f 85 ff ff       	call   c001a530 <File::seek(unsigned long long)>
c0022001:	5a                   	pop    edx
c0022002:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022004:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0022008:	8b 10                	mov    edx,DWORD PTR [eax]
c002200a:	51                   	push   ecx
c002200b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002200f:	6a 00                	push   0x0
c0022011:	6a 2b                	push   0x2b
c0022013:	50                   	push   eax
c0022014:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0022017:	83 c4 20             	add    esp,0x20
c002201a:	83 c4 18             	add    esp,0x18
c002201d:	5b                   	pop    ebx
c002201e:	c3                   	ret    

c002201f <CmFreeExtent(Reghive_Tag*, int)>:
c002201f:	53                   	push   ebx
c0022020:	83 ec 3c             	sub    esp,0x3c
c0022023:	6a 2b                	push   0x2b
c0022025:	6a 00                	push   0x0
c0022027:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c002202b:	53                   	push   ebx
c002202c:	e8 bf e4 fd ff       	call   c00004f0 <memset>
c0022031:	83 c4 0c             	add    esp,0xc
c0022034:	53                   	push   ebx
c0022035:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022039:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002203d:	e8 a1 ff ff ff       	call   c0021fe3 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022042:	83 c4 48             	add    esp,0x48
c0022045:	5b                   	pop    ebx
c0022046:	c3                   	ret    

c0022047 <CmUpdateHeader(Reghive_Tag*)>:
c0022047:	83 ec 0c             	sub    esp,0xc
c002204a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002204e:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0022052:	74 10                	je     c0022064 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0022054:	52                   	push   edx
c0022055:	8d 50 05             	lea    edx,[eax+0x5]
c0022058:	52                   	push   edx
c0022059:	6a 00                	push   0x0
c002205b:	50                   	push   eax
c002205c:	e8 82 ff ff ff       	call   c0021fe3 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022061:	83 c4 10             	add    esp,0x10
c0022064:	83 c4 0c             	add    esp,0xc
c0022067:	c3                   	ret    

c0022068 <CmExpand(Reghive_Tag*, int)>:
c0022068:	57                   	push   edi
c0022069:	56                   	push   esi
c002206a:	83 ce ff             	or     esi,0xffffffff
c002206d:	53                   	push   ebx
c002206e:	83 ec 30             	sub    esp,0x30
c0022071:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0022075:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0022079:	74 5f                	je     c00220da <CmExpand(Reghive_Tag*, int)+0x72>
c002207b:	31 d2                	xor    edx,edx
c002207d:	31 f6                	xor    esi,esi
c002207f:	50                   	push   eax
c0022080:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0022084:	52                   	push   edx
c0022085:	50                   	push   eax
c0022086:	ff 33                	push   DWORD PTR [ebx]
c0022088:	e8 a3 84 ff ff       	call   c001a530 <File::seek(unsigned long long)>
c002208d:	83 c4 0c             	add    esp,0xc
c0022090:	6a 2b                	push   0x2b
c0022092:	6a 00                	push   0x0
c0022094:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0022098:	57                   	push   edi
c0022099:	e8 52 e4 fd ff       	call   c00004f0 <memset>
c002209e:	83 c4 10             	add    esp,0x10
c00220a1:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00220a5:	7d 1b                	jge    c00220c2 <CmExpand(Reghive_Tag*, int)+0x5a>
c00220a7:	83 ec 0c             	sub    esp,0xc
c00220aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00220ac:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c00220b0:	8b 10                	mov    edx,DWORD PTR [eax]
c00220b2:	46                   	inc    esi
c00220b3:	51                   	push   ecx
c00220b4:	57                   	push   edi
c00220b5:	6a 00                	push   0x0
c00220b7:	6a 2b                	push   0x2b
c00220b9:	50                   	push   eax
c00220ba:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00220bd:	83 c4 20             	add    esp,0x20
c00220c0:	eb df                	jmp    c00220a1 <CmExpand(Reghive_Tag*, int)+0x39>
c00220c2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00220c6:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c00220c9:	83 ec 0c             	sub    esp,0xc
c00220cc:	01 f2                	add    edx,esi
c00220ce:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c00220d1:	53                   	push   ebx
c00220d2:	e8 70 ff ff ff       	call   c0022047 <CmUpdateHeader(Reghive_Tag*)>
c00220d7:	83 c4 10             	add    esp,0x10
c00220da:	83 c4 30             	add    esp,0x30
c00220dd:	89 f0                	mov    eax,esi
c00220df:	5b                   	pop    ebx
c00220e0:	5e                   	pop    esi
c00220e1:	5f                   	pop    edi
c00220e2:	c3                   	ret    

c00220e3 <CmFindUnusedExtent(Reghive_Tag*)>:
c00220e3:	55                   	push   ebp
c00220e4:	57                   	push   edi
c00220e5:	56                   	push   esi
c00220e6:	53                   	push   ebx
c00220e7:	83 cb ff             	or     ebx,0xffffffff
c00220ea:	83 ec 1c             	sub    esp,0x1c
c00220ed:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00220f1:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c00220f5:	74 68                	je     c002215f <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00220f7:	be 2b 00 00 00       	mov    esi,0x2b
c00220fc:	51                   	push   ecx
c00220fd:	31 ff                	xor    edi,edi
c00220ff:	6a 00                	push   0x0
c0022101:	31 db                	xor    ebx,ebx
c0022103:	6a 00                	push   0x0
c0022105:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0022108:	e8 23 84 ff ff       	call   c001a530 <File::seek(unsigned long long)>
c002210d:	83 c4 10             	add    esp,0x10
c0022110:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0022113:	76 3b                	jbe    c0022150 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0022115:	83 ec 0c             	sub    esp,0xc
c0022118:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002211b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c002211f:	8b 10                	mov    edx,DWORD PTR [eax]
c0022121:	51                   	push   ecx
c0022122:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0022126:	51                   	push   ecx
c0022127:	6a 00                	push   0x0
c0022129:	6a 01                	push   0x1
c002212b:	50                   	push   eax
c002212c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002212f:	83 c4 20             	add    esp,0x20
c0022132:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0022137:	74 26                	je     c002215f <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0022139:	43                   	inc    ebx
c002213a:	52                   	push   edx
c002213b:	57                   	push   edi
c002213c:	56                   	push   esi
c002213d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0022140:	e8 eb 83 ff ff       	call   c001a530 <File::seek(unsigned long long)>
c0022145:	83 c6 2b             	add    esi,0x2b
c0022148:	83 d7 00             	adc    edi,0x0
c002214b:	83 c4 10             	add    esp,0x10
c002214e:	eb c0                	jmp    c0022110 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0022150:	50                   	push   eax
c0022151:	50                   	push   eax
c0022152:	6a 40                	push   0x40
c0022154:	55                   	push   ebp
c0022155:	e8 0e ff ff ff       	call   c0022068 <CmExpand(Reghive_Tag*, int)>
c002215a:	83 c4 10             	add    esp,0x10
c002215d:	89 c3                	mov    ebx,eax
c002215f:	83 c4 1c             	add    esp,0x1c
c0022162:	89 d8                	mov    eax,ebx
c0022164:	5b                   	pop    ebx
c0022165:	5e                   	pop    esi
c0022166:	5f                   	pop    edi
c0022167:	5d                   	pop    ebp
c0022168:	c3                   	ret    

c0022169 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0022169:	55                   	push   ebp
c002216a:	57                   	push   edi
c002216b:	56                   	push   esi
c002216c:	53                   	push   ebx
c002216d:	81 ec 88 00 00 00    	sub    esp,0x88
c0022173:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c002217a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022181:	e8 5d ff ff ff       	call   c00220e3 <CmFindUnusedExtent(Reghive_Tag*)>
c0022186:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002218a:	83 c4 0c             	add    esp,0xc
c002218d:	6a 2b                	push   0x2b
c002218f:	6a 00                	push   0x0
c0022191:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0022195:	55                   	push   ebp
c0022196:	e8 55 e3 fd ff       	call   c00004f0 <memset>
c002219b:	83 c4 10             	add    esp,0x10
c002219e:	85 db                	test   ebx,ebx
c00221a0:	74 12                	je     c00221b4 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00221a2:	51                   	push   ecx
c00221a3:	55                   	push   ebp
c00221a4:	53                   	push   ebx
c00221a5:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00221ac:	e8 0e fd ff ff       	call   c0021ebf <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00221b1:	83 c4 10             	add    esp,0x10
c00221b4:	8d 7c 24 45          	lea    edi,[esp+0x45]
c00221b8:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00221bf:	b9 2b 00 00 00       	mov    ecx,0x2b
c00221c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00221c6:	85 db                	test   ebx,ebx
c00221c8:	74 49                	je     c0022213 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c00221ca:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c00221cf:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00221d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00221d8:	c1 e0 08             	shl    eax,0x8
c00221db:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00221e1:	09 c8                	or     eax,ecx
c00221e3:	74 11                	je     c00221f6 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c00221e5:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00221e9:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c00221ed:	c1 e8 10             	shr    eax,0x10
c00221f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00221f4:	eb 0f                	jmp    c0022205 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c00221f6:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00221fb:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0022200:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0022205:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0022209:	c1 ea 08             	shr    edx,0x8
c002220c:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0022211:	eb 0f                	jmp    c0022222 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0022213:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0022218:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c002221d:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0022222:	52                   	push   edx
c0022223:	8d 44 24 49          	lea    eax,[esp+0x49]
c0022227:	50                   	push   eax
c0022228:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002222c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022233:	e8 ab fd ff ff       	call   c0021fe3 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022238:	83 c4 10             	add    esp,0x10
c002223b:	85 db                	test   ebx,ebx
c002223d:	74 12                	je     c0022251 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c002223f:	50                   	push   eax
c0022240:	55                   	push   ebp
c0022241:	53                   	push   ebx
c0022242:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022249:	e8 95 fd ff ff       	call   c0021fe3 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002224e:	83 c4 10             	add    esp,0x10
c0022251:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022255:	83 c4 7c             	add    esp,0x7c
c0022258:	5b                   	pop    ebx
c0022259:	5e                   	pop    esi
c002225a:	5f                   	pop    edi
c002225b:	5d                   	pop    ebp
c002225c:	c3                   	ret    

c002225d <CmSetString(Reghive_Tag*, int, char const*)>:
c002225d:	55                   	push   ebp
c002225e:	57                   	push   edi
c002225f:	56                   	push   esi
c0022260:	53                   	push   ebx
c0022261:	bb 27 00 00 00       	mov    ebx,0x27
c0022266:	81 ec 88 00 00 00    	sub    esp,0x88
c002226c:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0022273:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c002227a:	e8 f1 e2 fd ff       	call   c0000570 <strlen>
c002227f:	8d 48 26             	lea    ecx,[eax+0x26]
c0022282:	89 c8                	mov    eax,ecx
c0022284:	99                   	cdq    
c0022285:	f7 fb                	idiv   ebx
c0022287:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002228b:	83 c4 10             	add    esp,0x10
c002228e:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0022294:	7e 10                	jle    c00222a6 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0022296:	83 ec 0c             	sub    esp,0xc
c0022299:	68 a2 2a 03 c0       	push   0xc0032aa2
c002229e:	e8 c3 df ff ff       	call   c0020266 <KePanic(char const*)>
c00222a3:	83 c4 10             	add    esp,0x10
c00222a6:	31 ff                	xor    edi,edi
c00222a8:	50                   	push   eax
c00222a9:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00222ad:	53                   	push   ebx
c00222ae:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00222b5:	56                   	push   esi
c00222b6:	e8 04 fc ff ff       	call   c0021ebf <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00222bb:	83 c4 10             	add    esp,0x10
c00222be:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c00222c2:	89 d0                	mov    eax,edx
c00222c4:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c00222c8:	c1 e0 08             	shl    eax,0x8
c00222cb:	09 c2                	or     edx,eax
c00222cd:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c00222d1:	c1 e2 08             	shl    edx,0x8
c00222d4:	09 c2                	or     edx,eax
c00222d6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00222da:	7e 76                	jle    c0022352 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c00222dc:	85 d2                	test   edx,edx
c00222de:	75 25                	jne    c0022305 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c00222e0:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c00222e5:	8d 44 24 45          	lea    eax,[esp+0x45]
c00222e9:	50                   	push   eax
c00222ea:	6a 00                	push   0x0
c00222ec:	6a 00                	push   0x0
c00222ee:	56                   	push   esi
c00222ef:	e8 75 fe ff ff       	call   c0022169 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00222f4:	83 c4 10             	add    esp,0x10
c00222f7:	89 c2                	mov    edx,eax
c00222f9:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c00222fc:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c00222ff:	c1 f8 10             	sar    eax,0x10
c0022302:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0022305:	55                   	push   ebp
c0022306:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c002230a:	55                   	push   ebp
c002230b:	52                   	push   edx
c002230c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0022310:	56                   	push   esi
c0022311:	e8 a9 fb ff ff       	call   c0021ebf <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022316:	83 c4 0c             	add    esp,0xc
c0022319:	6a 27                	push   0x27
c002231b:	6a 00                	push   0x0
c002231d:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0022321:	51                   	push   ecx
c0022322:	e8 c9 e1 fd ff       	call   c00004f0 <memset>
c0022327:	83 c4 0c             	add    esp,0xc
c002232a:	6b c7 27             	imul   eax,edi,0x27
c002232d:	6a 27                	push   0x27
c002232f:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0022336:	50                   	push   eax
c0022337:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c002233b:	51                   	push   ecx
c002233c:	e8 3f e3 fd ff       	call   c0000680 <strncpy>
c0022341:	83 c4 0c             	add    esp,0xc
c0022344:	55                   	push   ebp
c0022345:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022349:	52                   	push   edx
c002234a:	56                   	push   esi
c002234b:	e8 93 fc ff ff       	call   c0021fe3 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022350:	eb 19                	jmp    c002236b <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0022352:	85 d2                	test   edx,edx
c0022354:	74 18                	je     c002236e <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0022356:	51                   	push   ecx
c0022357:	51                   	push   ecx
c0022358:	52                   	push   edx
c0022359:	56                   	push   esi
c002235a:	e8 c0 fc ff ff       	call   c002201f <CmFreeExtent(Reghive_Tag*, int)>
c002235f:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0022363:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0022367:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002236b:	83 c4 10             	add    esp,0x10
c002236e:	47                   	inc    edi
c002236f:	83 c3 03             	add    ebx,0x3
c0022372:	83 ff 07             	cmp    edi,0x7
c0022375:	0f 85 43 ff ff ff    	jne    c00222be <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c002237b:	50                   	push   eax
c002237c:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0022380:	50                   	push   eax
c0022381:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022388:	56                   	push   esi
c0022389:	e8 55 fc ff ff       	call   c0021fe3 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002238e:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022394:	5b                   	pop    ebx
c0022395:	5e                   	pop    esi
c0022396:	5f                   	pop    edi
c0022397:	5d                   	pop    ebp
c0022398:	c3                   	ret    

c0022399 <CmGetMatch(char*, char*, bool, bool*)>:
c0022399:	56                   	push   esi
c002239a:	53                   	push   ebx
c002239b:	50                   	push   eax
c002239c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00223a0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00223a5:	74 25                	je     c00223cc <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00223a7:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00223aa:	31 db                	xor    ebx,ebx
c00223ac:	50                   	push   eax
c00223ad:	50                   	push   eax
c00223ae:	8d 04 9d 80 43 03 c0 	lea    eax,[ebx*4-0x3ffcbc80]
c00223b5:	50                   	push   eax
c00223b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223ba:	e8 91 e3 fd ff       	call   c0000750 <strcmp>
c00223bf:	83 c4 10             	add    esp,0x10
c00223c2:	85 c0                	test   eax,eax
c00223c4:	74 2e                	je     c00223f4 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00223c6:	43                   	inc    ebx
c00223c7:	83 fb 3f             	cmp    ebx,0x3f
c00223ca:	75 e0                	jne    c00223ac <CmGetMatch(char*, char*, bool, bool*)+0x13>
c00223cc:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00223cf:	31 db                	xor    ebx,ebx
c00223d1:	8d 04 9d 80 43 03 c0 	lea    eax,[ebx*4-0x3ffcbc80]
c00223d8:	51                   	push   ecx
c00223d9:	51                   	push   ecx
c00223da:	50                   	push   eax
c00223db:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00223df:	e8 6c e3 fd ff       	call   c0000750 <strcmp>
c00223e4:	83 c4 10             	add    esp,0x10
c00223e7:	85 c0                	test   eax,eax
c00223e9:	74 09                	je     c00223f4 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00223eb:	43                   	inc    ebx
c00223ec:	83 fb 3f             	cmp    ebx,0x3f
c00223ef:	75 e0                	jne    c00223d1 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c00223f1:	83 cb ff             	or     ebx,0xffffffff
c00223f4:	89 d8                	mov    eax,ebx
c00223f6:	5a                   	pop    edx
c00223f7:	5b                   	pop    ebx
c00223f8:	5e                   	pop    esi
c00223f9:	c3                   	ret    

c00223fa <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c00223fa:	55                   	push   ebp
c00223fb:	31 c0                	xor    eax,eax
c00223fd:	57                   	push   edi
c00223fe:	56                   	push   esi
c00223ff:	53                   	push   ebx
c0022400:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022404:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0022408:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c002240a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002240e:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0022411:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022415:	83 fd 1f             	cmp    ebp,0x1f
c0022418:	7f 0b                	jg     c0022425 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c002241a:	0f b6 c2             	movzx  eax,dl
c002241d:	d3 e0                	shl    eax,cl
c002241f:	09 07                	or     DWORD PTR [edi],eax
c0022421:	b0 01                	mov    al,0x1
c0022423:	01 33                	add    DWORD PTR [ebx],esi
c0022425:	5b                   	pop    ebx
c0022426:	5e                   	pop    esi
c0022427:	5f                   	pop    edi
c0022428:	5d                   	pop    ebp
c0022429:	c3                   	ret    

c002242a <CmGetShift(unsigned int*, int*, int, bool*)>:
c002242a:	57                   	push   edi
c002242b:	56                   	push   esi
c002242c:	53                   	push   ebx
c002242d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0022431:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022435:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0022439:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c002243d:	39 0b                	cmp    DWORD PTR [ebx],ecx
c002243f:	7c 17                	jl     c0022458 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0022441:	8b 17                	mov    edx,DWORD PTR [edi]
c0022443:	b8 01 00 00 00       	mov    eax,0x1
c0022448:	d3 e0                	shl    eax,cl
c002244a:	48                   	dec    eax
c002244b:	21 d0                	and    eax,edx
c002244d:	d3 ea                	shr    edx,cl
c002244f:	89 17                	mov    DWORD PTR [edi],edx
c0022451:	29 0b                	sub    DWORD PTR [ebx],ecx
c0022453:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0022456:	eb 05                	jmp    c002245d <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0022458:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002245b:	31 c0                	xor    eax,eax
c002245d:	5b                   	pop    ebx
c002245e:	5e                   	pop    esi
c002245f:	5f                   	pop    edi
c0022460:	c3                   	ret    

c0022461 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0022461:	83 ec 40             	sub    esp,0x40
c0022464:	8d 44 24 09          	lea    eax,[esp+0x9]
c0022468:	50                   	push   eax
c0022469:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002246d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022471:	e8 49 fa ff ff       	call   c0021ebf <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022476:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002247a:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c002247e:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0022482:	89 10                	mov    DWORD PTR [eax],edx
c0022484:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0022487:	83 c4 4c             	add    esp,0x4c
c002248a:	c3                   	ret    

c002248b <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c002248b:	55                   	push   ebp
c002248c:	57                   	push   edi
c002248d:	56                   	push   esi
c002248e:	53                   	push   ebx
c002248f:	83 ec 40             	sub    esp,0x40
c0022492:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0022496:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c002249a:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c002249e:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00224a2:	53                   	push   ebx
c00224a3:	56                   	push   esi
c00224a4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00224a8:	e8 12 fa ff ff       	call   c0021ebf <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00224ad:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c00224b1:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c00224b5:	83 c4 0c             	add    esp,0xc
c00224b8:	53                   	push   ebx
c00224b9:	56                   	push   esi
c00224ba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00224be:	e8 20 fb ff ff       	call   c0021fe3 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00224c3:	83 c4 4c             	add    esp,0x4c
c00224c6:	5b                   	pop    ebx
c00224c7:	5e                   	pop    esi
c00224c8:	5f                   	pop    edi
c00224c9:	5d                   	pop    ebp
c00224ca:	c3                   	ret    

c00224cb <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c00224cb:	55                   	push   ebp
c00224cc:	57                   	push   edi
c00224cd:	56                   	push   esi
c00224ce:	31 f6                	xor    esi,esi
c00224d0:	53                   	push   ebx
c00224d1:	31 db                	xor    ebx,ebx
c00224d3:	83 ec 40             	sub    esp,0x40
c00224d6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00224de:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00224e6:	6a 12                	push   0x12
c00224e8:	68 ee 00 00 00       	push   0xee
c00224ed:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00224f1:	e8 fa df fd ff       	call   c00004f0 <memset>
c00224f6:	83 c4 10             	add    esp,0x10
c00224f9:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00224fd:	6a 08                	push   0x8
c00224ff:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0022503:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0022507:	50                   	push   eax
c0022508:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c002250c:	55                   	push   ebp
c002250d:	57                   	push   edi
c002250e:	e8 e7 fe ff ff       	call   c00223fa <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0022513:	83 c4 10             	add    esp,0x10
c0022516:	8d 44 24 0f          	lea    eax,[esp+0xf]
c002251a:	50                   	push   eax
c002251b:	6a 06                	push   0x6
c002251d:	55                   	push   ebp
c002251e:	57                   	push   edi
c002251f:	e8 06 ff ff ff       	call   c002242a <CmGetShift(unsigned int*, int*, int, bool*)>
c0022524:	83 c4 10             	add    esp,0x10
c0022527:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002252c:	74 07                	je     c0022535 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c002252e:	46                   	inc    esi
c002252f:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0022533:	eb e1                	jmp    c0022516 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0022535:	43                   	inc    ebx
c0022536:	83 fb 12             	cmp    ebx,0x12
c0022539:	75 c2                	jne    c00224fd <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c002253b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002253f:	31 db                	xor    ebx,ebx
c0022541:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022544:	50                   	push   eax
c0022545:	50                   	push   eax
c0022546:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c002254b:	43                   	inc    ebx
c002254c:	8d 04 85 80 43 03 c0 	lea    eax,[eax*4-0x3ffcbc80]
c0022553:	50                   	push   eax
c0022554:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0022558:	e8 e3 e2 fd ff       	call   c0000840 <strcat>
c002255d:	83 c4 10             	add    esp,0x10
c0022560:	83 fb 18             	cmp    ebx,0x18
c0022563:	75 df                	jne    c0022544 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0022565:	83 c4 3c             	add    esp,0x3c
c0022568:	31 c0                	xor    eax,eax
c002256a:	5b                   	pop    ebx
c002256b:	5e                   	pop    esi
c002256c:	5f                   	pop    edi
c002256d:	5d                   	pop    ebp
c002256e:	c3                   	ret    

c002256f <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c002256f:	83 ec 40             	sub    esp,0x40
c0022572:	8d 44 24 09          	lea    eax,[esp+0x9]
c0022576:	50                   	push   eax
c0022577:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002257b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002257f:	e8 3b f9 ff ff       	call   c0021ebf <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022584:	58                   	pop    eax
c0022585:	5a                   	pop    edx
c0022586:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002258a:	8d 44 24 15          	lea    eax,[esp+0x15]
c002258e:	50                   	push   eax
c002258f:	e8 37 ff ff ff       	call   c00224cb <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0022594:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0022599:	83 c4 4c             	add    esp,0x4c
c002259c:	c3                   	ret    

c002259d <CmConvertToInternalFilename(char const*, unsigned char*)>:
c002259d:	55                   	push   ebp
c002259e:	57                   	push   edi
c002259f:	56                   	push   esi
c00225a0:	53                   	push   ebx
c00225a1:	31 db                	xor    ebx,ebx
c00225a3:	83 ec 70             	sub    esp,0x70
c00225a6:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00225ad:	6a 30                	push   0x30
c00225af:	6a 00                	push   0x0
c00225b1:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00225b5:	56                   	push   esi
c00225b6:	e8 35 df fd ff       	call   c00004f0 <memset>
c00225bb:	83 c4 10             	add    esp,0x10
c00225be:	83 ec 0c             	sub    esp,0xc
c00225c1:	57                   	push   edi
c00225c2:	e8 a9 df fd ff       	call   c0000570 <strlen>
c00225c7:	83 c4 10             	add    esp,0x10
c00225ca:	39 d8                	cmp    eax,ebx
c00225cc:	76 16                	jbe    c00225e4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c00225ce:	83 ec 0c             	sub    esp,0xc
c00225d1:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00225d5:	50                   	push   eax
c00225d6:	e8 55 e3 fd ff       	call   c0000930 <toupper>
c00225db:	83 c4 10             	add    esp,0x10
c00225de:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00225e1:	43                   	inc    ebx
c00225e2:	eb da                	jmp    c00225be <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c00225e4:	31 f6                	xor    esi,esi
c00225e6:	52                   	push   edx
c00225e7:	31 ff                	xor    edi,edi
c00225e9:	6a 18                	push   0x18
c00225eb:	6a 3f                	push   0x3f
c00225ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00225f1:	50                   	push   eax
c00225f2:	e8 f9 de fd ff       	call   c00004f0 <memset>
c00225f7:	83 c4 10             	add    esp,0x10
c00225fa:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c00225fe:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0022602:	84 c0                	test   al,al
c0022604:	0f 84 b0 00 00 00    	je     c00226ba <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c002260a:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c002260e:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0022613:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0022617:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c002261c:	8d 6e 01             	lea    ebp,[esi+0x1]
c002261f:	83 ec 0c             	sub    esp,0xc
c0022622:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0022626:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c002262a:	53                   	push   ebx
c002262b:	e8 40 df fd ff       	call   c0000570 <strlen>
c0022630:	83 c4 10             	add    esp,0x10
c0022633:	85 c0                	test   eax,eax
c0022635:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0022639:	74 0b                	je     c0022646 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c002263b:	50                   	push   eax
c002263c:	6a 01                	push   0x1
c002263e:	53                   	push   ebx
c002263f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0022643:	50                   	push   eax
c0022644:	eb 0a                	jmp    c0022650 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0022646:	50                   	push   eax
c0022647:	6a 00                	push   0x0
c0022649:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002264d:	50                   	push   eax
c002264e:	6a 00                	push   0x0
c0022650:	e8 44 fd ff ff       	call   c0022399 <CmGetMatch(char*, char*, bool, bool*)>
c0022655:	83 c4 10             	add    esp,0x10
c0022658:	83 f8 ff             	cmp    eax,0xffffffff
c002265b:	75 1a                	jne    c0022677 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c002265d:	83 ec 0c             	sub    esp,0xc
c0022660:	68 b7 2a 03 c0       	push   0xc0032ab7
c0022665:	e8 fc db ff ff       	call   c0020266 <KePanic(char const*)>
c002266a:	83 c4 10             	add    esp,0x10
c002266d:	b8 02 00 00 00       	mov    eax,0x2
c0022672:	e9 bc 00 00 00       	jmp    c0022733 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0022677:	83 ff 18             	cmp    edi,0x18
c002267a:	75 1a                	jne    c0022696 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c002267c:	83 ec 0c             	sub    esp,0xc
c002267f:	68 cc 2a 03 c0       	push   0xc0032acc
c0022684:	e8 dd db ff ff       	call   c0020266 <KePanic(char const*)>
c0022689:	83 c4 10             	add    esp,0x10
c002268c:	b8 01 00 00 00       	mov    eax,0x1
c0022691:	e9 9d 00 00 00       	jmp    c0022733 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0022696:	47                   	inc    edi
c0022697:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002269c:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00226a0:	74 02                	je     c00226a4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c00226a2:	89 ee                	mov    esi,ebp
c00226a4:	83 ec 0c             	sub    esp,0xc
c00226a7:	53                   	push   ebx
c00226a8:	e8 c3 de fd ff       	call   c0000570 <strlen>
c00226ad:	83 c4 10             	add    esp,0x10
c00226b0:	85 c0                	test   eax,eax
c00226b2:	74 06                	je     c00226ba <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00226b4:	46                   	inc    esi
c00226b5:	e9 40 ff ff ff       	jmp    c00225fa <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00226ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00226c2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00226ca:	31 f6                	xor    esi,esi
c00226cc:	50                   	push   eax
c00226cd:	31 ff                	xor    edi,edi
c00226cf:	6a 12                	push   0x12
c00226d1:	68 ee 00 00 00       	push   0xee
c00226d6:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00226dd:	e8 0e de fd ff       	call   c00004f0 <memset>
c00226e2:	83 c4 10             	add    esp,0x10
c00226e5:	83 fe 17             	cmp    esi,0x17
c00226e8:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00226ec:	7e 26                	jle    c0022714 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c00226ee:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00226f2:	50                   	push   eax
c00226f3:	6a 08                	push   0x8
c00226f5:	55                   	push   ebp
c00226f6:	53                   	push   ebx
c00226f7:	e8 2e fd ff ff       	call   c002242a <CmGetShift(unsigned int*, int*, int, bool*)>
c00226fc:	83 c4 10             	add    esp,0x10
c00226ff:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0022704:	74 26                	je     c002272c <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c0022706:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c002270d:	4e                   	dec    esi
c002270e:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0022711:	47                   	inc    edi
c0022712:	eb 1c                	jmp    c0022730 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0022714:	6a 06                	push   0x6
c0022716:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c002271b:	50                   	push   eax
c002271c:	55                   	push   ebp
c002271d:	53                   	push   ebx
c002271e:	e8 d7 fc ff ff       	call   c00223fa <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0022723:	83 c4 10             	add    esp,0x10
c0022726:	84 c0                	test   al,al
c0022728:	75 06                	jne    c0022730 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c002272a:	eb c2                	jmp    c00226ee <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c002272c:	31 c0                	xor    eax,eax
c002272e:	eb 03                	jmp    c0022733 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0022730:	46                   	inc    esi
c0022731:	eb b2                	jmp    c00226e5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c0022733:	83 c4 6c             	add    esp,0x6c
c0022736:	5b                   	pop    ebx
c0022737:	5e                   	pop    esi
c0022738:	5f                   	pop    edi
c0022739:	5d                   	pop    ebp
c002273a:	c3                   	ret    

c002273b <CmCreateString(Reghive_Tag*, int, char const*)>:
c002273b:	53                   	push   ebx
c002273c:	83 ec 3c             	sub    esp,0x3c
c002273f:	6a 2b                	push   0x2b
c0022741:	6a 00                	push   0x0
c0022743:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022747:	53                   	push   ebx
c0022748:	e8 a3 dd fd ff       	call   c00004f0 <memset>
c002274d:	58                   	pop    eax
c002274e:	5a                   	pop    edx
c002274f:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022753:	50                   	push   eax
c0022754:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022758:	e8 40 fe ff ff       	call   c002259d <CmConvertToInternalFilename(char const*, unsigned char*)>
c002275d:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0022762:	83 c4 0c             	add    esp,0xc
c0022765:	6a 15                	push   0x15
c0022767:	6a 00                	push   0x0
c0022769:	8d 44 24 27          	lea    eax,[esp+0x27]
c002276d:	50                   	push   eax
c002276e:	e8 7d dd fd ff       	call   c00004f0 <memset>
c0022773:	53                   	push   ebx
c0022774:	6a 00                	push   0x0
c0022776:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002277a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002277e:	e8 e6 f9 ff ff       	call   c0022169 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022783:	83 c4 58             	add    esp,0x58
c0022786:	5b                   	pop    ebx
c0022787:	c3                   	ret    

c0022788 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0022788:	56                   	push   esi
c0022789:	53                   	push   ebx
c002278a:	83 ec 48             	sub    esp,0x48
c002278d:	6a 12                	push   0x12
c002278f:	68 ff 00 00 00       	push   0xff
c0022794:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0022798:	56                   	push   esi
c0022799:	e8 52 dd fd ff       	call   c00004f0 <memset>
c002279e:	5a                   	pop    edx
c002279f:	59                   	pop    ecx
c00227a0:	56                   	push   esi
c00227a1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00227a5:	e8 f3 fd ff ff       	call   c002259d <CmConvertToInternalFilename(char const*, unsigned char*)>
c00227aa:	83 c4 10             	add    esp,0x10
c00227ad:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00227b1:	85 db                	test   ebx,ebx
c00227b3:	74 42                	je     c00227f7 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00227b5:	50                   	push   eax
c00227b6:	8d 44 24 19          	lea    eax,[esp+0x19]
c00227ba:	50                   	push   eax
c00227bb:	53                   	push   ebx
c00227bc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00227c0:	e8 fa f6 ff ff       	call   c0021ebf <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00227c5:	83 c4 0c             	add    esp,0xc
c00227c8:	6a 12                	push   0x12
c00227ca:	8d 44 24 21          	lea    eax,[esp+0x21]
c00227ce:	50                   	push   eax
c00227cf:	56                   	push   esi
c00227d0:	e8 ab db fd ff       	call   c0000380 <memcmp>
c00227d5:	83 c4 10             	add    esp,0x10
c00227d8:	85 c0                	test   eax,eax
c00227da:	74 1e                	je     c00227fa <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00227dc:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00227e1:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00227e6:	c1 e3 08             	shl    ebx,0x8
c00227e9:	09 d8                	or     eax,ebx
c00227eb:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00227f0:	c1 e3 10             	shl    ebx,0x10
c00227f3:	09 c3                	or     ebx,eax
c00227f5:	eb ba                	jmp    c00227b1 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00227f7:	83 cb ff             	or     ebx,0xffffffff
c00227fa:	89 d8                	mov    eax,ebx
c00227fc:	83 c4 44             	add    esp,0x44
c00227ff:	5b                   	pop    ebx
c0022800:	5e                   	pop    esi
c0022801:	c3                   	ret    

c0022802 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0022802:	57                   	push   edi
c0022803:	56                   	push   esi
c0022804:	53                   	push   ebx
c0022805:	83 ec 34             	sub    esp,0x34
c0022808:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002280c:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0022810:	6a 2b                	push   0x2b
c0022812:	6a 00                	push   0x0
c0022814:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022818:	53                   	push   ebx
c0022819:	e8 d2 dc fd ff       	call   c00004f0 <memset>
c002281e:	58                   	pop    eax
c002281f:	5a                   	pop    edx
c0022820:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022824:	50                   	push   eax
c0022825:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022829:	e8 6f fd ff ff       	call   c002259d <CmConvertToInternalFilename(char const*, unsigned char*)>
c002282e:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0022832:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0022836:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c002283a:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c002283e:	53                   	push   ebx
c002283f:	6a 00                	push   0x0
c0022841:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022845:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022849:	e8 1b f9 ff ff       	call   c0022169 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c002284e:	83 c4 50             	add    esp,0x50
c0022851:	5b                   	pop    ebx
c0022852:	5e                   	pop    esi
c0022853:	5f                   	pop    edi
c0022854:	c3                   	ret    

c0022855 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0022855:	55                   	push   ebp
c0022856:	57                   	push   edi
c0022857:	56                   	push   esi
c0022858:	53                   	push   ebx
c0022859:	83 ec 40             	sub    esp,0x40
c002285c:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0022860:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0022864:	6a 2b                	push   0x2b
c0022866:	6a 00                	push   0x0
c0022868:	8d 74 24 11          	lea    esi,[esp+0x11]
c002286c:	56                   	push   esi
c002286d:	e8 7e dc fd ff       	call   c00004f0 <memset>
c0022872:	5f                   	pop    edi
c0022873:	89 ef                	mov    edi,ebp
c0022875:	58                   	pop    eax
c0022876:	8d 44 24 11          	lea    eax,[esp+0x11]
c002287a:	50                   	push   eax
c002287b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c002287f:	e8 19 fd ff ff       	call   c002259d <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022884:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0022889:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c002288e:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0022893:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0022898:	83 c4 10             	add    esp,0x10
c002289b:	85 ed                	test   ebp,ebp
c002289d:	74 14                	je     c00228b3 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c002289f:	51                   	push   ecx
c00228a0:	51                   	push   ecx
c00228a1:	57                   	push   edi
c00228a2:	53                   	push   ebx
c00228a3:	e8 09 f7 ff ff       	call   c0021fb1 <CmGetNext(Reghive_Tag*, int)>
c00228a8:	83 c4 10             	add    esp,0x10
c00228ab:	85 c0                	test   eax,eax
c00228ad:	74 04                	je     c00228b3 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00228af:	89 c7                	mov    edi,eax
c00228b1:	eb e8                	jmp    c002289b <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00228b3:	56                   	push   esi
c00228b4:	6a 00                	push   0x0
c00228b6:	57                   	push   edi
c00228b7:	53                   	push   ebx
c00228b8:	e8 ac f8 ff ff       	call   c0022169 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00228bd:	83 c4 0c             	add    esp,0xc
c00228c0:	89 c7                	mov    edi,eax
c00228c2:	56                   	push   esi
c00228c3:	50                   	push   eax
c00228c4:	53                   	push   ebx
c00228c5:	e8 f5 f5 ff ff       	call   c0021ebf <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00228ca:	58                   	pop    eax
c00228cb:	5a                   	pop    edx
c00228cc:	6a 6c                	push   0x6c
c00228ce:	6a 00                	push   0x0
c00228d0:	6a 00                	push   0x0
c00228d2:	68 dd 2a 03 c0       	push   0xc0032add
c00228d7:	57                   	push   edi
c00228d8:	53                   	push   ebx
c00228d9:	e8 24 ff ff ff       	call   c0022802 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00228de:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00228e2:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00228e6:	c1 e8 10             	shr    eax,0x10
c00228e9:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00228ed:	83 c4 1c             	add    esp,0x1c
c00228f0:	56                   	push   esi
c00228f1:	57                   	push   edi
c00228f2:	53                   	push   ebx
c00228f3:	e8 eb f6 ff ff       	call   c0021fe3 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00228f8:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00228fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022902:	c1 e0 08             	shl    eax,0x8
c0022905:	09 c2                	or     edx,eax
c0022907:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002290c:	83 c4 4c             	add    esp,0x4c
c002290f:	c1 e0 10             	shl    eax,0x10
c0022912:	5b                   	pop    ebx
c0022913:	09 d0                	or     eax,edx
c0022915:	5e                   	pop    esi
c0022916:	5f                   	pop    edi
c0022917:	5d                   	pop    ebp
c0022918:	c3                   	ret    

c0022919 <zStrtok(char*, char const*)>:
c0022919:	55                   	push   ebp
c002291a:	57                   	push   edi
c002291b:	56                   	push   esi
c002291c:	53                   	push   ebx
c002291d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022921:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022925:	85 db                	test   ebx,ebx
c0022927:	74 2f                	je     c0022958 <zStrtok(char*, char const*)+0x3f>
c0022929:	85 c0                	test   eax,eax
c002292b:	75 09                	jne    c0022936 <zStrtok(char*, char const*)+0x1d>
c002292d:	a1 f0 f9 03 c0       	mov    eax,ds:0xc003f9f0
c0022932:	85 c0                	test   eax,eax
c0022934:	74 50                	je     c0022986 <zStrtok(char*, char const*)+0x6d>
c0022936:	31 c9                	xor    ecx,ecx
c0022938:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c002293c:	74 03                	je     c0022941 <zStrtok(char*, char const*)+0x28>
c002293e:	41                   	inc    ecx
c002293f:	eb f7                	jmp    c0022938 <zStrtok(char*, char const*)+0x1f>
c0022941:	31 d2                	xor    edx,edx
c0022943:	39 ca                	cmp    edx,ecx
c0022945:	74 15                	je     c002295c <zStrtok(char*, char const*)+0x43>
c0022947:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c002294b:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c002294e:	8d 3c 10             	lea    edi,[eax+edx*1]
c0022951:	39 ee                	cmp    esi,ebp
c0022953:	74 13                	je     c0022968 <zStrtok(char*, char const*)+0x4f>
c0022955:	42                   	inc    edx
c0022956:	eb eb                	jmp    c0022943 <zStrtok(char*, char const*)+0x2a>
c0022958:	31 c0                	xor    eax,eax
c002295a:	eb 2a                	jmp    c0022986 <zStrtok(char*, char const*)+0x6d>
c002295c:	c7 05 f0 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9f0,0x0
c0022966:	eb 1e                	jmp    c0022986 <zStrtok(char*, char const*)+0x6d>
c0022968:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c002296b:	39 ce                	cmp    esi,ecx
c002296d:	75 0a                	jne    c0022979 <zStrtok(char*, char const*)+0x60>
c002296f:	40                   	inc    eax
c0022970:	a3 f0 f9 03 c0       	mov    ds:0xc003f9f0,eax
c0022975:	89 d8                	mov    eax,ebx
c0022977:	eb 0d                	jmp    c0022986 <zStrtok(char*, char const*)+0x6d>
c0022979:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c002297d:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0022980:	89 15 f0 f9 03 c0    	mov    DWORD PTR ds:0xc003f9f0,edx
c0022986:	5b                   	pop    ebx
c0022987:	5e                   	pop    esi
c0022988:	5f                   	pop    edi
c0022989:	5d                   	pop    ebp
c002298a:	c3                   	ret    

c002298b <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c002298b:	57                   	push   edi
c002298c:	56                   	push   esi
c002298d:	53                   	push   ebx
c002298e:	81 ec 08 01 00 00    	sub    esp,0x108
c0022994:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c002299b:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00229a2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00229a6:	53                   	push   ebx
c00229a7:	e8 94 dc fd ff       	call   c0000640 <strcpy>
c00229ac:	59                   	pop    ecx
c00229ad:	5e                   	pop    esi
c00229ae:	68 7f 2e 03 c0       	push   0xc0032e7f
c00229b3:	53                   	push   ebx
c00229b4:	bb 01 00 00 00       	mov    ebx,0x1
c00229b9:	e8 5b ff ff ff       	call   c0022919 <zStrtok(char*, char const*)>
c00229be:	83 c4 10             	add    esp,0x10
c00229c1:	85 c0                	test   eax,eax
c00229c3:	74 3b                	je     c0022a00 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00229c5:	52                   	push   edx
c00229c6:	50                   	push   eax
c00229c7:	6a 01                	push   0x1
c00229c9:	57                   	push   edi
c00229ca:	e8 b9 fd ff ff       	call   c0022788 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00229cf:	59                   	pop    ecx
c00229d0:	89 c3                	mov    ebx,eax
c00229d2:	5e                   	pop    esi
c00229d3:	68 7f 2e 03 c0       	push   0xc0032e7f
c00229d8:	6a 00                	push   0x0
c00229da:	e8 3a ff ff ff       	call   c0022919 <zStrtok(char*, char const*)>
c00229df:	83 c4 10             	add    esp,0x10
c00229e2:	89 c6                	mov    esi,eax
c00229e4:	85 c0                	test   eax,eax
c00229e6:	74 18                	je     c0022a00 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00229e8:	52                   	push   edx
c00229e9:	52                   	push   edx
c00229ea:	53                   	push   ebx
c00229eb:	57                   	push   edi
c00229ec:	e8 81 f5 ff ff       	call   c0021f72 <CmEnterDirectory(Reghive_Tag*, int)>
c00229f1:	83 c4 10             	add    esp,0x10
c00229f4:	89 c3                	mov    ebx,eax
c00229f6:	83 f8 ff             	cmp    eax,0xffffffff
c00229f9:	74 05                	je     c0022a00 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00229fb:	50                   	push   eax
c00229fc:	56                   	push   esi
c00229fd:	53                   	push   ebx
c00229fe:	eb c9                	jmp    c00229c9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0022a00:	81 c4 00 01 00 00    	add    esp,0x100
c0022a06:	89 d8                	mov    eax,ebx
c0022a08:	5b                   	pop    ebx
c0022a09:	5e                   	pop    esi
c0022a0a:	5f                   	pop    edi
c0022a0b:	c3                   	ret    

c0022a0c <CmDisplayTree(Reghive_Tag*, int, int)>:
c0022a0c:	55                   	push   ebp
c0022a0d:	57                   	push   edi
c0022a0e:	56                   	push   esi
c0022a0f:	53                   	push   ebx
c0022a10:	83 ec 5c             	sub    esp,0x5c
c0022a13:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0022a17:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0022a1b:	85 db                	test   ebx,ebx
c0022a1d:	0f 8e 84 00 00 00    	jle    c0022aa7 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0022a23:	31 ed                	xor    ebp,ebp
c0022a25:	57                   	push   edi
c0022a26:	6a 32                	push   0x32
c0022a28:	6a 00                	push   0x0
c0022a2a:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0022a2e:	57                   	push   edi
c0022a2f:	e8 bc da fd ff       	call   c00004f0 <memset>
c0022a34:	83 c4 0c             	add    esp,0xc
c0022a37:	57                   	push   edi
c0022a38:	53                   	push   ebx
c0022a39:	56                   	push   esi
c0022a3a:	e8 30 fb ff ff       	call   c002256f <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0022a3f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022a43:	83 c4 10             	add    esp,0x10
c0022a46:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0022a4a:	7d 13                	jge    c0022a5f <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0022a4c:	83 ec 0c             	sub    esp,0xc
c0022a4f:	45                   	inc    ebp
c0022a50:	68 03 32 03 c0       	push   0xc0033203
c0022a55:	e8 f3 67 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0022a5a:	83 c4 10             	add    esp,0x10
c0022a5d:	eb e7                	jmp    c0022a46 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0022a5f:	51                   	push   ecx
c0022a60:	57                   	push   edi
c0022a61:	53                   	push   ebx
c0022a62:	68 e3 2a 03 c0       	push   0xc0032ae3
c0022a67:	e8 e1 67 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0022a6c:	83 c4 10             	add    esp,0x10
c0022a6f:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0022a74:	75 1e                	jne    c0022a94 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0022a76:	52                   	push   edx
c0022a77:	52                   	push   edx
c0022a78:	53                   	push   ebx
c0022a79:	56                   	push   esi
c0022a7a:	e8 f3 f4 ff ff       	call   c0021f72 <CmEnterDirectory(Reghive_Tag*, int)>
c0022a7f:	83 c4 0c             	add    esp,0xc
c0022a82:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0022a86:	8d 51 04             	lea    edx,[ecx+0x4]
c0022a89:	52                   	push   edx
c0022a8a:	50                   	push   eax
c0022a8b:	56                   	push   esi
c0022a8c:	e8 7b ff ff ff       	call   c0022a0c <CmDisplayTree(Reghive_Tag*, int, int)>
c0022a91:	83 c4 10             	add    esp,0x10
c0022a94:	50                   	push   eax
c0022a95:	50                   	push   eax
c0022a96:	53                   	push   ebx
c0022a97:	56                   	push   esi
c0022a98:	e8 14 f5 ff ff       	call   c0021fb1 <CmGetNext(Reghive_Tag*, int)>
c0022a9d:	83 c4 10             	add    esp,0x10
c0022aa0:	89 c3                	mov    ebx,eax
c0022aa2:	e9 74 ff ff ff       	jmp    c0022a1b <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0022aa7:	83 c4 5c             	add    esp,0x5c
c0022aaa:	5b                   	pop    ebx
c0022aab:	5e                   	pop    esi
c0022aac:	5f                   	pop    edi
c0022aad:	5d                   	pop    ebp
c0022aae:	c3                   	ret    

c0022aaf <CmSplitFinalSlashInPlace(char*)>:
c0022aaf:	53                   	push   ebx
c0022ab0:	83 ec 14             	sub    esp,0x14
c0022ab3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022ab7:	53                   	push   ebx
c0022ab8:	e8 b3 da fd ff       	call   c0000570 <strlen>
c0022abd:	83 c4 10             	add    esp,0x10
c0022ac0:	48                   	dec    eax
c0022ac1:	85 c0                	test   eax,eax
c0022ac3:	74 15                	je     c0022ada <CmSplitFinalSlashInPlace(char*)+0x2b>
c0022ac5:	8d 14 03             	lea    edx,[ebx+eax*1]
c0022ac8:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0022acc:	75 09                	jne    c0022ad7 <CmSplitFinalSlashInPlace(char*)+0x28>
c0022ace:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0022ad1:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0022ad5:	eb 05                	jmp    c0022adc <CmSplitFinalSlashInPlace(char*)+0x2d>
c0022ad7:	48                   	dec    eax
c0022ad8:	eb e7                	jmp    c0022ac1 <CmSplitFinalSlashInPlace(char*)+0x12>
c0022ada:	31 c0                	xor    eax,eax
c0022adc:	83 c4 08             	add    esp,0x8
c0022adf:	5b                   	pop    ebx
c0022ae0:	c3                   	ret    

c0022ae1 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0022ae1:	55                   	push   ebp
c0022ae2:	57                   	push   edi
c0022ae3:	56                   	push   esi
c0022ae4:	53                   	push   ebx
c0022ae5:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022aeb:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0022af2:	8a 13                	mov    dl,BYTE PTR [ebx]
c0022af4:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0022af7:	80 fa 40             	cmp    dl,0x40
c0022afa:	75 1c                	jne    c0022b18 <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0022afc:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0022aff:	85 c9                	test   ecx,ecx
c0022b01:	0f 84 09 01 00 00    	je     c0022c10 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022b07:	8d 43 01             	lea    eax,[ebx+0x1]
c0022b0a:	83 f9 3a             	cmp    ecx,0x3a
c0022b0d:	74 04                	je     c0022b13 <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0022b0f:	89 c3                	mov    ebx,eax
c0022b11:	eb e9                	jmp    c0022afc <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0022b13:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0022b16:	89 c3                	mov    ebx,eax
c0022b18:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0022b1c:	50                   	push   eax
c0022b1d:	6a 40                	push   0x40
c0022b1f:	6a 00                	push   0x0
c0022b21:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022b25:	50                   	push   eax
c0022b26:	e8 c5 d9 fd ff       	call   c00004f0 <memset>
c0022b2b:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0022b32:	31 c0                	xor    eax,eax
c0022b34:	83 c4 10             	add    esp,0x10
c0022b37:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0022b3c:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0022b3f:	89 d1                	mov    ecx,edx
c0022b41:	85 d2                	test   edx,edx
c0022b43:	0f 84 c7 00 00 00    	je     c0022c10 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022b49:	3d c7 00 00 00       	cmp    eax,0xc7
c0022b4e:	0f 8f bc 00 00 00    	jg     c0022c10 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022b54:	83 fa 0a             	cmp    edx,0xa
c0022b57:	0f 85 a4 00 00 00    	jne    c0022c01 <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0022b5d:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0022b62:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0022b67:	89 c8                	mov    eax,ecx
c0022b69:	a8 df                	test   al,0xdf
c0022b6b:	0f 94 c2             	sete   dl
c0022b6e:	83 f9 23             	cmp    ecx,0x23
c0022b71:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0022b76:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0022b7a:	80 e2 01             	and    dl,0x1
c0022b7d:	75 4a                	jne    c0022bc9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022b7f:	83 e8 09             	sub    eax,0x9
c0022b82:	3c 01                	cmp    al,0x1
c0022b84:	76 43                	jbe    c0022bc9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022b86:	83 f9 5b             	cmp    ecx,0x5b
c0022b89:	75 42                	jne    c0022bcd <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0022b8b:	83 fe 40             	cmp    esi,0x40
c0022b8e:	75 39                	jne    c0022bc9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022b90:	83 ec 0c             	sub    esp,0xc
c0022b93:	8d 54 24 65          	lea    edx,[esp+0x65]
c0022b97:	52                   	push   edx
c0022b98:	e8 d3 d9 fd ff       	call   c0000570 <strlen>
c0022b9d:	83 c4 10             	add    esp,0x10
c0022ba0:	83 f8 3f             	cmp    eax,0x3f
c0022ba3:	77 6b                	ja     c0022c10 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022ba5:	50                   	push   eax
c0022ba6:	50                   	push   eax
c0022ba7:	8d 54 24 61          	lea    edx,[esp+0x61]
c0022bab:	52                   	push   edx
c0022bac:	8d 54 24 24          	lea    edx,[esp+0x24]
c0022bb0:	52                   	push   edx
c0022bb1:	e8 8a da fd ff       	call   c0000640 <strcpy>
c0022bb6:	58                   	pop    eax
c0022bb7:	8d 54 24 24          	lea    edx,[esp+0x24]
c0022bbb:	52                   	push   edx
c0022bbc:	e8 af d9 fd ff       	call   c0000570 <strlen>
c0022bc1:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0022bc6:	83 c4 10             	add    esp,0x10
c0022bc9:	31 d2                	xor    edx,edx
c0022bcb:	eb 3b                	jmp    c0022c08 <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0022bcd:	83 fe 40             	cmp    esi,0x40
c0022bd0:	74 06                	je     c0022bd8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0022bd2:	8d 44 24 58          	lea    eax,[esp+0x58]
c0022bd6:	eb 20                	jmp    c0022bf8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0022bd8:	50                   	push   eax
c0022bd9:	50                   	push   eax
c0022bda:	55                   	push   ebp
c0022bdb:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022bdf:	50                   	push   eax
c0022be0:	e8 6b db fd ff       	call   c0000750 <strcmp>
c0022be5:	83 c4 10             	add    esp,0x10
c0022be8:	85 c0                	test   eax,eax
c0022bea:	75 dd                	jne    c0022bc9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022bec:	eb e4                	jmp    c0022bd2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0022bee:	8d 50 01             	lea    edx,[eax+0x1]
c0022bf1:	83 f9 3d             	cmp    ecx,0x3d
c0022bf4:	74 1e                	je     c0022c14 <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0022bf6:	89 d0                	mov    eax,edx
c0022bf8:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0022bfb:	85 c9                	test   ecx,ecx
c0022bfd:	75 ef                	jne    c0022bee <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0022bff:	eb 0f                	jmp    c0022c10 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022c01:	8d 50 01             	lea    edx,[eax+0x1]
c0022c04:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0022c08:	47                   	inc    edi
c0022c09:	89 d0                	mov    eax,edx
c0022c0b:	e9 2c ff ff ff       	jmp    c0022b3c <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0022c10:	31 c0                	xor    eax,eax
c0022c12:	eb 33                	jmp    c0022c47 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0022c14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022c18:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022c1b:	50                   	push   eax
c0022c1c:	50                   	push   eax
c0022c1d:	8d 44 24 60          	lea    eax,[esp+0x60]
c0022c21:	50                   	push   eax
c0022c22:	53                   	push   ebx
c0022c23:	e8 28 db fd ff       	call   c0000750 <strcmp>
c0022c28:	83 c4 10             	add    esp,0x10
c0022c2b:	85 c0                	test   eax,eax
c0022c2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022c31:	75 96                	jne    c0022bc9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022c33:	51                   	push   ecx
c0022c34:	51                   	push   ecx
c0022c35:	52                   	push   edx
c0022c36:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0022c3d:	e8 fe d9 fd ff       	call   c0000640 <strcpy>
c0022c42:	83 c4 10             	add    esp,0x10
c0022c45:	b0 01                	mov    al,0x1
c0022c47:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022c4d:	5b                   	pop    ebx
c0022c4e:	5e                   	pop    esi
c0022c4f:	5f                   	pop    edi
c0022c50:	5d                   	pop    ebp
c0022c51:	c3                   	ret    

c0022c52 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0022c52:	57                   	push   edi
c0022c53:	56                   	push   esi
c0022c54:	53                   	push   ebx
c0022c55:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022c5b:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0022c62:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0022c69:	53                   	push   ebx
c0022c6a:	e8 01 d9 fd ff       	call   c0000570 <strlen>
c0022c6f:	89 34 24             	mov    DWORD PTR [esp],esi
c0022c72:	89 c7                	mov    edi,eax
c0022c74:	e8 f7 d8 fd ff       	call   c0000570 <strlen>
c0022c79:	83 c4 10             	add    esp,0x10
c0022c7c:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0022c80:	3d ff 00 00 00       	cmp    eax,0xff
c0022c85:	0f 87 d3 00 00 00    	ja     c0022d5e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0022c8b:	57                   	push   edi
c0022c8c:	57                   	push   edi
c0022c8d:	56                   	push   esi
c0022c8e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0022c92:	56                   	push   esi
c0022c93:	e8 a8 d9 fd ff       	call   c0000640 <strcpy>
c0022c98:	58                   	pop    eax
c0022c99:	5a                   	pop    edx
c0022c9a:	68 7f 2e 03 c0       	push   0xc0032e7f
c0022c9f:	56                   	push   esi
c0022ca0:	e8 9b db fd ff       	call   c0000840 <strcat>
c0022ca5:	59                   	pop    ecx
c0022ca6:	5f                   	pop    edi
c0022ca7:	53                   	push   ebx
c0022ca8:	56                   	push   esi
c0022ca9:	e8 92 db fd ff       	call   c0000840 <strcat>
c0022cae:	58                   	pop    eax
c0022caf:	5a                   	pop    edx
c0022cb0:	68 ed 2a 03 c0       	push   0xc0032aed
c0022cb5:	56                   	push   esi
c0022cb6:	e8 85 db fd ff       	call   c0000840 <strcat>
c0022cbb:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0022cc2:	e8 f7 36 ff ff       	call   c00163be <malloc>
c0022cc7:	83 c4 0c             	add    esp,0xc
c0022cca:	89 c3                	mov    ebx,eax
c0022ccc:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0022cd2:	56                   	push   esi
c0022cd3:	50                   	push   eax
c0022cd4:	e8 7b 77 ff ff       	call   c001a454 <File::File(char const*, Process*)>
c0022cd9:	83 c4 10             	add    esp,0x10
c0022cdc:	85 db                	test   ebx,ebx
c0022cde:	74 7e                	je     c0022d5e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0022ce0:	51                   	push   ecx
c0022ce1:	51                   	push   ecx
c0022ce2:	6a 01                	push   0x1
c0022ce4:	53                   	push   ebx
c0022ce5:	e8 88 77 ff ff       	call   c001a472 <File::open(FileOpenMode)>
c0022cea:	83 c4 10             	add    esp,0x10
c0022ced:	85 c0                	test   eax,eax
c0022cef:	74 08                	je     c0022cf9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0022cf1:	83 ec 0c             	sub    esp,0xc
c0022cf4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022cf6:	53                   	push   ebx
c0022cf7:	eb 5f                	jmp    c0022d58 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0022cf9:	52                   	push   edx
c0022cfa:	8d 44 24 17          	lea    eax,[esp+0x17]
c0022cfe:	50                   	push   eax
c0022cff:	8d 44 24 20          	lea    eax,[esp+0x20]
c0022d03:	50                   	push   eax
c0022d04:	53                   	push   ebx
c0022d05:	e8 6a 7a ff ff       	call   c001a774 <File::stat(unsigned long long*, bool*)>
c0022d0a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0022d0e:	83 c4 10             	add    esp,0x10
c0022d11:	89 c1                	mov    ecx,eax
c0022d13:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0022d17:	74 31                	je     c0022d4a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0022d19:	83 ec 0c             	sub    esp,0xc
c0022d1c:	50                   	push   eax
c0022d1d:	e8 9c 36 ff ff       	call   c00163be <malloc>
c0022d22:	89 c6                	mov    esi,eax
c0022d24:	58                   	pop    eax
c0022d25:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022d27:	8d 54 24 20          	lea    edx,[esp+0x20]
c0022d2b:	52                   	push   edx
c0022d2c:	56                   	push   esi
c0022d2d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0022d31:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0022d35:	53                   	push   ebx
c0022d36:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0022d39:	83 c4 20             	add    esp,0x20
c0022d3c:	85 c0                	test   eax,eax
c0022d3e:	75 0a                	jne    c0022d4a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0022d40:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022d44:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0022d48:	74 18                	je     c0022d62 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0022d4a:	83 ec 0c             	sub    esp,0xc
c0022d4d:	53                   	push   ebx
c0022d4e:	e8 7d 77 ff ff       	call   c001a4d0 <File::close()>
c0022d53:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022d55:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022d58:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022d5b:	83 c4 10             	add    esp,0x10
c0022d5e:	31 c0                	xor    eax,eax
c0022d60:	eb 3b                	jmp    c0022d9d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0022d62:	83 ec 0c             	sub    esp,0xc
c0022d65:	53                   	push   ebx
c0022d66:	e8 65 77 ff ff       	call   c001a4d0 <File::close()>
c0022d6b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022d6d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022d70:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022d73:	83 c4 0c             	add    esp,0xc
c0022d76:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022d7d:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022d84:	56                   	push   esi
c0022d85:	e8 57 fd ff ff       	call   c0022ae1 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0022d8a:	89 34 24             	mov    DWORD PTR [esp],esi
c0022d8d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022d91:	e8 38 36 ff ff       	call   c00163ce <free>
c0022d96:	83 c4 10             	add    esp,0x10
c0022d99:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022d9d:	81 c4 20 01 00 00    	add    esp,0x120
c0022da3:	5b                   	pop    ebx
c0022da4:	5e                   	pop    esi
c0022da5:	5f                   	pop    edi
c0022da6:	c3                   	ret    

c0022da7 <Reg::getLine(char*, char*, char*)>:
c0022da7:	57                   	push   edi
c0022da8:	56                   	push   esi
c0022da9:	53                   	push   ebx
c0022daa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022dae:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022db2:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022db6:	57                   	push   edi
c0022db7:	56                   	push   esi
c0022db8:	53                   	push   ebx
c0022db9:	68 f2 2a 03 c0       	push   0xc0032af2
c0022dbe:	e8 8f fe ff ff       	call   c0022c52 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0022dc3:	83 c4 10             	add    esp,0x10
c0022dc6:	84 c0                	test   al,al
c0022dc8:	75 10                	jne    c0022dda <Reg::getLine(char*, char*, char*)+0x33>
c0022dca:	57                   	push   edi
c0022dcb:	56                   	push   esi
c0022dcc:	53                   	push   ebx
c0022dcd:	68 17 2b 03 c0       	push   0xc0032b17
c0022dd2:	e8 7b fe ff ff       	call   c0022c52 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0022dd7:	83 c4 10             	add    esp,0x10
c0022dda:	5b                   	pop    ebx
c0022ddb:	5e                   	pop    esi
c0022ddc:	5f                   	pop    edi
c0022ddd:	c3                   	ret    

c0022dde <Reg::readInt(char*, char*, int*)>:
c0022dde:	55                   	push   ebp
c0022ddf:	57                   	push   edi
c0022de0:	56                   	push   esi
c0022de1:	53                   	push   ebx
c0022de2:	81 ec f0 00 00 00    	sub    esp,0xf0
c0022de8:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0022dec:	55                   	push   ebp
c0022ded:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0022df4:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0022dfb:	e8 a7 ff ff ff       	call   c0022da7 <Reg::getLine(char*, char*, char*)>
c0022e00:	83 c4 10             	add    esp,0x10
c0022e03:	84 c0                	test   al,al
c0022e05:	0f 84 b6 00 00 00    	je     c0022ec1 <Reg::readInt(char*, char*, int*)+0xe3>
c0022e0b:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0022e10:	83 fa 2b             	cmp    edx,0x2b
c0022e13:	74 0c                	je     c0022e21 <Reg::readInt(char*, char*, int*)+0x43>
c0022e15:	83 fa 2d             	cmp    edx,0x2d
c0022e18:	75 0e                	jne    c0022e28 <Reg::readInt(char*, char*, int*)+0x4a>
c0022e1a:	ba 01 00 00 00       	mov    edx,0x1
c0022e1f:	eb 0b                	jmp    c0022e2c <Reg::readInt(char*, char*, int*)+0x4e>
c0022e21:	ba 01 00 00 00       	mov    edx,0x1
c0022e26:	eb 02                	jmp    c0022e2a <Reg::readInt(char*, char*, int*)+0x4c>
c0022e28:	31 d2                	xor    edx,edx
c0022e2a:	31 c0                	xor    eax,eax
c0022e2c:	be 0a 00 00 00       	mov    esi,0xa
c0022e31:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0022e36:	75 21                	jne    c0022e59 <Reg::readInt(char*, char*, int*)+0x7b>
c0022e38:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0022e3d:	83 f9 78             	cmp    ecx,0x78
c0022e40:	75 0a                	jne    c0022e4c <Reg::readInt(char*, char*, int*)+0x6e>
c0022e42:	83 c2 02             	add    edx,0x2
c0022e45:	be 10 00 00 00       	mov    esi,0x10
c0022e4a:	eb 0d                	jmp    c0022e59 <Reg::readInt(char*, char*, int*)+0x7b>
c0022e4c:	83 f9 62             	cmp    ecx,0x62
c0022e4f:	75 08                	jne    c0022e59 <Reg::readInt(char*, char*, int*)+0x7b>
c0022e51:	83 c2 02             	add    edx,0x2
c0022e54:	be 02 00 00 00       	mov    esi,0x2
c0022e59:	01 d5                	add    ebp,edx
c0022e5b:	31 d2                	xor    edx,edx
c0022e5d:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0022e61:	83 f9 0d             	cmp    ecx,0xd
c0022e64:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0022e68:	0f 94 c3             	sete   bl
c0022e6b:	85 c9                	test   ecx,ecx
c0022e6d:	89 df                	mov    edi,ebx
c0022e6f:	0f 94 c3             	sete   bl
c0022e72:	09 df                	or     edi,ebx
c0022e74:	89 fb                	mov    ebx,edi
c0022e76:	83 e7 01             	and    edi,0x1
c0022e79:	75 35                	jne    c0022eb0 <Reg::readInt(char*, char*, int*)+0xd2>
c0022e7b:	0f af d6             	imul   edx,esi
c0022e7e:	83 fe 10             	cmp    esi,0x10
c0022e81:	75 26                	jne    c0022ea9 <Reg::readInt(char*, char*, int*)+0xcb>
c0022e83:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022e87:	83 ef 41             	sub    edi,0x41
c0022e8a:	89 fb                	mov    ebx,edi
c0022e8c:	80 fb 05             	cmp    bl,0x5
c0022e8f:	77 06                	ja     c0022e97 <Reg::readInt(char*, char*, int*)+0xb9>
c0022e91:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0022e95:	eb 16                	jmp    c0022ead <Reg::readInt(char*, char*, int*)+0xcf>
c0022e97:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022e9b:	83 eb 61             	sub    ebx,0x61
c0022e9e:	80 fb 05             	cmp    bl,0x5
c0022ea1:	77 06                	ja     c0022ea9 <Reg::readInt(char*, char*, int*)+0xcb>
c0022ea3:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0022ea7:	eb 04                	jmp    c0022ead <Reg::readInt(char*, char*, int*)+0xcf>
c0022ea9:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0022ead:	45                   	inc    ebp
c0022eae:	eb ad                	jmp    c0022e5d <Reg::readInt(char*, char*, int*)+0x7f>
c0022eb0:	84 c0                	test   al,al
c0022eb2:	74 02                	je     c0022eb6 <Reg::readInt(char*, char*, int*)+0xd8>
c0022eb4:	f7 da                	neg    edx
c0022eb6:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0022ebd:	89 10                	mov    DWORD PTR [eax],edx
c0022ebf:	88 d8                	mov    al,bl
c0022ec1:	81 c4 ec 00 00 00    	add    esp,0xec
c0022ec7:	5b                   	pop    ebx
c0022ec8:	5e                   	pop    esi
c0022ec9:	5f                   	pop    edi
c0022eca:	5d                   	pop    ebp
c0022ecb:	c3                   	ret    

c0022ecc <Reg::readString(char*, char*, char*, int)>:
c0022ecc:	57                   	push   edi
c0022ecd:	56                   	push   esi
c0022ece:	53                   	push   ebx
c0022ecf:	81 ec d4 00 00 00    	sub    esp,0xd4
c0022ed5:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0022edc:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0022ee0:	57                   	push   edi
c0022ee1:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0022ee8:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0022eef:	e8 b3 fe ff ff       	call   c0022da7 <Reg::getLine(char*, char*, char*)>
c0022ef4:	83 c4 10             	add    esp,0x10
c0022ef7:	89 c6                	mov    esi,eax
c0022ef9:	84 c0                	test   al,al
c0022efb:	74 44                	je     c0022f41 <Reg::readString(char*, char*, char*, int)+0x75>
c0022efd:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0022f04:	31 c0                	xor    eax,eax
c0022f06:	4a                   	dec    edx
c0022f07:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0022f0a:	84 c9                	test   cl,cl
c0022f0c:	74 0f                	je     c0022f1d <Reg::readString(char*, char*, char*, int)+0x51>
c0022f0e:	39 c2                	cmp    edx,eax
c0022f10:	7e 0b                	jle    c0022f1d <Reg::readString(char*, char*, char*, int)+0x51>
c0022f12:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0022f15:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0022f1a:	40                   	inc    eax
c0022f1b:	eb ea                	jmp    c0022f07 <Reg::readString(char*, char*, char*, int)+0x3b>
c0022f1d:	83 ec 0c             	sub    esp,0xc
c0022f20:	53                   	push   ebx
c0022f21:	e8 4a d6 fd ff       	call   c0000570 <strlen>
c0022f26:	83 c4 10             	add    esp,0x10
c0022f29:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0022f2e:	75 11                	jne    c0022f41 <Reg::readString(char*, char*, char*, int)+0x75>
c0022f30:	83 ec 0c             	sub    esp,0xc
c0022f33:	53                   	push   ebx
c0022f34:	e8 37 d6 fd ff       	call   c0000570 <strlen>
c0022f39:	83 c4 10             	add    esp,0x10
c0022f3c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0022f41:	81 c4 d0 00 00 00    	add    esp,0xd0
c0022f47:	89 f0                	mov    eax,esi
c0022f49:	5b                   	pop    ebx
c0022f4a:	5e                   	pop    esi
c0022f4b:	5f                   	pop    edi
c0022f4c:	c3                   	ret    

c0022f4d <Reg::readBool(char*, char*, bool*)>:
c0022f4d:	83 ec 20             	sub    esp,0x20
c0022f50:	8d 44 24 10          	lea    eax,[esp+0x10]
c0022f54:	50                   	push   eax
c0022f55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022f59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022f5d:	e8 7c fe ff ff       	call   c0022dde <Reg::readInt(char*, char*, int*)>
c0022f62:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0022f67:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0022f6b:	0f 95 02             	setne  BYTE PTR [edx]
c0022f6e:	83 c4 2c             	add    esp,0x2c
c0022f71:	c3                   	ret    

c0022f72 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0022f72:	53                   	push   ebx
c0022f73:	83 ec 1c             	sub    esp,0x1c
c0022f76:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0022f7a:	8d 44 24 13          	lea    eax,[esp+0x13]
c0022f7e:	50                   	push   eax
c0022f7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022f83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022f87:	e8 c1 ff ff ff       	call   c0022f4d <Reg::readBool(char*, char*, bool*)>
c0022f8c:	83 c4 10             	add    esp,0x10
c0022f8f:	84 c0                	test   al,al
c0022f91:	74 04                	je     c0022f97 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0022f93:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0022f97:	88 d8                	mov    al,bl
c0022f99:	83 c4 18             	add    esp,0x18
c0022f9c:	5b                   	pop    ebx
c0022f9d:	c3                   	ret    

c0022f9e <Reg::readIntWithDefault(char*, char*, int)>:
c0022f9e:	53                   	push   ebx
c0022f9f:	83 ec 1c             	sub    esp,0x1c
c0022fa2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0022fa6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0022faa:	50                   	push   eax
c0022fab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022faf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022fb3:	e8 26 fe ff ff       	call   c0022dde <Reg::readInt(char*, char*, int*)>
c0022fb8:	83 c4 10             	add    esp,0x10
c0022fbb:	84 c0                	test   al,al
c0022fbd:	74 04                	je     c0022fc3 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0022fbf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022fc3:	89 d8                	mov    eax,ebx
c0022fc5:	83 c4 18             	add    esp,0x18
c0022fc8:	5b                   	pop    ebx
c0022fc9:	c3                   	ret    

c0022fca <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0022fca:	57                   	push   edi
c0022fcb:	56                   	push   esi
c0022fcc:	56                   	push   esi
c0022fcd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022fd1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0022fd5:	56                   	push   esi
c0022fd6:	57                   	push   edi
c0022fd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022fdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022fdf:	e8 e8 fe ff ff       	call   c0022ecc <Reg::readString(char*, char*, char*, int)>
c0022fe4:	83 c4 10             	add    esp,0x10
c0022fe7:	84 c0                	test   al,al
c0022fe9:	75 1a                	jne    c0023005 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0022feb:	51                   	push   ecx
c0022fec:	56                   	push   esi
c0022fed:	6a 00                	push   0x0
c0022fef:	57                   	push   edi
c0022ff0:	e8 fb d4 fd ff       	call   c00004f0 <memset>
c0022ff5:	8d 4e ff             	lea    ecx,[esi-0x1]
c0022ff8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022ffc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022ffe:	83 c4 10             	add    esp,0x10
c0023001:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023005:	89 f8                	mov    eax,edi
c0023007:	5a                   	pop    edx
c0023008:	5e                   	pop    esi
c0023009:	5f                   	pop    edi
c002300a:	c3                   	ret    

c002300b <SysEject(regs*)>:
c002300b:	83 ec 0c             	sub    esp,0xc
c002300e:	83 ca ff             	or     edx,0xffffffff
c0023011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023015:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0023018:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c002301d:	83 e9 41             	sub    ecx,0x41
c0023020:	83 f9 19             	cmp    ecx,0x19
c0023023:	77 18                	ja     c002303d <SysEject(regs*)+0x32>
c0023025:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c002302c:	85 c9                	test   ecx,ecx
c002302e:	74 0d                	je     c002303d <SysEject(regs*)+0x32>
c0023030:	83 ec 0c             	sub    esp,0xc
c0023033:	51                   	push   ecx
c0023034:	e8 1d 96 ff ff       	call   c001c656 <LogicalDisk::eject()>
c0023039:	83 c4 10             	add    esp,0x10
c002303c:	99                   	cdq    
c002303d:	83 c4 0c             	add    esp,0xc
c0023040:	c3                   	ret    

c0023041 <SysExit(regs*)>:
c0023041:	83 ec 18             	sub    esp,0x18
c0023044:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023048:	ff 70 20             	push   DWORD PTR [eax+0x20]
c002304b:	e8 8c 29 00 00       	call   c00259dc <terminateTask(int)>
c0023050:	83 c8 ff             	or     eax,0xffffffff
c0023053:	83 c4 1c             	add    esp,0x1c
c0023056:	89 c2                	mov    edx,eax
c0023058:	c3                   	ret    

c0023059 <SysGetCwd(regs*)>:
c0023059:	83 ec 10             	sub    esp,0x10
c002305c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023060:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0023063:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0023066:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002306b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c002306e:	e8 95 70 ff ff       	call   c001a108 <Fs::getcwd(Process*, char*, int)>
c0023073:	83 c4 1c             	add    esp,0x1c
c0023076:	99                   	cdq    
c0023077:	c3                   	ret    

c0023078 <SysGetPID(regs*)>:
c0023078:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002307d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023080:	8b 00                	mov    eax,DWORD PTR [eax]
c0023082:	99                   	cdq    
c0023083:	c3                   	ret    

c0023084 <SysGetRAMData(regs*)>:
c0023084:	8b 0d ec a9 03 c0    	mov    ecx,DWORD PTR ds:0xc003a9ec
c002308a:	69 05 e8 a9 03 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc003a9e8,0xc8
c0023094:	99                   	cdq    
c0023095:	f7 f9                	idiv   ecx
c0023097:	c1 e0 18             	shl    eax,0x18
c002309a:	09 c8                	or     eax,ecx
c002309c:	99                   	cdq    
c002309d:	c3                   	ret    

c002309e <SysGetVGAPtr(regs*)>:
c002309e:	55                   	push   ebp
c002309f:	57                   	push   edi
c00230a0:	56                   	push   esi
c00230a1:	53                   	push   ebx
c00230a2:	83 ec 18             	sub    esp,0x18
c00230a5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00230a9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00230ac:	e8 f7 23 00 00       	call   c00254a8 <Thr::processFromPID(int)>
c00230b1:	83 c4 10             	add    esp,0x10
c00230b4:	89 c1                	mov    ecx,eax
c00230b6:	b8 01 00 00 00       	mov    eax,0x1
c00230bb:	85 c9                	test   ecx,ecx
c00230bd:	74 57                	je     c0023116 <SysGetVGAPtr(regs*)+0x78>
c00230bf:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00230c5:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00230c9:	74 0c                	je     c00230d7 <SysGetVGAPtr(regs*)+0x39>
c00230cb:	83 ec 0c             	sub    esp,0xc
c00230ce:	55                   	push   ebp
c00230cf:	e8 8d 3f ff ff       	call   c0017061 <setActiveTerminal(VgaText*)>
c00230d4:	83 c4 10             	add    esp,0x10
c00230d7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00230da:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00230dd:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00230e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00230e4:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00230e7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00230ea:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00230f0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00230f3:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00230f6:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00230fc:	50                   	push   eax
c00230fd:	50                   	push   eax
c00230fe:	68 32 2b 03 c0       	push   0xc0032b32
c0023103:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023106:	05 a8 0f 00 00       	add    eax,0xfa8
c002310b:	50                   	push   eax
c002310c:	e8 2f d5 fd ff       	call   c0000640 <strcpy>
c0023111:	83 c4 10             	add    esp,0x10
c0023114:	31 c0                	xor    eax,eax
c0023116:	83 c4 0c             	add    esp,0xc
c0023119:	31 d2                	xor    edx,edx
c002311b:	5b                   	pop    ebx
c002311c:	5e                   	pop    esi
c002311d:	5f                   	pop    edi
c002311e:	5d                   	pop    ebp
c002311f:	c3                   	ret    

c0023120 <SysKill(regs*)>:
c0023120:	53                   	push   ebx
c0023121:	83 ec 08             	sub    esp,0x8
c0023124:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023128:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c002312c:	75 16                	jne    c0023144 <SysKill(regs*)+0x24>
c002312e:	83 ec 0c             	sub    esp,0xc
c0023131:	68 3c 2b 03 c0       	push   0xc0032b3c
c0023136:	e8 2b d1 ff ff       	call   c0020266 <KePanic(char const*)>
c002313b:	83 c4 10             	add    esp,0x10
c002313e:	e9 89 00 00 00       	jmp    c00231cc <SysKill(regs*)+0xac>
c0023143:	90                   	nop
c0023144:	83 ec 0c             	sub    esp,0xc
c0023147:	68 ec 01 04 c0       	push   0xc00401ec
c002314c:	e8 fb ba 00 00       	call   c002ec4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0023151:	8d 76 00             	lea    esi,[esi+0x0]
c0023154:	83 c4 10             	add    esp,0x10
c0023157:	85 c0                	test   eax,eax
c0023159:	74 19                	je     c0023174 <SysKill(regs*)+0x54>
c002315b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c002315e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0023161:	39 0a                	cmp    DWORD PTR [edx],ecx
c0023163:	74 33                	je     c0023198 <SysKill(regs*)+0x78>
c0023165:	52                   	push   edx
c0023166:	52                   	push   edx
c0023167:	50                   	push   eax
c0023168:	68 ec 01 04 c0       	push   0xc00401ec
c002316d:	e8 fa bd 00 00       	call   c002ef6c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0023172:	eb e0                	jmp    c0023154 <SysKill(regs*)+0x34>
c0023174:	83 ec 0c             	sub    esp,0xc
c0023177:	68 e0 01 04 c0       	push   0xc00401e0
c002317c:	e8 cb ba 00 00       	call   c002ec4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0023181:	8d 76 00             	lea    esi,[esi+0x0]
c0023184:	83 c4 10             	add    esp,0x10
c0023187:	85 c0                	test   eax,eax
c0023189:	74 41                	je     c00231cc <SysKill(regs*)+0xac>
c002318b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c002318e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0023191:	39 0a                	cmp    DWORD PTR [edx],ecx
c0023193:	75 27                	jne    c00231bc <SysKill(regs*)+0x9c>
c0023195:	8d 76 00             	lea    esi,[esi+0x0]
c0023198:	51                   	push   ecx
c0023199:	51                   	push   ecx
c002319a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002319d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00231a2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00231a5:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00231ab:	e8 6f d9 ff ff       	call   c0020b1f <KeRaiseSignal(SigHandlerBlock*, int)>
c00231b0:	83 c4 10             	add    esp,0x10
c00231b3:	31 c0                	xor    eax,eax
c00231b5:	31 d2                	xor    edx,edx
c00231b7:	eb 1b                	jmp    c00231d4 <SysKill(regs*)+0xb4>
c00231b9:	8d 76 00             	lea    esi,[esi+0x0]
c00231bc:	52                   	push   edx
c00231bd:	52                   	push   edx
c00231be:	50                   	push   eax
c00231bf:	68 e0 01 04 c0       	push   0xc00401e0
c00231c4:	e8 a3 bd 00 00       	call   c002ef6c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00231c9:	eb b9                	jmp    c0023184 <SysKill(regs*)+0x64>
c00231cb:	90                   	nop
c00231cc:	83 c8 ff             	or     eax,0xffffffff
c00231cf:	89 c2                	mov    edx,eax
c00231d1:	8d 76 00             	lea    esi,[esi+0x0]
c00231d4:	83 c4 08             	add    esp,0x8
c00231d7:	5b                   	pop    ebx
c00231d8:	c3                   	ret    

c00231d9 <SysLoadDLL(regs*)>:
c00231d9:	56                   	push   esi
c00231da:	53                   	push   ebx
c00231db:	31 d2                	xor    edx,edx
c00231dd:	51                   	push   ecx
c00231de:	b8 01 00 00 00       	mov    eax,0x1
c00231e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00231e7:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00231eb:	0f 84 8c 00 00 00    	je     c002327d <SysLoadDLL(regs*)+0xa4>
c00231f1:	83 ec 0c             	sub    esp,0xc
c00231f4:	68 14 01 00 00       	push   0x114
c00231f9:	e8 c0 31 ff ff       	call   c00163be <malloc>
c00231fe:	83 c4 0c             	add    esp,0xc
c0023201:	89 c3                	mov    ebx,eax
c0023203:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023208:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c002320b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c002320e:	53                   	push   ebx
c002320f:	e8 40 72 ff ff       	call   c001a454 <File::File(char const*, Process*)>
c0023214:	83 c4 10             	add    esp,0x10
c0023217:	31 d2                	xor    edx,edx
c0023219:	b8 02 00 00 00       	mov    eax,0x2
c002321e:	85 db                	test   ebx,ebx
c0023220:	74 5b                	je     c002327d <SysLoadDLL(regs*)+0xa4>
c0023222:	83 ec 0c             	sub    esp,0xc
c0023225:	53                   	push   ebx
c0023226:	e8 0b 75 ff ff       	call   c001a736 <File::exists()>
c002322b:	83 c4 10             	add    esp,0x10
c002322e:	84 c0                	test   al,al
c0023230:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023232:	75 11                	jne    c0023245 <SysLoadDLL(regs*)+0x6c>
c0023234:	83 ec 0c             	sub    esp,0xc
c0023237:	53                   	push   ebx
c0023238:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002323b:	83 c4 10             	add    esp,0x10
c002323e:	b8 03 00 00 00       	mov    eax,0x3
c0023243:	eb 36                	jmp    c002327b <SysLoadDLL(regs*)+0xa2>
c0023245:	83 ec 0c             	sub    esp,0xc
c0023248:	53                   	push   ebx
c0023249:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002324c:	58                   	pop    eax
c002324d:	5a                   	pop    edx
c002324e:	6a 00                	push   0x0
c0023250:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0023253:	e8 81 15 00 00       	call   c00247d9 <Thr::loadDLL(char const*, bool)>
c0023258:	83 c4 10             	add    esp,0x10
c002325b:	89 c1                	mov    ecx,eax
c002325d:	31 d2                	xor    edx,edx
c002325f:	b8 04 00 00 00       	mov    eax,0x4
c0023264:	85 c9                	test   ecx,ecx
c0023266:	74 15                	je     c002327d <SysLoadDLL(regs*)+0xa4>
c0023268:	53                   	push   ebx
c0023269:	53                   	push   ebx
c002326a:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0023270:	51                   	push   ecx
c0023271:	e8 b5 17 00 00       	call   c0024a2b <Thr::executeDLL(unsigned long, void*)>
c0023276:	83 c4 10             	add    esp,0x10
c0023279:	31 c0                	xor    eax,eax
c002327b:	31 d2                	xor    edx,edx
c002327d:	59                   	pop    ecx
c002327e:	5b                   	pop    ebx
c002327f:	5e                   	pop    esi
c0023280:	c3                   	ret    

c0023281 <SysRead(regs*)>:
c0023281:	57                   	push   edi
c0023282:	56                   	push   esi
c0023283:	53                   	push   ebx
c0023284:	83 ec 10             	sub    esp,0x10
c0023287:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002328b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002328e:	83 f8 02             	cmp    eax,0x2
c0023291:	77 10                	ja     c00232a3 <SysRead(regs*)+0x22>
c0023293:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023298:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002329b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00232a1:	eb 0e                	jmp    c00232b1 <SysRead(regs*)+0x30>
c00232a3:	83 ec 0c             	sub    esp,0xc
c00232a6:	50                   	push   eax
c00232a7:	e8 0f 4b ff ff       	call   c0017dbb <KeGetFileFromDescriptor(int)>
c00232ac:	83 c4 10             	add    esp,0x10
c00232af:	89 c1                	mov    ecx,eax
c00232b1:	83 c8 ff             	or     eax,0xffffffff
c00232b4:	85 c9                	test   ecx,ecx
c00232b6:	89 c2                	mov    edx,eax
c00232b8:	74 28                	je     c00232e2 <SysRead(regs*)+0x61>
c00232ba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00232c2:	31 ff                	xor    edi,edi
c00232c4:	83 ec 0c             	sub    esp,0xc
c00232c7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00232c9:	8d 54 24 18          	lea    edx,[esp+0x18]
c00232cd:	52                   	push   edx
c00232ce:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00232d1:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00232d4:	57                   	push   edi
c00232d5:	56                   	push   esi
c00232d6:	51                   	push   ecx
c00232d7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00232da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00232de:	83 c4 20             	add    esp,0x20
c00232e1:	99                   	cdq    
c00232e2:	83 c4 10             	add    esp,0x10
c00232e5:	5b                   	pop    ebx
c00232e6:	5e                   	pop    esi
c00232e7:	5f                   	pop    edi
c00232e8:	c3                   	ret    

c00232e9 <SysRegisterSignal(regs*)>:
c00232e9:	83 ec 18             	sub    esp,0x18
c00232ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00232f0:	6a 00                	push   0x0
c00232f2:	6a 00                	push   0x0
c00232f4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00232f7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00232fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00232ff:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023302:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0023308:	e8 dc d7 ff ff       	call   c0020ae9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c002330d:	83 c4 2c             	add    esp,0x2c
c0023310:	99                   	cdq    
c0023311:	c3                   	ret    

c0023312 <SysRegistryGetTypeFromPath(regs*)>:
c0023312:	57                   	push   edi
c0023313:	56                   	push   esi
c0023314:	53                   	push   ebx
c0023315:	81 ec 38 01 00 00    	sub    esp,0x138
c002331b:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0023322:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023325:	68 5d 2b 03 c0       	push   0xc0032b5d
c002332a:	e8 1e 5f ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c002332f:	5a                   	pop    edx
c0023330:	59                   	pop    ecx
c0023331:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023334:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023337:	e8 4f f6 ff ff       	call   c002298b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c002333c:	5f                   	pop    edi
c002333d:	89 c6                	mov    esi,eax
c002333f:	5a                   	pop    edx
c0023340:	50                   	push   eax
c0023341:	68 7d 2b 03 c0       	push   0xc0032b7d
c0023346:	e8 02 5f ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c002334b:	83 c4 10             	add    esp,0x10
c002334e:	85 f6                	test   esi,esi
c0023350:	74 28                	je     c002337a <SysRegistryGetTypeFromPath(regs*)+0x68>
c0023352:	50                   	push   eax
c0023353:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0023357:	57                   	push   edi
c0023358:	56                   	push   esi
c0023359:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002335c:	e8 0e f2 ff ff       	call   c002256f <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0023361:	83 c4 0c             	add    esp,0xc
c0023364:	89 c3                	mov    ebx,eax
c0023366:	57                   	push   edi
c0023367:	50                   	push   eax
c0023368:	68 85 2b 03 c0       	push   0xc0032b85
c002336d:	e8 db 5e ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0023372:	89 d8                	mov    eax,ebx
c0023374:	83 c4 10             	add    esp,0x10
c0023377:	99                   	cdq    
c0023378:	eb 05                	jmp    c002337f <SysRegistryGetTypeFromPath(regs*)+0x6d>
c002337a:	83 c8 ff             	or     eax,0xffffffff
c002337d:	89 c2                	mov    edx,eax
c002337f:	81 c4 30 01 00 00    	add    esp,0x130
c0023385:	5b                   	pop    ebx
c0023386:	5e                   	pop    esi
c0023387:	5f                   	pop    edi
c0023388:	c3                   	ret    

c0023389 <SysRegistryReadExtent(regs*)>:
c0023389:	83 ec 1c             	sub    esp,0x1c
c002338c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0023390:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0023393:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0023396:	85 c0                	test   eax,eax
c0023398:	79 1f                	jns    c00233b9 <SysRegistryReadExtent(regs*)+0x30>
c002339a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002339f:	52                   	push   edx
c00233a0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00233a4:	52                   	push   edx
c00233a5:	50                   	push   eax
c00233a6:	51                   	push   ecx
c00233a7:	e8 b5 f0 ff ff       	call   c0022461 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00233ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00233b0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00233b4:	83 c4 10             	add    esp,0x10
c00233b7:	eb 14                	jmp    c00233cd <SysRegistryReadExtent(regs*)+0x44>
c00233b9:	83 ec 04             	sub    esp,0x4
c00233bc:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00233bf:	50                   	push   eax
c00233c0:	51                   	push   ecx
c00233c1:	e8 35 eb ff ff       	call   c0021efb <CmGetString(Reghive_Tag*, int, char*)>
c00233c6:	83 c4 10             	add    esp,0x10
c00233c9:	31 c0                	xor    eax,eax
c00233cb:	31 d2                	xor    edx,edx
c00233cd:	83 c4 1c             	add    esp,0x1c
c00233d0:	c3                   	ret    

c00233d1 <SysRegistryPathToExtentLookup(regs*)>:
c00233d1:	53                   	push   ebx
c00233d2:	83 ec 10             	sub    esp,0x10
c00233d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00233d9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00233dc:	68 9b 2b 03 c0       	push   0xc0032b9b
c00233e1:	e8 67 5e ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c00233e6:	58                   	pop    eax
c00233e7:	5a                   	pop    edx
c00233e8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00233eb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00233ee:	e8 98 f5 ff ff       	call   c002298b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00233f3:	83 c4 18             	add    esp,0x18
c00233f6:	99                   	cdq    
c00233f7:	5b                   	pop    ebx
c00233f8:	c3                   	ret    

c00233f9 <SysRegistryEnterDirectory(regs*)>:
c00233f9:	53                   	push   ebx
c00233fa:	83 ec 10             	sub    esp,0x10
c00233fd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023401:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023404:	68 be 2b 03 c0       	push   0xc0032bbe
c0023409:	e8 3f 5e ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c002340e:	58                   	pop    eax
c002340f:	5a                   	pop    edx
c0023410:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023413:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023416:	e8 57 eb ff ff       	call   c0021f72 <CmEnterDirectory(Reghive_Tag*, int)>
c002341b:	83 c4 18             	add    esp,0x18
c002341e:	99                   	cdq    
c002341f:	5b                   	pop    ebx
c0023420:	c3                   	ret    

c0023421 <SysRegistryGetNext(regs*)>:
c0023421:	53                   	push   ebx
c0023422:	83 ec 10             	sub    esp,0x10
c0023425:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023429:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002342c:	68 dc 2b 03 c0       	push   0xc0032bdc
c0023431:	e8 17 5e ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0023436:	58                   	pop    eax
c0023437:	5a                   	pop    edx
c0023438:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002343b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002343e:	e8 6e eb ff ff       	call   c0021fb1 <CmGetNext(Reghive_Tag*, int)>
c0023443:	83 c4 18             	add    esp,0x18
c0023446:	99                   	cdq    
c0023447:	5b                   	pop    ebx
c0023448:	c3                   	ret    

c0023449 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0023449:	57                   	push   edi
c002344a:	56                   	push   esi
c002344b:	53                   	push   ebx
c002344c:	81 ec 34 01 00 00    	sub    esp,0x134
c0023452:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0023459:	8d 7c 24 08          	lea    edi,[esp+0x8]
c002345d:	57                   	push   edi
c002345e:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0023461:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0023464:	e8 06 f1 ff ff       	call   c002256f <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0023469:	89 c3                	mov    ebx,eax
c002346b:	58                   	pop    eax
c002346c:	5a                   	pop    edx
c002346d:	57                   	push   edi
c002346e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0023471:	e8 ca d1 fd ff       	call   c0000640 <strcpy>
c0023476:	89 d8                	mov    eax,ebx
c0023478:	81 c4 40 01 00 00    	add    esp,0x140
c002347e:	99                   	cdq    
c002347f:	5b                   	pop    ebx
c0023480:	5e                   	pop    esi
c0023481:	5f                   	pop    edi
c0023482:	c3                   	ret    

c0023483 <SysRegistryOpen(regs*)>:
c0023483:	83 ec 18             	sub    esp,0x18
c0023486:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002348a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c002348d:	e8 f9 e8 ff ff       	call   c0021d8b <CmOpen(char const*)>
c0023492:	83 c4 1c             	add    esp,0x1c
c0023495:	99                   	cdq    
c0023496:	c3                   	ret    

c0023497 <SysRegistryClose(regs*)>:
c0023497:	83 ec 18             	sub    esp,0x18
c002349a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002349e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00234a1:	e8 03 ea ff ff       	call   c0021ea9 <CmClose(Reghive_Tag*)>
c00234a6:	31 c0                	xor    eax,eax
c00234a8:	31 d2                	xor    edx,edx
c00234aa:	83 c4 1c             	add    esp,0x1c
c00234ad:	c3                   	ret    

c00234ae <SysSbrk(regs*)>:
c00234ae:	56                   	push   esi
c00234af:	53                   	push   ebx
c00234b0:	50                   	push   eax
c00234b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00234b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00234ba:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00234bd:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00234c0:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00234c6:	85 db                	test   ebx,ebx
c00234c8:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00234cb:	74 02                	je     c00234cf <SysSbrk(regs*)+0x21>
c00234cd:	79 06                	jns    c00234d5 <SysSbrk(regs*)+0x27>
c00234cf:	89 f0                	mov    eax,esi
c00234d1:	31 d2                	xor    edx,edx
c00234d3:	eb 2a                	jmp    c00234ff <SysSbrk(regs*)+0x51>
c00234d5:	83 c8 ff             	or     eax,0xffffffff
c00234d8:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00234de:	89 c2                	mov    edx,eax
c00234e0:	77 1d                	ja     c00234ff <SysSbrk(regs*)+0x51>
c00234e2:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00234e8:	50                   	push   eax
c00234e9:	c1 ea 0c             	shr    edx,0xc
c00234ec:	68 07 0c 00 00       	push   0xc07
c00234f1:	52                   	push   edx
c00234f2:	51                   	push   ecx
c00234f3:	e8 34 52 ff ff       	call   c001872c <VAS::allocatePages(int, int)>
c00234f8:	89 f0                	mov    eax,esi
c00234fa:	31 d2                	xor    edx,edx
c00234fc:	83 c4 10             	add    esp,0x10
c00234ff:	59                   	pop    ecx
c0023500:	5b                   	pop    ebx
c0023501:	5e                   	pop    esi
c0023502:	c3                   	ret    

c0023503 <SysSetCwd(regs*)>:
c0023503:	83 ec 14             	sub    esp,0x14
c0023506:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002350a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c002350d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023512:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0023515:	e8 bb 72 ff ff       	call   c001a7d5 <Fs::setcwd(Process*, char*)>
c002351a:	83 c4 1c             	add    esp,0x1c
c002351d:	99                   	cdq    
c002351e:	c3                   	ret    

c002351f <SysSetTime(regs*)>:
c002351f:	55                   	push   ebp
c0023520:	31 c9                	xor    ecx,ecx
c0023522:	57                   	push   edi
c0023523:	bd 0c 00 00 00       	mov    ebp,0xc
c0023528:	56                   	push   esi
c0023529:	53                   	push   ebx
c002352a:	31 db                	xor    ebx,ebx
c002352c:	83 ec 10             	sub    esp,0x10
c002352f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023533:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0023536:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0023539:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c002353c:	89 c2                	mov    edx,eax
c002353e:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0023544:	83 e2 1f             	and    edx,0x1f
c0023547:	c1 e7 10             	shl    edi,0x10
c002354a:	42                   	inc    edx
c002354b:	c1 e8 05             	shr    eax,0x5
c002354e:	88 d1                	mov    cl,dl
c0023550:	31 d2                	xor    edx,edx
c0023552:	f7 f5                	div    ebp
c0023554:	89 dd                	mov    ebp,ebx
c0023556:	88 d5                	mov    ch,dl
c0023558:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c002355e:	0f b7 c1             	movzx  eax,cx
c0023561:	31 d2                	xor    edx,edx
c0023563:	09 f8                	or     eax,edi
c0023565:	bf 3c 00 00 00       	mov    edi,0x3c
c002356a:	89 c1                	mov    ecx,eax
c002356c:	89 f0                	mov    eax,esi
c002356e:	f7 f7                	div    edi
c0023570:	c1 e2 10             	shl    edx,0x10
c0023573:	09 d5                	or     ebp,edx
c0023575:	31 d2                	xor    edx,edx
c0023577:	89 eb                	mov    ebx,ebp
c0023579:	f7 f7                	div    edi
c002357b:	bf 10 0e 00 00       	mov    edi,0xe10
c0023580:	88 d7                	mov    bh,dl
c0023582:	89 f0                	mov    eax,esi
c0023584:	31 d2                	xor    edx,edx
c0023586:	f7 f7                	div    edi
c0023588:	bf 18 00 00 00       	mov    edi,0x18
c002358d:	31 d2                	xor    edx,edx
c002358f:	f7 f7                	div    edi
c0023591:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0023596:	88 d3                	mov    bl,dl
c0023598:	53                   	push   ebx
c0023599:	51                   	push   ecx
c002359a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00235a0:	e8 3d 7a ff ff       	call   c001afe2 <Clock::setTimeInDatetimeLocal(datetime_t)>
c00235a5:	83 c4 1c             	add    esp,0x1c
c00235a8:	83 f0 01             	xor    eax,0x1
c00235ab:	5b                   	pop    ebx
c00235ac:	0f b6 c0             	movzx  eax,al
c00235af:	5e                   	pop    esi
c00235b0:	31 d2                	xor    edx,edx
c00235b2:	5f                   	pop    edi
c00235b3:	5d                   	pop    ebp
c00235b4:	c3                   	ret    

c00235b5 <SysSymlink(regs*)>:
c00235b5:	56                   	push   esi
c00235b6:	83 c8 ff             	or     eax,0xffffffff
c00235b9:	53                   	push   ebx
c00235ba:	89 c2                	mov    edx,eax
c00235bc:	81 ec 34 02 00 00    	sub    esp,0x234
c00235c2:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c00235c9:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00235cd:	74 50                	je     c002361f <SysSymlink(regs*)+0x6a>
c00235cf:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00235d2:	85 c9                	test   ecx,ecx
c00235d4:	74 49                	je     c002361f <SysSymlink(regs*)+0x6a>
c00235d6:	6a 01                	push   0x1
c00235d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00235dd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00235e0:	05 0c 01 00 00       	add    eax,0x10c
c00235e5:	50                   	push   eax
c00235e6:	51                   	push   ecx
c00235e7:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00235eb:	56                   	push   esi
c00235ec:	e8 6b 6b ff ff       	call   c001a15c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00235f1:	6a 01                	push   0x1
c00235f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00235f8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00235fb:	05 0c 01 00 00       	add    eax,0x10c
c0023600:	50                   	push   eax
c0023601:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023604:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c002360b:	53                   	push   ebx
c002360c:	e8 4b 6b ff ff       	call   c001a15c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0023611:	83 c4 18             	add    esp,0x18
c0023614:	56                   	push   esi
c0023615:	53                   	push   ebx
c0023616:	e8 50 67 ff ff       	call   c0019d6b <KeCreateSymlink(char const*, char const*)>
c002361b:	83 c4 10             	add    esp,0x10
c002361e:	99                   	cdq    
c002361f:	81 c4 34 02 00 00    	add    esp,0x234
c0023625:	5b                   	pop    ebx
c0023626:	5e                   	pop    esi
c0023627:	c3                   	ret    

c0023628 <SysTimezone(regs*)>:
c0023628:	53                   	push   ebx
c0023629:	83 ec 08             	sub    esp,0x8
c002362c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023630:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0023634:	75 17                	jne    c002364d <SysTimezone(regs*)+0x25>
c0023636:	83 ec 0c             	sub    esp,0xc
c0023639:	68 f3 2b 03 c0       	push   0xc0032bf3
c002363e:	e8 0a 5c ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0023643:	83 c8 ff             	or     eax,0xffffffff
c0023646:	83 c4 10             	add    esp,0x10
c0023649:	89 c2                	mov    edx,eax
c002364b:	eb 20                	jmp    c002366d <SysTimezone(regs*)+0x45>
c002364d:	83 ec 0c             	sub    esp,0xc
c0023650:	68 08 2c 03 c0       	push   0xc0032c08
c0023655:	e8 f3 5b ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c002365a:	58                   	pop    eax
c002365b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002365e:	e8 e9 76 ff ff       	call   c001ad4c <User::loadClockSettings(int)>
c0023663:	83 c4 10             	add    esp,0x10
c0023666:	b8 01 00 00 00       	mov    eax,0x1
c002366b:	31 d2                	xor    edx,edx
c002366d:	83 c4 08             	add    esp,0x8
c0023670:	5b                   	pop    ebx
c0023671:	c3                   	ret    

c0023672 <SysTruncate(regs*)>:
c0023672:	55                   	push   ebp
c0023673:	57                   	push   edi
c0023674:	31 ff                	xor    edi,edi
c0023676:	56                   	push   esi
c0023677:	53                   	push   ebx
c0023678:	83 ec 0c             	sub    esp,0xc
c002367b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002367f:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0023682:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0023685:	89 ce                	mov    esi,ecx
c0023687:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c002368b:	0f 84 9a 00 00 00    	je     c002372b <SysTruncate(regs*)+0xb9>
c0023691:	83 ec 0c             	sub    esp,0xc
c0023694:	68 14 01 00 00       	push   0x114
c0023699:	e8 20 2d ff ff       	call   c00163be <malloc>
c002369e:	83 c4 0c             	add    esp,0xc
c00236a1:	89 c3                	mov    ebx,eax
c00236a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00236a8:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00236ab:	55                   	push   ebp
c00236ac:	53                   	push   ebx
c00236ad:	e8 a2 6d ff ff       	call   c001a454 <File::File(char const*, Process*)>
c00236b2:	83 c4 10             	add    esp,0x10
c00236b5:	31 d2                	xor    edx,edx
c00236b7:	b8 03 00 00 00       	mov    eax,0x3
c00236bc:	85 db                	test   ebx,ebx
c00236be:	0f 84 a2 00 00 00    	je     c0023766 <SysTruncate(regs*)+0xf4>
c00236c4:	51                   	push   ecx
c00236c5:	51                   	push   ecx
c00236c6:	6a 02                	push   0x2
c00236c8:	53                   	push   ebx
c00236c9:	e8 a4 6d ff ff       	call   c001a472 <File::open(FileOpenMode)>
c00236ce:	83 c4 10             	add    esp,0x10
c00236d1:	85 c0                	test   eax,eax
c00236d3:	74 13                	je     c00236e8 <SysTruncate(regs*)+0x76>
c00236d5:	83 ec 0c             	sub    esp,0xc
c00236d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00236da:	53                   	push   ebx
c00236db:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00236de:	83 c4 10             	add    esp,0x10
c00236e1:	b8 04 00 00 00       	mov    eax,0x4
c00236e6:	eb 7c                	jmp    c0023764 <SysTruncate(regs*)+0xf2>
c00236e8:	52                   	push   edx
c00236e9:	57                   	push   edi
c00236ea:	56                   	push   esi
c00236eb:	53                   	push   ebx
c00236ec:	e8 95 6e ff ff       	call   c001a586 <File::truncate(unsigned long long)>
c00236f1:	83 c4 10             	add    esp,0x10
c00236f4:	85 c0                	test   eax,eax
c00236f6:	74 1b                	je     c0023713 <SysTruncate(regs*)+0xa1>
c00236f8:	83 ec 0c             	sub    esp,0xc
c00236fb:	53                   	push   ebx
c00236fc:	e8 cf 6d ff ff       	call   c001a4d0 <File::close()>
c0023701:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023703:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023706:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023709:	83 c4 10             	add    esp,0x10
c002370c:	b8 05 00 00 00       	mov    eax,0x5
c0023711:	eb 51                	jmp    c0023764 <SysTruncate(regs*)+0xf2>
c0023713:	83 ec 0c             	sub    esp,0xc
c0023716:	53                   	push   ebx
c0023717:	e8 b4 6d ff ff       	call   c001a4d0 <File::close()>
c002371c:	8b 03                	mov    eax,DWORD PTR [ebx]
c002371e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023721:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023724:	83 c4 10             	add    esp,0x10
c0023727:	31 c0                	xor    eax,eax
c0023729:	eb 39                	jmp    c0023764 <SysTruncate(regs*)+0xf2>
c002372b:	31 d2                	xor    edx,edx
c002372d:	b8 01 00 00 00       	mov    eax,0x1
c0023732:	83 fd 02             	cmp    ebp,0x2
c0023735:	7e 2f                	jle    c0023766 <SysTruncate(regs*)+0xf4>
c0023737:	83 ec 0c             	sub    esp,0xc
c002373a:	51                   	push   ecx
c002373b:	e8 7b 46 ff ff       	call   c0017dbb <KeGetFileFromDescriptor(int)>
c0023740:	83 c4 10             	add    esp,0x10
c0023743:	89 c1                	mov    ecx,eax
c0023745:	31 d2                	xor    edx,edx
c0023747:	b8 02 00 00 00       	mov    eax,0x2
c002374c:	85 c9                	test   ecx,ecx
c002374e:	74 16                	je     c0023766 <SysTruncate(regs*)+0xf4>
c0023750:	50                   	push   eax
c0023751:	57                   	push   edi
c0023752:	56                   	push   esi
c0023753:	51                   	push   ecx
c0023754:	e8 2d 6e ff ff       	call   c001a586 <File::truncate(unsigned long long)>
c0023759:	83 c4 10             	add    esp,0x10
c002375c:	85 c0                	test   eax,eax
c002375e:	0f 95 c0             	setne  al
c0023761:	0f b6 c0             	movzx  eax,al
c0023764:	31 d2                	xor    edx,edx
c0023766:	83 c4 0c             	add    esp,0xc
c0023769:	5b                   	pop    ebx
c002376a:	5e                   	pop    esi
c002376b:	5f                   	pop    edi
c002376c:	5d                   	pop    ebp
c002376d:	c3                   	ret    

c002376e <SysWrite(regs*)>:
c002376e:	57                   	push   edi
c002376f:	56                   	push   esi
c0023770:	53                   	push   ebx
c0023771:	83 ec 10             	sub    esp,0x10
c0023774:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0023778:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002377b:	83 f8 02             	cmp    eax,0x2
c002377e:	77 10                	ja     c0023790 <SysWrite(regs*)+0x22>
c0023780:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023785:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023788:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c002378e:	eb 0e                	jmp    c002379e <SysWrite(regs*)+0x30>
c0023790:	83 ec 0c             	sub    esp,0xc
c0023793:	50                   	push   eax
c0023794:	e8 22 46 ff ff       	call   c0017dbb <KeGetFileFromDescriptor(int)>
c0023799:	83 c4 10             	add    esp,0x10
c002379c:	89 c1                	mov    ecx,eax
c002379e:	83 c8 ff             	or     eax,0xffffffff
c00237a1:	85 c9                	test   ecx,ecx
c00237a3:	89 c2                	mov    edx,eax
c00237a5:	74 28                	je     c00237cf <SysWrite(regs*)+0x61>
c00237a7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00237af:	31 ff                	xor    edi,edi
c00237b1:	83 ec 0c             	sub    esp,0xc
c00237b4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00237b6:	8d 54 24 18          	lea    edx,[esp+0x18]
c00237ba:	52                   	push   edx
c00237bb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00237be:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00237c1:	57                   	push   edi
c00237c2:	56                   	push   esi
c00237c3:	51                   	push   ecx
c00237c4:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00237c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00237cb:	83 c4 20             	add    esp,0x20
c00237ce:	99                   	cdq    
c00237cf:	83 c4 10             	add    esp,0x10
c00237d2:	5b                   	pop    ebx
c00237d3:	5e                   	pop    esi
c00237d4:	5f                   	pop    edi
c00237d5:	c3                   	ret    

c00237d6 <SysWsbe(regs*)>:
c00237d6:	57                   	push   edi
c00237d7:	b9 0b 00 00 00       	mov    ecx,0xb
c00237dc:	56                   	push   esi
c00237dd:	be 47 2c 03 c0       	mov    esi,0xc0032c47
c00237e2:	53                   	push   ebx
c00237e3:	83 ec 30             	sub    esp,0x30
c00237e6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00237ea:	fc                   	cld    
c00237eb:	83 ec 0c             	sub    esp,0xc
c00237ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00237f0:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00237f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00237f9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00237fc:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0023802:	8b 06                	mov    eax,DWORD PTR [esi]
c0023804:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0023807:	57                   	push   edi
c0023808:	e8 63 cd fd ff       	call   c0000570 <strlen>
c002380d:	5a                   	pop    edx
c002380e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0023812:	52                   	push   edx
c0023813:	31 d2                	xor    edx,edx
c0023815:	57                   	push   edi
c0023816:	52                   	push   edx
c0023817:	50                   	push   eax
c0023818:	56                   	push   esi
c0023819:	ff d3                	call   ebx
c002381b:	83 c4 14             	add    esp,0x14
c002381e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0023822:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0023825:	e8 b2 21 00 00       	call   c00259dc <terminateTask(int)>
c002382a:	83 c4 40             	add    esp,0x40
c002382d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0023832:	5b                   	pop    ebx
c0023833:	31 d2                	xor    edx,edx
c0023835:	5e                   	pop    esi
c0023836:	5f                   	pop    edi
c0023837:	c3                   	ret    

c0023838 <SysYield(regs*)>:
c0023838:	83 ec 0c             	sub    esp,0xc
c002383b:	fa                   	cli    
c002383c:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023842:	e8 15 1a 00 00       	call   c002525c <schedule()>
c0023847:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002384c:	48                   	dec    eax
c002384d:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0023852:	75 01                	jne    c0023855 <SysYield(regs*)+0x1d>
c0023854:	fb                   	sti    
c0023855:	31 c0                	xor    eax,eax
c0023857:	31 d2                	xor    edx,edx
c0023859:	83 c4 0c             	add    esp,0xc
c002385c:	c3                   	ret    

c002385d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c002385d:	55                   	push   ebp
c002385e:	57                   	push   edi
c002385f:	56                   	push   esi
c0023860:	53                   	push   ebx
c0023861:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0023867:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c002386f:	0f 95 c0             	setne  al
c0023872:	31 d2                	xor    edx,edx
c0023874:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c002387c:	0f 94 c2             	sete   dl
c002387f:	85 c2                	test   edx,eax
c0023881:	74 34                	je     c00238b7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0023883:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c002388e:	74 27                	je     c00238b7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0023890:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0023897:	05 00 10 00 00       	add    eax,0x1000
c002389c:	89 c1                	mov    ecx,eax
c002389e:	25 00 f0 ff ff       	and    eax,0xfffff000
c00238a3:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00238a9:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00238b0:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00238b7:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00238be:	83 ec 0c             	sub    esp,0xc
c00238c1:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00238c7:	6a 01                	push   0x1
c00238c9:	e8 47 46 ff ff       	call   c0017f15 <Virt::allocateKernelVirtualPages(int)>
c00238ce:	83 c4 10             	add    esp,0x10
c00238d1:	89 c3                	mov    ebx,eax
c00238d3:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00238d9:	0f 86 25 01 00 00    	jbe    c0023a04 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00238df:	c1 ee 0c             	shr    esi,0xc
c00238e2:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00238e9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00238ed:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00238f5:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00238fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023900:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0023907:	29 ef                	sub    edi,ebp
c0023909:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c002390d:	0f 83 f8 00 00 00    	jae    c0023a0b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c0023913:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0023919:	76 05                	jbe    c0023920 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c002391b:	bf 00 10 00 00       	mov    edi,0x1000
c0023920:	83 ec 0c             	sub    esp,0xc
c0023923:	31 d2                	xor    edx,edx
c0023925:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c002392c:	8b 08                	mov    ecx,DWORD PTR [eax]
c002392e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0023932:	50                   	push   eax
c0023933:	8d 74 24 30          	lea    esi,[esp+0x30]
c0023937:	56                   	push   esi
c0023938:	52                   	push   edx
c0023939:	57                   	push   edi
c002393a:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0023941:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023944:	83 c4 20             	add    esp,0x20
c0023947:	85 c0                	test   eax,eax
c0023949:	75 06                	jne    c0023951 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c002394b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c002394f:	74 13                	je     c0023964 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0023951:	83 ec 0c             	sub    esp,0xc
c0023954:	53                   	push   ebx
c0023955:	e8 d9 48 ff ff       	call   c0018233 <Virt::freeKernelVirtualPages(unsigned long)>
c002395a:	83 c4 10             	add    esp,0x10
c002395d:	31 c0                	xor    eax,eax
c002395f:	e9 7c 01 00 00       	jmp    c0023ae0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0023964:	fa                   	cli    
c0023965:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002396b:	e8 57 2d ff ff       	call   c00166c7 <Phys::allocatePage()>
c0023970:	6a 07                	push   0x7
c0023972:	89 c7                	mov    edi,eax
c0023974:	53                   	push   ebx
c0023975:	50                   	push   eax
c0023976:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002397b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002397e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023984:	e8 9f 4c ff ff       	call   c0018628 <VAS::mapPage(unsigned long, unsigned long, int)>
c0023989:	83 c4 0c             	add    esp,0xc
c002398c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0023993:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023999:	6a 00                	push   0x0
c002399b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00239a0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00239a3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00239a9:	e8 e0 4a ff ff       	call   c001848e <VAS::mapOtherVASIn(bool, VAS*)>
c00239ae:	58                   	pop    eax
c00239af:	5a                   	pop    edx
c00239b0:	68 07 0c 00 00       	push   0xc07
c00239b5:	55                   	push   ebp
c00239b6:	57                   	push   edi
c00239b7:	89 df                	mov    edi,ebx
c00239b9:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00239c0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00239c6:	6a 00                	push   0x0
c00239c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00239cd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00239d0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00239d6:	e8 9f 4e ff ff       	call   c001887a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00239db:	b9 00 10 00 00       	mov    ecx,0x1000
c00239e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00239e2:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00239e7:	83 c4 20             	add    esp,0x20
c00239ea:	48                   	dec    eax
c00239eb:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00239f0:	85 c0                	test   eax,eax
c00239f2:	75 01                	jne    c00239f5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c00239f4:	fb                   	sti    
c00239f5:	81 c5 00 10 00 00    	add    ebp,0x1000
c00239fb:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00239ff:	e9 f1 fe ff ff       	jmp    c00238f5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0023a04:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0023a0b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0023a12:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0023a18:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0023a1e:	0f 86 ae 00 00 00    	jbe    c0023ad2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0023a24:	fa                   	cli    
c0023a25:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023a2b:	c1 ee 0c             	shr    esi,0xc
c0023a2e:	51                   	push   ecx
c0023a2f:	31 ff                	xor    edi,edi
c0023a31:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0023a38:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023a3e:	6a 00                	push   0x0
c0023a40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023a45:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023a48:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023a4e:	e8 3b 4a ff ff       	call   c001848e <VAS::mapOtherVASIn(bool, VAS*)>
c0023a53:	83 c4 10             	add    esp,0x10
c0023a56:	e8 6c 2c ff ff       	call   c00166c7 <Phys::allocatePage()>
c0023a5b:	47                   	inc    edi
c0023a5c:	6a 07                	push   0x7
c0023a5e:	53                   	push   ebx
c0023a5f:	50                   	push   eax
c0023a60:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023a64:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0023a6a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0023a6d:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0023a73:	e8 b0 4b ff ff       	call   c0018628 <VAS::mapPage(unsigned long, unsigned long, int)>
c0023a78:	58                   	pop    eax
c0023a79:	5a                   	pop    edx
c0023a7a:	68 07 0c 00 00       	push   0xc07
c0023a7f:	55                   	push   ebp
c0023a80:	81 c5 00 10 00 00    	add    ebp,0x1000
c0023a86:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023a8a:	50                   	push   eax
c0023a8b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0023a92:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023a98:	6a 00                	push   0x0
c0023a9a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023a9f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023aa2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023aa8:	e8 cd 4d ff ff       	call   c001887a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0023aad:	83 c4 1c             	add    esp,0x1c
c0023ab0:	68 00 10 00 00       	push   0x1000
c0023ab5:	6a 00                	push   0x0
c0023ab7:	53                   	push   ebx
c0023ab8:	e8 33 ca fd ff       	call   c00004f0 <memset>
c0023abd:	83 c4 10             	add    esp,0x10
c0023ac0:	39 fe                	cmp    esi,edi
c0023ac2:	77 92                	ja     c0023a56 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c0023ac4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0023ac9:	48                   	dec    eax
c0023aca:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0023acf:	75 01                	jne    c0023ad2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0023ad1:	fb                   	sti    
c0023ad2:	83 ec 0c             	sub    esp,0xc
c0023ad5:	53                   	push   ebx
c0023ad6:	e8 58 47 ff ff       	call   c0018233 <Virt::freeKernelVirtualPages(unsigned long)>
c0023adb:	83 c4 10             	add    esp,0x10
c0023ade:	b0 01                	mov    al,0x1
c0023ae0:	81 c4 2c 10 00 00    	add    esp,0x102c
c0023ae6:	5b                   	pop    ebx
c0023ae7:	5e                   	pop    esi
c0023ae8:	5f                   	pop    edi
c0023ae9:	5d                   	pop    ebp
c0023aea:	c3                   	ret    

c0023aeb <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0023aeb:	55                   	push   ebp
c0023aec:	57                   	push   edi
c0023aed:	56                   	push   esi
c0023aee:	53                   	push   ebx
c0023aef:	83 ec 48             	sub    esp,0x48
c0023af2:	68 14 01 00 00       	push   0x114
c0023af7:	e8 c2 28 ff ff       	call   c00163be <malloc>
c0023afc:	83 c4 0c             	add    esp,0xc
c0023aff:	89 c6                	mov    esi,eax
c0023b01:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0023b05:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0023b09:	50                   	push   eax
c0023b0a:	e8 45 69 ff ff       	call   c001a454 <File::File(char const*, Process*)>
c0023b0f:	58                   	pop    eax
c0023b10:	5a                   	pop    edx
c0023b11:	6a 01                	push   0x1
c0023b13:	56                   	push   esi
c0023b14:	e8 59 69 ff ff       	call   c001a472 <File::open(FileOpenMode)>
c0023b19:	83 c4 10             	add    esp,0x10
c0023b1c:	85 c0                	test   eax,eax
c0023b1e:	0f 85 43 01 00 00    	jne    c0023c67 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023b24:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0023b2c:	83 ec 0c             	sub    esp,0xc
c0023b2f:	6a 34                	push   0x34
c0023b31:	e8 88 28 ff ff       	call   c00163be <malloc>
c0023b36:	89 c3                	mov    ebx,eax
c0023b38:	58                   	pop    eax
c0023b39:	8b 06                	mov    eax,DWORD PTR [esi]
c0023b3b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0023b3f:	57                   	push   edi
c0023b40:	53                   	push   ebx
c0023b41:	6a 00                	push   0x0
c0023b43:	6a 34                	push   0x34
c0023b45:	56                   	push   esi
c0023b46:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023b49:	83 c4 20             	add    esp,0x20
c0023b4c:	85 c0                	test   eax,eax
c0023b4e:	0f 85 13 01 00 00    	jne    c0023c67 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023b54:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0023b5a:	0f 85 07 01 00 00    	jne    c0023c67 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023b60:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023b63:	85 c0                	test   eax,eax
c0023b65:	0f 84 fc 00 00 00    	je     c0023c67 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023b6b:	31 d2                	xor    edx,edx
c0023b6d:	55                   	push   ebp
c0023b6e:	52                   	push   edx
c0023b6f:	50                   	push   eax
c0023b70:	56                   	push   esi
c0023b71:	e8 ba 69 ff ff       	call   c001a530 <File::seek(unsigned long long)>
c0023b76:	83 c4 10             	add    esp,0x10
c0023b79:	85 c0                	test   eax,eax
c0023b7b:	0f 85 e6 00 00 00    	jne    c0023c67 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023b81:	83 ec 0c             	sub    esp,0xc
c0023b84:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0023b87:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0023b8b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0023b8f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0023b93:	0f af c2             	imul   eax,edx
c0023b96:	50                   	push   eax
c0023b97:	e8 22 28 ff ff       	call   c00163be <malloc>
c0023b9c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0023b9e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0023ba2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023ba5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023ba9:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0023bad:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0023bb1:	0f af c2             	imul   eax,edx
c0023bb4:	99                   	cdq    
c0023bb5:	52                   	push   edx
c0023bb6:	50                   	push   eax
c0023bb7:	56                   	push   esi
c0023bb8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023bbb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0023bbe:	83 c4 20             	add    esp,0x20
c0023bc1:	85 c0                	test   eax,eax
c0023bc3:	0f 84 9e 00 00 00    	je     c0023c67 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023bc9:	31 d2                	xor    edx,edx
c0023bcb:	51                   	push   ecx
c0023bcc:	52                   	push   edx
c0023bcd:	50                   	push   eax
c0023bce:	56                   	push   esi
c0023bcf:	e8 5c 69 ff ff       	call   c001a530 <File::seek(unsigned long long)>
c0023bd4:	83 c4 10             	add    esp,0x10
c0023bd7:	85 c0                	test   eax,eax
c0023bd9:	0f 85 88 00 00 00    	jne    c0023c67 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023bdf:	83 ec 0c             	sub    esp,0xc
c0023be2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0023be6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0023bea:	31 ed                	xor    ebp,ebp
c0023bec:	0f af c2             	imul   eax,edx
c0023bef:	50                   	push   eax
c0023bf0:	e8 c9 27 ff ff       	call   c00163be <malloc>
c0023bf5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0023bf7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023bfb:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023bfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c02:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0023c06:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0023c0a:	0f af c2             	imul   eax,edx
c0023c0d:	99                   	cdq    
c0023c0e:	52                   	push   edx
c0023c0f:	50                   	push   eax
c0023c10:	56                   	push   esi
c0023c11:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023c14:	83 c4 20             	add    esp,0x20
c0023c17:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0023c1f:	0f b7 fd             	movzx  edi,bp
c0023c22:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0023c26:	73 7d                	jae    c0023ca5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0023c28:	c1 e7 05             	shl    edi,0x5
c0023c2b:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0023c2f:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0023c32:	75 6b                	jne    c0023c9f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0023c34:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0023c37:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023c3b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0023c3e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023c42:	52                   	push   edx
c0023c43:	31 d2                	xor    edx,edx
c0023c45:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0023c48:	52                   	push   edx
c0023c49:	50                   	push   eax
c0023c4a:	56                   	push   esi
c0023c4b:	e8 e0 68 ff ff       	call   c001a530 <File::seek(unsigned long long)>
c0023c50:	83 c4 10             	add    esp,0x10
c0023c53:	85 c0                	test   eax,eax
c0023c55:	74 17                	je     c0023c6e <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0023c57:	83 ec 0c             	sub    esp,0xc
c0023c5a:	68 73 2c 03 c0       	push   0xc0032c73
c0023c5f:	e8 e9 55 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0023c64:	83 c4 10             	add    esp,0x10
c0023c67:	31 c0                	xor    eax,eax
c0023c69:	e9 87 00 00 00       	jmp    c0023cf5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0023c6e:	83 ec 0c             	sub    esp,0xc
c0023c71:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0023c74:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0023c77:	50                   	push   eax
c0023c78:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0023c7c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023c80:	56                   	push   esi
c0023c81:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0023c85:	e8 d3 fb ff ff       	call   c002385d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0023c8a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0023c8e:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0023c92:	83 c4 20             	add    esp,0x20
c0023c95:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0023c99:	73 04                	jae    c0023c9f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0023c9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023c9f:	45                   	inc    ebp
c0023ca0:	e9 7a ff ff ff       	jmp    c0023c1f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0023ca5:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0023ca9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023cad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023cb1:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0023cb7:	83 ec 0c             	sub    esp,0xc
c0023cba:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0023cc0:	25 00 f0 ff ff       	and    eax,0xfffff000
c0023cc5:	05 00 10 00 00       	add    eax,0x1000
c0023cca:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0023ccd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023cd1:	e8 f8 26 ff ff       	call   c00163ce <free>
c0023cd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023cd9:	e8 f0 26 ff ff       	call   c00163ce <free>
c0023cde:	58                   	pop    eax
c0023cdf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023ce3:	e8 e6 26 ff ff       	call   c00163ce <free>
c0023ce8:	89 34 24             	mov    DWORD PTR [esp],esi
c0023ceb:	e8 e0 67 ff ff       	call   c001a4d0 <File::close()>
c0023cf0:	83 c4 10             	add    esp,0x10
c0023cf3:	b0 01                	mov    al,0x1
c0023cf5:	83 c4 3c             	add    esp,0x3c
c0023cf8:	5b                   	pop    ebx
c0023cf9:	5e                   	pop    esi
c0023cfa:	5f                   	pop    edi
c0023cfb:	5d                   	pop    ebp
c0023cfc:	c3                   	ret    

c0023cfd <Thr::runtimeReferenceHelper()>:
c0023cfd:	83 ec 18             	sub    esp,0x18
c0023d00:	68 7b 2c 03 c0       	push   0xc0032c7b
c0023d05:	e8 43 55 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0023d0a:	fa                   	cli    
c0023d0b:	83 c4 10             	add    esp,0x10
c0023d0e:	eb fe                	jmp    c0023d0e <Thr::runtimeReferenceHelper()+0x11>

c0023d10 <Thr::getAddressOfKernelSymbol(char const*)>:
c0023d10:	57                   	push   edi
c0023d11:	56                   	push   esi
c0023d12:	53                   	push   ebx
c0023d13:	31 db                	xor    ebx,ebx
c0023d15:	39 1d a0 01 04 c0    	cmp    DWORD PTR ds:0xc00401a0,ebx
c0023d1b:	7e 3c                	jle    c0023d59 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0023d1d:	8b 34 9d 20 01 04 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffbfee0]
c0023d24:	31 ff                	xor    edi,edi
c0023d26:	39 3c 9d 20 00 04 c0 	cmp    DWORD PTR [ebx*4-0x3ffbffe0],edi
c0023d2d:	7e 27                	jle    c0023d56 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0023d2f:	50                   	push   eax
c0023d30:	50                   	push   eax
c0023d31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023d35:	8b 06                	mov    eax,DWORD PTR [esi]
c0023d37:	03 04 9d a0 00 04 c0 	add    eax,DWORD PTR [ebx*4-0x3ffbff60]
c0023d3e:	50                   	push   eax
c0023d3f:	e8 0c ca fd ff       	call   c0000750 <strcmp>
c0023d44:	83 c4 10             	add    esp,0x10
c0023d47:	85 c0                	test   eax,eax
c0023d49:	75 05                	jne    c0023d50 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0023d4b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0023d4e:	eb 0b                	jmp    c0023d5b <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0023d50:	83 c6 10             	add    esi,0x10
c0023d53:	47                   	inc    edi
c0023d54:	eb d0                	jmp    c0023d26 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0023d56:	43                   	inc    ebx
c0023d57:	eb bc                	jmp    c0023d15 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0023d59:	31 c0                	xor    eax,eax
c0023d5b:	5b                   	pop    ebx
c0023d5c:	5e                   	pop    esi
c0023d5d:	5f                   	pop    edi
c0023d5e:	c3                   	ret    

c0023d5f <Thr::loadKernelSymbolTable(char const*)>:
c0023d5f:	55                   	push   ebp
c0023d60:	57                   	push   edi
c0023d61:	56                   	push   esi
c0023d62:	53                   	push   ebx
c0023d63:	83 ec 68             	sub    esp,0x68
c0023d66:	8b 35 f8 01 04 c0    	mov    esi,DWORD PTR ds:0xc00401f8
c0023d6c:	68 14 01 00 00       	push   0x114
c0023d71:	e8 48 26 ff ff       	call   c00163be <malloc>
c0023d76:	83 c4 0c             	add    esp,0xc
c0023d79:	89 c3                	mov    ebx,eax
c0023d7b:	56                   	push   esi
c0023d7c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0023d80:	50                   	push   eax
c0023d81:	e8 ce 66 ff ff       	call   c001a454 <File::File(char const*, Process*)>
c0023d86:	5e                   	pop    esi
c0023d87:	5f                   	pop    edi
c0023d88:	6a 01                	push   0x1
c0023d8a:	53                   	push   ebx
c0023d8b:	e8 e2 66 ff ff       	call   c001a472 <File::open(FileOpenMode)>
c0023d90:	83 c4 10             	add    esp,0x10
c0023d93:	85 c0                	test   eax,eax
c0023d95:	74 0a                	je     c0023da1 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0023d97:	83 ec 0c             	sub    esp,0xc
c0023d9a:	68 9d 2c 03 c0       	push   0xc0032c9d
c0023d9f:	eb 34                	jmp    c0023dd5 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0023da1:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0023da9:	83 ec 0c             	sub    esp,0xc
c0023dac:	6a 34                	push   0x34
c0023dae:	e8 0b 26 ff ff       	call   c00163be <malloc>
c0023db3:	59                   	pop    ecx
c0023db4:	89 c7                	mov    edi,eax
c0023db6:	8d 74 24 34          	lea    esi,[esp+0x34]
c0023dba:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023dbc:	56                   	push   esi
c0023dbd:	57                   	push   edi
c0023dbe:	6a 00                	push   0x0
c0023dc0:	6a 34                	push   0x34
c0023dc2:	53                   	push   ebx
c0023dc3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023dc6:	83 c4 20             	add    esp,0x20
c0023dc9:	85 c0                	test   eax,eax
c0023dcb:	74 17                	je     c0023de4 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0023dcd:	83 ec 0c             	sub    esp,0xc
c0023dd0:	68 b4 2c 03 c0       	push   0xc0032cb4
c0023dd5:	e8 8c c4 ff ff       	call   c0020266 <KePanic(char const*)>
c0023dda:	83 c4 10             	add    esp,0x10
c0023ddd:	31 c0                	xor    eax,eax
c0023ddf:	e9 31 02 00 00       	jmp    c0024015 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0023de4:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0023dea:	75 e1                	jne    c0023dcd <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0023dec:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0023def:	85 c0                	test   eax,eax
c0023df1:	74 da                	je     c0023dcd <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0023df3:	52                   	push   edx
c0023df4:	31 d2                	xor    edx,edx
c0023df6:	52                   	push   edx
c0023df7:	50                   	push   eax
c0023df8:	53                   	push   ebx
c0023df9:	e8 32 67 ff ff       	call   c001a530 <File::seek(unsigned long long)>
c0023dfe:	83 c4 10             	add    esp,0x10
c0023e01:	85 c0                	test   eax,eax
c0023e03:	75 c8                	jne    c0023dcd <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0023e05:	83 ec 0c             	sub    esp,0xc
c0023e08:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0023e0c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0023e10:	31 ed                	xor    ebp,ebp
c0023e12:	0f af c2             	imul   eax,edx
c0023e15:	50                   	push   eax
c0023e16:	e8 a3 25 ff ff       	call   c00163be <malloc>
c0023e1b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0023e1d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023e21:	89 34 24             	mov    DWORD PTR [esp],esi
c0023e24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023e28:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0023e2c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0023e30:	0f af c2             	imul   eax,edx
c0023e33:	99                   	cdq    
c0023e34:	52                   	push   edx
c0023e35:	50                   	push   eax
c0023e36:	53                   	push   ebx
c0023e37:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023e3a:	83 c4 20             	add    esp,0x20
c0023e3d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0023e45:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0023e4d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023e55:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0023e5d:	0f b7 f5             	movzx  esi,bp
c0023e60:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0023e64:	0f 83 a7 00 00 00    	jae    c0023f11 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0023e6a:	6b f6 28             	imul   esi,esi,0x28
c0023e6d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0023e71:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0023e74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023e78:	50                   	push   eax
c0023e79:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0023e7d:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0023e81:	8b 16                	mov    edx,DWORD PTR [esi]
c0023e83:	6b c0 28             	imul   eax,eax,0x28
c0023e86:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0023e8a:	89 d0                	mov    eax,edx
c0023e8c:	31 d2                	xor    edx,edx
c0023e8e:	52                   	push   edx
c0023e8f:	50                   	push   eax
c0023e90:	53                   	push   ebx
c0023e91:	e8 9a 66 ff ff       	call   c001a530 <File::seek(unsigned long long)>
c0023e96:	83 c4 0c             	add    esp,0xc
c0023e99:	6a 20                	push   0x20
c0023e9b:	6a 00                	push   0x0
c0023e9d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0023ea1:	52                   	push   edx
c0023ea2:	e8 49 c6 fd ff       	call   c00004f0 <memset>
c0023ea7:	58                   	pop    eax
c0023ea8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023eaa:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0023eae:	51                   	push   ecx
c0023eaf:	8d 54 24 40          	lea    edx,[esp+0x40]
c0023eb3:	52                   	push   edx
c0023eb4:	6a 00                	push   0x0
c0023eb6:	6a 1f                	push   0x1f
c0023eb8:	53                   	push   ebx
c0023eb9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023ebc:	83 c4 18             	add    esp,0x18
c0023ebf:	68 cb 2c 03 c0       	push   0xc0032ccb
c0023ec4:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0023ec8:	52                   	push   edx
c0023ec9:	e8 82 c8 fd ff       	call   c0000750 <strcmp>
c0023ece:	83 c4 10             	add    esp,0x10
c0023ed1:	85 c0                	test   eax,eax
c0023ed3:	75 0f                	jne    c0023ee4 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0023ed5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0023ed8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023edc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023ee0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023ee4:	50                   	push   eax
c0023ee5:	50                   	push   eax
c0023ee6:	68 d3 2c 03 c0       	push   0xc0032cd3
c0023eeb:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0023eef:	50                   	push   eax
c0023ef0:	e8 5b c8 fd ff       	call   c0000750 <strcmp>
c0023ef5:	83 c4 10             	add    esp,0x10
c0023ef8:	85 c0                	test   eax,eax
c0023efa:	75 0f                	jne    c0023f0b <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0023efc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0023eff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023f03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023f0b:	45                   	inc    ebp
c0023f0c:	e9 4c ff ff ff       	jmp    c0023e5d <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0023f11:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0023f16:	75 10                	jne    c0023f28 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0023f18:	83 ec 0c             	sub    esp,0xc
c0023f1b:	68 db 2c 03 c0       	push   0xc0032cdb
c0023f20:	e8 41 c3 ff ff       	call   c0020266 <KePanic(char const*)>
c0023f25:	83 c4 10             	add    esp,0x10
c0023f28:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0023f2d:	75 10                	jne    c0023f3f <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0023f2f:	83 ec 0c             	sub    esp,0xc
c0023f32:	68 db 2c 03 c0       	push   0xc0032cdb
c0023f37:	e8 2a c3 ff ff       	call   c0020266 <KePanic(char const*)>
c0023f3c:	83 c4 10             	add    esp,0x10
c0023f3f:	31 d2                	xor    edx,edx
c0023f41:	50                   	push   eax
c0023f42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f46:	52                   	push   edx
c0023f47:	50                   	push   eax
c0023f48:	53                   	push   ebx
c0023f49:	e8 e2 65 ff ff       	call   c001a530 <File::seek(unsigned long long)>
c0023f4e:	5a                   	pop    edx
c0023f4f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0023f53:	e8 66 24 ff ff       	call   c00163be <malloc>
c0023f58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023f5c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023f60:	31 c9                	xor    ecx,ecx
c0023f62:	5e                   	pop    esi
c0023f63:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023f65:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0023f69:	55                   	push   ebp
c0023f6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023f6e:	51                   	push   ecx
c0023f6f:	52                   	push   edx
c0023f70:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0023f74:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0023f78:	53                   	push   ebx
c0023f79:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023f7c:	83 c4 14             	add    esp,0x14
c0023f7f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023f83:	e8 36 24 ff ff       	call   c00163be <malloc>
c0023f88:	89 c6                	mov    esi,eax
c0023f8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023f8c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0023f8f:	56                   	push   esi
c0023f90:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0023f94:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0023f98:	51                   	push   ecx
c0023f99:	52                   	push   edx
c0023f9a:	53                   	push   ebx
c0023f9b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023f9e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023fa2:	8b 15 a0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401a0
c0023fa8:	83 c4 1c             	add    esp,0x1c
c0023fab:	c1 e8 04             	shr    eax,0x4
c0023fae:	89 04 95 20 00 04 c0 	mov    DWORD PTR [edx*4-0x3ffbffe0],eax
c0023fb5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023fb9:	31 d2                	xor    edx,edx
c0023fbb:	52                   	push   edx
c0023fbc:	50                   	push   eax
c0023fbd:	53                   	push   ebx
c0023fbe:	e8 6d 65 ff ff       	call   c001a530 <File::seek(unsigned long long)>
c0023fc3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0023fc5:	31 d2                	xor    edx,edx
c0023fc7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0023fca:	56                   	push   esi
c0023fcb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0023fcf:	52                   	push   edx
c0023fd0:	50                   	push   eax
c0023fd1:	53                   	push   ebx
c0023fd2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023fd5:	83 c4 14             	add    esp,0x14
c0023fd8:	53                   	push   ebx
c0023fd9:	e8 f2 64 ff ff       	call   c001a4d0 <File::close()>
c0023fde:	5d                   	pop    ebp
c0023fdf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023fe3:	e8 e6 23 ff ff       	call   c00163ce <free>
c0023fe8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023feb:	e8 de 23 ff ff       	call   c00163ce <free>
c0023ff0:	a1 a0 01 04 c0       	mov    eax,ds:0xc00401a0
c0023ff5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023ff9:	8d 50 01             	lea    edx,[eax+0x1]
c0023ffc:	89 0c 85 20 01 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfee0],ecx
c0024003:	89 34 85 a0 00 04 c0 	mov    DWORD PTR [eax*4-0x3ffbff60],esi
c002400a:	89 15 a0 01 04 c0    	mov    DWORD PTR ds:0xc00401a0,edx
c0024010:	83 c4 10             	add    esp,0x10
c0024013:	b0 01                	mov    al,0x1
c0024015:	83 c4 5c             	add    esp,0x5c
c0024018:	5b                   	pop    ebx
c0024019:	5e                   	pop    esi
c002401a:	5f                   	pop    edi
c002401b:	5d                   	pop    ebp
c002401c:	c3                   	ret    

c002401d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c002401d:	55                   	push   ebp
c002401e:	57                   	push   edi
c002401f:	56                   	push   esi
c0024020:	53                   	push   ebx
c0024021:	81 ec 68 03 00 00    	sub    esp,0x368
c0024027:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c002402e:	8b 1d f8 01 04 c0    	mov    ebx,DWORD PTR ds:0xc00401f8
c0024034:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0024038:	68 14 01 00 00       	push   0x114
c002403d:	e8 7c 23 ff ff       	call   c00163be <malloc>
c0024042:	83 c4 0c             	add    esp,0xc
c0024045:	89 c5                	mov    ebp,eax
c0024047:	53                   	push   ebx
c0024048:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c002404f:	50                   	push   eax
c0024050:	e8 ff 63 ff ff       	call   c001a454 <File::File(char const*, Process*)>
c0024055:	5e                   	pop    esi
c0024056:	5f                   	pop    edi
c0024057:	6a 01                	push   0x1
c0024059:	55                   	push   ebp
c002405a:	e8 13 64 ff ff       	call   c001a472 <File::open(FileOpenMode)>
c002405f:	83 c4 10             	add    esp,0x10
c0024062:	85 c0                	test   eax,eax
c0024064:	0f 85 aa 06 00 00    	jne    c0024714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c002406a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0024072:	83 ec 0c             	sub    esp,0xc
c0024075:	6a 34                	push   0x34
c0024077:	e8 42 23 ff ff       	call   c00163be <malloc>
c002407c:	5b                   	pop    ebx
c002407d:	89 c7                	mov    edi,eax
c002407f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0024083:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024086:	53                   	push   ebx
c0024087:	57                   	push   edi
c0024088:	6a 00                	push   0x0
c002408a:	6a 34                	push   0x34
c002408c:	55                   	push   ebp
c002408d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0024090:	83 c4 20             	add    esp,0x20
c0024093:	85 c0                	test   eax,eax
c0024095:	0f 85 79 06 00 00    	jne    c0024714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c002409b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00240a1:	0f 85 6d 06 00 00    	jne    c0024714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00240a7:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00240aa:	85 c0                	test   eax,eax
c00240ac:	0f 84 62 06 00 00    	je     c0024714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00240b2:	31 d2                	xor    edx,edx
c00240b4:	51                   	push   ecx
c00240b5:	52                   	push   edx
c00240b6:	50                   	push   eax
c00240b7:	55                   	push   ebp
c00240b8:	e8 73 64 ff ff       	call   c001a530 <File::seek(unsigned long long)>
c00240bd:	83 c4 10             	add    esp,0x10
c00240c0:	85 c0                	test   eax,eax
c00240c2:	0f 85 4c 06 00 00    	jne    c0024714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00240c8:	83 ec 0c             	sub    esp,0xc
c00240cb:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00240ce:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00240d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00240d6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00240da:	0f af c2             	imul   eax,edx
c00240dd:	50                   	push   eax
c00240de:	e8 db 22 ff ff       	call   c00163be <malloc>
c00240e3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00240e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00240ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00240ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00240f1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00240f5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00240f9:	0f af c2             	imul   eax,edx
c00240fc:	99                   	cdq    
c00240fd:	52                   	push   edx
c00240fe:	50                   	push   eax
c00240ff:	55                   	push   ebp
c0024100:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024103:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0024106:	83 c4 20             	add    esp,0x20
c0024109:	85 c0                	test   eax,eax
c002410b:	0f 84 03 06 00 00    	je     c0024714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0024111:	52                   	push   edx
c0024112:	31 d2                	xor    edx,edx
c0024114:	52                   	push   edx
c0024115:	50                   	push   eax
c0024116:	55                   	push   ebp
c0024117:	e8 14 64 ff ff       	call   c001a530 <File::seek(unsigned long long)>
c002411c:	83 c4 10             	add    esp,0x10
c002411f:	85 c0                	test   eax,eax
c0024121:	0f 85 ed 05 00 00    	jne    c0024714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0024127:	83 ec 0c             	sub    esp,0xc
c002412a:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c002412e:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0024132:	31 f6                	xor    esi,esi
c0024134:	0f af c2             	imul   eax,edx
c0024137:	50                   	push   eax
c0024138:	e8 81 22 ff ff       	call   c00163be <malloc>
c002413d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0024140:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024144:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024147:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002414b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c002414f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0024153:	0f af c2             	imul   eax,edx
c0024156:	99                   	cdq    
c0024157:	52                   	push   edx
c0024158:	50                   	push   eax
c0024159:	55                   	push   ebp
c002415a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002415d:	83 c4 20             	add    esp,0x20
c0024160:	0f b7 de             	movzx  ebx,si
c0024163:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0024167:	0f 83 87 00 00 00    	jae    c00241f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c002416d:	c1 e3 05             	shl    ebx,0x5
c0024170:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0024174:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0024177:	75 75                	jne    c00241ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0024179:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c002417c:	31 d2                	xor    edx,edx
c002417e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024182:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0024185:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024189:	50                   	push   eax
c002418a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c002418d:	52                   	push   edx
c002418e:	50                   	push   eax
c002418f:	55                   	push   ebp
c0024190:	e8 9b 63 ff ff       	call   c001a530 <File::seek(unsigned long long)>
c0024195:	83 c4 10             	add    esp,0x10
c0024198:	85 c0                	test   eax,eax
c002419a:	0f 85 74 05 00 00    	jne    c0024714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00241a0:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00241a7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00241aa:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00241ae:	31 d2                	xor    edx,edx
c00241b0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00241b4:	83 ec 0c             	sub    esp,0xc
c00241b7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00241bb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00241c2:	50                   	push   eax
c00241c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00241c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00241cb:	52                   	push   edx
c00241cc:	50                   	push   eax
c00241cd:	55                   	push   ebp
c00241ce:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00241d1:	83 c4 1c             	add    esp,0x1c
c00241d4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00241d7:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00241da:	50                   	push   eax
c00241db:	6a 00                	push   0x0
c00241dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00241e1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00241e5:	50                   	push   eax
c00241e6:	e8 05 c3 fd ff       	call   c00004f0 <memset>
c00241eb:	83 c4 10             	add    esp,0x10
c00241ee:	46                   	inc    esi
c00241ef:	e9 6c ff ff ff       	jmp    c0024160 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00241f4:	53                   	push   ebx
c00241f5:	31 db                	xor    ebx,ebx
c00241f7:	68 00 01 00 00       	push   0x100
c00241fc:	6a 00                	push   0x0
c00241fe:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0024202:	50                   	push   eax
c0024203:	e8 e8 c2 fd ff       	call   c00004f0 <memset>
c0024208:	83 c4 0c             	add    esp,0xc
c002420b:	68 00 01 00 00       	push   0x100
c0024210:	6a 00                	push   0x0
c0024212:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0024219:	50                   	push   eax
c002421a:	e8 d1 c2 fd ff       	call   c00004f0 <memset>
c002421f:	83 c4 10             	add    esp,0x10
c0024222:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002422a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0024232:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c002423a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0024242:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002424a:	0f b7 f3             	movzx  esi,bx
c002424d:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0024251:	0f 83 2d 01 00 00    	jae    c0024384 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0024257:	6b f6 28             	imul   esi,esi,0x28
c002425a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c002425e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0024261:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024265:	52                   	push   edx
c0024266:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002426a:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c002426e:	8b 06                	mov    eax,DWORD PTR [esi]
c0024270:	6b d2 28             	imul   edx,edx,0x28
c0024273:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0024277:	31 d2                	xor    edx,edx
c0024279:	52                   	push   edx
c002427a:	50                   	push   eax
c002427b:	55                   	push   ebp
c002427c:	e8 af 62 ff ff       	call   c001a530 <File::seek(unsigned long long)>
c0024281:	83 c4 0c             	add    esp,0xc
c0024284:	6a 20                	push   0x20
c0024286:	6a 00                	push   0x0
c0024288:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c002428f:	51                   	push   ecx
c0024290:	e8 5b c2 fd ff       	call   c00004f0 <memset>
c0024295:	59                   	pop    ecx
c0024296:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024299:	8d 54 24 58          	lea    edx,[esp+0x58]
c002429d:	52                   	push   edx
c002429e:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00242a5:	51                   	push   ecx
c00242a6:	6a 00                	push   0x0
c00242a8:	6a 1f                	push   0x1f
c00242aa:	55                   	push   ebp
c00242ab:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00242ae:	83 c4 1c             	add    esp,0x1c
c00242b1:	6a 09                	push   0x9
c00242b3:	68 f5 2c 03 c0       	push   0xc0032cf5
c00242b8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00242bf:	51                   	push   ecx
c00242c0:	e8 bb c0 fd ff       	call   c0000380 <memcmp>
c00242c5:	83 c4 10             	add    esp,0x10
c00242c8:	85 c0                	test   eax,eax
c00242ca:	75 21                	jne    c00242ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00242cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00242d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00242d4:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00242d8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00242dc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00242df:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00242e6:	89 d0                	mov    eax,edx
c00242e8:	40                   	inc    eax
c00242e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00242ed:	50                   	push   eax
c00242ee:	6a 09                	push   0x9
c00242f0:	68 ff 2c 03 c0       	push   0xc0032cff
c00242f5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00242fc:	50                   	push   eax
c00242fd:	e8 7e c0 fd ff       	call   c0000380 <memcmp>
c0024302:	83 c4 10             	add    esp,0x10
c0024305:	85 c0                	test   eax,eax
c0024307:	75 21                	jne    c002432a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0024309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002430d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024311:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0024315:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0024319:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c002431c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0024323:	89 d0                	mov    eax,edx
c0024325:	40                   	inc    eax
c0024326:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002432a:	50                   	push   eax
c002432b:	50                   	push   eax
c002432c:	68 cb 2c 03 c0       	push   0xc0032ccb
c0024331:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024338:	50                   	push   eax
c0024339:	e8 12 c4 fd ff       	call   c0000750 <strcmp>
c002433e:	83 c4 10             	add    esp,0x10
c0024341:	85 c0                	test   eax,eax
c0024343:	75 0f                	jne    c0024354 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0024345:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0024348:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002434c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024350:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024354:	50                   	push   eax
c0024355:	50                   	push   eax
c0024356:	68 d3 2c 03 c0       	push   0xc0032cd3
c002435b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024362:	50                   	push   eax
c0024363:	e8 e8 c3 fd ff       	call   c0000750 <strcmp>
c0024368:	83 c4 10             	add    esp,0x10
c002436b:	85 c0                	test   eax,eax
c002436d:	75 0f                	jne    c002437e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c002436f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0024372:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024376:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002437a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002437e:	43                   	inc    ebx
c002437f:	e9 c6 fe ff ff       	jmp    c002424a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0024384:	31 d2                	xor    edx,edx
c0024386:	50                   	push   eax
c0024387:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002438b:	52                   	push   edx
c002438c:	50                   	push   eax
c002438d:	55                   	push   ebp
c002438e:	e8 9d 61 ff ff       	call   c001a530 <File::seek(unsigned long long)>
c0024393:	58                   	pop    eax
c0024394:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0024398:	e8 21 20 ff ff       	call   c00163be <malloc>
c002439d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00243a0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00243a4:	31 d2                	xor    edx,edx
c00243a6:	58                   	pop    eax
c00243a7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00243ab:	53                   	push   ebx
c00243ac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00243b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00243b4:	52                   	push   edx
c00243b5:	50                   	push   eax
c00243b6:	55                   	push   ebp
c00243b7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00243ba:	83 c4 14             	add    esp,0x14
c00243bd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00243c1:	e8 f8 1f ff ff       	call   c00163be <malloc>
c00243c6:	31 d2                	xor    edx,edx
c00243c8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00243cc:	83 c4 0c             	add    esp,0xc
c00243cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00243d3:	52                   	push   edx
c00243d4:	50                   	push   eax
c00243d5:	55                   	push   ebp
c00243d6:	e8 55 61 ff ff       	call   c001a530 <File::seek(unsigned long long)>
c00243db:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00243de:	31 d2                	xor    edx,edx
c00243e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00243e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00243e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00243eb:	52                   	push   edx
c00243ec:	50                   	push   eax
c00243ed:	55                   	push   ebp
c00243ee:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00243f1:	83 c4 20             	add    esp,0x20
c00243f4:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c00243f9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0024401:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0024405:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024409:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c002440d:	0f 84 05 03 00 00    	je     c0024718 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0024413:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c002441a:	31 d2                	xor    edx,edx
c002441c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024420:	c1 e8 03             	shr    eax,0x3
c0024423:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0024427:	51                   	push   ecx
c0024428:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002442c:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0024430:	52                   	push   edx
c0024431:	50                   	push   eax
c0024432:	55                   	push   ebp
c0024433:	e8 f8 60 ff ff       	call   c001a530 <File::seek(unsigned long long)>
c0024438:	5b                   	pop    ebx
c0024439:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002443d:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0024444:	e8 75 1f ff ff       	call   c00163be <malloc>
c0024449:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c002444c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024450:	31 d2                	xor    edx,edx
c0024452:	5e                   	pop    esi
c0024453:	8d 44 24 58          	lea    eax,[esp+0x58]
c0024457:	50                   	push   eax
c0024458:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002445c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024460:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0024467:	52                   	push   edx
c0024468:	50                   	push   eax
c0024469:	55                   	push   ebp
c002446a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002446d:	83 c4 20             	add    esp,0x20
c0024470:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0024478:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002447c:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0024480:	0f 8d 76 02 00 00    	jge    c00246fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0024486:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002448a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002448e:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0024493:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0024496:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002449a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002449e:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c00244a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00244a6:	c1 e8 08             	shr    eax,0x8
c00244a9:	89 c6                	mov    esi,eax
c00244ab:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00244af:	c1 e6 04             	shl    esi,0x4
c00244b2:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00244b6:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c00244b9:	85 db                	test   ebx,ebx
c00244bb:	0f 85 b3 00 00 00    	jne    c0024574 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00244c1:	83 ec 0c             	sub    esp,0xc
c00244c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00244c8:	03 06                	add    eax,DWORD PTR [esi]
c00244ca:	50                   	push   eax
c00244cb:	e8 40 f8 ff ff       	call   c0023d10 <Thr::getAddressOfKernelSymbol(char const*)>
c00244d0:	83 c4 10             	add    esp,0x10
c00244d3:	89 c3                	mov    ebx,eax
c00244d5:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c00244da:	85 c0                	test   eax,eax
c00244dc:	0f 85 92 00 00 00    	jne    c0024574 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00244e2:	83 ec 0c             	sub    esp,0xc
c00244e5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00244e9:	03 06                	add    eax,DWORD PTR [esi]
c00244eb:	50                   	push   eax
c00244ec:	e8 63 bf ff ff       	call   c0020454 <KeResolveCompatibilitySymbol(char*)>
c00244f1:	83 c4 10             	add    esp,0x10
c00244f4:	89 c3                	mov    ebx,eax
c00244f6:	85 c0                	test   eax,eax
c00244f8:	75 7a                	jne    c0024574 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00244fa:	51                   	push   ecx
c00244fb:	51                   	push   ecx
c00244fc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024500:	03 06                	add    eax,DWORD PTR [esi]
c0024502:	50                   	push   eax
c0024503:	68 09 2d 03 c0       	push   0xc0032d09
c0024508:	e8 40 4d ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c002450d:	58                   	pop    eax
c002450e:	5a                   	pop    edx
c002450f:	68 23 2d 03 c0       	push   0xc0032d23
c0024514:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c002451b:	50                   	push   eax
c002451c:	e8 1f c1 fd ff       	call   c0000640 <strcpy>
c0024521:	59                   	pop    ecx
c0024522:	58                   	pop    eax
c0024523:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024527:	03 06                	add    eax,DWORD PTR [esi]
c0024529:	50                   	push   eax
c002452a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024531:	50                   	push   eax
c0024532:	e8 09 c3 fd ff       	call   c0000840 <strcat>
c0024537:	58                   	pop    eax
c0024538:	5a                   	pop    edx
c0024539:	68 bd 2d 03 c0       	push   0xc0032dbd
c002453e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024545:	50                   	push   eax
c0024546:	e8 f5 c2 fd ff       	call   c0000840 <strcat>
c002454b:	83 c4 10             	add    esp,0x10
c002454e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0024553:	0f 84 5d 01 00 00    	je     c00246b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0024559:	83 ec 0c             	sub    esp,0xc
c002455c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024563:	50                   	push   eax
c0024564:	e8 fd bc ff ff       	call   c0020266 <KePanic(char const*)>
c0024569:	83 c4 10             	add    esp,0x10
c002456c:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0024570:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0024574:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0024579:	83 f8 01             	cmp    eax,0x1
c002457c:	0f 85 8f 00 00 00    	jne    c0024611 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0024582:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0024589:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002458d:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0024591:	01 ce                	add    esi,ecx
c0024593:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c002459b:	0f 94 c0             	sete   al
c002459e:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00245a6:	0f 94 c2             	sete   dl
c00245a9:	09 c2                	or     edx,eax
c00245ab:	8b 06                	mov    eax,DWORD PTR [esi]
c00245ad:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c00245b2:	0f b6 d2             	movzx  edx,dl
c00245b5:	74 41                	je     c00245f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c00245b7:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c00245ba:	85 d2                	test   edx,edx
c00245bc:	75 15                	jne    c00245d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c00245be:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00245c2:	66 83 f8 0c          	cmp    ax,0xc
c00245c6:	76 05                	jbe    c00245cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c00245c8:	b8 0c 00 00 00       	mov    eax,0xc
c00245cd:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00245d1:	76 37                	jbe    c002460a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00245d3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00245d7:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00245dc:	0f 84 d4 00 00 00    	je     c00246b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00245e2:	83 ec 0c             	sub    esp,0xc
c00245e5:	68 3a 2d 03 c0       	push   0xc0032d3a
c00245ea:	e8 77 bc ff ff       	call   c0020266 <KePanic(char const*)>
c00245ef:	83 c4 10             	add    esp,0x10
c00245f2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00245f6:	eb 12                	jmp    c002460a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00245f8:	01 c1                	add    ecx,eax
c00245fa:	85 d2                	test   edx,edx
c00245fc:	75 0c                	jne    c002460a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00245fe:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0024602:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0024606:	77 02                	ja     c002460a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0024608:	01 d9                	add    ecx,ebx
c002460a:	89 0e                	mov    DWORD PTR [esi],ecx
c002460c:	e9 e2 00 00 00       	jmp    c00246f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0024611:	83 f8 02             	cmp    eax,0x2
c0024614:	75 77                	jne    c002468d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c0024616:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c002461d:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0024621:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c0024625:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c002462d:	74 21                	je     c0024650 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c002462f:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0024637:	74 17                	je     c0024650 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0024639:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c002463d:	b8 0a 00 00 00       	mov    eax,0xa
c0024642:	83 fa 0e             	cmp    edx,0xe
c0024645:	77 03                	ja     c002464a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c0024647:	8d 42 fc             	lea    eax,[edx-0x4]
c002464a:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c002464e:	76 17                	jbe    c0024667 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0024650:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0024655:	74 5f                	je     c00246b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0024657:	83 ec 0c             	sub    esp,0xc
c002465a:	68 56 2d 03 c0       	push   0xc0032d56
c002465f:	e8 02 bc ff ff       	call   c0020266 <KePanic(char const*)>
c0024664:	83 c4 10             	add    esp,0x10
c0024667:	8b 06                	mov    eax,DWORD PTR [esi]
c0024669:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c002466e:	74 13                	je     c0024683 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0024670:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024674:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c002467b:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c002467f:	01 d0                	add    eax,edx
c0024681:	eb 04                	jmp    c0024687 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0024683:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0024687:	01 c3                	add    ebx,eax
c0024689:	89 1e                	mov    DWORD PTR [esi],ebx
c002468b:	eb 66                	jmp    c00246f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c002468d:	52                   	push   edx
c002468e:	52                   	push   edx
c002468f:	50                   	push   eax
c0024690:	68 72 2d 03 c0       	push   0xc0032d72
c0024695:	e8 b3 4b ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c002469a:	83 c4 10             	add    esp,0x10
c002469d:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00246a2:	74 12                	je     c00246b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00246a4:	83 ec 0c             	sub    esp,0xc
c00246a7:	68 7d 2d 03 c0       	push   0xc0032d7d
c00246ac:	e8 b5 bb ff ff       	call   c0020266 <KePanic(char const*)>
c00246b1:	83 c4 10             	add    esp,0x10
c00246b4:	eb 3d                	jmp    c00246f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00246b6:	83 ec 0c             	sub    esp,0xc
c00246b9:	55                   	push   ebp
c00246ba:	e8 11 5e ff ff       	call   c001a4d0 <File::close()>
c00246bf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00246c2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00246c5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00246c8:	59                   	pop    ecx
c00246c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00246cd:	e8 fc 1c ff ff       	call   c00163ce <free>
c00246d2:	5b                   	pop    ebx
c00246d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00246d7:	e8 f2 1c ff ff       	call   c00163ce <free>
c00246dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c00246df:	e8 ea 1c ff ff       	call   c00163ce <free>
c00246e4:	5e                   	pop    esi
c00246e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00246e9:	e8 e0 1c ff ff       	call   c00163ce <free>
c00246ee:	83 c4 10             	add    esp,0x10
c00246f1:	eb 21                	jmp    c0024714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00246f3:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00246f7:	e9 7c fd ff ff       	jmp    c0024478 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c00246fc:	83 ec 0c             	sub    esp,0xc
c00246ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024703:	e8 c6 1c ff ff       	call   c00163ce <free>
c0024708:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c002470c:	83 c4 10             	add    esp,0x10
c002470f:	e9 f1 fc ff ff       	jmp    c0024405 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c0024714:	31 c0                	xor    eax,eax
c0024716:	eb 33                	jmp    c002474b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c0024718:	83 ec 0c             	sub    esp,0xc
c002471b:	55                   	push   ebp
c002471c:	e8 af 5d ff ff       	call   c001a4d0 <File::close()>
c0024721:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024724:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024727:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002472a:	58                   	pop    eax
c002472b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002472f:	e8 9a 1c ff ff       	call   c00163ce <free>
c0024734:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024737:	e8 92 1c ff ff       	call   c00163ce <free>
c002473c:	5a                   	pop    edx
c002473d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024741:	e8 88 1c ff ff       	call   c00163ce <free>
c0024746:	83 c4 10             	add    esp,0x10
c0024749:	b0 01                	mov    al,0x1
c002474b:	81 c4 5c 03 00 00    	add    esp,0x35c
c0024751:	5b                   	pop    ebx
c0024752:	5e                   	pop    esi
c0024753:	5f                   	pop    edi
c0024754:	5d                   	pop    ebp
c0024755:	c3                   	ret    

c0024756 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0024756:	56                   	push   esi
c0024757:	31 d2                	xor    edx,edx
c0024759:	53                   	push   ebx
c002475a:	8b 1d 00 fa 03 c0    	mov    ebx,DWORD PTR ds:0xc003fa00
c0024760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0024764:	39 d3                	cmp    ebx,edx
c0024766:	7e 1b                	jle    c0024783 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0024768:	8b 04 95 20 fc 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc03e0]
c002476f:	39 c8                	cmp    eax,ecx
c0024771:	77 0d                	ja     c0024780 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0024773:	8b 34 95 20 fa 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffc05e0]
c002477a:	01 c6                	add    esi,eax
c002477c:	39 ce                	cmp    esi,ecx
c002477e:	77 05                	ja     c0024785 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0024780:	42                   	inc    edx
c0024781:	eb e1                	jmp    c0024764 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0024783:	31 c0                	xor    eax,eax
c0024785:	5b                   	pop    ebx
c0024786:	5e                   	pop    esi
c0024787:	c3                   	ret    

c0024788 <Thr::getDriverNameFromAddress(unsigned long)>:
c0024788:	53                   	push   ebx
c0024789:	31 c0                	xor    eax,eax
c002478b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002478f:	8b 1d 00 fa 03 c0    	mov    ebx,DWORD PTR ds:0xc003fa00
c0024795:	39 c3                	cmp    ebx,eax
c0024797:	7e 22                	jle    c00247bb <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0024799:	8b 14 85 20 fc 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc03e0]
c00247a0:	39 ca                	cmp    edx,ecx
c00247a2:	77 14                	ja     c00247b8 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00247a4:	03 14 85 20 fa 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffc05e0]
c00247ab:	39 ca                	cmp    edx,ecx
c00247ad:	76 09                	jbe    c00247b8 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00247af:	8b 04 85 20 fe 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc01e0]
c00247b6:	eb 05                	jmp    c00247bd <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00247b8:	40                   	inc    eax
c00247b9:	eb da                	jmp    c0024795 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00247bb:	31 c0                	xor    eax,eax
c00247bd:	5b                   	pop    ebx
c00247be:	c3                   	ret    

c00247bf <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00247bf:	53                   	push   ebx
c00247c0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00247c4:	53                   	push   ebx
c00247c5:	e8 8c ff ff ff       	call   c0024756 <Thr::getDriverBaseFromAddress(unsigned long)>
c00247ca:	5a                   	pop    edx
c00247cb:	31 d2                	xor    edx,edx
c00247cd:	85 c0                	test   eax,eax
c00247cf:	74 04                	je     c00247d5 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00247d1:	89 da                	mov    edx,ebx
c00247d3:	29 c2                	sub    edx,eax
c00247d5:	89 d0                	mov    eax,edx
c00247d7:	5b                   	pop    ebx
c00247d8:	c3                   	ret    

c00247d9 <Thr::loadDLL(char const*, bool)>:
c00247d9:	55                   	push   ebp
c00247da:	57                   	push   edi
c00247db:	56                   	push   esi
c00247dc:	53                   	push   ebx
c00247dd:	81 ec 34 01 00 00    	sub    esp,0x134
c00247e3:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00247ea:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00247f1:	56                   	push   esi
c00247f2:	68 95 2d 03 c0       	push   0xc0032d95
c00247f7:	e8 51 4a ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c00247fc:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0024803:	e8 b6 1b ff ff       	call   c00163be <malloc>
c0024808:	83 c4 0c             	add    esp,0xc
c002480b:	89 c3                	mov    ebx,eax
c002480d:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0024813:	56                   	push   esi
c0024814:	50                   	push   eax
c0024815:	e8 3a 5c ff ff       	call   c001a454 <File::File(char const*, Process*)>
c002481a:	83 c4 10             	add    esp,0x10
c002481d:	85 db                	test   ebx,ebx
c002481f:	75 3c                	jne    c002485d <Thr::loadDLL(char const*, bool)+0x84>
c0024821:	89 f8                	mov    eax,edi
c0024823:	84 c0                	test   al,al
c0024825:	0f 84 f3 01 00 00    	je     c0024a1e <Thr::loadDLL(char const*, bool)+0x245>
c002482b:	55                   	push   ebp
c002482c:	55                   	push   ebp
c002482d:	68 a6 2d 03 c0       	push   0xc0032da6
c0024832:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0024836:	55                   	push   ebp
c0024837:	e8 04 be fd ff       	call   c0000640 <strcpy>
c002483c:	58                   	pop    eax
c002483d:	5a                   	pop    edx
c002483e:	56                   	push   esi
c002483f:	55                   	push   ebp
c0024840:	e8 fb bf fd ff       	call   c0000840 <strcat>
c0024845:	59                   	pop    ecx
c0024846:	58                   	pop    eax
c0024847:	68 bd 2d 03 c0       	push   0xc0032dbd
c002484c:	55                   	push   ebp
c002484d:	e8 ee bf fd ff       	call   c0000840 <strcat>
c0024852:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024855:	e8 0c ba ff ff       	call   c0020266 <KePanic(char const*)>
c002485a:	83 c4 10             	add    esp,0x10
c002485d:	51                   	push   ecx
c002485e:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0024862:	50                   	push   eax
c0024863:	8d 44 24 20          	lea    eax,[esp+0x20]
c0024867:	50                   	push   eax
c0024868:	53                   	push   ebx
c0024869:	e8 06 5f ff ff       	call   c001a774 <File::stat(unsigned long long*, bool*)>
c002486e:	83 c4 10             	add    esp,0x10
c0024871:	89 c5                	mov    ebp,eax
c0024873:	85 db                	test   ebx,ebx
c0024875:	74 0c                	je     c0024883 <Thr::loadDLL(char const*, bool)+0xaa>
c0024877:	83 ec 0c             	sub    esp,0xc
c002487a:	8b 03                	mov    eax,DWORD PTR [ebx]
c002487c:	53                   	push   ebx
c002487d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024880:	83 c4 10             	add    esp,0x10
c0024883:	83 ec 0c             	sub    esp,0xc
c0024886:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c002488b:	50                   	push   eax
c002488c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024890:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024894:	55                   	push   ebp
c0024895:	68 bf 2d 03 c0       	push   0xc0032dbf
c002489a:	e8 ae 49 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c002489f:	83 c4 20             	add    esp,0x20
c00248a2:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00248a7:	75 0a                	jne    c00248b3 <Thr::loadDLL(char const*, bool)+0xda>
c00248a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00248ad:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00248b1:	75 3c                	jne    c00248ef <Thr::loadDLL(char const*, bool)+0x116>
c00248b3:	89 f8                	mov    eax,edi
c00248b5:	84 c0                	test   al,al
c00248b7:	0f 84 49 01 00 00    	je     c0024a06 <Thr::loadDLL(char const*, bool)+0x22d>
c00248bd:	51                   	push   ecx
c00248be:	51                   	push   ecx
c00248bf:	68 e0 2d 03 c0       	push   0xc0032de0
c00248c4:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00248c8:	53                   	push   ebx
c00248c9:	e8 72 bd fd ff       	call   c0000640 <strcpy>
c00248ce:	5d                   	pop    ebp
c00248cf:	58                   	pop    eax
c00248d0:	56                   	push   esi
c00248d1:	53                   	push   ebx
c00248d2:	e8 69 bf fd ff       	call   c0000840 <strcat>
c00248d7:	58                   	pop    eax
c00248d8:	5a                   	pop    edx
c00248d9:	68 bd 2d 03 c0       	push   0xc0032dbd
c00248de:	53                   	push   ebx
c00248df:	e8 5c bf fd ff       	call   c0000840 <strcat>
c00248e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00248e7:	e8 7a b9 ff ff       	call   c0020266 <KePanic(char const*)>
c00248ec:	83 c4 10             	add    esp,0x10
c00248ef:	52                   	push   edx
c00248f0:	6a 03                	push   0x3
c00248f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00248f6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00248fa:	05 ff 0f 00 00       	add    eax,0xfff
c00248ff:	83 d2 00             	adc    edx,0x0
c0024902:	0f ac d0 0c          	shrd   eax,edx,0xc
c0024906:	50                   	push   eax
c0024907:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002490d:	e8 1a 3e ff ff       	call   c001872c <VAS::allocatePages(int, int)>
c0024912:	59                   	pop    ecx
c0024913:	89 c3                	mov    ebx,eax
c0024915:	5d                   	pop    ebp
c0024916:	50                   	push   eax
c0024917:	68 02 12 03 c0       	push   0xc0031202
c002491c:	e8 2c 49 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0024921:	89 34 24             	mov    DWORD PTR [esp],esi
c0024924:	e8 47 bc fd ff       	call   c0000570 <strlen>
c0024929:	8b 2d 00 fa 03 c0    	mov    ebp,DWORD PTR ds:0xc003fa00
c002492f:	40                   	inc    eax
c0024930:	89 04 24             	mov    DWORD PTR [esp],eax
c0024933:	e8 86 1a ff ff       	call   c00163be <malloc>
c0024938:	89 04 ad 20 fe 03 c0 	mov    DWORD PTR [ebp*4-0x3ffc01e0],eax
c002493f:	58                   	pop    eax
c0024940:	a1 00 fa 03 c0       	mov    eax,ds:0xc003fa00
c0024945:	5a                   	pop    edx
c0024946:	56                   	push   esi
c0024947:	ff 34 85 20 fe 03 c0 	push   DWORD PTR [eax*4-0x3ffc01e0]
c002494e:	e8 ed bc fd ff       	call   c0000640 <strcpy>
c0024953:	a1 00 fa 03 c0       	mov    eax,ds:0xc003fa00
c0024958:	8d 50 01             	lea    edx,[eax+0x1]
c002495b:	89 1c 85 20 fc 03 c0 	mov    DWORD PTR [eax*4-0x3ffc03e0],ebx
c0024962:	89 15 00 fa 03 c0    	mov    DWORD PTR ds:0xc003fa00,edx
c0024968:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002496c:	83 c4 0c             	add    esp,0xc
c002496f:	89 14 85 20 fa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc05e0],edx
c0024976:	6a 01                	push   0x1
c0024978:	53                   	push   ebx
c0024979:	56                   	push   esi
c002497a:	e8 9e f6 ff ff       	call   c002401d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c002497f:	83 c4 10             	add    esp,0x10
c0024982:	0f b6 c0             	movzx  eax,al
c0024985:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024989:	85 c0                	test   eax,eax
c002498b:	0f 85 89 00 00 00    	jne    c0024a1a <Thr::loadDLL(char const*, bool)+0x241>
c0024991:	89 f8                	mov    eax,edi
c0024993:	84 c0                	test   al,al
c0024995:	74 73                	je     c0024a0a <Thr::loadDLL(char const*, bool)+0x231>
c0024997:	83 ec 0c             	sub    esp,0xc
c002499a:	68 f9 2d 03 c0       	push   0xc0032df9
c002499f:	e8 c2 b8 ff ff       	call   c0020266 <KePanic(char const*)>
c00249a4:	83 c4 10             	add    esp,0x10
c00249a7:	eb 61                	jmp    c0024a0a <Thr::loadDLL(char const*, bool)+0x231>
c00249a9:	50                   	push   eax
c00249aa:	50                   	push   eax
c00249ab:	89 e8                	mov    eax,ebp
c00249ad:	c1 e0 0c             	shl    eax,0xc
c00249b0:	01 d8                	add    eax,ebx
c00249b2:	50                   	push   eax
c00249b3:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c00249b9:	e8 56 38 ff ff       	call   c0018214 <VAS::getPageTableEntry(unsigned long)>
c00249be:	83 c4 10             	add    esp,0x10
c00249c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00249c3:	a8 60                	test   al,0x60
c00249c5:	75 11                	jne    c00249d8 <Thr::loadDLL(char const*, bool)+0x1ff>
c00249c7:	83 ec 0c             	sub    esp,0xc
c00249ca:	25 00 f0 ff ff       	and    eax,0xfffff000
c00249cf:	50                   	push   eax
c00249d0:	e8 89 1c ff ff       	call   c001665e <Phys::freePage(unsigned long)>
c00249d5:	83 c4 10             	add    esp,0x10
c00249d8:	45                   	inc    ebp
c00249d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00249dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00249e1:	05 ff 0f 00 00       	add    eax,0xfff
c00249e6:	bf 00 00 00 00       	mov    edi,0x0
c00249eb:	83 d2 00             	adc    edx,0x0
c00249ee:	0f ac d0 0c          	shrd   eax,edx,0xc
c00249f2:	c1 ea 0c             	shr    edx,0xc
c00249f5:	39 c5                	cmp    ebp,eax
c00249f7:	89 d1                	mov    ecx,edx
c00249f9:	89 f8                	mov    eax,edi
c00249fb:	19 c8                	sbb    eax,ecx
c00249fd:	72 aa                	jb     c00249a9 <Thr::loadDLL(char const*, bool)+0x1d0>
c00249ff:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0024a04:	75 18                	jne    c0024a1e <Thr::loadDLL(char const*, bool)+0x245>
c0024a06:	31 db                	xor    ebx,ebx
c0024a08:	eb 14                	jmp    c0024a1e <Thr::loadDLL(char const*, bool)+0x245>
c0024a0a:	83 ec 0c             	sub    esp,0xc
c0024a0d:	68 18 2e 03 c0       	push   0xc0032e18
c0024a12:	e8 4f b8 ff ff       	call   c0020266 <KePanic(char const*)>
c0024a17:	83 c4 10             	add    esp,0x10
c0024a1a:	31 ed                	xor    ebp,ebp
c0024a1c:	eb bb                	jmp    c00249d9 <Thr::loadDLL(char const*, bool)+0x200>
c0024a1e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0024a24:	89 d8                	mov    eax,ebx
c0024a26:	5b                   	pop    ebx
c0024a27:	5e                   	pop    esi
c0024a28:	5f                   	pop    edi
c0024a29:	5d                   	pop    ebp
c0024a2a:	c3                   	ret    

c0024a2b <Thr::executeDLL(unsigned long, void*)>:
c0024a2b:	56                   	push   esi
c0024a2c:	53                   	push   ebx
c0024a2d:	52                   	push   edx
c0024a2e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024a32:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0024a36:	85 db                	test   ebx,ebx
c0024a38:	75 10                	jne    c0024a4a <Thr::executeDLL(unsigned long, void*)+0x1f>
c0024a3a:	83 ec 0c             	sub    esp,0xc
c0024a3d:	68 34 2e 03 c0       	push   0xc0032e34
c0024a42:	e8 1f b8 ff ff       	call   c0020266 <KePanic(char const*)>
c0024a47:	83 c4 10             	add    esp,0x10
c0024a4a:	50                   	push   eax
c0024a4b:	50                   	push   eax
c0024a4c:	53                   	push   ebx
c0024a4d:	68 5e 2e 03 c0       	push   0xc0032e5e
c0024a52:	e8 f6 47 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0024a57:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0024a5b:	89 d8                	mov    eax,ebx
c0024a5d:	83 c4 14             	add    esp,0x14
c0024a60:	5b                   	pop    ebx
c0024a61:	5e                   	pop    esi
c0024a62:	ff e0                	jmp    eax

c0024a64 <userModeEntryPoint(void*)>:
c0024a64:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0024a69:	83 e8 01             	sub    eax,0x1
c0024a6c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0024a71:	75 01                	jne    c0024a74 <userModeEntryPoint(void*)+0x10>
c0024a73:	fb                   	sti    
c0024a74:	fb                   	sti    
c0024a75:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024a7a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0024a7d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0024a83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024a87:	e9 b3 b7 fd ff       	jmp    c000023f <goToUsermode>

c0024a8c <changeTSS>:
c0024a8c:	83 ec 14             	sub    esp,0x14
c0024a8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024a94:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0024a97:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0024a9c:	c1 e2 15             	shl    edx,0x15
c0024a9f:	29 d0                	sub    eax,edx
c0024aa1:	50                   	push   eax
c0024aa2:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0024aa7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024aad:	05 7c 11 00 00       	add    eax,0x117c
c0024ab2:	50                   	push   eax
c0024ab3:	e8 a4 2d ff ff       	call   c001785c <TSS::setESP(unsigned long)>
c0024ab8:	83 c4 1c             	add    esp,0x1c
c0024abb:	c3                   	ret    

c0024abc <switchToThread(ThreadControlBlock*)>:
c0024abc:	57                   	push   edi
c0024abd:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0024ac3:	56                   	push   esi
c0024ac4:	85 c9                	test   ecx,ecx
c0024ac6:	53                   	push   ebx
c0024ac7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024acb:	0f 85 8b 00 00 00    	jne    c0024b5c <switchToThread(ThreadControlBlock*)+0xa0>
c0024ad1:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0024ad5:	81 fa ff 00 00 00    	cmp    edx,0xff
c0024adb:	74 7b                	je     c0024b58 <switchToThread(ThreadControlBlock*)+0x9c>
c0024add:	b8 00 04 00 00       	mov    eax,0x400
c0024ae2:	29 d0                	sub    eax,edx
c0024ae4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0024ae7:	d1 f8                	sar    eax,1
c0024ae9:	01 d0                	add    eax,edx
c0024aeb:	90                   	nop
c0024aec:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0024aef:	e8 76 25 00 00       	call   c002706a <HalQueryPerformanceCounter()>
c0024af4:	a3 10 02 04 c0       	mov    ds:0xc0040210,eax
c0024af9:	89 15 14 02 04 c0    	mov    DWORD PTR ds:0xc0040214,edx
c0024aff:	89 c6                	mov    esi,eax
c0024b01:	89 d7                	mov    edi,edx
c0024b03:	2b 35 00 02 04 c0    	sub    esi,DWORD PTR ds:0xc0040200
c0024b09:	a3 00 02 04 c0       	mov    ds:0xc0040200,eax
c0024b0e:	1b 3d 04 02 04 c0    	sbb    edi,DWORD PTR ds:0xc0040204
c0024b14:	89 35 08 02 04 c0    	mov    DWORD PTR ds:0xc0040208,esi
c0024b1a:	89 3d 0c 02 04 c0    	mov    DWORD PTR ds:0xc004020c,edi
c0024b20:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0024b26:	89 15 04 02 04 c0    	mov    DWORD PTR ds:0xc0040204,edx
c0024b2c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0024b2f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0024b32:	01 c6                	add    esi,eax
c0024b34:	11 d7                	adc    edi,edx
c0024b36:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0024b39:	83 ec 0c             	sub    esp,0xc
c0024b3c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0024b3f:	53                   	push   ebx
c0024b40:	e8 32 b7 fd ff       	call   c0000277 <switchToThreadASM>
c0024b45:	0f 20 c0             	mov    eax,cr0
c0024b48:	83 c8 08             	or     eax,0x8
c0024b4b:	0f 22 c0             	mov    cr0,eax
c0024b4e:	83 c4 10             	add    esp,0x10
c0024b51:	5b                   	pop    ebx
c0024b52:	5e                   	pop    esi
c0024b53:	5f                   	pop    edi
c0024b54:	c3                   	ret    
c0024b55:	8d 76 00             	lea    esi,[esi+0x0]
c0024b58:	31 c0                	xor    eax,eax
c0024b5a:	eb 90                	jmp    c0024aec <switchToThread(ThreadControlBlock*)+0x30>
c0024b5c:	5b                   	pop    ebx
c0024b5d:	c7 05 c8 01 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x1
c0024b67:	5e                   	pop    esi
c0024b68:	5f                   	pop    edi
c0024b69:	c3                   	ret    
c0024b6a:	66 90                	xchg   ax,ax

c0024b6c <Process::addArgs(char**)>:
c0024b6c:	57                   	push   edi
c0024b6d:	56                   	push   esi
c0024b6e:	53                   	push   ebx
c0024b6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024b73:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0024b77:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0024b81:	85 ff                	test   edi,edi
c0024b83:	74 4f                	je     c0024bd4 <Process::addArgs(char**)+0x68>
c0024b85:	8b 07                	mov    eax,DWORD PTR [edi]
c0024b87:	85 c0                	test   eax,eax
c0024b89:	74 49                	je     c0024bd4 <Process::addArgs(char**)+0x68>
c0024b8b:	31 db                	xor    ebx,ebx
c0024b8d:	8d 76 00             	lea    esi,[esi+0x0]
c0024b90:	83 ec 0c             	sub    esp,0xc
c0024b93:	50                   	push   eax
c0024b94:	e8 d7 b9 fd ff       	call   c0000570 <strlen>
c0024b99:	83 c0 01             	add    eax,0x1
c0024b9c:	89 04 24             	mov    DWORD PTR [esp],eax
c0024b9f:	e8 1a 18 ff ff       	call   c00163be <malloc>
c0024ba4:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0024bab:	5a                   	pop    edx
c0024bac:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0024baf:	59                   	pop    ecx
c0024bb0:	83 c3 01             	add    ebx,0x1
c0024bb3:	52                   	push   edx
c0024bb4:	50                   	push   eax
c0024bb5:	e8 86 ba fd ff       	call   c0000640 <strcpy>
c0024bba:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0024bc0:	83 c4 10             	add    esp,0x10
c0024bc3:	83 c1 01             	add    ecx,0x1
c0024bc6:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0024bcc:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0024bcf:	85 c0                	test   eax,eax
c0024bd1:	75 bd                	jne    c0024b90 <Process::addArgs(char**)+0x24>
c0024bd3:	90                   	nop
c0024bd4:	5b                   	pop    ebx
c0024bd5:	5e                   	pop    esi
c0024bd6:	5f                   	pop    edi
c0024bd7:	c3                   	ret    

c0024bd8 <Process::Process(char const*, Process*, char**)>:
c0024bd8:	56                   	push   esi
c0024bd9:	53                   	push   ebx
c0024bda:	83 ec 14             	sub    esp,0x14
c0024bdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024be1:	05 0c 02 00 00       	add    eax,0x20c
c0024be6:	bb 07 00 00 00       	mov    ebx,0x7
c0024beb:	89 c6                	mov    esi,eax
c0024bed:	8d 76 00             	lea    esi,[esi+0x0]
c0024bf0:	85 db                	test   ebx,ebx
c0024bf2:	78 14                	js     c0024c08 <Process::Process(char const*, Process*, char**)+0x30>
c0024bf4:	83 ec 0c             	sub    esp,0xc
c0024bf7:	56                   	push   esi
c0024bf8:	e8 7b a3 00 00       	call   c002ef78 <ThreadControlBlock::ThreadControlBlock()>
c0024bfd:	83 c4 10             	add    esp,0x10
c0024c00:	83 c6 5f             	add    esi,0x5f
c0024c03:	83 eb 01             	sub    ebx,0x1
c0024c06:	eb e8                	jmp    c0024bf0 <Process::Process(char const*, Process*, char**)+0x18>
c0024c08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c0c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0024c13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c17:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0024c1e:	83 ec 0c             	sub    esp,0xc
c0024c21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024c25:	e8 16 b4 ff ff       	call   c0020040 <KeNewProcessEnv(Process*)>
c0024c2a:	83 c4 10             	add    esp,0x10
c0024c2d:	89 c2                	mov    edx,eax
c0024c2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c33:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0024c39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c3d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0024c46:	a1 80 44 03 c0       	mov    eax,ds:0xc0034480
c0024c4b:	8d 50 01             	lea    edx,[eax+0x1]
c0024c4e:	89 15 80 44 03 c0    	mov    DWORD PTR ds:0xc0034480,edx
c0024c54:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0024c58:	89 02                	mov    DWORD PTR [edx],eax
c0024c5a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0024c62:	83 ec 0c             	sub    esp,0xc
c0024c65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024c69:	e8 50 17 ff ff       	call   c00163be <malloc>
c0024c6e:	83 c4 10             	add    esp,0x10
c0024c71:	89 c3                	mov    ebx,eax
c0024c73:	83 ec 08             	sub    esp,0x8
c0024c76:	6a 00                	push   0x0
c0024c78:	53                   	push   ebx
c0024c79:	e8 f2 3c ff ff       	call   c0018970 <VAS::VAS(bool)>
c0024c7e:	83 c4 10             	add    esp,0x10
c0024c81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c85:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0024c8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c8f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0024c99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c9d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0024ca1:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0024ca7:	e8 eb bd ff ff       	call   c0020a97 <KeInitSignals()>
c0024cac:	89 c2                	mov    edx,eax
c0024cae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024cb2:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0024cb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024cbc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024cc2:	85 c0                	test   eax,eax
c0024cc4:	74 42                	je     c0024d08 <Process::Process(char const*, Process*, char**)+0x130>
c0024cc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024cca:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024cd0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0024cd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024cda:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0024ce0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024ce4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024cea:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0024cf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024cf4:	05 0c 01 00 00       	add    eax,0x10c
c0024cf9:	83 ec 08             	sub    esp,0x8
c0024cfc:	52                   	push   edx
c0024cfd:	50                   	push   eax
c0024cfe:	e8 3d b9 fd ff       	call   c0000640 <strcpy>
c0024d03:	83 c4 10             	add    esp,0x10
c0024d06:	eb 64                	jmp    c0024d6c <Process::Process(char const*, Process*, char**)+0x194>
c0024d08:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0024d10:	83 ec 0c             	sub    esp,0xc
c0024d13:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024d17:	e8 a2 16 ff ff       	call   c00163be <malloc>
c0024d1c:	83 c4 10             	add    esp,0x10
c0024d1f:	89 c3                	mov    ebx,eax
c0024d21:	83 ec 08             	sub    esp,0x8
c0024d24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024d28:	53                   	push   ebx
c0024d29:	e8 40 28 ff ff       	call   c001756e <VgaText::VgaText(char const*)>
c0024d2e:	83 c4 10             	add    esp,0x10
c0024d31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d35:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0024d3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d3f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0024d45:	83 ec 0c             	sub    esp,0xc
c0024d48:	50                   	push   eax
c0024d49:	e8 be 20 ff ff       	call   c0016e0c <addToTerminalCycle(VgaText*)>
c0024d4e:	83 c4 10             	add    esp,0x10
c0024d51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d55:	05 0c 01 00 00       	add    eax,0x10c
c0024d5a:	83 ec 08             	sub    esp,0x8
c0024d5d:	68 7d 2e 03 c0       	push   0xc0032e7d
c0024d62:	50                   	push   eax
c0024d63:	e8 d8 b8 fd ff       	call   c0000640 <strcpy>
c0024d68:	83 c4 10             	add    esp,0x10
c0024d6b:	90                   	nop
c0024d6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d70:	83 c0 0c             	add    eax,0xc
c0024d73:	83 ec 08             	sub    esp,0x8
c0024d76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024d7a:	50                   	push   eax
c0024d7b:	e8 c0 b8 fd ff       	call   c0000640 <strcpy>
c0024d80:	83 c4 10             	add    esp,0x10
c0024d83:	83 ec 08             	sub    esp,0x8
c0024d86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0024d8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024d8e:	e8 d9 fd ff ff       	call   c0024b6c <Process::addArgs(char**)>
c0024d93:	83 c4 10             	add    esp,0x10
c0024d96:	83 ec 08             	sub    esp,0x8
c0024d99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024d9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024da1:	e8 45 ed ff ff       	call   c0023aeb <Thr::loadProgramIntoMemory(Process*, char const*)>
c0024da6:	83 c4 10             	add    esp,0x10
c0024da9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024dad:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0024db1:	83 f0 01             	xor    eax,0x1
c0024db4:	88 c2                	mov    dl,al
c0024db6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024dba:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0024dc0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0024dc5:	83 ec 04             	sub    esp,0x4
c0024dc8:	50                   	push   eax
c0024dc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024dcd:	68 d4 2e 03 c0       	push   0xc0032ed4
c0024dd2:	e8 76 44 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0024dd7:	83 c4 10             	add    esp,0x10
c0024dda:	90                   	nop
c0024ddb:	83 c4 14             	add    esp,0x14
c0024dde:	5b                   	pop    ebx
c0024ddf:	5e                   	pop    esi
c0024de0:	c3                   	ret    
c0024de1:	90                   	nop
c0024de2:	66 90                	xchg   ax,ax

c0024de4 <Process::Process(bool, char const*, Process*, char**)>:
c0024de4:	56                   	push   esi
c0024de5:	53                   	push   ebx
c0024de6:	83 ec 24             	sub    esp,0x24
c0024de9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0024ded:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0024df1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024df5:	05 0c 02 00 00       	add    eax,0x20c
c0024dfa:	bb 07 00 00 00       	mov    ebx,0x7
c0024dff:	89 c6                	mov    esi,eax
c0024e01:	8d 76 00             	lea    esi,[esi+0x0]
c0024e04:	85 db                	test   ebx,ebx
c0024e06:	78 14                	js     c0024e1c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0024e08:	83 ec 0c             	sub    esp,0xc
c0024e0b:	56                   	push   esi
c0024e0c:	e8 67 a1 00 00       	call   c002ef78 <ThreadControlBlock::ThreadControlBlock()>
c0024e11:	83 c4 10             	add    esp,0x10
c0024e14:	83 c6 5f             	add    esi,0x5f
c0024e17:	83 eb 01             	sub    ebx,0x1
c0024e1a:	eb e8                	jmp    c0024e04 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0024e1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e20:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0024e27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e2b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0024e32:	83 ec 0c             	sub    esp,0xc
c0024e35:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024e39:	e8 02 b2 ff ff       	call   c0020040 <KeNewProcessEnv(Process*)>
c0024e3e:	83 c4 10             	add    esp,0x10
c0024e41:	89 c2                	mov    edx,eax
c0024e43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e47:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0024e4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e51:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0024e5a:	a1 80 44 03 c0       	mov    eax,ds:0xc0034480
c0024e5f:	8d 50 01             	lea    edx,[eax+0x1]
c0024e62:	89 15 80 44 03 c0    	mov    DWORD PTR ds:0xc0034480,edx
c0024e68:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024e6c:	89 02                	mov    DWORD PTR [edx],eax
c0024e6e:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0024e76:	83 ec 0c             	sub    esp,0xc
c0024e79:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0024e7d:	e8 3c 15 ff ff       	call   c00163be <malloc>
c0024e82:	83 c4 10             	add    esp,0x10
c0024e85:	89 c3                	mov    ebx,eax
c0024e87:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0024e8c:	83 ec 08             	sub    esp,0x8
c0024e8f:	50                   	push   eax
c0024e90:	53                   	push   ebx
c0024e91:	e8 da 3a ff ff       	call   c0018970 <VAS::VAS(bool)>
c0024e96:	83 c4 10             	add    esp,0x10
c0024e99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e9d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0024ea3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024ea7:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0024eb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024eb5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0024eb9:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0024ebf:	e8 d3 bb ff ff       	call   c0020a97 <KeInitSignals()>
c0024ec4:	89 c2                	mov    edx,eax
c0024ec6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024eca:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0024ed0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024ed4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024eda:	85 c0                	test   eax,eax
c0024edc:	74 42                	je     c0024f20 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0024ede:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024ee2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024ee8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0024eee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024ef2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0024ef8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024efc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024f02:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0024f08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f0c:	05 0c 01 00 00       	add    eax,0x10c
c0024f11:	83 ec 08             	sub    esp,0x8
c0024f14:	52                   	push   edx
c0024f15:	50                   	push   eax
c0024f16:	e8 25 b7 fd ff       	call   c0000640 <strcpy>
c0024f1b:	83 c4 10             	add    esp,0x10
c0024f1e:	eb 64                	jmp    c0024f84 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0024f20:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0024f28:	83 ec 0c             	sub    esp,0xc
c0024f2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0024f2f:	e8 8a 14 ff ff       	call   c00163be <malloc>
c0024f34:	83 c4 10             	add    esp,0x10
c0024f37:	89 c3                	mov    ebx,eax
c0024f39:	83 ec 08             	sub    esp,0x8
c0024f3c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0024f40:	53                   	push   ebx
c0024f41:	e8 28 26 ff ff       	call   c001756e <VgaText::VgaText(char const*)>
c0024f46:	83 c4 10             	add    esp,0x10
c0024f49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f4d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0024f53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f57:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0024f5d:	83 ec 0c             	sub    esp,0xc
c0024f60:	50                   	push   eax
c0024f61:	e8 a6 1e ff ff       	call   c0016e0c <addToTerminalCycle(VgaText*)>
c0024f66:	83 c4 10             	add    esp,0x10
c0024f69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f6d:	05 0c 01 00 00       	add    eax,0x10c
c0024f72:	83 ec 08             	sub    esp,0x8
c0024f75:	68 7d 2e 03 c0       	push   0xc0032e7d
c0024f7a:	50                   	push   eax
c0024f7b:	e8 c0 b6 fd ff       	call   c0000640 <strcpy>
c0024f80:	83 c4 10             	add    esp,0x10
c0024f83:	90                   	nop
c0024f84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f88:	83 c0 0c             	add    eax,0xc
c0024f8b:	83 ec 08             	sub    esp,0x8
c0024f8e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0024f92:	50                   	push   eax
c0024f93:	e8 a8 b6 fd ff       	call   c0000640 <strcpy>
c0024f98:	83 c4 10             	add    esp,0x10
c0024f9b:	83 ec 08             	sub    esp,0x8
c0024f9e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0024fa2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024fa6:	e8 c1 fb ff ff       	call   c0024b6c <Process::addArgs(char**)>
c0024fab:	83 c4 10             	add    esp,0x10
c0024fae:	90                   	nop
c0024faf:	83 c4 24             	add    esp,0x24
c0024fb2:	5b                   	pop    ebx
c0024fb3:	5e                   	pop    esi
c0024fb4:	c3                   	ret    
c0024fb5:	8d 76 00             	lea    esi,[esi+0x0]

c0024fb8 <taskStartupFunction>:
c0024fb8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024fbd:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0024fc0:	c3                   	ret    
c0024fc1:	8d 76 00             	lea    esi,[esi+0x0]

c0024fc4 <KeDisablePreemption()>:
c0024fc4:	a1 ac 01 04 c0       	mov    eax,ds:0xc00401ac
c0024fc9:	85 c0                	test   eax,eax
c0024fcb:	75 13                	jne    c0024fe0 <KeDisablePreemption()+0x1c>
c0024fcd:	8a 15 c0 a9 03 c0    	mov    dl,BYTE PTR ds:0xc003a9c0
c0024fd3:	c6 05 c0 a9 03 c0 00 	mov    BYTE PTR ds:0xc003a9c0,0x0
c0024fda:	88 15 a8 01 04 c0    	mov    BYTE PTR ds:0xc00401a8,dl
c0024fe0:	83 c0 01             	add    eax,0x1
c0024fe3:	a3 ac 01 04 c0       	mov    ds:0xc00401ac,eax
c0024fe8:	c3                   	ret    
c0024fe9:	8d 76 00             	lea    esi,[esi+0x0]

c0024fec <KeRestorePreemption()>:
c0024fec:	a1 ac 01 04 c0       	mov    eax,ds:0xc00401ac
c0024ff1:	83 e8 01             	sub    eax,0x1
c0024ff4:	a3 ac 01 04 c0       	mov    ds:0xc00401ac,eax
c0024ff9:	75 0d                	jne    c0025008 <KeRestorePreemption()+0x1c>
c0024ffb:	a0 a8 01 04 c0       	mov    al,ds:0xc00401a8
c0025000:	a2 c0 a9 03 c0       	mov    ds:0xc003a9c0,al
c0025005:	8d 76 00             	lea    esi,[esi+0x0]
c0025008:	c3                   	ret    
c0025009:	90                   	nop
c002500a:	66 90                	xchg   ax,ax

c002500c <Process::createThread(void (*)(void*), void*, int)>:
c002500c:	57                   	push   edi
c002500d:	31 c9                	xor    ecx,ecx
c002500f:	56                   	push   esi
c0025010:	53                   	push   ebx
c0025011:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025015:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c002501c:	89 f2                	mov    edx,esi
c002501e:	66 90                	xchg   ax,ax
c0025020:	0f b7 c2             	movzx  eax,dx
c0025023:	80 e2 01             	and    dl,0x1
c0025026:	74 14                	je     c002503c <Process::createThread(void (*)(void*), void*, int)+0x30>
c0025028:	d1 f8                	sar    eax,1
c002502a:	83 c1 01             	add    ecx,0x1
c002502d:	89 c2                	mov    edx,eax
c002502f:	83 f9 10             	cmp    ecx,0x10
c0025032:	75 ec                	jne    c0025020 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0025034:	31 db                	xor    ebx,ebx
c0025036:	89 d8                	mov    eax,ebx
c0025038:	5b                   	pop    ebx
c0025039:	5e                   	pop    esi
c002503a:	5f                   	pop    edi
c002503b:	c3                   	ret    
c002503c:	b8 01 00 00 00       	mov    eax,0x1
c0025041:	d3 e0                	shl    eax,cl
c0025043:	09 c6                	or     esi,eax
c0025045:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0025048:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c002504f:	01 c0                	add    eax,eax
c0025051:	01 c8                	add    eax,ecx
c0025053:	8d 04 80             	lea    eax,[eax+eax*4]
c0025056:	01 d8                	add    eax,ebx
c0025058:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c002505f:	75 0b                	jne    c002506c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0025061:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c002506b:	90                   	nop
c002506c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0025072:	83 ec 0c             	sub    esp,0xc
c0025075:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0025078:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c002507b:	01 c0                	add    eax,eax
c002507d:	01 c8                	add    eax,ecx
c002507f:	8d 3c 80             	lea    edi,[eax+eax*4]
c0025082:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0025085:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c002508b:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0025091:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025095:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c002509b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00250a1:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00250a7:	89 ca                	mov    edx,ecx
c00250a9:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00250b0:	f7 da                	neg    edx
c00250b2:	c1 e2 15             	shl    edx,0x15
c00250b5:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00250bb:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00250c1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00250c5:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00250cf:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00250d5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00250d9:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00250df:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00250e9:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00250f3:	68 00 01 00 00       	push   0x100
c00250f8:	e8 c1 12 ff ff       	call   c00163be <malloc>
c00250fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0025100:	58                   	pop    eax
c0025101:	5a                   	pop    edx
c0025102:	53                   	push   ebx
c0025103:	68 ec 01 04 c0       	push   0xc00401ec
c0025108:	e8 03 9c 00 00       	call   c002ed10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002510d:	83 c4 10             	add    esp,0x10
c0025110:	89 d8                	mov    eax,ebx
c0025112:	5b                   	pop    ebx
c0025113:	5e                   	pop    esi
c0025114:	5f                   	pop    edi
c0025115:	c3                   	ret    
c0025116:	66 90                	xchg   ax,ax

c0025118 <Process::createUserThread()>:
c0025118:	83 ec 0c             	sub    esp,0xc
c002511b:	68 80 00 00 00       	push   0x80
c0025120:	6a 00                	push   0x0
c0025122:	68 64 4a 02 c0       	push   0xc0024a64
c0025127:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002512b:	50                   	push   eax
c002512c:	e8 db fe ff ff       	call   c002500c <Process::createThread(void (*)(void*), void*, int)>
c0025131:	83 c4 1c             	add    esp,0x1c
c0025134:	c3                   	ret    
c0025135:	8d 76 00             	lea    esi,[esi+0x0]

c0025138 <setupMultitasking(void (*)())>:
c0025138:	56                   	push   esi
c0025139:	53                   	push   ebx
c002513a:	83 ec 04             	sub    esp,0x4
c002513d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0025141:	eb 11                	jmp    c0025154 <setupMultitasking(void (*)())+0x1c>
c0025143:	90                   	nop
c0025144:	83 ec 0c             	sub    esp,0xc
c0025147:	68 ec 01 04 c0       	push   0xc00401ec
c002514c:	e8 03 9b 00 00       	call   c002ec54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025151:	83 c4 10             	add    esp,0x10
c0025154:	83 ec 0c             	sub    esp,0xc
c0025157:	68 ec 01 04 c0       	push   0xc00401ec
c002515c:	e8 cf 9a 00 00       	call   c002ec30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0025161:	83 c4 10             	add    esp,0x10
c0025164:	84 c0                	test   al,al
c0025166:	74 dc                	je     c0025144 <setupMultitasking(void (*)())+0xc>
c0025168:	83 ec 0c             	sub    esp,0xc
c002516b:	68 24 07 00 00       	push   0x724
c0025170:	e8 49 12 ff ff       	call   c00163be <malloc>
c0025175:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002517c:	89 c3                	mov    ebx,eax
c002517e:	6a 00                	push   0x0
c0025180:	68 81 2e 03 c0       	push   0xc0032e81
c0025185:	6a 01                	push   0x1
c0025187:	50                   	push   eax
c0025188:	e8 57 fc ff ff       	call   c0024de4 <Process::Process(bool, char const*, Process*, char**)>
c002518d:	83 c4 14             	add    esp,0x14
c0025190:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0025196:	89 1d f8 01 04 c0    	mov    DWORD PTR ds:0xc00401f8,ebx
c002519c:	50                   	push   eax
c002519d:	e8 bf 1e ff ff       	call   c0017061 <setActiveTerminal(VgaText*)>
c00251a2:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c00251a9:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00251b3:	83 c8 01             	or     eax,0x1
c00251b6:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c00251bd:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00251c3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00251c6:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00251d0:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00251d6:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00251dc:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00251e6:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00251f0:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00251fa:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0025200:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c002520a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0025210:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c002521a:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0025221:	e8 98 11 ff ff       	call   c00163be <malloc>
c0025226:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c002522c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0025232:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0025238:	5a                   	pop    edx
c0025239:	59                   	pop    ecx
c002523a:	68 7d 2e 03 c0       	push   0xc0032e7d
c002523f:	50                   	push   eax
c0025240:	e8 fb b3 fd ff       	call   c0000640 <strcpy>
c0025245:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c002524c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0025250:	83 c4 14             	add    esp,0x14
c0025253:	5b                   	pop    ebx
c0025254:	5e                   	pop    esi
c0025255:	e9 0f b0 fd ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c002525a:	66 90                	xchg   ax,ax

c002525c <schedule()>:
c002525c:	8b 15 cc 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401cc
c0025262:	85 d2                	test   edx,edx
c0025264:	74 0e                	je     c0025274 <schedule()+0x18>
c0025266:	c7 05 c8 01 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x1
c0025270:	c3                   	ret    
c0025271:	8d 76 00             	lea    esi,[esi+0x0]
c0025274:	53                   	push   ebx
c0025275:	83 ec 14             	sub    esp,0x14
c0025278:	68 ec 01 04 c0       	push   0xc00401ec
c002527d:	e8 ae 99 00 00       	call   c002ec30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0025282:	83 c4 10             	add    esp,0x10
c0025285:	84 c0                	test   al,al
c0025287:	75 3f                	jne    c00252c8 <schedule()+0x6c>
c0025289:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002528e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0025291:	83 fa 01             	cmp    edx,0x1
c0025294:	74 3a                	je     c00252d0 <schedule()+0x74>
c0025296:	66 90                	xchg   ax,ax
c0025298:	83 ec 0c             	sub    esp,0xc
c002529b:	68 ec 01 04 c0       	push   0xc00401ec
c00252a0:	e8 a7 99 00 00       	call   c002ec4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00252a5:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c00252ac:	89 c3                	mov    ebx,eax
c00252ae:	e8 a1 99 00 00       	call   c002ec54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00252b3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00252ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00252bd:	e8 fa f7 ff ff       	call   c0024abc <switchToThread(ThreadControlBlock*)>
c00252c2:	83 c4 10             	add    esp,0x10
c00252c5:	8d 76 00             	lea    esi,[esi+0x0]
c00252c8:	83 c4 08             	add    esp,0x8
c00252cb:	5b                   	pop    ebx
c00252cc:	c3                   	ret    
c00252cd:	8d 76 00             	lea    esi,[esi+0x0]
c00252d0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00252d7:	83 ec 08             	sub    esp,0x8
c00252da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00252df:	50                   	push   eax
c00252e0:	68 ec 01 04 c0       	push   0xc00401ec
c00252e5:	e8 26 9a 00 00       	call   c002ed10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00252ea:	83 c4 10             	add    esp,0x10
c00252ed:	eb a9                	jmp    c0025298 <schedule()+0x3c>
c00252ef:	90                   	nop

c00252f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00252f0:	83 ec 0c             	sub    esp,0xc
c00252f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00252f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00252fc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00252ff:	e8 58 ff ff ff       	call   c002525c <schedule()>
c0025304:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025309:	83 e8 01             	sub    eax,0x1
c002530c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025311:	75 01                	jne    c0025314 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0025313:	fb                   	sti    
c0025314:	83 c4 0c             	add    esp,0xc
c0025317:	c3                   	ret    

c0025318 <blockTask(TaskState)>:
c0025318:	83 ec 0c             	sub    esp,0xc
c002531b:	fa                   	cli    
c002531c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025321:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025325:	83 c0 01             	add    eax,0x1
c0025328:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002532d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025332:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0025335:	e8 22 ff ff ff       	call   c002525c <schedule()>
c002533a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002533f:	83 e8 01             	sub    eax,0x1
c0025342:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025347:	75 03                	jne    c002534c <blockTask(TaskState)+0x34>
c0025349:	fb                   	sti    
c002534a:	66 90                	xchg   ax,ax
c002534c:	83 c4 0c             	add    esp,0xc
c002534f:	c3                   	ret    

c0025350 <waitTask(int, int*, int)>:
c0025350:	83 ec 18             	sub    esp,0x18
c0025353:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025358:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002535c:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c002535f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0025363:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025368:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c002536b:	6a 07                	push   0x7
c002536d:	e8 a6 ff ff ff       	call   c0025318 <blockTask(TaskState)>
c0025372:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025377:	83 c4 10             	add    esp,0x10
c002537a:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c002537d:	85 d2                	test   edx,edx
c002537f:	74 0b                	je     c002538c <waitTask(int, int*, int)+0x3c>
c0025381:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0025384:	89 02                	mov    DWORD PTR [edx],eax
c0025386:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002538b:	90                   	nop
c002538c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c002538f:	83 c4 0c             	add    esp,0xc
c0025392:	c3                   	ret    
c0025393:	90                   	nop

c0025394 <milliTenthSleepUntil(unsigned int)>:
c0025394:	83 ec 0c             	sub    esp,0xc
c0025397:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002539b:	39 05 ec f3 03 c0    	cmp    DWORD PTR ds:0xc003f3ec,eax
c00253a1:	76 05                	jbe    c00253a8 <milliTenthSleepUntil(unsigned int)+0x14>
c00253a3:	90                   	nop
c00253a4:	83 c4 0c             	add    esp,0xc
c00253a7:	c3                   	ret    
c00253a8:	fa                   	cli    
c00253a9:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c00253af:	83 ec 08             	sub    esp,0x8
c00253b2:	83 c2 01             	add    edx,0x1
c00253b5:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c00253bb:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c00253c1:	83 c1 01             	add    ecx,0x1
c00253c4:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c00253ca:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00253d0:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00253d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00253d8:	50                   	push   eax
c00253d9:	68 e0 01 04 c0       	push   0xc00401e0
c00253de:	e8 2d 99 00 00       	call   c002ed10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00253e3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00253ea:	e8 29 ff ff ff       	call   c0025318 <blockTask(TaskState)>
c00253ef:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00253f4:	83 c4 10             	add    esp,0x10
c00253f7:	83 e8 01             	sub    eax,0x1
c00253fa:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00253ff:	85 c0                	test   eax,eax
c0025401:	75 09                	jne    c002540c <milliTenthSleepUntil(unsigned int)+0x78>
c0025403:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0025408:	85 c0                	test   eax,eax
c002540a:	75 14                	jne    c0025420 <milliTenthSleepUntil(unsigned int)+0x8c>
c002540c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025411:	83 e8 01             	sub    eax,0x1
c0025414:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025419:	75 89                	jne    c00253a4 <milliTenthSleepUntil(unsigned int)+0x10>
c002541b:	fb                   	sti    
c002541c:	83 c4 0c             	add    esp,0xc
c002541f:	c3                   	ret    
c0025420:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c002542a:	e8 2d fe ff ff       	call   c002525c <schedule()>
c002542f:	eb db                	jmp    c002540c <milliTenthSleepUntil(unsigned int)+0x78>
c0025431:	8d 76 00             	lea    esi,[esi+0x0]

c0025434 <milliTenthSleep(unsigned int)>:
c0025434:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025438:	a1 ec f3 03 c0       	mov    eax,ds:0xc003f3ec
c002543d:	01 c2                	add    edx,eax
c002543f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0025443:	e9 4c ff ff ff       	jmp    c0025394 <milliTenthSleepUntil(unsigned int)>

c0025448 <sleep(unsigned int)>:
c0025448:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002544c:	8d 04 80             	lea    eax,[eax+eax*4]
c002544f:	8d 04 80             	lea    eax,[eax+eax*4]
c0025452:	8d 04 80             	lea    eax,[eax+eax*4]
c0025455:	8d 04 80             	lea    eax,[eax+eax*4]
c0025458:	c1 e0 04             	shl    eax,0x4
c002545b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002545f:	eb d3                	jmp    c0025434 <milliTenthSleep(unsigned int)>
c0025461:	8d 76 00             	lea    esi,[esi+0x0]

c0025464 <taskReturned>:
c0025464:	83 ec 18             	sub    esp,0x18
c0025467:	68 00 2f 03 c0       	push   0xc0032f00
c002546c:	e8 f5 ad ff ff       	call   c0020266 <KePanic(char const*)>
c0025471:	83 c4 10             	add    esp,0x10
c0025474:	83 ec 0c             	sub    esp,0xc
c0025477:	6a 02                	push   0x2
c0025479:	e8 9a fe ff ff       	call   c0025318 <blockTask(TaskState)>
c002547e:	fa                   	cli    
c002547f:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025484:	83 c0 01             	add    eax,0x1
c0025487:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002548c:	e8 cb fd ff ff       	call   c002525c <schedule()>
c0025491:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025496:	83 c4 10             	add    esp,0x10
c0025499:	83 e8 01             	sub    eax,0x1
c002549c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00254a1:	85 c0                	test   eax,eax
c00254a3:	75 cf                	jne    c0025474 <taskReturned+0x10>
c00254a5:	fb                   	sti    
c00254a6:	eb cc                	jmp    c0025474 <taskReturned+0x10>

c00254a8 <Thr::processFromPID(int)>:
c00254a8:	57                   	push   edi
c00254a9:	56                   	push   esi
c00254aa:	53                   	push   ebx
c00254ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00254af:	fa                   	cli    
c00254b0:	8b 0d d0 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401d0
c00254b6:	83 ec 0c             	sub    esp,0xc
c00254b9:	83 c1 01             	add    ecx,0x1
c00254bc:	68 ec 01 04 c0       	push   0xc00401ec
c00254c1:	89 0d d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,ecx
c00254c7:	e8 80 97 00 00       	call   c002ec4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00254cc:	83 c4 10             	add    esp,0x10
c00254cf:	89 c7                	mov    edi,eax
c00254d1:	eb 15                	jmp    c00254e8 <Thr::processFromPID(int)+0x40>
c00254d3:	90                   	nop
c00254d4:	83 ec 0c             	sub    esp,0xc
c00254d7:	68 ec 01 04 c0       	push   0xc00401ec
c00254dc:	e8 6b 97 00 00       	call   c002ec4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00254e1:	83 c4 10             	add    esp,0x10
c00254e4:	39 f8                	cmp    eax,edi
c00254e6:	74 50                	je     c0025538 <Thr::processFromPID(int)+0x90>
c00254e8:	83 ec 0c             	sub    esp,0xc
c00254eb:	68 ec 01 04 c0       	push   0xc00401ec
c00254f0:	e8 57 97 00 00       	call   c002ec4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00254f5:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c00254fc:	89 c3                	mov    ebx,eax
c00254fe:	e8 51 97 00 00       	call   c002ec54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025503:	58                   	pop    eax
c0025504:	5a                   	pop    edx
c0025505:	53                   	push   ebx
c0025506:	68 ec 01 04 c0       	push   0xc00401ec
c002550b:	e8 00 98 00 00       	call   c002ed10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025510:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025513:	83 c4 10             	add    esp,0x10
c0025516:	39 30                	cmp    DWORD PTR [eax],esi
c0025518:	75 ba                	jne    c00254d4 <Thr::processFromPID(int)+0x2c>
c002551a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002551f:	83 e8 01             	sub    eax,0x1
c0025522:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025527:	74 0b                	je     c0025534 <Thr::processFromPID(int)+0x8c>
c0025529:	8d 76 00             	lea    esi,[esi+0x0]
c002552c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c002552f:	5b                   	pop    ebx
c0025530:	5e                   	pop    esi
c0025531:	5f                   	pop    edi
c0025532:	c3                   	ret    
c0025533:	90                   	nop
c0025534:	fb                   	sti    
c0025535:	eb f5                	jmp    c002552c <Thr::processFromPID(int)+0x84>
c0025537:	90                   	nop
c0025538:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002553d:	83 e8 01             	sub    eax,0x1
c0025540:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025545:	75 05                	jne    c002554c <Thr::processFromPID(int)+0xa4>
c0025547:	fb                   	sti    
c0025548:	5b                   	pop    ebx
c0025549:	5e                   	pop    esi
c002554a:	5f                   	pop    edi
c002554b:	c3                   	ret    
c002554c:	5b                   	pop    ebx
c002554d:	31 c0                	xor    eax,eax
c002554f:	5e                   	pop    esi
c0025550:	5f                   	pop    edi
c0025551:	c3                   	ret    
c0025552:	66 90                	xchg   ax,ax

c0025554 <unblockTask(ThreadControlBlock*)>:
c0025554:	53                   	push   ebx
c0025555:	83 ec 08             	sub    esp,0x8
c0025558:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002555c:	fa                   	cli    
c002555d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025562:	83 c0 01             	add    eax,0x1
c0025565:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002556a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c002556d:	85 c0                	test   eax,eax
c002556f:	74 67                	je     c00255d8 <unblockTask(ThreadControlBlock*)+0x84>
c0025571:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0025574:	83 f8 01             	cmp    eax,0x1
c0025577:	74 37                	je     c00255b0 <unblockTask(ThreadControlBlock*)+0x5c>
c0025579:	83 ec 0c             	sub    esp,0xc
c002557c:	68 ec 01 04 c0       	push   0xc00401ec
c0025581:	e8 c6 96 00 00       	call   c002ec4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025586:	83 c4 10             	add    esp,0x10
c0025589:	85 c0                	test   eax,eax
c002558b:	75 1b                	jne    c00255a8 <unblockTask(ThreadControlBlock*)+0x54>
c002558d:	eb 5d                	jmp    c00255ec <unblockTask(ThreadControlBlock*)+0x98>
c002558f:	90                   	nop
c0025590:	83 ec 08             	sub    esp,0x8
c0025593:	50                   	push   eax
c0025594:	68 ec 01 04 c0       	push   0xc00401ec
c0025599:	e8 ce 99 00 00       	call   c002ef6c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c002559e:	83 c4 10             	add    esp,0x10
c00255a1:	85 c0                	test   eax,eax
c00255a3:	74 47                	je     c00255ec <unblockTask(ThreadControlBlock*)+0x98>
c00255a5:	8d 76 00             	lea    esi,[esi+0x0]
c00255a8:	39 c3                	cmp    ebx,eax
c00255aa:	75 e4                	jne    c0025590 <unblockTask(ThreadControlBlock*)+0x3c>
c00255ac:	eb 12                	jmp    c00255c0 <unblockTask(ThreadControlBlock*)+0x6c>
c00255ae:	66 90                	xchg   ax,ax
c00255b0:	83 ec 0c             	sub    esp,0xc
c00255b3:	68 9f 2e 03 c0       	push   0xc0032e9f
c00255b8:	e8 90 3c ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c00255bd:	83 c4 10             	add    esp,0x10
c00255c0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00255c5:	83 e8 01             	sub    eax,0x1
c00255c8:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00255cd:	75 01                	jne    c00255d0 <unblockTask(ThreadControlBlock*)+0x7c>
c00255cf:	fb                   	sti    
c00255d0:	83 c4 08             	add    esp,0x8
c00255d3:	5b                   	pop    ebx
c00255d4:	c3                   	ret    
c00255d5:	8d 76 00             	lea    esi,[esi+0x0]
c00255d8:	83 ec 0c             	sub    esp,0xc
c00255db:	68 88 2e 03 c0       	push   0xc0032e88
c00255e0:	e8 68 3c ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c00255e5:	83 c4 10             	add    esp,0x10
c00255e8:	eb d6                	jmp    c00255c0 <unblockTask(ThreadControlBlock*)+0x6c>
c00255ea:	66 90                	xchg   ax,ax
c00255ec:	83 ec 08             	sub    esp,0x8
c00255ef:	53                   	push   ebx
c00255f0:	68 ec 01 04 c0       	push   0xc00401ec
c00255f5:	e8 16 97 00 00       	call   c002ed10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00255fa:	83 c4 10             	add    esp,0x10
c00255fd:	eb c1                	jmp    c00255c0 <unblockTask(ThreadControlBlock*)+0x6c>
c00255ff:	90                   	nop

c0025600 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0025600:	55                   	push   ebp
c0025601:	57                   	push   edi
c0025602:	56                   	push   esi
c0025603:	53                   	push   ebx
c0025604:	83 ec 1c             	sub    esp,0x1c
c0025607:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002560b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c002560e:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0025614:	85 ed                	test   ebp,ebp
c0025616:	7e 28                	jle    c0025640 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0025618:	31 f6                	xor    esi,esi
c002561a:	66 90                	xchg   ax,ax
c002561c:	83 ec 0c             	sub    esp,0xc
c002561f:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0025626:	83 c6 01             	add    esi,0x1
c0025629:	57                   	push   edi
c002562a:	e8 9f 0d ff ff       	call   c00163ce <free>
c002562f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025632:	83 c4 10             	add    esp,0x10
c0025635:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c002563b:	7f df                	jg     c002561c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c002563d:	8d 76 00             	lea    esi,[esi+0x0]
c0025640:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c002564a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c002564f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0025652:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0025655:	d3 c0                	rol    eax,cl
c0025657:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c002565e:	21 c8                	and    eax,ecx
c0025660:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0025667:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c002566a:	89 f7                	mov    edi,esi
c002566c:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0025674:	0f 85 72 01 00 00    	jne    c00257ec <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c002567a:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0025680:	85 ed                	test   ebp,ebp
c0025682:	74 1c                	je     c00256a0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0025684:	83 ec 0c             	sub    esp,0xc
c0025687:	55                   	push   ebp
c0025688:	e8 cf a8 ff ff       	call   c001ff5c <EnvVarContainer::~EnvVarContainer()>
c002568d:	59                   	pop    ecx
c002568e:	5e                   	pop    esi
c002568f:	6a 0c                	push   0xc
c0025691:	55                   	push   ebp
c0025692:	e8 89 3a ff ff       	call   c0019120 <operator delete(void*, unsigned long)>
c0025697:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c002569a:	83 c4 10             	add    esp,0x10
c002569d:	89 f7                	mov    edi,esi
c002569f:	90                   	nop
c00256a0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00256a6:	85 c0                	test   eax,eax
c00256a8:	0f 84 b2 00 00 00    	je     c0025760 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00256ae:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00256b1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00256b5:	31 c9                	xor    ecx,ecx
c00256b7:	eb 17                	jmp    c00256d0 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00256b9:	8d 76 00             	lea    esi,[esi+0x0]
c00256bc:	83 c1 01             	add    ecx,0x1
c00256bf:	83 f9 10             	cmp    ecx,0x10
c00256c2:	0f 84 98 00 00 00    	je     c0025760 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00256c8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00256ce:	66 90                	xchg   ax,ax
c00256d0:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00256d7:	d3 fa                	sar    edx,cl
c00256d9:	80 e2 01             	and    dl,0x1
c00256dc:	74 de                	je     c00256bc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00256de:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00256e1:	01 d2                	add    edx,edx
c00256e3:	01 ca                	add    edx,ecx
c00256e5:	8d 14 92             	lea    edx,[edx+edx*4]
c00256e8:	01 d0                	add    eax,edx
c00256ea:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00256f0:	83 fd 07             	cmp    ebp,0x7
c00256f3:	75 c7                	jne    c00256bc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00256f5:	05 40 02 00 00       	add    eax,0x240
c00256fa:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00256fd:	83 fd ff             	cmp    ebp,0xffffffff
c0025700:	0f 8c ee 00 00 00    	jl     c00257f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0025706:	0f 84 ac 01 00 00    	je     c00258b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c002570c:	85 ed                	test   ebp,ebp
c002570e:	0f 84 90 01 00 00    	je     c00258a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0025714:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0025716:	75 a4                	jne    c00256bc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025718:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c002571e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025722:	01 d0                	add    eax,edx
c0025724:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0025728:	83 ec 0c             	sub    esp,0xc
c002572b:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0025731:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025734:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c002573a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0025741:	50                   	push   eax
c0025742:	e8 0d fe ff ff       	call   c0025554 <unblockTask(ThreadControlBlock*)>
c0025747:	83 c4 10             	add    esp,0x10
c002574a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c002574d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025751:	89 f7                	mov    edi,esi
c0025753:	83 c1 01             	add    ecx,0x1
c0025756:	83 f9 10             	cmp    ecx,0x10
c0025759:	0f 85 69 ff ff ff    	jne    c00256c8 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c002575f:	90                   	nop
c0025760:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0025766:	85 c0                	test   eax,eax
c0025768:	74 62                	je     c00257cc <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c002576a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0025770:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0025776:	74 54                	je     c00257cc <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0025778:	83 ec 0c             	sub    esp,0xc
c002577b:	68 ec 01 04 c0       	push   0xc00401ec
c0025780:	e8 c7 94 00 00       	call   c002ec4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025785:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c002578c:	89 c7                	mov    edi,eax
c002578e:	e8 9d 94 00 00       	call   c002ec30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0025793:	83 c4 10             	add    esp,0x10
c0025796:	84 c0                	test   al,al
c0025798:	0f 84 ce 00 00 00    	je     c002586c <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c002579e:	66 90                	xchg   ax,ax
c00257a0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00257a3:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00257a9:	85 d2                	test   edx,edx
c00257ab:	74 0f                	je     c00257bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00257ad:	83 ec 0c             	sub    esp,0xc
c00257b0:	8b 02                	mov    eax,DWORD PTR [edx]
c00257b2:	52                   	push   edx
c00257b3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00257b6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00257b9:	83 c4 10             	add    esp,0x10
c00257bc:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00257c6:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00257c9:	8d 76 00             	lea    esi,[esi+0x0]
c00257cc:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00257d2:	85 db                	test   ebx,ebx
c00257d4:	74 16                	je     c00257ec <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00257d6:	83 ec 0c             	sub    esp,0xc
c00257d9:	53                   	push   ebx
c00257da:	e8 db 2c ff ff       	call   c00184ba <VAS::~VAS()>
c00257df:	58                   	pop    eax
c00257e0:	5a                   	pop    edx
c00257e1:	6a 14                	push   0x14
c00257e3:	53                   	push   ebx
c00257e4:	e8 37 39 ff ff       	call   c0019120 <operator delete(void*, unsigned long)>
c00257e9:	83 c4 10             	add    esp,0x10
c00257ec:	83 c4 1c             	add    esp,0x1c
c00257ef:	5b                   	pop    ebx
c00257f0:	5e                   	pop    esi
c00257f1:	5f                   	pop    edi
c00257f2:	5d                   	pop    ebp
c00257f3:	c3                   	ret    
c00257f4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00257f8:	83 ec 0c             	sub    esp,0xc
c00257fb:	68 34 2f 03 c0       	push   0xc0032f34
c0025800:	e8 61 aa ff ff       	call   c0020266 <KePanic(char const*)>
c0025805:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025808:	83 c4 10             	add    esp,0x10
c002580b:	89 f7                	mov    edi,esi
c002580d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025811:	e9 a6 fe ff ff       	jmp    c00256bc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025816:	66 90                	xchg   ax,ax
c0025818:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002581e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0025824:	75 1e                	jne    c0025844 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0025826:	83 ec 0c             	sub    esp,0xc
c0025829:	68 9c 2f 03 c0       	push   0xc0032f9c
c002582e:	e8 1a 3a ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0025833:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c002583a:	e8 d9 fa ff ff       	call   c0025318 <blockTask(TaskState)>
c002583f:	83 c4 10             	add    esp,0x10
c0025842:	66 90                	xchg   ax,ax
c0025844:	83 ec 08             	sub    esp,0x8
c0025847:	56                   	push   esi
c0025848:	68 ec 01 04 c0       	push   0xc00401ec
c002584d:	e8 be 94 00 00       	call   c002ed10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025852:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025859:	e8 ee 93 00 00       	call   c002ec4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c002585e:	83 c4 10             	add    esp,0x10
c0025861:	39 f8                	cmp    eax,edi
c0025863:	0f 84 37 ff ff ff    	je     c00257a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0025869:	8d 76 00             	lea    esi,[esi+0x0]
c002586c:	83 ec 0c             	sub    esp,0xc
c002586f:	68 ec 01 04 c0       	push   0xc00401ec
c0025874:	e8 d3 93 00 00       	call   c002ec4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025879:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025880:	89 c6                	mov    esi,eax
c0025882:	e8 cd 93 00 00       	call   c002ec54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025887:	83 c4 10             	add    esp,0x10
c002588a:	39 f3                	cmp    ebx,esi
c002588c:	74 b6                	je     c0025844 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c002588e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0025891:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025894:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c002589a:	75 a8                	jne    c0025844 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c002589c:	e9 77 ff ff ff       	jmp    c0025818 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c00258a1:	8d 76 00             	lea    esi,[esi+0x0]
c00258a4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00258a8:	83 ec 0c             	sub    esp,0xc
c00258ab:	68 68 2f 03 c0       	push   0xc0032f68
c00258b0:	e9 4b ff ff ff       	jmp    c0025800 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00258b5:	8d 76 00             	lea    esi,[esi+0x0]
c00258b8:	8b 36                	mov    esi,DWORD PTR [esi]
c00258ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00258be:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00258c1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00258c4:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00258ca:	01 d7                	add    edi,edx
c00258cc:	89 f8                	mov    eax,edi
c00258ce:	e9 51 fe ff ff       	jmp    c0025724 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00258d3:	90                   	nop

c00258d4 <cleanerTaskFunction(void*)>:
c00258d4:	53                   	push   ebx
c00258d5:	83 ec 08             	sub    esp,0x8
c00258d8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00258dd:	83 e8 01             	sub    eax,0x1
c00258e0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00258e5:	75 01                	jne    c00258e8 <cleanerTaskFunction(void*)+0x14>
c00258e7:	fb                   	sti    
c00258e8:	fa                   	cli    
c00258e9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00258ee:	80 3d b4 01 04 c0 00 	cmp    BYTE PTR ds:0xc00401b4,0x0
c00258f5:	8d 50 01             	lea    edx,[eax+0x1]
c00258f8:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c00258fe:	0f 84 c4 00 00 00    	je     c00259c8 <cleanerTaskFunction(void*)+0xf4>
c0025904:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025909:	85 c0                	test   eax,eax
c002590b:	75 03                	jne    c0025910 <cleanerTaskFunction(void*)+0x3c>
c002590d:	fb                   	sti    
c002590e:	66 90                	xchg   ax,ax
c0025910:	c6 05 b4 01 04 c0 00 	mov    BYTE PTR ds:0xc00401b4,0x0
c0025917:	fa                   	cli    
c0025918:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c002591e:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0025924:	83 c2 01             	add    edx,0x1
c0025927:	83 c1 01             	add    ecx,0x1
c002592a:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025930:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c0025936:	fa                   	cli    
c0025937:	8b 1d d0 01 04 c0    	mov    ebx,DWORD PTR ds:0xc00401d0
c002593d:	83 c3 01             	add    ebx,0x1
c0025940:	89 1d d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,ebx
c0025946:	eb 28                	jmp    c0025970 <cleanerTaskFunction(void*)+0x9c>
c0025948:	83 ec 0c             	sub    esp,0xc
c002594b:	68 d4 01 04 c0       	push   0xc00401d4
c0025950:	e8 f7 92 00 00       	call   c002ec4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025955:	c7 04 24 d4 01 04 c0 	mov    DWORD PTR [esp],0xc00401d4
c002595c:	89 c3                	mov    ebx,eax
c002595e:	e8 f1 92 00 00       	call   c002ec54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025963:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025966:	e8 95 fc ff ff       	call   c0025600 <cleanupTerminatedTask(ThreadControlBlock*)>
c002596b:	83 c4 10             	add    esp,0x10
c002596e:	66 90                	xchg   ax,ax
c0025970:	83 ec 0c             	sub    esp,0xc
c0025973:	68 d4 01 04 c0       	push   0xc00401d4
c0025978:	e8 b3 92 00 00       	call   c002ec30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c002597d:	83 c4 10             	add    esp,0x10
c0025980:	84 c0                	test   al,al
c0025982:	74 c4                	je     c0025948 <cleanerTaskFunction(void*)+0x74>
c0025984:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025989:	83 e8 01             	sub    eax,0x1
c002598c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025991:	75 01                	jne    c0025994 <cleanerTaskFunction(void*)+0xc0>
c0025993:	fb                   	sti    
c0025994:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0025999:	83 e8 01             	sub    eax,0x1
c002599c:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00259a1:	0f 85 31 ff ff ff    	jne    c00258d8 <cleanerTaskFunction(void*)+0x4>
c00259a7:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00259ac:	85 c0                	test   eax,eax
c00259ae:	0f 84 24 ff ff ff    	je     c00258d8 <cleanerTaskFunction(void*)+0x4>
c00259b4:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00259be:	e8 99 f8 ff ff       	call   c002525c <schedule()>
c00259c3:	e9 10 ff ff ff       	jmp    c00258d8 <cleanerTaskFunction(void*)+0x4>
c00259c8:	83 ec 0c             	sub    esp,0xc
c00259cb:	6a 02                	push   0x2
c00259cd:	e8 1e f9 ff ff       	call   c00252f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00259d2:	83 c4 10             	add    esp,0x10
c00259d5:	e9 36 ff ff ff       	jmp    c0025910 <cleanerTaskFunction(void*)+0x3c>
c00259da:	66 90                	xchg   ax,ax

c00259dc <terminateTask(int)>:
c00259dc:	83 ec 14             	sub    esp,0x14
c00259df:	fa                   	cli    
c00259e0:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c00259e6:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c00259ec:	83 c2 01             	add    edx,0x1
c00259ef:	83 c1 01             	add    ecx,0x1
c00259f2:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c00259f8:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c00259fe:	fa                   	cli    
c00259ff:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025a04:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025a08:	83 c0 01             	add    eax,0x1
c0025a0b:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025a10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025a15:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0025a18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025a1d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0025a20:	50                   	push   eax
c0025a21:	68 d4 01 04 c0       	push   0xc00401d4
c0025a26:	e8 e5 92 00 00       	call   c002ed10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025a2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025a30:	83 c4 10             	add    esp,0x10
c0025a33:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0025a3a:	a1 b0 01 04 c0       	mov    eax,ds:0xc00401b0
c0025a3f:	85 c0                	test   eax,eax
c0025a41:	74 65                	je     c0025aa8 <terminateTask(int)+0xcc>
c0025a43:	83 ec 0c             	sub    esp,0xc
c0025a46:	c6 05 b4 01 04 c0 01 	mov    BYTE PTR ds:0xc00401b4,0x1
c0025a4d:	50                   	push   eax
c0025a4e:	e8 01 fb ff ff       	call   c0025554 <unblockTask(ThreadControlBlock*)>
c0025a53:	83 c4 10             	add    esp,0x10
c0025a56:	66 90                	xchg   ax,ax
c0025a58:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025a5d:	83 e8 01             	sub    eax,0x1
c0025a60:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025a65:	75 01                	jne    c0025a68 <terminateTask(int)+0x8c>
c0025a67:	fb                   	sti    
c0025a68:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0025a6d:	83 e8 01             	sub    eax,0x1
c0025a70:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0025a75:	75 09                	jne    c0025a80 <terminateTask(int)+0xa4>
c0025a77:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c0025a7e:	75 3c                	jne    c0025abc <terminateTask(int)+0xe0>
c0025a80:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025a85:	83 e8 01             	sub    eax,0x1
c0025a88:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025a8d:	75 01                	jne    c0025a90 <terminateTask(int)+0xb4>
c0025a8f:	fb                   	sti    
c0025a90:	fa                   	cli    
c0025a91:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025a96:	83 c0 01             	add    eax,0x1
c0025a99:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025a9e:	66 90                	xchg   ax,ax
c0025aa0:	e8 b7 f7 ff ff       	call   c002525c <schedule()>
c0025aa5:	eb d9                	jmp    c0025a80 <terminateTask(int)+0xa4>
c0025aa7:	90                   	nop
c0025aa8:	83 ec 0c             	sub    esp,0xc
c0025aab:	68 b6 2e 03 c0       	push   0xc0032eb6
c0025ab0:	e8 98 37 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0025ab5:	83 c4 10             	add    esp,0x10
c0025ab8:	eb 9e                	jmp    c0025a58 <terminateTask(int)+0x7c>
c0025aba:	66 90                	xchg   ax,ax
c0025abc:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0025ac6:	eb d8                	jmp    c0025aa0 <terminateTask(int)+0xc4>

c0025ac8 <Thr::terminateFromIRQ(int)>:
c0025ac8:	83 ec 18             	sub    esp,0x18
c0025acb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025acf:	50                   	push   eax
c0025ad0:	e8 07 ff ff ff       	call   c00259dc <terminateTask(int)>
c0025ad5:	8d 76 00             	lea    esi,[esi+0x0]

c0025ad8 <__static_initialization_and_destruction_0(int, int)>:
c0025ad8:	83 ec 0c             	sub    esp,0xc
c0025adb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0025ae0:	0f 85 8e 00 00 00    	jne    c0025b74 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0025ae6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0025aee:	0f 85 80 00 00 00    	jne    c0025b74 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0025af4:	83 ec 0c             	sub    esp,0xc
c0025af7:	68 ec 01 04 c0       	push   0xc00401ec
c0025afc:	e8 c3 94 00 00       	call   c002efc4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025b01:	83 c4 10             	add    esp,0x10
c0025b04:	83 ec 04             	sub    esp,0x4
c0025b07:	68 78 3b 03 c0       	push   0xc0033b78
c0025b0c:	68 ec 01 04 c0       	push   0xc00401ec
c0025b11:	68 74 ef 02 c0       	push   0xc002ef74
c0025b16:	e8 b5 35 ff ff       	call   c00190d0 <__cxa_atexit>
c0025b1b:	83 c4 10             	add    esp,0x10
c0025b1e:	83 ec 0c             	sub    esp,0xc
c0025b21:	68 e0 01 04 c0       	push   0xc00401e0
c0025b26:	e8 99 94 00 00       	call   c002efc4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025b2b:	83 c4 10             	add    esp,0x10
c0025b2e:	83 ec 04             	sub    esp,0x4
c0025b31:	68 78 3b 03 c0       	push   0xc0033b78
c0025b36:	68 e0 01 04 c0       	push   0xc00401e0
c0025b3b:	68 74 ef 02 c0       	push   0xc002ef74
c0025b40:	e8 8b 35 ff ff       	call   c00190d0 <__cxa_atexit>
c0025b45:	83 c4 10             	add    esp,0x10
c0025b48:	83 ec 0c             	sub    esp,0xc
c0025b4b:	68 d4 01 04 c0       	push   0xc00401d4
c0025b50:	e8 6f 94 00 00       	call   c002efc4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025b55:	83 c4 10             	add    esp,0x10
c0025b58:	83 ec 04             	sub    esp,0x4
c0025b5b:	68 78 3b 03 c0       	push   0xc0033b78
c0025b60:	68 d4 01 04 c0       	push   0xc00401d4
c0025b65:	68 74 ef 02 c0       	push   0xc002ef74
c0025b6a:	e8 61 35 ff ff       	call   c00190d0 <__cxa_atexit>
c0025b6f:	83 c4 10             	add    esp,0x10
c0025b72:	66 90                	xchg   ax,ax
c0025b74:	90                   	nop
c0025b75:	83 c4 0c             	add    esp,0xc
c0025b78:	c3                   	ret    
c0025b79:	8d 76 00             	lea    esi,[esi+0x0]

c0025b7c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0025b7c:	83 ec 0c             	sub    esp,0xc
c0025b7f:	83 ec 08             	sub    esp,0x8
c0025b82:	68 ff ff 00 00       	push   0xffff
c0025b87:	6a 01                	push   0x1
c0025b89:	e8 4a ff ff ff       	call   c0025ad8 <__static_initialization_and_destruction_0(int, int)>
c0025b8e:	83 c4 10             	add    esp,0x10
c0025b91:	83 c4 0c             	add    esp,0xc
c0025b94:	c3                   	ret    

c0025b95 <Vm::inbv(unsigned short)>:
c0025b95:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025b99:	66 81 fa fe fe       	cmp    dx,0xfefe
c0025b9e:	75 06                	jne    c0025ba6 <Vm::inbv(unsigned short)+0x11>
c0025ba0:	a0 2c 02 04 c0       	mov    al,ds:0xc004022c
c0025ba5:	c3                   	ret    
c0025ba6:	ec                   	in     al,dx
c0025ba7:	c3                   	ret    

c0025ba8 <Vm::outbv(unsigned short, unsigned char)>:
c0025ba8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025bac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025bb0:	66 81 fa fe fe       	cmp    dx,0xfefe
c0025bb5:	75 25                	jne    c0025bdc <Vm::outbv(unsigned short, unsigned char)+0x34>
c0025bb7:	8b 0d 2c 02 04 c0    	mov    ecx,DWORD PTR ds:0xc004022c
c0025bbd:	8d 51 01             	lea    edx,[ecx+0x1]
c0025bc0:	88 81 40 02 04 c0    	mov    BYTE PTR [ecx-0x3ffbfdc0],al
c0025bc6:	89 15 2c 02 04 c0    	mov    DWORD PTR ds:0xc004022c,edx
c0025bcc:	83 fa 20             	cmp    edx,0x20
c0025bcf:	75 0c                	jne    c0025bdd <Vm::outbv(unsigned short, unsigned char)+0x35>
c0025bd1:	c7 05 2c 02 04 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x1f
c0025bdb:	c3                   	ret    
c0025bdc:	ee                   	out    dx,al
c0025bdd:	c3                   	ret    

c0025bde <Vm::realToLinear(unsigned short, unsigned short)>:
c0025bde:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025be3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025be8:	c1 e0 04             	shl    eax,0x4
c0025beb:	01 d0                	add    eax,edx
c0025bed:	c3                   	ret    

c0025bee <Vm::getSegment(unsigned int)>:
c0025bee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025bf2:	c1 e8 10             	shr    eax,0x10
c0025bf5:	c3                   	ret    

c0025bf6 <Vm::getOffset(unsigned int)>:
c0025bf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025bfa:	c3                   	ret    

c0025bfb <Vm::mainloop2()>:
c0025bfb:	83 ec 18             	sub    esp,0x18
c0025bfe:	fa                   	cli    
c0025bff:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025c05:	6a 02                	push   0x2
c0025c07:	c6 05 25 02 04 c0 01 	mov    BYTE PTR ds:0xc0040225,0x1
c0025c0e:	e8 dd f6 ff ff       	call   c00252f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025c13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025c18:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0025c1c:	52                   	push   edx
c0025c1d:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0025c21:	52                   	push   edx
c0025c22:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0025c26:	52                   	push   edx
c0025c27:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0025c2b:	50                   	push   eax
c0025c2c:	e8 de a5 fd ff       	call   c000020f <goToVM86>
c0025c31:	83 c4 2c             	add    esp,0x2c
c0025c34:	c3                   	ret    

c0025c35 <Vm::mainVm8086Loop(void*)>:
c0025c35:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025c3a:	48                   	dec    eax
c0025c3b:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025c40:	75 01                	jne    c0025c43 <Vm::mainVm8086Loop(void*)+0xe>
c0025c42:	fb                   	sti    
c0025c43:	eb b6                	jmp    c0025bfb <Vm::mainloop2()>

c0025c45 <Vm::mainloop3(unsigned long)>:
c0025c45:	83 ec 18             	sub    esp,0x18
c0025c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025c4c:	fa                   	cli    
c0025c4d:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025c53:	6a 02                	push   0x2
c0025c55:	c6 05 24 02 04 c0 01 	mov    BYTE PTR ds:0xc0040224,0x1
c0025c5c:	a3 20 02 04 c0       	mov    ds:0xc0040220,eax
c0025c61:	e8 8a f6 ff ff       	call   c00252f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025c66:	83 c4 1c             	add    esp,0x1c
c0025c69:	eb 90                	jmp    c0025bfb <Vm::mainloop2()>

c0025c6b <Vm::initialise8086()>:
c0025c6b:	83 ec 0c             	sub    esp,0xc
c0025c6e:	68 80 00 00 00       	push   0x80
c0025c73:	6a 00                	push   0x0
c0025c75:	68 35 5c 02 c0       	push   0xc0025c35
c0025c7a:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0025c80:	e8 87 f3 ff ff       	call   c002500c <Process::createThread(void (*)(void*), void*, int)>
c0025c85:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0025c8c:	a3 28 02 04 c0       	mov    ds:0xc0040228,eax
c0025c91:	68 00 01 00 00       	push   0x100
c0025c96:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0025c9b:	6a 00                	push   0x0
c0025c9d:	6a 00                	push   0x0
c0025c9f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0025ca5:	e8 78 2b ff ff       	call   c0018822 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0025caa:	83 c4 2c             	add    esp,0x2c
c0025cad:	c3                   	ret    

c0025cae <Vm::finish8086()>:
c0025cae:	53                   	push   ebx
c0025caf:	83 ec 08             	sub    esp,0x8
c0025cb2:	fa                   	cli    
c0025cb3:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025cb9:	80 3d 24 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040224,0x0
c0025cc0:	75 15                	jne    c0025cd7 <Vm::finish8086()+0x29>
c0025cc2:	e8 95 f5 ff ff       	call   c002525c <schedule()>
c0025cc7:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025ccc:	48                   	dec    eax
c0025ccd:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025cd2:	75 de                	jne    c0025cb2 <Vm::finish8086()+0x4>
c0025cd4:	fb                   	sti    
c0025cd5:	eb db                	jmp    c0025cb2 <Vm::finish8086()+0x4>
c0025cd7:	83 ec 0c             	sub    esp,0xc
c0025cda:	8b 1d 20 02 04 c0    	mov    ebx,DWORD PTR ds:0xc0040220
c0025ce0:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025ce6:	c6 05 24 02 04 c0 00 	mov    BYTE PTR ds:0xc0040224,0x0
c0025ced:	e8 62 f8 ff ff       	call   c0025554 <unblockTask(ThreadControlBlock*)>
c0025cf2:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025cf7:	83 c4 10             	add    esp,0x10
c0025cfa:	8d 50 ff             	lea    edx,[eax-0x1]
c0025cfd:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025d03:	85 d2                	test   edx,edx
c0025d05:	75 01                	jne    c0025d08 <Vm::finish8086()+0x5a>
c0025d07:	fb                   	sti    
c0025d08:	89 d8                	mov    eax,ebx
c0025d0a:	83 c4 08             	add    esp,0x8
c0025d0d:	5b                   	pop    ebx
c0025d0e:	c3                   	ret    

c0025d0f <Vm::getOutput8086(unsigned char*)>:
c0025d0f:	57                   	push   edi
c0025d10:	8b 0d 2c 02 04 c0    	mov    ecx,DWORD PTR ds:0xc004022c
c0025d16:	56                   	push   esi
c0025d17:	be 40 02 04 c0       	mov    esi,0xc0040240
c0025d1c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0025d20:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025d22:	a1 2c 02 04 c0       	mov    eax,ds:0xc004022c
c0025d27:	5e                   	pop    esi
c0025d28:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025d32:	5f                   	pop    edi
c0025d33:	c3                   	ret    

c0025d34 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0025d34:	55                   	push   ebp
c0025d35:	57                   	push   edi
c0025d36:	56                   	push   esi
c0025d37:	53                   	push   ebx
c0025d38:	83 ec 0c             	sub    esp,0xc
c0025d3b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025d3f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0025d43:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025d47:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025d4b:	fa                   	cli    
c0025d4c:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025d52:	80 3d 25 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040225,0x0
c0025d59:	75 15                	jne    c0025d70 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0025d5b:	e8 fc f4 ff ff       	call   c002525c <schedule()>
c0025d60:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025d65:	48                   	dec    eax
c0025d66:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025d6b:	75 de                	jne    c0025d4b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0025d6d:	fb                   	sti    
c0025d6e:	eb db                	jmp    c0025d4b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0025d70:	a1 28 02 04 c0       	mov    eax,ds:0xc0040228
c0025d75:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025d7f:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0025d83:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0025d87:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0025d8b:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0025d8f:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0025d93:	0f b7 ff             	movzx  edi,di
c0025d96:	0f b7 f6             	movzx  esi,si
c0025d99:	50                   	push   eax
c0025d9a:	6a 20                	push   0x20
c0025d9c:	6a 00                	push   0x0
c0025d9e:	68 40 02 04 c0       	push   0xc0040240
c0025da3:	e8 48 a7 fd ff       	call   c00004f0 <memset>
c0025da8:	5a                   	pop    edx
c0025da9:	59                   	pop    ecx
c0025daa:	57                   	push   edi
c0025dab:	56                   	push   esi
c0025dac:	e8 2d fe ff ff       	call   c0025bde <Vm::realToLinear(unsigned short, unsigned short)>
c0025db1:	83 c4 10             	add    esp,0x10
c0025db4:	89 c7                	mov    edi,eax
c0025db6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0025dba:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0025dbe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025dc0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025dc5:	c6 05 25 02 04 c0 00 	mov    BYTE PTR ds:0xc0040225,0x0
c0025dcc:	48                   	dec    eax
c0025dcd:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025dd2:	75 01                	jne    c0025dd5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0025dd4:	fb                   	sti    
c0025dd5:	83 ec 0c             	sub    esp,0xc
c0025dd8:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025dde:	e8 71 f7 ff ff       	call   c0025554 <unblockTask(ThreadControlBlock*)>
c0025de3:	83 c4 1c             	add    esp,0x1c
c0025de6:	b0 01                	mov    al,0x1
c0025de8:	5b                   	pop    ebx
c0025de9:	5e                   	pop    esi
c0025dea:	5f                   	pop    edi
c0025deb:	5d                   	pop    ebp
c0025dec:	c3                   	ret    

c0025ded <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0025ded:	55                   	push   ebp
c0025dee:	57                   	push   edi
c0025def:	56                   	push   esi
c0025df0:	53                   	push   ebx
c0025df1:	83 ec 34             	sub    esp,0x34
c0025df4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025df8:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0025dfc:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0025e00:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0025e04:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025e08:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025e0c:	68 c4 2f 03 c0       	push   0xc0032fc4
c0025e11:	e8 37 34 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0025e16:	83 c4 10             	add    esp,0x10
c0025e19:	fa                   	cli    
c0025e1a:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025e20:	8a 1d 25 02 04 c0    	mov    bl,BYTE PTR ds:0xc0040225
c0025e26:	84 db                	test   bl,bl
c0025e28:	75 15                	jne    c0025e3f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0025e2a:	e8 2d f4 ff ff       	call   c002525c <schedule()>
c0025e2f:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025e34:	48                   	dec    eax
c0025e35:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025e3a:	75 dd                	jne    c0025e19 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0025e3c:	fb                   	sti    
c0025e3d:	eb da                	jmp    c0025e19 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0025e3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025e43:	a1 28 02 04 c0       	mov    eax,ds:0xc0040228
c0025e48:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025e52:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0025e56:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0025e5a:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0025e5e:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0025e62:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0025e66:	50                   	push   eax
c0025e67:	6a 20                	push   0x20
c0025e69:	6a 00                	push   0x0
c0025e6b:	68 40 02 04 c0       	push   0xc0040240
c0025e70:	e8 7b a6 fd ff       	call   c00004f0 <memset>
c0025e75:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0025e7c:	e8 3d 05 ff ff       	call   c00163be <malloc>
c0025e81:	83 c4 0c             	add    esp,0xc
c0025e84:	89 c5                	mov    ebp,eax
c0025e86:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0025e8c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025e90:	50                   	push   eax
c0025e91:	e8 be 45 ff ff       	call   c001a454 <File::File(char const*, Process*)>
c0025e96:	83 c4 10             	add    esp,0x10
c0025e99:	85 ed                	test   ebp,ebp
c0025e9b:	75 0a                	jne    c0025ea7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0025e9d:	83 ec 0c             	sub    esp,0xc
c0025ea0:	68 e6 2f 03 c0       	push   0xc0032fe6
c0025ea5:	eb 2b                	jmp    c0025ed2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0025ea7:	50                   	push   eax
c0025ea8:	8d 44 24 17          	lea    eax,[esp+0x17]
c0025eac:	50                   	push   eax
c0025ead:	8d 44 24 20          	lea    eax,[esp+0x20]
c0025eb1:	50                   	push   eax
c0025eb2:	55                   	push   ebp
c0025eb3:	e8 bc 48 ff ff       	call   c001a774 <File::stat(unsigned long long*, bool*)>
c0025eb8:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0025ebc:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0025ec0:	83 c4 10             	add    esp,0x10
c0025ec3:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025ec8:	74 27                	je     c0025ef1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0025eca:	83 ec 0c             	sub    esp,0xc
c0025ecd:	68 fa 2f 03 c0       	push   0xc0032ffa
c0025ed2:	e8 8f a3 ff ff       	call   c0020266 <KePanic(char const*)>
c0025ed7:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025edc:	83 c4 10             	add    esp,0x10
c0025edf:	48                   	dec    eax
c0025ee0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025ee5:	85 c0                	test   eax,eax
c0025ee7:	75 01                	jne    c0025eea <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0025ee9:	fb                   	sti    
c0025eea:	31 db                	xor    ebx,ebx
c0025eec:	e9 90 00 00 00       	jmp    c0025f81 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0025ef1:	51                   	push   ecx
c0025ef2:	51                   	push   ecx
c0025ef3:	6a 01                	push   0x1
c0025ef5:	55                   	push   ebp
c0025ef6:	e8 77 45 ff ff       	call   c001a472 <File::open(FileOpenMode)>
c0025efb:	83 c4 10             	add    esp,0x10
c0025efe:	85 c0                	test   eax,eax
c0025f00:	74 26                	je     c0025f28 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0025f02:	83 ec 0c             	sub    esp,0xc
c0025f05:	68 13 30 03 c0       	push   0xc0033013
c0025f0a:	e8 57 a3 ff ff       	call   c0020266 <KePanic(char const*)>
c0025f0f:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025f14:	83 c4 10             	add    esp,0x10
c0025f17:	48                   	dec    eax
c0025f18:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025f1d:	85 c0                	test   eax,eax
c0025f1f:	75 c9                	jne    c0025eea <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0025f21:	fb                   	sti    
c0025f22:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0025f26:	eb 59                	jmp    c0025f81 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0025f28:	0f b7 ff             	movzx  edi,di
c0025f2b:	50                   	push   eax
c0025f2c:	0f b7 f6             	movzx  esi,si
c0025f2f:	50                   	push   eax
c0025f30:	57                   	push   edi
c0025f31:	56                   	push   esi
c0025f32:	e8 a7 fc ff ff       	call   c0025bde <Vm::realToLinear(unsigned short, unsigned short)>
c0025f37:	5a                   	pop    edx
c0025f38:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0025f3b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0025f3f:	51                   	push   ecx
c0025f40:	50                   	push   eax
c0025f41:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0025f45:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0025f49:	55                   	push   ebp
c0025f4a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0025f4d:	83 c4 14             	add    esp,0x14
c0025f50:	55                   	push   ebp
c0025f51:	e8 7a 45 ff ff       	call   c001a4d0 <File::close()>
c0025f56:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025f5b:	83 c4 10             	add    esp,0x10
c0025f5e:	48                   	dec    eax
c0025f5f:	c6 05 25 02 04 c0 00 	mov    BYTE PTR ds:0xc0040225,0x0
c0025f66:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025f6b:	85 c0                	test   eax,eax
c0025f6d:	75 01                	jne    c0025f70 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0025f6f:	fb                   	sti    
c0025f70:	83 ec 0c             	sub    esp,0xc
c0025f73:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025f79:	e8 d6 f5 ff ff       	call   c0025554 <unblockTask(ThreadControlBlock*)>
c0025f7e:	83 c4 10             	add    esp,0x10
c0025f81:	83 c4 2c             	add    esp,0x2c
c0025f84:	88 d8                	mov    al,bl
c0025f86:	5b                   	pop    ebx
c0025f87:	5e                   	pop    esi
c0025f88:	5f                   	pop    edi
c0025f89:	5d                   	pop    ebp
c0025f8a:	c3                   	ret    

c0025f8b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0025f8b:	57                   	push   edi
c0025f8c:	56                   	push   esi
c0025f8d:	53                   	push   ebx
c0025f8e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025f92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025f96:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0025f9a:	83 e8 06             	sub    eax,0x6
c0025f9d:	0f b7 c0             	movzx  eax,ax
c0025fa0:	50                   	push   eax
c0025fa1:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0025fa6:	50                   	push   eax
c0025fa7:	e8 32 fc ff ff       	call   c0025bde <Vm::realToLinear(unsigned short, unsigned short)>
c0025fac:	5a                   	pop    edx
c0025fad:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0025fb0:	59                   	pop    ecx
c0025fb1:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0025fb4:	8d 51 fa             	lea    edx,[ecx-0x6]
c0025fb7:	81 e2 ff ff 00 00    	and    edx,0xffff
c0025fbd:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0025fc0:	8d 56 02             	lea    edx,[esi+0x2]
c0025fc3:	66 89 10             	mov    WORD PTR [eax],dx
c0025fc6:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0025fca:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0025fce:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0025fd1:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0025fd5:	0f b6 f1             	movzx  esi,cl
c0025fd8:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0025fdc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0025fe2:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0025fe6:	0f b6 d5             	movzx  edx,ch
c0025fe9:	74 0a                	je     c0025ff5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c0025feb:	c1 e2 08             	shl    edx,0x8
c0025fee:	09 f2                	or     edx,esi
c0025ff0:	80 ce 02             	or     dh,0x2
c0025ff3:	eb 08                	jmp    c0025ffd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0025ff5:	c1 e2 08             	shl    edx,0x8
c0025ff8:	09 f2                	or     edx,esi
c0025ffa:	80 e6 fd             	and    dh,0xfd
c0025ffd:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0026001:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026006:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002600a:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0026012:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0026015:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c002601d:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0026020:	5b                   	pop    ebx
c0026021:	5e                   	pop    esi
c0026022:	5f                   	pop    edi
c0026023:	c3                   	ret    

c0026024 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0026024:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026029:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c002602e:	c1 e0 04             	shl    eax,0x4
c0026031:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0026034:	c3                   	ret    

c0026035 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0026035:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c002603a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c002603f:	c1 e0 04             	shl    eax,0x4
c0026042:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0026046:	c3                   	ret    

c0026047 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0026047:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c002604c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0026051:	c1 e0 04             	shl    eax,0x4
c0026054:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0026057:	c3                   	ret    

c0026058 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0026058:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c002605d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0026062:	c1 e0 04             	shl    eax,0x4
c0026065:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0026069:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c002606c:	c3                   	ret    

c002606d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c002606d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026072:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0026077:	c1 e0 04             	shl    eax,0x4
c002607a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002607e:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0026082:	c3                   	ret    

c0026083 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0026083:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026088:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c002608d:	c1 e0 04             	shl    eax,0x4
c0026090:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0026094:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0026097:	c3                   	ret    

c0026098 <Vm::faultHandler(regs*)>:
c0026098:	55                   	push   ebp
c0026099:	57                   	push   edi
c002609a:	56                   	push   esi
c002609b:	53                   	push   ebx
c002609c:	83 ec 2c             	sub    esp,0x2c
c002609f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00260a3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00260a6:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00260aa:	0f b7 f8             	movzx  edi,ax
c00260ad:	52                   	push   edx
c00260ae:	0f b7 c0             	movzx  eax,ax
c00260b1:	50                   	push   eax
c00260b2:	e8 27 fb ff ff       	call   c0025bde <Vm::realToLinear(unsigned short, unsigned short)>
c00260b7:	5a                   	pop    edx
c00260b8:	59                   	pop    ecx
c00260b9:	89 c1                	mov    ecx,eax
c00260bb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00260be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00260c2:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00260c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00260cb:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00260ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00260d2:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00260d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00260db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00260df:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00260e3:	e8 f6 fa ff ff       	call   c0025bde <Vm::realToLinear(unsigned short, unsigned short)>
c00260e8:	5e                   	pop    esi
c00260e9:	be 06 00 00 00       	mov    esi,0x6
c00260ee:	5d                   	pop    ebp
c00260ef:	31 ed                	xor    ebp,ebp
c00260f1:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00260f6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00260f9:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c00260ff:	0f 84 74 02 00 00    	je     c0026379 <Vm::faultHandler(regs*)+0x2e1>
c0026105:	0f 87 94 00 00 00    	ja     c002619f <Vm::faultHandler(regs*)+0x107>
c002610b:	83 fa 66             	cmp    edx,0x66
c002610e:	0f 84 e2 01 00 00    	je     c00262f6 <Vm::faultHandler(regs*)+0x25e>
c0026114:	77 47                	ja     c002615d <Vm::faultHandler(regs*)+0xc5>
c0026116:	83 fa 36             	cmp    edx,0x36
c0026119:	0f 84 ca 01 00 00    	je     c00262e9 <Vm::faultHandler(regs*)+0x251>
c002611f:	77 1a                	ja     c002613b <Vm::faultHandler(regs*)+0xa3>
c0026121:	83 fa 26             	cmp    edx,0x26
c0026124:	0f 84 98 01 00 00    	je     c00262c2 <Vm::faultHandler(regs*)+0x22a>
c002612a:	83 fa 2e             	cmp    edx,0x2e
c002612d:	0f 85 21 06 00 00    	jne    c0026754 <Vm::faultHandler(regs*)+0x6bc>
c0026133:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026136:	31 f6                	xor    esi,esi
c0026138:	41                   	inc    ecx
c0026139:	eb bb                	jmp    c00260f6 <Vm::faultHandler(regs*)+0x5e>
c002613b:	83 fa 64             	cmp    edx,0x64
c002613e:	0f 84 8b 01 00 00    	je     c00262cf <Vm::faultHandler(regs*)+0x237>
c0026144:	0f 87 92 01 00 00    	ja     c00262dc <Vm::faultHandler(regs*)+0x244>
c002614a:	83 fa 3e             	cmp    edx,0x3e
c002614d:	0f 85 01 06 00 00    	jne    c0026754 <Vm::faultHandler(regs*)+0x6bc>
c0026153:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026156:	be 01 00 00 00       	mov    esi,0x1
c002615b:	eb db                	jmp    c0026138 <Vm::faultHandler(regs*)+0xa0>
c002615d:	83 fa 6d             	cmp    edx,0x6d
c0026160:	0f 84 34 03 00 00    	je     c002649a <Vm::faultHandler(regs*)+0x402>
c0026166:	77 17                	ja     c002617f <Vm::faultHandler(regs*)+0xe7>
c0026168:	83 fa 67             	cmp    edx,0x67
c002616b:	0f 84 92 01 00 00    	je     c0026303 <Vm::faultHandler(regs*)+0x26b>
c0026171:	83 fa 6c             	cmp    edx,0x6c
c0026174:	0f 84 b1 02 00 00    	je     c002642b <Vm::faultHandler(regs*)+0x393>
c002617a:	e9 d5 05 00 00       	jmp    c0026754 <Vm::faultHandler(regs*)+0x6bc>
c002617f:	83 fa 6f             	cmp    edx,0x6f
c0026182:	0f 84 3d 04 00 00    	je     c00265c5 <Vm::faultHandler(regs*)+0x52d>
c0026188:	0f 82 9f 03 00 00    	jb     c002652d <Vm::faultHandler(regs*)+0x495>
c002618e:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0026194:	0f 84 76 01 00 00    	je     c0026310 <Vm::faultHandler(regs*)+0x278>
c002619a:	e9 b5 05 00 00       	jmp    c0026754 <Vm::faultHandler(regs*)+0x6bc>
c002619f:	81 fa ec 00 00 00    	cmp    edx,0xec
c00261a5:	0f 84 51 05 00 00    	je     c00266fc <Vm::faultHandler(regs*)+0x664>
c00261ab:	0f 87 a9 00 00 00    	ja     c002625a <Vm::faultHandler(regs*)+0x1c2>
c00261b1:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00261b7:	0f 84 d0 04 00 00    	je     c002668d <Vm::faultHandler(regs*)+0x5f5>
c00261bd:	77 78                	ja     c0026237 <Vm::faultHandler(regs*)+0x19f>
c00261bf:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00261c5:	0f 84 0e 02 00 00    	je     c00263d9 <Vm::faultHandler(regs*)+0x341>
c00261cb:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00261d1:	0f 85 7d 05 00 00    	jne    c0026754 <Vm::faultHandler(regs*)+0x6bc>
c00261d7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00261db:	89 d1                	mov    ecx,edx
c00261dd:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00261e0:	c1 e1 08             	shl    ecx,0x8
c00261e3:	09 ca                	or     edx,ecx
c00261e5:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00261e8:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00261ec:	89 d1                	mov    ecx,edx
c00261ee:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00261f2:	c1 e1 08             	shl    ecx,0x8
c00261f5:	09 ca                	or     edx,ecx
c00261f7:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00261fa:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00261fe:	89 d1                	mov    ecx,edx
c0026200:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0026204:	c1 e1 08             	shl    ecx,0x8
c0026207:	09 ca                	or     edx,ecx
c0026209:	81 ca 00 02 02 00    	or     edx,0x20200
c002620f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0026212:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0026216:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c002621c:	d1 e8                	shr    eax,1
c002621e:	83 e0 01             	and    eax,0x1
c0026221:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0026224:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0026227:	83 c0 06             	add    eax,0x6
c002622a:	25 ff ff 00 00       	and    eax,0xffff
c002622f:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0026232:	e9 19 05 00 00       	jmp    c0026750 <Vm::faultHandler(regs*)+0x6b8>
c0026237:	81 fa e6 00 00 00    	cmp    edx,0xe6
c002623d:	0f 84 8f 04 00 00    	je     c00266d2 <Vm::faultHandler(regs*)+0x63a>
c0026243:	0f 82 60 04 00 00    	jb     c00266a9 <Vm::faultHandler(regs*)+0x611>
c0026249:	81 fa e7 00 00 00    	cmp    edx,0xe7
c002624f:	0f 84 94 04 00 00    	je     c00266e9 <Vm::faultHandler(regs*)+0x651>
c0026255:	e9 fa 04 00 00       	jmp    c0026754 <Vm::faultHandler(regs*)+0x6bc>
c002625a:	81 fa ef 00 00 00    	cmp    edx,0xef
c0026260:	0f 84 d7 04 00 00    	je     c002673d <Vm::faultHandler(regs*)+0x6a5>
c0026266:	77 2e                	ja     c0026296 <Vm::faultHandler(regs*)+0x1fe>
c0026268:	81 fa ed 00 00 00    	cmp    edx,0xed
c002626e:	0f 84 a4 04 00 00    	je     c0026718 <Vm::faultHandler(regs*)+0x680>
c0026274:	81 fa ee 00 00 00    	cmp    edx,0xee
c002627a:	0f 85 d4 04 00 00    	jne    c0026754 <Vm::faultHandler(regs*)+0x6bc>
c0026280:	50                   	push   eax
c0026281:	50                   	push   eax
c0026282:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0026286:	50                   	push   eax
c0026287:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c002628b:	50                   	push   eax
c002628c:	e8 17 f9 ff ff       	call   c0025ba8 <Vm::outbv(unsigned short, unsigned char)>
c0026291:	e9 9f 04 00 00       	jmp    c0026735 <Vm::faultHandler(regs*)+0x69d>
c0026296:	81 fa fa 00 00 00    	cmp    edx,0xfa
c002629c:	0f 84 6d 01 00 00    	je     c002640f <Vm::faultHandler(regs*)+0x377>
c00262a2:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00262a8:	0f 84 6f 01 00 00    	je     c002641d <Vm::faultHandler(regs*)+0x385>
c00262ae:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00262b4:	0f 85 9a 04 00 00    	jne    c0026754 <Vm::faultHandler(regs*)+0x6bc>
c00262ba:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00262bd:	e9 76 fe ff ff       	jmp    c0026138 <Vm::faultHandler(regs*)+0xa0>
c00262c2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00262c5:	be 02 00 00 00       	mov    esi,0x2
c00262ca:	e9 69 fe ff ff       	jmp    c0026138 <Vm::faultHandler(regs*)+0xa0>
c00262cf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00262d2:	be 03 00 00 00       	mov    esi,0x3
c00262d7:	e9 5c fe ff ff       	jmp    c0026138 <Vm::faultHandler(regs*)+0xa0>
c00262dc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00262df:	be 04 00 00 00       	mov    esi,0x4
c00262e4:	e9 4f fe ff ff       	jmp    c0026138 <Vm::faultHandler(regs*)+0xa0>
c00262e9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00262ec:	be 05 00 00 00       	mov    esi,0x5
c00262f1:	e9 42 fe ff ff       	jmp    c0026138 <Vm::faultHandler(regs*)+0xa0>
c00262f6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00262f9:	bd 01 00 00 00       	mov    ebp,0x1
c00262fe:	e9 35 fe ff ff       	jmp    c0026138 <Vm::faultHandler(regs*)+0xa0>
c0026303:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026306:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c002630b:	e9 28 fe ff ff       	jmp    c0026138 <Vm::faultHandler(regs*)+0xa0>
c0026310:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0026313:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026317:	83 e5 01             	and    ebp,0x1
c002631a:	74 30                	je     c002634c <Vm::faultHandler(regs*)+0x2b4>
c002631c:	83 e9 04             	sub    ecx,0x4
c002631f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0026325:	81 e1 ff ff 00 00    	and    ecx,0xffff
c002632b:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c002632e:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0026331:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0026337:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c002633b:	0f 84 0c 04 00 00    	je     c002674d <Vm::faultHandler(regs*)+0x6b5>
c0026341:	80 ce 02             	or     dh,0x2
c0026344:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0026347:	e9 01 04 00 00       	jmp    c002674d <Vm::faultHandler(regs*)+0x6b5>
c002634c:	83 e9 02             	sub    ecx,0x2
c002634f:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0026355:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0026358:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c002635c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0026362:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0026366:	74 05                	je     c002636d <Vm::faultHandler(regs*)+0x2d5>
c0026368:	80 ce 02             	or     dh,0x2
c002636b:	eb 03                	jmp    c0026370 <Vm::faultHandler(regs*)+0x2d8>
c002636d:	80 e6 fd             	and    dh,0xfd
c0026370:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0026374:	e9 d4 03 00 00       	jmp    c002674d <Vm::faultHandler(regs*)+0x6b5>
c0026379:	83 e5 01             	and    ebp,0x1
c002637c:	74 2a                	je     c00263a8 <Vm::faultHandler(regs*)+0x310>
c002637e:	8b 10                	mov    edx,DWORD PTR [eax]
c0026380:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0026386:	81 ca 00 02 02 00    	or     edx,0x20200
c002638c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c002638f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026391:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0026397:	c1 e8 09             	shr    eax,0x9
c002639a:	83 e0 01             	and    eax,0x1
c002639d:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00263a0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00263a3:	83 c0 04             	add    eax,0x4
c00263a6:	eb 24                	jmp    c00263cc <Vm::faultHandler(regs*)+0x334>
c00263a8:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00263ab:	81 ca 00 02 02 00    	or     edx,0x20200
c00263b1:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00263b4:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00263b7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00263bd:	c1 e8 09             	shr    eax,0x9
c00263c0:	83 e0 01             	and    eax,0x1
c00263c3:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00263c6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00263c9:	83 c0 02             	add    eax,0x2
c00263cc:	25 ff ff 00 00       	and    eax,0xffff
c00263d1:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00263d4:	e9 74 03 00 00       	jmp    c002674d <Vm::faultHandler(regs*)+0x6b5>
c00263d9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00263dd:	3d ee 00 00 00       	cmp    eax,0xee
c00263e2:	75 10                	jne    c00263f4 <Vm::faultHandler(regs*)+0x35c>
c00263e4:	83 ec 0c             	sub    esp,0xc
c00263e7:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00263ea:	e8 56 f8 ff ff       	call   c0025c45 <Vm::mainloop3(unsigned long)>
c00263ef:	e9 44 03 00 00       	jmp    c0026738 <Vm::faultHandler(regs*)+0x6a0>
c00263f4:	83 ec 0c             	sub    esp,0xc
c00263f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00263fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00263ff:	51                   	push   ecx
c0026400:	50                   	push   eax
c0026401:	53                   	push   ebx
c0026402:	e8 84 fb ff ff       	call   c0025f8b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0026407:	83 c4 20             	add    esp,0x20
c002640a:	e9 41 03 00 00       	jmp    c0026750 <Vm::faultHandler(regs*)+0x6b8>
c002640f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026414:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0026418:	e9 30 03 00 00       	jmp    c002674d <Vm::faultHandler(regs*)+0x6b5>
c002641d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026422:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0026426:	e9 22 03 00 00       	jmp    c002674d <Vm::faultHandler(regs*)+0x6b5>
c002642b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c002642e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0026433:	74 2b                	je     c0026460 <Vm::faultHandler(regs*)+0x3c8>
c0026435:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c002643c:	76 22                	jbe    c0026460 <Vm::faultHandler(regs*)+0x3c8>
c002643e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026442:	50                   	push   eax
c0026443:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026447:	50                   	push   eax
c0026448:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c002644c:	50                   	push   eax
c002644d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026451:	50                   	push   eax
c0026452:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026456:	50                   	push   eax
c0026457:	6a 6c                	push   0x6c
c0026459:	6a 6c                	push   0x6c
c002645b:	e9 bd 01 00 00       	jmp    c002661d <Vm::faultHandler(regs*)+0x585>
c0026460:	83 ec 0c             	sub    esp,0xc
c0026463:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0026467:	0f b7 f6             	movzx  esi,si
c002646a:	50                   	push   eax
c002646b:	e8 25 f7 ff ff       	call   c0025b95 <Vm::inbv(unsigned short)>
c0026470:	83 c4 0c             	add    esp,0xc
c0026473:	0f b6 c0             	movzx  eax,al
c0026476:	50                   	push   eax
c0026477:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c002647b:	50                   	push   eax
c002647c:	56                   	push   esi
c002647d:	e8 d6 fb ff ff       	call   c0026058 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0026482:	83 c4 10             	add    esp,0x10
c0026485:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026488:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c002648c:	74 03                	je     c0026491 <Vm::faultHandler(regs*)+0x3f9>
c002648e:	48                   	dec    eax
c002648f:	eb 01                	jmp    c0026492 <Vm::faultHandler(regs*)+0x3fa>
c0026491:	40                   	inc    eax
c0026492:	0f b7 c0             	movzx  eax,ax
c0026495:	e9 8b 00 00 00       	jmp    c0026525 <Vm::faultHandler(regs*)+0x48d>
c002649a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c002649d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00264a0:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00264a5:	74 29                	je     c00264d0 <Vm::faultHandler(regs*)+0x438>
c00264a7:	3d ff ff 00 00       	cmp    eax,0xffff
c00264ac:	76 22                	jbe    c00264d0 <Vm::faultHandler(regs*)+0x438>
c00264ae:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00264b2:	50                   	push   eax
c00264b3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00264b7:	50                   	push   eax
c00264b8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00264bc:	50                   	push   eax
c00264bd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00264c1:	50                   	push   eax
c00264c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00264c6:	50                   	push   eax
c00264c7:	6a 6d                	push   0x6d
c00264c9:	6a 6d                	push   0x6d
c00264cb:	e9 4d 01 00 00       	jmp    c002661d <Vm::faultHandler(regs*)+0x585>
c00264d0:	0f b7 c8             	movzx  ecx,ax
c00264d3:	0f b7 f6             	movzx  esi,si
c00264d6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00264d9:	83 e5 01             	and    ebp,0x1
c00264dc:	74 20                	je     c00264fe <Vm::faultHandler(regs*)+0x466>
c00264de:	ed                   	in     eax,dx
c00264df:	55                   	push   ebp
c00264e0:	50                   	push   eax
c00264e1:	51                   	push   ecx
c00264e2:	56                   	push   esi
c00264e3:	e8 9b fb ff ff       	call   c0026083 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00264e8:	83 c4 10             	add    esp,0x10
c00264eb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00264ee:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00264f2:	74 05                	je     c00264f9 <Vm::faultHandler(regs*)+0x461>
c00264f4:	83 e8 04             	sub    eax,0x4
c00264f7:	eb 27                	jmp    c0026520 <Vm::faultHandler(regs*)+0x488>
c00264f9:	83 c0 04             	add    eax,0x4
c00264fc:	eb 22                	jmp    c0026520 <Vm::faultHandler(regs*)+0x488>
c00264fe:	66 ed                	in     ax,dx
c0026500:	0f b7 c0             	movzx  eax,ax
c0026503:	57                   	push   edi
c0026504:	50                   	push   eax
c0026505:	51                   	push   ecx
c0026506:	56                   	push   esi
c0026507:	e8 61 fb ff ff       	call   c002606d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c002650c:	83 c4 10             	add    esp,0x10
c002650f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026512:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0026516:	74 05                	je     c002651d <Vm::faultHandler(regs*)+0x485>
c0026518:	83 e8 02             	sub    eax,0x2
c002651b:	eb 03                	jmp    c0026520 <Vm::faultHandler(regs*)+0x488>
c002651d:	83 c0 02             	add    eax,0x2
c0026520:	25 ff ff 00 00       	and    eax,0xffff
c0026525:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0026528:	e9 20 02 00 00       	jmp    c002674d <Vm::faultHandler(regs*)+0x6b5>
c002652d:	8d 46 ff             	lea    eax,[esi-0x1]
c0026530:	0f b6 f0             	movzx  esi,al
c0026533:	83 fe 05             	cmp    esi,0x5
c0026536:	77 23                	ja     c002655b <Vm::faultHandler(regs*)+0x4c3>
c0026538:	ff 24 b5 88 30 03 c0 	jmp    DWORD PTR [esi*4-0x3ffccf78]
c002653f:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0026544:	eb 15                	jmp    c002655b <Vm::faultHandler(regs*)+0x4c3>
c0026546:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c002654a:	eb 0f                	jmp    c002655b <Vm::faultHandler(regs*)+0x4c3>
c002654c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0026550:	eb 09                	jmp    c002655b <Vm::faultHandler(regs*)+0x4c3>
c0026552:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0026556:	eb 03                	jmp    c002655b <Vm::faultHandler(regs*)+0x4c3>
c0026558:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c002655b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002655e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0026563:	74 29                	je     c002658e <Vm::faultHandler(regs*)+0x4f6>
c0026565:	3d ff ff 00 00       	cmp    eax,0xffff
c002656a:	76 22                	jbe    c002658e <Vm::faultHandler(regs*)+0x4f6>
c002656c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026570:	50                   	push   eax
c0026571:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026575:	50                   	push   eax
c0026576:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c002657a:	50                   	push   eax
c002657b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c002657f:	50                   	push   eax
c0026580:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026584:	50                   	push   eax
c0026585:	6a 6e                	push   0x6e
c0026587:	6a 6e                	push   0x6e
c0026589:	e9 8f 00 00 00       	jmp    c002661d <Vm::faultHandler(regs*)+0x585>
c002658e:	0f b7 c0             	movzx  eax,ax
c0026591:	52                   	push   edx
c0026592:	52                   	push   edx
c0026593:	50                   	push   eax
c0026594:	57                   	push   edi
c0026595:	e8 8a fa ff ff       	call   c0026024 <Vm::readByteFromReal(unsigned short, unsigned short)>
c002659a:	59                   	pop    ecx
c002659b:	0f b6 c0             	movzx  eax,al
c002659e:	5e                   	pop    esi
c002659f:	50                   	push   eax
c00265a0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00265a4:	50                   	push   eax
c00265a5:	e8 fe f5 ff ff       	call   c0025ba8 <Vm::outbv(unsigned short, unsigned char)>
c00265aa:	83 c4 10             	add    esp,0x10
c00265ad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00265b0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00265b4:	74 03                	je     c00265b9 <Vm::faultHandler(regs*)+0x521>
c00265b6:	48                   	dec    eax
c00265b7:	eb 01                	jmp    c00265ba <Vm::faultHandler(regs*)+0x522>
c00265b9:	40                   	inc    eax
c00265ba:	0f b7 c0             	movzx  eax,ax
c00265bd:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00265c0:	e9 88 01 00 00       	jmp    c002674d <Vm::faultHandler(regs*)+0x6b5>
c00265c5:	8d 46 ff             	lea    eax,[esi-0x1]
c00265c8:	0f b6 f0             	movzx  esi,al
c00265cb:	83 fe 05             	cmp    esi,0x5
c00265ce:	77 1e                	ja     c00265ee <Vm::faultHandler(regs*)+0x556>
c00265d0:	ff 24 b5 a0 30 03 c0 	jmp    DWORD PTR [esi*4-0x3ffccf60]
c00265d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00265db:	eb 11                	jmp    c00265ee <Vm::faultHandler(regs*)+0x556>
c00265dd:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00265e0:	eb 0c                	jmp    c00265ee <Vm::faultHandler(regs*)+0x556>
c00265e2:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00265e5:	eb 07                	jmp    c00265ee <Vm::faultHandler(regs*)+0x556>
c00265e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00265ea:	eb 02                	jmp    c00265ee <Vm::faultHandler(regs*)+0x556>
c00265ec:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00265ee:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00265f1:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00265f6:	74 37                	je     c002662f <Vm::faultHandler(regs*)+0x597>
c00265f8:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00265fe:	76 2f                	jbe    c002662f <Vm::faultHandler(regs*)+0x597>
c0026600:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026604:	50                   	push   eax
c0026605:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026609:	50                   	push   eax
c002660a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c002660e:	50                   	push   eax
c002660f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026613:	50                   	push   eax
c0026614:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026618:	50                   	push   eax
c0026619:	6a 6f                	push   0x6f
c002661b:	6a 6f                	push   0x6f
c002661d:	68 2c 30 03 c0       	push   0xc003302c
c0026622:	e8 26 2c ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0026627:	83 c4 20             	add    esp,0x20
c002662a:	e9 83 01 00 00       	jmp    c00267b2 <Vm::faultHandler(regs*)+0x71a>
c002662f:	0f b7 d7             	movzx  edx,di
c0026632:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0026635:	0f b7 c6             	movzx  eax,si
c0026638:	81 e1 00 04 00 00    	and    ecx,0x400
c002663e:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0026641:	83 e5 01             	and    ebp,0x1
c0026644:	74 1d                	je     c0026663 <Vm::faultHandler(regs*)+0x5cb>
c0026646:	55                   	push   ebp
c0026647:	55                   	push   ebp
c0026648:	50                   	push   eax
c0026649:	52                   	push   edx
c002664a:	e8 f8 f9 ff ff       	call   c0026047 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c002664f:	83 c4 10             	add    esp,0x10
c0026652:	89 fa                	mov    edx,edi
c0026654:	ef                   	out    dx,eax
c0026655:	85 c9                	test   ecx,ecx
c0026657:	74 05                	je     c002665e <Vm::faultHandler(regs*)+0x5c6>
c0026659:	83 ee 04             	sub    esi,0x4
c002665c:	eb 21                	jmp    c002667f <Vm::faultHandler(regs*)+0x5e7>
c002665e:	83 c6 04             	add    esi,0x4
c0026661:	eb 1c                	jmp    c002667f <Vm::faultHandler(regs*)+0x5e7>
c0026663:	55                   	push   ebp
c0026664:	55                   	push   ebp
c0026665:	50                   	push   eax
c0026666:	52                   	push   edx
c0026667:	e8 c9 f9 ff ff       	call   c0026035 <Vm::readWordFromReal(unsigned short, unsigned short)>
c002666c:	83 c4 10             	add    esp,0x10
c002666f:	89 fa                	mov    edx,edi
c0026671:	66 ef                	out    dx,ax
c0026673:	85 c9                	test   ecx,ecx
c0026675:	74 05                	je     c002667c <Vm::faultHandler(regs*)+0x5e4>
c0026677:	83 ee 02             	sub    esi,0x2
c002667a:	eb 03                	jmp    c002667f <Vm::faultHandler(regs*)+0x5e7>
c002667c:	83 c6 02             	add    esi,0x2
c002667f:	81 e6 ff ff 00 00    	and    esi,0xffff
c0026685:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0026688:	e9 c0 00 00 00       	jmp    c002674d <Vm::faultHandler(regs*)+0x6b5>
c002668d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0026694:	83 ec 0c             	sub    esp,0xc
c0026697:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c002669b:	50                   	push   eax
c002669c:	e8 f4 f4 ff ff       	call   c0025b95 <Vm::inbv(unsigned short)>
c00266a1:	0f b6 c0             	movzx  eax,al
c00266a4:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00266a7:	eb 3a                	jmp    c00266e3 <Vm::faultHandler(regs*)+0x64b>
c00266a9:	83 e5 01             	and    ebp,0x1
c00266ac:	74 07                	je     c00266b5 <Vm::faultHandler(regs*)+0x61d>
c00266ae:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00266b2:	ed                   	in     eax,dx
c00266b3:	eb 14                	jmp    c00266c9 <Vm::faultHandler(regs*)+0x631>
c00266b5:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00266b8:	66 31 f6             	xor    si,si
c00266bb:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00266be:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00266c2:	66 ed                	in     ax,dx
c00266c4:	0f b7 c0             	movzx  eax,ax
c00266c7:	09 f0                	or     eax,esi
c00266c9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00266cc:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00266d0:	eb 7e                	jmp    c0026750 <Vm::faultHandler(regs*)+0x6b8>
c00266d2:	52                   	push   edx
c00266d3:	52                   	push   edx
c00266d4:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00266d8:	50                   	push   eax
c00266d9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00266dd:	50                   	push   eax
c00266de:	e8 c5 f4 ff ff       	call   c0025ba8 <Vm::outbv(unsigned short, unsigned char)>
c00266e3:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00266e7:	eb 4f                	jmp    c0026738 <Vm::faultHandler(regs*)+0x6a0>
c00266e9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00266ec:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00266f0:	83 e5 01             	and    ebp,0x1
c00266f3:	74 03                	je     c00266f8 <Vm::faultHandler(regs*)+0x660>
c00266f5:	ef                   	out    dx,eax
c00266f6:	eb d4                	jmp    c00266cc <Vm::faultHandler(regs*)+0x634>
c00266f8:	66 ef                	out    dx,ax
c00266fa:	eb d0                	jmp    c00266cc <Vm::faultHandler(regs*)+0x634>
c00266fc:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0026703:	83 ec 0c             	sub    esp,0xc
c0026706:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c002670a:	50                   	push   eax
c002670b:	e8 85 f4 ff ff       	call   c0025b95 <Vm::inbv(unsigned short)>
c0026710:	0f b6 c0             	movzx  eax,al
c0026713:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0026716:	eb 1d                	jmp    c0026735 <Vm::faultHandler(regs*)+0x69d>
c0026718:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c002671b:	83 e5 01             	and    ebp,0x1
c002671e:	74 03                	je     c0026723 <Vm::faultHandler(regs*)+0x68b>
c0026720:	ed                   	in     eax,dx
c0026721:	eb 0d                	jmp    c0026730 <Vm::faultHandler(regs*)+0x698>
c0026723:	66 ed                	in     ax,dx
c0026725:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0026728:	0f b7 c0             	movzx  eax,ax
c002672b:	66 31 d2             	xor    dx,dx
c002672e:	09 d0                	or     eax,edx
c0026730:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0026733:	eb 18                	jmp    c002674d <Vm::faultHandler(regs*)+0x6b5>
c0026735:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026738:	83 c4 10             	add    esp,0x10
c002673b:	eb 13                	jmp    c0026750 <Vm::faultHandler(regs*)+0x6b8>
c002673d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0026740:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0026743:	83 e5 01             	and    ebp,0x1
c0026746:	74 03                	je     c002674b <Vm::faultHandler(regs*)+0x6b3>
c0026748:	ef                   	out    dx,eax
c0026749:	eb 02                	jmp    c002674d <Vm::faultHandler(regs*)+0x6b5>
c002674b:	66 ef                	out    dx,ax
c002674d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026750:	b0 01                	mov    al,0x1
c0026752:	eb 60                	jmp    c00267b4 <Vm::faultHandler(regs*)+0x71c>
c0026754:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026758:	50                   	push   eax
c0026759:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c002675d:	50                   	push   eax
c002675e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026762:	50                   	push   eax
c0026763:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026767:	50                   	push   eax
c0026768:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c002676c:	50                   	push   eax
c002676d:	52                   	push   edx
c002676e:	52                   	push   edx
c002676f:	68 59 30 03 c0       	push   0xc0033059
c0026774:	e8 d4 2a ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0026779:	83 c4 20             	add    esp,0x20
c002677c:	83 ec 0c             	sub    esp,0xc
c002677f:	6a 60                	push   0x60
c0026781:	e8 0f f4 ff ff       	call   c0025b95 <Vm::inbv(unsigned short)>
c0026786:	83 c4 10             	add    esp,0x10
c0026789:	0f b6 d0             	movzx  edx,al
c002678c:	83 fa 1c             	cmp    edx,0x1c
c002678f:	74 05                	je     c0026796 <Vm::faultHandler(regs*)+0x6fe>
c0026791:	83 fa 5a             	cmp    edx,0x5a
c0026794:	75 e6                	jne    c002677c <Vm::faultHandler(regs*)+0x6e4>
c0026796:	0f b6 c0             	movzx  eax,al
c0026799:	83 f8 1c             	cmp    eax,0x1c
c002679c:	74 05                	je     c00267a3 <Vm::faultHandler(regs*)+0x70b>
c002679e:	83 f8 5a             	cmp    eax,0x5a
c00267a1:	75 0f                	jne    c00267b2 <Vm::faultHandler(regs*)+0x71a>
c00267a3:	83 ec 0c             	sub    esp,0xc
c00267a6:	6a 60                	push   0x60
c00267a8:	e8 e8 f3 ff ff       	call   c0025b95 <Vm::inbv(unsigned short)>
c00267ad:	83 c4 10             	add    esp,0x10
c00267b0:	eb e4                	jmp    c0026796 <Vm::faultHandler(regs*)+0x6fe>
c00267b2:	31 c0                	xor    eax,eax
c00267b4:	83 c4 2c             	add    esp,0x2c
c00267b7:	5b                   	pop    ebx
c00267b8:	5e                   	pop    esi
c00267b9:	5f                   	pop    edi
c00267ba:	5d                   	pop    ebp
c00267bb:	c3                   	ret    

c00267bc <noCopro(unsigned long)>:
c00267bc:	c3                   	ret    

c00267bd <nmiHandler(regs*, void*)>:
c00267bd:	83 ec 0c             	sub    esp,0xc
c00267c0:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00267c5:	83 ec 0c             	sub    esp,0xc
c00267c8:	50                   	push   eax
c00267c9:	e8 f0 f3 fe ff       	call   c0015bbe <Computer::handleNMI()>
c00267ce:	83 c4 10             	add    esp,0x10
c00267d1:	90                   	nop
c00267d2:	83 c4 0c             	add    esp,0xc
c00267d5:	c3                   	ret    

c00267d6 <doubleFault(regs*, void*)>:
c00267d6:	55                   	push   ebp
c00267d7:	89 e5                	mov    ebp,esp
c00267d9:	83 ec 08             	sub    esp,0x8
c00267dc:	83 ec 0c             	sub    esp,0xc
c00267df:	68 b8 30 03 c0       	push   0xc00330b8
c00267e4:	e8 7d 9a ff ff       	call   c0020266 <KePanic(char const*)>
c00267e9:	83 c4 10             	add    esp,0x10
c00267ec:	90                   	nop
c00267ed:	c9                   	leave  
c00267ee:	c3                   	ret    

c00267ef <displayDebugInfo(regs*)>:
c00267ef:	83 ec 1c             	sub    esp,0x1c
c00267f2:	0f 20 c0             	mov    eax,cr0
c00267f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00267f9:	0f 20 d0             	mov    eax,cr2
c00267fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026800:	0f 20 d8             	mov    eax,cr3
c0026803:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026807:	0f 20 e0             	mov    eax,cr4
c002680a:	89 04 24             	mov    DWORD PTR [esp],eax
c002680d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026811:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0026814:	83 ec 08             	sub    esp,0x8
c0026817:	50                   	push   eax
c0026818:	68 d4 30 03 c0       	push   0xc00330d4
c002681d:	e8 2b 2a ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0026822:	83 c4 10             	add    esp,0x10
c0026825:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026829:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c002682c:	83 ec 08             	sub    esp,0x8
c002682f:	50                   	push   eax
c0026830:	68 c5 30 03 c0       	push   0xc00330c5
c0026835:	e8 13 2a ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c002683a:	83 c4 10             	add    esp,0x10
c002683d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026841:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0026844:	83 ec 08             	sub    esp,0x8
c0026847:	50                   	push   eax
c0026848:	68 d0 30 03 c0       	push   0xc00330d0
c002684d:	e8 fb 29 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0026852:	83 c4 10             	add    esp,0x10
c0026855:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026859:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002685c:	83 ec 08             	sub    esp,0x8
c002685f:	50                   	push   eax
c0026860:	68 df 30 03 c0       	push   0xc00330df
c0026865:	e8 e3 29 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c002686a:	83 c4 10             	add    esp,0x10
c002686d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026871:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0026874:	83 ec 08             	sub    esp,0x8
c0026877:	50                   	push   eax
c0026878:	68 ea 30 03 c0       	push   0xc00330ea
c002687d:	e8 cb 29 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0026882:	83 c4 10             	add    esp,0x10
c0026885:	83 ec 08             	sub    esp,0x8
c0026888:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002688c:	68 f5 30 03 c0       	push   0xc00330f5
c0026891:	e8 b7 29 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0026896:	83 c4 10             	add    esp,0x10
c0026899:	83 ec 08             	sub    esp,0x8
c002689c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00268a0:	68 00 31 03 c0       	push   0xc0033100
c00268a5:	e8 a3 29 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c00268aa:	83 c4 10             	add    esp,0x10
c00268ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00268b1:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00268b4:	c1 e0 05             	shl    eax,0x5
c00268b7:	8d 90 a0 44 03 c0    	lea    edx,[eax-0x3ffcbb60]
c00268bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00268c1:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00268c4:	83 ec 04             	sub    esp,0x4
c00268c7:	52                   	push   edx
c00268c8:	50                   	push   eax
c00268c9:	68 0b 31 03 c0       	push   0xc003310b
c00268ce:	e8 7a 29 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c00268d3:	83 c4 10             	add    esp,0x10
c00268d6:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00268db:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00268e1:	83 ec 0c             	sub    esp,0xc
c00268e4:	50                   	push   eax
c00268e5:	e8 77 07 ff ff       	call   c0017061 <setActiveTerminal(VgaText*)>
c00268ea:	83 c4 10             	add    esp,0x10
c00268ed:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00268f2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00268f8:	83 ec 08             	sub    esp,0x8
c00268fb:	68 1a 31 03 c0       	push   0xc003311a
c0026900:	50                   	push   eax
c0026901:	e8 a8 0a ff ff       	call   c00173ae <VgaText::puts(char const*)>
c0026906:	83 c4 10             	add    esp,0x10
c0026909:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002690e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026914:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026918:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c002691b:	83 ec 08             	sub    esp,0x8
c002691e:	52                   	push   edx
c002691f:	50                   	push   eax
c0026920:	e8 43 0a ff ff       	call   c0017368 <VgaText::putx(unsigned int)>
c0026925:	83 c4 10             	add    esp,0x10
c0026928:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002692d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026933:	83 ec 08             	sub    esp,0x8
c0026936:	68 28 31 03 c0       	push   0xc0033128
c002693b:	50                   	push   eax
c002693c:	e8 6d 0a ff ff       	call   c00173ae <VgaText::puts(char const*)>
c0026941:	83 c4 10             	add    esp,0x10
c0026944:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026949:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002694f:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0026954:	8b 12                	mov    edx,DWORD PTR [edx]
c0026956:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0026959:	83 c2 0c             	add    edx,0xc
c002695c:	83 ec 08             	sub    esp,0x8
c002695f:	52                   	push   edx
c0026960:	50                   	push   eax
c0026961:	e8 48 0a ff ff       	call   c00173ae <VgaText::puts(char const*)>
c0026966:	83 c4 10             	add    esp,0x10
c0026969:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002696e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026974:	83 ec 08             	sub    esp,0x8
c0026977:	68 31 31 03 c0       	push   0xc0033131
c002697c:	50                   	push   eax
c002697d:	e8 2c 0a ff ff       	call   c00173ae <VgaText::puts(char const*)>
c0026982:	83 c4 10             	add    esp,0x10
c0026985:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002698a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026990:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026994:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0026997:	83 ec 08             	sub    esp,0x8
c002699a:	52                   	push   edx
c002699b:	50                   	push   eax
c002699c:	e8 c7 09 ff ff       	call   c0017368 <VgaText::putx(unsigned int)>
c00269a1:	83 c4 10             	add    esp,0x10
c00269a4:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00269a9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00269af:	83 ec 08             	sub    esp,0x8
c00269b2:	68 39 31 03 c0       	push   0xc0033139
c00269b7:	50                   	push   eax
c00269b8:	e8 f1 09 ff ff       	call   c00173ae <VgaText::puts(char const*)>
c00269bd:	83 c4 10             	add    esp,0x10
c00269c0:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00269c5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00269cb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00269cf:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00269d2:	83 ec 08             	sub    esp,0x8
c00269d5:	52                   	push   edx
c00269d6:	50                   	push   eax
c00269d7:	e8 8c 09 ff ff       	call   c0017368 <VgaText::putx(unsigned int)>
c00269dc:	83 c4 10             	add    esp,0x10
c00269df:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00269e4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00269ea:	83 ec 08             	sub    esp,0x8
c00269ed:	68 41 31 03 c0       	push   0xc0033141
c00269f2:	50                   	push   eax
c00269f3:	e8 b6 09 ff ff       	call   c00173ae <VgaText::puts(char const*)>
c00269f8:	83 c4 10             	add    esp,0x10
c00269fb:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a00:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a06:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026a0a:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0026a0d:	83 ec 08             	sub    esp,0x8
c0026a10:	52                   	push   edx
c0026a11:	50                   	push   eax
c0026a12:	e8 51 09 ff ff       	call   c0017368 <VgaText::putx(unsigned int)>
c0026a17:	83 c4 10             	add    esp,0x10
c0026a1a:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a1f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a25:	83 ec 08             	sub    esp,0x8
c0026a28:	68 49 31 03 c0       	push   0xc0033149
c0026a2d:	50                   	push   eax
c0026a2e:	e8 7b 09 ff ff       	call   c00173ae <VgaText::puts(char const*)>
c0026a33:	83 c4 10             	add    esp,0x10
c0026a36:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a3b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a41:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026a45:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0026a48:	83 ec 08             	sub    esp,0x8
c0026a4b:	52                   	push   edx
c0026a4c:	50                   	push   eax
c0026a4d:	e8 16 09 ff ff       	call   c0017368 <VgaText::putx(unsigned int)>
c0026a52:	83 c4 10             	add    esp,0x10
c0026a55:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a5a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a60:	83 ec 08             	sub    esp,0x8
c0026a63:	68 51 31 03 c0       	push   0xc0033151
c0026a68:	50                   	push   eax
c0026a69:	e8 40 09 ff ff       	call   c00173ae <VgaText::puts(char const*)>
c0026a6e:	83 c4 10             	add    esp,0x10
c0026a71:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a76:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a7c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026a80:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0026a83:	83 ec 08             	sub    esp,0x8
c0026a86:	52                   	push   edx
c0026a87:	50                   	push   eax
c0026a88:	e8 db 08 ff ff       	call   c0017368 <VgaText::putx(unsigned int)>
c0026a8d:	83 c4 10             	add    esp,0x10
c0026a90:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a95:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a9b:	83 ec 08             	sub    esp,0x8
c0026a9e:	68 59 31 03 c0       	push   0xc0033159
c0026aa3:	50                   	push   eax
c0026aa4:	e8 05 09 ff ff       	call   c00173ae <VgaText::puts(char const*)>
c0026aa9:	83 c4 10             	add    esp,0x10
c0026aac:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026ab1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026ab7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026abb:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0026abe:	83 ec 08             	sub    esp,0x8
c0026ac1:	52                   	push   edx
c0026ac2:	50                   	push   eax
c0026ac3:	e8 a0 08 ff ff       	call   c0017368 <VgaText::putx(unsigned int)>
c0026ac8:	83 c4 10             	add    esp,0x10
c0026acb:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026ad0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026ad6:	83 ec 08             	sub    esp,0x8
c0026ad9:	68 61 31 03 c0       	push   0xc0033161
c0026ade:	50                   	push   eax
c0026adf:	e8 ca 08 ff ff       	call   c00173ae <VgaText::puts(char const*)>
c0026ae4:	83 c4 10             	add    esp,0x10
c0026ae7:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026aec:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026af2:	83 ec 08             	sub    esp,0x8
c0026af5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0026af9:	50                   	push   eax
c0026afa:	e8 69 08 ff ff       	call   c0017368 <VgaText::putx(unsigned int)>
c0026aff:	83 c4 10             	add    esp,0x10
c0026b02:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b07:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b0d:	83 ec 08             	sub    esp,0x8
c0026b10:	68 6a 31 03 c0       	push   0xc003316a
c0026b15:	50                   	push   eax
c0026b16:	e8 93 08 ff ff       	call   c00173ae <VgaText::puts(char const*)>
c0026b1b:	83 c4 10             	add    esp,0x10
c0026b1e:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b23:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b29:	83 ec 08             	sub    esp,0x8
c0026b2c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026b30:	50                   	push   eax
c0026b31:	e8 32 08 ff ff       	call   c0017368 <VgaText::putx(unsigned int)>
c0026b36:	83 c4 10             	add    esp,0x10
c0026b39:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b3e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b44:	83 ec 08             	sub    esp,0x8
c0026b47:	68 72 31 03 c0       	push   0xc0033172
c0026b4c:	50                   	push   eax
c0026b4d:	e8 5c 08 ff ff       	call   c00173ae <VgaText::puts(char const*)>
c0026b52:	83 c4 10             	add    esp,0x10
c0026b55:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b5a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b60:	83 ec 08             	sub    esp,0x8
c0026b63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0026b67:	50                   	push   eax
c0026b68:	e8 fb 07 ff ff       	call   c0017368 <VgaText::putx(unsigned int)>
c0026b6d:	83 c4 10             	add    esp,0x10
c0026b70:	fa                   	cli    
c0026b71:	f4                   	hlt    
c0026b72:	eb fe                	jmp    c0026b72 <displayDebugInfo(regs*)+0x383>

c0026b74 <HalSystemIdle()>:
c0026b74:	56                   	push   esi
c0026b75:	53                   	push   ebx
c0026b76:	83 ec 14             	sub    esp,0x14
c0026b79:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026b7e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026b84:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0026b8a:	83 e0 04             	and    eax,0x4
c0026b8d:	0f b6 c0             	movzx  eax,al
c0026b90:	85 c0                	test   eax,eax
c0026b92:	0f 95 c0             	setne  al
c0026b95:	0f b6 c0             	movzx  eax,al
c0026b98:	85 c0                	test   eax,eax
c0026b9a:	74 4c                	je     c0026be8 <HalSystemIdle()+0x74>
c0026b9c:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026ba1:	83 ec 08             	sub    esp,0x8
c0026ba4:	68 e1 00 00 00       	push   0xe1
c0026ba9:	50                   	push   eax
c0026baa:	e8 19 ee fe ff       	call   c00159c8 <Computer::rdmsr(unsigned int)>
c0026baf:	83 c4 10             	add    esp,0x10
c0026bb2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026bb6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026bba:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026bbf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0026bc3:	83 e2 02             	and    edx,0x2
c0026bc6:	89 d3                	mov    ebx,edx
c0026bc8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026bcc:	83 e2 00             	and    edx,0x0
c0026bcf:	89 d6                	mov    esi,edx
c0026bd1:	56                   	push   esi
c0026bd2:	53                   	push   ebx
c0026bd3:	68 e1 00 00 00       	push   0xe1
c0026bd8:	50                   	push   eax
c0026bd9:	e8 16 ee fe ff       	call   c00159f4 <Computer::wrmsr(unsigned int, unsigned long long)>
c0026bde:	83 c4 10             	add    esp,0x10
c0026be1:	e8 ae 95 fd ff       	call   c0000194 <doTPAUSE>
c0026be6:	eb 01                	jmp    c0026be9 <HalSystemIdle()+0x75>
c0026be8:	f4                   	hlt    
c0026be9:	90                   	nop
c0026bea:	83 c4 14             	add    esp,0x14
c0026bed:	5b                   	pop    ebx
c0026bee:	5e                   	pop    esi
c0026bef:	c3                   	ret    

c0026bf0 <displayProgramFault(char const*)>:
c0026bf0:	83 ec 0c             	sub    esp,0xc
c0026bf3:	83 ec 0c             	sub    esp,0xc
c0026bf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026bfa:	e8 4e 26 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0026bff:	83 c4 10             	add    esp,0x10
c0026c02:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026c07:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c09:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026c0c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026c12:	85 c0                	test   eax,eax
c0026c14:	74 21                	je     c0026c37 <displayProgramFault(char const*)+0x47>
c0026c16:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026c1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c1d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026c20:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026c26:	6a 04                	push   0x4
c0026c28:	6a 0f                	push   0xf
c0026c2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0026c2e:	50                   	push   eax
c0026c2f:	e8 ec 07 ff ff       	call   c0017420 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0026c34:	83 c4 10             	add    esp,0x10
c0026c37:	90                   	nop
c0026c38:	83 c4 0c             	add    esp,0xc
c0026c3b:	c3                   	ret    

c0026c3c <gpFault(regs*, void*)>:
c0026c3c:	83 ec 1c             	sub    esp,0x1c
c0026c3f:	c7 05 74 02 04 c0 98 60 02 c0 	mov    DWORD PTR ds:0xc0040274,0xc0026098
c0026c49:	a1 74 02 04 c0       	mov    eax,ds:0xc0040274
c0026c4e:	85 c0                	test   eax,eax
c0026c50:	74 1e                	je     c0026c70 <gpFault(regs*, void*)+0x34>
c0026c52:	a1 74 02 04 c0       	mov    eax,ds:0xc0040274
c0026c57:	83 ec 0c             	sub    esp,0xc
c0026c5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026c5e:	ff d0                	call   eax
c0026c60:	83 c4 10             	add    esp,0x10
c0026c63:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0026c67:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0026c6c:	85 c0                	test   eax,eax
c0026c6e:	75 2e                	jne    c0026c9e <gpFault(regs*, void*)+0x62>
c0026c70:	83 ec 0c             	sub    esp,0xc
c0026c73:	68 7a 31 03 c0       	push   0xc003317a
c0026c78:	e8 73 ff ff ff       	call   c0026bf0 <displayProgramFault(char const*)>
c0026c7d:	83 c4 10             	add    esp,0x10
c0026c80:	83 ec 0c             	sub    esp,0xc
c0026c83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026c87:	e8 63 fb ff ff       	call   c00267ef <displayDebugInfo(regs*)>
c0026c8c:	83 c4 10             	add    esp,0x10
c0026c8f:	83 ec 0c             	sub    esp,0xc
c0026c92:	6a 00                	push   0x0
c0026c94:	e8 2f ee ff ff       	call   c0025ac8 <Thr::terminateFromIRQ(int)>
c0026c99:	83 c4 10             	add    esp,0x10
c0026c9c:	eb 01                	jmp    c0026c9f <gpFault(regs*, void*)+0x63>
c0026c9e:	90                   	nop
c0026c9f:	83 c4 1c             	add    esp,0x1c
c0026ca2:	c3                   	ret    

c0026ca3 <pgFault(regs*, void*)>:
c0026ca3:	83 ec 1c             	sub    esp,0x1c
c0026ca6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026caa:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0026cad:	0f 20 d0             	mov    eax,cr2
c0026cb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026cb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026cb8:	83 ec 04             	sub    esp,0x4
c0026cbb:	52                   	push   edx
c0026cbc:	50                   	push   eax
c0026cbd:	68 58 32 03 c0       	push   0xc0033258
c0026cc2:	e8 86 25 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0026cc7:	83 c4 10             	add    esp,0x10
c0026cca:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026ccf:	8b 00                	mov    eax,DWORD PTR [eax]
c0026cd1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026cd4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0026cda:	0f 20 d2             	mov    edx,cr2
c0026cdd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026ce1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026ce5:	83 ec 08             	sub    esp,0x8
c0026ce8:	52                   	push   edx
c0026ce9:	50                   	push   eax
c0026cea:	e8 a9 1f ff ff       	call   c0018c98 <VAS::tryLoadBackOffDisk(unsigned long)>
c0026cef:	83 c4 10             	add    esp,0x10
c0026cf2:	0f b6 c0             	movzx  eax,al
c0026cf5:	85 c0                	test   eax,eax
c0026cf7:	75 2e                	jne    c0026d27 <pgFault(regs*, void*)+0x84>
c0026cf9:	83 ec 0c             	sub    esp,0xc
c0026cfc:	68 93 31 03 c0       	push   0xc0033193
c0026d01:	e8 ea fe ff ff       	call   c0026bf0 <displayProgramFault(char const*)>
c0026d06:	83 c4 10             	add    esp,0x10
c0026d09:	83 ec 0c             	sub    esp,0xc
c0026d0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026d10:	e8 da fa ff ff       	call   c00267ef <displayDebugInfo(regs*)>
c0026d15:	83 c4 10             	add    esp,0x10
c0026d18:	83 ec 0c             	sub    esp,0xc
c0026d1b:	6a 00                	push   0x0
c0026d1d:	e8 a6 ed ff ff       	call   c0025ac8 <Thr::terminateFromIRQ(int)>
c0026d22:	83 c4 10             	add    esp,0x10
c0026d25:	eb 01                	jmp    c0026d28 <pgFault(regs*, void*)+0x85>
c0026d27:	90                   	nop
c0026d28:	83 c4 1c             	add    esp,0x1c
c0026d2b:	c3                   	ret    

c0026d2c <otherISRHandler(regs*, void*)>:
c0026d2c:	83 ec 0c             	sub    esp,0xc
c0026d2f:	83 ec 0c             	sub    esp,0xc
c0026d32:	68 80 32 03 c0       	push   0xc0033280
c0026d37:	e8 b4 fe ff ff       	call   c0026bf0 <displayProgramFault(char const*)>
c0026d3c:	83 c4 10             	add    esp,0x10
c0026d3f:	83 ec 0c             	sub    esp,0xc
c0026d42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d46:	e8 a4 fa ff ff       	call   c00267ef <displayDebugInfo(regs*)>
c0026d4b:	83 c4 10             	add    esp,0x10
c0026d4e:	83 ec 0c             	sub    esp,0xc
c0026d51:	6a 00                	push   0x0
c0026d53:	e8 70 ed ff ff       	call   c0025ac8 <Thr::terminateFromIRQ(int)>
c0026d58:	83 c4 10             	add    esp,0x10
c0026d5b:	90                   	nop
c0026d5c:	83 c4 0c             	add    esp,0xc
c0026d5f:	c3                   	ret    

c0026d60 <opcodeFault(regs*, void*)>:
c0026d60:	55                   	push   ebp
c0026d61:	89 e5                	mov    ebp,esp
c0026d63:	83 ec 08             	sub    esp,0x8
c0026d66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026d69:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026d6c:	83 ec 08             	sub    esp,0x8
c0026d6f:	50                   	push   eax
c0026d70:	68 9e 31 03 c0       	push   0xc003319e
c0026d75:	e8 d3 24 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0026d7a:	83 c4 10             	add    esp,0x10
c0026d7d:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026d82:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026d88:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0026d8e:	0f b6 c0             	movzx  eax,al
c0026d91:	85 c0                	test   eax,eax
c0026d93:	74 21                	je     c0026db6 <opcodeFault(regs*, void*)+0x56>
c0026d95:	83 ec 0c             	sub    esp,0xc
c0026d98:	68 a8 32 03 c0       	push   0xc00332a8
c0026d9d:	e8 ab 24 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0026da2:	83 c4 10             	add    esp,0x10
c0026da5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026da8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026dab:	8d 50 19             	lea    edx,[eax+0x19]
c0026dae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026db1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0026db4:	eb 2b                	jmp    c0026de1 <opcodeFault(regs*, void*)+0x81>
c0026db6:	83 ec 0c             	sub    esp,0xc
c0026db9:	68 ac 31 03 c0       	push   0xc00331ac
c0026dbe:	e8 2d fe ff ff       	call   c0026bf0 <displayProgramFault(char const*)>
c0026dc3:	83 c4 10             	add    esp,0x10
c0026dc6:	83 ec 0c             	sub    esp,0xc
c0026dc9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026dcc:	e8 1e fa ff ff       	call   c00267ef <displayDebugInfo(regs*)>
c0026dd1:	83 c4 10             	add    esp,0x10
c0026dd4:	83 ec 0c             	sub    esp,0xc
c0026dd7:	6a 00                	push   0x0
c0026dd9:	e8 ea ec ff ff       	call   c0025ac8 <Thr::terminateFromIRQ(int)>
c0026dde:	83 c4 10             	add    esp,0x10
c0026de1:	c9                   	leave  
c0026de2:	c3                   	ret    

c0026de3 <i386SaveCoprocessor(void*)>:
c0026de3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026de7:	83 c0 3f             	add    eax,0x3f
c0026dea:	83 e0 c0             	and    eax,0xffffffc0
c0026ded:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026df1:	ff 25 70 02 04 c0    	jmp    DWORD PTR ds:0xc0040270

c0026df7 <i386LoadCoprocessor(void*)>:
c0026df7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026dfb:	83 c0 3f             	add    eax,0x3f
c0026dfe:	83 e0 c0             	and    eax,0xffffffc0
c0026e01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026e05:	ff 25 6c 02 04 c0    	jmp    DWORD PTR ds:0xc004026c

c0026e0b <x87EmulHandler(regs*, void*)>:
c0026e0b:	53                   	push   ebx
c0026e0c:	83 ec 08             	sub    esp,0x8
c0026e0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026e14:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0026e18:	74 10                	je     c0026e2a <x87EmulHandler(regs*, void*)+0x1f>
c0026e1a:	83 ec 0c             	sub    esp,0xc
c0026e1d:	68 b9 31 03 c0       	push   0xc00331b9
c0026e22:	e8 3f 94 ff ff       	call   c0020266 <KePanic(char const*)>
c0026e27:	83 c4 10             	add    esp,0x10
c0026e2a:	0f 20 c0             	mov    eax,cr0
c0026e2d:	a8 08                	test   al,0x8
c0026e2f:	74 59                	je     c0026e8a <x87EmulHandler(regs*, void*)+0x7f>
c0026e31:	0f 06                	clts   
c0026e33:	a1 68 02 04 c0       	mov    eax,ds:0xc0040268
c0026e38:	85 c0                	test   eax,eax
c0026e3a:	74 0e                	je     c0026e4a <x87EmulHandler(regs*, void*)+0x3f>
c0026e3c:	83 ec 0c             	sub    esp,0xc
c0026e3f:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0026e42:	e8 9c ff ff ff       	call   c0026de3 <i386SaveCoprocessor(void*)>
c0026e47:	83 c4 10             	add    esp,0x10
c0026e4a:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0026e50:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0026e54:	75 12                	jne    c0026e68 <x87EmulHandler(regs*, void*)+0x5d>
c0026e56:	83 ec 0c             	sub    esp,0xc
c0026e59:	68 40 02 00 00       	push   0x240
c0026e5e:	e8 5b f5 fe ff       	call   c00163be <malloc>
c0026e63:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0026e66:	eb 10                	jmp    c0026e78 <x87EmulHandler(regs*, void*)+0x6d>
c0026e68:	83 ec 0c             	sub    esp,0xc
c0026e6b:	a1 68 02 04 c0       	mov    eax,ds:0xc0040268
c0026e70:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0026e73:	e8 7f ff ff ff       	call   c0026df7 <i386LoadCoprocessor(void*)>
c0026e78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026e7d:	83 c4 10             	add    esp,0x10
c0026e80:	a3 68 02 04 c0       	mov    ds:0xc0040268,eax
c0026e85:	83 c4 08             	add    esp,0x8
c0026e88:	5b                   	pop    ebx
c0026e89:	c3                   	ret    
c0026e8a:	83 ec 0c             	sub    esp,0xc
c0026e8d:	68 cd 31 03 c0       	push   0xc00331cd
c0026e92:	e8 b6 23 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0026e97:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0026e9f:	83 c4 18             	add    esp,0x18
c0026ea2:	5b                   	pop    ebx
c0026ea3:	e9 20 ec ff ff       	jmp    c0025ac8 <Thr::terminateFromIRQ(int)>

c0026ea8 <HalInitialiseCoprocessor()>:
c0026ea8:	83 ec 10             	sub    esp,0x10
c0026eab:	c7 05 68 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040268,0x0
c0026eb5:	6a 00                	push   0x0
c0026eb7:	68 0b 6e 02 c0       	push   0xc0026e0b
c0026ebc:	6a 07                	push   0x7
c0026ebe:	e8 57 49 ff ff       	call   c001b81a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026ec3:	e8 a8 70 00 00       	call   c002df70 <avxDetect>
c0026ec8:	83 c4 10             	add    esp,0x10
c0026ecb:	85 c0                	test   eax,eax
c0026ecd:	74 1c                	je     c0026eeb <HalInitialiseCoprocessor()+0x43>
c0026ecf:	c7 05 70 02 04 c0 9a df 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002df9a
c0026ed9:	c7 05 6c 02 04 c0 ab df 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002dfab
c0026ee3:	83 c4 0c             	add    esp,0xc
c0026ee6:	e9 d1 70 00 00       	jmp    c002dfbc <avxInit>
c0026eeb:	e8 f0 73 00 00       	call   c002e2e0 <sseDetect>
c0026ef0:	85 c0                	test   eax,eax
c0026ef2:	74 1c                	je     c0026f10 <HalInitialiseCoprocessor()+0x68>
c0026ef4:	c7 05 70 02 04 c0 f8 e2 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e2f8
c0026efe:	c7 05 6c 02 04 c0 00 e3 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e300
c0026f08:	83 c4 0c             	add    esp,0xc
c0026f0b:	e9 f8 73 00 00       	jmp    c002e308 <sseInit>
c0026f10:	e8 11 74 00 00       	call   c002e326 <x87Detect>
c0026f15:	85 c0                	test   eax,eax
c0026f17:	74 1c                	je     c0026f35 <HalInitialiseCoprocessor()+0x8d>
c0026f19:	c7 05 70 02 04 c0 41 e3 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e341
c0026f23:	c7 05 6c 02 04 c0 48 e3 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e348
c0026f2d:	83 c4 0c             	add    esp,0xc
c0026f30:	e9 1a 74 00 00       	jmp    c002e34f <x87Init>
c0026f35:	c7 05 70 02 04 c0 bc 67 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc00267bc
c0026f3f:	c7 05 6c 02 04 c0 bc 67 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc00267bc
c0026f49:	0f 20 c0             	mov    eax,cr0
c0026f4c:	83 c8 04             	or     eax,0x4
c0026f4f:	0f 22 c0             	mov    cr0,eax
c0026f52:	83 c4 0c             	add    esp,0xc
c0026f55:	c3                   	ret    

c0026f56 <HalPanic(char const*)>:
c0026f56:	53                   	push   ebx
c0026f57:	83 ec 10             	sub    esp,0x10
c0026f5a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026f5e:	fa                   	cli    
c0026f5f:	53                   	push   ebx
c0026f60:	68 e3 31 03 c0       	push   0xc00331e3
c0026f65:	e8 e3 22 ff ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0026f6a:	a1 64 02 04 c0       	mov    eax,ds:0xc0040264
c0026f6f:	83 c4 10             	add    esp,0x10
c0026f72:	85 c0                	test   eax,eax
c0026f74:	74 09                	je     c0026f7f <HalPanic(char const*)+0x29>
c0026f76:	83 ec 0c             	sub    esp,0xc
c0026f79:	53                   	push   ebx
c0026f7a:	ff d0                	call   eax
c0026f7c:	83 c4 10             	add    esp,0x10
c0026f7f:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c0026f84:	85 c0                	test   eax,eax
c0026f86:	0f 84 dc 00 00 00    	je     c0027068 <HalPanic(char const*)+0x112>
c0026f8c:	52                   	push   edx
c0026f8d:	6a 01                	push   0x1
c0026f8f:	6a 0f                	push   0xf
c0026f91:	50                   	push   eax
c0026f92:	e8 25 ff fe ff       	call   c0016ebc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0026f97:	59                   	pop    ecx
c0026f98:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f9e:	e8 09 01 ff ff       	call   c00170ac <VgaText::clearScreen()>
c0026fa3:	58                   	pop    eax
c0026fa4:	5a                   	pop    edx
c0026fa5:	68 b4 12 03 c0       	push   0xc00312b4
c0026faa:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026fb0:	e8 3f ff fe ff       	call   c0016ef4 <VgaText::setTitle(char*)>
c0026fb5:	83 c4 0c             	add    esp,0xc
c0026fb8:	6a 01                	push   0x1
c0026fba:	6a 0f                	push   0xf
c0026fbc:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026fc2:	e8 f5 fe fe ff       	call   c0016ebc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0026fc7:	59                   	pop    ecx
c0026fc8:	58                   	pop    eax
c0026fc9:	68 fc 31 03 c0       	push   0xc00331fc
c0026fce:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026fd4:	e8 d5 03 ff ff       	call   c00173ae <VgaText::puts(char const*)>
c0026fd9:	83 c4 0c             	add    esp,0xc
c0026fdc:	6a 0f                	push   0xf
c0026fde:	6a 01                	push   0x1
c0026fe0:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026fe6:	e8 d1 fe fe ff       	call   c0016ebc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0026feb:	58                   	pop    eax
c0026fec:	5a                   	pop    edx
c0026fed:	68 05 32 03 c0       	push   0xc0033205
c0026ff2:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026ff8:	e8 b1 03 ff ff       	call   c00173ae <VgaText::puts(char const*)>
c0026ffd:	83 c4 0c             	add    esp,0xc
c0027000:	6a 01                	push   0x1
c0027002:	6a 0f                	push   0xf
c0027004:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002700a:	e8 ad fe fe ff       	call   c0016ebc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c002700f:	59                   	pop    ecx
c0027010:	58                   	pop    eax
c0027011:	68 49 32 03 c0       	push   0xc0033249
c0027016:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002701c:	e8 8d 03 ff ff       	call   c00173ae <VgaText::puts(char const*)>
c0027021:	58                   	pop    eax
c0027022:	5a                   	pop    edx
c0027023:	68 12 32 03 c0       	push   0xc0033212
c0027028:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002702e:	e8 7b 03 ff ff       	call   c00173ae <VgaText::puts(char const*)>
c0027033:	59                   	pop    ecx
c0027034:	58                   	pop    eax
c0027035:	68 4c 32 03 c0       	push   0xc003324c
c002703a:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027040:	e8 69 03 ff ff       	call   c00173ae <VgaText::puts(char const*)>
c0027045:	58                   	pop    eax
c0027046:	5a                   	pop    edx
c0027047:	53                   	push   ebx
c0027048:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002704e:	e8 5b 03 ff ff       	call   c00173ae <VgaText::puts(char const*)>
c0027053:	59                   	pop    ecx
c0027054:	5b                   	pop    ebx
c0027055:	68 49 32 03 c0       	push   0xc0033249
c002705a:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027060:	e8 49 03 ff ff       	call   c00173ae <VgaText::puts(char const*)>
c0027065:	83 c4 10             	add    esp,0x10
c0027068:	eb fe                	jmp    c0027068 <HalPanic(char const*)+0x112>

c002706a <HalQueryPerformanceCounter()>:
c002706a:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002706f:	31 d2                	xor    edx,edx
c0027071:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0027077:	31 c0                	xor    eax,eax
c0027079:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0027080:	74 02                	je     c0027084 <HalQueryPerformanceCounter()+0x1a>
c0027082:	0f 31                	rdtsc  
c0027084:	c3                   	ret    

c0027085 <HalInitialise()>:
c0027085:	53                   	push   ebx
c0027086:	83 ec 08             	sub    esp,0x8
c0027089:	e8 bc 49 ff ff       	call   c001ba4a <setupINTS()>
c002708e:	80 3d e0 f6 03 c0 00 	cmp    BYTE PTR ds:0xc003f6e0,0x0
c0027095:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002709a:	75 0f                	jne    c00270ab <HalInitialise()+0x26>
c002709c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00270a2:	83 e2 fe             	and    edx,0xfffffffe
c00270a5:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00270ab:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00270b1:	c6 05 60 02 04 c0 00 	mov    BYTE PTR ds:0xc0040260,0x0
c00270b8:	83 e2 fe             	and    edx,0xfffffffe
c00270bb:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00270c1:	e8 9e 02 00 00       	call   c0027364 <picOpen()>
c00270c6:	80 3d 60 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040260,0x0
c00270cd:	74 0a                	je     c00270d9 <HalInitialise()+0x54>
c00270cf:	e8 e0 01 00 00       	call   c00272b4 <picDisable()>
c00270d4:	e8 03 68 00 00       	call   c002d8dc <apicOpen()>
c00270d9:	bb 0f 00 00 00       	mov    ebx,0xf
c00270de:	50                   	push   eax
c00270df:	6a 00                	push   0x0
c00270e1:	68 2c 6d 02 c0       	push   0xc0026d2c
c00270e6:	6a 00                	push   0x0
c00270e8:	e8 2d 47 ff ff       	call   c001b81a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00270ed:	83 c4 0c             	add    esp,0xc
c00270f0:	6a 00                	push   0x0
c00270f2:	68 2c 6d 02 c0       	push   0xc0026d2c
c00270f7:	6a 01                	push   0x1
c00270f9:	e8 1c 47 ff ff       	call   c001b81a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00270fe:	83 c4 0c             	add    esp,0xc
c0027101:	6a 00                	push   0x0
c0027103:	68 bd 67 02 c0       	push   0xc00267bd
c0027108:	6a 02                	push   0x2
c002710a:	e8 0b 47 ff ff       	call   c001b81a <installISRHandler(int, void (*)(regs*, void*), void*)>
c002710f:	83 c4 0c             	add    esp,0xc
c0027112:	6a 00                	push   0x0
c0027114:	68 2c 6d 02 c0       	push   0xc0026d2c
c0027119:	6a 03                	push   0x3
c002711b:	e8 fa 46 ff ff       	call   c001b81a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027120:	83 c4 0c             	add    esp,0xc
c0027123:	6a 00                	push   0x0
c0027125:	68 2c 6d 02 c0       	push   0xc0026d2c
c002712a:	6a 04                	push   0x4
c002712c:	e8 e9 46 ff ff       	call   c001b81a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027131:	83 c4 0c             	add    esp,0xc
c0027134:	6a 00                	push   0x0
c0027136:	68 2c 6d 02 c0       	push   0xc0026d2c
c002713b:	6a 05                	push   0x5
c002713d:	e8 d8 46 ff ff       	call   c001b81a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027142:	83 c4 0c             	add    esp,0xc
c0027145:	6a 00                	push   0x0
c0027147:	68 60 6d 02 c0       	push   0xc0026d60
c002714c:	6a 06                	push   0x6
c002714e:	e8 c7 46 ff ff       	call   c001b81a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027153:	83 c4 0c             	add    esp,0xc
c0027156:	6a 00                	push   0x0
c0027158:	68 d6 67 02 c0       	push   0xc00267d6
c002715d:	6a 08                	push   0x8
c002715f:	e8 b6 46 ff ff       	call   c001b81a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027164:	83 c4 0c             	add    esp,0xc
c0027167:	6a 00                	push   0x0
c0027169:	68 2c 6d 02 c0       	push   0xc0026d2c
c002716e:	6a 09                	push   0x9
c0027170:	e8 a5 46 ff ff       	call   c001b81a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027175:	83 c4 0c             	add    esp,0xc
c0027178:	6a 00                	push   0x0
c002717a:	68 2c 6d 02 c0       	push   0xc0026d2c
c002717f:	6a 0a                	push   0xa
c0027181:	e8 94 46 ff ff       	call   c001b81a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027186:	83 c4 0c             	add    esp,0xc
c0027189:	6a 00                	push   0x0
c002718b:	68 2c 6d 02 c0       	push   0xc0026d2c
c0027190:	6a 0b                	push   0xb
c0027192:	e8 83 46 ff ff       	call   c001b81a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027197:	83 c4 0c             	add    esp,0xc
c002719a:	6a 00                	push   0x0
c002719c:	68 3c 6c 02 c0       	push   0xc0026c3c
c00271a1:	6a 0d                	push   0xd
c00271a3:	e8 72 46 ff ff       	call   c001b81a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00271a8:	83 c4 0c             	add    esp,0xc
c00271ab:	6a 00                	push   0x0
c00271ad:	68 a3 6c 02 c0       	push   0xc0026ca3
c00271b2:	6a 0e                	push   0xe
c00271b4:	e8 61 46 ff ff       	call   c001b81a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00271b9:	83 c4 10             	add    esp,0x10
c00271bc:	50                   	push   eax
c00271bd:	6a 00                	push   0x0
c00271bf:	68 2c 6d 02 c0       	push   0xc0026d2c
c00271c4:	53                   	push   ebx
c00271c5:	43                   	inc    ebx
c00271c6:	e8 4f 46 ff ff       	call   c001b81a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00271cb:	83 c4 10             	add    esp,0x10
c00271ce:	83 fb 1e             	cmp    ebx,0x1e
c00271d1:	75 e9                	jne    c00271bc <HalInitialise()+0x137>
c00271d3:	50                   	push   eax
c00271d4:	6a 00                	push   0x0
c00271d6:	68 15 1b 02 c0       	push   0xc0021b15
c00271db:	6a 60                	push   0x60
c00271dd:	e8 38 46 ff ff       	call   c001b81a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00271e2:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00271e7:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00271f1:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00271f8:	e8 c1 f1 fe ff       	call   c00163be <malloc>
c00271fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0027200:	89 c3                	mov    ebx,eax
c0027202:	e8 3b 09 00 00       	call   c0027b42 <RTC::RTC()>
c0027207:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0027211:	5a                   	pop    edx
c0027212:	59                   	pop    ecx
c0027213:	53                   	push   ebx
c0027214:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002721a:	e8 af 40 ff ff       	call   c001b2ce <Device::addChild(Device*)>
c002721f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0027221:	6a 00                	push   0x0
c0027223:	6a 00                	push   0x0
c0027225:	6a 00                	push   0x0
c0027227:	53                   	push   ebx
c0027228:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002722b:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027230:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0027236:	83 c4 28             	add    esp,0x28
c0027239:	5b                   	pop    ebx
c002723a:	c3                   	ret    

c002723b <HalMakeBeep(int)>:
c002723b:	53                   	push   ebx
c002723c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0027240:	85 db                	test   ebx,ebx
c0027242:	75 07                	jne    c002724b <HalMakeBeep(int)+0x10>
c0027244:	e4 61                	in     al,0x61
c0027246:	83 e0 fc             	and    eax,0xfffffffc
c0027249:	eb 26                	jmp    c0027271 <HalMakeBeep(int)+0x36>
c002724b:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0027250:	99                   	cdq    
c0027251:	f7 fb                	idiv   ebx
c0027253:	89 c1                	mov    ecx,eax
c0027255:	b0 b6                	mov    al,0xb6
c0027257:	e6 43                	out    0x43,al
c0027259:	88 c8                	mov    al,cl
c002725b:	e6 42                	out    0x42,al
c002725d:	89 c8                	mov    eax,ecx
c002725f:	c1 e8 08             	shr    eax,0x8
c0027262:	e6 42                	out    0x42,al
c0027264:	e4 61                	in     al,0x61
c0027266:	89 c2                	mov    edx,eax
c0027268:	83 ca 03             	or     edx,0x3
c002726b:	38 d0                	cmp    al,dl
c002726d:	74 04                	je     c0027273 <HalMakeBeep(int)+0x38>
c002726f:	88 d0                	mov    al,dl
c0027271:	e6 61                	out    0x61,al
c0027273:	5b                   	pop    ebx
c0027274:	c3                   	ret    

c0027275 <HalGetRand()>:
c0027275:	31 c0                	xor    eax,eax
c0027277:	c3                   	ret    

c0027278 <HalEndOfInterrupt(int)>:
c0027278:	80 3d 60 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040260,0x0
c002727f:	74 23                	je     c00272a4 <HalEndOfInterrupt(int)+0x2c>
c0027281:	83 ec 14             	sub    esp,0x14
c0027284:	6a 1b                	push   0x1b
c0027286:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002728c:	e8 37 e7 fe ff       	call   c00159c8 <Computer::rdmsr(unsigned int)>
c0027291:	25 00 f0 ff ff       	and    eax,0xfffff000
c0027296:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00272a0:	83 c4 1c             	add    esp,0x1c
c00272a3:	c3                   	ret    
c00272a4:	e9 3f 02 00 00       	jmp    c00274e8 <picEOI(int)>

c00272a9 <HalRestart()>:
c00272a9:	c3                   	ret    

c00272aa <HalShutdown()>:
c00272aa:	c3                   	ret    

c00272ab <HalSleep()>:
c00272ab:	c3                   	ret    

c00272ac <picIoWait()>:
c00272ac:	eb 00                	jmp    c00272ae <picIoWait()+0x2>
c00272ae:	eb 00                	jmp    c00272b0 <picIoWait()+0x4>
c00272b0:	90                   	nop
c00272b1:	c3                   	ret    
c00272b2:	66 90                	xchg   ax,ax

c00272b4 <picDisable()>:
c00272b4:	83 ec 10             	sub    esp,0x10
c00272b7:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00272be:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00272c3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00272c7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00272cc:	ee                   	out    dx,al
c00272cd:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00272d4:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00272d9:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00272dd:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00272e2:	ee                   	out    dx,al
c00272e3:	90                   	nop
c00272e4:	83 c4 10             	add    esp,0x10
c00272e7:	c3                   	ret    

c00272e8 <picGetIRQReg(int)>:
c00272e8:	83 ec 10             	sub    esp,0x10
c00272eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00272ef:	0f b6 c0             	movzx  eax,al
c00272f2:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00272f9:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00272fd:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0027301:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0027306:	ee                   	out    dx,al
c0027307:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002730b:	0f b6 c0             	movzx  eax,al
c002730e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0027315:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0027319:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002731d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0027322:	ee                   	out    dx,al
c0027323:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c002732a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c002732f:	89 c2                	mov    edx,eax
c0027331:	ec                   	in     al,dx
c0027332:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0027336:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002733a:	0f b6 c0             	movzx  eax,al
c002733d:	c1 e0 08             	shl    eax,0x8
c0027340:	89 c1                	mov    ecx,eax
c0027342:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0027349:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c002734e:	89 c2                	mov    edx,eax
c0027350:	ec                   	in     al,dx
c0027351:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0027355:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0027359:	0f b6 c0             	movzx  eax,al
c002735c:	09 c8                	or     eax,ecx
c002735e:	83 c4 10             	add    esp,0x10
c0027361:	c3                   	ret    
c0027362:	66 90                	xchg   ax,ax

c0027364 <picOpen()>:
c0027364:	83 ec 50             	sub    esp,0x50
c0027367:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c002736e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0027373:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0027377:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002737b:	ee                   	out    dx,al
c002737c:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0027383:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0027388:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c002738c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027390:	ee                   	out    dx,al
c0027391:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0027399:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00273a1:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00273a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00273ac:	89 c2                	mov    edx,eax
c00273ae:	ec                   	in     al,dx
c00273af:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00273b3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00273b7:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00273bb:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00273c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00273c6:	89 c2                	mov    edx,eax
c00273c8:	ec                   	in     al,dx
c00273c9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00273cd:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00273d1:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00273d5:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00273dc:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00273e1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00273e5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00273e9:	ee                   	out    dx,al
c00273ea:	e8 bd fe ff ff       	call   c00272ac <picIoWait()>
c00273ef:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00273f6:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00273fb:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00273ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0027403:	ee                   	out    dx,al
c0027404:	e8 a3 fe ff ff       	call   c00272ac <picIoWait()>
c0027409:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002740d:	0f b6 c0             	movzx  eax,al
c0027410:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0027417:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c002741b:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c002741f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027423:	ee                   	out    dx,al
c0027424:	e8 83 fe ff ff       	call   c00272ac <picIoWait()>
c0027429:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002742d:	0f b6 c0             	movzx  eax,al
c0027430:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0027437:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c002743b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c002743f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0027443:	ee                   	out    dx,al
c0027444:	e8 63 fe ff ff       	call   c00272ac <picIoWait()>
c0027449:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0027450:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0027455:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0027459:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002745d:	ee                   	out    dx,al
c002745e:	e8 49 fe ff ff       	call   c00272ac <picIoWait()>
c0027463:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c002746a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c002746f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0027473:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0027477:	ee                   	out    dx,al
c0027478:	e8 2f fe ff ff       	call   c00272ac <picIoWait()>
c002747d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0027484:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0027489:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c002748d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0027491:	ee                   	out    dx,al
c0027492:	e8 15 fe ff ff       	call   c00272ac <picIoWait()>
c0027497:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c002749e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00274a3:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00274a7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00274ab:	ee                   	out    dx,al
c00274ac:	e8 fb fd ff ff       	call   c00272ac <picIoWait()>
c00274b1:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00274b6:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00274bd:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00274c1:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00274c5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00274c9:	ee                   	out    dx,al
c00274ca:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00274cf:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00274d6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00274da:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00274de:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00274e2:	ee                   	out    dx,al
c00274e3:	90                   	nop
c00274e4:	83 c4 50             	add    esp,0x50
c00274e7:	c3                   	ret    

c00274e8 <picEOI(int)>:
c00274e8:	83 ec 10             	sub    esp,0x10
c00274eb:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00274f0:	75 1e                	jne    c0027510 <picEOI(int)+0x28>
c00274f2:	6a 0b                	push   0xb
c00274f4:	e8 ef fd ff ff       	call   c00272e8 <picGetIRQReg(int)>
c00274f9:	83 c4 04             	add    esp,0x4
c00274fc:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0027501:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0027506:	25 80 00 00 00       	and    eax,0x80
c002750b:	74 73                	je     c0027580 <picEOI(int)+0x98>
c002750d:	8d 76 00             	lea    esi,[esi+0x0]
c0027510:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0027515:	75 31                	jne    c0027548 <picEOI(int)+0x60>
c0027517:	6a 0b                	push   0xb
c0027519:	e8 ca fd ff ff       	call   c00272e8 <picGetIRQReg(int)>
c002751e:	83 c4 04             	add    esp,0x4
c0027521:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0027526:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002752a:	98                   	cwde   
c002752b:	85 c0                	test   eax,eax
c002752d:	78 19                	js     c0027548 <picEOI(int)+0x60>
c002752f:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0027536:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c002753b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002753f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0027544:	ee                   	out    dx,al
c0027545:	eb 3d                	jmp    c0027584 <picEOI(int)+0x9c>
c0027547:	90                   	nop
c0027548:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c002754d:	7e 19                	jle    c0027568 <picEOI(int)+0x80>
c002754f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0027556:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c002755b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002755f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0027564:	ee                   	out    dx,al
c0027565:	8d 76 00             	lea    esi,[esi+0x0]
c0027568:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c002756f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0027574:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0027578:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002757d:	ee                   	out    dx,al
c002757e:	eb 04                	jmp    c0027584 <picEOI(int)+0x9c>
c0027580:	90                   	nop
c0027581:	8d 76 00             	lea    esi,[esi+0x0]
c0027584:	83 c4 10             	add    esp,0x10
c0027587:	c3                   	ret    

c0027588 <RTC::open(int, int, void*)>:
c0027588:	31 c0                	xor    eax,eax
c002758a:	c3                   	ret    
c002758b:	90                   	nop

c002758c <RTC::close(int, int, void*)>:
c002758c:	31 c0                	xor    eax,eax
c002758e:	c3                   	ret    
c002758f:	90                   	nop

c0027590 <RTC::timeInSecondsUTC()>:
c0027590:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027594:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002759a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00275a0:	c3                   	ret    
c00275a1:	90                   	nop

c00275a2 <RTC::timeInDatetimeUTC()>:
c00275a2:	53                   	push   ebx
c00275a3:	83 ec 14             	sub    esp,0x14
c00275a6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00275aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00275ae:	8b 10                	mov    edx,DWORD PTR [eax]
c00275b0:	50                   	push   eax
c00275b1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00275b4:	83 c4 0c             	add    esp,0xc
c00275b7:	52                   	push   edx
c00275b8:	50                   	push   eax
c00275b9:	53                   	push   ebx
c00275ba:	e8 83 3a ff ff       	call   c001b042 <secondsToDatetime(unsigned long long)>
c00275bf:	89 d8                	mov    eax,ebx
c00275c1:	83 c4 14             	add    esp,0x14
c00275c4:	5b                   	pop    ebx
c00275c5:	c2 04 00             	ret    0x4

c00275c8 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00275c8:	56                   	push   esi
c00275c9:	53                   	push   ebx
c00275ca:	83 ec 14             	sub    esp,0x14
c00275cd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00275d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00275d3:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00275d6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00275da:	52                   	push   edx
c00275db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00275df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00275e3:	50                   	push   eax
c00275e4:	e8 59 3a ff ff       	call   c001b042 <secondsToDatetime(unsigned long long)>
c00275e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00275ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00275f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00275f5:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00275f9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00275fd:	89 f0                	mov    eax,esi
c00275ff:	83 c4 20             	add    esp,0x20
c0027602:	5b                   	pop    ebx
c0027603:	5e                   	pop    esi
c0027604:	ff e0                	jmp    eax

c0027606 <RTC::~RTC()>:
c0027606:	83 ec 0c             	sub    esp,0xc
c0027609:	ba e8 32 03 c0       	mov    edx,0xc00332e8
c002760e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027612:	89 10                	mov    DWORD PTR [eax],edx
c0027614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027618:	83 ec 0c             	sub    esp,0xc
c002761b:	50                   	push   eax
c002761c:	e8 b3 37 ff ff       	call   c001add4 <Clock::~Clock()>
c0027621:	83 c4 10             	add    esp,0x10
c0027624:	90                   	nop
c0027625:	83 c4 0c             	add    esp,0xc
c0027628:	c3                   	ret    
c0027629:	90                   	nop

c002762a <RTC::~RTC()>:
c002762a:	83 ec 0c             	sub    esp,0xc
c002762d:	83 ec 0c             	sub    esp,0xc
c0027630:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027634:	e8 cd ff ff ff       	call   c0027606 <RTC::~RTC()>
c0027639:	83 c4 10             	add    esp,0x10
c002763c:	83 ec 08             	sub    esp,0x8
c002763f:	68 60 01 00 00       	push   0x160
c0027644:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027648:	e8 d3 1a ff ff       	call   c0019120 <operator delete(void*, unsigned long)>
c002764d:	83 c4 10             	add    esp,0x10
c0027650:	83 c4 0c             	add    esp,0xc
c0027653:	c3                   	ret    

c0027654 <RTC::get_update_in_progress_flag()>:
c0027654:	83 ec 14             	sub    esp,0x14
c0027657:	6a 0a                	push   0xa
c0027659:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002765f:	e8 1c e4 fe ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c0027664:	83 c4 1c             	add    esp,0x1c
c0027667:	0f b6 c0             	movzx  eax,al
c002766a:	c1 e8 07             	shr    eax,0x7
c002766d:	c3                   	ret    

c002766e <RTC::completeRTCRefresh()>:
c002766e:	55                   	push   ebp
c002766f:	57                   	push   edi
c0027670:	56                   	push   esi
c0027671:	53                   	push   ebx
c0027672:	83 ec 3c             	sub    esp,0x3c
c0027675:	8b 1d ec f3 03 c0    	mov    ebx,DWORD PTR ds:0xc003f3ec
c002767b:	83 ec 0c             	sub    esp,0xc
c002767e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0027682:	e8 cd ff ff ff       	call   c0027654 <RTC::get_update_in_progress_flag()>
c0027687:	83 c4 10             	add    esp,0x10
c002768a:	84 c0                	test   al,al
c002768c:	74 0e                	je     c002769c <RTC::completeRTCRefresh()+0x2e>
c002768e:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0027694:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c002769a:	73 df                	jae    c002767b <RTC::completeRTCRefresh()+0xd>
c002769c:	51                   	push   ecx
c002769d:	51                   	push   ecx
c002769e:	6a 00                	push   0x0
c00276a0:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276a6:	e8 d5 e3 fe ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c00276ab:	5b                   	pop    ebx
c00276ac:	89 c7                	mov    edi,eax
c00276ae:	5e                   	pop    esi
c00276af:	6a 02                	push   0x2
c00276b1:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276b7:	e8 c4 e3 fe ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c00276bc:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00276c0:	5d                   	pop    ebp
c00276c1:	58                   	pop    eax
c00276c2:	6a 04                	push   0x4
c00276c4:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276ca:	e8 b1 e3 fe ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c00276cf:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00276d3:	58                   	pop    eax
c00276d4:	5a                   	pop    edx
c00276d5:	6a 07                	push   0x7
c00276d7:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276dd:	e8 9e e3 fe ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c00276e2:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00276e6:	59                   	pop    ecx
c00276e7:	5b                   	pop    ebx
c00276e8:	6a 08                	push   0x8
c00276ea:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276f0:	e8 8b e3 fe ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c00276f5:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00276f9:	5e                   	pop    esi
c00276fa:	5d                   	pop    ebp
c00276fb:	6a 09                	push   0x9
c00276fd:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027703:	e8 78 e3 fe ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c0027708:	0f b6 c0             	movzx  eax,al
c002770b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c002770f:	83 c4 10             	add    esp,0x10
c0027712:	8b 1d ec f3 03 c0    	mov    ebx,DWORD PTR ds:0xc003f3ec
c0027718:	83 ec 0c             	sub    esp,0xc
c002771b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002771f:	e8 30 ff ff ff       	call   c0027654 <RTC::get_update_in_progress_flag()>
c0027724:	83 c4 10             	add    esp,0x10
c0027727:	84 c0                	test   al,al
c0027729:	74 0e                	je     c0027739 <RTC::completeRTCRefresh()+0xcb>
c002772b:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0027731:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c0027737:	73 df                	jae    c0027718 <RTC::completeRTCRefresh()+0xaa>
c0027739:	51                   	push   ecx
c002773a:	51                   	push   ecx
c002773b:	6a 00                	push   0x0
c002773d:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027743:	e8 38 e3 fe ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c0027748:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c002774c:	5b                   	pop    ebx
c002774d:	5e                   	pop    esi
c002774e:	6a 02                	push   0x2
c0027750:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027756:	e8 25 e3 fe ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c002775b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002775f:	5d                   	pop    ebp
c0027760:	58                   	pop    eax
c0027761:	6a 04                	push   0x4
c0027763:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027769:	e8 12 e3 fe ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c002776e:	88 c3                	mov    bl,al
c0027770:	58                   	pop    eax
c0027771:	5a                   	pop    edx
c0027772:	6a 07                	push   0x7
c0027774:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002777a:	e8 01 e3 fe ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c002777f:	59                   	pop    ecx
c0027780:	89 c6                	mov    esi,eax
c0027782:	5d                   	pop    ebp
c0027783:	6a 08                	push   0x8
c0027785:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002778b:	e8 f0 e2 fe ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c0027790:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0027794:	58                   	pop    eax
c0027795:	5a                   	pop    edx
c0027796:	6a 09                	push   0x9
c0027798:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002779e:	e8 dd e2 fe ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c00277a3:	89 f9                	mov    ecx,edi
c00277a5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00277a9:	0f b6 e8             	movzx  ebp,al
c00277ac:	83 c4 10             	add    esp,0x10
c00277af:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00277b3:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00277b8:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c00277bd:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00277c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00277c5:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00277c9:	0f 94 c0             	sete   al
c00277cc:	0f b6 fb             	movzx  edi,bl
c00277cf:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c00277d3:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c00277d8:	0f 94 c2             	sete   dl
c00277db:	21 d0                	and    eax,edx
c00277dd:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c00277e1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00277e5:	0f 94 c2             	sete   dl
c00277e8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00277ec:	21 c2                	and    edx,eax
c00277ee:	89 f0                	mov    eax,esi
c00277f0:	0f b6 c0             	movzx  eax,al
c00277f3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00277f7:	89 f0                	mov    eax,esi
c00277f9:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00277fd:	0f 94 c0             	sete   al
c0027800:	21 d0                	and    eax,edx
c0027802:	31 d2                	xor    edx,edx
c0027804:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0027808:	0f 94 c2             	sete   dl
c002780b:	85 c2                	test   edx,eax
c002780d:	75 27                	jne    c0027836 <RTC::completeRTCRefresh()+0x1c8>
c002780f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0027813:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0027817:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c002781b:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c002781f:	89 f0                	mov    eax,esi
c0027821:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0027825:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0027829:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002782d:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0027831:	e9 dc fe ff ff       	jmp    c0027712 <RTC::completeRTCRefresh()+0xa4>
c0027836:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c002783a:	75 d3                	jne    c002780f <RTC::completeRTCRefresh()+0x1a1>
c002783c:	52                   	push   edx
c002783d:	52                   	push   edx
c002783e:	6a 0b                	push   0xb
c0027840:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027846:	e8 35 e2 fe ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c002784b:	83 c4 10             	add    esp,0x10
c002784e:	a8 04                	test   al,0x4
c0027850:	75 7a                	jne    c00278cc <RTC::completeRTCRefresh()+0x25e>
c0027852:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027856:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002785a:	83 e1 0f             	and    ecx,0xf
c002785d:	c1 ea 04             	shr    edx,0x4
c0027860:	c1 ef 04             	shr    edi,0x4
c0027863:	6b d2 0a             	imul   edx,edx,0xa
c0027866:	83 e6 0f             	and    esi,0xf
c0027869:	01 d1                	add    ecx,edx
c002786b:	c1 ed 04             	shr    ebp,0x4
c002786e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0027872:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0027876:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002787a:	c1 ea 04             	shr    edx,0x4
c002787d:	83 e1 0f             	and    ecx,0xf
c0027880:	6b d2 0a             	imul   edx,edx,0xa
c0027883:	6b ed 0a             	imul   ebp,ebp,0xa
c0027886:	01 d1                	add    ecx,edx
c0027888:	89 fa                	mov    edx,edi
c002788a:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c002788e:	83 e2 07             	and    edx,0x7
c0027891:	89 d9                	mov    ecx,ebx
c0027893:	6b d2 0a             	imul   edx,edx,0xa
c0027896:	83 e1 0f             	and    ecx,0xf
c0027899:	83 e3 80             	and    ebx,0xffffff80
c002789c:	01 d1                	add    ecx,edx
c002789e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00278a2:	09 cb                	or     ebx,ecx
c00278a4:	c1 ea 04             	shr    edx,0x4
c00278a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00278ab:	6b d2 0a             	imul   edx,edx,0xa
c00278ae:	83 e1 0f             	and    ecx,0xf
c00278b1:	01 d6                	add    esi,edx
c00278b3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00278b7:	c1 ea 04             	shr    edx,0x4
c00278ba:	6b d2 0a             	imul   edx,edx,0xa
c00278bd:	01 d1                	add    ecx,edx
c00278bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00278c3:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00278c7:	83 e2 0f             	and    edx,0xf
c00278ca:	01 d5                	add    ebp,edx
c00278cc:	a8 02                	test   al,0x2
c00278ce:	75 15                	jne    c00278e5 <RTC::completeRTCRefresh()+0x277>
c00278d0:	f6 c3 80             	test   bl,0x80
c00278d3:	74 10                	je     c00278e5 <RTC::completeRTCRefresh()+0x277>
c00278d5:	83 e3 7f             	and    ebx,0x7f
c00278d8:	b9 18 00 00 00       	mov    ecx,0x18
c00278dd:	8d 43 0c             	lea    eax,[ebx+0xc]
c00278e0:	99                   	cdq    
c00278e1:	f7 f9                	idiv   ecx
c00278e3:	88 d3                	mov    bl,dl
c00278e5:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c00278eb:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c00278f1:	77 06                	ja     c00278f9 <RTC::completeRTCRefresh()+0x28b>
c00278f3:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c00278f9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00278fe:	31 c9                	xor    ecx,ecx
c0027900:	c1 e0 10             	shl    eax,0x10
c0027903:	89 cd                	mov    ebp,ecx
c0027905:	c1 e7 10             	shl    edi,0x10
c0027908:	31 d2                	xor    edx,edx
c002790a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0027910:	09 c5                	or     ebp,eax
c0027912:	89 f0                	mov    eax,esi
c0027914:	89 e9                	mov    ecx,ebp
c0027916:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002791a:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c002791e:	88 c2                	mov    dl,al
c0027920:	88 d9                	mov    cl,bl
c0027922:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0027926:	0f b7 c2             	movzx  eax,dx
c0027929:	09 f8                	or     eax,edi
c002792b:	89 c2                	mov    edx,eax
c002792d:	50                   	push   eax
c002792e:	50                   	push   eax
c002792f:	51                   	push   ecx
c0027930:	52                   	push   edx
c0027931:	e8 8d 35 ff ff       	call   c001aec3 <datetimeToSeconds(datetime_t)>
c0027936:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c002793a:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0027940:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0027946:	83 c4 4c             	add    esp,0x4c
c0027949:	5b                   	pop    ebx
c002794a:	5e                   	pop    esi
c002794b:	5f                   	pop    edi
c002794c:	5d                   	pop    ebp
c002794d:	c3                   	ret    

c002794e <RTC::setTimeInDatetimeUTC(datetime_t)>:
c002794e:	55                   	push   ebp
c002794f:	57                   	push   edi
c0027950:	56                   	push   esi
c0027951:	53                   	push   ebx
c0027952:	83 ec 30             	sub    esp,0x30
c0027955:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0027959:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c002795d:	6a 00                	push   0x0
c002795f:	6a 00                	push   0x0
c0027961:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027967:	e8 2e e2 fe ff       	call   c0015b9a <Computer::writeCMOS(unsigned char, unsigned char)>
c002796c:	83 c4 0c             	add    esp,0xc
c002796f:	6a 00                	push   0x0
c0027971:	6a 02                	push   0x2
c0027973:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027979:	e8 1c e2 fe ff       	call   c0015b9a <Computer::writeCMOS(unsigned char, unsigned char)>
c002797e:	31 d2                	xor    edx,edx
c0027980:	89 f9                	mov    ecx,edi
c0027982:	89 f8                	mov    eax,edi
c0027984:	c1 e9 10             	shr    ecx,0x10
c0027987:	0f b6 c4             	movzx  eax,ah
c002798a:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c002798e:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0027992:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0027996:	b9 64 00 00 00       	mov    ecx,0x64
c002799b:	89 f0                	mov    eax,esi
c002799d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00279a1:	89 f0                	mov    eax,esi
c00279a3:	0f b6 c4             	movzx  eax,ah
c00279a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00279aa:	89 f0                	mov    eax,esi
c00279ac:	c1 e8 10             	shr    eax,0x10
c00279af:	f7 f1                	div    ecx
c00279b1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00279b5:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00279b9:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00279bd:	59                   	pop    ecx
c00279be:	5b                   	pop    ebx
c00279bf:	89 fb                	mov    ebx,edi
c00279c1:	6a 0b                	push   0xb
c00279c3:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279c9:	e8 b2 e0 fe ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c00279ce:	83 c4 10             	add    esp,0x10
c00279d1:	89 c5                	mov    ebp,eax
c00279d3:	a8 04                	test   al,0x4
c00279d5:	75 6e                	jne    c0027a45 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c00279d7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00279db:	31 d2                	xor    edx,edx
c00279dd:	0f b6 c1             	movzx  eax,cl
c00279e0:	b9 0a 00 00 00       	mov    ecx,0xa
c00279e5:	f7 f1                	div    ecx
c00279e7:	c1 e0 04             	shl    eax,0x4
c00279ea:	09 d0                	or     eax,edx
c00279ec:	31 d2                	xor    edx,edx
c00279ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00279f2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00279f7:	f7 f1                	div    ecx
c00279f9:	c1 e0 04             	shl    eax,0x4
c00279fc:	09 d0                	or     eax,edx
c00279fe:	31 d2                	xor    edx,edx
c0027a00:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027a04:	0f b6 c3             	movzx  eax,bl
c0027a07:	f7 f1                	div    ecx
c0027a09:	c1 e0 04             	shl    eax,0x4
c0027a0c:	09 d0                	or     eax,edx
c0027a0e:	31 d2                	xor    edx,edx
c0027a10:	89 c3                	mov    ebx,eax
c0027a12:	89 f0                	mov    eax,esi
c0027a14:	0f b6 c0             	movzx  eax,al
c0027a17:	f7 f1                	div    ecx
c0027a19:	c1 e0 04             	shl    eax,0x4
c0027a1c:	09 d0                	or     eax,edx
c0027a1e:	31 d2                	xor    edx,edx
c0027a20:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0027a24:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027a29:	f7 f1                	div    ecx
c0027a2b:	c1 e0 04             	shl    eax,0x4
c0027a2e:	09 d0                	or     eax,edx
c0027a30:	31 d2                	xor    edx,edx
c0027a32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027a36:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027a3a:	f7 f1                	div    ecx
c0027a3c:	c1 e0 04             	shl    eax,0x4
c0027a3f:	09 d0                	or     eax,edx
c0027a41:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0027a45:	83 e5 02             	and    ebp,0x2
c0027a48:	75 1e                	jne    c0027a68 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027a4a:	0f b6 c3             	movzx  eax,bl
c0027a4d:	83 f8 0b             	cmp    eax,0xb
c0027a50:	76 10                	jbe    c0027a62 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0027a52:	8d 53 f4             	lea    edx,[ebx-0xc]
c0027a55:	88 d3                	mov    bl,dl
c0027a57:	84 d2                	test   dl,dl
c0027a59:	75 02                	jne    c0027a5d <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0027a5b:	b3 0c                	mov    bl,0xc
c0027a5d:	83 cb 80             	or     ebx,0xffffff80
c0027a60:	eb 06                	jmp    c0027a68 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027a62:	85 c0                	test   eax,eax
c0027a64:	75 02                	jne    c0027a68 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027a66:	b3 0c                	mov    bl,0xc
c0027a68:	0f b6 db             	movzx  ebx,bl
c0027a6b:	50                   	push   eax
c0027a6c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0027a71:	52                   	push   edx
c0027a72:	6a 00                	push   0x0
c0027a74:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027a7a:	e8 1b e1 fe ff       	call   c0015b9a <Computer::writeCMOS(unsigned char, unsigned char)>
c0027a7f:	83 c4 0c             	add    esp,0xc
c0027a82:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027a87:	50                   	push   eax
c0027a88:	6a 02                	push   0x2
c0027a8a:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027a90:	e8 05 e1 fe ff       	call   c0015b9a <Computer::writeCMOS(unsigned char, unsigned char)>
c0027a95:	83 c4 0c             	add    esp,0xc
c0027a98:	53                   	push   ebx
c0027a99:	6a 04                	push   0x4
c0027a9b:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027aa1:	e8 f4 e0 fe ff       	call   c0015b9a <Computer::writeCMOS(unsigned char, unsigned char)>
c0027aa6:	83 c4 0c             	add    esp,0xc
c0027aa9:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0027aae:	52                   	push   edx
c0027aaf:	6a 07                	push   0x7
c0027ab1:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027ab7:	e8 de e0 fe ff       	call   c0015b9a <Computer::writeCMOS(unsigned char, unsigned char)>
c0027abc:	83 c4 0c             	add    esp,0xc
c0027abf:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0027ac4:	50                   	push   eax
c0027ac5:	6a 08                	push   0x8
c0027ac7:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027acd:	e8 c8 e0 fe ff       	call   c0015b9a <Computer::writeCMOS(unsigned char, unsigned char)>
c0027ad2:	83 c4 0c             	add    esp,0xc
c0027ad5:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0027ada:	55                   	push   ebp
c0027adb:	6a 09                	push   0x9
c0027add:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027ae3:	e8 b2 e0 fe ff       	call   c0015b9a <Computer::writeCMOS(unsigned char, unsigned char)>
c0027ae8:	5a                   	pop    edx
c0027ae9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0027aed:	e8 7c fb ff ff       	call   c002766e <RTC::completeRTCRefresh()>
c0027af2:	83 c4 3c             	add    esp,0x3c
c0027af5:	b0 01                	mov    al,0x1
c0027af7:	5b                   	pop    ebx
c0027af8:	5e                   	pop    esi
c0027af9:	5f                   	pop    edi
c0027afa:	5d                   	pop    ebp
c0027afb:	c3                   	ret    

c0027afc <rtcIRQHandler(regs*, void*)>:
c0027afc:	53                   	push   ebx
c0027afd:	83 ec 10             	sub    esp,0x10
c0027b00:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027b04:	6a 0c                	push   0xc
c0027b06:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027b0c:	e8 6f df fe ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c0027b11:	83 c4 10             	add    esp,0x10
c0027b14:	a8 80                	test   al,0x80
c0027b16:	74 24                	je     c0027b3c <rtcIRQHandler(regs*, void*)+0x40>
c0027b18:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0027b1f:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0027b26:	66 ff 05 78 02 04 c0 	inc    WORD PTR ds:0xc0040278
c0027b2d:	75 0d                	jne    c0027b3c <rtcIRQHandler(regs*, void*)+0x40>
c0027b2f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0027b33:	83 c4 08             	add    esp,0x8
c0027b36:	5b                   	pop    ebx
c0027b37:	e9 32 fb ff ff       	jmp    c002766e <RTC::completeRTCRefresh()>
c0027b3c:	83 c4 08             	add    esp,0x8
c0027b3f:	5b                   	pop    ebx
c0027b40:	c3                   	ret    
c0027b41:	90                   	nop

c0027b42 <RTC::RTC()>:
c0027b42:	83 ec 1c             	sub    esp,0x1c
c0027b45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027b49:	83 ec 08             	sub    esp,0x8
c0027b4c:	68 cb 32 03 c0       	push   0xc00332cb
c0027b51:	50                   	push   eax
c0027b52:	e8 47 32 ff ff       	call   c001ad9e <Clock::Clock(char const*)>
c0027b57:	83 c4 10             	add    esp,0x10
c0027b5a:	ba e8 32 03 c0       	mov    edx,0xc00332e8
c0027b5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027b63:	89 10                	mov    DWORD PTR [eax],edx
c0027b65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027b69:	83 ec 0c             	sub    esp,0xc
c0027b6c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027b70:	6a 01                	push   0x1
c0027b72:	68 fc 7a 02 c0       	push   0xc0027afc
c0027b77:	6a 08                	push   0x8
c0027b79:	50                   	push   eax
c0027b7a:	e8 fb 36 ff ff       	call   c001b27a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0027b7f:	83 c4 20             	add    esp,0x20
c0027b82:	89 c2                	mov    edx,eax
c0027b84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027b88:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0027b8e:	fa                   	cli    
c0027b8f:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027b94:	83 c0 01             	add    eax,0x1
c0027b97:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0027b9c:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027ba1:	83 ec 08             	sub    esp,0x8
c0027ba4:	6a 0b                	push   0xb
c0027ba6:	50                   	push   eax
c0027ba7:	e8 d4 de fe ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c0027bac:	83 c4 10             	add    esp,0x10
c0027baf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0027bb3:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027bb8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0027bbc:	83 ca 10             	or     edx,0x10
c0027bbf:	0f b6 d2             	movzx  edx,dl
c0027bc2:	83 ec 04             	sub    esp,0x4
c0027bc5:	52                   	push   edx
c0027bc6:	6a 0b                	push   0xb
c0027bc8:	50                   	push   eax
c0027bc9:	e8 cc df fe ff       	call   c0015b9a <Computer::writeCMOS(unsigned char, unsigned char)>
c0027bce:	83 c4 10             	add    esp,0x10
c0027bd1:	83 ec 0c             	sub    esp,0xc
c0027bd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027bd8:	e8 91 fa ff ff       	call   c002766e <RTC::completeRTCRefresh()>
c0027bdd:	83 c4 10             	add    esp,0x10
c0027be0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027be5:	83 e8 01             	sub    eax,0x1
c0027be8:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0027bed:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027bf2:	85 c0                	test   eax,eax
c0027bf4:	75 01                	jne    c0027bf7 <RTC::RTC()+0xb5>
c0027bf6:	fb                   	sti    
c0027bf7:	90                   	nop
c0027bf8:	83 c4 1c             	add    esp,0x1c
c0027bfb:	c3                   	ret    

c0027bfc <HalConsoleScroll(int, int)>:
c0027bfc:	83 ec 10             	sub    esp,0x10
c0027bff:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0027c07:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0027c0f:	90                   	nop
c0027c10:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0027c15:	0f 8f e1 00 00 00    	jg     c0027cfc <HalConsoleScroll(int, int)+0x100>
c0027c1b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0027c23:	90                   	nop
c0027c24:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0027c2c:	0f 8f be 00 00 00    	jg     c0027cf0 <HalConsoleScroll(int, int)+0xf4>
c0027c32:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027c36:	89 d0                	mov    eax,edx
c0027c38:	c1 e0 02             	shl    eax,0x2
c0027c3b:	01 d0                	add    eax,edx
c0027c3d:	c1 e0 05             	shl    eax,0x5
c0027c40:	89 c2                	mov    edx,eax
c0027c42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027c46:	01 d0                	add    eax,edx
c0027c48:	89 c2                	mov    edx,eax
c0027c4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027c4e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0027c51:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027c55:	89 d0                	mov    eax,edx
c0027c57:	c1 e0 02             	shl    eax,0x2
c0027c5a:	01 d0                	add    eax,edx
c0027c5c:	c1 e0 05             	shl    eax,0x5
c0027c5f:	89 c2                	mov    edx,eax
c0027c61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027c65:	01 d0                	add    eax,edx
c0027c67:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0027c6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027c71:	01 c2                	add    edx,eax
c0027c73:	8a 01                	mov    al,BYTE PTR [ecx]
c0027c75:	88 02                	mov    BYTE PTR [edx],al
c0027c77:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0027c7c:	75 66                	jne    c0027ce4 <HalConsoleScroll(int, int)+0xe8>
c0027c7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027c82:	83 e0 01             	and    eax,0x1
c0027c85:	74 39                	je     c0027cc0 <HalConsoleScroll(int, int)+0xc4>
c0027c87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027c8b:	83 e0 0f             	and    eax,0xf
c0027c8e:	88 c2                	mov    dl,al
c0027c90:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027c94:	c1 e0 04             	shl    eax,0x4
c0027c97:	09 d0                	or     eax,edx
c0027c99:	88 c1                	mov    cl,al
c0027c9b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027c9f:	89 d0                	mov    eax,edx
c0027ca1:	c1 e0 02             	shl    eax,0x2
c0027ca4:	01 d0                	add    eax,edx
c0027ca6:	c1 e0 05             	shl    eax,0x5
c0027ca9:	89 c2                	mov    edx,eax
c0027cab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027caf:	01 d0                	add    eax,edx
c0027cb1:	89 c2                	mov    edx,eax
c0027cb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027cb7:	01 d0                	add    eax,edx
c0027cb9:	88 ca                	mov    dl,cl
c0027cbb:	88 10                	mov    BYTE PTR [eax],dl
c0027cbd:	eb 25                	jmp    c0027ce4 <HalConsoleScroll(int, int)+0xe8>
c0027cbf:	90                   	nop
c0027cc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027cc4:	89 d0                	mov    eax,edx
c0027cc6:	c1 e0 02             	shl    eax,0x2
c0027cc9:	01 d0                	add    eax,edx
c0027ccb:	c1 e0 05             	shl    eax,0x5
c0027cce:	89 c2                	mov    edx,eax
c0027cd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027cd4:	01 d0                	add    eax,edx
c0027cd6:	89 c2                	mov    edx,eax
c0027cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027cdc:	01 d0                	add    eax,edx
c0027cde:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0027ce1:	8d 76 00             	lea    esi,[esi+0x0]
c0027ce4:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0027ce9:	e9 36 ff ff ff       	jmp    c0027c24 <HalConsoleScroll(int, int)+0x28>
c0027cee:	66 90                	xchg   ax,ax
c0027cf0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0027cf5:	e9 16 ff ff ff       	jmp    c0027c10 <HalConsoleScroll(int, int)+0x14>
c0027cfa:	66 90                	xchg   ax,ax
c0027cfc:	90                   	nop
c0027cfd:	83 c4 10             	add    esp,0x10
c0027d00:	c3                   	ret    
c0027d01:	8d 76 00             	lea    esi,[esi+0x0]

c0027d04 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0027d04:	83 ec 14             	sub    esp,0x14
c0027d07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027d0b:	88 04 24             	mov    BYTE PTR [esp],al
c0027d0e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0027d11:	0f b6 c0             	movzx  eax,al
c0027d14:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027d18:	89 d1                	mov    ecx,edx
c0027d1a:	83 e1 0f             	and    ecx,0xf
c0027d1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0027d21:	c1 e2 04             	shl    edx,0x4
c0027d24:	0f b6 d2             	movzx  edx,dl
c0027d27:	09 ca                	or     edx,ecx
c0027d29:	c1 e2 08             	shl    edx,0x8
c0027d2c:	09 d0                	or     eax,edx
c0027d2e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0027d33:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0027d3b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027d3f:	89 d0                	mov    eax,edx
c0027d41:	c1 e0 02             	shl    eax,0x2
c0027d44:	01 d0                	add    eax,edx
c0027d46:	c1 e0 04             	shl    eax,0x4
c0027d49:	89 c2                	mov    edx,eax
c0027d4b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0027d4f:	01 d0                	add    eax,edx
c0027d51:	01 c0                	add    eax,eax
c0027d53:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0027d57:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027d5b:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0027d60:	66 89 02             	mov    WORD PTR [edx],ax
c0027d63:	90                   	nop
c0027d64:	83 c4 14             	add    esp,0x14
c0027d67:	c3                   	ret    

c0027d68 <HalConsoleCursorUpdate(int, int)>:
c0027d68:	83 ec 20             	sub    esp,0x20
c0027d6b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027d6f:	89 c2                	mov    edx,eax
c0027d71:	c1 e2 02             	shl    edx,0x2
c0027d74:	01 d0                	add    eax,edx
c0027d76:	c1 e0 04             	shl    eax,0x4
c0027d79:	89 c2                	mov    edx,eax
c0027d7b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0027d7f:	01 d0                	add    eax,edx
c0027d81:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0027d86:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0027d8d:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0027d92:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0027d96:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0027d9a:	ee                   	out    dx,al
c0027d9b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0027da0:	0f b6 c0             	movzx  eax,al
c0027da3:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0027daa:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0027dae:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0027db2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027db6:	ee                   	out    dx,al
c0027db7:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0027dbe:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0027dc3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0027dc7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027dcb:	ee                   	out    dx,al
c0027dcc:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0027dd1:	c1 e8 08             	shr    eax,0x8
c0027dd4:	0f b6 c0             	movzx  eax,al
c0027dd7:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0027dde:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0027de2:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0027de6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027dea:	ee                   	out    dx,al
c0027deb:	90                   	nop
c0027dec:	83 c4 20             	add    esp,0x20
c0027def:	c3                   	ret    

c0027df0 <FAT::getName()>:
c0027df0:	b8 1c 33 03 c0       	mov    eax,0xc003331c
c0027df5:	c3                   	ret    
c0027df6:	66 90                	xchg   ax,ax

c0027df8 <FAT::tell(void*, unsigned long long*)>:
c0027df8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0027dfd:	75 09                	jne    c0027e08 <FAT::tell(void*, unsigned long long*)+0x10>
c0027dff:	b8 04 00 00 00       	mov    eax,0x4
c0027e04:	c3                   	ret    
c0027e05:	8d 76 00             	lea    esi,[esi+0x0]
c0027e08:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0027e0d:	75 09                	jne    c0027e18 <FAT::tell(void*, unsigned long long*)+0x20>
c0027e0f:	b8 04 00 00 00       	mov    eax,0x4
c0027e14:	c3                   	ret    
c0027e15:	8d 76 00             	lea    esi,[esi+0x0]
c0027e18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027e1c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0027e1f:	ba 00 00 00 00       	mov    edx,0x0
c0027e24:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0027e28:	89 01                	mov    DWORD PTR [ecx],eax
c0027e2a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0027e2d:	b8 00 00 00 00       	mov    eax,0x0
c0027e32:	c3                   	ret    
c0027e33:	90                   	nop

c0027e34 <FAT::stat(void*, unsigned long long*)>:
c0027e34:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0027e39:	75 09                	jne    c0027e44 <FAT::stat(void*, unsigned long long*)+0x10>
c0027e3b:	b8 04 00 00 00       	mov    eax,0x4
c0027e40:	c3                   	ret    
c0027e41:	8d 76 00             	lea    esi,[esi+0x0]
c0027e44:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0027e49:	75 09                	jne    c0027e54 <FAT::stat(void*, unsigned long long*)+0x20>
c0027e4b:	b8 04 00 00 00       	mov    eax,0x4
c0027e50:	c3                   	ret    
c0027e51:	8d 76 00             	lea    esi,[esi+0x0]
c0027e54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027e58:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0027e5b:	ba 00 00 00 00       	mov    edx,0x0
c0027e60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0027e64:	89 01                	mov    DWORD PTR [ecx],eax
c0027e66:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0027e69:	b8 00 00 00 00       	mov    eax,0x0
c0027e6e:	c3                   	ret    
c0027e6f:	90                   	nop

c0027e70 <FAT::~FAT()>:
c0027e70:	83 ec 0c             	sub    esp,0xc
c0027e73:	ba 68 33 03 c0       	mov    edx,0xc0033368
c0027e78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e7c:	89 10                	mov    DWORD PTR [eax],edx
c0027e7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e82:	83 ec 0c             	sub    esp,0xc
c0027e85:	50                   	push   eax
c0027e86:	e8 4b 22 ff ff       	call   c001a0d6 <Filesystem::~Filesystem()>
c0027e8b:	83 c4 10             	add    esp,0x10
c0027e8e:	90                   	nop
c0027e8f:	83 c4 0c             	add    esp,0xc
c0027e92:	c3                   	ret    
c0027e93:	90                   	nop

c0027e94 <FAT::~FAT()>:
c0027e94:	83 ec 0c             	sub    esp,0xc
c0027e97:	83 ec 0c             	sub    esp,0xc
c0027e9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027e9e:	e8 cd ff ff ff       	call   c0027e70 <FAT::~FAT()>
c0027ea3:	83 c4 10             	add    esp,0x10
c0027ea6:	83 ec 08             	sub    esp,0x8
c0027ea9:	6a 08                	push   0x8
c0027eab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027eaf:	e8 6c 12 ff ff       	call   c0019120 <operator delete(void*, unsigned long)>
c0027eb4:	83 c4 10             	add    esp,0x10
c0027eb7:	83 c4 0c             	add    esp,0xc
c0027eba:	c3                   	ret    
c0027ebb:	90                   	nop

c0027ebc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0027ebc:	83 ec 1c             	sub    esp,0x1c
c0027ebf:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0027ec6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0027ecb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027ecf:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027ed6:	83 f8 ff             	cmp    eax,0xffffffff
c0027ed9:	75 35                	jne    c0027f10 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0027edb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027edf:	88 c2                	mov    dl,al
c0027ee1:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027ee6:	01 d0                	add    eax,edx
c0027ee8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0027eec:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c0027ef2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027ef6:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0027efd:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027f02:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027f06:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0027f0d:	eb 19                	jmp    c0027f28 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0027f0f:	90                   	nop
c0027f10:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027f14:	88 c2                	mov    dl,al
c0027f16:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027f1a:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027f21:	01 d0                	add    eax,edx
c0027f23:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0027f27:	90                   	nop
c0027f28:	83 ec 04             	sub    esp,0x4
c0027f2b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0027f2f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0027f33:	8d 44 24 15          	lea    eax,[esp+0x15]
c0027f37:	50                   	push   eax
c0027f38:	e8 46 d2 fd ff       	call   c0005183 <f_getlabel>
c0027f3d:	83 c4 10             	add    esp,0x10
c0027f40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027f44:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0027f49:	75 09                	jne    c0027f54 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0027f4b:	b8 00 00 00 00       	mov    eax,0x0
c0027f50:	eb 0a                	jmp    c0027f5c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0027f52:	66 90                	xchg   ax,ax
c0027f54:	b8 01 00 00 00       	mov    eax,0x1
c0027f59:	8d 76 00             	lea    esi,[esi+0x0]
c0027f5c:	83 c4 1c             	add    esp,0x1c
c0027f5f:	c3                   	ret    

c0027f60 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0027f60:	57                   	push   edi
c0027f61:	83 ec 58             	sub    esp,0x58
c0027f64:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0027f6c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0027f70:	b8 00 00 00 00       	mov    eax,0x0
c0027f75:	b9 0f 00 00 00       	mov    ecx,0xf
c0027f7a:	fc                   	cld    
c0027f7b:	89 d7                	mov    edi,edx
c0027f7d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0027f7f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0027f83:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027f8a:	83 f8 ff             	cmp    eax,0xffffffff
c0027f8d:	75 35                	jne    c0027fc4 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0027f8f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027f93:	88 c2                	mov    dl,al
c0027f95:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027f9a:	01 d0                	add    eax,edx
c0027f9c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0027fa0:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c0027fa6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0027faa:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0027fb1:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027fb6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0027fba:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0027fc1:	eb 19                	jmp    c0027fdc <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0027fc3:	90                   	nop
c0027fc4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027fc8:	88 c2                	mov    dl,al
c0027fca:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0027fce:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027fd5:	01 d0                	add    eax,edx
c0027fd7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0027fdb:	90                   	nop
c0027fdc:	83 ec 08             	sub    esp,0x8
c0027fdf:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0027fe3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0027fe7:	50                   	push   eax
c0027fe8:	e8 53 88 fd ff       	call   c0000840 <strcat>
c0027fed:	83 c4 10             	add    esp,0x10
c0027ff0:	83 ec 0c             	sub    esp,0xc
c0027ff3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0027ff7:	50                   	push   eax
c0027ff8:	e8 d7 d2 fd ff       	call   c00052d4 <f_setlabel>
c0027ffd:	83 c4 10             	add    esp,0x10
c0028000:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0028004:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0028009:	75 09                	jne    c0028014 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c002800b:	b8 00 00 00 00       	mov    eax,0x0
c0028010:	eb 0a                	jmp    c002801c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0028012:	66 90                	xchg   ax,ax
c0028014:	b8 01 00 00 00       	mov    eax,0x1
c0028019:	8d 76 00             	lea    esi,[esi+0x0]
c002801c:	83 c4 58             	add    esp,0x58
c002801f:	5f                   	pop    edi
c0028020:	c3                   	ret    
c0028021:	90                   	nop
c0028022:	66 90                	xchg   ax,ax

c0028024 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0028024:	83 ec 2c             	sub    esp,0x2c
c0028027:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002802f:	83 ec 08             	sub    esp,0x8
c0028032:	68 40 33 03 c0       	push   0xc0033340
c0028037:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002803b:	e8 10 87 fd ff       	call   c0000750 <strcmp>
c0028040:	83 c4 10             	add    esp,0x10
c0028043:	85 c0                	test   eax,eax
c0028045:	0f 94 c0             	sete   al
c0028048:	0f b6 c0             	movzx  eax,al
c002804b:	85 c0                	test   eax,eax
c002804d:	74 0d                	je     c002805c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c002804f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0028057:	e9 c0 00 00 00       	jmp    c002811c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c002805c:	83 ec 08             	sub    esp,0x8
c002805f:	68 32 33 03 c0       	push   0xc0033332
c0028064:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028068:	e8 e3 86 fd ff       	call   c0000750 <strcmp>
c002806d:	83 c4 10             	add    esp,0x10
c0028070:	85 c0                	test   eax,eax
c0028072:	0f 94 c0             	sete   al
c0028075:	0f b6 c0             	movzx  eax,al
c0028078:	85 c0                	test   eax,eax
c002807a:	74 10                	je     c002808c <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c002807c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0028084:	e9 93 00 00 00       	jmp    c002811c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0028089:	8d 76 00             	lea    esi,[esi+0x0]
c002808c:	83 ec 08             	sub    esp,0x8
c002808f:	68 38 33 03 c0       	push   0xc0033338
c0028094:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028098:	e8 b3 86 fd ff       	call   c0000750 <strcmp>
c002809d:	83 c4 10             	add    esp,0x10
c00280a0:	85 c0                	test   eax,eax
c00280a2:	0f 94 c0             	sete   al
c00280a5:	0f b6 c0             	movzx  eax,al
c00280a8:	85 c0                	test   eax,eax
c00280aa:	74 0c                	je     c00280b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c00280ac:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00280b4:	eb 66                	jmp    c002811c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00280b6:	66 90                	xchg   ax,ax
c00280b8:	83 ec 08             	sub    esp,0x8
c00280bb:	68 ec f4 02 c0       	push   0xc002f4ec
c00280c0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00280c4:	e8 87 86 fd ff       	call   c0000750 <strcmp>
c00280c9:	83 c4 10             	add    esp,0x10
c00280cc:	85 c0                	test   eax,eax
c00280ce:	0f 94 c0             	sete   al
c00280d1:	0f b6 c0             	movzx  eax,al
c00280d4:	85 c0                	test   eax,eax
c00280d6:	74 0c                	je     c00280e4 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00280d8:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00280e0:	eb 3a                	jmp    c002811c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00280e2:	66 90                	xchg   ax,ax
c00280e4:	83 ec 08             	sub    esp,0x8
c00280e7:	68 3e 33 03 c0       	push   0xc003333e
c00280ec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00280f0:	e8 5b 86 fd ff       	call   c0000750 <strcmp>
c00280f5:	83 c4 10             	add    esp,0x10
c00280f8:	85 c0                	test   eax,eax
c00280fa:	0f 94 c0             	sete   al
c00280fd:	0f b6 c0             	movzx  eax,al
c0028100:	85 c0                	test   eax,eax
c0028102:	74 0c                	je     c0028110 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0028104:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c002810c:	eb 0e                	jmp    c002811c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c002810e:	66 90                	xchg   ax,ax
c0028110:	b8 08 00 00 00       	mov    eax,0x8
c0028115:	e9 ea 00 00 00       	jmp    c0028204 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c002811a:	66 90                	xchg   ax,ax
c002811c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0028123:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0028128:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002812c:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028133:	83 f8 ff             	cmp    eax,0xffffffff
c0028136:	75 34                	jne    c002816c <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0028138:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002813c:	88 c2                	mov    dl,al
c002813e:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028143:	01 d0                	add    eax,edx
c0028145:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0028149:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c002814f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028153:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c002815a:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c002815f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0028163:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c002816a:	eb 18                	jmp    c0028184 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c002816c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0028170:	88 c2                	mov    dl,al
c0028172:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028176:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c002817d:	01 d0                	add    eax,edx
c002817f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0028183:	90                   	nop
c0028184:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0028188:	88 04 24             	mov    BYTE PTR [esp],al
c002818b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002818f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028193:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002819b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00281a0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00281a8:	83 ec 0c             	sub    esp,0xc
c00281ab:	68 00 20 00 00       	push   0x2000
c00281b0:	e8 09 e2 fe ff       	call   c00163be <malloc>
c00281b5:	83 c4 10             	add    esp,0x10
c00281b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00281bc:	68 00 20 00 00       	push   0x2000
c00281c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00281c5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00281c9:	50                   	push   eax
c00281ca:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00281ce:	50                   	push   eax
c00281cf:	e8 fd d3 fd ff       	call   c00055d1 <f_mkfs>
c00281d4:	83 c4 10             	add    esp,0x10
c00281d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00281db:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00281e0:	75 0a                	jne    c00281ec <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00281e2:	b8 00 00 00 00       	mov    eax,0x0
c00281e7:	eb 1b                	jmp    c0028204 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00281e9:	8d 76 00             	lea    esi,[esi+0x0]
c00281ec:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00281f1:	75 09                	jne    c00281fc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00281f3:	b8 09 00 00 00       	mov    eax,0x9
c00281f8:	eb 0a                	jmp    c0028204 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00281fa:	66 90                	xchg   ax,ax
c00281fc:	b8 01 00 00 00       	mov    eax,0x1
c0028201:	8d 76 00             	lea    esi,[esi+0x0]
c0028204:	83 c4 2c             	add    esp,0x2c
c0028207:	c3                   	ret    

c0028208 <FAT::tryMount(LogicalDisk*, int)>:
c0028208:	81 ec 4c 03 00 00    	sub    esp,0x34c
c002820e:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028213:	83 f8 14             	cmp    eax,0x14
c0028216:	75 18                	jne    c0028230 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0028218:	83 ec 0c             	sub    esp,0xc
c002821b:	68 44 33 03 c0       	push   0xc0033344
c0028220:	e8 41 80 ff ff       	call   c0020266 <KePanic(char const*)>
c0028225:	83 c4 10             	add    esp,0x10
c0028228:	b0 00                	mov    al,0x0
c002822a:	e9 ed 01 00 00       	jmp    c002841c <FAT::tryMount(LogicalDisk*, int)+0x214>
c002822f:	90                   	nop
c0028230:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0028237:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002823d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0028243:	3d 00 02 00 00       	cmp    eax,0x200
c0028248:	74 0a                	je     c0028254 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c002824a:	b0 00                	mov    al,0x0
c002824c:	e9 cb 01 00 00       	jmp    c002841c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028251:	8d 76 00             	lea    esi,[esi+0x0]
c0028254:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c002825c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0028263:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c002826a:	83 f8 ff             	cmp    eax,0xffffffff
c002826d:	74 09                	je     c0028278 <FAT::tryMount(LogicalDisk*, int)+0x70>
c002826f:	b0 01                	mov    al,0x1
c0028271:	e9 a6 01 00 00       	jmp    c002841c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028276:	66 90                	xchg   ax,ax
c0028278:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0028282:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c002828a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0028291:	88 c2                	mov    dl,al
c0028293:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028298:	01 d0                	add    eax,edx
c002829a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00282a1:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c00282a7:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00282ae:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c00282b5:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c00282ba:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00282c1:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c00282c8:	83 ec 0c             	sub    esp,0xc
c00282cb:	68 34 02 00 00       	push   0x234
c00282d0:	e8 e9 e0 fe ff       	call   c00163be <malloc>
c00282d5:	83 c4 10             	add    esp,0x10
c00282d8:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00282df:	83 ec 04             	sub    esp,0x4
c00282e2:	6a 00                	push   0x0
c00282e4:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00282eb:	50                   	push   eax
c00282ec:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00282f3:	e8 b4 ba fd ff       	call   c0003dac <f_mount>
c00282f8:	83 c4 10             	add    esp,0x10
c00282fb:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0028302:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c002830a:	74 1c                	je     c0028328 <FAT::tryMount(LogicalDisk*, int)+0x120>
c002830c:	83 ec 0c             	sub    esp,0xc
c002830f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0028316:	e8 c3 e0 fe ff       	call   c00163de <rfree>
c002831b:	83 c4 10             	add    esp,0x10
c002831e:	b0 00                	mov    al,0x0
c0028320:	e9 f7 00 00 00       	jmp    c002841c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028325:	8d 76 00             	lea    esi,[esi+0x0]
c0028328:	83 ec 04             	sub    esp,0x4
c002832b:	68 00 01 00 00       	push   0x100
c0028330:	6a 00                	push   0x0
c0028332:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0028339:	50                   	push   eax
c002833a:	e8 b1 81 fd ff       	call   c00004f0 <memset>
c002833f:	83 c4 10             	add    esp,0x10
c0028342:	83 ec 08             	sub    esp,0x8
c0028345:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c002834c:	50                   	push   eax
c002834d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0028354:	50                   	push   eax
c0028355:	e8 e6 84 fd ff       	call   c0000840 <strcat>
c002835a:	83 c4 10             	add    esp,0x10
c002835d:	83 ec 08             	sub    esp,0x8
c0028360:	68 52 33 03 c0       	push   0xc0033352
c0028365:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c002836c:	50                   	push   eax
c002836d:	e8 ce 84 fd ff       	call   c0000840 <strcat>
c0028372:	83 c4 10             	add    esp,0x10
c0028375:	83 ec 04             	sub    esp,0x4
c0028378:	6a 01                	push   0x1
c002837a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0028381:	50                   	push   eax
c0028382:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028386:	50                   	push   eax
c0028387:	e8 82 ba fd ff       	call   c0003e0e <f_open>
c002838c:	83 c4 10             	add    esp,0x10
c002838f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0028396:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c002839d:	85 c0                	test   eax,eax
c002839f:	74 0b                	je     c00283ac <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00283a1:	78 31                	js     c00283d4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00283a3:	83 e8 04             	sub    eax,0x4
c00283a6:	83 f8 01             	cmp    eax,0x1
c00283a9:	77 29                	ja     c00283d4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00283ab:	90                   	nop
c00283ac:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00283b4:	83 ec 0c             	sub    esp,0xc
c00283b7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00283bb:	50                   	push   eax
c00283bc:	e8 1c c2 fd ff       	call   c00045dd <f_close>
c00283c1:	83 c4 10             	add    esp,0x10
c00283c4:	90                   	nop
c00283c5:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c00283cd:	85 c0                	test   eax,eax
c00283cf:	74 43                	je     c0028414 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c00283d1:	eb 31                	jmp    c0028404 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00283d3:	90                   	nop
c00283d4:	83 ec 0c             	sub    esp,0xc
c00283d7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00283de:	e8 fb df fe ff       	call   c00163de <rfree>
c00283e3:	83 c4 10             	add    esp,0x10
c00283e6:	83 ec 04             	sub    esp,0x4
c00283e9:	6a 00                	push   0x0
c00283eb:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00283f2:	50                   	push   eax
c00283f3:	6a 00                	push   0x0
c00283f5:	e8 b2 b9 fd ff       	call   c0003dac <f_mount>
c00283fa:	83 c4 10             	add    esp,0x10
c00283fd:	b0 00                	mov    al,0x0
c00283ff:	eb 1b                	jmp    c002841c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028401:	8d 76 00             	lea    esi,[esi+0x0]
c0028404:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028409:	83 c0 01             	add    eax,0x1
c002840c:	a3 80 02 04 c0       	mov    ds:0xc0040280,eax
c0028411:	8d 76 00             	lea    esi,[esi+0x0]
c0028414:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c002841b:	90                   	nop
c002841c:	81 c4 4c 03 00 00    	add    esp,0x34c
c0028422:	c3                   	ret    
c0028423:	90                   	nop

c0028424 <FAT::allocateSwapfile(char const*, int)>:
c0028424:	55                   	push   ebp
c0028425:	57                   	push   edi
c0028426:	56                   	push   esi
c0028427:	53                   	push   ebx
c0028428:	81 ec 3c 04 00 00    	sub    esp,0x43c
c002842e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0028439:	83 ec 0c             	sub    esp,0xc
c002843c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0028443:	e8 76 df fe ff       	call   c00163be <malloc>
c0028448:	83 c4 10             	add    esp,0x10
c002844b:	89 c7                	mov    edi,eax
c002844d:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0028452:	83 ec 04             	sub    esp,0x4
c0028455:	50                   	push   eax
c0028456:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c002845d:	57                   	push   edi
c002845e:	e8 f1 1f ff ff       	call   c001a454 <File::File(char const*, Process*)>
c0028463:	83 c4 10             	add    esp,0x10
c0028466:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c002846d:	83 ec 04             	sub    esp,0x4
c0028470:	8d 44 24 13          	lea    eax,[esp+0x13]
c0028474:	50                   	push   eax
c0028475:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028479:	50                   	push   eax
c002847a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028481:	e8 ee 22 ff ff       	call   c001a774 <File::stat(unsigned long long*, bool*)>
c0028486:	83 c4 10             	add    esp,0x10
c0028489:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0028490:	c1 e0 14             	shl    eax,0x14
c0028493:	89 c7                	mov    edi,eax
c0028495:	89 c5                	mov    ebp,eax
c0028497:	c1 fd 1f             	sar    ebp,0x1f
c002849a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002849e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284a2:	89 f9                	mov    ecx,edi
c00284a4:	31 c1                	xor    ecx,eax
c00284a6:	89 cb                	mov    ebx,ecx
c00284a8:	89 e9                	mov    ecx,ebp
c00284aa:	31 d1                	xor    ecx,edx
c00284ac:	89 ce                	mov    esi,ecx
c00284ae:	89 f0                	mov    eax,esi
c00284b0:	09 d8                	or     eax,ebx
c00284b2:	0f 84 9c 00 00 00    	je     c0028554 <FAT::allocateSwapfile(char const*, int)+0x130>
c00284b8:	83 ec 0c             	sub    esp,0xc
c00284bb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00284c2:	e8 79 21 ff ff       	call   c001a640 <File::unlink()>
c00284c7:	83 c4 10             	add    esp,0x10
c00284ca:	83 ec 08             	sub    esp,0x8
c00284cd:	6a 12                	push   0x12
c00284cf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00284d6:	e8 97 1f ff ff       	call   c001a472 <File::open(FileOpenMode)>
c00284db:	83 c4 10             	add    esp,0x10
c00284de:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00284e5:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00284eb:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00284f2:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00284f9:	c1 e0 14             	shl    eax,0x14
c00284fc:	83 ec 04             	sub    esp,0x4
c00284ff:	6a 01                	push   0x1
c0028501:	50                   	push   eax
c0028502:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0028509:	e8 56 cf fd ff       	call   c0005464 <f_expand>
c002850e:	83 c4 10             	add    esp,0x10
c0028511:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028518:	8b 00                	mov    eax,DWORD PTR [eax]
c002851a:	83 c0 10             	add    eax,0x10
c002851d:	8b 00                	mov    eax,DWORD PTR [eax]
c002851f:	83 ec 0c             	sub    esp,0xc
c0028522:	8d 54 24 24          	lea    edx,[esp+0x24]
c0028526:	52                   	push   edx
c0028527:	8d 54 24 30          	lea    edx,[esp+0x30]
c002852b:	52                   	push   edx
c002852c:	6a 00                	push   0x0
c002852e:	68 00 04 00 00       	push   0x400
c0028533:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c002853a:	ff d0                	call   eax
c002853c:	83 c4 20             	add    esp,0x20
c002853f:	83 ec 0c             	sub    esp,0xc
c0028542:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028549:	e8 82 1f ff ff       	call   c001a4d0 <File::close()>
c002854e:	83 c4 10             	add    esp,0x10
c0028551:	8d 76 00             	lea    esi,[esi+0x0]
c0028554:	83 ec 08             	sub    esp,0x8
c0028557:	6a 01                	push   0x1
c0028559:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028560:	e8 0d 1f ff ff       	call   c001a472 <File::open(FileOpenMode)>
c0028565:	83 c4 10             	add    esp,0x10
c0028568:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c002856f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028571:	83 c0 0c             	add    eax,0xc
c0028574:	8b 00                	mov    eax,DWORD PTR [eax]
c0028576:	83 ec 0c             	sub    esp,0xc
c0028579:	8d 54 24 24          	lea    edx,[esp+0x24]
c002857d:	52                   	push   edx
c002857e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0028582:	52                   	push   edx
c0028583:	6a 00                	push   0x0
c0028585:	6a 04                	push   0x4
c0028587:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c002858e:	ff d0                	call   eax
c0028590:	83 c4 20             	add    esp,0x20
c0028593:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c002859a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00285a0:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00285a7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00285ae:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00285b1:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00285b8:	83 ec 0c             	sub    esp,0xc
c00285bb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00285c2:	e8 09 1f ff ff       	call   c001a4d0 <File::close()>
c00285c7:	83 c4 10             	add    esp,0x10
c00285ca:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00285d1:	ba 00 00 00 00       	mov    edx,0x0
c00285d6:	81 c4 3c 04 00 00    	add    esp,0x43c
c00285dc:	5b                   	pop    ebx
c00285dd:	5e                   	pop    esi
c00285de:	5f                   	pop    edi
c00285df:	5d                   	pop    ebp
c00285e0:	c3                   	ret    
c00285e1:	90                   	nop
c00285e2:	66 90                	xchg   ax,ax

c00285e4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00285e4:	57                   	push   edi
c00285e5:	56                   	push   esi
c00285e6:	53                   	push   ebx
c00285e7:	81 ec 50 02 00 00    	sub    esp,0x250
c00285ed:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00285f5:	74 0d                	je     c0028604 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00285f7:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00285ff:	75 0f                	jne    c0028610 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0028601:	8d 76 00             	lea    esi,[esi+0x0]
c0028604:	b8 04 00 00 00       	mov    eax,0x4
c0028609:	e9 3a 01 00 00       	jmp    c0028748 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c002860e:	66 90                	xchg   ax,ax
c0028610:	83 ec 08             	sub    esp,0x8
c0028613:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c002861a:	50                   	push   eax
c002861b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0028622:	e8 83 c2 fd ff       	call   c00048aa <f_readdir>
c0028627:	83 c4 10             	add    esp,0x10
c002862a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0028631:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0028638:	83 ec 0c             	sub    esp,0xc
c002863b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0028642:	83 c0 16             	add    eax,0x16
c0028645:	50                   	push   eax
c0028646:	e8 25 7f fd ff       	call   c0000570 <strlen>
c002864b:	83 c4 10             	add    esp,0x10
c002864e:	ba 00 00 00 00       	mov    edx,0x0
c0028653:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028657:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c002865b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0028662:	0f b6 c0             	movzx  eax,al
c0028665:	83 e0 10             	and    eax,0x10
c0028668:	74 0a                	je     c0028674 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c002866a:	b8 02 00 00 00       	mov    eax,0x2
c002866f:	eb 0b                	jmp    c002867c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0028671:	8d 76 00             	lea    esi,[esi+0x0]
c0028674:	b8 01 00 00 00       	mov    eax,0x1
c0028679:	8d 76 00             	lea    esi,[esi+0x0]
c002867c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028680:	83 ec 08             	sub    esp,0x8
c0028683:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c002868a:	83 c0 16             	add    eax,0x16
c002868d:	50                   	push   eax
c002868e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028692:	83 c0 10             	add    eax,0x10
c0028695:	50                   	push   eax
c0028696:	e8 a5 7f fd ff       	call   c0000640 <strcpy>
c002869b:	83 c4 10             	add    esp,0x10
c002869e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00286a5:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00286ac:	8d 44 24 08          	lea    eax,[esp+0x8]
c00286b0:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00286b7:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00286be:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00286c5:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00286cc:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00286d3:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00286da:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00286e1:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00286e8:	89 c6                	mov    esi,eax
c00286ea:	89 d7                	mov    edi,edx
c00286ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00286ee:	89 c8                	mov    eax,ecx
c00286f0:	89 fa                	mov    edx,edi
c00286f2:	89 f3                	mov    ebx,esi
c00286f4:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00286fb:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0028702:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0028709:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0028710:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0028716:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c002871d:	0f be c0             	movsx  eax,al
c0028720:	85 c0                	test   eax,eax
c0028722:	75 08                	jne    c002872c <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0028724:	b8 07 00 00 00       	mov    eax,0x7
c0028729:	eb 1d                	jmp    c0028748 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c002872b:	90                   	nop
c002872c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0028733:	85 c0                	test   eax,eax
c0028735:	75 09                	jne    c0028740 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0028737:	b8 00 00 00 00       	mov    eax,0x0
c002873c:	eb 0a                	jmp    c0028748 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c002873e:	66 90                	xchg   ax,ax
c0028740:	b8 01 00 00 00       	mov    eax,0x1
c0028745:	8d 76 00             	lea    esi,[esi+0x0]
c0028748:	81 c4 50 02 00 00    	add    esp,0x250
c002874e:	5b                   	pop    ebx
c002874f:	5e                   	pop    esi
c0028750:	5f                   	pop    edi
c0028751:	c3                   	ret    
c0028752:	66 90                	xchg   ax,ax

c0028754 <FAT::read(void*, unsigned long, void*, int*)>:
c0028754:	83 ec 1c             	sub    esp,0x1c
c0028757:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002875c:	74 0a                	je     c0028768 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c002875e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0028763:	75 0b                	jne    c0028770 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0028765:	8d 76 00             	lea    esi,[esi+0x0]
c0028768:	b8 04 00 00 00       	mov    eax,0x4
c002876d:	eb 41                	jmp    c00287b0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c002876f:	90                   	nop
c0028770:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028774:	50                   	push   eax
c0028775:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028779:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002877d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028781:	e8 4b b9 fd ff       	call   c00040d1 <f_read>
c0028786:	83 c4 10             	add    esp,0x10
c0028789:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002878d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028791:	89 c2                	mov    edx,eax
c0028793:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0028797:	89 10                	mov    DWORD PTR [eax],edx
c0028799:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002879d:	85 c0                	test   eax,eax
c002879f:	75 07                	jne    c00287a8 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00287a1:	b8 00 00 00 00       	mov    eax,0x0
c00287a6:	eb 08                	jmp    c00287b0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00287a8:	b8 01 00 00 00       	mov    eax,0x1
c00287ad:	8d 76 00             	lea    esi,[esi+0x0]
c00287b0:	83 c4 1c             	add    esp,0x1c
c00287b3:	c3                   	ret    

c00287b4 <FAT::write(void*, unsigned long, void*, int*)>:
c00287b4:	83 ec 1c             	sub    esp,0x1c
c00287b7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00287bc:	74 0a                	je     c00287c8 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00287be:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00287c3:	75 0b                	jne    c00287d0 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00287c5:	8d 76 00             	lea    esi,[esi+0x0]
c00287c8:	b8 04 00 00 00       	mov    eax,0x4
c00287cd:	eb 41                	jmp    c0028810 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00287cf:	90                   	nop
c00287d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00287d4:	50                   	push   eax
c00287d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00287d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00287dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00287e1:	e8 ea ba fd ff       	call   c00042d0 <f_write>
c00287e6:	83 c4 10             	add    esp,0x10
c00287e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00287ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00287f1:	89 c2                	mov    edx,eax
c00287f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00287f7:	89 10                	mov    DWORD PTR [eax],edx
c00287f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00287fd:	85 c0                	test   eax,eax
c00287ff:	75 07                	jne    c0028808 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0028801:	b8 00 00 00 00       	mov    eax,0x0
c0028806:	eb 08                	jmp    c0028810 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0028808:	b8 01 00 00 00       	mov    eax,0x1
c002880d:	8d 76 00             	lea    esi,[esi+0x0]
c0028810:	83 c4 1c             	add    esp,0x1c
c0028813:	c3                   	ret    

c0028814 <FAT::close(void*)>:
c0028814:	83 ec 1c             	sub    esp,0x1c
c0028817:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002881c:	75 0a                	jne    c0028828 <FAT::close(void*)+0x14>
c002881e:	b8 04 00 00 00       	mov    eax,0x4
c0028823:	eb 3f                	jmp    c0028864 <FAT::close(void*)+0x50>
c0028825:	8d 76 00             	lea    esi,[esi+0x0]
c0028828:	83 ec 0c             	sub    esp,0xc
c002882b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002882f:	e8 a9 bd fd ff       	call   c00045dd <f_close>
c0028834:	83 c4 10             	add    esp,0x10
c0028837:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002883b:	83 ec 0c             	sub    esp,0xc
c002883e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028842:	e8 87 db fe ff       	call   c00163ce <free>
c0028847:	83 c4 10             	add    esp,0x10
c002884a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002884e:	85 c0                	test   eax,eax
c0028850:	75 0a                	jne    c002885c <FAT::close(void*)+0x48>
c0028852:	b8 00 00 00 00       	mov    eax,0x0
c0028857:	eb 0b                	jmp    c0028864 <FAT::close(void*)+0x50>
c0028859:	8d 76 00             	lea    esi,[esi+0x0]
c002885c:	b8 01 00 00 00       	mov    eax,0x1
c0028861:	8d 76 00             	lea    esi,[esi+0x0]
c0028864:	83 c4 1c             	add    esp,0x1c
c0028867:	c3                   	ret    

c0028868 <FAT::closeDir(void*)>:
c0028868:	83 ec 1c             	sub    esp,0x1c
c002886b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028870:	75 0a                	jne    c002887c <FAT::closeDir(void*)+0x14>
c0028872:	b8 04 00 00 00       	mov    eax,0x4
c0028877:	eb 3f                	jmp    c00288b8 <FAT::closeDir(void*)+0x50>
c0028879:	8d 76 00             	lea    esi,[esi+0x0]
c002887c:	83 ec 0c             	sub    esp,0xc
c002887f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028883:	e8 00 c0 fd ff       	call   c0004888 <f_closedir>
c0028888:	83 c4 10             	add    esp,0x10
c002888b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002888f:	83 ec 0c             	sub    esp,0xc
c0028892:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028896:	e8 33 db fe ff       	call   c00163ce <free>
c002889b:	83 c4 10             	add    esp,0x10
c002889e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00288a2:	85 c0                	test   eax,eax
c00288a4:	75 0a                	jne    c00288b0 <FAT::closeDir(void*)+0x48>
c00288a6:	b8 00 00 00 00       	mov    eax,0x0
c00288ab:	eb 0b                	jmp    c00288b8 <FAT::closeDir(void*)+0x50>
c00288ad:	8d 76 00             	lea    esi,[esi+0x0]
c00288b0:	b8 01 00 00 00       	mov    eax,0x1
c00288b5:	8d 76 00             	lea    esi,[esi+0x0]
c00288b8:	83 c4 1c             	add    esp,0x1c
c00288bb:	c3                   	ret    

c00288bc <FAT::truncate(void*, unsigned long long)>:
c00288bc:	83 ec 2c             	sub    esp,0x2c
c00288bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00288c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00288c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00288cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00288cf:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00288d4:	75 0a                	jne    c00288e0 <FAT::truncate(void*, unsigned long long)+0x24>
c00288d6:	b8 04 00 00 00       	mov    eax,0x4
c00288db:	eb 47                	jmp    c0028924 <FAT::truncate(void*, unsigned long long)+0x68>
c00288dd:	8d 76 00             	lea    esi,[esi+0x0]
c00288e0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00288e4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00288e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00288eb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00288f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00288f7:	83 ec 08             	sub    esp,0x8
c00288fa:	50                   	push   eax
c00288fb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00288ff:	e8 08 bd fd ff       	call   c000460c <f_lseek>
c0028904:	83 c4 10             	add    esp,0x10
c0028907:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002890b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002890f:	85 c0                	test   eax,eax
c0028911:	75 09                	jne    c002891c <FAT::truncate(void*, unsigned long long)+0x60>
c0028913:	b8 00 00 00 00       	mov    eax,0x0
c0028918:	eb 0a                	jmp    c0028924 <FAT::truncate(void*, unsigned long long)+0x68>
c002891a:	66 90                	xchg   ax,ax
c002891c:	b8 01 00 00 00       	mov    eax,0x1
c0028921:	8d 76 00             	lea    esi,[esi+0x0]
c0028924:	83 c4 2c             	add    esp,0x2c
c0028927:	c3                   	ret    

c0028928 <FAT::seek(void*, unsigned long long)>:
c0028928:	83 ec 2c             	sub    esp,0x2c
c002892b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002892f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028933:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0028937:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002893b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0028940:	75 0a                	jne    c002894c <FAT::seek(void*, unsigned long long)+0x24>
c0028942:	b8 04 00 00 00       	mov    eax,0x4
c0028947:	eb 33                	jmp    c002897c <FAT::seek(void*, unsigned long long)+0x54>
c0028949:	8d 76 00             	lea    esi,[esi+0x0]
c002894c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028950:	83 ec 08             	sub    esp,0x8
c0028953:	50                   	push   eax
c0028954:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028958:	e8 af bc fd ff       	call   c000460c <f_lseek>
c002895d:	83 c4 10             	add    esp,0x10
c0028960:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0028964:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0028968:	85 c0                	test   eax,eax
c002896a:	75 08                	jne    c0028974 <FAT::seek(void*, unsigned long long)+0x4c>
c002896c:	b8 00 00 00 00       	mov    eax,0x0
c0028971:	eb 09                	jmp    c002897c <FAT::seek(void*, unsigned long long)+0x54>
c0028973:	90                   	nop
c0028974:	b8 01 00 00 00       	mov    eax,0x1
c0028979:	8d 76 00             	lea    esi,[esi+0x0]
c002897c:	83 c4 2c             	add    esp,0x2c
c002897f:	c3                   	ret    

c0028980 <fatWrapperReadDisk>:
c0028980:	53                   	push   ebx
c0028981:	83 ec 18             	sub    esp,0x18
c0028984:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028988:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002898c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028991:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0028998:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002899c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00289a0:	ba 00 00 00 00       	mov    edx,0x0
c00289a5:	83 ec 0c             	sub    esp,0xc
c00289a8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00289ac:	53                   	push   ebx
c00289ad:	52                   	push   edx
c00289ae:	50                   	push   eax
c00289af:	51                   	push   ecx
c00289b0:	e8 0b 3d ff ff       	call   c001c6c0 <LogicalDisk::read(unsigned long long, int, void*)>
c00289b5:	83 c4 20             	add    esp,0x20
c00289b8:	83 c4 18             	add    esp,0x18
c00289bb:	5b                   	pop    ebx
c00289bc:	c3                   	ret    
c00289bd:	8d 76 00             	lea    esi,[esi+0x0]

c00289c0 <fatWrapperWriteDisk>:
c00289c0:	53                   	push   ebx
c00289c1:	83 ec 18             	sub    esp,0x18
c00289c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00289c8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00289cc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00289d1:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c00289d8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00289dc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00289e0:	ba 00 00 00 00       	mov    edx,0x0
c00289e5:	83 ec 0c             	sub    esp,0xc
c00289e8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00289ec:	53                   	push   ebx
c00289ed:	52                   	push   edx
c00289ee:	50                   	push   eax
c00289ef:	51                   	push   ecx
c00289f0:	e8 37 3d ff ff       	call   c001c72c <LogicalDisk::write(unsigned long long, int, void*)>
c00289f5:	83 c4 20             	add    esp,0x20
c00289f8:	83 c4 18             	add    esp,0x18
c00289fb:	5b                   	pop    ebx
c00289fc:	c3                   	ret    
c00289fd:	8d 76 00             	lea    esi,[esi+0x0]

c0028a00 <fatWrapperIoctl>:
c0028a00:	53                   	push   ebx
c0028a01:	83 ec 28             	sub    esp,0x28
c0028a04:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0028a08:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028a0c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0028a10:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0028a14:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028a19:	83 f8 02             	cmp    eax,0x2
c0028a1c:	75 32                	jne    c0028a50 <fatWrapperIoctl+0x50>
c0028a1e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028a22:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0028a26:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028a2b:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0028a32:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028a38:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0028a3e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0028a42:	66 89 02             	mov    WORD PTR [edx],ax
c0028a45:	b8 00 00 00 00       	mov    eax,0x0
c0028a4a:	e9 c5 00 00 00       	jmp    c0028b14 <fatWrapperIoctl+0x114>
c0028a4f:	90                   	nop
c0028a50:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028a55:	83 f8 01             	cmp    eax,0x1
c0028a58:	75 6a                	jne    c0028ac4 <fatWrapperIoctl+0xc4>
c0028a5a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028a5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0028a62:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028a67:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0028a6e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028a74:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0028a7a:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0028a80:	89 c8                	mov    eax,ecx
c0028a82:	89 da                	mov    edx,ebx
c0028a84:	0f a4 c2 0a          	shld   edx,eax,0xa
c0028a88:	c1 e0 0a             	shl    eax,0xa
c0028a8b:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0028a90:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c0028a97:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0028a9d:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0028aa3:	89 cb                	mov    ebx,ecx
c0028aa5:	c1 fb 1f             	sar    ebx,0x1f
c0028aa8:	53                   	push   ebx
c0028aa9:	51                   	push   ecx
c0028aaa:	52                   	push   edx
c0028aab:	50                   	push   eax
c0028aac:	e8 af 5b 00 00       	call   c002e660 <__udivdi3>
c0028ab1:	83 c4 10             	add    esp,0x10
c0028ab4:	89 c2                	mov    edx,eax
c0028ab6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0028aba:	89 10                	mov    DWORD PTR [eax],edx
c0028abc:	b8 00 00 00 00       	mov    eax,0x0
c0028ac1:	eb 51                	jmp    c0028b14 <fatWrapperIoctl+0x114>
c0028ac3:	90                   	nop
c0028ac4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028ac9:	85 c0                	test   eax,eax
c0028acb:	75 07                	jne    c0028ad4 <fatWrapperIoctl+0xd4>
c0028acd:	b8 00 00 00 00       	mov    eax,0x0
c0028ad2:	eb 40                	jmp    c0028b14 <fatWrapperIoctl+0x114>
c0028ad4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028ad9:	83 f8 03             	cmp    eax,0x3
c0028adc:	75 1a                	jne    c0028af8 <fatWrapperIoctl+0xf8>
c0028ade:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028ae2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028ae6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028aea:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0028af0:	b8 00 00 00 00       	mov    eax,0x0
c0028af5:	eb 1d                	jmp    c0028b14 <fatWrapperIoctl+0x114>
c0028af7:	90                   	nop
c0028af8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028afd:	83 f8 04             	cmp    eax,0x4
c0028b00:	75 0a                	jne    c0028b0c <fatWrapperIoctl+0x10c>
c0028b02:	b8 00 00 00 00       	mov    eax,0x0
c0028b07:	eb 0b                	jmp    c0028b14 <fatWrapperIoctl+0x114>
c0028b09:	8d 76 00             	lea    esi,[esi+0x0]
c0028b0c:	b8 04 00 00 00       	mov    eax,0x4
c0028b11:	8d 76 00             	lea    esi,[esi+0x0]
c0028b14:	83 c4 28             	add    esp,0x28
c0028b17:	5b                   	pop    ebx
c0028b18:	c3                   	ret    
c0028b19:	90                   	nop
c0028b1a:	66 90                	xchg   ax,ax

c0028b1c <FAT::FAT()>:
c0028b1c:	83 ec 1c             	sub    esp,0x1c
c0028b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028b23:	83 ec 0c             	sub    esp,0xc
c0028b26:	50                   	push   eax
c0028b27:	e8 86 15 ff ff       	call   c001a0b2 <Filesystem::Filesystem()>
c0028b2c:	83 c4 10             	add    esp,0x10
c0028b2f:	ba 68 33 03 c0       	mov    edx,0xc0033368
c0028b34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028b38:	89 10                	mov    DWORD PTR [eax],edx
c0028b3a:	c7 05 80 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040280,0x0
c0028b44:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0028b4c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0028b51:	7f 19                	jg     c0028b6c <FAT::FAT()+0x50>
c0028b53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028b57:	c7 04 85 a0 02 04 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffbfd60],0xffffffff
c0028b62:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0028b67:	eb e3                	jmp    c0028b4c <FAT::FAT()+0x30>
c0028b69:	8d 76 00             	lea    esi,[esi+0x0]
c0028b6c:	90                   	nop
c0028b6d:	83 c4 1c             	add    esp,0x1c
c0028b70:	c3                   	ret    
c0028b71:	90                   	nop
c0028b72:	66 90                	xchg   ax,ax

c0028b74 <FAT::fixFilepath(char*)>:
c0028b74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028b78:	8a 00                	mov    al,BYTE PTR [eax]
c0028b7a:	0f be c0             	movsx  eax,al
c0028b7d:	83 f8 40             	cmp    eax,0x40
c0028b80:	7e 2e                	jle    c0028bb0 <FAT::fixFilepath(char*)+0x3c>
c0028b82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028b86:	8a 00                	mov    al,BYTE PTR [eax]
c0028b88:	83 e8 41             	sub    eax,0x41
c0028b8b:	88 c2                	mov    dl,al
c0028b8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028b91:	88 10                	mov    BYTE PTR [eax],dl
c0028b93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028b97:	8a 00                	mov    al,BYTE PTR [eax]
c0028b99:	0f be c0             	movsx  eax,al
c0028b9c:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028ba3:	83 c0 30             	add    eax,0x30
c0028ba6:	88 c2                	mov    dl,al
c0028ba8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028bac:	88 10                	mov    BYTE PTR [eax],dl
c0028bae:	66 90                	xchg   ax,ax
c0028bb0:	90                   	nop
c0028bb1:	c3                   	ret    
c0028bb2:	66 90                	xchg   ax,ax

c0028bb4 <FAT::open(char const*, void**, FileOpenMode)>:
c0028bb4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028bba:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028bc2:	74 0c                	je     c0028bd0 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0028bc4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0028bcc:	75 0e                	jne    c0028bdc <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0028bce:	66 90                	xchg   ax,ax
c0028bd0:	b8 04 00 00 00       	mov    eax,0x4
c0028bd5:	e9 46 01 00 00       	jmp    c0028d20 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0028bda:	66 90                	xchg   ax,ax
c0028bdc:	83 ec 08             	sub    esp,0x8
c0028bdf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028be6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028bea:	50                   	push   eax
c0028beb:	e8 50 7a fd ff       	call   c0000640 <strcpy>
c0028bf0:	83 c4 10             	add    esp,0x10
c0028bf3:	83 ec 08             	sub    esp,0x8
c0028bf6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0028bfa:	50                   	push   eax
c0028bfb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028c02:	e8 6d ff ff ff       	call   c0028b74 <FAT::fixFilepath(char*)>
c0028c07:	83 c4 10             	add    esp,0x10
c0028c0a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0028c12:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028c19:	83 e0 01             	and    eax,0x1
c0028c1c:	74 12                	je     c0028c30 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0028c1e:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028c25:	83 c8 01             	or     eax,0x1
c0028c28:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028c2f:	90                   	nop
c0028c30:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028c37:	83 e0 04             	and    eax,0x4
c0028c3a:	74 24                	je     c0028c60 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0028c3c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028c43:	83 c8 30             	or     eax,0x30
c0028c46:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028c4d:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028c54:	83 c8 02             	or     eax,0x2
c0028c57:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028c5e:	66 90                	xchg   ax,ax
c0028c60:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028c67:	83 e0 02             	and    eax,0x2
c0028c6a:	74 14                	je     c0028c80 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0028c6c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028c73:	83 c8 02             	or     eax,0x2
c0028c76:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028c7d:	8d 76 00             	lea    esi,[esi+0x0]
c0028c80:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028c87:	83 e0 08             	and    eax,0x8
c0028c8a:	74 14                	je     c0028ca0 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0028c8c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028c93:	83 c8 04             	or     eax,0x4
c0028c96:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0028ca0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028ca7:	83 e0 10             	and    eax,0x10
c0028caa:	74 14                	je     c0028cc0 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0028cac:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028cb3:	83 c8 08             	or     eax,0x8
c0028cb6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028cbd:	8d 76 00             	lea    esi,[esi+0x0]
c0028cc0:	83 ec 0c             	sub    esp,0xc
c0028cc3:	68 28 02 00 00       	push   0x228
c0028cc8:	e8 f1 d6 fe ff       	call   c00163be <malloc>
c0028ccd:	83 c4 10             	add    esp,0x10
c0028cd0:	89 c2                	mov    edx,eax
c0028cd2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028cd9:	89 10                	mov    DWORD PTR [eax],edx
c0028cdb:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0028ce3:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028cea:	8b 00                	mov    eax,DWORD PTR [eax]
c0028cec:	83 ec 04             	sub    esp,0x4
c0028cef:	52                   	push   edx
c0028cf0:	8d 54 24 10          	lea    edx,[esp+0x10]
c0028cf4:	52                   	push   edx
c0028cf5:	50                   	push   eax
c0028cf6:	e8 13 b1 fd ff       	call   c0003e0e <f_open>
c0028cfb:	83 c4 10             	add    esp,0x10
c0028cfe:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0028d05:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0028d0d:	74 09                	je     c0028d18 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0028d0f:	b8 01 00 00 00       	mov    eax,0x1
c0028d14:	eb 0a                	jmp    c0028d20 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0028d16:	66 90                	xchg   ax,ax
c0028d18:	b8 00 00 00 00       	mov    eax,0x0
c0028d1d:	8d 76 00             	lea    esi,[esi+0x0]
c0028d20:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028d26:	c3                   	ret    
c0028d27:	90                   	nop

c0028d28 <FAT::openDir(char const*, void**)>:
c0028d28:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028d2e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028d36:	74 0c                	je     c0028d44 <FAT::openDir(char const*, void**)+0x1c>
c0028d38:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0028d40:	75 0e                	jne    c0028d50 <FAT::openDir(char const*, void**)+0x28>
c0028d42:	66 90                	xchg   ax,ax
c0028d44:	b8 04 00 00 00       	mov    eax,0x4
c0028d49:	e9 82 00 00 00       	jmp    c0028dd0 <FAT::openDir(char const*, void**)+0xa8>
c0028d4e:	66 90                	xchg   ax,ax
c0028d50:	83 ec 08             	sub    esp,0x8
c0028d53:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028d5a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028d5e:	50                   	push   eax
c0028d5f:	e8 dc 78 fd ff       	call   c0000640 <strcpy>
c0028d64:	83 c4 10             	add    esp,0x10
c0028d67:	83 ec 08             	sub    esp,0x8
c0028d6a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028d6e:	50                   	push   eax
c0028d6f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028d76:	e8 f9 fd ff ff       	call   c0028b74 <FAT::fixFilepath(char*)>
c0028d7b:	83 c4 10             	add    esp,0x10
c0028d7e:	83 ec 0c             	sub    esp,0xc
c0028d81:	6a 30                	push   0x30
c0028d83:	e8 36 d6 fe ff       	call   c00163be <malloc>
c0028d88:	83 c4 10             	add    esp,0x10
c0028d8b:	89 c2                	mov    edx,eax
c0028d8d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028d94:	89 10                	mov    DWORD PTR [eax],edx
c0028d96:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028d9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0028d9f:	83 ec 08             	sub    esp,0x8
c0028da2:	8d 54 24 14          	lea    edx,[esp+0x14]
c0028da6:	52                   	push   edx
c0028da7:	50                   	push   eax
c0028da8:	e8 10 ba fd ff       	call   c00047bd <f_opendir>
c0028dad:	83 c4 10             	add    esp,0x10
c0028db0:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0028db7:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0028dbf:	74 07                	je     c0028dc8 <FAT::openDir(char const*, void**)+0xa0>
c0028dc1:	b8 01 00 00 00       	mov    eax,0x1
c0028dc6:	eb 08                	jmp    c0028dd0 <FAT::openDir(char const*, void**)+0xa8>
c0028dc8:	b8 00 00 00 00       	mov    eax,0x0
c0028dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0028dd0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028dd6:	c3                   	ret    
c0028dd7:	90                   	nop

c0028dd8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0028dd8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0028dde:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0028de6:	75 0c                	jne    c0028df4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0028de8:	b8 04 00 00 00       	mov    eax,0x4
c0028ded:	e9 d6 00 00 00       	jmp    c0028ec8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028df2:	66 90                	xchg   ax,ax
c0028df4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0028dfc:	75 0a                	jne    c0028e08 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0028dfe:	b8 04 00 00 00       	mov    eax,0x4
c0028e03:	e9 c0 00 00 00       	jmp    c0028ec8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028e08:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0028e10:	75 0a                	jne    c0028e1c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0028e12:	b8 04 00 00 00       	mov    eax,0x4
c0028e17:	e9 ac 00 00 00       	jmp    c0028ec8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028e1c:	83 ec 08             	sub    esp,0x8
c0028e1f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0028e26:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0028e2d:	50                   	push   eax
c0028e2e:	e8 0d 78 fd ff       	call   c0000640 <strcpy>
c0028e33:	83 c4 10             	add    esp,0x10
c0028e36:	83 ec 08             	sub    esp,0x8
c0028e39:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0028e40:	50                   	push   eax
c0028e41:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0028e48:	e8 27 fd ff ff       	call   c0028b74 <FAT::fixFilepath(char*)>
c0028e4d:	83 c4 10             	add    esp,0x10
c0028e50:	83 ec 08             	sub    esp,0x8
c0028e53:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0028e57:	50                   	push   eax
c0028e58:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0028e5f:	50                   	push   eax
c0028e60:	e8 d7 ba fd ff       	call   c000493c <f_stat>
c0028e65:	83 c4 10             	add    esp,0x10
c0028e68:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0028e6f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0028e76:	85 c0                	test   eax,eax
c0028e78:	74 0a                	je     c0028e84 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0028e7a:	83 f8 04             	cmp    eax,0x4
c0028e7d:	74 39                	je     c0028eb8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0028e7f:	eb 3f                	jmp    c0028ec0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0028e81:	8d 76 00             	lea    esi,[esi+0x0]
c0028e84:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0028e88:	0f b6 c0             	movzx  eax,al
c0028e8b:	83 e0 10             	and    eax,0x10
c0028e8e:	0f 95 c2             	setne  dl
c0028e91:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0028e98:	88 10                	mov    BYTE PTR [eax],dl
c0028e9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e9e:	ba 00 00 00 00       	mov    edx,0x0
c0028ea3:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0028eaa:	89 01                	mov    DWORD PTR [ecx],eax
c0028eac:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0028eaf:	b8 00 00 00 00       	mov    eax,0x0
c0028eb4:	eb 12                	jmp    c0028ec8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028eb6:	66 90                	xchg   ax,ax
c0028eb8:	b8 02 00 00 00       	mov    eax,0x2
c0028ebd:	eb 09                	jmp    c0028ec8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028ebf:	90                   	nop
c0028ec0:	b8 01 00 00 00       	mov    eax,0x1
c0028ec5:	8d 76 00             	lea    esi,[esi+0x0]
c0028ec8:	81 c4 2c 02 00 00    	add    esp,0x22c
c0028ece:	c3                   	ret    
c0028ecf:	90                   	nop

c0028ed0 <FAT::unlink(char const*)>:
c0028ed0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028ed6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028ede:	75 08                	jne    c0028ee8 <FAT::unlink(char const*)+0x18>
c0028ee0:	b8 04 00 00 00       	mov    eax,0x4
c0028ee5:	eb 61                	jmp    c0028f48 <FAT::unlink(char const*)+0x78>
c0028ee7:	90                   	nop
c0028ee8:	83 ec 08             	sub    esp,0x8
c0028eeb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028ef2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028ef6:	50                   	push   eax
c0028ef7:	e8 44 77 fd ff       	call   c0000640 <strcpy>
c0028efc:	83 c4 10             	add    esp,0x10
c0028eff:	83 ec 08             	sub    esp,0x8
c0028f02:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028f06:	50                   	push   eax
c0028f07:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028f0e:	e8 61 fc ff ff       	call   c0028b74 <FAT::fixFilepath(char*)>
c0028f13:	83 c4 10             	add    esp,0x10
c0028f16:	83 ec 0c             	sub    esp,0xc
c0028f19:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028f1d:	50                   	push   eax
c0028f1e:	e8 8b bc fd ff       	call   c0004bae <f_unlink>
c0028f23:	83 c4 10             	add    esp,0x10
c0028f26:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0028f2d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0028f34:	85 c0                	test   eax,eax
c0028f36:	75 08                	jne    c0028f40 <FAT::unlink(char const*)+0x70>
c0028f38:	b8 00 00 00 00       	mov    eax,0x0
c0028f3d:	eb 09                	jmp    c0028f48 <FAT::unlink(char const*)+0x78>
c0028f3f:	90                   	nop
c0028f40:	b8 01 00 00 00       	mov    eax,0x1
c0028f45:	8d 76 00             	lea    esi,[esi+0x0]
c0028f48:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028f4e:	c3                   	ret    
c0028f4f:	90                   	nop

c0028f50 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0028f50:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0028f56:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0028f5d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0028f64:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0028f68:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0028f6c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0028f74:	75 0a                	jne    c0028f80 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0028f76:	b8 04 00 00 00       	mov    eax,0x4
c0028f7b:	e9 7c 01 00 00       	jmp    c00290fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0028f80:	83 ec 08             	sub    esp,0x8
c0028f83:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0028f8a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0028f8e:	50                   	push   eax
c0028f8f:	e8 ac 76 fd ff       	call   c0000640 <strcpy>
c0028f94:	83 c4 10             	add    esp,0x10
c0028f97:	83 ec 08             	sub    esp,0x8
c0028f9a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0028f9e:	50                   	push   eax
c0028f9f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0028fa6:	e8 c9 fb ff ff       	call   c0028b74 <FAT::fixFilepath(char*)>
c0028fab:	83 c4 10             	add    esp,0x10
c0028fae:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0028fb6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0028fbe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028fc3:	83 e0 01             	and    eax,0x1
c0028fc6:	74 14                	je     c0028fdc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c0028fc8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0028fcf:	83 c8 01             	or     eax,0x1
c0028fd2:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0028fd9:	8d 76 00             	lea    esi,[esi+0x0]
c0028fdc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028fe1:	83 e0 02             	and    eax,0x2
c0028fe4:	74 12                	je     c0028ff8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c0028fe6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0028fed:	83 c8 20             	or     eax,0x20
c0028ff0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0028ff7:	90                   	nop
c0028ff8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028ffd:	83 e0 04             	and    eax,0x4
c0029000:	74 12                	je     c0029014 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c0029002:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0029009:	83 c8 04             	or     eax,0x4
c002900c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0029013:	90                   	nop
c0029014:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0029019:	83 e0 08             	and    eax,0x8
c002901c:	74 12                	je     c0029030 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c002901e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0029025:	83 c8 02             	or     eax,0x2
c0029028:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c002902f:	90                   	nop
c0029030:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0029035:	83 e0 01             	and    eax,0x1
c0029038:	74 12                	je     c002904c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c002903a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0029041:	83 c8 01             	or     eax,0x1
c0029044:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c002904b:	90                   	nop
c002904c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0029051:	83 e0 02             	and    eax,0x2
c0029054:	74 12                	je     c0029068 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c0029056:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c002905d:	83 c8 20             	or     eax,0x20
c0029060:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0029067:	90                   	nop
c0029068:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002906d:	83 e0 04             	and    eax,0x4
c0029070:	74 12                	je     c0029084 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c0029072:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0029079:	83 c8 04             	or     eax,0x4
c002907c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0029083:	90                   	nop
c0029084:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0029089:	83 e0 08             	and    eax,0x8
c002908c:	74 12                	je     c00290a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c002908e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0029095:	83 c8 02             	or     eax,0x2
c0029098:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c002909f:	90                   	nop
c00290a0:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c00290a7:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00290ae:	09 d0                	or     eax,edx
c00290b0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00290b7:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00290bf:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00290c7:	83 ec 04             	sub    esp,0x4
c00290ca:	52                   	push   edx
c00290cb:	50                   	push   eax
c00290cc:	8d 44 24 24          	lea    eax,[esp+0x24]
c00290d0:	50                   	push   eax
c00290d1:	e8 4d bf fd ff       	call   c0005023 <f_chmod>
c00290d6:	83 c4 10             	add    esp,0x10
c00290d9:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00290e0:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00290e7:	85 c0                	test   eax,eax
c00290e9:	75 09                	jne    c00290f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c00290eb:	b8 00 00 00 00       	mov    eax,0x0
c00290f0:	eb 0a                	jmp    c00290fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c00290f2:	66 90                	xchg   ax,ax
c00290f4:	b8 01 00 00 00       	mov    eax,0x1
c00290f9:	8d 76 00             	lea    esi,[esi+0x0]
c00290fc:	81 c4 2c 01 00 00    	add    esp,0x12c
c0029102:	c3                   	ret    
c0029103:	90                   	nop

c0029104 <FAT::rename(char const*, char const*)>:
c0029104:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002910a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0029112:	74 0c                	je     c0029120 <FAT::rename(char const*, char const*)+0x1c>
c0029114:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c002911c:	75 0e                	jne    c002912c <FAT::rename(char const*, char const*)+0x28>
c002911e:	66 90                	xchg   ax,ax
c0029120:	b8 04 00 00 00       	mov    eax,0x4
c0029125:	e9 9e 00 00 00       	jmp    c00291c8 <FAT::rename(char const*, char const*)+0xc4>
c002912a:	66 90                	xchg   ax,ax
c002912c:	83 ec 08             	sub    esp,0x8
c002912f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0029136:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002913d:	50                   	push   eax
c002913e:	e8 fd 74 fd ff       	call   c0000640 <strcpy>
c0029143:	83 c4 10             	add    esp,0x10
c0029146:	83 ec 08             	sub    esp,0x8
c0029149:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0029150:	50                   	push   eax
c0029151:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0029158:	e8 17 fa ff ff       	call   c0028b74 <FAT::fixFilepath(char*)>
c002915d:	83 c4 10             	add    esp,0x10
c0029160:	83 ec 08             	sub    esp,0x8
c0029163:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c002916a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002916e:	50                   	push   eax
c002916f:	e8 cc 74 fd ff       	call   c0000640 <strcpy>
c0029174:	83 c4 10             	add    esp,0x10
c0029177:	83 ec 08             	sub    esp,0x8
c002917a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002917e:	50                   	push   eax
c002917f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0029186:	e8 e9 f9 ff ff       	call   c0028b74 <FAT::fixFilepath(char*)>
c002918b:	83 c4 10             	add    esp,0x10
c002918e:	83 ec 08             	sub    esp,0x8
c0029191:	8d 44 24 14          	lea    eax,[esp+0x14]
c0029195:	50                   	push   eax
c0029196:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002919d:	50                   	push   eax
c002919e:	e8 c8 bc fd ff       	call   c0004e6b <f_rename>
c00291a3:	83 c4 10             	add    esp,0x10
c00291a6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00291ad:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00291b4:	85 c0                	test   eax,eax
c00291b6:	75 08                	jne    c00291c0 <FAT::rename(char const*, char const*)+0xbc>
c00291b8:	b8 00 00 00 00       	mov    eax,0x0
c00291bd:	eb 09                	jmp    c00291c8 <FAT::rename(char const*, char const*)+0xc4>
c00291bf:	90                   	nop
c00291c0:	b8 01 00 00 00       	mov    eax,0x1
c00291c5:	8d 76 00             	lea    esi,[esi+0x0]
c00291c8:	81 c4 1c 02 00 00    	add    esp,0x21c
c00291ce:	c3                   	ret    
c00291cf:	90                   	nop

c00291d0 <FAT::mkdir(char const*)>:
c00291d0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00291d6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00291de:	75 08                	jne    c00291e8 <FAT::mkdir(char const*)+0x18>
c00291e0:	b8 04 00 00 00       	mov    eax,0x4
c00291e5:	eb 61                	jmp    c0029248 <FAT::mkdir(char const*)+0x78>
c00291e7:	90                   	nop
c00291e8:	83 ec 08             	sub    esp,0x8
c00291eb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00291f2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00291f6:	50                   	push   eax
c00291f7:	e8 44 74 fd ff       	call   c0000640 <strcpy>
c00291fc:	83 c4 10             	add    esp,0x10
c00291ff:	83 ec 08             	sub    esp,0x8
c0029202:	8d 44 24 14          	lea    eax,[esp+0x14]
c0029206:	50                   	push   eax
c0029207:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002920e:	e8 61 f9 ff ff       	call   c0028b74 <FAT::fixFilepath(char*)>
c0029213:	83 c4 10             	add    esp,0x10
c0029216:	83 ec 0c             	sub    esp,0xc
c0029219:	8d 44 24 18          	lea    eax,[esp+0x18]
c002921d:	50                   	push   eax
c002921e:	e8 ad ba fd ff       	call   c0004cd0 <f_mkdir>
c0029223:	83 c4 10             	add    esp,0x10
c0029226:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002922d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0029234:	85 c0                	test   eax,eax
c0029236:	75 08                	jne    c0029240 <FAT::mkdir(char const*)+0x70>
c0029238:	b8 00 00 00 00       	mov    eax,0x0
c002923d:	eb 09                	jmp    c0029248 <FAT::mkdir(char const*)+0x78>
c002923f:	90                   	nop
c0029240:	b8 01 00 00 00       	mov    eax,0x1
c0029245:	8d 76 00             	lea    esi,[esi+0x0]
c0029248:	81 c4 1c 01 00 00    	add    esp,0x11c
c002924e:	c3                   	ret    
c002924f:	90                   	nop

c0029250 <FAT::exists(char const*)>:
c0029250:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0029256:	83 ec 08             	sub    esp,0x8
c0029259:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0029260:	8d 44 24 10          	lea    eax,[esp+0x10]
c0029264:	50                   	push   eax
c0029265:	e8 d6 73 fd ff       	call   c0000640 <strcpy>
c002926a:	83 c4 10             	add    esp,0x10
c002926d:	83 ec 08             	sub    esp,0x8
c0029270:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0029274:	50                   	push   eax
c0029275:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002927c:	e8 f3 f8 ff ff       	call   c0028b74 <FAT::fixFilepath(char*)>
c0029281:	83 c4 10             	add    esp,0x10
c0029284:	83 ec 08             	sub    esp,0x8
c0029287:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c002928e:	50                   	push   eax
c002928f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0029293:	50                   	push   eax
c0029294:	e8 a3 b6 fd ff       	call   c000493c <f_stat>
c0029299:	83 c4 10             	add    esp,0x10
c002929c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00292a3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00292aa:	85 c0                	test   eax,eax
c00292ac:	75 06                	jne    c00292b4 <FAT::exists(char const*)+0x64>
c00292ae:	b0 01                	mov    al,0x1
c00292b0:	eb 06                	jmp    c00292b8 <FAT::exists(char const*)+0x68>
c00292b2:	66 90                	xchg   ax,ax
c00292b4:	b0 00                	mov    al,0x0
c00292b6:	66 90                	xchg   ax,ax
c00292b8:	81 c4 2c 02 00 00    	add    esp,0x22c
c00292be:	c3                   	ret    
c00292bf:	90                   	nop

c00292c0 <isoReadDiscSectorHelper>:
c00292c0:	83 ec 2c             	sub    esp,0x2c
c00292c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00292c7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00292cb:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00292d0:	83 e8 41             	sub    eax,0x41
c00292d3:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c00292da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00292de:	ba 00 00 00 00       	mov    edx,0x0
c00292e3:	83 ec 0c             	sub    esp,0xc
c00292e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00292ea:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00292ee:	52                   	push   edx
c00292ef:	50                   	push   eax
c00292f0:	51                   	push   ecx
c00292f1:	e8 ca 33 ff ff       	call   c001c6c0 <LogicalDisk::read(unsigned long long, int, void*)>
c00292f6:	83 c4 20             	add    esp,0x20
c00292f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00292fd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0029302:	74 0c                	je     c0029310 <isoReadDiscSectorHelper+0x50>
c0029304:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0029308:	c1 e0 0b             	shl    eax,0xb
c002930b:	eb 0b                	jmp    c0029318 <isoReadDiscSectorHelper+0x58>
c002930d:	8d 76 00             	lea    esi,[esi+0x0]
c0029310:	b8 00 00 00 00       	mov    eax,0x0
c0029315:	8d 76 00             	lea    esi,[esi+0x0]
c0029318:	83 c4 2c             	add    esp,0x2c
c002931b:	c3                   	ret    

c002931c <iso_kprintf>:
c002931c:	83 ec 0c             	sub    esp,0xc
c002931f:	83 ec 08             	sub    esp,0x8
c0029322:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0029326:	68 16 31 03 c0       	push   0xc0033116
c002932b:	e8 1d ff fe ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0029330:	83 c4 10             	add    esp,0x10
c0029333:	90                   	nop
c0029334:	83 c4 0c             	add    esp,0xc
c0029337:	c3                   	ret    

c0029338 <iso_kprintfd>:
c0029338:	83 ec 0c             	sub    esp,0xc
c002933b:	83 ec 08             	sub    esp,0x8
c002933e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0029342:	68 4a 17 03 c0       	push   0xc003174a
c0029347:	e8 01 ff fe ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c002934c:	83 c4 10             	add    esp,0x10
c002934f:	90                   	nop
c0029350:	83 c4 0c             	add    esp,0xc
c0029353:	c3                   	ret    

c0029354 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0029354:	b8 08 00 00 00       	mov    eax,0x8
c0029359:	c3                   	ret    

c002935a <ISO9660::truncate(void*, unsigned long long)>:
c002935a:	b8 01 00 00 00       	mov    eax,0x1
c002935f:	c3                   	ret    

c0029360 <ISO9660::getName()>:
c0029360:	b8 cc 33 03 c0       	mov    eax,0xc00333cc
c0029365:	c3                   	ret    

c0029366 <ISO9660::closeDir(void*)>:
c0029366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002936a:	8b 00                	mov    eax,DWORD PTR [eax]
c002936c:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c002936f:	90                   	nop

c0029370 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0029370:	b8 01 00 00 00       	mov    eax,0x1
c0029375:	c3                   	ret    

c0029376 <ISO9660::unlink(char const*)>:
c0029376:	b8 01 00 00 00       	mov    eax,0x1
c002937b:	c3                   	ret    

c002937c <ISO9660::write(void*, unsigned long, void*, int*)>:
c002937c:	b8 03 00 00 00       	mov    eax,0x3
c0029381:	c3                   	ret    

c0029382 <ISO9660::rename(char const*, char const*)>:
c0029382:	b8 01 00 00 00       	mov    eax,0x1
c0029387:	c3                   	ret    

c0029388 <ISO9660::mkdir(char const*)>:
c0029388:	b8 01 00 00 00       	mov    eax,0x1
c002938d:	c3                   	ret    

c002938e <ISO9660::~ISO9660()>:
c002938e:	83 ec 0c             	sub    esp,0xc
c0029391:	ba 0c 35 03 c0       	mov    edx,0xc003350c
c0029396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002939a:	89 10                	mov    DWORD PTR [eax],edx
c002939c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293a0:	83 ec 0c             	sub    esp,0xc
c00293a3:	50                   	push   eax
c00293a4:	e8 2d 0d ff ff       	call   c001a0d6 <Filesystem::~Filesystem()>
c00293a9:	83 c4 10             	add    esp,0x10
c00293ac:	90                   	nop
c00293ad:	83 c4 0c             	add    esp,0xc
c00293b0:	c3                   	ret    
c00293b1:	90                   	nop

c00293b2 <ISO9660::~ISO9660()>:
c00293b2:	83 ec 0c             	sub    esp,0xc
c00293b5:	83 ec 0c             	sub    esp,0xc
c00293b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293bc:	e8 cd ff ff ff       	call   c002938e <ISO9660::~ISO9660()>
c00293c1:	83 c4 10             	add    esp,0x10
c00293c4:	83 ec 08             	sub    esp,0x8
c00293c7:	6a 08                	push   0x8
c00293c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293cd:	e8 4e fd fe ff       	call   c0019120 <operator delete(void*, unsigned long)>
c00293d2:	83 c4 10             	add    esp,0x10
c00293d5:	83 c4 0c             	add    esp,0xc
c00293d8:	c3                   	ret    
c00293d9:	90                   	nop

c00293da <ISO9660::exists(char const*)>:
c00293da:	83 ec 18             	sub    esp,0x18
c00293dd:	68 e7 33 03 c0       	push   0xc00333e7
c00293e2:	e8 7f 6e ff ff       	call   c0020266 <KePanic(char const*)>
c00293e7:	31 c0                	xor    eax,eax
c00293e9:	83 c4 1c             	add    esp,0x1c
c00293ec:	c3                   	ret    
c00293ed:	90                   	nop

c00293ee <ISO9660::open(char const*, void**, FileOpenMode)>:
c00293ee:	56                   	push   esi
c00293ef:	53                   	push   ebx
c00293f0:	53                   	push   ebx
c00293f1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00293f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00293f9:	85 db                	test   ebx,ebx
c00293fb:	0f 84 ca 00 00 00    	je     c00294cb <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0029401:	85 f6                	test   esi,esi
c0029403:	0f 84 c2 00 00 00    	je     c00294cb <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0029409:	b8 03 00 00 00       	mov    eax,0x3
c002940e:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0029413:	0f 85 b7 00 00 00    	jne    c00294d0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0029419:	8a 0b                	mov    cl,BYTE PTR [ebx]
c002941b:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029422:	38 0d 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,cl
c0029428:	74 1b                	je     c0029445 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c002942a:	85 c0                	test   eax,eax
c002942c:	74 10                	je     c002943e <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c002942e:	83 ec 0c             	sub    esp,0xc
c0029431:	68 05 34 03 c0       	push   0xc0033405
c0029436:	e8 2b 6e ff ff       	call   c0020266 <KePanic(char const*)>
c002943b:	83 c4 10             	add    esp,0x10
c002943e:	8a 03                	mov    al,BYTE PTR [ebx]
c0029440:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c0029445:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029448:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c002944f:	85 c0                	test   eax,eax
c0029451:	74 09                	je     c002945c <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c0029453:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c002945a:	74 48                	je     c00294a4 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c002945c:	83 ec 0c             	sub    esp,0xc
c002945f:	68 15 34 03 c0       	push   0xc0033415
c0029464:	e8 e4 fd fe ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0029469:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c002946c:	83 c4 10             	add    esp,0x10
c002946f:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0029476:	85 c0                	test   eax,eax
c0029478:	74 17                	je     c0029491 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c002947a:	83 ec 0c             	sub    esp,0xc
c002947d:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0029484:	68 35 34 03 c0       	push   0xc0033435
c0029489:	e8 bf fd fe ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c002948e:	83 c4 10             	add    esp,0x10
c0029491:	83 ec 0c             	sub    esp,0xc
c0029494:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c002949b:	50                   	push   eax
c002949c:	e8 59 d7 fd ff       	call   c0006bfa <init_percd>
c00294a1:	83 c4 10             	add    esp,0x10
c00294a4:	83 c3 03             	add    ebx,0x3
c00294a7:	51                   	push   ecx
c00294a8:	51                   	push   ecx
c00294a9:	6a 00                	push   0x0
c00294ab:	53                   	push   ebx
c00294ac:	e8 10 d2 fd ff       	call   c00066c1 <iso_open>
c00294b1:	83 c4 10             	add    esp,0x10
c00294b4:	89 c2                	mov    edx,eax
c00294b6:	b8 01 00 00 00       	mov    eax,0x1
c00294bb:	83 fa ff             	cmp    edx,0xffffffff
c00294be:	74 10                	je     c00294d0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00294c0:	83 c2 32             	add    edx,0x32
c00294c3:	31 c0                	xor    eax,eax
c00294c5:	01 d2                	add    edx,edx
c00294c7:	89 16                	mov    DWORD PTR [esi],edx
c00294c9:	eb 05                	jmp    c00294d0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00294cb:	b8 04 00 00 00       	mov    eax,0x4
c00294d0:	5a                   	pop    edx
c00294d1:	5b                   	pop    ebx
c00294d2:	5e                   	pop    esi
c00294d3:	c3                   	ret    

c00294d4 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00294d4:	53                   	push   ebx
c00294d5:	83 ec 08             	sub    esp,0x8
c00294d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00294dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00294e0:	85 c0                	test   eax,eax
c00294e2:	74 2d                	je     c0029511 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00294e4:	85 db                	test   ebx,ebx
c00294e6:	74 29                	je     c0029511 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00294e8:	b9 02 00 00 00       	mov    ecx,0x2
c00294ed:	52                   	push   edx
c00294ee:	99                   	cdq    
c00294ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294f3:	f7 f9                	idiv   ecx
c00294f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00294f9:	83 e8 32             	sub    eax,0x32
c00294fc:	50                   	push   eax
c00294fd:	e8 67 d2 fd ff       	call   c0006769 <iso_read>
c0029502:	83 c4 10             	add    esp,0x10
c0029505:	89 03                	mov    DWORD PTR [ebx],eax
c0029507:	09 d0                	or     eax,edx
c0029509:	0f 94 c0             	sete   al
c002950c:	0f b6 c0             	movzx  eax,al
c002950f:	eb 05                	jmp    c0029516 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0029511:	b8 04 00 00 00       	mov    eax,0x4
c0029516:	83 c4 08             	add    esp,0x8
c0029519:	5b                   	pop    ebx
c002951a:	c3                   	ret    
c002951b:	90                   	nop

c002951c <ISO9660::seek(void*, unsigned long long)>:
c002951c:	57                   	push   edi
c002951d:	56                   	push   esi
c002951e:	b8 04 00 00 00       	mov    eax,0x4
c0029523:	51                   	push   ecx
c0029524:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029528:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002952c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0029530:	85 d2                	test   edx,edx
c0029532:	74 26                	je     c002955a <ISO9660::seek(void*, unsigned long long)+0x3e>
c0029534:	6a 00                	push   0x0
c0029536:	b9 02 00 00 00       	mov    ecx,0x2
c002953b:	57                   	push   edi
c002953c:	89 d0                	mov    eax,edx
c002953e:	56                   	push   esi
c002953f:	99                   	cdq    
c0029540:	f7 f9                	idiv   ecx
c0029542:	83 e8 32             	sub    eax,0x32
c0029545:	50                   	push   eax
c0029546:	e8 34 d3 fd ff       	call   c000687f <iso_seek>
c002954b:	83 c4 10             	add    esp,0x10
c002954e:	31 f0                	xor    eax,esi
c0029550:	31 fa                	xor    edx,edi
c0029552:	09 d0                	or     eax,edx
c0029554:	0f 95 c0             	setne  al
c0029557:	0f b6 c0             	movzx  eax,al
c002955a:	5a                   	pop    edx
c002955b:	5e                   	pop    esi
c002955c:	5f                   	pop    edi
c002955d:	c3                   	ret    

c002955e <ISO9660::tell(void*, unsigned long long*)>:
c002955e:	53                   	push   ebx
c002955f:	83 ec 08             	sub    esp,0x8
c0029562:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0029566:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002956a:	85 c0                	test   eax,eax
c002956c:	74 24                	je     c0029592 <ISO9660::tell(void*, unsigned long long*)+0x34>
c002956e:	85 db                	test   ebx,ebx
c0029570:	74 20                	je     c0029592 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0029572:	83 ec 0c             	sub    esp,0xc
c0029575:	b9 02 00 00 00       	mov    ecx,0x2
c002957a:	99                   	cdq    
c002957b:	f7 f9                	idiv   ecx
c002957d:	83 e8 32             	sub    eax,0x32
c0029580:	50                   	push   eax
c0029581:	e8 7d d3 fd ff       	call   c0006903 <iso_tell>
c0029586:	83 c4 10             	add    esp,0x10
c0029589:	89 03                	mov    DWORD PTR [ebx],eax
c002958b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c002958e:	31 c0                	xor    eax,eax
c0029590:	eb 05                	jmp    c0029597 <ISO9660::tell(void*, unsigned long long*)+0x39>
c0029592:	b8 04 00 00 00       	mov    eax,0x4
c0029597:	83 c4 08             	add    esp,0x8
c002959a:	5b                   	pop    ebx
c002959b:	c3                   	ret    

c002959c <ISO9660::stat(void*, unsigned long long*)>:
c002959c:	53                   	push   ebx
c002959d:	83 ec 14             	sub    esp,0x14
c00295a0:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00295a4:	68 59 34 03 c0       	push   0xc0033459
c00295a9:	e8 9f fc fe ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c00295ae:	83 c4 10             	add    esp,0x10
c00295b1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00295b6:	74 2c                	je     c00295e4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c00295b8:	85 db                	test   ebx,ebx
c00295ba:	74 28                	je     c00295e4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c00295bc:	83 ec 0c             	sub    esp,0xc
c00295bf:	b9 02 00 00 00       	mov    ecx,0x2
c00295c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00295c8:	99                   	cdq    
c00295c9:	f7 f9                	idiv   ecx
c00295cb:	83 e8 32             	sub    eax,0x32
c00295ce:	50                   	push   eax
c00295cf:	e8 60 d3 fd ff       	call   c0006934 <iso_total>
c00295d4:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00295db:	89 03                	mov    DWORD PTR [ebx],eax
c00295dd:	83 c4 10             	add    esp,0x10
c00295e0:	31 c0                	xor    eax,eax
c00295e2:	eb 05                	jmp    c00295e9 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c00295e4:	b8 04 00 00 00       	mov    eax,0x4
c00295e9:	83 c4 08             	add    esp,0x8
c00295ec:	5b                   	pop    ebx
c00295ed:	c3                   	ret    

c00295ee <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00295ee:	55                   	push   ebp
c00295ef:	57                   	push   edi
c00295f0:	56                   	push   esi
c00295f1:	53                   	push   ebx
c00295f2:	83 ec 18             	sub    esp,0x18
c00295f5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00295f9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00295fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0029601:	68 61 34 03 c0       	push   0xc0033461
c0029606:	e8 42 fc fe ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c002960b:	83 c4 10             	add    esp,0x10
c002960e:	85 ff                	test   edi,edi
c0029610:	0f 94 c0             	sete   al
c0029613:	85 f6                	test   esi,esi
c0029615:	0f 94 c2             	sete   dl
c0029618:	09 d0                	or     eax,edx
c002961a:	a8 01                	test   al,0x1
c002961c:	0f 85 dd 00 00 00    	jne    c00296ff <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0029622:	85 db                	test   ebx,ebx
c0029624:	0f 84 d5 00 00 00    	je     c00296ff <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c002962a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002962d:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0029633:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c002963a:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029641:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0029643:	38 0d 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,cl
c0029649:	74 1b                	je     c0029666 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c002964b:	85 c0                	test   eax,eax
c002964d:	74 10                	je     c002965f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c002964f:	83 ec 0c             	sub    esp,0xc
c0029652:	68 05 34 03 c0       	push   0xc0033405
c0029657:	e8 0a 6c ff ff       	call   c0020266 <KePanic(char const*)>
c002965c:	83 c4 10             	add    esp,0x10
c002965f:	8a 03                	mov    al,BYTE PTR [ebx]
c0029661:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c0029666:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029669:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0029670:	85 c0                	test   eax,eax
c0029672:	74 09                	je     c002967d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c0029674:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c002967b:	74 51                	je     c00296ce <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c002967d:	83 ec 0c             	sub    esp,0xc
c0029680:	68 69 34 03 c0       	push   0xc0033469
c0029685:	e8 c3 fb fe ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c002968a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c002968d:	83 c4 10             	add    esp,0x10
c0029690:	83 3c 85 7c f2 03 c0 00 	cmp    DWORD PTR [eax*4-0x3ffc0d84],0x0
c0029698:	74 21                	je     c00296bb <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c002969a:	83 ec 0c             	sub    esp,0xc
c002969d:	68 89 34 03 c0       	push   0xc0033489
c00296a2:	e8 a6 fb fe ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c00296a7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00296aa:	83 c4 10             	add    esp,0x10
c00296ad:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c00296b4:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00296bb:	83 ec 0c             	sub    esp,0xc
c00296be:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00296c5:	50                   	push   eax
c00296c6:	e8 2f d5 fd ff       	call   c0006bfa <init_percd>
c00296cb:	83 c4 10             	add    esp,0x10
c00296ce:	83 c3 03             	add    ebx,0x3
c00296d1:	52                   	push   edx
c00296d2:	52                   	push   edx
c00296d3:	6a 00                	push   0x0
c00296d5:	53                   	push   ebx
c00296d6:	e8 e6 cf fd ff       	call   c00066c1 <iso_open>
c00296db:	83 c4 10             	add    esp,0x10
c00296de:	89 c5                	mov    ebp,eax
c00296e0:	83 f8 ff             	cmp    eax,0xffffffff
c00296e3:	75 21                	jne    c0029706 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c00296e5:	50                   	push   eax
c00296e6:	50                   	push   eax
c00296e7:	6a 01                	push   0x1
c00296e9:	53                   	push   ebx
c00296ea:	e8 d2 cf fd ff       	call   c00066c1 <iso_open>
c00296ef:	83 c4 10             	add    esp,0x10
c00296f2:	ba 02 00 00 00       	mov    edx,0x2
c00296f7:	40                   	inc    eax
c00296f8:	74 2b                	je     c0029725 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c00296fa:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00296fd:	eb 24                	jmp    c0029723 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c00296ff:	ba 04 00 00 00       	mov    edx,0x4
c0029704:	eb 1f                	jmp    c0029725 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0029706:	83 ec 0c             	sub    esp,0xc
c0029709:	50                   	push   eax
c002970a:	e8 25 d2 fd ff       	call   c0006934 <iso_total>
c002970f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0029716:	89 07                	mov    DWORD PTR [edi],eax
c0029718:	89 2c 24             	mov    DWORD PTR [esp],ebp
c002971b:	e8 2b d0 fd ff       	call   c000674b <iso_close>
c0029720:	83 c4 10             	add    esp,0x10
c0029723:	31 d2                	xor    edx,edx
c0029725:	83 c4 0c             	add    esp,0xc
c0029728:	89 d0                	mov    eax,edx
c002972a:	5b                   	pop    ebx
c002972b:	5e                   	pop    esi
c002972c:	5f                   	pop    edi
c002972d:	5d                   	pop    ebp
c002972e:	c3                   	ret    
c002972f:	90                   	nop

c0029730 <ISO9660::close(void*)>:
c0029730:	83 ec 0c             	sub    esp,0xc
c0029733:	b8 04 00 00 00       	mov    eax,0x4
c0029738:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002973c:	85 d2                	test   edx,edx
c002973e:	74 1b                	je     c002975b <ISO9660::close(void*)+0x2b>
c0029740:	83 ec 0c             	sub    esp,0xc
c0029743:	b9 02 00 00 00       	mov    ecx,0x2
c0029748:	89 d0                	mov    eax,edx
c002974a:	99                   	cdq    
c002974b:	f7 f9                	idiv   ecx
c002974d:	83 e8 32             	sub    eax,0x32
c0029750:	50                   	push   eax
c0029751:	e8 f5 cf fd ff       	call   c000674b <iso_close>
c0029756:	83 c4 10             	add    esp,0x10
c0029759:	31 c0                	xor    eax,eax
c002975b:	83 c4 0c             	add    esp,0xc
c002975e:	c3                   	ret    
c002975f:	90                   	nop

c0029760 <ISO9660::openDir(char const*, void**)>:
c0029760:	56                   	push   esi
c0029761:	53                   	push   ebx
c0029762:	50                   	push   eax
c0029763:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0029767:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002976b:	85 db                	test   ebx,ebx
c002976d:	0f 84 bd 00 00 00    	je     c0029830 <ISO9660::openDir(char const*, void**)+0xd0>
c0029773:	85 f6                	test   esi,esi
c0029775:	0f 84 b5 00 00 00    	je     c0029830 <ISO9660::openDir(char const*, void**)+0xd0>
c002977b:	8a 13                	mov    dl,BYTE PTR [ebx]
c002977d:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029784:	38 15 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,dl
c002978a:	74 1b                	je     c00297a7 <ISO9660::openDir(char const*, void**)+0x47>
c002978c:	85 c0                	test   eax,eax
c002978e:	74 10                	je     c00297a0 <ISO9660::openDir(char const*, void**)+0x40>
c0029790:	83 ec 0c             	sub    esp,0xc
c0029793:	68 05 34 03 c0       	push   0xc0033405
c0029798:	e8 c9 6a ff ff       	call   c0020266 <KePanic(char const*)>
c002979d:	83 c4 10             	add    esp,0x10
c00297a0:	8a 03                	mov    al,BYTE PTR [ebx]
c00297a2:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c00297a7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00297aa:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c00297b1:	85 c0                	test   eax,eax
c00297b3:	74 10                	je     c00297c5 <ISO9660::openDir(char const*, void**)+0x65>
c00297b5:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00297bc:	74 1a                	je     c00297d8 <ISO9660::openDir(char const*, void**)+0x78>
c00297be:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00297c5:	83 ec 0c             	sub    esp,0xc
c00297c8:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00297cf:	50                   	push   eax
c00297d0:	e8 25 d4 fd ff       	call   c0006bfa <init_percd>
c00297d5:	83 c4 10             	add    esp,0x10
c00297d8:	83 c3 03             	add    ebx,0x3
c00297db:	50                   	push   eax
c00297dc:	50                   	push   eax
c00297dd:	6a 01                	push   0x1
c00297df:	53                   	push   ebx
c00297e0:	e8 dc ce fd ff       	call   c00066c1 <iso_open>
c00297e5:	83 c4 10             	add    esp,0x10
c00297e8:	89 c3                	mov    ebx,eax
c00297ea:	83 f8 ff             	cmp    eax,0xffffffff
c00297ed:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00297f2:	75 1c                	jne    c0029810 <ISO9660::openDir(char const*, void**)+0xb0>
c00297f4:	53                   	push   ebx
c00297f5:	53                   	push   ebx
c00297f6:	68 ad 34 03 c0       	push   0xc00334ad
c00297fb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029801:	e8 a8 db fe ff       	call   c00173ae <VgaText::puts(char const*)>
c0029806:	83 c4 10             	add    esp,0x10
c0029809:	b8 01 00 00 00       	mov    eax,0x1
c002980e:	eb 25                	jmp    c0029835 <ISO9660::openDir(char const*, void**)+0xd5>
c0029810:	01 db                	add    ebx,ebx
c0029812:	51                   	push   ecx
c0029813:	83 c3 65             	add    ebx,0x65
c0029816:	51                   	push   ecx
c0029817:	68 c0 34 03 c0       	push   0xc00334c0
c002981c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029822:	e8 87 db fe ff       	call   c00173ae <VgaText::puts(char const*)>
c0029827:	89 1e                	mov    DWORD PTR [esi],ebx
c0029829:	83 c4 10             	add    esp,0x10
c002982c:	31 c0                	xor    eax,eax
c002982e:	eb 05                	jmp    c0029835 <ISO9660::openDir(char const*, void**)+0xd5>
c0029830:	b8 04 00 00 00       	mov    eax,0x4
c0029835:	5a                   	pop    edx
c0029836:	5b                   	pop    ebx
c0029837:	5e                   	pop    esi
c0029838:	c3                   	ret    
c0029839:	90                   	nop

c002983a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c002983a:	55                   	push   ebp
c002983b:	57                   	push   edi
c002983c:	56                   	push   esi
c002983d:	53                   	push   ebx
c002983e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0029844:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c002984b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0029852:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c002985a:	0f 84 e7 00 00 00    	je     c0029947 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0029860:	85 db                	test   ebx,ebx
c0029862:	0f 84 df 00 00 00    	je     c0029947 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0029868:	83 ec 0c             	sub    esp,0xc
c002986b:	68 d3 34 03 c0       	push   0xc00334d3
c0029870:	e8 d8 f9 fe ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c0029875:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c002987c:	b9 02 00 00 00       	mov    ecx,0x2
c0029881:	99                   	cdq    
c0029882:	f7 f9                	idiv   ecx
c0029884:	83 e8 32             	sub    eax,0x32
c0029887:	89 04 24             	mov    DWORD PTR [esp],eax
c002988a:	e8 f7 d0 fd ff       	call   c0006986 <iso_readdir>
c002988f:	83 c4 10             	add    esp,0x10
c0029892:	89 c6                	mov    esi,eax
c0029894:	85 c0                	test   eax,eax
c0029896:	75 37                	jne    c00298cf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c0029898:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002989d:	56                   	push   esi
c002989e:	56                   	push   esi
c002989f:	68 de 34 03 c0       	push   0xc00334de
c00298a4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00298aa:	e8 ff da fe ff       	call   c00173ae <VgaText::puts(char const*)>
c00298af:	83 c4 0c             	add    esp,0xc
c00298b2:	68 10 01 00 00       	push   0x110
c00298b7:	6a 00                	push   0x0
c00298b9:	57                   	push   edi
c00298ba:	e8 31 6c fd ff       	call   c00004f0 <memset>
c00298bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00298c5:	83 c4 10             	add    esp,0x10
c00298c8:	b8 01 00 00 00       	mov    eax,0x1
c00298cd:	eb 7d                	jmp    c002994c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c00298cf:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00298d5:	8d 68 08             	lea    ebp,[eax+0x8]
c00298d8:	83 ec 0c             	sub    esp,0xc
c00298db:	55                   	push   ebp
c00298dc:	e8 8f 6c fd ff       	call   c0000570 <strlen>
c00298e1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00298e9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00298ed:	83 c4 10             	add    esp,0x10
c00298f0:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c00298f4:	75 0a                	jne    c0029900 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c00298f6:	b8 02 00 00 00       	mov    eax,0x2
c00298fb:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c00298fe:	74 05                	je     c0029905 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c0029900:	b8 01 00 00 00       	mov    eax,0x1
c0029905:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0029909:	50                   	push   eax
c002990a:	50                   	push   eax
c002990b:	55                   	push   ebp
c002990c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0029910:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0029914:	50                   	push   eax
c0029915:	e8 26 6d fd ff       	call   c0000640 <strcpy>
c002991a:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0029921:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0029923:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0029929:	5a                   	pop    edx
c002992a:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002992f:	59                   	pop    ecx
c0029930:	68 f1 34 03 c0       	push   0xc00334f1
c0029935:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c002993b:	e8 6e da fe ff       	call   c00173ae <VgaText::puts(char const*)>
c0029940:	83 c4 10             	add    esp,0x10
c0029943:	31 c0                	xor    eax,eax
c0029945:	eb 05                	jmp    c002994c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0029947:	b8 04 00 00 00       	mov    eax,0x4
c002994c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0029952:	5b                   	pop    ebx
c0029953:	5e                   	pop    esi
c0029954:	5f                   	pop    edi
c0029955:	5d                   	pop    ebp
c0029956:	c3                   	ret    

c0029957 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0029957:	57                   	push   edi
c0029958:	56                   	push   esi
c0029959:	53                   	push   ebx
c002995a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002995e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0029962:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0029966:	39 35 84 03 04 c0    	cmp    DWORD PTR ds:0xc0040384,esi
c002996c:	0f be cb             	movsx  ecx,bl
c002996f:	75 0b                	jne    c002997c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c0029971:	0f be 05 40 47 03 c0 	movsx  eax,BYTE PTR ds:0xc0034740
c0029978:	39 c8                	cmp    eax,ecx
c002997a:	74 47                	je     c00299c3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c002997c:	83 ec 0c             	sub    esp,0xc
c002997f:	31 d2                	xor    edx,edx
c0029981:	68 a0 03 04 c0       	push   0xc00403a0
c0029986:	6a 01                	push   0x1
c0029988:	52                   	push   edx
c0029989:	56                   	push   esi
c002998a:	ff 34 8d 7c f2 03 c0 	push   DWORD PTR [ecx*4-0x3ffc0d84]
c0029991:	e8 2a 2d ff ff       	call   c001c6c0 <LogicalDisk::read(unsigned long long, int, void*)>
c0029996:	83 c4 20             	add    esp,0x20
c0029999:	85 c0                	test   eax,eax
c002999b:	75 0e                	jne    c00299ab <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c002999d:	89 35 84 03 04 c0    	mov    DWORD PTR ds:0xc0040384,esi
c00299a3:	88 1d 40 47 03 c0    	mov    BYTE PTR ds:0xc0034740,bl
c00299a9:	eb 18                	jmp    c00299c3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c00299ab:	50                   	push   eax
c00299ac:	68 00 08 00 00       	push   0x800
c00299b1:	6a 00                	push   0x0
c00299b3:	57                   	push   edi
c00299b4:	e8 37 6b fd ff       	call   c00004f0 <memset>
c00299b9:	83 c4 10             	add    esp,0x10
c00299bc:	b8 01 00 00 00       	mov    eax,0x1
c00299c1:	eb 0e                	jmp    c00299d1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c00299c3:	be a0 03 04 c0       	mov    esi,0xc00403a0
c00299c8:	b9 00 08 00 00       	mov    ecx,0x800
c00299cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00299cf:	31 c0                	xor    eax,eax
c00299d1:	5b                   	pop    ebx
c00299d2:	5e                   	pop    esi
c00299d3:	5f                   	pop    edi
c00299d4:	c3                   	ret    
c00299d5:	90                   	nop

c00299d6 <ISO9660::tryMount(LogicalDisk*, int)>:
c00299d6:	53                   	push   ebx
c00299d7:	81 ec 0c 08 00 00    	sub    esp,0x80c
c00299dd:	c7 05 84 03 04 c0 ef be ad de 	mov    DWORD PTR ds:0xc0040384,0xdeadbeef
c00299e7:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c00299ee:	8d 58 41             	lea    ebx,[eax+0x41]
c00299f1:	0f be db             	movsx  ebx,bl
c00299f4:	53                   	push   ebx
c00299f5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00299f9:	50                   	push   eax
c00299fa:	6a 10                	push   0x10
c00299fc:	e8 56 ff ff ff       	call   c0029957 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0029a01:	83 c4 10             	add    esp,0x10
c0029a04:	31 d2                	xor    edx,edx
c0029a06:	85 c0                	test   eax,eax
c0029a08:	75 33                	jne    c0029a3d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029a0a:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0029a0f:	75 2c                	jne    c0029a3d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029a11:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0029a16:	75 25                	jne    c0029a3d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029a18:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0029a1d:	75 1e                	jne    c0029a3d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029a1f:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0029a24:	75 17                	jne    c0029a3d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029a26:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0029a2b:	75 10                	jne    c0029a3d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029a2d:	83 ec 0c             	sub    esp,0xc
c0029a30:	53                   	push   ebx
c0029a31:	e8 c4 d1 fd ff       	call   c0006bfa <init_percd>
c0029a36:	83 c4 10             	add    esp,0x10
c0029a39:	40                   	inc    eax
c0029a3a:	0f 95 c2             	setne  dl
c0029a3d:	88 d0                	mov    al,dl
c0029a3f:	81 c4 08 08 00 00    	add    esp,0x808
c0029a45:	5b                   	pop    ebx
c0029a46:	c3                   	ret    
c0029a47:	90                   	nop

c0029a48 <ISO9660::ISO9660()>:
c0029a48:	83 ec 0c             	sub    esp,0xc
c0029a4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a4f:	83 ec 0c             	sub    esp,0xc
c0029a52:	50                   	push   eax
c0029a53:	e8 5a 06 ff ff       	call   c001a0b2 <Filesystem::Filesystem()>
c0029a58:	83 c4 10             	add    esp,0x10
c0029a5b:	ba 0c 35 03 c0       	mov    edx,0xc003350c
c0029a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a64:	89 10                	mov    DWORD PTR [eax],edx
c0029a66:	e8 a1 d2 fd ff       	call   c0006d0c <fs_iso9660_init>
c0029a6b:	90                   	nop
c0029a6c:	83 c4 0c             	add    esp,0xc
c0029a6f:	c3                   	ret    

c0029a70 <SoundCard::beginPlayback()>:
c0029a70:	c7 44 24 04 70 35 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033570
c0029a78:	e9 e9 67 ff ff       	jmp    c0020266 <KePanic(char const*)>
c0029a7d:	90                   	nop

c0029a7e <SoundCard::stopPlayback()>:
c0029a7e:	c7 44 24 04 70 35 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033570
c0029a86:	e9 db 67 ff ff       	jmp    c0020266 <KePanic(char const*)>
c0029a8b:	90                   	nop

c0029a8c <SoundCard::SoundCard(char const*)>:
c0029a8c:	83 ec 1c             	sub    esp,0x1c
c0029a8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029a93:	83 ec 08             	sub    esp,0x8
c0029a96:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0029a9a:	50                   	push   eax
c0029a9b:	e8 90 19 ff ff       	call   c001b430 <Device::Device(char const*)>
c0029aa0:	83 c4 10             	add    esp,0x10
c0029aa3:	ba bc 35 03 c0       	mov    edx,0xc00335bc
c0029aa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029aac:	89 10                	mov    DWORD PTR [eax],edx
c0029aae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029ab2:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0029ab9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029abd:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0029ac7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029acb:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0029ad5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029ad9:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0029ae3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029ae7:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0029af1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0029af9:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0029afe:	7f 1a                	jg     c0029b1a <SoundCard::SoundCard(char const*)+0x8e>
c0029b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029b04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0029b08:	83 c2 54             	add    edx,0x54
c0029b0b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0029b13:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0029b18:	eb df                	jmp    c0029af9 <SoundCard::SoundCard(char const*)+0x6d>
c0029b1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029b1e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0029b25:	90                   	nop
c0029b26:	83 c4 1c             	add    esp,0x1c
c0029b29:	c3                   	ret    

c0029b2a <SoundCard::~SoundCard()>:
c0029b2a:	83 ec 0c             	sub    esp,0xc
c0029b2d:	ba bc 35 03 c0       	mov    edx,0xc00335bc
c0029b32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b36:	89 10                	mov    DWORD PTR [eax],edx
c0029b38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b3c:	83 ec 0c             	sub    esp,0xc
c0029b3f:	50                   	push   eax
c0029b40:	e8 8b 16 ff ff       	call   c001b1d0 <Device::~Device()>
c0029b45:	83 c4 10             	add    esp,0x10
c0029b48:	90                   	nop
c0029b49:	83 c4 0c             	add    esp,0xc
c0029b4c:	c3                   	ret    
c0029b4d:	90                   	nop

c0029b4e <SoundCard::~SoundCard()>:
c0029b4e:	83 ec 0c             	sub    esp,0xc
c0029b51:	83 ec 0c             	sub    esp,0xc
c0029b54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b58:	e8 cd ff ff ff       	call   c0029b2a <SoundCard::~SoundCard()>
c0029b5d:	83 c4 10             	add    esp,0x10
c0029b60:	83 ec 08             	sub    esp,0x8
c0029b63:	68 e8 01 00 00       	push   0x1e8
c0029b68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b6c:	e8 af f5 fe ff       	call   c0019120 <operator delete(void*, unsigned long)>
c0029b71:	83 c4 10             	add    esp,0x10
c0029b74:	83 c4 0c             	add    esp,0xc
c0029b77:	c3                   	ret    

c0029b78 <SoundCard::configureRates(int, int, int)>:
c0029b78:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0029b7c:	31 c0                	xor    eax,eax
c0029b7e:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0029b85:	75 20                	jne    c0029ba7 <SoundCard::configureRates(int, int, int)+0x2f>
c0029b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029b8b:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0029b91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0029b95:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0029b9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b9f:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0029ba5:	b0 01                	mov    al,0x1
c0029ba7:	c3                   	ret    

c0029ba8 <SoundCard::getSamples16(int, short*)>:
c0029ba8:	55                   	push   ebp
c0029ba9:	57                   	push   edi
c0029baa:	31 ff                	xor    edi,edi
c0029bac:	56                   	push   esi
c0029bad:	53                   	push   ebx
c0029bae:	31 db                	xor    ebx,ebx
c0029bb0:	83 ec 10             	sub    esp,0x10
c0029bb3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0029bb7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029bbb:	8d 04 36             	lea    eax,[esi+esi*1]
c0029bbe:	50                   	push   eax
c0029bbf:	6a 00                	push   0x0
c0029bc1:	55                   	push   ebp
c0029bc2:	e8 29 69 fd ff       	call   c00004f0 <memset>
c0029bc7:	83 c4 10             	add    esp,0x10
c0029bca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029bce:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0029bd5:	85 c0                	test   eax,eax
c0029bd7:	74 1b                	je     c0029bf4 <SoundCard::getSamples16(int, short*)+0x4c>
c0029bd9:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0029bdd:	75 15                	jne    c0029bf4 <SoundCard::getSamples16(int, short*)+0x4c>
c0029bdf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0029be3:	55                   	push   ebp
c0029be4:	56                   	push   esi
c0029be5:	50                   	push   eax
c0029be6:	e8 f1 02 00 00       	call   c0029edc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0029beb:	83 c4 10             	add    esp,0x10
c0029bee:	39 c7                	cmp    edi,eax
c0029bf0:	7d 02                	jge    c0029bf4 <SoundCard::getSamples16(int, short*)+0x4c>
c0029bf2:	89 c7                	mov    edi,eax
c0029bf4:	43                   	inc    ebx
c0029bf5:	83 fb 20             	cmp    ebx,0x20
c0029bf8:	75 d0                	jne    c0029bca <SoundCard::getSamples16(int, short*)+0x22>
c0029bfa:	83 c4 0c             	add    esp,0xc
c0029bfd:	89 f8                	mov    eax,edi
c0029bff:	5b                   	pop    ebx
c0029c00:	5e                   	pop    esi
c0029c01:	5f                   	pop    edi
c0029c02:	5d                   	pop    ebp
c0029c03:	c3                   	ret    

c0029c04 <SoundCard::getSamples32(int, int*)>:
c0029c04:	55                   	push   ebp
c0029c05:	57                   	push   edi
c0029c06:	31 ff                	xor    edi,edi
c0029c08:	56                   	push   esi
c0029c09:	31 f6                	xor    esi,esi
c0029c0b:	53                   	push   ebx
c0029c0c:	83 ec 10             	sub    esp,0x10
c0029c0f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0029c13:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0029c17:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029c1b:	c1 e0 02             	shl    eax,0x2
c0029c1e:	50                   	push   eax
c0029c1f:	6a 00                	push   0x0
c0029c21:	55                   	push   ebp
c0029c22:	e8 c9 68 fd ff       	call   c00004f0 <memset>
c0029c27:	83 c4 10             	add    esp,0x10
c0029c2a:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0029c31:	85 c0                	test   eax,eax
c0029c33:	74 1b                	je     c0029c50 <SoundCard::getSamples32(int, int*)+0x4c>
c0029c35:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0029c39:	75 15                	jne    c0029c50 <SoundCard::getSamples32(int, int*)+0x4c>
c0029c3b:	53                   	push   ebx
c0029c3c:	55                   	push   ebp
c0029c3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0029c41:	50                   	push   eax
c0029c42:	e8 61 03 00 00       	call   c0029fa8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0029c47:	83 c4 10             	add    esp,0x10
c0029c4a:	39 c6                	cmp    esi,eax
c0029c4c:	7d 02                	jge    c0029c50 <SoundCard::getSamples32(int, int*)+0x4c>
c0029c4e:	89 c6                	mov    esi,eax
c0029c50:	47                   	inc    edi
c0029c51:	83 ff 20             	cmp    edi,0x20
c0029c54:	75 d4                	jne    c0029c2a <SoundCard::getSamples32(int, int*)+0x26>
c0029c56:	85 f6                	test   esi,esi
c0029c58:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c0029c5f:	75 0f                	jne    c0029c70 <SoundCard::getSamples32(int, int*)+0x6c>
c0029c61:	85 c0                	test   eax,eax
c0029c63:	74 1b                	je     c0029c80 <SoundCard::getSamples32(int, int*)+0x7c>
c0029c65:	83 ec 0c             	sub    esp,0xc
c0029c68:	8b 03                	mov    eax,DWORD PTR [ebx]
c0029c6a:	53                   	push   ebx
c0029c6b:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0029c6e:	eb 0d                	jmp    c0029c7d <SoundCard::getSamples32(int, int*)+0x79>
c0029c70:	85 c0                	test   eax,eax
c0029c72:	75 0c                	jne    c0029c80 <SoundCard::getSamples32(int, int*)+0x7c>
c0029c74:	83 ec 0c             	sub    esp,0xc
c0029c77:	8b 03                	mov    eax,DWORD PTR [ebx]
c0029c79:	53                   	push   ebx
c0029c7a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0029c7d:	83 c4 10             	add    esp,0x10
c0029c80:	83 c4 0c             	add    esp,0xc
c0029c83:	89 f0                	mov    eax,esi
c0029c85:	5b                   	pop    ebx
c0029c86:	5e                   	pop    esi
c0029c87:	5f                   	pop    edi
c0029c88:	5d                   	pop    ebp
c0029c89:	c3                   	ret    

c0029c8a <SoundCard::addChannel(SoundPort*)>:
c0029c8a:	83 ec 0c             	sub    esp,0xc
c0029c8d:	31 c0                	xor    eax,eax
c0029c8f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0029c93:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0029c9b:	74 1b                	je     c0029cb8 <SoundCard::addChannel(SoundPort*)+0x2e>
c0029c9d:	40                   	inc    eax
c0029c9e:	83 f8 20             	cmp    eax,0x20
c0029ca1:	75 f0                	jne    c0029c93 <SoundCard::addChannel(SoundPort*)+0x9>
c0029ca3:	83 ec 0c             	sub    esp,0xc
c0029ca6:	68 95 35 03 c0       	push   0xc0033595
c0029cab:	e8 b6 65 ff ff       	call   c0020266 <KePanic(char const*)>
c0029cb0:	83 c4 10             	add    esp,0x10
c0029cb3:	83 c8 ff             	or     eax,0xffffffff
c0029cb6:	eb 0b                	jmp    c0029cc3 <SoundCard::addChannel(SoundPort*)+0x39>
c0029cb8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0029cbc:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0029cc3:	83 c4 0c             	add    esp,0xc
c0029cc6:	c3                   	ret    
c0029cc7:	90                   	nop

c0029cc8 <SoundCard::removeChannel(int)>:
c0029cc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029ccc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0029cd0:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0029cdb:	c3                   	ret    

c0029cdc <SoundPort::SoundPort(int, int, int, int)>:
c0029cdc:	83 ec 0c             	sub    esp,0xc
c0029cdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ce3:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0029cea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cee:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0029cf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cf6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029cfa:	89 10                	mov    DWORD PTR [eax],edx
c0029cfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d00:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0029d04:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d0b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0029d0f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029d12:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0029d17:	75 13                	jne    c0029d2c <SoundPort::SoundPort(int, int, int, int)+0x50>
c0029d19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0029d1f:	05 a0 0f 00 00       	add    eax,0xfa0
c0029d24:	01 c0                	add    eax,eax
c0029d26:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0029d2a:	66 90                	xchg   ax,ax
c0029d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d30:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0029d34:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0029d37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d3b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0029d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d46:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0029d49:	c1 e0 02             	shl    eax,0x2
c0029d4c:	83 ec 0c             	sub    esp,0xc
c0029d4f:	50                   	push   eax
c0029d50:	e8 69 c6 fe ff       	call   c00163be <malloc>
c0029d55:	83 c4 10             	add    esp,0x10
c0029d58:	89 c2                	mov    edx,eax
c0029d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d5e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0029d61:	90                   	nop
c0029d62:	83 c4 0c             	add    esp,0xc
c0029d65:	c3                   	ret    
c0029d66:	66 90                	xchg   ax,ax

c0029d68 <SoundPort::~SoundPort()>:
c0029d68:	83 ec 0c             	sub    esp,0xc
c0029d6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d6f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0029d72:	85 c0                	test   eax,eax
c0029d74:	74 1e                	je     c0029d94 <SoundPort::~SoundPort()+0x2c>
c0029d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d7a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0029d7d:	83 ec 0c             	sub    esp,0xc
c0029d80:	50                   	push   eax
c0029d81:	e8 48 c6 fe ff       	call   c00163ce <free>
c0029d86:	83 c4 10             	add    esp,0x10
c0029d89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d8d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0029d94:	90                   	nop
c0029d95:	83 c4 0c             	add    esp,0xc
c0029d98:	c3                   	ret    
c0029d99:	90                   	nop
c0029d9a:	66 90                	xchg   ax,ax

c0029d9c <SoundPort::unpause()>:
c0029d9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029da0:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0029da4:	c3                   	ret    
c0029da5:	90                   	nop
c0029da6:	66 90                	xchg   ax,ax

c0029da8 <SoundPort::pause()>:
c0029da8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029dac:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0029db0:	c3                   	ret    
c0029db1:	90                   	nop
c0029db2:	66 90                	xchg   ax,ax

c0029db4 <SoundPort::getBufferUsed()>:
c0029db4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029db8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0029dbb:	c3                   	ret    

c0029dbc <SoundPort::getBufferSize()>:
c0029dbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029dc0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0029dc3:	c3                   	ret    

c0029dc4 <SoundPort::buffer16(short*, int)>:
c0029dc4:	55                   	push   ebp
c0029dc5:	57                   	push   edi
c0029dc6:	56                   	push   esi
c0029dc7:	53                   	push   ebx
c0029dc8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029dcc:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0029dd0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0029dd3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0029dd6:	74 68                	je     c0029e40 <SoundPort::buffer16(short*, int)+0x7c>
c0029dd8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0029ddc:	85 c9                	test   ecx,ecx
c0029dde:	7e 60                	jle    c0029e40 <SoundPort::buffer16(short*, int)+0x7c>
c0029de0:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0029de4:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0029de7:	c1 e1 0f             	shl    ecx,0xf
c0029dea:	8d 70 01             	lea    esi,[eax+0x1]
c0029ded:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0029df0:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0029df3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029df6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029df9:	74 4d                	je     c0029e48 <SoundPort::buffer16(short*, int)+0x84>
c0029dfb:	31 f6                	xor    esi,esi
c0029dfd:	eb 21                	jmp    c0029e20 <SoundPort::buffer16(short*, int)+0x5c>
c0029dff:	90                   	nop
c0029e00:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0029e05:	8d 79 01             	lea    edi,[ecx+0x1]
c0029e08:	c1 e3 0f             	shl    ebx,0xf
c0029e0b:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0029e0e:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0029e11:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0029e14:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029e17:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029e1a:	74 1c                	je     c0029e38 <SoundPort::buffer16(short*, int)+0x74>
c0029e1c:	89 c6                	mov    esi,eax
c0029e1e:	66 90                	xchg   ax,ax
c0029e20:	8d 46 01             	lea    eax,[esi+0x1]
c0029e23:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0029e27:	75 d7                	jne    c0029e00 <SoundPort::buffer16(short*, int)+0x3c>
c0029e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0029e2d:	8d 76 00             	lea    esi,[esi+0x0]
c0029e30:	5b                   	pop    ebx
c0029e31:	5e                   	pop    esi
c0029e32:	5f                   	pop    edi
c0029e33:	5d                   	pop    ebp
c0029e34:	c3                   	ret    
c0029e35:	8d 76 00             	lea    esi,[esi+0x0]
c0029e38:	5b                   	pop    ebx
c0029e39:	8d 46 02             	lea    eax,[esi+0x2]
c0029e3c:	5e                   	pop    esi
c0029e3d:	5f                   	pop    edi
c0029e3e:	5d                   	pop    ebp
c0029e3f:	c3                   	ret    
c0029e40:	5b                   	pop    ebx
c0029e41:	31 c0                	xor    eax,eax
c0029e43:	5e                   	pop    esi
c0029e44:	5f                   	pop    edi
c0029e45:	5d                   	pop    ebp
c0029e46:	c3                   	ret    
c0029e47:	90                   	nop
c0029e48:	b8 01 00 00 00       	mov    eax,0x1
c0029e4d:	eb e1                	jmp    c0029e30 <SoundPort::buffer16(short*, int)+0x6c>
c0029e4f:	90                   	nop

c0029e50 <SoundPort::buffer32(int*, int)>:
c0029e50:	55                   	push   ebp
c0029e51:	57                   	push   edi
c0029e52:	56                   	push   esi
c0029e53:	53                   	push   ebx
c0029e54:	83 ec 04             	sub    esp,0x4
c0029e57:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0029e5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029e5f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029e62:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0029e66:	89 04 24             	mov    DWORD PTR [esp],eax
c0029e69:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029e6c:	74 5a                	je     c0029ec8 <SoundPort::buffer32(int*, int)+0x78>
c0029e6e:	85 c0                	test   eax,eax
c0029e70:	7e 56                	jle    c0029ec8 <SoundPort::buffer32(int*, int)+0x78>
c0029e72:	8d 71 01             	lea    esi,[ecx+0x1]
c0029e75:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0029e78:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0029e7b:	8b 37                	mov    esi,DWORD PTR [edi]
c0029e7d:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0029e80:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029e83:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029e86:	74 4c                	je     c0029ed4 <SoundPort::buffer32(int*, int)+0x84>
c0029e88:	31 f6                	xor    esi,esi
c0029e8a:	eb 1c                	jmp    c0029ea8 <SoundPort::buffer32(int*, int)+0x58>
c0029e8c:	8d 69 01             	lea    ebp,[ecx+0x1]
c0029e8f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0029e92:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0029e95:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0029e98:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0029e9c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029e9f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029ea2:	74 18                	je     c0029ebc <SoundPort::buffer32(int*, int)+0x6c>
c0029ea4:	89 de                	mov    esi,ebx
c0029ea6:	66 90                	xchg   ax,ax
c0029ea8:	8d 5e 01             	lea    ebx,[esi+0x1]
c0029eab:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0029eae:	75 dc                	jne    c0029e8c <SoundPort::buffer32(int*, int)+0x3c>
c0029eb0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0029eb3:	90                   	nop
c0029eb4:	83 c4 04             	add    esp,0x4
c0029eb7:	5b                   	pop    ebx
c0029eb8:	5e                   	pop    esi
c0029eb9:	5f                   	pop    edi
c0029eba:	5d                   	pop    ebp
c0029ebb:	c3                   	ret    
c0029ebc:	83 c4 04             	add    esp,0x4
c0029ebf:	8d 46 02             	lea    eax,[esi+0x2]
c0029ec2:	5b                   	pop    ebx
c0029ec3:	5e                   	pop    esi
c0029ec4:	5f                   	pop    edi
c0029ec5:	5d                   	pop    ebp
c0029ec6:	c3                   	ret    
c0029ec7:	90                   	nop
c0029ec8:	83 c4 04             	add    esp,0x4
c0029ecb:	31 c0                	xor    eax,eax
c0029ecd:	5b                   	pop    ebx
c0029ece:	5e                   	pop    esi
c0029ecf:	5f                   	pop    edi
c0029ed0:	5d                   	pop    ebp
c0029ed1:	c3                   	ret    
c0029ed2:	66 90                	xchg   ax,ax
c0029ed4:	b8 01 00 00 00       	mov    eax,0x1
c0029ed9:	eb d9                	jmp    c0029eb4 <SoundPort::buffer32(int*, int)+0x64>
c0029edb:	90                   	nop

c0029edc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0029edc:	57                   	push   edi
c0029edd:	56                   	push   esi
c0029ede:	53                   	push   ebx
c0029edf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0029ee3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0029ee7:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0029eed:	39 03                	cmp    DWORD PTR [ebx],eax
c0029eef:	74 13                	je     c0029f04 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0029ef1:	83 ec 0c             	sub    esp,0xc
c0029ef4:	68 e8 35 03 c0       	push   0xc00335e8
c0029ef9:	e8 68 63 ff ff       	call   c0020266 <KePanic(char const*)>
c0029efe:	83 c4 10             	add    esp,0x10
c0029f01:	8d 76 00             	lea    esi,[esi+0x0]
c0029f04:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0029f0a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0029f0d:	74 11                	je     c0029f20 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0029f0f:	83 ec 0c             	sub    esp,0xc
c0029f12:	68 27 36 03 c0       	push   0xc0033627
c0029f17:	e8 4a 63 ff ff       	call   c0020266 <KePanic(char const*)>
c0029f1c:	83 c4 10             	add    esp,0x10
c0029f1f:	90                   	nop
c0029f20:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0029f26:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0029f29:	74 11                	je     c0029f3c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0029f2b:	83 ec 0c             	sub    esp,0xc
c0029f2e:	68 27 36 03 c0       	push   0xc0033627
c0029f33:	e8 2e 63 ff ff       	call   c0020266 <KePanic(char const*)>
c0029f38:	83 c4 10             	add    esp,0x10
c0029f3b:	90                   	nop
c0029f3c:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0029f3f:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0029f43:	7e 07                	jle    c0029f4c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0029f45:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0029f49:	8d 76 00             	lea    esi,[esi+0x0]
c0029f4c:	85 f6                	test   esi,esi
c0029f4e:	7e 2c                	jle    c0029f7c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0029f50:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0029f54:	8d 3c 36             	lea    edi,[esi+esi*1]
c0029f57:	31 c9                	xor    ecx,ecx
c0029f59:	01 d7                	add    edi,edx
c0029f5b:	90                   	nop
c0029f5c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0029f5f:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0029f62:	85 c0                	test   eax,eax
c0029f64:	79 06                	jns    c0029f6c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0029f66:	05 ff 7f 00 00       	add    eax,0x7fff
c0029f6b:	90                   	nop
c0029f6c:	c1 f8 0f             	sar    eax,0xf
c0029f6f:	83 c1 04             	add    ecx,0x4
c0029f72:	66 01 02             	add    WORD PTR [edx],ax
c0029f75:	83 c2 02             	add    edx,0x2
c0029f78:	39 d7                	cmp    edi,edx
c0029f7a:	75 e0                	jne    c0029f5c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0029f7c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0029f7f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0029f82:	83 ec 04             	sub    esp,0x4
c0029f85:	29 f0                	sub    eax,esi
c0029f87:	c1 e0 02             	shl    eax,0x2
c0029f8a:	50                   	push   eax
c0029f8b:	8d 04 b2             	lea    eax,[edx+esi*4]
c0029f8e:	50                   	push   eax
c0029f8f:	52                   	push   edx
c0029f90:	e8 3b 64 fd ff       	call   c00003d0 <memmove>
c0029f95:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0029f98:	83 c4 10             	add    esp,0x10
c0029f9b:	29 f0                	sub    eax,esi
c0029f9d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0029fa0:	89 f0                	mov    eax,esi
c0029fa2:	5b                   	pop    ebx
c0029fa3:	5e                   	pop    esi
c0029fa4:	5f                   	pop    edi
c0029fa5:	c3                   	ret    
c0029fa6:	66 90                	xchg   ax,ax

c0029fa8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0029fa8:	57                   	push   edi
c0029fa9:	56                   	push   esi
c0029faa:	53                   	push   ebx
c0029fab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0029faf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0029fb3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0029fb7:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0029fbd:	39 06                	cmp    DWORD PTR [esi],eax
c0029fbf:	74 13                	je     c0029fd4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0029fc1:	83 ec 0c             	sub    esp,0xc
c0029fc4:	68 08 36 03 c0       	push   0xc0033608
c0029fc9:	e8 98 62 ff ff       	call   c0020266 <KePanic(char const*)>
c0029fce:	83 c4 10             	add    esp,0x10
c0029fd1:	8d 76 00             	lea    esi,[esi+0x0]
c0029fd4:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0029fda:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0029fdd:	74 11                	je     c0029ff0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0029fdf:	83 ec 0c             	sub    esp,0xc
c0029fe2:	68 43 36 03 c0       	push   0xc0033643
c0029fe7:	e8 7a 62 ff ff       	call   c0020266 <KePanic(char const*)>
c0029fec:	83 c4 10             	add    esp,0x10
c0029fef:	90                   	nop
c0029ff0:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0029ff6:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0029ff9:	74 11                	je     c002a00c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0029ffb:	83 ec 0c             	sub    esp,0xc
c0029ffe:	68 43 36 03 c0       	push   0xc0033643
c002a003:	e8 5e 62 ff ff       	call   c0020266 <KePanic(char const*)>
c002a008:	83 c4 10             	add    esp,0x10
c002a00b:	90                   	nop
c002a00c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c002a00f:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c002a013:	7e 07                	jle    c002a01c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c002a015:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002a019:	8d 76 00             	lea    esi,[esi+0x0]
c002a01c:	85 ff                	test   edi,edi
c002a01e:	7e 1c                	jle    c002a03c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c002a020:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c002a027:	31 c0                	xor    eax,eax
c002a029:	8d 76 00             	lea    esi,[esi+0x0]
c002a02c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c002a02f:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c002a032:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c002a035:	83 c0 04             	add    eax,0x4
c002a038:	39 c1                	cmp    ecx,eax
c002a03a:	75 f0                	jne    c002a02c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c002a03c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c002a03f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002a042:	83 ec 04             	sub    esp,0x4
c002a045:	29 f8                	sub    eax,edi
c002a047:	c1 e0 02             	shl    eax,0x2
c002a04a:	50                   	push   eax
c002a04b:	8d 04 ba             	lea    eax,[edx+edi*4]
c002a04e:	50                   	push   eax
c002a04f:	52                   	push   edx
c002a050:	e8 7b 63 fd ff       	call   c00003d0 <memmove>
c002a055:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c002a058:	83 c4 10             	add    esp,0x10
c002a05b:	29 f8                	sub    eax,edi
c002a05d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c002a060:	89 f8                	mov    eax,edi
c002a062:	5b                   	pop    ebx
c002a063:	5e                   	pop    esi
c002a064:	5f                   	pop    edi
c002a065:	c3                   	ret    

c002a066 <PCI::open(int, int, void*)>:
c002a066:	83 ec 18             	sub    esp,0x18
c002a069:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002a06d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002a071:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002a077:	8b 10                	mov    edx,DWORD PTR [eax]
c002a079:	50                   	push   eax
c002a07a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002a07d:	31 c0                	xor    eax,eax
c002a07f:	83 c4 1c             	add    esp,0x1c
c002a082:	c3                   	ret    
c002a083:	90                   	nop

c002a084 <PCI::close(int, int, void*)>:
c002a084:	31 c0                	xor    eax,eax
c002a086:	c3                   	ret    
c002a087:	90                   	nop

c002a088 <PCI::PCI()>:
c002a088:	83 ec 0c             	sub    esp,0xc
c002a08b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a08f:	83 ec 08             	sub    esp,0x8
c002a092:	68 5f 36 03 c0       	push   0xc003365f
c002a097:	50                   	push   eax
c002a098:	e8 93 0b ff ff       	call   c001ac30 <Bus::Bus(char const*)>
c002a09d:	83 c4 10             	add    esp,0x10
c002a0a0:	ba 08 37 03 c0       	mov    edx,0xc0033708
c002a0a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a0a9:	89 10                	mov    DWORD PTR [eax],edx
c002a0ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a0af:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c002a0b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a0bd:	a3 a0 0b 04 c0       	mov    ds:0xc0040ba0,eax
c002a0c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a0c6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a0cc:	0f b6 d0             	movzx  edx,al
c002a0cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a0d3:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002a0da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a0de:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a0e4:	0f b6 d0             	movzx  edx,al
c002a0e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a0eb:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002a0f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a0f4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a0fa:	8d 50 01             	lea    edx,[eax+0x1]
c002a0fd:	88 d1                	mov    cl,dl
c002a0ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002a103:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002a109:	0f b6 d0             	movzx  edx,al
c002a10c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a110:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002a114:	83 c9 c0             	or     ecx,0xffffffc0
c002a117:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002a11b:	90                   	nop
c002a11c:	83 c4 0c             	add    esp,0xc
c002a11f:	c3                   	ret    

c002a120 <PCI::readBAR8(unsigned int, int)>:
c002a120:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a124:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a128:	f6 c2 01             	test   dl,0x1
c002a12b:	74 07                	je     c002a134 <PCI::readBAR8(unsigned int, int)+0x14>
c002a12d:	83 e2 fc             	and    edx,0xfffffffc
c002a130:	01 c2                	add    edx,eax
c002a132:	ec                   	in     al,dx
c002a133:	c3                   	ret    
c002a134:	83 e2 f0             	and    edx,0xfffffff0
c002a137:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c002a13a:	c3                   	ret    
c002a13b:	90                   	nop

c002a13c <PCI::readBAR16(unsigned int, int)>:
c002a13c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a140:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a144:	f6 c2 01             	test   dl,0x1
c002a147:	74 08                	je     c002a151 <PCI::readBAR16(unsigned int, int)+0x15>
c002a149:	83 e2 fc             	and    edx,0xfffffffc
c002a14c:	01 c2                	add    edx,eax
c002a14e:	66 ed                	in     ax,dx
c002a150:	c3                   	ret    
c002a151:	83 e2 f0             	and    edx,0xfffffff0
c002a154:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c002a158:	c3                   	ret    
c002a159:	90                   	nop

c002a15a <PCI::readBAR32(unsigned int, int)>:
c002a15a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a15e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a162:	f6 c2 01             	test   dl,0x1
c002a165:	74 07                	je     c002a16e <PCI::readBAR32(unsigned int, int)+0x14>
c002a167:	83 e2 fc             	and    edx,0xfffffffc
c002a16a:	01 c2                	add    edx,eax
c002a16c:	ed                   	in     eax,dx
c002a16d:	c3                   	ret    
c002a16e:	83 e2 f0             	and    edx,0xfffffff0
c002a171:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c002a174:	c3                   	ret    
c002a175:	90                   	nop

c002a176 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c002a176:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a17a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a17e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a182:	f6 c2 01             	test   dl,0x1
c002a185:	74 07                	je     c002a18e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c002a187:	83 e2 fc             	and    edx,0xfffffffc
c002a18a:	01 ca                	add    edx,ecx
c002a18c:	ee                   	out    dx,al
c002a18d:	c3                   	ret    
c002a18e:	83 e2 f0             	and    edx,0xfffffff0
c002a191:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c002a194:	c3                   	ret    
c002a195:	90                   	nop

c002a196 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c002a196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a19a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a19e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a1a2:	f6 c2 01             	test   dl,0x1
c002a1a5:	74 08                	je     c002a1af <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c002a1a7:	83 e2 fc             	and    edx,0xfffffffc
c002a1aa:	01 ca                	add    edx,ecx
c002a1ac:	66 ef                	out    dx,ax
c002a1ae:	c3                   	ret    
c002a1af:	83 e2 f0             	and    edx,0xfffffff0
c002a1b2:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c002a1b6:	c3                   	ret    
c002a1b7:	90                   	nop

c002a1b8 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c002a1b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a1bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a1c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a1c4:	f6 c2 01             	test   dl,0x1
c002a1c7:	74 07                	je     c002a1d0 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c002a1c9:	83 e2 fc             	and    edx,0xfffffffc
c002a1cc:	01 ca                	add    edx,ecx
c002a1ce:	ef                   	out    dx,eax
c002a1cf:	c3                   	ret    
c002a1d0:	83 e2 f0             	and    edx,0xfffffff0
c002a1d3:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c002a1d6:	c3                   	ret    
c002a1d7:	90                   	nop

c002a1d8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a1d8:	55                   	push   ebp
c002a1d9:	57                   	push   edi
c002a1da:	56                   	push   esi
c002a1db:	53                   	push   ebx
c002a1dc:	83 ec 0c             	sub    esp,0xc
c002a1df:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c002a1e4:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c002a1e8:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002a1ec:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002a1f0:	83 fe 07             	cmp    esi,0x7
c002a1f3:	76 10                	jbe    c002a205 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c002a1f5:	83 ec 0c             	sub    esp,0xc
c002a1f8:	68 67 36 03 c0       	push   0xc0033667
c002a1fd:	e8 64 60 ff ff       	call   c0020266 <KePanic(char const*)>
c002a202:	83 c4 10             	add    esp,0x10
c002a205:	0f b6 db             	movzx  ebx,bl
c002a208:	83 fb 0f             	cmp    ebx,0xf
c002a20b:	76 10                	jbe    c002a21d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c002a20d:	83 ec 0c             	sub    esp,0xc
c002a210:	68 97 36 03 c0       	push   0xc0033697
c002a215:	e8 4c 60 ff ff       	call   c0020266 <KePanic(char const*)>
c002a21a:	83 c4 10             	add    esp,0x10
c002a21d:	8d 04 36             	lea    eax,[esi+esi*1]
c002a220:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a225:	83 c8 f0             	or     eax,0xfffffff0
c002a228:	ee                   	out    dx,al
c002a229:	ba fa 0c 00 00       	mov    edx,0xcfa
c002a22e:	89 e8                	mov    eax,ebp
c002a230:	ee                   	out    dx,al
c002a231:	83 c4 0c             	add    esp,0xc
c002a234:	89 d8                	mov    eax,ebx
c002a236:	89 f9                	mov    ecx,edi
c002a238:	c1 e0 08             	shl    eax,0x8
c002a23b:	0f b6 d9             	movzx  ebx,cl
c002a23e:	83 e3 fc             	and    ebx,0xfffffffc
c002a241:	09 d8                	or     eax,ebx
c002a243:	5b                   	pop    ebx
c002a244:	0d 00 c0 ff ff       	or     eax,0xffffc000
c002a249:	5e                   	pop    esi
c002a24a:	5f                   	pop    edi
c002a24b:	5d                   	pop    ebp
c002a24c:	c3                   	ret    
c002a24d:	90                   	nop

c002a24e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a24e:	57                   	push   edi
c002a24f:	56                   	push   esi
c002a250:	53                   	push   ebx
c002a251:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002a255:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002a259:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c002a25f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002a263:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a267:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002a26b:	83 ff 01             	cmp    edi,0x1
c002a26e:	75 3f                	jne    c002a2af <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c002a270:	89 de                	mov    esi,ebx
c002a272:	0f b6 c0             	movzx  eax,al
c002a275:	81 e6 fc 00 00 00    	and    esi,0xfc
c002a27b:	c1 e0 10             	shl    eax,0x10
c002a27e:	0f b6 c9             	movzx  ecx,cl
c002a281:	09 f0                	or     eax,esi
c002a283:	c1 e1 08             	shl    ecx,0x8
c002a286:	0f b6 d2             	movzx  edx,dl
c002a289:	09 c8                	or     eax,ecx
c002a28b:	c1 e2 0b             	shl    edx,0xb
c002a28e:	09 d0                	or     eax,edx
c002a290:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a295:	0d 00 00 00 80       	or     eax,0x80000000
c002a29a:	ef                   	out    dx,eax
c002a29b:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a2a0:	ed                   	in     eax,dx
c002a2a1:	83 e3 02             	and    ebx,0x2
c002a2a4:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002a2ab:	d3 e8                	shr    eax,cl
c002a2ad:	eb 44                	jmp    c002a2f3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c002a2af:	83 ff 02             	cmp    edi,0x2
c002a2b2:	75 2d                	jne    c002a2e1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c002a2b4:	83 ec 0c             	sub    esp,0xc
c002a2b7:	0f b6 c9             	movzx  ecx,cl
c002a2ba:	0f b6 d2             	movzx  edx,dl
c002a2bd:	0f b6 fb             	movzx  edi,bl
c002a2c0:	0f b6 c0             	movzx  eax,al
c002a2c3:	57                   	push   edi
c002a2c4:	51                   	push   ecx
c002a2c5:	52                   	push   edx
c002a2c6:	50                   	push   eax
c002a2c7:	56                   	push   esi
c002a2c8:	e8 0b ff ff ff       	call   c002a1d8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a2cd:	89 c2                	mov    edx,eax
c002a2cf:	ed                   	in     eax,dx
c002a2d0:	83 e3 02             	and    ebx,0x2
c002a2d3:	83 c4 20             	add    esp,0x20
c002a2d6:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002a2dd:	d3 e8                	shr    eax,cl
c002a2df:	eb 12                	jmp    c002a2f3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c002a2e1:	83 ec 0c             	sub    esp,0xc
c002a2e4:	68 c7 36 03 c0       	push   0xc00336c7
c002a2e9:	e8 78 5f ff ff       	call   c0020266 <KePanic(char const*)>
c002a2ee:	83 c4 10             	add    esp,0x10
c002a2f1:	31 c0                	xor    eax,eax
c002a2f3:	5b                   	pop    ebx
c002a2f4:	5e                   	pop    esi
c002a2f5:	5f                   	pop    edi
c002a2f6:	c3                   	ret    
c002a2f7:	90                   	nop

c002a2f8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002a2f8:	83 ec 18             	sub    esp,0x18
c002a2fb:	6a 00                	push   0x0
c002a2fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a302:	50                   	push   eax
c002a303:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a308:	50                   	push   eax
c002a309:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a30e:	50                   	push   eax
c002a30f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a313:	e8 36 ff ff ff       	call   c002a24e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a318:	83 c4 2c             	add    esp,0x2c
c002a31b:	c3                   	ret    

c002a31c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002a31c:	83 ec 18             	sub    esp,0x18
c002a31f:	6a 0e                	push   0xe
c002a321:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a326:	50                   	push   eax
c002a327:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a32c:	50                   	push   eax
c002a32d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a332:	50                   	push   eax
c002a333:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a337:	e8 12 ff ff ff       	call   c002a24e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a33c:	83 c4 2c             	add    esp,0x2c
c002a33f:	0f b6 c0             	movzx  eax,al
c002a342:	c3                   	ret    
c002a343:	90                   	nop

c002a344 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002a344:	55                   	push   ebp
c002a345:	57                   	push   edi
c002a346:	56                   	push   esi
c002a347:	53                   	push   ebx
c002a348:	83 ec 18             	sub    esp,0x18
c002a34b:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c002a350:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c002a355:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c002a35a:	6a 0a                	push   0xa
c002a35c:	56                   	push   esi
c002a35d:	55                   	push   ebp
c002a35e:	57                   	push   edi
c002a35f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002a363:	e8 e6 fe ff ff       	call   c002a24e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a368:	83 c4 14             	add    esp,0x14
c002a36b:	89 c3                	mov    ebx,eax
c002a36d:	6a 0a                	push   0xa
c002a36f:	0f b6 db             	movzx  ebx,bl
c002a372:	56                   	push   esi
c002a373:	55                   	push   ebp
c002a374:	57                   	push   edi
c002a375:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002a379:	e8 d0 fe ff ff       	call   c002a24e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a37e:	83 c4 2c             	add    esp,0x2c
c002a381:	25 00 ff 00 00       	and    eax,0xff00
c002a386:	09 d8                	or     eax,ebx
c002a388:	5b                   	pop    ebx
c002a389:	5e                   	pop    esi
c002a38a:	5f                   	pop    edi
c002a38b:	5d                   	pop    ebp
c002a38c:	c3                   	ret    
c002a38d:	90                   	nop

c002a38e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002a38e:	83 ec 18             	sub    esp,0x18
c002a391:	6a 08                	push   0x8
c002a393:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a398:	50                   	push   eax
c002a399:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a39e:	50                   	push   eax
c002a39f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a3a4:	50                   	push   eax
c002a3a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a3a9:	e8 a0 fe ff ff       	call   c002a24e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a3ae:	83 c4 2c             	add    esp,0x2c
c002a3b1:	0f b6 c4             	movzx  eax,ah
c002a3b4:	c3                   	ret    
c002a3b5:	90                   	nop

c002a3b6 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002a3b6:	83 ec 18             	sub    esp,0x18
c002a3b9:	6a 08                	push   0x8
c002a3bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a3c0:	50                   	push   eax
c002a3c1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a3c6:	50                   	push   eax
c002a3c7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a3cc:	50                   	push   eax
c002a3cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a3d1:	e8 78 fe ff ff       	call   c002a24e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a3d6:	83 c4 2c             	add    esp,0x2c
c002a3d9:	c3                   	ret    

c002a3da <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002a3da:	83 ec 18             	sub    esp,0x18
c002a3dd:	6a 3c                	push   0x3c
c002a3df:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a3e4:	50                   	push   eax
c002a3e5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a3ea:	50                   	push   eax
c002a3eb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a3f0:	50                   	push   eax
c002a3f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a3f5:	e8 54 fe ff ff       	call   c002a24e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a3fa:	83 c4 2c             	add    esp,0x2c
c002a3fd:	c3                   	ret    

c002a3fe <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002a3fe:	83 ec 18             	sub    esp,0x18
c002a401:	6a 18                	push   0x18
c002a403:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a408:	50                   	push   eax
c002a409:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a40e:	50                   	push   eax
c002a40f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a414:	50                   	push   eax
c002a415:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a419:	e8 30 fe ff ff       	call   c002a24e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a41e:	83 c4 2c             	add    esp,0x2c
c002a421:	0f b6 c4             	movzx  eax,ah
c002a424:	c3                   	ret    
c002a425:	90                   	nop

c002a426 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a426:	55                   	push   ebp
c002a427:	57                   	push   edi
c002a428:	56                   	push   esi
c002a429:	53                   	push   ebx
c002a42a:	83 ec 28             	sub    esp,0x28
c002a42d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002a431:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c002a436:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c002a43b:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c002a440:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002a447:	8d 43 12             	lea    eax,[ebx+0x12]
c002a44a:	83 c3 10             	add    ebx,0x10
c002a44d:	0f b6 c0             	movzx  eax,al
c002a450:	0f b6 db             	movzx  ebx,bl
c002a453:	50                   	push   eax
c002a454:	51                   	push   ecx
c002a455:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c002a459:	57                   	push   edi
c002a45a:	55                   	push   ebp
c002a45b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002a45f:	e8 ea fd ff ff       	call   c002a24e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a464:	83 c4 14             	add    esp,0x14
c002a467:	89 c6                	mov    esi,eax
c002a469:	53                   	push   ebx
c002a46a:	c1 e6 10             	shl    esi,0x10
c002a46d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a471:	51                   	push   ecx
c002a472:	57                   	push   edi
c002a473:	55                   	push   ebp
c002a474:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002a478:	e8 d1 fd ff ff       	call   c002a24e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a47d:	83 c4 3c             	add    esp,0x3c
c002a480:	0f b7 c0             	movzx  eax,ax
c002a483:	5b                   	pop    ebx
c002a484:	09 f0                	or     eax,esi
c002a486:	5e                   	pop    esi
c002a487:	5f                   	pop    edi
c002a488:	5d                   	pop    ebp
c002a489:	c3                   	ret    

c002a48a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002a48a:	55                   	push   ebp
c002a48b:	57                   	push   edi
c002a48c:	56                   	push   esi
c002a48d:	53                   	push   ebx
c002a48e:	83 ec 0c             	sub    esp,0xc
c002a491:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002a495:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002a499:	89 f5                	mov    ebp,esi
c002a49b:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c002a4a1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002a4a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002a4a9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002a4ad:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002a4b1:	83 f9 01             	cmp    ecx,0x1
c002a4b4:	75 5d                	jne    c002a513 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c002a4b6:	0f b6 c8             	movzx  ecx,al
c002a4b9:	0f b6 d2             	movzx  edx,dl
c002a4bc:	c1 e1 10             	shl    ecx,0x10
c002a4bf:	c1 e2 0b             	shl    edx,0xb
c002a4c2:	89 f0                	mov    eax,esi
c002a4c4:	25 fc 00 00 00       	and    eax,0xfc
c002a4c9:	09 c1                	or     ecx,eax
c002a4cb:	89 e8                	mov    eax,ebp
c002a4cd:	0f b6 c0             	movzx  eax,al
c002a4d0:	c1 e0 08             	shl    eax,0x8
c002a4d3:	09 c1                	or     ecx,eax
c002a4d5:	09 d1                	or     ecx,edx
c002a4d7:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a4dc:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002a4e2:	89 c8                	mov    eax,ecx
c002a4e4:	ef                   	out    dx,eax
c002a4e5:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a4ea:	ed                   	in     eax,dx
c002a4eb:	0f b7 db             	movzx  ebx,bx
c002a4ee:	83 e6 02             	and    esi,0x2
c002a4f1:	74 0a                	je     c002a4fd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c002a4f3:	0f b7 d0             	movzx  edx,ax
c002a4f6:	c1 e3 10             	shl    ebx,0x10
c002a4f9:	09 d3                	or     ebx,edx
c002a4fb:	eb 05                	jmp    c002a502 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c002a4fd:	66 31 c0             	xor    ax,ax
c002a500:	09 c3                	or     ebx,eax
c002a502:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a507:	89 c8                	mov    eax,ecx
c002a509:	ef                   	out    dx,eax
c002a50a:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a50f:	89 d8                	mov    eax,ebx
c002a511:	eb 41                	jmp    c002a554 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002a513:	83 f9 02             	cmp    ecx,0x2
c002a516:	75 45                	jne    c002a55d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c002a518:	83 ec 0c             	sub    esp,0xc
c002a51b:	0f b6 d2             	movzx  edx,dl
c002a51e:	89 f1                	mov    ecx,esi
c002a520:	0f b6 c0             	movzx  eax,al
c002a523:	0f b6 f1             	movzx  esi,cl
c002a526:	89 e9                	mov    ecx,ebp
c002a528:	56                   	push   esi
c002a529:	0f b6 c9             	movzx  ecx,cl
c002a52c:	51                   	push   ecx
c002a52d:	52                   	push   edx
c002a52e:	50                   	push   eax
c002a52f:	57                   	push   edi
c002a530:	e8 a3 fc ff ff       	call   c002a1d8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a535:	89 c2                	mov    edx,eax
c002a537:	ed                   	in     eax,dx
c002a538:	83 c4 20             	add    esp,0x20
c002a53b:	0f b7 db             	movzx  ebx,bx
c002a53e:	f6 c2 02             	test   dl,0x2
c002a541:	74 0c                	je     c002a54f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c002a543:	0f b7 c8             	movzx  ecx,ax
c002a546:	89 d8                	mov    eax,ebx
c002a548:	c1 e0 10             	shl    eax,0x10
c002a54b:	09 c8                	or     eax,ecx
c002a54d:	eb 05                	jmp    c002a554 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002a54f:	66 31 c0             	xor    ax,ax
c002a552:	09 d8                	or     eax,ebx
c002a554:	ef                   	out    dx,eax
c002a555:	83 c4 0c             	add    esp,0xc
c002a558:	5b                   	pop    ebx
c002a559:	5e                   	pop    esi
c002a55a:	5f                   	pop    edi
c002a55b:	5d                   	pop    ebp
c002a55c:	c3                   	ret    
c002a55d:	c7 44 24 20 c7 36 03 c0 	mov    DWORD PTR [esp+0x20],0xc00336c7
c002a565:	83 c4 0c             	add    esp,0xc
c002a568:	5b                   	pop    ebx
c002a569:	5e                   	pop    esi
c002a56a:	5f                   	pop    edi
c002a56b:	5d                   	pop    ebp
c002a56c:	e9 f5 5c ff ff       	jmp    c0020266 <KePanic(char const*)>
c002a571:	90                   	nop

c002a572 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c002a572:	55                   	push   ebp
c002a573:	57                   	push   edi
c002a574:	56                   	push   esi
c002a575:	53                   	push   ebx
c002a576:	81 ec 4c 01 00 00    	sub    esp,0x14c
c002a57c:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c002a583:	80 3d ac 0b 04 c0 00 	cmp    BYTE PTR ds:0xc0040bac,0x0
c002a58a:	0f 85 bd 00 00 00    	jne    c002a64d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c002a590:	83 ec 0c             	sub    esp,0xc
c002a593:	68 14 01 00 00       	push   0x114
c002a598:	e8 21 be fe ff       	call   c00163be <malloc>
c002a59d:	83 c4 0c             	add    esp,0xc
c002a5a0:	89 c3                	mov    ebx,eax
c002a5a2:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c002a5a8:	68 cd 36 03 c0       	push   0xc00336cd
c002a5ad:	50                   	push   eax
c002a5ae:	e8 a1 fe fe ff       	call   c001a454 <File::File(char const*, Process*)>
c002a5b3:	83 c4 10             	add    esp,0x10
c002a5b6:	85 db                	test   ebx,ebx
c002a5b8:	0f 84 67 02 00 00    	je     c002a825 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a5be:	56                   	push   esi
c002a5bf:	56                   	push   esi
c002a5c0:	6a 01                	push   0x1
c002a5c2:	53                   	push   ebx
c002a5c3:	e8 aa fe fe ff       	call   c001a472 <File::open(FileOpenMode)>
c002a5c8:	83 c4 10             	add    esp,0x10
c002a5cb:	85 c0                	test   eax,eax
c002a5cd:	0f 85 52 02 00 00    	jne    c002a825 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a5d3:	52                   	push   edx
c002a5d4:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c002a5d8:	50                   	push   eax
c002a5d9:	8d 44 24 48          	lea    eax,[esp+0x48]
c002a5dd:	50                   	push   eax
c002a5de:	53                   	push   ebx
c002a5df:	e8 90 01 ff ff       	call   c001a774 <File::stat(unsigned long long*, bool*)>
c002a5e4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002a5e8:	40                   	inc    eax
c002a5e9:	89 04 24             	mov    DWORD PTR [esp],eax
c002a5ec:	e8 cd bd fe ff       	call   c00163be <malloc>
c002a5f1:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c002a5f5:	a3 a8 0b 04 c0       	mov    ds:0xc0040ba8,eax
c002a5fa:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c002a5fe:	59                   	pop    ecx
c002a5ff:	8b 13                	mov    edx,DWORD PTR [ebx]
c002a601:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c002a605:	51                   	push   ecx
c002a606:	50                   	push   eax
c002a607:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002a60b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002a60f:	53                   	push   ebx
c002a610:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002a613:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c002a617:	83 c4 20             	add    esp,0x20
c002a61a:	89 c8                	mov    eax,ecx
c002a61c:	99                   	cdq    
c002a61d:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c002a621:	0f 85 fe 01 00 00    	jne    c002a825 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a627:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c002a62b:	0f 85 f4 01 00 00    	jne    c002a825 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a631:	83 ec 0c             	sub    esp,0xc
c002a634:	53                   	push   ebx
c002a635:	e8 96 fe fe ff       	call   c001a4d0 <File::close()>
c002a63a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002a63e:	c6 05 ac 0b 04 c0 01 	mov    BYTE PTR ds:0xc0040bac,0x1
c002a645:	a3 a4 0b 04 c0       	mov    ds:0xc0040ba4,eax
c002a64a:	83 c4 10             	add    esp,0x10
c002a64d:	a1 a4 0b 04 c0       	mov    eax,ds:0xc0040ba4
c002a652:	8b 1d a8 0b 04 c0    	mov    ebx,DWORD PTR ds:0xc0040ba8
c002a658:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002a65c:	31 f6                	xor    esi,esi
c002a65e:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c002a666:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c002a66d:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c002a672:	31 c9                	xor    ecx,ecx
c002a674:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c002a67c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c002a681:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c002a689:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002a68d:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c002a695:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c002a699:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c002a69d:	0f 8e 82 01 00 00    	jle    c002a825 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a6a3:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c002a6a6:	d4 40                	aam    0x40
c002a6a8:	d5 39                	aad    0x39
c002a6aa:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c002a6ae:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c002a6b2:	d4 40                	aam    0x40
c002a6b4:	d5 39                	aad    0x39
c002a6b6:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002a6ba:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c002a6be:	d4 40                	aam    0x40
c002a6c0:	d5 39                	aad    0x39
c002a6c2:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c002a6c6:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c002a6ca:	d4 40                	aam    0x40
c002a6cc:	d5 39                	aad    0x39
c002a6ce:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c002a6d2:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c002a6d6:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c002a6da:	3c 56                	cmp    al,0x56
c002a6dc:	74 43                	je     c002a721 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c002a6de:	d4 40                	aam    0x40
c002a6e0:	d5 39                	aad    0x39
c002a6e2:	8d 48 d0             	lea    ecx,[eax-0x30]
c002a6e5:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c002a6e9:	0f b6 c9             	movzx  ecx,cl
c002a6ec:	c1 e1 04             	shl    ecx,0x4
c002a6ef:	d4 40                	aam    0x40
c002a6f1:	d5 39                	aad    0x39
c002a6f3:	83 e8 30             	sub    eax,0x30
c002a6f6:	0f b6 c0             	movzx  eax,al
c002a6f9:	09 c1                	or     ecx,eax
c002a6fb:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c002a6ff:	c1 e1 04             	shl    ecx,0x4
c002a702:	d4 40                	aam    0x40
c002a704:	d5 39                	aad    0x39
c002a706:	83 e8 30             	sub    eax,0x30
c002a709:	0f b6 c0             	movzx  eax,al
c002a70c:	09 c1                	or     ecx,eax
c002a70e:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c002a712:	c1 e1 04             	shl    ecx,0x4
c002a715:	d4 40                	aam    0x40
c002a717:	d5 39                	aad    0x39
c002a719:	83 e8 30             	sub    eax,0x30
c002a71c:	0f b6 c0             	movzx  eax,al
c002a71f:	09 c1                	or     ecx,eax
c002a721:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c002a725:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c002a729:	3c 58                	cmp    al,0x58
c002a72b:	74 47                	je     c002a774 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c002a72d:	d4 40                	aam    0x40
c002a72f:	d5 39                	aad    0x39
c002a731:	8d 50 d0             	lea    edx,[eax-0x30]
c002a734:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c002a738:	0f b6 d2             	movzx  edx,dl
c002a73b:	c1 e2 04             	shl    edx,0x4
c002a73e:	d4 40                	aam    0x40
c002a740:	d5 39                	aad    0x39
c002a742:	83 e8 30             	sub    eax,0x30
c002a745:	0f b6 c0             	movzx  eax,al
c002a748:	09 c2                	or     edx,eax
c002a74a:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c002a74e:	c1 e2 04             	shl    edx,0x4
c002a751:	d4 40                	aam    0x40
c002a753:	d5 39                	aad    0x39
c002a755:	83 e8 30             	sub    eax,0x30
c002a758:	0f b6 c0             	movzx  eax,al
c002a75b:	09 c2                	or     edx,eax
c002a75d:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c002a761:	c1 e2 04             	shl    edx,0x4
c002a764:	d4 40                	aam    0x40
c002a766:	d5 39                	aad    0x39
c002a768:	83 e8 30             	sub    eax,0x30
c002a76b:	0f b6 c0             	movzx  eax,al
c002a76e:	09 c2                	or     edx,eax
c002a770:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002a774:	83 c6 10             	add    esi,0x10
c002a777:	8d 7c 24 40          	lea    edi,[esp+0x40]
c002a77b:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c002a77f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c002a783:	83 fa 0a             	cmp    edx,0xa
c002a786:	74 0b                	je     c002a793 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c002a788:	47                   	inc    edi
c002a789:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c002a78d:	75 19                	jne    c002a7a8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c002a78f:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c002a793:	31 c0                	xor    eax,eax
c002a795:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c002a79a:	0f 94 c0             	sete   al
c002a79d:	01 c6                	add    esi,eax
c002a79f:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c002a7a4:	75 0b                	jne    c002a7b1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c002a7a6:	eb 14                	jmp    c002a7bc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c002a7a8:	46                   	inc    esi
c002a7a9:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c002a7ac:	c6 07 00             	mov    BYTE PTR [edi],0x0
c002a7af:	eb ca                	jmp    c002a77b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c002a7b1:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c002a7b6:	0f 85 dd fe ff ff    	jne    c002a699 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002a7bc:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c002a7c1:	74 10                	je     c002a7d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c002a7c3:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c002a7c8:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c002a7cd:	0f 85 c6 fe ff ff    	jne    c002a699 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002a7d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002a7d7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002a7db:	83 e8 30             	sub    eax,0x30
c002a7de:	83 ef 30             	sub    edi,0x30
c002a7e1:	c1 e0 04             	shl    eax,0x4
c002a7e4:	09 f8                	or     eax,edi
c002a7e6:	0f b6 c0             	movzx  eax,al
c002a7e9:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c002a7ed:	0f 85 a6 fe ff ff    	jne    c002a699 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002a7f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a7f7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c002a7fb:	83 e8 30             	sub    eax,0x30
c002a7fe:	83 ef 30             	sub    edi,0x30
c002a801:	c1 e0 04             	shl    eax,0x4
c002a804:	09 f8                	or     eax,edi
c002a806:	0f b6 c0             	movzx  eax,al
c002a809:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c002a80d:	0f 85 86 fe ff ff    	jne    c002a699 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002a813:	50                   	push   eax
c002a814:	50                   	push   eax
c002a815:	8d 44 24 48          	lea    eax,[esp+0x48]
c002a819:	50                   	push   eax
c002a81a:	55                   	push   ebp
c002a81b:	e8 20 5e fd ff       	call   c0000640 <strcpy>
c002a820:	83 c4 10             	add    esp,0x10
c002a823:	eb 06                	jmp    c002a82b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c002a825:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c002a829:	31 ed                	xor    ebp,ebp
c002a82b:	81 c4 4c 01 00 00    	add    esp,0x14c
c002a831:	89 e8                	mov    eax,ebp
c002a833:	5b                   	pop    ebx
c002a834:	5e                   	pop    esi
c002a835:	5f                   	pop    edi
c002a836:	5d                   	pop    ebp
c002a837:	c3                   	ret    

c002a838 <PCI::checkBus(unsigned char)>:
c002a838:	56                   	push   esi
c002a839:	53                   	push   ebx
c002a83a:	31 db                	xor    ebx,ebx
c002a83c:	51                   	push   ecx
c002a83d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002a842:	52                   	push   edx
c002a843:	53                   	push   ebx
c002a844:	43                   	inc    ebx
c002a845:	56                   	push   esi
c002a846:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a84a:	e8 03 03 00 00       	call   c002ab52 <PCI::checkDevice(unsigned char, unsigned char)>
c002a84f:	83 c4 10             	add    esp,0x10
c002a852:	83 fb 20             	cmp    ebx,0x20
c002a855:	75 eb                	jne    c002a842 <PCI::checkBus(unsigned char)+0xa>
c002a857:	58                   	pop    eax
c002a858:	5b                   	pop    ebx
c002a859:	5e                   	pop    esi
c002a85a:	c3                   	ret    
c002a85b:	90                   	nop

c002a85c <PCI::foundDevice(PCIDeviceInfo)>:
c002a85c:	55                   	push   ebp
c002a85d:	57                   	push   edi
c002a85e:	56                   	push   esi
c002a85f:	53                   	push   ebx
c002a860:	83 ec 1c             	sub    esp,0x1c
c002a863:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c002a868:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002a86c:	3d ff ff 00 00       	cmp    eax,0xffff
c002a871:	0f 84 57 01 00 00    	je     c002a9ce <PCI::foundDevice(PCIDeviceInfo)+0x172>
c002a877:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c002a87c:	66 3d 06 04          	cmp    ax,0x406
c002a880:	75 2c                	jne    c002a8ae <PCI::foundDevice(PCIDeviceInfo)+0x52>
c002a882:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c002a887:	50                   	push   eax
c002a888:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c002a88d:	50                   	push   eax
c002a88e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c002a893:	50                   	push   eax
c002a894:	53                   	push   ebx
c002a895:	e8 64 fb ff ff       	call   c002a3fe <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002a89a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c002a89e:	0f b6 c0             	movzx  eax,al
c002a8a1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c002a8a5:	83 c4 2c             	add    esp,0x2c
c002a8a8:	5b                   	pop    ebx
c002a8a9:	5e                   	pop    esi
c002a8aa:	5f                   	pop    edi
c002a8ab:	5d                   	pop    ebp
c002a8ac:	eb 8a                	jmp    c002a838 <PCI::checkBus(unsigned char)>
c002a8ae:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002a8b2:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c002a8b8:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002a8bc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c002a8c0:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c002a8c5:	85 d2                	test   edx,edx
c002a8c7:	74 36                	je     c002a8ff <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c002a8c9:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c002a8cc:	85 c9                	test   ecx,ecx
c002a8ce:	74 2b                	je     c002a8fb <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c002a8d0:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c002a8d6:	31 ee                	xor    esi,ebp
c002a8d8:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c002a8de:	75 1b                	jne    c002a8fb <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c002a8e0:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c002a8e4:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c002a8ea:	75 0f                	jne    c002a8fb <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c002a8ec:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c002a8f3:	39 f9                	cmp    ecx,edi
c002a8f5:	0f 84 d3 00 00 00    	je     c002a9ce <PCI::foundDevice(PCIDeviceInfo)+0x172>
c002a8fb:	8b 12                	mov    edx,DWORD PTR [edx]
c002a8fd:	eb c6                	jmp    c002a8c5 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c002a8ff:	3d 01 06 00 00       	cmp    eax,0x601
c002a904:	75 19                	jne    c002a91f <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c002a906:	83 ec 0c             	sub    esp,0xc
c002a909:	68 64 01 00 00       	push   0x164
c002a90e:	e8 ab ba fe ff       	call   c00163be <malloc>
c002a913:	89 c5                	mov    ebp,eax
c002a915:	89 04 24             	mov    DWORD PTR [esp],eax
c002a918:	e8 a1 0e 00 00       	call   c002b7be <SATABus::SATABus()>
c002a91d:	eb 1e                	jmp    c002a93d <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c002a91f:	3d 01 01 00 00       	cmp    eax,0x101
c002a924:	75 62                	jne    c002a988 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c002a926:	83 ec 0c             	sub    esp,0xc
c002a929:	68 70 02 00 00       	push   0x270
c002a92e:	e8 8b ba fe ff       	call   c00163be <malloc>
c002a933:	89 c5                	mov    ebp,eax
c002a935:	89 04 24             	mov    DWORD PTR [esp],eax
c002a938:	e8 e5 02 00 00       	call   c002ac22 <IDE::IDE()>
c002a93d:	5f                   	pop    edi
c002a93e:	58                   	pop    eax
c002a93f:	55                   	push   ebp
c002a940:	53                   	push   ebx
c002a941:	e8 88 09 ff ff       	call   c001b2ce <Device::addChild(Device*)>
c002a946:	83 ec 1c             	sub    esp,0x1c
c002a949:	b9 09 00 00 00       	mov    ecx,0x9
c002a94e:	fc                   	cld    
c002a94f:	89 e7                	mov    edi,esp
c002a951:	8d 74 24 60          	lea    esi,[esp+0x60]
c002a955:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002a957:	55                   	push   ebp
c002a958:	e8 b7 08 ff ff       	call   c001b214 <Device::preOpenPCI(PCIDeviceInfo)>
c002a95d:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002a960:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c002a964:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c002a96c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c002a974:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c002a97c:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c002a97f:	83 c4 4c             	add    esp,0x4c
c002a982:	5b                   	pop    ebx
c002a983:	5e                   	pop    esi
c002a984:	5f                   	pop    edi
c002a985:	5d                   	pop    ebp
c002a986:	ff e0                	jmp    eax
c002a988:	83 ec 0c             	sub    esp,0xc
c002a98b:	68 58 01 00 00       	push   0x158
c002a990:	e8 29 ba fe ff       	call   c00163be <malloc>
c002a995:	89 c5                	mov    ebp,eax
c002a997:	58                   	pop    eax
c002a998:	5a                   	pop    edx
c002a999:	68 e6 36 03 c0       	push   0xc00336e6
c002a99e:	55                   	push   ebp
c002a99f:	e8 de 0b ff ff       	call   c001b582 <DriverlessDevice::DriverlessDevice(char const*)>
c002a9a4:	59                   	pop    ecx
c002a9a5:	5e                   	pop    esi
c002a9a6:	55                   	push   ebp
c002a9a7:	53                   	push   ebx
c002a9a8:	e8 21 09 ff ff       	call   c001b2ce <Device::addChild(Device*)>
c002a9ad:	83 c4 10             	add    esp,0x10
c002a9b0:	b9 09 00 00 00       	mov    ecx,0x9
c002a9b5:	fc                   	cld    
c002a9b6:	8d 7c 24 34          	lea    edi,[esp+0x34]
c002a9ba:	89 fe                	mov    esi,edi
c002a9bc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002a9be:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c002a9c2:	83 c4 1c             	add    esp,0x1c
c002a9c5:	5b                   	pop    ebx
c002a9c6:	5e                   	pop    esi
c002a9c7:	5f                   	pop    edi
c002a9c8:	5d                   	pop    ebp
c002a9c9:	e9 46 08 ff ff       	jmp    c001b214 <Device::preOpenPCI(PCIDeviceInfo)>
c002a9ce:	83 c4 1c             	add    esp,0x1c
c002a9d1:	5b                   	pop    ebx
c002a9d2:	5e                   	pop    esi
c002a9d3:	5f                   	pop    edi
c002a9d4:	5d                   	pop    ebp
c002a9d5:	c3                   	ret    

c002a9d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002a9d6:	55                   	push   ebp
c002a9d7:	57                   	push   edi
c002a9d8:	56                   	push   esi
c002a9d9:	53                   	push   ebx
c002a9da:	83 ec 68             	sub    esp,0x68
c002a9dd:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c002a9e1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c002a9e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002a9ec:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c002a9f3:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c002a9f8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002a9fc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c002aa03:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c002aa08:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002aa0c:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c002aa11:	6a 0c                	push   0xc
c002aa13:	57                   	push   edi
c002aa14:	53                   	push   ebx
c002aa15:	56                   	push   esi
c002aa16:	55                   	push   ebp
c002aa17:	e8 32 f8 ff ff       	call   c002a24e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002aa1c:	83 c4 20             	add    esp,0x20
c002aa1f:	57                   	push   edi
c002aa20:	53                   	push   ebx
c002aa21:	56                   	push   esi
c002aa22:	55                   	push   ebp
c002aa23:	e8 1c f9 ff ff       	call   c002a344 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002aa28:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c002aa2d:	57                   	push   edi
c002aa2e:	53                   	push   ebx
c002aa2f:	56                   	push   esi
c002aa30:	55                   	push   ebp
c002aa31:	e8 a4 f9 ff ff       	call   c002a3da <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002aa36:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c002aa3a:	83 c4 14             	add    esp,0x14
c002aa3d:	6a 3c                	push   0x3c
c002aa3f:	57                   	push   edi
c002aa40:	53                   	push   ebx
c002aa41:	56                   	push   esi
c002aa42:	55                   	push   ebp
c002aa43:	e8 06 f8 ff ff       	call   c002a24e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002aa48:	0f b6 c4             	movzx  eax,ah
c002aa4b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002aa4f:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002aa53:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c002aa57:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002aa5c:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c002aa62:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c002aa68:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002aa6c:	83 c4 20             	add    esp,0x20
c002aa6f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c002aa74:	74 30                	je     c002aaa6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002aa76:	31 c0                	xor    eax,eax
c002aa78:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c002aa7c:	7e 28                	jle    c002aaa6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002aa7e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c002aa86:	39 cb                	cmp    ebx,ecx
c002aa88:	75 19                	jne    c002aaa3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002aa8a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c002aa92:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c002aa96:	75 0b                	jne    c002aaa3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002aa98:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c002aa9f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c002aaa3:	40                   	inc    eax
c002aaa4:	eb d2                	jmp    c002aa78 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c002aaa6:	31 d2                	xor    edx,edx
c002aaa8:	83 ec 0c             	sub    esp,0xc
c002aaab:	57                   	push   edi
c002aaac:	53                   	push   ebx
c002aaad:	56                   	push   esi
c002aaae:	52                   	push   edx
c002aaaf:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c002aab3:	55                   	push   ebp
c002aab4:	e8 6d f9 ff ff       	call   c002a426 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c002aab9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002aabd:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002aac1:	42                   	inc    edx
c002aac2:	83 c4 20             	add    esp,0x20
c002aac5:	83 fa 06             	cmp    edx,0x6
c002aac8:	75 de                	jne    c002aaa8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c002aaca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002aace:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002aad2:	c1 e2 08             	shl    edx,0x8
c002aad5:	83 ec 0c             	sub    esp,0xc
c002aad8:	0f b6 c4             	movzx  eax,ah
c002aadb:	09 d0                	or     eax,edx
c002aadd:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c002aae2:	6a 02                	push   0x2
c002aae4:	57                   	push   edi
c002aae5:	53                   	push   ebx
c002aae6:	56                   	push   esi
c002aae7:	55                   	push   ebp
c002aae8:	e8 61 f7 ff ff       	call   c002a24e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002aaed:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c002aaf2:	83 c4 20             	add    esp,0x20
c002aaf5:	57                   	push   edi
c002aaf6:	53                   	push   ebx
c002aaf7:	56                   	push   esi
c002aaf8:	55                   	push   ebp
c002aaf9:	e8 90 f8 ff ff       	call   c002a38e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002aafe:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002ab02:	57                   	push   edi
c002ab03:	53                   	push   ebx
c002ab04:	56                   	push   esi
c002ab05:	55                   	push   ebp
c002ab06:	e8 ed f7 ff ff       	call   c002a2f8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002ab0b:	b9 09 00 00 00       	mov    ecx,0x9
c002ab10:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c002ab15:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c002ab19:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c002ab1d:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c002ab21:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c002ab25:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c002ab29:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c002ab2d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002ab31:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c002ab35:	83 ec 0c             	sub    esp,0xc
c002ab38:	fc                   	cld    
c002ab39:	89 e7                	mov    edi,esp
c002ab3b:	8d 74 24 58          	lea    esi,[esp+0x58]
c002ab3f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002ab41:	55                   	push   ebp
c002ab42:	e8 15 fd ff ff       	call   c002a85c <PCI::foundDevice(PCIDeviceInfo)>
c002ab47:	81 c4 8c 00 00 00    	add    esp,0x8c
c002ab4d:	5b                   	pop    ebx
c002ab4e:	5e                   	pop    esi
c002ab4f:	5f                   	pop    edi
c002ab50:	5d                   	pop    ebp
c002ab51:	c3                   	ret    

c002ab52 <PCI::checkDevice(unsigned char, unsigned char)>:
c002ab52:	55                   	push   ebp
c002ab53:	57                   	push   edi
c002ab54:	56                   	push   esi
c002ab55:	53                   	push   ebx
c002ab56:	83 ec 0c             	sub    esp,0xc
c002ab59:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002ab5d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c002ab62:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002ab67:	6a 00                	push   0x0
c002ab69:	56                   	push   esi
c002ab6a:	57                   	push   edi
c002ab6b:	55                   	push   ebp
c002ab6c:	e8 87 f7 ff ff       	call   c002a2f8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002ab71:	6a 00                	push   0x0
c002ab73:	56                   	push   esi
c002ab74:	57                   	push   edi
c002ab75:	55                   	push   ebp
c002ab76:	e8 5b fe ff ff       	call   c002a9d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002ab7b:	83 c4 20             	add    esp,0x20
c002ab7e:	6a 00                	push   0x0
c002ab80:	56                   	push   esi
c002ab81:	57                   	push   edi
c002ab82:	55                   	push   ebp
c002ab83:	e8 94 f7 ff ff       	call   c002a31c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002ab88:	83 c4 10             	add    esp,0x10
c002ab8b:	a8 80                	test   al,0x80
c002ab8d:	74 2d                	je     c002abbc <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c002ab8f:	bb 01 00 00 00       	mov    ebx,0x1
c002ab94:	53                   	push   ebx
c002ab95:	56                   	push   esi
c002ab96:	57                   	push   edi
c002ab97:	55                   	push   ebp
c002ab98:	e8 5b f7 ff ff       	call   c002a2f8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002ab9d:	83 c4 10             	add    esp,0x10
c002aba0:	0f b7 c0             	movzx  eax,ax
c002aba3:	3d ff ff 00 00       	cmp    eax,0xffff
c002aba8:	74 0c                	je     c002abb6 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c002abaa:	53                   	push   ebx
c002abab:	56                   	push   esi
c002abac:	57                   	push   edi
c002abad:	55                   	push   ebp
c002abae:	e8 23 fe ff ff       	call   c002a9d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002abb3:	83 c4 10             	add    esp,0x10
c002abb6:	43                   	inc    ebx
c002abb7:	83 fb 08             	cmp    ebx,0x8
c002abba:	75 d8                	jne    c002ab94 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002abbc:	83 c4 0c             	add    esp,0xc
c002abbf:	5b                   	pop    ebx
c002abc0:	5e                   	pop    esi
c002abc1:	5f                   	pop    edi
c002abc2:	5d                   	pop    ebp
c002abc3:	c3                   	ret    

c002abc4 <PCI::detect()>:
c002abc4:	56                   	push   esi
c002abc5:	53                   	push   ebx
c002abc6:	53                   	push   ebx
c002abc7:	31 db                	xor    ebx,ebx
c002abc9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002abcd:	6a 00                	push   0x0
c002abcf:	6a 00                	push   0x0
c002abd1:	6a 00                	push   0x0
c002abd3:	56                   	push   esi
c002abd4:	e8 43 f7 ff ff       	call   c002a31c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002abd9:	83 c4 10             	add    esp,0x10
c002abdc:	a8 80                	test   al,0x80
c002abde:	75 21                	jne    c002ac01 <PCI::detect()+0x3d>
c002abe0:	51                   	push   ecx
c002abe1:	51                   	push   ecx
c002abe2:	6a 00                	push   0x0
c002abe4:	56                   	push   esi
c002abe5:	e8 4e fc ff ff       	call   c002a838 <PCI::checkBus(unsigned char)>
c002abea:	83 c4 10             	add    esp,0x10
c002abed:	eb 2a                	jmp    c002ac19 <PCI::detect()+0x55>
c002abef:	52                   	push   edx
c002abf0:	52                   	push   edx
c002abf1:	53                   	push   ebx
c002abf2:	43                   	inc    ebx
c002abf3:	56                   	push   esi
c002abf4:	e8 3f fc ff ff       	call   c002a838 <PCI::checkBus(unsigned char)>
c002abf9:	83 c4 10             	add    esp,0x10
c002abfc:	83 fb 08             	cmp    ebx,0x8
c002abff:	74 18                	je     c002ac19 <PCI::detect()+0x55>
c002ac01:	53                   	push   ebx
c002ac02:	6a 00                	push   0x0
c002ac04:	6a 00                	push   0x0
c002ac06:	56                   	push   esi
c002ac07:	e8 ec f6 ff ff       	call   c002a2f8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002ac0c:	83 c4 10             	add    esp,0x10
c002ac0f:	0f b7 c0             	movzx  eax,ax
c002ac12:	3d ff ff 00 00       	cmp    eax,0xffff
c002ac17:	74 d6                	je     c002abef <PCI::detect()+0x2b>
c002ac19:	58                   	pop    eax
c002ac1a:	5b                   	pop    ebx
c002ac1b:	5e                   	pop    esi
c002ac1c:	c3                   	ret    
c002ac1d:	90                   	nop

c002ac1e <IDE::close(int, int, void*)>:
c002ac1e:	83 c8 ff             	or     eax,0xffffffff
c002ac21:	c3                   	ret    

c002ac22 <IDE::IDE()>:
c002ac22:	83 ec 0c             	sub    esp,0xc
c002ac25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ac29:	83 ec 08             	sub    esp,0x8
c002ac2c:	68 2c 37 03 c0       	push   0xc003372c
c002ac31:	50                   	push   eax
c002ac32:	e8 f1 09 ff ff       	call   c001b628 <HardDiskController::HardDiskController(char const*)>
c002ac37:	83 c4 10             	add    esp,0x10
c002ac3a:	ba bc 37 03 c0       	mov    edx,0xc00337bc
c002ac3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ac43:	89 10                	mov    DWORD PTR [eax],edx
c002ac45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ac49:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002ac50:	90                   	nop
c002ac51:	83 c4 0c             	add    esp,0xc
c002ac54:	c3                   	ret    
c002ac55:	90                   	nop

c002ac56 <IDE::prepareInterrupt(unsigned char)>:
c002ac56:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002ac5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002ac5f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002ac67:	c3                   	ret    

c002ac68 <selectDrive(unsigned char, unsigned char)>:
c002ac68:	c3                   	ret    
c002ac69:	90                   	nop

c002ac6a <IDE::getBase(unsigned char)>:
c002ac6a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002ac6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ac73:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002ac7b:	c3                   	ret    

c002ac7c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c002ac7c:	55                   	push   ebp
c002ac7d:	57                   	push   edi
c002ac7e:	56                   	push   esi
c002ac7f:	53                   	push   ebx
c002ac80:	83 ec 1c             	sub    esp,0x1c
c002ac83:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002ac87:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002ac8b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c002ac8e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002ac92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002ac96:	80 f9 03             	cmp    cl,0x3
c002ac99:	77 4f                	ja     c002acea <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c002ac9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002ac9f:	0f b6 fa             	movzx  edi,dl
c002aca2:	0f b6 db             	movzx  ebx,bl
c002aca5:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c002aca8:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c002acad:	80 ca 80             	or     dl,0x80
c002acb0:	52                   	push   edx
c002acb1:	6a 0c                	push   0xc
c002acb3:	57                   	push   edi
c002acb4:	56                   	push   esi
c002acb5:	e8 c2 ff ff ff       	call   c002ac7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002acba:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002acbf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002acc3:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002acc7:	ee                   	out    dx,al
c002acc8:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002accd:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c002acd1:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002acd5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002acd9:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002ace1:	83 c4 2c             	add    esp,0x2c
c002ace4:	5b                   	pop    ebx
c002ace5:	5e                   	pop    esi
c002ace6:	5f                   	pop    edi
c002ace7:	5d                   	pop    ebp
c002ace8:	eb 92                	jmp    c002ac7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002acea:	0f b6 cb             	movzx  ecx,bl
c002aced:	83 f9 07             	cmp    ecx,0x7
c002acf0:	77 12                	ja     c002ad04 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c002acf2:	0f b6 d2             	movzx  edx,dl
c002acf5:	0f b6 db             	movzx  ebx,bl
c002acf8:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c002ad00:	01 da                	add    edx,ebx
c002ad02:	eb 2f                	jmp    c002ad33 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002ad04:	83 f9 0d             	cmp    ecx,0xd
c002ad07:	77 13                	ja     c002ad1c <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c002ad09:	0f b6 d2             	movzx  edx,dl
c002ad0c:	0f b6 db             	movzx  ebx,bl
c002ad0f:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c002ad16:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002ad1a:	eb 17                	jmp    c002ad33 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002ad1c:	83 f9 15             	cmp    ecx,0x15
c002ad1f:	77 13                	ja     c002ad34 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c002ad21:	0f b6 d2             	movzx  edx,dl
c002ad24:	0f b6 db             	movzx  ebx,bl
c002ad27:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c002ad2f:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002ad33:	ee                   	out    dx,al
c002ad34:	83 c4 1c             	add    esp,0x1c
c002ad37:	5b                   	pop    ebx
c002ad38:	5e                   	pop    esi
c002ad39:	5f                   	pop    edi
c002ad3a:	5d                   	pop    ebp
c002ad3b:	c3                   	ret    

c002ad3c <IDE::read(unsigned char, unsigned char)>:
c002ad3c:	55                   	push   ebp
c002ad3d:	57                   	push   edi
c002ad3e:	56                   	push   esi
c002ad3f:	53                   	push   ebx
c002ad40:	83 ec 1c             	sub    esp,0x1c
c002ad43:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002ad47:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002ad4b:	8d 43 f8             	lea    eax,[ebx-0x8]
c002ad4e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002ad52:	3c 03                	cmp    al,0x3
c002ad54:	77 40                	ja     c002ad96 <IDE::read(unsigned char, unsigned char)+0x5a>
c002ad56:	0f b6 f9             	movzx  edi,cl
c002ad59:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c002ad5c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002ad61:	0c 80                	or     al,0x80
c002ad63:	50                   	push   eax
c002ad64:	6a 0c                	push   0xc
c002ad66:	57                   	push   edi
c002ad67:	56                   	push   esi
c002ad68:	e8 0f ff ff ff       	call   c002ac7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ad6d:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c002ad72:	0f b6 d3             	movzx  edx,bl
c002ad75:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002ad79:	ec                   	in     al,dx
c002ad7a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002ad7e:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c002ad83:	52                   	push   edx
c002ad84:	6a 0c                	push   0xc
c002ad86:	57                   	push   edi
c002ad87:	56                   	push   esi
c002ad88:	e8 ef fe ff ff       	call   c002ac7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ad8d:	83 c4 20             	add    esp,0x20
c002ad90:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002ad94:	eb 4c                	jmp    c002ade2 <IDE::read(unsigned char, unsigned char)+0xa6>
c002ad96:	0f b6 d3             	movzx  edx,bl
c002ad99:	83 fa 07             	cmp    edx,0x7
c002ad9c:	77 12                	ja     c002adb0 <IDE::read(unsigned char, unsigned char)+0x74>
c002ad9e:	0f b6 c9             	movzx  ecx,cl
c002ada1:	0f b6 d3             	movzx  edx,bl
c002ada4:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c002adac:	01 c2                	add    edx,eax
c002adae:	eb 31                	jmp    c002ade1 <IDE::read(unsigned char, unsigned char)+0xa5>
c002adb0:	83 fa 0d             	cmp    edx,0xd
c002adb3:	77 13                	ja     c002adc8 <IDE::read(unsigned char, unsigned char)+0x8c>
c002adb5:	0f b6 c9             	movzx  ecx,cl
c002adb8:	0f b6 d3             	movzx  edx,bl
c002adbb:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c002adc2:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002adc6:	eb 19                	jmp    c002ade1 <IDE::read(unsigned char, unsigned char)+0xa5>
c002adc8:	31 c0                	xor    eax,eax
c002adca:	83 fa 15             	cmp    edx,0x15
c002adcd:	77 13                	ja     c002ade2 <IDE::read(unsigned char, unsigned char)+0xa6>
c002adcf:	0f b6 c9             	movzx  ecx,cl
c002add2:	0f b6 d3             	movzx  edx,bl
c002add5:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c002addd:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002ade1:	ec                   	in     al,dx
c002ade2:	83 c4 1c             	add    esp,0x1c
c002ade5:	5b                   	pop    ebx
c002ade6:	5e                   	pop    esi
c002ade7:	5f                   	pop    edi
c002ade8:	5d                   	pop    ebp
c002ade9:	c3                   	ret    

c002adea <IDE::waitInterrupt(unsigned char)>:
c002adea:	55                   	push   ebp
c002adeb:	57                   	push   edi
c002adec:	56                   	push   esi
c002aded:	53                   	push   ebx
c002adee:	31 db                	xor    ebx,ebx
c002adf0:	83 ec 0c             	sub    esp,0xc
c002adf3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002adf7:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002adfc:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002ae04:	89 e8                	mov    eax,ebp
c002ae06:	84 c0                	test   al,al
c002ae08:	75 30                	jne    c002ae3a <IDE::waitInterrupt(unsigned char)+0x50>
c002ae0a:	50                   	push   eax
c002ae0b:	6a 0c                	push   0xc
c002ae0d:	56                   	push   esi
c002ae0e:	57                   	push   edi
c002ae0f:	e8 28 ff ff ff       	call   c002ad3c <IDE::read(unsigned char, unsigned char)>
c002ae14:	83 c4 10             	add    esp,0x10
c002ae17:	a8 01                	test   al,0x1
c002ae19:	75 27                	jne    c002ae42 <IDE::waitInterrupt(unsigned char)+0x58>
c002ae1b:	f6 c3 04             	test   bl,0x4
c002ae1e:	75 12                	jne    c002ae32 <IDE::waitInterrupt(unsigned char)+0x48>
c002ae20:	83 fb 32             	cmp    ebx,0x32
c002ae23:	7e 0d                	jle    c002ae32 <IDE::waitInterrupt(unsigned char)+0x48>
c002ae25:	83 ec 0c             	sub    esp,0xc
c002ae28:	6a 64                	push   0x64
c002ae2a:	e8 05 a6 ff ff       	call   c0025434 <milliTenthSleep(unsigned int)>
c002ae2f:	83 c4 10             	add    esp,0x10
c002ae32:	83 fb 3c             	cmp    ebx,0x3c
c002ae35:	74 0b                	je     c002ae42 <IDE::waitInterrupt(unsigned char)+0x58>
c002ae37:	43                   	inc    ebx
c002ae38:	eb c2                	jmp    c002adfc <IDE::waitInterrupt(unsigned char)+0x12>
c002ae3a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002ae42:	83 c4 0c             	add    esp,0xc
c002ae45:	89 e8                	mov    eax,ebp
c002ae47:	5b                   	pop    ebx
c002ae48:	5e                   	pop    esi
c002ae49:	5f                   	pop    edi
c002ae4a:	5d                   	pop    ebp
c002ae4b:	c3                   	ret    

c002ae4c <ideChannel0IRQHandler(regs*, void*)>:
c002ae4c:	83 ec 10             	sub    esp,0x10
c002ae4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002ae53:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002ae5a:	6a 07                	push   0x7
c002ae5c:	6a 00                	push   0x0
c002ae5e:	50                   	push   eax
c002ae5f:	e8 d8 fe ff ff       	call   c002ad3c <IDE::read(unsigned char, unsigned char)>
c002ae64:	83 c4 1c             	add    esp,0x1c
c002ae67:	c3                   	ret    

c002ae68 <ideChannel1IRQHandler(regs*, void*)>:
c002ae68:	83 ec 10             	sub    esp,0x10
c002ae6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002ae6f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002ae76:	6a 07                	push   0x7
c002ae78:	6a 01                	push   0x1
c002ae7a:	50                   	push   eax
c002ae7b:	e8 bc fe ff ff       	call   c002ad3c <IDE::read(unsigned char, unsigned char)>
c002ae80:	83 c4 1c             	add    esp,0x1c
c002ae83:	c3                   	ret    

c002ae84 <IDE::enableIRQs(unsigned char, bool)>:
c002ae84:	57                   	push   edi
c002ae85:	b8 02 00 00 00       	mov    eax,0x2
c002ae8a:	56                   	push   esi
c002ae8b:	53                   	push   ebx
c002ae8c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002ae90:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002ae94:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002ae99:	74 02                	je     c002ae9d <IDE::enableIRQs(unsigned char, bool)+0x19>
c002ae9b:	31 c0                	xor    eax,eax
c002ae9d:	0f b6 db             	movzx  ebx,bl
c002aea0:	bf 04 00 00 00       	mov    edi,0x4
c002aea5:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c002aeac:	50                   	push   eax
c002aead:	6a 0c                	push   0xc
c002aeaf:	53                   	push   ebx
c002aeb0:	56                   	push   esi
c002aeb1:	e8 c6 fd ff ff       	call   c002ac7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002aeb6:	83 c4 10             	add    esp,0x10
c002aeb9:	50                   	push   eax
c002aeba:	6a 0c                	push   0xc
c002aebc:	53                   	push   ebx
c002aebd:	56                   	push   esi
c002aebe:	e8 79 fe ff ff       	call   c002ad3c <IDE::read(unsigned char, unsigned char)>
c002aec3:	83 c4 10             	add    esp,0x10
c002aec6:	4f                   	dec    edi
c002aec7:	75 f0                	jne    c002aeb9 <IDE::enableIRQs(unsigned char, bool)+0x35>
c002aec9:	5b                   	pop    ebx
c002aeca:	5e                   	pop    esi
c002aecb:	5f                   	pop    edi
c002aecc:	c3                   	ret    
c002aecd:	90                   	nop

c002aece <IDE::open(int, int, void*)>:
c002aece:	55                   	push   ebp
c002aecf:	57                   	push   edi
c002aed0:	56                   	push   esi
c002aed1:	53                   	push   ebx
c002aed2:	83 ec 1c             	sub    esp,0x1c
c002aed5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002aed9:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002aee2:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002aeeb:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002aef2:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002aef9:	0f 85 de 02 00 00    	jne    c002b1dd <IDE::open(int, int, void*)+0x30f>
c002aeff:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002af05:	88 04 24             	mov    BYTE PTR [esp],al
c002af08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002af0b:	83 e0 7f             	and    eax,0x7f
c002af0e:	83 f8 05             	cmp    eax,0x5
c002af11:	74 05                	je     c002af18 <IDE::open(int, int, void*)+0x4a>
c002af13:	83 f8 0f             	cmp    eax,0xf
c002af16:	75 32                	jne    c002af4a <IDE::open(int, int, void*)+0x7c>
c002af18:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002af1e:	83 e0 fc             	and    eax,0xfffffffc
c002af21:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002af28:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002af2e:	83 e0 fc             	and    eax,0xfffffffc
c002af31:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002af38:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002af3e:	83 e0 fc             	and    eax,0xfffffffc
c002af41:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002af48:	eb 14                	jmp    c002af5e <IDE::open(int, int, void*)+0x90>
c002af4a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002af54:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002af5e:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002af65:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002af6c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002af70:	89 c6                	mov    esi,eax
c002af72:	bf f8 0c 00 00       	mov    edi,0xcf8
c002af77:	c1 e6 10             	shl    esi,0x10
c002af7a:	89 e8                	mov    eax,ebp
c002af7c:	89 fa                	mov    edx,edi
c002af7e:	c1 e0 0b             	shl    eax,0xb
c002af81:	09 f0                	or     eax,esi
c002af83:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002af8a:	c1 e6 08             	shl    esi,0x8
c002af8d:	09 c6                	or     esi,eax
c002af8f:	89 f0                	mov    eax,esi
c002af91:	0d 08 00 00 80       	or     eax,0x80000008
c002af96:	ef                   	out    dx,eax
c002af97:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002af9c:	89 ca                	mov    edx,ecx
c002af9e:	ed                   	in     eax,dx
c002af9f:	c1 e8 10             	shr    eax,0x10
c002afa2:	3d ff ff 00 00       	cmp    eax,0xffff
c002afa7:	0f 84 f9 00 00 00    	je     c002b0a6 <IDE::open(int, int, void*)+0x1d8>
c002afad:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c002afb3:	89 fa                	mov    edx,edi
c002afb5:	89 f0                	mov    eax,esi
c002afb7:	ef                   	out    dx,eax
c002afb8:	b0 fe                	mov    al,0xfe
c002afba:	89 ca                	mov    edx,ecx
c002afbc:	ee                   	out    dx,al
c002afbd:	89 f0                	mov    eax,esi
c002afbf:	89 fa                	mov    edx,edi
c002afc1:	ef                   	out    dx,eax
c002afc2:	89 ca                	mov    edx,ecx
c002afc4:	ed                   	in     eax,dx
c002afc5:	3c fe                	cmp    al,0xfe
c002afc7:	0f 85 a9 00 00 00    	jne    c002b076 <IDE::open(int, int, void*)+0x1a8>
c002afcd:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c002afd3:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c002afda:	74 33                	je     c002b00f <IDE::open(int, int, void*)+0x141>
c002afdc:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002afe2:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002afe6:	40                   	inc    eax
c002afe7:	83 ec 0c             	sub    esp,0xc
c002afea:	0f b6 c0             	movzx  eax,al
c002afed:	50                   	push   eax
c002afee:	55                   	push   ebp
c002afef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002aff3:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c002aff9:	51                   	push   ecx
c002affa:	e8 1d 35 ff ff       	call   c001e51c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002afff:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002b004:	83 c4 1c             	add    esp,0x1c
c002b007:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002b00d:	eb 0a                	jmp    c002b019 <IDE::open(int, int, void*)+0x14b>
c002b00f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002b019:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002b020:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002b027:	c1 e1 10             	shl    ecx,0x10
c002b02a:	c1 e0 08             	shl    eax,0x8
c002b02d:	bf f8 0c 00 00       	mov    edi,0xcf8
c002b032:	09 c1                	or     ecx,eax
c002b034:	89 fa                	mov    edx,edi
c002b036:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002b03d:	c1 e0 0b             	shl    eax,0xb
c002b040:	09 c1                	or     ecx,eax
c002b042:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002b048:	89 c8                	mov    eax,ecx
c002b04a:	ef                   	out    dx,eax
c002b04b:	be fc 0c 00 00       	mov    esi,0xcfc
c002b050:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002b056:	89 f2                	mov    edx,esi
c002b058:	ee                   	out    dx,al
c002b059:	89 c8                	mov    eax,ecx
c002b05b:	89 fa                	mov    edx,edi
c002b05d:	ef                   	out    dx,eax
c002b05e:	89 f2                	mov    edx,esi
c002b060:	ed                   	in     eax,dx
c002b061:	0f b6 c0             	movzx  eax,al
c002b064:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002b06a:	74 4a                	je     c002b0b6 <IDE::open(int, int, void*)+0x1e8>
c002b06c:	83 ec 0c             	sub    esp,0xc
c002b06f:	68 44 37 03 c0       	push   0xc0033744
c002b074:	eb 38                	jmp    c002b0ae <IDE::open(int, int, void*)+0x1e0>
c002b076:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002b07f:	75 1b                	jne    c002b09c <IDE::open(int, int, void*)+0x1ce>
c002b081:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c002b085:	3d 80 00 00 00       	cmp    eax,0x80
c002b08a:	74 07                	je     c002b093 <IDE::open(int, int, void*)+0x1c5>
c002b08c:	3d 8a 00 00 00       	cmp    eax,0x8a
c002b091:	75 09                	jne    c002b09c <IDE::open(int, int, void*)+0x1ce>
c002b093:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002b09a:	eb 1a                	jmp    c002b0b6 <IDE::open(int, int, void*)+0x1e8>
c002b09c:	83 ec 0c             	sub    esp,0xc
c002b09f:	68 4c 37 03 c0       	push   0xc003374c
c002b0a4:	eb 08                	jmp    c002b0ae <IDE::open(int, int, void*)+0x1e0>
c002b0a6:	83 ec 0c             	sub    esp,0xc
c002b0a9:	68 7d 37 03 c0       	push   0xc003377d
c002b0ae:	e8 b3 51 ff ff       	call   c0020266 <KePanic(char const*)>
c002b0b3:	83 c4 10             	add    esp,0x10
c002b0b6:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c002b0bd:	74 1a                	je     c002b0d9 <IDE::open(int, int, void*)+0x20b>
c002b0bf:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002b0c5:	83 e0 fc             	and    eax,0xfffffffc
c002b0c8:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002b0cf:	83 c0 08             	add    eax,0x8
c002b0d2:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002b0d9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002b0df:	89 c2                	mov    edx,eax
c002b0e1:	83 e2 0f             	and    edx,0xf
c002b0e4:	83 fa 08             	cmp    edx,0x8
c002b0e7:	75 0a                	jne    c002b0f3 <IDE::open(int, int, void*)+0x225>
c002b0e9:	83 e8 02             	sub    eax,0x2
c002b0ec:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b0f3:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002b0f9:	89 c2                	mov    edx,eax
c002b0fb:	83 e2 0f             	and    edx,0xf
c002b0fe:	83 fa 08             	cmp    edx,0x8
c002b101:	75 0a                	jne    c002b10d <IDE::open(int, int, void*)+0x23f>
c002b103:	83 e8 02             	sub    eax,0x2
c002b106:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002b10d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002b114:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002b11b:	89 d0                	mov    eax,edx
c002b11d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b120:	8d 7a 01             	lea    edi,[edx+0x1]
c002b123:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b127:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002b12b:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002b12f:	83 e1 3f             	and    ecx,0x3f
c002b132:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002b136:	89 f9                	mov    ecx,edi
c002b138:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002b13f:	0f b6 c9             	movzx  ecx,cl
c002b142:	8d 78 02             	lea    edi,[eax+0x2]
c002b145:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002b148:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002b14c:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002b150:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002b154:	83 e2 3f             	and    edx,0x3f
c002b157:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002b15b:	89 f9                	mov    ecx,edi
c002b15d:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002b163:	0f b6 d1             	movzx  edx,cl
c002b166:	8d 78 03             	lea    edi,[eax+0x3]
c002b169:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b16c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b170:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002b174:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002b178:	83 e1 3f             	and    ecx,0x3f
c002b17b:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002b17f:	89 f9                	mov    ecx,edi
c002b181:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002b187:	0f b6 c9             	movzx  ecx,cl
c002b18a:	8d 78 04             	lea    edi,[eax+0x4]
c002b18d:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002b190:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002b194:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002b198:	89 fa                	mov    edx,edi
c002b19a:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002b1a0:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002b1a4:	83 e2 3f             	and    edx,0x3f
c002b1a7:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002b1ab:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002b1b2:	66 85 f6             	test   si,si
c002b1b5:	74 65                	je     c002b21c <IDE::open(int, int, void*)+0x34e>
c002b1b7:	89 f9                	mov    ecx,edi
c002b1b9:	83 c0 05             	add    eax,0x5
c002b1bc:	0f b6 d1             	movzx  edx,cl
c002b1bf:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b1c2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b1c6:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002b1ca:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002b1d0:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c002b1d4:	83 e0 3f             	and    eax,0x3f
c002b1d7:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c002b1db:	eb 3f                	jmp    c002b21c <IDE::open(int, int, void*)+0x34e>
c002b1dd:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c002b1e3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002b1ea:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002b1f1:	05 06 02 00 00       	add    eax,0x206
c002b1f6:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b1fd:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c002b204:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002b20b:	05 06 02 00 00       	add    eax,0x206
c002b210:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002b217:	e9 bd fe ff ff       	jmp    c002b0d9 <IDE::open(int, int, void*)+0x20b>
c002b21c:	50                   	push   eax
c002b21d:	50                   	push   eax
c002b21e:	6a 00                	push   0x0
c002b220:	53                   	push   ebx
c002b221:	e8 30 fa ff ff       	call   c002ac56 <IDE::prepareInterrupt(unsigned char)>
c002b226:	5a                   	pop    edx
c002b227:	59                   	pop    ecx
c002b228:	6a 01                	push   0x1
c002b22a:	53                   	push   ebx
c002b22b:	e8 26 fa ff ff       	call   c002ac56 <IDE::prepareInterrupt(unsigned char)>
c002b230:	83 c4 0c             	add    esp,0xc
c002b233:	6a 00                	push   0x0
c002b235:	6a 00                	push   0x0
c002b237:	53                   	push   ebx
c002b238:	e8 47 fc ff ff       	call   c002ae84 <IDE::enableIRQs(unsigned char, bool)>
c002b23d:	83 c4 0c             	add    esp,0xc
c002b240:	6a 00                	push   0x0
c002b242:	6a 01                	push   0x1
c002b244:	53                   	push   ebx
c002b245:	e8 3a fc ff ff       	call   c002ae84 <IDE::enableIRQs(unsigned char, bool)>
c002b24a:	83 c4 10             	add    esp,0x10
c002b24d:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002b254:	74 34                	je     c002b28a <IDE::open(int, int, void*)+0x3bc>
c002b256:	83 ec 0c             	sub    esp,0xc
c002b259:	53                   	push   ebx
c002b25a:	6a 01                	push   0x1
c002b25c:	68 4c ae 02 c0       	push   0xc002ae4c
c002b261:	6a 0e                	push   0xe
c002b263:	53                   	push   ebx
c002b264:	e8 11 00 ff ff       	call   c001b27a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b269:	83 c4 14             	add    esp,0x14
c002b26c:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002b272:	53                   	push   ebx
c002b273:	6a 01                	push   0x1
c002b275:	68 68 ae 02 c0       	push   0xc002ae68
c002b27a:	6a 0f                	push   0xf
c002b27c:	53                   	push   ebx
c002b27d:	e8 f8 ff fe ff       	call   c001b27a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b282:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002b288:	eb 38                	jmp    c002b2c2 <IDE::open(int, int, void*)+0x3f4>
c002b28a:	83 ec 0c             	sub    esp,0xc
c002b28d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002b297:	53                   	push   ebx
c002b298:	6a 00                	push   0x0
c002b29a:	68 4c ae 02 c0       	push   0xc002ae4c
c002b29f:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002b2a5:	53                   	push   ebx
c002b2a6:	e8 cf ff fe ff       	call   c001b27a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b2ab:	83 c4 14             	add    esp,0x14
c002b2ae:	53                   	push   ebx
c002b2af:	6a 00                	push   0x0
c002b2b1:	68 68 ae 02 c0       	push   0xc002ae68
c002b2b6:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002b2bc:	53                   	push   ebx
c002b2bd:	e8 b8 ff fe ff       	call   c001b27a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b2c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c002b2c4:	83 c4 20             	add    esp,0x20
c002b2c7:	83 ec 0c             	sub    esp,0xc
c002b2ca:	53                   	push   ebx
c002b2cb:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002b2ce:	83 c4 0c             	add    esp,0xc
c002b2d1:	6a 07                	push   0x7
c002b2d3:	6a 00                	push   0x0
c002b2d5:	53                   	push   ebx
c002b2d6:	e8 61 fa ff ff       	call   c002ad3c <IDE::read(unsigned char, unsigned char)>
c002b2db:	83 c4 0c             	add    esp,0xc
c002b2de:	6a 07                	push   0x7
c002b2e0:	6a 01                	push   0x1
c002b2e2:	53                   	push   ebx
c002b2e3:	e8 54 fa ff ff       	call   c002ad3c <IDE::read(unsigned char, unsigned char)>
c002b2e8:	83 c4 0c             	add    esp,0xc
c002b2eb:	6a 01                	push   0x1
c002b2ed:	6a 00                	push   0x0
c002b2ef:	53                   	push   ebx
c002b2f0:	e8 8f fb ff ff       	call   c002ae84 <IDE::enableIRQs(unsigned char, bool)>
c002b2f5:	83 c4 0c             	add    esp,0xc
c002b2f8:	6a 01                	push   0x1
c002b2fa:	6a 01                	push   0x1
c002b2fc:	53                   	push   ebx
c002b2fd:	e8 82 fb ff ff       	call   c002ae84 <IDE::enableIRQs(unsigned char, bool)>
c002b302:	83 c4 2c             	add    esp,0x2c
c002b305:	31 c0                	xor    eax,eax
c002b307:	5b                   	pop    ebx
c002b308:	5e                   	pop    esi
c002b309:	5f                   	pop    edi
c002b30a:	5d                   	pop    ebp
c002b30b:	c3                   	ret    

c002b30c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002b30c:	55                   	push   ebp
c002b30d:	57                   	push   edi
c002b30e:	56                   	push   esi
c002b30f:	53                   	push   ebx
c002b310:	83 ec 1c             	sub    esp,0x1c
c002b313:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002b317:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002b31b:	8d 42 f8             	lea    eax,[edx-0x8]
c002b31e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002b322:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002b326:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002b32a:	3c 03                	cmp    al,0x3
c002b32c:	77 5a                	ja     c002b388 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c002b32e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002b332:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002b336:	0f b6 db             	movzx  ebx,bl
c002b339:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002b33c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b341:	0c 80                	or     al,0x80
c002b343:	50                   	push   eax
c002b344:	6a 0c                	push   0xc
c002b346:	53                   	push   ebx
c002b347:	56                   	push   esi
c002b348:	e8 2f f9 ff ff       	call   c002ac7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b34d:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c002b352:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002b356:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002b35a:	0f b6 d2             	movzx  edx,dl
c002b35d:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002b361:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002b363:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b368:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002b36c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002b370:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002b374:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002b37c:	83 c4 2c             	add    esp,0x2c
c002b37f:	5b                   	pop    ebx
c002b380:	5e                   	pop    esi
c002b381:	5f                   	pop    edi
c002b382:	5d                   	pop    ebp
c002b383:	e9 f4 f8 ff ff       	jmp    c002ac7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b388:	0f b6 c2             	movzx  eax,dl
c002b38b:	83 f8 07             	cmp    eax,0x7
c002b38e:	77 12                	ja     c002b3a2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c002b390:	0f b6 c2             	movzx  eax,dl
c002b393:	0f b6 db             	movzx  ebx,bl
c002b396:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c002b39e:	01 c2                	add    edx,eax
c002b3a0:	eb 2f                	jmp    c002b3d1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002b3a2:	83 f8 0d             	cmp    eax,0xd
c002b3a5:	77 13                	ja     c002b3ba <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c002b3a7:	0f b6 db             	movzx  ebx,bl
c002b3aa:	0f b6 d2             	movzx  edx,dl
c002b3ad:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c002b3b4:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002b3b8:	eb 17                	jmp    c002b3d1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002b3ba:	83 f8 15             	cmp    eax,0x15
c002b3bd:	77 14                	ja     c002b3d3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c002b3bf:	0f b6 db             	movzx  ebx,bl
c002b3c2:	0f b6 d2             	movzx  edx,dl
c002b3c5:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c002b3cd:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002b3d1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002b3d3:	83 c4 1c             	add    esp,0x1c
c002b3d6:	5b                   	pop    ebx
c002b3d7:	5e                   	pop    esi
c002b3d8:	5f                   	pop    edi
c002b3d9:	5d                   	pop    ebp
c002b3da:	c3                   	ret    
c002b3db:	90                   	nop

c002b3dc <IDE::detect()>:
c002b3dc:	55                   	push   ebp
c002b3dd:	57                   	push   edi
c002b3de:	56                   	push   esi
c002b3df:	53                   	push   ebx
c002b3e0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002b3e6:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002b3ed:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002b3f4:	0f 85 a4 02 00 00    	jne    c002b69e <IDE::detect()+0x2c2>
c002b3fa:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002b401:	31 f6                	xor    esi,esi
c002b403:	31 ed                	xor    ebp,ebp
c002b405:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002b40d:	89 e8                	mov    eax,ebp
c002b40f:	c1 e0 06             	shl    eax,0x6
c002b412:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002b41a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002b41e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002b422:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002b426:	c1 e0 04             	shl    eax,0x4
c002b429:	83 c8 a0             	or     eax,0xffffffa0
c002b42c:	0f b6 c0             	movzx  eax,al
c002b42f:	50                   	push   eax
c002b430:	6a 06                	push   0x6
c002b432:	56                   	push   esi
c002b433:	53                   	push   ebx
c002b434:	e8 43 f8 ff ff       	call   c002ac7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b439:	83 c4 0c             	add    esp,0xc
c002b43c:	6a 0c                	push   0xc
c002b43e:	56                   	push   esi
c002b43f:	53                   	push   ebx
c002b440:	e8 f7 f8 ff ff       	call   c002ad3c <IDE::read(unsigned char, unsigned char)>
c002b445:	83 c4 0c             	add    esp,0xc
c002b448:	6a 0c                	push   0xc
c002b44a:	56                   	push   esi
c002b44b:	53                   	push   ebx
c002b44c:	e8 eb f8 ff ff       	call   c002ad3c <IDE::read(unsigned char, unsigned char)>
c002b451:	83 c4 0c             	add    esp,0xc
c002b454:	6a 0c                	push   0xc
c002b456:	56                   	push   esi
c002b457:	53                   	push   ebx
c002b458:	e8 df f8 ff ff       	call   c002ad3c <IDE::read(unsigned char, unsigned char)>
c002b45d:	83 c4 0c             	add    esp,0xc
c002b460:	6a 0c                	push   0xc
c002b462:	56                   	push   esi
c002b463:	53                   	push   ebx
c002b464:	e8 d3 f8 ff ff       	call   c002ad3c <IDE::read(unsigned char, unsigned char)>
c002b469:	68 ec 00 00 00       	push   0xec
c002b46e:	6a 07                	push   0x7
c002b470:	56                   	push   esi
c002b471:	53                   	push   ebx
c002b472:	e8 05 f8 ff ff       	call   c002ac7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b477:	83 c4 1c             	add    esp,0x1c
c002b47a:	6a 0c                	push   0xc
c002b47c:	56                   	push   esi
c002b47d:	53                   	push   ebx
c002b47e:	e8 b9 f8 ff ff       	call   c002ad3c <IDE::read(unsigned char, unsigned char)>
c002b483:	83 c4 0c             	add    esp,0xc
c002b486:	6a 0c                	push   0xc
c002b488:	56                   	push   esi
c002b489:	53                   	push   ebx
c002b48a:	e8 ad f8 ff ff       	call   c002ad3c <IDE::read(unsigned char, unsigned char)>
c002b48f:	83 c4 0c             	add    esp,0xc
c002b492:	6a 0c                	push   0xc
c002b494:	56                   	push   esi
c002b495:	53                   	push   ebx
c002b496:	e8 a1 f8 ff ff       	call   c002ad3c <IDE::read(unsigned char, unsigned char)>
c002b49b:	83 c4 0c             	add    esp,0xc
c002b49e:	6a 0c                	push   0xc
c002b4a0:	56                   	push   esi
c002b4a1:	53                   	push   ebx
c002b4a2:	e8 95 f8 ff ff       	call   c002ad3c <IDE::read(unsigned char, unsigned char)>
c002b4a7:	83 c4 0c             	add    esp,0xc
c002b4aa:	6a 0c                	push   0xc
c002b4ac:	56                   	push   esi
c002b4ad:	53                   	push   ebx
c002b4ae:	e8 89 f8 ff ff       	call   c002ad3c <IDE::read(unsigned char, unsigned char)>
c002b4b3:	83 c4 10             	add    esp,0x10
c002b4b6:	84 c0                	test   al,al
c002b4b8:	0f 84 60 01 00 00    	je     c002b61e <IDE::detect()+0x242>
c002b4be:	31 ff                	xor    edi,edi
c002b4c0:	50                   	push   eax
c002b4c1:	6a 0c                	push   0xc
c002b4c3:	56                   	push   esi
c002b4c4:	53                   	push   ebx
c002b4c5:	e8 72 f8 ff ff       	call   c002ad3c <IDE::read(unsigned char, unsigned char)>
c002b4ca:	83 c4 10             	add    esp,0x10
c002b4cd:	a8 01                	test   al,0x1
c002b4cf:	0f 85 6a 01 00 00    	jne    c002b63f <IDE::detect()+0x263>
c002b4d5:	a8 80                	test   al,0x80
c002b4d7:	75 04                	jne    c002b4dd <IDE::detect()+0x101>
c002b4d9:	a8 08                	test   al,0x8
c002b4db:	75 23                	jne    c002b500 <IDE::detect()+0x124>
c002b4dd:	47                   	inc    edi
c002b4de:	81 ff 17 01 00 00    	cmp    edi,0x117
c002b4e4:	7e da                	jle    c002b4c0 <IDE::detect()+0xe4>
c002b4e6:	83 ec 0c             	sub    esp,0xc
c002b4e9:	6a 32                	push   0x32
c002b4eb:	e8 44 9f ff ff       	call   c0025434 <milliTenthSleep(unsigned int)>
c002b4f0:	83 c4 10             	add    esp,0x10
c002b4f3:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002b4f9:	75 c5                	jne    c002b4c0 <IDE::detect()+0xe4>
c002b4fb:	e9 3f 01 00 00       	jmp    c002b63f <IDE::detect()+0x263>
c002b500:	31 c9                	xor    ecx,ecx
c002b502:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002b506:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002b50a:	83 ec 0c             	sub    esp,0xc
c002b50d:	68 80 00 00 00       	push   0x80
c002b512:	57                   	push   edi
c002b513:	6a 00                	push   0x0
c002b515:	56                   	push   esi
c002b516:	53                   	push   ebx
c002b517:	e8 f0 fd ff ff       	call   c002b30c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002b51c:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002b521:	89 e8                	mov    eax,ebp
c002b523:	89 d1                	mov    ecx,edx
c002b525:	c1 e0 06             	shl    eax,0x6
c002b528:	01 d8                	add    eax,ebx
c002b52a:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002b531:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002b538:	89 f2                	mov    edx,esi
c002b53a:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002b540:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002b544:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002b54a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002b54e:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002b555:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002b55d:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002b564:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002b56c:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002b572:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002b579:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002b57f:	8d 54 24 58          	lea    edx,[esp+0x58]
c002b583:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002b587:	83 c4 20             	add    esp,0x20
c002b58a:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c002b58d:	83 c0 02             	add    eax,0x2
c002b590:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002b596:	83 c7 02             	add    edi,0x2
c002b599:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c002b59c:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002b5a2:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002b5a6:	75 e2                	jne    c002b58a <IDE::detect()+0x1ae>
c002b5a8:	89 e8                	mov    eax,ebp
c002b5aa:	c1 e0 06             	shl    eax,0x6
c002b5ad:	01 d8                	add    eax,ebx
c002b5af:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c002b5b6:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002b5bd:	c1 ea 09             	shr    edx,0x9
c002b5c0:	83 e2 01             	and    edx,0x1
c002b5c3:	80 e1 01             	and    cl,0x1
c002b5c6:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002b5cc:	75 22                	jne    c002b5f0 <IDE::detect()+0x214>
c002b5ce:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c002b5d5:	74 46                	je     c002b61d <IDE::detect()+0x241>
c002b5d7:	83 ec 0c             	sub    esp,0xc
c002b5da:	68 7c 01 00 00       	push   0x17c
c002b5df:	e8 da ad fe ff       	call   c00163be <malloc>
c002b5e4:	89 c7                	mov    edi,eax
c002b5e6:	89 04 24             	mov    DWORD PTR [esp],eax
c002b5e9:	e8 2e 05 00 00       	call   c002bb1c <ATA::ATA()>
c002b5ee:	eb 17                	jmp    c002b607 <IDE::detect()+0x22b>
c002b5f0:	83 ec 0c             	sub    esp,0xc
c002b5f3:	68 84 01 00 00       	push   0x184
c002b5f8:	e8 c1 ad fe ff       	call   c00163be <malloc>
c002b5fd:	89 c7                	mov    edi,eax
c002b5ff:	89 04 24             	mov    DWORD PTR [esp],eax
c002b602:	e8 59 0e 00 00       	call   c002c460 <ATAPI::ATAPI()>
c002b607:	5a                   	pop    edx
c002b608:	59                   	pop    ecx
c002b609:	57                   	push   edi
c002b60a:	53                   	push   ebx
c002b60b:	e8 be fc fe ff       	call   c001b2ce <Device::addChild(Device*)>
c002b610:	8b 07                	mov    eax,DWORD PTR [edi]
c002b612:	53                   	push   ebx
c002b613:	55                   	push   ebp
c002b614:	6a 00                	push   0x0
c002b616:	57                   	push   edi
c002b617:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002b61a:	83 c4 20             	add    esp,0x20
c002b61d:	45                   	inc    ebp
c002b61e:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c002b623:	74 0d                	je     c002b632 <IDE::detect()+0x256>
c002b625:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c002b62d:	e9 db fd ff ff       	jmp    c002b40d <IDE::detect()+0x31>
c002b632:	4e                   	dec    esi
c002b633:	74 69                	je     c002b69e <IDE::detect()+0x2c2>
c002b635:	be 01 00 00 00       	mov    esi,0x1
c002b63a:	e9 c6 fd ff ff       	jmp    c002b405 <IDE::detect()+0x29>
c002b63f:	50                   	push   eax
c002b640:	6a 04                	push   0x4
c002b642:	56                   	push   esi
c002b643:	53                   	push   ebx
c002b644:	e8 f3 f6 ff ff       	call   c002ad3c <IDE::read(unsigned char, unsigned char)>
c002b649:	83 c4 0c             	add    esp,0xc
c002b64c:	89 c7                	mov    edi,eax
c002b64e:	6a 05                	push   0x5
c002b650:	56                   	push   esi
c002b651:	53                   	push   ebx
c002b652:	e8 e5 f6 ff ff       	call   c002ad3c <IDE::read(unsigned char, unsigned char)>
c002b657:	83 c4 10             	add    esp,0x10
c002b65a:	89 f9                	mov    ecx,edi
c002b65c:	0f b6 c0             	movzx  eax,al
c002b65f:	0f b6 f9             	movzx  edi,cl
c002b662:	83 ff 14             	cmp    edi,0x14
c002b665:	75 07                	jne    c002b66e <IDE::detect()+0x292>
c002b667:	3d eb 00 00 00       	cmp    eax,0xeb
c002b66c:	eb 0a                	jmp    c002b678 <IDE::detect()+0x29c>
c002b66e:	3d 96 00 00 00       	cmp    eax,0x96
c002b673:	75 a9                	jne    c002b61e <IDE::detect()+0x242>
c002b675:	83 ff 69             	cmp    edi,0x69
c002b678:	75 a4                	jne    c002b61e <IDE::detect()+0x242>
c002b67a:	68 a1 00 00 00       	push   0xa1
c002b67f:	6a 07                	push   0x7
c002b681:	56                   	push   esi
c002b682:	53                   	push   ebx
c002b683:	e8 f4 f5 ff ff       	call   c002ac7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b688:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c002b68f:	e8 a0 9d ff ff       	call   c0025434 <milliTenthSleep(unsigned int)>
c002b694:	83 c4 10             	add    esp,0x10
c002b697:	b1 01                	mov    cl,0x1
c002b699:	e9 64 fe ff ff       	jmp    c002b502 <IDE::detect()+0x126>
c002b69e:	81 c4 1c 02 00 00    	add    esp,0x21c
c002b6a4:	5b                   	pop    ebx
c002b6a5:	5e                   	pop    esi
c002b6a6:	5f                   	pop    edi
c002b6a7:	5d                   	pop    ebp
c002b6a8:	c3                   	ret    
c002b6a9:	90                   	nop

c002b6aa <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002b6aa:	55                   	push   ebp
c002b6ab:	57                   	push   edi
c002b6ac:	56                   	push   esi
c002b6ad:	53                   	push   ebx
c002b6ae:	83 ec 1c             	sub    esp,0x1c
c002b6b1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002b6b5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002b6b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002b6bd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002b6c1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002b6c5:	88 c3                	mov    bl,al
c002b6c7:	25 ff 00 00 00       	and    eax,0xff
c002b6cc:	0f 84 88 00 00 00    	je     c002b75a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b6d2:	83 ec 0c             	sub    esp,0xc
c002b6d5:	89 c7                	mov    edi,eax
c002b6d7:	68 a7 37 03 c0       	push   0xc00337a7
c002b6dc:	e8 6c db fe ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c002b6e1:	83 c4 10             	add    esp,0x10
c002b6e4:	83 ff 01             	cmp    edi,0x1
c002b6e7:	74 6b                	je     c002b754 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c002b6e9:	83 ff 02             	cmp    edi,0x2
c002b6ec:	75 58                	jne    c002b746 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c002b6ee:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c002b6f3:	01 ff                	add    edi,edi
c002b6f5:	50                   	push   eax
c002b6f6:	09 fe                	or     esi,edi
c002b6f8:	6a 01                	push   0x1
c002b6fa:	89 f0                	mov    eax,esi
c002b6fc:	0f b6 f0             	movzx  esi,al
c002b6ff:	c1 e6 06             	shl    esi,0x6
c002b702:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c002b70a:	50                   	push   eax
c002b70b:	55                   	push   ebp
c002b70c:	e8 2b f6 ff ff       	call   c002ad3c <IDE::read(unsigned char, unsigned char)>
c002b711:	83 c4 10             	add    esp,0x10
c002b714:	a8 01                	test   al,0x1
c002b716:	74 02                	je     c002b71a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c002b718:	b3 07                	mov    bl,0x7
c002b71a:	a8 02                	test   al,0x2
c002b71c:	74 02                	je     c002b720 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c002b71e:	b3 03                	mov    bl,0x3
c002b720:	a8 04                	test   al,0x4
c002b722:	74 02                	je     c002b726 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c002b724:	b3 14                	mov    bl,0x14
c002b726:	a8 08                	test   al,0x8
c002b728:	74 02                	je     c002b72c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c002b72a:	b3 03                	mov    bl,0x3
c002b72c:	a8 10                	test   al,0x10
c002b72e:	74 02                	je     c002b732 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c002b730:	b3 15                	mov    bl,0x15
c002b732:	a8 20                	test   al,0x20
c002b734:	74 02                	je     c002b738 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c002b736:	b3 03                	mov    bl,0x3
c002b738:	a8 40                	test   al,0x40
c002b73a:	74 02                	je     c002b73e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c002b73c:	b3 16                	mov    bl,0x16
c002b73e:	a8 80                	test   al,0x80
c002b740:	74 18                	je     c002b75a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b742:	b3 0d                	mov    bl,0xd
c002b744:	eb 14                	jmp    c002b75a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b746:	83 ff 03             	cmp    edi,0x3
c002b749:	74 0d                	je     c002b758 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c002b74b:	83 ff 04             	cmp    edi,0x4
c002b74e:	75 0a                	jne    c002b75a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b750:	b3 08                	mov    bl,0x8
c002b752:	eb 06                	jmp    c002b75a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b754:	b3 13                	mov    bl,0x13
c002b756:	eb 02                	jmp    c002b75a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b758:	b3 17                	mov    bl,0x17
c002b75a:	83 c4 1c             	add    esp,0x1c
c002b75d:	88 d8                	mov    al,bl
c002b75f:	5b                   	pop    ebx
c002b760:	5e                   	pop    esi
c002b761:	5f                   	pop    edi
c002b762:	5d                   	pop    ebp
c002b763:	c3                   	ret    

c002b764 <IDE::polling(unsigned char, unsigned int)>:
c002b764:	57                   	push   edi
c002b765:	56                   	push   esi
c002b766:	53                   	push   ebx
c002b767:	bb 04 00 00 00       	mov    ebx,0x4
c002b76c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002b770:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002b775:	52                   	push   edx
c002b776:	6a 0c                	push   0xc
c002b778:	56                   	push   esi
c002b779:	57                   	push   edi
c002b77a:	e8 bd f5 ff ff       	call   c002ad3c <IDE::read(unsigned char, unsigned char)>
c002b77f:	83 c4 10             	add    esp,0x10
c002b782:	4b                   	dec    ebx
c002b783:	75 f0                	jne    c002b775 <IDE::polling(unsigned char, unsigned int)+0x11>
c002b785:	bb a0 86 01 00       	mov    ebx,0x186a0
c002b78a:	50                   	push   eax
c002b78b:	6a 0c                	push   0xc
c002b78d:	56                   	push   esi
c002b78e:	57                   	push   edi
c002b78f:	e8 a8 f5 ff ff       	call   c002ad3c <IDE::read(unsigned char, unsigned char)>
c002b794:	83 c4 10             	add    esp,0x10
c002b797:	a8 01                	test   al,0x1
c002b799:	75 17                	jne    c002b7b2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c002b79b:	a8 20                	test   al,0x20
c002b79d:	75 0f                	jne    c002b7ae <IDE::polling(unsigned char, unsigned int)+0x4a>
c002b79f:	4b                   	dec    ebx
c002b7a0:	74 10                	je     c002b7b2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c002b7a2:	a8 80                	test   al,0x80
c002b7a4:	75 e4                	jne    c002b78a <IDE::polling(unsigned char, unsigned int)+0x26>
c002b7a6:	a8 08                	test   al,0x8
c002b7a8:	74 e0                	je     c002b78a <IDE::polling(unsigned char, unsigned int)+0x26>
c002b7aa:	31 c0                	xor    eax,eax
c002b7ac:	eb 06                	jmp    c002b7b4 <IDE::polling(unsigned char, unsigned int)+0x50>
c002b7ae:	b0 01                	mov    al,0x1
c002b7b0:	eb 02                	jmp    c002b7b4 <IDE::polling(unsigned char, unsigned int)+0x50>
c002b7b2:	b0 02                	mov    al,0x2
c002b7b4:	5b                   	pop    ebx
c002b7b5:	5e                   	pop    esi
c002b7b6:	5f                   	pop    edi
c002b7b7:	c3                   	ret    

c002b7b8 <SATABus::close(int, int, void*)>:
c002b7b8:	31 c0                	xor    eax,eax
c002b7ba:	c3                   	ret    
c002b7bb:	90                   	nop

c002b7bc <SATABus::detect()>:
c002b7bc:	c3                   	ret    
c002b7bd:	90                   	nop

c002b7be <SATABus::SATABus()>:
c002b7be:	83 ec 0c             	sub    esp,0xc
c002b7c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b7c5:	83 ec 08             	sub    esp,0x8
c002b7c8:	68 e0 37 03 c0       	push   0xc00337e0
c002b7cd:	50                   	push   eax
c002b7ce:	e8 55 fe fe ff       	call   c001b628 <HardDiskController::HardDiskController(char const*)>
c002b7d3:	83 c4 10             	add    esp,0x10
c002b7d6:	ba 0c 38 03 c0       	mov    edx,0xc003380c
c002b7db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b7df:	89 10                	mov    DWORD PTR [eax],edx
c002b7e1:	83 ec 0c             	sub    esp,0xc
c002b7e4:	6a 50                	push   0x50
c002b7e6:	e8 ab af fe ff       	call   c0016796 <Phys::allocateContiguousPages(int)>
c002b7eb:	83 c4 10             	add    esp,0x10
c002b7ee:	89 c2                	mov    edx,eax
c002b7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b7f4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002b7fa:	83 ec 0c             	sub    esp,0xc
c002b7fd:	6a 50                	push   0x50
c002b7ff:	e8 11 c7 fe ff       	call   c0017f15 <Virt::allocateKernelVirtualPages(int)>
c002b804:	83 c4 10             	add    esp,0x10
c002b807:	89 c2                	mov    edx,eax
c002b809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b80d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002b813:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c002b818:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002b81c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002b822:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002b826:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002b82c:	83 ec 0c             	sub    esp,0xc
c002b82f:	6a 03                	push   0x3
c002b831:	6a 50                	push   0x50
c002b833:	51                   	push   ecx
c002b834:	52                   	push   edx
c002b835:	50                   	push   eax
c002b836:	e8 e7 cf fe ff       	call   c0018822 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c002b83b:	83 c4 20             	add    esp,0x20
c002b83e:	90                   	nop
c002b83f:	83 c4 0c             	add    esp,0xc
c002b842:	c3                   	ret    
c002b843:	90                   	nop

c002b844 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002b844:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002b848:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c002b84b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002b84e:	09 c2                	or     edx,eax
c002b850:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002b854:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002b85a:	8b 08                	mov    ecx,DWORD PTR [eax]
c002b85c:	31 c0                	xor    eax,eax
c002b85e:	c1 e9 08             	shr    ecx,0x8
c002b861:	83 e1 0f             	and    ecx,0xf
c002b864:	39 c8                	cmp    eax,ecx
c002b866:	74 0a                	je     c002b872 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c002b868:	f6 c2 01             	test   dl,0x1
c002b86b:	74 08                	je     c002b875 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002b86d:	d1 ea                	shr    edx,1
c002b86f:	40                   	inc    eax
c002b870:	eb f2                	jmp    c002b864 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c002b872:	83 c8 ff             	or     eax,0xffffffff
c002b875:	c3                   	ret    

c002b876 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c002b876:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002b87a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c002b87d:	89 c2                	mov    edx,eax
c002b87f:	c1 ea 08             	shr    edx,0x8
c002b882:	83 e2 0f             	and    edx,0xf
c002b885:	4a                   	dec    edx
c002b886:	75 32                	jne    c002b8ba <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002b888:	83 e0 0f             	and    eax,0xf
c002b88b:	83 f8 03             	cmp    eax,0x3
c002b88e:	75 2a                	jne    c002b8ba <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002b890:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002b893:	b8 02 00 00 00       	mov    eax,0x2
c002b898:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002b89e:	74 1c                	je     c002b8bc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002b8a0:	b8 04 00 00 00       	mov    eax,0x4
c002b8a5:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c002b8ab:	74 0f                	je     c002b8bc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002b8ad:	31 c0                	xor    eax,eax
c002b8af:	83 fa 03             	cmp    edx,0x3
c002b8b2:	0f 94 c0             	sete   al
c002b8b5:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c002b8b9:	c3                   	ret    
c002b8ba:	31 c0                	xor    eax,eax
c002b8bc:	c3                   	ret    
c002b8bd:	90                   	nop

c002b8be <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c002b8be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002b8c2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b8c5:	0f ba e2 0f          	bt     edx,0xf
c002b8c9:	72 f7                	jb     c002b8c2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c002b8cb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b8ce:	83 ca 10             	or     edx,0x10
c002b8d1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b8d4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b8d7:	83 ca 01             	or     edx,0x1
c002b8da:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b8dd:	c3                   	ret    

c002b8de <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c002b8de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002b8e2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b8e5:	83 e2 fe             	and    edx,0xfffffffe
c002b8e8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b8eb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b8ee:	83 e2 ef             	and    edx,0xffffffef
c002b8f1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b8f4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b8f7:	0f ba e2 0e          	bt     edx,0xe
c002b8fb:	72 f7                	jb     c002b8f4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002b8fd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b900:	0f ba e2 0f          	bt     edx,0xf
c002b904:	72 ee                	jb     c002b8f4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002b906:	c3                   	ret    
c002b907:	90                   	nop

c002b908 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c002b908:	55                   	push   ebp
c002b909:	57                   	push   edi
c002b90a:	56                   	push   esi
c002b90b:	53                   	push   ebx
c002b90c:	83 ec 1c             	sub    esp,0x1c
c002b90f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002b913:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002b917:	53                   	push   ebx
c002b918:	56                   	push   esi
c002b919:	e8 c0 ff ff ff       	call   c002b8de <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002b91e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002b922:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002b928:	83 ec 0c             	sub    esp,0xc
c002b92b:	c1 e5 0a             	shl    ebp,0xa
c002b92e:	01 e8                	add    eax,ebp
c002b930:	89 03                	mov    DWORD PTR [ebx],eax
c002b932:	8b 03                	mov    eax,DWORD PTR [ebx]
c002b934:	68 00 04 00 00       	push   0x400
c002b939:	6a 00                	push   0x0
c002b93b:	50                   	push   eax
c002b93c:	e8 af 4b fd ff       	call   c00004f0 <memset>
c002b941:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c002b947:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c002b94b:	01 e8                	add    eax,ebp
c002b94d:	83 c4 1c             	add    esp,0x1c
c002b950:	89 03                	mov    DWORD PTR [ebx],eax
c002b952:	c1 e2 08             	shl    edx,0x8
c002b955:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002b95c:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c002b962:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002b968:	01 f8                	add    eax,edi
c002b96a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002b96d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c002b970:	68 00 01 00 00       	push   0x100
c002b975:	6a 00                	push   0x0
c002b977:	50                   	push   eax
c002b978:	e8 73 4b fd ff       	call   c00004f0 <memset>
c002b97d:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c002b983:	01 fa                	add    edx,edi
c002b985:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002b989:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c002b98c:	c1 e7 0d             	shl    edi,0xd
c002b98f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002b996:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c002b99c:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c002b9a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002b9a6:	31 ff                	xor    edi,edi
c002b9a8:	83 c4 10             	add    esp,0x10
c002b9ab:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c002b9b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002b9b5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002b9bb:	83 c5 20             	add    ebp,0x20
c002b9be:	01 f8                	add    eax,edi
c002b9c0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002b9c3:	52                   	push   edx
c002b9c4:	68 00 01 00 00       	push   0x100
c002b9c9:	6a 00                	push   0x0
c002b9cb:	50                   	push   eax
c002b9cc:	e8 1f 4b fd ff       	call   c00004f0 <memset>
c002b9d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002b9d5:	83 c4 10             	add    esp,0x10
c002b9d8:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c002b9de:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002b9e5:	01 f8                	add    eax,edi
c002b9e7:	81 c7 00 01 00 00    	add    edi,0x100
c002b9ed:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002b9f0:	81 ff 00 20 00 00    	cmp    edi,0x2000
c002b9f6:	75 b3                	jne    c002b9ab <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c002b9f8:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002b9ff:	50                   	push   eax
c002ba00:	50                   	push   eax
c002ba01:	53                   	push   ebx
c002ba02:	56                   	push   esi
c002ba03:	e8 b6 fe ff ff       	call   c002b8be <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002ba08:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002ba0f:	83 c4 2c             	add    esp,0x2c
c002ba12:	5b                   	pop    ebx
c002ba13:	5e                   	pop    esi
c002ba14:	5f                   	pop    edi
c002ba15:	5d                   	pop    ebp
c002ba16:	c3                   	ret    
c002ba17:	90                   	nop

c002ba18 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002ba18:	55                   	push   ebp
c002ba19:	57                   	push   edi
c002ba1a:	56                   	push   esi
c002ba1b:	53                   	push   ebx
c002ba1c:	31 db                	xor    ebx,ebx
c002ba1e:	83 ec 0c             	sub    esp,0xc
c002ba21:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002ba25:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002ba29:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002ba2c:	f7 c7 01 00 00 00    	test   edi,0x1
c002ba32:	74 7a                	je     c002baae <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002ba34:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002ba38:	89 d8                	mov    eax,ebx
c002ba3a:	c1 e0 07             	shl    eax,0x7
c002ba3d:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c002ba44:	55                   	push   ebp
c002ba45:	56                   	push   esi
c002ba46:	e8 2b fe ff ff       	call   c002b876 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002ba4b:	5a                   	pop    edx
c002ba4c:	83 f8 01             	cmp    eax,0x1
c002ba4f:	59                   	pop    ecx
c002ba50:	75 21                	jne    c002ba73 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c002ba52:	50                   	push   eax
c002ba53:	53                   	push   ebx
c002ba54:	55                   	push   ebp
c002ba55:	56                   	push   esi
c002ba56:	e8 ad fe ff ff       	call   c002b908 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002ba5b:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002ba62:	e8 57 a9 fe ff       	call   c00163be <malloc>
c002ba67:	89 c5                	mov    ebp,eax
c002ba69:	89 04 24             	mov    DWORD PTR [esp],eax
c002ba6c:	e8 bb 10 00 00       	call   c002cb2c <SATA::SATA()>
c002ba71:	eb 24                	jmp    c002ba97 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c002ba73:	83 f8 04             	cmp    eax,0x4
c002ba76:	75 36                	jne    c002baae <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002ba78:	51                   	push   ecx
c002ba79:	53                   	push   ebx
c002ba7a:	55                   	push   ebp
c002ba7b:	56                   	push   esi
c002ba7c:	e8 87 fe ff ff       	call   c002b908 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002ba81:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c002ba88:	e8 31 a9 fe ff       	call   c00163be <malloc>
c002ba8d:	89 c5                	mov    ebp,eax
c002ba8f:	89 04 24             	mov    DWORD PTR [esp],eax
c002ba92:	e8 2b 18 00 00       	call   c002d2c2 <SATAPI::SATAPI()>
c002ba97:	58                   	pop    eax
c002ba98:	5a                   	pop    edx
c002ba99:	55                   	push   ebp
c002ba9a:	56                   	push   esi
c002ba9b:	e8 2e f8 fe ff       	call   c001b2ce <Device::addChild(Device*)>
c002baa0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002baa3:	56                   	push   esi
c002baa4:	6a 00                	push   0x0
c002baa6:	53                   	push   ebx
c002baa7:	55                   	push   ebp
c002baa8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002baab:	83 c4 20             	add    esp,0x20
c002baae:	d1 ef                	shr    edi,1
c002bab0:	43                   	inc    ebx
c002bab1:	83 fb 20             	cmp    ebx,0x20
c002bab4:	0f 85 72 ff ff ff    	jne    c002ba2c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002baba:	83 c4 0c             	add    esp,0xc
c002babd:	5b                   	pop    ebx
c002babe:	5e                   	pop    esi
c002babf:	5f                   	pop    edi
c002bac0:	5d                   	pop    ebp
c002bac1:	c3                   	ret    

c002bac2 <SATABus::open(int, int, void*)>:
c002bac2:	53                   	push   ebx
c002bac3:	83 ec 08             	sub    esp,0x8
c002bac6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002baca:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c002bad0:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002bad6:	e8 e9 94 ff ff       	call   c0024fc4 <KeDisablePreemption()>
c002badb:	52                   	push   edx
c002badc:	52                   	push   edx
c002badd:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c002bae3:	53                   	push   ebx
c002bae4:	e8 2f ff ff ff       	call   c002ba18 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002bae9:	e8 fe 94 ff ff       	call   c0024fec <KeRestorePreemption()>
c002baee:	31 c0                	xor    eax,eax
c002baf0:	83 c4 18             	add    esp,0x18
c002baf3:	5b                   	pop    ebx
c002baf4:	c3                   	ret    
c002baf5:	90                   	nop

c002baf6 <ATA::close(int, int, void*)>:
c002baf6:	83 ec 0c             	sub    esp,0xc
c002baf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bafd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002bb03:	85 c0                	test   eax,eax
c002bb05:	74 0c                	je     c002bb13 <ATA::close(int, int, void*)+0x1d>
c002bb07:	83 ec 0c             	sub    esp,0xc
c002bb0a:	8b 10                	mov    edx,DWORD PTR [eax]
c002bb0c:	50                   	push   eax
c002bb0d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002bb10:	83 c4 10             	add    esp,0x10
c002bb13:	31 c0                	xor    eax,eax
c002bb15:	83 c4 0c             	add    esp,0xc
c002bb18:	c3                   	ret    
c002bb19:	90                   	nop

c002bb1a <ATA::powerSaving(PowerSavingLevel)>:
c002bb1a:	c3                   	ret    
c002bb1b:	90                   	nop

c002bb1c <ATA::ATA()>:
c002bb1c:	83 ec 0c             	sub    esp,0xc
c002bb1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bb23:	83 ec 04             	sub    esp,0x4
c002bb26:	68 00 02 00 00       	push   0x200
c002bb2b:	68 e5 38 03 c0       	push   0xc00338e5
c002bb30:	50                   	push   eax
c002bb31:	e8 7c fb fe ff       	call   c001b6b2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002bb36:	83 c4 10             	add    esp,0x10
c002bb39:	ba 4c 38 03 c0       	mov    edx,0xc003384c
c002bb3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bb42:	89 10                	mov    DWORD PTR [eax],edx
c002bb44:	90                   	nop
c002bb45:	83 c4 0c             	add    esp,0xc
c002bb48:	c3                   	ret    
c002bb49:	90                   	nop

c002bb4a <ATA::flush(bool)>:
c002bb4a:	53                   	push   ebx
c002bb4b:	83 ec 08             	sub    esp,0x8
c002bb4e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002bb52:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002bb57:	83 f8 01             	cmp    eax,0x1
c002bb5a:	19 c0                	sbb    eax,eax
c002bb5c:	83 e0 fd             	and    eax,0xfffffffd
c002bb5f:	05 ea 00 00 00       	add    eax,0xea
c002bb64:	50                   	push   eax
c002bb65:	6a 07                	push   0x7
c002bb67:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bb6e:	50                   	push   eax
c002bb6f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bb75:	e8 02 f1 ff ff       	call   c002ac7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bb7a:	83 c4 0c             	add    esp,0xc
c002bb7d:	6a 00                	push   0x0
c002bb7f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bb86:	50                   	push   eax
c002bb87:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bb8d:	e8 d2 fb ff ff       	call   c002b764 <IDE::polling(unsigned char, unsigned int)>
c002bb92:	83 c4 18             	add    esp,0x18
c002bb95:	5b                   	pop    ebx
c002bb96:	c3                   	ret    
c002bb97:	90                   	nop

c002bb98 <ATA::readyForCommand()>:
c002bb98:	56                   	push   esi
c002bb99:	53                   	push   ebx
c002bb9a:	53                   	push   ebx
c002bb9b:	31 db                	xor    ebx,ebx
c002bb9d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002bba1:	51                   	push   ecx
c002bba2:	6a 0c                	push   0xc
c002bba4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002bbab:	50                   	push   eax
c002bbac:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002bbb2:	e8 85 f1 ff ff       	call   c002ad3c <IDE::read(unsigned char, unsigned char)>
c002bbb7:	83 c4 10             	add    esp,0x10
c002bbba:	a8 88                	test   al,0x88
c002bbbc:	74 1f                	je     c002bbdd <ATA::readyForCommand()+0x45>
c002bbbe:	43                   	inc    ebx
c002bbbf:	83 fb 63             	cmp    ebx,0x63
c002bbc2:	7e dd                	jle    c002bba1 <ATA::readyForCommand()+0x9>
c002bbc4:	83 ec 0c             	sub    esp,0xc
c002bbc7:	6a 0a                	push   0xa
c002bbc9:	e8 66 98 ff ff       	call   c0025434 <milliTenthSleep(unsigned int)>
c002bbce:	83 c4 10             	add    esp,0x10
c002bbd1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002bbd7:	75 c8                	jne    c002bba1 <ATA::readyForCommand()+0x9>
c002bbd9:	31 c0                	xor    eax,eax
c002bbdb:	eb 02                	jmp    c002bbdf <ATA::readyForCommand()+0x47>
c002bbdd:	b0 01                	mov    al,0x1
c002bbdf:	5a                   	pop    edx
c002bbe0:	5b                   	pop    ebx
c002bbe1:	5e                   	pop    esi
c002bbe2:	c3                   	ret    
c002bbe3:	90                   	nop

c002bbe4 <ATA::access(unsigned long long, int, void*, bool)>:
c002bbe4:	55                   	push   ebp
c002bbe5:	57                   	push   edi
c002bbe6:	56                   	push   esi
c002bbe7:	53                   	push   ebx
c002bbe8:	83 ec 2c             	sub    esp,0x2c
c002bbeb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002bbef:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002bbf3:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002bbf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002bbfb:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002bbff:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002bc03:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002bc07:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002bc0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002bc11:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002bc17:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002bc1b:	c1 e0 06             	shl    eax,0x6
c002bc1e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002bc26:	74 5d                	je     c002bc85 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c002bc28:	89 fa                	mov    edx,edi
c002bc2a:	89 f0                	mov    eax,esi
c002bc2c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002bc30:	c1 ea 1c             	shr    edx,0x1c
c002bc33:	89 d1                	mov    ecx,edx
c002bc35:	09 c1                	or     ecx,eax
c002bc37:	74 25                	je     c002bc5e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002bc39:	31 ed                	xor    ebp,ebp
c002bc3b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002bc42:	89 fa                	mov    edx,edi
c002bc44:	89 f0                	mov    eax,esi
c002bc46:	0f ad d0             	shrd   eax,edx,cl
c002bc49:	d3 ea                	shr    edx,cl
c002bc4b:	f6 c1 20             	test   cl,0x20
c002bc4e:	74 02                	je     c002bc52 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002bc50:	89 d0                	mov    eax,edx
c002bc52:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002bc56:	45                   	inc    ebp
c002bc57:	83 fd 06             	cmp    ebp,0x6
c002bc5a:	75 df                	jne    c002bc3b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002bc5c:	eb 76                	jmp    c002bcd4 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002bc5e:	89 f0                	mov    eax,esi
c002bc60:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002bc65:	89 fa                	mov    edx,edi
c002bc67:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002bc6e:	0f ac d0 10          	shrd   eax,edx,0x10
c002bc72:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002bc77:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002bc7b:	c1 ee 18             	shr    esi,0x18
c002bc7e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002bc83:	eb 56                	jmp    c002bcdb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002bc85:	6a 00                	push   0x0
c002bc87:	6a 3f                	push   0x3f
c002bc89:	57                   	push   edi
c002bc8a:	56                   	push   esi
c002bc8b:	e8 d0 2a 00 00       	call   c002e760 <__umoddi3>
c002bc90:	83 c4 10             	add    esp,0x10
c002bc93:	40                   	inc    eax
c002bc94:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002bc98:	6a 00                	push   0x0
c002bc9a:	68 f0 03 00 00       	push   0x3f0
c002bc9f:	57                   	push   edi
c002bca0:	56                   	push   esi
c002bca1:	e8 ba 29 00 00       	call   c002e660 <__udivdi3>
c002bca6:	83 c4 10             	add    esp,0x10
c002bca9:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002bcae:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002bcb5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002bcba:	6a 00                	push   0x0
c002bcbc:	6a 3f                	push   0x3f
c002bcbe:	57                   	push   edi
c002bcbf:	56                   	push   esi
c002bcc0:	e8 9b 29 00 00       	call   c002e660 <__udivdi3>
c002bcc5:	83 c4 10             	add    esp,0x10
c002bcc8:	83 e0 0f             	and    eax,0xf
c002bccb:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002bcd0:	89 c6                	mov    esi,eax
c002bcd2:	eb 07                	jmp    c002bcdb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002bcd4:	31 f6                	xor    esi,esi
c002bcd6:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002bcdb:	bf 01 00 00 00       	mov    edi,0x1
c002bce0:	50                   	push   eax
c002bce1:	6a 00                	push   0x0
c002bce3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bcea:	50                   	push   eax
c002bceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002bcef:	e8 90 f1 ff ff       	call   c002ae84 <IDE::enableIRQs(unsigned char, bool)>
c002bcf4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002bcf7:	e8 9c fe ff ff       	call   c002bb98 <ATA::readyForCommand()>
c002bcfc:	83 c4 10             	add    esp,0x10
c002bcff:	84 c0                	test   al,al
c002bd01:	0f 84 69 02 00 00    	je     c002bf70 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c002bd07:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002bd0d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002bd13:	c1 e0 04             	shl    eax,0x4
c002bd16:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002bd1d:	09 c6                	or     esi,eax
c002bd1f:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c002bd24:	75 05                	jne    c002bd2b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002bd26:	83 ce a0             	or     esi,0xffffffa0
c002bd29:	eb 03                	jmp    c002bd2e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c002bd2b:	83 ce e0             	or     esi,0xffffffe0
c002bd2e:	89 f0                	mov    eax,esi
c002bd30:	0f b6 f0             	movzx  esi,al
c002bd33:	56                   	push   esi
c002bd34:	6a 06                	push   0x6
c002bd36:	51                   	push   ecx
c002bd37:	52                   	push   edx
c002bd38:	e8 3f ef ff ff       	call   c002ac7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bd3d:	83 c4 10             	add    esp,0x10
c002bd40:	6a 00                	push   0x0
c002bd42:	6a 01                	push   0x1
c002bd44:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bd4b:	50                   	push   eax
c002bd4c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bd52:	e8 25 ef ff ff       	call   c002ac7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bd57:	83 c4 10             	add    esp,0x10
c002bd5a:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c002bd5f:	83 f8 02             	cmp    eax,0x2
c002bd62:	75 6e                	jne    c002bdd2 <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c002bd64:	6a 00                	push   0x0
c002bd66:	6a 08                	push   0x8
c002bd68:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bd6f:	50                   	push   eax
c002bd70:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bd76:	e8 01 ef ff ff       	call   c002ac7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bd7b:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002bd80:	50                   	push   eax
c002bd81:	6a 09                	push   0x9
c002bd83:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bd8a:	50                   	push   eax
c002bd8b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bd91:	e8 e6 ee ff ff       	call   c002ac7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bd96:	83 c4 20             	add    esp,0x20
c002bd99:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002bd9e:	50                   	push   eax
c002bd9f:	6a 0a                	push   0xa
c002bda1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bda8:	50                   	push   eax
c002bda9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bdaf:	e8 c8 ee ff ff       	call   c002ac7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bdb4:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002bdb9:	50                   	push   eax
c002bdba:	6a 0b                	push   0xb
c002bdbc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bdc3:	50                   	push   eax
c002bdc4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bdca:	e8 ad ee ff ff       	call   c002ac7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bdcf:	83 c4 20             	add    esp,0x20
c002bdd2:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002bdd7:	50                   	push   eax
c002bdd8:	6a 02                	push   0x2
c002bdda:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bde1:	50                   	push   eax
c002bde2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bde8:	e8 8f ee ff ff       	call   c002ac7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bded:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002bdf2:	50                   	push   eax
c002bdf3:	6a 03                	push   0x3
c002bdf5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bdfc:	50                   	push   eax
c002bdfd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be03:	e8 74 ee ff ff       	call   c002ac7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002be08:	83 c4 20             	add    esp,0x20
c002be0b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002be10:	50                   	push   eax
c002be11:	6a 04                	push   0x4
c002be13:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002be1a:	50                   	push   eax
c002be1b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be21:	e8 56 ee ff ff       	call   c002ac7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002be26:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002be2b:	50                   	push   eax
c002be2c:	6a 05                	push   0x5
c002be2e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002be35:	50                   	push   eax
c002be36:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be3c:	e8 3b ee ff ff       	call   c002ac7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002be41:	83 c4 20             	add    esp,0x20
c002be44:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002be49:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c002be4e:	74 11                	je     c002be61 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c002be50:	b8 30 00 00 00       	mov    eax,0x30
c002be55:	83 fa 02             	cmp    edx,0x2
c002be58:	75 16                	jne    c002be70 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c002be5a:	b8 34 00 00 00       	mov    eax,0x34
c002be5f:	eb 0f                	jmp    c002be70 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c002be61:	b8 20 00 00 00       	mov    eax,0x20
c002be66:	83 fa 02             	cmp    edx,0x2
c002be69:	75 05                	jne    c002be70 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c002be6b:	b8 24 00 00 00       	mov    eax,0x24
c002be70:	50                   	push   eax
c002be71:	6a 07                	push   0x7
c002be73:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002be7a:	50                   	push   eax
c002be7b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be81:	e8 f6 ed ff ff       	call   c002ac7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002be86:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002be8a:	83 c4 10             	add    esp,0x10
c002be8d:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c002be92:	85 f6                	test   esi,esi
c002be94:	0f 84 b3 00 00 00    	je     c002bf4d <ATA::access(unsigned long long, int, void*, bool)+0x369>
c002be9a:	50                   	push   eax
c002be9b:	6a 01                	push   0x1
c002be9d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bea4:	50                   	push   eax
c002bea5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002beab:	e8 b4 f8 ff ff       	call   c002b764 <IDE::polling(unsigned char, unsigned int)>
c002beb0:	83 c4 10             	add    esp,0x10
c002beb3:	0f b6 f8             	movzx  edi,al
c002beb6:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002bebc:	85 ff                	test   edi,edi
c002bebe:	74 1d                	je     c002bedd <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c002bec0:	57                   	push   edi
c002bec1:	0f b6 d2             	movzx  edx,dl
c002bec4:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002becb:	50                   	push   eax
c002becc:	52                   	push   edx
c002becd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bed3:	e8 d2 f7 ff ff       	call   c002b6aa <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002bed8:	e9 90 00 00 00       	jmp    c002bf6d <ATA::access(unsigned long long, int, void*, bool)+0x389>
c002bedd:	85 ed                	test   ebp,ebp
c002bedf:	74 3b                	je     c002bf1c <ATA::access(unsigned long long, int, void*, bool)+0x338>
c002bee1:	31 c9                	xor    ecx,ecx
c002bee3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002bee7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002beeb:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c002beef:	50                   	push   eax
c002bef0:	50                   	push   eax
c002bef1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bef8:	50                   	push   eax
c002bef9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002beff:	e8 66 ed ff ff       	call   c002ac6a <IDE::getBase(unsigned char)>
c002bf04:	89 c2                	mov    edx,eax
c002bf06:	89 f8                	mov    eax,edi
c002bf08:	66 ef                	out    dx,ax
c002bf0a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002bf0e:	83 c4 10             	add    esp,0x10
c002bf11:	41                   	inc    ecx
c002bf12:	81 f9 00 01 00 00    	cmp    ecx,0x100
c002bf18:	75 c9                	jne    c002bee3 <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c002bf1a:	eb 23                	jmp    c002bf3f <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c002bf1c:	0f b6 d2             	movzx  edx,dl
c002bf1f:	51                   	push   ecx
c002bf20:	51                   	push   ecx
c002bf21:	52                   	push   edx
c002bf22:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bf28:	e8 3d ed ff ff       	call   c002ac6a <IDE::getBase(unsigned char)>
c002bf2d:	b9 00 01 00 00       	mov    ecx,0x100
c002bf32:	89 c2                	mov    edx,eax
c002bf34:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002bf38:	fc                   	cld    
c002bf39:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002bf3c:	83 c4 10             	add    esp,0x10
c002bf3f:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002bf47:	4e                   	dec    esi
c002bf48:	e9 45 ff ff ff       	jmp    c002be92 <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c002bf4d:	31 ff                	xor    edi,edi
c002bf4f:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002bf54:	74 1a                	je     c002bf70 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c002bf56:	50                   	push   eax
c002bf57:	50                   	push   eax
c002bf58:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c002bf5d:	83 f8 02             	cmp    eax,0x2
c002bf60:	0f 94 c0             	sete   al
c002bf63:	0f b6 c0             	movzx  eax,al
c002bf66:	50                   	push   eax
c002bf67:	53                   	push   ebx
c002bf68:	e8 dd fb ff ff       	call   c002bb4a <ATA::flush(bool)>
c002bf6d:	83 c4 10             	add    esp,0x10
c002bf70:	83 c4 2c             	add    esp,0x2c
c002bf73:	89 f8                	mov    eax,edi
c002bf75:	5b                   	pop    ebx
c002bf76:	5e                   	pop    esi
c002bf77:	5f                   	pop    edi
c002bf78:	5d                   	pop    ebp
c002bf79:	c3                   	ret    

c002bf7a <ATA::detectCHS()>:
c002bf7a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002bf7e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002bf84:	c1 e0 06             	shl    eax,0x6
c002bf87:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002bf8d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002bf97:	c7 44 24 04 30 38 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033830
c002bf9f:	e9 c2 42 ff ff       	jmp    c0020266 <KePanic(char const*)>

c002bfa4 <ATA::open(int, int, void*)>:
c002bfa4:	53                   	push   ebx
c002bfa5:	83 ec 08             	sub    esp,0x8
c002bfa8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002bfac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002bfb0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002bfb4:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002bfba:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002bfc0:	c1 e0 06             	shl    eax,0x6
c002bfc3:	01 d0                	add    eax,edx
c002bfc5:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002bfcc:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002bfd2:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002bfd9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002bfe3:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002bfe9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002bff0:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002bff7:	75 0c                	jne    c002c005 <ATA::open(int, int, void*)+0x61>
c002bff9:	83 ec 0c             	sub    esp,0xc
c002bffc:	53                   	push   ebx
c002bffd:	e8 78 ff ff ff       	call   c002bf7a <ATA::detectCHS()>
c002c002:	83 c4 10             	add    esp,0x10
c002c005:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002c00b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002c011:	c1 e0 06             	shl    eax,0x6
c002c014:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002c01b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002c025:	d1 e8                	shr    eax,1
c002c027:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002c02d:	6a 04                	push   0x4
c002c02f:	6a 0c                	push   0xc
c002c031:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c038:	50                   	push   eax
c002c039:	52                   	push   edx
c002c03a:	e8 3d ec ff ff       	call   c002ac7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c03f:	90                   	nop
c002c040:	90                   	nop
c002c041:	6a 00                	push   0x0
c002c043:	6a 0c                	push   0xc
c002c045:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c04c:	50                   	push   eax
c002c04d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c053:	e8 24 ec ff ff       	call   c002ac7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c058:	83 c4 14             	add    esp,0x14
c002c05b:	53                   	push   ebx
c002c05c:	e8 b9 f6 fe ff       	call   c001b71a <PhysicalDisk::startCache()>
c002c061:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c064:	e8 ed 08 ff ff       	call   c001c956 <createPartitionsForDisk(PhysicalDisk*)>
c002c069:	31 c0                	xor    eax,eax
c002c06b:	83 c4 18             	add    esp,0x18
c002c06e:	5b                   	pop    ebx
c002c06f:	c3                   	ret    

c002c070 <combineCharAndColour(char, unsigned char)>:
c002c070:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002c075:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c002c07b:	c1 e0 08             	shl    eax,0x8
c002c07e:	09 d0                	or     eax,edx
c002c080:	c3                   	ret    

c002c081 <combineColours(unsigned char, unsigned char)>:
c002c081:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002c086:	c1 e0 04             	shl    eax,0x4
c002c089:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c002c08d:	c3                   	ret    

c002c08e <ATA::read(unsigned long long, int, void*)>:
c002c08e:	55                   	push   ebp
c002c08f:	57                   	push   edi
c002c090:	56                   	push   esi
c002c091:	be 04 00 00 00       	mov    esi,0x4
c002c096:	53                   	push   ebx
c002c097:	83 ec 0c             	sub    esp,0xc
c002c09a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002c09e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c0a2:	8d 7b ff             	lea    edi,[ebx-0x1]
c002c0a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002c0a9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002c0ad:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002c0b3:	0f 87 a1 01 00 00    	ja     c002c25a <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c0b9:	be 06 00 00 00       	mov    esi,0x6
c002c0be:	85 c9                	test   ecx,ecx
c002c0c0:	0f 84 94 01 00 00    	je     c002c25a <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c0c6:	55                   	push   ebp
c002c0c7:	55                   	push   ebp
c002c0c8:	6a 00                	push   0x0
c002c0ca:	51                   	push   ecx
c002c0cb:	53                   	push   ebx
c002c0cc:	52                   	push   edx
c002c0cd:	50                   	push   eax
c002c0ce:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002c0d2:	e8 0d fb ff ff       	call   c002bbe4 <ATA::access(unsigned long long, int, void*, bool)>
c002c0d7:	83 c4 20             	add    esp,0x20
c002c0da:	89 c6                	mov    esi,eax
c002c0dc:	85 c0                	test   eax,eax
c002c0de:	0f 85 71 01 00 00    	jne    c002c255 <ATA::read(unsigned long long, int, void*)+0x1c7>
c002c0e4:	03 1d b4 0b 04 c0    	add    ebx,DWORD PTR ds:0xc0040bb4
c002c0ea:	89 da                	mov    edx,ebx
c002c0ec:	50                   	push   eax
c002c0ed:	bd 10 27 00 00       	mov    ebp,0x2710
c002c0f2:	50                   	push   eax
c002c0f3:	89 1d b4 0b 04 c0    	mov    DWORD PTR ds:0xc0040bb4,ebx
c002c0f9:	6a 0f                	push   0xf
c002c0fb:	6a 00                	push   0x0
c002c0fd:	e8 7f ff ff ff       	call   c002c081 <combineColours(unsigned char, unsigned char)>
c002c102:	59                   	pop    ecx
c002c103:	b9 0a 00 00 00       	mov    ecx,0xa
c002c108:	5b                   	pop    ebx
c002c109:	0f b6 d8             	movzx  ebx,al
c002c10c:	89 d0                	mov    eax,edx
c002c10e:	53                   	push   ebx
c002c10f:	99                   	cdq    
c002c110:	f7 fd                	idiv   ebp
c002c112:	99                   	cdq    
c002c113:	f7 f9                	idiv   ecx
c002c115:	83 c2 30             	add    edx,0x30
c002c118:	0f b6 d2             	movzx  edx,dl
c002c11b:	52                   	push   edx
c002c11c:	e8 4f ff ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002c121:	5f                   	pop    edi
c002c122:	bf e8 03 00 00       	mov    edi,0x3e8
c002c127:	5a                   	pop    edx
c002c128:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002c12e:	53                   	push   ebx
c002c12f:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c134:	99                   	cdq    
c002c135:	f7 ff                	idiv   edi
c002c137:	99                   	cdq    
c002c138:	f7 f9                	idiv   ecx
c002c13a:	8d 42 30             	lea    eax,[edx+0x30]
c002c13d:	0f b6 c0             	movzx  eax,al
c002c140:	50                   	push   eax
c002c141:	e8 2a ff ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002c146:	5f                   	pop    edi
c002c147:	bf 64 00 00 00       	mov    edi,0x64
c002c14c:	5a                   	pop    edx
c002c14d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002c153:	53                   	push   ebx
c002c154:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c159:	99                   	cdq    
c002c15a:	f7 ff                	idiv   edi
c002c15c:	99                   	cdq    
c002c15d:	f7 f9                	idiv   ecx
c002c15f:	8d 42 30             	lea    eax,[edx+0x30]
c002c162:	0f b6 c0             	movzx  eax,al
c002c165:	50                   	push   eax
c002c166:	e8 05 ff ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002c16b:	5a                   	pop    edx
c002c16c:	5a                   	pop    edx
c002c16d:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002c173:	53                   	push   ebx
c002c174:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c179:	99                   	cdq    
c002c17a:	f7 f9                	idiv   ecx
c002c17c:	99                   	cdq    
c002c17d:	f7 f9                	idiv   ecx
c002c17f:	8d 42 30             	lea    eax,[edx+0x30]
c002c182:	0f b6 c0             	movzx  eax,al
c002c185:	50                   	push   eax
c002c186:	e8 e5 fe ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002c18b:	5a                   	pop    edx
c002c18c:	5a                   	pop    edx
c002c18d:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002c193:	53                   	push   ebx
c002c194:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c199:	99                   	cdq    
c002c19a:	f7 f9                	idiv   ecx
c002c19c:	83 c2 30             	add    edx,0x30
c002c19f:	0f b6 d2             	movzx  edx,dl
c002c1a2:	52                   	push   edx
c002c1a3:	e8 c8 fe ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002c1a8:	5a                   	pop    edx
c002c1a9:	5a                   	pop    edx
c002c1aa:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002c1b0:	53                   	push   ebx
c002c1b1:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c1b6:	99                   	cdq    
c002c1b7:	f7 fd                	idiv   ebp
c002c1b9:	99                   	cdq    
c002c1ba:	f7 f9                	idiv   ecx
c002c1bc:	8d 42 30             	lea    eax,[edx+0x30]
c002c1bf:	0f b6 c0             	movzx  eax,al
c002c1c2:	50                   	push   eax
c002c1c3:	e8 a8 fe ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002c1c8:	5d                   	pop    ebp
c002c1c9:	bd e8 03 00 00       	mov    ebp,0x3e8
c002c1ce:	5a                   	pop    edx
c002c1cf:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002c1d5:	53                   	push   ebx
c002c1d6:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c1db:	99                   	cdq    
c002c1dc:	f7 fd                	idiv   ebp
c002c1de:	99                   	cdq    
c002c1df:	f7 f9                	idiv   ecx
c002c1e1:	8d 42 30             	lea    eax,[edx+0x30]
c002c1e4:	0f b6 c0             	movzx  eax,al
c002c1e7:	50                   	push   eax
c002c1e8:	e8 83 fe ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002c1ed:	5d                   	pop    ebp
c002c1ee:	5a                   	pop    edx
c002c1ef:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002c1f5:	53                   	push   ebx
c002c1f6:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c1fb:	99                   	cdq    
c002c1fc:	f7 ff                	idiv   edi
c002c1fe:	99                   	cdq    
c002c1ff:	f7 f9                	idiv   ecx
c002c201:	8d 42 30             	lea    eax,[edx+0x30]
c002c204:	0f b6 c0             	movzx  eax,al
c002c207:	50                   	push   eax
c002c208:	e8 63 fe ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002c20d:	5f                   	pop    edi
c002c20e:	5d                   	pop    ebp
c002c20f:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002c215:	53                   	push   ebx
c002c216:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c21b:	99                   	cdq    
c002c21c:	f7 f9                	idiv   ecx
c002c21e:	99                   	cdq    
c002c21f:	f7 f9                	idiv   ecx
c002c221:	8d 42 30             	lea    eax,[edx+0x30]
c002c224:	0f b6 c0             	movzx  eax,al
c002c227:	50                   	push   eax
c002c228:	e8 43 fe ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002c22d:	5a                   	pop    edx
c002c22e:	5f                   	pop    edi
c002c22f:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002c235:	53                   	push   ebx
c002c236:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c23b:	99                   	cdq    
c002c23c:	f7 f9                	idiv   ecx
c002c23e:	83 c2 30             	add    edx,0x30
c002c241:	0f b6 d2             	movzx  edx,dl
c002c244:	52                   	push   edx
c002c245:	e8 26 fe ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002c24a:	83 c4 10             	add    esp,0x10
c002c24d:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002c253:	eb 05                	jmp    c002c25a <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c255:	be 01 00 00 00       	mov    esi,0x1
c002c25a:	83 c4 0c             	add    esp,0xc
c002c25d:	89 f0                	mov    eax,esi
c002c25f:	5b                   	pop    ebx
c002c260:	5e                   	pop    esi
c002c261:	5f                   	pop    edi
c002c262:	5d                   	pop    ebp
c002c263:	c3                   	ret    

c002c264 <ATA::write(unsigned long long, int, void*)>:
c002c264:	55                   	push   ebp
c002c265:	57                   	push   edi
c002c266:	56                   	push   esi
c002c267:	be 04 00 00 00       	mov    esi,0x4
c002c26c:	53                   	push   ebx
c002c26d:	83 ec 0c             	sub    esp,0xc
c002c270:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002c274:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c278:	8d 7b ff             	lea    edi,[ebx-0x1]
c002c27b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002c27f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002c283:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002c289:	0f 87 9c 01 00 00    	ja     c002c42b <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c28f:	be 06 00 00 00       	mov    esi,0x6
c002c294:	85 c9                	test   ecx,ecx
c002c296:	0f 84 8f 01 00 00    	je     c002c42b <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c29c:	55                   	push   ebp
c002c29d:	55                   	push   ebp
c002c29e:	6a 01                	push   0x1
c002c2a0:	51                   	push   ecx
c002c2a1:	53                   	push   ebx
c002c2a2:	52                   	push   edx
c002c2a3:	50                   	push   eax
c002c2a4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002c2a8:	e8 37 f9 ff ff       	call   c002bbe4 <ATA::access(unsigned long long, int, void*, bool)>
c002c2ad:	83 c4 20             	add    esp,0x20
c002c2b0:	89 c6                	mov    esi,eax
c002c2b2:	85 c0                	test   eax,eax
c002c2b4:	0f 85 6c 01 00 00    	jne    c002c426 <ATA::write(unsigned long long, int, void*)+0x1c2>
c002c2ba:	01 1d b0 0b 04 c0    	add    DWORD PTR ds:0xc0040bb0,ebx
c002c2c0:	bd 10 27 00 00       	mov    ebp,0x2710
c002c2c5:	50                   	push   eax
c002c2c6:	50                   	push   eax
c002c2c7:	6a 0f                	push   0xf
c002c2c9:	6a 00                	push   0x0
c002c2cb:	e8 b1 fd ff ff       	call   c002c081 <combineColours(unsigned char, unsigned char)>
c002c2d0:	5a                   	pop    edx
c002c2d1:	0f b6 d8             	movzx  ebx,al
c002c2d4:	59                   	pop    ecx
c002c2d5:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c2da:	53                   	push   ebx
c002c2db:	b9 0a 00 00 00       	mov    ecx,0xa
c002c2e0:	99                   	cdq    
c002c2e1:	f7 fd                	idiv   ebp
c002c2e3:	99                   	cdq    
c002c2e4:	f7 f9                	idiv   ecx
c002c2e6:	8d 42 30             	lea    eax,[edx+0x30]
c002c2e9:	0f b6 c0             	movzx  eax,al
c002c2ec:	50                   	push   eax
c002c2ed:	e8 7e fd ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002c2f2:	5f                   	pop    edi
c002c2f3:	bf e8 03 00 00       	mov    edi,0x3e8
c002c2f8:	5a                   	pop    edx
c002c2f9:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002c2ff:	53                   	push   ebx
c002c300:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c305:	99                   	cdq    
c002c306:	f7 ff                	idiv   edi
c002c308:	99                   	cdq    
c002c309:	f7 f9                	idiv   ecx
c002c30b:	8d 42 30             	lea    eax,[edx+0x30]
c002c30e:	0f b6 c0             	movzx  eax,al
c002c311:	50                   	push   eax
c002c312:	e8 59 fd ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002c317:	5f                   	pop    edi
c002c318:	bf 64 00 00 00       	mov    edi,0x64
c002c31d:	5a                   	pop    edx
c002c31e:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002c324:	53                   	push   ebx
c002c325:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c32a:	99                   	cdq    
c002c32b:	f7 ff                	idiv   edi
c002c32d:	99                   	cdq    
c002c32e:	f7 f9                	idiv   ecx
c002c330:	8d 42 30             	lea    eax,[edx+0x30]
c002c333:	0f b6 c0             	movzx  eax,al
c002c336:	50                   	push   eax
c002c337:	e8 34 fd ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002c33c:	5a                   	pop    edx
c002c33d:	5a                   	pop    edx
c002c33e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002c344:	53                   	push   ebx
c002c345:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c34a:	99                   	cdq    
c002c34b:	f7 f9                	idiv   ecx
c002c34d:	99                   	cdq    
c002c34e:	f7 f9                	idiv   ecx
c002c350:	8d 42 30             	lea    eax,[edx+0x30]
c002c353:	0f b6 c0             	movzx  eax,al
c002c356:	50                   	push   eax
c002c357:	e8 14 fd ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002c35c:	5a                   	pop    edx
c002c35d:	5a                   	pop    edx
c002c35e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002c364:	53                   	push   ebx
c002c365:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c36a:	99                   	cdq    
c002c36b:	f7 f9                	idiv   ecx
c002c36d:	8d 42 30             	lea    eax,[edx+0x30]
c002c370:	0f b6 c0             	movzx  eax,al
c002c373:	50                   	push   eax
c002c374:	e8 f7 fc ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002c379:	5a                   	pop    edx
c002c37a:	5a                   	pop    edx
c002c37b:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002c381:	53                   	push   ebx
c002c382:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c387:	99                   	cdq    
c002c388:	f7 fd                	idiv   ebp
c002c38a:	99                   	cdq    
c002c38b:	f7 f9                	idiv   ecx
c002c38d:	8d 42 30             	lea    eax,[edx+0x30]
c002c390:	0f b6 c0             	movzx  eax,al
c002c393:	50                   	push   eax
c002c394:	e8 d7 fc ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002c399:	5d                   	pop    ebp
c002c39a:	bd e8 03 00 00       	mov    ebp,0x3e8
c002c39f:	5a                   	pop    edx
c002c3a0:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002c3a6:	53                   	push   ebx
c002c3a7:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c3ac:	99                   	cdq    
c002c3ad:	f7 fd                	idiv   ebp
c002c3af:	99                   	cdq    
c002c3b0:	f7 f9                	idiv   ecx
c002c3b2:	8d 42 30             	lea    eax,[edx+0x30]
c002c3b5:	0f b6 c0             	movzx  eax,al
c002c3b8:	50                   	push   eax
c002c3b9:	e8 b2 fc ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002c3be:	5d                   	pop    ebp
c002c3bf:	5a                   	pop    edx
c002c3c0:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002c3c6:	53                   	push   ebx
c002c3c7:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c3cc:	99                   	cdq    
c002c3cd:	f7 ff                	idiv   edi
c002c3cf:	99                   	cdq    
c002c3d0:	f7 f9                	idiv   ecx
c002c3d2:	8d 42 30             	lea    eax,[edx+0x30]
c002c3d5:	0f b6 c0             	movzx  eax,al
c002c3d8:	50                   	push   eax
c002c3d9:	e8 92 fc ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002c3de:	5f                   	pop    edi
c002c3df:	5d                   	pop    ebp
c002c3e0:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002c3e6:	53                   	push   ebx
c002c3e7:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c3ec:	99                   	cdq    
c002c3ed:	f7 f9                	idiv   ecx
c002c3ef:	99                   	cdq    
c002c3f0:	f7 f9                	idiv   ecx
c002c3f2:	8d 42 30             	lea    eax,[edx+0x30]
c002c3f5:	0f b6 c0             	movzx  eax,al
c002c3f8:	50                   	push   eax
c002c3f9:	e8 72 fc ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002c3fe:	5a                   	pop    edx
c002c3ff:	5f                   	pop    edi
c002c400:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002c406:	53                   	push   ebx
c002c407:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c40c:	99                   	cdq    
c002c40d:	f7 f9                	idiv   ecx
c002c40f:	83 c2 30             	add    edx,0x30
c002c412:	0f b6 d2             	movzx  edx,dl
c002c415:	52                   	push   edx
c002c416:	e8 55 fc ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002c41b:	83 c4 10             	add    esp,0x10
c002c41e:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002c424:	eb 05                	jmp    c002c42b <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c426:	be 01 00 00 00       	mov    esi,0x1
c002c42b:	83 c4 0c             	add    esp,0xc
c002c42e:	89 f0                	mov    eax,esi
c002c430:	5b                   	pop    ebx
c002c431:	5e                   	pop    esi
c002c432:	5f                   	pop    edi
c002c433:	5d                   	pop    ebp
c002c434:	c3                   	ret    
c002c435:	90                   	nop

c002c436 <ATAPI::write(unsigned long long, int, void*)>:
c002c436:	b8 03 00 00 00       	mov    eax,0x3
c002c43b:	c3                   	ret    

c002c43c <ATAPI::close(int, int, void*)>:
c002c43c:	83 ec 0c             	sub    esp,0xc
c002c43f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c443:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002c449:	85 c0                	test   eax,eax
c002c44b:	74 0c                	je     c002c459 <ATAPI::close(int, int, void*)+0x1d>
c002c44d:	83 ec 0c             	sub    esp,0xc
c002c450:	8b 10                	mov    edx,DWORD PTR [eax]
c002c452:	50                   	push   eax
c002c453:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002c456:	83 c4 10             	add    esp,0x10
c002c459:	31 c0                	xor    eax,eax
c002c45b:	83 c4 0c             	add    esp,0xc
c002c45e:	c3                   	ret    
c002c45f:	90                   	nop

c002c460 <ATAPI::ATAPI()>:
c002c460:	83 ec 0c             	sub    esp,0xc
c002c463:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c467:	83 ec 04             	sub    esp,0x4
c002c46a:	68 00 08 00 00       	push   0x800
c002c46f:	68 85 39 03 c0       	push   0xc0033985
c002c474:	50                   	push   eax
c002c475:	e8 38 f2 fe ff       	call   c001b6b2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002c47a:	83 c4 10             	add    esp,0x10
c002c47d:	ba 94 38 03 c0       	mov    edx,0xc0033894
c002c482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c486:	89 10                	mov    DWORD PTR [eax],edx
c002c488:	90                   	nop
c002c489:	83 c4 0c             	add    esp,0xc
c002c48c:	c3                   	ret    
c002c48d:	90                   	nop

c002c48e <ATAPI::readyForCommand()>:
c002c48e:	56                   	push   esi
c002c48f:	53                   	push   ebx
c002c490:	53                   	push   ebx
c002c491:	31 db                	xor    ebx,ebx
c002c493:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002c497:	51                   	push   ecx
c002c498:	6a 0c                	push   0xc
c002c49a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002c4a1:	50                   	push   eax
c002c4a2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002c4a8:	e8 8f e8 ff ff       	call   c002ad3c <IDE::read(unsigned char, unsigned char)>
c002c4ad:	83 c4 10             	add    esp,0x10
c002c4b0:	a8 88                	test   al,0x88
c002c4b2:	74 25                	je     c002c4d9 <ATAPI::readyForCommand()+0x4b>
c002c4b4:	43                   	inc    ebx
c002c4b5:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c002c4bb:	7e da                	jle    c002c497 <ATAPI::readyForCommand()+0x9>
c002c4bd:	83 ec 0c             	sub    esp,0xc
c002c4c0:	68 5e 01 00 00       	push   0x15e
c002c4c5:	e8 6a 8f ff ff       	call   c0025434 <milliTenthSleep(unsigned int)>
c002c4ca:	83 c4 10             	add    esp,0x10
c002c4cd:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c002c4d3:	75 c2                	jne    c002c497 <ATAPI::readyForCommand()+0x9>
c002c4d5:	31 c0                	xor    eax,eax
c002c4d7:	eb 02                	jmp    c002c4db <ATAPI::readyForCommand()+0x4d>
c002c4d9:	b0 01                	mov    al,0x1
c002c4db:	5a                   	pop    edx
c002c4dc:	5b                   	pop    ebx
c002c4dd:	5e                   	pop    esi
c002c4de:	c3                   	ret    
c002c4df:	90                   	nop

c002c4e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002c4e0:	55                   	push   ebp
c002c4e1:	57                   	push   edi
c002c4e2:	56                   	push   esi
c002c4e3:	53                   	push   ebx
c002c4e4:	83 ec 20             	sub    esp,0x20
c002c4e7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002c4eb:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002c4ef:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002c4f3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002c4f7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002c4fb:	6a 01                	push   0x1
c002c4fd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c504:	50                   	push   eax
c002c505:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c50b:	e8 74 e9 ff ff       	call   c002ae84 <IDE::enableIRQs(unsigned char, bool)>
c002c510:	5e                   	pop    esi
c002c511:	58                   	pop    eax
c002c512:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c519:	50                   	push   eax
c002c51a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c520:	e8 31 e7 ff ff       	call   c002ac56 <IDE::prepareInterrupt(unsigned char)>
c002c525:	89 3c 24             	mov    DWORD PTR [esp],edi
c002c528:	e8 61 ff ff ff       	call   c002c48e <ATAPI::readyForCommand()>
c002c52d:	83 c4 10             	add    esp,0x10
c002c530:	84 c0                	test   al,al
c002c532:	75 0a                	jne    c002c53e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002c534:	bb 01 00 00 00       	mov    ebx,0x1
c002c539:	e9 60 02 00 00       	jmp    c002c79e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002c53e:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c002c544:	c1 e0 04             	shl    eax,0x4
c002c547:	0f b6 c0             	movzx  eax,al
c002c54a:	50                   	push   eax
c002c54b:	6a 06                	push   0x6
c002c54d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c554:	50                   	push   eax
c002c555:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c55b:	e8 1c e7 ff ff       	call   c002ac7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c560:	6a 00                	push   0x0
c002c562:	6a 01                	push   0x1
c002c564:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c56b:	50                   	push   eax
c002c56c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c572:	e8 05 e7 ff ff       	call   c002ac7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c577:	83 c4 20             	add    esp,0x20
c002c57a:	0f b6 c3             	movzx  eax,bl
c002c57d:	0f b6 df             	movzx  ebx,bh
c002c580:	50                   	push   eax
c002c581:	6a 04                	push   0x4
c002c583:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c58a:	50                   	push   eax
c002c58b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c591:	e8 e6 e6 ff ff       	call   c002ac7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c596:	53                   	push   ebx
c002c597:	6a 05                	push   0x5
c002c599:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c5a0:	50                   	push   eax
c002c5a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c5a7:	e8 d0 e6 ff ff       	call   c002ac7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c5ac:	83 c4 20             	add    esp,0x20
c002c5af:	68 a0 00 00 00       	push   0xa0
c002c5b4:	6a 07                	push   0x7
c002c5b6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c5bd:	50                   	push   eax
c002c5be:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c5c4:	e8 b3 e6 ff ff       	call   c002ac7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c5c9:	83 c4 0c             	add    esp,0xc
c002c5cc:	6a 01                	push   0x1
c002c5ce:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c5d5:	50                   	push   eax
c002c5d6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c5dc:	e8 83 f1 ff ff       	call   c002b764 <IDE::polling(unsigned char, unsigned int)>
c002c5e1:	83 c4 10             	add    esp,0x10
c002c5e4:	0f b6 d8             	movzx  ebx,al
c002c5e7:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c002c5ed:	85 db                	test   ebx,ebx
c002c5ef:	74 20                	je     c002c611 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002c5f1:	53                   	push   ebx
c002c5f2:	0f b6 c0             	movzx  eax,al
c002c5f5:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c002c5fc:	52                   	push   edx
c002c5fd:	50                   	push   eax
c002c5fe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c604:	e8 a1 f0 ff ff       	call   c002b6aa <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002c609:	83 c4 10             	add    esp,0x10
c002c60c:	e9 8d 01 00 00       	jmp    c002c79e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002c611:	0f b6 c0             	movzx  eax,al
c002c614:	53                   	push   ebx
c002c615:	53                   	push   ebx
c002c616:	50                   	push   eax
c002c617:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c61d:	e8 48 e6 ff ff       	call   c002ac6a <IDE::getBase(unsigned char)>
c002c622:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002c626:	b9 06 00 00 00       	mov    ecx,0x6
c002c62b:	89 c2                	mov    edx,eax
c002c62d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002c630:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002c634:	83 c4 10             	add    esp,0x10
c002c637:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c002c63c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002c640:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c646:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c64d:	85 db                	test   ebx,ebx
c002c64f:	0f 84 ec 00 00 00    	je     c002c741 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c002c655:	51                   	push   ecx
c002c656:	51                   	push   ecx
c002c657:	52                   	push   edx
c002c658:	50                   	push   eax
c002c659:	e8 8c e7 ff ff       	call   c002adea <IDE::waitInterrupt(unsigned char)>
c002c65e:	83 c4 10             	add    esp,0x10
c002c661:	84 c0                	test   al,al
c002c663:	0f 84 cb fe ff ff    	je     c002c534 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002c669:	56                   	push   esi
c002c66a:	56                   	push   esi
c002c66b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c672:	50                   	push   eax
c002c673:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c679:	e8 d8 e5 ff ff       	call   c002ac56 <IDE::prepareInterrupt(unsigned char)>
c002c67e:	83 c4 0c             	add    esp,0xc
c002c681:	6a 04                	push   0x4
c002c683:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c68a:	50                   	push   eax
c002c68b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c691:	e8 a6 e6 ff ff       	call   c002ad3c <IDE::read(unsigned char, unsigned char)>
c002c696:	83 c4 0c             	add    esp,0xc
c002c699:	89 c6                	mov    esi,eax
c002c69b:	6a 05                	push   0x5
c002c69d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c6a4:	50                   	push   eax
c002c6a5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c6ab:	e8 8c e6 ff ff       	call   c002ad3c <IDE::read(unsigned char, unsigned char)>
c002c6b0:	89 f1                	mov    ecx,esi
c002c6b2:	0f b6 c0             	movzx  eax,al
c002c6b5:	0f b6 f1             	movzx  esi,cl
c002c6b8:	c1 e0 08             	shl    eax,0x8
c002c6bb:	09 c6                	or     esi,eax
c002c6bd:	d1 fe                	sar    esi,1
c002c6bf:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002c6c3:	83 c4 10             	add    esp,0x10
c002c6c6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002c6cb:	74 41                	je     c002c70e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c002c6cd:	31 c9                	xor    ecx,ecx
c002c6cf:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c6d5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c6dc:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002c6e0:	75 0a                	jne    c002c6ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c002c6e2:	01 c9                	add    ecx,ecx
c002c6e4:	01 cd                	add    ebp,ecx
c002c6e6:	4b                   	dec    ebx
c002c6e7:	e9 54 ff ff ff       	jmp    c002c640 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c002c6ec:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002c6f1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002c6f5:	51                   	push   ecx
c002c6f6:	51                   	push   ecx
c002c6f7:	52                   	push   edx
c002c6f8:	50                   	push   eax
c002c6f9:	e8 6c e5 ff ff       	call   c002ac6a <IDE::getBase(unsigned char)>
c002c6fe:	89 c2                	mov    edx,eax
c002c700:	89 f0                	mov    eax,esi
c002c702:	66 ef                	out    dx,ax
c002c704:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002c708:	83 c4 10             	add    esp,0x10
c002c70b:	41                   	inc    ecx
c002c70c:	eb c1                	jmp    c002c6cf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c002c70e:	31 f6                	xor    esi,esi
c002c710:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c716:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c71d:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002c721:	75 06                	jne    c002c729 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c002c723:	01 f6                	add    esi,esi
c002c725:	01 f5                	add    ebp,esi
c002c727:	eb bd                	jmp    c002c6e6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c002c729:	51                   	push   ecx
c002c72a:	51                   	push   ecx
c002c72b:	52                   	push   edx
c002c72c:	50                   	push   eax
c002c72d:	e8 38 e5 ff ff       	call   c002ac6a <IDE::getBase(unsigned char)>
c002c732:	89 c2                	mov    edx,eax
c002c734:	66 ed                	in     ax,dx
c002c736:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002c73b:	83 c4 10             	add    esp,0x10
c002c73e:	46                   	inc    esi
c002c73f:	eb cf                	jmp    c002c710 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c002c741:	51                   	push   ecx
c002c742:	51                   	push   ecx
c002c743:	52                   	push   edx
c002c744:	50                   	push   eax
c002c745:	e8 a0 e6 ff ff       	call   c002adea <IDE::waitInterrupt(unsigned char)>
c002c74a:	83 c4 10             	add    esp,0x10
c002c74d:	84 c0                	test   al,al
c002c74f:	0f 84 df fd ff ff    	je     c002c534 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002c755:	bb a0 86 01 00       	mov    ebx,0x186a0
c002c75a:	52                   	push   edx
c002c75b:	52                   	push   edx
c002c75c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c763:	50                   	push   eax
c002c764:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c76a:	e8 e7 e4 ff ff       	call   c002ac56 <IDE::prepareInterrupt(unsigned char)>
c002c76f:	83 c4 10             	add    esp,0x10
c002c772:	50                   	push   eax
c002c773:	50                   	push   eax
c002c774:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c77b:	50                   	push   eax
c002c77c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c782:	e8 e3 e4 ff ff       	call   c002ac6a <IDE::getBase(unsigned char)>
c002c787:	8d 50 07             	lea    edx,[eax+0x7]
c002c78a:	ec                   	in     al,dx
c002c78b:	83 c4 10             	add    esp,0x10
c002c78e:	a8 88                	test   al,0x88
c002c790:	74 0a                	je     c002c79c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c002c792:	4b                   	dec    ebx
c002c793:	75 dd                	jne    c002c772 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c002c795:	bb 02 00 00 00       	mov    ebx,0x2
c002c79a:	eb 02                	jmp    c002c79e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002c79c:	31 db                	xor    ebx,ebx
c002c79e:	83 c4 1c             	add    esp,0x1c
c002c7a1:	89 d8                	mov    eax,ebx
c002c7a3:	5b                   	pop    ebx
c002c7a4:	5e                   	pop    esi
c002c7a5:	5f                   	pop    edi
c002c7a6:	5d                   	pop    ebp
c002c7a7:	c3                   	ret    

c002c7a8 <ATAPI::diskRemoved()>:
c002c7a8:	53                   	push   ebx
c002c7a9:	83 ec 14             	sub    esp,0x14
c002c7ac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002c7b0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002c7b7:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c002c7bd:	e8 84 fe fe ff       	call   c001c646 <LogicalDisk::unmount()>
c002c7c2:	58                   	pop    eax
c002c7c3:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002c7c9:	e8 56 08 ff ff       	call   c001d024 <VCache::writeWriteBuffer()>
c002c7ce:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c002c7d4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002c7d8:	83 c4 18             	add    esp,0x18
c002c7db:	5b                   	pop    ebx
c002c7dc:	e9 33 08 ff ff       	jmp    c001d014 <VCache::invalidateReadBuffer()>
c002c7e1:	90                   	nop

c002c7e2 <ATAPI::eject()>:
c002c7e2:	57                   	push   edi
c002c7e3:	b9 03 00 00 00       	mov    ecx,0x3
c002c7e8:	53                   	push   ebx
c002c7e9:	83 ec 14             	sub    esp,0x14
c002c7ec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002c7f0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002c7f4:	fc                   	cld    
c002c7f5:	31 c0                	xor    eax,eax
c002c7f7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002c7f9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002c7fe:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002c803:	50                   	push   eax
c002c804:	50                   	push   eax
c002c805:	6a 00                	push   0x0
c002c807:	6a 00                	push   0x0
c002c809:	6a 00                	push   0x0
c002c80b:	6a 02                	push   0x2
c002c80d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002c811:	50                   	push   eax
c002c812:	53                   	push   ebx
c002c813:	e8 c8 fc ff ff       	call   c002c4e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c818:	83 c4 14             	add    esp,0x14
c002c81b:	53                   	push   ebx
c002c81c:	e8 87 ff ff ff       	call   c002c7a8 <ATAPI::diskRemoved()>
c002c821:	83 c4 24             	add    esp,0x24
c002c824:	31 c0                	xor    eax,eax
c002c826:	5b                   	pop    ebx
c002c827:	5f                   	pop    edi
c002c828:	c3                   	ret    
c002c829:	90                   	nop

c002c82a <ATAPI::diskInserted()>:
c002c82a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002c82e:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c002c835:	c3                   	ret    

c002c836 <ATAPI::detectMedia()>:
c002c836:	56                   	push   esi
c002c837:	53                   	push   ebx
c002c838:	83 ec 28             	sub    esp,0x28
c002c83b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002c83f:	6a 0c                	push   0xc
c002c841:	6a 00                	push   0x0
c002c843:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002c847:	56                   	push   esi
c002c848:	e8 a3 3c fd ff       	call   c00004f0 <memset>
c002c84d:	58                   	pop    eax
c002c84e:	5a                   	pop    edx
c002c84f:	6a 00                	push   0x0
c002c851:	6a 00                	push   0x0
c002c853:	6a 00                	push   0x0
c002c855:	6a 00                	push   0x0
c002c857:	56                   	push   esi
c002c858:	53                   	push   ebx
c002c859:	e8 82 fc ff ff       	call   c002c4e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c85e:	83 c4 1c             	add    esp,0x1c
c002c861:	6a 0c                	push   0xc
c002c863:	6a 00                	push   0x0
c002c865:	56                   	push   esi
c002c866:	e8 85 3c fd ff       	call   c00004f0 <memset>
c002c86b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002c870:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002c875:	59                   	pop    ecx
c002c876:	58                   	pop    eax
c002c877:	6a 01                	push   0x1
c002c879:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002c87d:	50                   	push   eax
c002c87e:	6a 00                	push   0x0
c002c880:	6a 12                	push   0x12
c002c882:	56                   	push   esi
c002c883:	53                   	push   ebx
c002c884:	e8 57 fc ff ff       	call   c002c4e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c889:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002c88d:	83 c4 20             	add    esp,0x20
c002c890:	83 e0 7f             	and    eax,0x7f
c002c893:	83 f8 70             	cmp    eax,0x70
c002c896:	74 15                	je     c002c8ad <ATAPI::detectMedia()+0x77>
c002c898:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c89f:	75 0c                	jne    c002c8ad <ATAPI::detectMedia()+0x77>
c002c8a1:	83 ec 0c             	sub    esp,0xc
c002c8a4:	53                   	push   ebx
c002c8a5:	e8 80 ff ff ff       	call   c002c82a <ATAPI::diskInserted()>
c002c8aa:	83 c4 10             	add    esp,0x10
c002c8ad:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002c8b1:	83 e0 0f             	and    eax,0xf
c002c8b4:	83 f8 02             	cmp    eax,0x2
c002c8b7:	75 1b                	jne    c002c8d4 <ATAPI::detectMedia()+0x9e>
c002c8b9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002c8be:	75 2d                	jne    c002c8ed <ATAPI::detectMedia()+0xb7>
c002c8c0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c8c7:	74 24                	je     c002c8ed <ATAPI::detectMedia()+0xb7>
c002c8c9:	83 ec 0c             	sub    esp,0xc
c002c8cc:	53                   	push   ebx
c002c8cd:	e8 d6 fe ff ff       	call   c002c7a8 <ATAPI::diskRemoved()>
c002c8d2:	eb 16                	jmp    c002c8ea <ATAPI::detectMedia()+0xb4>
c002c8d4:	85 c0                	test   eax,eax
c002c8d6:	75 15                	jne    c002c8ed <ATAPI::detectMedia()+0xb7>
c002c8d8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c8df:	75 0c                	jne    c002c8ed <ATAPI::detectMedia()+0xb7>
c002c8e1:	83 ec 0c             	sub    esp,0xc
c002c8e4:	53                   	push   ebx
c002c8e5:	e8 40 ff ff ff       	call   c002c82a <ATAPI::diskInserted()>
c002c8ea:	83 c4 10             	add    esp,0x10
c002c8ed:	83 c4 24             	add    esp,0x24
c002c8f0:	5b                   	pop    ebx
c002c8f1:	5e                   	pop    esi
c002c8f2:	c3                   	ret    
c002c8f3:	90                   	nop

c002c8f4 <ATAPI::open(int, int, void*)>:
c002c8f4:	56                   	push   esi
c002c8f5:	53                   	push   ebx
c002c8f6:	50                   	push   eax
c002c8f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002c8fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002c8ff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002c903:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002c909:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002c90f:	c1 e0 06             	shl    eax,0x6
c002c912:	01 d0                	add    eax,edx
c002c914:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002c91b:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002c921:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002c928:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002c932:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002c938:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002c93f:	6a 04                	push   0x4
c002c941:	6a 0c                	push   0xc
c002c943:	51                   	push   ecx
c002c944:	52                   	push   edx
c002c945:	e8 32 e3 ff ff       	call   c002ac7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c94a:	90                   	nop
c002c94b:	90                   	nop
c002c94c:	6a 00                	push   0x0
c002c94e:	6a 0c                	push   0xc
c002c950:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c957:	50                   	push   eax
c002c958:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c95e:	e8 19 e3 ff ff       	call   c002ac7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c963:	83 c4 14             	add    esp,0x14
c002c966:	68 78 01 00 00       	push   0x178
c002c96b:	e8 4e 9a fe ff       	call   c00163be <malloc>
c002c970:	83 c4 0c             	add    esp,0xc
c002c973:	89 c6                	mov    esi,eax
c002c975:	6a 00                	push   0x0
c002c977:	68 ff ff ff 7f       	push   0x7fffffff
c002c97c:	6a 00                	push   0x0
c002c97e:	6a 00                	push   0x0
c002c980:	53                   	push   ebx
c002c981:	68 37 3a 03 c0       	push   0xc0033a37
c002c986:	50                   	push   eax
c002c987:	e8 f8 fa fe ff       	call   c001c484 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002c98c:	83 c4 14             	add    esp,0x14
c002c98f:	56                   	push   esi
c002c990:	e8 af fb fe ff       	call   c001c544 <LogicalDisk::assignDriveLetter()>
c002c995:	5a                   	pop    edx
c002c996:	0f be c0             	movsx  eax,al
c002c999:	59                   	pop    ecx
c002c99a:	50                   	push   eax
c002c99b:	68 7c 38 03 c0       	push   0xc003387c
c002c9a0:	e8 a8 c8 fe ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c002c9a5:	58                   	pop    eax
c002c9a6:	5a                   	pop    edx
c002c9a7:	56                   	push   esi
c002c9a8:	53                   	push   ebx
c002c9a9:	e8 20 e9 fe ff       	call   c001b2ce <Device::addChild(Device*)>
c002c9ae:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c002c9b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c9b7:	e8 5e ed fe ff       	call   c001b71a <PhysicalDisk::startCache()>
c002c9bc:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002c9c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c9c6:	e8 6b fe ff ff       	call   c002c836 <ATAPI::detectMedia()>
c002c9cb:	83 c4 14             	add    esp,0x14
c002c9ce:	31 c0                	xor    eax,eax
c002c9d0:	5b                   	pop    ebx
c002c9d1:	5e                   	pop    esi
c002c9d2:	c3                   	ret    
c002c9d3:	90                   	nop

c002c9d4 <ATAPI::read(unsigned long long, int, void*)>:
c002c9d4:	55                   	push   ebp
c002c9d5:	57                   	push   edi
c002c9d6:	56                   	push   esi
c002c9d7:	53                   	push   ebx
c002c9d8:	83 ec 1c             	sub    esp,0x1c
c002c9db:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002c9df:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002c9e3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002c9e7:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c9ee:	74 3c                	je     c002ca2c <ATAPI::read(unsigned long long, int, void*)+0x58>
c002c9f0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002c9f4:	b9 03 00 00 00       	mov    ecx,0x3
c002c9f9:	fc                   	cld    
c002c9fa:	31 c0                	xor    eax,eax
c002c9fc:	0f ce                	bswap  esi
c002c9fe:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002ca00:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002ca05:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c002ca09:	89 e8                	mov    eax,ebp
c002ca0b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002ca0f:	50                   	push   eax
c002ca10:	50                   	push   eax
c002ca11:	55                   	push   ebp
c002ca12:	c1 e5 0b             	shl    ebp,0xb
c002ca15:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002ca19:	6a 00                	push   0x0
c002ca1b:	55                   	push   ebp
c002ca1c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002ca20:	50                   	push   eax
c002ca21:	53                   	push   ebx
c002ca22:	e8 b9 fa ff ff       	call   c002c4e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002ca27:	83 c4 20             	add    esp,0x20
c002ca2a:	eb 1a                	jmp    c002ca46 <ATAPI::read(unsigned long long, int, void*)+0x72>
c002ca2c:	83 ec 0c             	sub    esp,0xc
c002ca2f:	53                   	push   ebx
c002ca30:	e8 01 fe ff ff       	call   c002c836 <ATAPI::detectMedia()>
c002ca35:	83 c4 10             	add    esp,0x10
c002ca38:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002ca3f:	75 af                	jne    c002c9f0 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002ca41:	b8 02 00 00 00       	mov    eax,0x2
c002ca46:	83 c4 1c             	add    esp,0x1c
c002ca49:	5b                   	pop    ebx
c002ca4a:	5e                   	pop    esi
c002ca4b:	5f                   	pop    edi
c002ca4c:	5d                   	pop    ebp
c002ca4d:	c3                   	ret    

c002ca4e <SATA::close(int, int, void*)>:
c002ca4e:	83 ec 0c             	sub    esp,0xc
c002ca51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ca55:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002ca5b:	85 c0                	test   eax,eax
c002ca5d:	74 0c                	je     c002ca6b <SATA::close(int, int, void*)+0x1d>
c002ca5f:	83 ec 0c             	sub    esp,0xc
c002ca62:	8b 10                	mov    edx,DWORD PTR [eax]
c002ca64:	50                   	push   eax
c002ca65:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002ca68:	83 c4 10             	add    esp,0x10
c002ca6b:	31 c0                	xor    eax,eax
c002ca6d:	83 c4 0c             	add    esp,0xc
c002ca70:	c3                   	ret    
c002ca71:	90                   	nop

c002ca72 <SATA::powerSaving(PowerSavingLevel)>:
c002ca72:	c3                   	ret    
c002ca73:	90                   	nop

c002ca74 <SATA::open(int, int, void*)>:
c002ca74:	56                   	push   esi
c002ca75:	53                   	push   ebx
c002ca76:	83 ec 10             	sub    esp,0x10
c002ca79:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002ca7d:	68 c4 38 03 c0       	push   0xc00338c4
c002ca82:	e8 c6 c7 fe ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c002ca87:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002ca8b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002ca95:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002ca9b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002caa5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002caa9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002cab3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002cab9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002cac0:	e8 02 9c fe ff       	call   c00166c7 <Phys::allocatePage()>
c002cac5:	89 c6                	mov    esi,eax
c002cac7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002cacd:	81 c6 00 10 00 00    	add    esi,0x1000
c002cad3:	e8 ef 9b fe ff       	call   c00166c7 <Phys::allocatePage()>
c002cad8:	83 c4 10             	add    esp,0x10
c002cadb:	39 c6                	cmp    esi,eax
c002cadd:	74 10                	je     c002caef <SATA::open(int, int, void*)+0x7b>
c002cadf:	83 ec 0c             	sub    esp,0xc
c002cae2:	68 d0 38 03 c0       	push   0xc00338d0
c002cae7:	e8 7a 37 ff ff       	call   c0020266 <KePanic(char const*)>
c002caec:	83 c4 10             	add    esp,0x10
c002caef:	83 ec 0c             	sub    esp,0xc
c002caf2:	6a 02                	push   0x2
c002caf4:	e8 1c b4 fe ff       	call   c0017f15 <Virt::allocateKernelVirtualPages(int)>
c002caf9:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002caff:	6a 03                	push   0x3
c002cb01:	50                   	push   eax
c002cb02:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002cb08:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002cb0e:	e8 15 bb fe ff       	call   c0018628 <VAS::mapPage(unsigned long, unsigned long, int)>
c002cb13:	83 c4 14             	add    esp,0x14
c002cb16:	53                   	push   ebx
c002cb17:	e8 fe eb fe ff       	call   c001b71a <PhysicalDisk::startCache()>
c002cb1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002cb1f:	e8 32 fe fe ff       	call   c001c956 <createPartitionsForDisk(PhysicalDisk*)>
c002cb24:	83 c4 14             	add    esp,0x14
c002cb27:	31 c0                	xor    eax,eax
c002cb29:	5b                   	pop    ebx
c002cb2a:	5e                   	pop    esi
c002cb2b:	c3                   	ret    

c002cb2c <SATA::SATA()>:
c002cb2c:	83 ec 0c             	sub    esp,0xc
c002cb2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002cb33:	83 ec 04             	sub    esp,0x4
c002cb36:	68 00 02 00 00       	push   0x200
c002cb3b:	68 e4 38 03 c0       	push   0xc00338e4
c002cb40:	50                   	push   eax
c002cb41:	e8 6c eb fe ff       	call   c001b6b2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002cb46:	83 c4 10             	add    esp,0x10
c002cb49:	ba 54 39 03 c0       	mov    edx,0xc0033954
c002cb4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002cb52:	89 10                	mov    DWORD PTR [eax],edx
c002cb54:	90                   	nop
c002cb55:	83 c4 0c             	add    esp,0xc
c002cb58:	c3                   	ret    
c002cb59:	90                   	nop

c002cb5a <SATA::access(unsigned long long, int, void*, bool)>:
c002cb5a:	55                   	push   ebp
c002cb5b:	57                   	push   edi
c002cb5c:	56                   	push   esi
c002cb5d:	53                   	push   ebx
c002cb5e:	83 ec 2c             	sub    esp,0x2c
c002cb61:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002cb65:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002cb69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002cb6d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002cb71:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002cb75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002cb79:	fa                   	cli    
c002cb7a:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002cb80:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002cb85:	7e 10                	jle    c002cb97 <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c002cb87:	83 ec 0c             	sub    esp,0xc
c002cb8a:	68 f4 38 03 c0       	push   0xc00338f4
c002cb8f:	e8 d2 36 ff ff       	call   c0020266 <KePanic(char const*)>
c002cb94:	83 c4 10             	add    esp,0x10
c002cb97:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002cb9d:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002cba3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002cba9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002cbad:	89 d0                	mov    eax,edx
c002cbaf:	c1 e0 07             	shl    eax,0x7
c002cbb2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002cbb6:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002cbc0:	51                   	push   ecx
c002cbc1:	8d 42 02             	lea    eax,[edx+0x2]
c002cbc4:	51                   	push   ecx
c002cbc5:	c1 e0 07             	shl    eax,0x7
c002cbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002cbcc:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002cbd0:	50                   	push   eax
c002cbd1:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002cbd7:	e8 68 ec ff ff       	call   c002b844 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002cbdc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002cbe0:	83 c4 10             	add    esp,0x10
c002cbe3:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002cbe8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002cbec:	0f 84 aa 01 00 00    	je     c002cd9c <SATA::access(unsigned long long, int, void*, bool)+0x242>
c002cbf2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002cbf6:	c1 e0 09             	shl    eax,0x9
c002cbf9:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002cbfe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002cc02:	74 0e                	je     c002cc12 <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c002cc04:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c002cc0a:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002cc0e:	89 c1                	mov    ecx,eax
c002cc10:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002cc12:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002cc18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002cc1c:	8d 42 02             	lea    eax,[edx+0x2]
c002cc1f:	c1 e0 07             	shl    eax,0x7
c002cc22:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002cc26:	8b 00                	mov    eax,DWORD PTR [eax]
c002cc28:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002cc2e:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002cc34:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002cc38:	c1 e1 05             	shl    ecx,0x5
c002cc3b:	01 c8                	add    eax,ecx
c002cc3d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002cc41:	83 e1 01             	and    ecx,0x1
c002cc44:	89 ce                	mov    esi,ecx
c002cc46:	8a 08                	mov    cl,BYTE PTR [eax]
c002cc48:	c1 e6 06             	shl    esi,0x6
c002cc4b:	83 e1 bf             	and    ecx,0xffffffbf
c002cc4e:	09 f1                	or     ecx,esi
c002cc50:	88 08                	mov    BYTE PTR [eax],cl
c002cc52:	8b 08                	mov    ecx,DWORD PTR [eax]
c002cc54:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002cc5a:	81 c9 05 00 01 00    	or     ecx,0x10005
c002cc60:	89 08                	mov    DWORD PTR [eax],ecx
c002cc62:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002cc68:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002cc6e:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c002cc74:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c002cc77:	50                   	push   eax
c002cc78:	68 90 00 00 00       	push   0x90
c002cc7d:	6a 00                	push   0x0
c002cc7f:	56                   	push   esi
c002cc80:	e8 6b 38 fd ff       	call   c00004f0 <memset>
c002cc85:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002cc8b:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002cc91:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002cc95:	83 c4 10             	add    esp,0x10
c002cc98:	48                   	dec    eax
c002cc99:	25 ff ff 3f 00       	and    eax,0x3fffff
c002cc9e:	89 c1                	mov    ecx,eax
c002cca0:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c002cca6:	25 00 00 c0 ff       	and    eax,0xffc00000
c002ccab:	09 c8                	or     eax,ecx
c002ccad:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002ccb3:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c002ccb9:	83 c8 80             	or     eax,0xffffff80
c002ccbc:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c002ccc2:	66 8b 06             	mov    ax,WORD PTR [esi]
c002ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002ccc9:	25 00 7f 00 00       	and    eax,0x7f00
c002ccce:	0d 27 80 ff ff       	or     eax,0xffff8027
c002ccd3:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002ccd8:	66 89 06             	mov    WORD PTR [esi],ax
c002ccdb:	b0 35                	mov    al,0x35
c002ccdd:	75 02                	jne    c002cce1 <SATA::access(unsigned long long, int, void*, bool)+0x187>
c002ccdf:	b0 25                	mov    al,0x25
c002cce1:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c002cce4:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c002cce8:	89 e8                	mov    eax,ebp
c002ccea:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002ccee:	c1 e8 10             	shr    eax,0x10
c002ccf1:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c002ccf4:	89 e8                	mov    eax,ebp
c002ccf6:	c1 e8 18             	shr    eax,0x18
c002ccf9:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c002ccfc:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002cd00:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c002cd03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002cd07:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002cd0a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002cd0e:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c002cd12:	89 d6                	mov    esi,edx
c002cd14:	31 c0                	xor    eax,eax
c002cd16:	c1 e6 07             	shl    esi,0x7
c002cd19:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c002cd1d:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c002cd23:	80 e1 88             	and    cl,0x88
c002cd26:	74 0a                	je     c002cd32 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c002cd28:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002cd2d:	74 0a                	je     c002cd39 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c002cd2f:	40                   	inc    eax
c002cd30:	eb eb                	jmp    c002cd1d <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c002cd32:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002cd37:	75 0a                	jne    c002cd43 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c002cd39:	83 ec 0c             	sub    esp,0xc
c002cd3c:	68 2d 39 03 c0       	push   0xc003392d
c002cd41:	eb 36                	jmp    c002cd79 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c002cd43:	b8 01 00 00 00       	mov    eax,0x1
c002cd48:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002cd4c:	c1 e2 07             	shl    edx,0x7
c002cd4f:	d3 e0                	shl    eax,cl
c002cd51:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c002cd55:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002cd5b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c002cd61:	85 c8                	test   eax,ecx
c002cd63:	74 2b                	je     c002cd90 <SATA::access(unsigned long long, int, void*, bool)+0x236>
c002cd65:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c002cd6b:	0f ba e1 1e          	bt     ecx,0x1e
c002cd6f:	73 ea                	jae    c002cd5b <SATA::access(unsigned long long, int, void*, bool)+0x201>
c002cd71:	83 ec 0c             	sub    esp,0xc
c002cd74:	68 3b 39 03 c0       	push   0xc003393b
c002cd79:	e8 cf c4 fe ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c002cd7e:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002cd83:	83 c4 10             	add    esp,0x10
c002cd86:	48                   	dec    eax
c002cd87:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002cd8c:	85 c0                	test   eax,eax
c002cd8e:	eb 17                	jmp    c002cda7 <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c002cd90:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c002cd96:	0f ba e0 1e          	bt     eax,0x1e
c002cd9a:	73 15                	jae    c002cdb1 <SATA::access(unsigned long long, int, void*, bool)+0x257>
c002cd9c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002cda1:	48                   	dec    eax
c002cda2:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002cda7:	75 01                	jne    c002cdaa <SATA::access(unsigned long long, int, void*, bool)+0x250>
c002cda9:	fb                   	sti    
c002cdaa:	b8 01 00 00 00       	mov    eax,0x1
c002cdaf:	eb 29                	jmp    c002cdda <SATA::access(unsigned long long, int, void*, bool)+0x280>
c002cdb1:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002cdb6:	75 10                	jne    c002cdc8 <SATA::access(unsigned long long, int, void*, bool)+0x26e>
c002cdb8:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002cdbe:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002cdc2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002cdc6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002cdc8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002cdcd:	48                   	dec    eax
c002cdce:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002cdd3:	75 03                	jne    c002cdd8 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c002cdd5:	fb                   	sti    
c002cdd6:	eb 02                	jmp    c002cdda <SATA::access(unsigned long long, int, void*, bool)+0x280>
c002cdd8:	31 c0                	xor    eax,eax
c002cdda:	83 c4 2c             	add    esp,0x2c
c002cddd:	5b                   	pop    ebx
c002cdde:	5e                   	pop    esi
c002cddf:	5f                   	pop    edi
c002cde0:	5d                   	pop    ebp
c002cde1:	c3                   	ret    

c002cde2 <SATA::read(unsigned long long, int, void*)>:
c002cde2:	55                   	push   ebp
c002cde3:	57                   	push   edi
c002cde4:	56                   	push   esi
c002cde5:	be 04 00 00 00       	mov    esi,0x4
c002cdea:	53                   	push   ebx
c002cdeb:	83 ec 0c             	sub    esp,0xc
c002cdee:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002cdf2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002cdf6:	8d 7b ff             	lea    edi,[ebx-0x1]
c002cdf9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002cdfd:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002ce01:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002ce07:	0f 87 1a 02 00 00    	ja     c002d027 <SATA::read(unsigned long long, int, void*)+0x245>
c002ce0d:	be 06 00 00 00       	mov    esi,0x6
c002ce12:	85 c9                	test   ecx,ecx
c002ce14:	0f 84 0d 02 00 00    	je     c002d027 <SATA::read(unsigned long long, int, void*)+0x245>
c002ce1a:	56                   	push   esi
c002ce1b:	56                   	push   esi
c002ce1c:	6a 00                	push   0x0
c002ce1e:	51                   	push   ecx
c002ce1f:	53                   	push   ebx
c002ce20:	52                   	push   edx
c002ce21:	50                   	push   eax
c002ce22:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002ce26:	e8 2f fd ff ff       	call   c002cb5a <SATA::access(unsigned long long, int, void*, bool)>
c002ce2b:	83 c4 20             	add    esp,0x20
c002ce2e:	89 c6                	mov    esi,eax
c002ce30:	85 c0                	test   eax,eax
c002ce32:	0f 85 ea 01 00 00    	jne    c002d022 <SATA::read(unsigned long long, int, void*)+0x240>
c002ce38:	01 1d b4 0b 04 c0    	add    DWORD PTR ds:0xc0040bb4,ebx
c002ce3e:	bb 0a 00 00 00       	mov    ebx,0xa
c002ce43:	50                   	push   eax
c002ce44:	50                   	push   eax
c002ce45:	6a 0f                	push   0xf
c002ce47:	6a 00                	push   0x0
c002ce49:	e8 33 f2 ff ff       	call   c002c081 <combineColours(unsigned char, unsigned char)>
c002ce4e:	5a                   	pop    edx
c002ce4f:	0f b6 c0             	movzx  eax,al
c002ce52:	59                   	pop    ecx
c002ce53:	b9 10 27 00 00       	mov    ecx,0x2710
c002ce58:	50                   	push   eax
c002ce59:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002ce5e:	99                   	cdq    
c002ce5f:	f7 f9                	idiv   ecx
c002ce61:	99                   	cdq    
c002ce62:	f7 fb                	idiv   ebx
c002ce64:	8d 42 30             	lea    eax,[edx+0x30]
c002ce67:	0f b6 c0             	movzx  eax,al
c002ce6a:	50                   	push   eax
c002ce6b:	e8 00 f2 ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002ce70:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002ce76:	5f                   	pop    edi
c002ce77:	5d                   	pop    ebp
c002ce78:	bd e8 03 00 00       	mov    ebp,0x3e8
c002ce7d:	6a 0f                	push   0xf
c002ce7f:	6a 00                	push   0x0
c002ce81:	e8 fb f1 ff ff       	call   c002c081 <combineColours(unsigned char, unsigned char)>
c002ce86:	5a                   	pop    edx
c002ce87:	0f b6 c0             	movzx  eax,al
c002ce8a:	59                   	pop    ecx
c002ce8b:	50                   	push   eax
c002ce8c:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002ce91:	99                   	cdq    
c002ce92:	f7 fd                	idiv   ebp
c002ce94:	99                   	cdq    
c002ce95:	f7 fb                	idiv   ebx
c002ce97:	8d 42 30             	lea    eax,[edx+0x30]
c002ce9a:	0f b6 c0             	movzx  eax,al
c002ce9d:	50                   	push   eax
c002ce9e:	e8 cd f1 ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002cea3:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002cea9:	5f                   	pop    edi
c002ceaa:	bf 64 00 00 00       	mov    edi,0x64
c002ceaf:	58                   	pop    eax
c002ceb0:	6a 0f                	push   0xf
c002ceb2:	6a 00                	push   0x0
c002ceb4:	e8 c8 f1 ff ff       	call   c002c081 <combineColours(unsigned char, unsigned char)>
c002ceb9:	5a                   	pop    edx
c002ceba:	0f b6 c0             	movzx  eax,al
c002cebd:	59                   	pop    ecx
c002cebe:	50                   	push   eax
c002cebf:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cec4:	99                   	cdq    
c002cec5:	f7 ff                	idiv   edi
c002cec7:	99                   	cdq    
c002cec8:	f7 fb                	idiv   ebx
c002ceca:	8d 42 30             	lea    eax,[edx+0x30]
c002cecd:	0f b6 c0             	movzx  eax,al
c002ced0:	50                   	push   eax
c002ced1:	e8 9a f1 ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002ced6:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002cedc:	58                   	pop    eax
c002cedd:	5a                   	pop    edx
c002cede:	6a 0f                	push   0xf
c002cee0:	6a 00                	push   0x0
c002cee2:	e8 9a f1 ff ff       	call   c002c081 <combineColours(unsigned char, unsigned char)>
c002cee7:	59                   	pop    ecx
c002cee8:	0f b6 c0             	movzx  eax,al
c002ceeb:	5a                   	pop    edx
c002ceec:	50                   	push   eax
c002ceed:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cef2:	99                   	cdq    
c002cef3:	f7 fb                	idiv   ebx
c002cef5:	99                   	cdq    
c002cef6:	f7 fb                	idiv   ebx
c002cef8:	8d 42 30             	lea    eax,[edx+0x30]
c002cefb:	0f b6 c0             	movzx  eax,al
c002cefe:	50                   	push   eax
c002ceff:	e8 6c f1 ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002cf04:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002cf0a:	59                   	pop    ecx
c002cf0b:	58                   	pop    eax
c002cf0c:	6a 0f                	push   0xf
c002cf0e:	6a 00                	push   0x0
c002cf10:	e8 6c f1 ff ff       	call   c002c081 <combineColours(unsigned char, unsigned char)>
c002cf15:	5a                   	pop    edx
c002cf16:	0f b6 c0             	movzx  eax,al
c002cf19:	59                   	pop    ecx
c002cf1a:	50                   	push   eax
c002cf1b:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cf20:	99                   	cdq    
c002cf21:	f7 fb                	idiv   ebx
c002cf23:	8d 42 30             	lea    eax,[edx+0x30]
c002cf26:	0f b6 c0             	movzx  eax,al
c002cf29:	50                   	push   eax
c002cf2a:	e8 41 f1 ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002cf2f:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002cf35:	58                   	pop    eax
c002cf36:	5a                   	pop    edx
c002cf37:	6a 0f                	push   0xf
c002cf39:	6a 00                	push   0x0
c002cf3b:	e8 41 f1 ff ff       	call   c002c081 <combineColours(unsigned char, unsigned char)>
c002cf40:	59                   	pop    ecx
c002cf41:	0f b6 c0             	movzx  eax,al
c002cf44:	5a                   	pop    edx
c002cf45:	b9 10 27 00 00       	mov    ecx,0x2710
c002cf4a:	50                   	push   eax
c002cf4b:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cf50:	99                   	cdq    
c002cf51:	f7 f9                	idiv   ecx
c002cf53:	99                   	cdq    
c002cf54:	f7 fb                	idiv   ebx
c002cf56:	8d 42 30             	lea    eax,[edx+0x30]
c002cf59:	0f b6 c0             	movzx  eax,al
c002cf5c:	50                   	push   eax
c002cf5d:	e8 0e f1 ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002cf62:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002cf68:	59                   	pop    ecx
c002cf69:	58                   	pop    eax
c002cf6a:	6a 0f                	push   0xf
c002cf6c:	6a 00                	push   0x0
c002cf6e:	e8 0e f1 ff ff       	call   c002c081 <combineColours(unsigned char, unsigned char)>
c002cf73:	5a                   	pop    edx
c002cf74:	0f b6 c0             	movzx  eax,al
c002cf77:	59                   	pop    ecx
c002cf78:	50                   	push   eax
c002cf79:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cf7e:	99                   	cdq    
c002cf7f:	f7 fd                	idiv   ebp
c002cf81:	99                   	cdq    
c002cf82:	f7 fb                	idiv   ebx
c002cf84:	8d 42 30             	lea    eax,[edx+0x30]
c002cf87:	0f b6 c0             	movzx  eax,al
c002cf8a:	50                   	push   eax
c002cf8b:	e8 e0 f0 ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002cf90:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002cf96:	5d                   	pop    ebp
c002cf97:	58                   	pop    eax
c002cf98:	6a 0f                	push   0xf
c002cf9a:	6a 00                	push   0x0
c002cf9c:	e8 e0 f0 ff ff       	call   c002c081 <combineColours(unsigned char, unsigned char)>
c002cfa1:	5a                   	pop    edx
c002cfa2:	0f b6 c0             	movzx  eax,al
c002cfa5:	59                   	pop    ecx
c002cfa6:	50                   	push   eax
c002cfa7:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cfac:	99                   	cdq    
c002cfad:	f7 ff                	idiv   edi
c002cfaf:	99                   	cdq    
c002cfb0:	f7 fb                	idiv   ebx
c002cfb2:	8d 42 30             	lea    eax,[edx+0x30]
c002cfb5:	0f b6 c0             	movzx  eax,al
c002cfb8:	50                   	push   eax
c002cfb9:	e8 b2 f0 ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002cfbe:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002cfc4:	5f                   	pop    edi
c002cfc5:	5d                   	pop    ebp
c002cfc6:	6a 0f                	push   0xf
c002cfc8:	6a 00                	push   0x0
c002cfca:	e8 b2 f0 ff ff       	call   c002c081 <combineColours(unsigned char, unsigned char)>
c002cfcf:	5a                   	pop    edx
c002cfd0:	0f b6 c0             	movzx  eax,al
c002cfd3:	59                   	pop    ecx
c002cfd4:	50                   	push   eax
c002cfd5:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cfda:	99                   	cdq    
c002cfdb:	f7 fb                	idiv   ebx
c002cfdd:	99                   	cdq    
c002cfde:	f7 fb                	idiv   ebx
c002cfe0:	8d 42 30             	lea    eax,[edx+0x30]
c002cfe3:	0f b6 c0             	movzx  eax,al
c002cfe6:	50                   	push   eax
c002cfe7:	e8 84 f0 ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002cfec:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002cff2:	5f                   	pop    edi
c002cff3:	5d                   	pop    ebp
c002cff4:	6a 0f                	push   0xf
c002cff6:	6a 00                	push   0x0
c002cff8:	e8 84 f0 ff ff       	call   c002c081 <combineColours(unsigned char, unsigned char)>
c002cffd:	5a                   	pop    edx
c002cffe:	0f b6 c0             	movzx  eax,al
c002d001:	59                   	pop    ecx
c002d002:	50                   	push   eax
c002d003:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d008:	99                   	cdq    
c002d009:	f7 fb                	idiv   ebx
c002d00b:	83 c2 30             	add    edx,0x30
c002d00e:	0f b6 d2             	movzx  edx,dl
c002d011:	52                   	push   edx
c002d012:	e8 59 f0 ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002d017:	83 c4 10             	add    esp,0x10
c002d01a:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002d020:	eb 05                	jmp    c002d027 <SATA::read(unsigned long long, int, void*)+0x245>
c002d022:	be 01 00 00 00       	mov    esi,0x1
c002d027:	83 c4 0c             	add    esp,0xc
c002d02a:	89 f0                	mov    eax,esi
c002d02c:	5b                   	pop    ebx
c002d02d:	5e                   	pop    esi
c002d02e:	5f                   	pop    edi
c002d02f:	5d                   	pop    ebp
c002d030:	c3                   	ret    
c002d031:	90                   	nop

c002d032 <SATA::write(unsigned long long, int, void*)>:
c002d032:	55                   	push   ebp
c002d033:	b8 04 00 00 00       	mov    eax,0x4
c002d038:	57                   	push   edi
c002d039:	56                   	push   esi
c002d03a:	53                   	push   ebx
c002d03b:	83 ec 1c             	sub    esp,0x1c
c002d03e:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002d042:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002d046:	8d 75 ff             	lea    esi,[ebp-0x1]
c002d049:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002d04d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c002d051:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002d057:	0f 87 32 02 00 00    	ja     c002d28f <SATA::write(unsigned long long, int, void*)+0x25d>
c002d05d:	b8 06 00 00 00       	mov    eax,0x6
c002d062:	85 ff                	test   edi,edi
c002d064:	0f 84 25 02 00 00    	je     c002d28f <SATA::write(unsigned long long, int, void*)+0x25d>
c002d06a:	89 ee                	mov    esi,ebp
c002d06c:	c1 e6 09             	shl    esi,0x9
c002d06f:	01 fe                	add    esi,edi
c002d071:	89 c8                	mov    eax,ecx
c002d073:	89 da                	mov    edx,ebx
c002d075:	83 c0 01             	add    eax,0x1
c002d078:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002d07c:	83 d2 00             	adc    edx,0x0
c002d07f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002d083:	50                   	push   eax
c002d084:	50                   	push   eax
c002d085:	6a 01                	push   0x1
c002d087:	57                   	push   edi
c002d088:	81 c7 00 02 00 00    	add    edi,0x200
c002d08e:	6a 01                	push   0x1
c002d090:	53                   	push   ebx
c002d091:	51                   	push   ecx
c002d092:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002d096:	e8 bf fa ff ff       	call   c002cb5a <SATA::access(unsigned long long, int, void*, bool)>
c002d09b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c002d09f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002d0a3:	83 c4 20             	add    esp,0x20
c002d0a6:	39 f7                	cmp    edi,esi
c002d0a8:	75 c7                	jne    c002d071 <SATA::write(unsigned long long, int, void*)+0x3f>
c002d0aa:	bb 0a 00 00 00       	mov    ebx,0xa
c002d0af:	01 2d b0 0b 04 c0    	add    DWORD PTR ds:0xc0040bb0,ebp
c002d0b5:	bd 10 27 00 00       	mov    ebp,0x2710
c002d0ba:	50                   	push   eax
c002d0bb:	50                   	push   eax
c002d0bc:	6a 0f                	push   0xf
c002d0be:	6a 00                	push   0x0
c002d0c0:	e8 bc ef ff ff       	call   c002c081 <combineColours(unsigned char, unsigned char)>
c002d0c5:	5a                   	pop    edx
c002d0c6:	0f b6 c0             	movzx  eax,al
c002d0c9:	59                   	pop    ecx
c002d0ca:	50                   	push   eax
c002d0cb:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d0d0:	99                   	cdq    
c002d0d1:	f7 fd                	idiv   ebp
c002d0d3:	99                   	cdq    
c002d0d4:	f7 fb                	idiv   ebx
c002d0d6:	8d 42 30             	lea    eax,[edx+0x30]
c002d0d9:	0f b6 c0             	movzx  eax,al
c002d0dc:	50                   	push   eax
c002d0dd:	e8 8e ef ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002d0e2:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002d0e8:	5e                   	pop    esi
c002d0e9:	5f                   	pop    edi
c002d0ea:	bf e8 03 00 00       	mov    edi,0x3e8
c002d0ef:	6a 0f                	push   0xf
c002d0f1:	6a 00                	push   0x0
c002d0f3:	e8 89 ef ff ff       	call   c002c081 <combineColours(unsigned char, unsigned char)>
c002d0f8:	5a                   	pop    edx
c002d0f9:	0f b6 c0             	movzx  eax,al
c002d0fc:	59                   	pop    ecx
c002d0fd:	50                   	push   eax
c002d0fe:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d103:	99                   	cdq    
c002d104:	f7 ff                	idiv   edi
c002d106:	99                   	cdq    
c002d107:	f7 fb                	idiv   ebx
c002d109:	8d 42 30             	lea    eax,[edx+0x30]
c002d10c:	0f b6 c0             	movzx  eax,al
c002d10f:	50                   	push   eax
c002d110:	e8 5b ef ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002d115:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002d11b:	5e                   	pop    esi
c002d11c:	be 64 00 00 00       	mov    esi,0x64
c002d121:	58                   	pop    eax
c002d122:	6a 0f                	push   0xf
c002d124:	6a 00                	push   0x0
c002d126:	e8 56 ef ff ff       	call   c002c081 <combineColours(unsigned char, unsigned char)>
c002d12b:	5a                   	pop    edx
c002d12c:	0f b6 c0             	movzx  eax,al
c002d12f:	59                   	pop    ecx
c002d130:	50                   	push   eax
c002d131:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d136:	99                   	cdq    
c002d137:	f7 fe                	idiv   esi
c002d139:	99                   	cdq    
c002d13a:	f7 fb                	idiv   ebx
c002d13c:	8d 42 30             	lea    eax,[edx+0x30]
c002d13f:	0f b6 c0             	movzx  eax,al
c002d142:	50                   	push   eax
c002d143:	e8 28 ef ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002d148:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002d14e:	58                   	pop    eax
c002d14f:	5a                   	pop    edx
c002d150:	6a 0f                	push   0xf
c002d152:	6a 00                	push   0x0
c002d154:	e8 28 ef ff ff       	call   c002c081 <combineColours(unsigned char, unsigned char)>
c002d159:	59                   	pop    ecx
c002d15a:	0f b6 c0             	movzx  eax,al
c002d15d:	5a                   	pop    edx
c002d15e:	50                   	push   eax
c002d15f:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d164:	99                   	cdq    
c002d165:	f7 fb                	idiv   ebx
c002d167:	99                   	cdq    
c002d168:	f7 fb                	idiv   ebx
c002d16a:	8d 42 30             	lea    eax,[edx+0x30]
c002d16d:	0f b6 c0             	movzx  eax,al
c002d170:	50                   	push   eax
c002d171:	e8 fa ee ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002d176:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002d17c:	59                   	pop    ecx
c002d17d:	58                   	pop    eax
c002d17e:	6a 0f                	push   0xf
c002d180:	6a 00                	push   0x0
c002d182:	e8 fa ee ff ff       	call   c002c081 <combineColours(unsigned char, unsigned char)>
c002d187:	5a                   	pop    edx
c002d188:	0f b6 c0             	movzx  eax,al
c002d18b:	59                   	pop    ecx
c002d18c:	50                   	push   eax
c002d18d:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d192:	99                   	cdq    
c002d193:	f7 fb                	idiv   ebx
c002d195:	83 c2 30             	add    edx,0x30
c002d198:	0f b6 d2             	movzx  edx,dl
c002d19b:	52                   	push   edx
c002d19c:	e8 cf ee ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002d1a1:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002d1a7:	58                   	pop    eax
c002d1a8:	5a                   	pop    edx
c002d1a9:	6a 0f                	push   0xf
c002d1ab:	6a 00                	push   0x0
c002d1ad:	e8 cf ee ff ff       	call   c002c081 <combineColours(unsigned char, unsigned char)>
c002d1b2:	59                   	pop    ecx
c002d1b3:	0f b6 c0             	movzx  eax,al
c002d1b6:	5a                   	pop    edx
c002d1b7:	50                   	push   eax
c002d1b8:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d1bd:	99                   	cdq    
c002d1be:	f7 fd                	idiv   ebp
c002d1c0:	99                   	cdq    
c002d1c1:	f7 fb                	idiv   ebx
c002d1c3:	8d 42 30             	lea    eax,[edx+0x30]
c002d1c6:	0f b6 c0             	movzx  eax,al
c002d1c9:	50                   	push   eax
c002d1ca:	e8 a1 ee ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002d1cf:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002d1d5:	59                   	pop    ecx
c002d1d6:	5d                   	pop    ebp
c002d1d7:	6a 0f                	push   0xf
c002d1d9:	6a 00                	push   0x0
c002d1db:	e8 a1 ee ff ff       	call   c002c081 <combineColours(unsigned char, unsigned char)>
c002d1e0:	5a                   	pop    edx
c002d1e1:	0f b6 c0             	movzx  eax,al
c002d1e4:	59                   	pop    ecx
c002d1e5:	50                   	push   eax
c002d1e6:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d1eb:	99                   	cdq    
c002d1ec:	f7 ff                	idiv   edi
c002d1ee:	99                   	cdq    
c002d1ef:	f7 fb                	idiv   ebx
c002d1f1:	8d 42 30             	lea    eax,[edx+0x30]
c002d1f4:	0f b6 c0             	movzx  eax,al
c002d1f7:	50                   	push   eax
c002d1f8:	e8 73 ee ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002d1fd:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002d203:	5f                   	pop    edi
c002d204:	5d                   	pop    ebp
c002d205:	6a 0f                	push   0xf
c002d207:	6a 00                	push   0x0
c002d209:	e8 73 ee ff ff       	call   c002c081 <combineColours(unsigned char, unsigned char)>
c002d20e:	5a                   	pop    edx
c002d20f:	0f b6 c0             	movzx  eax,al
c002d212:	59                   	pop    ecx
c002d213:	50                   	push   eax
c002d214:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d219:	99                   	cdq    
c002d21a:	f7 fe                	idiv   esi
c002d21c:	99                   	cdq    
c002d21d:	f7 fb                	idiv   ebx
c002d21f:	8d 42 30             	lea    eax,[edx+0x30]
c002d222:	0f b6 c0             	movzx  eax,al
c002d225:	50                   	push   eax
c002d226:	e8 45 ee ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002d22b:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002d231:	5e                   	pop    esi
c002d232:	5f                   	pop    edi
c002d233:	6a 0f                	push   0xf
c002d235:	6a 00                	push   0x0
c002d237:	e8 45 ee ff ff       	call   c002c081 <combineColours(unsigned char, unsigned char)>
c002d23c:	5d                   	pop    ebp
c002d23d:	0f b6 c0             	movzx  eax,al
c002d240:	5a                   	pop    edx
c002d241:	50                   	push   eax
c002d242:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d247:	99                   	cdq    
c002d248:	f7 fb                	idiv   ebx
c002d24a:	99                   	cdq    
c002d24b:	f7 fb                	idiv   ebx
c002d24d:	8d 42 30             	lea    eax,[edx+0x30]
c002d250:	0f b6 c0             	movzx  eax,al
c002d253:	50                   	push   eax
c002d254:	e8 17 ee ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002d259:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002d25f:	59                   	pop    ecx
c002d260:	5e                   	pop    esi
c002d261:	6a 0f                	push   0xf
c002d263:	6a 00                	push   0x0
c002d265:	e8 17 ee ff ff       	call   c002c081 <combineColours(unsigned char, unsigned char)>
c002d26a:	5f                   	pop    edi
c002d26b:	0f b6 c0             	movzx  eax,al
c002d26e:	5d                   	pop    ebp
c002d26f:	50                   	push   eax
c002d270:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d275:	99                   	cdq    
c002d276:	f7 fb                	idiv   ebx
c002d278:	83 c2 30             	add    edx,0x30
c002d27b:	0f b6 d2             	movzx  edx,dl
c002d27e:	52                   	push   edx
c002d27f:	e8 ec ed ff ff       	call   c002c070 <combineCharAndColour(char, unsigned char)>
c002d284:	83 c4 10             	add    esp,0x10
c002d287:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002d28d:	31 c0                	xor    eax,eax
c002d28f:	83 c4 1c             	add    esp,0x1c
c002d292:	5b                   	pop    ebx
c002d293:	5e                   	pop    esi
c002d294:	5f                   	pop    edi
c002d295:	5d                   	pop    ebp
c002d296:	c3                   	ret    
c002d297:	90                   	nop

c002d298 <SATAPI::write(unsigned long long, int, void*)>:
c002d298:	b8 03 00 00 00       	mov    eax,0x3
c002d29d:	c3                   	ret    

c002d29e <SATAPI::close(int, int, void*)>:
c002d29e:	83 ec 0c             	sub    esp,0xc
c002d2a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d2a5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002d2ab:	85 c0                	test   eax,eax
c002d2ad:	74 0c                	je     c002d2bb <SATAPI::close(int, int, void*)+0x1d>
c002d2af:	83 ec 0c             	sub    esp,0xc
c002d2b2:	8b 10                	mov    edx,DWORD PTR [eax]
c002d2b4:	50                   	push   eax
c002d2b5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002d2b8:	83 c4 10             	add    esp,0x10
c002d2bb:	31 c0                	xor    eax,eax
c002d2bd:	83 c4 0c             	add    esp,0xc
c002d2c0:	c3                   	ret    
c002d2c1:	90                   	nop

c002d2c2 <SATAPI::SATAPI()>:
c002d2c2:	83 ec 0c             	sub    esp,0xc
c002d2c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d2c9:	83 ec 04             	sub    esp,0x4
c002d2cc:	68 00 08 00 00       	push   0x800
c002d2d1:	68 84 39 03 c0       	push   0xc0033984
c002d2d6:	50                   	push   eax
c002d2d7:	e8 d6 e3 fe ff       	call   c001b6b2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002d2dc:	83 c4 10             	add    esp,0x10
c002d2df:	ba 78 3a 03 c0       	mov    edx,0xc0033a78
c002d2e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d2e8:	89 10                	mov    DWORD PTR [eax],edx
c002d2ea:	90                   	nop
c002d2eb:	83 c4 0c             	add    esp,0xc
c002d2ee:	c3                   	ret    
c002d2ef:	90                   	nop

c002d2f0 <SATAPI::diskRemoved()>:
c002d2f0:	c3                   	ret    
c002d2f1:	90                   	nop

c002d2f2 <SATAPI::diskInserted()>:
c002d2f2:	83 ec 18             	sub    esp,0x18
c002d2f5:	68 90 39 03 c0       	push   0xc0033990
c002d2fa:	e8 4e bf fe ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c002d2ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d303:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c002d30a:	83 c4 1c             	add    esp,0x1c
c002d30d:	c3                   	ret    

c002d30e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002d30e:	55                   	push   ebp
c002d30f:	57                   	push   edi
c002d310:	56                   	push   esi
c002d311:	53                   	push   ebx
c002d312:	83 ec 34             	sub    esp,0x34
c002d315:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002d319:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002d31d:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c002d321:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002d325:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002d329:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002d32f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002d335:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002d339:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c002d33f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002d343:	83 c0 02             	add    eax,0x2
c002d346:	c1 e0 07             	shl    eax,0x7
c002d349:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002d34d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002d351:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d355:	c1 e0 07             	shl    eax,0x7
c002d358:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002d35c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002d360:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002d36a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d36e:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d374:	e8 cb e4 ff ff       	call   c002b844 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002d379:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002d37d:	83 c4 10             	add    esp,0x10
c002d380:	b8 01 00 00 00       	mov    eax,0x1
c002d385:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002d38a:	0f 84 53 02 00 00    	je     c002d5e3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c002d390:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002d396:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002d39a:	8b 00                	mov    eax,DWORD PTR [eax]
c002d39c:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002d3a2:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002d3a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002d3ac:	c1 e1 05             	shl    ecx,0x5
c002d3af:	01 c8                	add    eax,ecx
c002d3b1:	8b 08                	mov    ecx,DWORD PTR [eax]
c002d3b3:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002d3b9:	81 c9 25 00 01 00    	or     ecx,0x10025
c002d3bf:	89 08                	mov    DWORD PTR [eax],ecx
c002d3c1:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002d3c7:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002d3cd:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002d3d3:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002d3d6:	8d 7b 40             	lea    edi,[ebx+0x40]
c002d3d9:	50                   	push   eax
c002d3da:	68 90 00 00 00       	push   0x90
c002d3df:	6a 00                	push   0x0
c002d3e1:	53                   	push   ebx
c002d3e2:	e8 09 31 fd ff       	call   c00004f0 <memset>
c002d3e7:	b9 0c 00 00 00       	mov    ecx,0xc
c002d3ec:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c002d3f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d3f2:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c002d3f8:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002d3fc:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002d402:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002d406:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002d40a:	48                   	dec    eax
c002d40b:	25 ff ff 3f 00       	and    eax,0x3fffff
c002d410:	89 c1                	mov    ecx,eax
c002d412:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002d418:	25 00 00 c0 ff       	and    eax,0xffc00000
c002d41d:	09 c8                	or     eax,ecx
c002d41f:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002d425:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c002d42b:	83 c8 80             	or     eax,0xffffff80
c002d42e:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c002d434:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002d437:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002d43b:	25 00 7f 00 00       	and    eax,0x7f00
c002d440:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c002d444:	0d 27 80 ff ff       	or     eax,0xffff8027
c002d449:	66 89 03             	mov    WORD PTR [ebx],ax
c002d44c:	89 d0                	mov    eax,edx
c002d44e:	c1 ea 18             	shr    edx,0x18
c002d451:	c1 e8 10             	shr    eax,0x10
c002d454:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c002d457:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002d45a:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002d45e:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002d461:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002d465:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002d468:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002d46c:	83 c4 10             	add    esp,0x10
c002d46f:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002d473:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002d477:	31 c0                	xor    eax,eax
c002d479:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002d47f:	80 e1 88             	and    cl,0x88
c002d482:	74 0a                	je     c002d48e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c002d484:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d489:	74 0a                	je     c002d495 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c002d48b:	40                   	inc    eax
c002d48c:	eb eb                	jmp    c002d479 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c002d48e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d493:	75 43                	jne    c002d4d8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c002d495:	83 ec 0c             	sub    esp,0xc
c002d498:	68 a8 39 03 c0       	push   0xc00339a8
c002d49d:	e8 ab bd fe ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c002d4a2:	58                   	pop    eax
c002d4a3:	5a                   	pop    edx
c002d4a4:	68 bd 39 03 c0       	push   0xc00339bd
c002d4a9:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002d4af:	e8 fa 9e fe ff       	call   c00173ae <VgaText::puts(char const*)>
c002d4b4:	59                   	pop    ecx
c002d4b5:	5b                   	pop    ebx
c002d4b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d4ba:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d4c0:	e8 19 e4 ff ff       	call   c002b8de <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002d4c5:	5e                   	pop    esi
c002d4c6:	5f                   	pop    edi
c002d4c7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d4cb:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d4d1:	e8 e8 e3 ff ff       	call   c002b8be <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002d4d6:	eb 48                	jmp    c002d520 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c002d4d8:	be 01 00 00 00       	mov    esi,0x1
c002d4dd:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002d4e1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002d4e5:	d3 e6                	shl    esi,cl
c002d4e7:	c1 e7 07             	shl    edi,0x7
c002d4ea:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c002d4f0:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c002d4f5:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c002d4f9:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c002d4ff:	85 c6                	test   esi,eax
c002d501:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c002d507:	0f 84 a3 00 00 00    	je     c002d5b0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c002d50d:	0f ba e0 1e          	bt     eax,0x1e
c002d511:	73 1a                	jae    c002d52d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c002d513:	83 ec 0c             	sub    esp,0xc
c002d516:	68 cf 39 03 c0       	push   0xc00339cf
c002d51b:	e8 2d bd fe ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c002d520:	83 c4 10             	add    esp,0x10
c002d523:	b8 01 00 00 00       	mov    eax,0x1
c002d528:	e9 b6 00 00 00       	jmp    c002d5e3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c002d52d:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c002d533:	83 f8 0d             	cmp    eax,0xd
c002d536:	77 0a                	ja     c002d542 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c002d538:	83 ec 0c             	sub    esp,0xc
c002d53b:	68 c8 00 00 00       	push   0xc8
c002d540:	eb 28                	jmp    c002d56a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c002d542:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c002d548:	83 f8 0d             	cmp    eax,0xd
c002d54b:	77 0a                	ja     c002d557 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c002d54d:	83 ec 0c             	sub    esp,0xc
c002d550:	68 58 02 00 00       	push   0x258
c002d555:	eb 13                	jmp    c002d56a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c002d557:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c002d55d:	83 f8 06             	cmp    eax,0x6
c002d560:	77 10                	ja     c002d572 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c002d562:	83 ec 0c             	sub    esp,0xc
c002d565:	68 dc 05 00 00       	push   0x5dc
c002d56a:	e8 c5 7e ff ff       	call   c0025434 <milliTenthSleep(unsigned int)>
c002d56f:	83 c4 10             	add    esp,0x10
c002d572:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002d576:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c002d579:	75 06                	jne    c002d581 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c002d57b:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c002d57f:	74 15                	je     c002d596 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c002d581:	83 fb 06             	cmp    ebx,0x6
c002d584:	77 10                	ja     c002d596 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c002d586:	83 ec 0c             	sub    esp,0xc
c002d589:	68 c4 09 00 00       	push   0x9c4
c002d58e:	e8 a1 7e ff ff       	call   c0025434 <milliTenthSleep(unsigned int)>
c002d593:	83 c4 10             	add    esp,0x10
c002d596:	43                   	inc    ebx
c002d597:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c002d59d:	0f 85 56 ff ff ff    	jne    c002d4f9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c002d5a3:	83 ec 0c             	sub    esp,0xc
c002d5a6:	68 e2 39 03 c0       	push   0xc00339e2
c002d5ab:	e9 6b ff ff ff       	jmp    c002d51b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c002d5b0:	0f ba e0 1e          	bt     eax,0x1e
c002d5b4:	73 0d                	jae    c002d5c3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c002d5b6:	83 ec 0c             	sub    esp,0xc
c002d5b9:	68 f6 39 03 c0       	push   0xc00339f6
c002d5be:	e9 58 ff ff ff       	jmp    c002d51b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c002d5c3:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c002d5c8:	74 17                	je     c002d5e1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c002d5ca:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c002d5cf:	74 10                	je     c002d5e1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c002d5d1:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c002d5d7:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002d5db:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c002d5df:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d5e1:	31 c0                	xor    eax,eax
c002d5e3:	83 c4 2c             	add    esp,0x2c
c002d5e6:	5b                   	pop    ebx
c002d5e7:	5e                   	pop    esi
c002d5e8:	5f                   	pop    edi
c002d5e9:	5d                   	pop    ebp
c002d5ea:	c3                   	ret    
c002d5eb:	90                   	nop

c002d5ec <SATAPI::eject()>:
c002d5ec:	57                   	push   edi
c002d5ed:	b9 03 00 00 00       	mov    ecx,0x3
c002d5f2:	83 ec 18             	sub    esp,0x18
c002d5f5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002d5f9:	fc                   	cld    
c002d5fa:	31 c0                	xor    eax,eax
c002d5fc:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d5fe:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002d603:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002d608:	50                   	push   eax
c002d609:	6a 00                	push   0x0
c002d60b:	6a 00                	push   0x0
c002d60d:	6a 00                	push   0x0
c002d60f:	6a 00                	push   0x0
c002d611:	6a 02                	push   0x2
c002d613:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002d617:	50                   	push   eax
c002d618:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002d61c:	e8 ed fc ff ff       	call   c002d30e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d621:	31 c0                	xor    eax,eax
c002d623:	83 c4 38             	add    esp,0x38
c002d626:	5f                   	pop    edi
c002d627:	c3                   	ret    

c002d628 <SATAPI::detectMedia()>:
c002d628:	53                   	push   ebx
c002d629:	83 ec 14             	sub    esp,0x14
c002d62c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002d630:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002d636:	e8 e9 f9 fe ff       	call   c001d024 <VCache::writeWriteBuffer()>
c002d63b:	59                   	pop    ecx
c002d63c:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002d642:	e8 cd f9 fe ff       	call   c001d014 <VCache::invalidateReadBuffer()>
c002d647:	c7 04 24 0b 3a 03 c0 	mov    DWORD PTR [esp],0xc0033a0b
c002d64e:	e8 fa bb fe ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c002d653:	83 c4 10             	add    esp,0x10
c002d656:	31 c0                	xor    eax,eax
c002d658:	8b 14 85 80 f3 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc0c80]
c002d65f:	85 d2                	test   edx,edx
c002d661:	74 0f                	je     c002d672 <SATAPI::detectMedia()+0x4a>
c002d663:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c002d669:	75 07                	jne    c002d672 <SATAPI::detectMedia()+0x4a>
c002d66b:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c002d672:	40                   	inc    eax
c002d673:	83 f8 1a             	cmp    eax,0x1a
c002d676:	75 e0                	jne    c002d658 <SATAPI::detectMedia()+0x30>
c002d678:	83 c4 08             	add    esp,0x8
c002d67b:	5b                   	pop    ebx
c002d67c:	c3                   	ret    
c002d67d:	90                   	nop

c002d67e <SATAPI::open(int, int, void*)>:
c002d67e:	56                   	push   esi
c002d67f:	53                   	push   ebx
c002d680:	51                   	push   ecx
c002d681:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002d685:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002d689:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002d693:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002d699:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002d6a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d6a7:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002d6b1:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002d6b7:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002d6be:	e8 04 90 fe ff       	call   c00166c7 <Phys::allocatePage()>
c002d6c3:	89 c6                	mov    esi,eax
c002d6c5:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002d6cb:	81 c6 00 10 00 00    	add    esi,0x1000
c002d6d1:	e8 f1 8f fe ff       	call   c00166c7 <Phys::allocatePage()>
c002d6d6:	39 c6                	cmp    esi,eax
c002d6d8:	74 10                	je     c002d6ea <SATAPI::open(int, int, void*)+0x6c>
c002d6da:	83 ec 0c             	sub    esp,0xc
c002d6dd:	68 20 3a 03 c0       	push   0xc0033a20
c002d6e2:	e8 7f 2b ff ff       	call   c0020266 <KePanic(char const*)>
c002d6e7:	83 c4 10             	add    esp,0x10
c002d6ea:	83 ec 0c             	sub    esp,0xc
c002d6ed:	6a 02                	push   0x2
c002d6ef:	e8 21 a8 fe ff       	call   c0017f15 <Virt::allocateKernelVirtualPages(int)>
c002d6f4:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c002d6fa:	6a 03                	push   0x3
c002d6fc:	50                   	push   eax
c002d6fd:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002d703:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002d709:	e8 1a af fe ff       	call   c0018628 <VAS::mapPage(unsigned long, unsigned long, int)>
c002d70e:	83 c4 14             	add    esp,0x14
c002d711:	68 78 01 00 00       	push   0x178
c002d716:	e8 a3 8c fe ff       	call   c00163be <malloc>
c002d71b:	83 c4 0c             	add    esp,0xc
c002d71e:	89 c6                	mov    esi,eax
c002d720:	6a 00                	push   0x0
c002d722:	68 ff ff ff 7f       	push   0x7fffffff
c002d727:	6a 00                	push   0x0
c002d729:	6a 00                	push   0x0
c002d72b:	53                   	push   ebx
c002d72c:	68 36 3a 03 c0       	push   0xc0033a36
c002d731:	50                   	push   eax
c002d732:	e8 4d ed fe ff       	call   c001c484 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002d737:	83 c4 14             	add    esp,0x14
c002d73a:	56                   	push   esi
c002d73b:	e8 04 ee fe ff       	call   c001c544 <LogicalDisk::assignDriveLetter()>
c002d740:	5a                   	pop    edx
c002d741:	0f be c0             	movsx  eax,al
c002d744:	59                   	pop    ecx
c002d745:	50                   	push   eax
c002d746:	68 7c 38 03 c0       	push   0xc003387c
c002d74b:	e8 fd ba fe ff       	call   c001924d <Dbg::kprintf(char const*, ...)>
c002d750:	58                   	pop    eax
c002d751:	5a                   	pop    edx
c002d752:	56                   	push   esi
c002d753:	53                   	push   ebx
c002d754:	e8 75 db fe ff       	call   c001b2ce <Device::addChild(Device*)>
c002d759:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c002d75f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d762:	e8 b3 df fe ff       	call   c001b71a <PhysicalDisk::startCache()>
c002d767:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002d76e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d771:	e8 b2 fe ff ff       	call   c002d628 <SATAPI::detectMedia()>
c002d776:	83 c4 14             	add    esp,0x14
c002d779:	31 c0                	xor    eax,eax
c002d77b:	5b                   	pop    ebx
c002d77c:	5e                   	pop    esi
c002d77d:	c3                   	ret    

c002d77e <SATAPI::read(unsigned long long, int, void*)>:
c002d77e:	57                   	push   edi
c002d77f:	56                   	push   esi
c002d780:	53                   	push   ebx
c002d781:	83 ec 30             	sub    esp,0x30
c002d784:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002d788:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c002d78c:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c002d790:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002d794:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002d798:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002d79c:	83 fe 04             	cmp    esi,0x4
c002d79f:	7e 10                	jle    c002d7b1 <SATAPI::read(unsigned long long, int, void*)+0x33>
c002d7a1:	83 ec 0c             	sub    esp,0xc
c002d7a4:	68 44 3a 03 c0       	push   0xc0033a44
c002d7a9:	e8 b8 2a ff ff       	call   c0020266 <KePanic(char const*)>
c002d7ae:	83 c4 10             	add    esp,0x10
c002d7b1:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002d7b7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002d7bd:	51                   	push   ecx
c002d7be:	50                   	push   eax
c002d7bf:	83 c0 02             	add    eax,0x2
c002d7c2:	c1 e0 07             	shl    eax,0x7
c002d7c5:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c002d7cb:	50                   	push   eax
c002d7cc:	52                   	push   edx
c002d7cd:	e8 36 e1 ff ff       	call   c002b908 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002d7d2:	8d 7c 24 28          	lea    edi,[esp+0x28]
c002d7d6:	b9 03 00 00 00       	mov    ecx,0x3
c002d7db:	fc                   	cld    
c002d7dc:	31 c0                	xor    eax,eax
c002d7de:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d7e0:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c002d7e5:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c002d7ea:	83 c4 0c             	add    esp,0xc
c002d7ed:	6a 00                	push   0x0
c002d7ef:	6a 00                	push   0x0
c002d7f1:	6a 00                	push   0x0
c002d7f3:	6a 00                	push   0x0
c002d7f5:	6a 02                	push   0x2
c002d7f7:	8d 44 24 30          	lea    eax,[esp+0x30]
c002d7fb:	50                   	push   eax
c002d7fc:	53                   	push   ebx
c002d7fd:	e8 0c fb ff ff       	call   c002d30e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d802:	83 c4 20             	add    esp,0x20
c002d805:	85 c0                	test   eax,eax
c002d807:	75 44                	jne    c002d84d <SATAPI::read(unsigned long long, int, void*)+0xcf>
c002d809:	8d 7c 24 24          	lea    edi,[esp+0x24]
c002d80d:	b9 03 00 00 00       	mov    ecx,0x3
c002d812:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d814:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002d818:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c002d81d:	0f c8                	bswap  eax
c002d81f:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c002d823:	89 f0                	mov    eax,esi
c002d825:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002d829:	50                   	push   eax
c002d82a:	56                   	push   esi
c002d82b:	c1 e6 0b             	shl    esi,0xb
c002d82e:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002d832:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002d836:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002d83a:	56                   	push   esi
c002d83b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c002d83f:	50                   	push   eax
c002d840:	53                   	push   ebx
c002d841:	e8 c8 fa ff ff       	call   c002d30e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d846:	83 c4 20             	add    esp,0x20
c002d849:	85 c0                	test   eax,eax
c002d84b:	74 14                	je     c002d861 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c002d84d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002d851:	83 ec 0c             	sub    esp,0xc
c002d854:	53                   	push   ebx
c002d855:	e8 ce fd ff ff       	call   c002d628 <SATAPI::detectMedia()>
c002d85a:	83 c4 10             	add    esp,0x10
c002d85d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002d861:	83 c4 30             	add    esp,0x30
c002d864:	5b                   	pop    ebx
c002d865:	5e                   	pop    esi
c002d866:	5f                   	pop    edi
c002d867:	c3                   	ret    

c002d868 <IOAPIC::close(int, int, void*)>:
c002d868:	b8 00 00 00 00       	mov    eax,0x0
c002d86d:	c3                   	ret    

c002d86e <apicGetBase()>:
c002d86e:	55                   	push   ebp
c002d86f:	89 e5                	mov    ebp,esp
c002d871:	83 ec 18             	sub    esp,0x18
c002d874:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002d879:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c002d87f:	83 e0 08             	and    eax,0x8
c002d882:	0f b6 c0             	movzx  eax,al
c002d885:	85 c0                	test   eax,eax
c002d887:	75 07                	jne    c002d890 <apicGetBase()+0x22>
c002d889:	b8 00 00 00 00       	mov    eax,0x0
c002d88e:	eb 21                	jmp    c002d8b1 <apicGetBase()+0x43>
c002d890:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002d895:	83 ec 08             	sub    esp,0x8
c002d898:	6a 1b                	push   0x1b
c002d89a:	50                   	push   eax
c002d89b:	e8 28 81 fe ff       	call   c00159c8 <Computer::rdmsr(unsigned int)>
c002d8a0:	83 c4 10             	add    esp,0x10
c002d8a3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002d8a6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002d8a9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d8ac:	25 00 00 ff ff       	and    eax,0xffff0000
c002d8b1:	c9                   	leave  
c002d8b2:	c3                   	ret    
c002d8b3:	90                   	nop

c002d8b4 <IOAPIC::IOAPIC()>:
c002d8b4:	83 ec 0c             	sub    esp,0xc
c002d8b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d8bb:	83 ec 08             	sub    esp,0x8
c002d8be:	68 a8 3a 03 c0       	push   0xc0033aa8
c002d8c3:	50                   	push   eax
c002d8c4:	e8 67 db fe ff       	call   c001b430 <Device::Device(char const*)>
c002d8c9:	83 c4 10             	add    esp,0x10
c002d8cc:	ba b8 3a 03 c0       	mov    edx,0xc0033ab8
c002d8d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d8d5:	89 10                	mov    DWORD PTR [eax],edx
c002d8d7:	90                   	nop
c002d8d8:	83 c4 0c             	add    esp,0xc
c002d8db:	c3                   	ret    

c002d8dc <apicOpen()>:
c002d8dc:	55                   	push   ebp
c002d8dd:	89 e5                	mov    ebp,esp
c002d8df:	53                   	push   ebx
c002d8e0:	83 ec 34             	sub    esp,0x34
c002d8e3:	a0 00 0c 04 c0       	mov    al,ds:0xc0040c00
c002d8e8:	83 f0 01             	xor    eax,0x1
c002d8eb:	0f b6 c0             	movzx  eax,al
c002d8ee:	85 c0                	test   eax,eax
c002d8f0:	0f 84 a3 00 00 00    	je     c002d999 <apicOpen()+0xbd>
c002d8f6:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c002d8fa:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c002d8ff:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002d903:	0f b6 c0             	movzx  eax,al
c002d906:	39 c2                	cmp    edx,eax
c002d908:	0f 83 84 00 00 00    	jae    c002d992 <apicOpen()+0xb6>
c002d90e:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c002d915:	83 ec 0c             	sub    esp,0xc
c002d918:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002d91b:	e8 9e 8a fe ff       	call   c00163be <malloc>
c002d920:	83 c4 10             	add    esp,0x10
c002d923:	89 c3                	mov    ebx,eax
c002d925:	83 ec 0c             	sub    esp,0xc
c002d928:	53                   	push   ebx
c002d929:	e8 86 ff ff ff       	call   c002d8b4 <IOAPIC::IOAPIC()>
c002d92e:	83 c4 10             	add    esp,0x10
c002d931:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002d934:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c002d938:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002d93b:	89 14 85 e0 0b 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf420],edx
c002d942:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c002d947:	83 c0 01             	add    eax,0x1
c002d94a:	a3 c0 0b 04 c0       	mov    ds:0xc0040bc0,eax
c002d94f:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002d954:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c002d95a:	83 ec 08             	sub    esp,0x8
c002d95d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002d960:	50                   	push   eax
c002d961:	e8 68 d9 fe ff       	call   c001b2ce <Device::addChild(Device*)>
c002d966:	83 c4 10             	add    esp,0x10
c002d969:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002d96c:	8b 00                	mov    eax,DWORD PTR [eax]
c002d96e:	83 c0 08             	add    eax,0x8
c002d971:	8b 00                	mov    eax,DWORD PTR [eax]
c002d973:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002d977:	6a 00                	push   0x0
c002d979:	6a 00                	push   0x0
c002d97b:	52                   	push   edx
c002d97c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002d97f:	ff d0                	call   eax
c002d981:	83 c4 10             	add    esp,0x10
c002d984:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c002d987:	83 c0 01             	add    eax,0x1
c002d98a:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c002d98d:	e9 68 ff ff ff       	jmp    c002d8fa <apicOpen()+0x1e>
c002d992:	c6 05 00 0c 04 c0 01 	mov    BYTE PTR ds:0xc0040c00,0x1
c002d999:	e8 d0 fe ff ff       	call   c002d86e <apicGetBase()>
c002d99e:	05 f0 00 00 00       	add    eax,0xf0
c002d9a3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002d9a6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002d9a9:	8b 00                	mov    eax,DWORD PTR [eax]
c002d9ab:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002d9ae:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c002d9b5:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c002d9bc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002d9bf:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002d9c2:	89 10                	mov    DWORD PTR [eax],edx
c002d9c4:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c002d9cb:	a1 30 f6 03 c0       	mov    eax,ds:0xc003f630
c002d9d0:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c002d9d3:	7d 7c                	jge    c002da51 <apicOpen()+0x175>
c002d9d5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d9d8:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002d9df:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c002d9e2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d9e5:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002d9ec:	c1 e8 08             	shr    eax,0x8
c002d9ef:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c002d9f3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d9f6:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002d9fd:	c1 e8 18             	shr    eax,0x18
c002da00:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c002da03:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c002da07:	3d ff 00 00 00       	cmp    eax,0xff
c002da0c:	75 3a                	jne    c002da48 <apicOpen()+0x16c>
c002da0e:	e8 5b fe ff ff       	call   c002d86e <apicGetBase()>
c002da13:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c002da17:	83 fa 01             	cmp    edx,0x1
c002da1a:	75 07                	jne    c002da23 <apicOpen()+0x147>
c002da1c:	ba 60 03 00 00       	mov    edx,0x360
c002da21:	eb 05                	jmp    c002da28 <apicOpen()+0x14c>
c002da23:	ba 50 03 00 00       	mov    edx,0x350
c002da28:	01 d0                	add    eax,edx
c002da2a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002da2d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002da30:	8b 00                	mov    eax,DWORD PTR [eax]
c002da32:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002da35:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c002da3c:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c002da40:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002da43:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002da46:	89 10                	mov    DWORD PTR [eax],edx
c002da48:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c002da4c:	e9 7a ff ff ff       	jmp    c002d9cb <apicOpen()+0xef>
c002da51:	90                   	nop
c002da52:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002da55:	c9                   	leave  
c002da56:	c3                   	ret    
c002da57:	90                   	nop

c002da58 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002da58:	55                   	push   ebp
c002da59:	89 e5                	mov    ebp,esp
c002da5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da5e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002da64:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002da67:	72 1d                	jb     c002da86 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002da69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da6c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002da72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da75:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002da7b:	01 d0                	add    eax,edx
c002da7d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002da80:	73 04                	jae    c002da86 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002da82:	b0 01                	mov    al,0x1
c002da84:	eb 02                	jmp    c002da88 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002da86:	b0 00                	mov    al,0x0
c002da88:	5d                   	pop    ebp
c002da89:	c3                   	ret    

c002da8a <IOAPIC::read(int)>:
c002da8a:	55                   	push   ebp
c002da8b:	89 e5                	mov    ebp,esp
c002da8d:	83 ec 10             	sub    esp,0x10
c002da90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da93:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002da99:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002da9c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002da9f:	0f b6 d0             	movzx  edx,al
c002daa2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002daa5:	89 10                	mov    DWORD PTR [eax],edx
c002daa7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002daaa:	83 c0 10             	add    eax,0x10
c002daad:	8b 00                	mov    eax,DWORD PTR [eax]
c002daaf:	c9                   	leave  
c002dab0:	c3                   	ret    
c002dab1:	90                   	nop

c002dab2 <IOAPIC::open(int, int, void*)>:
c002dab2:	55                   	push   ebp
c002dab3:	89 e5                	mov    ebp,esp
c002dab5:	57                   	push   edi
c002dab6:	56                   	push   esi
c002dab7:	53                   	push   ebx
c002dab8:	83 ec 04             	sub    esp,0x4
c002dabb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dabe:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002dac1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002dac7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002daca:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002dad0:	8b 14 85 20 f7 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc08e0]
c002dad7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dada:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002dae0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dae3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002dae9:	8b 14 85 a0 f7 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc0860]
c002daf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002daf3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002daf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dafc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002db02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db05:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002db0b:	0f b6 f0             	movzx  esi,al
c002db0e:	89 d0                	mov    eax,edx
c002db10:	ba 00 00 00 00       	mov    edx,0x0
c002db15:	89 c7                	mov    edi,eax
c002db17:	83 e7 ff             	and    edi,0xffffffff
c002db1a:	89 f9                	mov    ecx,edi
c002db1c:	0f b6 da             	movzx  ebx,dl
c002db1f:	89 c8                	mov    eax,ecx
c002db21:	89 da                	mov    edx,ebx
c002db23:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002db26:	8d 5e 08             	lea    ebx,[esi+0x8]
c002db29:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002db2d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002db31:	83 e0 00             	and    eax,0x0
c002db34:	09 d0                	or     eax,edx
c002db36:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002db3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db3d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002db43:	8d 50 01             	lea    edx,[eax+0x1]
c002db46:	88 d1                	mov    cl,dl
c002db48:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002db4b:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c002db51:	0f b6 d0             	movzx  edx,al
c002db54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db57:	83 c2 08             	add    edx,0x8
c002db5a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002db5e:	0f b6 c9             	movzx  ecx,cl
c002db61:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002db67:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002db6b:	6a 01                	push   0x1
c002db6d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002db70:	e8 15 ff ff ff       	call   c002da8a <IOAPIC::read(int)>
c002db75:	83 c4 08             	add    esp,0x8
c002db78:	c1 f8 10             	sar    eax,0x10
c002db7b:	0f b6 c0             	movzx  eax,al
c002db7e:	8d 50 01             	lea    edx,[eax+0x1]
c002db81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db84:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002db8a:	b8 00 00 00 00       	mov    eax,0x0
c002db8f:	8d 65 f4             	lea    esp,[ebp-0xc]
c002db92:	5b                   	pop    ebx
c002db93:	5e                   	pop    esi
c002db94:	5f                   	pop    edi
c002db95:	5d                   	pop    ebp
c002db96:	c3                   	ret    
c002db97:	90                   	nop

c002db98 <IOAPIC::write(int, int)>:
c002db98:	55                   	push   ebp
c002db99:	89 e5                	mov    ebp,esp
c002db9b:	83 ec 10             	sub    esp,0x10
c002db9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dba1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002dba7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002dbaa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002dbad:	0f b6 d0             	movzx  edx,al
c002dbb0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002dbb3:	89 10                	mov    DWORD PTR [eax],edx
c002dbb5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002dbb8:	8d 50 10             	lea    edx,[eax+0x10]
c002dbbb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002dbbe:	89 02                	mov    DWORD PTR [edx],eax
c002dbc0:	90                   	nop
c002dbc1:	c9                   	leave  
c002dbc2:	c3                   	ret    
c002dbc3:	90                   	nop

c002dbc4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002dbc4:	55                   	push   ebp
c002dbc5:	89 e5                	mov    ebp,esp
c002dbc7:	53                   	push   ebx
c002dbc8:	83 ec 2c             	sub    esp,0x2c
c002dbcb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002dbce:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002dbd1:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002dbd4:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002dbd7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002dbda:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002dbdd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002dbe0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002dbe3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002dbe6:	88 d8                	mov    al,bl
c002dbe8:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002dbeb:	88 c8                	mov    al,cl
c002dbed:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002dbf0:	88 d0                	mov    al,dl
c002dbf2:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002dbf5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002dbf9:	83 c0 08             	add    eax,0x8
c002dbfc:	01 c0                	add    eax,eax
c002dbfe:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002dc01:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002dc05:	83 c0 08             	add    eax,0x8
c002dc08:	01 c0                	add    eax,eax
c002dc0a:	83 c0 01             	add    eax,0x1
c002dc0d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002dc10:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002dc13:	50                   	push   eax
c002dc14:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dc17:	e8 6e fe ff ff       	call   c002da8a <IOAPIC::read(int)>
c002dc1c:	83 c4 08             	add    esp,0x8
c002dc1f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002dc22:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002dc29:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002dc2c:	c1 e0 18             	shl    eax,0x18
c002dc2f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002dc32:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002dc35:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002dc38:	52                   	push   edx
c002dc39:	50                   	push   eax
c002dc3a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dc3d:	e8 56 ff ff ff       	call   c002db98 <IOAPIC::write(int, int)>
c002dc42:	83 c4 0c             	add    esp,0xc
c002dc45:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dc48:	50                   	push   eax
c002dc49:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dc4c:	e8 39 fe ff ff       	call   c002da8a <IOAPIC::read(int)>
c002dc51:	83 c4 08             	add    esp,0x8
c002dc54:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002dc57:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002dc5e:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002dc65:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002dc6c:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c002dc70:	85 c0                	test   eax,eax
c002dc72:	74 09                	je     c002dc7d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c002dc74:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002dc7b:	eb 07                	jmp    c002dc84 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c002dc7d:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002dc84:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c002dc88:	85 c0                	test   eax,eax
c002dc8a:	74 09                	je     c002dc95 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c002dc8c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002dc93:	eb 07                	jmp    c002dc9c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c002dc95:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002dc9c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002dca3:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002dca7:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002dcaa:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002dcad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dcb0:	52                   	push   edx
c002dcb1:	50                   	push   eax
c002dcb2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dcb5:	e8 de fe ff ff       	call   c002db98 <IOAPIC::write(int, int)>
c002dcba:	83 c4 0c             	add    esp,0xc
c002dcbd:	90                   	nop
c002dcbe:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002dcc1:	c9                   	leave  
c002dcc2:	c3                   	ret    
c002dcc3:	90                   	nop

c002dcc4 <APICTimer::close(int, int, void*)>:
c002dcc4:	b8 00 00 00 00       	mov    eax,0x0
c002dcc9:	c3                   	ret    
c002dcca:	66 90                	xchg   ax,ax

c002dccc <apicTimerHandler(regs*, void*)>:
c002dccc:	83 ec 0c             	sub    esp,0xc
c002dccf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002dcd3:	8b 08                	mov    ecx,DWORD PTR [eax]
c002dcd5:	b8 10 27 00 00       	mov    eax,0x2710
c002dcda:	ba 00 00 00 00       	mov    edx,0x0
c002dcdf:	f7 f1                	div    ecx
c002dce1:	83 ec 0c             	sub    esp,0xc
c002dce4:	50                   	push   eax
c002dce5:	e8 56 f0 fe ff       	call   c001cd40 <timerHandler(unsigned int)>
c002dcea:	83 c4 10             	add    esp,0x10
c002dced:	90                   	nop
c002dcee:	83 c4 0c             	add    esp,0xc
c002dcf1:	c3                   	ret    
c002dcf2:	66 90                	xchg   ax,ax

c002dcf4 <APICTimer::open(int, int, void*)>:
c002dcf4:	83 ec 0c             	sub    esp,0xc
c002dcf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dcfb:	8b 00                	mov    eax,DWORD PTR [eax]
c002dcfd:	83 c0 24             	add    eax,0x24
c002dd00:	8b 00                	mov    eax,DWORD PTR [eax]
c002dd02:	83 ec 08             	sub    esp,0x8
c002dd05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002dd09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002dd0d:	ff d0                	call   eax
c002dd0f:	83 c4 10             	add    esp,0x10
c002dd12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dd16:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002dd1a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002dd20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dd24:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002dd28:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002dd2e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002dd32:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002dd38:	83 ec 0c             	sub    esp,0xc
c002dd3b:	51                   	push   ecx
c002dd3c:	6a 01                	push   0x1
c002dd3e:	68 cc dc 02 c0       	push   0xc002dccc
c002dd43:	52                   	push   edx
c002dd44:	50                   	push   eax
c002dd45:	e8 30 d5 fe ff       	call   c001b27a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002dd4a:	83 c4 20             	add    esp,0x20
c002dd4d:	89 c2                	mov    edx,eax
c002dd4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dd53:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002dd59:	b8 00 00 00 00       	mov    eax,0x0
c002dd5e:	83 c4 0c             	add    esp,0xc
c002dd61:	c3                   	ret    
c002dd62:	66 90                	xchg   ax,ax

c002dd64 <APICTimer::write(int)>:
c002dd64:	83 ec 0c             	sub    esp,0xc
c002dd67:	83 ec 0c             	sub    esp,0xc
c002dd6a:	68 dc 3a 03 c0       	push   0xc0033adc
c002dd6f:	e8 f2 24 ff ff       	call   c0020266 <KePanic(char const*)>
c002dd74:	83 c4 10             	add    esp,0x10
c002dd77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dd7b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002dd7f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002dd85:	90                   	nop
c002dd86:	83 c4 0c             	add    esp,0xc
c002dd89:	c3                   	ret    
c002dd8a:	66 90                	xchg   ax,ax

c002dd8c <APICTimer::APICTimer()>:
c002dd8c:	83 ec 0c             	sub    esp,0xc
c002dd8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dd93:	83 ec 08             	sub    esp,0x8
c002dd96:	68 ec 3a 03 c0       	push   0xc0033aec
c002dd9b:	50                   	push   eax
c002dd9c:	e8 d3 ee fe ff       	call   c001cc74 <Timer::Timer(char const*)>
c002dda1:	83 c4 10             	add    esp,0x10
c002dda4:	ba 00 3b 03 c0       	mov    edx,0xc0033b00
c002dda9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ddad:	89 10                	mov    DWORD PTR [eax],edx
c002ddaf:	90                   	nop
c002ddb0:	83 c4 0c             	add    esp,0xc
c002ddb3:	c3                   	ret    

c002ddb4 <PIT::write(int)>:
c002ddb4:	83 ec 10             	sub    esp,0x10
c002ddb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002ddbb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002ddbf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002ddc5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002ddc9:	a3 04 0c 04 c0       	mov    ds:0xc0040c04,eax
c002ddce:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002ddd3:	89 c2                	mov    edx,eax
c002ddd5:	c1 fa 1f             	sar    edx,0x1f
c002ddd8:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002dddc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002dde0:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002dde7:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002ddec:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002ddf0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002ddf5:	ee                   	out    dx,al
c002ddf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002ddfa:	0f b6 c0             	movzx  eax,al
c002ddfd:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002de04:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002de08:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002de0c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002de11:	ee                   	out    dx,al
c002de12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002de16:	c1 f8 08             	sar    eax,0x8
c002de19:	0f b6 c0             	movzx  eax,al
c002de1c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002de23:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002de27:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002de2b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002de30:	ee                   	out    dx,al
c002de31:	90                   	nop
c002de32:	83 c4 10             	add    esp,0x10
c002de35:	c3                   	ret    
c002de36:	66 90                	xchg   ax,ax

c002de38 <pitHandler(regs*, void*)>:
c002de38:	83 ec 0c             	sub    esp,0xc
c002de3b:	8b 0d 04 0c 04 c0    	mov    ecx,DWORD PTR ds:0xc0040c04
c002de41:	b8 10 27 00 00       	mov    eax,0x2710
c002de46:	89 c2                	mov    edx,eax
c002de48:	c1 fa 1f             	sar    edx,0x1f
c002de4b:	f7 f9                	idiv   ecx
c002de4d:	83 ec 0c             	sub    esp,0xc
c002de50:	50                   	push   eax
c002de51:	e8 ea ee fe ff       	call   c001cd40 <timerHandler(unsigned int)>
c002de56:	83 c4 10             	add    esp,0x10
c002de59:	90                   	nop
c002de5a:	83 c4 0c             	add    esp,0xc
c002de5d:	c3                   	ret    
c002de5e:	66 90                	xchg   ax,ax

c002de60 <PIT::open(int, int, void*)>:
c002de60:	83 ec 0c             	sub    esp,0xc
c002de63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de67:	8b 00                	mov    eax,DWORD PTR [eax]
c002de69:	83 c0 24             	add    eax,0x24
c002de6c:	8b 00                	mov    eax,DWORD PTR [eax]
c002de6e:	83 ec 08             	sub    esp,0x8
c002de71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002de75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002de79:	ff d0                	call   eax
c002de7b:	83 c4 10             	add    esp,0x10
c002de7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de82:	83 ec 0c             	sub    esp,0xc
c002de85:	6a 00                	push   0x0
c002de87:	6a 01                	push   0x1
c002de89:	68 38 de 02 c0       	push   0xc002de38
c002de8e:	6a 00                	push   0x0
c002de90:	50                   	push   eax
c002de91:	e8 e4 d3 fe ff       	call   c001b27a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002de96:	83 c4 20             	add    esp,0x20
c002de99:	89 c2                	mov    edx,eax
c002de9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de9f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002dea5:	b8 00 00 00 00       	mov    eax,0x0
c002deaa:	83 c4 0c             	add    esp,0xc
c002dead:	c3                   	ret    
c002deae:	66 90                	xchg   ax,ax

c002deb0 <PIT::close(int, int, void*)>:
c002deb0:	83 ec 0c             	sub    esp,0xc
c002deb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002deb7:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002dec1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dec5:	6a 01                	push   0x1
c002dec7:	68 38 de 02 c0       	push   0xc002de38
c002decc:	6a 00                	push   0x0
c002dece:	50                   	push   eax
c002decf:	e8 dc d3 fe ff       	call   c001b2b0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002ded4:	83 c4 10             	add    esp,0x10
c002ded7:	b8 00 00 00 00       	mov    eax,0x0
c002dedc:	83 c4 0c             	add    esp,0xc
c002dedf:	c3                   	ret    

c002dee0 <PIT::PIT()>:
c002dee0:	83 ec 0c             	sub    esp,0xc
c002dee3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dee7:	83 ec 08             	sub    esp,0x8
c002deea:	68 28 3b 03 c0       	push   0xc0033b28
c002deef:	50                   	push   eax
c002def0:	e8 7f ed fe ff       	call   c001cc74 <Timer::Timer(char const*)>
c002def5:	83 c4 10             	add    esp,0x10
c002def8:	ba 50 3b 03 c0       	mov    edx,0xc0033b50
c002defd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df01:	89 10                	mov    DWORD PTR [eax],edx
c002df03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df07:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002df0d:	0f b6 d0             	movzx  edx,al
c002df10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df14:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002df1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df1f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002df25:	0f b6 d0             	movzx  edx,al
c002df28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df2c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002df31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df35:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002df3b:	8d 50 01             	lea    edx,[eax+0x1]
c002df3e:	88 d1                	mov    cl,dl
c002df40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002df44:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002df4a:	0f b6 d0             	movzx  edx,al
c002df4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df51:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002df55:	83 e1 3f             	and    ecx,0x3f
c002df58:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002df5c:	90                   	nop
c002df5d:	83 c4 0c             	add    esp,0xc
c002df60:	c3                   	ret    
c002df61:	66 90                	xchg   ax,ax
c002df63:	66 90                	xchg   ax,ax
c002df65:	66 90                	xchg   ax,ax
c002df67:	66 90                	xchg   ax,ax
c002df69:	66 90                	xchg   ax,ax
c002df6b:	66 90                	xchg   ax,ax
c002df6d:	66 90                	xchg   ax,ax
c002df6f:	90                   	nop

c002df70 <avxDetect>:
c002df70:	b8 01 00 00 00       	mov    eax,0x1
c002df75:	0f a2                	cpuid  
c002df77:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002df7d:	74 15                	je     c002df94 <avxDetect.noAVX>
c002df7f:	b8 01 00 00 00       	mov    eax,0x1
c002df84:	0f a2                	cpuid  
c002df86:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002df8c:	74 06                	je     c002df94 <avxDetect.noAVX>
c002df8e:	b8 01 00 00 00       	mov    eax,0x1
c002df93:	c3                   	ret    

c002df94 <avxDetect.noAVX>:
c002df94:	b8 00 00 00 00       	mov    eax,0x0
c002df99:	c3                   	ret    

c002df9a <avxSave>:
c002df9a:	53                   	push   ebx
c002df9b:	52                   	push   edx
c002df9c:	31 c0                	xor    eax,eax
c002df9e:	48                   	dec    eax
c002df9f:	89 c2                	mov    edx,eax
c002dfa1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002dfa5:	0f ae 23             	xsave  [ebx]
c002dfa8:	5a                   	pop    edx
c002dfa9:	5b                   	pop    ebx
c002dfaa:	c3                   	ret    

c002dfab <avxLoad>:
c002dfab:	53                   	push   ebx
c002dfac:	52                   	push   edx
c002dfad:	31 c0                	xor    eax,eax
c002dfaf:	48                   	dec    eax
c002dfb0:	89 c2                	mov    edx,eax
c002dfb2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002dfb6:	0f ae 2b             	xrstor [ebx]
c002dfb9:	5a                   	pop    edx
c002dfba:	5b                   	pop    ebx
c002dfbb:	c3                   	ret    

c002dfbc <avxInit>:
c002dfbc:	e8 47 03 00 00       	call   c002e308 <sseInit>
c002dfc1:	50                   	push   eax
c002dfc2:	51                   	push   ecx
c002dfc3:	0f 20 e0             	mov    eax,cr4
c002dfc6:	0d 00 00 04 00       	or     eax,0x40000
c002dfcb:	0f 22 e0             	mov    cr4,eax
c002dfce:	31 c9                	xor    ecx,ecx
c002dfd0:	0f 01 d0             	xgetbv 
c002dfd3:	0d 07 00 00 00       	or     eax,0x7
c002dfd8:	0f 01 d1             	xsetbv 
c002dfdb:	59                   	pop    ecx
c002dfdc:	58                   	pop    eax
c002dfdd:	c3                   	ret    

c002dfde <avxClose>:
c002dfde:	c3                   	ret    
c002dfdf:	90                   	nop

c002dfe0 <isr0>:
c002dfe0:	fa                   	cli    
c002dfe1:	68 00 00 00 00       	push   0x0
c002dfe6:	68 00 00 00 00       	push   0x0
c002dfeb:	e9 56 01 00 00       	jmp    c002e146 <int_common_stub>

c002dff0 <isr1>:
c002dff0:	fa                   	cli    
c002dff1:	6a 00                	push   0x0
c002dff3:	6a 01                	push   0x1
c002dff5:	e9 4c 01 00 00       	jmp    c002e146 <int_common_stub>

c002dffa <isr2>:
c002dffa:	fa                   	cli    
c002dffb:	6a 00                	push   0x0
c002dffd:	6a 02                	push   0x2
c002dfff:	e9 42 01 00 00       	jmp    c002e146 <int_common_stub>

c002e004 <isr3>:
c002e004:	fa                   	cli    
c002e005:	6a 00                	push   0x0
c002e007:	6a 03                	push   0x3
c002e009:	e9 38 01 00 00       	jmp    c002e146 <int_common_stub>

c002e00e <isr4>:
c002e00e:	fa                   	cli    
c002e00f:	6a 00                	push   0x0
c002e011:	6a 04                	push   0x4
c002e013:	e9 2e 01 00 00       	jmp    c002e146 <int_common_stub>

c002e018 <isr5>:
c002e018:	fa                   	cli    
c002e019:	6a 00                	push   0x0
c002e01b:	6a 05                	push   0x5
c002e01d:	e9 24 01 00 00       	jmp    c002e146 <int_common_stub>

c002e022 <isr6>:
c002e022:	fa                   	cli    
c002e023:	6a 00                	push   0x0
c002e025:	6a 06                	push   0x6
c002e027:	e9 1a 01 00 00       	jmp    c002e146 <int_common_stub>

c002e02c <isr7>:
c002e02c:	fa                   	cli    
c002e02d:	6a 00                	push   0x0
c002e02f:	6a 07                	push   0x7
c002e031:	e9 10 01 00 00       	jmp    c002e146 <int_common_stub>

c002e036 <isr8>:
c002e036:	fa                   	cli    
c002e037:	6a 08                	push   0x8
c002e039:	e9 08 01 00 00       	jmp    c002e146 <int_common_stub>

c002e03e <isr9>:
c002e03e:	fa                   	cli    
c002e03f:	6a 00                	push   0x0
c002e041:	6a 09                	push   0x9
c002e043:	e9 fe 00 00 00       	jmp    c002e146 <int_common_stub>

c002e048 <isr10>:
c002e048:	fa                   	cli    
c002e049:	6a 0a                	push   0xa
c002e04b:	e9 f6 00 00 00       	jmp    c002e146 <int_common_stub>

c002e050 <isr11>:
c002e050:	fa                   	cli    
c002e051:	6a 0b                	push   0xb
c002e053:	e9 ee 00 00 00       	jmp    c002e146 <int_common_stub>

c002e058 <isr12>:
c002e058:	fa                   	cli    
c002e059:	6a 0c                	push   0xc
c002e05b:	e9 e6 00 00 00       	jmp    c002e146 <int_common_stub>

c002e060 <isr13>:
c002e060:	fa                   	cli    
c002e061:	6a 0d                	push   0xd
c002e063:	53                   	push   ebx
c002e064:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e068:	81 fb 36 e2 02 c0    	cmp    ebx,0xc002e236
c002e06e:	5b                   	pop    ebx
c002e06f:	0f 84 c3 01 00 00    	je     c002e238 <finishSignal2>
c002e075:	e9 cc 00 00 00       	jmp    c002e146 <int_common_stub>

c002e07a <isr14>:
c002e07a:	fa                   	cli    
c002e07b:	6a 0e                	push   0xe
c002e07d:	e9 c4 00 00 00       	jmp    c002e146 <int_common_stub>

c002e082 <isr15>:
c002e082:	fa                   	cli    
c002e083:	6a 00                	push   0x0
c002e085:	6a 0f                	push   0xf
c002e087:	e9 ba 00 00 00       	jmp    c002e146 <int_common_stub>

c002e08c <isr16>:
c002e08c:	fa                   	cli    
c002e08d:	6a 00                	push   0x0
c002e08f:	6a 10                	push   0x10
c002e091:	e9 b0 00 00 00       	jmp    c002e146 <int_common_stub>

c002e096 <isr17>:
c002e096:	fa                   	cli    
c002e097:	6a 00                	push   0x0
c002e099:	6a 11                	push   0x11
c002e09b:	e9 a6 00 00 00       	jmp    c002e146 <int_common_stub>

c002e0a0 <isr18>:
c002e0a0:	fa                   	cli    
c002e0a1:	6a 00                	push   0x0
c002e0a3:	6a 12                	push   0x12
c002e0a5:	e9 9c 00 00 00       	jmp    c002e146 <int_common_stub>

c002e0aa <irq3>:
c002e0aa:	fa                   	cli    
c002e0ab:	6a 00                	push   0x0
c002e0ad:	6a 23                	push   0x23
c002e0af:	e9 92 00 00 00       	jmp    c002e146 <int_common_stub>

c002e0b4 <irq4>:
c002e0b4:	fa                   	cli    
c002e0b5:	6a 00                	push   0x0
c002e0b7:	6a 24                	push   0x24
c002e0b9:	e9 88 00 00 00       	jmp    c002e146 <int_common_stub>

c002e0be <irq5>:
c002e0be:	fa                   	cli    
c002e0bf:	6a 00                	push   0x0
c002e0c1:	6a 25                	push   0x25
c002e0c3:	e9 7e 00 00 00       	jmp    c002e146 <int_common_stub>

c002e0c8 <irq6>:
c002e0c8:	fa                   	cli    
c002e0c9:	6a 00                	push   0x0
c002e0cb:	6a 26                	push   0x26
c002e0cd:	e9 74 00 00 00       	jmp    c002e146 <int_common_stub>

c002e0d2 <irq7>:
c002e0d2:	fa                   	cli    
c002e0d3:	6a 00                	push   0x0
c002e0d5:	6a 27                	push   0x27
c002e0d7:	e9 6a 00 00 00       	jmp    c002e146 <int_common_stub>

c002e0dc <irq8>:
c002e0dc:	fa                   	cli    
c002e0dd:	6a 00                	push   0x0
c002e0df:	6a 28                	push   0x28
c002e0e1:	e9 60 00 00 00       	jmp    c002e146 <int_common_stub>

c002e0e6 <irq9>:
c002e0e6:	fa                   	cli    
c002e0e7:	6a 00                	push   0x0
c002e0e9:	6a 29                	push   0x29
c002e0eb:	e9 56 00 00 00       	jmp    c002e146 <int_common_stub>

c002e0f0 <irq10>:
c002e0f0:	fa                   	cli    
c002e0f1:	6a 00                	push   0x0
c002e0f3:	6a 2a                	push   0x2a
c002e0f5:	e9 4c 00 00 00       	jmp    c002e146 <int_common_stub>

c002e0fa <irq11>:
c002e0fa:	fa                   	cli    
c002e0fb:	6a 00                	push   0x0
c002e0fd:	6a 2b                	push   0x2b
c002e0ff:	e9 42 00 00 00       	jmp    c002e146 <int_common_stub>

c002e104 <irq12>:
c002e104:	fa                   	cli    
c002e105:	6a 00                	push   0x0
c002e107:	6a 2c                	push   0x2c
c002e109:	e9 38 00 00 00       	jmp    c002e146 <int_common_stub>

c002e10e <irq13>:
c002e10e:	fa                   	cli    
c002e10f:	6a 00                	push   0x0
c002e111:	6a 2d                	push   0x2d
c002e113:	e9 2e 00 00 00       	jmp    c002e146 <int_common_stub>

c002e118 <irq14>:
c002e118:	fa                   	cli    
c002e119:	6a 00                	push   0x0
c002e11b:	6a 2e                	push   0x2e
c002e11d:	e9 24 00 00 00       	jmp    c002e146 <int_common_stub>

c002e122 <irq15>:
c002e122:	fa                   	cli    
c002e123:	6a 00                	push   0x0
c002e125:	6a 2f                	push   0x2f
c002e127:	e9 1a 00 00 00       	jmp    c002e146 <int_common_stub>

c002e12c <irq1>:
c002e12c:	fa                   	cli    
c002e12d:	6a 00                	push   0x0
c002e12f:	6a 21                	push   0x21
c002e131:	eb 13                	jmp    c002e146 <int_common_stub>

c002e133 <irq2>:
c002e133:	fa                   	cli    
c002e134:	6a 00                	push   0x0
c002e136:	6a 22                	push   0x22
c002e138:	eb 0c                	jmp    c002e146 <int_common_stub>

c002e13a <isr96>:
c002e13a:	6a 00                	push   0x0
c002e13c:	6a 60                	push   0x60
c002e13e:	fb                   	sti    
c002e13f:	eb 37                	jmp    c002e178 <syscall_common_stub>

c002e141 <irq0>:
c002e141:	fa                   	cli    
c002e142:	6a 00                	push   0x0
c002e144:	6a 20                	push   0x20

c002e146 <int_common_stub>:
c002e146:	60                   	pusha  
c002e147:	1e                   	push   ds
c002e148:	06                   	push   es
c002e149:	0f a0                	push   fs
c002e14b:	0f a8                	push   gs
c002e14d:	66 b8 10 00          	mov    ax,0x10
c002e151:	66 8e d8             	mov    ds,ax
c002e154:	66 8e c0             	mov    es,ax
c002e157:	66 8e e0             	mov    fs,ax
c002e15a:	66 8e e8             	mov    gs,ax
c002e15d:	54                   	push   esp
c002e15e:	fc                   	cld    
c002e15f:	e8 2c d6 fe ff       	call   c001b790 <int_handler>
c002e164:	81 c4 04 00 00 00    	add    esp,0x4
c002e16a:	0f a9                	pop    gs
c002e16c:	0f a1                	pop    fs
c002e16e:	07                   	pop    es
c002e16f:	1f                   	pop    ds
c002e170:	61                   	popa   
c002e171:	81 c4 08 00 00 00    	add    esp,0x8
c002e177:	cf                   	iret   

c002e178 <syscall_common_stub>:
c002e178:	60                   	pusha  
c002e179:	1e                   	push   ds
c002e17a:	06                   	push   es
c002e17b:	0f a0                	push   fs
c002e17d:	0f a8                	push   gs
c002e17f:	66 b8 10 00          	mov    ax,0x10
c002e183:	66 8e d8             	mov    ds,ax
c002e186:	66 8e c0             	mov    es,ax
c002e189:	66 8e e0             	mov    fs,ax
c002e18c:	66 8e e8             	mov    gs,ax
c002e18f:	54                   	push   esp
c002e190:	fc                   	cld    
c002e191:	e8 fa d5 fe ff       	call   c001b790 <int_handler>
c002e196:	81 c4 04 00 00 00    	add    esp,0x4
c002e19c:	0f a9                	pop    gs
c002e19e:	0f a1                	pop    fs
c002e1a0:	07                   	pop    es
c002e1a1:	1f                   	pop    ds
c002e1a2:	e8 ec 2a ff ff       	call   c0020c93 <KiCheckSignalZ>
c002e1a7:	3d 00 00 00 00       	cmp    eax,0x0
c002e1ac:	0f 84 c0 00 00 00    	je     c002e272 <skipSignals>
c002e1b2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c002e1b7:	61                   	popa   
c002e1b8:	53                   	push   ebx
c002e1b9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c002e1bf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c002e1c2:	5b                   	pop    ebx
c002e1c3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c002e1c8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c002e1cb:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c002e1ce:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002e1d1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c002e1d4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c002e1d7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c002e1da:	81 c4 08 00 00 00    	add    esp,0x8
c002e1e0:	5e                   	pop    esi
c002e1e1:	5b                   	pop    ebx
c002e1e2:	59                   	pop    ecx
c002e1e3:	5a                   	pop    edx
c002e1e4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c002e1e7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c002e1ea:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002e1ed:	52                   	push   edx
c002e1ee:	51                   	push   ecx
c002e1ef:	53                   	push   ebx
c002e1f0:	56                   	push   esi
c002e1f1:	81 ec 08 00 00 00    	sub    esp,0x8
c002e1f7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c002e1fa:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002e1fd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c002e200:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002e203:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002e206:	60                   	pusha  
c002e207:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c002e20d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c002e210:	89 e3                	mov    ebx,esp
c002e212:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c002e215:	52                   	push   edx
c002e216:	68 36 e2 02 c0       	push   0xc002e236
c002e21b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c002e21e:	89 dc                	mov    esp,ebx
c002e220:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c002e223:	68 23 00 00 00       	push   0x23
c002e228:	51                   	push   ecx
c002e229:	68 02 02 00 00       	push   0x202
c002e22e:	68 1b 00 00 00       	push   0x1b
c002e233:	ff 36                	push   DWORD PTR [esi]
c002e235:	cf                   	iret   

c002e236 <finishSignal>:
c002e236:	cd 0f                	int    0xf

c002e238 <finishSignal2>:
c002e238:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c002e23e:	e8 cd 2a ff ff       	call   c0020d10 <KiFinishSignalZ>
c002e243:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c002e249:	68 23 00 00 00       	push   0x23
c002e24e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c002e251:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c002e254:	68 1b 00 00 00       	push   0x1b
c002e259:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c002e25c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002e25f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002e262:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002e265:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002e268:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c002e26b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c002e26e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c002e271:	cf                   	iret   

c002e272 <skipSignals>:
c002e272:	61                   	popa   
c002e273:	81 c4 08 00 00 00    	add    esp,0x8
c002e279:	cf                   	iret   
c002e27a:	90                   	nop
c002e27b:	90                   	nop

c002e27c <irq16>:
c002e27c:	fa                   	cli    
c002e27d:	6a 00                	push   0x0
c002e27f:	6a 30                	push   0x30
c002e281:	e9 c0 fe ff ff       	jmp    c002e146 <int_common_stub>

c002e286 <irq17>:
c002e286:	fa                   	cli    
c002e287:	6a 00                	push   0x0
c002e289:	6a 31                	push   0x31
c002e28b:	e9 b6 fe ff ff       	jmp    c002e146 <int_common_stub>

c002e290 <irq18>:
c002e290:	fa                   	cli    
c002e291:	6a 00                	push   0x0
c002e293:	6a 32                	push   0x32
c002e295:	e9 ac fe ff ff       	jmp    c002e146 <int_common_stub>

c002e29a <irq19>:
c002e29a:	fa                   	cli    
c002e29b:	6a 00                	push   0x0
c002e29d:	6a 33                	push   0x33
c002e29f:	e9 a2 fe ff ff       	jmp    c002e146 <int_common_stub>

c002e2a4 <irq20>:
c002e2a4:	fa                   	cli    
c002e2a5:	6a 00                	push   0x0
c002e2a7:	6a 34                	push   0x34
c002e2a9:	e9 98 fe ff ff       	jmp    c002e146 <int_common_stub>

c002e2ae <irq21>:
c002e2ae:	fa                   	cli    
c002e2af:	6a 00                	push   0x0
c002e2b1:	6a 35                	push   0x35
c002e2b3:	e9 8e fe ff ff       	jmp    c002e146 <int_common_stub>

c002e2b8 <irq22>:
c002e2b8:	fa                   	cli    
c002e2b9:	6a 00                	push   0x0
c002e2bb:	6a 36                	push   0x36
c002e2bd:	e9 84 fe ff ff       	jmp    c002e146 <int_common_stub>

c002e2c2 <irq23>:
c002e2c2:	fa                   	cli    
c002e2c3:	6a 00                	push   0x0
c002e2c5:	6a 37                	push   0x37
c002e2c7:	e9 7a fe ff ff       	jmp    c002e146 <int_common_stub>
c002e2cc:	66 90                	xchg   ax,ax
c002e2ce:	66 90                	xchg   ax,ax

c002e2d0 <i386GetRDRAND>:
c002e2d0:	b9 64 00 00 00       	mov    ecx,0x64

c002e2d5 <retry>:
c002e2d5:	0f c7 f0             	rdrand eax
c002e2d8:	72 05                	jb     c002e2df <retry.done>
c002e2da:	e2 f9                	loop   c002e2d5 <retry>

c002e2dc <retry.fail>:
c002e2dc:	31 c0                	xor    eax,eax
c002e2de:	c3                   	ret    

c002e2df <retry.done>:
c002e2df:	c3                   	ret    

c002e2e0 <sseDetect>:
c002e2e0:	b8 01 00 00 00       	mov    eax,0x1
c002e2e5:	0f a2                	cpuid  
c002e2e7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002e2ed:	74 06                	je     c002e2f5 <sseDetect.noSSE>
c002e2ef:	b8 01 00 00 00       	mov    eax,0x1
c002e2f4:	c3                   	ret    

c002e2f5 <sseDetect.noSSE>:
c002e2f5:	31 c0                	xor    eax,eax
c002e2f7:	c3                   	ret    

c002e2f8 <sseSave>:
c002e2f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e2fc:	0f ae 00             	fxsave [eax]
c002e2ff:	c3                   	ret    

c002e300 <sseLoad>:
c002e300:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e304:	0f ae 08             	fxrstor [eax]
c002e307:	c3                   	ret    

c002e308 <sseInit>:
c002e308:	e8 42 00 00 00       	call   c002e34f <x87Init>
c002e30d:	0f 20 e0             	mov    eax,cr4
c002e310:	66 0d 00 06          	or     ax,0x600
c002e314:	0f 22 e0             	mov    cr4,eax
c002e317:	c3                   	ret    

c002e318 <sseClose>:
c002e318:	c3                   	ret    
c002e319:	66 90                	xchg   ax,ax
c002e31b:	66 90                	xchg   ax,ax
c002e31d:	66 90                	xchg   ax,ax
c002e31f:	90                   	nop

c002e320 <value_37F>:
c002e320:	7f 03                	jg     c002e325 <value_37A+0x1>

c002e322 <value_37E>:
c002e322:	7e 03                	jle    c002e327 <x87Detect+0x1>

c002e324 <value_37A>:
c002e324:	7a 03                	jp     c002e329 <x87Detect+0x3>

c002e326 <x87Detect>:
c002e326:	b8 01 00 00 00       	mov    eax,0x1
c002e32b:	0f a2                	cpuid  
c002e32d:	f7 c2 01 00 00 00    	test   edx,0x1
c002e333:	74 06                	je     c002e33b <x87Detect.nox87>
c002e335:	b8 01 00 00 00       	mov    eax,0x1
c002e33a:	c3                   	ret    

c002e33b <x87Detect.nox87>:
c002e33b:	b8 00 00 00 00       	mov    eax,0x0
c002e340:	c3                   	ret    

c002e341 <x87Save>:
c002e341:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e345:	dd 30                	fnsave [eax]
c002e347:	c3                   	ret    

c002e348 <x87Load>:
c002e348:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e34c:	dd 20                	frstor [eax]
c002e34e:	c3                   	ret    

c002e34f <x87Init>:
c002e34f:	0f 20 c0             	mov    eax,cr0
c002e352:	66 25 fb ff          	and    ax,0xfffb
c002e356:	66 0d 22 00          	or     ax,0x22
c002e35a:	0f 22 c0             	mov    cr0,eax
c002e35d:	db e3                	fninit 
c002e35f:	0f 06                	clts   
c002e361:	d9 2d 24 e3 02 c0    	fldcw  WORD PTR ds:0xc002e324
c002e367:	c3                   	ret    

c002e368 <x87Close>:
c002e368:	c3                   	ret    
c002e369:	66 90                	xchg   ax,ax
c002e36b:	90                   	nop

c002e36c <__do_global_ctors_aux>:
c002e36c:	a1 20 f3 02 c0       	mov    eax,ds:0xc002f320
c002e371:	83 f8 ff             	cmp    eax,0xffffffff
c002e374:	74 1a                	je     c002e390 <__do_global_ctors_aux+0x24>
c002e376:	55                   	push   ebp
c002e377:	89 e5                	mov    ebp,esp
c002e379:	53                   	push   ebx
c002e37a:	52                   	push   edx
c002e37b:	bb 20 f3 02 c0       	mov    ebx,0xc002f320
c002e380:	ff d0                	call   eax
c002e382:	83 eb 04             	sub    ebx,0x4
c002e385:	8b 03                	mov    eax,DWORD PTR [ebx]
c002e387:	83 f8 ff             	cmp    eax,0xffffffff
c002e38a:	75 f4                	jne    c002e380 <__do_global_ctors_aux+0x14>
c002e38c:	58                   	pop    eax
c002e38d:	5b                   	pop    ebx
c002e38e:	5d                   	pop    ebp
c002e38f:	c3                   	ret    
c002e390:	c3                   	ret    
c002e391:	66 90                	xchg   ax,ax
c002e393:	90                   	nop

c002e394 <__divdi3>:
c002e394:	55                   	push   ebp
c002e395:	57                   	push   edi
c002e396:	56                   	push   esi
c002e397:	53                   	push   ebx
c002e398:	83 ec 1c             	sub    esp,0x1c
c002e39b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002e39f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002e3a3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002e3a6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002e3aa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002e3ae:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002e3b2:	85 db                	test   ebx,ebx
c002e3b4:	0f 88 8e 00 00 00    	js     c002e448 <__divdi3+0xb4>
c002e3ba:	89 dd                	mov    ebp,ebx
c002e3bc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002e3c4:	89 d3                	mov    ebx,edx
c002e3c6:	85 d2                	test   edx,edx
c002e3c8:	79 0d                	jns    c002e3d7 <__divdi3+0x43>
c002e3ca:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002e3ce:	f7 d8                	neg    eax
c002e3d0:	83 d2 00             	adc    edx,0x0
c002e3d3:	f7 da                	neg    edx
c002e3d5:	89 d3                	mov    ebx,edx
c002e3d7:	89 c7                	mov    edi,eax
c002e3d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002e3dc:	85 db                	test   ebx,ebx
c002e3de:	75 48                	jne    c002e428 <__divdi3+0x94>
c002e3e0:	39 ef                	cmp    edi,ebp
c002e3e2:	76 24                	jbe    c002e408 <__divdi3+0x74>
c002e3e4:	89 ea                	mov    edx,ebp
c002e3e6:	f7 f7                	div    edi
c002e3e8:	89 c1                	mov    ecx,eax
c002e3ea:	31 f6                	xor    esi,esi
c002e3ec:	89 c8                	mov    eax,ecx
c002e3ee:	89 f2                	mov    edx,esi
c002e3f0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e3f4:	85 c9                	test   ecx,ecx
c002e3f6:	74 07                	je     c002e3ff <__divdi3+0x6b>
c002e3f8:	f7 d8                	neg    eax
c002e3fa:	83 d2 00             	adc    edx,0x0
c002e3fd:	f7 da                	neg    edx
c002e3ff:	83 c4 1c             	add    esp,0x1c
c002e402:	5b                   	pop    ebx
c002e403:	5e                   	pop    esi
c002e404:	5f                   	pop    edi
c002e405:	5d                   	pop    ebp
c002e406:	c3                   	ret    
c002e407:	90                   	nop
c002e408:	85 ff                	test   edi,edi
c002e40a:	75 0b                	jne    c002e417 <__divdi3+0x83>
c002e40c:	b8 01 00 00 00       	mov    eax,0x1
c002e411:	31 d2                	xor    edx,edx
c002e413:	f7 f3                	div    ebx
c002e415:	89 c7                	mov    edi,eax
c002e417:	31 d2                	xor    edx,edx
c002e419:	89 e8                	mov    eax,ebp
c002e41b:	f7 f7                	div    edi
c002e41d:	89 c6                	mov    esi,eax
c002e41f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002e422:	f7 f7                	div    edi
c002e424:	89 c1                	mov    ecx,eax
c002e426:	eb c4                	jmp    c002e3ec <__divdi3+0x58>
c002e428:	39 eb                	cmp    ebx,ebp
c002e42a:	77 3c                	ja     c002e468 <__divdi3+0xd4>
c002e42c:	0f bd f3             	bsr    esi,ebx
c002e42f:	83 f6 1f             	xor    esi,0x1f
c002e432:	75 40                	jne    c002e474 <__divdi3+0xe0>
c002e434:	39 eb                	cmp    ebx,ebp
c002e436:	72 09                	jb     c002e441 <__divdi3+0xad>
c002e438:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002e43b:	0f 87 97 00 00 00    	ja     c002e4d8 <__divdi3+0x144>
c002e441:	b9 01 00 00 00       	mov    ecx,0x1
c002e446:	eb a4                	jmp    c002e3ec <__divdi3+0x58>
c002e448:	f7 d9                	neg    ecx
c002e44a:	83 d3 00             	adc    ebx,0x0
c002e44d:	f7 db                	neg    ebx
c002e44f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002e452:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002e456:	89 dd                	mov    ebp,ebx
c002e458:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002e460:	e9 5f ff ff ff       	jmp    c002e3c4 <__divdi3+0x30>
c002e465:	8d 76 00             	lea    esi,[esi+0x0]
c002e468:	31 f6                	xor    esi,esi
c002e46a:	31 c9                	xor    ecx,ecx
c002e46c:	e9 7b ff ff ff       	jmp    c002e3ec <__divdi3+0x58>
c002e471:	8d 76 00             	lea    esi,[esi+0x0]
c002e474:	b8 20 00 00 00       	mov    eax,0x20
c002e479:	29 f0                	sub    eax,esi
c002e47b:	89 f1                	mov    ecx,esi
c002e47d:	d3 e3                	shl    ebx,cl
c002e47f:	89 fa                	mov    edx,edi
c002e481:	88 c1                	mov    cl,al
c002e483:	d3 ea                	shr    edx,cl
c002e485:	09 da                	or     edx,ebx
c002e487:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002e48b:	89 f1                	mov    ecx,esi
c002e48d:	d3 e7                	shl    edi,cl
c002e48f:	89 eb                	mov    ebx,ebp
c002e491:	88 c1                	mov    cl,al
c002e493:	d3 eb                	shr    ebx,cl
c002e495:	89 f1                	mov    ecx,esi
c002e497:	d3 e5                	shl    ebp,cl
c002e499:	8b 14 24             	mov    edx,DWORD PTR [esp]
c002e49c:	88 c1                	mov    cl,al
c002e49e:	d3 ea                	shr    edx,cl
c002e4a0:	09 d5                	or     ebp,edx
c002e4a2:	89 e8                	mov    eax,ebp
c002e4a4:	89 da                	mov    edx,ebx
c002e4a6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002e4aa:	89 d3                	mov    ebx,edx
c002e4ac:	89 c5                	mov    ebp,eax
c002e4ae:	f7 e7                	mul    edi
c002e4b0:	39 d3                	cmp    ebx,edx
c002e4b2:	72 18                	jb     c002e4cc <__divdi3+0x138>
c002e4b4:	74 0a                	je     c002e4c0 <__divdi3+0x12c>
c002e4b6:	89 e9                	mov    ecx,ebp
c002e4b8:	31 f6                	xor    esi,esi
c002e4ba:	e9 2d ff ff ff       	jmp    c002e3ec <__divdi3+0x58>
c002e4bf:	90                   	nop
c002e4c0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002e4c3:	89 f1                	mov    ecx,esi
c002e4c5:	d3 e7                	shl    edi,cl
c002e4c7:	39 c7                	cmp    edi,eax
c002e4c9:	73 eb                	jae    c002e4b6 <__divdi3+0x122>
c002e4cb:	90                   	nop
c002e4cc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002e4cf:	31 f6                	xor    esi,esi
c002e4d1:	e9 16 ff ff ff       	jmp    c002e3ec <__divdi3+0x58>
c002e4d6:	66 90                	xchg   ax,ax
c002e4d8:	31 c9                	xor    ecx,ecx
c002e4da:	e9 0d ff ff ff       	jmp    c002e3ec <__divdi3+0x58>
c002e4df:	90                   	nop

c002e4e0 <__moddi3>:
c002e4e0:	55                   	push   ebp
c002e4e1:	57                   	push   edi
c002e4e2:	56                   	push   esi
c002e4e3:	53                   	push   ebx
c002e4e4:	83 ec 2c             	sub    esp,0x2c
c002e4e7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002e4eb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002e4ef:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002e4f3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002e4f7:	85 db                	test   ebx,ebx
c002e4f9:	0f 88 85 00 00 00    	js     c002e584 <__moddi3+0xa4>
c002e4ff:	89 de                	mov    esi,ebx
c002e501:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002e509:	89 d7                	mov    edi,edx
c002e50b:	85 d2                	test   edx,edx
c002e50d:	79 09                	jns    c002e518 <__moddi3+0x38>
c002e50f:	f7 d8                	neg    eax
c002e511:	83 d2 00             	adc    edx,0x0
c002e514:	f7 da                	neg    edx
c002e516:	89 d7                	mov    edi,edx
c002e518:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e51c:	89 cd                	mov    ebp,ecx
c002e51e:	85 ff                	test   edi,edi
c002e520:	75 52                	jne    c002e574 <__moddi3+0x94>
c002e522:	89 c3                	mov    ebx,eax
c002e524:	39 f0                	cmp    eax,esi
c002e526:	76 24                	jbe    c002e54c <__moddi3+0x6c>
c002e528:	89 c8                	mov    eax,ecx
c002e52a:	89 f2                	mov    edx,esi
c002e52c:	f7 f3                	div    ebx
c002e52e:	89 d6                	mov    esi,edx
c002e530:	89 f0                	mov    eax,esi
c002e532:	31 d2                	xor    edx,edx
c002e534:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002e538:	85 c9                	test   ecx,ecx
c002e53a:	74 07                	je     c002e543 <__moddi3+0x63>
c002e53c:	f7 d8                	neg    eax
c002e53e:	83 d2 00             	adc    edx,0x0
c002e541:	f7 da                	neg    edx
c002e543:	83 c4 2c             	add    esp,0x2c
c002e546:	5b                   	pop    ebx
c002e547:	5e                   	pop    esi
c002e548:	5f                   	pop    edi
c002e549:	5d                   	pop    ebp
c002e54a:	c3                   	ret    
c002e54b:	90                   	nop
c002e54c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e550:	85 db                	test   ebx,ebx
c002e552:	75 0d                	jne    c002e561 <__moddi3+0x81>
c002e554:	b8 01 00 00 00       	mov    eax,0x1
c002e559:	31 d2                	xor    edx,edx
c002e55b:	f7 f7                	div    edi
c002e55d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e561:	89 f0                	mov    eax,esi
c002e563:	31 d2                	xor    edx,edx
c002e565:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002e569:	f7 f7                	div    edi
c002e56b:	89 e8                	mov    eax,ebp
c002e56d:	f7 f7                	div    edi
c002e56f:	89 d6                	mov    esi,edx
c002e571:	eb bd                	jmp    c002e530 <__moddi3+0x50>
c002e573:	90                   	nop
c002e574:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002e578:	39 f7                	cmp    edi,esi
c002e57a:	76 20                	jbe    c002e59c <__moddi3+0xbc>
c002e57c:	89 c8                	mov    eax,ecx
c002e57e:	89 f2                	mov    edx,esi
c002e580:	eb b2                	jmp    c002e534 <__moddi3+0x54>
c002e582:	66 90                	xchg   ax,ax
c002e584:	f7 d9                	neg    ecx
c002e586:	83 d3 00             	adc    ebx,0x0
c002e589:	f7 db                	neg    ebx
c002e58b:	89 de                	mov    esi,ebx
c002e58d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c002e595:	e9 6f ff ff ff       	jmp    c002e509 <__moddi3+0x29>
c002e59a:	66 90                	xchg   ax,ax
c002e59c:	0f bd c7             	bsr    eax,edi
c002e59f:	83 f0 1f             	xor    eax,0x1f
c002e5a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002e5a6:	75 24                	jne    c002e5cc <__moddi3+0xec>
c002e5a8:	39 f7                	cmp    edi,esi
c002e5aa:	72 06                	jb     c002e5b2 <__moddi3+0xd2>
c002e5ac:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002e5b0:	77 0c                	ja     c002e5be <__moddi3+0xde>
c002e5b2:	89 e9                	mov    ecx,ebp
c002e5b4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002e5b8:	19 fe                	sbb    esi,edi
c002e5ba:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002e5be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002e5c2:	89 f2                	mov    edx,esi
c002e5c4:	e9 6b ff ff ff       	jmp    c002e534 <__moddi3+0x54>
c002e5c9:	8d 76 00             	lea    esi,[esi+0x0]
c002e5cc:	b8 20 00 00 00       	mov    eax,0x20
c002e5d1:	89 c2                	mov    edx,eax
c002e5d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002e5d7:	29 da                	sub    edx,ebx
c002e5d9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002e5dd:	88 d9                	mov    cl,bl
c002e5df:	d3 e7                	shl    edi,cl
c002e5e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002e5e5:	88 d1                	mov    cl,dl
c002e5e7:	d3 e8                	shr    eax,cl
c002e5e9:	09 c7                	or     edi,eax
c002e5eb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002e5ef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002e5f3:	89 d8                	mov    eax,ebx
c002e5f5:	88 d9                	mov    cl,bl
c002e5f7:	d3 e7                	shl    edi,cl
c002e5f9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e5fd:	89 f3                	mov    ebx,esi
c002e5ff:	88 d1                	mov    cl,dl
c002e601:	d3 eb                	shr    ebx,cl
c002e603:	89 c7                	mov    edi,eax
c002e605:	88 c1                	mov    cl,al
c002e607:	d3 e6                	shl    esi,cl
c002e609:	89 e8                	mov    eax,ebp
c002e60b:	88 d1                	mov    cl,dl
c002e60d:	d3 e8                	shr    eax,cl
c002e60f:	09 f0                	or     eax,esi
c002e611:	89 f9                	mov    ecx,edi
c002e613:	d3 e5                	shl    ebp,cl
c002e615:	89 da                	mov    edx,ebx
c002e617:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002e61b:	89 d3                	mov    ebx,edx
c002e61d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e621:	89 c6                	mov    esi,eax
c002e623:	89 d1                	mov    ecx,edx
c002e625:	39 d3                	cmp    ebx,edx
c002e627:	72 27                	jb     c002e650 <__moddi3+0x170>
c002e629:	74 21                	je     c002e64c <__moddi3+0x16c>
c002e62b:	29 f5                	sub    ebp,esi
c002e62d:	19 cb                	sbb    ebx,ecx
c002e62f:	89 de                	mov    esi,ebx
c002e631:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c002e635:	d3 e6                	shl    esi,cl
c002e637:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002e63b:	89 f9                	mov    ecx,edi
c002e63d:	d3 ed                	shr    ebp,cl
c002e63f:	09 ee                	or     esi,ebp
c002e641:	89 f0                	mov    eax,esi
c002e643:	d3 eb                	shr    ebx,cl
c002e645:	89 da                	mov    edx,ebx
c002e647:	e9 e8 fe ff ff       	jmp    c002e534 <__moddi3+0x54>
c002e64c:	39 c5                	cmp    ebp,eax
c002e64e:	73 db                	jae    c002e62b <__moddi3+0x14b>
c002e650:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002e654:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002e658:	89 d1                	mov    ecx,edx
c002e65a:	89 c6                	mov    esi,eax
c002e65c:	eb cd                	jmp    c002e62b <__moddi3+0x14b>
c002e65e:	66 90                	xchg   ax,ax

c002e660 <__udivdi3>:
c002e660:	55                   	push   ebp
c002e661:	57                   	push   edi
c002e662:	56                   	push   esi
c002e663:	53                   	push   ebx
c002e664:	83 ec 1c             	sub    esp,0x1c
c002e667:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002e66b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002e66f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002e673:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002e677:	85 d2                	test   edx,edx
c002e679:	75 41                	jne    c002e6bc <__udivdi3+0x5c>
c002e67b:	39 f7                	cmp    edi,esi
c002e67d:	76 15                	jbe    c002e694 <__udivdi3+0x34>
c002e67f:	89 e8                	mov    eax,ebp
c002e681:	89 f2                	mov    edx,esi
c002e683:	f7 f7                	div    edi
c002e685:	31 db                	xor    ebx,ebx
c002e687:	89 da                	mov    edx,ebx
c002e689:	83 c4 1c             	add    esp,0x1c
c002e68c:	5b                   	pop    ebx
c002e68d:	5e                   	pop    esi
c002e68e:	5f                   	pop    edi
c002e68f:	5d                   	pop    ebp
c002e690:	c3                   	ret    
c002e691:	8d 76 00             	lea    esi,[esi+0x0]
c002e694:	89 f9                	mov    ecx,edi
c002e696:	85 ff                	test   edi,edi
c002e698:	75 0b                	jne    c002e6a5 <__udivdi3+0x45>
c002e69a:	b8 01 00 00 00       	mov    eax,0x1
c002e69f:	31 d2                	xor    edx,edx
c002e6a1:	f7 f7                	div    edi
c002e6a3:	89 c1                	mov    ecx,eax
c002e6a5:	31 d2                	xor    edx,edx
c002e6a7:	89 f0                	mov    eax,esi
c002e6a9:	f7 f1                	div    ecx
c002e6ab:	89 c3                	mov    ebx,eax
c002e6ad:	89 e8                	mov    eax,ebp
c002e6af:	f7 f1                	div    ecx
c002e6b1:	89 da                	mov    edx,ebx
c002e6b3:	83 c4 1c             	add    esp,0x1c
c002e6b6:	5b                   	pop    ebx
c002e6b7:	5e                   	pop    esi
c002e6b8:	5f                   	pop    edi
c002e6b9:	5d                   	pop    ebp
c002e6ba:	c3                   	ret    
c002e6bb:	90                   	nop
c002e6bc:	39 f2                	cmp    edx,esi
c002e6be:	77 1c                	ja     c002e6dc <__udivdi3+0x7c>
c002e6c0:	0f bd da             	bsr    ebx,edx
c002e6c3:	83 f3 1f             	xor    ebx,0x1f
c002e6c6:	75 24                	jne    c002e6ec <__udivdi3+0x8c>
c002e6c8:	39 f2                	cmp    edx,esi
c002e6ca:	72 08                	jb     c002e6d4 <__udivdi3+0x74>
c002e6cc:	39 ef                	cmp    edi,ebp
c002e6ce:	0f 87 84 00 00 00    	ja     c002e758 <__udivdi3+0xf8>
c002e6d4:	b8 01 00 00 00       	mov    eax,0x1
c002e6d9:	eb ac                	jmp    c002e687 <__udivdi3+0x27>
c002e6db:	90                   	nop
c002e6dc:	31 db                	xor    ebx,ebx
c002e6de:	31 c0                	xor    eax,eax
c002e6e0:	89 da                	mov    edx,ebx
c002e6e2:	83 c4 1c             	add    esp,0x1c
c002e6e5:	5b                   	pop    ebx
c002e6e6:	5e                   	pop    esi
c002e6e7:	5f                   	pop    edi
c002e6e8:	5d                   	pop    ebp
c002e6e9:	c3                   	ret    
c002e6ea:	66 90                	xchg   ax,ax
c002e6ec:	b8 20 00 00 00       	mov    eax,0x20
c002e6f1:	29 d8                	sub    eax,ebx
c002e6f3:	88 d9                	mov    cl,bl
c002e6f5:	d3 e2                	shl    edx,cl
c002e6f7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002e6fb:	89 fa                	mov    edx,edi
c002e6fd:	88 c1                	mov    cl,al
c002e6ff:	d3 ea                	shr    edx,cl
c002e701:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e705:	09 d1                	or     ecx,edx
c002e707:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002e70b:	88 d9                	mov    cl,bl
c002e70d:	d3 e7                	shl    edi,cl
c002e70f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e713:	89 f7                	mov    edi,esi
c002e715:	88 c1                	mov    cl,al
c002e717:	d3 ef                	shr    edi,cl
c002e719:	88 d9                	mov    cl,bl
c002e71b:	d3 e6                	shl    esi,cl
c002e71d:	89 ea                	mov    edx,ebp
c002e71f:	88 c1                	mov    cl,al
c002e721:	d3 ea                	shr    edx,cl
c002e723:	09 d6                	or     esi,edx
c002e725:	89 f0                	mov    eax,esi
c002e727:	89 fa                	mov    edx,edi
c002e729:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002e72d:	89 d7                	mov    edi,edx
c002e72f:	89 c6                	mov    esi,eax
c002e731:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e735:	39 d7                	cmp    edi,edx
c002e737:	72 13                	jb     c002e74c <__udivdi3+0xec>
c002e739:	74 09                	je     c002e744 <__udivdi3+0xe4>
c002e73b:	89 f0                	mov    eax,esi
c002e73d:	31 db                	xor    ebx,ebx
c002e73f:	e9 43 ff ff ff       	jmp    c002e687 <__udivdi3+0x27>
c002e744:	88 d9                	mov    cl,bl
c002e746:	d3 e5                	shl    ebp,cl
c002e748:	39 c5                	cmp    ebp,eax
c002e74a:	73 ef                	jae    c002e73b <__udivdi3+0xdb>
c002e74c:	8d 46 ff             	lea    eax,[esi-0x1]
c002e74f:	31 db                	xor    ebx,ebx
c002e751:	e9 31 ff ff ff       	jmp    c002e687 <__udivdi3+0x27>
c002e756:	66 90                	xchg   ax,ax
c002e758:	31 c0                	xor    eax,eax
c002e75a:	e9 28 ff ff ff       	jmp    c002e687 <__udivdi3+0x27>
c002e75f:	90                   	nop

c002e760 <__umoddi3>:
c002e760:	55                   	push   ebp
c002e761:	57                   	push   edi
c002e762:	56                   	push   esi
c002e763:	53                   	push   ebx
c002e764:	83 ec 1c             	sub    esp,0x1c
c002e767:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002e76b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002e76f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002e773:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002e777:	89 da                	mov    edx,ebx
c002e779:	85 c0                	test   eax,eax
c002e77b:	75 37                	jne    c002e7b4 <__umoddi3+0x54>
c002e77d:	39 df                	cmp    edi,ebx
c002e77f:	76 13                	jbe    c002e794 <__umoddi3+0x34>
c002e781:	89 f0                	mov    eax,esi
c002e783:	f7 f7                	div    edi
c002e785:	89 d0                	mov    eax,edx
c002e787:	31 d2                	xor    edx,edx
c002e789:	83 c4 1c             	add    esp,0x1c
c002e78c:	5b                   	pop    ebx
c002e78d:	5e                   	pop    esi
c002e78e:	5f                   	pop    edi
c002e78f:	5d                   	pop    ebp
c002e790:	c3                   	ret    
c002e791:	8d 76 00             	lea    esi,[esi+0x0]
c002e794:	89 fd                	mov    ebp,edi
c002e796:	85 ff                	test   edi,edi
c002e798:	75 0b                	jne    c002e7a5 <__umoddi3+0x45>
c002e79a:	b8 01 00 00 00       	mov    eax,0x1
c002e79f:	31 d2                	xor    edx,edx
c002e7a1:	f7 f7                	div    edi
c002e7a3:	89 c5                	mov    ebp,eax
c002e7a5:	89 d8                	mov    eax,ebx
c002e7a7:	31 d2                	xor    edx,edx
c002e7a9:	f7 f5                	div    ebp
c002e7ab:	89 f0                	mov    eax,esi
c002e7ad:	f7 f5                	div    ebp
c002e7af:	89 d0                	mov    eax,edx
c002e7b1:	eb d4                	jmp    c002e787 <__umoddi3+0x27>
c002e7b3:	90                   	nop
c002e7b4:	89 f1                	mov    ecx,esi
c002e7b6:	39 d8                	cmp    eax,ebx
c002e7b8:	76 0a                	jbe    c002e7c4 <__umoddi3+0x64>
c002e7ba:	89 f0                	mov    eax,esi
c002e7bc:	83 c4 1c             	add    esp,0x1c
c002e7bf:	5b                   	pop    ebx
c002e7c0:	5e                   	pop    esi
c002e7c1:	5f                   	pop    edi
c002e7c2:	5d                   	pop    ebp
c002e7c3:	c3                   	ret    
c002e7c4:	0f bd e8             	bsr    ebp,eax
c002e7c7:	83 f5 1f             	xor    ebp,0x1f
c002e7ca:	75 1c                	jne    c002e7e8 <__umoddi3+0x88>
c002e7cc:	39 d8                	cmp    eax,ebx
c002e7ce:	72 04                	jb     c002e7d4 <__umoddi3+0x74>
c002e7d0:	39 f7                	cmp    edi,esi
c002e7d2:	77 08                	ja     c002e7dc <__umoddi3+0x7c>
c002e7d4:	89 da                	mov    edx,ebx
c002e7d6:	29 fe                	sub    esi,edi
c002e7d8:	19 c2                	sbb    edx,eax
c002e7da:	89 f1                	mov    ecx,esi
c002e7dc:	89 c8                	mov    eax,ecx
c002e7de:	83 c4 1c             	add    esp,0x1c
c002e7e1:	5b                   	pop    ebx
c002e7e2:	5e                   	pop    esi
c002e7e3:	5f                   	pop    edi
c002e7e4:	5d                   	pop    ebp
c002e7e5:	c3                   	ret    
c002e7e6:	66 90                	xchg   ax,ax
c002e7e8:	ba 20 00 00 00       	mov    edx,0x20
c002e7ed:	29 ea                	sub    edx,ebp
c002e7ef:	89 e9                	mov    ecx,ebp
c002e7f1:	d3 e0                	shl    eax,cl
c002e7f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002e7f7:	89 f8                	mov    eax,edi
c002e7f9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002e7fd:	88 d1                	mov    cl,dl
c002e7ff:	d3 e8                	shr    eax,cl
c002e801:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e805:	09 c1                	or     ecx,eax
c002e807:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002e80b:	89 e9                	mov    ecx,ebp
c002e80d:	d3 e7                	shl    edi,cl
c002e80f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e813:	89 d8                	mov    eax,ebx
c002e815:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002e819:	88 d1                	mov    cl,dl
c002e81b:	d3 e8                	shr    eax,cl
c002e81d:	89 c7                	mov    edi,eax
c002e81f:	89 e9                	mov    ecx,ebp
c002e821:	d3 e3                	shl    ebx,cl
c002e823:	89 f0                	mov    eax,esi
c002e825:	88 d1                	mov    cl,dl
c002e827:	d3 e8                	shr    eax,cl
c002e829:	09 d8                	or     eax,ebx
c002e82b:	89 e9                	mov    ecx,ebp
c002e82d:	d3 e6                	shl    esi,cl
c002e82f:	89 f3                	mov    ebx,esi
c002e831:	89 fa                	mov    edx,edi
c002e833:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002e837:	89 d1                	mov    ecx,edx
c002e839:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e83d:	89 c6                	mov    esi,eax
c002e83f:	89 d7                	mov    edi,edx
c002e841:	39 d1                	cmp    ecx,edx
c002e843:	72 27                	jb     c002e86c <__umoddi3+0x10c>
c002e845:	74 21                	je     c002e868 <__umoddi3+0x108>
c002e847:	89 ca                	mov    edx,ecx
c002e849:	29 f3                	sub    ebx,esi
c002e84b:	19 fa                	sbb    edx,edi
c002e84d:	89 d0                	mov    eax,edx
c002e84f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002e853:	d3 e0                	shl    eax,cl
c002e855:	89 e9                	mov    ecx,ebp
c002e857:	d3 eb                	shr    ebx,cl
c002e859:	09 d8                	or     eax,ebx
c002e85b:	d3 ea                	shr    edx,cl
c002e85d:	83 c4 1c             	add    esp,0x1c
c002e860:	5b                   	pop    ebx
c002e861:	5e                   	pop    esi
c002e862:	5f                   	pop    edi
c002e863:	5d                   	pop    ebp
c002e864:	c3                   	ret    
c002e865:	8d 76 00             	lea    esi,[esi+0x0]
c002e868:	39 c3                	cmp    ebx,eax
c002e86a:	73 db                	jae    c002e847 <__umoddi3+0xe7>
c002e86c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002e870:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c002e874:	89 d7                	mov    edi,edx
c002e876:	89 c6                	mov    esi,eax
c002e878:	eb cd                	jmp    c002e847 <__umoddi3+0xe7>

Disassembly of section .init:

c002e87a <_init>:
c002e87a:	55                   	push   ebp
c002e87b:	89 e5                	mov    ebp,esp
c002e87d:	e8 72 18 fd ff       	call   c00000f4 <frame_dummy>
c002e882:	e8 e5 fa ff ff       	call   c002e36c <__do_global_ctors_aux>
c002e887:	5d                   	pop    ebp
c002e888:	c3                   	ret    

Disassembly of section .fini:

c002e889 <_fini>:
c002e889:	55                   	push   ebp
c002e88a:	89 e5                	mov    ebp,esp
c002e88c:	e8 f3 17 fd ff       	call   c0000084 <__do_global_dtors_aux>
c002e891:	5d                   	pop    ebp
c002e892:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c002e894 <Computer::~Computer()>:
c002e894:	83 ec 0c             	sub    esp,0xc
c002e897:	ba c4 10 03 c0       	mov    edx,0xc00310c4
c002e89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e8a0:	89 10                	mov    DWORD PTR [eax],edx
c002e8a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e8a6:	83 ec 0c             	sub    esp,0xc
c002e8a9:	50                   	push   eax
c002e8aa:	e8 21 c9 fe ff       	call   c001b1d0 <Device::~Device()>
c002e8af:	83 c4 10             	add    esp,0x10
c002e8b2:	90                   	nop
c002e8b3:	83 c4 0c             	add    esp,0xc
c002e8b6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002e8b8 <Computer::~Computer()>:
c002e8b8:	83 ec 0c             	sub    esp,0xc
c002e8bb:	83 ec 0c             	sub    esp,0xc
c002e8be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e8c2:	e8 cd ff ff ff       	call   c002e894 <Computer::~Computer()>
c002e8c7:	83 c4 10             	add    esp,0x10
c002e8ca:	83 ec 08             	sub    esp,0x8
c002e8cd:	68 70 01 00 00       	push   0x170
c002e8d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e8d6:	e8 45 a8 fe ff       	call   c0019120 <operator delete(void*, unsigned long)>
c002e8db:	83 c4 10             	add    esp,0x10
c002e8de:	83 c4 0c             	add    esp,0xc
c002e8e1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c002e8e2 <idleCommon()>:
c002e8e2:	83 ec 0c             	sub    esp,0xc
c002e8e5:	fa                   	cli    
c002e8e6:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002e8ec:	e8 6b 69 ff ff       	call   c002525c <schedule()>
c002e8f1:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002e8f6:	48                   	dec    eax
c002e8f7:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002e8fc:	75 01                	jne    c002e8ff <idleCommon()+0x1d>
c002e8fe:	fb                   	sti    
c002e8ff:	83 c4 0c             	add    esp,0xc
c002e902:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002e904 <LinkedList<UnixFile>::~LinkedList()>:
c002e904:	90                   	nop
c002e905:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002e906 <LinkedList<UnixFile>::LinkedList()>:
c002e906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e90a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002e910:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e914:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002e91b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e91f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e926:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e92a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002e930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e934:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002e93b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e93f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e946:	90                   	nop
c002e947:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002e948 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002e948:	83 ec 0c             	sub    esp,0xc
c002e94b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002e950:	75 10                	jne    c002e962 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002e952:	83 ec 0c             	sub    esp,0xc
c002e955:	68 d8 12 03 c0       	push   0xc00312d8
c002e95a:	e8 07 19 ff ff       	call   c0020266 <KePanic(char const*)>
c002e95f:	83 c4 10             	add    esp,0x10
c002e962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e966:	8b 00                	mov    eax,DWORD PTR [eax]
c002e968:	85 c0                	test   eax,eax
c002e96a:	74 34                	je     c002e9a0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002e96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e970:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e973:	85 c0                	test   eax,eax
c002e975:	74 29                	je     c002e9a0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002e977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e97b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e97e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e982:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002e985:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e989:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e98d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002e990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e994:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e997:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e99e:	eb 65                	jmp    c002ea05 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002e9a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9a4:	8b 00                	mov    eax,DWORD PTR [eax]
c002e9a6:	85 c0                	test   eax,eax
c002e9a8:	75 4b                	jne    c002e9f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002e9aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e9b1:	85 c0                	test   eax,eax
c002e9b3:	75 40                	jne    c002e9f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002e9b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9b9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e9bd:	89 10                	mov    DWORD PTR [eax],edx
c002e9bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e9c7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002e9ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e9d1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e9d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e9df:	85 c0                	test   eax,eax
c002e9e1:	74 22                	je     c002ea05 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002e9e3:	83 ec 0c             	sub    esp,0xc
c002e9e6:	68 fa 12 03 c0       	push   0xc00312fa
c002e9eb:	e8 76 18 ff ff       	call   c0020266 <KePanic(char const*)>
c002e9f0:	83 c4 10             	add    esp,0x10
c002e9f3:	eb 10                	jmp    c002ea05 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002e9f5:	83 ec 0c             	sub    esp,0xc
c002e9f8:	68 04 13 03 c0       	push   0xc0031304
c002e9fd:	e8 64 18 ff ff       	call   c0020266 <KePanic(char const*)>
c002ea02:	83 c4 10             	add    esp,0x10
c002ea05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea09:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ea0c:	8d 50 01             	lea    edx,[eax+0x1]
c002ea0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea13:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ea16:	90                   	nop
c002ea17:	83 c4 0c             	add    esp,0xc
c002ea1a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002ea1c <LinkedList<UnixFile>::getFirstElement()>:
c002ea1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ea20:	8b 00                	mov    eax,DWORD PTR [eax]
c002ea22:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002ea24 <LinkedList<UnixFile>::removeFirst()>:
c002ea24:	83 ec 0c             	sub    esp,0xc
c002ea27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea2b:	8b 00                	mov    eax,DWORD PTR [eax]
c002ea2d:	85 c0                	test   eax,eax
c002ea2f:	75 12                	jne    c002ea43 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002ea31:	83 ec 0c             	sub    esp,0xc
c002ea34:	68 10 13 03 c0       	push   0xc0031310
c002ea39:	e8 28 18 ff ff       	call   c0020266 <KePanic(char const*)>
c002ea3e:	83 c4 10             	add    esp,0x10
c002ea41:	eb 7e                	jmp    c002eac1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002ea43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea47:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ea4a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ea4d:	85 c0                	test   eax,eax
c002ea4f:	74 10                	je     c002ea61 <LinkedList<UnixFile>::removeFirst()+0x3d>
c002ea51:	83 ec 0c             	sub    esp,0xc
c002ea54:	68 5b 13 03 c0       	push   0xc003135b
c002ea59:	e8 08 18 ff ff       	call   c0020266 <KePanic(char const*)>
c002ea5e:	83 c4 10             	add    esp,0x10
c002ea61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea65:	8b 00                	mov    eax,DWORD PTR [eax]
c002ea67:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ea6a:	85 c0                	test   eax,eax
c002ea6c:	75 33                	jne    c002eaa1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c002ea6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea72:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ea78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea7c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ea83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea87:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ea8a:	83 f8 01             	cmp    eax,0x1
c002ea8d:	74 21                	je     c002eab0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002ea8f:	83 ec 0c             	sub    esp,0xc
c002ea92:	68 34 13 03 c0       	push   0xc0031334
c002ea97:	e8 ca 17 ff ff       	call   c0020266 <KePanic(char const*)>
c002ea9c:	83 c4 10             	add    esp,0x10
c002ea9f:	eb 0f                	jmp    c002eab0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002eaa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eaa5:	8b 00                	mov    eax,DWORD PTR [eax]
c002eaa7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002eaaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eaae:	89 10                	mov    DWORD PTR [eax],edx
c002eab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eab4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eab7:	8d 50 ff             	lea    edx,[eax-0x1]
c002eaba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eabe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002eac1:	83 c4 0c             	add    esp,0xc
c002eac4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002eac6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002eac6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002eaca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eacd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002eace <DriverlessDevice::~DriverlessDevice()>:
c002eace:	ba 88 1f 03 c0       	mov    edx,0xc0031f88
c002ead3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ead7:	89 10                	mov    DWORD PTR [eax],edx
c002ead9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eadd:	50                   	push   eax
c002eade:	e8 ed c6 fe ff       	call   c001b1d0 <Device::~Device()>
c002eae3:	83 c4 04             	add    esp,0x4
c002eae6:	90                   	nop
c002eae7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002eae8 <DriverlessDevice::~DriverlessDevice()>:
c002eae8:	83 ec 0c             	sub    esp,0xc
c002eaeb:	83 ec 0c             	sub    esp,0xc
c002eaee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002eaf2:	e8 d7 ff ff ff       	call   c002eace <DriverlessDevice::~DriverlessDevice()>
c002eaf7:	83 c4 10             	add    esp,0x10
c002eafa:	83 ec 08             	sub    esp,0x8
c002eafd:	68 58 01 00 00       	push   0x158
c002eb02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002eb06:	e8 15 a6 fe ff       	call   c0019120 <operator delete(void*, unsigned long)>
c002eb0b:	83 c4 10             	add    esp,0x10
c002eb0e:	83 c4 0c             	add    esp,0xc
c002eb11:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002eb12 <LinkedList<Device>::addElement(Device*)>:
c002eb12:	83 ec 0c             	sub    esp,0xc
c002eb15:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002eb1a:	75 10                	jne    c002eb2c <LinkedList<Device>::addElement(Device*)+0x1a>
c002eb1c:	83 ec 0c             	sub    esp,0xc
c002eb1f:	68 d8 12 03 c0       	push   0xc00312d8
c002eb24:	e8 3d 17 ff ff       	call   c0020266 <KePanic(char const*)>
c002eb29:	83 c4 10             	add    esp,0x10
c002eb2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb30:	8b 00                	mov    eax,DWORD PTR [eax]
c002eb32:	85 c0                	test   eax,eax
c002eb34:	74 3a                	je     c002eb70 <LinkedList<Device>::addElement(Device*)+0x5e>
c002eb36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eb3d:	85 c0                	test   eax,eax
c002eb3f:	74 2f                	je     c002eb70 <LinkedList<Device>::addElement(Device*)+0x5e>
c002eb41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb45:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eb48:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002eb4c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002eb52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb56:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002eb5a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002eb5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb61:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eb64:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002eb6e:	eb 68                	jmp    c002ebd8 <LinkedList<Device>::addElement(Device*)+0xc6>
c002eb70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb74:	8b 00                	mov    eax,DWORD PTR [eax]
c002eb76:	85 c0                	test   eax,eax
c002eb78:	75 4e                	jne    c002ebc8 <LinkedList<Device>::addElement(Device*)+0xb6>
c002eb7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eb81:	85 c0                	test   eax,eax
c002eb83:	75 43                	jne    c002ebc8 <LinkedList<Device>::addElement(Device*)+0xb6>
c002eb85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb89:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002eb8d:	89 10                	mov    DWORD PTR [eax],edx
c002eb8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb93:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002eb97:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002eb9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eba1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002ebab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebaf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ebb2:	85 c0                	test   eax,eax
c002ebb4:	74 22                	je     c002ebd8 <LinkedList<Device>::addElement(Device*)+0xc6>
c002ebb6:	83 ec 0c             	sub    esp,0xc
c002ebb9:	68 fa 12 03 c0       	push   0xc00312fa
c002ebbe:	e8 a3 16 ff ff       	call   c0020266 <KePanic(char const*)>
c002ebc3:	83 c4 10             	add    esp,0x10
c002ebc6:	eb 10                	jmp    c002ebd8 <LinkedList<Device>::addElement(Device*)+0xc6>
c002ebc8:	83 ec 0c             	sub    esp,0xc
c002ebcb:	68 04 13 03 c0       	push   0xc0031304
c002ebd0:	e8 91 16 ff ff       	call   c0020266 <KePanic(char const*)>
c002ebd5:	83 c4 10             	add    esp,0x10
c002ebd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebdc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ebdf:	8d 50 01             	lea    edx,[eax+0x1]
c002ebe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebe6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ebe9:	90                   	nop
c002ebea:	83 c4 0c             	add    esp,0xc
c002ebed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002ebee <LinkedList<Device>::LinkedList()>:
c002ebee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ebf2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ebf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ebfc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ec03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec07:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ec0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec12:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ec18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ec23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec27:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ec2e:	90                   	nop
c002ec2f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002ec30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002ec30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec34:	8b 00                	mov    eax,DWORD PTR [eax]
c002ec36:	85 c0                	test   eax,eax
c002ec38:	75 0e                	jne    c002ec48 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002ec3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ec41:	85 c0                	test   eax,eax
c002ec43:	75 03                	jne    c002ec48 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002ec45:	b0 01                	mov    al,0x1
c002ec47:	c3                   	ret    
c002ec48:	b0 00                	mov    al,0x0
c002ec4a:	90                   	nop
c002ec4b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002ec4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002ec4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec50:	8b 00                	mov    eax,DWORD PTR [eax]
c002ec52:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002ec54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002ec54:	83 ec 0c             	sub    esp,0xc
c002ec57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec5b:	8b 00                	mov    eax,DWORD PTR [eax]
c002ec5d:	85 c0                	test   eax,eax
c002ec5f:	75 17                	jne    c002ec78 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c002ec61:	83 ec 0c             	sub    esp,0xc
c002ec64:	68 10 13 03 c0       	push   0xc0031310
c002ec69:	e8 f8 15 ff ff       	call   c0020266 <KePanic(char const*)>
c002ec6e:	83 c4 10             	add    esp,0x10
c002ec71:	e9 96 00 00 00       	jmp    c002ed0c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c002ec76:	66 90                	xchg   ax,ax
c002ec78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ec7f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002ec82:	85 c0                	test   eax,eax
c002ec84:	0f 95 c0             	setne  al
c002ec87:	0f b6 c0             	movzx  eax,al
c002ec8a:	85 c0                	test   eax,eax
c002ec8c:	74 12                	je     c002eca0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c002ec8e:	83 ec 0c             	sub    esp,0xc
c002ec91:	68 5b 13 03 c0       	push   0xc003135b
c002ec96:	e8 cb 15 ff ff       	call   c0020266 <KePanic(char const*)>
c002ec9b:	83 c4 10             	add    esp,0x10
c002ec9e:	66 90                	xchg   ax,ax
c002eca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eca4:	8b 00                	mov    eax,DWORD PTR [eax]
c002eca6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002eca9:	85 c0                	test   eax,eax
c002ecab:	0f 94 c0             	sete   al
c002ecae:	0f b6 c0             	movzx  eax,al
c002ecb1:	85 c0                	test   eax,eax
c002ecb3:	74 33                	je     c002ece8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c002ecb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecb9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ecbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecc3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ecca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecce:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ecd1:	83 f8 01             	cmp    eax,0x1
c002ecd4:	74 22                	je     c002ecf8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002ecd6:	83 ec 0c             	sub    esp,0xc
c002ecd9:	68 34 13 03 c0       	push   0xc0031334
c002ecde:	e8 83 15 ff ff       	call   c0020266 <KePanic(char const*)>
c002ece3:	83 c4 10             	add    esp,0x10
c002ece6:	eb 10                	jmp    c002ecf8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002ece8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecec:	8b 00                	mov    eax,DWORD PTR [eax]
c002ecee:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002ecf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecf5:	89 10                	mov    DWORD PTR [eax],edx
c002ecf7:	90                   	nop
c002ecf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecfc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ecff:	8d 50 ff             	lea    edx,[eax-0x1]
c002ed02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed06:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ed09:	8d 76 00             	lea    esi,[esi+0x0]
c002ed0c:	83 c4 0c             	add    esp,0xc
c002ed0f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002ed10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002ed10:	83 ec 0c             	sub    esp,0xc
c002ed13:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002ed18:	75 12                	jne    c002ed2c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c002ed1a:	83 ec 0c             	sub    esp,0xc
c002ed1d:	68 d8 12 03 c0       	push   0xc00312d8
c002ed22:	e8 3f 15 ff ff       	call   c0020266 <KePanic(char const*)>
c002ed27:	83 c4 10             	add    esp,0x10
c002ed2a:	66 90                	xchg   ax,ax
c002ed2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed30:	8b 00                	mov    eax,DWORD PTR [eax]
c002ed32:	85 c0                	test   eax,eax
c002ed34:	74 36                	je     c002ed6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002ed36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ed3d:	85 c0                	test   eax,eax
c002ed3f:	74 2b                	je     c002ed6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002ed41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed45:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ed48:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ed4c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002ed4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed53:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ed57:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ed5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ed61:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002ed68:	eb 6a                	jmp    c002edd4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002ed6a:	66 90                	xchg   ax,ax
c002ed6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed70:	8b 00                	mov    eax,DWORD PTR [eax]
c002ed72:	85 c0                	test   eax,eax
c002ed74:	75 4e                	jne    c002edc4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002ed76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ed7d:	85 c0                	test   eax,eax
c002ed7f:	75 43                	jne    c002edc4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002ed81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed85:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ed89:	89 10                	mov    DWORD PTR [eax],edx
c002ed8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed8f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ed93:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ed96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ed9d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002eda4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eda8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002edab:	85 c0                	test   eax,eax
c002edad:	74 25                	je     c002edd4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002edaf:	83 ec 0c             	sub    esp,0xc
c002edb2:	68 fa 12 03 c0       	push   0xc00312fa
c002edb7:	e8 aa 14 ff ff       	call   c0020266 <KePanic(char const*)>
c002edbc:	83 c4 10             	add    esp,0x10
c002edbf:	eb 13                	jmp    c002edd4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002edc1:	8d 76 00             	lea    esi,[esi+0x0]
c002edc4:	83 ec 0c             	sub    esp,0xc
c002edc7:	68 04 13 03 c0       	push   0xc0031304
c002edcc:	e8 95 14 ff ff       	call   c0020266 <KePanic(char const*)>
c002edd1:	83 c4 10             	add    esp,0x10
c002edd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edd8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eddb:	8d 50 01             	lea    edx,[eax+0x1]
c002edde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ede2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ede5:	90                   	nop
c002ede6:	83 c4 0c             	add    esp,0xc
c002ede9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c002edec <ACPI::~ACPI()>:
c002edec:	83 ec 0c             	sub    esp,0xc
c002edef:	ba 40 26 03 c0       	mov    edx,0xc0032640
c002edf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edf8:	89 10                	mov    DWORD PTR [eax],edx
c002edfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edfe:	83 ec 0c             	sub    esp,0xc
c002ee01:	50                   	push   eax
c002ee02:	e8 c9 c3 fe ff       	call   c001b1d0 <Device::~Device()>
c002ee07:	83 c4 10             	add    esp,0x10
c002ee0a:	90                   	nop
c002ee0b:	83 c4 0c             	add    esp,0xc
c002ee0e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002ee10 <ACPI::~ACPI()>:
c002ee10:	83 ec 0c             	sub    esp,0xc
c002ee13:	83 ec 0c             	sub    esp,0xc
c002ee16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ee1a:	e8 cd ff ff ff       	call   c002edec <ACPI::~ACPI()>
c002ee1f:	83 c4 10             	add    esp,0x10
c002ee22:	83 ec 08             	sub    esp,0x8
c002ee25:	68 64 12 00 00       	push   0x1264
c002ee2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ee2e:	e8 ed a2 fe ff       	call   c0019120 <operator delete(void*, unsigned long)>
c002ee33:	83 c4 10             	add    esp,0x10
c002ee36:	83 c4 0c             	add    esp,0xc
c002ee39:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002ee3c <LinkedList<Device>::~LinkedList()>:
c002ee3c:	90                   	nop
c002ee3d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002ee40 <LinkedList<Device>::isEmpty()>:
c002ee40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee44:	8b 00                	mov    eax,DWORD PTR [eax]
c002ee46:	85 c0                	test   eax,eax
c002ee48:	75 0e                	jne    c002ee58 <LinkedList<Device>::isEmpty()+0x18>
c002ee4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ee51:	85 c0                	test   eax,eax
c002ee53:	75 03                	jne    c002ee58 <LinkedList<Device>::isEmpty()+0x18>
c002ee55:	b0 01                	mov    al,0x1
c002ee57:	c3                   	ret    
c002ee58:	b0 00                	mov    al,0x0
c002ee5a:	90                   	nop
c002ee5b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002ee5c <LinkedList<Device>::getFirstElement()>:
c002ee5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee60:	8b 00                	mov    eax,DWORD PTR [eax]
c002ee62:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c002ee64 <LinkedList<Device>::removeFirst()>:
c002ee64:	83 ec 0c             	sub    esp,0xc
c002ee67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee6b:	8b 00                	mov    eax,DWORD PTR [eax]
c002ee6d:	85 c0                	test   eax,eax
c002ee6f:	75 17                	jne    c002ee88 <LinkedList<Device>::removeFirst()+0x24>
c002ee71:	83 ec 0c             	sub    esp,0xc
c002ee74:	68 10 13 03 c0       	push   0xc0031310
c002ee79:	e8 e8 13 ff ff       	call   c0020266 <KePanic(char const*)>
c002ee7e:	83 c4 10             	add    esp,0x10
c002ee81:	e9 92 00 00 00       	jmp    c002ef18 <LinkedList<Device>::removeFirst()+0xb4>
c002ee86:	66 90                	xchg   ax,ax
c002ee88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ee8f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002ee95:	85 c0                	test   eax,eax
c002ee97:	74 13                	je     c002eeac <LinkedList<Device>::removeFirst()+0x48>
c002ee99:	83 ec 0c             	sub    esp,0xc
c002ee9c:	68 5b 13 03 c0       	push   0xc003135b
c002eea1:	e8 c0 13 ff ff       	call   c0020266 <KePanic(char const*)>
c002eea6:	83 c4 10             	add    esp,0x10
c002eea9:	8d 76 00             	lea    esi,[esi+0x0]
c002eeac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eeb0:	8b 00                	mov    eax,DWORD PTR [eax]
c002eeb2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002eeb8:	85 c0                	test   eax,eax
c002eeba:	75 34                	jne    c002eef0 <LinkedList<Device>::removeFirst()+0x8c>
c002eebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eec0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002eec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eeca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002eed1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eed5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eed8:	83 f8 01             	cmp    eax,0x1
c002eedb:	74 27                	je     c002ef04 <LinkedList<Device>::removeFirst()+0xa0>
c002eedd:	83 ec 0c             	sub    esp,0xc
c002eee0:	68 34 13 03 c0       	push   0xc0031334
c002eee5:	e8 7c 13 ff ff       	call   c0020266 <KePanic(char const*)>
c002eeea:	83 c4 10             	add    esp,0x10
c002eeed:	eb 15                	jmp    c002ef04 <LinkedList<Device>::removeFirst()+0xa0>
c002eeef:	90                   	nop
c002eef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eef4:	8b 00                	mov    eax,DWORD PTR [eax]
c002eef6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002eefc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef00:	89 10                	mov    DWORD PTR [eax],edx
c002ef02:	66 90                	xchg   ax,ax
c002ef04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef08:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ef0b:	8d 50 ff             	lea    edx,[eax-0x1]
c002ef0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef12:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ef15:	8d 76 00             	lea    esi,[esi+0x0]
c002ef18:	83 c4 0c             	add    esp,0xc
c002ef1b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002ef1c <CPU::~CPU()>:
c002ef1c:	83 ec 0c             	sub    esp,0xc
c002ef1f:	ba e8 27 03 c0       	mov    edx,0xc00327e8
c002ef24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef28:	89 10                	mov    DWORD PTR [eax],edx
c002ef2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef2e:	83 ec 0c             	sub    esp,0xc
c002ef31:	50                   	push   eax
c002ef32:	e8 99 c2 fe ff       	call   c001b1d0 <Device::~Device()>
c002ef37:	83 c4 10             	add    esp,0x10
c002ef3a:	90                   	nop
c002ef3b:	83 c4 0c             	add    esp,0xc
c002ef3e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002ef40 <CPU::~CPU()>:
c002ef40:	83 ec 0c             	sub    esp,0xc
c002ef43:	83 ec 0c             	sub    esp,0xc
c002ef46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ef4a:	e8 cd ff ff ff       	call   c002ef1c <CPU::~CPU()>
c002ef4f:	83 c4 10             	add    esp,0x10
c002ef52:	83 ec 08             	sub    esp,0x8
c002ef55:	68 94 11 00 00       	push   0x1194
c002ef5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ef5e:	e8 bd a1 fe ff       	call   c0019120 <operator delete(void*, unsigned long)>
c002ef63:	83 c4 10             	add    esp,0x10
c002ef66:	83 c4 0c             	add    esp,0xc
c002ef69:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002ef6c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002ef6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002ef70:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002ef73:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002ef74 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002ef74:	90                   	nop
c002ef75:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c002ef78 <ThreadControlBlock::ThreadControlBlock()>:
c002ef78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef7c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002ef83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef87:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002ef8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef92:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c002ef99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef9d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002efa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002efa8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002efaf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002efb3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002efb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002efbb:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002efbf:	90                   	nop
c002efc0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002efc4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002efc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002efc8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002efce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002efd2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002efd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002efdd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002efe4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002efe8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002efee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eff2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002eff9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002effd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f004:	90                   	nop
c002f005:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002f006 <PCI::~PCI()>:
c002f006:	83 ec 0c             	sub    esp,0xc
c002f009:	ba 08 37 03 c0       	mov    edx,0xc0033708
c002f00e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f012:	89 10                	mov    DWORD PTR [eax],edx
c002f014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f018:	83 ec 0c             	sub    esp,0xc
c002f01b:	50                   	push   eax
c002f01c:	e8 47 bc fe ff       	call   c001ac68 <Bus::~Bus()>
c002f021:	83 c4 10             	add    esp,0x10
c002f024:	90                   	nop
c002f025:	83 c4 0c             	add    esp,0xc
c002f028:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002f02a <PCI::~PCI()>:
c002f02a:	83 ec 0c             	sub    esp,0xc
c002f02d:	83 ec 0c             	sub    esp,0xc
c002f030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f034:	e8 cd ff ff ff       	call   c002f006 <PCI::~PCI()>
c002f039:	83 c4 10             	add    esp,0x10
c002f03c:	83 ec 08             	sub    esp,0x8
c002f03f:	68 5c 01 00 00       	push   0x15c
c002f044:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f048:	e8 d3 a0 fe ff       	call   c0019120 <operator delete(void*, unsigned long)>
c002f04d:	83 c4 10             	add    esp,0x10
c002f050:	83 c4 0c             	add    esp,0xc
c002f053:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002f054 <IDE::~IDE()>:
c002f054:	83 ec 0c             	sub    esp,0xc
c002f057:	ba bc 37 03 c0       	mov    edx,0xc00337bc
c002f05c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f060:	89 10                	mov    DWORD PTR [eax],edx
c002f062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f066:	83 ec 0c             	sub    esp,0xc
c002f069:	50                   	push   eax
c002f06a:	e8 f1 c5 fe ff       	call   c001b660 <HardDiskController::~HardDiskController()>
c002f06f:	83 c4 10             	add    esp,0x10
c002f072:	90                   	nop
c002f073:	83 c4 0c             	add    esp,0xc
c002f076:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002f078 <IDE::~IDE()>:
c002f078:	83 ec 0c             	sub    esp,0xc
c002f07b:	83 ec 0c             	sub    esp,0xc
c002f07e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f082:	e8 cd ff ff ff       	call   c002f054 <IDE::~IDE()>
c002f087:	83 c4 10             	add    esp,0x10
c002f08a:	83 ec 08             	sub    esp,0x8
c002f08d:	68 70 02 00 00       	push   0x270
c002f092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f096:	e8 85 a0 fe ff       	call   c0019120 <operator delete(void*, unsigned long)>
c002f09b:	83 c4 10             	add    esp,0x10
c002f09e:	83 c4 0c             	add    esp,0xc
c002f0a1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002f0a2 <SATABus::~SATABus()>:
c002f0a2:	83 ec 0c             	sub    esp,0xc
c002f0a5:	ba 0c 38 03 c0       	mov    edx,0xc003380c
c002f0aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0ae:	89 10                	mov    DWORD PTR [eax],edx
c002f0b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0b4:	83 ec 0c             	sub    esp,0xc
c002f0b7:	50                   	push   eax
c002f0b8:	e8 a3 c5 fe ff       	call   c001b660 <HardDiskController::~HardDiskController()>
c002f0bd:	83 c4 10             	add    esp,0x10
c002f0c0:	90                   	nop
c002f0c1:	83 c4 0c             	add    esp,0xc
c002f0c4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002f0c6 <SATABus::~SATABus()>:
c002f0c6:	83 ec 0c             	sub    esp,0xc
c002f0c9:	83 ec 0c             	sub    esp,0xc
c002f0cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f0d0:	e8 cd ff ff ff       	call   c002f0a2 <SATABus::~SATABus()>
c002f0d5:	83 c4 10             	add    esp,0x10
c002f0d8:	83 ec 08             	sub    esp,0x8
c002f0db:	68 64 01 00 00       	push   0x164
c002f0e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f0e4:	e8 37 a0 fe ff       	call   c0019120 <operator delete(void*, unsigned long)>
c002f0e9:	83 c4 10             	add    esp,0x10
c002f0ec:	83 c4 0c             	add    esp,0xc
c002f0ef:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c002f0f0 <ATA::~ATA()>:
c002f0f0:	83 ec 0c             	sub    esp,0xc
c002f0f3:	ba 4c 38 03 c0       	mov    edx,0xc003384c
c002f0f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0fc:	89 10                	mov    DWORD PTR [eax],edx
c002f0fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f102:	83 ec 0c             	sub    esp,0xc
c002f105:	50                   	push   eax
c002f106:	e8 37 c6 fe ff       	call   c001b742 <PhysicalDisk::~PhysicalDisk()>
c002f10b:	83 c4 10             	add    esp,0x10
c002f10e:	90                   	nop
c002f10f:	83 c4 0c             	add    esp,0xc
c002f112:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002f114 <ATA::~ATA()>:
c002f114:	83 ec 0c             	sub    esp,0xc
c002f117:	83 ec 0c             	sub    esp,0xc
c002f11a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f11e:	e8 cd ff ff ff       	call   c002f0f0 <ATA::~ATA()>
c002f123:	83 c4 10             	add    esp,0x10
c002f126:	83 ec 08             	sub    esp,0x8
c002f129:	68 7c 01 00 00       	push   0x17c
c002f12e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f132:	e8 e9 9f fe ff       	call   c0019120 <operator delete(void*, unsigned long)>
c002f137:	83 c4 10             	add    esp,0x10
c002f13a:	83 c4 0c             	add    esp,0xc
c002f13d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002f13e <ATAPI::~ATAPI()>:
c002f13e:	83 ec 0c             	sub    esp,0xc
c002f141:	ba 94 38 03 c0       	mov    edx,0xc0033894
c002f146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f14a:	89 10                	mov    DWORD PTR [eax],edx
c002f14c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f150:	83 ec 0c             	sub    esp,0xc
c002f153:	50                   	push   eax
c002f154:	e8 e9 c5 fe ff       	call   c001b742 <PhysicalDisk::~PhysicalDisk()>
c002f159:	83 c4 10             	add    esp,0x10
c002f15c:	90                   	nop
c002f15d:	83 c4 0c             	add    esp,0xc
c002f160:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002f162 <ATAPI::~ATAPI()>:
c002f162:	83 ec 0c             	sub    esp,0xc
c002f165:	83 ec 0c             	sub    esp,0xc
c002f168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f16c:	e8 cd ff ff ff       	call   c002f13e <ATAPI::~ATAPI()>
c002f171:	83 c4 10             	add    esp,0x10
c002f174:	83 ec 08             	sub    esp,0x8
c002f177:	68 84 01 00 00       	push   0x184
c002f17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f180:	e8 9b 9f fe ff       	call   c0019120 <operator delete(void*, unsigned long)>
c002f185:	83 c4 10             	add    esp,0x10
c002f188:	83 c4 0c             	add    esp,0xc
c002f18b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002f18c <SATA::~SATA()>:
c002f18c:	83 ec 0c             	sub    esp,0xc
c002f18f:	ba 54 39 03 c0       	mov    edx,0xc0033954
c002f194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f198:	89 10                	mov    DWORD PTR [eax],edx
c002f19a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f19e:	83 ec 0c             	sub    esp,0xc
c002f1a1:	50                   	push   eax
c002f1a2:	e8 9b c5 fe ff       	call   c001b742 <PhysicalDisk::~PhysicalDisk()>
c002f1a7:	83 c4 10             	add    esp,0x10
c002f1aa:	90                   	nop
c002f1ab:	83 c4 0c             	add    esp,0xc
c002f1ae:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c002f1b0 <SATA::~SATA()>:
c002f1b0:	83 ec 0c             	sub    esp,0xc
c002f1b3:	83 ec 0c             	sub    esp,0xc
c002f1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f1ba:	e8 cd ff ff ff       	call   c002f18c <SATA::~SATA()>
c002f1bf:	83 c4 10             	add    esp,0x10
c002f1c2:	83 ec 08             	sub    esp,0x8
c002f1c5:	68 7c 01 00 00       	push   0x17c
c002f1ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f1ce:	e8 4d 9f fe ff       	call   c0019120 <operator delete(void*, unsigned long)>
c002f1d3:	83 c4 10             	add    esp,0x10
c002f1d6:	83 c4 0c             	add    esp,0xc
c002f1d9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002f1da <SATAPI::~SATAPI()>:
c002f1da:	83 ec 0c             	sub    esp,0xc
c002f1dd:	ba 78 3a 03 c0       	mov    edx,0xc0033a78
c002f1e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1e6:	89 10                	mov    DWORD PTR [eax],edx
c002f1e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1ec:	83 ec 0c             	sub    esp,0xc
c002f1ef:	50                   	push   eax
c002f1f0:	e8 4d c5 fe ff       	call   c001b742 <PhysicalDisk::~PhysicalDisk()>
c002f1f5:	83 c4 10             	add    esp,0x10
c002f1f8:	90                   	nop
c002f1f9:	83 c4 0c             	add    esp,0xc
c002f1fc:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002f1fe <SATAPI::~SATAPI()>:
c002f1fe:	83 ec 0c             	sub    esp,0xc
c002f201:	83 ec 0c             	sub    esp,0xc
c002f204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f208:	e8 cd ff ff ff       	call   c002f1da <SATAPI::~SATAPI()>
c002f20d:	83 c4 10             	add    esp,0x10
c002f210:	83 ec 08             	sub    esp,0x8
c002f213:	68 84 01 00 00       	push   0x184
c002f218:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f21c:	e8 ff 9e fe ff       	call   c0019120 <operator delete(void*, unsigned long)>
c002f221:	83 c4 10             	add    esp,0x10
c002f224:	83 c4 0c             	add    esp,0xc
c002f227:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002f228 <IOAPIC::~IOAPIC()>:
c002f228:	83 ec 0c             	sub    esp,0xc
c002f22b:	ba b8 3a 03 c0       	mov    edx,0xc0033ab8
c002f230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f234:	89 10                	mov    DWORD PTR [eax],edx
c002f236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f23a:	83 ec 0c             	sub    esp,0xc
c002f23d:	50                   	push   eax
c002f23e:	e8 8d bf fe ff       	call   c001b1d0 <Device::~Device()>
c002f243:	83 c4 10             	add    esp,0x10
c002f246:	90                   	nop
c002f247:	83 c4 0c             	add    esp,0xc
c002f24a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002f24c <IOAPIC::~IOAPIC()>:
c002f24c:	83 ec 0c             	sub    esp,0xc
c002f24f:	83 ec 0c             	sub    esp,0xc
c002f252:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f256:	e8 cd ff ff ff       	call   c002f228 <IOAPIC::~IOAPIC()>
c002f25b:	83 c4 10             	add    esp,0x10
c002f25e:	83 ec 08             	sub    esp,0x8
c002f261:	68 68 01 00 00       	push   0x168
c002f266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f26a:	e8 b1 9e fe ff       	call   c0019120 <operator delete(void*, unsigned long)>
c002f26f:	83 c4 10             	add    esp,0x10
c002f272:	83 c4 0c             	add    esp,0xc
c002f275:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002f278 <APICTimer::~APICTimer()>:
c002f278:	83 ec 0c             	sub    esp,0xc
c002f27b:	ba 00 3b 03 c0       	mov    edx,0xc0033b00
c002f280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f284:	89 10                	mov    DWORD PTR [eax],edx
c002f286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f28a:	83 ec 0c             	sub    esp,0xc
c002f28d:	50                   	push   eax
c002f28e:	e8 19 da fe ff       	call   c001ccac <Timer::~Timer()>
c002f293:	83 c4 10             	add    esp,0x10
c002f296:	90                   	nop
c002f297:	83 c4 0c             	add    esp,0xc
c002f29a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002f29c <APICTimer::~APICTimer()>:
c002f29c:	83 ec 0c             	sub    esp,0xc
c002f29f:	83 ec 0c             	sub    esp,0xc
c002f2a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f2a6:	e8 cd ff ff ff       	call   c002f278 <APICTimer::~APICTimer()>
c002f2ab:	83 c4 10             	add    esp,0x10
c002f2ae:	83 ec 08             	sub    esp,0x8
c002f2b1:	68 60 01 00 00       	push   0x160
c002f2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f2ba:	e8 61 9e fe ff       	call   c0019120 <operator delete(void*, unsigned long)>
c002f2bf:	83 c4 10             	add    esp,0x10
c002f2c2:	83 c4 0c             	add    esp,0xc
c002f2c5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002f2c8 <PIT::~PIT()>:
c002f2c8:	83 ec 0c             	sub    esp,0xc
c002f2cb:	ba 50 3b 03 c0       	mov    edx,0xc0033b50
c002f2d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f2d4:	89 10                	mov    DWORD PTR [eax],edx
c002f2d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f2da:	83 ec 0c             	sub    esp,0xc
c002f2dd:	50                   	push   eax
c002f2de:	e8 c9 d9 fe ff       	call   c001ccac <Timer::~Timer()>
c002f2e3:	83 c4 10             	add    esp,0x10
c002f2e6:	90                   	nop
c002f2e7:	83 c4 0c             	add    esp,0xc
c002f2ea:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002f2ec <PIT::~PIT()>:
c002f2ec:	83 ec 0c             	sub    esp,0xc
c002f2ef:	83 ec 0c             	sub    esp,0xc
c002f2f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f2f6:	e8 cd ff ff ff       	call   c002f2c8 <PIT::~PIT()>
c002f2fb:	83 c4 10             	add    esp,0x10
c002f2fe:	83 ec 08             	sub    esp,0x8
c002f301:	68 5c 01 00 00       	push   0x15c
c002f306:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f30a:	e8 11 9e fe ff       	call   c0019120 <operator delete(void*, unsigned long)>
c002f30f:	83 c4 10             	add    esp,0x10
c002f312:	83 c4 0c             	add    esp,0xc
c002f315:	c3                   	ret    

Disassembly of section userkernel:

c0035000 <KiDefaultSignalHandlerAbort(int)>:
c0035000:	57                   	push   edi
c0035001:	b9 07 00 00 00       	mov    ecx,0x7
c0035006:	56                   	push   esi
c0035007:	be 3b 29 03 c0       	mov    esi,0xc003293b
c003500c:	83 ec 24             	sub    esp,0x24
c003500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0035013:	fc                   	cld    
c0035014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0035016:	8d 44 24 04          	lea    eax,[esp+0x4]
c003501a:	50                   	push   eax
c003501b:	6a 00                	push   0x0
c003501d:	6a 38                	push   0x38
c003501f:	6a 01                	push   0x1
c0035021:	e8 2c 00 00 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0035026:	83 c4 34             	add    esp,0x34
c0035029:	5e                   	pop    esi
c003502a:	5f                   	pop    edi
c003502b:	c3                   	ret    

c003502c <KiDefaultSignalHandlerTerminate(int)>:
c003502c:	57                   	push   edi
c003502d:	b9 08 00 00 00       	mov    ecx,0x8
c0035032:	56                   	push   esi
c0035033:	be 57 29 03 c0       	mov    esi,0xc0032957
c0035038:	83 ec 24             	sub    esp,0x24
c003503b:	89 e7                	mov    edi,esp
c003503d:	fc                   	cld    
c003503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0035040:	54                   	push   esp
c0035041:	6a 00                	push   0x0
c0035043:	6a 37                	push   0x37
c0035045:	6a 01                	push   0x1
c0035047:	e8 06 00 00 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c003504c:	83 c4 34             	add    esp,0x34
c003504f:	5e                   	pop    esi
c0035050:	5f                   	pop    edi
c0035051:	c3                   	ret    

c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0035052:	53                   	push   ebx
c0035053:	83 ec 10             	sub    esp,0x10
c0035056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c003505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c003505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0035062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0035066:	cd 60                	int    0x60
c0035068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c003506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0035070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0035074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0035078:	83 c4 10             	add    esp,0x10
c003507b:	5b                   	pop    ebx
c003507c:	c3                   	ret    

Disassembly of section align_previous:

c0036000 <DO_NOT_DELETE()>:
c0036000:	c3                   	ret    
